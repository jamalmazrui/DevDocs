<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Liberation Sans";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Liberation Serif";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Liberation Mono";
	panose-1:2 7 4 9 2 2 5 2 4 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:.2pt;
	margin-bottom:.2pt;
	margin-left:.5pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-.5pt;
	line-height:141%;
	font-size:10.0pt;
	font-family:"Liberation Serif",serif;
	color:black;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:3.2pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:24.0pt;
	font-family:"Liberation Serif",serif;
	color:black;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.15pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Liberation Sans",sans-serif;
	color:black;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:7.15pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"Liberation Sans",sans-serif;
	color:black;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Liberation Sans",sans-serif;
	color:black;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Liberation Sans",sans-serif;
	color:black;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Liberation Serif",serif;
	color:black;
	font-weight:bold;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:594.95pt 841.9pt;
	margin:35.7pt 43.35pt 54.3pt 43.5pt;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:594.95pt 841.9pt;
	margin:45.75pt 54.15pt 1.0in 43.5pt;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:594.95pt 841.9pt;
	margin:35.65pt 43.25pt 54.2pt 43.5pt;}
div.WordSection3
	{page:WordSection3;}
@page WordSection4
	{size:594.95pt 841.9pt;
	margin:37.45pt 411.2pt 60.95pt 43.5pt;}
div.WordSection4
	{page:WordSection4;}
@page WordSection5
	{size:594.95pt 841.9pt;
	margin:37.45pt 43.45pt 63.3pt 43.5pt;}
div.WordSection5
	{page:WordSection5;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
0in;line-height:107%'><b><span style='font-size:25.0pt;line-height:107%'>Lua
Programming/Print version</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:16.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img width=677 height=2 id="Group 95981"
src="Lua%20Programming_files/image001.gif"></span></p>

<h1 style='margin-left:-.25pt'>Introduction</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>Lua (not &quot;LUA&quot;, which is incorrect although
common) is a powerful, fast, lightweight and embeddable programming language.
It is used by many frameworks, games and other applications. While it can be
used by itself, it has been designed to be easy to embed in another
application. It is implemented in ANSI C, a subset of the C programming
language that is very portable, which means it can run on many systems and many
devices where most other scripting languages would not be able to run. The purpose
of this book is to teach Lua programming to anyone regardless of previous
programming experience. The book can be used as an introduction to programming,
for someone who has never programmed before, or as an introduction to Lua, for
people who have programmed before but not in Lua. Since there are many
development platforms and games that use Lua, this book can also be used to
learn to use Lua and then to use it in that development platform.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>This book aims to teach usage of the latest version of Lua.
This means it will be attempted to regularly update it as new versions of Lua
come out (Lua releases are infrequent enough that this should not be too
difficult). Currently, the book is up-to-date for Lua 5.2, which is the
previous version. If you are using Lua in an embedded environment that uses an
older version of Lua in the 5.x branch (Lua 5.0 and Lua 5.1), the material
should still be sufficiently relevant for you.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15in;
margin-left:-.25pt'>Lua was designed and is being maintained at the Pontifical
Catholic University of Rio de Janeiro, which is located in Brazil. Its creators
are Roberto Ierusalimschy, Waldemar Celes and Luiz Henrique de Figueiredo.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:0in;margin-left:46.25pt;text-align:left;line-height:98%'><img
width=2 height=126 src="Lua%20Programming_files/image002.gif" align=left
hspace=12><span style='font-size:12.0pt;line-height:98%'>&quot;Lua&quot;
(pronounced LOO-ah) means &quot;Moon&quot; in Portuguese. As such, it is
neither an acronym nor an abbreviation, but a noun. More specifically,
&quot;Lua&quot; is a name, the name of the Earth's moon and the name of the
language. Like most names, it should be written in lower case with an initial
capital, that is, &quot;Lua&quot;. Please do not write it as &quot;LUA&quot;,
which is both ugly and confusing, because then it becomes an acronym with
different meanings for different people. So, please, write &quot;Lua&quot;
right!</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:12.5pt;margin-left:46.25pt;text-align:left;line-height:98%'><span
style='font-size:12.0pt;line-height:98%'>—Lua authors, </span><a
href="http://www.lua.org/about.html"><i><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>About Lua</span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.35pt;
margin-left:-.25pt;line-height:107%'>Lua comes from two languages that were
designed by TeCGraf (a laboratory at the Pontifical Catholic University of Rio
de</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.35pt;
margin-left:-.25pt;line-height:107%'>Janeiro): DEL and Sol. DEL means
&quot;data entry language&quot;, while Sol means &quot;simple object
language&quot; and also means sun in</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Portuguese, which is why the name Lua was chosen, since it
means &quot;moon&quot; in Portuguese. It was created for Petrobras, a Brazilian
oil company, but was also used in many other projects in TeCGraf, and is now
used in a multitude of projects worldwide. Lua is one of the leading languages
in the field of embedded game development.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>One of the main advantages of Lua is its simplicity. Some
companies use it exclusively because of that advantage: they think their
employees would be able to work better if they could use a programming language
to perform certain tasks, but they cannot afford to give to their employees a
full course on a complicated programming language. Some very simple languages
like Bash or Batch here would not be powerful enough to perform these tasks,
but Lua is both powerful and simple. Another of the important advantages of Lua
is its capability to be embedded, which was one of the most important
characteristics of it throughout all of its development. Games like or World of
Warcraft or ROBLOX need to be able to embed Lua in their application so users
of the application can use it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>Programming, which is also sometimes called scripting in
the case of programs that run inside embedded applications, is the process of
writing computer programs. A programming language is a language used to give
instructions to a computer through computer code that is contained in a
computer program. A programming language consists of two things: a syntax,
which is like grammar in English, and libraries, basic functions provided with
the language. These libraries could be compared with vocabulary in English.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Hello, world!</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 102381"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15in;
margin-left:-.25pt'>Lua can either be used embedded in an application or by
itself. This book will not describe the process to install Lua on your
computer, but you can execute code using <a href="http://codepad.org/"><span
style='color:black;text-decoration:none'>codepad (http://codepad.org)</span></a>
or <a href="http://www.lua.org/demo.html"><span style='color:black;text-decoration:
none'>the Lua demo (http://www.lua.org/demo.html)</span></a>. The first example
of Lua code in this book will be the basic and traditional hello world program.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:0in;margin-left:46.25pt;text-align:left;line-height:98%'><span
style='position:relative;z-index:-1895824384'><span style='left:0px;position:
absolute;left:0px;top:-1px;width:678px;height:161px'><img width=678 height=161
src="Lua%20Programming_files/image003.gif"></span></span><span
style='font-size:12.0pt;line-height:98%'>A <b>&quot;Hello world&quot; program</b>
is a computer program that outputs &quot;Hello, world&quot; on a display
device. Because it is typically one of the simplest programs possible in most
programming languages, it is by tradition often used to illustrate to beginners
the most basic syntax of a programming language, or to verify that a language
or system is operating correctly.</span></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:15.85pt;margin-left:
46.25pt'><span style='font-size:12.0pt;line-height:107%;font-family:"Liberation Serif",serif;
font-weight:normal'>—Wikipedia, </span><a
href="https://en.wikipedia.org/wiki/Hello_world_program"><i><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Serif",serif;
color:black;font-weight:normal;text-decoration:none'>Hello world program</span></i></a></h2>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:21.4pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>print</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>&quot;Hello, world!&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.15pt;
margin-left:-.25pt'>The code above prints the text <span style='font-family:
"Liberation Mono"'>Hello, world!</span> to the output, printing referring to
displaying text in the output, not to printing something on paper. It does so
by calling the <span style='font-family:"Liberation Mono"'>print</span>
function with the string &quot;Hello, world!&quot; as an argument. This will be
explained in the chapter about functions.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:-.25pt'>Note that Lua is most of the time <a
href="https://en.wikipedia.org/wiki/Embedded_system"><span style='color:black;
text-decoration:none'>embedded</span></a> in a lower level application, which
means that the <span style='font-family:"Liberation Mono"'>print</span>
function will not always display text in an area that is visible to the user.
The documentation of the programming interface of these applications will
generally explain how text may be displayed to users.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Comments</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 102382"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>A comment is a code annotation that is ignored by the
programming language. Comments can be used to describe one or many lines of
code, to document a program, to temporarily disable code, or for any other
reason. They need to be prefixed by two hyphens to be recognized by Lua and
they can be put either on their own line or at the end of another line:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.6pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=60 id="Picture 104210"
src="Lua%20Programming_files/image004.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>These comments are called short comments. It is also
possible to create long comments, which start with a long bracket and can
continue on many lines:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=73 id="Picture 104212"
src="Lua%20Programming_files/image005.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Long brackets consist of two brackets in the middle of
which any number of equality signs may be put. That number is called the level
of the long bracket. Long brackets will continue until the next bracket of the
same level, if there is one. A long bracket with no equal sign is called a long
bracket of level 0. This approach makes it possible to use closing double
brackets inside of long comments by adding equal signs in the middle of the two
brackets. It is often useful to do this when using comments to disable blocks
of code.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:0in;margin-left:-.4pt;text-align:left;text-indent:0in;line-height:
107%'><img border=0 width=678 height=44 id="Picture 104214"
src="Lua%20Programming_files/image006.gif"></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:21.75pt;margin-left:9.0pt;text-align:left;text-indent:0in;
line-height:99%'><span style='position:relative;z-index:-1895823360'><span
style='left:0px;position:absolute;left:0px;top:-1px;width:678px;height:49px'><img
width=678 height=49 src="Lua%20Programming_files/image007.gif"></span></span><i><span
style='font-size:8.0pt;line-height:99%;font-family:"Liberation Mono";
color:#2C2C2C'>However, the closing double bracket doesn't make the comment
end, because the comment was opened with an opening long bracket of level 2,
and only a closing long bracket of level 2 can close it. ]==] </span></i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:22.3pt;
margin-left:-.25pt'>In the example above, the closing long bracket of level 0 (<span
style='font-family:"Liberation Mono"'>]]</span>) does not close the comment,
but the closing long bracket of level 2 (<span style='font-family:"Liberation Mono"'>]==]</span>)
does.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Syntax</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 96406"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.6pt;
margin-left:-.25pt'>The syntax of a programming language defines how statements
and expressions must be written in that programming language, just like grammar
defines how sentences and words must be written. Statements and expressions can
be respectively compared to sentences and words. Expressions are pieces of code
that have a value and that can be evaluated, while statements are pieces of
code that can be executed and that contain an instruction and one or many
expressions to use that instruction with. For example, <span style='font-family:
"Liberation Mono"'>3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.6pt;
margin-left:-.25pt'><span style='font-family:"Liberation Mono"'>+ 5</span> is
an expression and <span style='font-family:"Liberation Mono"'>variable = 3 + 5</span>
is a statement that sets the value of <i>variable</i> to that expression.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'><a href="http://www.lua.org/manual/5.1/manual.html#8"><span
style='color:black;text-decoration:none'>The entire syntax of Lua can be found
in extended Backus–Naur form on the Lua website
(http://www.lua.org/manual/5.1/manua l.html#8), but you wouldn't understand
anything if you read it. </span></a><a
href="https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form"><span
style='color:black;text-decoration:none'>Extended Backus–Naur Form</span></a><a
href="http://www.lua.org/manual/5.1/manual.html#8"><span style='color:black;
text-decoration:none'> is a metalanguage, a language used </span></a>to
describe another language, just like a metawebsite is a website about a
website, and just like metatables, in Lua, are tables that define the behavior
of other tables (you'll learn about metatables and tables later in this book).
But you're not going to have to learn extended Backus–Naur form in this book,
because, while a language like Lua can be described using a metalanguage, it
can also be described using words and sentences, in English, and this is
exactly what this book is going to do.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>Since English can be used to describe another language,
then it must itself be a metalanguage (because it corresponds to the definition
of a metalanguage). This is indeed the case. And since the purpose of a
programming language is to describe instructions, and you can do that with
English, English must also be a programming language. This, <b>in a way</b>, is
also the case. In fact, English is a language that can be used for many things.
But extended Backus–Naur form is a specialized language, and programming languages
are also specialized languages. Specialization is the characteristic of being
very good at doing something in particular, but not being capable of doing
other things. Extended Backus–Naur form is very good at describing other
languages, but it cannot be used to write instructions or to communicate a
message. Programming languages are very good at giving instructions, but they
cannot be used to describe languages or to communicate messages.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:20.55pt;
margin-left:-.25pt'>English is capable of doing everything: describing
languages, giving instructions and communicating messages. But it is not very
good at doing some of these. In fact, it is so bad at giving instructions that,
if it is used to give instructions to a computer, the computer won't understand
anything. That's because computers need the instructions to be very precise and
unambiguous.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Obtaining Lua</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 96407"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:26.55pt;
margin-left:-.25pt'>Lua can be obtained on the official Lua website, <a
href="http://www.lua.org/download.html"><span style='color:black;text-decoration:
none'>on the download page (http://www.lua.org/download.html)</span></a>.
Instructions are also available there: the download button is for the source
code, which is probably not what you want. You are probably looking for
binaries, so you should look around the page to find information about those
(what exactly you are looking for depends on the platform you are using). The
purpose of this book is only to teach the Lua language, not to teach usage of
the Lua tools. It is generally assumed that the reader will be using Lua in an
embedded environment, but this does not need to be the case for the book to be
useful, only does it mean that the book will not describe the usage of Lua as a
standalone language.</p>

<h1 style='margin-left:-.25pt'>Expressions</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>As explained before, expressions are pieces of code that
have a value and that can be evaluated. They cannot be executed directly (with
the exception of function calls), and thus, a script that would contain only
the following code, which consists of an expression, would be erroneous:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.6pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=60 id="Picture 104218"
src="Lua%20Programming_files/image008.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Code must be comprised of a sequence of statements. These
statements can contain expressions which will be values the statement has to
manipulate or use to execute the instruction.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>Some code examples in this chapter do not constitute valid
code, because they consist of only expressions. In the next chapter, statements
will be covered and it will be possible to start writing valid code.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Types</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 97094"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>To evaluate an expression is to compute it to find its
value. The value a given expression evaluates to might be different from one
context to another, since it can depend on the environment and stack level.
This value will sometimes be a number, sometimes text and the other times any
of many other data types, which is why it is said to have a type.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.1pt;
margin-left:-.25pt'>In Lua, and in programming in general, expressions will
usually consist of one or more values with zero or more operators. Some
operators can only be used with some types (it would be illogical, for example,
to try to divide text, while it makes sense to divide numbers). There are two
kinds of operators: unary operators and binary operators. Unary operators are
operators that only take one value. For example, the unary - operator only
takes one number as a parameter: -5, -3, -6, etc. It takes one number as a
parameter and negates that number. The binary - operator, however, which is not
the same operator, takes two values and subtracts the second from the first: 5
- 3, 8 - 6, 4 - 9, etc.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>It is possible to obtain a number's type
as a string with the <span style='font-family:"Liberation Mono"'>type</span>
function:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:24.95pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=36 id="Picture 104220"
src="Lua%20Programming_files/image009.gif"></p>

<h2 style='margin-left:-.25pt'>Numbers</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.55pt;
margin-left:-.25pt'>Numbers generally represent quantities, but they can be
used for many other things. The number type in Lua works mostly in the same way
as real numbers. Numbers can be constructed as integers, decimal numbers,
decimal exponents or even in <a href="https://en.wikipedia.org/wiki/hexadecimal"><span
style='color:black;text-decoration:none'>hexadecimal</span></a>. Here are some
valid numbers:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=118 src="Lua%20Programming_files/image010.gif" align=left
hspace=12><span style='font-family:"Liberation Sans",sans-serif'>3</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>3.0</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>3.1416</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>314.16e-2</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>0.31416E1</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>0xff</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:24.3pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>0x56</span></p>

<h3 style='margin-left:-.25pt'>Arithmetic operations</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>The operators for numbers in Lua are the
following:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=591
 style='width:443.45pt;margin-left:.4pt;border-collapse:collapse'>
 <tr style='height:15.0pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Operation</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 2.45pt 0in 2.6pt;height:15.0pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:.55pt;text-indent:0in;line-height:107%'><b><span
  style='font-family:"Liberation Sans",sans-serif'>Syntax</span></b></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 2.45pt 0in 2.6pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Description</span></b></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 2.45pt 0in 2.6pt;height:15.0pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:3.2pt;text-indent:0in;line-height:107%'><b><span
  style='font-family:"Liberation Sans",sans-serif'>Example</span></b></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-family:"Liberation Sans",sans-serif'>Arithmetic negation</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>-<i>a</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Changes
  the sign of <i>a</i> and returns the value</span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>-3.14159</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Addition</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> + <i>b</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Returns
  the sum of <i>a</i> and <i>b</i></span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>5.2
  + 3.6</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Subtraction</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> - <i>b</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Subtracts
  <i>b</i> from <i>a</i> and returns the result</span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>6.7
  - 1.2</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Multiplication</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> * <i>b</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Returns
  the product of <i>a</i> and <i>b</i></span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>3.2
  * 1.5</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Exponentiation</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> ^ <i>b</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Returns
  <i>a</i> to the power <i>b</i>, or the exponentiation of <i>a</i> by <i>b</i></span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>5 ^
  2</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Division</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> / <i>b</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Divides
  <i>a</i> by <i>b</i> and returns the result</span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>6.4
  / 2</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=129 valign=top style='width:96.8pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:4.9pt;text-align:left;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Modulo
  operation</span></b></p>
  </td>
  <td width=51 valign=top style='width:38.25pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> % <i>b</i></span></p>
  </td>
  <td width=342 valign=top style='width:256.6pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Returns
  the remainder of the division of <i>a</i> by <i>b</i></span></p>
  </td>
  <td width=69 valign=top style='width:51.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>5 %
  3</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>You probably already know all of these operators (they are
the same as basic mathematical operators) except the last. The last is called
the modulo operator, and simply calculates the remainder of the division of one
number by another. 5 % 3, for example, would give 2 as a result because 2 is
the remainder of the division of 5 by 3. The modulo operator is less common
than the other operators, but it has multiple uses.</p>

<h3 style='margin-left:-.25pt'>Integers</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:26.55pt;
margin-left:-.25pt'>A new subtype of numbers, integers, was added in Lua 5.3.
Numbers can be either integers or floats. Floats are similar to numbers as
described above, while integers are numbers with no decimal part. Float
division (<span style='font-family:"Liberation Mono"'>/</span>) and
exponentiation always convert their operands to floats, while all other
operators give integers if their two operands were integers. In other cases,
with the exception of the floor division operator (<span style='font-family:
"Liberation Mono"'>//</span>), the result is a float.</p>

<h2 style='margin-left:-.25pt'>Nil</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>Nil is the type of the value nil, whose main property is to
be different from any other value; it usually represents the absence of a
useful value. A function that would return nil, for example, is a function that
has nothing useful to return (we'll talk later about functions).</p>

<h2 style='margin-left:-.25pt'>Booleans</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>A boolean value can be either true or
false, but nothing else. This is literally written in Lua as <span
style='font-family:"Liberation Mono"'>true</span> or <span style='font-family:
"Liberation Mono"'>false</span>, which are reserved keywords. The following
operators are often used with boolean values, but can also be used with values
of any data type:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=662
 style='width:496.75pt;margin-left:.4pt;border-collapse:collapse'>
 <tr style='height:15.0pt'>
  <td width=115 valign=top style='width:86.3pt;border:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Operation</span></b></p>
  </td>
  <td width=53 valign=top style='width:39.75pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 3.75pt 0in 3.9pt;height:15.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-family:"Liberation Sans",sans-serif'>Syntax</span></b></p>
  </td>
  <td width=494 valign=top style='width:370.7pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 3.75pt 0in 3.9pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Description</span></b></p>
  </td>
 </tr>
 <tr style='height:26.25pt'>
  <td width=115 valign=top style='width:86.3pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 3.75pt 0in 3.9pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Boolean
  negation</span></b></p>
  </td>
  <td width=53 style='width:39.75pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:26.25pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:2.5pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>not <i>a</i></span></p>
  </td>
  <td width=494 style='width:370.7pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:26.25pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:2.5pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>If <i>a</i>
  is false or nil, returns true. Otherwise, returns false.</span></p>
  </td>
 </tr>
 <tr style='height:30.75pt'>
  <td width=115 valign=top style='width:86.3pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 3.75pt 0in 3.9pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Logical
  conjunction</span></b></p>
  </td>
  <td width=53 valign=top style='width:39.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:30.75pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:2.5pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> and <i>b</i></span></p>
  </td>
  <td width=494 valign=top style='width:370.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:30.75pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:2.5pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Returns
  the first argument if it is false or nil. Otherwise, returns the second
  argument.</span></p>
  </td>
 </tr>
 <tr style='height:30.75pt'>
  <td width=115 valign=top style='width:86.3pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 3.75pt 0in 3.9pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Logical
  disjunction</span></b></p>
  </td>
  <td width=53 style='width:39.75pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:30.75pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:2.5pt;text-align:left;text-indent:0in;
  line-height:107%'><i><span style='font-family:"Liberation Sans",sans-serif'>a</span></i><span
  style='font-family:"Liberation Sans",sans-serif'> or <i>b</i></span></p>
  </td>
  <td width=494 valign=top style='width:370.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 3.75pt 0in 3.9pt;height:30.75pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:4.6pt;
  margin-bottom:0in;margin-left:2.5pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Returns
  the first argument if it is neither false nor nil. Otherwise, returns the
  second argument.</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Essentially, the <span style='font-family:"Liberation Mono"'>not</span>
operator just negates the boolean value (makes it false if it is true and makes
it true if it is false), the <span style='font-family:"Liberation Mono"'>and </span>operator
returns true if both are true and false if not and the <span style='font-family:
"Liberation Mono"'>or</span> operator returns true if either of arguments is
true and false otherwise. This is however not exactly how they work, as the
exact way they work is explained in the table above. In Lua, the values false
and nil are both considered as false, while everything else is considered as
true, and if you do the logic reasoning, you'll realize that the definitions
presented in this paragraph correspond with those in the table, although those
in the table will not always return a boolean value.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:24.85pt;
margin-left:-.25pt'>The relational operators introduced in the next chapter (<span
style='font-family:"Liberation Mono"'>&lt;</span>, <span style='font-family:
"Liberation Mono"'>&gt;</span>, <span style='font-family:"Liberation Mono"'>&lt;=</span>,
<span style='font-family:"Liberation Mono"'>&gt;=</span>, <span
style='font-family:"Liberation Mono"'>~=</span>, <span style='font-family:"Liberation Mono"'>==</span>)
do not necessarily take boolean values as operands, but will always give a
boolean value as a result.</p>

<h2 style='margin-left:-.25pt'>Strings</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15in;
margin-left:-.25pt'>Strings are sequences of characters that can be used to
represent text. They can be written in Lua by being contained in double quotes,
single quotes or long brackets, which were covered before in <a
href="https://en.wikibooks.org/wiki/Lua_Programming/Introduction#Comments"><span
style='color:black;text-decoration:none'>the section about comments </span></a>(it
should be noted that comments and strings have nothing in common other than the
fact they can both be delimited by long brackets, preceded by two hyphens in
the case of comments). Strings that aren't contained in long brackets will only
continue for one line. Because of this, the only way to make a string that
contains many lines without using long brackets is to use escape sequences.
This is also the only way to insert single or double quotes in certain cases.
Escape sequences consist of two things: an escape character, which will always
be a backslash ('\') in Lua, and an identifier that identifies the character to
be escaped.</p>

<h3 align=center style='margin-top:0in;margin-right:16.5pt;margin-bottom:0in;
margin-left:0in;text-align:center;text-indent:0in'>Escape sequences in Lua</h3>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=654
 style='width:490.75pt;margin-left:.4pt;border-collapse:collapse'>
 <tr style='height:15.0pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:15.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-family:"Liberation Sans",sans-serif'>Escape sequence</span></b></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 2.45pt 0in 2.6pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.05pt;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Description</span></b></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>\n</span></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>A
  new line</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>\&quot;</span></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>A
  double quote</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>\'</span></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>A
  single quote (or apostrophe)</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>\\</span></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>A
  backslash</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>\t</span></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>A
  horizontal tab</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=116 valign=top style='width:87.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>\###</span></p>
  </td>
  <td width=538 valign=top style='width:403.7pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.45pt 0in 2.6pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.8pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>###
  must be a number from 0 to 255. The result will be the corresponding </span><a
  href="https://en.wikipedia.org/wiki/ASCII"><span style='font-family:"Liberation Sans",sans-serif;
  color:black;text-decoration:none'>ASCII</span></a><span style='font-family:
  "Liberation Sans",sans-serif'> character.</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.75pt;
margin-left:-.25pt'>Escape sequences are used when putting the character
directly in the string would cause a problem. For example, if you have a string
of text that is enclosed in double quotes and must contain double quotes, then
you need to enclose the string in different characters or to escape the double
quotes. Escaping characters in strings delimited by long brackets is not
necessary, and this is true for all characters. All characters in a string
delimited with long brackets will be taken as-is. The <span style='font-family:
"Liberation Mono"'>%</span> character is used in string patterns to escape
magic characters, but the term <i>escaping</i> is then used in another context.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;This is a valid string.&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:9.0pt;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:8.0pt;line-height:107%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>'This is also a valid string.'</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:9.0pt;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:8.0pt;line-height:107%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:33.7pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;This is a valid </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#BB6622'>\&quot;</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'> string 'that contains unescaped single quotes and escaped
double quotes.&quot;</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>  </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>[[</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:340.8pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>This is a line that can continue</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>on more than one line.</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>  </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895821312'><span style='left:0px;position:
absolute;left:0px;top:-132px;width:678px;height:241px'><img width=678
height=241 src="Lua%20Programming_files/image011.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>It can contain single quotes, double quotes and everything else
(-- including comments). It ignores everything (including escape characters)
except closing long brackets of the same level as the opening long bracket.</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>]]</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:9.0pt;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:8.0pt;line-height:107%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:88.2pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;This is a valid string that contains tabs </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\t</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'>, double quotes </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\&quot;</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'> and backlashes </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\\</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'>&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>  </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:21.3pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;This is &quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#7216AB'>not</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> a valid string because there is an unescaped
double quote </span><b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:green'>in</span></b><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'> the middle of it.</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>For convenience, if an opening long string bracket is
immediately followed by a new line, that new line will be ignored. Therefore,
the two following strings are equivalent:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:0in;margin-left:-.4pt;text-align:left;text-indent:0in;line-height:
107%'><img border=0 width=678 height=97 id="Picture 104224"
src="Lua%20Programming_files/image012.gif"></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:21.4pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895820288'><span style='left:0px;position:
absolute;left:0px;top:-1px;width:678px;height:37px'><img width=678 height=37
src="Lua%20Programming_files/image013.gif"></span></span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- Since the opening long bracket of the second string is
immediately followed by a new line, that new line is ignored.</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>It is possible to get the length of a
string, as a number, by using the unary length operator ('#'):</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:23.75pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=37 id="Picture 104228"
src="Lua%20Programming_files/image014.gif"></p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;margin-left:
-.25pt'>Concatenation</h3>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:0in;margin-left:46.25pt;text-align:left;line-height:98%'><img
width=2 height=72 src="Lua%20Programming_files/image015.gif" align=left
hspace=12><span style='font-size:12.0pt;line-height:98%'>In </span><a
href="https://en.wikipedia.org/wiki/formal_language"><span style='font-size:
12.0pt;line-height:98%;color:black;text-decoration:none'>formal language theory
</span></a><span style='font-size:12.0pt;line-height:98%'>and </span><a
href="https://en.wikipedia.org/wiki/computer_programming"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>computer
programming</span></a><span style='font-size:12.0pt;line-height:98%'>, <b>string
concatenation </b>is the operation of joining two </span><a
href="https://en.wikipedia.org/wiki/character_string_(computer_science)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>character
strings</span></a><span style='font-size:12.0pt;line-height:98%'> end-to-end.
For example, the concatenation of &quot;snow&quot; and &quot;ball&quot; is
&quot;snowball&quot;.</span></p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;margin-left:
46.25pt'><span style='font-size:12.0pt;line-height:107%;font-family:"Liberation Serif",serif;
font-weight:normal'>—Wikipedia, </span><a
href="https://en.wikipedia.org/wiki/Concatenation"><i><span style='font-size:
12.0pt;line-height:107%;font-family:"Liberation Serif",serif;color:black;
font-weight:normal;text-decoration:none'>Concatenation</span></i></a></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The string concatenation operator in Lua is denoted by two
dots ('..'). Here is an example of concatenation that concatenates
&quot;snow&quot; and &quot;ball&quot; and prints the result:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.45pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=37 id="Picture 104230"
src="Lua%20Programming_files/image016.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.5pt;
margin-left:-.25pt'>This code will concatenate &quot;snow&quot; and
&quot;ball&quot; and will print the result.</p>

<h2 style='margin-left:-.25pt'>Other types</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>The four basic types in Lua (numbers, booleans, nil and
strings) have been described in the previous sections, but four types are
missing: functions, tables, userdata and threads. <i>Functions</i> are pieces
of code that can be called, receive values and return values back. <i>Tables</i>
are data structures that can be used for data manipulation. <i>Userdata</i> are
used internally by applications Lua is embedded in to allow Lua to communicate
with that program through objects controlled by the application. Finally, <i>threads</i>
are used by coroutines, which allow many functions to run at the same time.
These will all be described later, so you only need to keep in mind that there
are other data types.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Literals</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101692"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:22.4pt;
margin-left:-.25pt'>Literals are notations for representing fixed values in
source code. All values can be represented as literals in Lua except threads
and userdata. String literals (literals that evaluate to strings), for example,
consist of the text that the string must represent enclosed into single quotes,
double quotes or long brackets. Number literals, on the other hand, consist the
number they represent expressed using decimal notation (ex: <span
style='font-family:"Liberation Mono"'>12.43</span>), scientific notation (ex: <span
style='font-family:"Liberation Mono"'>3.1416e-2</span> and <span
style='font-family:"Liberation Mono"'>0.31416E1</span>) or hexadecimal notation
(ex: <span style='font-family:"Liberation Mono"'>0xff</span>).</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Coercion</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101693"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Coercion is the conversion of a value of one data type to a
value of another data type. Lua provides automatic coercion between string and
number values. Any arithmetic operation applied to a string will attempt to
convert this string to a number. Conversely, whenever a string is expected and
a number is used instead, the number will be converted to a string. This
applies both to Lua operators and to default functions (functions that are
provided with the language).</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:0in;margin-left:-.4pt;text-align:left;text-indent:0in;line-height:
107%'><img border=0 width=678 height=49 id="Picture 104232"
src="Lua%20Programming_files/image017.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.25pt;
margin-left:-.25pt'>Coercion of numbers to strings and strings to numbers can
also be done manually with the <span style='font-family:"Liberation Mono"'>tostring</span>
and <span style='font-family:"Liberation Mono"'>tonumber </span>functions. The
former accepts a number as an argument and converts it to a string, while the
second accepts a string as an argument and converts it to a number (a different
base than the default decimal one can optionally be given in the second
argument).</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Bitwise operations</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 96500"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Since Lua 5.3, bitwise operators are provided to operate on
binary numerals (bit patterns). These operators are not used as frequently as
the others, so you may skip this section if you do not need them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.85pt;
margin-left:-.25pt;line-height:107%'>The bitwise operators in Lua always
operate on integers, converting their operands if this is necessary. They also
give integers.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The <i>bitwise AND</i> operation (with operator <span
style='font-family:"Liberation Mono"'>&amp;</span>) performs logical
conjunction on each pair of bits of two binary representations of equal length.
For example, <span style='font-family:"Liberation Mono"'>5 &amp; 3</span>
evaluates to 1. We can explain this by looking at the binary representation of
these numbers (the subscripts are used to denote the base):</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:14.25pt;margin-left:1.0pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=93 height=84 id="Group 96489"
src="Lua%20Programming_files/image018.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>If the bits in a given position in the binary
representation of both 5 and 3 are 1 (as is the case for the last bit), then
the bit at that position will be 1 in the result; in all other cases, it will
be 0.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The <i>bitwise OR</i> operation (with operator <span
style='font-family:"Liberation Mono"'>|</span>) works in the same way as the
bitwise AND, performing logical disjunction instead where it performs logical
conjunction. Thus, <span style='font-family:"Liberation Mono"'>5 | 3</span>
will evaluate to 7:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:14.75pt;margin-left:1.0pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=93 height=84 id="Group 96491"
src="Lua%20Programming_files/image019.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Here, we can see that the bit in each position in the final
result was 0 only when the binary representations of the two operands had a
0-bit at that position.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The <i>bitwise XOR</i> operation (with operator <span
style='font-family:"Liberation Mono"'>~</span>) works like two others, but at a
given position, the final bit is only 1 if one, and not both, of the bits in
the operands are 1.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:14.0pt;margin-left:1.0pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=93 height=84 id="Group 96498"
src="Lua%20Programming_files/image020.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>This is the same as the previous example, but we can see
that the last bit in the result is 0 instead of 1, since the last bit of both
operands was 1.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The <i>bitwise NOT</i> operation (with operator <span
style='font-family:"Liberation Mono"'>~</span>) performs logical negation on
each bit of its unique operand, which means that each 0 becomes 1 and that each
1 becomes 0. Thusly, <span style='font-family:"Liberation Mono"'>~7</span> will
evaluate to -8:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:1.95pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=90 height=15 id="Group 96499"
src="Lua%20Programming_files/image021.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:14.0pt;margin-left:1.95pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=90 height=15 id="Group 96110"
src="Lua%20Programming_files/image022.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>Here, the first bit became 1 in the result
because it was 0 in the operand, and the other bits became 0 because they were
all 1.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:12.1pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=385 height=140 id="Group 96111"
src="Lua%20Programming_files/image023.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:22.75pt;
margin-left:-.25pt'>In addition to these bitwise operators, Lua 5.3 also
supports arithmetic bit shifts. The <i>left shift</i>, with operator <span
style='font-family:"Liberation Mono"'>&lt;&lt;</span> and illustrated on left,
consists in shifting all bits to the left, by a number of bits that corresponds
to the second operand. The <i>right shift</i>, denoted by operator <span
style='font-family:"Liberation Mono"'>&gt;&gt;</span> and illustrated on right,
does the same but in the opposite direction.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Operator precedence</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 96112"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.6pt;
margin-left:-.25pt'>Operator precedence works the same way in Lua as it
typically does in mathematics. Certain operators will be evaluated before
others, and parentheses can be used to arbitrarily change the order in which
operations should be executed. The priority in which operators are evaluated is
in the list below, from higher to lower priority. Some of these operators were
not discussed yet, but they will all be covered at some point in this book.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.55pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Exponentiation: </span><span
style='font-family:"Liberation Mono"'>^</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.3pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Unary operators: </span><span
style='font-family:"Liberation Mono"'>not</span><span style='font-family:"Liberation Sans",sans-serif'>,
</span><span style='font-family:"Liberation Mono"'>#</span><span
style='font-family:"Liberation Sans",sans-serif'>, </span><span
style='font-family:"Liberation Mono"'>-</span><span style='font-family:"Liberation Sans",sans-serif'>,
</span><span style='font-family:"Liberation Mono"'>~</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.1pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:137%'><span style='line-height:137%;font-family:"Liberation Sans",sans-serif'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Level 2 mathematical
operators: </span><span style='font-family:"Liberation Mono"'>*</span><span
style='font-family:"Liberation Sans",sans-serif'>, </span><span
style='font-family:"Liberation Mono"'>/</span><span style='font-family:"Liberation Sans",sans-serif'>,
</span><span style='font-family:"Liberation Mono"'>//</span><span
style='font-family:"Liberation Sans",sans-serif'>, </span><span
style='font-family:"Liberation Mono"'>% </span><span style='font-family:"Liberation Sans",sans-serif'>4.
Level 1 mathematical operators: </span><span style='font-family:"Liberation Mono"'>+</span><span
style='font-family:"Liberation Sans",sans-serif'>, </span><span
style='font-family:"Liberation Mono"'>-</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.5pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Concatenation: </span><span
style='font-family:"Liberation Mono"'>..</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.2pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Bit shifts: </span><span
style='font-family:"Liberation Mono"'>&lt;&lt;</span><span style='font-family:
"Liberation Sans",sans-serif'>, </span><span style='font-family:"Liberation Mono"'>&gt;&gt;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.4pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Bitwise AND: </span><span
style='font-family:"Liberation Mono"'>&amp;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.4pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Bitwise XOR: </span><span
style='font-family:"Liberation Mono"'>~</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.55pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Bitwise OR: </span><span
style='font-family:"Liberation Mono"'>|</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.25pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>10.<span
style='font:7.0pt "Times New Roman"'> </span></span><span style='font-family:
"Liberation Sans",sans-serif'>Relational operators: </span><span
style='font-family:"Liberation Mono"'>&lt;</span><span style='font-family:"Liberation Sans",sans-serif'>,
</span><span style='font-family:"Liberation Mono"'>&gt;</span><span
style='font-family:"Liberation Sans",sans-serif'>, </span><span
style='font-family:"Liberation Mono"'>&lt;=</span><span style='font-family:
"Liberation Sans",sans-serif'>, </span><span style='font-family:"Liberation Mono"'>&gt;=</span><span
style='font-family:"Liberation Sans",sans-serif'>, </span><span
style='font-family:"Liberation Mono"'>~=</span><span style='font-family:"Liberation Sans",sans-serif'>,
</span><span style='font-family:"Liberation Mono"'>==</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.35pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>11.<span
style='font:7.0pt "Times New Roman"'> </span></span><span style='font-family:
"Liberation Sans",sans-serif'>Boolean and: </span><span style='font-family:
"Liberation Mono"'>and</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:25.8pt;margin-left:24.45pt;text-align:left;text-indent:-16.2pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>12.<span
style='font:7.0pt "Times New Roman"'> </span></span><span style='font-family:
"Liberation Sans",sans-serif'>Boolean or: </span><span style='font-family:"Liberation Mono"'>or</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Quiz</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 96113"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:56.55pt;
margin-left:-.25pt'>There are some questions you can answer to verify that you
have understood the material in this chapter. Note that finding the answer to
some of those questions could require having knowledge that is not presented in
this chapter. This is normal: the quizzes are part of the learning experience,
and they can introduce information that is not available elsewhere in the book.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:7.25pt;text-align:left;line-height:107%'><b><span
style='font-size:11.0pt;line-height:107%'>1</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:24.5pt;text-align:left;line-height:108%'>What
will <span style='font-family:"Liberation Mono"'>print(type(type(5.2)))</span>
output?</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:26.25pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=173 height=21 id="Group 96114"
src="Lua%20Programming_files/image024.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:26.0pt;
margin-left:8.0pt'><b><span style='font-size:11.0pt;line-height:141%'>2 </span></b>What
will the expression <span style='font-family:"Liberation Mono"'>0 or 8</span>
return?</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:14.8pt;margin-left:29.7pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=78 height=220 id="Picture 104234"
src="Lua%20Programming_files/image025.gif"></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:7.25pt;text-align:left;line-height:107%'><b><span
style='font-size:11.0pt;line-height:107%'>3</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:32.25pt;
margin-left:24.5pt'>Which strings are valid?</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:29.75pt;text-align:left;line-height:108%'><img
width=13 height=133 src="Lua%20Programming_files/image026.gif" align=left
hspace=12><span style='font-family:"Liberation Mono"'>&quot;test's test&quot;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>'test\'s test'</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>&quot;test&quot;s test&quot;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>'test&quot;s test'</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>&quot;test\'s test&quot;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:9.0pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>'test's test'</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:7.25pt;text-align:left;line-height:107%'><b><span
style='font-size:11.0pt;line-height:107%'>4</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:309.9pt;
margin-bottom:37.0pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'>Which expressions give the string <span style='font-family:
"Liberation Mono"'>&quot;1223&quot;</span>?</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:381.9pt;
margin-bottom:0in;margin-left:29.75pt;text-align:left;line-height:162%'><img
width=13 height=85 src="Lua%20Programming_files/image027.gif" align=left
hspace=12><span style='font-family:"Liberation Mono"'>&quot;122&quot; + 3
&quot;122&quot; .. 3</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.9pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>&quot;12&quot; + &quot;23&quot;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:9.0pt;margin-left:29.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>12 .. 23</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:7.25pt;text-align:left;line-height:107%'><b><span
style='font-size:11.0pt;line-height:107%'>5</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:33.35pt;
margin-left:24.5pt'>True or false? <span style='font-family:"Liberation Mono"'>not
5^3 == 5</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:5.7in;
margin-bottom:48.75pt;margin-left:29.75pt;text-align:left;line-height:162%'><img
width=61 height=73 src="Lua%20Programming_files/image028.gif" align=left
hspace=12><span style='font-family:"Liberation Mono"'>true false</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:29.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'> </p>

<h1 style='margin-left:-.25pt'>Statements</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'><i>Statements</i> are pieces of code that can be executed
and that contain an instruction and expressions to use with it. Some statements
will also contain code inside of themselves that may, for example, be run under
certain conditions. Dissimilarly to expressions, they can be put directly in
code and will execute. Lua has few instructions, but these instructions,
combined with other instructions and with complex expressions, give a good
amount of control and flexibility to the user.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Assignment</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 102918"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Programmers frequently need to be able to store values in
the memory to be able to use them later. This is done using variables. <i>Variables</i>
are references to a value which is stored in the computer's memory. They can be
used to access a number later after storing it in the memory. <i>Assignment</i>
is the instruction that is used to assign a value to a variable. It consists of
the name of the variable the value should be stored in, an equal sign, and the
value that should be stored in the variable:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=49 id="Picture 104249"
src="Lua%20Programming_files/image029.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>As demonstrated in the above code, the value of a variable
can be accessed by putting the variable's name where the value should be
accessed.</p>

<h2 style='margin-left:-.25pt'>The assignment operator</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>In Lua, as with most other programming languages, the
*equals sign* acts as a dyadic *assignment operator* assigning the value of the
expression of the right hand operand to the variable named by the left operand:</p>

<h2 style='margin-left:-.25pt'>Assignment of variables</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>The following examples show the use of the
equals sign for the assignment of variables:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:24.85pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=49 id="Picture 104251"
src="Lua%20Programming_files/image030.gif"></p>

<h2 style='margin-left:-.25pt'>Strings and Numeric Values</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>Note that literal strings should be
enclosed in quotation marks to distinguish them from variable names:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.45pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=49 id="Picture 104253"
src="Lua%20Programming_files/image031.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.8pt;
margin-left:-.25pt'>Note that numeric values do not need to be enclosed in
quotation marks and cannot be misinterpreted as a variable name, because
variable names cannot begin with a numeral:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:132.95pt;
margin-bottom:38.65pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895815168'><span style='left:0px;position:
absolute;left:0px;top:-13px;width:678px;height:49px'><img width=678 height=49
src="Lua%20Programming_files/image032.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> apples </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#666666'>6</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>    </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- no quotes are necessary around a numeric parameter</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>  pears </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>&quot;5&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>   </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- quotes will cause the value to be considered a string</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:4.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:13.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>Multiple
Assignments</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.5pt;
margin-left:-.25pt'>The Lua programming language supports multiple assignments:</p>

<h2 style='margin-left:-.25pt'>Identifiers</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'><a
href="https://en.wikipedia.org/wiki/Identifier#In_computer_science"><span
style='color:black;text-decoration:none'>Identifiers</span></a>, in Lua, are
also called names. They can be any text composed of letters, digits, and
underscores and not beginning with a digit. They are used to name variables and
table fields, which will be covered in the chapter about tables.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.1pt;
margin-left:-.25pt;line-height:107%'>Here are some valid names:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:436.1pt;
margin-bottom:2.4pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=124 src="Lua%20Programming_files/image033.gif" align=left
hspace=12><span style='font-family:"Liberation Mono"'>name hello _ _tomatoes
me41</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:2.7pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>__</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.1in;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>_thisIs_StillaValid23name</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.55pt;
margin-left:-.25pt;line-height:107%'>Here are some invalid names:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.2pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=84 src="Lua%20Programming_files/image034.gif" align=left
hspace=12><span style='font-family:"Liberation Mono"'>2hello</span><span
style='font-family:"Liberation Sans",sans-serif'> : starts with a digit</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:161.35pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:138%'><span
style='font-family:"Liberation Mono"'>th$i</span><span style='font-family:"Liberation Sans",sans-serif'>
: contains a character that isn't a letter, a digit or an underscore </span><span
style='font-family:"Liberation Mono"'>hel!o</span><span style='font-family:
"Liberation Sans",sans-serif'> : contains a character that isn't a letter, a
digit or an underscore</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.45pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>563text</span><span style='font-family:
"Liberation Sans",sans-serif'> : starts with a digit</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.65pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Mono"'>82_something</span><span
style='font-family:"Liberation Sans",sans-serif'> : starts with a digit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.95pt;
margin-left:-.25pt'>Also, the following keywords are reserved by Lua and can
not be used as names: <span style='font-family:"Liberation Mono"'>and</span>, <span
style='font-family:"Liberation Mono"'>end</span>, <span style='font-family:
"Liberation Mono"'>in</span>, <span style='font-family:"Liberation Mono"'>repeat</span>,
<span style='font-family:"Liberation Mono"'>break</span>, <span
style='font-family:"Liberation Mono"'>false</span>, <span style='font-family:
"Liberation Mono"'>local</span>, <span style='font-family:"Liberation Mono"'>return</span>,
<span style='font-family:"Liberation Mono"'>do</span>, <span style='font-family:
"Liberation Mono"'>for</span>, <span style='font-family:"Liberation Mono"'>nil</span>,
<span style='font-family:"Liberation Mono"'>then</span>, <span
style='font-family:"Liberation Mono"'>else</span>, <span style='font-family:
"Liberation Mono"'>function</span>, <span style='font-family:"Liberation Mono"'>not</span>,
<span style='font-family:"Liberation Mono"'>true</span>, <span
style='font-family:"Liberation Mono"'>elseif</span>, <span style='font-family:
"Liberation Mono"'>if</span>, <span style='font-family:"Liberation Mono"'>or</span>,
<span style='font-family:"Liberation Mono"'>until</span>, <span
style='font-family:"Liberation Mono"'>while</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:24.95pt;
margin-left:-.25pt'>When naming a variable or a table field, you must choose a
valid name for it. It must therefore start with a letter or an underscore and
only contain letters, underscores and digits. Note that Lua is case sensitive.
This means that <span style='font-family:"Liberation Mono"'>Hello</span> and <span
style='font-family:"Liberation Mono"'>hello</span> are two different names.</p>

<h2 style='margin-left:-.25pt'>Scope</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.5pt;
margin-left:-.25pt'>The <a
href="https://en.wikipedia.org/wiki/Scope_(computer_science)"><span
style='color:black;text-decoration:none'>scope of a variable</span></a> is the
region of the code of the program where that variable is meaningful. The
examples of variables you have seen before are all examples of global
variables, variables which can be accessed from anywhere in the program. Local
variables, on the other hand, can only be used from the region of the program
in which they were defined and in regions of the program that are located
inside that region of the program. They are created exactly in the same way as
global variables, but they must be prefixed with the <span style='font-family:
"Liberation Mono"'>local</span> keyword.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.15pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>do</span>
statement will be used to describe them. The <span style='font-family:"Liberation Mono"'>do</span>
statement is a statement that has no other purpose than to create a new block
of code, and therefore a new scope. It ends with the <span style='font-family:
"Liberation Mono"'>end</span> keyword:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> variable </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>=</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>13</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>-- This defines a
local variable that can be accessed from anywhere in the script since it was
defined in the main region.</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:9.0pt;text-align:left;text-indent:0in;line-height:
107%'><b><span style='font-size:8.0pt;line-height:107%;font-family:"Liberation Mono";
color:green'>do</span></b><span style='font-size:8.0pt;line-height:107%;
font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:0in;line-height:
103%'><span style='font-size:11.0pt;line-height:103%;font-family:"Calibri",sans-serif'>    </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>     </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- This statement creates a new block and also a new scope.</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:0in;line-height:
103%'><span style='font-size:11.0pt;line-height:103%;font-family:"Calibri",sans-serif'>    </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>     variable
</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> variable </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>+</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>5</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>-- This adds 5 to
the variable, which now equals 18.</span></i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:.4in;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895812096'><span style='left:0px;position:
absolute;left:0px;top:-73px;width:678px;height:157px'><img width=678
height=157 src="Lua%20Programming_files/image035.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>     </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> variable </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>=</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>17</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>-- This creates a
variable with the same name as the previous variable, but this one is local to
the scope created by the do statement.</span></i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>      variable </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> variable </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>-</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>1</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>-- This subtracts
1 from the local variable, which now equals 16.</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:370.55pt;
margin-bottom:21.4pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>     </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>print</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(variable) </span><i><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#408080'>--&gt; 16</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>end</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>print</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(variable)
</span><i><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; 18</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>When a scope ends, all the variables in it are gotten rid
of. Regions of code can use variables defined in regions of code they are
included in, but if they &quot;overwrite&quot; them by defining a local
variable with the same name, that local variable will be used instead of the
one defined in the other region of code. This is why the first call to the
print function prints <span style='font-family:"Liberation Mono"'>16</span>
while the second, which is outside the scope created by the <span
style='font-family:"Liberation Mono"'>do</span> statement, prints <span
style='font-family:"Liberation Mono"'>18</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>In practice, only local variables should be used because
they can be defined and accessed faster than global variables, since they are
stored in registers instead of being stored in the environment of the current
function, like global variables. Registers are areas that Lua uses to store
local variables to access them quickly, and can only usually contain up to 200
local variables. The processor, an important component of all computers, also
has registers, but these are not related to Lua's registers. Each function
(including the main thread, the core of the program, which is also a function)
also has its own environment, which is a table that uses indices for the
variable names and stores the values of these variables in the values that
correspond to these indices.</p>

<h2 style='margin-left:-.25pt'>Forms of assignment</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.75pt;
margin-left:-.25pt'>Some assignment patterns are sufficiently common for
syntactic sugar to have been introduced to make their use simpler.</p>

<h3 style='margin-left:-.25pt'>Augmented assignment</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:22.65pt;
margin-left:-.25pt'><a href="https://en.wikipedia.org/wiki/augmented_assignment"><i><span
style='color:black;text-decoration:none'>Augmented assignment</span></i></a>,
which is also called <i>compound assignment</i>, is a type of assignment that
gives a variable a value that is relative to its previous value. It is used
when it is necessary to change the value of a variable in a way that is
relative to its previous value, such as when that variable’s value must be incremented.
In <a href="https://en.wikipedia.org/wiki/C_(programming_language)"><span
style='color:black;text-decoration:none'>C</span></a><a
href="https://en.wikipedia.org/wiki/C_(programming_language)"><span
style='color:black;text-decoration:none'>,</span></a> <a
href="https://en.wikipedia.org/wiki/JavaScript"><span style='color:black;
text-decoration:none'>JavaScript</span></a>, <a
href="https://en.wikipedia.org/wiki/Ruby_(programming_language)"><span
style='color:black;text-decoration:none'>Ruby</span></a><a
href="https://en.wikipedia.org/wiki/Ruby_(programming_language)"><span
style='color:black;text-decoration:none'>,</span></a> <a
href="https://en.wikipedia.org/wiki/Python_(programming_language)"><span
style='color:black;text-decoration:none'>Python</span></a> and some other
languages, the code <span style='font-family:"Liberation Mono"'>a += 8</span>
will increment the value of <i>a</i> by 8. Lua does not have syntactic sugar
for augmented assignment, which means that it is necessary to write <span
style='font-family:"Liberation Mono"'>a = a + 8</span>.</p>

<h3 style='margin-left:-.25pt'>Chained assignment</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'><a href="https://en.wikipedia.org/wiki/chained_assignment"><i><span
style='color:black;text-decoration:none'>Chained assignment</span></i></a><a
href="https://en.wikipedia.org/wiki/chained_assignment"><span style='color:
black;text-decoration:none'> </span></a>is a type of assignment that gives a
single value to many variables. The code <span style='font-family:"Liberation Mono"'>a
= b = c = d = 0</span>, for example, would set the values of <i>a</i>, <i>b</i>,
<i>c</i> and <i>d</i> to 0 in C and Python. In Lua, this code will raise an
error because Lua does not have syntactic sugar for chained assignment, so it
is necessary to write the previous example like this:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:23.8pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=73 id="Picture 104259"
src="Lua%20Programming_files/image036.gif"></p>

<h3 style='margin-left:-.25pt'>Parallel assignment</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'><a href="https://en.wikipedia.org/wiki/parallel_assignment"><i><span
style='color:black;text-decoration:none'>Parallel assignment</span></i></a>,
which is also called <i>simultaneous assignment</i> and <i>multiple assignment</i>,
is a type of assignment that simultaneously assigns different values (they can
also be the same value) to different variables. Unlike chained assignment and
augmented assignment, parallel assignment is available in Lua.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>The example in the previous section can be
rewritten to use parallel assignment:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.4pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=37 id="Picture 104261"
src="Lua%20Programming_files/image037.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>If you provide more variables than values, some variables
will be not be assigned any value. If you provide more values than variables,
the extra values will be ignored. More technically, the list of values is
adjusted to the length of list of variables before the assignment takes place,
which means that excess values are removed and that extra nil values are added
at its end to make it have the same length as the list of variables. If a
function call is present <i>at the end of the values list</i>, the values it returns
will be added at the end of that list, unless the function call is put between
parentheses.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.25pt;
margin-left:-.25pt'>Moreover, unlike most programming languages Lua enables
reassignment of variables' values through <a
href="https://en.wikipedia.org/wiki/permutation"><span style='color:black;
text-decoration:none'>permutation.</span></a> For example:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>first_variable,
second_variable </span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#666666'>=</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>54</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>, </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>87</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:68.6pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895811072'><span style='left:0px;position:
absolute;left:0px;top:-24px;width:678px;height:61px'><img width=678 height=61
src="Lua%20Programming_files/image038.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>first_variable,
second_variable </span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#666666'>=</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'> second_variable,
first_variable </span><span style='font-size:8.0pt;line-height:103%;font-family:
"Liberation Mono";color:green'>print</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>(first_variable,
second_variable) </span><i><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#408080'>--&gt; 87 54</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>This works because the assignment statement evaluates all
the variables and values before assigning anything. Assignments are performed
as if they were really simultaneous, which means you can assign at the same
time a value to a variable and to a table field indexed with that variable’s
value before it is assigned a new value. In other words, the following code
will set <span style='font-family:"Liberation Mono"'>dictionary[2]</span>, and
not <span style='font-family:"Liberation Mono"'>dictionary[1]</span>, to 12.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:16.8pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=61 id="Picture 104265"
src="Lua%20Programming_files/image039.gif"></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Conditional statement</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 103885"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Conditional statements are instructions that check whether
an expression is true and execute a certain piece of code if it is. If the
expression is not true, they just skip over that piece of code and the program
continues. In Lua, the only conditional statement uses the <span
style='font-family:"Liberation Mono"'>if</span> instruction. False and nil are
both considered as false, while everything else is considered as true.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:9.85pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=121 id="Picture 104267"
src="Lua%20Programming_files/image041.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.95pt;
margin-left:-.25pt'>In the code above, the variable <i>number</i> is assigned
the number 6 with an assignment statement. Then, a conditional statement checks
if the value stored in the variable <i>number</i> is smaller than ten, which is
the case here. If it is, it prints <span style='font-family:"Liberation Mono"'>&quot;The
number 6 is smaller than ten.&quot;</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>It is also possible to execute a certain piece of code <i>only</i>
if the expression was not true by using the <span style='font-family:"Liberation Mono"'>else</span>
keyword and to chain conditional statements with the <span style='font-family:
"Liberation Mono"'>elseif</span> keyword:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:9.9pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=169 id="Picture 104269"
src="Lua%20Programming_files/image042.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.85pt;
margin-left:-.25pt'>Note that the <span style='font-family:"Liberation Mono"'>else</span>
block must always be the last one. There cannot be an <span style='font-family:
"Liberation Mono"'>elseif</span> block after the <span style='font-family:"Liberation Mono"'>else</span>
block. The <span style='font-family:"Liberation Mono"'>elseif </span>blocks are
only meaningful if none of the blocks that preceded them was executed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>Operators used to compare two values, some
of which are used in the code above, are called relational operators. If the
relation is true, they return the boolean value <span style='font-family:"Liberation Mono"'>true</span>.
Otherwise, they return the boolean value <span style='font-family:"Liberation Mono"'>false</span>.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=662
 style='width:496.75pt;margin-left:.4pt;border-collapse:collapse'>
 <tr style='height:26.25pt'>
  <td width=134 valign=top style='width:100.55pt;border:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:8.0pt;margin-left:0in;text-align:left;text-indent:0in;
  line-height:107%'>&nbsp;</p>
  </td>
  <td width=53 valign=top style='width:39.75pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>equal
  to</span></b></p>
  </td>
  <td width=74 valign=top style='width:55.55pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>not
  equal to</span></b></p>
  </td>
  <td width=76 valign=top style='width:57.05pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>greater</span></b></p>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>than</span></b></p>
  </td>
  <td width=58 valign=top style='width:43.5pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.05pt;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>less</span></b></p>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>than</span></b></p>
  </td>
  <td width=142 valign=top style='width:106.55pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>greater
  than or equal to</span></b></p>
  </td>
  <td width=125 valign=top style='width:93.8pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 4.7pt 0in 4.75pt;height:26.25pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>less
  than or equal to</span></b></p>
  </td>
 </tr>
 <tr style='height:30.75pt'>
  <td width=134 valign=top style='width:100.55pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 4.7pt 0in 4.75pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Mathematical
  notation</span></p>
  </td>
  <td width=53 style='width:39.75pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>=</span></p>
  </td>
  <td width=74 style='width:55.55pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&#8800;</span></p>
  </td>
  <td width=76 style='width:57.05pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&gt;</span>&nbsp;</p>
  </td>
  <td width=58 style='width:43.5pt;border-top:none;border-left:none;border-bottom:
  solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;padding:1.85pt 4.7pt 0in 4.75pt;
  height:30.75pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&lt;</span>&nbsp;</p>
  </td>
  <td width=142 style='width:106.55pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&#8805;</span></p>
  </td>
  <td width=125 style='width:93.8pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:30.75pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&#8804;</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=134 valign=top style='width:100.55pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Lua
  operator</span></p>
  </td>
  <td width=53 valign=top style='width:39.75pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>==</span></p>
  </td>
  <td width=74 valign=top style='width:55.55pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>~=</span></p>
  </td>
  <td width=76 valign=top style='width:57.05pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&gt;</span>&nbsp;</p>
  </td>
  <td width=58 valign=top style='width:43.5pt;border-top:none;border-left:none;
  border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&lt;</span>&nbsp;</p>
  </td>
  <td width=142 valign=top style='width:106.55pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&gt;=</span></p>
  </td>
  <td width=125 valign=top style='width:93.8pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 4.7pt 0in 4.75pt;height:19.5pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:center;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>&lt;=</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.1pt;
margin-left:-.25pt'>The code above also demonstrates how the <span
style='font-family:"Liberation Mono"'>and</span> keyword can be used to combine
many boolean expressions in a conditional expression.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Loops</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 100681"
src="Lua%20Programming_files/image043.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>Frequently, programmers will need to run a certain piece of
code or a similar piece of code many times, or to run a certain piece of code a
number of times that may depend on user input. A loop is a sequence of
statements which is specified once but which may be carried out several times
in succession.</p>

<h2 style='margin-left:-.25pt'>Condition-controlled loops</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Condition-controlled loops are loops that are controlled by
a condition. They are very similar to conditional statements, but instead of
executing the code if the condition is true and skipping it otherwise, they
will keep running it while the condition is true, or until the condition is
false. Lua has two statements for condition-controlled loops: the <span
style='font-family:"Liberation Mono"'>while</span> loop and the <span
style='font-family:"Liberation Mono"'>repeat</span> loop. Such loops will run
code, then check if the condition is true. If it is true, then they run the
code again, and they repeat until the condition is false. When the condition is
false, they stop repeating the code and the program flow continues. Each
execution of the code is called an iteration. The difference between <span
style='font-family:"Liberation Mono"'>while</span> and <span style='font-family:
"Liberation Mono"'>repeat</span> loops is that <span style='font-family:"Liberation Mono"'>repeat</span>
loops will check the condition at the end of the loop while <span
style='font-family:"Liberation Mono"'>while</span> loops will check it at the
start of the loop. This only makes a difference for the first iteration: <span
style='font-family:"Liberation Mono"'>repeat</span> loops will always execute
the code at least once, even if the condition is false at the first time the
code is executed. This is not the case for <span style='font-family:"Liberation Mono"'>while</span>
loops, which will only execute the code the first time if the condition is
actually true.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.5pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=97 id="Picture 104271"
src="Lua%20Programming_files/image044.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The code above will print <span style='font-family:"Liberation Mono"'>0</span>,
then <span style='font-family:"Liberation Mono"'>1</span>, then <span
style='font-family:"Liberation Mono"'>2</span>, then <span style='font-family:
"Liberation Mono"'>3</span>, and so on, until <span style='font-family:"Liberation Mono"'>9</span>.
After the tenth iteration, <i>number</i> will no longer be smaller than ten,
and therefore the loop will stop executing. Sometimes, loops will be meant to
run forever, in which case they are called infinite loops. Renderers, software
processes that draw things on the screen, for example, will often loop
constantly to redraw the screen to update the image that is shown to the user.
This is frequently the case in video games, where the game view must be updated
constantly to make sure what the user sees is kept up-to-date. However, cases
where loops need to run forever are rare and such loops will often be the
result of errors. Infinite loops can take a lot of computer resources, so it is
important to make sure that loops will always end even if unexpected input is
received from the user.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=97 id="Picture 104273"
src="Lua%20Programming_files/image045.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:26.15pt;
margin-left:-.25pt'>The code above will do exactly the same thing as the code
that used a <span style='font-family:"Liberation Mono"'>while</span> loop
above. The main differences is that, unlike <span style='font-family:"Liberation Mono"'>while</span>
loops, where the condition is put between the <span style='font-family:"Liberation Mono"'>while</span>
keyword and the <span style='font-family:"Liberation Mono"'>do</span> keyword,
the condition is put at the end of the loop, after the <span style='font-family:
"Liberation Mono"'>until</span> keyword. The <span style='font-family:"Liberation Mono"'>repeat</span>
loop is the only statement in Lua that creates a block and that is not closed
by the <span style='font-family:"Liberation Mono"'>end</span> keyword.</p>

<h2 style='margin-left:-.25pt'>Count-controlled loops</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Incrementing a variable is increasing its value by steps,
especially by steps of one. The two loops in the previous section incremented
the variable <i>number</i> and used it to run the code a certain number of
times. This kind of loop is so common that most languages, including Lua, have
a built-in control structure for it. This control structure is called a
count-controlled loop, and, in Lua and most languages, is defined by the <span
style='font-family:"Liberation Mono"'>for</span> statement. The variable used
in such loops is called the loop counter.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.45pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=61 id="Picture 104275"
src="Lua%20Programming_files/image046.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The code above does exactly the same thing as the two loops
presented in the previous section, but the <i>number</i> variable can only be
accessed from inside the loop because it is local to it. The first number
following the variable name and the equality symbol is the initialization. It
is the value the loop counter is initialized to. The second number is the
number the loop stops at. It will increment the variable and repeat the code
until the variable reaches this number. Finally, the third number is the increment:
it is the value the loop counter is increased of at each iteration. If the
increment is not given, it will be assumed to be 1 by Lua. The code below would
therefore print <span style='font-family:"Liberation Mono"'>1</span>, <span
style='font-family:"Liberation Mono"'>1.1</span>, <span style='font-family:
"Liberation Mono"'>1.2</span>, <span style='font-family:"Liberation Mono"'>1.3</span>,
<span style='font-family:"Liberation Mono"'>1.4</span> and <span
style='font-family:"Liberation Mono"'>1.5</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.45pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=97 id="Picture 104277"
src="Lua%20Programming_files/image047.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:19.15pt;
margin-left:-.25pt'>The reason the code above does not go up to 2 and only up
to 1.5 is because of the <span style='font-family:"Liberation Mono"'>break</span>
statement, which instantly terminates the loop. This statement can be used with
any loop, including <span style='font-family:"Liberation Mono"'>while</span>
loops and <span style='font-family:"Liberation Mono"'>repeat</span> loops. Note
that the <span style='font-family:"Liberation Mono"'>&gt;=</span> operator was
used here, although the <span style='font-family:"Liberation Mono"'>==</span>
operator would theoretically have done the job as well. This is because of
decimal precision errors. Lua represents numbers with the <a
href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format"><span
style='color:black;text-decoration:none'>double-precision floating-point format</span></a><a
href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format"><span
style='color:black;text-decoration:none'>,</span></a> which stores numbers in
the memory as an approximation of their actual value. In some cases, the
approximation will match the number exactly, but in some cases, it will only be
an approximation. Usually, these approximations will be close enough to the number
for it to not make a difference, but this system can cause errors when using
the equality operator. This is why it is generally safer when working with
decimal numbers to avoid using the equality operator. In this specific case,
the code would not have worked if the equality operator had been used<sup><span
style='font-size:13.0pt;line-height:141%'>[1]</span></sup> (it would have
continued going up until 1.9), but it works with the <span style='font-family:
"Liberation Mono"'>&gt;=</span> operator.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Blocks</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 103236"
src="Lua%20Programming_files/image043.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>A block is a list of statements that are executed
sequentially. These statements can include empty statements, that do not
contain any instruction. Empty statements can be used to start a block with a
semicolon or write two semicolons in sequence.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>Function calls and assignments may start
with a parenthesis, which can lead to an ambiguity. This fragment is an example
of this:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.5pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=49 id="Picture 104279"
src="Lua%20Programming_files/image048.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>This code could be interpreted in two
ways:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=49 id="Picture 104281"
src="Lua%20Programming_files/image049.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The current parser always sees such constructions in the
first way, interpreting the opening parenthesis as the start of the arguments
to a call. To avoid this ambiguity, it is a good practice to always precede
with a semicolon statements that start with a parenthesis:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-.05pt;
margin-bottom:24.95pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=36 id="Picture 104283"
src="Lua%20Programming_files/image050.gif"></p>

<h2 style='margin-left:-.25pt'>Chunks</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.25pt;
margin-left:-.25pt'>The unit of compilation of Lua is called a <i>chunk</i>. A
chunk can be stored in a file or in a string inside the host program. To
execute a chunk, Lua first precompiles the chunk into instructions for a
virtual machine, and then it executes the compiled code with an interpreter for
the virtual machine. Chunks can also be precompiled into binary form (bytecode)
using <span style='font-family:"Liberation Mono"'>luac</span>, the compilation
program that comes with Lua, or the <span style='font-family:"Liberation Mono"'>string.dump</span>
function, which returns a string containing a binary representation of the
function it is given.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.95pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>load</span>
function can be used to load a chunk. If the first parameter given to the <span
style='font-family:"Liberation Mono"'>load</span> function is a string, the
chunk is that string. In this case, the string may be either Lua code or Lua
bytecode. If the first parameter is a function, <span style='font-family:"Liberation Mono"'>load</span>
will call that function repeatedly to get the pieces of the chunk, each piece
being a string that will be concatenated with the previous strings. It is then
considered that the chunk is complete when nothing or the empty string is
returned.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>load</span>
function will return the compiled chunk as a function if there is no syntactic
error. Otherwise, it will return nil and the error message.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.2pt;
margin-left:-.25pt'>The second parameter of the <span style='font-family:"Liberation Mono"'>load</span>
function is used to set the source of the chunk. All chunks keep a copy of
their source within them, in order to be able to give appropriate error
messages and debugging information. By default, that copy of their source will
be the code given to <span style='font-family:"Liberation Mono"'>load</span>
(if code was given; if a function was given instead, it will be
&quot;=(load)&quot;). This parameter can be used to change it. This is mostly
useful when compiling code to prevent people from getting the original source
back. It is then necessary to remove the source included with the binary
representation because otherwise the original code can be obtained there.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.0pt;
margin-left:-.25pt'>The third parameter of the <span style='font-family:"Liberation Mono"'>load</span>
function can be used to set the environment of the generated function and the
fourth parameter controls whether the chunk can be in text or binary. It may be
the string &quot;b&quot; (only binary chunks), &quot;t&quot; (only text
chunks), or &quot;bt&quot; (both binary and text). The default is
&quot;bt&quot;.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.75pt;
margin-left:-.25pt'>There is also a <span style='font-family:"Liberation Mono"'>loadfile</span>
function that works exactly like <span style='font-family:"Liberation Mono"'>load</span>,
but instead gets the code from a file. The first parameter is the name of the
file from which to get the code. There is no parameter to modify the source
stored in the binary representation, and the third and fourth parameters of the
<span style='font-family:"Liberation Mono"'>load</span> function correspond to
the second and third parameters of this function. The <span style='font-family:
"Liberation Mono"'>loadfile</span> function can also be used to load code from
the standard input, which will be done if no file name is given.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.45pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>dofile</span>
function is similar to the <span style='font-family:"Liberation Mono"'>loadfile</span>
function, but instead of loading the code in a file as a function, it
immediately executes the code contained in a source code file as a Lua chunk.
Its only parameter is used to specify the name of the file it should execute
the contents of; if no argument is given, it will execute the contents of the
standard input. If the chunk returns values, they will be provided by the call
to the <span style='font-family:"Liberation Mono"'>dofile</span> function.
Because <span style='font-family:"Liberation Mono"'>dofile</span> does not run
in protected mode, all errors in chunks executed through it will propagate.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.25pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>1. </span><a
href="http://codepad.org/kYHPSvqx"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>http://codepad.org/kYHPSvqx</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:30.35pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'> </p>

<h1 style='margin-left:-.25pt'>Functions</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>A <i>stack</i> is a list of items where items can be added
(<i>pushed</i>) or removed (<i>popped</i>) that behaves on the
last-in-first-out principle, which means that the last item that was added will
be the first to be removed. This is why such lists are called stacks: on a
stack, you cannot remove an item without first removing the items that are on
top of it. All operations therefore happen at the top of the stack. An item is
above another if it was added after that item and is below it if it was added
before that item.</p>

</div>

<span style='font-size:10.0pt;line-height:141%;font-family:"Liberation Serif",serif;
color:black'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>A <b>function</b> (also called a subroutine, a procedure, a
routine or a subprogram) is a sequence of instructions that perform a specific
task and that can be <i>called</i> from elsewhere in the program whenever that
sequence of instructions should be executed. Functions can also receive values
as input and return an output after potentially manipulating the input or
executing a task based on the input. Functions can be defined from anywhere in
a program, including inside other functions, and they can also be called from
any part of the program that has access to them: functions, just like numbers
and strings, are values and can therefore be stored in variables and have all
the properties that are common to variables. These characteristics make
functions very useful.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Because functions can be called from other functions, the
Lua interpreter (the program that reads and executes Lua code) needs to be able
to know what</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-6.2pt;
margin-bottom:2.95pt;margin-left:-1.5pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=220 height=158 id="Picture 12935"
src="Lua%20Programming_files/image051.gif"></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><span
style='font-family:"Liberation Sans",sans-serif;color:#666666'>An illustration
of a stack and of the</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><span
style='font-family:"Liberation Sans",sans-serif;color:#666666'>operations that
can be performed on it.</span></p>

</div>

<span style='font-size:10.0pt;line-height:141%;font-family:"Liberation Serif",serif;
color:black'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>function called the function it is currently executing so
that, when the function terminates (when there is no more code to execute), it
can return to execution of the right function. This is done with a stack called
the call stack: each item in the call stack is a function that called the
function that is directly above it in the stack, until the last item in the
stack, which is the function currently being executed. When a function
terminates, the interpreter uses the stack's pop operation to remove the last
function in the list, and it then returns to the previous function.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>There are two types of functions: built-in functions and
user-defined functions. <i>Built-in functions</i> are functions provided with
Lua and include functions such as the <span style='font-family:"Liberation Mono"'>print</span>
function, which you already know. Some can be accessed directly, like the <span
style='font-family:"Liberation Mono"'>print </span>function, but others need to
be accessed through a library, like the <span style='font-family:"Liberation Mono"'>math.random</span>
function, which returns a random number.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'><i>User-defined functions</i> are
functions defined by the user. User-defined functions are defined using a
function constructor:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.5pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=60 id="Picture 104285"
src="Lua%20Programming_files/image052.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The code above creates a function with three parameters and
stores it in the variable <i>func</i>. The following code does exactly the same
as the above code, but uses syntactic sugar for defining the function:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.6pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=60 id="Picture 104287"
src="Lua%20Programming_files/image053.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.2pt;
margin-left:-.25pt'>It should be noted that, when using the second form, it is
possible to refer to the function from inside itself, which is not possible
when using the first form. This is because <span style='font-family:"Liberation Mono"'>local
function foo() end</span> translates to <span style='font-family:"Liberation Mono"'>local
foo; foo = function() end</span> rather than <span style='font-family:"Liberation Mono"'>local
foo = function() end</span>. This means that <i>foo</i> is part of the
function’s environment in the second form and not in the first, which explains
why the second form makes it possible to refer to the function itself.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>In both cases, it is possible to omit the <span
style='font-family:"Liberation Mono"'>local</span> keyword to store the
function in a global variable. Parameters work like variables and allow
functions to receive values. When a function is called, arguments may be given
to it. The function will then receive them as parameters. Parameters are like
local variables defined at the beginning of a function, and will be assigned in
order depending on the order of the arguments as they are given in the function
call; if an argument is missing, the parameter will have the value <span
style='font-family:"Liberation Mono"'>nil</span>. The function in the following
example adds two numbers and prints the result. It would therefore print <span
style='font-family:"Liberation Mono"'>5</span> when the code runs.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:-.4pt;text-align:left;text-indent:0in;line-height:
107%'><img border=0 width=678 height=82 id="Picture 104289"
src="Lua%20Programming_files/image054.gif"></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.7pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 104048"
src="Lua%20Programming_files/image055.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Function calls are most of the time under the form <span
style='font-family:"Liberation Mono"'>name(arguments)</span>. However, if there
is only one argument and it is either a table or a string, and it isn't in a
variable (meaning it is constructed directly in the function call, expressed as
a literal), the parentheses can be omitted:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=49 id="Picture 104291"
src="Lua%20Programming_files/image056.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.2pt;
margin-left:-.25pt'>The second line of code in the previous example would print
the memory address of the table. When converting values to strings, which the <span
style='font-family:"Liberation Mono"'>print</span> function does automatically,
complex types (functions, tables, userdata and threads) are changed to their
memory addresses. Booleans, numbers and the nil value, however, will be
converted to corresponding strings.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>The terms <i>parameter</i> and <i>argument</i> are often
used interchangeably in practice. In this book, and in their proper meanings,
the terms <i>parameter</i> and <i>argument</i> mean, respectively, a name to
which the value of the corresponding argument will be assigned and a value that
is passed to a function to be assigned to a parameter.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Returning values</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 104055"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Functions can receive input, manipulate it and give back
output. You already know how they can receive input (parameters) and manipulate
it (function body). They can also give output by returning one or many values
of any type, which is done using the return statement. This is why function
calls are both statements and expressions: they can be executed, but they can
also be evaluated.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=84 id="Picture 104293"
src="Lua%20Programming_files/image057.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.1pt;
margin-left:-.25pt'>The code in the above function will first define the
function <span style='font-family:"Liberation Mono"'>add</span>. Then, it will
call it with 5 and 6 as values. The function will add them and return the
result, which will then be printed. This is why the code above would print <span
style='font-family:"Liberation Mono"'>11</span>. It is also possible for a
function to return many values by separating the expressions that evaluate to
these values with commas.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Errors</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 104056"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>There are three types of errors: syntactic errors, static
semantic errors and semantic errors. Syntactic errors happen when code is
plainly invalid. The following code, for example, would be detected by Lua as
invalid:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.4pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=37 id="Picture 104295"
src="Lua%20Programming_files/image058.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>The code above doesn't make sense; it is impossible to get
a meaning out of it. Similarly, in English, &quot;cat dog tree&quot; is not
syntactically valid because it has no meaning. It doesn't follow the rules for
creating a sentence.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Static semantic errors happen when code has a meaning, but
still doesn't make sense. For example, if you try adding a string with a
number, you get a static semantic error because it is impossible to add a
string with a number:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.4pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=36 id="Picture 104297"
src="Lua%20Programming_files/image059.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.65pt;
margin-left:-.25pt'>The code above follows Lua's syntactic rules, but it still
doesn't make sense because it is impossible to add a string with a number
(except when the string represents a number, in which case it will be coerced
into one). This can be compared in English to the sentence &quot;I are
big&quot;. It follows the rules for creating sentences in English, but it still
doesn't make sense because &quot;I&quot; is singular and &quot;are&quot; is
plural.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>Finally, semantic errors are errors that happen when the
meaning of a piece of code is not what its creator thinks it is. Those are the
worst errors because they can be very hard to find. Lua will always tell you
when there is a syntactic error or a static semantic error (this is called
throwing an error), but it cannot tell you when there is a semantic error since
it doesn't know what you think the meaning of the code is. These errors happen
more often than most people would think they do and finding and correcting them
is something many programmers spend a lot of time doing.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>The process of finding errors and correcting them is called
debugging. Most of the time, programmers will spend more time finding errors
than actually correcting them. This is true for all types of errors. Once you
know what the problem is, it is usually simple to fix it, but sometimes, a
programmer can look at a piece of code for hours without finding what is wrong
in it.</p>

<h2 style='margin-left:-.25pt'>Protected calls</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Throwing an error is the action of indicating, whether it
is done manually or automatically by the interpreter (the program that reads
the code and executes it), that something is wrong with the code. It is done
automatically by Lua when the code given is invalid, but it can be done
manually with the <span style='font-family:"Liberation Mono"'>error</span>
function:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.55pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=84 id="Picture 104299"
src="Lua%20Programming_files/image060.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.2pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>error</span>
function also has a second argument, which indicates the stack level at which
the error should be thrown, but this will not be covered in this book. The <span
style='font-family:"Liberation Mono"'>assert</span> function does the same
thing as the <span style='font-family:"Liberation Mono"'>error</span> function,
but it will only throw an error if its first argument evaluates to nil or false
and it doesn't have an argument that can be used to specify the stack level at
which the error should be thrown. The assert function is useful at the start of
a script, for example, to check if a library that is required for the script to
work is available.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>It may be hard to understand why one would desire to
voluntarily throw an error, since the code in a program stops running whenever
an error is thrown, but, often, throwing errors when functions are used
incorrectly or when a program is not running in the right environment can be
helpful to help the person who will have to debug the code to find it
immediately without having to stare at the code for a long time without
realizing what is wrong.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;line-height:107%'>Sometimes, it can be useful to prevent an
error from stopping the code and instead do something like displaying an error
message to the user so he can report the bug to the developer. This is called <i>exception
handling</i> (or <i>error handling</i>) and is done by catching the error to
prevent its propagation and running an exception handler to handle it. The way
it is done in different programming languages varies a lot. In Lua, it is done
using protected calls<sup><span style='font-size:13.0pt;line-height:107%'>[1]</span></sup>.
They are called protected calls because a function called in protected mode
will not stop the program if an error happens. There are two functions that can
be used to call a function in protected mode:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=662
 style='width:496.75pt;margin-left:.4pt;border-collapse:collapse'>
 <tr style='height:15.0pt'>
  <td width=142 valign=top style='width:106.55pt;border:solid #AAAAAA 1.0pt;
  padding:1.8pt 5.75pt 0in 6.4pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:.45pt;
  margin-bottom:0in;margin-left:0in;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Function</span></b></p>
  </td>
  <td width=520 valign=top style='width:390.2pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.8pt 5.75pt 0in 6.4pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:.45pt;
  margin-bottom:0in;margin-left:0in;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Description</span></b></p>
  </td>
 </tr>
 <tr style='height:65.3pt'>
  <td width=142 style='width:106.55pt;border:solid #AAAAAA 1.0pt;border-top:
  none;padding:1.8pt 5.75pt 0in 6.4pt;height:65.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in;line-height:107%'><span style='font-family:"Liberation Mono"'>pcall(function,
  ...)</span></p>
  </td>
  <td width=520 valign=top style='width:390.2pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.8pt 5.75pt 0in 6.4pt;height:65.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:2.05pt;
  margin-bottom:0in;margin-left:0in;text-align:left;text-indent:0in;line-height:
  107%'><span style='font-family:"Liberation Sans",sans-serif'>Calls the
  function in protected mode and returns a status code (a boolean value whose
  value depends on if an error was thrown or not) and the values returned by
  the function, or the error message if the function was stopped by an error.
  Arguments can be given to the function by passing them to the </span><span
  style='font-family:"Liberation Mono"'>pcall</span><span style='font-family:
  "Liberation Sans",sans-serif'> function after the first argument, which is
  the function that should be called in protected mode.</span></p>
  </td>
 </tr>
 <tr style='height:66.05pt'>
  <td width=142 style='width:106.55pt;border:solid #AAAAAA 1.0pt;border-top:
  none;padding:1.8pt 5.75pt 0in 6.4pt;height:66.05pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in;line-height:107%'><span style='font-family:"Liberation Mono"'>xpcall(function,
  handler, ...)</span></p>
  </td>
  <td width=520 valign=top style='width:390.2pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.8pt 5.75pt 0in 6.4pt;height:66.05pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in;line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Does
  the same thing as pcall, but, when the function errors, instead of returning
  the same values as those pcall would return, it calls the handler function
  with them as parameters. The handler function can then be used, for example,
  to display an error message. As for the </span><span style='font-family:"Liberation Mono"'>pcall</span><span
  style='font-family:"Liberation Sans",sans-serif'> function, arguments can be
  passed to the function by being given to the </span><span style='font-family:
  "Liberation Mono"'>xpcall</span><span style='font-family:"Liberation Sans",sans-serif'>
  function.</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Stack overflow</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 102710"
src="Lua%20Programming_files/image043.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>The call stack, the stack that contains all the functions
that were called in the order in which they were called, was mentioned earlier.
That call stack in most languages, including Lua, has a maximum size. This
maximum size is so big that it should not be worried about in most cases, but
functions that call themselves (this is called recursivity and such functions
are called recursive functions) can reach this limit if there is nothing to
prevent them from calling themselves over and over indefinitely. This is called
a stack overflow. When the stack overflows, the code stops running and an error
is thrown.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Variadic functions</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 102711"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'><i>Variadic functions</i>, which are also called vararg
functions, are functions that accept a variable number of arguments. A variadic
function is indicated by three dots (&quot;...&quot;) at the end of its
parameter list. Arguments that do not fit in the parameters in the parameter
list, instead of being discarded, are then made available to the function
through a vararg expression, which is also indicated by three dots. The value
of a vararg expression is a list of values (not a table) which can then be put
in a table to be manipulated with more ease with the following expression: <span
style='font-family:"Liberation Mono"'>{...}</span>. In Lua 5.0, instead of
being available through a vararg expression, the extra arguments were available
in a special parameter called &quot;arg&quot;. The following function is an
example of a function that would add the first argument to all the arguments it
receives, then add all of them together and print the result:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.4pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=97 id="Picture 104301"
src="Lua%20Programming_files/image061.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.15pt;
margin-left:-.25pt;line-height:107%'>It is not necessary to understand the code
above as it is only a demonstration of a variadic function.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.9pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>select</span>
function is useful to manipulate argument lists without needing to use tables.
It is itself a variadic function, as it accepts an indefinite number of
arguments. It returns all arguments after the argument with the number given as
its first argument (if the number given is negative, it indexes starting from
the end, meaning -1 is the last argument). It will also return the number of
arguments it received, excluding the first one, if the first argument is the
string &quot;#&quot;. It can be useful to discard all arguments in an argument
list before a certain number, and, more originally, to distinguish between nil
values being sent as arguments and nothing being sent as an argument. Indeed, <span
style='font-family:"Liberation Mono"'>select</span> will distinguish, when <span
style='font-family:"Liberation Mono"'>&quot;#&quot;</span> is given as its
first argument, nil values from no value. Argument lists (and return lists as
well) are instances of tuples, which will be explored in the chapter about
tables; the <span style='font-family:"Liberation Mono"'>select</span> function
works with all tuples.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895810048'><span style='left:0px;position:
absolute;left:0px;top:-13px;width:678px;height:132px'><img width=678
height=132 src="Lua%20Programming_files/image062.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>print</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>((</span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>function</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(...) </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>return</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>select</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>'#'</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>, ...) </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>==</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>1</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#7216AB'>and</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;nil&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#7216AB'>or</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;no value&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>end</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>)()) </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>--&gt; no value</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>print</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>((</span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>function</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(...) </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>return</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>select</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>'#'</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>, ...) </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>==</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>1</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#7216AB'>and</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;nil&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#7216AB'>or</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;no value&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>end</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>)(</span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>nil</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>)) </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; nil</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>print</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>((</span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>function</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(...) </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>return</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>select</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>'#'</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>, ...) </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>==</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#666666'>1</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#7216AB'>and</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>&quot;nil&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#7216AB'>or</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>&quot;no value&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>end</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>) (variable_that_is_not_defined)) </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; nil</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:9.0pt;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:8.0pt;line-height:107%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- As this code shows, the function is able to detect whether
the value nil was passed as an argument or whether there was simply no value
passed.</span></i><span style='font-size:8.0pt;line-height:103%;font-family:
"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:19.9pt;margin-left:8.75pt;text-align:left;line-height:103%'><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- In normal circumstances, both are considered as nil, and this
is the only way to distinguish them.</span></i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:29.7pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='font-family:"Liberation Sans",sans-serif'>1. </span><a
href="http://www.lua.org/pil/contents.html"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>For more information, see: Ierusalimschy,
Roberto (2003). &quot;Error Handling in Application Code&quot;</span></a><a
href="http://www.lua.org/pil/contents.html"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>. </span></a><a
href="http://www.lua.org/pil/contents.html"><i><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>Programming in Lua</span></i></a><a
href="http://www.lua.org/pil/contents.html"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'> (first ed.). Lua.org. </span></a><a
href="https://en.wikipedia.org/wiki/International_Standard_Book_Number"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>ISBN</span></a><a href="http://www.lua.org/pil/contents.html"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'> </span></a><a
href="https://en.wikibooks.org/wiki/Special:BookSources/8590379817"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>8590379817.</span></a><a href="http://www.lua.org/pil/24.3.1.html"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'> </span></a><a href="http://www.lua.org/pil/24.3.1.html"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>http://www.lua.org/pil/24.3.1.html.</span></a><a
href="http://www.lua.org/pil/contents.html"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'> Retrieved June 20, 2014</span></a><a
href="http://www.lua.org/pil/contents.html"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>.</span></a></p>

<h1 style='margin-left:-.25pt'>Standard libraries</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:18.8pt;
margin-left:-.25pt'>Lua is a language that is said to &quot;not be provided
with batteries&quot;. This means that its libraries are kept to the minimum
necessary to do some stuff. Lua relies on its community to create libraries
that can be used to perform more specific tasks. There are ten libraries
available in Lua. The <i>Lua Reference Manual</i> provides documentation for
all the libraries<sup><span style='font-size:13.0pt;line-height:141%'>[1]</span></sup>,
so they will only be briefly described here<sup><span style='font-size:13.0pt;
line-height:141%'>[2]</span></sup>. All the libraries except the basic and the
package libraries provide their functions and values as fields of a table.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Basic library</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 98819"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>The basic library provides core functionality to Lua. All
its functions and values are directly available in the global environment, and
all functions and values available directly in the global environment by
default are part of the basic library.</p>

<h2 style='margin-left:-.25pt'>Assertion</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:26.4pt;
margin-left:-.25pt'>An <i>assertion</i> is a predicate that is assumed by the
developer to be true. They are used in programs to ensure that a specific
condition is true at a specific moment of the execution of a program.
Assertions are used in <a
href="https://en.wikibooks.org/w/index.php?title=Lua_Programming/Unit_testing&amp;action=edit&amp;redlink=1"><span
style='color:black;text-decoration:none'>unit tests </span></a>to verify that a
program works correctly, but are also used in program code, in which case the
program will fail when an assertion is false, either to verify that the
environment in which the program is correct, or to verify that no error was
made in program code and to generate appropriate error messages to make it
easier to find bugs in the code when something doesn't happen as expected. In
Lua, assertions are made with the <span style='font-family:"Liberation Mono"'>assert</span>
function, which accepts a condition and a message (which will default to
&quot;assertion failed!&quot;) as parameters. When the condition evaluates to
false, <span style='font-family:"Liberation Mono"'>assert</span> throws an
error with the message. When it evaluates to true, <span style='font-family:
"Liberation Mono"'>assert</span> returns all its arguments.</p>

<h2 style='margin-left:-.25pt'>Garbage collection</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'><i>Garbage collection</i> is a form of automatic memory
management implemented by Lua and many other languages. When a program needs to
store data in a variable, it asks the operating system to allocate space in the
computer's memory to store the variable's value. Then, when it doesn't need the
space anymore (generally because the variable fell out of scope), it tells the
operating system to deallocate the space so that another program may use it. In
Lua, the actual process is much more complex, but the basic idea is the same:
the program must tell the operating system when it doesn't need a variable's
value anymore. In low level languages, allocation is handled by the language,
but deallocation is not because the language cannot know when a programmer
doesn't need a value anymore: even if a variable that referenced the value fell
out of scope or was removed, another variable or a field in a script may still
reference it, and deallocating it would cause problems. In higher level
languages, deallocation may be handled by various automatic memory management
systems, such as garbage collection, which is the system used by Lua. The
garbage collector regularly searches through all the values allocated by Lua
for values that are not referenced anywhere. It will collect values that the
program cannot access anymore (because there is no reference to them) and,
since it knows that these values can safely be deallocated, will deallocate
them. This is all done transparently and automatically, so the programmer does
not generally need to do anything about it. However, sometimes, the developer
may want to give instructions to the garbage collector.</p>

<h3 style='margin-left:-.25pt'>Weak references</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.25pt;
margin-left:-.25pt'>Weak references are references that are ignored by the
garbage collector. These references are indicated to the garbage collector by
the developer, using the <span style='font-family:"Liberation Mono"'>mode</span>
metamethod. A table's <span style='font-family:"Liberation Mono"'>mode</span>
metamethod should be a string. If that string contains the letter
&quot;k&quot;, all the keys of the table's fields are weak, and if it contains
the letter &quot;v&quot;, all the values of the table's fields are weak. When
an array of objects has weak values, the garbage collector will collect these
objects even if they are referenced in that array, as long as they are only
referenced in that array and in other weak references. This behavior is
sometimes useful, but rarely used.</p>

<h3 style='margin-left:-.25pt'>Manipulating the garbage collector</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.15pt;
margin-left:-.25pt'>The garbage collector may be manipulated with the <span
style='font-family:"Liberation Mono"'>collectgarbage</span> function, which is
part of the basic library and serves as an interface to the garbage collector.
Its first argument is a string that indicates to the garbage collector what
action should be performed; a second argument is used by some actions. The <span
style='font-family:"Liberation Mono"'>collectgarbage</span> function can be
used to stop the garbage collector, manually perform collection cycles and
count the memory used by Lua.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.65pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Coroutines</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:36.9pt;
margin-bottom:12.65pt;margin-left:46.25pt;text-align:left;line-height:98%'><span
style='position:relative;z-index:-1895809024'><span style='left:0px;position:
absolute;left:0px;top:-17px;width:677px;height:108px'><img width=677
height=108 src="Lua%20Programming_files/image063.gif"></span></span><b><span
style='font-size:12.0pt;line-height:98%'>Coroutines</span></b><span
style='font-size:12.0pt;line-height:98%'> are </span><a
href="https://en.wikipedia.org/wiki/computer_program"><span style='font-size:
12.0pt;line-height:98%;color:black;text-decoration:none'>computer program</span></a><span
style='font-size:12.0pt;line-height:98%'> components that generalize </span><a
href="https://en.wikipedia.org/wiki/subroutine"><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>subroutines</span></a><span
style='font-size:12.0pt;line-height:98%'> to allow multiple </span><a
href="https://en.wikipedia.org/wiki/entry_point"><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>entry points</span></a><span
style='font-size:12.0pt;line-height:98%'> for suspending and resuming execution
at certain locations. Coroutines are well-suited for implementing more familiar
program components such as </span><a
href="https://en.wikipedia.org/wiki/cooperative_multitasking"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>cooperative
tasks</span></a><a href="https://en.wikipedia.org/wiki/cooperative_multitasking"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>,</span></a><span
style='font-size:12.0pt;line-height:98%'> </span><a
href="https://en.wikipedia.org/wiki/exception_handling"><span style='font-size:
12.0pt;line-height:98%;color:black;text-decoration:none'>exceptions</span></a><span
style='font-size:12.0pt;line-height:98%'>, </span><a
href="https://en.wikipedia.org/wiki/event_loop"><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>event loop</span></a><span
style='font-size:12.0pt;line-height:98%'>, </span><a
href="https://en.wikipedia.org/wiki/iterator"><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>iterators</span></a><a
href="https://en.wikipedia.org/wiki/iterator"><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>,</span></a><span
style='font-size:12.0pt;line-height:98%'> </span><a
href="https://en.wikipedia.org/wiki/lazy_evaluation"><span style='font-size:
12.0pt;line-height:98%;color:black;text-decoration:none'>infinite lists </span></a><span
style='font-size:12.0pt;line-height:98%'>and </span><a
href="https://en.wikipedia.org/wiki/pipeline_(software)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>pipes</span></a><span
style='font-size:12.0pt;line-height:98%'>. —Wikipedia, </span><a
href="https://en.wikipedia.org/wiki/Coroutine"><i><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>Coroutine</span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.7pt;
margin-left:-.25pt'>Coroutines are components that can be created and
manipulated with the coroutine library in Lua and that allow the yielding and
resuming of the execution of a function at specific locations by calling
functions that yield the coroutine from inside of itself or that resume it from
outside of itself. Example:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.1pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>A function in the main thread
creates a coroutine from a function with </span><span style='font-family:"Liberation Mono"'>coroutine.create</span><span
style='font-family:"Liberation Sans",sans-serif'> and resumes it with </span><span
style='font-family:"Liberation Mono"'>coroutine.resume</span><span
style='font-family:"Liberation Sans",sans-serif'>, to which the number 3 is
passed.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.35pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>The function in the coroutine
executes and gets the number passed to </span><span style='font-family:"Liberation Mono"'>coroutine.resume</span><span
style='font-family:"Liberation Sans",sans-serif'> as an argument.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>The function arrives at a
certain point in its execution where it calls </span><span style='font-family:
"Liberation Mono"'>coroutine.yield</span><span style='font-family:"Liberation Sans",sans-serif'>
with, as an argument, the sum of the argument it received (3) and 2 (hence,
3+2=5).</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.25pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>The call to </span><span
style='font-family:"Liberation Mono"'>coroutine.resume</span><span
style='font-family:"Liberation Sans",sans-serif'> returns 5, because it was
passed to </span><span style='font-family:"Liberation Mono"'>coroutine.yield</span><span
style='font-family:"Liberation Sans",sans-serif'>, and the main thread, now
running again, stores that number in a variable. It resumes the coroutine again
after having executed some code, passing to </span><span style='font-family:
"Liberation Mono"'>coroutine.resume</span><span style='font-family:"Liberation Sans",sans-serif'>
the double of the value it has received from the call to </span><span
style='font-family:"Liberation Mono"'>coroutine.resume</span><span
style='font-family:"Liberation Sans",sans-serif'> (i.e. it passes 5×2=10).</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:3.4pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>The coroutine gets the value
passed to </span><span style='font-family:"Liberation Mono"'>coroutine.resume</span><span
style='font-family:"Liberation Sans",sans-serif'> as the result of the call to </span><span
style='font-family:"Liberation Mono"'>coroutine.yield</span><span
style='font-family:"Liberation Sans",sans-serif'> and terminates after running
some more code. It returns the difference between the result of the call to </span><span
style='font-family:"Liberation Mono"'>coroutine.yield</span><span
style='font-family:"Liberation Sans",sans-serif'> and the value it was given as
a parameter initially (i.e. 10&#8722;3=7).</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.25pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>The main thread gets the value
returned by the coroutine as the result of the call to </span><span
style='font-family:"Liberation Mono"'>coroutine.resume</span><span
style='font-family:"Liberation Sans",sans-serif'> and goes on.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.0pt;
margin-left:-.25pt'>This example, put in code, gives the following:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> co </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>=</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>coroutine.create</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>(</span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>function</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(initial_value)
</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:152.7pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895808000'><span style='left:0px;position:
absolute;left:0px;top:-25px;width:678px;height:121px'><img width=678
height=121 src="Lua%20Programming_files/image064.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>     </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> value_obtained </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#666666'>=</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>coroutine.yield</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>(initial_value </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>+</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#666666'>2</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>) </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- 3+2=5</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>       </span><b><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:green'>return</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> value_obtained
</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>-</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> initial_value </span><i><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#408080'>-- 10-3=7</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>end</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>)  </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:123.15pt;
margin-bottom:20.8pt;margin-left:8.75pt;text-align:left;line-height:103%'><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> _, initial_result </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>coroutine.resume</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(co, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>3</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>) </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>--
initial_result: 5</span></i><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>local</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> _,
final_result </span><span style='font-size:8.0pt;line-height:103%;font-family:
"Liberation Mono";color:#666666'>=</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:green'>coroutine.resume</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(co,
initial_result </span><span style='font-size:8.0pt;line-height:103%;font-family:
"Liberation Mono";color:#666666'>*</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#666666'>2</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>) </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>-- 5*2=10</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>print</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(final_result)
</span><i><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; 7</span></i><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.5pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>coroutine.create</span>
function creates a coroutine from a function; coroutines are values of type
&quot;thread&quot;. <span style='font-family:"Liberation Mono"'>coroutine.resume</span>
starts or continues the execution of a coroutine. A coroutine is said to be
dead when it has encountered an error or has nothing left to run (in which case
it has terminated its execution). When a coroutine is dead, it cannot be
resumed. The <span style='font-family:"Liberation Mono"'>coroutine.resume</span>
function will return <span style='font-family:"Liberation Mono"'>true</span> if
the execution of the coroutine was successful, along with all the values
returned, if the coroutine has terminated, or passed to <span style='font-family:
"Liberation Mono"'>coroutine.yield</span> if it has not. If the execution was
not successful, it will return <span style='font-family:"Liberation Mono"'>false</span>
along with an error message. <span style='font-family:"Liberation Mono"'>coroutine.resume</span>
returns the running coroutine and <span style='font-family:"Liberation Mono"'>true</span>
when that coroutine is the main thread, or <span style='font-family:"Liberation Mono"'>false</span>
otherwise.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.85pt;
margin-left:-.25pt;line-height:107%'>The <span style='font-family:"Liberation Mono"'>coroutine.status</span>
function returns the status of a coroutine as a string:</p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
margin-bottom:3.3pt;margin-left:8.25pt;text-align:center;text-indent:0in;
line-height:107%'><img width=4 height=24
src="Lua%20Programming_files/image065.gif" align=left hspace=12><span
style='font-family:"Liberation Sans",sans-serif'>&quot;running&quot; if the
coroutine is running, which means it must be the coroutine which called </span><span
style='font-family:"Liberation Mono"'>coroutine.status</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>&quot;suspended&quot; if the
coroutine is suspended in a call to yield or if it has not started running yet</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=23 src="Lua%20Programming_files/image066.gif" align=left
hspace=12><span style='font-family:"Liberation Sans",sans-serif'>&quot;normal&quot;
if the coroutine is active but not running, which means it has resumed another
coroutine</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.35pt;margin-left:8.75pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>&quot;dead&quot; if the
coroutine has finished running or has encountered an error</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.45pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>coroutine.wrap</span>
function returns a function that resumes a coroutine every time it is called.
Extra arguments given to this function will act as extra arguments to <span
style='font-family:"Liberation Mono"'>coroutine.resume</span> and values
returned by the coroutine or passed to <span style='font-family:"Liberation Mono"'>coroutine.yield</span>
will be returned by a call to the function. The <span style='font-family:"Liberation Mono"'>coroutine.wrap</span>
function, unlike <span style='font-family:"Liberation Mono"'>coroutine.resume</span>,
does not call the coroutine in protected mode and propagates errors.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.1pt;
margin-left:-.25pt;line-height:107%'>There are many use cases for coroutines,
but describing them are outside the scope of this book.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>String matching</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 99505"
src="Lua%20Programming_files/image043.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>When manipulating strings, it is frequently useful to be
able to search strings for substrings that follow a certain pattern. Lua has a
string manipulation library that offers functions for doing this and a notation
for expressing patterns that the functions can search for in strings. The
notation offered by Lua is very similar to <a
href="https://en.wikipedia.org/wiki/regular_expression"><span style='color:
black;text-decoration:none'>regular expressions,</span></a> a notation for
expressing patterns used by most languages and tools in the programming world.
However, it is more limited and has slightly different syntax.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.7pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>find</span>
function of the string library looks for the first match of a pattern in a
string. If it finds an occurrence of the pattern in the string, it returns the
indices in the string (integers representing the position of characters in the
string starting from the first character, which is at position 1) where the
occurrence starts and ends. If it doesn't find an occurrence of the pattern, it
returns nothing. The first parameter it accepts is the string, the second being
the pattern and the third being an integer indicating the character position
where the <span style='font-family:"Liberation Mono"'>find</span> function
should start searching. Finally, the <span style='font-family:"Liberation Mono"'>find</span>
function can be told to perform a simple match without patterns by being given
the value <span style='font-family:"Liberation Mono"'>true</span> as its fourth
argument. It will then simply search for an occurrence of the second string it
is given in the first string. The third argument must be given when a simple
match is performed. This example code searches for the word &quot;lazy&quot; in
a sentence and prints the start and end positions of the occurrence it finds of
the word:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> start_position, end_position </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.find</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;The quick brown fox jumps over the lazy dog.&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;lazy&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>, </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>1</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>true</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:21.85pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895804928'><span style='left:0px;position:
absolute;left:0px;top:-36px;width:678px;height:73px'><img width=678 height=73
src="Lua%20Programming_files/image067.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>print</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>&quot;The word </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\&quot;</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'>lazy</span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\&quot;</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'> was found starting at position
&quot;</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>
</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>..</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> start_position </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#666666'>..</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot; and ending at position &quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>..</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> end_position </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#666666'>..</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;.&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.2in;margin-left:.5pt;text-align:left;line-height:147%'>This code
gives the result <span style='font-family:"Liberation Mono"'>The word
&quot;lazy&quot; was found starting at position 36 and ending at position 39.</span>.
It is equivalent to the following:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:157.8pt;
margin-bottom:.15pt;margin-left:8.75pt;text-align:left;line-height:103%'><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> sentence </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>=</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;The quick brown fox jumps over the lazy dog.&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> start_position, end_position </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> sentence:find(</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#BA2121'>&quot;lazy&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>1</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>, </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>true</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:20.7pt;margin-left:8.75pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895803904'><span style='left:0px;position:
absolute;left:0px;top:-36px;width:678px;height:73px'><img width=678 height=73
src="Lua%20Programming_files/image068.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>print</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:#BA2121'>&quot;The word </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\&quot;</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'>lazy</span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BB6622'>\&quot;</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'> was found starting at position
&quot;</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>
</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>..</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> start_position </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#666666'>..</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot; and ending at position &quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>..</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> end_position </span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:#666666'>..</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;.&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.9pt;
margin-left:-.25pt'>This works because the <span style='font-family:"Liberation Mono"'>index</span>
metamethod of strings is set to the table containing the functions of the
string library, making it possible to replace <span style='font-family:"Liberation Mono"'>string.a(b,
...)</span> by <span style='font-family:"Liberation Mono"'>b:a(...)</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Functions in the string library that accept indices to
indicate character position or that return such indices consider the first
character as being at position 1. They accept negative numbers and interpret
them as indexing backwards, from the end of the string, with the last character
being at position -1.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Patterns are strings that follow a certain notation to
indicate a pattern that a string may match or not. For this purpose, patterns
contain character classes, combinations that represent sets of characters.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=449
 style='width:336.9pt;margin-left:.4pt;border-collapse:collapse'>
 <tr style='height:15.0pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:15.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-family:"Liberation Sans",sans-serif'>Character combination</span></b></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border:solid #AAAAAA 1.0pt;
  border-left:none;padding:1.85pt 2.25pt 0in 2.4pt;height:15.0pt'>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif'>Description</span></b></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>.</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>All
  characters</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%a</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Letters
  (uppercase and lowercase)</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%c</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Control
  characters</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%d</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Digits</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%g</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Printable
  characters (except the space character)</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%l</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Lowercase
  letters</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%p</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Punctuation
  characters</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%s</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Space
  characters</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%u</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Uppercase
  letters</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%w</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Alphanumeric
  characters (digits and letters)</span></p>
  </td>
 </tr>
 <tr style='height:19.5pt'>
  <td width=148 valign=top style='width:111.05pt;border:solid #AAAAAA 1.0pt;
  border-top:none;padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>%x</span></p>
  </td>
  <td width=301 valign=top style='width:225.85pt;border-top:none;border-left:
  none;border-bottom:solid #AAAAAA 1.0pt;border-right:solid #AAAAAA 1.0pt;
  padding:1.85pt 2.25pt 0in 2.4pt;height:19.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:3.95pt;text-align:left;text-indent:0in;
  line-height:107%'><span style='font-family:"Liberation Sans",sans-serif'>Hexadecimal
  digits</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.95pt;
margin-left:-.25pt'>All characters that are not special represent themselves
and special characters (all characters that are not alphanumeric) can be
escaped by being prefixed by a percentage sign. Character classes can be
combined to create bigger character classes by being put in a set. Sets are
noted as character classes noted between square brackets (i.e. <span
style='font-family:"Liberation Mono"'>[%xp]</span> is the set of all
hexadecimal characters plus the letter &quot;p&quot;). Ranges of characters can
be noted by separating the end characters of the range, in ascending order, with
a hyphen (i.e. <span style='font-family:"Liberation Mono"'>[0-9%s]</span>
represents all the digits from 0 to 9 plus space characters). If the caret
(&quot;^&quot;) character is put at the start of the set (right after the
opening square bracket), the set will contain all characters except those it
would have contained if that caret had not been put at the start of the set.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.85pt;
margin-left:-.25pt'>The complement of all classes represented by a letter
preceded of a percentage sign can be noted as a percentage sign followed by the
corresponding uppercase letter (i.e. <span style='font-family:"Liberation Mono"'>%S</span>
represents all characters except space characters).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Patterns are sequences of pattern items that represent what
sequences should be found in the pattern for a string to match it. A pattern
item can be a character class, in which case it matches any of the characters
in the class once, a character class followed by the &quot;*&quot; character,
in which case it matches 0 or more repetitions of characters in the class
(these repetition items will always match the longest possible sequence), a
character class followed by the addition (&quot;+&quot;) character, in which
case it matches 1 or more repetitions of characters in the class (these
repetition items will also always match the longest possible sequence), a
character class followed by the minus (&quot;-&quot;) character, in which case
it matches 0 or more repetitions of characters in the class, but matches the
shortest possible sequence or a character class followed by an interrogation
mark, in which case it matches one or no occurrence of a character in the
class.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.75pt;
margin-left:-.25pt'>It is possible to match substrings equivalent to previously
captured substrings: <span style='font-family:"Liberation Mono"'>%1</span> will
match the first captured substring, <span style='font-family:"Liberation Mono"'>%2</span>
the second, and so on until <span style='font-family:"Liberation Mono"'>%9</span>.
Captures are described below. There are two other functionalities offered by
patterns, as described by the reference manual:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:4.45pt;margin-left:46.25pt;text-align:left;line-height:98%'><img
width=2 height=191 src="Lua%20Programming_files/image069.gif" align=left
hspace=12><span style='font-family:"Liberation Mono"'>%bxy</span><span
style='font-size:12.0pt;line-height:98%'>, where <i>x</i> and <i>y</i> are two
distinct characters; such item matches strings that start with <i>x</i>, end
with <i>y</i>, and where the <i>x</i> and <i>y</i> are balanced. This means
that, if one reads the string from left to right, counting +1 for an <i>x</i>
and -1 for a <i>y</i>, the ending <i>y</i> is the first <i>y</i> where the
count reaches 0. For instance, the item </span><span style='font-family:"Liberation Mono"'>%b()</span><span
style='font-size:12.0pt;line-height:98%'> matches expressions with balanced
parentheses.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:30.15pt;margin-bottom:
9.2pt;margin-left:30.5pt'><span style='font-family:"Liberation Mono"'>%f[set]</span>,
a frontier pattern; such item matches an empty string at any position such that
the next character belongs to set and the previous character does not belong to
set. The set <i>set</i> is interpreted as previously described. The beginning
and the end of the subject are handled as if they were the character '\0'.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;margin-left:
46.25pt'><span style='font-size:12.0pt;line-height:107%;font-family:"Liberation Serif",serif;
font-weight:normal'>—Lua authors, </span><a
href="http://www.lua.org/manual/5.2/manual.html#6.4.1"><i><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Serif",serif;
color:black;font-weight:normal;text-decoration:none'>Lua 5.2 Reference Manual</span></i></a></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Patterns are sequences of pattern items, optionally
preceded by a caret, which indicates that the pattern can only match at the
beginning of the string, and optionally followed by a dollar sign, which
indicates that the pattern can only match at the end of the string. These
symbols are said to <i>anchor</i> the match at the beginning or the end of the
string. These two characters only have a special meaning when at the beginning
or at the end of a pattern.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.0pt;
margin-left:-.25pt'>Sub-patterns can be enclosed inside parentheses inside
patterns to indicate captures. When a match succeeds, the substrings of the
string that match captures are stored for future use, for example to be
returned by <span style='font-family:"Liberation Mono"'>gmatch</span>. They are
always numbered starting from the position of their left parenthesis. Two empty
parentheses denote the <i>empty capture</i>, which captures the current string
position (which is a number and is not a part of the string).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>gmatch</span>
function can be used to iterate through the occurrences of a pattern in a
string; it is not possible, unlike with the <span style='font-family:"Liberation Mono"'>find</span>
function, to specify an initial position to start searching or to perform
simple matching. The <span style='font-family:"Liberation Mono"'>gmatch</span>
function returns an iterator that, when called, returns the next captures from
the given pattern in the string. The whole match is given instead if there are
no captures specified in the pattern. The following example shows how to
iterate through the words in a sentence and print them one by one:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:10.35pt;margin-left:-.4pt;text-align:left;text-indent:0in;
line-height:107%'><img border=0 width=678 height=73 id="Picture 104311"
src="Lua%20Programming_files/image070.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.1pt;
margin-left:-.25pt;line-height:107%'>In this example, the entire match is given
by the only value returned by the iterator, <i>word</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.2pt;
margin-left:-.25pt'>The <span style='font-family:"Liberation Mono"'>gsub</span>
function can be used to replace all occurrences of a pattern in a string by
something else. Its first two arguments are the string and the pattern, while
the third is the string to replace occurrences by and the fourth is the maximum
number of occurrences that should be replaced. The third argument, instead of
being a string, can also be a table or a function.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.4pt;
margin-left:-.25pt'>When the third argument is a string, it is called the
replacement string and it replaces occurrences of the pattern in the string.
Captures stored by the pattern can be embedded in the replacement string; they
are noted by a percentage sign followed by a digit representing the number of
the capture. The match itself can be represented by <span style='font-family:
"Liberation Mono"'>%0</span>. Percentage signs in replacement strings must be
escaped as <span style='font-family:"Liberation Mono"'>%%</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.7pt;
margin-left:-.25pt'>When the third argument is a table, the first capture is
used as a key to index that table and the replacement string is the value
corresponding to that key in the table. When it is a function, that function is
called for every match, with all captures passed as arguments. In both cases,
if there is no capture, the entire match is used instead. If the function or
table gives the value <span style='font-family:"Liberation Mono"'>false</span>
or <span style='font-family:"Liberation Mono"'>nil</span>, no replacement is
done.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.5pt;
margin-left:-.25pt'>Here are some examples taken directly from the Lua 5.2
Reference Manual:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>x </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.gsub</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;hello world&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;(%w+)&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>, </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#BA2121'>&quot;%1 %1&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; x=&quot;hello hello world world&quot;</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:55.5pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:8.0pt;line-height:107%;font-family:
"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.1pt;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>x </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.gsub</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;hello world&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;%w+&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>, </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#BA2121'>&quot;%0 %0&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>1</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>) </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; x=&quot;hello hello world&quot;</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:55.5pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:8.0pt;line-height:107%;font-family:
"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:111.3pt;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>x </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.gsub</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;hello world from Lua&quot;</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;(%w+)%s*(%w+)&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;%2 %1&quot;</span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono"'>) </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>--&gt;
x=&quot;world hello Lua from&quot;</span></i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:55.5pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:8.0pt;line-height:107%;font-family:
"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:101.35pt;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>x </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.gsub</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;home = $HOME, user = $USER&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;%$(%w+)&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>os.getenv</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>) </span><i><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#408080'>--&gt;
x=&quot;home = /home/roberto, user = roberto&quot;</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:55.5pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:8.0pt;line-height:107%;font-family:
"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:145.8pt;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><span
style='position:relative;z-index:-1895801856'><span style='left:0px;position:
absolute;left:40px;top:-157px;width:598px;height:256px'><img width=598
height=256 src="Lua%20Programming_files/image071.gif"></span></span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>x </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.gsub</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;4+5 = $return 4+5$&quot;</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;%$(.-)%$&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>, </span><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>function</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> (s)       </span><b><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono";color:green'>return</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>load</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'>(s)()     </span><b><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:green'>end</span></b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>) </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; x=&quot;4+5 = 9&quot;</span></i><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:55.5pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:8.0pt;line-height:107%;font-family:
"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><b><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:green'>local</span></b><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> t </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono";color:#666666'>=</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> {name</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'>&quot;lua&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>,
version</span><span style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono";color:#BA2121'>&quot;5.2&quot;</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>} </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:165.75pt;
margin-bottom:.15pt;margin-left:56.0pt;text-align:left;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>x </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#666666'>=</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Liberation Mono"'> </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Liberation Mono";color:green'>string.gsub</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'>(</span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;$name-$version.tar.gz&quot;</span><span style='font-size:
8.0pt;line-height:103%;font-family:"Liberation Mono"'>, </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#BA2121'>&quot;%$(%w+)&quot;</span><span style='font-size:8.0pt;
line-height:103%;font-family:"Liberation Mono"'>, t) </span><i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono";
color:#408080'>--&gt; x=&quot;lua-5.2.tar.gz&quot;</span></i><span
style='font-size:8.0pt;line-height:103%;font-family:"Liberation Mono"'> </span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.2in;margin-left:30.0pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=597 height=38
src="Lua%20Programming_files/image072.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Lua offers other functions for manipulating strings than
those for pattern matching. These include the <span style='font-family:"Liberation Mono"'>reverse</span>
function, which returns a string with the order of the characters reversed, the
<span style='font-family:"Liberation Mono"'>lower</span> function, which
returns the lowercase equivalent of a string, the <span style='font-family:
"Liberation Mono"'>upper</span> function, which returns the uppercase
equivalent of a string, the <span style='font-family:"Liberation Mono"'>len</span>
function, which returns the length of a string and the <span style='font-family:
"Liberation Mono"'>sub</span> function, which returns the substring of a string
that starts at and ends at the two character positions given as arguments.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.35pt;
margin-left:-.25pt;line-height:107%'>There are more, and their documentation
can be found in the Lua 5.2 Reference Manual.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><a
href="https://en.wikipedia.org/wiki/Roberto_Ierusalimschy"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Ierusalimschy, Roberto;</span></a><span style='font-family:"Liberation Sans",sans-serif'>
Celes, Waldemar; Henrique de Figueiredo, Luiz. </span><a
href="http://www.lua.org/manual/5.2"><i><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>Lua 5.2 Reference Manual</span></i></a><a
href="http://www.lua.org/manual/5.2"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>. </span></a><a
href="http://www.lua.org/manual/5.2"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>http://www.lua.org/manual/5.2.</span></a><span
style='font-family:"Liberation Sans",sans-serif'> Retrieved 30 November 2013.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.25pt;margin-left:19.2pt;text-align:left;text-indent:-10.95pt;
line-height:108%'><span style='line-height:108%;font-family:"Liberation Sans",sans-serif'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
style='font-family:"Liberation Sans",sans-serif'>Functions that were already
described elsewhere will not be described in this chapter.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:29.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'> </p>

<h1 style='margin-left:-.25pt'>Appendix:Software testing</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:-.25pt'>The term <b>software testing</b> refers to a number of
methods and processes that are used to discover bugs and programming mistakes
in computer software. Software testing can be done statically, in which case in
is called static testing and is done without executing the computer software,
or dynamically, in which case it is called dynamic testing and is done while
the computer program that is being tested is running.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.65pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Type checking</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:0in;margin-left:46.25pt;text-align:left;line-height:98%'><span
style='position:relative;z-index:-1895800832'><span style='left:0px;position:
absolute;left:0px;top:-17px;width:677px;height:198px'><img width=677
height=198 src="Lua%20Programming_files/image073.gif"></span></span><span
style='font-size:12.0pt;line-height:98%'>In programming languages, a <b>type
system</b> is a collection of rules that assign a property called a </span><a
href="https://en.wikipedia.org/wiki/type_(computer_science)"><i><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>type</span></i></a><a
href="https://en.wikipedia.org/wiki/type_(computer_science)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'> </span></a><span
style='font-size:12.0pt;line-height:98%'>to the various constructs—such as </span><a
href="https://en.wikipedia.org/wiki/variable_(computer_science)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>variables</span></a><span
style='font-size:12.0pt;line-height:98%'>, </span><a
href="https://en.wikipedia.org/wiki/expression_(computer_science)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>expressions</span></a><a
href="https://en.wikipedia.org/wiki/expression_(computer_science)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>,</span></a><span
style='font-size:12.0pt;line-height:98%'> </span><a
href="https://en.wikipedia.org/wiki/function_(computer_science)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>functions
</span></a><span style='font-size:12.0pt;line-height:98%'>or </span><a
href="https://en.wikipedia.org/wiki/modular_programming"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>modules</span></a><span
style='font-size:12.0pt;line-height:98%'>—a </span><a
href="https://en.wikipedia.org/wiki/computer_program"><span style='font-size:
12.0pt;line-height:98%;color:black;text-decoration:none'>computer program </span></a><span
style='font-size:12.0pt;line-height:98%'>is composed of. The main purpose of a
type system is to reduce </span><a
href="https://en.wikipedia.org/wiki/bug_(computer_programming)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>bugs </span></a><span
style='font-size:12.0pt;line-height:98%'>in computer programs by defining
interfaces between different parts of a computer program, and then checking
that the parts have been connected in a consistent way. This checking can
happen statically (at </span><a
href="https://en.wikipedia.org/wiki/compile_time"><span style='font-size:12.0pt;
line-height:98%;color:black;text-decoration:none'>compile time)</span></a><span
style='font-size:12.0pt;line-height:98%'>, dynamically (at </span><a
href="https://en.wikipedia.org/wiki/run_time_(program_lifecycle_phase)"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>run
time)</span></a><span style='font-size:12.0pt;line-height:98%'>, or it can
happen as a combination of static and dynamic checking. Type systems have other
</span><a href="https://en.wikipedia.org/wiki/multiple_dispatch"><span
style='font-size:12.0pt;line-height:98%;color:black;text-decoration:none'>purposes
as well, such as enabling certain compiler optimizations, allowing for multiple
dispatch, providing a form of documentation, etc.</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:30.75pt;
margin-bottom:12.5pt;margin-left:46.25pt;text-align:left;line-height:98%'><span
style='font-size:12.0pt;line-height:98%'>—Wikipedia, </span><a
href="https://en.wikipedia.org/wiki/Type_system"><i><span style='font-size:
12.0pt;line-height:98%;color:black;text-decoration:none'>Type system</span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>Type-checking can be done, as the extract from Wikipedia
brilliantly said, at run time or at compile time. If it is done at compile
time, the compiler, when compiling source code, will verify the type safety of
the program and guarantee that the program satisfies certain type safety
properties—generally, static type-checkers will simply verify that variables
always have values of the same type and that arguments passed to functions will
have the right type.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>The static approach allows bugs to be discovered early in
the development cycle. The dynamic approach, in contrast, consists in verifying
that the program follows the type constraints when it is running. While this
means that dynamic type-checkers should be able to verify more constraints,
most dynamically typed languages do not have many type constraints. Lua is a
dynamically typed language: in Lua, values have types, but variables do not.
This means that the value of a variable can be a number at some point of the
program’s execution and be a string at another point.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Lua’s type system is very simple in comparison with most
other languages. It performs type checking when operators are used (attempting
to add two values of which at least one is not a number and cannot be coerced
to one, for example, will raise a type error) and when functions of the
standard libraries are called (functions of the standard library reject
arguments that do not have the right type and raise an appropriate error).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.25pt;
margin-left:-.25pt'>Since Lua does not have functionality for specifying a type
for function parameters, the <span style='font-family:"Liberation Mono"'>type</span>
function can be useful to verify that arguments passed to functions are of the
appropriate type. This is most useful for functions that will be passed
arguments provided by users while a program is running (for example, in an
interactive environment for calling predefined Lua functions), since adding
code for type checking to functions makes them more verbose and adds
maintenance overhead.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>White-box testing</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 99875"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>The term <i>white-box testing</i> refers to the practice of
using knowledge of the internal workings of software to create test cases to
verify its functionality. It is relevant at three levels of software testing,
but the one most interesting for Lua programs is the unit level, since Lua
programs are usually part of a bigger application where the integration and
system testing would take place.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.05pt;
margin-left:-.25pt'>There are multiple frameworks available for unit testing in
Lua. Testing at the unit level is most appropriate for libraries, since it
generally consists in writing test cases that pass specific arguments to
functions and provide a warning when a function returns an unexpected value.
This requires writing test cases for new functionality, but has the benefit of
making errors introduced in code easier to notice when they modify the behavior
of functions in a way that makes the tests not pass anymore.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:20.5pt;
margin-left:-.25pt'>There are multiple unit testing frameworks for Lua. One of
them, busted, supports the standard Lua virtual machine as well as LuaJIT, and
can also be used with MoonScript and Terra, the former a language that compiles
to Lua and the latter a low-level language that is interoperable with Lua.
Another unit testing framework for Lua, Luaunit, is written entirely in Lua and
has no dependencies. Shake is a simpler test framework, initially part of the
Kepler Project, that uses the <span style='font-family:"Liberation Mono"'>assert</span>
and <span style='font-family:"Liberation Mono"'>print</span> functions but is
no longer actively developed.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Further reading</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 99876"
src="Lua%20Programming_files/image001.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.3pt;
margin-left:-.25pt'>The lua-users wiki, an excellent resource to find
information about Lua, provides the following material that is related to
software testing. Some of these pages consist in links to other pages or to
projects that can be useful for various tasks.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=80 src="Lua%20Programming_files/image074.gif" align=left
hspace=12><a href="http://lua-users.org/wiki/LuaTypeChecking"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Lua Type Checking (http://lua-users.org/wiki/LuaTypeChecking)</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="http://lua-users.org/wiki/UnitTesting"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>Unit Testing
(http://lua-users.org/wiki/UnitTesting)</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="http://lua-users.org/wiki/DebuggingLuaCode"><span style='font-family:
"Liberation Sans",sans-serif;color:black;text-decoration:none'>Debugging Lua
Code (http://lua-users.org/wiki/DebuggingLuaCode)</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="http://lua-users.org/wiki/ProgramAnalysis"><span style='font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>Program Analysis
(http://lua-users.org/wiki/ProgramAnalysis)</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.25pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="http://lua-users.org/wiki/DebuggingAndTesting"><span style='font-family:
"Liberation Sans",sans-serif;color:black;text-decoration:none'>Debugging and
Testing (http://lua-users.org/wiki/DebuggingAndTesting)</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:29.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'> </p>

<h1 style='margin-left:-.25pt'>Glossary</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15in;
margin-left:-.25pt'>This is a glossary that contains terms related to
programming in the context of Lua. Its use is recommended to find the meaning
of words that are not understood.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>abstract
class</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a
href="https://en.wikipedia.org/wiki/concrete_class#Abstract_and_concrete"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>abstract class </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
a class of which instances cannot be created directly. Abstract classes are
abstract types.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>abstract
data type</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:11.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>An </span><a
href="https://en.wikipedia.org/wiki/abstract_data_type"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>abstract data type</span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> is a model to
represent a class of data structures that have similar behavior. Abstract data
types are defined by the operations that can be performed on them and by
mathematical constraints of these operations rather than by the implementation
and the way the data is stored in the memory of the computer. <b>abstract type</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a href="https://en.wikipedia.org/wiki/abstract_type"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>abstract type </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
a type of data of which instances cannot be created directly.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>actual
parameter</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
argument.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>additive
inverse</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
</span><a href="https://en.wikipedia.org/wiki/additive_inverse"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>additive inverse</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
of a number is the number that, when added to that number, yields zero. For
example, the additive inverse of 42 is -42.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>arithmetic
negation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>Arithmetic
negation is the operation that produces the additive inverse of a number.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>arithmetic
operation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a href="https://en.wikipedia.org/wiki/arithmetic_operation"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>arithmetic operation </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
an operation whose operands are numbers.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>arity</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:28.35pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>The </span><a
href="https://en.wikipedia.org/wiki/arity"><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>arity</span></a><span style='font-size:12.0pt;line-height:
100%;font-family:"Liberation Sans",sans-serif'> of an operation or of a
function is the number of operands or arguments the operation or function
accepts. <b>argument</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a href="https://en.wikipedia.org/wiki/parameter_(computer_programming)"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>argument </span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is a value
passed to a function.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>array</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a href="https://en.wikipedia.org/wiki/array_data_structure"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>array</span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> is a data structure
consisting of a collection of values, each identified by at least one array
index or key.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>associative
array</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>An </span><a
href="https://en.wikipedia.org/wiki/associative_array"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>associative array</span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> is an abstract data
type composed of a collection of pairs of keys and values, such that each
possible key appears at most once in the collection. <b>augmented assignment</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><a
href="https://en.wikipedia.org/wiki/Augmented_assignment"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>Augmented assignment</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
is a type of assignment that gives a variable a value that is relative to its
prior value.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>binary
operation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:121.85pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>A </span><a
href="https://en.wikipedia.org/wiki/binary_operation"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>binary operation </span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'>is an operation of
which the arity is two. <b>boolean</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:343.4pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>See logical data. <b>boolean negation</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
logical negation.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>chained
assignment</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><a
href="https://en.wikipedia.org/wiki/Chained_assignment"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>Chained assignment </span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is a type of
assignment that gives a single value to many variables. Example: </span><span
style='font-family:"Liberation Mono"'>a = b = c = d = 0</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>chunk</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
chunk is a sequence of statements.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>compound
assignment</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
augmented assignment.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>concatenation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><a
href="https://en.wikipedia.org/wiki/String_concatenation"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>String concatenation </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
the operation of joining two strings of characters. For example, the
concatenation of &quot;snow&quot; and &quot;ball&quot; is &quot;snowball&quot;.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>concrete
class</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
concrete class is a class of which instances can be created directly. Concrete
classes are concrete types.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>concrete
type</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
concrete type is a type of which instances can be created directly.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>condition</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>A condition is a predicate that is used in a
conditional statement or as an operand to the conditional operator. Conditions,
in Lua, are considered as true when their expression evaluates to a value other
than </span><span style='font-family:"Liberation Mono"'>nil</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
or </span><span style='font-family:"Liberation Mono"'>false</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>,
and are considered as false otherwise. <b>conditional operator</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/conditional_operator"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>conditional operator </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
an operator that returns a value if a condition is true and another if it
isn't.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>conditional
statement</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>A </span><a
href="https://en.wikipedia.org/wiki/conditional_(computer_programming)"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>conditional statement</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
is a statement that executes a piece of code if a condition is true. <b>data
structure</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/data_structure"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>data structure </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
a particular way of storing and organizing data in the memory of a computer. It
is the implementation of an abstract data type.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>data
type</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/data_type"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>data type </span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is a model
for representing the storage of data in the memory of a computer.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>dictionary</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
associative array.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>exclusive
disjunction</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.7pt;margin-bottom:.15pt;
margin-left:-.75pt;text-indent:29.5pt;line-height:normal'><img width=110
height=116 src="Lua%20Programming_files/image075.gif" align=left hspace=12><span
style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>The </span><a
href="https://en.wikipedia.org/wiki/exclusive_or"><span style='font-size:12.0pt;
font-family:"Liberation Sans",sans-serif;color:black;text-decoration:none'>exclusive
disjunction </span></a><span style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>operation
is a binary operation that produces the value </span><span style='font-family:
"Liberation Mono"'>true</span><span style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>
when one of its operands is true but the other is not. The exclusive
disjunction of <i>a</i> and <i>b</i> is expressed mathematically as </span><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'><img border=0
width=19 height=10 id="Group 100114" src="Lua%20Programming_files/image076.gif"></span><span
style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>. There is no
operator corresponding to exclusive disjunction in Lua, but </span><span
style='font-size:11.0pt;font-family:"Calibri",sans-serif'><img border=0
width=19 height=10 id="Group 100121" src="Lua%20Programming_files/image076.gif"></span><span
style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'> can be
represented as </span><span style='font-family:"Liberation Mono"'>(a or b) and
not (a and b)</span><span style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>.
<b>formal parameter</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
parameter.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>function</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
function is a sequence of statements (instructions) that perform a specific
task.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>Functions can be used in a program wherever that
particular task needs to be performed. Functions are usually defined in the
program that will use them, but are sometimes defined in libraries that can be
used by other programs. <b>hash map</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
hash table.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>hash
table</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/hash_table"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>hash table </span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is an
implementation as a data structure of the associative array. A hash table uses
a </span><a href="https://en.wikipedia.org/wiki/hash_function"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>hash function </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>to
compute an index into an array of buckets or slots, from which the value
corresponding to the index can be found.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>inline
if</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
conditional operator.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>integer</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a href="https://en.wikipedia.org/wiki/integer"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>integer </span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'>is a number that can
be written without a fractional or decimal component. Integers are implemented
in Lua in the same way as other numbers.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>length
operation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>The length operation is the operation that
produces the number of values in an array. <b>literal</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
literal is a notation for representing a fixed value in source code. All values
can be represented as literals in Lua except threads and userdata.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>logical
complement</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:25.65pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>The </span><a
href="https://en.wikipedia.org/wiki/logical_complement"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>logical complement </span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>of a boolean
value is the boolean value that is not that value. This means the logical
complement of </span><span style='font-family:"Liberation Mono"'>true</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
is </span><span style='font-family:"Liberation Mono"'>false</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
and vice versa. <b>logical conjunction</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><img
width=114 height=115 src="Lua%20Programming_files/image077.gif" align=left
hspace=12><span style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
</span><a href="https://en.wikipedia.org/wiki/logical_conjunction"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>logical conjunction </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>operation
is a binary operation that produces the value </span><span style='font-family:
"Liberation Mono"'>true</span><span style='font-size:12.0pt;line-height:100%;
font-family:"Liberation Sans",sans-serif'> when both of its operands are true
and </span><span style='font-family:"Liberation Mono"'>false</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
in all other cases. It is implemented as the </span><span style='font-family:
"Liberation Mono"'>and</span><span style='font-size:12.0pt;line-height:100%;
font-family:"Liberation Sans",sans-serif'> operator in Lua and it returns its
first operand if it is </span><span style='font-family:"Liberation Mono"'>false</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
or </span><span style='font-family:"Liberation Mono"'>nil</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
and the second operand otherwise. The logical conjunction of <i>a</i> and <i>b</i>
is expressed mathematically as </span><span style='font-size:11.0pt;line-height:
100%;font-family:"Calibri",sans-serif'><img border=0 width=20 height=9
id="Group 100127" src="Lua%20Programming_files/image078.gif"></span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>logical
data</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
</span><a href="https://en.wikipedia.org/wiki/logical_data_type"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>logical data type,</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
which is generally called the boolean type, is the type of the values </span><span
style='font-family:"Liberation Mono"'>false</span><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> and </span><span
style='font-family:"Liberation Mono"'>true</span><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'>.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>logical
disjunction</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
</span><a href="https://en.wikipedia.org/wiki/logical_disjunction"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>logical disjunction</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
operation is a binary operation that produces the value </span><span
style='font-family:"Liberation Mono"'>false</span><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> when both of its
operands are false and </span><span style='font-family:"Liberation Mono"'>true</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
in all other cases. It is implemented as the </span><span style='font-family:
"Liberation Mono"'>or </span><span style='font-size:12.0pt;line-height:100%;
font-family:"Liberation Sans",sans-serif'>operator in Lua and it returns the
first operand if it is neither </span><span style='font-family:"Liberation Mono"'>false</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
nor </span><span style='font-family:"Liberation Mono"'>nil</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
and the second otherwise. The logical disjunction of <i>a</i> and <i>b</i> is
expressed mathematically as </span><span style='font-size:11.0pt;line-height:
100%;font-family:"Calibri",sans-serif'><img border=0 width=19 height=9
id="Group 100132" src="Lua%20Programming_files/image079.gif"></span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>logical
negation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><a
href="https://en.wikipedia.org/wiki/Logical_negation"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>Logical negation,</span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> implemented in Lua
by the </span><span style='font-family:"Liberation Mono"'>not</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
operator, is the operation that produces the logical complement of a boolean
value.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>map</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><img width=114 height=115
src="Lua%20Programming_files/image080.gif" align=left hspace=12><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
associative array. <b>method</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>A </span><a
href="https://en.wikipedia.org/wiki/method_(computer_programming)"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>method</span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> is a function that
is a member of an object and generally operates on that object. <b>modulo</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
modulo operation.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>modulo
operation</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:67.7pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>The </span><a
href="https://en.wikipedia.org/wiki/modulo_operation"><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;color:black;
text-decoration:none'>modulo operation,</span></a><span style='font-size:12.0pt;
line-height:100%;font-family:"Liberation Sans",sans-serif'> implemented in Lua
by the </span><span style='font-family:"Liberation Mono"'>%</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
operator, is the operation that produces the remainder of the division of a
number by another. <b>modulus</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:311.35pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>See modulo operation. <b>multiple assignment</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
parallel assignment.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>nil</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
type nil is the type of the value </span><span style='font-family:"Liberation Mono"'>nil</span><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>,
whose main property is to be different from any other value; it usually
represents the absence of a useful value.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>not
operator</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
logical negation.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>number</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
number type represents real (</span><a
href="https://en.wikipedia.org/wiki/double-precision_floating-point"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>double-precision floating-point</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>)
numbers. It is possible to build Lua interpreters that use other internal
representations for numbers, such as single-precision float or long integers.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>operator</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>An
</span><a href="https://en.wikipedia.org/wiki/operator_(computer_programming)"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>operator </span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is a token
that generates a value from one or many operands.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>parallel
assignment</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:45.75pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><a href="https://en.wikipedia.org/wiki/Parallel_assignment"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>Parallel assignment </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
a type of assignment that simultaneously assigns values to different variables.
<b>parameter</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/parameter_(computer_programming)"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>parameter</span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'> is a
variable in a function definition to which the argument that corresponds to it
in a call to that function is assigned.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>predicate</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:54.4pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>A predicate is an expression that evaluates to a
piece of logical data. <b>procedure</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
function.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>relational
operator</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/relational_operator"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>relational operator</span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>
is an operator that is used to compare values.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>routine</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
function.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>sign
change</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:271.3pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>See arithmetic negation. <b>simultaneous
assignment</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
parallel assignment.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>string</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>The
type string represents arrays of characters. Lua is 8-bit clean: strings can
contain any 8-bit character, including embedded zeros.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>string
literal</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-.4pt;margin-bottom:.15pt;
margin-left:-.75pt;text-indent:29.5pt;line-height:normal'><span
style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>A </span><a
href="https://en.wikipedia.org/wiki/string_literal"><span style='font-size:
12.0pt;font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string literal </span></a><span style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>is
the representation of a string value within the source code of a computer
program. With respect to syntax, a string literal is an expression that
evaluates to a string. <b>subprogram</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:346.1pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>See function. <b>subroutine</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:366.05pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>See function. <b>symbol</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>See
token.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>symbol
table</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/symbol_table"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>symbol table </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
an implementation as a data structure of the associative array. They are
commonly implemented as hash tables.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:12.0pt;line-height:107%;font-family:"Liberation Sans",sans-serif'>token</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-.4pt;margin-bottom:.15pt;
margin-left:-.75pt;text-indent:29.5pt;line-height:normal'><span
style='font-size:12.0pt;font-family:"Liberation Sans",sans-serif'>A token is an
atomic piece of data, such as a word in a human language or such as a keyword
in a programming language, for which a meaning may be inferred during parsing. <b>variable</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:9.25pt;
margin-bottom:.15pt;margin-left:0in;text-align:left;text-indent:30.0pt;
line-height:100%'><span style='font-size:12.0pt;line-height:100%;font-family:
"Liberation Sans",sans-serif'>A </span><a
href="https://en.wikipedia.org/wiki/variable_(computer_science)"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>variable</span></a><span style='font-size:
12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'> is a label
associated to a location in the memory. The data in that location can be
changed and the variable will point to the new data. <b>variadic function</b></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:4.7pt;
margin-bottom:12.25pt;margin-left:29.75pt;text-align:left;line-height:100%'><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>A
</span><a href="https://en.wikipedia.org/wiki/variadic_function"><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif;
color:black;text-decoration:none'>variadic function </span></a><span
style='font-size:12.0pt;line-height:100%;font-family:"Liberation Sans",sans-serif'>is
a function of indefinite arity.</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:29.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'> </p>

<h1 style='margin-left:-.25pt'>Index</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.1pt;
margin-left:-.25pt;line-height:107%'>This is an alphabetical index of the book.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>A</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=181
src="Lua%20Programming_files/image081.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>B</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=239
src="Lua%20Programming_files/image082.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>C</span></b></p>

<p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
0in;line-height:107%'><span style='font-size:11.0pt;line-height:107%;
font-family:"Calibri",sans-serif'><img border=0 width=677 height=86
src="Lua%20Programming_files/image083.gif"></span></p>

</div>

<span style='font-size:10.0pt;line-height:141%;font-family:"Liberation Serif",serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection4>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Character sets</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Chunks"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Chunks</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Introduction#Comments"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Code annotations</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=20 src="Lua%20Programming_files/image084.gif" align=left
hspace=12><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Coercion"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Coercion</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Collaborative multithreading</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Introduction#Comments"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Comments</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Augmented_assignment"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Compound assignment</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Concatenation"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Concatenation</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Conditional_statement"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Conditional statement</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Condition-controlled_loops"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Condition-controlled loops</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Coroutines</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:24.3pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Count-controlled_loops"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Count-controlled loops</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>D</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:17.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=125
src="Lua%20Programming_files/image085.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>E</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=145
src="Lua%20Programming_files/image086.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>F</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=143
src="Lua%20Programming_files/image087.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>G</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.45pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=49
src="Lua%20Programming_files/image088.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>H</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:0in;margin-left:0in;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
border=0 width=677 height=29 src="Lua%20Programming_files/image089.gif"></span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:66.55pt;
margin-bottom:1.7pt;margin-left:.5pt;text-align:right;line-height:109%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Hash tables</span></a></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:66.55pt;
margin-bottom:24.2pt;margin-left:.5pt;text-align:right;line-height:109%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Introduction#Hello,_world!"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Hello, world!</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>I</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=163
src="Lua%20Programming_files/image090.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>J</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:16.95pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 99086"
src="Lua%20Programming_files/image043.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>K</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=48
src="Lua%20Programming_files/image091.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'>

<table cellpadding=0 cellspacing=0>
 <tr>
  <td width=58 height=0></td>
 </tr>
 <tr>
  <td></td>
  <td><img width=677 height=1 src="Lua%20Programming_files/image092.gif"></td>
 </tr>
</table>

<br clear=ALL>
<b><span style='font-size:18.0pt;line-height:107%'>L</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=220
src="Lua%20Programming_files/image093.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>M</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:17.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=181
src="Lua%20Programming_files/image094.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>N</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Nil"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Nil</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:38.35pt;
margin-bottom:25.45pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Numbers"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Numbers </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Count-controlled_loops"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Numeric </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Count-controlled_loops"><span
style='font-family:"Liberation Mono";color:black;text-decoration:none'>for</span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Count-controlled_loops"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'> loops</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>O</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=48
src="Lua%20Programming_files/image095.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>P</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=124
src="Lua%20Programming_files/image096.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Q</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:16.95pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101114"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>R</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=124
src="Lua%20Programming_files/image097.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>S</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-367.75pt;
margin-bottom:0in;margin-left:0in;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
border=0 width=677 height=371 src="Lua%20Programming_files/image098.gif"></span></p>

</div>

<span style='font-size:10.0pt;line-height:141%;font-family:"Liberation Serif",serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection5>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Functions#Errors"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Syntactic errors</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.75pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Introduction#Syntax"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>Syntax</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:24.3pt;margin-left:19.7pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Appendix:Software_testing#White-box_testing"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>System testing</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>T</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=219
src="Lua%20Programming_files/image099.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>U</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=67
src="Lua%20Programming_files/image100.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>V</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=48
src="Lua%20Programming_files/image101.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>W</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:18.6pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=67
src="Lua%20Programming_files/image102.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>X</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:16.2pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101596"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Y</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:16.95pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101597"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Z</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:16.95pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101598"
src="Lua%20Programming_files/image043.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.15pt;margin-left:-.25pt;text-align:left;line-height:107%'><b><span
style='font-size:18.0pt;line-height:107%'>Lua API</span></b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=2 id="Group 101599"
src="Lua%20Programming_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.05pt;
margin-left:-.25pt'>There is a separate index for the functions and variables
that are part of the Lua API. This index points to parts of the book where
functions or variables in the API are mentioned.</p>

<h2 style='margin-left:-.25pt'>Basic functions</h2>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:425.25pt;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=1 src="Lua%20Programming_files/image103.gif" align=left
hspace=12><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Assertion"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>assert </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Manipulating_the_garbage_collector"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>collectgarbage </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Chunks"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>dofile </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Functions#Protected_calls"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>error </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Metatables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>getmetatable </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>ipairs </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Chunks"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>load </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Chunks"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>loadfile </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>next </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>pairs </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Functions#Protected_calls"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>pcall </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Introduction#Hello,_world!"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>print</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:432.85pt;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Metatables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>rawequal </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Metatables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>rawget </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Metatables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>rawlen </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Metatables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>rawset </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Functions#Variadic_functions"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>select </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Metatables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>setmetatable </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Coercion"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>tonumber</span></a></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:445.25pt;
margin-bottom:27.8pt;margin-left:8.75pt;text-align:left;line-height:108%'><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Coercion"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>tostring </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Expressions#Types"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>type </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Functions#Protected_calls"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>xpcall</span></a></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:7.1pt;margin-left:
-.25pt'>Coroutine manipulation</h2>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:361.65pt;
margin-bottom:27.8pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=1 src="Lua%20Programming_files/image103.gif" align=left
hspace=12><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>coroutine.create </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>coroutine.resume </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>coroutine.running </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>coroutine.status </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>coroutine.wrap </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#Coroutines"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>coroutine.yield</span></a></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:7.1pt;margin-left:
-.25pt'>String manipulation</h2>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:401.25pt;
margin-bottom:27.8pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=1 src="Lua%20Programming_files/image103.gif" align=left
hspace=12><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Statements#Chunks"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.dump </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.find </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.gmatch </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.gsub </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.len </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.lower </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.reverse </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.sub </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Standard_libraries#String_matching"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>string.upper</span></a></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:7.1pt;margin-left:
-.25pt'>Table manipulation</h2>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:393.2pt;
margin-bottom:1.75pt;margin-left:8.75pt;text-align:left;line-height:108%'><img
width=4 height=1 src="Lua%20Programming_files/image103.gif" align=left
hspace=12><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>table.foreach </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Foreach_loop"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>table.foreachi </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Sorting"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>table.sort </span></a><a
href="https://en.wikibooks.org/wiki/Lua_Programming/Tables#Unpacking_tables"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>table.unpack</span></a></p>

<p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
0in;line-height:107%'> </p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.45pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=677 height=3 id="Group 98191"
src="Lua%20Programming_files/image104.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.15pt;margin-left:.5pt;text-align:left;line-height:108%'><span
style='font-family:"Liberation Sans",sans-serif'>Retrieved from &quot;</span><a
href="https://en.wikibooks.org/w/index.php?title=Lua_Programming/Print_version&amp;oldid=3102386"><span
style='font-family:"Liberation Sans",sans-serif;color:black;text-decoration:
none'>https://en.wikibooks.org/w/index.php?title=Lua_Programming/Print_version&amp;oldid=3102386</span></a><span
style='font-family:"Liberation Sans",sans-serif'>&quot;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.2pt;margin-left:0in;text-align:left;text-indent:0in;line-height:
107%'><span style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
border=0 width=677 height=1 id="Group 98192"
src="Lua%20Programming_files/image105.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.85pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><b><span style='font-family:"Liberation Sans",sans-serif;
color:#454545'>This page was last edited on 31 July 2016, at 17:01.</span></b></p>

<p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
0in;line-height:97%'><span style='font-family:"Liberation Sans",sans-serif;
color:#454545'>Text is available under the </span><a
href="https://creativecommons.org/licenses/by-sa/3.0/"><span style='font-family:
"Liberation Sans",sans-serif;color:#454545;text-decoration:none'>Creative
Commons Attribution-ShareAlike License.;</span></a><span style='font-family:
"Liberation Sans",sans-serif;color:#454545'> additional terms may apply. By
using this site, you agree to the </span><a
href="https://wikimediafoundation.org/wiki/Terms_of_Use"><span
style='font-family:"Liberation Sans",sans-serif;color:#454545;text-decoration:
none'>Terms of Use</span></a><span style='font-family:"Liberation Sans",sans-serif;
color:#454545'> and </span><a
href="https://wikimediafoundation.org/wiki/Privacy_policy"><span
style='font-family:"Liberation Sans",sans-serif;color:#454545;text-decoration:
none'>Privacy Policy.</span></a></p>

</div>

</body>

</html>
