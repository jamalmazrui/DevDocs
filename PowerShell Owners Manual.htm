<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Segoe UI Symbol";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Trebuchet MS";
	panose-1:2 11 6 3 2 2 2 2 2 4;}
@font-face
	{font-family:Impact;
	panose-1:2 11 8 6 3 9 2 5 2 4;}
@font-face
	{font-family:"Edwardian Script ITC";
	panose-1:3 3 3 2 4 7 7 13 8 4;}
@font-face
	{font-family:"Lucida Console";
	panose-1:2 11 6 9 4 5 4 2 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:46.9pt;
	margin-bottom:11.45pt;
	margin-left:136.6pt;
	text-indent:-.5pt;
	line-height:108%;
	font-size:10.0pt;
	font-family:"Arial",sans-serif;
	color:#181717;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:1.0pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:105%;
	page-break-after:avoid;
	font-size:36.0pt;
	font-family:"Trebuchet MS",sans-serif;
	color:#181717;
	font-weight:normal;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:9.1pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Arial",sans-serif;
	color:#181717;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:9.1pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Arial",sans-serif;
	color:#181717;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:10.35pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Arial",sans-serif;
	color:#181717;}
h5
	{mso-style-link:"Heading 5 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:15.3pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"Calibri",sans-serif;
	color:#181717;
	font-weight:normal;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Trebuchet MS",sans-serif;
	color:#181717;}
span.Heading5Char
	{mso-style-name:"Heading 5 Char";
	mso-style-link:"Heading 5";
	font-family:"Calibri",sans-serif;
	color:#181717;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Arial",sans-serif;
	color:#181717;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Arial",sans-serif;
	color:#181717;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Arial",sans-serif;
	color:#181717;
	font-weight:bold;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:8.5in 11.0in;
	margin:.5in 56.25pt .5in .5in;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:8.5in 11.0in;
	margin:70.95pt 40.6pt 101.35pt 112.6pt;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:8.5in 11.0in;
	margin:1.0in 104.0pt 1.0in .5in;}
div.WordSection3
	{page:WordSection3;}
@page WordSection4
	{size:8.5in 11.0in;
	margin:1.0in .5in 74.15pt .5in;}
div.WordSection4
	{page:WordSection4;}
@page WordSection5
	{size:8.5in 11.0in;
	margin:1.0in 36.55pt 30.6pt .5in;}
div.WordSection5
	{page:WordSection5;}
@page WordSection6
	{size:8.5in 11.0in;
	margin:70.8pt 37.5pt 92.35pt .5in;}
div.WordSection6
	{page:WordSection6;}
@page WordSection7
	{size:8.5in 11.0in;
	margin:1.0in 36.1pt 1.0in 103.0pt;}
div.WordSection7
	{page:WordSection7;}
@page WordSection8
	{size:8.5in 11.0in;
	margin:1.0in 36.65pt 93.8pt .5in;}
div.WordSection8
	{page:WordSection8;}
@page WordSection9
	{size:8.5in 11.0in;
	margin:1.0in .5in 30.6pt .5in;}
div.WordSection9
	{page:WordSection9;}
@page WordSection10
	{size:8.5in 11.0in;
	margin:1.0in 38.0pt 1.0in 98.5pt;}
div.WordSection10
	{page:WordSection10;}
@page WordSection11
	{size:8.5in 11.0in;
	margin:70.8pt .5in 77.95pt .5in;}
div.WordSection11
	{page:WordSection11;}
@page WordSection12
	{size:8.5in 11.0in;
	margin:1.0in 37.15pt 1.0in .5in;}
div.WordSection12
	{page:WordSection12;}
@page WordSection13
	{size:8.5in 11.0in;
	margin:67.5pt 36.05pt 89.9pt .5in;}
div.WordSection13
	{page:WordSection13;}
@page WordSection14
	{size:8.5in 11.0in;
	margin:1.0in 1.5in 1.0in .5in;}
div.WordSection14
	{page:WordSection14;}
@page WordSection15
	{size:8.5in 11.0in;
	margin:1.0in .5in 30.6pt .5in;}
div.WordSection15
	{page:WordSection15;}
@page WordSection16
	{size:8.5in 11.0in;
	margin:1.0in 36.75pt 103.8pt .5in;}
div.WordSection16
	{page:WordSection16;}
@page WordSection17
	{size:8.5in 11.0in;
	margin:1.0in 110.4pt 1.0in 37.9pt;}
div.WordSection17
	{page:WordSection17;}
@page WordSection18
	{size:8.5in 11.0in;
	margin:1.0in 37.8pt 81.8pt .5in;}
div.WordSection18
	{page:WordSection18;}
@page WordSection19
	{size:8.5in 11.0in;
	margin:1.0in 36.5pt 30.6pt .5in;}
div.WordSection19
	{page:WordSection19;}
@page WordSection20
	{size:8.5in 11.0in;
	margin:1.0in 36.05pt 163.4pt .5in;}
div.WordSection20
	{page:WordSection20;}
@page WordSection21
	{size:8.5in 11.0in;
	margin:1.0in 39.75pt 1.0in 97.5pt;}
div.WordSection21
	{page:WordSection21;}
@page WordSection22
	{size:8.5in 11.0in;
	margin:1.0in 36.95pt 101.6pt .5in;}
div.WordSection22
	{page:WordSection22;}
@page WordSection23
	{size:8.5in 11.0in;
	margin:1.0in .5in 1.0in 103.1pt;}
div.WordSection23
	{page:WordSection23;}
@page WordSection24
	{size:8.5in 11.0in;
	margin:70.8pt 36.8pt 30.6pt .5in;}
div.WordSection24
	{page:WordSection24;}
@page WordSection25
	{size:8.5in 11.0in;
	margin:70.9pt 36.15pt 95.5pt .5in;}
div.WordSection25
	{page:WordSection25;}
@page WordSection26
	{size:8.5in 11.0in;
	margin:1.0in 36.65pt 1.0in 115.9pt;}
div.WordSection26
	{page:WordSection26;}
@page WordSection27
	{size:8.5in 11.0in;
	margin:70.8pt 1.5in 30.6pt .5in;}
div.WordSection27
	{page:WordSection27;}
@page WordSection28
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection28
	{page:WordSection28;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:108.6pt;line-height:107%'><span style='font-size:36.0pt;line-height:
107%;font-family:"Impact",sans-serif'>The Windows PowerShell  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:108.6pt;line-height:107%'>

<table cellpadding=0 cellspacing=0>
 <tr>
  <td width=191 height=0></td>
 </tr>
 <tr>
  <td></td>
  <td><img width=391 height=397
  src="PowerShell%20Owners%20Manual_files/image001.gif"></td>
 </tr>
</table>

<br clear=ALL>
<span style='font-size:36.0pt;line-height:107%;font-family:"Impact",sans-serif'>Owner’s
Manual: Version 2.0 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:108.6pt;line-height:107%'><span style='font-size:12.0pt;line-height:
107%;font-family:"Impact",sans-serif'>Jean Ross and Greg Stemp</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:108.6pt;line-height:107%'><span style='font-size:12.0pt;line-height:
107%;font-family:"Impact",sans-serif'>Microsoft Communications Server UA</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.6pt;margin-bottom:
9.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:8.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>This document is provided
“as-is”. Information and views expressed in this document, including URL and
other Internet Web site references, may change without notice. You bear the
risk of using it. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.6pt;margin-bottom:
9.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:8.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>Some examples depicted
herein are provided for illustration only and are fictitious.  No real
association or connection is intended or should be inferred.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.6pt;margin-bottom:
9.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:8.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>This document does not
provide you with any legal rights to any intellectual property in any Microsoft
product. You may copy and use this document for your internal, reference
purposes. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.6pt;margin-bottom:
9.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:8.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>Copyright © 2010 Microsoft
Corporation. All rights reserved. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.6pt;margin-bottom:
9.15pt;margin-left:-.25pt;line-height:103%'><span style='font-size:8.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>Microsoft, Active Directory,
Outlook, SQL Server, Visio, Windows, Windows Server, and Windows Vista are
trademarks of the Microsoft group of companies. All other trademarks are
property of their respective owners.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-20.25pt;margin-bottom:
0in;margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:
11.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:black'><img
width=675 height=961 src="PowerShell%20Owners%20Manual_files/image002.gif"></span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection2>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:6.6pt;margin-left:
136.1pt;text-indent:0in;line-height:107%'><span style='font-size:14.0pt;
line-height:107%;font-family:"Arial",sans-serif'>About This Owner’s Manual</span></h1>

<p class=MsoNormal>A couple of years ago we were asked to lead an
instructor-led lab at TechEd in Orlando, Florida.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.0pt;margin-bottom:
11.45pt;margin-left:.5pt'><img width=231 height=352
src="PowerShell%20Owners%20Manual_files/image003.gif" align=left hspace=12>Okay,
that’s not entirely true. We wanted to go to TechEd to meet with customers and
hand out a bunch of fun stuff, but our managers back then said we couldn’t go
unless we got in for free as speakers. Since our area of expertise was in
system administration scripting and Windows PowerShell 1.0 was still very new,
we sent a proposal to the TechEd organizers to do a pre-conference seminar. Why
a preconference seminar? Well, because it takes more than a one-hour talk to
teach people Windows PowerShell, and if we were going to teach PowerShell we
were going to do it right. Well, as it turned out, the preconference seminars
were all booked up for that year. But the TechEd organizers had another
proposal for us: a 75-minute instructor-led hands-on lab.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:55.6pt;margin-bottom:
11.45pt;margin-left:.5pt'>Did we mention that you can’t teach Windows
PowerShell in an hour? But an hour and 15 minutes? Hey, no problem!</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Whatever it takes to get in the door, right?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.05pt;margin-bottom:
11.45pt;margin-left:.5pt'>Believe it or not, the labs wound up being pretty
successful, and even a lot of fun. But because we couldn’t do a full seminar,
and because we wanted people to have something to remind them of everything
they learned (and then some) after they’d gone home, we came up with a little
thing we called the <b>Windows PowerShell Owner’s Manual</b>. This is that
manual.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.0in;margin-bottom:15.15pt;
margin-left:.5pt'>Well, okay, once again that’s not entirely true. This is the <i>newand-improved</i>
Owner’s Manual. For starters, it’s been updated for Windows PowerShell 2.0.
We’ve also added bits of new content here and there. We hope you enjoy it and
maybe even learn a little something from it. If you have any questions, feel
free to ask; we’ll do our best to try and answer them for you.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:136.1pt;text-indent:0in;line-height:107%'><span style='font-size:
23.0pt;line-height:107%;font-family:"Edwardian Script ITC"'>Jean Ross</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:136.6pt'>Jean Ross (jeanros@microsoft.com)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:16.3pt;
margin-left:136.6pt'>Microsoft Communications Server UA</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:136.1pt;
text-indent:0in;line-height:107%'><i><span style='font-size:24.0pt;line-height:
107%;font-family:"Times New Roman",serif'>Greg Stemp</span></i></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:136.6pt'>Greg Stemp (gstemp@microsoft.com)</p>

<p class=MsoNormal style='margin-right:.6pt'>Microsoft Communications Server UA</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:8.1pt;margin-left:
0in;text-indent:0in;line-height:107%'><span style='font-size:31.0pt;line-height:
107%'>Windows PowerShell Terminology</span></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:-17.35pt;margin-bottom:
0in;margin-left:3.9pt;text-indent:0in;line-height:107%'><span style='font-size:
11.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:black'><img
width=633 height=722 src="PowerShell%20Owners%20Manual_files/image004.gif"></span></p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>F</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:61.3pt;margin-bottom:
11.45pt;margin-left:.5pt'><img width=327 height=394
src="PowerShell%20Owners%20Manual_files/image005.gif" align=left hspace=12>irst
you put the key in the ignition… No, wait, that’s really not the best place to
start. That’s not the first thing you should do when you’re learning about your
car, and it’s certainly not the first thing you should do when you’re just
getting to know Windows PowerShell. So where <i>should</i> you start? How about
right here…</p>

<h2 align=center style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:19.6pt;text-align:center;text-indent:0in'><span style='font-size:
10.0pt;line-height:107%'>About Windows PowerShell</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:63.2pt;margin-bottom:
11.45pt;margin-left:.5pt'>For most things that come with an Owner’s Manual you
probably knew what that thing was before you got it; if you go out to buy a
cell phone you probably have a pretty good idea what a cell phone is and what
it does. And like those other things, you probably have some idea what Windows
PowerShell is. It’s just a command window, right? Oh, no, it’s actually a
scripting language. Wait, hang on; it’s a set of command-line tools….</p>

<p class=MsoNormal style='margin-top:0in;margin-right:61.5pt;margin-bottom:
0in;margin-left:.5pt'>If you’re sufficiently confused as to what, exactly, Windows
PowerShell is, we’ll clear up some of that confusion right now: It’s all of
those things we just mentioned. Windows PowerShell is a command window with its
own built-in commands (called cmdlets) and its own scripting language. If that
sounds powerful, well, that’s because it is. If it sounds just a little scary,
well </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=611
 style='width:458.25pt;margin-left:-75.4pt;border-collapse:collapse'>
 <tr style='height:34.55pt'>
  <td width=347 valign=top style='width:260.4pt;padding:0in 0in 0in 0in;
  height:34.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>Started</span></p>
  </td>
  <td width=264 style='width:197.85pt;padding:0in 0in 0in 0in;height:34.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>…that’s
  what the Owner’s Manual is for. Once you get familiar with Windows
  PowerShell, learn what all the </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:185.5pt'>parts and accessories are and how they work, it’s really </p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>Can’t figure out how to get
started in Windows PowerShell? Hmmm, if only we could find an article titled <b>Getting
Started</b> ....</span></i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>not scary at all. As a matter of fact, it turns out it’s one
of the most useful – uh, <i>things</i> that a  Microsoft Windows system
administrator can have at his or her disposal.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%'>A Brief History</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>If you’re not a history buff you can skip this section. But because
some people find this interesting, we threw it in.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>When Windows PowerShell was first conceived, it was supposed
to be a replacement for the age-old Windows command window (cmd.exe). For
example, there were going to be improvements such as being able to use Ctrl+C
and Ctrl+V to copy and paste. Well, that part never actually happened. Instead,
over a period of several years it morphed into something else. For a while it
was going to be a way for UNIX administrators to feel more comfortable using
Windows. UNIX administrators typically spend more time at the command line than
Windows administrators, who tend to rely more on the graphical user interface
(GUI) provided by Windows. So PowerShell was going to provide a more robust
command-line experience for UNIX administrators.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection4>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>At what point PowerShell turned into a scripting language
and a full command-line experience is a little fuzzy. Windows PowerShell had
been in development for several years and was struggling to take hold within
the Windows group. Then along came the Microsoft Exchange team. This team was
looking for a better way to manage Exchange from outside the GUI. They decided
to work with the PowerShell team to produce an Exchange-specific implementation
of Windows PowerShell. Following the Exchange team’s example, several other
Microsoft Server products began adopting Windows PowerShell. The product
finally shipped with Windows as an add-on to Windows Server 2008, and became
integrated into the system as of Windows 7. The rest, as they say, is history.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.35pt;margin-bottom:
11.45pt;margin-left:72.5pt'>Windows PowerShell 1.0 was released in 2006. The
Windows 7 release, in 2009, is version 2.0 and includes some muchanticipated
functionality, not the least of which is remote management. And that’s the end
of our history lesson. Glad you stuck around for it?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Oh. Well then, let’s move on.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;margin-left:
72.5pt'><span style='font-size:10.0pt;line-height:107%'>All About Cmdlets</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>We’re going to start our discussion of PowerShell by
talking about cmdlets (pronounced command-lets). Cmdlets are really what make
PowerShell work; without cmdlets, PowerShell is little more than cmd.exe. (It <i>is</i>
more, but definitely little more.) Before we explain what cmdlets do and how
they work, we need to explain the cmdlet naming convention.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>One thing that distinguishes PowerShell cmdlets from
standard command-line tools is the way they’re named. Every PowerShell cmdlet
consists of a verb followed by a dash followed by a noun. This combination not
only identifies something as a cmdlet but it will typically give you a pretty
good idea of what the cmdlet does. For example, here’s a cmdlet you’ll probably
use quite often:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Notice the verb (Get), the dash (-), and the noun (Help).
And what does this cmdlet do? That’s right, it gets you some help. (And no,
unfortunately it <i>doesn’t</i> automatically call up a PowerShell expert and
send them straight to your office. It simply displays helpful information to
the command window. We’ll talk more about Get-Help in just a bit.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>Okay, quick test to see if you were paying attention. Which
of these is a PowerShell cmdlet?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>GetProcess</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>EventLogFinder</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Eat-Dinner</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Ipconfig</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Directory-Read</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:72.5pt'>If you chose Get-Service you’re right. Extra credit for
anyone who noticed that Eat-Dinner follows the PowerShell naming convention and
therefore <i>could</i> be a cmdlet.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:82.0pt;text-indent:0in;line-height:107%'> </p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.75pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%;
background:#D3DFEE;border:none;padding:0in'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>:
The PowerShell team does have pretty strict guidelines as to what verbs can and
can’t be used. As of this writing, Eat was not on the list of approved verbs. </p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.35pt;
margin-left:72.5pt'>As we’ve implied (or at least as we meant to imply), a
cmdlet carries out a specific action. We already mentioned the Get-Help cmdlet,
which displays help text. Here’s another example:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Type that at the command prompt and you’ll see output similar
to this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.55in;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
----------Stopped  AdtAgent           Operations Manager Audit Forwarding...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AeLookupSvc       
Application Experience</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  ALG               
Application Layer Gateway Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AppHostSvc        
Application Host Helper Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Appinfo           
Application Information</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  AppMgmt           
Application Management</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  aspnet_state       ASP.NET
State Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioEndpointBu... Windows
Audio Endpoint Builder</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioSrv           Windows
Audio</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.55in;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  BFE                Base
Filtering Engine Running  BITS               Background Intelligent Transfer
Ser...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Browser           
Computer Browser</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  CcmExec            SMS
Agent Host</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  CertPropSvc       
Certificate Propagation</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  clr_optimizatio...
Microsoft .NET Framework NGEN v2.0....</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  clr_optimizatio...
Microsoft .NET Framework NGEN v2.0....</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  COMSysApp          COM+
System Application</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  CryptSvc          
Cryptographic Services</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  CscService         Offline
Files</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:52.7pt;margin-bottom:
13.95pt;margin-left:.5pt'>As you can see, this cmdlet retrieves a list of all
the services on the local computer, along with certain information about those
services (such as status).</p>

<h2 style='margin-left:-.25pt'>Using Cmdlet Parameters</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:58.25pt;margin-bottom:
11.45pt;margin-left:.5pt'>It’s possible there are a lot of services on your
local computer. What if you’re interested in only one of those services? You
don’t need a big long scrolling list of all the services, you just want to see
that one. For example, let’s say you want to find out if the Windows Update
service is running on your computer. You could type Get-Service at the command
prompt, hit Enter, then search through the list for the row containing a
DisplayName of Windows Update. But there’s an easier way:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service -DisplayName “Windows
Update”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.8pt;margin-bottom:
11.45pt;margin-left:.5pt'>What we’ve done here is pass a <i>parameter</i> to
the Get-Service cmdlet. A parameter is a way of handing additional information
to a cmdlet. In this case we’ve used the –DisplayName parameter, followed by
the value “Windows Update” to tell the Get-Service cmdlet to get only those
services with a DisplayName property equal to Windows Update. (The quotes
around Windows Update are required only because the string contains a space.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:59.55pt;margin-bottom:
0in;margin-left:.5pt'>Notice one very important thing: the parameter name
begins with a dash (-). All cmdlet parameters begin with a dash. In addition,
the value you want to assign to the parameter always immediately follows the
name of the parameter.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Here’s what we get back from our Get-Service cmdlet with the
parameter -DisplayName “Windows Update”:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  wuauserv           Windows
Update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>We can now easily see that our Windows Update service is
Running. (Phew!)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>Another way we could have accomplished this same
thing would have been to pass the –Name parameter and specify the Name value
(which is different from the DisplayName) we’re looking for:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service -Name wuauserv</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:71.3pt'>And once again, here’s what we get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  wuauserv           Windows
Update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:23.5pt;
margin-left:71.3pt'>Still running.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:80.8pt;margin-right:6.6pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>:
We’ve been showing all our cmdlets and parameters in mixed case. And that’s
fine: PowerShell is <i>not</i> casesensitive. Type this at the command prompt
and your results will be the same:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.75pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>get-service
–name wuauserv</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.55pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'>Or
even this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:27.15pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>geT-sERVICE
–naMe WUAuserv</span></p>

</div>

<h2 style='margin-left:71.3pt'>Wildcards</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:71.3pt'>Another thing you can do in PowerShell to further refine
your results is to use wildcards. The wildcard characters in PowerShell are the
asterisk (*), representing one or more characters, and the question mark (?),
representing a single character. For example, suppose we want to find all the
services whose DisplayName starts with the word Windows. All you need to do is include
the wildcard:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service -DisplayName windows*</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:71.3pt'>Depending on which services you have on your computer,
you’ll get back something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioEndpointBu... Windows
Audio Endpoint Builder</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioSrv           Windows
Audio</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:112.8pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  Eventlog           Windows
Event Log Stopped  FontCache3.0.0.0   Windows Presentation Foundation Fon...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  idsvc              Windows
CardSpace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  MpsSvc             Windows
Firewall</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:112.8pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  msiserver          Windows
Installer Running  RapiMgr            Windows Mobile-based device connect...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  SDRSVC             Windows
Backup</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  stisvc             Windows
Image Acquisition (WIA)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  TrustedInstaller   Windows
Modules Installer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:71.3pt'>Notice that the DisplayName in each row begins with the
string “windows”. The string “windows*” tells the cmdlet to get all services
where the DisplayName begins with the characters <i>windows</i> followed by one
or more other characters. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:71.3pt'>You can also put more than one wildcard character within
your value:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.3pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service -DisplayName *audio*</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection5>

<p class=MsoNormal style='margin-top:0in;margin-right:52.7pt;margin-bottom:
11.45pt;margin-left:.5pt'>Here we’re simply saying “return all services where
the DisplayName starts with any character or characters, contains the string <i>audio</i>,
then ends with any character or characters.” Here’s what we got back on our
test machine:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioEndpointBu... Windows
Audio Endpoint Builder</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioSrv           Windows
Audio</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:145.85pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:191%'><span style='font-size:9.0pt;
line-height:191%;font-family:"Courier New"'>Stopped  QWAVE              Quality
Windows Audio Video Experience </span><b><span style='font-size:12.0pt;
line-height:191%'>Multiple Parameters</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>Now that you know how wildcards work, that will help us
demonstrate the next thing you need to know about parameters: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:76.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>multiple parameters. Depending on the cmdlet and the
parameters available to it, you can specify more than one parameter at a time.
For example, suppose we want to display all the services with a name beginning
with windows (remember we saw how to do that: -DisplayName windows*). But wait:
we don’t really want <i>all</i> those service. Instead, we want to exclude all
those that contain the word audio in the Name or DisplayName. Here’s how we do
that:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service -DisplayName windows*
-Exclude *audio*</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>And here’s what we get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:183.05pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  Eventlog           Windows
Event Log Stopped  FontCache3.0.0.0   Windows Presentation Foundation Fon...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  idsvc              Windows
CardSpace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  MpsSvc             Windows
Firewall</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:183.05pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  msiserver          Windows
Installer Running  RapiMgr            Windows Mobile-based device connect...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  SDRSVC             Windows
Backup</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  stisvc             Windows
Image Acquisition (WIA)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  TrustedInstaller   Windows
Modules Installer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  W32Time            Windows
Time</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.45pt;margin-bottom:
13.95pt;margin-left:.5pt'>As you can see, we once again have a list of services
whose DisplayNames begin with <i>windows</i>; however, this list does not
include those services that have the word <i>audio</i> anywhere within their
names. We did this by specifying first the DisplayName value using the
–DisplayName parameter, then specifying the string we want to exclude (*audio*)
as the value for the –Exclude parameter.</p>

<h2 style='margin-left:-.25pt'>Positional vs. Named Parameters</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:67.65pt;margin-bottom:
11.45pt;margin-left:.5pt'>Here’s a question for you: Let’s say you’re driving
your car and you make a right turn. The road you’re turning onto has two lanes
going that direction, and you will shortly need to be in the left-hand lane. Do
you dutifully turn into the right lane (the lane closest to you), drive for a
bit, turn on your left turn signal and carefully change lanes? Or do you simply
turn right into the left lane?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:62.65pt;margin-bottom:
0in;margin-left:.5pt'>Go ahead, you can admit it; you turn directly into the
left lane, don’t you? While this may or may not be a legal move where you live,
in PowerShell it’s not only legal but you’re encouraged to take as many
shortcuts and wide turns as are convenient to you. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>(And you don’t even need to use your turn signal.) Positional
parameters are an example of this.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Take a look at this example:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
58.65pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process</span></p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 10</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>When you type this cmdlet at the PowerShell command prompt
and press Enter you’ll get back a list of all the processes running on the
local computer. Now let’s add a parameter, the process name:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process -Name svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>This will return a list of all processes where the Name of
the process is <i>svchost</i>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Handles  NPM(K)    PM(K)      WS(K)
VM(M)   CPU(s)     Id ProcessName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-------  ------    -----      -----
-----   ------     -- -----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    324       5     3496      
6972    47             864 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    492       8     4364      
7908    46             924 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    349      14    57624     
42824   133            1036 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    503      14    14292     
12768    72            1208 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    757      17    76256     
82296   184            1264 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>   2571      52   185500    
195380   347            1276 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    569      25     7548     
13388    79            1468 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>   1017      27    16332     
20852   117            1720 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    318      25    53524     
57428   116            1956 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Now let’s call Get-Process with a different parameter, this
time looking for a process with the ID of 864:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process -Id 864</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>And here’s what we get:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Handles  NPM(K)    PM(K)      WS(K)
VM(M)   CPU(s)     Id ProcessName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-------  ------    -----      -----
-----   ------     -- -----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    321       5     3448      
6912    46             864 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>You’re probably wondering where the shortcuts and wide
turns come in. Be patient, we’re getting there.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>Try this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.35pt;
margin-left:72.5pt'>Notice that we left off the –Name parameter, we specified
only the value. And what happened? We got the exact same results we got when we
<i>did</i> included the –Name parameter:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Handles  NPM(K)    PM(K)      WS(K)
VM(M)   CPU(s)     Id ProcessName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-------  ------    -----      -----
-----   ------     -- -----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    324       5     3496      
6972    47             864 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    492       8     4364      
7908    46             924 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    349      14    57624     
42824   133            1036 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    503      14    14292     
12768    72            1208 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    757      17    76256     
82296   184            1264 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>   2571      52   185500    
195380   347            1276 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    569      25     7548     
13388    79            1468 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>   1017      27    16332     
20852   117            1720 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    318      25    53524     
57428   116            1956 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>The reason we can do this is because the –Name parameter is
a positional parameter. Get-Process knows that the first value following the
cmdlet name (the value at parameter position 1) is the value for the –Name
parameter. You can see how this works by trying the same thing with the ID:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
50.25pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process 864</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual --
11</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>What did you get back? Hey, that’s what we got back, too:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process : Cannot find a process
with the name “864”. Verify the process name and call the cmdlet again.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:52.75pt;margin-bottom:
13.95pt;margin-left:.5pt'>Get-Process assumes that if a parameter name isn’t
specified then the first value is the Name. What it’s trying to do here is find
a process with the name 864, which of course it couldn’t do; that’s because
there is no such process. What all this means is that if you’re going to
specify an ID, you have to tell Get-Process that you’re specifying an ID by
including the –Id parameter. There’s no other way for Get-Process to know that
the value you’ve put in your command is the ID. The –Id parameter is a named parameter
(you must include the parameter name before the value), while the –Name
parameter is a positional parameter (the cmdlet can identify the parameter
based on where the value is positioned in the command).</p>

<h2 style='margin-left:-.25pt'>Finding Cmdlets</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:65.95pt;margin-bottom:
11.45pt;margin-left:.5pt'>Okay, so we’ve talked about cmdlets, explained what
they are, and even showed you a couple of them. One of the things we noted
about cmdlets is that they are the heart and soul of Windows PowerShell. Well,
that’s great, but how do you find out what cmdlets there are? After all,
cmdlets don’t do you much good if you don’t know about them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:67.6pt;margin-bottom:
11.45pt;margin-left:.5pt'>It’s time to tell you something about Windows
PowerShell, something we haven’t mentioned yet: PowerShell has a bit of an ego.
Yes, it’s true. After spending a little time with PowerShell you’ll find that
one thing it’s very, very good at is telling you all about itself. You can try
talking about yourself now and then but PowerShell will largely ignore you. Ask
it about itself, however, and you’ll get an earful (or at least a screenfull).
One example of this is how much PowerShell will tell you about its cmdlets. Do
you want to know all of the cmdlets available in Windows PowerShell? Well,
there’s a cmdlet for that:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Command</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:61.3pt;margin-bottom:
11.45pt;margin-left:.5pt'>Type Get-Command at the command prompt and you’ll get
a big, long scrolling list of not only all the cmdlets available but also all
of the functions, applications, and various other things. If you want to see
only the cmdlets, type this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Command –CommandType cmdlet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Once again you’ll get a big, long scrolling list (there are
over 200 cmdlets, after all), starting something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType   Name                 
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------   ----                 
----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet        Add-Computer         
Add-Computer [-DomainName] &lt;String&gt; [-Credential...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet        Add-Content          
Add-Content [-Path] &lt;String[]&gt; [-Value] &lt;Object...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet        Add-History          
Add-History [[-InputObject] &lt;PSObject[]&gt;] [-Pas...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet        Add-Member           
Add-Member [-MemberType] &lt;PSMemberTypes&gt; [-Name...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet        Add-PSSnapin         
Add-PSSnapin [-Name] &lt;String[]&gt; [-PassThru] [-V...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.65pt;margin-bottom:
12.75pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet        Add-Type             
Add-Type [-TypeDefinition] &lt;String&gt; [-Language &lt;... Cmdlet       
Checkpoint-Computer   Checkpoint-Computer [-Description] &lt;String&gt; [[-...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:62.5pt;margin-bottom:
11.45pt;margin-left:.5pt'>Here’s a little trick that might come in handy: to
keep the list from scrolling by too quickly to read, add the pipeline symbol
(|) and the word more to the end of your command (we’ll explain the pipeline
symbol later):</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Command –CommandType cmdlet |
more</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:69.1pt;margin-bottom:
11.45pt;margin-left:.5pt'>This command will show you all the cmdlets one screen
at a time; simply press the spacebar when you’re ready to move on to the next
page.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:65.75pt;
margin-left:.5pt'>Another thing you can do is narrow down your list a bit. For
example, maybe you only want to retrieve the cmdlets that start with </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 12</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>the verb New (and yes, in the PowerShell world “New” is a
verb). To do this you use the –Verb parameter with the value New:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Command -Verb new</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>From that you get back a list something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType    
Name                  Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------    
----                  ---------Cmdlet          New-Alias             New-Alias
[-Name] &lt;String&gt; [-Value] &lt;String&gt; ... Cmdlet         
New-Event             New-Event [-SourceIdentifier] &lt;String&gt; [[-Send...
Cmdlet          New-EventLog          New-EventLog [-LogName] &lt;String&gt;
[-Source] &lt;S...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
New-Item              New-Item [-Path] &lt;String[]&gt; [-ItemType &lt;Strin...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
New-ItemProperty      New-ItemProperty [-Path] &lt;String[]&gt; [-Name] &lt;...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
New-Module            New-Module [-ScriptBlock] &lt;ScriptBlock&gt; [-Fun...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
New-ModuleManifest    New-ModuleManifest [-Path] &lt;String&gt; -NestedMo...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
New-Object            New-Object [-TypeName] &lt;String&gt; [[-ArgumentLi...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
New-PSDrive           New-PSDrive [-Name] &lt;String&gt; [-PSProvider] &lt;S...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>Or maybe you want to find all the cmdlets that have to do
with the event log. That’s easy:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Command -Noun eventlog</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>And look what we get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType     Name             
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.45pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------     ----             
---------Cmdlet          Clear-EventLog    Clear-EventLog [-LogName]
&lt;String[]&gt; [[-Computer...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet          Get-EventLog     
Get-EventLog [-LogName] &lt;String&gt; [[-InstanceId] ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet          Limit-EventLog   
Limit-EventLog [-LogName] &lt;String[]&gt; [-ComputerN...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet          New-EventLog     
New-EventLog [-LogName] &lt;String&gt; [-Source] &lt;Stri...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet          Remove-EventLog  
Remove-EventLog [-LogName] &lt;String[]&gt; [[-Compute...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet          Show-EventLog    
Show-EventLog [[-ComputerName] &lt;String&gt;] [-Verbo...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet          Write-EventLog   
Write-EventLog [-LogName] &lt;String&gt; [-Source] &lt;St...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>You can also use wildcards with Get-Command. Let’s find all
cmdlets with the word Item in them:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Command -CommandType cmdlet
*item*</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Notice that we didn’t specify a parameter name before the
*item* string; that’s because the –Name parameter is a positional parameter,
which means that Get-Command knows that *item* is the value for the –Name
parameter. Once again, take a look at the output:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType    
Name                 Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------    
----                 ---------Cmdlet          Clear-Item           Clear-Item
[-Path] &lt;String[]&gt; [-Force] [-Filte...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
Clear-ItemProperty   Clear-ItemProperty [-Path] &lt;String[]&gt; [-Name] ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
Copy-Item            Copy-Item [-Path] &lt;String[]&gt; [[-Destination] &lt;...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Cmdlet         
Copy-ItemProperty    Copy-ItemProperty [-Path] &lt;String[]&gt; [-Destina...
Cmdlet          Get-ChildItem        Get-ChildItem [[-Path] &lt;String[]&gt;]
[[-Filter] ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:110.15pt;
margin-left:72.5pt'>…</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual --
13</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection6>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:10.35pt;margin-left:
-.25pt'><span style='font-size:11.0pt;line-height:107%'>Getting Help</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:51.65pt;margin-bottom:
11.45pt;margin-left:.5pt'>This is all making perfect sense so far, right? (Just
nod your head and keep reading.) But how are you ever going to know which parameters
do what, where they go, or even which parameters are available? How are you
going to figure out exactly how to use each cmdlet, or what each cmdlet is
supposed to do?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:55.0pt;margin-bottom:
11.45pt;margin-left:.5pt'>Remember how we told you about PowerShell’s ego? Once
again, PowerShell is more than happy to tell you all about itself, including
just about anything you could want to know about its cmdlets. All you need to
do is ask for some help:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:59.55pt;margin-bottom:
0in;margin-left:.5pt'>Type Get-Help at the command prompt and press Enter and
PowerShell will display help on the screen. As you’ll see, typing Get-Help by
itself simply gives you some help on the Get-Help cmdlet. If you want help with
a different cmdlet, type the cmdlet name in as the first parameter. For
example, to find out about the Get-Process cmdlet, type this at the command
prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help Get-Process</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:61.8pt;margin-bottom:
11.45pt;margin-left:.5pt'>This will give you <i>some</i> help. You’ll get a
description and some syntax statements. But that’s not really much help. What
you’d really like to see are some examples of how to use the cmdlet. For that
you can add the –Examples parameter. Give it a try and see what you get:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help Get-Process –Examples</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:59.95pt;margin-bottom:
11.45pt;margin-left:.5pt'>That’s more like it. Of course, now all you have is
examples, you don’t have a full description anymore. And you still don’t know
what all the parameters are or what they do. If you want <i>all</i> the
available help on a cmdlet – including examples – use the –Full parameter, like
this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help Get-Process –Full</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>Now, all that is great when you want to know about a
specific cmdlet. But what if you want some general PowerShell information?
Suppose, for example, you want to know more about how parameters work. (Yes,
there is even more than what we’ve told you. Hard to believe, isn’t it?) To get
more general information, you can check the “about” help topics. Want to know
more about parameters? Type this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help about_parameters</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:63.55pt;margin-bottom:
11.45pt;margin-left:.5pt'>If you want to know which topics are available as
about topics, as usual, just ask PowerShell. Use the wildcard character to
retrieve a list of all about help topics:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help about*</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>This will retrieve a list which starts out something like
this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:74.1pt;margin-bottom:
0in;margin-left:0in;text-align:justify;text-justify:inter-ideograph;text-indent:
0in;line-height:107%'><span style='font-size:9.0pt;line-height:107%;font-family:
"Courier New"'>Name                        Category  Synopsis
----                        --------  -------about_aliases              
HelpFile  Describes how to use alternate names for cmdl...
about_Arithmetic_Operators  HelpFile  Describes the operators that perform arithmet...
about_arrays                HelpFile  Describes a compact data structure for
storin... about_Assignment_Operators  HelpFile  Describes how to use operators
to assign valu... about_Automatic_Variables   HelpFile  Describes variables
that store state informat... about_Break                 HelpFile  Describes a
statement you can use to immediat... about_command_precedence    HelpFile 
Describes how Windows PowerShell determines w... about_Command_Syntax       
HelpFile  Describes the notation used for Windows Power...</span></p>

<h2 style='margin-left:71.65pt'>Getting Around</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:71.65pt'>We’ve talked a lot about cmdlets (they are, after all, the
heart and soul of PowerShell – did we mention that?), but we haven’t talked
about the PowerShell window itself. For example, how do you navigate your way
around the file system? The good news is, if you know how to navigate around
the file system in the Cmd.exe window, you know how to navigate around the file
system in Windows PowerShell. The better news is that if you know how to
navigate around the file system, you also have a pretty good idea how to
navigate around the registry. Yes, you read that right, the Windows system
registry.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:71.65pt'>To change from one directory to another, you can use the
cd command, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\&gt; cd scripts</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:71.65pt'>Press Enter and you’ll navigate to the Scripts folder:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt;</span></p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Tip</b>:
In PowerShell, cd is actually an alias for the Set-Location cmdlet. (Remember,
we told you it was all about cmdlets in PowerShell.) So the command <b>Set-Location
scripts</b> is the same as <b>cd scripts</b>. To find out more about aliases,
see the <b>Aliases</b> section of this Owner’s Manual.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:71.15pt;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:71.65pt'>You can also display the contents of the current directory
with the dir command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; dir</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
21.25pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    Directory: C:\scripts</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:181.15pt;margin-bottom:
.15pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Mode               
LastWriteTime     Length Name ----                -------------     ------
---d----         5/29/2008   8:37 PM            audio d----          9/6/2007  
2:14 PM            begin</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a---         5/20/2008  12:46
PM         26 application.log</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a---        10/31/2007   9:58
PM        155 Audits.xml</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a---          2/5/2008  11:00
AM         54 computers.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a---          5/8/2008   1:27
PM         19 conv.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
24.85pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:.45in'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Tip</b>:
The dir command is an alias for the Get-ChildItem cmdlet. If you’re used to
working with UNIX, you might want to use the ls command, which is also an alias
for Get-ChildItem and, like dir, will retrieve the contents of the current
directory.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:71.65pt'>We mentioned you can do the same thing with the registry.
Suppose you want to take a look at the HKEY_CURRENT_USER hive of the registry.
You can start by moving out of the file system and into that hive, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; cd HKCU:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:71.65pt'>Press Enter and notice the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:71.65pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS HKCU:\&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:71.65pt'>Try typing <b>dir</b> and you’ll see that you really are
in the registry. Simply type <b>C:</b> and press Enter to return to the file
system.</p>

<h2 style='margin-left:-.25pt'>Start Your Engine</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:60.95pt;margin-bottom:
0in;margin-left:.5pt'>Now it’s finally time to get your key out and put it in
the ignition. You’ve learned how to start up Windows PowerShell and drive responsibly.
The rest of this Owner’s Manual will teach you much more, and trust us, there
really is a lot more to learn. For example, we haven’t even mentioned the
tailpipe – er, the pipeline – in Windows PowerShell. You’ll <i>definitely</i>
want to know about that. (See <b>Piping and the Pipeline </b>in this Owner’s
Manual.) Hey, we haven’t steered you wrong yet, have we?<br clear=all
style='page-break-before:always'>
</p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:67.5pt;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>I</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:68.0pt'><img width=327 height=339
src="PowerShell%20Owners%20Manual_files/image006.gif" align=left hspace=12>t’s
inevitable: no sooner do you get Windows PowerShell installed then you start
hearing about and reading about “piping” and “the pipeline.” In turn, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:68.0pt'>that leads to two questions: 1) What’s a pipeline?, and 2)
Do I even need to <i>know</i> about piping and pipelines?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:68.0pt'>Let’s answer the second question first: Do you even need to
<i>know</i> about piping and pipelines? Yes, you do. There’s no doubt that you
can work with Windows PowerShell without using pipelines. The question,
however, is whether you’d <i>want</i> to work with PowerShell without using
pipelines. After all, you can order a banana split and ask them to hold the ice
cream; that’s fine, but at that point you don’t really have a banana split, do
you? The same is true of the PowerShell pipeline: you can run commands and
write scripts without a pipeline. But, at that point, are you really making use
of <i>PowerShell</i>?</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
OK, we’re exaggerating a little bit: many commands don’t <i>need</i> a
pipeline. In general, however, that’s not going to be true of longer and more
complicated PowerShell commands and scripts.</p>

</div>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=618
 style='width:463.35pt;margin-left:67.0pt;border-collapse:collapse'>
 <tr style='height:85.0pt'>
  <td width=348 valign=top style='width:261.35pt;padding:0in 0in 0in 0in;
  height:85.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>Piping
  and the Pipeline</span></p>
  </td>
  <td width=269 valign=bottom style='width:202.0pt;padding:0in 0in 0in 0in;
  height:85.0pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
  margin-left:0in;text-indent:0in;line-height:107%'><b><span style='font-size:
  12.0pt;line-height:107%'>Assembling a Pipeline</span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>So
  then what <i>is </i>piping and the pipeline? To begin with, in some ways the
  term “pipeline” can be considered something of a misnomer. Suppose you have
  an oil pipeline, like the Alaska Pipeline. You put oil in one end </p>
  </td>
 </tr>
</table>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection7>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>Quick: What one feature
truly  separates Windows PowerShell from other scripting/shell languages? How
many of you said “the pipeline?”  Really? That many of you, huh?</span></i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>of the pipeline; what do you suppose comes out the other end?
You got it: oil. And that’s the way a pipeline is supposed to work: it’s just a
way of moving something, unchanged, from one place to another. But that’s not
the way the pipeline works in Windows PowerShell.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:10.0pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note:</b>
There’s some debate about this. For example, when you “pipe” an object from one
part of a command to another, you’re simply passing that object – unchanged –
from one part of the command to another. There have been some interesting
discussions around the PowerShell water cooler about this very topic that
involve Kool-Aid and waste management facilities (don’t ask), as well as
mentions of marketing pipelines and other industry-specific terminology, but we
won’t confuse you with all that. You’re probably confused enough already, and
since our goal is to <i>un</i>-confuse you, we’ll move on.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Instead, think of the Windows PowerShell pipeline as being
more like an assembly line. With an assembly line you start with a particular
thing; for example, you start with a car. However, you don’t start with a <i>finished</i>
car; instead, </p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection8>

<p class=MsoNormal style='margin-top:0in;margin-right:68.05pt;margin-bottom:
13.95pt;margin-left:.5pt'>stations; at each station workers make some sort of
modification, welding on doors, adding windows, installing seats. When you’re
all done you’ll have a car; you won’t have a tube of toothpaste or a barrel of
oil. But thanks to all the changes that were made along the way, you’ll have a
very different car than the “car” you started with.</p>

<h2 style='margin-left:-.25pt'>Start with a Cmdlet</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:67.05pt;margin-bottom:
11.45pt;margin-left:.5pt'>A similar process takes place when you use the
pipeline in Windows PowerShell. For example, suppose there happened to be a
cmdlet named Get-Shapes; when you run this cmdlet it returns a collection of
all the geometric shapes found on your computer. To call this hypothetical
cmdlet you use a command similar to this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
2.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Shapes</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:17.45pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:11.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:black'><img width=433
height=298 src="PowerShell%20Owners%20Manual_files/image007.gif"></span></p>

<h2 style='margin-left:-.25pt'>The Filtering Station</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:55.75pt;margin-bottom:
11.45pt;margin-left:.5pt'>That’s pretty cool – except for one thing. As it
turns out, we’re only interested in the <i>clear</i> shapes. Unfortunately,
though, our hypothetical Get-Shapes cmdlet doesn’t allow us to filter out items
that fail to meet specified criteria. Oh, well; guess we’re out of luck, right?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Right. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.4pt;margin-bottom:
11.7pt;margin-left:-.25pt'>No, wait, we mean <i>wrong</i>. Granted, Get-Shapes
doesn’t know how to filter out unwanted items. But that’s not a problem, because
PowerShell’s <b>Where-Object</b> cmdlet <i>does</i> know how to filter out
unwanted items. Because of that, all we have to do is use Get-Shapes to
retrieve all the shapes, then hand that collection of shapes over to
Where-Object and let <i>it</i> filter out everything but the clear shapes. In
other words:</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:11.75pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Courier New";
font-weight:normal'>Get-Shapes | Where-Object {$_.Pattern –eq “Clear”}</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:79.25pt;margin-bottom:
11.45pt;margin-left:.5pt'>Don’t worry about the syntax of the Where-Object
cmdlet for now. The important thing to note is the pipe separator character (|)
that separates our two commands (Get-Shapes and Where-Object). When we use the
pipeline in Windows PowerShell that typically means that we use a cmdlet to
retrieve a collection of objects. However, we don’t do anything with those
objects, at least not right away. Instead, we hand that collection over to a
second cmdlet, one that does some further processing (filtering, grouping, sorting,
etc.). That’s what the pipeline is for.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.05pt;
margin-left:73.6pt'>And in our hypothetical example, the pipeline provides a
way for us to filter out everything except the clear shapes:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.2pt;
margin-left:73.1pt;text-indent:0in;line-height:107%'><span style='font-size:
11.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:black'><img
width=436 height=289 src="PowerShell%20Owners%20Manual_files/image008.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:73.6pt'>That’s cool, but what’s even cooler is the fact that you
aren’t limited to just two stations on your assembly line. For example, suppose
we want to sort the clear shapes by size. Where-Object doesn’t know how to sort
things. But Sort-Object does: </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:1.45pt;margin-left:
73.6pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Courier New";
font-weight:normal'>Get-Shapes | Where-Object {$_.Pattern –eq “Clear”} |
Sort-Object Size</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.55pt;
margin-left:72.5pt;text-indent:0in;line-height:107%'><span style='font-size:
11.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:black'><img
width=431 height=290 src="PowerShell%20Owners%20Manual_files/image009.gif"></span></p>

<h2 style='margin-left:73.6pt'>A Real-Life Pipeline</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:73.6pt'>Here’s a somewhat more practical use of the PowerShell
pipeline. The command we’re about to show you uses the GetChildItem cmdlet to
retrieve a list of all the items found in the folder C:\Scripts. The command
then hands that collection over to the Where-Object cmdlet; in turn,
Where-Object grabs all the items (files and folders) that are greater than
200Kb in size, filtering out all other items. After it finishes filtering,
Where-Object hands the remaining items over to the Sort-Object cmdlet, which
sorts those items by file size.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection9>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>The command itself looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-ChildItem C:\Scripts |
Where-Object {$_.Length -gt 200KB} | Sort-Object Length</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>And when we run the command we get back something along these
lines:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Directory:
Microsoft.PowerShell.Core\FileSystem::C:\Scripts</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Mode LastWriteTime Length Name</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>---- ------------- ------ ----</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a--- 2/19/2007 7:42 PM 266240
scores.mdb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a--- 5/19/2007 9:23 AM 328620
wordlist.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a--- 12/1/2002 3:35 AM 333432
6of12.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-a--- 5/18/2007 8:12 AM 708608
test.mdb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>That’s pretty slick, but those of you who’ve done
much scripting seem a little skeptical. “OK, that is nice, but it’s not that
big of a deal,” you say. “After all, if I write a WMI query I can do filtering
right in my query. And if I write an ADSI script I can add a filter that limits
my collection to, say, user accounts. I’m already doing all this stuff.”</p>

<p class=MsoNormal style='margin-top:0in;margin-right:80.2pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Depending on how you want to look at it, that’s
true; after all, you can use filtering  n either a WMI or an ADSI script.
However, the approach used when writing a filter in WMI is typically very
different from the approach used when writing a filter in ADSI. In turn, an
ADSI filter is different from the approach used when writing a filter using the
FileSystemObject. The advantage to Windows PowerShell, and to using the
pipeline, is that it doesn’t matter what kind of data or what kind of object
you’re working with; you just hand everything off to Where-Object and let
Where-Object take care of everything.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:73.65pt;margin-bottom:
11.45pt;margin-left:.5pt'>Or take sorting, to name another commonly-used
operation. If you’re doing a database query (including ADO queries against
Active Directory) you don’t need a pipeline; you can specify sort options as
part of the query. But what if you’re doing a WQL query against a WMI class?
That’s a problem: WQL doesn’t allow you to specify sort options. If you’re a
VBScripter that means you have to do something crazy, like write your own sort
function or rely on a workaround like disconnected recordsets, just so you can
do something as seemingly-simple as sorting data. Is that the case in
PowerShell? You already know the answer to that, don’t you? Of course that’s
not the case; in PowerShell you just pipe your data to the Sort-Object cmdlet,
sit back, and relax. For example, say you want to retrieve information about
the services running on a computer, then sort the returned collection by
service status (running, stopped, etc.). Okey-doke:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service | Sort-Object Status |
Format-Table</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.75pt;margin-bottom:
13.95pt;margin-left:-.25pt'>Note. You might note that, as a bonus, we took the
sorted data and piped it to the Format-Table cmdlet; that means the final onscreen
display ends up as a table rather than a list.</p>

<h2 style='margin-left:-.25pt'>Don’t Get Carried Away</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:64.6pt;margin-bottom:
11.45pt;margin-left:.5pt'>Yes, this is easy isn’t it? In fact, about the only
time you’ll ever run into a problem is if you get carried away and try
pipelining everything. Remember, you can’t pipeline something unless it makes
sense to use a pipeline. It makes sense to pipeline service information to
Sort-Object; after all, Sort-Object can pretty much sort anything. It also
makes sense to pipe the sorted information to Format-Table; after all,
Format-Table can take pretty much any information and display it as a table.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>But consider this command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Sort-Object | Get-Process</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.05pt;margin-bottom:
61.0pt;margin-left:.5pt'>What’s this command going to do? Absolutely nothing.
Nor should we expect it to do anything. After all, Sort-Object is designed to
sort information and there’s nothing here to sort. (Incidentally, that’s a hint
that Sort-Object should typically appear on the righthand side of a pipeline.
You need to first grab some information and then sort that information.)</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 20</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Are there exceptions to this rule? Sure. For example,
suppose you have a variable $a that contains a collection of data. You can sort
that data, and sidestep the pipeline altogether, by using a command like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Sort-Object –inputobject $a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Someday you might actually have to use an approach similar
to this; as a beginner, however, you shouldn’t worry about it. Instead, you
should get into the habit of using piping and the pipeline. Learn the rules
first; later on, there will be plenty of time to learn the exceptions.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.25pt;margin-bottom:
11.45pt;margin-left:72.5pt'>But even if there was something for Sort-Object to
sort this command still wouldn’t make much sense. After all, the Get-Process
cmdlet is designed to retrieve information about the processes running on a
computer; what exactly would Get-Process do with any sorted information handed
over the pipeline? For the most part, you first acquire something (a
collection, an object, whatever) and then hand that data over the pipeline. The
cmdlet on the right-hand side of the pipeline will then proceed to do some
additional processing and formatting of the items handed to it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>As we implied earlier, when you do hand data over the
pipeline make sure there’s a cmdlet waiting for it on the other side. The more
you use PowerShell the more you’re going to be tempted to do something like
this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process | $a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Admittedly, that looks OK – it looks like you want to
assign the output of Get-Process to the variable $a then display $a. However, it’s
not going to work; instead you’re going to get an error message similar to
this: Expressions are only permitted as the first element of a pipeline.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:17</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ Get-Process | $a &lt;&lt;&lt;&lt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ CategoryInfo : ParserError: (:)
[], ParentContainsErrorRecordException</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ FullyQualifiedErrorId :
ExpressionsMustBeFirstInPipeline</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>We’ll concede that this can be a difficult distinction to
make, but pipelines are used to string multiple commands into a single command,
with data being passed from one portion of the pipeline to the next.
Furthermore, as that data gets passed from one section to another it gets
transformed in some way: filtered, sorted, grouped, formatted, whatever. In the
invalid command we just showed you, we’re not passing any data. We’ve really
got two totally separate commands here: we want to use Get-Process to return
information about the processes running on a computer and then, without
transforming that data in any way, we want to store the information in variable
$a and display that information. Because we really have two independent
commands, we need two lines of code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = Get-Process</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>And if you’re bound and determined to do this all on a
single line of code, separate the commands using a semicolon rather than the
pipe separator:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = Get-Process; $a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.9pt;
margin-left:72.5pt'>But this isn’t pipelining, this is just putting multiple
commands on one line.</p>

<h2 style='margin-left:72.5pt'>Bonus Tip</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>OK, but suppose you wanted to get process information, sort
that information by process ID, and then – instead of displaying that
information – store the data in a variable named $a. Can you do that? Yes you
can, just like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
49.05pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = (Get-Process | Sort-Object ID)
</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual --
21</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:65.25pt;margin-bottom:
0in;margin-left:7.7pt'>What we’re doing here is assigning a value to $a. Which
value are we assigning it? Well, we’re assigning it the value we get back when
we call the Get-Process cmdlet and then pipe the returned information to
Sort-Object. This command works because we put parentheses around our
Get-Process/Sort-Object command. Any time PowerShell parses a command, it
carries out the instructions enclosed in parentheses before it does</p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.0pt;margin-bottom:
11.7pt;margin-left:7.7pt'>anything else. In this case, that means PowerShell
first gets and sorts process information, then assigns that data to $a. Display
the value of $a and see for yourself.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.25pt;margin-bottom:
13.95pt;margin-left:7.7pt'>But if you’re a beginner, don’t worry too much about
this bonus example. Get used to using pipelines in the “traditional” way, then
come back here and start playing around with parentheses.</p>

<h2 style='margin-left:7.7pt'>More on Pipelining</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:60.55pt;margin-bottom:
11.45pt;margin-left:7.7pt'>With any luck, this should be enough to get you
started with piping and pipelines. Once you get comfortable with the basic
concept you might want a little more technical information about pipelines. If
so, just type the following from your Windows PowerShell command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:7.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Help about_pipelines</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:65.5pt;margin-bottom:
314.6pt;margin-left:7.7pt'>Don’t assume that you can ignore pipelines and
become a true Windows PowerShell user; you can’t. You can – and should – ask
them to hold the maraschino cherry when ordering a banana split. But if you ask
them to hold the ice cream, you’ll spend all your time wondering why people
make Piping and the such a big deal about banana splits. Don’t make that same
mistake with Windows PowerShell.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:123.05pt;margin-bottom:
42.8pt;margin-left:-.25pt;line-height:104%'><span style='font-size:18.0pt;
line-height:104%;font-family:"Calibri",sans-serif'>“</span><span
style='font-size:18.0pt;line-height:104%'>Don’t assume that you can ignore
pipelines and become a true Windows PowerShell user; you can’t.</span><span
style='font-size:18.0pt;line-height:104%;font-family:"Calibri",sans-serif'>”</span></p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 22</span></h3>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection10>

<p class=MsoNormal style='margin-top:0in;margin-right:-19.85pt;margin-bottom:
5.25pt;margin-left:.5pt;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=327 height=229 id="Group 52140"
src="PowerShell%20Owners%20Manual_files/image010.gif"></span></p>

<h1 style='margin-left:.15pt'>Tab Expansion</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>So you think it’s pretty
nice that  Cmd.exe uses tab expansion for file paths? Just wait until you see
what Windows PowerShell does with tab expansion.</span></i></p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>O</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>ne of the big advantages of using Windows PowerShell is that
you can just sit at the command prompt and type everything; there’s </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.5pt;margin-bottom:
11.45pt;margin-left:.5pt'>no need to mess around with dialog boxes or mouse
clicks or any other GUI nonsense. On the other hand, one of the big <i>disadvantages</i>
of Windows PowerShell is that you have to sit at the command prompt and type
everything: you can’t take advantage of dialog boxes or mouse clicks or any
other GUI shortcuts. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.25pt;margin-bottom:
11.45pt;margin-left:.5pt'>In other words, if you’re the kind of person who
likes to type commands from the command prompt then Windows PowerShell is like
a dream come true. But what if you don’t like to type, or what if you find it
difficult to type? In that case, you’re just plain out of luck, aren’t you?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.3pt;margin-bottom:11.45pt;
margin-left:.5pt'>Well, no, not entirely. Granted, a certain amount of typing
will always be required in Windows PowerShell. However, Windows PowerShell also
includes a few features that can dramatically reduce the amount of typing
required. And one of the coolest of these features is tab expansion.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:3.85pt;margin-bottom:
11.45pt;margin-left:.5pt'>Tab expansion isn’t anything new; in fact, many of
you are probably familiar with the tab expansion capabilities built into
Cmd.exe. For example, suppose you want to change to the C:\Documents and
Settings folder. To do that you need to type this entire command, right?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>cd “c:\documents and settings”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Well, you can if you want to. Alternatively, you can simply
type the following and then press the TAB key:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>cd c:\d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.8pt;margin-bottom:92.2pt;
margin-left:.5pt'>If the Documents and Settings folder is the only folder in
the root of drive C whose name begins with the letter <i>D</i> then you’re
done: the full folder name will be displayed (including the double quote marks)
and you can simply press ENTER and the command will run. But what if you have
three or four folders whose names begin with the letter <i>D</i>? That’s fine:
just keep pressing the TAB key and the command shell will dutifully cycle
through the complete set of folders whose names begin with the letter <i>D</i>.
When you finally hit the desired folder press ENTER and let the command shell
do your typing for you.</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual --
23</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection11>

<p class=MsoNormal style='margin-top:0in;margin-right:62.25pt;margin-bottom:
11.7pt;margin-left:-.25pt'>When it comes to file and folder paths Windows
PowerShell has this exact same capability. Want to switch to the C:\Documents and
Settings folder? All you have to do is type the following and then press the
TAB key:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>cd c:\d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:50.85pt;margin-bottom:
11.7pt;margin-left:-.25pt'>If necessary, keep pressing TAB until you see
C:\Documents and Settings. At that point press ENTER and – like magic – you’ll instantly
be transported to the Documents and Settings folder.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>Wait, hold your applause; as the saying goes, you ain’t seen
nothin’ yet. Say you want to use the cmdlet Get-</p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.65pt;margin-bottom:
11.45pt;margin-left:.5pt'>AuthenticodeSignature. If you’re young and in tip-top
physical condition you can type that entire cmdlet name yourself. If you’re
rich, you can outsource the job and have someone do all that typing for you.
Or, if you’re lazy (like we are) you can simply type the following and then
press the TAB key:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-au</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:77.6pt;margin-bottom:
11.45pt;margin-left:.5pt'>That’s right: in Windows PowerShell tab expansion not
only works with file and folder paths, but it works with cmdlet names as well.
Speaking of cmdlets, is that one cmdlet Get-PSSnap-in? Or is it Get-PSSnapin?
Or are we way off; maybe it’s GetPowerShellSnapin? To tell you the truth, we
don’t remember. But that’s OK; all we have to do is type the following and then
start pressing the TAB key:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-p</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>In no time at all we’ll find exactly what we’re looking
for: Get-PSSnapin.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.5pt;margin-bottom:
11.45pt;margin-left:.5pt'>Tab expansion even works with cmdlet parameters. For
example, the Get-Help cmdlet includes a parameter named <b>-detailed</b> that
returns detailed help about a topic (including examples). You say you like the
detailed help but you hate having to type <i>–detailed</i>? Then don’t. Try
this trick to get detailed help about the Get-ChildItem cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Type
<b>get-h</b> and press TAB.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Press
the spacebar, then type <b>get-ch</b> and press TAB.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:9.65pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Press
the spacebar, then type <b>–</b> and press TAB. Keep pressing TAB until you see
<b>–Detailed</b> and then press ENTER.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Pretty slick, huh?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.8pt;margin-bottom:
11.45pt;margin-left:.5pt'>As long as we’re on the subject, here’s another
typing shortcut for you. When it comes to cmdlet parameters you only have to
type as much of the parameter name as is needed for Windows PowerShell to know
exactly which parameter you’re referring to. For example, the Get-Command
cmdlet includes the following parameters:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-CommandType</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-Module</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-Syntax</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-TotalCount</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-Noun</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-Verb</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-Name</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-ArgumentList</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-Debug</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-ErrorAction</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-ErrorVariable</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-WarningAction</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-WarningVariable</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-OutBuffer</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>-OutVariable</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:73.6pt'>Need to use the –CommandType parameter? Well, if you want
to you can type in the entire parameter name, like so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:73.6pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-command –commandtype cmdlet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:73.6pt'>On the other hand, because the –CommandType parameter is
the only Get-Command parameter whose name begins with the letter <i>C</i> you
can add this parameter merely by typing <b>-c</b>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:73.6pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-childitem –c cmdlet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:73.6pt'>Nice. By the way, did we mention that tab expansion also
works for variable names? Suppose you were silly enough to name a variable
$TheMainVariableThatGetsUsedInMyScript. <i>That’s</i> a lot of typing,
especially for a variable name. So then don’t type it; just type the following
and press TAB any time you need to refer to that variable:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:73.6pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$th</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:73.6pt'>Cool. Here’s one more. Suppose you use the New-Object
cmdlet to create an instance of Microsoft Excel:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:73.6pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = new-object -comobject
excel.application</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:73.6pt'>Now, type the following, then start pressing the TAB key
and see what happens:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:73.6pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:304.4pt;
margin-left:73.6pt'><i>Now</i> you can applaud.</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:150.3pt;text-align:right;text-indent:0in;
line-height:104%'><span style='font-size:18.0pt;line-height:104%;font-family:
"Calibri",sans-serif'>“</span><span style='font-size:18.0pt;line-height:104%'>That’s
right: in Windows PowerShell tab expansion not only works with file and folder
paths, but it works with cmdlet names as well.</span><span style='font-size:
18.0pt;line-height:104%;font-family:"Calibri",sans-serif'>”</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection12>

<p class=MsoNormal style='margin-top:0in;margin-right:-14.95pt;margin-bottom:
14.0pt;margin-left:.5pt;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=327 height=238 id="Group 50379"
src="PowerShell%20Owners%20Manual_files/image011.gif"></span></p>

<h1 style='margin-top:0in;margin-right:12.15pt;margin-bottom:1.0pt;margin-left:
.15pt'>Shortcut Keys</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>Yes, we know: everybody
loves to spend their entire day sitting at the keyboard, typing. But, just in
case, here are some shortcut keys that can make your Windows PowerShell life
much, much easier.</span></i></p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>L</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>ike all good command shells, Windows PowerShell includes a
number of shortcut keys that can lessen the amount of typing needed to get you
through a Windows PowerShell session. (Actually, as far as we know even <i>bad</i>
command shells include shortcuts keys.) This document briefly describes the
most commonly-used PowerShell shortcut keys. Because most of these shortcut
keys are meaningless without a command history, we’ll assume our PowerShell
session has been up and running long enough for us to have issued the following
set of commands:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>cd
c:\scripts</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>get-childitem
-recurse</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>get-executionpolicy</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>4.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>set-executionpolicy
Unrestricted</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>5.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>get-process</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>get-process
-name “Notepad”</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>7.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>get-history</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>8.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>cd
c:\windows</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>9.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>get-childitem
*.dll</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>10.<span
style='font:7.0pt "Times New Roman"'>&nbsp; </span></span>clear-host</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>And now let’s take a look at the shortcut keys and what
they’re used for.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:-.25pt'><span
style='font-size:10.0pt;line-height:107%'>Up Arrow</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:48.45pt;margin-bottom:
11.45pt;margin-left:.5pt'><span style='position:relative;z-index:-1895821312'><span
style='left:0px;position:absolute;left:0px;top:-26px;width:369px;height:51px'><img
width=369 height=51 src="PowerShell%20Owners%20Manual_files/image012.gif"></span></span>Moves
backward through the command history, beginning with the last command typed and
working back towards the first command typed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>For example, if the last command you typed was <b>clear-host</b>
(as in our sample command history) then pressing the Up arrow key one time will
display <b>clear-host</b> at the command prompt; you can then run this command
by pressing ENTER. Pressing the Up arrow key a second time will display the
command <b>get-childitem *.dll</b>. Pressing the key a third time displays <b>cd
c:\windows</b>, and so on.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:-.25pt'><span
style='font-size:10.0pt;line-height:107%'>Down Arrow</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:7.8pt;margin-bottom:0in;
margin-left:.5pt'><span style='position:relative;z-index:-1895820288'><span
style='left:0px;position:absolute;left:0px;top:-28px;width:369px;height:52px'><img
width=369 height=52 src="PowerShell%20Owners%20Manual_files/image013.gif"></span></span>Moves
forward through the command history. Continuing with the Up arrow example,
suppose you backed your way through the command history (starting with the
latest command and moving backwards towards the first command) until <b>getprocess
–name “Notepad”</b> is displayed at the command prompt. If you now press the
Down arrow key you’ll move forward through the command history and <b>get-history</b>
will be displayed. Press the Down arrow key a second time and <b>cd c:\windows</b>
will be displayed. Etc., etc.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:-.25pt'><span
style='font-size:10.0pt;line-height:107%'>PgUp</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:28.85pt;margin-bottom:
11.45pt;margin-left:.5pt'><span style='position:relative;z-index:-1895819264'><span
style='left:0px;position:absolute;left:0px;top:-25px;width:369px;height:51px'><img
width=369 height=51 src="PowerShell%20Owners%20Manual_files/image014.gif"></span></span>Displays
the first command in the command history. In our example, that causes <b>cd
c:\scripts </b>to be displayed at the command prompt.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection13>

<p class=MsoNormal style='margin-top:0in;margin-right:94.9pt;margin-bottom:
0in;margin-left:90.5pt'><img width=605 height=408
src="PowerShell%20Owners%20Manual_files/image015.gif" align=left hspace=12>Moves
the cursor one “word” to the left on the command line. For example, suppose the
command <b>get-process –name “Notepad” </b>is displayed at the command line; in
addition, suppose that the cursor is under any of the characters in the “word”
get-process. (In this case, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:90.5pt'>“words” are strings of characters delineated by blank
spaces.) Holding down the Ctrl key and pressing the Left arrow key will cause
the cursor to move beneath the <b>g</b> in <b>get-process</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:1.25in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:90.5pt'><span
style='font-size:10.0pt;line-height:107%'>Control + Right Arrow</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:94.9pt;margin-bottom:
0in;margin-left:90.5pt'><span style='position:relative;z-index:-1895817216'><span
style='left:0px;position:absolute;left:121px;top:-22px;width:598px;height:56px'><img
width=598 height=56 src="PowerShell%20Owners%20Manual_files/image016.gif"></span></span>Move
the cursor one “word” to the right on the command line. For example, suppose
the command <b>get-process –name “Notepad”</b> is displayed at the command
line; in addition, suppose that the cursor is under any of the characters in
the “word” <b>–name</b>. (In this case, “words” </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 align=left
 width=257 style='width:193.0pt;border-collapse:collapse;margin-left:-2.25pt;
 margin-right:-2.25pt'>
 <tr style='height:32.8pt'>
  <td width=239 style='width:178.9pt;border:solid #181717 1.0pt;background:
  #FFFEFD;padding:0in 5.75pt 0in 5.65pt;height:32.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:11.0pt;line-height:107%;font-family:"Lucida Console"'>Enter
  char to copy up to:</span></p>
  </td>
  <td width=19 rowspan=2 valign=top style='width:14.1pt;background:#181717;
  padding:0in 5.75pt 0in 5.65pt;height:32.8pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'>&nbsp;</p>
  </td>
 </tr>
 <tr style='height:13.65pt'>
  <td width=239 valign=top style='width:178.9pt;border:none;background:#181717;
  padding:0in 5.75pt 0in 5.65pt;height:13.65pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'>&nbsp;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:90.5pt'>are strings of characters delineated by blank spaces.)
Holding down the Ctrl key and pressing the Right arrow key will cause the
cursor to move beneath the <b>“</b> in <b>“Notepad”</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:1.25in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:90.5pt'><span
style='font-size:10.0pt;line-height:107%'>Control + c</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:91.05pt;margin-bottom:
0in;margin-left:90.5pt'><span style='position:relative;z-index:-1895816192'><span
style='left:0px;position:absolute;left:121px;top:-21px;width:598px;height:53px'><img
width=598 height=53 src="PowerShell%20Owners%20Manual_files/image017.gif"></span></span>Cancels
the current command. If you are partway through typing a command and then press
Ctrl+c Windows PowerShell will ignore everything you’ve typed on the line and
present you with a new “blank” command line.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:1.25in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:90.5pt'><span
style='font-size:10.0pt;line-height:107%'>F2</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:53.9pt;margin-bottom:
11.45pt;margin-left:90.5pt'><span style='position:relative;z-index:-1895815168'><span
style='left:0px;position:absolute;left:120px;top:-23px;width:599px;height:53px'><img
width=599 height=53 src="PowerShell%20Owners%20Manual_files/image018.gif"></span></span>Creates
a new command line from the partial contents of your last command line. For
example, suppose your previous command was <b>get-process –name “Notepad”</b>.
If you press F2, PowerShell will respond with the following request:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:49.1pt;margin-bottom:
11.7pt;margin-left:-.25pt'>If you type <b>“</b> (representing the first
quotation mark) PowerShell will insert the text from your previous command, up
to (but not including) the double quote mark:</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:11.75pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Courier New";
font-weight:normal'>get-process –name</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:55.4pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Note that PowerShell will always go to the first
instance of a character. If you type an <b>e</b> in the dialog box PowerShell
will begin “typing” until it encounters the first <i>e</i> in <i>get-process</i>.
Therefore, all that will be displayed on your screen is the following:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>g</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>To cancel when asked to enter a character, press Enter
without entering anything.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:-.25pt'><span
style='font-size:10.0pt;line-height:107%'>F3</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:116.2pt;margin-bottom:
0in;margin-left:.5pt'><span style='position:relative;z-index:-1895814144'><span
style='left:0px;position:absolute;left:-1px;top:-24px;width:626px;height:56px'><img
width=626 height=56 src="PowerShell%20Owners%20Manual_files/image019.gif"></span></span>Displays
your previous command. This is equivalent to pressing the Up arrow key once.
However, while you can press Up arrow multiple times to continue cycling
through your command history, pressing F3 additional times has no effect: only
your last command will be displayed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:-.25pt'><span
style='font-size:10.0pt;line-height:107%'>F4</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:125.6pt;margin-bottom:
.75pt;margin-left:.5pt'><span style='position:relative;z-index:-1895813120'><span
style='left:0px;position:absolute;left:0px;top:-25px;width:626px;height:56px'><img
width=626 height=56 src="PowerShell%20Owners%20Manual_files/image020.gif"></span></span>Beginning
from the current cursor position, F4 deletes characters up to the specified
character. For example, suppose the command <b>get-process –name “Notepad” </b>is
displayed, and the cursor is beneath the <i>c</i> in <i>process</i>. If you
press F4, the following dialog box appears:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=301
 style='width:226.1pt;margin-left:.65pt;border-collapse:collapse'>
 <tr style='height:32.8pt'>
  <td width=283 style='width:212.1pt;border:solid #181717 1.0pt;background:
  #FFFEFD;padding:0in 5.75pt 0in 6.1pt;height:32.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:11.0pt;line-height:107%;font-family:"Lucida Console"'>Enter
  char to delete up to:</span></p>
  </td>
  <td width=19 rowspan=2 valign=top style='width:14.0pt;background:#181717;
  padding:0in 5.75pt 0in 6.1pt;height:32.8pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'>&nbsp;</p>
  </td>
 </tr>
 <tr style='height:13.65pt'>
  <td width=283 valign=top style='width:212.1pt;border:none;background:#181717;
  padding:0in 5.75pt 0in 6.1pt;height:13.65pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'>&nbsp;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:53.65pt;margin-bottom:
11.45pt;margin-left:.5pt'>If you press <b>–</b> PowerShell will begin deleting
characters from the command prompt and continue deleting characters until it
encounters a <b>–</b> character. In this case, that means the following
(nonsensical) command will be displayed:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-pro-name “Notepad”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>If you enter a character (say, <i>z</i>) which does
not appear in the command string then all the remaining characters in the
string will be deleted:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-pro</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>This also occurs if you simply press ENTER when the dialog
box appears.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>To cancel this operation, press Ctrl+Z.</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=626 height=55
src="PowerShell%20Owners%20Manual_files/image021.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-.05pt;margin-bottom:
22.5pt;margin-left:71.0pt;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=626 height=201
src="PowerShell%20Owners%20Manual_files/image022.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Scroll through the dialog box using the Up and Down arrow
keys; when you find a command you want to execute press ENTER. Alternatively,
locate the desired command and then press the right arrow key; that will “type”
the command at the command prompt but will not execute that command. To execute
the command, you must press ENTER.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:72.5pt'>To dismiss the dialog box without selecting a command,
press Escape.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:1.0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:72.5pt'><span
style='font-size:10.0pt;line-height:107%'>F8</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:41.5pt;margin-bottom:
11.45pt;margin-left:72.5pt'><span style='position:relative;z-index:-1895812096'><span
style='left:0px;position:absolute;left:96px;top:-24px;width:626px;height:56px'><img
width=626 height=56 src="PowerShell%20Owners%20Manual_files/image023.gif"></span></span>Moves
backwards through the command history, but only displays commands matching text
you type at the command prompt. For example, suppose you type <b>set</b> and
then press F8. In that case (and using our sample command history) PowerShell
will only display the command <b>set-executionpolicy</b>. Why? Because that’s
the only command in the history that matches the string <b>set</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:72.5pt'>Now, type <b>cd</b> and press F8. This time around,
PowerShell will display the command <b>cd c:\windows</b>. Press F8 a second
time and the command <b>cd c:\scripts</b> will be displayed. That’s because, in
this case, we have two commands that match the string <b>cd</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:1.0in;text-indent:0in;line-height:107%'> </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:72.5pt'><span
style='font-size:10.0pt;line-height:107%'>F9</span></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:72.5pt'><span style='position:relative;z-index:-1895811072'><span
style='left:0px;position:absolute;left:95px;top:-25px;width:626px;height:56px'><img
width=626 height=56 src="PowerShell%20Owners%20Manual_files/image024.gif"></span></span>Enables
you to run a specific command from the command history. When you press F9
PowerShell prompts you to enter a command number, corresponding to the numbers
displayed in the history “dialog box” (see <b>F7</b>):</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=257
 style='width:193.0pt;margin-left:72.65pt;border-collapse:collapse'>
 <tr style='height:32.8pt'>
  <td width=239 style='width:178.9pt;border:solid #181717 1.0pt;background:
  #FFFEFD;padding:0in 5.75pt 0in 5.65pt;height:32.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:11.0pt;line-height:107%;font-family:"Lucida Console"'>Enter
  command number:</span></p>
  </td>
  <td width=19 rowspan=2 valign=top style='width:14.1pt;background:#181717;
  padding:0in 5.75pt 0in 5.65pt;height:32.8pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'>&nbsp;</p>
  </td>
 </tr>
 <tr style='height:13.65pt'>
  <td width=239 valign=top style='width:178.9pt;border:none;background:#181717;
  padding:0in 5.75pt 0in 5.65pt;height:13.65pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'>&nbsp;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>To run a command, type the appropriate number and press
ENTER. Using our sample history, typing 4 and pressing ENTER runs the command <b>get-process</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>To cancel this operation, press Escape.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection14>

<p class=MsoNormal style='margin-top:0in;margin-right:-19.9pt;margin-bottom:
27.25pt;margin-left:.5pt;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=327 height=223 id="Group 49637"
src="PowerShell%20Owners%20Manual_files/image025.gif"></span></p>

<h1 style='margin-left:.15pt'>Customizing the Console</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:303.95pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>When it came to automobiles,
Henry Ford once said that customers could have “any color they want. As long as
it’s black.” That’s why Henry Ford wasn’t allowed to design the console window
for Windows PowerShell.</span></i></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 30</span></h2>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:-.75pt;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>M</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:5.6pt;margin-bottom:0in;
margin-left:-.25pt'>any of you will find this hard to believe, but there was a
time – long, long ago </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:0in;text-indent:3.25pt'>– when people would get things and then use
those items <i>exactly as they got them</i>! That’s right: no customization, no
“tricking out,” no modding, no skinning, no nothing. You just took the thing
out of the box and used it the way nature – and the manufacturer – intended.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Yes, we know: barbaric.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Today, of course, things are very different. No one would
ever <i>dream</i> of using an off-the-shelf item in this day and age; instead,
everything needs to be personalized. And that might have some of you a bit
leery about trying Windows PowerShell. After all, if you can’t customize and
trick out this new software, well, then what’s the point in even using it in
the first place?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>If you happen to be one of those people, we have good news
for you: we’re not sure any of this qualifies as “tricking out,” but you <i>can</i>
custom-tailor Windows PowerShell to a surprising degree. Don’t like commands
named Get-ExecutionPolicy and SetAuthenticodeSignature? Fine; just create a new
alias and give these commands any name you want to give them. (See the <b>Aliases</b>
section of this Owner’s Manual.) Don’t like the default format PowerShell uses
when displaying information for a particular type of object? Fine; create your
own .PS1XML file and change the default format. Don’t like the way the Windows
PowerShell console looks? Fine; change the console size, change the console
fonts or colors, change pretty much whatever you want. It’s entirely up to you.
And, as it turns out, modifying the look of the console window is remarkably
easy.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As we all know, Windows PowerShell is practically brand-new,
cutting-edge technology; nevertheless, this new functionality is hosted within
the same console window that William Shakespeare used when writing <i>Hamlet</i>.
(That is, the same console window used by Cmd.exe.) We’re the first to admit
that there are some definite disadvantages to this. For one thing, don’t bother
trying to use Ctrl+C and Ctrl+V to copy and paste text inside the console
window; it’s not going to work. However, there is at least one <i>advantage</i>
to reusing the same shell as Cmd.exe: if you know how to modify the Cmd.exe
console then you already know how to modify the Windows PowerShell console.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>Point taken: what if you <i>don’t</i> know how to modify the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Cmd.exe console? That’s OK; in just a second we’ll </p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection15>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>show you how to use the GUI to modify the console window.
And then, just for the heck of it, we’ll show you some programmatic ways to
modify console properties. You say you don’t like the way your PowerShell
window looks? Then read on.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:2.2pt;
margin-left:72.5pt'>Let’s kick things off by showing you how to use the GUI to
modify the console window. (As a bonus, you can use this approach to modify
Cmd.exe as well as PowerShell.) To begin with, start Windows PowerShell.
(Always a good place to start.) When the PowerShell window appears, click the
icon in the upper left-hand corner and the click<b> Properties</b>. That will
bring up a dialog box that looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.25in;
margin-left:73.1pt;text-indent:0in;line-height:107%'><img width=386 height=472
id="Picture 2035" src="PowerShell%20Owners%20Manual_files/image026.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:100.2pt;
margin-left:72.5pt'>Recognize that? From here you can start clicking the
various tabs – and start modifying the console window – to your heart’s
content.</p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:148.45pt;text-align:center;text-indent:0in;
line-height:109%'><span style='font-size:18.0pt;line-height:109%;font-family:
"Calibri",sans-serif'>“</span><span style='font-size:18.0pt;line-height:109%'>Many
of you will find this hard to believe, but there was a time – long, long ago –
when people would get things and </span></p>

<h2 align=right style='margin-top:0in;margin-right:0in;margin-bottom:21.3pt;
margin-left:0in;text-align:right;text-indent:0in'><span style='font-size:18.0pt;
line-height:107%;font-weight:normal'>then use those items <i>exactly as they
got them</i>! </span><span style='font-size:18.0pt;line-height:107%;font-family:
"Calibri",sans-serif;font-weight:normal'>”</span></h2>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual --
31</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.7pt;margin-bottom:
6.0pt;margin-left:.5pt'>We’re not going to tell you how big or how colorful you
should make your console window; that’s up to you. However, we <i>will</i>
recommend that you click on the <b>Options</b> tab and select both <b>QuickEdit
Mode</b> and <b>Insert Mode</b>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.2pt;
margin-left:0in;text-indent:0in;line-height:107%'><img width=386 height=472
id="Picture 2073" src="PowerShell%20Owners%20Manual_files/image027.jpg"></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.6pt;margin-bottom:
11.45pt;margin-left:.5pt'>Why? Well, QuickEdit Mode enables you to use the
mouse to copy and paste within the PowerShell window. Assuming this mode is
enabled, you can copy something to the Clipboard by highlighting the text with
the mouse and then pressing ENTER; to paste text from the Clipboard, position
the cursor and then click the right-mouse button. Insert Mode, meanwhile,
enables you to insert text when typing. If Insert Mode is disabled then new
text that you type in will overwrite any existing text. (Give it a try and you’ll
see what we mean.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.55pt;margin-bottom:
11.45pt;margin-left:.5pt'><b>Tip</b>. Here’s something cool. Suppose you have a
PowerShell script, either a simple one that looks like this or a more
complicated example:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.55in;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>cd C:\Scripts Get-ChildItem
–recurse</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:67.3pt;margin-bottom:
11.45pt;margin-left:.5pt'>Now, suppose you’re looking at this script in Notepad
or on the Web. Highlight both lines, copy them, switch over to PowerShell and
paste in the script. PowerShell will go ahead and run all the commands: it will
change the working folder to C:\Scripts and then run the Get-ChildItem cmdlet.
The point of all that? You can paste in an entire script and PowerShell will
dutifully execute each line in turn; you do <i>not</i> have to paste a script
in line-by-line.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:45.35pt;
margin-left:-.25pt'>When you’re finished making all your changes click <b>OK</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;
margin-left:-.25pt;line-height:107%'><span style='font-family:"Calibri",sans-serif'>Windows
PowerShell Owner’s Manual -- 32</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.9pt;
margin-left:72.5pt'>Granted, it’s not quite modding or skinning. But at least
it’s something, right?</p>

<h3 style='margin-left:72.5pt'>Using a Script to Modify Console Properties</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Now, it’s great that we can start PowerShell and then use a
series of dialog boxes to modify the console window. However, we’re script
writers: we hate to do <i>anything</i> by hand if there’s a way to do it using
a script. So here’s the question: can we modify properties of the console
window programmatically?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>As it turns out, there are several properties of the
console window that are easy to modify using a script. (You can modify some of
the not-so-easy to modify properties as well, but because that involves making
changes to the registry we’ll skip those for now.) In particular, you can
easily change the console window colors (both the color of the window itself
and the color of the text); the console window title; and the size of the
window.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
So why would you <i>want</i> to programmatically change the properties of the
console window? Well, the truth is, maybe you don’t. On the other hand, suppose
you have multiple PowerShell sessions (or product-specific management shells)
running at the same time. (Something you not only <i>can</i> do but sooner or
later <i>will</i> do.) Changing the window title and/or changing the window
colors makes it much easier for you to differentiate between Session A, Session
B, and Session C. Likewise, modifying the window size helps ensure that your
data will fit just the way you need it to.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>The secret to programmatically modifying console properties
is to use the <b>Get-Host</b> cmdlet. Typically, Get-Host is used to display
information about PowerShell itself, particularly the version number and
regional information. For example, type <b>Get-Host</b> from the PowerShell
command prompt and you’ll get back information similar to this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Name             : ConsoleHost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Version          : 2.0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.85in;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>InstanceId       :
89c72fa7-c7f0-4766-8615-451990b15f70 UI               :
System.Management.Automation.Internal.Host.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>InternalHostUserInterface</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CurrentCulture   : en-US</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CurrentUICulture : en-US</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PrivateData      :
Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>IsUnspacePushed  : False</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Runspace         :
System.Management.Automation.Runspaces.LocalRunspace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.85pt;margin-bottom:
11.45pt;margin-left:72.5pt'>So what’s the big deal here? The big deal is the <b>UI</b>
property, which is actually a portal to a child object (which, as you can see
from the output above, is derived from the .NET Framework class
System.Management.Automation.Internal.Host. InternalHostUserInterface). The UI
object, in turn, has a property named <b>RawUI</b>, which gives us access to
console properties such as window colors and title. Take a look at what we get
back when we run the command <b>(Get-Host).UI.RawUI</b>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>ForegroundColor       : DarkYellow</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>BackgroundColor       : DarkMagenta</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CursorPosition        : 0,125</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>WindowPosition        : 0,76</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CursorSize            : 25</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>BufferSize            : 120,3000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>WindowSize            : 120,50</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>MaxWindowSize         : 120,82</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>MaxPhysicalWindowSize : 175,82</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>KeyAvailable          : False</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>WindowTitle           : Windows
PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Many of these properties can be changed using a script. <i>How</i>
can they be changed using a script? We were just about to show you.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:28.6pt;
margin-left:72.5pt'>But first, another question: Why the parentheses in the
command <b>(Get-Host).UI.RawUI</b>? Well, any time Windows PowerShell parses a
command, it performs operations in parentheses before it does anything else. In
this case, that means that PowerShell </p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual --
33</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection16>

<p class=MsoNormal style='margin-top:0in;margin-right:65.65pt;margin-bottom:
11.45pt;margin-left:.5pt'>is going to first run the Get-Host cmdlet and then,
after that command has completed, access the UI property of the returned object
and then access the RawUI property of the UI object (which happens to be yet
another object). The single line of code <b>(Get-Host).UI.RawUI</b> is
shorthand for the following:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = Get-Host</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b = $a.UI</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$c = $b.RawUI</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:63.0pt;margin-bottom:
11.45pt;margin-left:.5pt'>But who cares about the technical details, right?
Let’s do something fun, like change the background color and the foreground
(text) color of the console window. Here’s a three-line script that gives us
yellow text on a green background:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = (Get-Host).UI.RawUI</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a.BackgroundColor = “green”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
24.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a.ForegroundColor = “yellow”</span></p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:10.0pt;margin-right:78.9pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
After running the script you might want to call the <b>Clear-Host</b> function
(or its alias, <b>cls</b>) in order to “refresh” the screen. Otherwise only
part of the window will feature yellow text on a red background.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:58.5pt;margin-bottom:
11.45pt;margin-left:.5pt'>As you can see, there isn’t much to the script. We
create an object reference (named $a) to the UI.RawUI object, and then we
simply assign new values to the <b>BackgroundColor</b> and <b>ForegroundColor</b>
properties. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:1.9pt;
margin-left:.5pt'>Speaking of which, here are the different colors available to
you:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=624
 style='width:468.2pt;margin-left:.5pt;border-collapse:collapse'>
 <tr style='height:17.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:17.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Black</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border:solid #181717 1.0pt;
  border-left:none;padding:4.0pt 5.75pt 0in 4.0pt;height:17.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Blue</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkBlue</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Green</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkGreen</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Cyan</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkCyan</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Red</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkMagenta</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Magenta</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkYellow</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Yellow</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Gray</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>White</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=264 valign=top style='width:198.2pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkGray</p>
  </td>
  <td width=360 valign=top style='width:3.75in;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>DarkRed</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Give it a try and see what happens. And yes, it <i>is</i> a
good idea to wear eye protection if you choose this color scheme.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>That was pretty cool, wasn’t it? Now, let’s see if we can
change the window title:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = (Get-Host).UI.RawUI</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a.WindowTitle = “My PowerShell
Session”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:54.35pt;margin-bottom:
0in;margin-left:.5pt'>Wow; that took just <i>two</i> lines of code. Again we
create an object reference to the UI.RawUI object. And then this time we assign
a new value to the <b>WindowTitle</b> property. The net result? This:</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><img
width=469 height=108 id="Picture 2256"
src="PowerShell%20Owners%20Manual_files/image028.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Let’s make one more little change before we call it a day:
let’s change the size of the console window itself. First let’s take a look at
the code, then we’ll explain how it all works: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = (Get-Host).UI.RawUI</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b = $a.WindowSize</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b.Width = 40</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b.Height = 10</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a.WindowSize = $b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>This is a tiny bit more complicated, simply because the <b>WindowSize</b>
property is yet another object. In our first line of code we once again create
a reference to the UI.RawUI object. We then grab the WindowSize property of
that object and assign it to a new object ($b). That’s what this line of code
is for:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b = $a.WindowSize</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>That gives us access to all the properties of WindowSize.
At this point we can go ahead and assign new values to two of these properties,
<b>Width</b> and <b>Height,</b> to $b. That’s what we do here:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b.Width = 40</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b.Height = 10</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>And then once we have $b’s properties configured we can go
ahead and assign $b (and its values) to the WindowSize property of $a:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a.WindowSize = $b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:4.55pt;
margin-left:72.5pt'>Granted, it’s not the most intuitive thing in the world.
But it works:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.5pt;
margin-left:74.2pt;text-indent:0in;line-height:107%'><img width=357 height=177
id="Picture 2302" src="PowerShell%20Owners%20Manual_files/image029.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:1.0in;text-indent:0in;line-height:107%'><b><span style='font-size:
11.0pt;line-height:107%'> </span></b></p>

<h4 style='margin-left:72.5pt'>Making the Changes (Semi) Permanent</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>So let’s assume you create the perfect console window: it’s
got the right colors and the right title, and the window is sized perfectly.
How can you make sure that you get these same settings each and every time you
run Windows PowerShell? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>Here’s one way: put the appropriate commands into your
PowerShell profile. To find out how to do that, take a look at the section <b>Windows
PowerShell Profiles</b> in this Owner’s Manual. Once you’ve put all the
commands you need into your profile, every time Windows PowerShell starts up
your console will look exactly the way you specified. </p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:.5pt;text-indent:0in;line-height:36.7pt'><span style='font-size:
  46.0pt;font-family:"Times New Roman",serif'>S</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:79.65pt;
margin-bottom:0in;margin-left:.5pt;text-align:center;text-indent:0in;
line-height:104%'><img width=327 height=89
src="PowerShell%20Owners%20Manual_files/image030.gif" align=left hspace=12>amuel
Clemens. Archibald Leach. Ramón Gerardo Antonio Estévez. William Sydney </p>

<p class=MsoNormal style='margin-top:0in;margin-right:78.05pt;margin-bottom:
11.45pt;margin-left:0in;text-indent:2.8pt'>Porter. The list goes on…. And
exactly what is this a list of? Well, as you might have figured out it’s a list
of given names of people who decided they didn’t want to (or couldn’t) become
famous with those names. Instead they took on new names, or aliases, to be more
easily identified and remembered. As it turns out, Windows PowerShell has
decided to join the other celebrities in utilizing aliases. How so? Read on.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:74.55pt;margin-bottom:
0in;margin-left:-.25pt'>It’s true that Windows PowerShell, before it became
Windows PowerShell, began life with a given name of Monad. It then briefly
tried out MSH (pronounced “mish”), and finally settled on the catchy,
rolls-smoothly-</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=624
 style='width:468.05pt;border-collapse:collapse'>
 <tr style='height:129.65pt'>
  <td width=351 valign=bottom style='width:262.9pt;padding:0in 0in 0in 0in;
  height:129.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>Windows 
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>PowerShell
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>Aliases</span></p>
  </td>
  <td width=274 valign=top style='width:205.15pt;padding:0in 0in 0in 0in;
  height:129.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>off-the-tongue,
  Windows PowerShell. Given that lifecycle you might think of Windows
  PowerShell as an alias. The problem is that if we call it that, the Microsoft
  lawyers will be very unhappy: it was a legal name change. Since we find it
  best not to make the lawyers unhappy, we won’t use the term “alias” to refer
  to Windows PowerShell. But we <i>will</i> use the term “alias” to talk about
  a certain renaming feature <i>within</i> PowerShell. These aliases serve the
  same purpose as the aliases we mentioned at the beginning of this article:
  they make certain things in Windows PowerShell easier to identify </p>
  </td>
 </tr>
</table>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection17>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:-.35pt;text-indent:5.35pt;line-height:103%'><i><span
style='font-size:12.0pt;line-height:103%;font-family:"Verdana",sans-serif'>So,
would you rather type something like <b>Get-AuthenticodeSignature</b> or would
you rather type something like <b>gas</b>? We had a feeling you’d say that.</span></i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:12.75pt;
margin-left:.5pt'>and remember. (Although in some cases, if you’re not careful,
an alias can be pretty effective at <i>hiding</i> an identity.)</p>

<h4 style='margin-left:-.25pt'>Aliases Defined</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Within PowerShell, an alias is another name assigned to a
cmdlet, function, script, executable, and so on. Just about anything you can
run from the PowerShell command prompt can have an alias assigned to it. We’ll
explain how this works and why you’d even care about this by first showing you
some of the aliases built-in to PowerShell. After that we’ll show you how to
make aliases of your own. And then, after we’ve covered that, we’ll show you
how to make sure the aliases you create stick around from one PowerShell
session to another.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:12.75pt;
margin-left:.5pt'>Are you ready for all that? Don’t worry, this will be easy.
Even easier than remembering who Norma Jeane Mortenson was.</p>

<h4 style='margin-left:-.25pt'>Built-In Aliases</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Windows PowerShell 2.0 ships with well over 100 builtin
aliases. You can find these aliases with the Get-Alias cmdlet:</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection18>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; get-alias</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType     Name        
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------     ----        
----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           %           
ForEach-Object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           ?           
Where-Object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           ac          
Add-Content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           asnp        
Add-PSSnapIn</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           cat         
Get-Content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           cd          
Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:96.5pt'>All the built-in aliases are simply short versions of
cmdlet names. For example, the alias for Get-Alias is gal:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; gal</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType     Name        
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------     ----        
----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           %           
ForEach-Object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           ?           
Where-Object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           ac          
Add-Content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           asnp        
Add-PSSnapIn</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           cat         
Get-Content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           cd          
Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           chdir       
Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           clc         
Clear-Content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           clear       
Clear-Host</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:96.5pt'>You can use these aliases alone, like we just did, or
anywhere within a command string where you’d use the cmdlet. For example,
here’s a command that retrieves the cmdlet associated with the alias ac:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; gal -name ac</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType     Name        
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------     ----        
----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           ac          
Add-Content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:96.5pt'>You can imagine how much typing this can save you in the
long run. Just to demonstrate, here’s a command that retrieves the five
smallest text files in the C:\ folder:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-childitem C:\*.txt |
sort-object -property length | select-object -last 5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:96.5pt'>Here’s that same command using built-in aliases:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:96.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>ls C:\*.txt | sort -property length
| select -last 5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:96.5pt'>That’s better.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:106.0pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
If you use shorthand for the parameters you can compact this even more:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'>ls
C:\*.txt | sort -p length | select -l 5</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'>But
keep in mind that parameter resolution is a completely different feature than
aliases. We’re not going to talk about parameters here. If this just confused
you, ignore this note and keep reading.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:68.25pt;margin-bottom:
1.9pt;margin-left:.5pt'>A lot of the aliases are built-in simply to give you a
quicker way to access cmdlets. However, some of them are there to make sure you
can do things such as navigate your way around the file system in the command
window by using familiar commands. For example, here are the commands you can
use to list the items in the current directory:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=625
 style='width:468.7pt;margin-left:.5pt;border-collapse:collapse'>
 <tr style='height:15.3pt'>
  <td width=287 valign=top style='width:215.1pt;border:solid #181717 1.0pt;
  border-right:none;background:#181717;padding:4.0pt 5.75pt 0in 4.0pt;
  height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='color:#FFFEFD'>Shell</span></b></p>
  </td>
  <td width=338 valign=top style='width:253.6pt;border:solid #181717 1.0pt;
  border-left:none;background:#181717;padding:4.0pt 5.75pt 0in 4.0pt;
  height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='color:#FFFEFD'>Command</span></b></p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=287 valign=top style='width:215.1pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>MS-DOS</p>
  </td>
  <td width=338 valign=top style='width:253.6pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Dir</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=287 valign=top style='width:215.1pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Unix</p>
  </td>
  <td width=338 valign=top style='width:253.6pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Ls</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=287 valign=top style='width:215.1pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Windows
  PowerShell</p>
  </td>
  <td width=338 valign=top style='width:253.6pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Get-ChildItem</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:67.25pt;margin-bottom:
13.95pt;margin-left:.5pt'>Admittedly, PowerShell’s commands sometime seem a
little cumbersome compared to the others. But with built-in aliases you can use
any of these commands in PowerShell (in addition to the alias gci) to retrieve
the contents of a folder.</p>

<h3 style='margin-left:-.25pt'>Finding Aliases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:64.9pt;margin-bottom:
11.45pt;margin-left:.5pt'>We already showed you how to get a list of all the
aliases available (the Get-Alias cmdlet). Here’s how to get a list of aliases
sorted by alias:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-alias | sort-object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>Want to sort by definition (the cmdlet, function, etc. that
the alias is an alias for)? Okay:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>get-alias | sort-object definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:-.25pt'>How about this: let’s retrieve the definition associated
with a given alias. We’ll try the cd alias:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; get-alias cd</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType     Name        
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------     ----        
----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
11.65pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           cd          
Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.5pt;margin-bottom:
10.35pt;margin-left:-.25pt'>This is all pretty simple, right? The next logical
step would be to find all the aliases associated with a given cmdlet (or
definition).  That’s pretty easy too:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; Get-Alias
-Definition Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>CommandType     Name        
Definition</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-----------     ----        
----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           cd          
Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           chdir       
Set-Location</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
15.25pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias           sl          
Set-Location</span></p>

<h3 style='margin-left:-.25pt'>Creating Aliases</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:67.8pt;margin-bottom:
11.45pt;margin-left:.5pt'>Okay, this is all very nice, but what if you don’t
like the built-in aliases? Or what if you want to set an alias for a function
that you’ve created? As it turns out, this is no problem at all. Simply use the
Set-Alias cmdlet. Suppose you want to retrieve the current date. You could do
that with the Get-Date cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; Get-Date</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Wednesday, September 16, 2009
3:47:56 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:92.5pt'>That’s simple enough, but let’s make it even simpler –
let’s set an alias for Get-Date: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias d Get-Date</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:92.5pt'>Logically enough, we use the Set-Alias cmdlet to create an
alias. We pass two parameters to this cmdlet: the new alias (d) and the cmdlet
being aliased (Get-Date). Let’s try it out:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>September 16, 2009 3:49:51 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:92.5pt'>The cmdlet works exactly the same, we just use an alias to
reference it. For example, you can pass parameters to the alias in the same way
you’d pass them to the cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; d -displayHint
date</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>September 16, 2009</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:92.5pt'>As you can see, we used the displayHint parameter of the
Get-Date cmdlet to display only the date portion of the date/time value, but we
used that parameter with the d alias.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:92.5pt'>You can also alias functions. Here’s a function that finds
the default printer on the local computer.:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>function FindDefaultPrinter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    Get-WMIObject –query “Select *
From Win32_Printer Where Default = TRUE”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:92.5pt'>To run this function, simply type the name of the function,
FindDefaultPrinter, at the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt;
FindDefaultPrinter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Location      : USA/REDMOND,
WA/42/FLOOR4/4032</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Name          : \\PRINTER1\HP
LaserJet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PrinterState  : 0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PrinterStatus : 3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>ShareName     : HP LaserJet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>SystemName    : \\PRINTER1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:92.5pt'>What’s that? FindDefaultPrinter is a big long name you
don’t want to type in every time you want to check for the default printer?
Okay, how about this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; dp</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Location      : USA/REDMOND,
WA/42/FLOOR4/4032</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Name          : \\PRINTER1\HP
LaserJet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PrinterState  : 0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PrinterStatus : 3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>ShareName     : HP LaserJet</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>SystemName    : \\PRINTER1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:92.5pt'>Will that work? Well, no, not unless you do this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:92.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias dp FindDefaultPrinter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:92.5pt'>Now it will work.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection19>

<p class=MsoNormal style='margin-top:0in;margin-right:66.05pt;margin-bottom:
11.45pt;margin-left:.5pt'>You can also alias executables. Want to start
Microsoft Excel from the command prompt? Why would you ever want to do that? Oh
well, that’s none of our business. But if you do, you could do it like this
(assuming you have the default installation for Excel 2007):</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
24.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>.”C:\Program Files\Microsoft
Office\Office12\Excel.exe”</span></p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:10.0pt;margin-right:77.15pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
The dot (.) is required. If you leave it out, PowerShell will just display the
path that’s within the quotes. Not exactly what we had in mind.</p>

</div>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Or you could simply alias the command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias excel “C:\Program
Files\Microsoft Office\Office12\Excel.exe”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Now all you have to type is this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>excel</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:12.7pt;
margin-left:.5pt'>It doesn’t get much easier than that.</p>

<h4 style='margin-left:-.25pt'>Keeping Aliases Around</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:57.25pt;margin-bottom:
10.35pt;margin-left:-.25pt'>You’ve now spent a significant amount of time
setting up all your aliases. Okay, maybe “significant” is exaggerating a
little, but nevertheless you did spend <i>some</i> time on this. And all system
administrators know exactly how valuable time is and how little we have to
waste, which is why we set up aliases in the first place. Now suppose you shut
down Windows PowerShell, move on to some other tasks, and later restart
PowerShell. Hmmm, let’s use our alias <b>d</b> to see what day it is today:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>The term ‘d’ is not recognized as a
cmdlet, function, operable program, or script file. Verify the term and try
again.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ d &lt;&lt;&lt;&lt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    + CategoryInfo          :
ObjectNotFound: (d:String) [], CommandNotFoundException</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    + FullyQualifiedErrorId :
CommandNotFoundException</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:54.75pt;margin-bottom:
11.45pt;margin-left:.5pt'>Wait a minute – didn’t we just set the alias d to
represent the cmdlet Get-Date? Yes, as a matter of fact we did. But then we
shut down Windows PowerShell. <i>Big</i> mistake. Don’t ever, ever, shut down
Windows PowerShell.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>Well, not unless you save your aliases first.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.3pt;margin-bottom:
10.35pt;margin-left:-.25pt'>There are two ways to do this. The first approach
is to export your aliases to a file. This is much easier than it might sound. That’s
because PowerShell makes it easy by providing the Export-Alias cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Export-Alias MyAliases.csv</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:57.25pt;margin-bottom:
16.35pt;margin-left:-.25pt'>You need to pass Export-Alias only one parameter
(although there are more parameters, which we’ll talk about in a moment): the name
of the text file that you want to save your aliases to. By default the file is
saved as a comma-separated values file (which is why we gave it a .csv file
extension, although you could also simply give it a .txt file extension).</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.25pt;margin-right:6.6pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.55pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>:
If you don’t want the file saved to the current path, you must specify the full
path to the file:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:48.95pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>Export-Alias
C:\Files\MyAliases.csv</span></p>

</div>

<h5 style='margin-left:-.25pt'>Windows PowerShell Owner’s Manual -- 0</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:11.7pt;
margin-left:72.5pt'>This command will export all aliases – user-defined and
built-in – to the given file. Keep that in mind, because that could be a bit of
a nuisance. We’ll show you that in a moment, too. But first, let’s talk about
what we need to do with these aliases now that we’ve exported them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>As we mentioned, when you close your PowerShell session all
the aliases you defined will disappear. That means that the next time you open
PowerShell, you’ll need to redefine all your aliases. However, if you exported
them to a file first, you can simply import them back into your session and all
your aliases will be back. You do that with the Import-Alias cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Import-Alias MyAliases.csv</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>Simply pass the name of the file that contains your
exported aliases (including the full path if the file isn’t in the current
directory) to the Import-Alias cmdlet. Now you can use any of the aliases you
had defined before the import.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>What’s that? You tried this and got a big long list of
errors? A list like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Import-Alias : Alias not allowed
because an alias with the name ‘ac’ already exists.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:13</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ Import-Alias  &lt;&lt;&lt;&lt;
MyAliases.csv Import-Alias : Alias not allowed because an alias with the name
‘asnp’ already exists.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:13</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.5pt;margin-bottom:.15pt;
margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;line-height:
109%;font-family:"Courier New"'>+ Import-Alias  &lt;&lt;&lt;&lt; MyAliases.csv
Import-Alias : Alias not allowed because an alias with the name ‘clc’ already
exists.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:13</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ Import-Alias  &lt;&lt;&lt;&lt;
MyAliases.csv</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>First of all, don’t worry: your aliases are still there,
and if you try one you’ll see that the import succeeded and your aliases will work
just fine. So why all the errors? Remember when we said Export-Alias will
export <i>all</i> aliases, user-defined and built-in? Well, the user-defined
aliases were wiped out when you closed PowerShell, but the built-in aliases
weren’t. That means that, when you run Import-Alias, all those built-in aliases
that were exported will be re-imported. And that’s a problem, because you can’t
overwrite existing aliases. Make sense? On the one hand these errors don’t hurt
anything, they simply inform you that you can’t import a built-in alias because
it already exists. On the other hand, who wants to see all those error messages
every time they import the file? Not us, that’s for sure. But don’t worry,
there’s something you can do about it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:72.5pt'>One simple thing you can do is edit the alias file after
you export it. Your exported file will look something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Alias File</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Exported by : kenmyer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Date/Time : Wednesday, September
16, 2009 6:58:03 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Machine : ATL-FS-01</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“ac”,”Add-Content”,””,”ReadOnly,
AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“asnp”,”Add-PSSnapIn”,””,”ReadOnly,
AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“clc”,”Clear-Content”,””,”ReadOnly,
AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“cli”,”Clear-Item”,””,”ReadOnly,
AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“clp”,”Clear-ItemProperty”,””,”ReadOnly,
AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“clv”,”Clear-Variable”,””,”ReadOnly,
AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.35pt;
margin-left:72.5pt'>Simply delete all the references to built-in aliases. Don’t
worry, this isn’t hard to do: all the built-in aliases are listed first; your
custom aliases are all at the bottom of the file:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“set”,”Set-Variable”,””,”AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“type”,”Get-Content”,””,”AllScope”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“d”,”get-date”,””,”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“dp”,”FindDefaultPrinter”,””,”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
28.05pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“excel”,”C:\Program Files\Microsoft
Office\Office12\Excel.exe”,””,”None”</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- 1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>See those last three, <i>d</i>, <i>dp</i>, and <i>excel</i>?
Those are the aliases we added earlier. They’ll always be at the bottom.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.0pt;margin-bottom:
11.7pt;margin-left:-.25pt'>The other thing you can do is add specific aliases
to the file rather than doing a global export. You do this by passing a second parameter
to Export-Alias, the name of the alias you want to export:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Export-Alias MyAliases.csv d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:-.25pt'>Here we’ve passed the alias d, which we set up for
Get-Date. Here’s what our alias file looks like now:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Alias File</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Exported by : kenmyer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Date/Time : Wednesday, September
16, 2009 6:58:03 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Machine : ATL-FS-01</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“d”,”get-date”,””,”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:65.3pt;margin-bottom:
10.35pt;margin-left:-.25pt'>Here’s something important to know: every time you
call Export-Alias, the current file is overwritten. That means that if you now call
Export-Alias to export a different alias, d will be gone and will be replaced
by the new alias. Like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Export-Alias MyAliases.csv dp</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Alias File</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Exported by : kenmyer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Date/Time : Wednesday, September
16, 2009 6:58:03 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Machine : ATL-FS-01</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“dp”,”FindDefaultPrinter”,””,”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.75pt;margin-bottom:
11.45pt;margin-left:.5pt'>But wait, here’s something even <i>more</i> important
to know: you can pass another parameter to Export-Alias to make sure the new
aliases are appended rather than overwritten:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Export-Alias MyAliases.csv d
–append</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Here’s what we have now:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Alias File</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Exported by : kenmyer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Date/Time : Wednesday, September
16, 2009 6:58:03 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Machine : ATL-FS-01</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“dp”,”FindDefaultPrinter”,””,”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Alias File</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Exported by : kenmyer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Date/Time : Wednesday, September
16, 2009 6:58:03 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Machine : ATL-FS-01</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“d”,”get-date”,””,”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:49.05pt;margin-bottom:
11.45pt;margin-left:.5pt'>Granted, this file could still use some cleanup, but
you don’t <i>have</i> to clean it up. (Although, if you want to, it’s easy
enough to do.) Either way, you won’t get any more error messages.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:54.5pt;margin-bottom:
11.45pt;margin-left:.5pt'>Note that exporting and importing aliases isn’t just
handy for keeping aliases from one session of PowerShell to the next; you can also
copy the exported file to different machines and import them into the instance
of PowerShell on those machines. Nice, huh?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:60.8pt;margin-bottom:
0in;margin-left:.5pt'>We mentioned that, by default, exported aliases are saved
to a comma-separated values (csv) file. That’s nice, but suppose, instead of
repeatedly importing aliases, you want to run a script that will run the
Set-Alias commands to re-create your aliases? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>Well, you’re in luck, because the Export-Alias cmdlet has a
parameter named –As that lets you specify the output as a script file:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
32.25pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Export-Alias -As script
MyAliases.ps1 d</span></p>

<h5 style='margin-left:-.25pt'>Windows PowerShell Owner’s Manual -- 2</h5>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.35pt;
margin-left:72.7pt'>Here we’ve called the Export-Alias cmdlet with the –As
parameter, followed by the value “script”. We then pass the name of the file
we’re exporting to, this time giving it a .ps1 extension (the file extension
for PowerShell scripts), and the alias (d) that we want to export. When we open
the MyAliases.ps1 file, this is what we see:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Alias File</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Exported by : kenmyer</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Date/Time : Wednesday, September
16, 2009 7:21:50 PM</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:100.1pt;margin-bottom:
12.85pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'># Machine : ATL-FS-01 set-alias
-Name:”d” -Value:”get-date” -Description:”” -Option:”None”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.7pt'>Notice that the command isn’t exactly the same as what we
typed to the command line to set the alias. Export-Alias doesn’t look back into
your history to see what aliases were set, it simply looks at the available
aliases (or the specified aliases, such as, in this case, d) and creates a
Set-Alias command that would re-create that alias.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.7pt'>The next time you close Windows PowerShell and then reopen
it, you can type this at the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; . .\MyAliases.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.7pt'>This runs the script, which includes the Set-Alias
statement. Now when you type d at the command prompt, you get the output from
Get-Date, the  cmdlet that our alias refers to.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
The extra dot (.) in front of the path isn’t a mistake. If you don’t include
that, the Set-Alias statement will run, but the results won’t be saved to the
current instance of Windows PowerShell. Confused? Read the part about running
scripts in the “Introduction to Scripting” section of this Owner’s Manual.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.7pt'>Now, at first glance this might seem like more trouble – or
at least not any simpler – than saving aliases to a .csv file and running the
Import-Alias cmdlet. However, there’s one more thing you can do to keep your
aliases from one PowerShell session to another. Simply add the Set-Alias
commands (the ones that you generated using the –As Script parameter) to your
Windows PowerShell profile and your aliases will be available every time you
start PowerShell, without having to importing aliases or manually run scripts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.55pt;
margin-left:72.7pt'>We won’t go into detail on profiles here, to learn more see
the Owner’s Manual topic on Windows PowerShell Profiles. We’ll just show you
quickly how simple it is to add the aliases to your profile.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:82.2pt;margin-right:13.2pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
The example we’ll be showing you works with the profile with a scope of current
user, current host. There are other profiles you can work with, which are
explained in the “Windows PowerShell Profiles” section of this Owner’s Manual.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:72.7pt'>Start by opening your profile in Notepad, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>notepad $profile</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:72.7pt'>Now just enter your Set-Alias commands (and any necessary
functions) into your profile:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias d Get-Date</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>function FindDefaultPrinter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>{</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    Get-WMIObject –query “Select *
From Win32_Printer Where Default = TRUE”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias dp FindDefaultPrinter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
50.25pt;margin-left:72.7pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias excel “C:\Program
Files\Microsoft Office\Office12\Excel.exe”</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- 3</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection20>

<p class=MsoNormal style='margin-top:0in;margin-right:88.2pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Save the profile, close it, close Windows
PowerShell, then open PowerShell again. Try out any of the aliases we just
saved – they’ll all work. Every time, no extra steps involved.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.9pt;
margin-left:.5pt'>How easy was <i>that</i>?!</p>

<h3 style='margin-left:-.25pt'>Alias Restrictions</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:68.65pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Here a couple things you <i>can’t</i> do with
aliases. One is that you can’t alias a cmdlet with specific parameters. For
example, say you use this command a lot:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Location C:\Scripts\old</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>If so, it might be useful to you to create an alias to this
command. Let’s give it a try:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias toOld (Set-Location
C:\Scripts\old)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Will this work? Nope. Here’s what you get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias : Cannot bind argument to
parameter ‘Value’ because it is null.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:10</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ Set-Alias &lt;&lt;&lt;&lt;  toOld
(Set-Location c:\scripts\old)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    + CategoryInfo          :
InvalidData: (:) [Set-Alias], </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>ParameterBindingValidationException</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    + FullyQualifiedErrorId :
ParameterArgumentValidationErrorNullNotAllowed,Microsoft.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PowerShell.Commands.SetAliasCommand</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>If you want to do something like this, you need to put the
cmdlet in a function, then alias the function:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>function toOld{Set-Location
C:\Scripts\Old}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Now you can either call the function toOld, or you can alias
the function:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>set-alias to toOld</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'><i>Now</i> typing either <i>toOld</i> or <i>to</i> will
take you to the C:\Scripts\Old folder.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>You also can’t alias a pipelined command. Try this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Alias as (Get-Alias |
Sort-Object)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.3pt;margin-bottom:
13.95pt;margin-left:.5pt'>It didn’t work, did it? Again, you can put the
command in a function and then set an alias, but you can’t directly alias a
pipelined command.</p>

<h3 style='margin-left:-.25pt'>The End</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:70.5pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Oh, and in case you haven’t figured it out yet, the
names we mentioned at the beginning of this article belong to Mark Twain, Cary
Grant, Martin Sheen, and O. Henry. Makes us wonder if we should give ourselves
an alias….</p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:62.0pt;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>Y</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:62.5pt'><img width=327 height=1
src="PowerShell%20Owners%20Manual_files/image031.gif" align=left hspace=12>ou
must admit, Windows PowerShell has a great profile. You hadn’t noticed? Start
Windows PowerShell and stand to the side of your monitor. See it now? True, you
can’t see much of anything on the monitor anymore, but you must be able to see
that Windows PowerShell looks great from the side. Title bar not too big,
coloring about right, smooth face…yep, Windows PowerShell has a great profile.
You don’t see any of the slight imperfections you might see while looking at it
headon.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:62.5pt'>So why would we want to mess with something like that?
Well, we wouldn’t. Instead we’re going to explain how to set up and change a
different type of profile, a profile that gives you a tremendous amount of
control over your Windows </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=641
 style='width:480.55pt;margin-left:61.5pt;border-collapse:collapse'>
 <tr style='height:131.8pt'>
  <td width=347 valign=bottom style='width:260.1pt;padding:0in 0in 0in 0in;
  height:131.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>Windows 
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>PowerShell
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:36.0pt;line-height:107%;font-family:"Trebuchet MS",sans-serif'>Profiles</span></p>
  </td>
  <td width=294 valign=top style='width:220.45pt;padding:0in 0in 0in 0in;
  height:131.8pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.0pt;
  margin-left:0in;text-indent:0in;line-height:104%'>PowerShell experience. This
  profile will help you smooth out some of those head-on imperfections – sorry,
  <i>beauty marks</i> – you might have noticed.</p>
  <p class=MsoNormal style='margin-top:0in;margin-right:.9pt;margin-bottom:
  .2in;margin-left:0in;text-indent:0in;line-height:104%'>Before we get started,
  stop staring at the side of your monitor and sit back down in front of it.
  Sorry, but it really will be easier to follow along this way.</p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
  margin-left:0in;text-indent:0in;line-height:107%'><b><span style='font-size:
  12.0pt;line-height:107%'>The Profile</span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>So
  what is this profile we’re talking about? In the simplest </p>
  </td>
 </tr>
</table>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection21>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>It’s like an Autoexec.bat
file for  </span></i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>Windows PowerShell. Although
your Windows PowerShell profile can do things Autoexec.bat could only dream of
doing.</span></i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>sense, it’s a text file. A little less simple, it’s a
Windows PowerShell script file (a file with a .ps1 file extension). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>So what makes this a profile rather than just a script file? Location,
location, location. And name. And – well, we’ll get to all that in a moment.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.95pt;
margin-left:.5pt'>The Windows PowerShell profile is simply a script file that runs
when Windows PowerShell starts up. You can put cmdlets, scripts, functions –
any valid Windows PowerShell commands – into this script file. Each time you
start Windows PowerShell, this script file will run. That means you can use the
profile to set up your Windows PowerShell environment. Typically that would be
custom console settings and aliases, but use your imagination and you can come
up with other things you’d like to customize in PowerShell before you start
working with it.</p>

<h3 style='margin-left:-.25pt'>Finding the Profile</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>We mentioned location (three times, which should give you some
idea how important that is). What makes the profile a profile and not a regular
script file is the name and location of the file. Type this at your PowerShell
command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$profile</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection22>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>On Windows Vista and Windows Server 2008 that built-in
variable will return something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>C:\Users\kenmyer\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:69.6pt;margin-bottom:
13.95pt;margin-left:-.25pt'>This is the full path to the file Windows
PowerShell will try to run when it starts.  Notice we said “try” to run. Here’s
an interesting fact: just because you were able to find the profile doesn’t
mean it actually exists. $profile is simply a built-in variable that contains
the full path to where the profile will be if there is one; the file doesn’t
actually have to exist, and by default it doesn’t. If you want a profile to run
when you start Windows PowerShell, you need to create this file.</p>

<h3 style='margin-left:-.25pt'>Profile Scope</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:66.45pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Before we create our profile, we should point out
that Windows PowerShell (as of version 2.0) actually recognizes multiple
profiles. The profile we already showed you (you know, the one with a path
stored in the $profile variable – did you forget already?) applies to the
current user and current host. Notice in the example path we gave that the path
starts out with Users\ kenmyer. When you set this profile, it runs only when
keymyer is the logged-on user. That means each user of a computer can have a unique
profile.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:65.05pt;margin-bottom:
11.7pt;margin-left:-.25pt'>There are also machine-specific profiles: these
profiles will run for all users on a given machine. In addition, profiles can
be created for specific hosts, meaning third-party PowerShell hosts can have
their own profiles. If multiple profiles exist, user profiles take precedence.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.9pt;
margin-left:-.25pt'>Here’s a list of profiles and their locations:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=623
 style='width:467.5pt;margin-left:.5pt;border-collapse:collapse'>
 <tr style='height:15.3pt'>
  <td width=171 valign=top style='width:128.55pt;border:solid #181717 1.0pt;
  border-right:none;background:#181717;padding:4.0pt 5.75pt 0in 4.0pt;
  height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='color:#FFFEFD'>Scope</span></b></p>
  </td>
  <td width=159 valign=top style='width:119.35pt;border-top:solid #181717 1.0pt;
  border-left:none;border-bottom:solid #181717 1.0pt;border-right:none;
  background:#181717;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='color:#FFFEFD'>Variable</span></b></p>
  </td>
  <td width=293 valign=top style='width:219.65pt;border:solid #181717 1.0pt;
  border-left:none;background:#181717;padding:4.0pt 5.75pt 0in 4.0pt;
  height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='color:#FFFEFD'>Path</span></b></p>
  </td>
 </tr>
 <tr style='height:27.3pt'>
  <td width=171 valign=top style='width:128.55pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:27.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Current
  User, Current Host</p>
  </td>
  <td width=159 valign=top style='width:119.35pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:27.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$profile</p>
  </td>
  <td width=293 valign=top style='width:219.65pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:27.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$home\Documents\WindowsPowerShell\Microsoft.</p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>PowerShell_profile.ps1</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=171 valign=top style='width:128.55pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Current
  User, All Hosts</p>
  </td>
  <td width=159 valign=top style='width:119.35pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$profile.CurrentUserAllHosts</p>
  </td>
  <td width=293 valign=top style='width:219.65pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$home\Documents\WindowsPowerShell\profile.ps1</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=171 valign=top style='width:128.55pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>All
  Users, Current Host</p>
  </td>
  <td width=159 valign=top style='width:119.35pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$profile.AllUsersCurrentHost</p>
  </td>
  <td width=293 valign=top style='width:219.65pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$pshome\Microsoft.PowerShell_profile.ps1</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=171 valign=top style='width:128.55pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>All
  Users, All Hosts</p>
  </td>
  <td width=159 valign=top style='width:119.35pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$profile.AllUserAllHosts</p>
  </td>
  <td width=293 valign=top style='width:219.65pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>$pshome\profile.ps1</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:70.5pt;margin-bottom:
13.95pt;margin-left:-.25pt'>For the rest of this discussion we’re going to keep
things simple and work only with the current user, current host profile
($profile). But everything we talk about applies to all of these profiles.</p>

<h3 style='margin-left:-.25pt'>Creating a Profile</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:-.25pt'>Before we decide to create a profile, let’s check to see
whether we already have one:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Test-Path $profile</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.4pt;margin-bottom:
11.7pt;margin-left:-.25pt'>If the profile exists this command will return True;
if it doesn’t exist, the command will return False. If this command returns
False, you need to create the profile.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>Creating a profile in Windows XP is really easy. Simply
type this at the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>notepad $profile</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:73.85pt;margin-bottom:
11.7pt;margin-left:-.25pt'>This command opens the profile in Notepad. If the
profile doesn’t exist, you’ll be prompted to create it. If you choose Yes, the
file will be created for you and will be opened in Notepad. Remember, though,
we said this is for Windows XP. If you’re running Windows Vista or Windows
Server 2008 things get a little more complicated. (But just a little bit, not
very much.) If the full path to this file doesn’t exist, trying to open it in
Notepad will return an error; you won’t receive any prompts and the file won’t
be created for you.  The way to create this file in Windows Vista and Windows
Server 2008 (and which will also work in Windows XP) is to use the New-Item
cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>New-Item -path $profile -type file
–force</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>We pass three parameters to New-Item:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.7pt;
margin-left:1.5in;text-indent:-16.0pt'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>-path
$profile. </b>We’re passing the full path, stored in the $profile variable, of
the item we want to create.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.7pt;
margin-left:1.5in;text-indent:-16.0pt'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>-type
file. </b>This tells New-Item what type of item we’re creating, in this case a
file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:1.5in;text-indent:-16.0pt'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>-force.
</b>This parameter tells New-Item to create the full path and file no matter
what.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:72.5pt'><i>Now</i> you can open the profile and take a look:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>notepad $profile</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:72.5pt'>And what will you see? Notepad:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.7pt;
margin-left:72.45pt;text-indent:0in;line-height:107%'><img width=543
height=344 id="Picture 3020"
src="PowerShell%20Owners%20Manual_files/image032.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:72.5pt;line-height:107%'><b><span style='font-size:12.0pt;
line-height:107%'>What Goes in the Profile?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.5pt;margin-bottom:11.45pt;
margin-left:72.5pt'>There are a lot of different things you can put in your
profile. We’re going to do just a couple of simple things to show you how it
works. You might notice when you start Windows PowerShell that you always start
out in the same folder. For example, on Windows Vista, by default, you start in
your user folder:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Users\kenmyer&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>Well, as it turns out this isn’t the folder you usually
work in; maybe you usually work in your C:\Scripts folder. So every single time
you start Windows PowerShell the first thing you have to do is change
directories to the C:\Scripts folder. Not a big deal, but kind of a hassle.
Well, why not just set up your profile to start you out in the C:\Scripts
folder in the first place? Give this a try:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>If your profile isn’t open, open it now. (Remember, we just
showed you how to do that.) Inside your profile type this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-Location C:\Scripts</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>Save the profile and close Windows PowerShell. Now open
PowerShell again. Voila!</p>

<p class=MsoNormal style='margin-top:0in;margin-right:63.15pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Now every time you open PowerShell, you’ll go
straight to your C:\Scripts folder. You can also do things such as set aliases
and run functions. Not only that, but it’s simple to set up all these things on
other computers; simply copy the commands from your profile to the profile on
the other machine.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.9pt;margin-bottom:
13.95pt;margin-left:-.25pt'>For an example of other things you can do with
profiles, take a look at <b>Customizing the Windows PowerShell Console</b> in
this Owner’s Manual.</p>

<h3 style='margin-left:-.25pt'>Wait, My Profile Didn’t Run</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:58.7pt;margin-bottom:
11.45pt;margin-left:.5pt'>What’s that? You say you opened a new instance of
Windows PowerShell and all you got was an error message? You mean an error
message like this?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:63.85pt;margin-bottom:
12.8pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>File
C:\Users\kenmyer\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
cannot be loaded because the execution of scripts is disabled on this system.
Please see “get-help about_signing” for more details.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:61.05pt;margin-bottom:
11.45pt;margin-left:.5pt'>There’s a very good explanation for this: you haven’t
set your execution policy. We talk a little more about this in the <b>Introduction
to Scripting</b> section of this Owner’s Manual, but here’s a quick
explanation.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:69.6pt;margin-bottom:
11.7pt;margin-left:-.25pt'>By default, Windows PowerShell does not allow
scripts to run within the console window. And, since the profile is nothing
more than a script file that runs automatically when PowerShell starts up, the
profile can’t run. In order to allow your profile to run you need to set your
execution policy to a level that allows scripts to run. First, check your
execution policy by typing this cmdlet at the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-ExecutionPolicy</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:32.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>By default this will return a value of Restricted. To
allow scripts to run, use the Set-ExecutionPolicy cmdlet to change the policy
to something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-ExecutionPolicy Bypass</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:-.25pt'>Close your Windows PowerShell window and reopen it. Now
your profile should run just fine.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:62.75pt;margin-bottom:
11.7pt;margin-left:-.25pt'>Now if you’d like to go back to looking at Windows
PowerShell in profile, go right ahead. But you’ll probably find it much more
useful to remain head-on and work with the Windows PowerShell profile files.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection23>

<p class=MsoNormal style='margin-top:0in;margin-right:-24.25pt;margin-bottom:
20.05pt;margin-left:.5pt;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=327 height=377 id="Group 52517"
src="PowerShell%20Owners%20Manual_files/image033.gif"></span></p>

<h1 style='margin-left:.15pt'>Scripting</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:.15pt;line-height:103%'><i><span style='font-size:12.0pt;
line-height:103%;font-family:"Verdana",sans-serif'>Need to perform the same
Windows Powershell task over and over and over again? Ever thought about
putting the commands for carrying out this task into a script?</span></i></p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>I</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>n this world there’s always something to be glad about. (Hey,
it’s true – just ask Pollyanna.) For example, system administration can
sometimes be </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>a complicated job that requires a lot of time and effort. But
we can all be glad that we have Windows PowerShell to make the job easier.
Sometimes PowerShell requires that you type a lot of information to the command
line. But we can be glad we have shortcuts (see <b>Windows PowerShell Shortcuts</b>)
and aliases (see <b>Windows PowerShell Aliases</b>) to make this quicker and
simpler. And we can be especially glad that we have Windows PowerShell scripts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Suppose you find yourself typing the same commands over and
over practically every time you start up Windows PowerShell. Wouldn’t it be
much easier to simply type a file name to the command prompt than to retype
this possibly long and complicated command over and over? Of course it would.
Or suppose you want to schedule a command to run at a particular time. You
can’t always be there are 2:00 AM to type in the command, but with a script you
can schedule the command. Or, as another example, maybe you have a long series
of commands that need to be run in sequence and perform a somewhat complicated
set of actions. A script will make this a very simple task to accomplish.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.95pt;
margin-left:.5pt'>In this section we’re going to explain everything you need to
know to get started writing scripts in Windows PowerShell. But before we start
writing scripts, you need to know how some of the pieces work.</p>

<h2 style='margin-left:-.25pt'>Objects, Properties, and Variables</h2>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:0in;margin-left:-.25pt'><span
style='font-size:10.0pt;line-height:107%;font-weight:normal'>If you read the </span><span
style='font-size:10.0pt;line-height:107%'>Getting Started with Windows </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'><b>PowerShell</b> section of this Owner’s Manual you know (or
at least you should know) that cmdlets are the heart and soul of Windows
PowerShell. What we didn’t tell you – because you were just getting started we
didn’t want to scare you away – was that there’s a basic principal of software
development that lies behind the workings of every cmdlet: the object.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Hang on, don’t go yet. Yes, we said “software development,”
and you’re not a software developer, you’re a system administrator. Big
difference, whole different skill set, we know. But don’t worry, you don’t need
to be a developer to work with PowerShell (that would kind of defeat the whole
purpose, wouldn’t it?), and you don’t need to be a developer to understand
objects. But as a system administrator who’s going to be working with Windows
PowerShell, objects are a very useful thing to know about.</p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection24>

<p class=MsoNormal style='margin-top:0in;margin-right:69.3pt;margin-bottom:
11.45pt;margin-left:.5pt'>So your first question is probably ”Why do I need to
know about objects?” (Either that or “What is an object?”, but we’re sure you’ll
quickly get around to the “Why do I care?” question.) If we do our jobs right
(which is never a guarantee, but in this case we’ll try), the reason you need
to know will become clear as you read through this. As to what an object is,
well, that’s easy: an object is a thing.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>See, that was painless, wasn’t it?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:59.3pt;margin-bottom:
11.45pt;margin-left:.5pt'>What? What kind of thing? Well…anything. A boat is an
object. A chair is an object. A donut is an object. (Mmmm, donuts.) A process
is an object. A shoe is an object. A –</p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.85pt;margin-bottom:
1.45pt;margin-left:.5pt'>Huh? Yes, as a matter of fact we <i>did</i> say that a
process is an object. Okay, let’s start over. We’ll start with the chair. (We’d
start with the donut, but some of us tend to lose our focus when donuts are
mentioned.) A chair is an object – it’s a thing that exists and has various
qualities. Take a look at our chair:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:18.7pt;
margin-left:1.95pt;text-indent:0in;line-height:107%'><span style='font-size:
11.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:black'><img
width=200 height=206 id="Group 56925"
src="PowerShell%20Owners%20Manual_files/image034.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:53.9pt;margin-bottom:
1.9pt;margin-left:.5pt'>As we mentioned, an object has various qualities. Let’s
look at some of the qualities of this chair: it has a color; it has arms; it
has feet; it has a cushion; it has a back. These are all qualities that you can
use to identify this particular chair, like this:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=321
 style='width:240.55pt;margin-left:.5pt;border-collapse:collapse'>
 <tr style='height:15.3pt'>
  <td width=175 valign=top style='width:131.05pt;border:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Color</p>
  </td>
  <td width=146 valign=top style='width:109.5pt;border:solid #181717 1.0pt;
  border-left:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Purple</p>
  </td>
 </tr>
 <tr style='height:17.55pt'>
  <td width=175 valign=top style='width:131.05pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:17.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Arms</p>
  </td>
  <td width=146 valign=top style='width:109.5pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:17.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>True</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=175 valign=top style='width:131.05pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Legs</p>
  </td>
  <td width=146 valign=top style='width:109.5pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>4</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=175 valign=top style='width:131.05pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Cushion</p>
  </td>
  <td width=146 valign=top style='width:109.5pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>True</p>
  </td>
 </tr>
 <tr style='height:15.3pt'>
  <td width=175 valign=top style='width:131.05pt;border:solid #181717 1.0pt;
  border-top:none;padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Back</p>
  </td>
  <td width=146 valign=top style='width:109.5pt;border-top:none;border-left:
  none;border-bottom:solid #181717 1.0pt;border-right:solid #181717 1.0pt;
  padding:4.0pt 5.75pt 0in 4.0pt;height:15.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>True</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:72.85pt;margin-bottom:
11.45pt;margin-left:.5pt'>In the world of computers, these qualities are known
as <i>properties</i>. For this particular chair, the Color property has a value
of Purple. You might prefer to choose a chair with a color property of Green. A
chair either has arms or it doesn’t: this chair does, so the Arms property is
True.  Some stools have only three legs, while some rolling chairs don’t
actually have legs, they have wheels. Our chair has four legs, so our Legs
property has a value of 4.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:69.8pt;margin-bottom:
11.45pt;margin-left:.5pt'>Computers work the same way. A process is a thing: it
has qualities, or properties, that identify that particular process. Try
running the Get-Process cmdlet in Windows PowerShell. Run this from the command
prompt and press Enter:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
105.1pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process</span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 0</span></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>Depending on the processes running on your computer, you’ll
get output similar to the following:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Handles  NPM(K)    PM(K)      WS(K)
VM(M)   CPU(s)     Id ProcessName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-------  ------    -----      -----
-----   ------     -- -----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     71       3     1640      
5544    52     0.08   2276 AcroBroker</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     27       1      376      
1616    11            1136 AEADISRV</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     38       2      732      
2348    21            1332 agrsmsvc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     57       3     1480      
4944    53     0.06   3472 apdproxy</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    105       3     1100      
4108    37            1172 Ati2evxx</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    137       4     1820      
6216    42            1636 Ati2evxx</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    111       4    11812     
14520    43            1352 audiodg</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    314      12    22684      
3536   158     0.48   2824 CCC</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    517      19    33476     
11236   198     2.37   4400 CCC</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>   1066      16    38848     
50692   148            2956 CcmExec</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>   1219      27    34580     
49268   250    24.94   3936 communicator</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    723       6     1752      
5528    86             560 csrss</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>The output shows you some of the properties of a process.
For example, you can see that each process has a Name. The first process in the
list has a Name of AcroBroker. A process also has an Id; here the first process
in the list has an Id of 2276. And so on.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>We’ve seen in other parts of this Owner’s Manual that you
can find objects based on specific properties by using cmdlet parameters. For
example, if you want to find the process with the Id 2824 you’d type this at
the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Process –Id 2340</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>And, at least on our test machine, this is what we got
back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Handles  NPM(K)    PM(K)      WS(K)
VM(M)   CPU(s)     Id ProcessName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-------  ------    -----      -----
-----   ------     -- -----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    125       5     5928      
9744    60            2340 svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Another way to work with properties is by assigning the
output of your commands to a variable. A variable is simply a place to save
data in memory so you can later manipulate that data. In Windows PowerShell,
all variables begin with a dollar sign ($). Let’s assign the results of our
Get-Process call to a variable we’ll call $p:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$p = Get-Process –Id 2340</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>The first thing you’ll notice when you run this command is
that you don’t get any output. (Keep in mind you might not have a process with
Id 2340 on your computer. Run Get-Process and choose an Id that will work on
your computer.) That’s because, instead of going to the display, all the
information about this process object has been stored in the variable $p. How
do we know this for sure? Just type this at the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$p</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>Surprise! There’s the output. Now let’s find out what the
name of this process is. To do that, we simply add a dot (.) plus the name of
the property to the end of our variable name, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$p.Name</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Type this at the command prompt and you’ll see the name of
the process with the Id 2340.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>You can also use variables for values other than objects.
For example, type this at the command prompt:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
29.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = 2 + 3</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- 1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Now type $a at the command prompt and press Enter. Here’s
what you’ll see:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>You can continue to use this variable for as long as this
Windows PowerShell session is open. Try this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; $b = 8</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; $b - $a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.9pt;
margin-left:.5pt'>Aren’t you glad we showed you that?</p>

<h2 style='margin-left:-.25pt'>Creating a Script</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:69.4pt;margin-bottom:
11.45pt;margin-left:.5pt'>Now that we have a general idea of how objects,
properties and variables work, let’s talk a little bit about actually creating
a script. A script in Windows PowerShell is simply a text file with a .ps1 file
extension. Let’s create our first script.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:51.0pt;margin-bottom:
0in;margin-left:.5pt'>Start by opening Notepad. (Simply type notepad.exe at the
PowerShell command prompt; or, from the Start menu, select All Programs,
Accessories, then select Notepad.)  You’ll have an empty Notepad window:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.75pt;
margin-left:0in;text-indent:0in;line-height:107%'><img width=543 height=344
id="Picture 3366" src="PowerShell%20Owners%20Manual_files/image035.jpg"></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.75pt;margin-bottom:
11.45pt;margin-left:.5pt'>All you need to do here is type in the commands you
would normally type at the command prompt. For example, type this into Notepad:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = Get-Process –Name svchost</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Write-Host “Here are all the
processes with the name svchost:”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:57.85pt;margin-bottom:
46.6pt;margin-left:.5pt'>Before you run this script you need to save it. Select
Save from the File menu (or press Ctrl+S). In the Save dialog box, enter the
name you’d like to save the script to. Before you select Save, however (you
didn’t just go ahead and try to save did you?), make sure you save the file
with a .ps1 file extension. If you simply type test.ps1 in the File Name box of
the Save dialog box you’ll </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 2</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>end up with a file with the name test.ps1.txt. That’s
because Notepad will helpfully assume that you’re saving a text file and will
append the .txt extension for you. To keep this from happening, either enclose
the file name in double quotes (“test.ps1”) or type test.ps1 in the File Name
box and select All Files (*.*) from the Save As Type drop-down list box.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>:
Keep in mind that what we showed you here isn’t the only thing you can do in a
script. Anything you can do from the command prompt you can put in a script. A
script can be anywhere from one line to hundreds of lines long. It all depends
on what you want it to do and how complicated you want to get.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.95pt;
margin-left:72.5pt'>You’ve just created your very first Windows PowerShell
script. Congratulations! Aren’t you glad you know how to write a script now?</p>

<h2 style='margin-left:72.5pt'>Running a Script</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Now that you’ve created your script, you probably want to
run it and see it in action. So you open up Windows Explorer to the folder
where you saved your script file, you double-click the .ps1 file, sit back, and
wait for the magic to happen.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>As it turns out, however, <i>this</i> is what happens:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:72.5pt'>Hmmm, instead of running, your script opened up in Notepad.
Interesting, but not exactly what you had in mind. Oh wait, you think, I get
it: you probably have to run Windows PowerShell before you can run a Windows
PowerShell script. OK, that makes sense. And so, with that in mind, you open up
Windows PowerShell and type the path to the .ps1 file at the command prompt. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>You press ENTER and wait for the magic to happen.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>As it turned out, however, <i>this</i> is what happens: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.75pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>File C:\scripts\test.ps1 cannot be
loaded because the execution of scripts is disabled on this system. Please see
“get-help about_signing” for more details.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Wow; how nice. A new command shell and scripting
environment that doesn’t even let you run scripts. What will those guys at
Microsoft think of next? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.95pt;
margin-left:72.5pt'>Listen, don’t panic; believe it or not, everything is fine.
You just need to learn a few little tricks for running Windows PowerShell scripts.</p>

<h2 style='margin-left:72.5pt'>Running Scripts From Within Windows PowerShell</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Let’s start with running scripts from within Windows
PowerShell itself. (Which, truth be told, is probably the most common way to
run Windows PowerShell scripts.) Why do you get weird error messages when you
try to run a script? That’s easy. The security settings built into Windows
PowerShell include something called the “execution policy;” the execution
policy determines how (or if) PowerShell runs scripts. By default, PowerShell’s
execution policy is set to <b>Restricted</b>; that means that scripts –
including those you write yourself – won’t run. Period.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.75pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
You can verify the settings for your execution policy by typing the following
at the PowerShell command prompt and then pressing ENTER:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.75pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>Get-ExecutionPolicy</span></p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Now, admittedly, this might seem a bit severe. After all,
what’s the point of having a scripting environment if you can’t even run
scripts with it? But that’s OK. If you don’t like the default execution policy
(and you probably won’t) then just go ahead and change it. For example, suppose
you want to configure PowerShell to run – without question – any scripts that
you write yourself, but to run scripts downloaded from the Internet only if
those scripts have been signed by a trusted publisher. In that case, use this
command to set your execution policy to <b>RemoteSigned</b>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
31.05pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-ExecutionPolicy RemoteSigned</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- 3</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection25>

<p class=MsoNormal style='margin-top:0in;margin-right:55.9pt;margin-bottom:
11.45pt;margin-left:.5pt'>Alternatively, you can set the execution policy to <b>AllSigned</b>
(all scripts, including those you write yourself, must be signed by a trusted
publisher) or <b>Bypass</b> (<i>all</i> scripts will run, regardless of where
they come from and whether or not they’ve been signed). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:23.5pt;
margin-left:.5pt'>See? No need to panic at all, is there?</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.65pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
Not sure what we mean by “signing scripts?” Then open up PowerShell, type the
following, and press ENTER:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.75pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>Get-Help
About_Signing</span></p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:72.7pt;margin-bottom:
10.35pt;margin-left:-.25pt'>After you change your execution policy settings
it’s <i>possible</i> to run scripts. However, you still might run into
problems. For example, suppose you change directories from your Windows
PowerShell home directory to C:\Scripts (something you can do by typing <b>cd
C:\Scripts</b>). As it turns out, the C:\Scripts folder contains a script named
Test.ps1. With that in mind you type the following and then press ENTER:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>And here’s the response you get:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.65pt;margin-bottom:
12.75pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>The term ‘test.ps1’ is not
recognized as a cmdlet, function, operable program, or script file. Verify the
term and try again.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:66.55pt;margin-bottom:
11.7pt;margin-left:-.25pt'>We know what you’re thinking: didn’t we just change
the execution policy? Yes, we did. However, this has nothing to do with the execution
policy. Instead, it has to do with the way that PowerShell handles file paths.
In general, you need to type <i>the complete file path</i> in order to run a
script. That’s true regardless of your location within the file system. It
doesn’t matter if you’re in C:\ Scripts; you still need to type the following:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>C:\Scripts\Test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:53.5pt;margin-bottom:
11.45pt;margin-left:.5pt'>Now, we said “in general” because there are a couple
of exceptions to this rule. For example, if the script happens to live in the
current directory you can start it up using the <b>.\</b> notation, like so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
24.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>.\Test.ps1</span></p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.25pt;margin-right:13.2pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
There’s no space between the .\ and the script name.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:55.85pt;margin-bottom:
11.45pt;margin-left:.5pt'>And while PowerShell won’t search the current
directory for scripts it <i>will</i> search all of the folders found in your
Windows PATH environment variable. What does that mean? That means that, if the
folder C:\Scripts is in your path, then you <i>can</i> run the script using
this command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:61.65pt;margin-bottom:
11.7pt;margin-left:-.25pt'>But be careful here. Suppose C:\Scripts is <i>not</i>
in your Windows path. However, suppose the folder D:\Archive <i>is</i> in the
path, and that folder also contains a script named Test.ps1. If you’re in the
C:\Scripts directory and you simply type <b>Test.ps1</b> and press ENTER, guess
which script will run? You got it: PowerShell won’t run the script in
C:\Scripts, but it <i>will</i> run the script found in D:\ Archive. That’s
because D:\Archive is in your path.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Just something to keep in mind.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.75pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
Just for the heck of it, here’s a command that retrieves your Windows PATH
environment variable and displays it in a readable fashion:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.15pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>$a =
$env:path; $a.Split(“;”)</span></p>

</div>

<h2 style='margin-left:72.5pt'>Even More About File Paths</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>Now we know that all we have to do is type in the full path
to the script file and we’ll never have to worry about getting our scripts to
run, right? Right.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Well, <i>almost</i> right. There’s still the matter of
scripts whose path name includes a blank space. For example, suppose you have a
script stored in the folder C:\My Scripts. Try typing this command and see what
happens:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>C:\My Scripts\Test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>Of course, by now you’ve come to expect the unexpected,
haven’t you? Here’s what you get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.75pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>The term ‘C:\My’ is not recognized
as a cmdlet, function, operable program, or script file. Verify the term and
try again.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.7pt;
margin-left:72.5pt'>This one you were able to figure out on your own, weren’t
you? Yes, just like good old Cmd.exe, PowerShell has problems parsing file
paths that include blank spaces. (In part because blank spaces are how you
separate command-line arguments used when you started the script.) In Cmd.exe
you can work around this problem by enclosing the path in double quotes.
Logically enough, you try the same thing in PowerShell:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>“C:\My Scripts\Test.ps1”</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>And here’s what you get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>C:\My Scripts\Test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Um, OK …. You try it again. And here’s what you get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>C:\My Scripts\Test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>You try it – well, look, there’s no point in trying it
again: no matter how many times you try this command, PowerShell will simply
display the exact same string value you typed in. If you actually want to <i>execute</i>
that string value (that is, if you want to run the script whose path is
enclosed in double quotes) you need to preface the path with the Call operator
(the ampersand). You know, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
24.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>&amp; “C:\My Scripts\Test.ps1”</span></p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.45pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
With this particular command you can either leave a space between the ampersand
and the path name or not leave a space between the ampersand and the path name;
it doesn’t matter.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>To summarize, <i>here’s</i> how you run scripts from within
Windows PowerShell:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:58.5pt;margin-bottom:
11.45pt;margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Make
sure you’ve changed your execution policy. By default, PowerShell won’t run
scripts at all, no matter how you specify the path.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:58.5pt;margin-bottom:
.4pt;margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>To
run a script, specify the entire file path, or either: 1) use the .\ notation
to run a script in the current directory or 2) put the folder where the script
resides in your Windows path.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:58.5pt;margin-bottom:
11.7pt;margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>If
your file path includes blank spaces, enclose the path in double quote marks
and preface the path with an ampersand.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:66.7pt;margin-bottom:
23.55pt;margin-left:.5pt'>And, yes, that all takes some getting used to.
However, you <i>will</i> get used to it. (To make life easier for you, we
recommend that you keep all your scripts in one folder, such as C:\Scripts, and
add that folder to your Windows path.)</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.25pt;margin-right:43.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
So can you use <i>PowerShell</i> to add a folder to your Windows Path? Sure;
here’s a command (that we won’t bother to explain in this introductory article)
that tacks the folder C:\Scripts onto the end of your Windows path:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.15pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>$env:path =
$env:path + “;c:\scripts”</span></p>

</div>

<h2 style='margin-left:-.25pt'>Bonus: “Dot Sourcing” a Script</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:70.95pt;margin-bottom:
11.45pt;margin-left:.5pt'>Admittedly, up to this point the news hasn’t been all
that good: you can’t run a PowerShell script by double-clicking the script
icon; PowerShell doesn’t automatically look for scripts in the current working
directory; spaces in path names can cause all sorts of problems; etc. etc.
Because of that, let’s take a moment to talk about one very cool feature of
Windows PowerShell scripting: dot sourcing.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Suppose we have a very simple PowerShell script like this
one:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$a = 5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$b = 10</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$c = $a + $b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:58.0pt;margin-bottom:
11.45pt;margin-left:.5pt'>Suppose we run this script, then type <b>$c</b> at
the command prompt. What do you think we’ll get back? If you guessed nothing,
then you guessed correctly:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:58.9pt;margin-bottom:
11.45pt;margin-left:.5pt'>In other words, we don’t get back anything at all.
Which, again, should come as no great surprise. And we know what you’re
thinking, you’re thinking: “Come on, shouldn’t this be leading us somewhere?”</p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.3pt;margin-bottom:
11.45pt;margin-left:.5pt'>Yes, it should. And believe it or not, it is. Let’s
run our PowerShell script again, only this time let’s “dot source” it; that is,
let’s type a period and a blank space and <i>then</i> type the path to the
script file. For example:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>. c:\scripts\test.ps1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.35pt;margin-bottom:
11.45pt;margin-left:.5pt'>When we run the script nothing will <i>seem</i> to
happen; that’s because we didn’t include any code for displaying the value of
$C. But now try typing $C at the command prompt . Here’s what you’ll get back:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>15</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Good heavens! Was this a lucky guess on the part of the
PowerShell console, or is this some sort of magic?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:65.0pt;margin-bottom:
11.45pt;margin-left:.5pt'>Surprisingly enough, it’s neither. Instead, <i>this</i>
is dot sourcing. When you dot source a script (that is, when you start the
script by prefacing the path to the script file with a dot and a blank space)
any variables used in the script become global variables that are available in
multiple scopes. What does <i>that</i> mean? Well, a script happens to
represent one scope; the console window happens to represent another scope. We
started the script Test.ps1 by dot sourcing it; that means that the variable $C
remains “alive” after the script ends. In turn, that means that this variable
can be accessed via the command window. In addition, these variables can be
accessed from other scripts. (Or at least from other scripts started from this
same instance of Windows PowerShell.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:72.5pt'>Suppose we have a second script (Test2.ps1) that does
nothing more than display the value of the variable $c:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>$c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Look what happens when we run Test2.ps1 (even if we don’t
use dot sourcing when starting the script):</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>15</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>Cool. Because $c is a global variable everyone has access
to it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>And, trust us here: this <i>is</i> pretty cool. For
example, suppose you have a database that you periodically like to muck around
with. If you wanted to, you could write an elaborate script that includes each
and every analysis you might ever want to run on that data. Alternatively, you
could write a very simple little script that merely connects to the database
and returns the data (stored in a variable). If you dot source that script on
startup you can then sit at the command prompt and muck around with the data
all you want. That’s because you have full access to the script variables and
their values.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:81.75pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
OK, sure, this <i>could</i> cause you a few problems as well, especially if you
tend to use the same variable names in all your scripts. But that’s OK; if you
ever need to wipe out the variable $C just run the following command (note
that, with the <b>Remove-Variable</b> cmdlet, we need to leave off the $ when
indicating the variable to be removed):</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:24.75pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>Remove-Variable
C</span></p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:25.9pt;
margin-left:72.5pt'>Play around with this a little bit and you’ll start to see
how useful dot sourcing can be.</p>

<h2 style='margin-left:72.5pt'>Running Scripts Without Starting Windows
PowerShell</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:4.15pt;margin-bottom:
11.7pt;margin-left:72.5pt'>We realize that it’s been awhile, but way back at
the start of this article we tried running a Windows PowerShell script by
doubleclicking a .PS1 file. That didn’t go quite the way we had hoped: instead
of running the script all we managed to do was open the script file in Notepad.
Interestingly enough, that’s the way it’s <i>supposed</i> to work: as a
security measure you can’t start a PowerShell script by double-clicking a .PS1
file. So apparently that means that you <i>do</i> have to start PowerShell
before you can run a PowerShell script.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>In a somewhat roundabout way, that’s technically true.
However, that doesn’t mean that you can’t start a PowerShell script from a
shortcut or from the <b>Run </b>dialog box; likewise you <i>can</i> run a
PowerShell script as a scheduled task. The secret? Instead of calling the
script you need to call the PowerShell executable file, and then pass the
script path as an argument to PowerShell.exe. For example, in the <b>Run</b>
dialog box you might type a command like this<b>:</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:72.5pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>powershell.exe -noexit
&amp;’c:\scripts\test.ps1’</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:72.5pt'>There are actually three parts to this command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:1.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>Powershell.exe</b>,
the Windows PowerShell executable.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.45pt;
margin-left:1.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>-noexit,</b>
an optional parameter that tells the PowerShell console to remain open after
the script finishes. Like we said, this is optional: if we leave it out the
script will still run. However, the console window will close the moment the script
finishes, meaning we won’t have the chance to view any data that gets displayed
to the screen.  Incidentally, the –noexit parameter must immediately follow the
call to the PowerShell executable. Otherwise the parameter will be ignored and
the window will close anyway.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.7pt;
margin-left:1.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>C:\Scripts\Test.ps1</b>,
the path to the script file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:67.15pt;margin-bottom:
11.7pt;margin-left:-.25pt'>What if the path to the script file contains blank
spaces? In that case you need to do the ampersand trick we showed you earlier; in
addition, you need to enclose the script path in <i>single</i> quote marks,
like so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>powershell.exe -noexit &amp;’c:\my
scripts\test.ps1’</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Strange, but true! </p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.65pt;margin-right:43.15pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
Here’s an interesting variation on this same theme: instead of starting
PowerShell and asking it to run a particular script you can start PowerShell
and ask it to run a particular <i>command</i>. For example, typing the
following in the <b>Run</b> dialog box not only starts PowerShell but also
causes it to run the Get-ChildItem cmdlet against the folder C:\Scripts:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.75pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>powershell.exe
-noexit get-childitem c:\scripts</span></p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:66.3pt;margin-bottom:
11.45pt;margin-left:.5pt'>It’s possible to get even <i>more</i> elaborate when
starting Windows PowerShell, but this will do for now. If you’d like more
information on PowerShell startup options just type <b>powershell.exe /?</b>
from either the Windows PowerShell or the Cmd.exe command prompt.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.05pt;margin-bottom:
13.3pt;margin-left:.5pt'>So is there a catch here? Unfortunately, there is. If
you are trying to carry out a task that requires administrator privileges then
you can’t start Windows PowerShell from the <b>Run</b> dialog box on either
Vista or Windows Server 2008. OK, check that: you can <i>start</i> PowerShell,
but the command you are trying to run will fail. For example, if this is your
script, it will fail; that’s because changing the execution policy requires
administrator privileges:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
11.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Set-ExecutionPolicy Unrestricted</span>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:68.95pt;margin-bottom:
13.95pt;margin-left:.5pt'>Fortunately, there’s a workaround. If you’d like to <i>always</i>
be able to start PowerShell from the <b>Run</b> dialog box on Vista or Windows
Server 2008 then you should check out the Script Elevation PowerToys for
Windows Vista (http://technet.microsoft.
com/en-us/magazine/2008.06.elevation.aspx).</p>

<h2 style='margin-left:-.25pt'>See? That Wasn’t So Bad</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:73.55pt;margin-bottom:
11.45pt;margin-left:.5pt'>Admittedly, running Windows PowerShell scripts might
not be as straightforward and clear-cut as it could be. On the other hand, it
won’t take you long to catch on, and you’ll soon be running PowerShell scripts
with the best of them. Most important, you’ll also be able to say things like,
“You know, you really ought to dot source that script when you run it.” If <i>that</i>
doesn’t impress your colleagues then nothing will. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:1.9in;
margin-left:.5pt'>Aren’t you glad you know how to do all this now?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:98.65pt;margin-bottom:
38.0pt;margin-left:-.25pt;line-height:104%'><span style='font-size:18.0pt;
line-height:104%;font-family:"Calibri",sans-serif'>“</span><span
style='font-size:18.0pt;line-height:104%'>If you’d like to <i>always</i> be
able to start PowerShell from the <b>Run</b> dialog box on Vista or Windows
Server 2008 then you should check out the Script Elevation PowerToys for
Windows Vista </span><span style='font-size:18.0pt;line-height:104%;font-family:
"Calibri",sans-serif'>”</span></p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:auto'>
</span>

<div class=WordSection26>

<p class=MsoNormal style='margin-top:0in;margin-right:-9.5pt;margin-bottom:
13.85pt;margin-left:-12.3pt;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black'><img width=327 height=435 id="Group 59589"
src="PowerShell%20Owners%20Manual_files/image036.gif"></span></p>

<h1 style='margin-left:28.4pt'>Remoting</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.55pt;
margin-left:4.25pt;text-indent:-4.6pt;line-height:103%'><i><span
style='font-size:12.0pt;line-height:103%;font-family:"Verdana",sans-serif'>Just
in case you have a computer or two that isn’t located in your office.</span></i></p>

<div>

<table cellspacing=0 cellpadding=0 hspace=0 vspace=0 align=left>
 <tr>
  <td valign=top align=left style='padding-top:0in;padding-right:0in;
  padding-bottom:0in;padding-left:0in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:36.7pt'><span
  style='font-size:46.0pt;font-family:"Times New Roman",serif'>A</span></p>
  </td>
 </tr>
</table>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>ccording to the old joke, the three most important things in
real estate are location, location, location. And in Windows PowerShell </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>2.0 the three most important things are –</p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.2pt;margin-bottom:11.45pt;
margin-left:.5pt'>Well, to tell, you the truth, we don’t actually <i>know</i>
what the three most important things are in Windows PowerShell 2.0. What we <i>do</i>
know is that the three most important things in Windows PowerShell 2.0 are <i>not</i>
location, location, location; that’s because location doesn’t matter in Windows
PowerShell 2.0. Not in the least. (Well, except with profiles But we’re not
talking about profiles right now.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Admittedly, that wasn’t the case with the original release of
Windows PowerShell; in PowerShell 1.0 location – or, to be more specific – <i>your</i>
location – was extremely important. That’s because Windows PowerShell 1.0 did
not support (except in one or two minor instances) the concept of remoting, the
ability for you to sit at computer A and retrieve information from, or make
changes to, computer B. The only way for you to retrieve information from
computer B was to physically sit at computer B. The idea of sitting at your
desk and managing all your computers simply by transmitting commands across the
network? As they say in New York, fuhhgeddaboutit.</p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:10.0pt;margin-right:18.55pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
If you’re not from New York, that can be translated like this: forget about it.</p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Now, that might not have been all that bad except for one
thing: Windows PowerShell was being promoted as <i>the</i> tool for system
administration. System administration that could only be done locally, and only
on one computer at a time. As they say in New York –</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Well, you’re right: they say a lot of things in New York,
don’t they? Never mind.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>But that was then and this is, um, not then. With Windows
PowerShell 2.0 you can now sit at computer A and manage computer B; for that
matter, you can also manage computers C, D, E, F, and G. Remoting is now a real
and viable part of Windows PowerShell; in fact, PowerShell now features <i>three</i>
different ways to manage remote computers:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>By
using .NET remoting</b>. A handful of Windows PowerShell cmdlets (including <b>GetService</b>
and <b>Get-Event</b>) harness the remoting capabilities built into the .NET
Framework; that means that you can use these cmdlets to directly return data
from a remote computer. </p>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection27>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.4pt;
margin-left:36.5pt'>(As opposed to making a transient or persistent
connection.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.45pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>By
making a transient connection to a remote computer</b>. With a transient
connection you make a temporary connection to a remote computer. How temporary
is this connection? <i>Very</i> temporary: you make the connection, run a
single command, and then the connection is automatically terminated. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><b>By
making a persistent connection to a remote computer</b>. With a persistent
connection you make a connection to a remote computer and then that connection
remains open until you explicitly close it. That means you can run as many
commands as you like, without ever having to open a new connection.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:12.7pt;
margin-left:.5pt'>In this section of the <i>Owner’s Manual</i>, we’ll give you
a quick introduction to all three methods of managing remote computers.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.35pt;
margin-left:-.25pt;line-height:107%'><b><span style='font-size:11.0pt;
line-height:107%'>What do I need in order to make these remote connections?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>To tell you the truth, not much. Obviously you need Windows
PowerShell 2.0. Although PowerShell 2.0 hasn’t been officially released yet,
you can download an RC (Release Candidate) version from
https://connect.microsoft.com/windowsmanagement/</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Downloads. This isn’t the <i>official</i> release of
PowerShell 2.0, but it’s very close. This RC, called the Windows Management
Framework, includes Windows PowerShell 2.0, Windows Remote Management (WinRM)
2.0, and Background Intelligent Transfer Service (BITS) 4.0.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>In addition, you’ll need version 2.0 of the .NET Framework;
there’s a pretty good chance you already have this installed in your computer.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>And keep in mind that this software not only needs to be
installed on your computer, but it also needs to be installed on every computer
that you want to be able to manage remotely. Do you want to be able to manage
all your client computers using PowerShell 2.0? Then PowerShell 2.0, .NET 2.0,
and WinRM must be installed on each of those client computers.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.95pt;
margin-left:.5pt'>Oh, and did we mention that you need to be a local
administrator on your computer and on each remote computer you try to connect
to? Well, we should have, because that’s absolutely crucial.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:-.25pt;line-height:107%'><b><span style='font-size:12.0pt;
line-height:107%'>How does remoting work?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>In a nutshell, <i>here’s</i> how remoting works in Windows
PowerShell 2.0. To begin with, you make a connection between your computer and
a remote computer. You then type a command on your computer and that command is
transmitted across the network to the remote computer. (In case you’re worried,
don’t be: all these transmissions are encrypted and secure.) The command is
then executed on the remote computer. Note, however, that the command runs
“invisibly;” nothing happens on the remote computer to indicate that the
computer is running a Windows PowerShell command. When the command completes,
the output is converted to XML format and transmitted back to your computer.
Your computer then converts that XML packet  back into a Windows PowerShell
object.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.95pt;
margin-left:-.25pt'>The fact that PowerShell remoting transmits XML (or, to be
more specific, SOAP packets) explains why this type of remoting is considered
firewall-friendly, and can be carried out across the Internet. Previous system
administration tools relied on DCOM (distributed COM) in order to do remoting;
with DCOM, objects are transmitted across the network. That’s a problem: by
default, most firewalls are designed to block objects. However, most firewalls <i>are</i>
configured to allow XML packets; thus PowerShell remoting can typically be used
without additional firewall configuration, and without allowing
potentially-unsafe objects onto your network.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.1pt;
margin-left:-.25pt;line-height:107%'><b><span style='font-size:12.0pt;
line-height:107%'>Can we get started now?</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:86.2pt;
margin-left:.5pt'>OK, good point, maybe it <i>is</i> time to actually start
doing something. Let’s start by taking a minute to discuss .NET remoting, a
type of remoting that – as we noted – applies to only a few cmdlets. </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 0</span></h2>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.65pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
Which cmdlets? In general, cmdlets that support the <b>–ComputerName</b>
parameter support .NET remoting. You can retrieve a list of cmdlets that
support the –ComputerName parameter by typing the following command at the
Windows PowerShell prompt and then pressing ENTER:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.75pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>Get-Help *
-Parameter ComputerName</span></p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>By default, when you run a cmdlet like <b>Get-Service</b> you
simply, well, run the cmdlet, like so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Do that, and Get-Service will retrieve information about all
the services running on the local computer:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Adobe LM Service   Adobe
LM Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  AdobeActiveFile... Adobe
Active File Monitor V4</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Alerter            Alerter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  ALG               
Application Layer Gateway Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  Apple Mobile De... Apple
Mobile Device</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  AppMgmt           
Application Management</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  ASChannel          Local
Communication Channel</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  aspnet_state       ASP.NET
State Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Ati HotKey Poller  Ati
HotKey Poller</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioSrv           Windows
Audio</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>…</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>That’s simple enough. But what if you want to run that
command against a <i>remote</i> computer? As it turns out, that’s simple
enough, too: you just add the <b>–ComputerName</b> parameter followed by the
name (or the IP address, or the fully qualified domain name) of the remote
computer. For example, this command returns information from the remote
computer atl-ocs-001:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service –ComputerName
atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Run <i>this</i> command, and you’ll get back something
similar to this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Status   Name              
DisplayName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>------   ----              
-----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Adobe LM Service   Adobe
LM Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  AdobeActiveFile... Adobe
Active File Monitor V4</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Alerter            Alerter</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  ALG               
Application Layer Gateway Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  Apple Mobile De... Apple
Mobile Device</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  AppMgmt           
Application Management</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  ASChannel          Local
Communication Channel</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  aspnet_state       ASP.NET
State Service</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Stopped  Ati HotKey Poller  Ati
HotKey Poller</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
11.65pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Running  AudioSrv           Windows
Audio</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As you can see, the output – well, now that you mention it,
the output <i>does</i> look a lot like the output we got when we ran GetService
without the –ComputerName parameter, doesn’t it? There’s actually two reasons
for that. For one, we <i>are</i> retrieving service information from the remote
computer; needless to say, service information from one computer will always
resemble service information from another computer.  In addition to that,
Get-Service typically suppresses the value of the <b>MachineName</b> property,
a property that indicates which computer the service is running on. But that’s
OK; we can use a command like this to ask Get-Service to show us just the
values of the DisplayName and the MachineName properties:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
53.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service –ComputerName
atl-ocs-001 | Select-Object DisplayName, MachineName</span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- 1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:2.7pt;
margin-left:.5pt'>Now take a peek at what we get back:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=415
 style='width:311.4pt;border-collapse:collapse'>
 <tr style='height:9.5pt'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:9.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>DisplayName 
                        </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  9.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:9.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>MachineName</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>----------- 
                        </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>-----------</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Adobe LM
  Service                   </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Adobe
  Active File Monitor V4      </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Alerter                            </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Application
  Layer Gateway Service  </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Apple
  Mobile Device                </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Application
  Management             </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Local
  Communication Channel       </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>ASP.NET
  State Service              </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Ati HotKey
  Poller                  </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:.15in'>
  <td width=288 valign=top style='width:3.0in;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>Windows
  Audio                      </span></p>
  </td>
  <td width=48 valign=top style='width:.5in;padding:0in 0in 0in 0in;height:
  .15in'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'> </span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:.15in'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
 <tr style='height:21.5pt'>
  <td width=336 colspan=2 valign=top style='width:3.5in;padding:0in 0in 0in 0in;
  height:21.5pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.95pt;
  margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  9.0pt;line-height:107%;font-family:"Courier New"'>Background Intelligent
  Transfer Ser...  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:9.0pt;line-height:107%;font-family:"Courier New"'>…</span></p>
  </td>
  <td width=79 valign=top style='width:59.4pt;padding:0in 0in 0in 0in;
  height:21.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:9.0pt;line-height:
  107%;font-family:"Courier New"'>atl-ocs-001</span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Not bad, huh? Incidentally, you aren’t limited to passing
just one machine name to the –ComputerName parameter. Want to retrieve service
information from computers atl-ocs-001, atl-ocs-002, and atl-ocs-003? Then just
ask Get-Service to retrieve service information from each of these three
machines, separating the computer names with commas:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Get-Service –ComputerName
atl-ocs-001,atl-ocs-002,atl-ocs-003</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:13.9pt;
margin-left:.5pt'>Give that a try and see what happens.</p>

<h2 style='margin-left:-.25pt'>Making a transient connection</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As we noted, .NET remoting is supported on only a handful of
cmdlets. That’s great, but what if you need to use a cmdlet that <i>doesn’t</i>
support .NET remoting? Are you just plain out of luck?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Let’s hope not; otherwise this is going to a very
disappointing chapter. (Of course, it might be anyway. But that has nothing to
do with .NET remoting.) Fortunately for all of us, the answer to that question
is: no, you are <i>not</i> out of luck. As long as you can make a connection to
a remote computer you can run pretty much any cmdlet you want against that
remote computer.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Which leads to a very obvious follow-up question: so how <i>do</i>
you make a connection to a remote computer? Remember awhile back when we
described transient connections, a temporary connection that enables you to run
a single command against a remote computer? Well, here’s how you make a
transient connection to a remote computer:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Invoke-Command -ComputerName
atl-ocs-001 -ScriptBlock {Get-PSDrive}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Let’s see if we can figure out how this command works. We
start by calling <b>Invoke-Command</b>, the cmdlet that enables us to make a
connection to a remote computer and then run a single command against that
computer. To indicate the name of that remote computer, we add the <b>–ComputerName</b>
parameter followed by the name (or, again, the IP address or the fully
qualified domain name) of the remote computer. As you can see, in this example
that’s <i>atl-ocs-001</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As for which command we’re going to run against atl-ocs-001,
we indicate <i>that</i> by including the <b>–ScriptBlock</b> parameter followed
by the command to be run; in this case, that’s the <b>Get-PSDrive</b> cmdlet.
Note that the command must be enclosed in curly braces; in Windows PowerShell,
the curly braces tell the system that the item inside the braces is a command
to be executed rather than a text value.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:82.55pt;
margin-left:.5pt'>And, believe it or not, that’s all there is to it. (OK, there
are additional parameters that do things such as enable you to run the </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- 2</span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>command under alternate credentials, but we’re going to skip
those parameters for now.) When we run this command we should get back
something similar to this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Name       Provider     
Root        CurrentLocation PSComputerName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>----       --------     
----        --------------- --------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>A                       
A:\                         atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:118.1pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Alias                                               
atl-ocs-001 C                        C:\                         atl-ocs-001
cert                     \                           atl-ocs-001
Env                                                  atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Function                                            
atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>HKCU                    
HKEY_CU...                  atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>HKLM                    
HKEY_LO...                  atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Variable                                            
atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>WSMan                                               
atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>There are two things of particular to note in this output.
First, take a peek at the <b>PSComputerName</b> property. This is a property
that Invoke-Command automatically adds to returned data; as you might have
guessed, it tells us where that data came from. As you can see, all the
retrieved data originated on the computer atl-ocs-001. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Second, take a look at the values returned for the <b>CurrentLocation
</b>property. CurrentLocation tells us, well, the current location within the
PowerShell drive; for example, if you were working in the PowerShell console
and your current folder was C:\Scripts then the CurrentLocation for drive C
would be C:\Scripts. So then why are all the CurrentLocation fields blank in
our output? That’s easy: that’s because this data came from a remote computer,
and our command was running in an invisible window rather than in the Windows
PowerShell console. PowerShell wasn’t up and running, so there <i>weren’t</i>
any current locations.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>See? We <i>told</i> you this data came from a remote
computer.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Even better, you can make transient connections against
multiple computers. All you have to do is add all the computer names to the
–ComputerName parameter, just like we did with .NET remoting:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Invoke-Command -ComputerName
atl-ocs-001,atl-ocs-002,atl-ocs-003 `</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'> -ScriptBlock {Get-PSDrive}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Here’s another cool little trick. What if you’d like to get
information from the <i>local</i> computer as well as from a remote computer
(or computers)? Well, that’s no problem; you can always include the name of the
local computer as one of the computer names supplied to the –ComputerName
parameter. But if you want to be cool (and, let’s face it, who <i>doesn’t</i>
want to be cool?) you could do one of these two things instead;</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:.7pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Use
a dot (.) instead of the local computer name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:108%'>•<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Use
<i>localhost</i> instead of the local computer name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>In other words, this command runs Get-PSDrive against the
local computer:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Invoke-Command -ComputerName .
-ScriptBlock {Get-PSDrive}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Oh, and so does this one:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
15.25pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Invoke-Command -ComputerName
localhost -ScriptBlock {Get-PSDrive}</span></p>

<h2 style='margin-left:-.25pt'>Making a persistent connection</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:57.4pt;
margin-left:-.25pt'>The one problem with a transient connection is that it’s
transient: as soon as your one command finishes executing your connection is
closed. Need to run another command? Then you need to open a second connection.
Need to run a third </p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- 3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>command? Then you need to open a third – well, you get the
idea. Transient connections work for simple tasks; they’re less useful for more
complex tasks. For something like that you need a connection that’s a bit more
persistent. You know, like a persistent connection. Or something.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>To explain how a persistent connection works let’s walk you
through a simple example. In order to make a persistent connection you need to
create a new PowerShell (PS) session. The easiest way to do that is to use a
command similar to this (in case you’re wondering why we left in the PowerShell
prompt – <b>PS C:\Scripts&gt;</b> – well, you’ll find out in just a second):</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; Enter-PSSession
-ComputerName atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As you can see, all we’ve done here is call the <b>Enter-PSSession</b>
cmdlet along with the <b>–ComputerName</b> parameter; the value passed to
–ComputerName is – oh, you guessed it. Well, you’re right: it’s the name of the
remote computer. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>So what’s going to happen when we run this command? This is
going to happen:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-001]: PS
C:\Users\Administrator\Documents&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As you can see, our prompt has changed, and in two very
important ways. First, we’re now working on the remote computer atlocs-001;
notice how the prompt now begins with <b>[atl-ocs-001]</b> to let us know which
computer we’re on. Second, note that we’re now working in the
C:\Users\Administrator\Documents folder. But remember, that’s the
C:\Users\Administrator\Documents folder on the remote computer atl-ocs-001.
From now on (at least until we end our session) everything we type, and every
command we run, will execute on atl-ocs-001.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Here’s an example. The following command retrieves the value
of the environment variable ComputerName, an environment variable that reports
back the name of the local computer:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-001]: PS
C:\Users\Administrator\Documents&gt; $env:computername</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>When we run this command we should get back the following:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:194.1pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:223%'><span style='font-size:9.0pt;
line-height:223%;font-family:"Courier New"'>atl-ocs-001 [atl-ocs-001]: PS
C:\Users\Administrator\Documents&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Notice the prompt? As you can see, even though we just ran a
command, we’re still working on the remote computer atl-ocs-001; that’s because
we have a persistent connection. Let’s try another command and see what
happens:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-001]: PS
C:\Users\Administrator\Documents&gt; Get-Process</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Handles  NPM(K)   PM(K)    WS(K)
VM(M)   CPU(s)     Id  ProcessName</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>-------  ------   -----    -----
-----   ------     --  -----------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     47       5    1852     4352   
62     0.08    340  notepad</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     39       5    1852     4332   
43     0.11   1128  calc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
11.65pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>     87       5    1848     4288   
118     0.08   1260 winword</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-001]: PS
C:\Users\Administrator\Documents&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Again, take a look at the prompt: we’re <i>still</i> working
on the remote computer atl-ocs-001. And that will last until the end of time or
until we decide to terminate our session.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:92.15pt;
margin-left:-.25pt'>Whichever comes first.</p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:10.3pt;
margin-left:-.25pt'>Speaking of which, what if we <i>have</i> decided to
terminate our session? That’s fine; all we have to do is type the <b>exit</b>
command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
11.65pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-001]: PS
C:\Users\Administrator\Documents&gt; exit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>As you can see (hint: look at the prompt) we’re no longer
working on the computer atl-ocs-001. Instead, we’re back on our local computer,
and back to the good old C:\Scripts folder to boot. You know what they say: be
it ever so humble, there’s no place like home.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>And yes, now that you mention it, we <i>can</i> create a
remote session that runs on multiple computers at the same time. In fact, you
already know how to do that, don’t you?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:26.25pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; Enter-PSSession
-ComputerName atl-ocs-001,atl-ocs-002,`     atl-ocs-003</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>You can also take a different tack: you can open a session to
computer A, open a separate session to computer B, and then switch back and
forth between those sessions.  Take a look at these commands:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; $a =
New-PSSession -ComputerName atl-ocs-001</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; $b =
New-PSSession -ComputerName atl-ocs-002</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As you can see, in the first command we used the <b>New-PSSession</b>
cmdlet to open a new PowerShell session on the remote computer atl-ocs-001;
that session was then saved in a variable named $a. In the second command, we
opened a new PowerShell session on the remote computer atl-ocs-002; that
session was saved in a variable named $b. And after we execute that second
command we – oh, looks like we’re still on the local computer, and still in the
C:\Scripts folder, aren’t we?Apparently our two new commands didn’t work, did
they?</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>Oh ye of little faith. Our commands <i>did</i> work.
New-PSSession did just what it was supposed to do: it created two new
PowerShell sessions. We can verify that by using <b>Get-PSSession</b> to list
the remote sessions currently running on our computer:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Id   Name       ComputerName   
State    Configuration</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'> --  ----       ------------   
-----    -------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:16.2pt;text-indent:-16.2pt;line-height:109%'><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>Session1  
atl-ocs-001     Opened   Microsoft.PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:16.2pt;text-indent:-16.2pt;line-height:109%'><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>Session2  
atl-ocs-002     Opened   Microsoft.PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As you can see, we have two open connections. The only reason
our prompt still reflects the local computer is because all we’ve done so far
is open those connections; we haven’t actually <i>entered</i> those connections
yet. To do that, we need to call the EnterPSSession cmdlet followed by the
appropriate variable. For example, to enter session 2 (the one running on
atl-ocs-002) we’d use this command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\scripts&gt; Enter-PSSession
$b </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-002]: PS
C:\Users\Administrator\Documents&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>As usual, look at the prompt: we’re now working on the
computer atl-ocs-002. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Now, suppose we want to exit this session. As you might
expect, all you have to do is type the <b>exit</b> command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>[atl-ocs-002]: PS
C:\Users\Administrator\Documents&gt; exit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
75.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; </span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:1.25pt;
margin-bottom:14.1pt;margin-left:.5pt;text-align:right;line-height:107%'><span
style='font-family:"Calibri",sans-serif'>Windows PowerShell Owner’s Manual -- </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>From this point we could now enter session 1 (<b>Enter-PSSession
$a</b>), or we could re-enter session 2. In fact we – what’s that? You know,
now that you mention it, session 2 <i>is</i> still running, isn’t it? Take a
look at the results of running Get-PSSession:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'> Id  Name       ComputerName   
State    Configuration</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'> --  ----       ------------   
-----    -------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:16.2pt;text-indent:-16.2pt;line-height:109%'><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>Session1  
atl-ocs-001     Opened   Microsoft.PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:16.2pt;text-indent:-16.2pt;line-height:109%'><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>Session2  
atl-ocs-002     Opened   Microsoft.PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:11.45pt;
margin-left:.5pt'>But, you ask, didn’t we just run the <b>exit</b> command?
Yes, we did, and PowerShell dutifully exited the session. However, when you are
running multiple PowerShell sessions exiting does <i>not</i> terminate the
connection; it merely returns you back to the local computer. If you truly want
to terminate the connection you need to exit and then run the <b>Remove-PSSession</b>
cmdlet:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; Remove-PSSession
$b </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Now look at what we get back when we run Get-PSSession:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:64.25pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Id   Name       ComputerName   
State    Configuration</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'> --  ----       ------------   
-----    -------------</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:16.2pt;text-indent:-16.2pt;line-height:109%'><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>Session1  
atl-ocs-001     Opened   Microsoft.PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
12.85pt;margin-left:16.2pt;text-indent:-16.2pt;line-height:109%'><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><span
style='font-size:9.0pt;line-height:109%;font-family:"Courier New"'>Session2  
atl-ocs-002     Closed   Microsoft.PowerShell</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:10.3pt;
margin-left:.5pt'>Session 2 is now shown as closed. And, trust us, it’s really
closed. Look what happens if we try to re-enter the session:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
10.45pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>PS C:\Scripts&gt; Enter-PSSession
$b </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>Enter-PSSession : Session must be
open.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>At line:1 char:16</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>+ Enter-PSSession &lt;&lt;&lt;&lt; 
$b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>    + CategoryInfo          :
InvalidArgument: (:) [Enter-PSSession], </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.35pt;margin-bottom:
.15pt;margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;
line-height:109%;font-family:"Courier New"'>ArgumentException</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.85pt;
margin-left:-.25pt;line-height:109%'><span style='font-size:9.0pt;line-height:
109%;font-family:"Courier New"'>    + FullyQualifiedErrorId :
PushedRunspaceMustBeOpen,Microsoft.PowerShell.Commands. EnterPSSessionCommand</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.6pt;margin-bottom:0in;
margin-left:.5pt'>We can’t enter the session, because the session is no longer
open.</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<div style='border:solid #181717 1.0pt;padding:0in 0in 0in 0in;background:#D3DFEE;
margin-left:9.65pt;margin-right:9.25pt'>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.8pt;
margin-left:.5pt;line-height:106%;background:#D3DFEE;border:none;padding:0in'><b>Note</b>.
Although the session is closed, $b will still contain an object reference to
that session. To remove that object reference you can simply delete the
variable:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:129.65pt;
margin-left:.5pt;line-height:110%;background:#D3DFEE;border:none;padding:0in'><span
style='font-size:9.0pt;line-height:110%;font-family:"Courier New"'>Remove-Variable
b</span></p>

</div>

<p class=MsoNormal style='margin-top:0in;margin-right:67.6pt;margin-bottom:
38.0pt;margin-left:-.25pt;line-height:104%'><span style='font-size:18.0pt;
line-height:104%;font-family:"Calibri",sans-serif'>“</span><span
style='font-size:18.0pt;line-height:104%'>When you are running multiple
PowerShell session exiting does not terminate the connection; it merely returns
you back to the local computer. </span><span style='font-size:18.0pt;
line-height:104%;font-family:"Calibri",sans-serif'>”</span></p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:15.3pt;margin-left:
-.25pt'><span style='font-size:10.0pt;line-height:107%;font-family:"Calibri",sans-serif;
font-weight:normal'>Windows PowerShell Owner’s Manual -- </span></h3>

</div>

<span style='font-size:10.0pt;line-height:108%;font-family:"Arial",sans-serif;
color:#181717'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection28><br clear=all style='page-break-before:always'>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&nbsp;</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&nbsp;</p>

</div>

</body>

</html>
