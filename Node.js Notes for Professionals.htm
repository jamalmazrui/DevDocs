<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Node.js Notes for Professionals</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
</head>
<body>
<h1 id="table-of-contents">Table of Contents</h1>
<p><a href="#Chapter_5__Exporting_and_Consumi"><u>Chapter 5: Exporting
and Consuming Modules
...........................................................................................
53</u></a></p>
<p><a href="#Chapter_6__Exporting_and_Importi"><u>Chapter 6: Exporting
and Importing Module in node.js
..........................................................................
58</u></a></p>
<p><a href="#Chapter_7__How_modules_are_loade"><u>Chapter 7: How modules
are loaded
................................................................................................................
59</u></a></p>
<p><a href="#Chapter_8__Cluster_Module"><u>Chapter 8: Cluster Module
.....................................................................................................................................
60</u></a></p>
<p><a href="#Chapter_9__Readline"><u>Chapter 9: Readline
...................................................................................................................................................
62</u></a></p>
<p><a href="#Chapter_10__package_json"><u>Chapter 10: package.json
.......................................................................................................................................
63</u></a></p>
<p><a href="#Chapter_11__Event_Emitters"><u>Chapter 11: Event Emitters
.....................................................................................................................................
69</u></a></p>
<p><a href="#Chapter_12__Autoreload_on_change"><u>Chapter 12: Autoreload
on changes
..................................................................................................................
72</u></a></p>
<p><a href="#Chapter_13__Environment"><u>Chapter 13: Environment
.........................................................................................................................................
74</u></a></p>
<p><a href="#Chapter_14__Callback_to_Promise"><u>Chapter 14: Callback to
Promise
........................................................................................................................
77</u></a></p>
<p><a href="#Chapter_15__Executing_files_or_c"><u>Chapter 15: Executing
files or commands with Child Processes
......................................................... 79</u></a></p>
<p><a href="#Chapter_16__Exception_handling"><u>Chapter 16: Exception
handling
...........................................................................................................................
82</u></a></p>
<p><a href="#Chapter_17__Keep_a_node_applicat"><u>Chapter 17: Keep a
node application constantly running
.....................................................................
86</u></a></p>
<p><a href="#Chapter_18__Uninstalling_Node_js"><u>Chapter 18:
Uninstalling Node.js
.........................................................................................................................
89</u></a></p>
<p><a href="#Chapter_19__nvm___Node_Version_M"><u>Chapter 19: nvm - Node
Version Manager
.....................................................................................................
90</u></a></p>
<p><a href="#Chapter_20__http"><u>Chapter 20: http
..........................................................................................................................................................
93</u></a></p>
<p><a href="#Chapter_21__Using_Streams"><u>Chapter 21: Using Streams
.....................................................................................................................................
95</u></a></p>
<p><a href="#Chapter_22__Deploying_Node_js_ap"><u>Chapter 22: Deploying
Node.js applications in production
...................................................................
99</u></a></p>
<p><a href="#Chapter_23__Securing_Node_js_app"><u>Chapter 23: Securing
Node.js applications
..................................................................................................
104</u></a></p>
<p><a href="#Chapter_24__Mongoose_Library"><u>Chapter 24: Mongoose
Library
.........................................................................................................................
109</u></a></p>
<p><a href="#Chapter_25__async_js"><u>Chapter 25: async.js
................................................................................................................................................
120</u></a></p>
<p><a href="#Chapter_26__File_upload"><u>Chapter 26: File upload
..........................................................................................................................................
125</u></a></p>
<p><a href="#Chapter_27__Socket_io_communicat"><u>Chapter 27: Socket.io
communication
...........................................................................................................
128</u></a></p>
<p><a href="#Chapter_28__Mongodb_integration"><u>Chapter 28: Mongodb
integration
...................................................................................................................
129</u></a></p>
<p><a href="#Chapter_29__Handling_POST_reques"><u>Chapter 29: Handling
POST request in Node.js
.........................................................................................
134</u></a></p>
<p><a href="#Chapter_30__Simple_REST_based_CR"><u>Chapter 30: Simple
REST based CRUD API
..................................................................................................
135</u></a></p>
<p><a href="#Chapter_31__Template_frameworks"><u>Chapter 31: Template
frameworks
..................................................................................................................
136</u></a></p>
<p><a href="#Chapter_32__Node_js_Architecture"><u>Chapter 32: Node.js
Architecture &amp; Inner Workings
...............................................................................
138</u></a></p>
<p><a href="#Chapter_33__Debugging_Node_js_ap"><u>Chapter 33: Debugging
Node.js application
...............................................................................................
139</u></a></p>
<p><a href="#Chapter_34__Node_server_without"><u>Chapter 34: Node server
without framework
...........................................................................................
142</u></a></p>
<p><a href="#Chapter_35__Node_JS_with_ES6"><u>Chapter 35: Node.JS with
ES6
............................................................................................................................
144</u></a></p>
<p><a href="#Chapter_36__Interacting_with_Con"><u>Chapter 36:
Interacting with Console
.............................................................................................................
148</u></a></p>
<p><a href="#Chapter_37__Cassandra_Integratio"><u>Chapter 37: Cassandra
Integration
.................................................................................................................
150</u></a></p>
<p><a href="#Chapter_38__Creating_API_s_with"><u>Chapter 38: Creating
API's with Node.js
........................................................................................................
151</u></a></p>
<p><a href="#Chapter_39__Graceful_Shutdown"><u>Chapter 39: Graceful
Shutdown
........................................................................................................................
153</u></a></p>
<p><a href="#Chapter_40__Using_IISNode_to_hos"><u>Chapter 40: Using
IISNode to host Node.js Web Apps in IIS
..............................................................
154</u></a></p>
<p><a href="#Chapter_41__CLI"><u>Chapter 41: CLI
...........................................................................................................................................................
158</u></a></p>
<p><a href="#Chapter_42__NodeJS_Frameworks"><u>Chapter 42: NodeJS
Frameworks
....................................................................................................................
161</u></a></p>
<p><a href="#Chapter_43__grunt"><u>Chapter 43: grunt
.....................................................................................................................................................
163</u></a></p>
<p><a href="#Chapter_44__Using_WebSocket_s_wi"><u>Chapter 44: Using
WebSocket's with Node.JS
..........................................................................................
165</u></a></p>
<p><a href="#Chapter_45__metalsmith"><u>Chapter 45: metalsmith
........................................................................................................................................
166</u></a></p>
<p><a href="#Chapter_46__Parsing_command_line"><u>Chapter 46: Parsing
command line arguments
.......................................................................................
167</u></a></p>
<p><a href="#Chapter_47__Client_server_commun"><u>Chapter 47:
Client-server communication
..................................................................................................
168</u></a></p>
<p><a href="#Chapter_48__Node_js_Design_Funda"><u>Chapter 48: Node.js
Design Fundamental
..................................................................................................
170</u></a></p>
<p><a href="#Chapter_49__Connect_to_Mongodb"><u>Chapter 49: Connect to
Mongodb
...................................................................................................................
171</u></a></p>
<p><a href="#Chapter_50__Performance_challeng"><u>Chapter 50:
Performance challenges
............................................................................................................
172</u></a></p>
<p><a href="#Chapter_51__Send_Web_Notificatio"><u>Chapter 51: Send Web
Notification
..................................................................................................................
176</u></a></p>
<p><a href="#Chapter_52__Remote_Debugging_in"><u>Chapter 52: Remote
Debugging in Node.JS
...............................................................................................
178</u></a></p>
<p><a href="#Chapter_53__Database__MongoDB_wi"><u>Chapter 53: Database
(MongoDB with Mongoose)
.................................................................................
180</u></a></p>
<p><a href="#Chapter_54__Good_coding_style"><u>Chapter 54: Good coding
style
.........................................................................................................................
183</u></a></p>
<p><a href="#Chapter_55__Restful_API_Design"><u>Chapter 55: Restful API
Design: Best Practices
........................................................................................
187</u></a></p>
<p><a href="#Chapter_56__Deliver_HTML_or_any"><u>Chapter 56: Deliver
HTML or any other sort of file
................................................................................
189</u></a></p>
<p><a href="#Chapter_57__TCP_Sockets"><u>Chapter 57: TCP Sockets
......................................................................................................................................
190</u></a></p>
<p><a href="#Chapter_58__Hack"><u>Chapter 58: Hack
......................................................................................................................................................
192</u></a></p>
<p><a href="#Chapter_59__Bluebird_Promises"><u>Chapter 59: Bluebird
Promises
..........................................................................................................................
193</u></a></p>
<p><a href="#Chapter_60__Async_Await"><u>Chapter 60: Async/Await
......................................................................................................................................
195</u></a></p>
<p><a href="#Chapter_61__Koa_Framework_v2"><u>Chapter 61: Koa Framework
v2
.........................................................................................................................
198</u></a></p>
<p><a href="#Chapter_62__Unit_testing_framewo"><u>Chapter 62: Unit
testing frameworks
.............................................................................................................
199</u></a></p>
<p><a href="#Chapter_63__ECMAScript_2015__ES6"><u>Chapter 63: ECMAScript
2015 (ES6) with Node.js
......................................................................................
200</u></a></p>
<p><a href="#Chapter_64__Routing_AJAX_request"><u>Chapter 64: Routing
AJAX requests with Express.JS
.............................................................................
203</u></a></p>
<p><a href="#Chapter_65__Sending_a_file_strea"><u>Chapter 65: Sending a
file stream to client
................................................................................................
205</u></a></p>
<p><a href="#Chapter_66__NodeJS_with_Redis"><u>Chapter 66: NodeJS with
Redis
.........................................................................................................................
207</u></a></p>
<p><a href="#Chapter_67__Using_Browserfiy_to"><u>Chapter 67: Using
Browserfiy to resolve 'required' error with browsers
.................................... 211</u></a></p>
<p><a href="#Chapter_68__Node_JS_and_MongoDB"><u>Chapter 68: Node.JS and
MongoDB.
..............................................................................................................
213</u></a></p>
<p><a href="#Chapter_69__Passport_integration"><u>Chapter 69: Passport
integration
.....................................................................................................................
218</u></a></p>
<p><a href="#Chapter_70__Dependency_Injection"><u>Chapter 70: Dependency
Injection
..................................................................................................................
224</u></a></p>
<p><a href="#Chapter_71__NodeJS_Beginner_Guid"><u>Chapter 71: NodeJS
Beginner Guide
...............................................................................................................
225</u></a></p>
<p><a href="#Chapter_72__Use_Cases_of_Node_js"><u>Chapter 72: Use Cases
of Node.js
....................................................................................................................
226</u></a></p>
<p><a href="#Chapter_73__Sequelize_js"><u>Chapter 73: Sequelize.js
........................................................................................................................................
228</u></a></p>
<p><a href="#Chapter_74__PostgreSQL_integrati"><u>Chapter 74: PostgreSQL
integration
.............................................................................................................
230</u></a></p>
<p><a href="#Chapter_75__MySQL_integration"><u>Chapter 75: MySQL
integration
.........................................................................................................................
231</u></a></p>
<p><a href="#Chapter_76__MySQL_Connection_Poo"><u>Chapter 76: MySQL
Connection Pool
..............................................................................................................
235</u></a></p>
<p><a href="#Chapter_77__MSSQL_Intergration"><u>Chapter 77: MSSQL
Intergration
......................................................................................................................
236</u></a></p>
<p><a href="#Chapter_78__Node_js_with_Oracle"><u>Chapter 78: Node.js
with Oracle
.......................................................................................................................
238</u></a></p>
<p><a href="#Chapter_79__Synchronous_vs_Async"><u>Chapter 79:
Synchronous vs Asynchronous programming in nodejs
............................................ 241</u></a></p>
<p><a href="#Chapter_80__Node_js_Error_Manage"><u>Chapter 80: Node.js
Error Management
......................................................................................................
242</u></a></p>
<p><a href="#Chapter_81__Node_js_v6_New_Featu"><u>Chapter 81: Node.js v6
New Features and Improvement
....................................................................
244</u></a></p>
<p><a href="#Chapter_82__Eventloop"><u>Chapter 82: Eventloop
...........................................................................................................................................
247</u></a></p>
<p><a href="#Chapter_83__Nodejs_History"><u>Chapter 83: Nodejs History
.................................................................................................................................
249</u></a></p>
<p><a href="#Chapter_84__passport_js"><u>Chapter 84: passport.js
........................................................................................................................................
252</u></a></p>
<p><a href="#Chapter_85__Asynchronous_program"><u>Chapter 85:
Asynchronous programming
...................................................................................................
253</u></a></p>
<p><a href="#Chapter_86__Node_js_code_for_STD"><u>Chapter 86: Node.js
code for STDIN and STDOUT without using any library
.......................... 259</u></a></p>
<p><a href="#Chapter_87__MongoDB_Integration"><u>Chapter 87: MongoDB
Integration for Node.js/Express.js
..................................................................
260</u></a></p>
<p><a href="#Chapter_88__Lodash"><u>Chapter 88: Lodash
.................................................................................................................................................
262</u></a></p>
<p><a href="#Chapter_89__csv_parser_in_node_j"><u>Chapter 89: csv parser
in node js
.....................................................................................................................
263</u></a></p>
<p><a href="#Chapter_90__Loopback___REST_Base"><u>Chapter 90: Loopback -
REST Based connector
......................................................................................
264</u></a></p>
<p><a href="#Chapter_91__Running_node_js_as_a"><u>Chapter 91: Running
node.js as a service
.....................................................................................................
266</u></a></p>
<p><a href="#Chapter_92__Node_js_with_CORS"><u>Chapter 92: Node.js with
CORS
..........................................................................................................................
267</u></a></p>
<p><a href="#Chapter_93__Getting_started_with"><u>Chapter 93: Getting
started with Nodes profiling
...................................................................................
268</u></a></p>
<p><a href="#Chapter_94__Node_js_Performance"><u>Chapter 94: Node.js
Performance
...................................................................................................................
270</u></a></p>
<p><a href="#Chapter_95__Yarn_Package_Manager"><u>Chapter 95: Yarn
Package Manager
..............................................................................................................
273</u></a></p>
<p><a href="#Chapter_96__OAuth_2_0"><u>Chapter 96: OAuth 2.0
............................................................................................................................................
276</u></a></p>
<p><a href="#Chapter_97__Node_JS_Localization"><u>Chapter 97: Node JS
Localization
....................................................................................................................
282</u></a></p>
<p><a href="#Chapter_98__Deploying_Node_js_ap"><u>Chapter 98: Deploying
Node.js application without downtime.
....................................................... 283</u></a></p>
<p><a href="#Chapter_99__Node_js__express_js"><u>Chapter 99: Node.js
(express.js) with angular.js Sample code
.........................................................
285</u></a></p>
<p><a href="#Chapter_100__NodeJs_Routing"><u>Chapter 100: NodeJs Routing
.............................................................................................................................
288</u></a></p>
<p><a href="#Chapter_101__Creating_a_Node_js"><u>Chapter 101: Creating a
Node.js Library that Supports Both Promises and Error-First</u></a></p>
<p><a href="#Chapter_102__Project_Structure"><u>Chapter 102: Project
Structure
..........................................................................................................................
295</u></a></p>
<p><a href="#Chapter_103__Avoid_callback_hell"><u>Chapter 103: Avoid
callback hell
.......................................................................................................................
297</u></a></p>
<p><a href="#Chapter_104__Arduino_communicati"><u>Chapter 104: Arduino
communication with nodeJs
................................................................................
299</u></a></p>
<p><a href="#Chapter_105__N_API"><u>Chapter 105: N-API
...................................................................................................................................................
301</u></a></p>
<p><a href="#Chapter_106__Multithreading"><u>Chapter 106: Multithreading
................................................................................................................................
303</u></a></p>
<p><a href="#Chapter_107__Windows_authenticat"><u>Chapter 107: Windows
authentication under node.js
............................................................................
305</u></a></p>
<p><a href="#Chapter_108__Require"><u>Chapter 108: Require()
...........................................................................................................................................
306</u></a></p>
<p><a href="#Chapter_109__Route_Controller_Se"><u>Chapter 109:
Route-Controller-Service structure for ExpressJS
..................................................... 308</u></a></p>
<p><a href="#Chapter_110__Push_notifications"><u>Chapter 110: Push
notifications
..........................................................................................................................
310</u></a></p>
<p><a href="#chapter-1-getting-started-with-node.js"><u>Chapter 1:
Getting started with Node.js</u></a></p>
<p><a href="#chapter-2-npm"><u>Chapter 2: npm</u></a></p>
<p><a href="#chapter-3-web-apps-with-express"><u>Chapter 3: Web Apps
With Express</u></a></p>
<p><a href="#chapter-4-filesystem-io"><u>Chapter 4: Filesystem
I/O</u></a></p>
<p><a href="#chapter-5-exporting-and-consuming"><u>Chapter 5: Exporting
and Consuming</u></a></p>
<p><a href="#chapter-6-exporting-and-importing"><u>Chapter 6: Exporting
and Importing</u></a></p>
<p><a href="#chapter-7-how-modules-are-loaded"><u>Chapter 7: How modules
are loaded</u></a></p>
<p><a href="#chapter-8-cluster-module"><u>Chapter 8: Cluster
Module</u></a></p>
<p><a href="#chapter-9-readline"><u>Chapter 9: Readline</u></a></p>
<p><a href="#chapter-10-package.json"><u>Chapter 10:
package.json</u></a></p>
<p><a href="#chapter-11-event-emitters"><u>Chapter 11: Event
Emitters</u></a></p>
<p><a href="#chapter-12-autoreload-on-changes"><u>Chapter 12: Autoreload
on changes</u></a></p>
<p><a href="#chapter-13-environment"><u>Chapter 13:
Environment</u></a></p>
<p><a href="#chapter-14-callback-to-promise"><u>Chapter 14: Callback to
Promise</u></a></p>
<p><a href="#chapter-15-executing-files-or-commands"><u>Chapter 15:
Executing files or commands</u></a></p>
<p><a href="#chapter-16-exception-handling"><u>Chapter 16: Exception
handling</u></a></p>
<p><a href="#chapter-17-keep-a-node-application"><u>Chapter 17: Keep a
node application</u></a></p>
<p><a href="#chapter-18-uninstalling-node.js"><u>Chapter 18:
Uninstalling Node.js</u></a></p>
<p><a href="#chapter-19-nvm---node-version-manager"><u>Chapter 19: nvm -
Node Version Manager</u></a></p>
<p><a href="#chapter-20-http"><u>Chapter 20: http</u></a></p>
<p><a href="#chapter-21-using-streams"><u>Chapter 21: Using
Streams</u></a></p>
<p><a href="#chapter-22-deploying-node.js-applications"><u>Chapter 22:
Deploying Node.js applications</u></a></p>
<p><a href="#chapter-23-securing-node.js-applications"><u>Chapter 23:
Securing Node.js applications</u></a></p>
<p><a href="#chapter-24-mongoose-library"><u>Chapter 24: Mongoose
Library</u></a></p>
<p><a href="#chapter-25-async.js"><u>Chapter 25: async.js</u></a></p>
<p><a href="#chapter-26-file-upload"><u>Chapter 26: File
upload</u></a></p>
<p><a href="#chapter-27-socket.io-communication"><u>Chapter 27:
Socket.io communication</u></a></p>
<p><a href="#chapter-28-mongodb-integration"><u>Chapter 28: Mongodb
integration</u></a></p>
<p><a href="#chapter-29-handling-post-request-in"><u>Chapter 29:
Handling POST request in</u></a></p>
<p><a href="#chapter-30-simple-rest-based-crud-api"><u>Chapter 30:
Simple REST based CRUD API</u></a></p>
<p><a href="#chapter-31-template-frameworks"><u>Chapter 31: Template
frameworks</u></a></p>
<p><a href="#chapter-32-node.js-architecture-inner"><u>Chapter 32:
Node.js Architecture &amp; Inner</u></a></p>
<p><a href="#chapter-33-debugging-node.js-application"><u>Chapter 33:
Debugging Node.js application</u></a></p>
<p><a href="#chapter-34-node-server-without"><u>Chapter 34: Node server
without</u></a></p>
<p><a href="#chapter-35-node.js-with-es6"><u>Chapter 35: Node.JS with
ES6</u></a></p>
<p><a href="#chapter-36-interacting-with-console"><u>Chapter 36:
Interacting with Console</u></a></p>
<p><a href="#chapter-37-cassandra-integration"><u>Chapter 37: Cassandra
Integration</u></a></p>
<p><a href="#chapter-38-creating-apis-with-node.js"><u>Chapter 38:
Creating API's with Node.js</u></a></p>
<p><a href="#chapter-39-graceful-shutdown"><u>Chapter 39: Graceful
Shutdown</u></a></p>
<p><a href="#chapter-40-using-iisnode-to-host-node.js"><u>Chapter 40:
Using IISNode to host Node.js</u></a></p>
<p><a href="#chapter-41-cli"><u>Chapter 41: CLI</u></a></p>
<p><a href="#chapter-42-nodejs-frameworks"><u>Chapter 42: NodeJS
Frameworks</u></a></p>
<p><a href="#chapter-43-grunt"><u>Chapter 43: grunt</u></a></p>
<p><a href="#chapter-44-using-websockets-with"><u>Chapter 44: Using
WebSocket's with</u></a></p>
<p><a href="#chapter-45-metalsmith"><u>Chapter 45:
metalsmith</u></a></p>
<p><a href="#chapter-46-parsing-command-line"><u>Chapter 46: Parsing
command line</u></a></p>
<p><a href="#chapter-47-client-server-communication"><u>Chapter 47:
Client-server communication</u></a></p>
<p><a href="#chapter-48-node.js-design-fundamental"><u>Chapter 48:
Node.js Design Fundamental</u></a></p>
<p><a href="#chapter-49-connect-to-mongodb"><u>Chapter 49: Connect to
Mongodb</u></a></p>
<p><a href="#chapter-50-performance-challenges"><u>Chapter 50:
Performance challenges</u></a></p>
<p><a href="#chapter-51-send-web-notification"><u>Chapter 51: Send Web
Notification</u></a></p>
<p><a href="#chapter-52-remote-debugging-in-node.js"><u>Chapter 52:
Remote Debugging in Node.JS</u></a></p>
<p><a href="#chapter-53-database-mongodb-with"><u>Chapter 53: Database
(MongoDB with</u></a></p>
<p><a href="#chapter-54-good-coding-style"><u>Chapter 54: Good coding
style</u></a></p>
<p><a href="#chapter-55-restful-api-design-best"><u>Chapter 55: Restful
API Design: Best</u></a></p>
<p><a href="#chapter-56-deliver-html-or-any-other"><u>Chapter 56:
Deliver HTML or any other</u></a></p>
<p><a href="#chapter-57-tcp-sockets"><u>Chapter 57: TCP
Sockets</u></a></p>
<p><a href="#chapter-58-hack"><u>Chapter 58: Hack</u></a></p>
<p><a href="#chapter-59-bluebird-promises"><u>Chapter 59: Bluebird
Promises</u></a></p>
<p><a href="#chapter-60-asyncawait"><u>Chapter 60:
Async/Await</u></a></p>
<p><a href="#chapter-61-koa-framework-v2"><u>Chapter 61: Koa Framework
v2</u></a></p>
<p><a href="#chapter-62-unit-testing-frameworks"><u>Chapter 62: Unit
testing frameworks</u></a></p>
<p><a href="#chapter-63-ecmascript-2015-es6-with"><u>Chapter 63:
ECMAScript 2015 (ES6) with</u></a></p>
<p><a href="#chapter-64-routing-ajax-requests-with"><u>Chapter 64:
Routing AJAX requests with</u></a></p>
<p><a href="#chapter-65-sending-a-file-stream-to-client"><u>Chapter 65:
Sending a file stream to client</u></a></p>
<p><a href="#chapter-66-nodejs-with-redis"><u>Chapter 66: NodeJS with
Redis</u></a></p>
<p><a href="#chapter-67-using-browserfiy-to-resolve"><u>Chapter 67:
Using Browserfiy to resolve</u></a></p>
<p><a href="#chapter-68-node.js-and-mongodb."><u>Chapter 68: Node.JS and
MongoDB.</u></a></p>
<p><a href="#chapter-69-passport-integration"><u>Chapter 69: Passport
integration</u></a></p>
<p><a href="#chapter-70-dependency-injection"><u>Chapter 70: Dependency
Injection</u></a></p>
<p><a href="#chapter-71-nodejs-beginner-guide"><u>Chapter 71: NodeJS
Beginner Guide</u></a></p>
<p><a href="#chapter-72-use-cases-of-node.js"><u>Chapter 72: Use Cases
of Node.js</u></a></p>
<p><a href="#chapter-73-sequelize.js"><u>Chapter 73:
Sequelize.js</u></a></p>
<p><a href="#chapter-74-postgresql-integration"><u>Chapter 74:
PostgreSQL integration</u></a></p>
<p><a href="#chapter-75-mysql-integration"><u>Chapter 75: MySQL
integration</u></a></p>
<p><a href="#chapter-76-mysql-connection-pool"><u>Chapter 76: MySQL
Connection Pool</u></a></p>
<p><a href="#chapter-77-mssql-intergration"><u>Chapter 77: MSSQL
Intergration</u></a></p>
<p><a href="#chapter-78-node.js-with-oracle"><u>Chapter 78: Node.js with
Oracle</u></a></p>
<p><a href="#chapter-79-synchronous-vs-asynchronous"><u>Chapter 79:
Synchronous vs Asynchronous</u></a></p>
<p><a href="#chapter-80-node.js-error-management"><u>Chapter 80: Node.js
Error Management</u></a></p>
<p><a href="#chapter-81-node.js-v6-new-features-and"><u>Chapter 81:
Node.js v6 New Features and</u></a></p>
<p><a href="#chapter-82-eventloop"><u>Chapter 82: Eventloop</u></a></p>
<p><a href="#chapter-83-nodejs-history"><u>Chapter 83: Nodejs
History</u></a></p>
<p><a href="#chapter-84-passport.js"><u>Chapter 84:
passport.js</u></a></p>
<p><a href="#chapter-85-asynchronous-programming"><u>Chapter 85:
Asynchronous programming</u></a></p>
<p><a href="#chapter-86-node.js-code-for-stdin-and"><u>Chapter 86:
Node.js code for STDIN and</u></a></p>
<p><a href="#chapter-87-mongodb-integration-for"><u>Chapter 87: MongoDB
Integration for</u></a></p>
<p><a href="#chapter-88-lodash"><u>Chapter 88: Lodash</u></a></p>
<p><a href="#chapter-89-csv-parser-in-node-js"><u>Chapter 89: csv parser
in node js</u></a></p>
<p><a href="#chapter-90-loopback---rest-based"><u>Chapter 90: Loopback -
REST Based</u></a></p>
<p><a href="#chapter-91-running-node.js-as-a-service"><u>Chapter 91:
Running node.js as a service</u></a></p>
<p><a href="#chapter-92-node.js-with-cors"><u>Chapter 92: Node.js with
CORS</u></a></p>
<p><a href="#chapter-93-getting-started-with-nodes"><u>Chapter 93:
Getting started with Nodes</u></a></p>
<p><a href="#chapter-94-node.js-performance"><u>Chapter 94: Node.js
Performance</u></a></p>
<p><a href="#chapter-95-yarn-package-manager"><u>Chapter 95: Yarn
Package Manager</u></a></p>
<p><a href="#chapter-96-oauth-2.0"><u>Chapter 96: OAuth 2.0</u></a></p>
<p><a href="#chapter-97-node-js-localization"><u>Chapter 97: Node JS
Localization</u></a></p>
<p><a href="#chapter-98-deploying-node.js-application"><u>Chapter 98:
Deploying Node.js application</u></a></p>
<p><a href="#chapter-99-node.js-express.js-with"><u>Chapter 99: Node.js
(express.js) with</u></a></p>
<p><a href="#chapter-100-nodejs-routing"><u>Chapter 100: NodeJs
Routing</u></a></p>
<p><a href="#chapter-101-creating-a-node.js-library"><u>Chapter 101:
Creating a Node.js Library</u></a></p>
<p><a href="#chapter-102-project-structure"><u>Chapter 102: Project
Structure</u></a></p>
<p><a href="#chapter-103-avoid-callback-hell"><u>Chapter 103: Avoid
callback hell</u></a></p>
<p><a href="#chapter-104-arduino-communication-with"><u>Chapter 104:
Arduino communication with</u></a></p>
<p><a href="#chapter-105-n-api"><u>Chapter 105: N-API</u></a></p>
<p><a href="#chapter-106-multithreading"><u>Chapter 106:
Multithreading</u></a></p>
<p><a href="#chapter-107-windows-authentication"><u>Chapter 107: Windows
authentication</u></a></p>
<p><a href="#chapter-108-require"><u>Chapter 108: Require()</u></a></p>
<p><a href="#chapter-109-route-controller-service"><u>Chapter 109:
Route-Controller-Service</u></a></p>
<p><a href="#chapter-110-push-notifications"><u>Chapter 110: Push
notifications</u></a></p>
<p>Notes for Professionals Node.js Node.js <strong>Notes for
Professionals</strong></p>
<p><img src="media/index-1_1.jpeg" style="width:6.5in;height:4.02778in"
alt="index-1_1.jpg" /></p>
<p>300+ pages</p>
<p>of professional hints and tricks</p>
<p><a href="https://goalkicker.com">GoalKicker.com</a> Disclaimer</p>
<p>This is an unocial free book created for educational purposes and
is</p>
<p><a href="https://goalkicker.com">Free Programming Books</a> not
aliated with ocial Node.js group(s) or company(s).</p>
<p>All trademarks and registered trademarks are</p>
<p>the property of their respective owners</p>
<h2 id="contents">Contents</h2>
<p><a href="#About"><strong>About</strong></a>
...................................................................................................................................................................................
<a href="#About">1</a></p>
<p><a href="#chapter-1-getting-started-with-node.js"><strong>Chapter 1:
Getting started with Node.js</strong></a>
............................................................................................................
<a href="#chapter-1-getting-started-with-node.js">2</a></p>
<p><a href="#v0_11____2013_03_28">Section 1.1: Hello World HTTP
server</a>
...........................................................................................................................
<a href="#v0_11____2013_03_28">4</a></p>
<p><a href="#page_16">Section 1.2: Hello World command line</a>
.......................................................................................................................
<a href="#page_16">5</a></p>
<p><a href="#____Give_the_user_an_example_on">Section 1.3: Hello World
with Express</a>
..........................................................................................................................
<a href="#____Give_the_user_an_example_on">6</a></p>
<p><a href="#____Give_the_user_an_example_on">Section 1.4: Installing
and Running Node.js
.................................................................................................................
6</a></p>
<p><a href="#information_about_it_can_be_foun">Section 1.5: Debugging
Your NodeJS Application</a>
......................................................................................................
<a href="#information_about_it_can_be_foun">7</a></p>
<p><a href="#information_about_it_can_be_foun">Section 1.6: Hello World
basic routing</a>
.........................................................................................................................
<a href="#information_about_it_can_be_foun">7</a></p>
<p><a href="#An_example_of_this_can_be_seen_h">Section 1.7: Hello World
in the REPL</a>
............................................................................................................................
<a href="#An_example_of_this_can_be_seen_h">8</a></p>
<p><a href="#At_a_command_prompt_type_node">Section 1.8: Deploying your
application online
...........................................................................................................
9</a></p>
<p><a href="#At_a_command_prompt_type_node">Section 1.9: Core
modules</a>
.............................................................................................................................................
<a href="#At_a_command_prompt_type_node">9</a></p>
<p><a href="#Section_1_10__TLS_Socket__server">Section 1.10: TLS Socket:
server and client</a>
................................................................................................................
<a href="#Section_1_10__TLS_Socket__server">14</a></p>
<p><a href="#client_on__data___function_data">Section 1.11: How to get a
basic HTTPS web server up and running!</a>
..................................................................... <a
href="#client_on__data___function_data">16</a></p>
<p><a href="#chapter-2-npm"><strong>Chapter 2: npm</strong></a>
............................................................................................................................................................
<a href="#chapter-2-npm">19</a></p>
<p><a href="#chapter-2-npm">Section 2.1: Installing packages</a>
.................................................................................................................................
<a href="#chapter-2-npm">19</a></p>
<p><a href="#Note__If_you_run_into_permission">Section 2.2: Uninstalling
packages</a>
............................................................................................................................
<a href="#Note__If_you_run_into_permission">22</a></p>
<p><a href="#npm_un__package_name">Section 2.3: Setting up a package
configuration</a>
.....................................................................................................
<a href="#npm_un__package_name">23</a></p>
<p><a href="#can_get_rid_of_them_by_opening_t">Section 2.4: Running
scripts</a>
.......................................................................................................................................
<a href="#can_get_rid_of_them_by_opening_t">24</a></p>
<p><a href="#can_get_rid_of_them_by_opening_t">Section 2.5: Basic
semantic versioning</a>
.....................................................................................................................
<a href="#can_get_rid_of_them_by_opening_t">24</a></p>
<p><a href="#1__patch_release__npm_version_pa">Section 2.6: Publishing a
package</a>
.............................................................................................................................
<a href="#1__patch_release__npm_version_pa">25</a></p>
<p><a href="#">Section 2.7: Removing extraneous packages</a>
..........................................................................................................
<a href="#">26</a></p>
<p><a href="#">Section 2.8: Listing currently installed packages</a>
.....................................................................................................
<a href="#">26</a></p>
<p><a href="#">Section 2.9: Updating npm and packages</a>
...............................................................................................................
<a href="#">26</a></p>
<p><a href="#In_order_to_update_a_specific_pa">Section 2.10: Scopes and
repositories</a>
.......................................................................................................................
<a href="#In_order_to_update_a_specific_pa">27</a></p>
<p><a href="#In_order_to_update_a_specific_pa">Section 2.11: Linking
projects for faster debugging and development</a>
.................................................................. <a
href="#In_order_to_update_a_specific_pa">27</a></p>
<p><a href="#1__CD_into_a_dependency_director">Section 2.12: Locking
modules to specific versions</a>
.................................................................................................
<a href="#1__CD_into_a_dependency_director">28</a></p>
<p><a href="#1__CD_into_a_dependency_director">Section 2.13: Setting up
for globally installed packages</a>
.........................................................................................
<a href="#1__CD_into_a_dependency_director">28</a></p>
<p><a href="#chapter-3-web-apps-with-express"><strong>Chapter 3: Web
Apps With Express</strong></a>
....................................................................................................................
<a href="#chapter-3-web-apps-with-express">30</a></p>
<p><a href="#chapter-3-web-apps-with-express">Section 3.1: Getting
Started</a>
.........................................................................................................................................
<a href="#chapter-3-web-apps-with-express">30</a></p>
<p><a href="#Section_3_2__Basic_routing">Section 3.2: Basic routing</a>
...........................................................................................................................................
<a href="#Section_3_2__Basic_routing">31</a></p>
<p><a href="#___other_js">Section 3.3: Modular express application</a>
.................................................................................................................
<a href="#___other_js">32</a></p>
<p><a href="#res_end">Section 3.4: Using a Template Engine</a>
.......................................................................................................................
<a href="#res_end">33</a></p>
<p><a href="#__else">Section 3.5: JSON API with ExpressJS</a>
.......................................................................................................................
<a href="#__else">34</a></p>
<p><a href="#_number_value___8476">Section 3.6: Serving static files</a>
...................................................................................................................................
<a href="#_number_value___8476">35</a></p>
<p><a href="#It_is_possible_to_define_multipl">Section 3.7: Adding
Middleware</a>
.................................................................................................................................
<a href="#It_is_possible_to_define_multipl">36</a></p>
<p><a href="#It_is_possible_to_define_multipl">Section 3.8: Error
Handling</a>
.........................................................................................................................................
<a href="#It_is_possible_to_define_multipl">36</a></p>
<p><a href="#___handle_error__print_stacktrac">Section 3.9: Getting info
from the request</a>
................................................................................................................
<a href="#___handle_error__print_stacktrac">37</a></p>
<p><a href="#Section_3_10__Error_handling_in">Section 3.10: Error
handling in Express</a>
......................................................................................................................
<a href="#Section_3_10__Error_handling_in">38</a></p>
<p><a href="#Section_3_10__Error_handling_in">Section 3.11: Hook: How to
execute code before any req and after any res</a>
........................................................ <a
href="#Section_3_10__Error_handling_in">38</a></p>
<p><a href="#Section_3_12__Setting_cookies_wi">Section 3.12: Setting
cookies with cookie-parser</a>
.....................................................................................................
<a href="#Section_3_12__Setting_cookies_wi">39</a></p>
<p><a href="#Section_3_12__Setting_cookies_wi">Section 3.13: Custom
middleware in Express</a>
............................................................................................................
<a href="#Section_3_12__Setting_cookies_wi">39</a></p>
<p><a href="#Section_3_12__Setting_cookies_wi">Section 3.14: Named
routes in Django-style</a>
.............................................................................................................
<a href="#Section_3_12__Setting_cookies_wi">39</a></p>
<p><a href="#npm_install_express_reverse">Section 3.15: Hello World</a>
.............................................................................................................................................
<a href="#npm_install_express_reverse">40</a></p>
<p><a href="#npm_install_express_reverse">Section 3.16: Using middleware
and the next callback</a>
............................................................................................
<a href="#npm_install_express_reverse">40</a></p>
<p><a href="#if__err__return_next_err">Section 3.17: Error handling</a>
........................................................................................................................................
<a href="#if__err__return_next_err">42</a></p>
<p><a href="#___Be_sure__order_of_app_use_hav">Section 3.18: Handling
POST Requests</a>
......................................................................................................................
<a href="#___Be_sure__order_of_app_use_hav">43</a></p>
<p><a href="#chapter-4-filesystem-io"><strong>Chapter 4: Filesystem
I/O</strong></a>
......................................................................................................................................
<a href="#chapter-4-filesystem-io">45</a></p>
<p><a href="#chapter-4-filesystem-io">Section 4.1: Asynchronously Read
from Files</a>
...........................................................................................................
<a href="#chapter-4-filesystem-io">45</a></p>
<p><a href="#chapter-4-filesystem-io">Section 4.2: Listing Directory
Contents with readdir or readdirSync</a>
..................................................................... <a
href="#chapter-4-filesystem-io">45</a></p>
<p><a href="#if_err__return_console_error_err">Section 4.3: Copying
files by piping streams</a>
............................................................................................................
<a href="#if_err__return_console_error_err">46</a></p>
<p><a href="#Create_readable_stream_to_file_i">Section 4.4: Reading from
a file synchronously</a>
......................................................................................................
<a href="#Create_readable_stream_to_file_i">47</a></p>
<p><a href="#Create_readable_stream_to_file_i">Section 4.5: Check
Permissions of a File or Directory</a>
.............................................................................................
<a href="#Create_readable_stream_to_file_i">47</a></p>
<p><a href="#__else_1">Section 4.6: Checking if a file or a directory
exists</a>
..................................................................................................
<a href="#__else_1">48</a></p>
<p><a href="#Section_4_7__Determining_the_lin">Section 4.7: Determining
the line count of a text file</a>
...............................................................................................
<a href="#Section_4_7__Determining_the_lin">49</a></p>
<p><a href="#Section_4_7__Determining_the_lin">Section 4.8: Reading a
file line by line</a>
.......................................................................................................................
<a href="#Section_4_7__Determining_the_lin">49</a></p>
<p><a href="#Section_4_7__Determining_the_lin">Section 4.9: Avoiding
race conditions when creating or using an existing directory</a>
........................................... <a
href="#Section_4_7__Determining_the_lin">49</a></p>
<p><a href="#method_below_wraps_fs_mkdir___an">Section 4.10: Cloning a
file using streams</a>
.................................................................................................................
<a href="#method_below_wraps_fs_mkdir___an">50</a></p>
<p><a href="#_1">Section 4.11: Writing to a file using writeFile or
writeFileSync</a>
.................................................................................
<a href="#_1">51</a></p>
<p><a href="#_1">Section 4.12: Changing contents of a text file</a>
..........................................................................................................
<a href="#_1">51</a></p>
<p><a href="#Section_4_13__Deleting_a_file_us">Section 4.13: Deleting a
file using unlink or unlinkSync</a>
...........................................................................................
<a href="#Section_4_13__Deleting_a_file_us">52</a></p>
<p><a href="#Section_4_13__Deleting_a_file_us">Section 4.14: Reading a
file into a Buer using streams</a>
.........................................................................................
<a href="#Section_4_13__Deleting_a_file_us">52</a></p>
<p><span id="Chapter_5__Exporting_and_Consumi" class="anchor"></span><a
href="#chapter-5-exporting-and-consuming">Chapter 5: Exporting and
Consuming Modules</a>
...........................................................................................
<a href="#chapter-5-exporting-and-consuming">53</a></p>
<p><a href="#chapter-5-exporting-and-consuming">Section 5.1: Creating a
hello-world.js module</a>
...........................................................................................................
<a href="#chapter-5-exporting-and-consuming">53</a></p>
<p><a href="#___hello_index_js">Section 5.2: Loading and using a
module</a>
................................................................................................................
<a href="#___hello_index_js">54</a></p>
<p><a href="#___Also_contains__createServer">Section 5.3: Folder as a
module</a>
.................................................................................................................................
<a href="#___Also_contains__createServer">55</a></p>
<p><a href="#___Also_contains__createServer">Section 5.4: Every module
injected only once</a>
..........................................................................................................
<a href="#___Also_contains__createServer">55</a></p>
<p><a href="#index_js">Section 5.5: Module loading from node_modules</a>
...................................................................................................
<a href="#index_js">56</a></p>
<p><a href="#index_js">Section 5.6: Building your own modules</a>
...................................................................................................................
<a href="#index_js">56</a></p>
<p><a href="#___Authenticate_with_a_Facebook">Section 5.7: Invalidating
the module cache</a>
..............................................................................................................
<a href="#___Authenticate_with_a_Facebook">57</a></p>
<p><span id="Chapter_6__Exporting_and_Importi" class="anchor"></span><a
href="#chapter-6-exporting-and-importing">Chapter 6: Exporting and
Importing Module in node.js</a>
..........................................................................
<a href="#chapter-6-exporting-and-importing">58</a></p>
<p><a href="#chapter-6-exporting-and-importing">Section 6.1: Exporting
with ES6 syntax</a>
......................................................................................................................
<a href="#chapter-6-exporting-and-importing">58</a></p>
<p><a href="#chapter-6-exporting-and-importing">Section 6.2: Using a
simple module in node.js</a>
.........................................................................................................
<a href="#chapter-6-exporting-and-importing">58</a></p>
<p><span id="Chapter_7__How_modules_are_loade" class="anchor"></span><a
href="#chapter-7-how-modules-are-loaded">Chapter 7: How modules are
loaded</a>
................................................................................................................
<a href="#chapter-7-how-modules-are-loaded">59</a></p>
<p><a href="#chapter-7-how-modules-are-loaded">Section 7.1: Global
Mode</a>
.............................................................................................................................................
<a href="#chapter-7-how-modules-are-loaded">59</a></p>
<p><a href="#chapter-7-how-modules-are-loaded">Section 7.2: Loading
modules</a>
....................................................................................................................................
<a href="#chapter-7-how-modules-are-loaded">59</a></p>
<p><span id="Chapter_8__Cluster_Module" class="anchor"></span><a
href="#chapter-8-cluster-module">Chapter 8: Cluster Module</a>
.....................................................................................................................................
<a href="#chapter-8-cluster-module">60</a></p>
<p><a href="#chapter-8-cluster-module">Section 8.1: Hello World</a>
..............................................................................................................................................
<a href="#chapter-8-cluster-module">60</a></p>
<p><a href="#chapter-8-cluster-module">Section 8.2: Cluster Example</a>
......................................................................................................................................
<a href="#chapter-8-cluster-module">60</a></p>
<p><span id="Chapter_9__Readline" class="anchor"></span><a
href="#chapter-9-readline">Chapter 9: Readline</a>
...................................................................................................................................................
<a href="#chapter-9-readline">62</a></p>
<p><a href="#chapter-9-readline">Section 9.1: Line-by-line file
reading</a>
..........................................................................................................................
<a href="#chapter-9-readline">62</a></p>
<p><a href="#chapter-9-readline">Section 9.2: Prompting user input via
CLI</a>
.................................................................................................................
<a href="#chapter-9-readline">62</a></p>
<p><span id="Chapter_10__package_json" class="anchor"></span><a
href="#chapter-10-package.json">Chapter 10: package.json</a>
.......................................................................................................................................
<a href="#chapter-10-package.json">63</a></p>
<p><a href="#chapter-10-package.json">Section 10.1: Exploring
package.json</a>
.........................................................................................................................
<a href="#chapter-10-package.json">63</a></p>
<p><a href="#files">Section 10.2: Scripts</a>
.....................................................................................................................................................
<a href="#files">66</a></p>
<p><a href="#In_this_case__you_can_execute_th">Section 10.3: Basic
project definition</a>
.........................................................................................................................
<a href="#In_this_case__you_can_execute_th">67</a></p>
<p><a href="#In_this_case__you_can_execute_th">Section 10.4:
Dependencies</a>
........................................................................................................................................
<a href="#In_this_case__you_can_execute_th">67</a></p>
<p><a href="#installed_when_running__npm_inst">Section 10.5: Extended
project definition</a>
..................................................................................................................
<a href="#installed_when_running__npm_inst">68</a></p>
<p><span id="Chapter_11__Event_Emitters" class="anchor"></span><a
href="#chapter-11-event-emitters">Chapter 11: Event Emitters</a>
.....................................................................................................................................
<a href="#chapter-11-event-emitters">69</a></p>
<p><a href="#chapter-11-event-emitters">Section 11.1: Basics</a>
.......................................................................................................................................................
<a href="#chapter-11-event-emitters">69</a></p>
<p><a href="#chapter-11-event-emitters">Section 11.2: Get the names of
the events that are subscribed to</a>
..........................................................................
<a href="#chapter-11-event-emitters">69</a></p>
<p><a href="#const_EventEmitter___require__ev">Section 11.3: HTTP
Analytics through an Event Emitter</a>
...........................................................................................
<a href="#const_EventEmitter___require__ev">70</a></p>
<p><a href="#const_EventEmitter___require__ev">Section 11.4: Get the
number of listeners registered to listen for a specific event</a>
............................................... <a
href="#const_EventEmitter___require__ev">70</a></p>
<p><span id="Chapter_12__Autoreload_on_change" class="anchor"></span><a
href="#chapter-12-autoreload-on-changes">Chapter 12: Autoreload on
changes</a>
..................................................................................................................
<a href="#chapter-12-autoreload-on-changes">72</a></p>
<p><a href="#chapter-12-autoreload-on-changes">Section 12.1: Autoreload
on source code changes using nodemon</a>
.......................................................................
<a href="#chapter-12-autoreload-on-changes">72</a></p>
<p><a href="#chapter-12-autoreload-on-changes">Section 12.2:
Browsersync</a>
..........................................................................................................................................
<a href="#chapter-12-autoreload-on-changes">72</a></p>
<p><span id="Chapter_13__Environment" class="anchor"></span><a
href="#chapter-13-environment">Chapter 13: Environment</a>
.........................................................................................................................................
<a href="#chapter-13-environment">74</a></p>
<p><a href="#chapter-13-environment">Section 13.1: Accessing environment
variables</a>
.........................................................................................................
<a href="#chapter-13-environment">74</a></p>
<p><a href="#chapter-13-environment">Section 13.2: process.argv command
line arguments</a>
.............................................................................................
<a href="#chapter-13-environment">74</a></p>
<p><a href="#Converting_to_number_Number_proc">Section 13.3: Loading
environment properties from a "property file"</a>
................................................................... <a
href="#Converting_to_number_Number_proc">75</a></p>
<p><a href="#Converting_to_number_Number_proc">Section 13.4: Using
dierent Properties/Configuration for dierent environments like dev,
qa, staging etc</a></p>
<p>................................................................................................................................................................................
<a href="#Converting_to_number_Number_proc">75</a></p>
<p><span id="Chapter_14__Callback_to_Promise" class="anchor"></span><a
href="#chapter-14-callback-to-promise">Chapter 14: Callback to
Promise</a>
........................................................................................................................
<a href="#chapter-14-callback-to-promise">77</a></p>
<p><a href="#chapter-14-callback-to-promise">Section 14.1: Promisifying
a callback</a>
.........................................................................................................................
<a href="#chapter-14-callback-to-promise">77</a></p>
<p><a href="#chapter-14-callback-to-promise">Section 14.2: Manually
promisifying a callback</a>
........................................................................................................
<a href="#chapter-14-callback-to-promise">77</a></p>
<p><a href="#var_existsAsync___function_path">Section 14.3: setTimeout
promisified</a>
.........................................................................................................................
<a href="#var_existsAsync___function_path">78</a></p>
<p><span id="Chapter_15__Executing_files_or_c" class="anchor"></span><a
href="#chapter-15-executing-files-or-commands">Chapter 15: Executing
files or commands with Child Processes</a>
......................................................... <a
href="#chapter-15-executing-files-or-commands">79</a></p>
<p><a href="#chapter-15-executing-files-or-commands">Section 15.1:
Spawning a new process to execute a command</a>
..............................................................................
<a href="#chapter-15-executing-files-or-commands">79</a></p>
<p><a href="#chapter-15-executing-files-or-commands">Section 15.2:
Spawning a shell to execute a command</a>
...........................................................................................
<a href="#chapter-15-executing-files-or-commands">79</a></p>
<p><a href="#child_process_exec_command___opt">Section 15.3: Spawning a
process to run an executable</a>
.........................................................................................
<a href="#child_process_exec_command___opt">80</a></p>
<p><span id="Chapter_16__Exception_handling" class="anchor"></span><a
href="#chapter-16-exception-handling">Chapter 16: Exception handling</a>
...........................................................................................................................
<a href="#chapter-16-exception-handling">82</a></p>
<p><a href="#chapter-16-exception-handling">Section 16.1: Handling
Exception In Node.Js</a>
.............................................................................................................
<a href="#chapter-16-exception-handling">82</a></p>
<p><a href="#function_doSomeAsynchronousOpera">Section 16.2: Unhanded
Exception Management</a>
.....................................................................................................
<a href="#function_doSomeAsynchronousOpera">83</a></p>
<p><a href="#Root_cause_will_remains_unknown">Section 16.3: Errors and
Promises</a>
..............................................................................................................................
<a href="#Root_cause_will_remains_unknown">84</a></p>
<p><span id="Chapter_17__Keep_a_node_applicat" class="anchor"></span><a
href="#chapter-17-keep-a-node-application">Chapter 17: Keep a node
application constantly running</a>
..................................................................... <a
href="#chapter-17-keep-a-node-application">86</a></p>
<p><a href="#chapter-17-keep-a-node-application">Section 17.1: Use PM2
as a process manager</a>
...........................................................................................................
<a href="#chapter-17-keep-a-node-application">86</a></p>
<p><a href="#pm2_monit">Section 17.2: Running and stopping a Forever
daemon</a>
.........................................................................................
<a href="#pm2_monit">87</a></p>
<p><a href="#_3">Section 17.3: Continuous running with nohup</a>
...........................................................................................................
<a href="#_3">88</a></p>
<p><span id="Chapter_18__Uninstalling_Node_js" class="anchor"></span><a
href="#chapter-18-uninstalling-node.js">Chapter 18: Uninstalling
Node.js</a>
.........................................................................................................................
<a href="#chapter-18-uninstalling-node.js">89</a></p>
<p><a href="#chapter-18-uninstalling-node.js">Section 18.1: Completely
uninstall Node.js on Mac OSX</a>
...........................................................................................
<a href="#chapter-18-uninstalling-node.js">89</a></p>
<p><a href="#chapter-18-uninstalling-node.js">Section 18.2: Uninstall
Node.js on Windows</a>
..............................................................................................................
<a href="#chapter-18-uninstalling-node.js">89</a></p>
<p><span id="Chapter_19__nvm___Node_Version_M" class="anchor"></span><a
href="#chapter-19-nvm---node-version-manager">Chapter 19: nvm - Node
Version Manager</a>
.....................................................................................................
<a href="#chapter-19-nvm---node-version-manager">90</a></p>
<p><a href="#chapter-19-nvm---node-version-manager">Section 19.1:
Install NVM</a>
..............................................................................................................................................
<a href="#chapter-19-nvm---node-version-manager">90</a></p>
<p><a href="#chapter-19-nvm---node-version-manager">Section 19.2: Check
NVM version</a>
...............................................................................................................................
<a href="#chapter-19-nvm---node-version-manager">90</a></p>
<p><a href="#chapter-19-nvm---node-version-manager">Section 19.3:
Installing an specific Node version</a>
......................................................................................................
<a href="#chapter-19-nvm---node-version-manager">90</a></p>
<p><a href="#chapter-19-nvm---node-version-manager">Section 19.4: Using
an already installed node version</a>
............................................................................................
<a href="#chapter-19-nvm---node-version-manager">90</a></p>
<p><a href="#Section_19_5__Install_nvm_on_Mac">Section 19.5: Install nvm
on Mac OSX</a>
........................................................................................................................
<a href="#Section_19_5__Install_nvm_on_Mac">91</a></p>
<p><a href="#Section_19_5__Install_nvm_on_Mac">Section 19.6: Run any
arbitrary command in a subshell with the desired version of node</a>
................................. <a
href="#Section_19_5__Install_nvm_on_Mac">91</a></p>
<p><a href="#Running_node_v4_5_0__npm_v2_15_9">Section 19.7: Setting
alias for node version</a>
..............................................................................................................
<a href="#Running_node_v4_5_0__npm_v2_15_9">92</a></p>
<p><span id="Chapter_20__http" class="anchor"></span><a
href="#chapter-20-http">Chapter 20: http</a>
..........................................................................................................................................................
<a href="#chapter-20-http">93</a></p>
<p><a href="#chapter-20-http">Section 20.1: http server</a>
..............................................................................................................................................
<a href="#chapter-20-http">93</a></p>
<p><a href="#Section_20_2__http_client">Section 20.2: http client</a>
..............................................................................................................................................
<a href="#Section_20_2__http_client">94</a></p>
<p><span id="Chapter_21__Using_Streams" class="anchor"></span><a
href="#chapter-21-using-streams">Chapter 21: Using Streams</a>
.....................................................................................................................................
<a href="#chapter-21-using-streams">95</a></p>
<p><a href="#chapter-21-using-streams">Section 21.1: Read Data from
TextFile with Streams</a>
...............................................................................................
<a href="#chapter-21-using-streams">95</a></p>
<p><a href="#chapter-21-using-streams">Section 21.2: Piping streams</a>
.......................................................................................................................................
<a href="#chapter-21-using-streams">95</a></p>
<p><a href="#var_writable___fs_createWriteStr">Section 21.3: Creating
your own readable/writable stream</a>
...................................................................................
<a href="#var_writable___fs_createWriteStr">96</a></p>
<p><a href="#const_Writable___require__stream">Section 21.4: Why
Streams?</a>
.......................................................................................................................................
<a href="#const_Writable___require__stream">97</a></p>
<p><span id="Chapter_22__Deploying_Node_js_ap" class="anchor"></span><a
href="#chapter-22-deploying-node.js-applications">Chapter 22: Deploying
Node.js applications in production</a>
................................................................... <a
href="#chapter-22-deploying-node.js-applications">99</a></p>
<p><a href="#chapter-22-deploying-node.js-applications">Section 22.1:
Setting NODE_ENV="production"</a>
........................................................................................................
<a href="#chapter-22-deploying-node.js-applications">99</a></p>
<p><a href="#_env_file">Section 22.2: Manage app with process
manager</a>
................................................................................................
<a href="#_env_file">100</a></p>
<p><a href="#_env_file">Section 22.3: Deployment using process
manager</a>
...............................................................................................
<a href="#_env_file">100</a></p>
<p><a href="#__forever_start_server_js">Section 22.4: Deployment using
PM2
......................................................................................................................
101</a></p>
<p><a href="#Restart_an_app">Section 22.5: Using dierent
Properties/Configuration for dierent environments like dev, qa, staging
etc</a></p>
<p>.............................................................................................................................................................................
<a href="#Restart_an_app">102</a></p>
<p><a href="#_4">Section 22.6: Taking advantage of clusters</a>
...........................................................................................................
<a href="#_4">103</a></p>
<p><span id="Chapter_23__Securing_Node_js_app" class="anchor"></span><a
href="#chapter-23-securing-node.js-applications">Chapter 23: Securing
Node.js applications
..................................................................................................
104</a></p>
<p><a href="#chapter-23-securing-node.js-applications">Section 23.1:
SSL/TLS in Node.js</a>
..............................................................................................................................
<a href="#chapter-23-securing-node.js-applications">104</a></p>
<p><a href="#chapter-23-securing-node.js-applications">Section 23.2:
Preventing Cross Site Request Forgery (CSRF)</a>
..............................................................................
<a href="#chapter-23-securing-node.js-applications">104</a></p>
<p><a href="#___parse_cookies">Section 23.3: Setting up an HTTPS
server</a>
..............................................................................................................
<a href="#___parse_cookies">105</a></p>
<p><a href="#sudo_cp_ca_crt_pem__usr_local_sh">Section 23.4: Using
HTTPS</a>
.......................................................................................................................................
<a href="#sudo_cp_ca_crt_pem__usr_local_sh">107</a></p>
<p><a href="#sudo_cp_ca_crt_pem__usr_local_sh">Section 23.5: Secure
express.js 3 Application</a>
.........................................................................................................
<a href="#sudo_cp_ca_crt_pem__usr_local_sh">107</a></p>
<p><span id="Chapter_24__Mongoose_Library" class="anchor"></span><a
href="#chapter-24-mongoose-library">Chapter 24: Mongoose Library</a>
.........................................................................................................................
<a href="#chapter-24-mongoose-library">109</a></p>
<p><a href="#chapter-24-mongoose-library">Section 24.1: Connect to
MongoDB Using Mongoose</a>
...........................................................................................
<a href="#chapter-24-mongoose-library">109</a></p>
<p><a href="#chapter-24-mongoose-library">Section 24.2: Find Data in
MongoDB Using Mongoose, Express.js Routes and $text Operator</a>
....................... <a
href="#chapter-24-mongoose-library">109</a></p>
<p><a href="#schemaName_index___request___tex">Section 24.3: Save Data
to MongoDB using Mongoose and Express.js Routes</a>
................................................. <a
href="#schemaName_index___request___tex">111</a></p>
<p><a href="#___save_function_err__result">Section 24.4: Find Data in
MongoDB Using Mongoose and Express.js Routes</a>
.................................................. <a
href="#___save_function_err__result">113</a></p>
<p><a href="#Example">Section 24.5: Useful Mongoose functions</a>
...............................................................................................................
<a href="#Example">115</a></p>
<p><a href="#Example">Section 24.6: Indexes in models</a>
...............................................................................................................................
<a href="#Example">115</a></p>
<p><a href="#usersSchema_index__email__1">Section 24.7: find data in
mongodb using promises</a>
.............................................................................................
<a href="#usersSchema_index__email__1">117</a></p>
<p><span id="Chapter_25__async_js" class="anchor"></span><a
href="#chapter-25-async.js">Chapter 25: async.js</a>
................................................................................................................................................
<a href="#chapter-25-async.js">120</a></p>
<p><a href="#chapter-25-async.js">Section 25.1: Parallel :
multi-tasking</a>
........................................................................................................................
<a href="#chapter-25-async.js">120</a></p>
<p><a href="#console_log_results">Section 25.2: async.each(To handle
array of data eciently)</a>
............................................................................
<a href="#console_log_results">121</a></p>
<p><a href="#createUser_eachUserName__callbac">Section 25.3: Series :
independent mono-tasking</a>
..................................................................................................
<a href="#createUser_eachUserName__callbac">122</a></p>
<p><a href="#It_s_very_useful_to_compute_some">Section 25.4: Waterfall :
dependent mono-tasking</a>
...............................................................................................
<a href="#It_s_very_useful_to_compute_some">123</a></p>
<p><a href="#_6">Section 25.5: async.times(To handle for loop in better
way)</a>
...............................................................................
<a href="#_6">124</a></p>
<p><a href="#_6">Section 25.6: async.series(To handle events one by
one)</a>
....................................................................................
<a href="#_6">124</a></p>
<p><span id="Chapter_26__File_upload" class="anchor"></span><a
href="#chapter-26-file-upload">Chapter 26: File upload
..........................................................................................................................................
125</a></p>
<p><a href="#chapter-26-file-upload">Section 26.1: Single File Upload
using multer</a>
.........................................................................................................
<a href="#chapter-26-file-upload">125</a></p>
<p><a href="#__form">Section 26.2: Using formidable module</a>
..................................................................................................................
<a href="#__form">126</a></p>
<p><span id="Chapter_27__Socket_io_communicat" class="anchor"></span><a
href="#chapter-27-socket.io-communication">Chapter 27: Socket.io
communication</a>
...........................................................................................................
<a href="#chapter-27-socket.io-communication">128</a></p>
<p><a href="#chapter-27-socket.io-communication">Section 27.1: "Hello
world!" with socket messages</a>
.................................................................................................
<a href="#chapter-27-socket.io-communication">128</a></p>
<p><span id="Chapter_28__Mongodb_integration" class="anchor"></span><a
href="#chapter-28-mongodb-integration">Chapter 28: Mongodb
integration</a>
...................................................................................................................
<a href="#chapter-28-mongodb-integration">129</a></p>
<p><a href="#chapter-28-mongodb-integration">Section 28.1: Simple
connect</a>
....................................................................................................................................
<a href="#chapter-28-mongodb-integration">129</a></p>
<p><a href="#chapter-28-mongodb-integration">Section 28.2: Simple
connect, using promises</a>
.......................................................................................................
<a href="#chapter-28-mongodb-integration">129</a></p>
<p><a href="#chapter-28-mongodb-integration">Section 28.3: Connect to
MongoDB
.........................................................................................................................
129</a></p>
<p><a href="#MongoClient_method_Connect">Section 28.4: Insert a
document</a>
..............................................................................................................................
<a href="#MongoClient_method_Connect">130</a></p>
<p><a href="#Section_28_5__Read_a_collection">Section 28.5: Read a
collection</a>
................................................................................................................................
<a href="#Section_28_5__Read_a_collection">131</a></p>
<p><a href="#Section_28_5__Read_a_collection">Section 28.6: Update a
document</a>
...........................................................................................................................
<a href="#Section_28_5__Read_a_collection">131</a></p>
<p><a href="#options____object____optional__O">Section 28.7: Delete a
document</a>
.............................................................................................................................
<a href="#options____object____optional__O">132</a></p>
<p><a href="#options____object____optional__O">Section 28.8: Delete
multiple documents</a>
...............................................................................................................
<a href="#options____object____optional__O">132</a></p>
<p><span id="Chapter_29__Handling_POST_reques" class="anchor"></span><a
href="#chapter-29-handling-post-request-in">Chapter 29: Handling POST
request in Node.js</a>
.........................................................................................
<a href="#chapter-29-handling-post-request-in">134</a></p>
<p><a href="#chapter-29-handling-post-request-in">Section 29.1: Sample
node.js server that just handles POST requests</a>
................................................................ <a
href="#chapter-29-handling-post-request-in">134</a></p>
<p><span id="Chapter_30__Simple_REST_based_CR" class="anchor"></span><a
href="#chapter-30-simple-rest-based-crud-api">Chapter 30: Simple REST
based CRUD API</a>
..................................................................................................
<a href="#chapter-30-simple-rest-based-crud-api">135</a></p>
<p><a href="#chapter-30-simple-rest-based-crud-api">Section 30.1: REST
API for CRUD in Express 3+</a>
......................................................................................................
<a href="#chapter-30-simple-rest-based-crud-api">135</a></p>
<p><span id="Chapter_31__Template_frameworks" class="anchor"></span><a
href="#chapter-31-template-frameworks">Chapter 31: Template
frameworks</a>
..................................................................................................................
<a href="#chapter-31-template-frameworks">136</a></p>
<p><a href="#chapter-31-template-frameworks">Section 31.1: Nunjucks</a>
................................................................................................................................................
<a href="#chapter-31-template-frameworks">136</a></p>
<p><span id="Chapter_32__Node_js_Architecture" class="anchor"></span><a
href="#chapter-32-node.js-architecture-inner">Chapter 32: Node.js
Architecture &amp; Inner Workings</a>
...............................................................................
<a href="#chapter-32-node.js-architecture-inner">138</a></p>
<p><a href="#chapter-32-node.js-architecture-inner">Section 32.1:
Node.js - under the hood</a>
....................................................................................................................
<a href="#chapter-32-node.js-architecture-inner">138</a></p>
<p><a href="#chapter-32-node.js-architecture-inner">Section 32.2:
Node.js - in motion</a>
.............................................................................................................................
<a href="#chapter-32-node.js-architecture-inner">138</a></p>
<p><span id="Chapter_33__Debugging_Node_js_ap" class="anchor"></span><a
href="#chapter-33-debugging-node.js-application">Chapter 33: Debugging
Node.js application</a>
...............................................................................................
<a href="#chapter-33-debugging-node.js-application">139</a></p>
<p><a href="#chapter-33-debugging-node.js-application">Section 33.1:
Core node.js debugger and node inspector</a>
.....................................................................................
<a href="#chapter-33-debugging-node.js-application">139</a></p>
<p><span id="Chapter_34__Node_server_without" class="anchor"></span><a
href="#chapter-34-node-server-without">Chapter 34: Node server without
framework</a>
...........................................................................................
<a href="#chapter-34-node-server-without">142</a></p>
<p><a href="#chapter-34-node-server-without">Section 34.1:
Framework-less node server</a>
.............................................................................................................
<a href="#chapter-34-node-server-without">142</a></p>
<p><a href="#Section_34_2__Overcoming_CORS_Is">Section 34.2: Overcoming
CORS Issues</a>
..................................................................................................................
<a href="#Section_34_2__Overcoming_CORS_Is">143</a></p>
<p><span id="Chapter_35__Node_JS_with_ES6" class="anchor"></span><a
href="#chapter-35-node.js-with-es6">Chapter 35: Node.JS with ES6</a>
............................................................................................................................
<a href="#chapter-35-node.js-with-es6">144</a></p>
<p><a href="#chapter-35-node.js-with-es6">Section 35.1: Node ES6 Support
and creating a project with Babel</a>
..................................................................... <a
href="#chapter-35-node.js-with-es6">144</a></p>
<p><a href="#_8">Section 35.2: Use JS es6 on your NodeJS app</a>
......................................................................................................
<a href="#_8">145</a></p>
<p><span id="Chapter_36__Interacting_with_Con" class="anchor"></span><a
href="#chapter-36-interacting-with-console">Chapter 36: Interacting with
Console</a>
.............................................................................................................
<a href="#chapter-36-interacting-with-console">148</a></p>
<p><a href="#chapter-36-interacting-with-console">Section 36.1:
Logging</a>
................................................................................................................................................
<a href="#chapter-36-interacting-with-console">148</a></p>
<p><span id="Chapter_37__Cassandra_Integratio" class="anchor"></span><a
href="#chapter-37-cassandra-integration">Chapter 37: Cassandra
Integration
.................................................................................................................
150</a></p>
<p><a href="#chapter-37-cassandra-integration">Section 37.1: Hello
world</a>
...........................................................................................................................................
<a href="#chapter-37-cassandra-integration">150</a></p>
<p><span id="Chapter_38__Creating_API_s_with" class="anchor"></span><a
href="#chapter-38-creating-apis-with-node.js">Chapter 38: Creating API's
with Node.js</a>
........................................................................................................
<a href="#chapter-38-creating-apis-with-node.js">151</a></p>
<p><a href="#chapter-38-creating-apis-with-node.js">Section 38.1: GET
api using Express</a>
.........................................................................................................................
<a href="#chapter-38-creating-apis-with-node.js">151</a></p>
<p><a href="#chapter-38-creating-apis-with-node.js">Section 38.2: POST
api using Express</a>
.....................................................................................................................
<a href="#chapter-38-creating-apis-with-node.js">151</a></p>
<p><span id="Chapter_39__Graceful_Shutdown" class="anchor"></span><a
href="#chapter-39-graceful-shutdown">Chapter 39: Graceful Shutdown</a>
........................................................................................................................
<a href="#chapter-39-graceful-shutdown">153</a></p>
<p><a href="#chapter-39-graceful-shutdown">Section 39.1: Graceful
Shutdown - SIGTERM
...........................................................................................................
153</a></p>
<p><span id="Chapter_40__Using_IISNode_to_hos" class="anchor"></span><a
href="#chapter-40-using-iisnode-to-host-node.js">Chapter 40: Using
IISNode to host Node.js Web Apps in IIS</a>
.............................................................. <a
href="#chapter-40-using-iisnode-to-host-node.js">154</a></p>
<p><a href="#chapter-40-using-iisnode-to-host-node.js">Section 40.1:
Using an IIS Virtual Directory or Nested Application via
&lt;appSettings&gt;</a> ....................................... <a
href="#chapter-40-using-iisnode-to-host-node.js">154</a></p>
<p><a href="#___Access_the_virtualDirPath_app">Section 40.2: Getting
Started</a>
...................................................................................................................................
<a href="#___Access_the_virtualDirPath_app">155</a></p>
<p><a href="#___Access_the_virtualDirPath_app">Section 40.3: Basic Hello
World Example using Express</a>
.......................................................................................
<a href="#___Access_the_virtualDirPath_app">155</a></p>
<p><a href="#_____All_other_URLs_are_mapped_t">Section 40.4: Using
Socket.io with IISNode</a>
.............................................................................................................
<a href="#_____All_other_URLs_are_mapped_t">157</a></p>
<p><span id="Chapter_41__CLI" class="anchor"></span><a
href="#chapter-41-cli">Chapter 41: CLI</a>
...........................................................................................................................................................
<a href="#chapter-41-cli">158</a></p>
<p><a href="#chapter-41-cli">Section 41.1: Command Line Options
.......................................................................................................................
158</a></p>
<p><span id="Chapter_42__NodeJS_Frameworks" class="anchor"></span><a
href="#chapter-42-nodejs-frameworks">Chapter 42: NodeJS Frameworks
....................................................................................................................
161</a></p>
<p><a href="#chapter-42-nodejs-frameworks">Section 42.1: Web Server
Frameworks
....................................................................................................................
161</a></p>
<p><a href="#chapter-42-nodejs-frameworks">Section 42.2: Command Line
Interface Frameworks</a>
............................................................................................
<a href="#chapter-42-nodejs-frameworks">161</a></p>
<p><span id="Chapter_43__grunt" class="anchor"></span><a
href="#chapter-43-grunt">Chapter 43: grunt</a>
.....................................................................................................................................................
<a href="#chapter-43-grunt">163</a></p>
<p><a href="#chapter-43-grunt">Section 43.1: Introduction To GruntJs
......................................................................................................................
163</a></p>
<p><a href="#Section_43_2__Installing_gruntpl">Section 43.2: Installing
gruntplugins
........................................................................................................................
164</a></p>
<p><span id="Chapter_44__Using_WebSocket_s_wi" class="anchor"></span><a
href="#chapter-44-using-websockets-with">Chapter 44: Using WebSocket's
with Node.JS
..........................................................................................
165</a></p>
<p><a href="#chapter-44-using-websockets-with">Section 44.1: Installing
WebSocket's</a>
........................................................................................................................
<a href="#chapter-44-using-websockets-with">165</a></p>
<p><a href="#chapter-44-using-websockets-with">Section 44.2: Adding
WebSocket's to your file's</a>
....................................................................................................
<a href="#chapter-44-using-websockets-with">165</a></p>
<p><a href="#chapter-44-using-websockets-with">Section 44.3: Using
WebSocket's and WebSocket Server's</a>
..................................................................................
<a href="#chapter-44-using-websockets-with">165</a></p>
<p><a href="#chapter-44-using-websockets-with">Section 44.4: A Simple
WebSocket Server Example</a>
..............................................................................................
<a href="#chapter-44-using-websockets-with">165</a></p>
<p><span id="Chapter_45__metalsmith" class="anchor"></span><a
href="#chapter-45-metalsmith">Chapter 45: metalsmith</a>
........................................................................................................................................
<a href="#chapter-45-metalsmith">166</a></p>
<p><a href="#chapter-45-metalsmith">Section 45.1: Build a simple
blog</a>
..............................................................................................................................
<a href="#chapter-45-metalsmith">166</a></p>
<p><a href="#chapter-45-metalsmith"><strong>{{ title }}</strong></a>
.........................................................................................................................................................................
<a href="#chapter-45-metalsmith">166</a></p>
<p><span id="Chapter_46__Parsing_command_line" class="anchor"></span><a
href="#chapter-46-parsing-command-line">Chapter 46: Parsing command line
arguments</a>
.......................................................................................
<a href="#chapter-46-parsing-command-line">167</a></p>
<p><a href="#chapter-46-parsing-command-line">Section 46.1: Passing
action (verb) and values</a>
......................................................................................................
<a href="#chapter-46-parsing-command-line">167</a></p>
<p><a href="#chapter-46-parsing-command-line">Section 46.2: Passing
boolean switches
..................................................................................................................
167</a></p>
<p><span id="Chapter_47__Client_server_commun" class="anchor"></span><a
href="#chapter-47-client-server-communication">Chapter 47: Client-server
communication</a>
..................................................................................................
<a href="#chapter-47-client-server-communication">168</a></p>
<p><a href="#chapter-47-client-server-communication">Section 47.1: /w
Express, jQuery and Jade
.............................................................................................................
168</a></p>
<p><span id="Chapter_48__Node_js_Design_Funda" class="anchor"></span><a
href="#chapter-48-node.js-design-fundamental">Chapter 48: Node.js Design
Fundamental</a>
..................................................................................................
<a href="#chapter-48-node.js-design-fundamental">170</a></p>
<p><a href="#chapter-48-node.js-design-fundamental">Section 48.1: The
Node.js philosophy</a>
......................................................................................................................
<a href="#chapter-48-node.js-design-fundamental">170</a></p>
<p><span id="Chapter_49__Connect_to_Mongodb" class="anchor"></span><a
href="#chapter-49-connect-to-mongodb">Chapter 49: Connect to Mongodb</a>
...................................................................................................................
<a href="#chapter-49-connect-to-mongodb">171</a></p>
<p><a href="#chapter-49-connect-to-mongodb">Section 49.1: Simple example
to Connect mongoDB from Node.JS</a>
.................................................................... <a
href="#chapter-49-connect-to-mongodb">171</a></p>
<p><a href="#chapter-49-connect-to-mongodb">Section 49.2: Simple way to
Connect mongoDB with core Node.JS</a>
................................................................... <a
href="#chapter-49-connect-to-mongodb">171</a></p>
<p><span id="Chapter_50__Performance_challeng" class="anchor"></span><a
href="#chapter-50-performance-challenges">Chapter 50: Performance
challenges</a>
............................................................................................................
<a href="#chapter-50-performance-challenges">172</a></p>
<p><a href="#chapter-50-performance-challenges">Section 50.1: Processing
long running queries with Node
.....................................................................................
172</a></p>
<p><span id="Chapter_51__Send_Web_Notificatio" class="anchor"></span><a
href="#chapter-51-send-web-notification">Chapter 51: Send Web
Notification
..................................................................................................................
176</a></p>
<p><a href="#chapter-51-send-web-notification">Section 51.1: Send Web
notification using GCM ( Google Cloud Messaging System)</a>
........................................ <a
href="#chapter-51-send-web-notification">176</a></p>
<p><span id="Chapter_52__Remote_Debugging_in" class="anchor"></span><a
href="#chapter-52-remote-debugging-in-node.js">Chapter 52: Remote
Debugging in Node.JS</a>
...............................................................................................
<a href="#chapter-52-remote-debugging-in-node.js">178</a></p>
<p><a href="#chapter-52-remote-debugging-in-node.js">Section 52.1: Use
the proxy for debugging via port on Linux</a>
...............................................................................
<a href="#chapter-52-remote-debugging-in-node.js">178</a></p>
<p><a href="#chapter-52-remote-debugging-in-node.js">Section 52.2:
NodeJS run configuration</a>
.................................................................................................................
<a href="#chapter-52-remote-debugging-in-node.js">178</a></p>
<p><a href="#chapter-52-remote-debugging-in-node.js">Section 52.3:
IntelliJ/Webstorm Configuration</a>
......................................................................................................
<a href="#chapter-52-remote-debugging-in-node.js">178</a></p>
<p><span id="Chapter_53__Database__MongoDB_wi" class="anchor"></span><a
href="#chapter-53-database-mongodb-with">Chapter 53: Database (MongoDB
with Mongoose)</a>
.................................................................................
<a href="#chapter-53-database-mongodb-with">180</a></p>
<p><a href="#chapter-53-database-mongodb-with">Section 53.1: Mongoose
connection</a>
........................................................................................................................
<a href="#chapter-53-database-mongodb-with">180</a></p>
<p><a href="#chapter-53-database-mongodb-with">Section 53.2: Model</a>
...................................................................................................................................................
<a href="#chapter-53-database-mongodb-with">180</a></p>
<p><a href="#module_exports___User">Section 53.3: Insert data</a>
...........................................................................................................................................
<a href="#module_exports___User">181</a></p>
<p><a href="#module_exports___User">Section 53.4: Read data
............................................................................................................................................
181</a></p>
<p><span id="Chapter_54__Good_coding_style" class="anchor"></span><a
href="#chapter-54-good-coding-style">Chapter 54: Good coding style</a>
.........................................................................................................................
<a href="#chapter-54-good-coding-style">183</a></p>
<p><a href="#chapter-54-good-coding-style">Section 54.1: Basic program
for signup</a>
..................................................................................................................
<a href="#chapter-54-good-coding-style">183</a></p>
<p><span id="Chapter_55__Restful_API_Design" class="anchor"></span><a
href="#chapter-55-restful-api-design-best">Chapter 55: Restful API
Design: Best Practices</a>
........................................................................................
<a href="#chapter-55-restful-api-design-best">187</a></p>
<p><a href="#chapter-55-restful-api-design-best">Section 55.1: Error
Handling: GET all resources
......................................................................................................
187</a></p>
<p><span id="Chapter_56__Deliver_HTML_or_any" class="anchor"></span><a
href="#chapter-56-deliver-html-or-any-other">Chapter 56: Deliver HTML or
any other sort of file</a>
................................................................................
<a href="#chapter-56-deliver-html-or-any-other">189</a></p>
<p><a href="#chapter-56-deliver-html-or-any-other">Section 56.1: Deliver
HTML at specified path
..........................................................................................................
189</a></p>
<p><span id="Chapter_57__TCP_Sockets" class="anchor"></span><a
href="#chapter-57-tcp-sockets">Chapter 57: TCP Sockets</a>
......................................................................................................................................
<a href="#chapter-57-tcp-sockets">190</a></p>
<p><a href="#chapter-57-tcp-sockets">Section 57.1: A simple TCP
server</a>
............................................................................................................................
<a href="#chapter-57-tcp-sockets">190</a></p>
<p><a href="#chapter-57-tcp-sockets">Section 57.2: A simple TCP
client</a>
.............................................................................................................................
<a href="#chapter-57-tcp-sockets">190</a></p>
<p><span id="Chapter_58__Hack" class="anchor"></span><a
href="#chapter-58-hack">Chapter 58: Hack</a>
......................................................................................................................................................
<a href="#chapter-58-hack">192</a></p>
<p><a href="#chapter-58-hack">Section 58.1: Add new extensions to
require()
........................................................................................................
192</a></p>
<p><span id="Chapter_59__Bluebird_Promises" class="anchor"></span><a
href="#chapter-59-bluebird-promises">Chapter 59: Bluebird Promises</a>
..........................................................................................................................
<a href="#chapter-59-bluebird-promises">193</a></p>
<p><a href="#chapter-59-bluebird-promises">Section 59.1: Converting
nodeback library to Promises</a>
........................................................................................
<a href="#chapter-59-bluebird-promises">193</a></p>
<p><a href="#chapter-59-bluebird-promises">Section 59.2: Functional
Promises</a>
...........................................................................................................................
<a href="#chapter-59-bluebird-promises">193</a></p>
<p><a href="#chapter-59-bluebird-promises">Section 59.3: Coroutines
(Generators)</a>
....................................................................................................................
<a href="#chapter-59-bluebird-promises">193</a></p>
<p><a href="#chapter-59-bluebird-promises">Section 59.4: Automatic
Resource Disposal (Promise.using)</a>
...............................................................................
<a href="#chapter-59-bluebird-promises">193</a></p>
<p><a href="#Promise_using_somethingThatRetur">Section 59.5: Executing
in series</a>
..............................................................................................................................
<a href="#Promise_using_somethingThatRetur">194</a></p>
<p><span id="Chapter_60__Async_Await" class="anchor"></span><a
href="#chapter-60-asyncawait">Chapter 60: Async/Await
......................................................................................................................................
195</a></p>
<p><a href="#chapter-60-asyncawait">Section 60.1: Comparison between
Promises and Async/Await</a>
..........................................................................
<a href="#chapter-60-asyncawait">195</a></p>
<p><a href="#chapter-60-asyncawait">Section 60.2: Async Functions with
Try-Catch Error Handling
.............................................................................
195</a></p>
<p><a href="#Here_s_an_example_with_Express_a">Section 60.3: Stops
execution at await</a>
...................................................................................................................
<a href="#Here_s_an_example_with_Express_a">196</a></p>
<p><a href="#Here_s_an_example_with_Express_a">Section 60.4: Progression
from Callbacks</a>
..............................................................................................................
<a href="#Here_s_an_example_with_Express_a">196</a></p>
<p><span id="Chapter_61__Koa_Framework_v2" class="anchor"></span><a
href="#chapter-61-koa-framework-v2">Chapter 61: Koa Framework v2</a>
.........................................................................................................................
<a href="#chapter-61-koa-framework-v2">198</a></p>
<p><a href="#chapter-61-koa-framework-v2">Section 61.1: Hello World
example</a>
...........................................................................................................................
<a href="#chapter-61-koa-framework-v2">198</a></p>
<p><a href="#chapter-61-koa-framework-v2">Section 61.2: Handling errors
using middleware</a>
....................................................................................................
<a href="#chapter-61-koa-framework-v2">198</a></p>
<p><span id="Chapter_62__Unit_testing_framewo" class="anchor"></span><a
href="#chapter-62-unit-testing-frameworks">Chapter 62: Unit testing
frameworks
.............................................................................................................
199</a></p>
<p><a href="#chapter-62-unit-testing-frameworks">Section 62.1: Mocha
Asynchronous (async/await)</a>
................................................................................................
<a href="#chapter-62-unit-testing-frameworks">199</a></p>
<p><a href="#chapter-62-unit-testing-frameworks">Section 62.2: Mocha
synchronous</a>
...........................................................................................................................
<a href="#chapter-62-unit-testing-frameworks">199</a></p>
<p><a href="#chapter-62-unit-testing-frameworks">Section 62.3: Mocha
asynchronous (callback)</a>
......................................................................................................
<a href="#chapter-62-unit-testing-frameworks">199</a></p>
<p><span id="Chapter_63__ECMAScript_2015__ES6" class="anchor"></span><a
href="#chapter-63-ecmascript-2015-es6-with">Chapter 63: ECMAScript 2015
(ES6) with Node.js</a>
......................................................................................
<a href="#chapter-63-ecmascript-2015-es6-with">200</a></p>
<p><a href="#chapter-63-ecmascript-2015-es6-with">Section 63.1:
const/let declarations</a>
.........................................................................................................................
<a href="#chapter-63-ecmascript-2015-es6-with">200</a></p>
<p><a href="#chapter-63-ecmascript-2015-es6-with">Section 63.2: Arrow
functions
...................................................................................................................................
200</a></p>
<p><a href="#chapter-63-ecmascript-2015-es6-with">Section 63.3: Arrow
Function Example</a>
....................................................................................................................
<a href="#chapter-63-ecmascript-2015-es6-with">200</a></p>
<p><a href="#Run_in_RunKit">Section 63.4: destructuring</a>
.......................................................................................................................................
<a href="#Run_in_RunKit">201</a></p>
<p><a href="#Run_in_RunKit">Section 63.5: flow
.......................................................................................................................................................
201</a></p>
<p><a href="#Run_in_RunKit">Section 63.6: ES6 Class
..............................................................................................................................................
201</a></p>
<p><span id="Chapter_64__Routing_AJAX_request" class="anchor"></span><a
href="#chapter-64-routing-ajax-requests-with">Chapter 64: Routing AJAX
requests with Express.JS
.............................................................................
203</a></p>
<p><a href="#chapter-64-routing-ajax-requests-with">Section 64.1: A
simple implementation of AJAX</a>
.....................................................................................................
<a href="#chapter-64-routing-ajax-requests-with">203</a></p>
<p><span id="Chapter_65__Sending_a_file_strea" class="anchor"></span><a
href="#chapter-65-sending-a-file-stream-to-client">Chapter 65: Sending a
file stream to client</a>
................................................................................................
<a href="#chapter-65-sending-a-file-stream-to-client">205</a></p>
<p><a href="#chapter-65-sending-a-file-stream-to-client">Section 65.1:
Using fs And pipe To Stream Static Files From The Server</a>
............................................................ <a
href="#chapter-65-sending-a-file-stream-to-client">205</a></p>
<p><a href="#The_above_snippet_is_a_basic_out">Section 65.2: Streaming
Using fluent-mpeg</a>
........................................................................................................
<a href="#The_above_snippet_is_a_basic_out">206</a></p>
<p><span id="Chapter_66__NodeJS_with_Redis" class="anchor"></span><a
href="#chapter-66-nodejs-with-redis">Chapter 66: NodeJS with Redis</a>
.........................................................................................................................
<a href="#chapter-66-nodejs-with-redis">207</a></p>
<p><a href="#chapter-66-nodejs-with-redis">Section 66.1: Getting
Started</a>
....................................................................................................................................
<a href="#chapter-66-nodejs-with-redis">207</a></p>
<p><a href="#chapter-66-nodejs-with-redis">Section 66.2: Storing
Key-Value Pairs</a>
.....................................................................................................................
<a href="#chapter-66-nodejs-with-redis">207</a></p>
<p><a href="#and_client_HMSET___are_the_same">Section 66.3: Some more
important operations supported by node_redis</a>
....................................................... <a
href="#and_client_HMSET___are_the_same">209</a></p>
<p><span id="Chapter_67__Using_Browserfiy_to" class="anchor"></span><a
href="#chapter-67-using-browserfiy-to-resolve">Chapter 67: Using
Browserfiy to resolve 'required' error with browsers</a>
.................................... <a
href="#chapter-67-using-browserfiy-to-resolve">211</a></p>
<p><a href="#chapter-67-using-browserfiy-to-resolve">Section 67.1:
Example - file.js</a>
....................................................................................................................................
<a href="#chapter-67-using-browserfiy-to-resolve">211</a></p>
<p><span id="Chapter_68__Node_JS_and_MongoDB" class="anchor"></span><a
href="#chapter-68-node.js-and-mongodb.">Chapter 68: Node.JS and
MongoDB.</a>
..............................................................................................................
<a href="#chapter-68-node.js-and-mongodb.">213</a></p>
<p><a href="#chapter-68-node.js-and-mongodb.">Section 68.1: Connecting
To a Database</a>
................................................................................................................
<a href="#chapter-68-node.js-and-mongodb.">213</a></p>
<p><a href="#chapter-68-node.js-and-mongodb.">Section 68.2: Creating New
Collection</a>
....................................................................................................................
<a href="#chapter-68-node.js-and-mongodb.">213</a></p>
<p><a href="#___We_can_also_define_methods_in">Section 68.3: Inserting
Documents</a>
..........................................................................................................................
<a href="#___We_can_also_define_methods_in">214</a></p>
<p><a href="#___We_can_also_define_methods_in">Section 68.4: Reading</a>
...............................................................................................................................................
<a href="#___We_can_also_define_methods_in">214</a></p>
<p><a href="#_15">Section 68.5: Updating</a>
..............................................................................................................................................
<a href="#_15">215</a></p>
<p><a href="#that_looks_like_this">Section 68.6: Deleting</a>
...............................................................................................................................................
<a href="#that_looks_like_this">216</a></p>
<p><span id="Chapter_69__Passport_integration" class="anchor"></span><a
href="#chapter-69-passport-integration">Chapter 69: Passport integration
.....................................................................................................................
218</a></p>
<p><a href="#chapter-69-passport-integration">Section 69.1: Local
authentication</a>
...........................................................................................................................
<a href="#chapter-69-passport-integration">218</a></p>
<p><a href="#return_next_null__false___messag">Section 69.2: Getting
started</a>
....................................................................................................................................
<a href="#return_next_null__false___messag">219</a></p>
<p><a href="#passport_deserializeUser_functio">Section 69.3: Facebook
authentication</a>
...................................................................................................................
<a href="#passport_deserializeUser_functio">220</a></p>
<p><a href="#app_get___auth_facebook___passpo">Section 69.4: Simple
Username-Password Authentication</a>
...................................................................................
<a href="#app_get___auth_facebook___passpo">221</a></p>
<p><a href="#app_get___auth_facebook___passpo">Section 69.5: Google
Passport authentication</a>
.......................................................................................................
<a href="#app_get___auth_facebook___passpo">221</a></p>
<p><span id="Chapter_70__Dependency_Injection" class="anchor"></span><a
href="#chapter-70-dependency-injection">Chapter 70: Dependency
Injection</a>
..................................................................................................................
<a href="#chapter-70-dependency-injection">224</a></p>
<p><a href="#chapter-70-dependency-injection">Section 70.1: Why Use
Dependency Injection
.........................................................................................................
224</a></p>
<p><span id="Chapter_71__NodeJS_Beginner_Guid" class="anchor"></span><a
href="#chapter-71-nodejs-beginner-guide">Chapter 71: NodeJS Beginner
Guide</a>
...............................................................................................................
<a href="#chapter-71-nodejs-beginner-guide">225</a></p>
<p><a href="#chapter-71-nodejs-beginner-guide">Section 71.1: Hello World
!
..........................................................................................................................................
225</a></p>
<p><span id="Chapter_72__Use_Cases_of_Node_js" class="anchor"></span><a
href="#chapter-72-use-cases-of-node.js">Chapter 72: Use Cases of
Node.js</a>
....................................................................................................................
<a href="#chapter-72-use-cases-of-node.js">226</a></p>
<p><a href="#chapter-72-use-cases-of-node.js">Section 72.1: HTTP
server</a>
.........................................................................................................................................
<a href="#chapter-72-use-cases-of-node.js">226</a></p>
<p><a href="#chapter-72-use-cases-of-node.js">Section 72.2: Console with
command prompt</a>
.......................................................................................................
<a href="#chapter-72-use-cases-of-node.js">226</a></p>
<p><span id="Chapter_73__Sequelize_js" class="anchor"></span><a
href="#chapter-73-sequelize.js">Chapter 73: Sequelize.js</a>
........................................................................................................................................
<a href="#chapter-73-sequelize.js">228</a></p>
<p><a href="#chapter-73-sequelize.js">Section 73.1: Defining Models</a>
...................................................................................................................................
<a href="#chapter-73-sequelize.js">228</a></p>
<p><a href="#_17">Section 73.2: Installation</a>
...........................................................................................................................................
<a href="#_17">229</a></p>
<p><span id="Chapter_74__PostgreSQL_integrati" class="anchor"></span><a
href="#chapter-74-postgresql-integration">Chapter 74: PostgreSQL
integration</a>
.............................................................................................................
<a href="#chapter-74-postgresql-integration">230</a></p>
<p><a href="#chapter-74-postgresql-integration">Section 74.1: Connect To
PostgreSQL</a>
.....................................................................................................................
<a href="#chapter-74-postgresql-integration">230</a></p>
<p><a href="#chapter-74-postgresql-integration">Section 74.2: Query with
Connection Object</a>
..........................................................................................................
<a href="#chapter-74-postgresql-integration">230</a></p>
<p><span id="Chapter_75__MySQL_integration" class="anchor"></span><a
href="#chapter-75-mysql-integration">Chapter 75: MySQL integration
.........................................................................................................................
231</a></p>
<p><a href="#chapter-75-mysql-integration">Section 75.1: Connect to
MySQL</a>
..............................................................................................................................
<a href="#chapter-75-mysql-integration">231</a></p>
<p><a href="#chapter-75-mysql-integration">Section 75.2: Using a
connection pool</a>
....................................................................................................................
<a href="#chapter-75-mysql-integration">231</a></p>
<p><a href="#When_you_use_pool_you_don_t_need">Section 75.3: Query a
connection object with parameters</a>
...................................................................................
<a href="#When_you_use_pool_you_don_t_need">232</a></p>
<p><a href="#rows_forEach_function_row">Section 75.4: Query a connection
object without parameters</a>
.............................................................................
<a href="#rows_forEach_function_row">233</a></p>
<p><a href="#rows_forEach_function_row">Section 75.5: Run a number of
queries with a single connection from a pool</a>
................................................... <a
href="#rows_forEach_function_row">233</a></p>
<p><a href="#rows_forEach_function_row">Section 75.6: Export Connection
Pool
......................................................................................................................
233</a></p>
<p><a href="#_18">Section 75.7: Return the query when an error
occurs</a>
...........................................................................................
<a href="#_18">234</a></p>
<p><span id="Chapter_76__MySQL_Connection_Poo" class="anchor"></span><a
href="#chapter-76-mysql-connection-pool">Chapter 76: MySQL Connection
Pool</a>
..............................................................................................................
<a href="#chapter-76-mysql-connection-pool">235</a></p>
<p><a href="#chapter-76-mysql-connection-pool">Section 76.1: Using a
connection pool without database</a>
......................................................................................
<a href="#chapter-76-mysql-connection-pool">235</a></p>
<p><span id="Chapter_77__MSSQL_Intergration" class="anchor"></span><a
href="#chapter-77-mssql-intergration">Chapter 77: MSSQL Intergration</a>
......................................................................................................................
<a href="#chapter-77-mssql-intergration">236</a></p>
<p><a href="#chapter-77-mssql-intergration">Section 77.1: Connecting
with SQL via. mssql npm module</a>
..................................................................................
<a href="#chapter-77-mssql-intergration">236</a></p>
<p><span id="Chapter_78__Node_js_with_Oracle" class="anchor"></span><a
href="#chapter-78-node.js-with-oracle">Chapter 78: Node.js with
Oracle</a>
.......................................................................................................................
<a href="#chapter-78-node.js-with-oracle">238</a></p>
<p><a href="#chapter-78-node.js-with-oracle">Section 78.1: Connect to
Oracle DB</a>
.........................................................................................................................
<a href="#chapter-78-node.js-with-oracle">238</a></p>
<p><a href="#chapter-78-node.js-with-oracle">Section 78.2: Using a local
module for easier querying</a>
.......................................................................................
<a href="#chapter-78-node.js-with-oracle">238</a></p>
<p><a href="#options_isAutoCommit___false">Section 78.3: Query a
connection object without parameters</a>
.............................................................................
<a href="#options_isAutoCommit___false">239</a></p>
<p><span id="Chapter_79__Synchronous_vs_Async" class="anchor"></span><a
href="#chapter-79-synchronous-vs-asynchronous">Chapter 79: Synchronous
vs Asynchronous programming in nodejs
............................................ 241</a></p>
<p><a href="#chapter-79-synchronous-vs-asynchronous">Section 79.1: Using
async
..........................................................................................................................................
241</a></p>
<p><span id="Chapter_80__Node_js_Error_Manage" class="anchor"></span><a
href="#chapter-80-node.js-error-management">Chapter 80: Node.js Error
Management</a>
......................................................................................................
<a href="#chapter-80-node.js-error-management">242</a></p>
<p><a href="#chapter-80-node.js-error-management">Section 80.1:
try...catch block
....................................................................................................................................
242</a></p>
<p><a href="#chapter-80-node.js-error-management">Section 80.2: Creating
Error object</a>
.........................................................................................................................
<a href="#chapter-80-node.js-error-management">242</a></p>
<p><a href="#______at">Section 80.3: Throwing Error
....................................................................................................................................
243</a></p>
<p><span id="Chapter_81__Node_js_v6_New_Featu" class="anchor"></span><a
href="#chapter-81-node.js-v6-new-features-and">Chapter 81: Node.js v6
New Features and Improvement</a>
.................................................................... <a
href="#chapter-81-node.js-v6-new-features-and">244</a></p>
<p><a href="#chapter-81-node.js-v6-new-features-and">Section 81.1:
Default Function Parameters</a>
.............................................................................................................
<a href="#chapter-81-node.js-v6-new-features-and">244</a></p>
<p><a href="#chapter-81-node.js-v6-new-features-and">Section 81.2: Rest
Parameters</a>
.................................................................................................................................
<a href="#chapter-81-node.js-v6-new-features-and">244</a></p>
<p><a href="#chapter-81-node.js-v6-new-features-and">Section 81.3: Arrow
Functions
...................................................................................................................................
244</a></p>
<p><a href="#Section_81_4___this__in_Arrow_Fu">Section 81.4: "this" in
Arrow Function</a>
......................................................................................................................
<a href="#Section_81_4___this__in_Arrow_Fu">245</a></p>
<p><a href="#___calling_defined_functions">Section 81.5: Spread
Operator</a>
.................................................................................................................................
<a href="#___calling_defined_functions">246</a></p>
<p><span id="Chapter_82__Eventloop" class="anchor"></span><a
href="#chapter-82-eventloop">Chapter 82: Eventloop</a>
...........................................................................................................................................
<a href="#chapter-82-eventloop">247</a></p>
<p><a href="#chapter-82-eventloop">Section 82.1: How the concept of
event loop evolved</a>
...........................................................................................
<a href="#chapter-82-eventloop">247</a></p>
<p><span id="Chapter_83__Nodejs_History" class="anchor"></span><a
href="#chapter-83-nodejs-history">Chapter 83: Nodejs History</a>
.................................................................................................................................
<a href="#chapter-83-nodejs-history">249</a></p>
<p><a href="#chapter-83-nodejs-history">Section 83.1: Key events in each
year</a>
.....................................................................................................................
<a href="#chapter-83-nodejs-history">249</a></p>
<p><span id="Chapter_84__passport_js" class="anchor"></span><a
href="#chapter-84-passport.js">Chapter 84: passport.js</a>
........................................................................................................................................
<a href="#chapter-84-passport.js">252</a></p>
<p><a href="#chapter-84-passport.js">Section 84.1: Example of
LocalStrategy in passport.js</a>
..........................................................................................
<a href="#chapter-84-passport.js">252</a></p>
<p><span id="Chapter_85__Asynchronous_program" class="anchor"></span><a
href="#chapter-85-asynchronous-programming">Chapter 85: Asynchronous
programming</a>
...................................................................................................
<a href="#chapter-85-asynchronous-programming">253</a></p>
<p><a href="#chapter-85-asynchronous-programming">Section 85.1: Callback
functions</a>
...............................................................................................................................
<a href="#chapter-85-asynchronous-programming">253</a></p>
<p><a href="#fs_readFile____test_txt____utf8">Section 85.2: Callback
hell</a>
........................................................................................................................................
<a href="#fs_readFile____test_txt____utf8">255</a></p>
<p><a href="#_20">Section 85.3: Native Promises</a>
..................................................................................................................................
<a href="#_20">256</a></p>
<p><a href="#waiting">Section 85.4: Code example</a>
.....................................................................................................................................
<a href="#waiting">257</a></p>
<p><a href="#Section_85_5__Async_error_handli">Section 85.5: Async error
handling</a>
.........................................................................................................................
<a href="#Section_85_5__Async_error_handli">258</a></p>
<p><span id="Chapter_86__Node_js_code_for_STD" class="anchor"></span><a
href="#chapter-86-node.js-code-for-stdin-and">Chapter 86: Node.js code
for STDIN and STDOUT without using any library</a>
.......................... <a
href="#chapter-86-node.js-code-for-stdin-and">259</a></p>
<p><a href="#chapter-86-node.js-code-for-stdin-and">Section 86.1:
Program</a>
...............................................................................................................................................
<a href="#chapter-86-node.js-code-for-stdin-and">259</a></p>
<p><span id="Chapter_87__MongoDB_Integration" class="anchor"></span><a
href="#chapter-87-mongodb-integration-for">Chapter 87: MongoDB
Integration for Node.js/Express.js
..................................................................
260</a></p>
<p><a href="#chapter-87-mongodb-integration-for">Section 87.1:
Installing MongoDB</a>
.............................................................................................................................
<a href="#chapter-87-mongodb-integration-for">260</a></p>
<p><a href="#chapter-87-mongodb-integration-for">Section 87.2: Creating
a Mongoose Model</a>
.............................................................................................................
<a href="#chapter-87-mongodb-integration-for">260</a></p>
<p><a href="#attributes_can_be_used_instead_o">Section 87.3: Querying
your Mongo Database</a>
......................................................................................................
<a href="#attributes_can_be_used_instead_o">261</a></p>
<p><span id="Chapter_88__Lodash" class="anchor"></span><a
href="#chapter-88-lodash">Chapter 88: Lodash</a>
.................................................................................................................................................
<a href="#chapter-88-lodash">262</a></p>
<p><a href="#chapter-88-lodash">Section 88.1: Filter a collection</a>
.................................................................................................................................
<a href="#chapter-88-lodash">262</a></p>
<p><span id="Chapter_89__csv_parser_in_node_j" class="anchor"></span><a
href="#chapter-89-csv-parser-in-node-js">Chapter 89: csv parser in node
js
.....................................................................................................................
263</a></p>
<p><a href="#chapter-89-csv-parser-in-node-js">Section 89.1: Using FS to
read in a CSV</a>
..................................................................................................................
<a href="#chapter-89-csv-parser-in-node-js">263</a></p>
<p><span id="Chapter_90__Loopback___REST_Base" class="anchor"></span><a
href="#chapter-90-loopback---rest-based">Chapter 90: Loopback - REST
Based connector</a>
......................................................................................
<a href="#chapter-90-loopback---rest-based">264</a></p>
<p><a href="#chapter-90-loopback---rest-based">Section 90.1: Adding a
web based connector</a>
........................................................................................................
<a href="#chapter-90-loopback---rest-based">264</a></p>
<p><span id="Chapter_91__Running_node_js_as_a" class="anchor"></span><a
href="#chapter-91-running-node.js-as-a-service">Chapter 91: Running
node.js as a service</a>
.....................................................................................................
<a href="#chapter-91-running-node.js-as-a-service">266</a></p>
<p><a href="#chapter-91-running-node.js-as-a-service">Section 91.1:
Node.js as a systemd dæmon</a>
............................................................................................................
<a href="#chapter-91-running-node.js-as-a-service">266</a></p>
<p><span id="Chapter_92__Node_js_with_CORS" class="anchor"></span><a
href="#chapter-92-node.js-with-cors">Chapter 92: Node.js with CORS</a>
..........................................................................................................................
<a href="#chapter-92-node.js-with-cors">267</a></p>
<p><a href="#chapter-92-node.js-with-cors">Section 92.1: Enable CORS in
express.js</a>
..................................................................................................................
<a href="#chapter-92-node.js-with-cors">267</a></p>
<p><span id="Chapter_93__Getting_started_with" class="anchor"></span><a
href="#chapter-93-getting-started-with-nodes">Chapter 93: Getting
started with Nodes profiling</a>
...................................................................................
<a href="#chapter-93-getting-started-with-nodes">268</a></p>
<p><a href="#chapter-93-getting-started-with-nodes">Section 93.1:
Profiling a simple node application</a>
...................................................................................................
<a href="#chapter-93-getting-started-with-nodes">268</a></p>
<p><span id="Chapter_94__Node_js_Performance" class="anchor"></span><a
href="#chapter-94-node.js-performance">Chapter 94: Node.js
Performance</a>
...................................................................................................................
<a href="#chapter-94-node.js-performance">270</a></p>
<p><a href="#chapter-94-node.js-performance">Section 94.1: Enable
gzip</a>
..........................................................................................................................................
<a href="#chapter-94-node.js-performance">270</a></p>
<p><a href="#chapter-94-node.js-performance">Section 94.2: Event
Loop</a>
..........................................................................................................................................
<a href="#chapter-94-node.js-performance">270</a></p>
<p><a href="#Non_Blocking_IO_Operation_Exampl">Section 94.3: Increase
maxSockets</a>
.........................................................................................................................
<a href="#Non_Blocking_IO_Operation_Exampl">271</a></p>
<p><span id="Chapter_95__Yarn_Package_Manager" class="anchor"></span><a
href="#chapter-95-yarn-package-manager">Chapter 95: Yarn Package
Manager</a>
..............................................................................................................
<a href="#chapter-95-yarn-package-manager">273</a></p>
<p><a href="#chapter-95-yarn-package-manager">Section 95.1: Creating a
basic package</a>
..................................................................................................................
<a href="#chapter-95-yarn-package-manager">273</a></p>
<p><a href="#chapter-95-yarn-package-manager">Section 95.2: Yarn
Installation</a>
..................................................................................................................................
<a href="#chapter-95-yarn-package-manager">273</a></p>
<p><a href="#Example_using_yaourt">Section 95.3: Install package with
Yarn</a>
..................................................................................................................
<a href="#Example_using_yaourt">275</a></p>
<p><span id="Chapter_96__OAuth_2_0" class="anchor"></span><a
href="#chapter-96-oauth-2.0">Chapter 96: OAuth 2.0</a>
............................................................................................................................................
<a href="#chapter-96-oauth-2.0">276</a></p>
<p><a href="#chapter-96-oauth-2.0">Section 96.1: OAuth 2 with Redis
Implementation - grant_type: password</a>
........................................................ <a
href="#chapter-96-oauth-2.0">276</a></p>
<p><span id="Chapter_97__Node_JS_Localization" class="anchor"></span><a
href="#chapter-97-node-js-localization">Chapter 97: Node JS
Localization</a>
....................................................................................................................
<a href="#chapter-97-node-js-localization">282</a></p>
<p><a href="#chapter-97-node-js-localization">Section 97.1: using i18n
module to maintains localization in node js app
............................................................ 282</a></p>
<p><span id="Chapter_98__Deploying_Node_js_ap" class="anchor"></span><a
href="#chapter-98-deploying-node.js-application">Chapter 98: Deploying
Node.js application without downtime.</a>
....................................................... <a
href="#chapter-98-deploying-node.js-application">283</a></p>
<p><a href="#chapter-98-deploying-node.js-application">Section 98.1:
Deployment using PM2 without downtime
.......................................................................................
283</a></p>
<p><span id="Chapter_99__Node_js__express_js" class="anchor"></span><a
href="#chapter-99-node.js-express.js-with">Chapter 99: Node.js
(express.js) with angular.js Sample code</a>
......................................................... <a
href="#chapter-99-node.js-express.js-with">285</a></p>
<p><a href="#chapter-99-node.js-express.js-with">Section 99.1: Creating
our project
............................................................................................................................
285</a></p>
<p><span id="Chapter_100__NodeJs_Routing" class="anchor"></span><a
href="#chapter-100-nodejs-routing">Chapter 100: NodeJs Routing
.............................................................................................................................
288</a></p>
<p><a href="#chapter-100-nodejs-routing">Section 100.1: Express Web
Server Routing</a>
............................................................................................................
<a href="#chapter-100-nodejs-routing">288</a></p>
<p><span id="Chapter_101__Creating_a_Node_js" class="anchor"></span><a
href="#chapter-101-creating-a-node.js-library">Chapter 101: Creating a
Node.js Library that Supports Both Promises and Error-First</a></p>
<p><a
href="#chapter-101-creating-a-node.js-library"><strong>Callbacks</strong></a>
.......................................................................................................................................................................
<a href="#chapter-101-creating-a-node.js-library">292</a></p>
<p><a href="#chapter-101-creating-a-node.js-library">Section 101.1:
Example Module and Corresponding Program using Bluebird</a>
..................................................... <a
href="#chapter-101-creating-a-node.js-library">292</a></p>
<p><span id="Chapter_102__Project_Structure" class="anchor"></span><a
href="#chapter-102-project-structure">Chapter 102: Project Structure</a>
..........................................................................................................................
<a href="#chapter-102-project-structure">295</a></p>
<p><a href="#chapter-102-project-structure">Section 102.1: A simple
nodejs application with MVC and API</a>
..............................................................................
<a href="#chapter-102-project-structure">295</a></p>
<p><span id="Chapter_103__Avoid_callback_hell" class="anchor"></span><a
href="#chapter-103-avoid-callback-hell">Chapter 103: Avoid callback
hell</a>
.......................................................................................................................
<a href="#chapter-103-avoid-callback-hell">297</a></p>
<p><a href="#chapter-103-avoid-callback-hell">Section 103.1: Async
module</a>
.....................................................................................................................................
<a href="#chapter-103-avoid-callback-hell">297</a></p>
<p><a href="#chapter-103-avoid-callback-hell">Section 103.2: Async
Module</a>
....................................................................................................................................
<a href="#chapter-103-avoid-callback-hell">297</a></p>
<p><span id="Chapter_104__Arduino_communicati" class="anchor"></span><a
href="#chapter-104-arduino-communication-with">Chapter 104: Arduino
communication with nodeJs</a>
................................................................................
<a href="#chapter-104-arduino-communication-with">299</a></p>
<p><a href="#chapter-104-arduino-communication-with">Section 104.1: Node
Js communication with Arduino via serialport</a>
..................................................................... <a
href="#chapter-104-arduino-communication-with">299</a></p>
<p><span id="Chapter_105__N_API" class="anchor"></span><a
href="#chapter-105-n-api">Chapter 105: N-API</a>
...................................................................................................................................................
<a href="#chapter-105-n-api">301</a></p>
<p><a href="#chapter-105-n-api">Section 105.1: Hello to N-API</a>
.....................................................................................................................................
<a href="#chapter-105-n-api">301</a></p>
<p><span id="Chapter_106__Multithreading" class="anchor"></span><a
href="#chapter-106-multithreading">Chapter 106: Multithreading
................................................................................................................................
303</a></p>
<p><a href="#chapter-106-multithreading">Section 106.1: Cluster</a>
.................................................................................................................................................
<a href="#chapter-106-multithreading">303</a></p>
<p><a href="#chapter-106-multithreading">Section 106.2: Child
Process</a>
.....................................................................................................................................
<a href="#chapter-106-multithreading">303</a></p>
<p><span id="Chapter_107__Windows_authenticat" class="anchor"></span><a
href="#chapter-107-windows-authentication">Chapter 107: Windows
authentication under node.js</a>
............................................................................
<a href="#chapter-107-windows-authentication">305</a></p>
<p><a href="#chapter-107-windows-authentication">Section 107.1: Using
activedirectory</a>
........................................................................................................................
<a href="#chapter-107-windows-authentication">305</a></p>
<p><span id="Chapter_108__Require" class="anchor"></span><a
href="#chapter-108-require">Chapter 108: Require()</a>
...........................................................................................................................................
<a href="#chapter-108-require">306</a></p>
<p><a href="#chapter-108-require">Section 108.1: Beginning require() use
with a function and file</a>
............................................................................
<a href="#chapter-108-require">306</a></p>
<p><a href="#assigned_to_this_require_and_use">Section 108.2: Beginning
require() use with an NPM package</a>
.............................................................................
<a href="#assigned_to_this_require_and_use">307</a></p>
<p><span id="Chapter_109__Route_Controller_Se" class="anchor"></span><a
href="#chapter-109-route-controller-service">Chapter 109:
Route-Controller-Service structure for ExpressJS</a>
..................................................... <a
href="#chapter-109-route-controller-service">308</a></p>
<p><a href="#chapter-109-route-controller-service">Section 109.1:
Model-Routes-Controllers-Services Directory Structure</a>
............................................................... <a
href="#chapter-109-route-controller-service">308</a></p>
<p><a href="#chapter-109-route-controller-service">Section 109.2:
Model-Routes-Controllers-Services Code Structure</a>
..................................................................... <a
href="#chapter-109-route-controller-service">308</a></p>
<p><span id="Chapter_110__Push_notifications" class="anchor"></span><a
href="#chapter-110-push-notifications">Chapter 110: Push
notifications</a>
..........................................................................................................................
<a href="#chapter-110-push-notifications">310</a></p>
<p><a href="#chapter-110-push-notifications">Section 110.1: Web
notification
..................................................................................................................................
310</a></p>
<p><a href="#After_your_server_is_all_set_up">Section 110.2: Apple</a>
...................................................................................................................................................
<a href="#After_your_server_is_all_set_up">311</a></p>
<p><a href="#Appendix_A__Installing_Node_js"><strong>Appendix A:
Installing Node.js</strong></a>
............................................................................................................................
<a href="#Appendix_A__Installing_Node_js">312</a></p>
<p><a href="#Appendix_A__Installing_Node_js">Section A.1: Using Node
Version Manager (nvm)</a>
..................................................................................................
<a href="#Appendix_A__Installing_Node_js">312</a></p>
<p><a href="#Section_A_2__Installing_Node_js">Section A.2: Installing
Node.js on Mac using package manager</a>
.........................................................................
<a href="#Section_A_2__Installing_Node_js">313</a></p>
<p><a href="#Section_A_2__Installing_Node_js">Section A.3: Installing
Node.js on Windows</a>
............................................................................................................
<a href="#Section_A_2__Installing_Node_js">313</a></p>
<p><a href="#Section_A_4__Install_Node_js_on">Section A.4: Install
Node.js on Ubuntu</a>
....................................................................................................................
<a href="#Section_A_4__Install_Node_js_on">314</a></p>
<p><a href="#Section_A_4__Install_Node_js_on">Section A.5: Installing
Node.js with n</a>
.......................................................................................................................
<a href="#Section_A_4__Install_Node_js_on">314</a></p>
<p><a href="#Section_A_6__Install_Node_js_Fro">Section A.6: Install
Node.js From Source with APT package manager</a>
............................................................... <a
href="#Section_A_6__Install_Node_js_Fro">315</a></p>
<p><a href="#Section_A_6__Install_Node_js_Fro">Section A.7: Install
Node.js from source on Centos, RHEL and Fedora</a>
............................................................... <a
href="#Section_A_6__Install_Node_js_Fro">315</a></p>
<p><a href="#X___the_number_of_processor_core">Section A.8: Installing
with Node Version Manager under Fish Shell with Oh My Fish!</a>
...................................... <a
href="#X___the_number_of_processor_core">316</a></p>
<p><a href="#X___the_number_of_processor_core">Section A.9: Installing
Node.js on Raspberry PI</a>
.....................................................................................................
<a href="#X___the_number_of_processor_core">316</a></p>
<p><a href="#Credits"><strong>Credits</strong></a>
............................................................................................................................................................................
<a href="#Credits">318</a></p>
<p><a href="#You_may_also_like"><strong>You may also like</strong>
......................................................................................................................................................
323</a></p>
<p><span id="About" class="anchor"></span>About</p>
<p>Please feel free to share this PDF with anyone for free,</p>
<p>latest version of this book can be downloaded from:</p>
<p><a
href="https://goalkicker.com/NodeJSBook">https://goalkicker.com/NodeJSBook</a></p>
<p>This <em>Node.js Notes for Professionals</em> <a
href="https://archive.org/details/documentation-dump.7z">book is
compiled from Stack Overflow</a></p>
<p><a
href="https://archive.org/details/documentation-dump.7z">Documentation</a>,
the content is written by the beautiful people at Stack Overflow.</p>
<p>Text content is released under Creative Commons BY-SA, see credits at
the end</p>
<p>of this book whom contributed to the various chapters. Images may be
copyright</p>
<p>of their respective owners unless otherwise specified</p>
<p>This is an unofficial free book created for educational purposes and
is not</p>
<p>affiliated with official Node.js group(s) or company(s) nor Stack
Overflow. All</p>
<p>trademarks and registered trademarks are the property of their
respective</p>
<p>company owners</p>
<p>The information presented in this book is not guaranteed to be
correct nor</p>
<p>accurate, use at your own risk</p>
<p>Please send feedback and corrections to web@petercv.com</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 1</p>
<h2 id="chapter-1-getting-started-with-node.js">Chapter 1: Getting
started with Node.js</h2>
<p>Version Release Date</p>
<p><a href="https://nodejs.org/en/blog/release/v8.2.1/">v8.2.1</a>
2017-07-20</p>
<p><a href="https://nodejs.org/en/blog/release/v8.2.0/">v8.2.0</a>
2017-07-19</p>
<p><a href="https://nodejs.org/en/blog/release/v8.1.4/">v8.1.4</a>
2017-07-11</p>
<p><a href="https://nodejs.org/en/blog/release/v8.1.3/">v8.1.3</a>
2017-06-29</p>
<p>v8.1.2 2017-06-15</p>
<p>v8.1.1 2017-06-13</p>
<p>v8.1.0 2017-06-08</p>
<p>v8.0.0 2017-05-30</p>
<p>v7.10.0 2017-05-02</p>
<p>v7.9.0 2017-04-11</p>
<p>v7.8.0 2017-03-29</p>
<p>v7.7.4 2017-03-21</p>
<p>v7.7.3 2017-03-14</p>
<p>v7.7.2 2017-03-08</p>
<p>v7.7.1 2017-03-02</p>
<p>v7.7.0 2017-02-28</p>
<p>v7.6.0 2017-02-21</p>
<p>v7.5.0 2017-01-31</p>
<p>v7.4.0 2017-01-04</p>
<p>v7.3.0 2016-12-20</p>
<p>v7.2.1 2016-12-06</p>
<p>v7.2.0 2016-11-22</p>
<p>v7.1.0 2016-11-08</p>
<p>v7.0.0 2016-10-25</p>
<p>v6.11.0 2017-06-06</p>
<p>v6.10.3 2017-05-02</p>
<p>v6.10.2 2017-04-04</p>
<p>v6.10.1 2017-03-21</p>
<p>v6.10.0 2017-02-21</p>
<p>v6.9.5 2017-01-31</p>
<p>v6.9.4 2017-01-05</p>
<p>v6.9.3 2017-01-05</p>
<p>v6.9.2 2016-12-06</p>
<p>v6.9.1 2016-10-19</p>
<p>v6.9.0 2016-10-18</p>
<p>v6.8.1 2016-10-14</p>
<p>v6.8.0 2016-10-12</p>
<p>v6.7.0 2016-09-27</p>
<p>v6.6.0 2016-09-14</p>
<p>v6.5.0 2016-08-26</p>
<p>v6.4.0 2016-08-12</p>
<p>v6.3.1 2016-07-21</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 2</p>
<p>v6.3.0 2016-07-06</p>
<p>v6.2.2 2016-06-16</p>
<p>v6.2.1 2016-06-02</p>
<p>v6.2.0 2016-05-17</p>
<p>v6.1.0 2016-05-05</p>
<p>v6.0.0 2016-04-26</p>
<p>v5.12.0 2016-06-23</p>
<p>v5.11.1 2016-05-05</p>
<p>v5.11.0 2016-04-21</p>
<p>v5.10.1 2016-04-05</p>
<p>v5.10 2016-04-01</p>
<p>v5.9 2016-03-16</p>
<p>v5.8 2016-03-09</p>
<p>v5.7 2016-02-23</p>
<p>v5.6 2016-02-09</p>
<p>v5.5 2016-01-21</p>
<p>v5.4 2016-01-06</p>
<p>v5.3 2015-12-15</p>
<p>v5.2 2015-12-09</p>
<p>v5.1 2015-11-17</p>
<p>v5.0 2015-10-29</p>
<p>v4.4 2016-03-08</p>
<p>v4.3 2016-02-09</p>
<p>v4.2 2015-10-12</p>
<p>v4.1 2015-09-17</p>
<p>v4.0 2015-09-08</p>
<p>io.js v3.3 2015-09-02</p>
<p>io.js v3.2 2015-08-25</p>
<p>io.js v3.1 2015-08-19</p>
<p>io.js v3.0 2015-08-04</p>
<p>io.js v2.5 2015-07-28</p>
<p>io.js v2.4 2015-07-17</p>
<p>io.js v2.3 2015-06-13</p>
<p>io.js v2.2 2015-06-01</p>
<p>io.js v2.1 2015-05-24</p>
<p>io.js v2.0 2015-05-04</p>
<p>io.js v1.8 2015-04-21</p>
<p>io.js v1.7 2015-04-17</p>
<p>io.js v1.6 2015-03-20</p>
<p>io.js v1.5 2015-03-06</p>
<p>io.js v1.4 2015-02-27</p>
<p>io.js v1.3 2015-02-20</p>
<p>io.js v1.2 2015-02-11</p>
<p>io.js v1.1 2015-02-03</p>
<p>io.js v1.0 2015-01-14</p>
<p>v0.12 2016-02-09</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 3</p>
<p><span id="v0_11____2013_03_28" class="anchor"></span>v0.11
2013-03-28</p>
<p>v0.10 2013-03-11</p>
<p>v0.9 2012-07-20</p>
<p>v0.8 2012-06-22</p>
<p>v0.7 2012-01-17</p>
<p>v0.6 2011-11-04</p>
<p>v0.5 2011-08-26</p>
<p>v0.4 2011-08-26</p>
<p>v0.3 2011-08-26</p>
<p>v0.2 2011-08-26</p>
<p>v0.1 2011-08-26</p>
<p>Section 1.1: Hello World HTTP server</p>
<p>First, install Node.js for your platform.</p>
<p>In this example we'll create an HTTP server listening on port 1337,
which sends Hello, World! to the browser. Note</p>
<p>that, instead of using port 1337, you can use any port number of your
choice which is currently not in use by any</p>
<p>other service.</p>
<p>The http module is a Node.js <em><strong>core module</strong></em> (a
module included in Node.js's source, that does not require
installing</p>
<p>additional resources). The http module provides the functionality to
create an HTTP server using the</p>
<p><a
href="https://nodejs.org/api/http.html#http_http_createserver_requestlistener">http.createServer()</a>
method. To create the application, create a file containing the
following JavaScript code.</p>
<p><strong>const</strong> http = require('http'); <em>// Loads the http
module</em></p>
<p>http.createServer((request, response) =&gt; {</p>
<p>// 1. Tell the browser everything is OK (Status code 200), and the
data is in plain text</p>
<p>response.writeHead(200, {</p>
<p>'Content-Type': 'text/plain'</p>
<p>});</p>
<p>// 2. Write the announced text to the body of the page</p>
<p>response.write('Hello, World!<strong>\n</strong>');</p>
<p>// 3. Tell the server that all of the response headers and body have
been sent</p>
<p>response.end();</p>
<p><em>}).listen(1337);</em> // 4. Tells the server what port to be
on</p>
<p>Save the file with any file name. In this case, if we name it
hello.js we can run the application by going to the directory the file
is in and using the following command:</p>
<p>node hello.js</p>
<p><a href="#Top_of_index_html">The created server can then be accessed
with the URL http://localhost:1337 or</a> <a
href="http://127.0.0.1:1337">http://127.0.0.1:1337</a> in the
browser.</p>
<p>A simple web page will appear with a “Hello, World!” text at the top,
as shown in the screenshot below.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 4</p>
<p><span id="page_16" class="anchor"></span><img
src="media/index-16_1.jpeg" style="width:6.5in;height:3.625in"
alt="index-16_1.jpg" /></p>
<p><a href="https://glitch.com/edit/#!/node-hello-world">Editable online
example.</a></p>
<p>Section 1.2: Hello World command line</p>
<p>Node.js can also be used to create command line utilities. The
example below reads the first argument from the</p>
<p>command line and prints a Hello message.</p>
<p>To run this code on an Unix System:</p>
<p>1. Create a new file and paste the code below. The filename is
irrelevant.</p>
<p>2. Make this file executable with chmod 700 FILE_NAME</p>
<p>3. Run the app with ./APP_NAME David</p>
<p>On Windows you do step 1 and run it with node APP_NAME David</p>
<p>#!/usr/bin/env node</p>
<p>'use strict';</p>
<p>/*</p>
<p>The command line arguments are stored in the `process.argv`
array,</p>
<p>which has the following structure:</p>
<p>[0] The path of the executable that started the Node.js process</p>
<p>[1] The path to this application</p>
<p>[2-n] the command line arguments</p>
<p>Example: [ '/bin/node', '/path/to/yourscript', 'arg1', 'arg2', ...
]</p>
<p>src: https://nodejs.org/api/process.html#process_process_argv */</p>
<p>// Store the first argument as username.</p>
<p><strong>var</strong> username = process.argv[2];</p>
<p>// Check if the username hasn't been provided.</p>
<p><strong>if</strong> (!username) {</p>
<p>// Extract the filename</p>
<p><strong>var</strong> appName =
process.argv[1].split(require('path').sep).pop();</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 5</p>
<p><span id="____Give_the_user_an_example_on" class="anchor"></span>//
Give the user an example on how to use the app.</p>
<p>console.error('Missing argument! Example: %s YOUR_NAME',
appName);</p>
<p>// Exit the app (success: 0, error: 1).</p>
<p>// An error will stop the execution chain. For example: // ./app.js
&amp;&amp; ls -&gt; won't execute ls</p>
<p>// ./app.js David &amp;&amp; ls -&gt; will execute ls</p>
<p>process.exit(1);</p>
<p>}</p>
<p>// Print the message to the console.</p>
<p>console.log('Hello %s!', username);</p>
<p>Section 1.3: Hello World with Express</p>
<p>The following example uses Express to create an HTTP server listening
on port 3000, which responds with "Hello,</p>
<p>World!". Express is a commonly-used web framework that is useful for
creating HTTP APIs.</p>
<p>First, create a new folder, e.g. myApp. Go into myApp and make a new
JavaScript file containing the following code (let's name it hello.js
for example). Then install the express module using npm
<strong>install</strong>--save express from the</p>
<p><em>command line.</em> Refer to this documentation for more
information on how to install packages<em>.</em></p>
<p>// Import the top-level function of express</p>
<p><strong>const</strong> express = require('express');</p>
<p>// Creates an Express application using the top-level function
<em><strong>const</strong> app = express();</em></p>
<p>// Define port number as 3000</p>
<p><strong>const</strong> port = 3000;</p>
<p>// Routes HTTP GET requests to the specified path "/" with the
specified callback function <em>app.<strong>get</strong>('/',
<strong>function</strong>(request, response) {</em></p>
<p>response.send('Hello, World!');</p>
<p>});</p>
<p>// Make the app listen on port 3000</p>
<p>app.listen(port, <strong>function</strong>() {</p>
<p>console.log('Server listening on http://localhost:' + port); });</p>
<p>From the command line, run the following command:</p>
<p>node hello.js</p>
<p>Open your browser and navigate to http:<em>//localhost:3000</em> or
http:<em>//127.0.0.1:3000</em> to see the response.</p>
<p>For more information about the Express framework, you can check the
Web Apps With Express section</p>
<p>Section 1.4: Installing and Running Node.js</p>
<p>To begin, install Node.js on your development computer.</p>
<p><strong>Windows:</strong> Navigate to the <a
href="https://nodejs.org/en/download/">download page and download/run
the installer.</a></p>
<p><strong>Mac:</strong> Navigate to the <a
href="https://nodejs.org/en/download/">download page</a> and
download/run the installer. Alternatively, you can install Node via</p>
<p>Homebrew using brew install node. Homebrew is a command-line package
mananger for Macintosh, and more</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 6</p>
<p><span id="information_about_it_can_be_foun" class="anchor"></span><a
href="http://brew.sh/">information about it can be found on the Homebrew
website.</a></p>
<p><strong>Linux:</strong> Follow the instructions for your distro on
the <a href="https://nodejs.org/en/download/package-manager/">command
line installation page.</a></p>
<p>Running a Node Program</p>
<p>To run a Node.js program, simply run node app.js or nodejs app.js,
where app.js is the filename of your node</p>
<p>app source code. You do not need to include the .js suffix for Node
to find the script you'd like to run.</p>
<p>Alternatively under UNIX-based operating systems, a Node program may
be executed as a terminal script. To do so, it needs to begin with a
shebang pointing to the Node interpreter, such as #!/usr/bin/env node.
The file also has</p>
<p>to be set as executable, which can be done using chmod. Now the
script can be directly run from the command line.</p>
<p>Section 1.5: Debugging Your NodeJS Application</p>
<p>You can use the node-inspector. Run this command to install it via
npm:</p>
<p>npm <strong>install</strong>-g node-inspector</p>
<p>Then you can debug your application using</p>
<p>node-debug app.js</p>
<p><a href="https://github.com/node-inspector/node-inspector">The Github
repository can be found here:
https://github.com/node-inspector/node-inspector</a></p>
<p>Debugging natively</p>
<p>You can also debug node.js natively by starting it like this:</p>
<p>node debug your-script.js</p>
<p>To breakpoint your debugger exactly in a code line you want, use
this:</p>
<p>debugger;</p>
<p><a href="https://nodejs.org/api/debugger.html">For more information
see here.</a></p>
<p>In node.js 8 use the following command:</p>
<p>node --inspect-brk your-script.js</p>
<p>Then open about:<em>//inspect</em> in a recent version of Google
Chrome and select your Node script to get the debugging</p>
<p>experience of Chrome's DevTools.</p>
<p>Section 1.6: Hello World basic routing</p>
<p>Once you understand how to create an HTTP Server with node, it's
important to understand how to make it "do"</p>
<p>things based on the path that a user has navigated to. This
phenomenon is called, "routing".</p>
<p>The most basic example of this would be to check <strong>if</strong>
(request.url === 'some/path/here'), and then call a function that
responds with a new file.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 7</p>
<p><span id="An_example_of_this_can_be_seen_h" class="anchor"></span>An
example of this can be seen here:</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>function</strong> index (request, response) {</p>
<p>response.writeHead(200);</p>
<p>response.end('Hello, World!');</p>
<p>}</p>
<p>http.createServer(<strong>function</strong> (request, response) {</p>
<p><strong>if</strong> (request.url === '/') {</p>
<p><strong>return</strong> index(request, response);</p>
<p>}</p>
<p>response.writeHead(404);</p>
<p>response.end(http.STATUS_CODES[404]);</p>
<p>}).listen(1337);</p>
<p>If you continue to define your "routes" like this, though, you'll end
up with one massive callback function, and we</p>
<p>don't want a giant mess like that, so let's see if we can clean this
up.</p>
<p>First, let's store all of our routes in an object:</p>
<p><strong>var</strong> routes = {</p>
<p>'/': <strong>function</strong> index (request, response) {</p>
<p>response.writeHead(200);</p>
<p>response.end('Hello, World!');</p>
<p>},</p>
<p>'/foo': <strong>function</strong> foo (request, response) {</p>
<p>response.writeHead(200);</p>
<p>response.end('You are now viewing "foo"');</p>
<p>}</p>
<p>}</p>
<p>Now that we've stored 2 routes in an object, we can now check for
them in our main callback:</p>
<p>http.createServer(<strong>function</strong> (request, response) {</p>
<p><strong>if</strong> (request.url <strong>in</strong> routes) {</p>
<p><strong>return</strong> routes[request.url](request, response);</p>
<p>}</p>
<p>response.writeHead(404);</p>
<p>response.end(http.STATUS_CODES[404]);</p>
<p>}).listen(1337);</p>
<p>Now every time you try to navigate your website, it will check for
the existence of that path in your routes, and it will</p>
<p>call the respective function. If no route is found, the server will
respond with a 404 (Not Found).</p>
<p>And there you have it--routing with the HTTP Server API is very
simple.</p>
<p>Section 1.7: Hello World in the REPL</p>
<p>When called without arguments, Node.js starts a REPL
(Read-Eval-Print-Loop) also known as the “<em>Node shell</em>”.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 8</p>
<p><span id="At_a_command_prompt_type_node" class="anchor"></span>At a
command prompt type node.</p>
<p>$ node</p>
<p>&gt;</p>
<p>At the Node shell prompt &gt; type "Hello World!"</p>
<p>$ node</p>
<p>&gt; "Hello World!"</p>
<p>'Hello World!'</p>
<p>Section 1.8: Deploying your application online</p>
<p>When you deploy your app to a (Node.js-specific) hosted environment,
this environment usually offers a PORT-</p>
<p>environment variable that you can use to run your server on. Changing
the port number to process.env.PORT allows you to access the
application.</p>
<p>For example,</p>
<p>http.createServer(<strong>function</strong>(request, response) {</p>
<p>// your server code</p>
<p>}).listen(process.env.PORT);</p>
<p>Also, if you would like to access this offline while debugging, you
can use this:</p>
<p>http.createServer(<strong>function</strong>(request, response) {</p>
<p>// your server code</p>
<p>}).listen(process.env.PORT || 3000);</p>
<p>where 3000 is the offline port number.</p>
<p>Section 1.9: Core modules</p>
<p>Node.js is a Javascript engine (Google's V8 engine for Chrome,
written in C++) that allows to run Javascript outside</p>
<p>the browser. While numerous libraries are available for extending
Node's functionalities, the engine comes with a</p>
<p>set of <em>core modules</em> implementing basic functionalities.</p>
<p>There's currently 34 core modules included in Node:</p>
<p>[ 'assert',</p>
<p>'buffer',</p>
<p>'c/c++_addons',</p>
<p>'child_process',</p>
<p>'cluster',</p>
<p>'console',</p>
<p>'crypto',</p>
<p>'deprecated_apis',</p>
<p>'dns',</p>
<p>'domain',</p>
<p>'Events',</p>
<p>'fs',</p>
<p>'http',</p>
<p>'https',</p>
<p>'module',</p>
<p>'net',</p>
<p>'os',</p>
<p>'path',</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 9</p>
<p>'punycode',</p>
<p>'querystring',</p>
<p>'readline',</p>
<p>'repl',</p>
<p>'stream',</p>
<p>'string_decoder',</p>
<p>'timers',</p>
<p>'tls_(ssl)',</p>
<p>'tracing',</p>
<p>'tty',</p>
<p>'dgram',</p>
<p>'url',</p>
<p>'util',</p>
<p>'v8',</p>
<p>'vm',</p>
<p>'zlib' ]</p>
<p>This list was obtained from the Node documentation API <a
href="https://nodejs.org/api/all.html">https://nodejs.org/api/all.html
(JSON file:</a></p>
<p><a
href="https://nodejs.org/api/all.json">https://nodejs.org/api/all.json</a>).</p>
<p>All core modules at-a-glance</p>
<p>assert</p>
<p>The assert module provides a simple set of assertion tests that can
be used to test invariants.</p>
<p>buffer</p>
<p>Prior to the introduction of <a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Refer%0D%0Aence/Global_Objects/TypedArray">TypedArray
in ECMAScript 2015 (ES6), the JavaScript language had no mechanism
for</a></p>
<p>reading or manipulating streams of binary data. The Buffer class was
introduced as part of the Node.js API to make it possible to interact
with octet streams in the context of things like TCP streams and file
system operations.</p>
<p><a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array">Now
that</a> <a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArra%0D%0Ay">TypedArray</a>
has been added in ES6, the Buffer class implements the</p>
<p>Uin</p>
<p>t8Array</p>
<p>API in a manner that is more optimized and suitable for Node.js' use
cases.</p>
<p>c/c++_addons</p>
<p>Node.js Addons are dynamically-linked shared objects, written in C or
C++, that can be loaded into Node.js using</p>
<p>the require() function , and used just as if they were an ordinary
Node.js module. They are used primarily to</p>
<p>provide an interface between JavaScript running in Node.js and C/C++
libraries.</p>
<p>child_process</p>
<p>The child_process module provides the ability to spawn child
processes in a manner that is similar, but not identical, to
popen(3).</p>
<p>cluster</p>
<p>A single instance of Node.js runs in a single thread. To take
advantage of multi-core systems the user will sometimes want to launch a
cluster of Node.js processes to handle the load. The cluster module
allows you to</p>
<p>easily create child processes that all share server ports.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 10</p>
<p>console</p>
<p>The console module provides a simple debugging console that is
similar to the JavaScript console mechanism</p>
<p>provided by web browsers.</p>
<p>crypto</p>
<p>The crypto module provides cryptographic functionality that includes
a set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign and
verify functions.</p>
<p>deprecated_apis</p>
<p>Node.js may deprecate APIs when either: (a) use of the API is
considered to be unsafe, (b) an improved alternative API has been made
available, or (c) breaking changes to the API are expected in a future
major release.</p>
<p>dns</p>
<p>The dns module contains functions belonging to two different
categories:</p>
<p>1. Functions that use the underlying operating system facilities to
perform name resolution, and that do not</p>
<p>necessarily perform any network communication. This category contains
only one function: dns.lookup().</p>
<p>2. Functions that connect to an actual DNS server to perform name
resolution, and that <em>always</em> use the network</p>
<p>to perform DNS queries. This category contains all functions in the
dns module <em>except</em> dns.lookup().</p>
<p>domain</p>
<p><em><strong>This module is pending deprecation</strong></em>. Once a
replacement API has been finalized, this module will be fully</p>
<p>deprecated. Most end users should <strong>not</strong> have cause to
use this module. Users who absolutely must have the</p>
<p>functionality that domains provide may rely on it for the time being
but should expect to have to migrate to a different solution in the
future.</p>
<p>Events</p>
<p>Much of the Node.js core API is built around an idiomatic
asynchronous event-driven architecture in which certain kinds of objects
(called "emitters") periodically emit named events that cause Function
objects ("listeners") to be</p>
<p>called.</p>
<p>fs</p>
<p>File I/O is provided by simple wrappers around standard POSIX
functions. To use this module do require('fs'). All</p>
<p>the methods have asynchronous and synchronous forms.</p>
<p>http</p>
<p>The HTTP interfaces in Node.js are designed to support many features
of the protocol which have been traditionally difficult to use. In
particular, large, possibly chunk-encoded, messages. The interface is
careful to never buffer entire</p>
<p>requests or responses--the user is able to stream data.</p>
<p>https</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 11</p>
<p>HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is
implemented as a separate module.</p>
<p>module</p>
<p>Node.js has a simple module loading system. In Node.js, files and
modules are in one-to-one correspondence (each</p>
<p>file is treated as a separate module).</p>
<p>net</p>
<p>The net module provides you with an asynchronous network wrapper. It
contains functions for creating both</p>
<p>servers and clients (called streams). You can include this module
with require('net');.</p>
<p>os</p>
<p>The os module provides a number of operating system-related utility
methods.</p>
<p>path</p>
<p>The path module provides utilities for working with file and
directory paths.</p>
<p>punycode</p>
<p>The version of the punycode module bundled in Node.js is being
deprecated<em><strong>.</strong></em></p>
<p>querystring</p>
<p>The querystring module provides utilities for parsing and formatting
URL query strings.</p>
<p>readline</p>
<p>The readline module provides an interface for reading data from a
Readable stream (such as process.stdin) one</p>
<p>line at a time.</p>
<p>repl</p>
<p>The repl module provides a Read-Eval-Print-Loop (REPL) implementation
that is available both as a standalone</p>
<p>program or includible in other applications.</p>
<p>stream</p>
<p>A stream is an abstract interface for working with streaming data in
Node.js. The stream module provides a base</p>
<p>API that makes it easy to build objects that implement the stream
interface.</p>
<p>There are many stream objects provided by Node.js. For instance, a
request to an HTTP server and process.stdout</p>
<p>are both stream instances.</p>
<p>string_decoder</p>
<p>The string_decoder module provides an API for decoding Buffer objects
into strings in a manner that preserves</p>
<p>encoded multi-byte UTF-8 and UTF-16 characters.</p>
<p>timers</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 12</p>
<p>The timer module exposes a global API for scheduling functions to be
called at some future period of time. Because the timer functions are
globals, there is no need to call require('timers') to use the API.</p>
<p>The timer functions within Node.js implement a similar API as the
timers API provided by Web Browsers but use a</p>
<p>different internal implementation that is built around <a
href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick">the
Node.js Event Loop</a>.</p>
<p>tls_(ssl)</p>
<p>The tls module provides an implementation of the Transport Layer
Security (TLS) and Secure Socket Layer (SSL) protocols that is built on
top of OpenSSL.</p>
<p>tracing</p>
<p>Trace Event provides a mechanism to centralize tracing information
generated by V8, Node core, and userspace code.</p>
<p>Tracing can be enabled by passing the --trace-events-enabled flag
when starting a Node.js application.</p>
<p>tty</p>
<p>The tty module provides the tty.ReadStream and tty.WriteStream
classes. In most cases, it will not be necessary or possible to use this
module directly.</p>
<p>dgram</p>
<p>The dgram module provides an implementation of UDP Datagram
sockets.</p>
<p>url</p>
<p>The url module provides utilities for URL resolution and parsing.</p>
<p>util</p>
<p>The util module is primarily designed to support the needs of
Node.js' own internal APIs. However, many of the</p>
<p>utilities are useful for application and module developers as
well.</p>
<p>v8</p>
<p>The v8 module exposes APIs that are specific to the version of <a
href="https://developers.google.com/v8/">V8</a> built into the Node.js
binary.</p>
<p><em>Note</em>: The APIs and implementation are subject to change at
any time.</p>
<p>vm</p>
<p>The vm module provides APIs for compiling and running code within V8
Virtual Machine contexts. JavaScript code</p>
<p>can be compiled and run immediately or compiled, saved, and run
later.</p>
<p><em>Note</em>: The vm module is not a security mechanism.
<em><strong>Do not use it to run untrusted code</strong></em>.</p>
<p>zlib</p>
<p>The zlib module provides compression functionality implemented using
Gzip and Deflate/Inflate.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 13</p>
<p><span id="Section_1_10__TLS_Socket__server"
class="anchor"></span>Section 1.10: TLS Socket: server and client</p>
<p>The only major differences between this and a regular TCP connection
are the private Key and the public certificate</p>
<p>that you’ll have to set into an option object.</p>
<p>How to Create a Key and Certificate</p>
<p>The first step in this security process is the creation of a private
Key. And what is this private key? Basically, it's a set of random noise
that's used to encrypt information. In theory, you could create one key,
and use it to encrypt</p>
<p>whatever you want. But it is best practice to have different keys for
specific things. Because if someone steals your private key, it's
similar to having someone steal your house keys. Imagine if you used the
same key to lock your car,</p>
<p>garage, office, etc.</p>
<p>openssl genrsa -out private-key.pem 1024</p>
<p>Once we have our private key, we can create a CSR (certificate
signing request), which is our request to have the private key signed by
a fancy authority. That is why you have to input information related to
your company. This</p>
<p>information will be seen by the signing authority, and used to verify
you. In our case, it doesn’t matter what you</p>
<p>type, since in the next step we're going to sign our certificate
ourselves.</p>
<p>openssl req -<strong>new</strong>-key private-key.pem-out csr.pem</p>
<p>Now that we have our paper work filled out, it's time to pretend that
we're a cool signing authority.</p>
<p>openssl x509 -req -<strong>in</strong> csr.pem-signkey
private-key.pem-out public-cert.pem</p>
<p>Now that you have the private key and the public cert, you can
establish a secure connection between two NodeJS apps. And, as you can
see in the example code, it is a very simple process.</p>
<p>Important!</p>
<p>Since we created the public cert ourselves, in all honesty, our
certificate is worthless, because we are nobodies. The NodeJS server
won't trust such a certificate by default, and that is why we need to
tell it to actually trust our cert</p>
<p>with the following option rejectUnauthorized: false. <strong>Very
important</strong>: never set this variable to true in a production</p>
<p>environment.</p>
<p>TLS Socket Server</p>
<p>'use strict';</p>
<p><strong>var</strong> tls = require('tls');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>const</strong> PORT = 1337;</p>
<p><strong>const</strong> HOST = '127.0.0.1'</p>
<p><strong>var</strong> options = {</p>
<p>key: fs.readFileSync('private-key.pem'),</p>
<p>cert: fs.readFileSync('public-cert.pem')</p>
<p>};</p>
<p><strong>var</strong> server = tls.createServer(options,
<strong>function</strong>(socket) {</p>
<p>// Send a friendly message</p>
<p>socket.write("I am the server sending you a message.");</p>
<p>// Print the data that we received</p>
<p>socket.on('data', <strong>function</strong>(data) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 14</p>
<p>console.log('Received: %s [it is %d bytes long]',</p>
<p>data.toString().replace(<em>/(\n)/gm</em>,""),</p>
<p>data.length);</p>
<p>});</p>
<p>// Let us know when the transmission is over</p>
<p>socket.on('end', <strong>function</strong>() {</p>
<p>console.log('EOT (End Of Transmission)');</p>
<p>});</p>
<p>});</p>
<p>// Start listening on a specific port and address</p>
<p>server.listen(PORT, HOST, <strong>function</strong>() {</p>
<p>console.log("I'm listening at %s, on port %s", HOST, PORT);</p>
<p>});</p>
<p>// When an error occurs, show it.</p>
<p>server.on('error', <strong>function</strong>(error) {</p>
<p>console.error(error);</p>
<p>// Close the connection after the error occurred.</p>
<p>server.destroy();</p>
<p>});</p>
<p>TLS Socket Client</p>
<p>'use strict';</p>
<p><strong>var</strong> tls = require('tls');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>const</strong> PORT = 1337;</p>
<p><strong>const</strong> HOST = '127.0.0.1'</p>
<p>// Pass the certs to the server and let it know to process even
unauthorized certs. <em><strong>var</strong> options = {</em></p>
<p>key: fs.readFileSync('private-key.pem'),</p>
<p>cert: fs.readFileSync('public-cert.pem'),</p>
<p>rejectUnauthorized: <strong>false</strong></p>
<p>};</p>
<p><strong>var</strong> client = tls.connect(PORT, HOST, options,
<strong>function</strong>() {</p>
<p>// Check if the authorization worked</p>
<p><strong>if</strong> (client.authorized) {</p>
<p>console.log("Connection authorized by a Certificate Authority.");</p>
<p>} <strong>else</strong> {</p>
<p>console.log("Connection not authorized: " +
client.authorizationError)</p>
<p>}</p>
<p>// Send a friendly message</p>
<p>client.write("I am the client sending you a message.");</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 15</p>
<p><span id="client_on__data___function_data"
class="anchor"></span>client.on("data", <strong>function</strong>(data)
{</p>
<p>console.log('Received: %s [it is %d bytes long]',</p>
<p>data.toString().replace(<em>/(\n)/gm</em>,""),</p>
<p>data.length);</p>
<p>// Close the connection after receiving the message</p>
<p>client.end();</p>
<p>});</p>
<p>client.on('close', <strong>function</strong>() {</p>
<p>console.log("Connection closed");</p>
<p>});</p>
<p>// When an error ocoures, show it.</p>
<p>client.on('error', <strong>function</strong>(error) {</p>
<p>console.error(error);</p>
<p>// Close the connection after the error occurred.</p>
<p>client.destroy();</p>
<p>});</p>
<p>Section 1.11: How to get a basic HTTPS web server up and</p>
<p>running!</p>
<p>Once you have node.js installed on your system, you can just follow
the procedure below to get a basic web server running with support for
both HTTP and HTTPS!</p>
<p>Step 1 : Build a Certificate Authority</p>
<p>1. create the folder where you want to store your key &amp;
certificate :</p>
<p>mkdir conf</p>
<p>2. go to that directory :</p>
<p><strong>cd</strong> conf</p>
<p>3. grab this ca.cnf file to use as a configuration shortcut :</p>
<p><em>wget
https:</em>//raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/ca.cnf</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 16</p>
<p>4. create a new certificate authority using this configuration :</p>
<p>openssl req -<strong>new</strong>-x509 -days 9999-config
ca.cnf-keyout ca-key.pem-out ca-cert.pem</p>
<p>5. now that we have our certificate authority in ca-key.pem and
ca-cert.pem, let's generate a private key for</p>
<p>the server :</p>
<p>openssl genrsa -out key.pem 4096</p>
<p>6. grab this server.cnf file to use as a configuration shortcut :</p>
<p><em>wget
https:</em>//raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/server.cnf</p>
<p>7. generate the certificate signing request using this configuration
:</p>
<p>openssl req -<strong>new</strong>-config server.cnf-key key.pem-out
csr.pem</p>
<p>8. sign the request :</p>
<p>openssl x509 -req -extfile server.cnf-days 999-passin
"pass:password"-<strong>in</strong> csr.pem-CA ca-cert.pem-CAkey
ca-key.pem-CAcreateserial -out cert.pem</p>
<p>Step 2 : Install your certificate as a root certificate</p>
<p>1. copy your certificate to your root certificates' folder :</p>
<p><strong>sudo cp</strong> ca-crt.pem
<strong>/</strong>usr<strong>/</strong>local<strong>/</strong>share<strong>/</strong>ca-certificates<strong>/</strong>ca-crt.pem</p>
<p>2. update CA store :</p>
<p><strong>sudo</strong> update-ca-certificates</p>
<p>Step 3 : Starting your node server</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 17</p>
<p>First, you want to create a server.js file that contains your actual
server code.</p>
<p>The minimal setup for an HTTPS server in Node.js would be something
like this :</p>
<p><strong>var</strong> https = require('https');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> httpsOptions = {</p>
<p>key: fs.readFileSync('path/to/server-key.pem'),</p>
<p>cert: fs.readFileSync('path/to/server-crt.pem')</p>
<p>};</p>
<p><strong>var</strong> app = <strong>function</strong> (req, res) {</p>
<p>res.writeHead(200);</p>
<p>res.end("hello world<strong>\n</strong>");</p>
<p>}</p>
<p>https.createServer(httpsOptions, app).listen(4433);</p>
<p>If you also want to support http requests, you need to make just this
small modification :</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> https = require('https');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> httpsOptions = {</p>
<p>key: fs.readFileSync('path/to/server-key.pem'),</p>
<p>cert: fs.readFileSync('path/to/server-crt.pem')</p>
<p>};</p>
<p><strong>var</strong> app = <strong>function</strong> (req, res) {</p>
<p>res.writeHead(200);</p>
<p>res.end("hello world<strong>\n</strong>");</p>
<p>}</p>
<p>http.createServer(app).listen(8888);</p>
<p>https.createServer(httpsOptions, app).listen(4433);</p>
<p>1. go to the directory where your server.js is located :</p>
<p><strong>cd /</strong>path<strong>/</strong>to</p>
<p>2. run server.js :</p>
<p>node server.js</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 18</p>
<h2 id="chapter-2-npm">Chapter 2: npm</h2>
<p>Parameter Example</p>
<p><a href="https://docs.npmjs.com/cli/access">access</a> npm publish
--access=public</p>
<p><a href="https://docs.npmjs.com/cli/bin">bin</a> npm bin -g</p>
<p><a href="https://docs.npmjs.com/cli/edit">edit</a> npm edit
connect</p>
<p><a href="https://docs.npmjs.com/cli/help">help</a> npm
<strong>help</strong> init</p>
<p><a href="https://docs.npmjs.com/cli/init">init</a> npm init</p>
<p><a href="https://docs.npmjs.com/cli/install">install</a> npm
<strong>install</strong></p>
<p><a href="https://docs.npmjs.com/cli/link">link</a> npm
<strong>link</strong></p>
<p><a href="https://docs.npmjs.com/cli/prune">prune</a> npm
<strong>prune</strong></p>
<p><a href="https://docs.npmjs.com/cli/publish">publish</a> npm publish
.<strong>/</strong></p>
<p><a href="https://docs.npmjs.com/cli/restart">restart</a> npm
restart</p>
<p><a href="https://docs.npmjs.com/cli/start">start</a> npm
<strong>start</strong></p>
<p><a href="https://docs.npmjs.com/cli/stop">stop</a> npm
<strong>start</strong></p>
<p><a href="https://docs.npmjs.com/cli/update">update</a> npm update</p>
<p><a href="https://docs.npmjs.com/cli/version">version</a> npm
version</p>
<p>Node Package Manager (npm) provides following two main
functionalities: Online repositories for node.js packages/modules which
are searchable on search.nodejs.org. Command line utility to install
Node.js packages, do</p>
<p>version management and dependency management of Node.js packages.</p>
<p>Section 2.1: Installing packages</p>
<p>Introduction</p>
<p>Package is a term used by npm to denote tools that developers can use
for their projects. This includes everything</p>
<p>from libraries and frameworks such as jQuery and AngularJS to task
runners such as Gulp.js. The packages will come in a folder typically
called node_modules, which will also contain a package.json file. This
file contains</p>
<p>information regarding all the packages including any dependencies,
which are additional modules needed to use a particular package.</p>
<p>Npm uses the command line to both install and manage packages, so
users attempting to use npm should be familiar with basic commands on
their operating system i.e.: traversing directories as well as being
able to see the</p>
<p>contents of directories.</p>
<p>Installing NPM</p>
<p>Note that in order to install packages, you must have NPM
installed.</p>
<p><a href="https://nodejs.org/en/download/">The recommended way to
install NPM is to use one of the installers from the Node.js download
page. You can</a></p>
<p>check to see if you already have node.js installed by running either
the npm -v or the npm version command.</p>
<p>After installing NPM via the Node.js installer, be sure to check for
updates. This is because NPM gets updated more</p>
<p>frequently than the Node.js installer. To check for updates run the
following command:</p>
<p>npm <strong>install</strong> npm<strong>@</strong>latest -g</p>
<p>How to install packages</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 19</p>
<p>To install one or more packages use the following:</p>
<p>npm <strong>install
&lt;</strong>package-name<strong>&gt;</strong></p>
<p># or</p>
<p>npm i <strong>&lt;</strong>package-name<strong>&gt;</strong>...</p>
<p># e.g. to install lodash and express</p>
<p>npm <strong>install</strong> lodash express</p>
<p><strong>Note</strong>: This will install the package in the directory
that the command line is currently in, thus it is</p>
<p>important to check whether the appropriate directory has been
chosen</p>
<p>If you already have a package.json file in your current working
directory and dependencies are defined in it, then</p>
<p>npm <strong>install</strong> will automatically resolve and install
all dependencies listed in the file. You can also use the shorthand
version of the npm <strong>install</strong> command which is: npm i</p>
<p>If you want to install a specific version of a package use:</p>
<p>npm <strong>install
&lt;</strong>name<strong>&gt;@&lt;</strong>version<strong>&gt;</strong></p>
<p># e.g. to install version 4.11.1 of the package lodash <em>npm
<strong>install</strong> lodash<strong>@</strong>4.11.1</em></p>
<p>If you want to install a version which matches a specific version
range use:</p>
<p>npm <strong>install
&lt;</strong>name<strong>&gt;@&lt;</strong>version
range<strong>&gt;</strong></p>
<p># e.g. to install a version which matches "version &gt;= 4.10.1" and
"version &lt; 4.11.1" # of the package lodash</p>
<p>npm <strong>install</strong> lodash<strong>@</strong>"&gt;=4.10.1
&lt;4.11.1"</p>
<p>If you want to install the latest version use:</p>
<p>npm <strong>install &lt;</strong>name<strong>&gt;@</strong>latest</p>
<p>The above commands will search for packages in the central npm
repository at <a href="https://www.npmjs.com/">npmjs.com</a>. If you are
not looking to install from the npm registry, other options are
supported, such as:</p>
<p># packages distributed as a tarball</p>
<p><strong>npm</strong> install &lt;<strong>tarball</strong>
file&gt;</p>
<p>npm <strong>install &lt;</strong>tarball url<strong>&gt;</strong></p>
<p># packages available locally</p>
<p><strong>npm</strong> install &lt;local <strong>path</strong>&gt;</p>
<p># packages available as a git repository</p>
<p><strong>npm</strong> install &lt;git remote
<strong>url</strong>&gt;</p>
<p># packages available on GitHub</p>
<p>npm <strong>install
&lt;</strong>username<strong>&gt;/&lt;</strong>repository<strong>&gt;</strong></p>
<p># packages available as gist (need a package.json)</p>
<p>npm <strong>install</strong>
gist:<strong>&lt;</strong>gist-id<strong>&gt;</strong></p>
<p># packages from a specific repository</p>
<p>npm
<strong>install</strong>--registry=http:<strong>//</strong>myreg.mycompany.com
<strong>&lt;</strong>package name<strong>&gt;</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 20</p>
<p># packages from a related group of packages</p>
<p># See npm scope</p>
<p>npm <strong>install
@&lt;</strong>scope<strong>&gt;/&lt;</strong>name<strong>&gt;(@&lt;</strong>version<strong>&gt;)</strong></p>
<p># Scoping is useful for separating private packages hosted on private
registry from # public ones by setting registry for specific scope
<em>npm config <strong>set @</strong>mycompany:registry
http:<strong>//</strong>myreg.mycompany.com npm <strong>install
@</strong>mycompany<strong>/&lt;</strong>package
name<strong>&gt;</strong></em></p>
<p>Usually, modules will be installed locally in a folder named
node_modules, which can be found in your current</p>
<p>working directory. This is the directory require() will use to load
modules in order to make them available to you.</p>
<p>If you already created a package.json file, you can use the --save
(shorthand -S) option or one of its variants to</p>
<p>automatically add the installed package to your package.json as a
dependency. If someone else installs your package, npm will
automatically read dependencies from the package.json file and install
the listed versions. Note</p>
<p>that you can still add and manage your dependencies by editing the
file later, so it's usually a good idea to keep track of dependencies,
for example using:</p>
<p><em>npm <strong>install</strong>--save
<strong>&lt;</strong>name<strong>&gt;</strong></em> # Install
dependencies</p>
<p># or</p>
<p><em>npm <strong>install</strong>-S
<strong>&lt;</strong>name<strong>&gt;</strong></em> # shortcut version
--save</p>
<p># or</p>
<p>npm i -S <strong>&lt;</strong>name<strong>&gt;</strong></p>
<p>In order to install packages and save them only if they are needed
for development, not for running them, not if</p>
<p>they are needed for the application to run, follow the following
command:</p>
<p><em>npm <strong>install</strong>--save-dev
<strong>&lt;</strong>name<strong>&gt;</strong></em> # Install
dependencies for development purposes # or</p>
<p><em>npm <strong>install</strong>-D
<strong>&lt;</strong>name<strong>&gt;</strong></em> # shortcut version
--save-dev</p>
<p># or</p>
<p>npm i -D <strong>&lt;</strong>name<strong>&gt;</strong></p>
<p>Installing dependencies</p>
<p>Some modules do not only provide a library for you to use, but they
also provide one or more binaries which are</p>
<p>intended to be used via the command line. Although you can still
install those packages locally, it is often preferred to install them
globally so the command-line tools can be enabled. In that case, npm
will automatically link the</p>
<p>binaries to appropriate paths (e.g. /usr/local/bin/) so they can be
used from the command line. To install a package globally, use:</p>
<p>npm <strong>install</strong>--global
<strong>&lt;</strong>name<strong>&gt;</strong></p>
<p># or</p>
<p>npm <strong>install</strong>-g
<strong>&lt;</strong>name<strong>&gt;</strong></p>
<p># or</p>
<p>npm i -g <strong>&lt;</strong>name<strong>&gt;</strong></p>
<p># e.g. to install the grunt command line tool</p>
<p>npm <strong>install</strong>-g grunt-cli</p>
<p>If you want to see a list of all the installed packages and their
associated versions in the current workspace, use:</p>
<p>npm list</p>
<p>npm list <strong>&lt;</strong>name<strong>&gt;</strong></p>
<p>Adding an optional name argument can check the version of a specific
package.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 21</p>
<p><span id="Note__If_you_run_into_permission"
class="anchor"></span><strong>Note:</strong> If you run into permission
issues while trying to install an npm module globally, resist the
temptation to issue</p>
<p>a <strong>sudo</strong> npm <strong>install</strong>-g ... to
overcome the issue. Granting third-party scripts to run on your system
with</p>
<p>elevated privileges is dangerous. The permission issue might mean
that you have an issue with the way npm itself was installed. If you're
interested in installing Node in sandboxed user environments, you might
want to try using</p>
<p><a href="https://github.com/creationix/nvm">nvm</a>.</p>
<p>If you have build tools, or other development-only dependencies (e.g.
Grunt), you might not want to have them</p>
<p>bundled with the application you deploy. If that's the case, you'll
want to have it as a development dependency, which is listed in the
package.json under devDependencies. To install a package as a
development-only</p>
<p>dependency, use --save-dev (or -D).</p>
<p>npm <strong>install</strong>--save-dev
<strong>&lt;</strong>name<strong>&gt; //</strong> Install development
dependencies <strong>which</strong> is not included <strong>in</strong>
production</p>
<p># or</p>
<p>npm <strong>install</strong>-D
<strong>&lt;</strong>name<strong>&gt;</strong></p>
<p>You will see that the package is then added to the devDependencies of
your package.json.</p>
<p>To install dependencies of a downloaded/cloned node.js project, you
can simply use</p>
<p><strong>npm</strong> install</p>
<p># or</p>
<p>npm i</p>
<p>npm will automatically read the dependencies from package.json and
install them.</p>
<p>NPM Behind A Proxy Server</p>
<p>If your internet access is through a proxy server, you might need to
modify npm install commands that access remote repositories. npm uses a
configuration file which can be updated via command line:</p>
<p>npm config <strong>set</strong></p>
<p>You can locate your proxy settings from your browser's settings
panel. Once you have obtained the proxy settings</p>
<p>(server URL, port, username and password); you need to configure your
npm configurations as follows.</p>
<p>$ npm config <strong>set</strong> proxy
http:<strong>//&lt;</strong>username<strong>&gt;</strong>:<strong>&lt;</strong>password<strong>&gt;@&lt;</strong>proxy-server-url<strong>&gt;</strong>:<strong>&lt;</strong>port<strong>&gt;</strong>
$ npm config <strong>set</strong> https-proxy
http:<strong>//&lt;</strong>username<strong>&gt;</strong>:<strong>&lt;</strong>password<strong>&gt;@&lt;</strong>proxy-server-url<strong>&gt;</strong>:<strong>&lt;</strong>port<strong>&gt;</strong></p>
<p>username , password, port fields are optional. Once you have set
these, your npm <strong>install</strong>, npm i -g etc. would work</p>
<p>properly.</p>
<p>Section 2.2: Uninstalling packages</p>
<p>To uninstall one or more locally installed packages, use:</p>
<p>npm uninstall <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>The uninstall command for npm has five aliases that can also be
used:</p>
<p>npm remove <strong>&lt;</strong>package name<strong>&gt;</strong></p>
<p>npm <strong>rm &lt;</strong>package name<strong>&gt;</strong></p>
<p>npm r <strong>&lt;</strong>package name<strong>&gt;</strong></p>
<p>npm <strong>unlink &lt;</strong>package name<strong>&gt;</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 22</p>
<p><span id="npm_un__package_name" class="anchor"></span>npm un
<strong>&lt;</strong>package name<strong>&gt;</strong></p>
<p>If you would like to remove the package from the package.json file as
part of the uninstallation, use the --save flag (shorthand: -S):</p>
<p>npm uninstall --save <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>npm uninstall -S <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>For a development dependency, use the --save-dev flag (shorthand:
-D):</p>
<p>npm uninstall --save-dev <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>npm uninstall -D <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>For an optional dependency, use the --save-optional flag (shorthand:
-O):</p>
<p>npm uninstall --save-optional <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>npm uninstall -O <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>For packages that are installed globally use the --global flag
(shorthand: -g):</p>
<p>npm uninstall -g <strong>&lt;</strong>package
name<strong>&gt;</strong></p>
<p>Section 2.3: Setting up a package configuration</p>
<p>Node.js package configurations are contained in a file called
package.json that you can find at the root of each</p>
<p>project. You can setup a brand new configuration file by calling:</p>
<p>npm init</p>
<p>That will try to read the current working directory for Git
repository information (if it exists) and environment variables to try
and autocomplete some of the placeholder values for you. Otherwise, it
will provide an input dialog</p>
<p>for the basic options.</p>
<p>If you'd like to create a package.json with default values use:</p>
<p>npm init --yes</p>
<p># or</p>
<p>npm init -y</p>
<p>If you're creating a package.json for a project that you are not
going to be publishing as an npm package (i.e. solely</p>
<p>for the purpose of rounding up your dependencies), you can convey
this intent in your package.json file:</p>
<p>1. Optionally set the private property to true to prevent accidental
publishing. 2. Optionally set the license property to "UNLICENSED" to
deny others the right to use your package.</p>
<p>To install a package and automatically save it to your package.json,
use:</p>
<p>npm <strong>install</strong>--save
<strong>&lt;</strong>package<strong>&gt;</strong></p>
<p>The package and associated metadata (such as the package version)
will appear in your dependencies. If you save if as a development
dependency (using --save-dev), the package will instead appear in your
devDependencies.</p>
<p>With this bare-bones package.json, you will encounter warning
messages when installing or upgrading packages, telling you that you are
missing a description and the repository field. While it is safe to
ignore these messages, you</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 23</p>
<p><span id="can_get_rid_of_them_by_opening_t" class="anchor"></span>can
get rid of them by opening the package.json in any text editor and
adding the following lines to the JSON object:</p>
<p>[...]</p>
<p>"description": "No description",</p>
<p>"repository": {</p>
<p>"private": <strong>true</strong></p>
<p>},</p>
<p>[...]</p>
<p>Section 2.4: Running scripts</p>
<p>You may define scripts in your package.json, for example:</p>
<p>{</p>
<p>"name": "your-package",</p>
<p>"version": "1.0.0",</p>
<p>"description": "",</p>
<p>"main": "index.js",</p>
<p>"author": "",</p>
<p>"license": "ISC",</p>
<p>"dependencies": {},</p>
<p>"devDependencies": {},</p>
<p>"scripts": {</p>
<p>"echo": "echo hello!"</p>
<p>}</p>
<p>}</p>
<p>To run the echo script, run npm run <strong>echo</strong> from the
command line. Arbitrary scripts, such as echo above, have to be be run
with npm run <strong>&lt;</strong>script name<strong>&gt;</strong>. npm
also has a number of official scripts that it runs at certain stages of
the</p>
<p>package's life (like preinstall). See <a
href="https://docs.npmjs.com/misc/scripts">here</a> for the entire
overview of how npm handles script fields.</p>
<p>npm scripts are used most often for things like starting a server,
building the project, and running tests. Here's a</p>
<p>more realistic example:</p>
<p>"scripts": {</p>
<p>"test": "mocha tests",</p>
<p>"start": "pm2 start index.js"</p>
<p>}</p>
<p>In the scripts entries, command-line programs like mocha will work
when installed either globally or locally. If the command-line entry
does not exist in the system PATH, npm will also check your locally
installed packages.</p>
<p>If your scripts become very long, they can be split into parts, like
this:</p>
<p>"scripts": <strong>{</strong></p>
<p>"very-complex-command": "npm run chain-1 &amp;&amp; npm run chain-2",
"chain-1": "webpack",</p>
<p>"chain-2": "node app.js"</p>
<p>}</p>
<p>Section 2.5: Basic semantic versioning</p>
<p>Before publishing a package you have to version it. npm supports <a
href="http://semver.org/">semantic versioning</a>, this means there are
<strong>patch,</strong></p>
<p>minor and major <strong>releases.</strong></p>
<p>For example, if your package is at version 1.2.3 to change version
you have to:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 24</p>
<p><span id="1__patch_release__npm_version_pa" class="anchor"></span>1.
patch release: npm version <strong>patch</strong> =&gt; 1.2.4</p>
<p>2. minor release: npm version minor =&gt; 1.3.0</p>
<p>3. major release: npm version major =&gt; 2.0.0</p>
<p>You can also specify a version directly with:</p>
<p>npm version 3.1.4 =&gt; 3.1.4</p>
<p>When you set a package version using one of the npm commands above,
npm will modify the version field of the</p>
<p>package.json file, commit it, and also create a new Git tag with the
version prefixed with a "v", as if you've issued the command:</p>
<p>git tag v3.1.4</p>
<p>Unlike other package managers like Bower, the npm registry doesn't
rely on Git tags being created for every version. But, if you like using
tags, you should remember to push the newly created tag after bumping
the package</p>
<p>version:</p>
<p>git push origin master (to push the change to package.json)</p>
<p>git push origin v3.1.4 (to push the new tag)</p>
<p>Or you can do this in one swoop with:</p>
<p>git push origin master --tags</p>
<p>Section 2.6: Publishing a package</p>
<p>First, make sure that you have configured your package (as said in
Setting up a package configuration​). Then, you</p>
<p>have to be logged in to npmjs.</p>
<p>If you already have a npm user</p>
<p><strong>npm</strong> login</p>
<p>If you don't have a user</p>
<p>npm adduser</p>
<p>To check that your user is registered in the current client</p>
<p>npm config <strong>ls</strong></p>
<p>After that, when your package is ready to be published use</p>
<p>npm publish</p>
<p>And you are done.</p>
<p>If you need to publish a new version, ensure that you update your
package version, as stated in Basic semantic versioning. Otherwise, npm
will not let you publish the package.</p>
<p>{</p>
<p>name: "package-name",</p>
<p>version: "1.0.4"</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 25</p>
<p><span class="anchor"></span>}</p>
<p>Section 2.7: Removing extraneous packages</p>
<p>To remove extraneous packages (packages that are installed but not in
dependency list) run the following command:</p>
<p><strong>npm</strong> prune</p>
<p>To remove all dev packages add --production flag:</p>
<p>npm <strong>prune</strong>--production</p>
<p><a href="https://docs.npmjs.com/cli/prune">More on it</a></p>
<p>Section 2.8: Listing currently installed packages</p>
<p>To generate a list (tree view) of currently installed packages,
use</p>
<p>npm list</p>
<p><strong>ls</strong>, <strong>la</strong> and <strong>ll</strong> are
aliases of <strong>list</strong> command. la and ll commands shows
extended information like description and</p>
<p>repository.</p>
<p>Options</p>
<p>The response format can be changed by passing options.</p>
<p>npm list --json</p>
<p><strong>json</strong> - Shows information in json format</p>
<p><strong>long</strong> - Shows extended information</p>
<p><strong>parseable</strong> - Shows parseable list instead of tree</p>
<p><strong>global</strong> - Shows globally installed packages</p>
<p><strong>depth</strong> - Maximum display depth of dependency tree</p>
<p><strong>dev</strong>/<strong>development</strong> - Shows
devDependencies</p>
<p><strong>prod</strong>/<strong>production</strong> - Shows
dependencies</p>
<p>If you want, you can also go to the package's home page.</p>
<p>npm home <strong>&lt;</strong>package name<strong>&gt;</strong></p>
<p>Section 2.9: Updating npm and packages</p>
<p>Since npm itself is a Node.js module, it can be updated using
itself.</p>
<p>If OS is Windows must be running command prompt as Admin</p>
<p>npm <strong>install</strong>-g npm<strong>@</strong>latest</p>
<p>If you want to check for updated versions you can do:</p>
<p>npm outdated</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 26</p>
<p><span id="In_order_to_update_a_specific_pa" class="anchor"></span>In
order to update a specific package:</p>
<p>npm update <strong>&lt;</strong>package name<strong>&gt;</strong></p>
<p>This will update the package to the latest version according to the
restrictions in package.json</p>
<p>In case you also want to lock the updated version in
package.json:</p>
<p>npm update <strong>&lt;</strong>package
name<strong>&gt;</strong>--save</p>
<p>Section 2.10: Scopes and repositories</p>
<p># Set the repository for the scope "myscope"</p>
<p>npm config <strong>set @</strong>myscope:registry
http:<strong>//</strong>registry.corporation.com</p>
<p><em># Login at a repository and associate it with the scope
"myscope"</em> npm adduser
--registry=http:<strong>//</strong>registry.corporation.com
--scope=<strong>@</strong>myscope</p>
<p># Install a package "mylib" from the scope "myscope" <em>npm
<strong>install @</strong>myscope<strong>/</strong>mylib</em></p>
<p>If the name of your own package starts with @myscope and the scope
"myscope" is associated with a different</p>
<p>repository, npm publish will upload your package to that repository
instead.</p>
<p>You can also persist these settings in a .npmrc file:</p>
<p><em>@myscope:registry=http:</em>//registry.corporation.com</p>
<p>//registry.corporation.com/:_authToken=xxxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxx</p>
<p>This is useful when automating the build on a CI server f.e.</p>
<p>Section 2.11: Linking projects for faster debugging and</p>
<p>development</p>
<p>Building project dependencies can sometimes be a tedious task.
Instead of publishing a package version to NPM</p>
<p>and installing the dependency to test the changes, use npm
<strong>link</strong>. npm <strong>link</strong> creates a symlink so
the latest code can be tested in a local environment. This makes testing
global tools and project dependencies easier by allowing the</p>
<p>latest code run before making a published version.</p>
<p>Help text</p>
<p>NAME</p>
<p>npm-link - Symlink a package folder</p>
<p>SYNOPSIS</p>
<p>npm <strong>link (in</strong> package <strong>dir)</strong></p>
<p>npm <strong>link
[&lt;@</strong>scope<strong>&gt;/]&lt;</strong>pkg<strong>&gt;[@&lt;</strong>version<strong>&gt;]</strong></p>
<p>alias: npm <strong>ln</strong></p>
<p>Steps for linking project dependencies</p>
<p>When creating the dependency link, note that the package name is what
is going to be referenced in the parent</p>
<p>project.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 27</p>
<p><span id="1__CD_into_a_dependency_director" class="anchor"></span>1.
CD into a dependency directory (ex: <strong>cd</strong>
..<strong>/</strong>my-dep)</p>
<p>2. npm <strong>link</strong></p>
<p>3. CD into the project that is going to use the dependency</p>
<p>4. npm <strong>link</strong> my-dep or if namespaced npm <strong>link
@</strong>namespace<strong>/</strong>my-dep</p>
<p>Steps for linking a global tool</p>
<p>1. CD into the project directory (ex: <strong>cd</strong>
eslint-watch)</p>
<p>2. npm <strong>link</strong></p>
<p>3. Use the tool</p>
<p>4. esw --quiet</p>
<p>Problems that may arise</p>
<p>Linking projects can sometimes cause issues if the dependency or
global tool is already installed. npm uninstall <strong>(</strong>-</p>
<p>g<strong>) &lt;</strong>pkg<strong>&gt;</strong> and then running npm
<strong>link</strong> normally resolves any issues that may arise.</p>
<p>Section 2.12: Locking modules to specific versions</p>
<p>By default, npm installs the latest available version of modules
according to each dependencies' semantic version.</p>
<p>This can be problematic if a module author doesn't adhere to semver
and introduces breaking changes in a module update, for example.</p>
<p>To lock down each dependencies' version (and the versions of their
dependencies, etc) to the specific version</p>
<p>installed locally in the node_modules folder, use</p>
<p>npm shrinkwrap</p>
<p>This will then create a npm-shrinkwrap.json alongside your
package.json which lists the specific versions of dependancies.</p>
<p>Section 2.13: Setting up for globally installed packages</p>
<p>You can use npm <strong>install</strong>-g to install a package
"globally." This is typically done to install an executable that you can
add to your path to run. For example:</p>
<p>npm <strong>install</strong>-g gulp-cli</p>
<p>If you update your path, you can call gulp directly.</p>
<p>On many OSes, npm <strong>install</strong>-g will attempt to write to
a directory that your user may not be able to write to such as /usr/bin.
You should <strong>not</strong> use <strong>sudo</strong> npm
<strong>install</strong> in this case since there is a possible security
risk of running</p>
<p>arbitrary scripts with sudo and the root user may create directories
in your home that you cannot write to which</p>
<p>makes future installations more difficult.</p>
<p>You can tell npm where to install global modules to via your
configuration file, ~/.npmrc. This is called the prefix</p>
<p>which you can view with npm prefix.</p>
<p>prefix=~/.npm-global-modules</p>
<p>This will use the prefix whenever you run npm
<strong>install</strong>-g. You can also use npm
<strong>install</strong>--prefix ~<strong>/</strong>.npm-global-modules
to set the prefix when you install. If the prefix is the same as your
configuration, you don't need to</p>
<p>use -g.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 28</p>
<p>In order to use the globally installed module, it needs to be on your
path:</p>
<p>export PATH=$PATH:~/.npm-global-modules/bin</p>
<p>Now when you run npm <strong>install</strong>-g gulp-cli you will be
able to use gulp.</p>
<p><strong>Note:</strong> When you npm <strong>install</strong> (without
-g) the prefix will be the directory with package.json or the
current</p>
<p>directory if none is found in the hierarchy. This also creates a
directory node_modules/.bin that has the</p>
<p>executables. If you want to use an executable that is specific to a
project, it's not necessary to use npm <strong>install</strong>-g.</p>
<p>You can use the one in node_modules/.bin.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 29</p>
<h2 id="chapter-3-web-apps-with-express">Chapter 3: Web Apps With
Express</h2>
<p>Parameter Details</p>
<p>path Specifies the path portion or the URL that the given callback
will handle.</p>
<p>One or more functions which will be called before the callback.
Essentially a chaining of multiple</p>
<p>middleware callback functions. Useful for more specific handling for
example authorization or error</p>
<p>handling.</p>
<p>callback A function that will be used to handle requests to the
specified path. It will be called like</p>
<p>callback(request, response, next), where request, response, and next
are described below.</p>
<p><em>callback</em> request An object encapsulating details about the
HTTP request that the callback is being called to handle.</p>
<p>response An object that is used to specify how the server should
respond to the request.</p>
<p>next A callback that passes control on to the next matching route. It
accepts an optional error object.</p>
<p>Express is a minimal and flexible Node.js web application framework,
providing a robust set of features for building web applications.</p>
<p><a href="http://expressjs.com">The official website of Express is
expressjs.com. The source can be found</a> <a
href="https://github.com/strongloop/express">on GitHub.</a></p>
<p>Section 3.1: Getting Started</p>
<p>You will first need to create a directory, access it in your shell
and install Express using npm by running npm <strong>install</strong>
express --save</p>
<p>Create a file and name it app.js and add the following code which
creates a new Express server and adds one endpoint to it (/ping) with
the app.<strong>get</strong> method:</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p>app.<strong>get</strong>('/ping', (request, response) =&gt; {</p>
<p>response.send('pong');</p>
<p>});</p>
<p>app.listen(8080, 'localhost');</p>
<p>To run your script use the following command in your shell:</p>
<p>&gt; node app.js</p>
<p>Your application will accept connections on localhost port 8080. If
the hostname argument to app.listen is omitted, then server will accept
connections on the machine's IP address as well as localhost. If port
value is 0, the</p>
<p>operating system will assign an available port.</p>
<p>Once your script is running, you can test it in a shell to confirm
that you get the expected response, "pong", from</p>
<p>the server:</p>
<p><em>&gt; curl http:</em>//localhost:8080/ping</p>
<p>pong</p>
<p>You can also open a web browser, navigate to the url <a
href="#Top_of_index_html">http://localhost:8080/ping to view the
output</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 30</p>
<p><span id="Section_3_2__Basic_routing" class="anchor"></span>Section
3.2: Basic routing</p>
<p>First create an express app:</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p>Then you can define routes like this:</p>
<p>app.<strong>get</strong>('/someUri', <strong>function</strong> (req,
res, next) {})</p>
<p>That structure works for all HTTP methods, and expects a path as the
first argument, and a handler for that path, which receives the request
and response objects. So, for the basic HTTP methods, these are the
routes</p>
<p>// GET www.domain.com/myPath</p>
<p>app.<strong>get</strong>('/myPath', <strong>function</strong> (req,
res, next) {})</p>
<p>// POST www.domain.com/myPath</p>
<p>app.post('/myPath', <strong>function</strong> (req, res, next)
{})</p>
<p>// PUT www.domain.com/myPath</p>
<p>app.put('/myPath', <strong>function</strong> (req, res, next) {})</p>
<p>// DELETE www.domain.com/myPath</p>
<p>app.<strong>delete</strong>('/myPath', <strong>function</strong>
(req, res, next) {})</p>
<p><a href="http://expressjs.com/en/4x/api.html#app.METHOD">You can
check the complete list of supported verbs here. If you want to define
the same behavior for a route and all</a> HTTP methods, you can use:</p>
<p>app.all('/myPath', <strong>function</strong> (req, res, next) {})</p>
<p>or</p>
<p>app.use('/myPath', <strong>function</strong> (req, res, next) {})</p>
<p>or</p>
<p>app.use('*', <strong>function</strong> (req, res, next) {})</p>
<p>// * wildcard will route for all paths</p>
<p>You can chain your route definitions for a single path</p>
<p>app.route('/myPath')</p>
<p>.<strong>get</strong>(<strong>function</strong> (req, res, next)
{})</p>
<p>.post(<strong>function</strong> (req, res, next) {})</p>
<p>.put(<strong>function</strong> (req, res, next) {})</p>
<p>You can also add functions to any HTTP method. They will run before
the final callback and take the parameters</p>
<p>(req, res, next) as arguments.</p>
<p>// GET www.domain.com/myPath</p>
<p>app.<strong>get</strong>('/myPath', myFunction,
<strong>function</strong> (req, res, next) {})</p>
<p>Your final callbacks can be stored in an external file to avoid
putting too much code in one file:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 31</p>
<p><span id="___other_js" class="anchor"></span>// other.js</p>
<p>exports.doSomething = <strong>function</strong>(req, res, next)
{<em>/* do some stuff */</em>};</p>
<p>And then in the file containing your routes:</p>
<p><strong>const</strong> other = require('./other.js');</p>
<p>app.<strong>get</strong>('/someUri', myFunction,
other.doSomething);</p>
<p>This will make your code much cleaner.</p>
<p>Section 3.3: Modular express application</p>
<p>To make express web application modular use router factories:</p>
<p>Module:</p>
<p>// greet.js</p>
<p><strong>const</strong> express = require('express');</p>
<p>module.exports = <strong>function</strong>(options = {}) { <em>//
Router factory</em></p>
<p><strong>const</strong> router = express.Router();</p>
<p>router.<strong>get</strong>('/greet', (req, res, next) =&gt; {</p>
<p>res.end(options.greeting);</p>
<p>});</p>
<p><strong>return</strong> router;</p>
<p>};</p>
<p>Application:</p>
<p>// app.js</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> greetMiddleware = require('./greet.js');</p>
<p>express()</p>
<p>.use('/api/v1/', greetMiddleware({ greeting:'Hello world' }))</p>
<p>.listen(8080);</p>
<p>This will make your application modular, customisable and your code
reusable.</p>
<p>When accessing http:<em>//&lt;hostname&gt;:8080/api/v1/greet</em> the
output will be Hello world</p>
<p>More complicated example</p>
<p>Example with services that shows middleware factory advantages.</p>
<p>Module:</p>
<p>// greet.js</p>
<p><strong>const</strong> express = require('express');</p>
<p>module.exports = <strong>function</strong>(options = {}) { <em>//
Router factory</em></p>
<p><strong>const</strong> router = express.Router();</p>
<p>// Get controller</p>
<p><strong>const</strong> {service} = options;</p>
<p>router.<strong>get</strong>('/greet', (req, res, next) =&gt; {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 32</p>
<p><span id="res_end" class="anchor"></span>res.end(</p>
<p>service.createGreeting(req.query.name || 'Stranger')</p>
<p>);</p>
<p>});</p>
<p><strong>return</strong> router;</p>
<p>};</p>
<p>Application:</p>
<p>// app.js</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> greetMiddleware = require('./greet.js');</p>
<p>class GreetingService {</p>
<p>constructor(greeting = 'Hello') {</p>
<p><strong>this</strong>.greeting = greeting;</p>
<p>}</p>
<p>createGreeting(name) {</p>
<p><strong>return</strong> `${<strong>this</strong>.greeting},
${name}!`;</p>
<p>}</p>
<p>}</p>
<p>express()</p>
<p>.use('/api/v1/service1', greetMiddleware({</p>
<p>service: <strong>new</strong> GreetingService('Hello'),</p>
<p>}))</p>
<p>.use('/api/v1/service2', greetMiddleware({</p>
<p>service: <strong>new</strong> GreetingService('Hi'),</p>
<p>}))</p>
<p>.listen(8080);</p>
<p>When accessing
http:<em>//&lt;hostname&gt;:8080/api/v1/service1/greet?name=World</em>
the output will be Hello, World</p>
<p><em>and accessing
http:</em>//&lt;hostname&gt;:8080/api/v1/service2/greet?name=World
<em>the output will be Hi, World.</em></p>
<p>Section 3.4: Using a Template Engine</p>
<p>Using a Template Engine</p>
<p>The following code will setup Jade as template engine. (Note: Jade
has been renamed to pug as of December 2015.)</p>
<p><em><strong>const</strong> express = require('express');</em>
//Imports the express module <em><strong>const</strong> app =
express();</em> //Creates an instance of the express module</p>
<p><em><strong>const</strong> PORT = 3000;</em> //Randomly chosen
port</p>
<p><em>app.<strong>set</strong>('view engine','jade');</em> //Sets jade
as the View Engine / Template Engine
<em>app.<strong>set</strong>('views','src/views');</em> //Sets the
directory where all the views (.jade files) are stored.</p>
<p>//Creates a Root Route</p>
<p>app.<strong>get</strong>('/',<strong>function</strong>(req, res){</p>
<p><em>res.render('index');</em> //renders the index.jade file into html
and returns as a response. The render function optionally takes the data
to pass to the view. <em>});</em></p>
<p>//Starts the Express server with a callback</p>
<p>app.listen(PORT, <strong>function</strong>(err) {</p>
<p><strong>if</strong> (!err) {</p>
<p>console.log('Server is running at port', PORT);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 33</p>
<p><span id="__else" class="anchor"></span>} <strong>else</strong> {</p>
<p>console.log(JSON.stringify(err));</p>
<p>}</p>
<p>});</p>
<p>Similarly, other Template Engines could be used too such as
Handlebars(hbs) or ejs. Remember to npm <strong>install</strong> the</p>
<p>Template Engine too. For Handlebars we use hbs package, for Jade we
have a jade package and for EJS, we have an ejs package.</p>
<p>EJS Template Example</p>
<p>With EJS (like other express templates), you can run server code and
access your server variables from you HTML. In EJS it's done using
"&lt;%" as start tag and "%&gt;" as end tag, variables passed as the
render params can be accessed</p>
<p>using &lt;%=var_name%<strong>&gt;</strong></p>
<p>For instance, if you have supplies array in your server code</p>
<p>you can loop over it using</p>
<p><strong>&lt;h1&gt;</strong>&lt;%= title
%<strong>&gt;&lt;/h1&gt;</strong></p>
<p>&lt;ul&gt;</p>
<p>&lt;% for(var i=0; i<strong>&lt;supplies.length</strong>; i++) {
%<strong>&gt;</strong></p>
<p>&lt;li&gt;</p>
<p><strong>&lt;a</strong> href='supplies/&lt;%= supplies[i]
%&gt;'<strong>&gt;</strong></p>
<p>&lt;%= supplies[i] %<strong>&gt;</strong></p>
<p>&lt;/a&gt;</p>
<p>&lt;/li&gt;</p>
<p>&lt;% } %<strong>&gt;</strong></p>
<p>As you can see in the example every time you switch between server
side code and HTML you need to close the current EJS tag and open a new
one later, here we wanted to create li inside the <strong>for</strong>
command so we needed to</p>
<p>close our EJS tag at the end of the <strong>for</strong> and create
new tag just for the curly brackets another example</p>
<p>if we want to put input default version to be a variable from the
server side we use &lt;%= for example:</p>
<p>Message:</p>
<p>Here the message variable passed from your server side will be the
default value of your input, please be noticed that if you didn't pass
message variable from your server side, EJS will throw an exception. You
can pass parameters</p>
<p>using res.render('index', {message: message}); (for ejs file called
index.ejs).</p>
<p>In the EJS tags you can also use if , while or any other javascript
command you want.</p>
<p>Section 3.5: JSON API with ExpressJS</p>
<p><strong>var</strong> express = require('express');</p>
<p><em><strong>var</strong> cors = require('cors');</em> // Use cors
module for enable Cross-origin resource sharing</p>
<p><strong>var</strong> app = express();</p>
<p>app.use(cors()); <em>// for all routes</em></p>
<p><strong>var</strong> port = process.env.PORT || 8080;</p>
<p>app.<strong>get</strong>('/', <strong>function</strong>(req, res)
{</p>
<p><strong>var</strong> info = {</p>
<p>'string_value': 'StackOverflow',</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 34</p>
<p><span id="_number_value___8476" class="anchor"></span>'number_value':
8476</p>
<p>}</p>
<p>res.json(info);</p>
<p>// or</p>
<p>/* res.send(JSON.stringify({</p>
<p>string_value: 'StackOverflow',</p>
<p>number_value: 8476</p>
<p>})) */</p>
<p>//you can add a status code to the json response</p>
<p>/* res.status(200).json(info) */</p>
<p>})</p>
<p>app.listen(port, <strong>function</strong>() {</p>
<p>console.log('Node.js listening on port ' + port)</p>
<p>})</p>
<p>On http:<em>//localhost:8080/</em> output object</p>
<p>{</p>
<p>string_value: "StackOverflow",</p>
<p>number_value: 8476</p>
<p>}</p>
<p>Section 3.6: Serving static files</p>
<p>When building a webserver with Express it's often required to serve a
combination of dynamic content and static files.</p>
<p>For example, you may have index.html and script.js which are static
files kept in the file system.</p>
<p>It is common to use folder named 'public' to have static files. In
this case the folder structure may look like:</p>
<p>project root</p>
<p>├── server.js</p>
<p>├── package.json</p>
<p>└── public</p>
<p>├── index.html</p>
<p>└── script.js</p>
<p>This is how to configure Express to serve static files:</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p>app.use(express.<strong>static</strong>('public'));</p>
<p>Note: once the folder is configured, index.html, script.js and all
the files in the "public" folder will be available in at</p>
<p>the root path (you must not specify /public/ in the url). This is
because, express looks up for the files relative to the static folder
configured. You can specify <em>virtual path prefix</em> as shown
below:</p>
<p>app.use('/static', express.<strong>static</strong>('public'));</p>
<p>will make the resources available under the /<strong>static</strong>/
prefix.</p>
<p>Multiple folders</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 35</p>
<p><span id="It_is_possible_to_define_multipl" class="anchor"></span>It
is possible to define multiple folders at the same time:</p>
<p>app.use(express.<strong>static</strong>('public'));</p>
<p>app.use(express.<strong>static</strong>('images'));</p>
<p>app.use(express.<strong>static</strong>('files'));</p>
<p>When serving the resources Express will examine the folder in
definition order. In case of files with the same name, the one in the
first matching folder will be served.</p>
<p>Section 3.7: Adding Middleware</p>
<p>Middleware functions are functions that have access to the request
object (req), the response object (res), and the</p>
<p>next middleware function in the application’s request-response
cycle.</p>
<p>Middleware functions can execute any code, make changes to res and
req objects, end response cycle and call next middleware.</p>
<p>Very common example of middleware is cors module. To add CORS
support, simply install it, require it and put this line:</p>
<p>app.use(cors());</p>
<p>before any routers or routing functions.</p>
<p>Section 3.8: Error Handling</p>
<p>Basic Error Handling</p>
<p>By default, Express will look for an 'error' view in the /views
directory to render. Simply create the 'error' view and place it in the
views directory to handle errors. Errors are written with the error
message, status and stack trace, for</p>
<p>example:</p>
<p>views/error.pug</p>
<p>html</p>
<p>body</p>
<p>h1= message</p>
<p>h2= error.status</p>
<p>p= error.stack</p>
<p>Advanced Error Handling</p>
<p>Define your error-handling middleware functions at the very end of
the middleware function stack. These have four arguments instead of
three (err, req, res, next) for example:</p>
<p>app.js</p>
<p>// catch 404 and forward to error handler</p>
<p>app.use(<strong>function</strong>(req, res, next) {</p>
<p><strong>var</strong> err = <strong>new</strong> Error('Not
Found');</p>
<p>err.status = 404;</p>
<p>//pass error to the next matching route.</p>
<p>next(err);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 36</p>
<p><span id="___handle_error__print_stacktrac" class="anchor"></span>//
handle error, print stacktrace</p>
<p>app.use(<strong>function</strong>(err, req, res, next) {</p>
<p>res.status(err.status || 500);</p>
<p>res.render('error', {</p>
<p>message: err.message,</p>
<p>error: err</p>
<p>});</p>
<p>});</p>
<p>You can define several error-handling middleware functions, just as
you would with regular middleware functions.</p>
<p>Section 3.9: Getting info from the request</p>
<p>To get info from the requesting url (notice that req is the request
object in the handler function of routes). Consider this route
definition <strong>/settings/:user_id</strong> and this particular
example <strong>/settings/32135?field=name</strong></p>
<p>// get the full path</p>
<p><em>req.originalUrl</em> // =&gt; /settings/32135?field=name</p>
<p>// get the user_id param</p>
<p>req.params.user_id <em>// =&gt; 32135</em></p>
<p>// get the query value of the field</p>
<p>req.query.field <em>// =&gt; 'name'</em></p>
<p>You can also get headers of the request, like this</p>
<p>req.<strong>get</strong>('Content-Type')</p>
<p>// "text/plain"</p>
<p>To simplify getting other info you can use middlewares. For example,
to get the body info of the request, you can</p>
<p><a href="https://github.com/expressjs/body-parser">use the
body-parser</a> middleware, which will transform raw request body into
usable format.</p>
<p><strong>var</strong> app = require('express')();</p>
<p><strong>var</strong> bodyParser = require('body-parser');</p>
<p><em>app.use(bodyParser.json());</em> // for parsing application/json
<em>app.use(bodyParser.urlencoded({ extended: <strong>true</strong>
}));</em> // for parsing application/x-www-form-urlencoded</p>
<p>Now suppose a request like this</p>
<p>PUT /settings/32135</p>
<p>{</p>
<p>"name": "Peter"</p>
<p>}</p>
<p>You can access the posted name like this</p>
<p>req.body.name</p>
<p>// "Peter"</p>
<p><a
href="https://github.com/expressjs/cookie-parser?_ga=1.220663448.1060402334.1435240424">In
a similar way, you can access cookies from the request, you also need a
middleware like cookie-parser</a></p>
<p>req.cookies.name</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 37</p>
<p><span id="Section_3_10__Error_handling_in"
class="anchor"></span>Section 3.10: Error handling in Express</p>
<p>In Express, you can define unified error handler for handling errors
occurred in application. Define then handler at</p>
<p>the end of all routes and logic code.</p>
<p>Example</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p>//GET /names/john</p>
<p>app.<strong>get</strong>('/names/:name',
<strong>function</strong>(req, res, next){</p>
<p><strong>if</strong> (req.params.name == 'john'){</p>
<p><strong>return</strong> res.send('Valid Name');</p>
<p><strong>}</strong> else<strong>{</strong></p>
<p>next(<strong>new</strong> Error('Not valid name')); <em>//pass to
error handler</em></p>
<p>}</p>
<p>});</p>
<p>//error handler</p>
<p>app.use(<strong>function</strong>(err, req, res, next){</p>
<p>console.log(err.stack); <em>// e.g., Not valid name</em></p>
<p><strong>return</strong> res.status(500).send('Internal Server
Occurred');</p>
<p>});</p>
<p>app.listen(3000);</p>
<p>Section 3.11: Hook: How to execute code before any req and</p>
<p>after any res</p>
<p>app.use() and middleware can be used for "before" and a combination
of the <a
href="https://nodejs.org/api/http.html#http_event_close_1">close</a> and
<a
href="https://nodejs.org/api/stream.html#stream_event_finish">finish</a>
events can be used for "after".</p>
<p>app.use(<strong>function</strong> (req, res, next) {</p>
<p><strong>function</strong> afterResponse() {</p>
<p>res.removeListener('finish', afterResponse);</p>
<p>res.removeListener('close', afterResponse);</p>
<p>// actions after response</p>
<p>}</p>
<p>res.on('finish', afterResponse);</p>
<p>res.on('close', afterResponse);</p>
<p>// action before request</p>
<p>// eventually calling `next()`</p>
<p>next();</p>
<p>});</p>
<p>...</p>
<p>app.use(app.router);</p>
<p><a href="http://www.senchalabs.org/connect/logger.html">An example of
this is the logger middleware, which will append to the log after the
response by default.</a></p>
<p>Just make sure this "middleware" is used before app.router as order
does matter.</p>
<p>Original post is <a
href="http://stackoverflow.com/questions/20175806/before-and-after-hooks-for-a-request-in-express-to-be-executed-before-any-req-a"><strong>here</strong></a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 38</p>
<p><span id="Section_3_12__Setting_cookies_wi"
class="anchor"></span>Section 3.12: Setting cookies with
cookie-parser</p>
<p><a href="https://github.com/expressjs/cookie-parser">The following is
an example for setting and reading cookies using the cookie-parser
module:</a></p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> cookieParser = require('cookie-parser'); <em>//
module for parsing cookies</em> <strong>var</strong> app =
express();</p>
<p>app.use(cookieParser());</p>
<p>app.<strong>get</strong>('/setcookie', <strong>function</strong>(req,
res){</p>
<p>// setting cookies</p>
<p>res.cookie('username', 'john doe', { maxAge: 900000, httpOnly:
<strong>true</strong> });</p>
<p><strong>return</strong> res.send('Cookie has been set');</p>
<p>});</p>
<p>app.<strong>get</strong>('/getcookie', <strong>function</strong>(req,
res) {</p>
<p><strong>var</strong> username = req.cookies['username'];</p>
<p><strong>if</strong> (username) {</p>
<p><strong>return</strong> res.send(username);</p>
<p>}</p>
<p><strong>return</strong> res.send('No cookie found');</p>
<p>});</p>
<p>app.listen(3000);</p>
<p>Section 3.13: Custom middleware in Express</p>
<p>In Express, you can define middlewares that can be used for checking
requests or setting some headers in response.</p>
<p>app.use(<strong>function</strong>(req, res, next){ }); <em>//
signature</em></p>
<p>Example</p>
<p>The following code adds user to the request object and pass the
control to the next matching route.</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p>//each request will pass through it</p>
<p>app.use(<strong>function</strong>(req, res, next){</p>
<p>req.user = 'testuser';</p>
<p><em>next();</em> // it will pass the control to next matching route
<em>});</em></p>
<p>app.<strong>get</strong>('/', <strong>function</strong>(req,
res){</p>
<p><strong>var</strong> user = req.user;</p>
<p>console.log(user); <em>// testuser</em></p>
<p><strong>return</strong> res.send(user);</p>
<p>});</p>
<p>app.listen(3000);</p>
<p>Section 3.14: Named routes in Django-style</p>
<p>One big problem is that valuable named routes is not supported by
Express out of the box. Solution is to install</p>
<p><a href="https://github.com/dizlexik/express-reverse">supported
third-party package, for example express-reverse:</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 39</p>
<p><span id="npm_install_express_reverse" class="anchor"></span>npm
<strong>install</strong> express-reverse</p>
<p>Plug it in your project:</p>
<p><strong>var</strong> app = require('express')();</p>
<p>require('express-reverse')(app);</p>
<p>Then use it like:</p>
<p>app.<strong>get</strong>('test', '/hello',
<strong>function</strong>(req, res) {</p>
<p>res.end('hello');</p>
<p>});</p>
<p>The downside of this approach is that you cant use route Express
module as shown in Advanced router usage. The workaround is to pass your
app as a parameter to you router factory:</p>
<p>require('./middlewares/routing')(app);</p>
<p>And use it like:</p>
<p>module.exports = (app) =&gt; {</p>
<p>app.<strong>get</strong>('test', '/hello',
<strong>function</strong>(req, res) {</p>
<p>res.end('hello');</p>
<p>});</p>
<p>};</p>
<p>You can figure it out from now on, how define functions to merge it
with specified custom namespaces and point at appropriate
controllers.</p>
<p>Section 3.15: Hello World</p>
<p>Here we create a basic hello world server using Express. Routes:</p>
<p>'/'</p>
<p>'/wiki'</p>
<p>And for rest will give "404" , i.e. page not found.</p>
<p>'use strict';</p>
<p><strong>const</strong> port = process.env.PORT || 3000;</p>
<p><strong>var</strong> app = require('express')();</p>
<p>app.listen(port);</p>
<p>app.<strong>get</strong>('/',(req,res)=&gt;res.send('HelloWorld!'));</p>
<p>app.<strong>get</strong>('/wiki',(req,res)=&gt;res.send('This is wiki
page.')); app.use((req,res)=&gt;res.send('404-PageNotFound'));</p>
<p><strong>Note:</strong> We have put 404 route as the last route as
Express stacks routes in order and processes them for each</p>
<p>request sequentially.</p>
<p>Section 3.16: Using middleware and the next callback</p>
<p>Express passes a next callback to every route handler and middleware
function that can be used to break logic for</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 40</p>
<p>single routes across multiple handlers. Calling next() with no
arguments tells express to continue to the next matching middleware or
route handler. Calling next(err) with an error will trigger any error
handler middleware.</p>
<p>Calling next('route') will bypass any subsequent middleware on the
current route and jump to the next matching</p>
<p>route. This allows domain logic to be decoupled into reusable
components that are self-contained, simpler to test, and easier to
maintain and change.</p>
<p>Multiple matching routes</p>
<p>Requests to /api/foo or to /api/bar will run the initial handler to
look up the member and then pass control to the actual handler for each
route.</p>
<p>app.<strong>get</strong>('/api', <strong>function</strong>(req, res,
next) {</p>
<p>// Both /api/foo and /api/bar will run this</p>
<p>lookupMember(<strong>function</strong>(err, member) {</p>
<p><strong>if</strong> (err) <strong>return</strong> next(err);</p>
<p>req.member = member;</p>
<p>next();</p>
<p>});</p>
<p>});</p>
<p>app.<strong>get</strong>('/api/foo', <strong>function</strong>(req,
res, next) {</p>
<p>// Only /api/foo will run this</p>
<p>doSomethingWithMember(req.member);</p>
<p>});</p>
<p>app.<strong>get</strong>('/api/bar', <strong>function</strong>(req,
res, next) {</p>
<p>// Only /api/bar will run this</p>
<p>doSomethingDifferentWithMember(req.member);</p>
<p>});</p>
<p>Error handler</p>
<p>Error handlers are middleware with the signature
<strong>function</strong>(err, req, res, next). They could be set up per
route</p>
<p>(e.g. app.<strong>get</strong>('/foo', <strong>function</strong>(err,
req, res, next)) but typically, a single error handler that renders an
error page is sufficient.</p>
<p>app.<strong>get</strong>('/foo', <strong>function</strong>(req, res,
next) {</p>
<p>doSomethingAsync(<strong>function</strong>(err, data) {</p>
<p><strong>if</strong> (err) <strong>return</strong> next(err);</p>
<p>renderPage(data);</p>
<p>});</p>
<p>});</p>
<p>// In the case that doSomethingAsync return an error, this special //
error handler middleware will be called with the error as the // first
parameter.</p>
<p>app.use(<strong>function</strong>(err, req, res, next) {</p>
<p>renderErrorPage(err);</p>
<p>});</p>
<p>Middleware</p>
<p>Each of the functions above is actually a middleware function that is
run whenever a request matches the route defined, but any number of
middleware functions can be defined on a single route. This allows
middleware to be</p>
<p>defined in separate files and common logic to be reused across
multiple routes.</p>
<p>app.<strong>get</strong>('/bananas', <strong>function</strong>(req,
res, next) {</p>
<p>getMember(<strong>function</strong>(err, member) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 41</p>
<p><span id="if__err__return_next_err"
class="anchor"></span><strong>if</strong> (err) <strong>return</strong>
next(err);</p>
<p>// If there's no member, don't try to look</p>
<p>// up data. Just go render the page now.</p>
<p><strong>if</strong> (!member) <strong>return</strong>
next('route');</p>
<p>// Otherwise, call the next middleware and fetch</p>
<p>// the member's data.</p>
<p>req.member = member;</p>
<p>next();</p>
<p>});</p>
<p>}, <strong>function</strong>(req, res, next) {</p>
<p>getMemberData(req.member, <strong>function</strong>(err, data) {</p>
<p><strong>if</strong> (err) <strong>return</strong> next(err);</p>
<p>// If this member has no data, don't bother</p>
<p>// parsing it. Just go render the page now.</p>
<p><strong>if</strong> (!data) <strong>return</strong>
next('route');</p>
<p>// Otherwise, call the next middleware and parse</p>
<p>// the member's data. THEN render the page.</p>
<p>req.member.data = data;</p>
<p>next();</p>
<p>});</p>
<p>}, <strong>function</strong>(req, res, next) {</p>
<p>req.member.parsedData = parseMemberData(req.member.data); next();</p>
<p>});</p>
<p>app.<strong>get</strong>('/bananas', <strong>function</strong>(req,
res, next) {</p>
<p>renderBananas(req.member);</p>
<p>});</p>
<p>In this example, each middleware function would be either in it's own
file or in a variable elsewhere in the file so</p>
<p>that it could be reused in other routes.</p>
<p>Section 3.17: Error handling</p>
<p>Basic docs can be found <a
href="http://expressjs.com/en/guide/error-handling.html"><strong>here</strong></a></p>
<p>app.<strong>get</strong>('/path/:id(<strong>\\</strong>d+)',
<strong>function</strong> (req, res, next) { <em>// please note: "next"
is passed</em></p>
<p><strong>if</strong> (req.params.id == 0) <em>// validate
param</em></p>
<p><em><strong>return</strong> next(<strong>new</strong> Error('Id is
0'));</em> // go to first Error handler, see below</p>
<p>// Catch error on sync operation</p>
<p><strong>var</strong> data;</p>
<p>try <strong>{</strong></p>
<p>data = JSON.parse('/file.json');</p>
<p>} <strong>catch</strong> (err) {</p>
<p><strong>return</strong> next(err);</p>
<p>}</p>
<p>// If some critical error then stop application</p>
<p><strong>if</strong> (!data)</p>
<p><strong>throw new</strong> Error('Smth wrong');</p>
<p>// If you need send extra info to Error handler</p>
<p>// then send custom error (see Appendix B)</p>
<p><strong>if</strong> (smth)</p>
<p>next(<strong>new</strong> MyError('smth wrong', arg1, arg2))</p>
<p>// Finish request by res.render or res.end</p>
<p>res.status(200).end('OK');</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 42</p>
<p><span id="___Be_sure__order_of_app_use_hav" class="anchor"></span>//
Be sure: order of app.use have matter</p>
<p>// Error handler</p>
<p>app.use(<strong>function</strong>(err, req, res, next)) {</p>
<p><strong>if</strong> (smth-check, e.g. req.url != 'POST')</p>
<p><em><strong>return</strong> next(err);</em> // go-to Error handler
2.</p>
<p>console.log(req.url, err.message);</p>
<p><em><strong>if</strong> (req.xhr)</em> // if req via ajax then send
json else render error-page <em>res.json(err);</em></p>
<p>else</p>
<p>res.render('error.html', {error: err.message}); });</p>
<p>// Error handler 2</p>
<p>app.use(<strong>function</strong>(err, req, res, next)) {</p>
<p>// do smth here e.g. check that error is MyError</p>
<p><strong>if</strong> (err <strong>instanceof</strong> MyError) {</p>
<p>console.log(err.message, err.arg1, err.arg2);</p>
<p>}</p>
<p>...</p>
<p>res.end();</p>
<p>});</p>
<p>Appendix A</p>
<p>// "In Express, 404 responses are not the result of an error, // so
the error-handler middleware will not capture them." // You can change
it.</p>
<p>app.use(<strong>function</strong>(req, res, next) {</p>
<p>next(<strong>new</strong> Error(404));</p>
<p>});</p>
<p>Appendix B</p>
<p>// How to define custom error</p>
<p><strong>var</strong> util = require('util');</p>
<p>...</p>
<p><strong>function</strong> MyError(message, arg1, arg2) {</p>
<p><strong>this</strong>.message = message;</p>
<p><strong>this</strong>.arg1 = arg1;</p>
<p><strong>this</strong>.arg2 = arg2;</p>
<p>Error.captureStackTrace(<strong>this</strong>, MyError);</p>
<p>}</p>
<p>util.inherits(MyError, Error);</p>
<p>MyError.<strong>prototype</strong>.name = 'MyError';</p>
<p>Section 3.18: Handling POST Requests</p>
<p>Just like you handle get requests in Express with app.get method, you
can use app.post method to handle post requests.</p>
<p>But before you can handle POST requests, you will need to use the
body-parser middleware. It simply parses the body of POST, PUT, DELETE
and other requests.</p>
<p>Body-Parser middleware parses the body of the request and turns it
into an object available in req.body</p>
<p><strong>var</strong> bodyParser = require('body-parser');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 43</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p>// Parses the body for POST, PUT, DELETE, etc.</p>
<p>app.use(bodyParser.json());</p>
<p>app.use(bodyParser.urlencoded({ extended: <strong>true</strong>
}));</p>
<p>app.post('/post-data-here', <strong>function</strong>(req, res,
next){</p>
<p><em>console.log(req.body);</em> // req.body contains the parsed body
of the request.</p>
<p>});</p>
<p>app.listen(8080, 'localhost');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 44</p>
<h2 id="chapter-4-filesystem-io">Chapter 4: Filesystem I/O</h2>
<p>Section 4.1: Asynchronously Read from Files</p>
<p>Use the filesystem module for all file operations:</p>
<p><strong>const</strong> fs = require('fs');</p>
<p>With Encoding</p>
<p>In this example, read hello.txt from the directory /tmp. This
operation will be completed in the background and</p>
<p>the callback occurs on completion or failure:</p>
<p>fs.readFile('/tmp/hello.txt', { encoding: 'utf8' }, (err, content)
=&gt; {</p>
<p>// If an error occurred, output it and return</p>
<p><strong>if</strong>(err) <strong>return</strong>
console.error(err);</p>
<p>// No error occurred, content is a string</p>
<p>console.log(content);</p>
<p>});</p>
<p>Without Encoding</p>
<p>Read the binary file binary.txt from the current directory,
asynchronously in the background. Note that we do not</p>
<p>set the 'encoding' option - this prevents Node.js from decoding the
contents into a string:</p>
<p>fs.readFile('binary', (err, binaryContent) =&gt; {</p>
<p>// If an error occurred, output it and return</p>
<p><strong>if</strong>(err) <strong>return</strong>
console.error(err);</p>
<p>// No error occurred, content is a Buffer, output it in //
hexadecimal representation.</p>
<p>console.log(content.toString('hex'));</p>
<p>});</p>
<p>Relative paths</p>
<p>Keep in mind that, in general case, your script could be run with an
arbitrary current working directory. To address</p>
<p>a file relative to the current script, use __dirname or
__filename:</p>
<p>fs.readFile(path.resolve(__dirname, 'someFile'), (err, binaryContent)
=&gt; {</p>
<p>//Rest of Function</p>
<p>}</p>
<p>Section 4.2: Listing Directory Contents with readdir or</p>
<p>readdirSync</p>
<p><strong>const</strong> fs = require('fs');</p>
<p>// Read the contents of the directory /usr/local/bin asynchronously.
// The callback will be invoked once the operation has either completed
// or failed.</p>
<p>fs.readdir('/usr/local/bin', (err, files) =&gt; {</p>
<p>// On error, show it and return</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 45</p>
<p><span id="if_err__return_console_error_err"
class="anchor"></span><strong>if</strong>(err) <strong>return</strong>
console.error(err);</p>
<p>// files is an array containing the names of all entries // in the
directory, excluding '.' (the directory itself) // and '..' (the parent
directory).</p>
<p>// Display directory entries</p>
<p>console.log(files.join(' '));</p>
<p>});</p>
<p>A synchronous variant is available as readdirSync which blocks the
main thread and therefore prevents execution of asynchronous code at the
same time. Most developers avoid synchronous IO functions in order to
improve</p>
<p>performance.</p>
<p><strong>let</strong> files;</p>
<p>try <strong>{</strong></p>
<p>files = fs.readdirSync('/var/tmp');</p>
<p>} <strong>catch</strong>(err) {</p>
<p>// An error occurred</p>
<p>console.error(err);</p>
<p>}</p>
<p>Using a generator</p>
<p><strong>const</strong> fs = require('fs');</p>
<p>// Iterate through all items obtained via</p>
<p>// 'yield' statements</p>
<p>// A callback is passed to the generator function because it is
required by // the 'readdir' method</p>
<p><strong>function</strong> run(gen) {</p>
<p><strong>var</strong> iter = gen((err, data) =&gt; {</p>
<p><strong>if</strong> (err) { iter.<strong>throw</strong>(err); }</p>
<p><strong>return</strong> iter.next(data);</p>
<p>});</p>
<p>iter.next();</p>
<p>}</p>
<p><strong>const</strong> dirPath = '/usr/local/bin';</p>
<p>// Execute the generator function</p>
<p>run(<strong>function</strong>* (resume) {</p>
<p>// Emit the list of files in the directory from the generator
<em><strong>var</strong> contents = yield fs.readdir(dirPath,
resume);</em></p>
<p>console.log(contents);</p>
<p>});</p>
<p>Section 4.3: Copying files by piping streams</p>
<p>This program copies a file using readable and a writable stream with
the pipe() function provided by the stream</p>
<p>class</p>
<p>// require the file system module</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>/*</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 46</p>
<p><span id="Create_readable_stream_to_file_i"
class="anchor"></span>Create readable stream to file in current
directory named 'node.txt'</p>
<p>Use utf8 encoding</p>
<p>Read the data in 16-kilobyte chunks</p>
<p>*/</p>
<p><strong>var</strong> readable = fs.createReadStream(__dirname +
'/node.txt', { encoding: 'utf8', highWaterMark: 16 * 1024 });</p>
<p>// create writable stream</p>
<p><strong>var</strong> writable = fs.createWriteStream(__dirname +
'/nodePipe.txt');</p>
<p>// use pipe to copy readable to writable</p>
<p>readable.pipe(writable);</p>
<p>Section 4.4: Reading from a file synchronously</p>
<p>For any file operations, you will need the filesystem module:</p>
<p><strong>const</strong> fs = require('fs');</p>
<p>Reading a String</p>
<p>fs.readFileSync behaves similarly to fs.readFile, but does not take a
callback as it completes synchronously and therefore blocks the main
thread. Most node.js developers prefer the asynchronous variants which
will cause</p>
<p>virtually no delay in the program execution.</p>
<p>If an encoding option is specified, a string will be returned,
otherwise a Buffer will be returned.</p>
<p>// Read a string from another file synchronously</p>
<p><strong>let</strong> content;</p>
<p>try <strong>{</strong></p>
<p>content = fs.readFileSync('sync.txt', { encoding: 'utf8' }); }
<strong>catch</strong>(err) {</p>
<p>// An error occurred</p>
<p>console.error(err);</p>
<p>}</p>
<p>Section 4.5: Check Permissions of a File or Directory</p>
<p>fs.access() determines whether a path exists and what permissions a
user has to the file or directory at that path.</p>
<p>fs.access doesn't return a result rather, if it doesn't return an
error, the path exists and the user has the desired permissions.</p>
<p>The permission modes are available as a property on the fs object,
fs.constants</p>
<p>fs.constants.F_OK - Has read/write/execute permissions (If no mode is
provided, this is the default)</p>
<p>fs.constants.R_OK - Has read permissions</p>
<p>fs.constants.W_OK - Has write permissions</p>
<p>fs.constants.X_OK - Has execute permissions (Works the same as
fs.constants.F_OK on Windows)</p>
<p>Asynchronously</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> path = '/path/to/check';</p>
<p>// checks execute permission</p>
<p>fs.access(path, fs.constants.X_OK, (err) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>console.log("%s doesn't exist", path);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 47</p>
<p><span id="__else_1" class="anchor"></span>} <strong>else</strong>
{</p>
<p>console.log('can execute %s', path);</p>
<p>}</p>
<p>});</p>
<p>// Check if we have read/write permissions</p>
<p>// When specifying multiple permission modes</p>
<p>// each mode is separated by a pipe : `|`</p>
<p>fs.access(path, fs.constants.R_OK | fs.constants.W_OK, (err) =&gt;
{</p>
<p><strong>if</strong> (err) {</p>
<p>console.log("%s doesn't exist", path);</p>
<p>} <strong>else</strong> {</p>
<p>console.log('can read/write %s', path);</p>
<p>}</p>
<p>});</p>
<p>Synchronously</p>
<p>fs.access also has a synchronous version fs.accessSync. When using
fs.accessSync you must enclose it within a</p>
<p>try/catch block.</p>
<p>// Check write permission</p>
<p>try <strong>{</strong></p>
<p>fs.accessSync(path, fs.constants.W_OK);</p>
<p>console.log('can write %s', path);</p>
<p>}</p>
<p><strong>catch</strong> (err) {</p>
<p>console.log("%s doesn't exist", path);</p>
<p>}</p>
<p>Section 4.6: Checking if a file or a directory exists</p>
<p>Asynchronously</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>fs.stat('path/to/file', <strong>function</strong>(err) {</p>
<p><strong>if</strong> (!err) {</p>
<p>console.log('file or directory exists');</p>
<p>}</p>
<p><strong>else if</strong> (err.code === 'ENOENT') {</p>
<p>console.log('file or directory does not exist');</p>
<p>}</p>
<p>});</p>
<p>Synchronously</p>
<p>here, we must wrap the function call in a
<strong>try</strong>/<strong>catch</strong> block to handle error.</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>try <strong>{</strong></p>
<p>fs.statSync('path/to/file');</p>
<p>console.log('file or directory exists');</p>
<p>}</p>
<p><strong>catch</strong> (err) {</p>
<p><strong>if</strong> (err.code === 'ENOENT') {</p>
<p>console.log('file or directory does not exist');</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 48</p>
<p><span id="Section_4_7__Determining_the_lin"
class="anchor"></span>Section 4.7: Determining the line count of a text
file</p>
<p>app.js</p>
<p><strong>const</strong> readline = require('readline');</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>var</strong> file = 'path.to.file';</p>
<p><strong>var</strong> linesCount = 0;</p>
<p><strong>var</strong> rl = readline.createInterface({</p>
<p>input: fs.createReadStream(file),</p>
<p>output: process.stdout,</p>
<p>terminal: <strong>false</strong></p>
<p>});</p>
<p>rl.on('line', <strong>function</strong> (line) {</p>
<p><em>linesCount++;</em> // on each linebreak, add +1 to 'linesCount'
<em>});</em></p>
<p>rl.on('close', <strong>function</strong> () {</p>
<p><em>console.log(linesCount);</em> // print the result when the
'close' event is called <em>});</em></p>
<p>Usage:</p>
<p>node app</p>
<p>Section 4.8: Reading a file line by line</p>
<p>app.js</p>
<p><strong>const</strong> readline = require('readline');</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>var</strong> file = 'path.to.file';</p>
<p><strong>var</strong> rl = readline.createInterface({</p>
<p>input: fs.createReadStream(file),</p>
<p>output: process.stdout,</p>
<p>terminal: <strong>false</strong></p>
<p>});</p>
<p>rl.on('line', <strong>function</strong> (line) {</p>
<p><em>console.log(line)</em> // print the content of the line on each
linebreak <em>});</em></p>
<p>Usage:</p>
<p>node app</p>
<p>Section 4.9: Avoiding race conditions when creating or using</p>
<p>an existing directory</p>
<p>Due to Node's asynchronous nature, creating or using a directory by
first:</p>
<p>1. checking for its existence with fs.stat(), then</p>
<p>2. creating or using it depending of the results of the existence
check,</p>
<p><a
href="https://www.wikiwand.com/en/Race_condition#/File_systems">can lead
to a race condition if the folder is created between the time of the
check and the time of the creation. The</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 49</p>
<p><span id="method_below_wraps_fs_mkdir___an"
class="anchor"></span>method below wraps fs.mkdir() and fs.mkdirSync()
in error-catching wrappers that let the exception pass if its code is
EEXIST (already exists). If the error is something else, like EPERM
(pemission denied), throw or pass an error</p>
<p>like the native functions do.</p>
<p>Asynchronous version with fs.mkdir()</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>function</strong> mkdir (dirPath, callback) {</p>
<p>fs.mkdir(dirPath, (err) =&gt; {</p>
<p>callback(err &amp;&amp; err.code !== 'EEXIST' ? err :
<strong>null</strong>);</p>
<p>});</p>
<p>}</p>
<p>mkdir('./existingDir', (err) =&gt; {</p>
<p><strong>if</strong> (err)</p>
<p><strong>return</strong> console.error(err.code);</p>
<p>// Do something with `./existingDir` here</p>
<p>});</p>
<p>Synchronous version with fs.mkdirSync()</p>
<p><strong>function</strong> mkdirSync (dirPath) {</p>
<p>try <strong>{</strong></p>
<p>fs.mkdirSync(dirPath);</p>
<p>} <strong>catch</strong>(e) {</p>
<p><strong>if</strong> ( e.code !== 'EEXIST' ) <strong>throw</strong>
e;</p>
<p>}</p>
<p>}</p>
<p>mkdirSync('./existing-dir');</p>
<p>// Do something with `./existing-dir` now</p>
<p>Section 4.10: Cloning a file using streams</p>
<p>This program illustrates how one can copy a file using readable and
writable streams using the createReadStream(), and createWriteStream()
functions provided by the file system module.</p>
<p>//Require the file System module</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>/*</p>
<p>Create readable stream to file in current directory (__dirname) named
'node.txt' Use utf8 encoding</p>
<p>Read the data in 16-kilobyte chunks</p>
<p>*/</p>
<p><strong>var</strong> readable = fs.createReadStream(__dirname +
'/node.txt', { encoding: 'utf8', highWaterMark: 16 * 1024 });</p>
<p>// create writable stream</p>
<p><strong>var</strong> writable = fs.createWriteStream(__dirname +
'/nodeCopy.txt');</p>
<p>// Write each chunk of data to the writable stream</p>
<p>readable.on('data', <strong>function</strong>(chunk) {</p>
<p>writable.write(chunk);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 50</p>
<p><span id="_1" class="anchor"></span>});</p>
<p>Section 4.11: Writing to a file using writeFile or writeFileSync</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>// Save the string "Hello world!" in a file called "hello.txt" in //
the directory "/tmp" using the default encoding (utf8). // This
operation will be completed in background and the callback // will be
called when it is either done or failed.
<em>fs.writeFile('/tmp/hello.txt', 'Hello world!',
<strong>function</strong>(err) {</em></p>
<p>// If an error occurred, show it and return</p>
<p><strong>if</strong>(err) <strong>return</strong>
console.error(err);</p>
<p>// Successfully wrote to the file!</p>
<p>});</p>
<p>// Save binary data to a file called "binary.txt" in the current //
directory. Again, the operation will be completed in background.
<em><strong>var</strong> buffer = <strong>new</strong> Buffer([ 0x48,
0x65, 0x6c, 0x6c, 0x6f ]); fs.writeFile('binary.txt', buffer,
<strong>function</strong>(err) {</em></p>
<p>// If an error occurred, show it and return</p>
<p><strong>if</strong>(err) <strong>return</strong>
console.error(err);</p>
<p>// Successfully wrote binary contents to the file!</p>
<p>});</p>
<p>fs.writeFileSync behaves similarly to fs.writeFile, but does not take
a callback as it completes synchronously</p>
<p>and therefore blocks the main thread. Most node.js developers prefer
the asynchronous variants which will cause virtually no delay in the
program execution.</p>
<p>Note: Blocking the main thread is bad practice in node.js.
Synchronous function should only be used when debugging or when no other
options are availables.</p>
<p>// Write a string to another file and set the file mode to 0755
<em><strong>try</strong> {</em></p>
<p>fs.writeFileSync('sync.txt', 'anni', { mode: 0o755 }); }
<strong>catch</strong>(err) {</p>
<p>// An error occurred</p>
<p>console.error(err);</p>
<p>}</p>
<p>Section 4.12: Changing contents of a text file</p>
<p>Example. It will be replacing the word email to a name in a text file
index.txt with simple RegExp replace(<em>/email/gim</em>, 'name')</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>fs.readFile('index.txt', 'utf-8', <strong>function</strong>(err,
data) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>var</strong> newValue = data.replace(<em>/email/gim</em>,
'name');</p>
<p>fs.writeFile('index.txt', newValue, 'utf-8',
<strong>function</strong>(err, data) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log('Done!');</p>
<p>})</p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 51</p>
<p><span id="Section_4_13__Deleting_a_file_us"
class="anchor"></span>Section 4.13: Deleting a file using unlink or
unlinkSync</p>
<p>Delete a file asynchronously:</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>fs.unlink('/path/to/file.txt', <strong>function</strong>(err) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log('file deleted');</p>
<p>});</p>
<p>You can also delete it synchronously*:</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>fs.unlinkSync('/path/to/file.txt');</p>
<p>console.log('file deleted');</p>
<p>* avoid synchronous methods because they block the entire process
until the execution finishes.</p>
<p>Section 4.14: Reading a file into a Buer using streams</p>
<p>While reading content from a file is already asynchronous using the
fs.readFile() method, sometimes we want to get the data in a Stream
versus in a simple callback. This allows us to pipe this data to other
locations or to process</p>
<p>it as it comes in versus all at once at the end.</p>
<p><strong>const</strong> fs = require('fs');</p>
<p>// Store file data chunks in this array</p>
<p><strong>let</strong> chunks = [];</p>
<p>// We can use this variable to store the final data
<em><strong>let</strong> fileBuffer;</em></p>
<p>// Read file into stream.Readable</p>
<p><strong>let</strong> fileStream =
fs.createReadStream('text.txt');</p>
<p>// An error occurred with the stream</p>
<p>fileStream.once('error', (err) =&gt; {</p>
<p>// Be sure to handle this properly!</p>
<p>console.error(err);</p>
<p>});</p>
<p>// File is done being read</p>
<p>fileStream.once('end', () =&gt; {</p>
<p>// create the final data Buffer from data chunks;</p>
<p>fileBuffer = Buffer.concat(chunks);</p>
<p>// Of course, you can do anything else you need to here, like emit an
event!</p>
<p>});</p>
<p>// Data is flushed from fileStream in chunks,</p>
<p>// this callback will be executed for each chunk</p>
<p>fileStream.on('data', (chunk) =&gt; {</p>
<p><em>chunks.push(chunk);</em> // push data chunk to array</p>
<p>// We can perform actions on the partial data we have so far!</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 52</p>
<h2 id="chapter-5-exporting-and-consuming">Chapter 5: Exporting and
Consuming</h2>
<p>Modules</p>
<p>Section 5.1: Creating a hello-world.js module</p>
<p>Node provides the module.exports interface to expose functions and
variables to other files. The most simple way to do so is to export only
one object (function or variable), as shown in the first example.</p>
<p>hello-world.js</p>
<p>module.exports = <strong>function</strong>(subject) {</p>
<p>console.log('Hello ' + subject);</p>
<p>};</p>
<p>If we don't want the entire export to be a single object, we can
export functions and variables as properties of the</p>
<p>exports object. The three following examples all demonstrate this in
slightly different ways :</p>
<p>hello-venus.js : the function definition is done separately then
added as a property of module.exports</p>
<p>hello-jupiter.js : the functions definitions are directly put as the
value of properties of module.exports hello-mars.js : the function
definition is directly declared as a property of exports which is a
short version of module.exports</p>
<p>hello-venus.js</p>
<p><strong>function</strong> hello(subject) {</p>
<p>console.log('Venus says Hello ' + subject);</p>
<p>}</p>
<p>module.exports = {</p>
<p>hello: hello</p>
<p>};</p>
<p>hello-jupiter.js</p>
<p>module.exports = {</p>
<p>hello: <strong>function</strong>(subject) {</p>
<p>console.log('Jupiter says hello ' + subject);</p>
<p>},</p>
<p>bye: <strong>function</strong>(subject) {</p>
<p>console.log('Jupiter says goodbye ' + subject);</p>
<p>}</p>
<p>};</p>
<p>hello-mars.js</p>
<p>exports.hello = <strong>function</strong>(subject) {</p>
<p>console.log('Mars says Hello ' + subject);</p>
<p>};</p>
<p>Loading module with directory name</p>
<p>We have a directory named hello which includes the following
files:</p>
<p>index.js</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 53</p>
<p><span id="___hello_index_js" class="anchor"></span>//
hello/index.js</p>
<p>module.exports = <strong>function</strong>(){</p>
<p>console.log('Hej');</p>
<p>};</p>
<p>main.js</p>
<p>// hello/main.js</p>
<p>// We can include the other files we've defined by using the
`require()` method <em><strong>var</strong> hw =
require('./hello-world.js'),</em></p>
<p>hm = require('./hello-mars.js'),</p>
<p>hv = require('./hello-venus.js'),</p>
<p>hj = require('./hello-jupiter.js'),</p>
<p>hu = require('./index.js');</p>
<p>// Because we assigned our function to the entire `module.exports`
object, we // can use it directly</p>
<p><em>hw('World!');</em> // outputs "Hello World!"</p>
<p>// In this case, we assigned our function to the `hello` property of
exports, so we must // use that here too</p>
<p><em>hm.hello('Solar System!');</em> // outputs "Mars says Hello Solar
System!"</p>
<p>// The result of assigning module.exports at once is the same as in
hello-world.js <em>hv.hello('Milky Way!');</em> // outputs "Venus says
Hello Milky Way!"</p>
<p><em>hj.hello('Universe!');</em> // outputs "Jupiter says hello
Universe!" <em>hj.bye('Universe!');</em> // outputs "Jupiter says
goodbye Universe!"</p>
<p><em>hu();</em> //output 'hej'</p>
<p>Section 5.2: Loading and using a module</p>
<p>A module can be "imported", or otherwise "required" by the require()
function. For example, to load the http module that ships with Node.js,
the following can be used:</p>
<p><strong>const</strong> http = require('http');</p>
<p>Aside from modules that are shipped with the runtime, you can also
require modules that you have installed from</p>
<p>npm, such as express. If you had already installed express on your
system via npm <strong>install</strong> express, you could simply
write:</p>
<p><strong>const</strong> express = require('express');</p>
<p>You can also include modules that you have written yourself as part
of your application. In this case, to include a file</p>
<p>named lib.js in the same directory as current file:</p>
<p><strong>const</strong> mylib = require('./lib');</p>
<p>Note that you can omit the extension, and .js will be assumed. Once
you load a module, the variable is populated with an object that
contains the methods and properties published from the required file. A
full example:</p>
<p><strong>const</strong> http = require('http');</p>
<p>// The `http` module has the property `STATUS_CODES`
<em>console.log(http.STATUS_CODES[404]);</em> // outputs 'Not Found'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 54</p>
<p><span id="___Also_contains__createServer" class="anchor"></span>//
Also contains `createServer()`</p>
<p>http.createServer(<strong>function</strong>(req, res) {</p>
<p>res.writeHead(200, {'Content-Type': 'text/html'}); res.write('Module
Test'); res.end();</p>
<p>}).listen(80);</p>
<p>Section 5.3: Folder as a module</p>
<p>Modules can be split across many .js files in the same folder. An
example in a <em>my_module</em> folder:</p>
<p>function_one.js</p>
<p>module.exports = <strong>function</strong>() {</p>
<p>return <strong>1;</strong></p>
<p>}</p>
<p>function_two.js</p>
<p>module.exports = <strong>function</strong>() {</p>
<p>return <strong>2;</strong></p>
<p>}</p>
<p>index.js</p>
<p>exports.f_one = require('./function_one.js');</p>
<p>exports.f_two = require('./function_two.js');</p>
<p>A module like this one is used by referring to it by the folder
name:</p>
<p><strong>var</strong> split_module = require('./my_module');</p>
<p>Please note that if you required it by omitting ./ or any indication
of a path to a folder from the require function argument, Node will try
to load a module from the <em>node_modules</em> folder.</p>
<p>Alternatively you can create in the same folder a package.json file
with these contents:</p>
<p>{</p>
<p>"name": "my_module",</p>
<p>"main": "./your_main_entry_point.js"</p>
<p>}</p>
<p>This way you are not required to name the main module file
"index".</p>
<p>Section 5.4: Every module injected only once</p>
<p>NodeJS executes the module only the first time you require it. Any
further require functions will re-use the same</p>
<p>Object, thus not executing the code in the module another time. Also
Node caches the modules first time they are loaded using require. This
reduces the number of file reads and helps to speed up the
application.</p>
<p>myModule.js</p>
<p>console.log(123) ;</p>
<p>exports.var1 = 4 ;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 55</p>
<p><span id="index_js" class="anchor"></span>index.js</p>
<p><strong>var</strong> a=require('./myModule') ; <em>// Output
123</em></p>
<p><strong>var</strong> b=require('./myModule') ; <em>// No
output</em></p>
<p>console.log(a.var1) ; <em>// Output 4</em></p>
<p>console.log(b.var1) ; <em>// Output 4</em></p>
<p>a.var2 = 5 ;</p>
<p>console.log(b.var2) ; <em>// Output 5</em></p>
<p>Section 5.5: Module loading from node_modules</p>
<p>Modules can be required without using relative paths by putting them
in a special directory called node_modules.</p>
<p>For example, to require a module called foo from a file index.js, you
can use the following directory structure:</p>
<p>index.js</p>
<p>\- node_modules</p>
<p>\- foo</p>
<p>|- foo.js</p>
<p>\- package.json</p>
<p>Modules should be placed inside a directory, along with a
package.json file. The main field of the package.json file</p>
<p>should point to the entry point for your module--this is the file
that is imported when users do require('your-module'). main defaults to
index.js if not provided. Alternatively, you can refer to files relative
to your module</p>
<p>simply by appending the relative path to the require call:
require('your-module/path/to/file').</p>
<p>Modules can also be required from node_modules directories up the
file system hierarchy. If we have the following</p>
<p>directory structure:</p>
<p>my-project</p>
<p>\- node_modules</p>
<p><em>|- foo</em> // the foo module</p>
<p>\- ...</p>
<p><em>\- baz</em> // the baz module</p>
<p>\- node_modules</p>
<p><em>\- bar</em> // the bar module</p>
<p>we will be able to require the module foo from any file within bar
using require('foo').</p>
<p>Note that node will only match the module that is closest to the file
in the filesystem hierarchy, starting from (the file's current
directory/node_modules). Node matches directories this way up to the
file system root.</p>
<p>You can either install new modules from the npm registry or other npm
registries, or make your own.</p>
<p>Section 5.6: Building your own modules</p>
<p>You can also reference an object to publicly export and continuously
append methods to that object:</p>
<p><strong>const</strong> auth = module.exports = {}</p>
<p><strong>const</strong> config = require('../config')</p>
<p><strong>const</strong> request = require('request')</p>
<p>auth.email = <strong>function</strong> (data, callback) {</p>
<p>// Authenticate with an email address</p>
<p>}</p>
<p>auth.facebook = <strong>function</strong> (data, callback) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 56</p>
<p><span id="___Authenticate_with_a_Facebook" class="anchor"></span>//
Authenticate with a Facebook account</p>
<p>}</p>
<p>auth.twitter = <strong>function</strong> (data, callback) {</p>
<p>// Authenticate with a Twitter account</p>
<p>}</p>
<p>auth.slack = <strong>function</strong> (data, callback) {</p>
<p>// Authenticate with a Slack account</p>
<p>}</p>
<p>auth.stack_overflow = <strong>function</strong> (data, callback)
{</p>
<p>// Authenticate with a Stack Overflow account</p>
<p>}</p>
<p>To use any of these, just require the module as you normally
would:</p>
<p><strong>const</strong> auth = require('./auth')</p>
<p>module.exports = <strong>function</strong> (req, res, next) {</p>
<p>auth.facebook(req.body, <strong>function</strong> (err, user) {</p>
<p><strong>if</strong> (err) <strong>return</strong> next(err)</p>
<p>req.user = user</p>
<p>next()</p>
<p>})</p>
<p>}</p>
<p>Section 5.7: Invalidating the module cache</p>
<p>In development, you may find that using require() on the same module
multiple times always returns the same</p>
<p>module, even if you have made changes to that file. This is because
modules are cached the first time they are loaded, and any subsequent
module loads will load from the cache.</p>
<p>To get around this issue, you will have to <strong>delete</strong>
the entry in the cache. For example, if you loaded a module:</p>
<p><strong>var</strong> a = require('./a');</p>
<p>You could then delete the cache entry:</p>
<p><strong>var</strong> rpath = require.resolve('./a.js');</p>
<p><strong>delete</strong> require.cache[rpath];</p>
<p>And then require the module again:</p>
<p><strong>var</strong> a = require('./a');</p>
<p>Do note that this is not recommended in production because the
<strong>delete</strong> will only delete the reference to the loaded
module, not the loaded data itself. The module is not garbage collected,
so improper use of this feature</p>
<p>could lead to leaking memory.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 57</p>
<h2 id="chapter-6-exporting-and-importing">Chapter 6: Exporting and
Importing</h2>
<p>Module in node.js</p>
<p>Section 6.1: Exporting with ES6 syntax</p>
<p>This is the equivalent of the other example but using ES6
instead.</p>
<p>export <strong>function</strong> printHelloWorld() {</p>
<p>console.log("Hello World!!!");</p>
<p>}</p>
<p>Section 6.2: Using a simple module in node.js</p>
<p>What is a node.js module (<a
href="https://www.sitepoint.com/understanding-module-exports-exports-node-js/">link
to article):</a></p>
<p>A module encapsulates related code into a single unit of code. When
creating a module, this can be interpreted as moving all related
functions into a file.</p>
<p>Now lets see an example. Imagine all files are in same directory:</p>
<p>File: printer.js</p>
<p>"use strict";</p>
<p>exports.printHelloWorld = <strong>function</strong> (){</p>
<p>console.log("Hello World!!!");</p>
<p>}</p>
<p>Another way of using modules:</p>
<p>File animals.js</p>
<p>"use strict";</p>
<p>module.exports = {</p>
<p>lion: <strong>function</strong>() {</p>
<p>console.log("ROAARR!!!");</p>
<p>}</p>
<p>};</p>
<p>File: app.js</p>
<p>Run this file by going to your directory and typing: node app.js</p>
<p>"use strict";</p>
<p>//require('./path/to/module.js') node which module to load
<em><strong>var</strong> printer = require('./printer');</em></p>
<p><strong>var</strong> animals = require('./animals');</p>
<p><em>printer.printHelloWorld();</em> //prints "Hello World!!!"
<em>animals.lion();</em> //prints "ROAARR!!!"</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 58</p>
<h2 id="chapter-7-how-modules-are-loaded">Chapter 7: How modules are
loaded</h2>
<p>Section 7.1: Global Mode</p>
<p>If you installed Node using the default directory, while in the
global mode, NPM installs packages into /usr/local/lib/node_modules. If
you type the following in the shell, NPM will search for, download, and
install the</p>
<p>latest version of the package named sax inside the directory
/usr/local/lib/node_modules/express:</p>
<p>$ npm <strong>install</strong>-g express</p>
<p>Make sure that you have sufficient access rights to the folder. These
modules will be available for all node process which will be running in
that machine</p>
<p>In local mode installation. Npm will down load and install modules in
the current working folders by creating a new folder called node_modules
for example if you are in /home/user/apps/my_app a new folder will be
created called</p>
<p>node_modules /home/user/apps/my_app/node_modules if its not already
exist</p>
<p>Section 7.2: Loading modules</p>
<p>When we refer the module in the code, node first looks up the
node_module folder inside the referenced folder in</p>
<p>required statement If the module name is not relative and is not a
core module, Node will try to find it inside the node_modules folder in
the current directory. For instance, if you do the following, Node will
try to look for the file</p>
<p>./node_modules/myModule.js:</p>
<p><strong>var</strong> myModule = require('myModule.js');</p>
<p>If Node fails to find the file, it will look inside the parent folder
called ../node_modules/myModule.js. If it fails again, it will try the
parent folder and keep descending until it reaches the root or finds the
required module.</p>
<p>You can also omit the .js extension if you like to, in which case
node will append the .js extension and will search</p>
<p>for the file.</p>
<p>Loading a Folder Module</p>
<p>You can use the path for a folder to load a module like this:</p>
<p><strong>var</strong> myModule = require('./myModuleDir');</p>
<p>If you do so, Node will search inside that folder. Node will presume
this folder is a package and will try to look for a</p>
<p>package definition. That package definition should be a file named
package.json. If that folder does not contain a package definition file
named package.json, the package entry point will assume the default
value of index.js, and</p>
<p>Node will look, in this case, for a file under the path
./myModuleDir/index.js.</p>
<p>The last resort if module is not found in any of the folders is the
global module installation folder.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 59</p>
<h2 id="chapter-8-cluster-module">Chapter 8: Cluster Module</h2>
<p>Section 8.1: Hello World</p>
<p>This is your cluster.js:</p>
<p><strong>const</strong> cluster = require('cluster');</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>const</strong> numCPUs = require('os').cpus().length;</p>
<p><strong>if</strong> (cluster.isMaster) {</p>
<p>// Fork workers.</p>
<p><strong>for</strong> (<strong>let</strong> i = 0; i &lt; numCPUs;
i++) {</p>
<p>cluster.fork();</p>
<p>}</p>
<p>cluster.on('exit', (worker, code, signal) =&gt; {</p>
<p>console.log(`worker ${worker.process.pid} died`);</p>
<p>});</p>
<p>} <strong>else</strong> {</p>
<p>// Workers can share any TCP connection</p>
<p>// In this case it is an HTTP server</p>
<p>require('./server.js')();</p>
<p>}</p>
<p>This is your main server.js:</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>function</strong> startServer() {</p>
<p><strong>const</strong> server = http.createServer((req, res) =&gt;
{</p>
<p>res.writeHead(200);</p>
<p>res.end('Hello Http');</p>
<p>});</p>
<p>server.listen(3000);</p>
<p>}</p>
<p><strong>if</strong>(!module.parent) {</p>
<p>// Start server if file is run directly</p>
<p>startServer();</p>
<p>} <strong>else</strong> {</p>
<p>// Export server, if file is referenced via cluster</p>
<p>module.exports = startServer;</p>
<p>}</p>
<p>In this example, we host a basic web server, however, we spin up
workers (child processes) using the built-in</p>
<p><strong>cluster</strong> module. The number of processes forker
depend on the number of CPU cores available. This enables a</p>
<p>Node.js application to take advantage of multi-core CPUs, since a
single instance of Node.js runs in a single thread.</p>
<p>The application will now share the port 8000 across all the
processes. Loads will automatically be distributed between workers using
the Round-Robin method by default.</p>
<p>Section 8.2: Cluster Example</p>
<p>A single instance of Node.js runs in a single thread. To take
advantage of multi-core systems, application can be launched in a
cluster of Node.js processes to handle the load.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 60</p>
<p>The cluster module allows you to easily create child processes that
all share server ports.</p>
<p>Following example create the worker child process in main process
that handles the load across multiple cores.</p>
<p>Example</p>
<p><strong>const</strong> cluster = require('cluster');</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>const</strong> numCPUs = require('os').cpus().length;
<em>//number of CPUS</em></p>
<p><strong>if</strong> (cluster.isMaster) {</p>
<p>// Fork workers.</p>
<p><strong>for</strong> (<strong>var</strong> i = 0; i &lt; numCPUs;
i++) {</p>
<p><em>cluster.fork();</em> //creating child process</p>
<p>}</p>
<p>//on exit of cluster</p>
<p>cluster.on('exit', (worker, code, signal) =&gt; {</p>
<p><strong>if</strong> (signal) {</p>
<p>console.log(`worker was killed by signal: ${signal}`);</p>
<p>} <strong>else if</strong> (code !== 0) {</p>
<p>console.log(`worker exited with error code: ${code}`);</p>
<p>} <strong>else</strong> {</p>
<p>console.log('worker success!');</p>
<p>}</p>
<p>});</p>
<p>} <strong>else</strong> {</p>
<p>// Workers can share any TCP connection</p>
<p>// In this case it is an HTTP server</p>
<p>http.createServer((req, res) =&gt; {</p>
<p>res.writeHead(200);</p>
<p>res.end('hello world<strong>\n</strong>');</p>
<p>}).listen(3000);</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 61</p>
<h2 id="chapter-9-readline">Chapter 9: Readline</h2>
<p>Section 9.1: Line-by-line file reading</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>const</strong> readline = require('readline');</p>
<p><strong>const</strong> rl = readline.createInterface({</p>
<p>input: fs.createReadStream('text.txt')</p>
<p>});</p>
<p>// Each new line emits an event - every time the stream receives \r,
\n, or \r\n <em>rl.on('line', (line) =&gt; {</em></p>
<p>console.log(line);</p>
<p>});</p>
<p>rl.on('close', () =&gt; {</p>
<p>console.log('Done reading file');</p>
<p>});</p>
<p>Section 9.2: Prompting user input via CLI</p>
<p><strong>const</strong> readline = require('readline');</p>
<p><strong>const</strong> rl = readline.createInterface({</p>
<p>input: process.stdin,</p>
<p>output: process.stdout</p>
<p>});</p>
<p>rl.question('What is your name?', (name) =&gt; {</p>
<p>console.log(`Hello ${name}!`);</p>
<p>rl.close();</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 62</p>
<h2 id="chapter-10-package.json">Chapter 10: package.json</h2>
<p>Section 10.1: Exploring package.json</p>
<p>A package.json file, usually present in the project root, contains
metadata about your app or module as well as the list of dependencies to
install from npm when running npm <strong>install</strong>.</p>
<p>To initialize a package.json type npm init in your command
prompt.</p>
<p>To create a package.json with default values use:</p>
<p>npm init --yes</p>
<p># or</p>
<p>npm init -y</p>
<p>To install a package and save it to package.json use:</p>
<p>npm <strong>install {</strong>package
name<strong>}</strong>--save</p>
<p>You can also use the shorthand notation:</p>
<p>npm i -S <strong>{</strong>package name<strong>}</strong></p>
<p>NPM aliases -S to --save and -D to --save-dev to save in your
production or development dependencies respectively.</p>
<p>The package will appear in your dependencies; if you use --save-dev
instead of --save, the package will appear in</p>
<p>your devDependencies.</p>
<p>Important properties of package.json:</p>
<p>{</p>
<p>"name": "module-name",</p>
<p>"version": "10.3.1",</p>
<p>"description": "An example module to illustrate the usage of a
package.json", "author": "Your Name ",</p>
<p>"contributors": [{</p>
<p>"name": "Foo Bar",</p>
<p>"email": "foo.bar@example.com"</p>
<p>}],</p>
<p>"bin": {</p>
<p>"module-name": "./bin/module-name"</p>
<p>},</p>
<p>"scripts": {</p>
<p>"test": "vows --spec --isolate",</p>
<p>"start": "node index.js",</p>
<p>"predeploy": "echo About to deploy",</p>
<p>"postdeploy": "echo Deployed",</p>
<p>"prepublish": "coffee --bare --compile --output lib/foo
src/foo/*.coffee"</p>
<p>},</p>
<p>"main": "lib/foo.js",</p>
<p>"repository": {</p>
<p>"type": "git",</p>
<p>"url": "https://github.com/username/repo"</p>
<p>},</p>
<p>"bugs": {</p>
<p>"url": "https://github.com/username/issues"</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 63</p>
<p>},</p>
<p>"keywords": [</p>
<p>"example"</p>
<p>],</p>
<p>"dependencies": {</p>
<p>"express": "4.2.x"</p>
<p>},</p>
<p>"devDependencies": {</p>
<p>"assume": "&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2
&lt;3.0.0"</p>
<p>},</p>
<p>"peerDependencies": {</p>
<p>"moment": "&gt;2.0.0"</p>
<p>},</p>
<p>"preferGlobal": <strong>true</strong>,</p>
<p>"private": <strong>true</strong>,</p>
<p>"publishConfig": {</p>
<p>"registry": "https://your-private-hosted-npm.registry.domain.com"</p>
<p>},</p>
<p>"subdomain": "foobar",</p>
<p>"analyze": <strong>true</strong>,</p>
<p>"license": "MIT",</p>
<p>"files": [</p>
<p>"lib/foo.js"</p>
<p>]</p>
<p>}</p>
<p>Information about some important properties:</p>
<p>name</p>
<p>The unique name of your package and should be down in lowercase. This
property is required and your package will not install without it.</p>
<p>1. The name must be less than or equal to 214 characters.</p>
<p>2. The name can't start with a dot or an underscore.</p>
<p>3. New packages must not have uppercase letters in the name.</p>
<p>version</p>
<p><a href="http://semver.org/">The version of the package is specified
by Semantic Versioning (semver). Which assumes that a version number
is</a></p>
<p>written as MAJOR.MINOR.PATCH and you increment the:</p>
<p>1. MAJOR version when you make incompatible API changes</p>
<p>2. MINOR version when you add functionality in a backwards-compatible
manner 3. PATCH version when you make backwards-compatible bug fixes</p>
<p>description</p>
<p>The description of the project. Try to keep it short and concise.</p>
<p>author</p>
<p>The author of this package.</p>
<p>bin</p>
<p>An object which is used to expose binary scripts from your package.
The object assumes that the key is the name of</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 64</p>
<p>the binary script and the value a relative path to the script.</p>
<p>This property is used by packages that contain a CLI (command line
interface).</p>
<p>script</p>
<p>A object which exposes additional npm commands. The object assumes
that the key is the npm command and the</p>
<p>value is the script path. These scripts can get executed when you run
npm run <strong>{command</strong> name<strong>}</strong> or npm
run-script <strong>{command</strong> name<strong>}</strong>.</p>
<p>Packages that contain a command line interface and are installed
locally can be called without a relative path. So instead of calling
./node-modules/.bin/mocha you can directly call mocha.</p>
<p>main</p>
<p>The main entry point to your package. When calling require('{module
name}') in node, this will be actual file that</p>
<p>is required.</p>
<p>It's highly advised that requiring the main file does not generate
any side affects. For instance, requiring the main file should not start
up a HTTP server or connect to a database. Instead, you should create
something like</p>
<p>exports.init = <strong>function</strong> () {...} in your main
script.</p>
<p>keywords</p>
<p>An array of keywords which describe your package. These will help
people find your package.</p>
<p>devDependencies</p>
<p>These are the dependencies that are only intended for development and
testing of your module. The dependencies will be installed automatically
unless the NODE_ENV=production environment variable has been set. If
this is the</p>
<p>case you can still these packages using npm
<strong>install</strong>--dev</p>
<p>peerDependencies</p>
<p>If you are using this module, then peerDependencies lists the modules
you must install alongside this one. For example, moment-timezone must
be installed alongside moment because it is a plugin for moment, even if
it doesn't</p>
<p>directly require("moment").</p>
<p>preferGlobal</p>
<p>A property that indicates that this page prefers to be installed
globally using npm <strong>install</strong>-g
<strong>{</strong>module-name<strong>}</strong>. This property is used
by packages that contain a CLI (command line interface).</p>
<p>In all other situations you should NOT use this property.</p>
<p>publishConfig</p>
<p>The publishConfig is an object with configuration values that will be
used for publishing modules. The configuration values that are set
override your default npm configuration.</p>
<p>The most common use of the publishConfig is to publish your package
to a private npm registry so you still have</p>
<p>the benefits of npm but for private packages. This is done by simply
setting URL of your private npm as value for</p>
<p>the registry key.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 65</p>
<p><span id="files" class="anchor"></span>files</p>
<p>This is an array of all the files to include in the published
package. Either a file path or folder path can be used. All</p>
<p>the contents of a folder path will be included. This reduces the
total size of your package by only including the</p>
<p>correct files to be distributed. This field works in conjunction with
a .npmignore rules file.</p>
<p><a href="http://browsenpm.org/package.json">Source</a></p>
<p>Section 10.2: Scripts</p>
<p>You can define scripts that can be executed or are triggered before
or after another script.</p>
<p>{</p>
<p>"scripts": {</p>
<p>"pretest": "scripts/pretest.js",</p>
<p>"test": "scripts/test.js",</p>
<p>"posttest": "scripts/posttest.js"</p>
<p>}</p>
<p>}</p>
<p>In this case, you can execute the script by running either of these
commands:</p>
<p>$ npm run-script <strong>test</strong></p>
<p>$ npm run <strong>test</strong></p>
<p>$ npm <strong>test</strong></p>
<p>$ npm t</p>
<p>Pre-defined scripts</p>
<p>Script Name Description</p>
<p>prepublish Run before the package is published.</p>
<p>publish, postpublish Run after the package is published.</p>
<p>preinstall Run before the package is installed.</p>
<p>install, postinstall Run after the package is installed.</p>
<p>preuninstall, uninstall Run before the package is uninstalled.</p>
<p>postuninstall Run after the package is uninstalled.</p>
<p>preversion, version Run before bump the package version.</p>
<p>postversion Run after bump the package version.</p>
<p>pretest, test, posttest Run by the npm <strong>test</strong>
command</p>
<p>prestop, stop, poststop Run by the npm stop command</p>
<p>prestart, start, poststart Run by the npm <strong>start</strong>
command</p>
<p>prerestart, restart, postrestart Run by the npm restart command</p>
<p>User-defined scripts</p>
<p>You can also define your own scripts the same way you do with the
pre-defined scripts:</p>
<p>{</p>
<p>"scripts": {</p>
<p>"preci": "scripts/preci.js",</p>
<p>"ci": "scripts/ci.js",</p>
<p>"postci": "scripts/postci.js"</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 66</p>
<p><span id="In_this_case__you_can_execute_th" class="anchor"></span>In
this case, you can execute the script by running either of these
commands:</p>
<p>$ npm run-script ci</p>
<p>$ npm run ci</p>
<p>User-defined scripts also supports <em>pre</em> and <em>post</em>
scripts, as shown in the example above.</p>
<p>Section 10.3: Basic project definition</p>
<p>{</p>
<p>"name": "my-project",</p>
<p>"version": "0.0.1",</p>
<p>"description": "This is a project.",</p>
<p>"author": "Someone ",</p>
<p>"contributors": [{</p>
<p>"name": "Someone Else",</p>
<p>"email": "else@example.com"</p>
<p>}],</p>
<p>"keywords": ["improves", "searching"]</p>
<p>}</p>
<p>Field Description</p>
<p>name a <strong>required</strong> field for a package to install.
Needs to be lowercase, single word without spaces. (Dashes and
underscores allowed)</p>
<p>version a <strong>required</strong> field for the package version
using <a
href="https://docs.npmjs.com/getting-started/semantic-versioning">semantic
versioning</a>.</p>
<p>description a short description of the project</p>
<p>author specifies the author of the package</p>
<p>contributors an array of objects, one for each contributor</p>
<p>keywords an array of strings, this will help people finding your
package</p>
<p>Section 10.4: Dependencies</p>
<p>"dependencies": { "module-name": "0.1.0" }</p>
<p><strong>exact</strong>: 0.1.0 will install that specific version of
the module.</p>
<p><strong>newest minor version</strong>: ^0.1.0 will install the newest
minor version, for example 0.2.0, but won't install a module with a
higher major version e.g. 1.0.0</p>
<p><strong>newest patch</strong>: 0.1.x or ~0.1.0 will install the
newest patch version available, for example 0.1.4, but won't</p>
<p>install a module with higher major or minor version, e.g. 0.2.0 or
1.0.0.</p>
<p><strong>wildcard</strong>: * will install the latest version of the
module.</p>
<p><strong>git repository</strong>: the following will install a tarball
from the master branch of a git repo. A #sha, #tag or #branch can also
be provided:</p>
<p><strong>GitHub</strong>: user/project or user/project#v1.0.0</p>
<p><em><strong>url</strong>: git:</em>//gitlab.com/user/project.git
<em>or git:</em>//gitlab.com/user/project.git#develop</p>
<p><strong>local path</strong>: file:../lib/project</p>
<p>After adding them to your package.json, use the command npm
<strong>install</strong> in your project directory in terminal.</p>
<p>devDependencies</p>
<p>"devDependencies": {</p>
<p>"module-name": "0.1.0"</p>
<p>}</p>
<p>For dependencies required only for development, like testing styling
proxies ext. Those dev-dependencies won't be</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 67</p>
<p><span id="installed_when_running__npm_inst"
class="anchor"></span>installed when running "npm install" in production
mode.</p>
<p>Section 10.5: Extended project definition</p>
<p>Some of the additional attributes are parsed by the npm website like
repository, bugs or homepage and shown in</p>
<p>the infobox for this packages</p>
<p>{</p>
<p>"main": "server.js",</p>
<p>"repository" : {</p>
<p>"type": "git",</p>
<p>"url": "git+https://github.com//.git"</p>
<p>},</p>
<p>"bugs": {</p>
<p>"url": "https://github.com///issues"</p>
<p>},</p>
<p>"homepage": "https://github.com//#readme", "files": [</p>
<p><em>"server.js",</em> // source files</p>
<p><em>"README.md",</em> // additional files</p>
<p><em>"lib"</em> // folder with all included files</p>
<p>]</p>
<p>}</p>
<p>Field Description</p>
<p>main Entry script for this package. This script is returned when a
user requires the package.</p>
<p>repository Location and type of the public repository</p>
<p>bugs Bugtracker for this package (e.g. github)</p>
<p>homepage Homepage for this package or the general project</p>
<p>files List of files and folders which should be downloaded when a
user does a npm <strong>install
&lt;</strong>packagename<strong>&gt;</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 68</p>
<h2 id="chapter-11-event-emitters">Chapter 11: Event Emitters</h2>
<p>Section 11.1: Basics</p>
<p>Event Emitters are built into Node, and are for pub-sub, a pattern
where a <em>publisher</em> will emit events, which <em>subscribers</em>
can listen and react to. In Node jargon, publishers are called <em>Event
Emitters</em>, and they emit events, while</p>
<p>subscribers are called <em>listeners</em>, and they react to the
events.</p>
<p>// Require events to start using them</p>
<p><strong>const</strong> EventEmitter = require('events').EventEmitter;
<em>// Dogs have events to publish, or emit</em></p>
<p>class Dog extends EventEmitter {};</p>
<p>class Food {};</p>
<p><strong>let</strong> myDog = <strong>new</strong> Dog();</p>
<p>// When myDog is chewing, run the following function
<em>myDog.on('chew', (item) =&gt; {</em></p>
<p><strong>if</strong> (item <strong>instanceof</strong> Food) {</p>
<p>console.log('Good dog');</p>
<p>} <strong>else</strong> {</p>
<p>console.log(`Time to buy another ${item}`);</p>
<p>}</p>
<p>});</p>
<p><em>myDog.emit('chew', 'shoe');</em> // Will result in
console.log('Time to buy another shoe') <em><strong>const</strong> bacon
= <strong>new</strong> Food();</em></p>
<p><em>myDog.emit('chew', bacon);</em> // Will result in
console.log('Good dog')</p>
<p>In the above example, the dog is the publisher/EventEmitter, while
the function that checks the item was the subscriber/listener. You can
make more listeners too:</p>
<p>myDog.on('bark', () =&gt; {</p>
<p>console.log('WHO<strong>\'</strong>S AT THE DOOR?');</p>
<p>// Panic</p>
<p>});</p>
<p>There can also be multiple listeners for a single event, and even
remove listeners:</p>
<p>myDog.on('chew', takeADeepBreathe);</p>
<p>myDog.on('chew', calmDown);</p>
<p>// Undo the previous line with the next one:</p>
<p>myDog.removeListener('chew', calmDown);</p>
<p>If you want to listen to a event only once, you can use:</p>
<p>myDog.once('chew', pet);</p>
<p>Which will remove the listener automatically without race
conditions.</p>
<p>Section 11.2: Get the names of the events that are subscribed</p>
<p>to</p>
<p>The function <strong>EventEmitter.eventNames()</strong> will return
an array containing the names of the events currently subscribed to.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 69</p>
<p><span id="const_EventEmitter___require__ev"
class="anchor"></span><strong>const</strong> EventEmitter =
require("events");</p>
<p>class MyEmitter extends EventEmitter{}</p>
<p><strong>var</strong> emitter = <strong>new</strong> MyEmitter();</p>
<p>emitter</p>
<p><em>.on("message", <strong>function</strong>(){</em> //listen for
message event</p>
<p>console.log("a message was emitted!");</p>
<p>})</p>
<p><em>.on("message", <strong>function</strong>(){</em> //listen for
message event</p>
<p>console.log("this is not the right message");</p>
<p>})</p>
<p><em>.on("data", <strong>function</strong>(){</em> //listen for data
event</p>
<p>console.log("a data just occurred!!");</p>
<p>});</p>
<p>console.log(emitter.eventNames()); <em>//=&gt;
["message","data"]</em> emitter.removeAllListeners("data");<em>//=&gt;
removeAllListeners to data event</em> console.log(emitter.eventNames());
<em>//=&gt; ["message"]</em></p>
<p><a
href="https://runkit.com/594bb4eaaac7e6001294132c/594bb635aac7e600129413e7">Run
in RunKit</a></p>
<p>Section 11.3: HTTP Analytics through an Event Emitter</p>
<p>In the HTTP server code (e.g. server.js):</p>
<p><strong>const</strong> EventEmitter = require('events')</p>
<p><strong>const</strong> serverEvents = <strong>new</strong>
EventEmitter()</p>
<p>// Set up an HTTP server</p>
<p><strong>const</strong> http = require('http')</p>
<p><strong>const</strong> httpServer = http.createServer((request,
response) =&gt; {</p>
<p>// Handler the request...</p>
<p>// Then emit an event about what happened</p>
<p>serverEvents.emit('request', request.method, request.url) });</p>
<p>// Expose the event emitter</p>
<p>module.exports = serverEvents</p>
<p>In supervisor code (e.g. supervisor.js):</p>
<p><strong>const</strong> server = require('./server.js')</p>
<p>// Since the server exported an event emitter, we can listen to it
for changes: <em>server.on('request', (method, url) =&gt; {</em></p>
<p>console.log(`Got a request: ${method} ${url}`)</p>
<p>})</p>
<p>Whenever the server gets a request, it will emit an event called
request which the supervisor is listening for, and</p>
<p>then the supervisor can react to the event.</p>
<p>Section 11.4: Get the number of listeners registered to listen</p>
<p>for a specific event</p>
<p>The function Emitter.listenerCount(eventName) will return the number
of listeners that are currently listening for the event provided as
argument</p>
<p><strong>const</strong> EventEmitter = require("events");</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 70</p>
<p>class MyEmitter extends EventEmitter{}</p>
<p><strong>var</strong> emitter = <strong>new</strong> MyEmitter();</p>
<p>emitter</p>
<p><em>.on("data", ()=&gt;{</em> // add listener for data event</p>
<p>console.log("data event emitter");</p>
<p>});</p>
<p>console.log(emitter.listenerCount("data")) <em>// =&gt; 1</em></p>
<p>console.log(emitter.listenerCount("message")) <em>// =&gt; 0</em></p>
<p>emitter.on("message", <strong>function</strong> mListener(){
<em>//add listener for message event</em></p>
<p>console.log("message event emitted");</p>
<p>});</p>
<p>console.log(emitter.listenerCount("data")) <em>// =&gt; 1</em></p>
<p>console.log(emitter.listenerCount("message")) <em>// =&gt; 1</em></p>
<p><em>emitter.once("data", (stuff)=&gt;{</em> //add another listener
for data event</p>
<p>console.log(`Tell me my ${stuff}`);</p>
<p>})</p>
<p>console.log(emitter.listenerCount("data")) <em>// =&gt; 2</em></p>
<p>console.log(emitter.listenerCount("message"))<em>// =&gt; 1</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 71</p>
<h2 id="chapter-12-autoreload-on-changes">Chapter 12: Autoreload on
changes</h2>
<p>Section 12.1: Autoreload on source code changes using</p>
<p>nodemon</p>
<p>The nodemon package makes it possible to automatically reload your
program when you modify any file in the</p>
<p>source code.</p>
<p>Installing nodemon globally</p>
<p>npm <strong>install</strong>-g nodemon (or npm i -g nodemon)</p>
<p>Installing nodemon locally</p>
<p>In case you don't want to install it globally</p>
<p>npm <strong>install</strong>--save-dev nodemon (or npm i -D
nodemon)</p>
<p>Using nodemon</p>
<p>Run your program with nodemon entry.js (or nodemon entry)</p>
<p>This replaces the usual use of node entry.js (or node entry).</p>
<p>You can also add your nodemon startup as an npm script, which might
be useful if you want to supply parameters and not type them out every
time.</p>
<p><strong>Add</strong> package.json:</p>
<p>"scripts": {</p>
<p>"start": "nodemon entry.js -devmode -something 1"</p>
<p>}</p>
<p>This way you can just use npm <strong>start</strong> from your
console.</p>
<p>Section 12.2: Browsersync</p>
<p>Overview</p>
<p><a href="https://browsersync.io">Browsersync is a tool that allows
for live file watching and browser reloading. It's available as a</a> <a
href="https://www.npmjs.com/package/browser-sync">NPM package.</a></p>
<p>Installation</p>
<p><a href="https://nodejs.org/en/">To install Browsersync you'll first
need to have Node.js and NPM installed. For more information see the
SO</a></p>
<p>documentation on Installing and Running Node.js.</p>
<p>Once your project is set up you can install Browsersync with the
following command:</p>
<p>$ npm <strong>install</strong> browser-sync -D</p>
<p>This will install Browsersync in the local node_modules directory and
save it to your developer dependencies.</p>
<p>If you'd rather install it globally use the -g flag in place of the
-D flag.</p>
<p>Windows Users</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 72</p>
<p>If you're having trouble installing Browsersync on Windows you may
need to install Visual Studio so you can access the build tools to
install Browsersync. You'll then need to specify the version of Visual
Studio you're using like so:</p>
<p>$ npm <strong>install</strong> browser-sync --msvs_version=2013
-D</p>
<p>This command specifies the 2013 version of Visual Studio.</p>
<p>Basic Usage</p>
<p>To automatically reload your site whenever you change a JavaScript
file in your project use the following command:</p>
<p>$ browser-sync start --proxy "myproject.dev"--files "**/*.js"</p>
<p>Replace myproject.dev with the web address that you are using to
access your project. Browsersync will output an alternate address that
can be used to access your site through the proxy.</p>
<p>Advanced Usage</p>
<p><a href="http://stackoverflow.com/tags/gruntjs/info">Besides the
command line interface that was described above Browsersync can also be
used with Grunt.js and</a></p>
<p><a href="http://stackoverflow.com/tags/gulp/info">Gulp.js.</a></p>
<p>Grunt.js</p>
<p>Usage with Grunt.js requires a plugin that can be installed like
so:</p>
<p>$ npm <strong>install</strong> grunt-browser-sync -D</p>
<p>Then you'll add this line to your gruntfile.js:</p>
<p>grunt.loadNpmTasks('grunt-browser-sync');</p>
<p>Gulp.js</p>
<p><a href="http://stackoverflow.com/tags/commonjs/info">Browsersync
works as a CommonJS</a> module, so there's no need for a Gulp.js plugin.
Simply require the module like</p>
<p>so:</p>
<p><strong>var</strong> browserSync =
require('browser-sync').create();</p>
<p><a href="https://browsersync.io/docs/api">You can now use the
Browsersync API to configure it to your needs.</a></p>
<p>API</p>
<p>The Browsersync API can be found here: <a
href="https://browsersync.io/docs/api">https://browsersync.io/docs/api</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 73</p>
<h2 id="chapter-13-environment">Chapter 13: Environment</h2>
<p>Section 13.1: Accessing environment variables</p>
<p>The process.env property returns an object containing the user
environment.</p>
<p>It returns an object like this one :</p>
<p>{</p>
<p>TERM: 'xterm-256color',</p>
<p>SHELL: '/usr/local/bin/bash',</p>
<p>USER: 'maciej',</p>
<p>PATH: '~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin', PWD:
'/Users/maciej',</p>
<p>EDITOR: 'vim',</p>
<p>SHLVL: '1',</p>
<p>HOME: '/Users/maciej',</p>
<p>LOGNAME: 'maciej',</p>
<p>_: '/usr/local/bin/node'</p>
<p>}</p>
<p><em>process.env.HOME</em> // '/Users/maciej'</p>
<p>If you set environment variable FOO to foobar, it will be accessible
with:</p>
<p>process.env.FOO <em>// 'foobar'</em></p>
<p>Section 13.2: process.argv command line arguments</p>
<p><a
href="https://nodejs.org/docs/latest/api/process.html#process_process_argv">process.argv
is an array containing the command line arguments. The first element
will be</a> node, the second element will be the name of the JavaScript
file. The next elements will be any additional command line
arguments.</p>
<p>Code Example:</p>
<p>Output sum of all command line arguments</p>
<p>index.js</p>
<p><strong>var</strong> sum = 0;</p>
<p><strong>for</strong> (i = 2; i &lt; process.argv.length; i++) {</p>
<p>sum += Number(process.argv[i]);</p>
<p>}</p>
<p>console.log(sum);</p>
<p>Usage Exaple:</p>
<p>node index.js 2 5 6 7</p>
<p>Output will be 20</p>
<p>A brief explanation of the code:</p>
<p>Here in for loop <strong>for</strong> (i = 2; i &lt;
process.argv.length; i++) loop begins with 2 because first two elements
in</p>
<p>process.argv array <strong>always</strong> is ['path/to/node.exe',
'path/to/js/file', ...]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 74</p>
<p><span id="Converting_to_number_Number_proc"
class="anchor"></span>Converting to number Number(process.argv[i])
because elements in process.argv array <strong>always</strong> is
string</p>
<p>Section 13.3: Loading environment properties from a</p>
<p>"property file"</p>
<p>Install properties reader:</p>
<p>npm <strong>install</strong> properties-reader --save</p>
<p>Create a <strong>directory env</strong> to store your properties
files:</p>
<p>mkdir env</p>
<p><strong>Create</strong> environments.js<strong>:</strong></p>
<p>process.argv.forEach(<strong>function</strong> (val, index, array)
{</p>
<p><strong>var</strong> arg = val.split("=");</p>
<p><strong>if</strong> (arg.length &gt; 0) {</p>
<p><strong>if</strong> (arg[0] === 'env') {</p>
<p><strong>var</strong> env = require('./env/' + arg[1] +
'.properties');</p>
<p>module.exports = env;</p>
<p>}</p>
<p>}</p>
<p>});</p>
<p>Sample <strong>development.properties</strong> properties file:</p>
<p># Dev properties</p>
<p>[main]</p>
<p># Application port to run the node server</p>
<p>app.port=8080</p>
<p>[database]</p>
<p># Database connection to mysql</p>
<p>mysql.host=localhost</p>
<p>mysql.port=2500</p>
<p>...</p>
<p>Sample usage of the loaded properties:</p>
<p><strong>var</strong> enviorment = require('./environments');</p>
<p><strong>var</strong> PropertiesReader = require('properties-reader');
<strong>var</strong> properties = <strong>new</strong>
PropertiesReader(enviorment);</p>
<p><strong>var</strong> someVal =
properties.<strong>get</strong>('main.app.port');</p>
<p>Starting the express server</p>
<p>npm <strong>start</strong> env=development</p>
<p>or</p>
<p>npm <strong>start</strong> env=production</p>
<p>Section 13.4: Using dierent Properties/Configuration for</p>
<p>dierent environments like dev, qa, staging etc</p>
<p>Large scale applications often need different properties when running
on different environments. we can achieve</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 75</p>
<p>this by passing arguments to NodeJs application and using same
argument in node process to load specific environment property file.</p>
<p>Suppose we have two property files for different environment.</p>
<p>dev.json</p>
<p>{</p>
<p>PORT : 3000,</p>
<p>DB : {</p>
<p>host : "localhost",</p>
<p>user : "bob",</p>
<p>password : "12345"</p>
<p>}</p>
<p>}</p>
<p>qa.json</p>
<p>{</p>
<p>PORT : 3001,</p>
<p>DB : {</p>
<p>host : "where_db_is_hosted",</p>
<p>user : "bob",</p>
<p>password : "54321"</p>
<p>}</p>
<p>}</p>
<p>Following code in application will export respective property file
which we want to use.</p>
<p>Suppose the code is in environment.js</p>
<p>process.argv.forEach(<strong>function</strong> (val, index, array)
{</p>
<p><strong>var</strong> arg = val.split("=");</p>
<p><strong>if</strong> (arg.length &gt; 0) {</p>
<p><strong>if</strong> (arg[0] === 'env') {</p>
<p><strong>var</strong> env = require('./' + arg[1] + '.json');</p>
<p>module.exports = env;</p>
<p>}</p>
<p>}</p>
<p>});</p>
<p>We give arguments to the application like following</p>
<p>node app.js env=dev</p>
<p>if we are using process manager like <em>forever</em> than it as
simple as</p>
<p>forever start app.js env=dev</p>
<p>How to use the configuration file</p>
<p><strong>var</strong> env= require("environment.js");</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 76</p>
<h2 id="chapter-14-callback-to-promise">Chapter 14: Callback to
Promise</h2>
<p>Section 14.1: Promisifying a callback</p>
<p>Callback-based:</p>
<p>db.notification.email.find({subject: 'promisify callback'}, (error,
result) =&gt; {</p>
<p><strong>if</strong> (error) {</p>
<p>console.log(error);</p>
<p>}</p>
<p>// normal code here</p>
<p>});</p>
<p>This uses bluebird's promisifyAll method to promisify what is
conventionally callback-based code like above.</p>
<p>bluebird will make a promise version of all the methods in the
object, those promise-based methods names has Async appended to
them:</p>
<p><strong>let</strong> email =
bluebird.promisifyAll(db.notification.email);</p>
<p>email.findAsync({subject: 'promisify callback'}).then(result =&gt;
{</p>
<p>// normal code here</p>
<p>})</p>
<p>.<strong>catch</strong>(console.error);</p>
<p>If only specific methods need to be promisified, just use its
promisify:</p>
<p><strong>let</strong> find =
bluebird.promisify(db.notification.email.find);</p>
<p>find({locationId: 168}).then(result =&gt; {</p>
<p>// normal code here</p>
<p>});</p>
<p>.<strong>catch</strong>(console.error);</p>
<p>There are some libraries (e.g., MassiveJS) that can't be promisified
if the immediate object of the method is not passed on second parameter.
In that case, just pass the immediate object of the method that need to
be</p>
<p>promisified on second parameter and enclosed it in context
property.</p>
<p><strong>let</strong> find =
bluebird.promisify(db.notification.email.find, { context:
db.notification.email });</p>
<p>find({locationId: 168}).then(result =&gt; {</p>
<p>// normal code here</p>
<p>});</p>
<p>.<strong>catch</strong>(console.error);</p>
<p>Section 14.2: Manually promisifying a callback</p>
<p>Sometimes it might be necessary to manually promisify a callback
function. This could be for a case where the</p>
<p><a
href="http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/">callback
does not follow the standard error-first format</a> or if additional
logic is needed to promisify:</p>
<p><a
href="https://nodejs.org/api/fs.html#fs_fs_exists_path_callback">Example
with fs.exists(path, callback)</a>:</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 77</p>
<p><span id="var_existsAsync___function_path"
class="anchor"></span><strong>var</strong> existsAsync =
<strong>function</strong>(path) {</p>
<p><strong>return new</strong>
Promise(<strong>function</strong>(resolve, reject) {</p>
<p>fs.exists(path, <strong>function</strong>(exists) {</p>
<p>// exists is a boolean</p>
<p><strong>if</strong> (exists) {</p>
<p>// Resolve successfully</p>
<p>resolve();</p>
<p>} <strong>else</strong> {</p>
<p>// Reject with error</p>
<p>reject(<strong>new</strong> Error('path does not exist'));</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>// Use as a promise now</p>
<p>existsAsync('/path/to/some/file').then(<strong>function</strong>() {
console.log('file exists!');</p>
<p><strong>}).</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>// file does not exist</p>
<p>console.error(err);</p>
<p>});</p>
<p>Section 14.3: setTimeout promisified</p>
<p><strong>function</strong> wait(ms) {</p>
<p><strong>return new</strong> Promise(<strong>function</strong>
(resolve, reject) {</p>
<p>setTimeout(resolve, ms)</p>
<p>})</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 78</p>
<h2 id="chapter-15-executing-files-or-commands">Chapter 15: Executing
files or commands</h2>
<p>with Child Processes</p>
<p>Section 15.1: Spawning a new process to execute a command</p>
<p>To spawn a new process in which you need <em>unbuffered</em> output
(e.g. long-running processes which might print output over a period of
time rather than printing and exiting immediately), use
child_process.spawn().</p>
<p>This method spawns a new process using a given command and an array
of arguments. The return value is an</p>
<p><a
href="https://nodejs.org/dist/latest/docs/api/child_process.html#child_process_class_childprocess">instance
of ChildProcess</a>, which in turn provides the stdout and stderr
properties. Both of those streams are</p>
<p><a
href="https://nodejs.org/dist/latest/docs/api/stream.html#stream_class_stream_readable">instances
of stream.Readable.</a></p>
<p>The following code is equivalent to using running the command ls -lh
/usr.</p>
<p><strong>const</strong> spawn = require('child_process').spawn;</p>
<p><strong>const</strong> ls = spawn('ls', ['-lh', '/usr']);</p>
<p>ls.stdout.on('data', (data) =&gt; {</p>
<p>console.log(`stdout: ${data}`);</p>
<p>});</p>
<p>ls.stderr.on('data', (data) =&gt; {</p>
<p>console.log(`stderr: ${data}`);</p>
<p>});</p>
<p>ls.on('close', (code) =&gt; {</p>
<p>console.log(`child process exited with code ${code}`); });</p>
<p>Another example command:</p>
<p>zip -0vr "archive" ./image.png</p>
<p>Might be written as:</p>
<p>spawn('zip', ['-0vr', '"archive"', './image.png']);</p>
<p>Section 15.2: Spawning a shell to execute a command</p>
<p>To run a command in a shell, in which you required buffered output
(i.e. it is not a stream), use child_process.exec. For example, if you
wanted to run the command cat *.js file | wc -l, with no options,</p>
<p>that would look like this:</p>
<p><strong>const</strong> exec = require('child_process').exec;</p>
<p>exec('cat *.js file | wc -l', (err, stdout, stderr) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>console.error(`exec error: ${err}`);</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>console.log(`stdout: ${stdout}`);</p>
<p>console.log(`stderr: ${stderr}`);</p>
<p>});</p>
<p>The function accepts up to three parameters:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 79</p>
<p><span id="child_process_exec_command___opt"
class="anchor"></span>child_process.exec(command[, options][,
callback]);</p>
<p>The command parameter is a string, and is required, while the options
object and callback are both optional. If no</p>
<p>options object is specified, then exec will use the following as a
default:</p>
<p>{</p>
<p>encoding: 'utf8',</p>
<p>timeout: 0,</p>
<p>maxBuffer: 200*1024,</p>
<p>killSignal: 'SIGTERM',</p>
<p>cwd: <strong>null</strong>,</p>
<p>env: <strong>null</strong></p>
<p>}</p>
<p>The options object also supports a shell parameter, which is by
default /bin/sh on UNIX and cmd.exe on Windows,</p>
<p>a uid option for setting the user identity of the process, and a gid
option for the group identity.</p>
<p>The callback, which is called when the command is done executing, is
called with the three arguments (err,</p>
<p>stdout, stderr). If the command executes successfully, err will be
<strong>null</strong>, otherwise it will be an instance of Error, with
err.code being the exit code of the process and err.signal being the
signal that was sent to terminate it.</p>
<p>The stdout and stderr arguments are the output of the command. It is
decoded with the encoding specified in the options object (default:
string), but can otherwise be returned as a Buffer object.</p>
<p>There also exists a synchronous version of exec, which is execSync.
The synchronous version does not take a</p>
<p>callback, and will return stdout instead of an instance of
ChildProcess. If the synchronous version encounters an</p>
<p>error, it <em>will</em> throw and halt your program. It looks like
this:</p>
<p><strong>const</strong> execSync = require('child_process').execSync;
<strong>const</strong> stdout = execSync('cat *.js file | wc -l');</p>
<p>console.log(`stdout: ${stdout}`);</p>
<p>Section 15.3: Spawning a process to run an executable</p>
<p>If you are looking to run a file, such as an executable, use
child_process.execFile. Instead of spawning a shell like</p>
<p>child_process.exec would, it will directly create a new process,
which is slightly more efficient than running a command. The function
can be used like so:</p>
<p><strong>const</strong> execFile = require('child_process').execFile;
<strong>const</strong> child = execFile('node', ['--version'], (err,
stdout, stderr) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>throw <strong>err;</strong></p>
<p>}</p>
<p>console.log(stdout);</p>
<p>});</p>
<p>Unlike child_process.exec, this function will accept up to four
parameters, where the second parameter is an array of arguments you'd
like to supply to the executable:</p>
<p>child_process.execFile(file[, args][, options][, callback]);</p>
<p>Otherwise, the options and callback format are otherwise identical to
child_process.exec. The same goes for the</p>
<p>synchronous version of the function:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 80</p>
<p><strong>const</strong> execFileSync =
require('child_process').execFileSync; <strong>const</strong> stdout =
execFileSync('node', ['--version']); console.log(stdout);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 81</p>
<h2 id="chapter-16-exception-handling">Chapter 16: Exception
handling</h2>
<p>Section 16.1: Handling Exception In Node.Js</p>
<p>Node.js has 3 basic ways to handle exceptions/errors:</p>
<p>1. <strong>try</strong>-<strong>catch</strong> block</p>
<p>2. <strong>error</strong> as the first argument to a callback</p>
<p>3. emit an <strong>error</strong> event using eventEmitter</p>
<p><strong>try-catch</strong> is used to catch the exceptions thrown
from the synchronous code execution. If the caller (or the caller's</p>
<p>caller, ...) used try/catch, then they can catch the error. If none
of the callers had try-catch than the program</p>
<p>crashes.</p>
<p>If using try-catch on an async operation and exception was thrown
from callback of async method than it will not</p>
<p>get caught by try-catch. To catch an exception from async operation
callback, it is preferred to use <em>promises</em>. Example to
understand it better</p>
<p>// ** Example - 1 **</p>
<p><strong>function</strong> doSomeSynchronousOperation(req, res) {</p>
<p><strong>if</strong>(req.body.username === ''){</p>
<p><strong>throw new</strong> Error('User Name cannot be empty');</p>
<p>}</p>
<p>return true<strong>;</strong></p>
<p>}</p>
<p>// calling the method above</p>
<p>try <strong>{</strong></p>
<p>// synchronous code</p>
<p>doSomeSynchronousOperation(req, res)</p>
<p>catch<strong>(e) {</strong></p>
<p>//exception handled here</p>
<p>console.log(e.message);</p>
<p>}</p>
<p>// ** Example - 2 **</p>
<p><strong>function</strong> doSomeAsynchronousOperation(req, res, cb)
{</p>
<p>// imitating async operation</p>
<p><strong>return</strong> setTimeout(<strong>function</strong>(){</p>
<p>cb(<strong>null</strong>, []);</p>
<p>},1000);</p>
<p>}</p>
<p>try <strong>{</strong></p>
<p>// asynchronous code</p>
<p>doSomeAsynchronousOperation(req, res, <strong>function</strong>(err,
rs){</p>
<p><strong>throw new</strong> Error("async operation exception");</p>
<p>})</p>
<p>} <strong>catch</strong>(e) {</p>
<p>// Exception will not get handled here</p>
<p>console.log(e.message);</p>
<p>}</p>
<p>// The exception is unhandled and hence will cause application to
break</p>
<p><strong>callbacks</strong> are mostly used in Node.js as callback
delivers an event asynchronously. The user passes you a function</p>
<p>(the callback), and you invoke it sometime later when the
asynchronous operation completes.</p>
<p>The usual pattern is that the callback is invoked as a
<em>callback(err, result)</em>, where only one of err and result is
non-null, depending on whether the operation succeeded or failed.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 82</p>
<p><span id="function_doSomeAsynchronousOpera"
class="anchor"></span><strong>function</strong>
doSomeAsynchronousOperation(req, res, callback) {</p>
<p>setTimeout(<strong>function</strong>(){</p>
<p><strong>return</strong> callback(<strong>new</strong> Error('User
Name cannot be empty'));</p>
<p>}, 1000);</p>
<p>return true<strong>;</strong></p>
<p>}</p>
<p>doSomeAsynchronousOperation(req, res, <strong>function</strong>(err,
result) {</p>
<p><strong>if</strong> (err) {</p>
<p>//exception handled here</p>
<p>console.log(err.message);</p>
<p>}</p>
<p>//do some stuff with valid data</p>
<p>});</p>
<p><strong>emit</strong> For more complicated cases, instead of using a
callback, the function itself can return an EventEmitter object,</p>
<p>and the caller would be expected to listen for error events on the
emitter.</p>
<p><strong>const</strong> EventEmitter = require('events');</p>
<p><strong>function</strong> doSomeAsynchronousOperation(req, res) {</p>
<p><strong>let</strong> myEvent = <strong>new</strong>
EventEmitter();</p>
<p>// runs asynchronously</p>
<p>setTimeout(<strong>function</strong>(){</p>
<p>myEvent.emit('error', <strong>new</strong> Error('User Name cannot be
empty'));</p>
<p>}, 1000);</p>
<p><strong>return</strong> myEvent;</p>
<p>}</p>
<p>// Invoke the function</p>
<p><strong>let</strong> event = doSomeAsynchronousOperation(req,
res);</p>
<p>event.on('error', <strong>function</strong>(err) {</p>
<p>console.log(err);</p>
<p>});</p>
<p>event.on('done', <strong>function</strong>(result) {</p>
<p>console.log(result); <em>// true</em></p>
<p>});</p>
<p>Section 16.2: Unhanded Exception Management</p>
<p>Because Node.js runs on a single process uncaught exceptions are an
issue to be aware of when developing</p>
<p>applications.</p>
<p>Silently Handling Exceptions</p>
<p>Most of the people let node.js server(s) silently swallow up the
errors.</p>
<p>Silently handling the exception</p>
<p>process.on('uncaughtException', <strong>function</strong> (err) {</p>
<p>console.log(err);</p>
<p>});</p>
<p><strong>This is bad</strong>, it will work but:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 83</p>
<p><span id="Root_cause_will_remains_unknown" class="anchor"></span>Root
cause will remains unknown, as such will not contribute to resolution of
what caused the Exception ( Error ).</p>
<p>In case of database connection ( pool ) gets closed for some reason
this will result in constant propagation of</p>
<p>errors, meaning that server will be running but it will not reconnect
to db.</p>
<p>Returning to Initial state</p>
<p>In case of an " uncaughtException " it is good to restart the server
and return it to its <strong>initial state</strong>, where we know
it</p>
<p>will work. Exception is logged, application is terminated but since
it will be running in a container that will make</p>
<p>sure that the server is running we will achieve restarting of the
server ( returning to the initial working state ) .</p>
<p>Installing the forever ( or other CLI tool to make sure that node
server runs continuously )</p>
<p>npm <strong>install</strong> forever -g</p>
<p>Starting the server in forever</p>
<p>forever start app.js</p>
<p>Reason why is it started and why we use forever is after the server
is <strong>terminated</strong> forever process will</p>
<p>start the server again.</p>
<p>Restarting the server</p>
<p>process.on('uncaughtException', <strong>function</strong> (err) {</p>
<p>console.log(err);</p>
<p>// some logging mechanisam</p>
<p>// ....</p>
<p><em>process.exit(1);</em> // terminates process</p>
<p>});</p>
<p>On a side note there was a way also to handle exceptions with
<strong>Clusters and Domains</strong>.</p>
<p>Domains are deprecated more information <a
href="https://nodejs.org/api/domain.html">here.</a></p>
<p>Section 16.3: Errors and Promises</p>
<p>Promises handle errors differently to synchronous or callback-driven
code.</p>
<p><strong>const</strong> p = <strong>new</strong>
Promise(<strong>function</strong> (resolve, reject) {</p>
<p>reject(<strong>new</strong> Error('Oops'));</p>
<p>});</p>
<p>// anything that is `reject`ed inside a promise will be available
through catch // while a promise is rejected, `.then` will not be called
<em>p</em></p>
<p>.then(() =&gt; {</p>
<p>console.log("won't be called");</p>
<p>})</p>
<p>.<strong>catch</strong>(e =&gt; {</p>
<p>console.log(e.message); <em>// output: Oops</em></p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 84</p>
<p>// once the error is caught, execution flow resumes</p>
<p>.then(() =&gt; {</p>
<p>console.log('hello!'); <em>// output: hello!</em></p>
<p>});</p>
<p>currently, errors thrown in a promise that are not caught results in
the error being swallowed, which can make it</p>
<p>difficult to track down the error. This can be <a
href="https://www.npmjs.com/package/eslint-plugin-promise">solved using
linting tools like</a> <a href="http://eslint.org/">eslint</a> or by
ensuring you always have a <strong>catch</strong> clause.</p>
<p><a
href="https://nodejs.org/dist/latest-v8.x/docs/api/deprecations.html#deprecations_dep0018_unhandled_promise_rejections">This
behaviour is deprecated in node 8</a> in favour of terminating the node
process.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 85</p>
<h2 id="chapter-17-keep-a-node-application">Chapter 17: Keep a node
application</h2>
<p>constantly running</p>
<p>Section 17.1: Use PM2 as a process manager</p>
<p>PM2 lets you run your nodejs scripts forever. In the event that your
application crashes, PM2 will also restart it for you.</p>
<p>Install PM2 globally to manager your nodejs instances</p>
<p>npm <strong>install</strong> pm2 -g</p>
<p>Navigate to the directory in which your nodejs script resides and run
the following command each time you want to start a nodejs instance to
be monitored by pm2:</p>
<p>pm2 start server.js--name "app1"</p>
<p>Useful commands for monitoring the process</p>
<p>1. List all nodejs instances managed by pm2</p>
<p>pm2 list</p>
<p><img src="media/index-97_1.jpeg" style="width:6.5in;height:1.83333in"
alt="index-97_1.jpg" /></p>
<p>2. Stop a particular nodejs instance</p>
<p>pm2 stop</p>
<p>3. Delete a particular nodejs instance</p>
<p><strong>pm2</strong> delete</p>
<p>4. Restart a particular nodejs instance</p>
<p>pm2 restart</p>
<p>5. Monitoring all nodejs instances</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 86</p>
<p><span id="pm2_monit" class="anchor"></span>pm2 monit</p>
<p><img src="media/index-98_1.jpeg" style="width:6.5in;height:3.30556in"
alt="index-98_1.jpg" /></p>
<p>6. Stop pm2</p>
<p>pm2 kill</p>
<p>7. As opposed to restart, which kills and restarts the process,
reload achieves a 0-second-downtime reload</p>
<p>pm2 reload</p>
<p>8. View logs</p>
<p>pm2 logs</p>
<p>Section 17.2: Running and stopping a Forever daemon</p>
<p>To start the process:</p>
<p>$ forever start index.js</p>
<p>warn: --minUptime not <strong>set</strong>. Defaulting to: 1000ms</p>
<p>warn: --spinSleepTime not <strong>set</strong>. Your script will exit
<strong>if</strong> it does not stay up <strong>for</strong> at least
1000ms info: Forever processing file: index.js</p>
<p>List running Forever instances:</p>
<p>$ forever list</p>
<p>info: Forever processes running</p>
<p>|data: | index | uid | command | script |forever pid|id | logfile</p>
<p>|uptime |</p>
<p>|------|-------|-----|------------------|-------------|-----------|-----|------------------------</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 87</p>
<p><span id="_3" class="anchor"></span>|--------------|</p>
<p>|data: | [0] |f4Kt |/usr/bin/nodejs | src/index.js|2131 |
2146|/root/.forever/f4Kt.log | 0:0:0:11.485 |</p>
<p>Stop the first process:</p>
<p>$ forever stop 0</p>
<p>$ forever stop 2146</p>
<p>$ forever stop --uid f4Kt</p>
<p>$ forever stop --pidFile 2131</p>
<p>Section 17.3: Continuous running with nohup</p>
<p>An alternative to forever on Linux is nohup.</p>
<p>To start a nohup instance</p>
<p>1. cd to the location of app.js or wwwfolder</p>
<p>2. run nohup nodejs app.js &amp;</p>
<p>To kill the process</p>
<p>1. run ps -ef|grep nodejs</p>
<p>2. kill -9</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 88</p>
<h2 id="chapter-18-uninstalling-node.js">Chapter 18: Uninstalling
Node.js</h2>
<p>Section 18.1: Completely uninstall Node.js on Mac OSX</p>
<p>In Terminal on your Mac operating system, enter the following 2
commands:</p>
<p>lsbom -f-l-s-pf
<strong>/</strong>var<strong>/</strong>db<strong>/</strong>receipts<strong>/</strong>org.nodejs.pkg.bom
<strong>| while read</strong> f; <strong>do</strong> <strong>sudo rm
/</strong>usr<strong>/</strong>local<strong>/</strong>${f};
<strong>done</strong></p>
<p><strong>sudo rm</strong>-rf
<strong>/</strong>usr<strong>/</strong>local<strong>/</strong>lib<strong>/</strong>node
<strong>/</strong>usr<strong>/</strong>local<strong>/</strong>lib<strong>/</strong>node_modules
<strong>/</strong>var<strong>/</strong>db<strong>/</strong>receipts<strong>/</strong>org.nodejs.<strong>*</strong></p>
<p>Section 18.2: Uninstall Node.js on Windows</p>
<p>To uninstall Node.js on Windows, use Add or Remove Programs like
this:</p>
<p>1. Open Add or Remove Programs from the start menu.</p>
<p>2. Search for Node.js.</p>
<p>Windows 10:</p>
<p>3. Click Node.js.</p>
<p>4. Click Uninstall.</p>
<p>5. Click the new Uninstall button.</p>
<p>Windows 7-8.1:</p>
<p>3. Click the Uninstall button under Node.js.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 89</p>
<h2 id="chapter-19-nvm---node-version-manager">Chapter 19: nvm - Node
Version Manager</h2>
<p>Section 19.1: Install NVM</p>
<p>You can use curl:</p>
<p><em>curl -o-
https:</em>//raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh
| bash</p>
<p>Or you can use wget:</p>
<p><em>wget -qO-
https:</em>//raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh
| bash</p>
<p>Section 19.2: Check NVM version</p>
<p>To verify that nvm has been installed, do:</p>
<p>command -v nvm</p>
<p>which should output 'nvm' if the installation was successful.</p>
<p>Section 19.3: Installing an specific Node version</p>
<p>Listing available remote versions for installation</p>
<p>nvm ls-remote</p>
<p>Installing a remote version</p>
<p>nvm install</p>
<p>For example</p>
<p>nvm install 0.10.13</p>
<p>Section 19.4: Using an already installed node version</p>
<p>To list available local versions of node through NVM:</p>
<p>nvm ls</p>
<p>For example, if nvm ls returns:</p>
<p>$ nvm ls</p>
<p>v4.3.0</p>
<p>v5.5.0</p>
<p>You can switch to v5.5.0 with:</p>
<p>nvm use v5.5.0</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 90</p>
<p><span id="Section_19_5__Install_nvm_on_Mac"
class="anchor"></span>Section 19.5: Install nvm on Mac OSX</p>
<p>INSTALLATION PROCESS</p>
<p>You can install Node Version Manager using git, curl or wget. You run
these commands in <strong>Terminal</strong> on <strong>Mac
OSX</strong>.</p>
<p>curl example:</p>
<p><em>curl -o-
https:</em>//raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh
| bash</p>
<p>wget example:</p>
<p><em>wget -qO-
https:</em>//raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh
| bash</p>
<p>TEST THAT NVM WAS PROPERLY INSTALLED</p>
<p>To test that nvm was properly installed, close and re-open Terminal
and enter nvm. If you get a <strong>nvm: command not</strong></p>
<p><strong>found</strong> message, your OS may not have the necessary
<strong>.bash_profile</strong> file. In Terminal, enter touch
~/.bash_profile</p>
<p>and run the above install script again.</p>
<p>If you still get <strong>nvm: command not found</strong>, try the
following:</p>
<p>In Terminal, enter nano .bashrc. You should see an export script
almost identical to the following:</p>
<p>export NVM_DIR=”/Users/johndoe/.nvm” [ -s “$NVM_DIR/nvm.sh” ]
&amp;&amp; . “$NVM_DIR/nvm.sh”</p>
<p>Copy the export script and remove it from
<strong>.bashrc</strong></p>
<p>Save and Close the .bashrc file (CTRL+O – Enter – CTRL+X)</p>
<p>Next, enter nano .bash_profile to open the Bash Profile</p>
<p>Paste the export script you copied into the Bash Profile on a new
line</p>
<p>Save and Close the Bash Profile (CTRL+O – Enter – CTRL+X)</p>
<p>Finally enter nano .bashrc to re-open the <strong>.bashrc</strong>
file</p>
<p>Paste the following line into the file:</p>
<p>source ~/.nvm/nvm.sh</p>
<p>Save and Close (CTRL+O – Enter – CTRL+X)</p>
<p>Restart Terminal and enter nvm to test if it's working</p>
<p>Section 19.6: Run any arbitrary command in a subshell with</p>
<p>the desired version of node</p>
<p>List all the node versions installed</p>
<p>nvm ls</p>
<p>v4.5.0</p>
<p>v6.7.0</p>
<p>Run command using any node installed version</p>
<p>nvm run 4.5.0 --version or nvm <strong>exec</strong> 4.5.0 node
--version</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 91</p>
<p><span id="Running_node_v4_5_0__npm_v2_15_9"
class="anchor"></span>Running node v4.5.0 <strong>(</strong>npm
v2.15.9<strong>)</strong></p>
<p>v4.5.0</p>
<p>nvm run 6.7.0 --version or nvm <strong>exec</strong> 6.7.0 node
--version Running node v6.7.0 <strong>(</strong>npm
v3.10.3<strong>)</strong></p>
<p>v6.7.0</p>
<p>using alias</p>
<p>nvm run default --version or nvm <strong>exec</strong> default node
--version Running node v6.7.0 <strong>(</strong>npm
v3.10.3<strong>)</strong></p>
<p>v6.7.0</p>
<p>To install node LTS version</p>
<p>nvm install --lts</p>
<p>Version Switching</p>
<p>nvm use v4.5.0 or nvm use stable ( alias )</p>
<p>Section 19.7: Setting alias for node version</p>
<p>If you want to set some alias name to installed node version, do:</p>
<p>nvm alias</p>
<p>Similary to unalias, do:</p>
<p>nvm unalias</p>
<p>A proper usecase would be, if you want to set some other version than
stable version as default alias. <strong>default</strong> aliased
versions are loaded on console by default.</p>
<p>Like:</p>
<p>nvm alias <strong>default</strong> 5.0.1</p>
<p>Then every time <strong>console/terminal</strong> starts 5.0.1 would
be present by default.</p>
<p>Note:</p>
<p>nvm alias # lists all aliases created on nvm</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 92</p>
<h2 id="chapter-20-http">Chapter 20: http</h2>
<p>Section 20.1: http server</p>
<p>A basic example of HTTP server.</p>
<p>write following code in http_server.js file:</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> httpPort = 80;</p>
<p>http.createServer(handler).listen(httpPort, start_callback);</p>
<p><strong>function</strong> handler(req, res) {</p>
<p><strong>var</strong> clientIP = req.connection.remoteAddress;</p>
<p><strong>var</strong> connectUsing = req.connection.encrypted ? 'SSL'
: 'HTTP';</p>
<p>console.log('Request received: '+ connectUsing + ' ' + req.method + '
' + req.url);</p>
<p>console.log('Client IP: ' + clientIP);</p>
<p>res.writeHead(200, "OK", {'Content-Type': 'text/plain'});</p>
<p>res.write("OK");</p>
<p>res.end();</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p><strong>function</strong> start_callback(){</p>
<p>console.log('Start HTTP on port ' + httpPort)</p>
<p>}</p>
<p>then from your http_server.js location run this command:</p>
<p>node http_server.js</p>
<p>you should see this result:</p>
<p>&gt; Start HTTP on port 80</p>
<p>now you need to test your server, you need to open your internet
browser and navigate to this url:</p>
<p><em>http:</em>//127.0.0.1:80</p>
<p>if your machine running Linux server you can test it like this:</p>
<p>curl 127.0.0.1:80</p>
<p>you should see following result:</p>
<p>ok</p>
<p>in your console, that running the app, you will see this results:</p>
<p>&gt; Request received: HTTP GET /</p>
<p>&gt; Client IP: ::ffff:127.0.0.1</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 93</p>
<p><span id="Section_20_2__http_client" class="anchor"></span>Section
20.2: http client</p>
<p>a basic example for http client:</p>
<p>write the follwing code in http_client.js file:</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> options = {</p>
<p>hostname: '127.0.0.1',</p>
<p>port: 80,</p>
<p>path: '/',</p>
<p>method: 'GET'</p>
<p>};</p>
<p><strong>var</strong> req = http.request(options,
<strong>function</strong>(res) {</p>
<p>console.log('STATUS: ' + res.statusCode);</p>
<p>console.log('HEADERS: ' + JSON.stringify(res.headers));</p>
<p>res.setEncoding('utf8');</p>
<p>res.on('data', <strong>function</strong> (chunk) {</p>
<p>console.log('Response: ' + chunk);</p>
<p>});</p>
<p>res.on('end', <strong>function</strong> (chunk) {</p>
<p>console.log('Response ENDED');</p>
<p>});</p>
<p>});</p>
<p>req.on('error', <strong>function</strong>(e) {</p>
<p>console.log('problem with request: ' + e.message); });</p>
<p>req.end();</p>
<p>then from your http_client.js location run this command:</p>
<p>node http_client.js</p>
<p>you should see this result:</p>
<p>&gt; STATUS: 200</p>
<p>&gt; HEADERS: {"content-type":"text/plain","date":"Thu, 21 Jul 2016
11:27:17 GMT","connection":"close","transfer-encoding":"chunked"} &gt;
Response: OK</p>
<p>&gt; Response ENDED</p>
<p>note: this example depend on http server example.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 94</p>
<h2 id="chapter-21-using-streams">Chapter 21: Using Streams</h2>
<p>Parameter Definition</p>
<p>Readable Stream type of stream where data can be read from</p>
<p>Writable Stream type of stream where data can be written to</p>
<p>Duplex Stream type of stream that is both readable and writeable</p>
<p>Transform Stream type of duplex stream that can transform data as it
is being read and then written</p>
<p>Section 21.1: Read Data from TextFile with Streams</p>
<p>I/O in node is asynchronous, so interacting with the disk and network
involves passing callbacks to functions. You</p>
<p>might be tempted to write code that serves up a file from disk like
this:</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> server =
http.createServer(<strong>function</strong> (req, res) {</p>
<p>fs.readFile(__dirname + '/data.txt', <strong>function</strong> (err,
data) {</p>
<p>res.end(data);</p>
<p>});</p>
<p>});</p>
<p>server.listen(8000);</p>
<p>This code works but it's bulky and buffers up the entire data.txt
file into memory for every request before writing the result back to
clients. If data.txt is very large, your program could start eating a
lot of memory as it serves lots of</p>
<p>users concurrently, particularly for users on slow connections.</p>
<p>The user experience is poor too because users will need to wait for
the whole file to be buffered into memory on</p>
<p>your server before they can start receiving any contents.</p>
<p>Luckily both of the (req, res) arguments are streams, which means we
can write this in a much better way using</p>
<p>fs.createReadStream() instead of fs.readFile():</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> server =
http.createServer(<strong>function</strong> (req, res) {</p>
<p><strong>var</strong> stream = fs.createReadStream(__dirname +
'/data.txt');</p>
<p>stream.pipe(res);</p>
<p>});</p>
<p>server.listen(8000);</p>
<p>Here .pipe() takes care of listening for 'data' and 'end' events from
the fs.createReadStream(). This code is not only cleaner, but now the
data.txt file will be written to clients one chunk at a time immediately
as they are received</p>
<p>from the disk.</p>
<p>Section 21.2: Piping streams</p>
<p>Readable streams can be "piped," or connected, to writable streams.
This makes data flow from the source stream</p>
<p>to the destination stream without much effort.</p>
<p><strong>var</strong> fs = require('fs')</p>
<p><strong>var</strong> readable = fs.createReadStream('file1.txt')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 95</p>
<p><span id="var_writable___fs_createWriteStr"
class="anchor"></span><strong>var</strong> writable =
fs.createWriteStream('file2.txt')</p>
<p>readable.pipe(writable) <em>// returns writable</em></p>
<p>When writable streams are also readable streams, i.e. when they're
<em>duplex</em> streams, you can continue piping it to other writable
streams.</p>
<p><strong>var</strong> zlib = require('zlib')</p>
<p>fs.createReadStream('style.css')</p>
<p>.pipe(zlib.createGzip()) <em>// The returned object, zlib.Gzip, is a
duplex stream.</em> .pipe(fs.createWriteStream('style.css.gz')</p>
<p>Readable streams can also be piped into multiple streams.</p>
<p><strong>var</strong> readable = fs.createReadStream('source.css')</p>
<p>readable.pipe(zlib.createGzip()).pipe(fs.createWriteStream('output.css.gz'))
readable.pipe(fs.createWriteStream('output.css')</p>
<p>Note that you must pipe to the output streams synchronously (at the
same time) before any data 'flows'. Failure to do so might lead to
incomplete data being streamed.</p>
<p>Also note that stream objects can emit error events; be sure to
responsibly handle these events on <em>every</em> stream, as needed:</p>
<p><strong>var</strong> readable = fs.createReadStream('file3.txt')</p>
<p><strong>var</strong> writable = fs.createWriteStream('file4.txt')</p>
<p>readable.pipe(writable)</p>
<p>readable.on('error', console.error)</p>
<p>writable.on('error', console.error)</p>
<p>Section 21.3: Creating your own readable/writable stream</p>
<p>We will see stream objects being returned by modules like fs etc but
what if we want to create our own streamable</p>
<p>object.</p>
<p>To create Stream object we need to use the stream module provided by
NodeJs</p>
<p><strong>var</strong> fs = require("fs");</p>
<p><strong>var</strong> stream = require("stream").Writable;</p>
<p>/*</p>
<p>* Implementing the write function in writable stream class.</p>
<p>* This is the function which will be used when other stream is piped
into this</p>
<p>* writable stream.</p>
<p>*/</p>
<p>stream.<strong>prototype</strong>._write =
<strong>function</strong>(chunk, data){</p>
<p>console.log(data);</p>
<p>}</p>
<p><strong>var</strong> customStream = <strong>new</strong>
stream();</p>
<p>fs.createReadStream("am1.js").pipe(customStream);</p>
<p>This will give us our own custom writable stream. we can implement
anything within the <em>_write</em> function. Above</p>
<p>method works in NodeJs 4.x.x version but in NodeJs 6.x
<strong>ES6</strong> introduced classes therefore syntax have
changed.</p>
<p>Below is the code for 6.x version of NodeJs</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 96</p>
<p><span id="const_Writable___require__stream"
class="anchor"></span><strong>const</strong> Writable =
require('stream').Writable;</p>
<p>class MyWritable extends Writable {</p>
<p>constructor(options) {</p>
<p>super(options);</p>
<p>}</p>
<p>_write(chunk, encoding, callback) {</p>
<p>console.log(chunk);</p>
<p>}</p>
<p>}</p>
<p>Section 21.4: Why Streams?</p>
<p>Lets examine the following two examples for reading a file's
contents:</p>
<p>The first one, which uses an async method for reading a file, and
providing a callback function which is called once</p>
<p>the file is fully read into the memory:</p>
<p>fs.readFile(`${__dirname}/utils.js`, (err, data) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>handleError(err);</p>
<p>} <strong>else</strong> {</p>
<p>console.log(data.toString());</p>
<p>}</p>
<p>})</p>
<p>And the second, which uses streams in order to read the file's
content, piece by piece:</p>
<p><strong>var</strong> fileStream =
fs.createReadStream(`${__dirname}/file`); <strong>var</strong>
fileContent = '';</p>
<p>fileStream.on('data', data =&gt; {</p>
<p>fileContent += data.toString();</p>
<p>})</p>
<p>fileStream.on('end', () =&gt; {</p>
<p>console.log(fileContent);</p>
<p>})</p>
<p>fileStream.on('error', err =&gt; {</p>
<p>handleError(err)</p>
<p>})</p>
<p>It's worth mentioning that both examples do the <strong>exact same
thing</strong>. What's the difference then?</p>
<p>The first one is shorter and looks more elegant</p>
<p>The second lets you do some processing on the file
<strong>while</strong> it is being read (!)</p>
<p>When the files you deal with are small then there is no real effect
when using streams, but what happens when the file is big? (so big that
it takes 10 seconds to read it into memory)</p>
<p>Without streams you'll be waiting, doing absolutely nothing (unless
your process does other stuff), until the 10</p>
<p>seconds pass and the file is <strong>fully read</strong>, and only
then you can start processing the file.</p>
<p>With streams, you get the file's contents piece by piece,
<strong>right when they're available</strong> - and that lets you
process</p>
<p>the file <strong>while</strong> it is being read.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 97</p>
<p>The above example does not illustrate how streams can be utilized for
work that cannot be done when going the callback fashion, so lets look
at another example:</p>
<p>I would like to download a gzip file, unzip it and save its content
to the disk. Given the file's url this is what's need to be done:</p>
<p>Download the file</p>
<p>Unzip the file</p>
<p>Save it to disk</p>
<p>Here's a [small file][1], which is stored in my S3 storage. The
following code does the above in the callback fashion.</p>
<p><strong>var</strong> startTime = Date.now()</p>
<p>s3.getObject({Bucket: 'some-bucket', Key: 'tweets.gz'}, (err, data)
=&gt; {</p>
<p>// here, the whole file was downloaded</p>
<p>zlib.gunzip(data.Body, (err, data) =&gt; {</p>
<p>// here, the whole file was unzipped</p>
<p>fs.writeFile(`${__dirname}/tweets.json`, data, err =&gt; {</p>
<p><strong>if</strong> (err) console.error(err)</p>
<p>// here, the whole file was written to disk</p>
<p><strong>var</strong> endTime = Date.now()</p>
<p>console.log(`${endTime - startTime} milliseconds`) <em>// 1339
milliseconds</em></p>
<p>})</p>
<p>})</p>
<p>})</p>
<p>// 1339 milliseconds</p>
<p>This is how it looks using streams:</p>
<p>s3.getObject({Bucket: 'some-bucket', Key:
'tweets.gz'}).createReadStream() .pipe(zlib.createGunzip())</p>
<p>.pipe(fs.createWriteStream(`${__dirname}/tweets.json`));</p>
<p>// 1204 milliseconds</p>
<p>Yep, it's not faster when dealing with small files - the tested file
weights 80KB. Testing this on a bigger file, 71MB gzipped (382MB
unzipped), shows that the streams version is much faster</p>
<p>It took 20925 milliseconds to download 71MB, unzip it and then write
382MB to disk - <strong>using the callback</strong></p>
<p>fashion<strong>.</strong></p>
<p>In comparison, it took 13434 milliseconds to do the same when using
the streams version (35% faster, for a</p>
<p>not-so-big file)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 98</p>
<h2 id="chapter-22-deploying-node.js-applications">Chapter 22: Deploying
Node.js applications</h2>
<p>in production</p>
<p>Section 22.1: Setting NODE_ENV="production"</p>
<p>Production deployments will vary in many ways, but a standard
convention when deploying in production is to define an environment
variable called NODE_ENV and set its value to <em>"production"</em>.</p>
<p>Runtime flags</p>
<p>Any code running in your application (including external modules) can
check the value of NODE_ENV:</p>
<p><strong>if</strong>(process.env.NODE_ENV === 'production') {</p>
<p>// We are running in production mode</p>
<p>} <strong>else</strong> {</p>
<p>// We are running in development mode</p>
<p>}</p>
<p>Dependencies</p>
<p>When the NODE_ENV environment variable is set to
<em>'production'</em> all devDependencies in your <em>package.json</em>
file will be completely ignored when running npm
<strong>install</strong>. You can also enforce this with a --production
flag:</p>
<p>npm <strong>install</strong>--production</p>
<p>For setting NODE_ENV you can use any of these methods</p>
<p>method 1: set NODE_ENV for all node apps</p>
<p>Windows :</p>
<p><strong>set</strong> NODE_ENV=production</p>
<p>Linux or other unix based system :</p>
<p>export NODE_ENV=production</p>
<p>This sets NODE_ENV for current bash session thus any apps started
after this statement will have NODE_ENV set to</p>
<p>production.</p>
<p>method 2: set NODE_ENV for current app</p>
<p>NODE_ENV=production node app.js</p>
<p>This will set NODE_ENV for the current app only. This helps when we
want to test our apps on different</p>
<p>environments.</p>
<p>method 3: create .env file and use it</p>
<p><a href="http://stackoverflow.com/a/28821696/620039">This uses the
idea explained here</a>. Refer this post for more detailed
explanation.</p>
<p>Basically you create .env file and run some bash script to set them
on environment.</p>
<p>To avoid writing a bash script, the <a
href="https://www.npmjs.com/package/env-cmd">env-cmd package can be used
to load the environment variables defined in the</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 99</p>
<p><span id="_env_file" class="anchor"></span>.env file.</p>
<p>env-cmd .env node app.js</p>
<p>method 4: Use cross-env package</p>
<p>This <a href="https://www.npmjs.com/package/cross-env">package</a>
allows environment variables to be set in one way for every
platform.</p>
<p>After installing it with npm, you can just add it to your deployment
script in package.json as follows:</p>
<p>"build:deploy": "cross-env NODE_ENV=production webpack"</p>
<p>Section 22.2: Manage app with process manager</p>
<p>It's a good practice to run NodeJS apps controlled by process
managers. Process manager helps to keep application</p>
<p>alive forever, restart on failure, reload without downtime and
simplifies administrating. Most powerful of them (like</p>
<p><a href="http://pm2.keymetrics.io/">PM2) have a built-in load
balancer. PM2 also enables you to manage application logging,
monitoring, and clustering.</a></p>
<p>PM2 process manager</p>
<p>Installing PM2:</p>
<p>npm <strong>install</strong> pm2 -g</p>
<p>Process can be started in cluster mode involving integrated load
balancer to spread load between processes:</p>
<p>pm2 start app.js-i 0--name "api" (<em>-i</em> is to specify number of
processes to spawn. If it is 0, then process number will be based on CPU
cores count)</p>
<p>While having multiple users in production, its must to have a single
point for PM2. Therefore pm2 command must be prefixed with a location
(for PM2 config) else it will spawn a new pm2 process for every user
with config in</p>
<p>respective home directory. And it will be inconsistent.</p>
<p>Usage: PM2_HOME=<em>/etc/</em>.pm2 pm2 start app.js</p>
<p>Section 22.3: Deployment using process manager</p>
<p>Process manager is generally used in production to deploy a nodejs
app. The main functions of a process manager</p>
<p>are restarting the server if it crashes, checking resource
consumption, improving runtime performance, monitoring etc.</p>
<p>Some of the popular process managers made by the node community are
forever, pm2, etc.</p>
<p>Forvever</p>
<p><a href="https://github.com/foreverjs/forever">forever</a> is a
command-line interface tool for ensuring that a given script runs
continuously. forever’s simple interface makes it ideal for running
smaller deployments of Node.js apps and scripts.</p>
<p>forever monitors your process and restarts it if it crashes.</p>
<p>Install forever globally.</p>
<p>$ npm <strong>install</strong>-g forever</p>
<p>Run application :</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 100</p>
<p><span id="__forever_start_server_js" class="anchor"></span>$ forever
start server.js</p>
<p>This starts the server and gives an id for the process(starts from
0).</p>
<p>Restart application :</p>
<p>$ forever restart 0</p>
<p>Here 0 is the id of the server.</p>
<p>Stop application :</p>
<p>$ forever stop 0</p>
<p>Similar to restart, 0 is the id the server. You can also give process
id or script name in place of the id given by the forever.</p>
<p>For more commands : <a
href="https://www.npmjs.com/package/forever">https://www.npmjs.com/package/forever</a></p>
<p>Section 22.4: Deployment using PM2</p>
<p>PM2 is a production process manager for Node.js applications, that
allows you to keep applications alive forever</p>
<p>and reload them without downtime. PM2 also enables you to manage
application logging, monitoring, and clustering.</p>
<p>Install pm2 globally.</p>
<p>npm <strong>install</strong>-g pm2</p>
<p>Then, run the node.js app using PM2.</p>
<p>pm2 start server.js--name "my-app"</p>
<p><img src="media/index-112_1.jpeg" style="width:6.5in;height:1.75in"
alt="index-112_1.jpg" /></p>
<p>Following commands are useful while working with PM2.</p>
<p>List all running processes:</p>
<p>pm2 list</p>
<p>Stop an app:</p>
<p>pm2 stop my-app</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 101</p>
<p><span id="Restart_an_app" class="anchor"></span>Restart an app:</p>
<p>pm2 restart my-app</p>
<p>To view detailed information about an app:</p>
<p>pm2 show my-app</p>
<p>To remove an app from PM2’s registry:</p>
<p>pm2 <strong>delete</strong> my-app</p>
<p>Section 22.5: Using dierent Properties/Configuration for</p>
<p>dierent environments like dev, qa, staging etc</p>
<p>Large scale applications often need different properties when running
on different environments. we can achieve</p>
<p>this by passing arguments to NodeJs application and using same
argument in node process to load specific environment property file.</p>
<p>Suppose we have two property files for different environment.</p>
<p>dev.json</p>
<p>{</p>
<p>"PORT": 3000,</p>
<p>"DB": {</p>
<p>"host": "localhost",</p>
<p>"user": "bob",</p>
<p>"password": "12345"</p>
<p>}</p>
<p>}</p>
<p>qa.json</p>
<p>{</p>
<p>"PORT": 3001,</p>
<p>"DB": {</p>
<p>"host": "where_db_is_hosted",</p>
<p>"user": "bob",</p>
<p>"password": "54321"</p>
<p>}</p>
<p>}</p>
<p>Following code in application will export respective property file
which we want to use.</p>
<p>process.argv.forEach(<strong>function</strong> (val) {</p>
<p><strong>var</strong> arg = val.split("=");</p>
<p><strong>if</strong> (arg.length &gt; 0) {</p>
<p><strong>if</strong> (arg[0] === 'env') {</p>
<p><strong>var</strong> env = require('./' + arg[1] + '.json');</p>
<p>exports.prop = env;</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 102</p>
<p><span id="_4" class="anchor"></span>}</p>
<p>});</p>
<p>We give arguments to the application like following</p>
<p>node app.js env=dev</p>
<p>if we are using process manager like <em>forever</em> than it as
simple as</p>
<p>forever start app.js env=dev</p>
<p>Section 22.6: Taking advantage of clusters</p>
<p>A single instance of Node.js runs in a single thread. To take
advantage of multi-core systems the user will</p>
<p>sometimes want to launch a cluster of Node.js processes to handle the
load.</p>
<p><strong>var</strong> cluster = require('cluster');</p>
<p><strong>var</strong> numCPUs = require('os').cpus().length;</p>
<p><strong>if</strong> (cluster.isMaster) {</p>
<p>// In real life, you'd probably use more than just 2 workers, // and
perhaps not put the master and worker in the same file. //</p>
<p>// You can also of course get a bit fancier about logging, and //
implement whatever custom logic you need to prevent DoS // attacks and
other bad behavior.</p>
<p>//</p>
<p>// See the options in the cluster documentation.</p>
<p>//</p>
<p>// The important thing is that the master does very little, //
increasing our resilience to unexpected errors.</p>
<p>console.log('your server is working on ' + numCPUs + ' cores');</p>
<p><strong>for</strong> (<strong>var</strong> i = 0; i &lt; numCPUs;
i++) {</p>
<p>cluster.fork();</p>
<p>}</p>
<p>cluster.on('disconnect', <strong>function</strong>(worker) {</p>
<p>console.error('disconnect!');</p>
<p>//clearTimeout(timeout);</p>
<p>cluster.fork();</p>
<p>});</p>
<p>} <strong>else</strong> {</p>
<p>require('./app.js');</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 103</p>
<h2 id="chapter-23-securing-node.js-applications">Chapter 23: Securing
Node.js applications</h2>
<p>Section 23.1: SSL/TLS in Node.js</p>
<p>If you choose to handle SSL/TLS in your Node.js application, consider
that you are also responsible for maintaining SSL/TLS attack prevention
at this point. In many server-client architectures, SSL/TLS terminates
on a reverse proxy,</p>
<p>both to reduce application complexity and reduce the scope of
security configuration.</p>
<p>If your Node.js application should handle SSL/TLS, it can be secured
by loading the key and cert files.</p>
<p>If your certificate provider requires a certificate authority (CA)
chain, it can be added in the ca option as an array. A chain with
multiple entries in a single file must be split into multiple files and
entered in the same order into the</p>
<p>array as Node.js does not currently support multiple ca entries in
one file. An example is provided in the code below for files 1_ca.crt
and 2_ca.crt. If the ca array is required and not set properly, client
browsers may display</p>
<p>messages that they could not verify the authenticity of the
certificate.</p>
<p>Example</p>
<p><strong>const</strong> https = require('https');</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>const</strong> options = {</p>
<p>key: fs.readFileSync('privatekey.pem'),</p>
<p>cert: fs.readFileSync('certificate.pem'),</p>
<p>ca: [fs.readFileSync('1_ca.crt'), fs.readFileSync('2_ca.crt')] };</p>
<p>https.createServer(options, (req, res) =&gt; {</p>
<p>res.writeHead(200);</p>
<p>res.end('hello world<strong>\n</strong>');</p>
<p>}).listen(8000);</p>
<p>Section 23.2: Preventing Cross Site Request Forgery (CSRF)</p>
<p><strong>CSRF</strong> is an attack which forces end user to execute
unwanted actions on a web application in which he/she is</p>
<p>currently authenticated.</p>
<p>It can happen because cookies are sent with every request to a
website - even when those requests come from a</p>
<p>different site.</p>
<p>We can use csurf module for creating csrf token and validating
it.</p>
<p>Example</p>
<p><strong>var</strong> express = require('express')</p>
<p><strong>var</strong> cookieParser = require('cookie-parser')
<em>//for cookie parsing</em> <strong>var</strong> csrf =
require('csurf') <em>//csrf module</em></p>
<p><strong>var</strong> bodyParser = require('body-parser') <em>//for
body parsing</em></p>
<p>// setup route middlewares</p>
<p><strong>var</strong> csrfProtection = csrf({ cookie:
<strong>true</strong> })</p>
<p><strong>var</strong> parseForm = bodyParser.urlencoded({ extended:
<strong>false</strong> })</p>
<p>// create express app</p>
<p><strong>var</strong> app = express()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 104</p>
<p><span id="___parse_cookies" class="anchor"></span>// parse
cookies</p>
<p>app.use(cookieParser())</p>
<p>app.<strong>get</strong>('/form', csrfProtection,
<strong>function</strong>(req, res) {</p>
<p>// generate and pass the csrfToken to the view</p>
<p>res.render('send', { csrfToken: req.csrfToken() }) })</p>
<p>app.post('/process', parseForm, csrfProtection,
<strong>function</strong>(req, res) { res.send('data is being
processed')</p>
<p>})</p>
<p>So, when we access GET /form, it will pass the csrf token csrfToken
to the view.</p>
<p>Now, inside the view, set the csrfToken value as the value of a
hidden input field named _csrf.</p>
<p>e.g. for handlebar templates</p>
<p><strong>&lt;form</strong> action="/process"
method="POST"<strong>&gt;</strong></p>
<p><strong>&lt;input</strong> type="hidden" name="_csrf"
value="{{csrfToken}}"<strong>&gt;</strong></p>
<p>Name: <strong>&lt;input</strong> type="text"
name="name"<strong>&gt;</strong></p>
<p><strong>&lt;button</strong>
type="submit"<strong>&gt;</strong>Submit<strong>&lt;/button&gt;</strong></p>
<p>&lt;/form&gt;</p>
<p>e.g. for jade templates</p>
<p>form(action="/process" method="post")</p>
<p>input(type="hidden", name="_csrf", value=csrfToken)</p>
<p>span Name:</p>
<p>input(type="text", name="name", required=<strong>true</strong>)</p>
<p>br</p>
<p>input(type="submit")</p>
<p>e.g. for ejs templates</p>
<p><strong>&lt;form</strong> action="/process"
method="POST"<strong>&gt;</strong></p>
<p><strong>&lt;input</strong> type="hidden" name="_csrf" value="&lt;%=
csrfToken %&gt;"&gt;</p>
<p>Name: <strong>&lt;input</strong> type="text"
name="name"<strong>&gt;</strong></p>
<p><strong>&lt;button</strong>
type="submit"<strong>&gt;</strong>Submit<strong>&lt;/button&gt;</strong></p>
<p>&lt;/form&gt;</p>
<p>Section 23.3: Setting up an HTTPS server</p>
<p>Once you have node.js installed on your system, just follow the
procedure below to get a basic web server running with support for both
HTTP and HTTPS!</p>
<p>Step 1 : Build a Certificate Authority</p>
<p>1. create the folder where you want to store your key &amp;
certificate :</p>
<p>mkdir conf</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 105</p>
<p>2. go to that directory :</p>
<p><strong>cd</strong> conf</p>
<p>3. grab this ca.cnf file to use as a configuration shortcut :</p>
<p><em>wget
https:</em>//raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/ca.cnf</p>
<p>4. create a new certificate authority using this configuration :</p>
<p>openssl req -<strong>new</strong>-x509 -days 9999-config
ca.cnf-keyout ca-key.pem-out ca-cert.pem</p>
<p>5. now that we have our certificate authority in ca-key.pem and
ca-cert.pem, let's generate a private key for</p>
<p>the server :</p>
<p>openssl genrsa -out key.pem 4096</p>
<p>6. grab this server.cnf file to use as a configuration shortcut :</p>
<p><em>wget
https:</em>//raw.githubusercontent.com/anders94/https-authorized-clients/master/keys/server.cnf</p>
<p>7. generate the certificate signing request using this configuration
:</p>
<p>openssl req -<strong>new</strong>-config server.cnf-key key.pem-out
csr.pem</p>
<p>8. sign the request :</p>
<p>openssl x509 -req -extfile server.cnf-days 999-passin
"pass:password"-<strong>in</strong> csr.pem-CA ca-cert.pem-CAkey
ca-key.pem-CAcreateserial -out cert.pem</p>
<p>Step 2 : Install your certificate as a root certificate</p>
<p>1. copy your certificate to your root certificates' folder :</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 106</p>
<p><span id="sudo_cp_ca_crt_pem__usr_local_sh"
class="anchor"></span><strong>sudo cp</strong> ca-crt.pem
<strong>/</strong>usr<strong>/</strong>local<strong>/</strong>share<strong>/</strong>ca-certificates<strong>/</strong>ca-crt.pem</p>
<p>2. update CA store :</p>
<p><strong>sudo</strong> update-ca-certificates</p>
<p>Section 23.4: Using HTTPS</p>
<p>The minimal setup for an HTTPS server in Node.js would be something
like this :</p>
<p><strong>const</strong> https = require('https');</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>const</strong> httpsOptions = {</p>
<p>key: fs.readFileSync('path/to/server-key.pem'),</p>
<p>cert: fs.readFileSync('path/to/server-crt.pem')</p>
<p>};</p>
<p><strong>const</strong> app = <strong>function</strong> (req, res)
{</p>
<p>res.writeHead(200);</p>
<p>res.end("hello world<strong>\n</strong>");</p>
<p>}</p>
<p>https.createServer(httpsOptions, app).listen(4433);</p>
<p>If you also want to support http requests, you need to make just this
small modification:</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>const</strong> https = require('https');</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>const</strong> httpsOptions = {</p>
<p>key: fs.readFileSync('path/to/server-key.pem'),</p>
<p>cert: fs.readFileSync('path/to/server-crt.pem')</p>
<p>};</p>
<p><strong>const</strong> app = <strong>function</strong> (req, res)
{</p>
<p>res.writeHead(200);</p>
<p>res.end("hello world<strong>\n</strong>");</p>
<p>}</p>
<p>http.createServer(app).listen(8888);</p>
<p>https.createServer(httpsOptions, app).listen(4433);</p>
<p>Section 23.5: Secure express.js 3 Application</p>
<p>The configuration to make a secure connection using express.js (Since
version 3):</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> https = require('https');</p>
<p><strong>var</strong> privateKey =
fs.readFileSync('sslcert/server.key', 'utf8'); <strong>var</strong>
certificate = fs.readFileSync('sslcert/server.crt', 'utf8');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 107</p>
<p>// Define your key and cert</p>
<p><strong>var</strong> credentials = {key: privateKey, cert:
certificate}; <strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p>// your express configuration here</p>
<p><strong>var</strong> httpServer = http.createServer(app);</p>
<p><strong>var</strong> httpsServer = https.createServer(credentials,
app);</p>
<p>// Using port 8080 for http and 8443 for https</p>
<p>httpServer.listen(8080);</p>
<p>httpsServer.listen(8443);</p>
<p>In that way you provide express middleware to the native http/https
server</p>
<p>If you want your app running on ports below 1024, you will need to
use sudo command (not recommended) or use a reverse proxy (e.g. nginx,
haproxy).</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 108</p>
<h2 id="chapter-24-mongoose-library">Chapter 24: Mongoose Library</h2>
<p>Section 24.1: Connect to MongoDB Using Mongoose</p>
<p>First, install Mongoose with:</p>
<p>npm <strong>install</strong> mongoose</p>
<p>Then, add it to server.js as dependencies:</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p>Next, create the database schema and the name of the collection:</p>
<p><strong>var</strong> schemaName = <strong>new</strong> Schema({</p>
<p>request: String,</p>
<p>time: Number</p>
<p>}, {</p>
<p>collection: 'collectionName'</p>
<p>});</p>
<p>Create a model and connect to the database:</p>
<p><strong>var</strong> Model = mongoose.model('Model', schemaName);</p>
<p>mongoose.connect('mongodb://localhost:27017/dbName');</p>
<p>Next, start MongoDB and run server.js using node server.js</p>
<p>To check if we have successfully connected to the database, we can
use the events open, error from the mongoose.connection object.</p>
<p><strong>var</strong> db = mongoose.connection;</p>
<p>db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', <strong>function</strong>() {</p>
<p>// we're connected!</p>
<p>});</p>
<p>Section 24.2: Find Data in MongoDB Using Mongoose,</p>
<p>Express.js Routes and $text Operator</p>
<p>Setup</p>
<p>First, install the necessary packages with:</p>
<p>npm <strong>install</strong> express cors mongoose</p>
<p>Code</p>
<p>Then, add dependencies to server.js, create the database schema and
the name of the collection, create an Express.js server, and connect to
MongoDB:</p>
<p><strong>var</strong> express = require('express');</p>
<p><em><strong>var</strong> cors = require('cors');</em> // We will use
CORS to enable cross origin domain requests. <em><strong>var</strong>
mongoose = require('mongoose');</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 109</p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> schemaName = <strong>new</strong> Schema({</p>
<p>request: String,</p>
<p>time: Number</p>
<p>}, {</p>
<p>collection: 'collectionName'</p>
<p>});</p>
<p><strong>var</strong> Model = mongoose.model('Model', schemaName);</p>
<p>mongoose.connect('mongodb://localhost:27017/dbName');</p>
<p><strong>var</strong> port = process.env.PORT || 8080;</p>
<p>app.listen(port, <strong>function</strong>() {</p>
<p>console.log('Node.js listening on port ' + port); });</p>
<p>Now add Express.js routes that we will use to query the data:</p>
<p>app.<strong>get</strong>('/find/:query', cors(),
<strong>function</strong>(req, res) {</p>
<p><strong>var</strong> query = req.params.query;</p>
<p>Model.find({</p>
<p>'request': query</p>
<p>}, <strong>function</strong>(err, result) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong> (result) {</p>
<p>res.json(result)</p>
<p>} <strong>else</strong> {</p>
<p>res.send(JSON.stringify({</p>
<p>error : 'Error'</p>
<p>}))</p>
<p>}</p>
<p>})</p>
<p>})</p>
<p>Assume that the following documents are in the collection in the
model:</p>
<p>{</p>
<p>"_id" : ObjectId("578abe97522ad414b8eeb55a"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710551</p>
<p>}</p>
<p>{</p>
<p>"_id" : ObjectId("578abe9b522ad414b8eeb55b"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710555</p>
<p>}</p>
<p>{</p>
<p>"_id" : ObjectId("578abea0522ad414b8eeb55c"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710560</p>
<p>}</p>
<p>And that the goal is to find and display all the documents containing
only "JavaScript" word under the "request"</p>
<p>key.</p>
<p>To do this, first create a <em>text index</em> for "request" in the
collection. For this, add the following code to server.js:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 110</p>
<p><span id="schemaName_index___request___tex"
class="anchor"></span>schemaName.index({ request: 'text' });</p>
<p>And replace:</p>
<p>Model.find({</p>
<p>'request': query</p>
<p>}, <strong>function</strong>(err, result) {</p>
<p>With:</p>
<p>Model.find({</p>
<p>$text: {</p>
<p>$search: query</p>
<p>}</p>
<p>}, <strong>function</strong>(err, result) {</p>
<p>Here, we are using $text and $search MongoDB operators for find all
documents in collection collectionName</p>
<p>which contains at least one word from the specified find query.</p>
<p>Usage</p>
<p>To use this to find data, go to the following URL in a browser:</p>
<p><em>http:</em>//localhost:8080/find/&lt;query&gt;</p>
<p>Where <strong>&lt;query&gt;</strong> is the search query.</p>
<p>Example:</p>
<p><em>http:</em>//localhost:8080/find/JavaScript</p>
<p>Output:</p>
<p>[{</p>
<p>_id: "578abe97522ad414b8eeb55a",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710551,</p>
<p>__v: 0</p>
<p>},</p>
<p>{</p>
<p>_id: "578abe9b522ad414b8eeb55b",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710555,</p>
<p>__v: 0</p>
<p>},</p>
<p>{</p>
<p>_id: "578abea0522ad414b8eeb55c",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710560,</p>
<p>__v: 0</p>
<p>}]</p>
<p>Section 24.3: Save Data to MongoDB using Mongoose and</p>
<p>Express.js Routes</p>
<p>Setup</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 111</p>
<p>First, install the necessary packages with:</p>
<p>npm <strong>install</strong> express cors mongoose</p>
<p>Code</p>
<p>Then, add dependencies to your server.js file, create the database
schema and the name of the collection, create</p>
<p>an Express.js server, and connect to MongoDB:</p>
<p><strong>var</strong> express = require('express');</p>
<p><em><strong>var</strong> cors = require('cors');</em> // We will use
CORS to enable cross origin domain requests. <em><strong>var</strong>
mongoose = require('mongoose');</em></p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> schemaName = <strong>new</strong> Schema({</p>
<p>request: String,</p>
<p>time: Number</p>
<p>}, {</p>
<p>collection: 'collectionName'</p>
<p>});</p>
<p><strong>var</strong> Model = mongoose.model('Model', schemaName);</p>
<p>mongoose.connect('mongodb://localhost:27017/dbName');</p>
<p><strong>var</strong> port = process.env.PORT || 8080;</p>
<p>app.listen(port, <strong>function</strong>() {</p>
<p>console.log('Node.js listening on port ' + port); });</p>
<p>Now add Express.js routes that we will use to write the data:</p>
<p>app.<strong>get</strong>('/save/:query', cors(),
<strong>function</strong>(req, res) {</p>
<p><strong>var</strong> query = req.params.query;</p>
<p><strong>var</strong> savedata = <strong>new</strong> Model({</p>
<p>'request': query,</p>
<p><em>'time': Math.floor(Date.now() / 1000)</em> // Time of save the
data in unix timestamp format</p>
<p>}).save(<strong>function</strong>(err, result) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong>(result) {</p>
<p>res.json(result)</p>
<p>}</p>
<p>})</p>
<p>})</p>
<p>Here the query variable will be the <strong>&lt;query&gt;</strong>
parameter from the incoming HTTP request, which will be saved to
MongoDB:</p>
<p><strong>var</strong> savedata = <strong>new</strong> Model({</p>
<p>'request': query,</p>
<p>//...</p>
<p>If an error occurs while trying to write to MongoDB, you will receive
an error message on the console. If all is</p>
<p>successful, you will see the saved data in JSON format on the
page.</p>
<p>//...</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 112</p>
<p><span id="___save_function_err__result"
class="anchor"></span>}).save(<strong>function</strong>(err, result)
{</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong>(result) {</p>
<p>res.json(result)</p>
<p>}</p>
<p>})</p>
<p>//...</p>
<p>Now, you need to start MongoDB and run your server.js file using node
server.js.</p>
<p>Usage</p>
<p>To use this to save data, go to the following URL in your
browser:</p>
<p><em>http:</em>//localhost:8080/save/&lt;query&gt;</p>
<p>Where <strong>&lt;query&gt;</strong> is the new request you wish to
save.</p>
<p>Example:</p>
<p><em>http:</em>//localhost:8080/save/JavaScript%20is%20Awesome</p>
<p>Output in JSON format:</p>
<p>{</p>
<p>__v: 0,</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1469411348,</p>
<p>_id: "57957014b93bc8640f2c78c4"</p>
<p>}</p>
<p>Section 24.4: Find Data in MongoDB Using Mongoose and</p>
<p>Express.js Routes</p>
<p>Setup</p>
<p>First, install the necessary packages with:</p>
<p>npm <strong>install</strong> express cors mongoose</p>
<p>Code</p>
<p>Then, add dependencies to server.js, create the database schema and
the name of the collection, create an</p>
<p>Express.js server, and connect to MongoDB:</p>
<p><strong>var</strong> express = require('express');</p>
<p><em><strong>var</strong> cors = require('cors');</em> // We will use
CORS to enable cross origin domain requests. <em><strong>var</strong>
mongoose = require('mongoose');</em></p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> schemaName = <strong>new</strong> Schema({</p>
<p>request: String,</p>
<p>time: Number</p>
<p>}, {</p>
<p>collection: 'collectionName'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 113</p>
<p>});</p>
<p><strong>var</strong> Model = mongoose.model('Model', schemaName);</p>
<p>mongoose.connect('mongodb://localhost:27017/dbName');</p>
<p><strong>var</strong> port = process.env.PORT || 8080;</p>
<p>app.listen(port, <strong>function</strong>() {</p>
<p>console.log('Node.js listening on port ' + port); });</p>
<p>Now add Express.js routes that we will use to query the data:</p>
<p>app.<strong>get</strong>('/find/:query', cors(),
<strong>function</strong>(req, res) {</p>
<p><strong>var</strong> query = req.params.query;</p>
<p>Model.find({</p>
<p>'request': query</p>
<p>}, <strong>function</strong>(err, result) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong> (result) {</p>
<p>res.json(result)</p>
<p>} <strong>else</strong> {</p>
<p>res.send(JSON.stringify({</p>
<p>error : 'Error'</p>
<p>}))</p>
<p>}</p>
<p>})</p>
<p>})</p>
<p>Assume that the following documents are in the collection in the
model:</p>
<p>{</p>
<p>"_id" : ObjectId("578abe97522ad414b8eeb55a"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710551</p>
<p>}</p>
<p>{</p>
<p>"_id" : ObjectId("578abe9b522ad414b8eeb55b"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710555</p>
<p>}</p>
<p>{</p>
<p>"_id" : ObjectId("578abea0522ad414b8eeb55c"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710560</p>
<p>}</p>
<p>And the goal is to find and display all the documents containing
"JavaScript is Awesome" under the "request" key.</p>
<p>For this, start MongoDB and run server.js with node server.js:</p>
<p>Usage</p>
<p>To use this to find data, go to the following URL in a browser:</p>
<p><em>http:</em>//localhost:8080/find/&lt;query&gt;</p>
<p>Where <strong>&lt;query&gt;</strong> is the search query.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 114</p>
<p><span id="Example" class="anchor"></span>Example:</p>
<p><em>http:</em>//localhost:8080/find/JavaScript%20is%20Awesome</p>
<p>Output:</p>
<p>[{</p>
<p>_id: "578abe97522ad414b8eeb55a",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710551,</p>
<p>__v: 0</p>
<p>},</p>
<p>{</p>
<p>_id: "578abe9b522ad414b8eeb55b",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710555,</p>
<p>__v: 0</p>
<p>},</p>
<p>{</p>
<p>_id: "578abea0522ad414b8eeb55c",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710560,</p>
<p>__v: 0</p>
<p>}]</p>
<p>Section 24.5: Useful Mongoose functions</p>
<p>Mongoose contains some built in functions that build on the standard
find().</p>
<p>doc.find({'some.value':5},<strong>function</strong>(err,docs){</p>
<p>//returns array docs</p>
<p>});</p>
<p>doc.findOne({'some.value':5},<strong>function</strong>(err,doc){</p>
<p>//returns document doc</p>
<p>});</p>
<p>doc.findById(obj._id,<strong>function</strong>(err,doc){</p>
<p>//returns document doc</p>
<p>});</p>
<p>Section 24.6: Indexes in models</p>
<p>MongoDB supports secondary indexes. In Mongoose, we define these
indexes within our schema. Defining indexes</p>
<p>at schema level is necessary when we need to create compound
indexes.</p>
<p>Mongoose Connection</p>
<p><strong>var</strong> strConnection =
'mongodb://localhost:27017/dbName'; <strong>var</strong> db =
mongoose.createConnection(strConnection)</p>
<p>Creating a basic schema</p>
<p><strong>var</strong> Schema = require('mongoose').Schema;</p>
<p><strong>var</strong> usersSchema = <strong>new</strong> Schema({</p>
<p>username: {</p>
<p>type: String,</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 115</p>
<p>required: <strong>true</strong>,</p>
<p>unique: <strong>true</strong></p>
<p>},</p>
<p>email: {</p>
<p>type: String,</p>
<p>required: <strong>true</strong></p>
<p>},</p>
<p>password: {</p>
<p>type: String,</p>
<p>required: <strong>true</strong></p>
<p>},</p>
<p>created: {</p>
<p>type: Date,</p>
<p><strong>default</strong>: Date.now</p>
<p>}</p>
<p>});</p>
<p><strong>var</strong> usersModel = db.model('users', usersSchema);</p>
<p>module.exports = usersModel;</p>
<p>By default, mongoose adds two new fields into our model, even when
those are not defined in the model. Those</p>
<p>fields are:</p>
<p>_id</p>
<p>Mongoose assigns each of your schemas an _id field by default if one
is not passed into the Schema constructor.</p>
<p>The type assigned is an ObjectId to coincide with MongoDB's default
behavior. If you don't want an _id added to your schema at all, you may
disable it using this option.</p>
<p><strong>var</strong> usersSchema = <strong>new</strong> Schema({</p>
<p>username: {</p>
<p>type: String,</p>
<p>required: <strong>true</strong>,</p>
<p>unique: <strong>true</strong></p>
<p>}, {</p>
<p>_id: <strong>false</strong></p>
<p>});</p>
<p>__v or versionKey</p>
<p>The versionKey is a property set on each document when first created
by Mongoose. This keys value contains the internal revision of the
document. The name of this document property is configurable.</p>
<p>You can easy disable this field in the model configuration:</p>
<p><strong>var</strong> usersSchema = <strong>new</strong> Schema({</p>
<p>username: {</p>
<p>type: String,</p>
<p>required: <strong>true</strong>,</p>
<p>unique: <strong>true</strong></p>
<p>}, {</p>
<p>versionKey: <strong>false</strong></p>
<p>});</p>
<p>Compound indexes</p>
<p>We can create another indexes besides those Mongoose creates.</p>
<p>usersSchema.index({username: 1 });</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 116</p>
<p><span id="usersSchema_index__email__1"
class="anchor"></span>usersSchema.index({email: 1 });</p>
<p>In these case our model have two more indexes, one for the field
username and another for email field. But we can create compound
indexes.</p>
<p>usersSchema.index({username: 1, email: 1 });</p>
<p>Index performance impact</p>
<p>By default, mongoose always call the ensureIndex for each index
sequentially and emit an 'index' event on the</p>
<p>model when all the ensureIndex calls succeeded or when there was an
error.</p>
<p>In MongoDB ensureIndex is deprecated since 3.0.0 version, now is an
alias for createIndex.</p>
<p>Is recommended disable the behavior by setting the autoIndex option
of your schema to false, or globally on the connection by setting the
option config.autoIndex to false.</p>
<p>usersSchema.<strong>set</strong>('autoIndex',
<strong>false</strong>);</p>
<p>Section 24.7: find data in mongodb using promises</p>
<p>Setup</p>
<p>First, install the necessary packages with:</p>
<p>npm <strong>install</strong> express cors mongoose</p>
<p>Code</p>
<p>Then, add dependencies to server.js, create the database schema and
the name of the collection, create an</p>
<p>Express.js server, and connect to MongoDB:</p>
<p><strong>var</strong> express = require('express');</p>
<p><em><strong>var</strong> cors = require('cors');</em> // We will use
CORS to enable cross origin domain requests. <em><strong>var</strong>
mongoose = require('mongoose');</em></p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> schemaName = <strong>new</strong> Schema({</p>
<p>request: String,</p>
<p>time: Number</p>
<p>}, {</p>
<p>collection: 'collectionName'</p>
<p>});</p>
<p><strong>var</strong> Model = mongoose.model('Model', schemaName);</p>
<p>mongoose.connect('mongodb://localhost:27017/dbName');</p>
<p><strong>var</strong> port = process.env.PORT || 8080;</p>
<p>app.listen(port, <strong>function</strong>() {</p>
<p>console.log('Node.js listening on port ' + port); });</p>
<p>app.use(<strong>function</strong>(err, req, res, next) {</p>
<p>console.error(err.stack);</p>
<p>res.status(500).send('Something broke!');</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 117</p>
<p>app.use(<strong>function</strong>(req, res, next) {</p>
<p>res.status(404).send('Sorry cant find that!');</p>
<p>});</p>
<p>Now add Express.js routes that we will use to query the data:</p>
<p>app.<strong>get</strong>('/find/:query', cors(),
<strong>function</strong>(req, res, next) {</p>
<p><strong>var</strong> query = req.params.query;</p>
<p>Model.find({</p>
<p>'request': query</p>
<p>})</p>
<p><em>.exec()</em> //remember to add exec, queries have a .then
attribute but aren't promises</p>
<p>.then(<strong>function</strong>(result) {</p>
<p><strong>if</strong> (result) {</p>
<p>res.json(result)</p>
<p>} <strong>else</strong> {</p>
<p><em>next()</em> //pass to 404 handler</p>
<p>}</p>
<p>})</p>
<p><em>.<strong>catch</strong>(next)</em> //pass to error handler</p>
<p>})</p>
<p>Assume that the following documents are in the collection in the
model:</p>
<p>{</p>
<p>"_id" : ObjectId("578abe97522ad414b8eeb55a"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710551</p>
<p>}</p>
<p>{</p>
<p>"_id" : ObjectId("578abe9b522ad414b8eeb55b"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710555</p>
<p>}</p>
<p>{</p>
<p>"_id" : ObjectId("578abea0522ad414b8eeb55c"),</p>
<p>"request" : "JavaScript is Awesome",</p>
<p>"time" : 1468710560</p>
<p>}</p>
<p>And the goal is to find and display all the documents containing
"JavaScript is Awesome" under the "request"</p>
<p>key.</p>
<p>For this, start MongoDB and run server.js with node server.js:</p>
<p>Usage</p>
<p>To use this to find data, go to the following URL in a browser:</p>
<p><em>http:</em>//localhost:8080/find/&lt;query&gt;</p>
<p>Where <strong>&lt;query&gt;</strong> is the search query.</p>
<p>Example:</p>
<p><em>http:</em>//localhost:8080/find/JavaScript%20is%20Awesome</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 118</p>
<p>Output:</p>
<p>[{</p>
<p>_id: "578abe97522ad414b8eeb55a",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710551,</p>
<p>__v: 0</p>
<p>},</p>
<p>{</p>
<p>_id: "578abe9b522ad414b8eeb55b",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710555,</p>
<p>__v: 0</p>
<p>},</p>
<p>{</p>
<p>_id: "578abea0522ad414b8eeb55c",</p>
<p>request: "JavaScript is Awesome",</p>
<p>time: 1468710560,</p>
<p>__v: 0</p>
<p>}]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 119</p>
<h2 id="chapter-25-async.js">Chapter 25: async.js</h2>
<p>Section 25.1: Parallel : multi-tasking</p>
<p><a
href="http://caolan.github.io/async/docs.html#.parallel"><em>async.parallel(tasks,
afterTasksCallback)</em> will execute a set of tasks in parallel and</a>
<strong>wait the end of all tasks</strong> (reported</p>
<p>by the call of <strong>callback</strong> function).</p>
<p>When tasks are finished, <em>async</em> call the main callback with
all errors and all results of tasks.</p>
<p><strong>function</strong> shortTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfShortTime');</p>
<p>}, 200);</p>
<p>}</p>
<p><strong>function</strong> mediumTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfMediumTime');</p>
<p>}, 500);</p>
<p>}</p>
<p><strong>function</strong> longTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfLongTime');</p>
<p>}, 1000);</p>
<p>}</p>
<p>async.parallel([</p>
<p>shortTimeFunction,</p>
<p>mediumTimeFunction,</p>
<p>longTimeFunction</p>
<p>],</p>
<p><strong>function</strong>(err, results) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p>}</p>
<p>console.log(results);</p>
<p>});</p>
<p><strong>Result :</strong> ["resultOfShortTime", "resultOfMediumTime",
"resultOfLongTime"].</p>
<p>Call async.parallel() with an object</p>
<p>You can replace the <em>tasks</em> array parameter by an object. In
this case, results will be also an object <strong>with the
same</strong></p>
<p>keys than tasks<strong>.</strong></p>
<p>It's very useful to compute some tasks and find easily each
result.</p>
<p>async.parallel({</p>
<p>short: shortTimeFunction,</p>
<p>medium: mediumTimeFunction,</p>
<p>long: longTimeFunction</p>
<p>},</p>
<p><strong>function</strong>(err, results) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 120</p>
<p><span id="console_log_results"
class="anchor"></span>console.log(results);</p>
<p>});</p>
<p><strong>Result :</strong> {short: "resultOfShortTime", medium:
"resultOfMediumTime", long: "resultOfLongTime"}.</p>
<p>Resolving multiple values</p>
<p>Each parallel function is passed a callback. This callback can either
return an error as the first argument or success</p>
<p>values after that. If a callback is passed several success values,
these results are returned as an array.</p>
<p>async.parallel({</p>
<p>short: <strong>function</strong> shortTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfShortTime1',
'resultOfShortTime2');</p>
<p>}, 200);</p>
<p>},</p>
<p>medium: <strong>function</strong> mediumTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfMediumTime1',
'resultOfMeiumTime2');</p>
<p>}, 500);</p>
<p>}</p>
<p>},</p>
<p><strong>function</strong>(err, results) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p>}</p>
<p>console.log(results);</p>
<p>});</p>
<p>Result :</p>
<p>{</p>
<p>short: ["resultOfShortTime1", "resultOfShortTime2"],</p>
<p>medium: ["resultOfMediumTime1", "resultOfMediumTime2"] }</p>
<p>.</p>
<p>Section 25.2: async.each(To handle array of data eciently)</p>
<p>When we want to handle array of data, its better to use
<strong>async.each</strong>. When we want to perform something with
all</p>
<p>data &amp; want to get the final callback once everything is done,
then this method will be useful. This is handled in</p>
<p>parallel way.</p>
<p><strong>function</strong> createUser(userName, callback)</p>
<p>{</p>
<p>//create user in db</p>
<p><em>callback(<strong>null</strong>)</em>//or error based on
creation</p>
<p>}</p>
<p><strong>var</strong> arrayOfData = ['Ritu', 'Sid', 'Tom'];</p>
<p>async.each(arrayOfData, <strong>function</strong>(eachUserName,
callback) {</p>
<p>// Perform operation on each user.</p>
<p>console.log('Creating user '+eachUserName);</p>
<p>//Returning callback is must. Else it won't get the final callback,
even if we miss to return one</p>
<p>callback</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 121</p>
<p><span id="createUser_eachUserName__callbac"
class="anchor"></span>createUser(eachUserName, callback);</p>
<p>}, <strong>function</strong>(err) {</p>
<p>//If any of the user creation failed may throw error.
<em><strong>if</strong>( err ) {</em></p>
<p>// One of the iterations produced an error.</p>
<p>// All processing will now stop.</p>
<p>console.log('unable to create user');</p>
<p>} <strong>else</strong> {</p>
<p>console.log('All user created successfully');</p>
<p>}</p>
<p>});</p>
<p>To do one at a time can use <strong>async.eachSeries</strong></p>
<p>Section 25.3: Series : independent mono-tasking</p>
<p><a
href="http://caolan.github.io/async/docs.html#.series"><em>async.series(tasks,
afterTasksCallback)</em></a> will execute a set of tasks. Each task are
executed <strong>after another</strong>. <strong>If a task</strong></p>
<p>fails, <em>async</em> stops immediately the execution and jump into
the main callback<strong>.</strong></p>
<p>When tasks are finished successfully, <em>async</em> call the
"master" callback with all errors and all results of tasks.</p>
<p><strong>function</strong> shortTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfShortTime');</p>
<p>}, 200);</p>
<p>}</p>
<p><strong>function</strong> mediumTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfMediumTime');</p>
<p>}, 500);</p>
<p>}</p>
<p><strong>function</strong> longTimeFunction(callback) {</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>callback(<strong>null</strong>, 'resultOfLongTime');</p>
<p>}, 1000);</p>
<p>}</p>
<p>async.series([</p>
<p>mediumTimeFunction,</p>
<p>shortTimeFunction,</p>
<p>longTimeFunction</p>
<p>],</p>
<p><strong>function</strong>(err, results) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p>}</p>
<p>console.log(results);</p>
<p>});</p>
<p><strong>Result :</strong> ["resultOfMediumTime", "resultOfShortTime",
"resultOfLongTime"].</p>
<p>Call async.series() with an object</p>
<p>You can replace the <em>tasks</em> array parameter by an object. In
this case, results will be also an object <strong>with the
same</strong></p>
<p>keys than tasks<strong>.</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 122</p>
<p><span id="It_s_very_useful_to_compute_some"
class="anchor"></span>It's very useful to compute some tasks and find
easily each result.</p>
<p>async.series({</p>
<p>short: shortTimeFunction,</p>
<p>medium: mediumTimeFunction,</p>
<p>long: longTimeFunction</p>
<p>},</p>
<p><strong>function</strong>(err, results) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p>}</p>
<p>console.log(results);</p>
<p>});</p>
<p><strong>Result :</strong> {short: "resultOfShortTime", medium:
"resultOfMediumTime", long: "resultOfLongTime"}.</p>
<p>Section 25.4: Waterfall : dependent mono-tasking</p>
<p><a
href="http://caolan.github.io/async/docs.html#.waterfall"><em>async.waterfall(tasks,
afterTasksCallback)</em> will execute a set of tasks. Each task are
executed</a> <strong>after another, and the</strong></p>
<p><strong>result of a task is passed to the next task</strong>. As
<em>async.series()</em>, if a task fails, <em>async</em> stop the
execution and call</p>
<p>immediately the main callback.</p>
<p>When tasks are finished successfully, <em>async</em> call the
"master" callback with all errors and all results of tasks.</p>
<p><strong>function</strong> getUserRequest(callback) {</p>
<p>// We simulate the request with a timeout</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p><strong>var</strong> userResult = {</p>
<p>name : 'Aamu'</p>
<p>};</p>
<p>callback(<strong>null</strong>, userResult);</p>
<p>}, 500);</p>
<p>}</p>
<p><strong>function</strong> getUserFriendsRequest(user, callback) {</p>
<p>// Another request simulate with a timeout</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p><strong>var</strong> friendsResult = [];</p>
<p><strong>if</strong> (user.name === "Aamu"){</p>
<p>friendsResult = [{</p>
<p>name : 'Alice'</p>
<p>}, {</p>
<p>name: 'Bob'</p>
<p>}];</p>
<p>}</p>
<p>callback(<strong>null</strong>, friendsResult);</p>
<p>}, 500);</p>
<p>}</p>
<p>async.waterfall([</p>
<p>getUserRequest,</p>
<p>getUserFriendsRequest</p>
<p>],</p>
<p><strong>function</strong>(err, results) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 123</p>
<p><span id="_6" class="anchor"></span>}</p>
<p>console.log(JSON.stringify(results));</p>
<p>});</p>
<p><strong>Result:</strong> results contains the second callback
parameter of the last function of the waterfall, which is friendsResult
in that case.</p>
<p>Section 25.5: async.times(To handle for loop in better way)</p>
<p>To execute a function within a loop in node.js, it's fine to use a
<strong>for</strong> loop for short loops. But the loop is long, using
<strong>for</strong> loop will increase the time of processing which
might cause the node process to hang. In such scenarios, you</p>
<p><strong>can use:</strong> asycn.times</p>
<p><strong>function</strong> recursiveAction(n, callback)</p>
<p>{</p>
<p>//do whatever want to do repeatedly</p>
<p>callback(err, result);</p>
<p>}</p>
<p>async.times(5, <strong>function</strong>(n, next) {</p>
<p>recursiveAction(n, <strong>function</strong>(err, result) {</p>
<p>next(err, result);</p>
<p>});</p>
<p>}, <strong>function</strong>(err, results) {</p>
<p>// we should now have 5 result</p>
<p>});</p>
<p>This is called in parallel. When we want to call it one at a time,
use: <strong>async.timesSeries</strong></p>
<p>Section 25.6: async.series(To handle events one by one)</p>
<p>In async.series, all the functions are executed in series and the
consolidated outputs of each function is passed to the final callback.
e.g</p>
<p><strong>var</strong> async = require('async');</p>
<p>async.series([</p>
<p><strong>function</strong> (callback) {</p>
<p>console.log('First Execute..');</p>
<p>callback(<strong>null</strong>, 'userPersonalData');</p>
<p>},</p>
<p><strong>function</strong> (callback) {</p>
<p>console.log('Second Execute.. ');</p>
<p>callback(<strong>null</strong>, 'userDependentData');</p>
<p>}</p>
<p>],</p>
<p><strong>function</strong> (err, result) {</p>
<p>console.log(result);</p>
<p>});</p>
<p>Output:</p>
<p>First Execute.. Second Execute..
['userPersonalData','userDependentData'] //result</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 124</p>
<h2 id="chapter-26-file-upload">Chapter 26: File upload</h2>
<p>Section 26.1: Single File Upload using multer</p>
<p>Remember to</p>
<p>create folder for upload (uploads in example).</p>
<p>install multer npm i -S multer</p>
<p>server.js<strong>:</strong></p>
<p><strong>var</strong> express = require("express");</p>
<p><strong>var</strong> multer = require('multer');</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> fs = require('fs');</p>
<p>app.<strong>get</strong>('/',<strong>function</strong>(req,res){</p>
<p>res.sendFile(__dirname + "/index.html");</p>
<p>});</p>
<p><strong>var</strong> storage = multer.diskStorage({</p>
<p>destination: <strong>function</strong> (req, file, callback) {</p>
<p>fs.mkdir('./uploads', <strong>function</strong>(err) {</p>
<p><strong>if</strong>(err) {</p>
<p>console.log(err.stack)</p>
<p>} <strong>else</strong> {</p>
<p>callback(<strong>null</strong>, './uploads');</p>
<p>}</p>
<p>})</p>
<p>},</p>
<p>filename: <strong>function</strong> (req, file, callback) {</p>
<p>callback(<strong>null</strong>, file.fieldname + '-' +
Date.now());</p>
<p>}</p>
<p>});</p>
<p>app.post('/api/file',<strong>function</strong>(req,res){</p>
<p><strong>var</strong> upload = multer({ storage :
storage}).single('userFile');</p>
<p>upload(req,res,<strong>function</strong>(err) {</p>
<p><strong>if</strong>(err) {</p>
<p><strong>return</strong> res.end("Error uploading file.");</p>
<p>}</p>
<p>res.end("File is uploaded");</p>
<p>});</p>
<p>});</p>
<p>app.listen(3000,<strong>function</strong>(){</p>
<p>console.log("Working on port 3000");</p>
<p>});</p>
<p>index.html <strong>:</strong></p>
<p><strong>&lt;form</strong> id = "uploadForm"</p>
<p>enctype = "multipart/form-data"</p>
<p>action = "/api/file"</p>
<p>method = "post"</p>
<p>&gt;</p>
<p><strong>&lt;input</strong> type="file" name="userFile"
<strong>/&gt;</strong></p>
<p><strong>&lt;input</strong> type="submit" value="Upload File"
name="submit"<strong>&gt;</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 125</p>
<p><span id="__form" class="anchor"></span>&lt;/form&gt;</p>
<p>Note:</p>
<p><a href="https://nodejs.org/api/path.html#path_path">To upload file
with extension you can use Node.js path built-in library</a></p>
<p>For that just require path to server.js file:</p>
<p><strong>var</strong> path = require('path');</p>
<p>and change:</p>
<p>callback(<strong>null</strong>, file.fieldname + '-' +
Date.now());</p>
<p>adding a file extension in the following way:</p>
<p>callback(<strong>null</strong>, file.fieldname + '-' + Date.now() +
path.extname(file.originalname));</p>
<p>How to filter upload by extension:</p>
<p>In this example, view how to upload files to allow only certain
extensions.</p>
<p>For example only images extensions. Just add to <strong>var</strong>
upload = multer({ storage : storage}).single('userFile'); fileFilter
condition</p>
<p><strong>var</strong> upload = multer({</p>
<p>storage: storage,</p>
<p>fileFilter: <strong>function</strong> (req, file, callback) {</p>
<p><strong>var</strong> ext = path.extname(file.originalname);</p>
<p><strong>if</strong>(ext !== '.png' &amp;&amp; ext !== '.jpg'
&amp;&amp; ext !== '.gif' &amp;&amp; ext !== '.jpeg') {</p>
<p><strong>return</strong> callback(<strong>new</strong> Error('Only
images are allowed'))</p>
<p>}</p>
<p>callback(<strong>null</strong>, <strong>true</strong>)</p>
<p>}</p>
<p>}).single('userFile');</p>
<p>Now you can upload only image files with png, jpg, gif or jpeg
extensions</p>
<p>Section 26.2: Using formidable module</p>
<p><a href="https://github.com/felixge/node-formidable">Install module
and read <strong>docs</strong></a></p>
<p>npm i formidable<strong>@</strong>latest</p>
<p>Example of server on 8080 port</p>
<p><strong>var</strong> formidable = require('formidable'),</p>
<p>http = require('http'),</p>
<p>util = require('util');</p>
<p>http.createServer(<strong>function</strong>(req, res) {</p>
<p><strong>if</strong> (req.url == '/upload' &amp;&amp;
req.method.toLowerCase() == 'post') {</p>
<p>// parse a file upload</p>
<p><strong>var</strong> form = <strong>new</strong>
formidable.IncomingForm();</p>
<p>form.parse(req, <strong>function</strong>(err, fields, files) {</p>
<p><strong>if</strong> (err)</p>
<p><em>do-smth;</em> // process error</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 126</p>
<p>// Copy file from temporary place</p>
<p>// var fs = require('fs');</p>
<p>// fs.rename(file.path, &lt;targetPath&gt;, function (err) { ...
});</p>
<p>// Send result on client</p>
<p>res.writeHead(200, {'content-type': 'text/plain'});</p>
<p>res.write('received upload:<strong>\n\n</strong>');</p>
<p>res.end(util.inspect({fields: fields, files: files}));</p>
<p>});</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>// show a file upload form</p>
<p>res.writeHead(200, {'content-type': 'text/html'}); res.end(</p>
<p>'</p>
<p>'+ '<br />
'+</p>
<p>'<br />
'+ ''+</p>
<p>'</p>
<p>'</p>
<p>);</p>
<p>}).listen(8080);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 127</p>
<h2 id="chapter-27-socket.io-communication">Chapter 27: Socket.io
communication</h2>
<p>Section 27.1: "Hello world!" with socket messages</p>
<p>Install node modules</p>
<p>npm <strong>install</strong> express</p>
<p>npm <strong>install</strong> socket.io</p>
<p>Node.js server</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p><strong>const</strong> server =
app.listen(3000,console.log("Socket.io Hello World server started!"));
<strong>const</strong> io = require('socket.io')(server);</p>
<p>io.on('connection', (socket) =&gt; {</p>
<p>//console.log("Client connected!");</p>
<p>socket.on('message-from-client-to-server', (msg) =&gt; {</p>
<p>console.log(msg);</p>
<p>})</p>
<p>socket.emit('message-from-server-to-client', 'Hello World!'); });</p>
<p>Browser client</p>
<p>Socket.io Hello World client started!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 128</p>
<h2 id="chapter-28-mongodb-integration">Chapter 28: Mongodb
integration</h2>
<p>Parameter Details</p>
<p>document A javascript object representing a document</p>
<p>documents An array of documents</p>
<p>query An object defining a search query</p>
<p>filter An object defining a search query</p>
<p>callback Function to be called when the operation is done</p>
<p>options <em>(optional)</em> Optional settings <em>(default:
null)</em></p>
<p>w <em>(optional)</em> The write concern</p>
<p>wtimeout <em>(optional)</em> The write concern timeout. <em>(default:
null)</em></p>
<p>j <em>(optional)</em> Specify a journal write concern <em>(default:
false)</em></p>
<p><em>upsert</em> (optional) <em>Update operation</em> (default:
false)</p>
<p>multi <em>(optional)</em> Update one/all documents <em>(default:
false)</em></p>
<p>serializeFunctions <em>(optional)</em> Serialize functions on any
object <em>(default: false)</em></p>
<p>forceServerObjectId <em>(optional)</em> Force server to assign _id
values instead of driver <em>(default: false)</em></p>
<p>bypassDocumentValidation <em>(optional)</em> Allow driver to bypass
schema validation in MongoDB 3.2 or higher <em>(default:</em>
<em>false)</em></p>
<p>Section 28.1: Simple connect</p>
<p>MongoDB.connect('mongodb://localhost:27017/databaseName',
function(error, database) { if(error) return console.log(error); const
collection = database.collection('collectionName');
collection.insert({key: 'value'},</p>
<p>function(error, result) { console.log(error, result); }); });</p>
<p>Section 28.2: Simple connect, using promises</p>
<p><strong>const</strong> MongoDB = require('mongodb');</p>
<p>MongoDB.connect('mongodb://localhost:27017/databaseName')</p>
<p>.then(<strong>function</strong>(database) {</p>
<p><strong>const</strong> collection =
database.collection('collectionName'); <strong>return</strong>
collection.insert({key: 'value'});</p>
<p>})</p>
<p>.then(<strong>function</strong>(result) {</p>
<p>console.log(result);</p>
<p>});</p>
<p>```</p>
<p>Section 28.3: Connect to MongoDB</p>
<p>Connect to MongoDB, print 'Connected!' and close the connection.</p>
<p><strong>const</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p><strong>var</strong> url = 'mongodb://localhost:27017/test';</p>
<p>MongoClient.connect(url, <strong>function</strong>(err, db) { <em>//
MongoClient method 'connect'</em></p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p>console.log("Connected!");</p>
<p><em>db.close();</em> // Don't forget to close the connection when you
are done <em>});</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 129</p>
<p><span id="MongoClient_method_Connect"
class="anchor"></span>MongoClient method Connect()</p>
<p>MongoClient.connect(<em>url</em>, <em>options</em>,
<em>callback</em>)</p>
<p>Argument Type Description</p>
<p>url string A string specifying the server ip/hostname, port and
database</p>
<p>options object <em>(optional)</em> Optional settings <em>(default:
null)</em></p>
<p>callback Function Function to be called when the connection attempt
is done</p>
<p>The callback function takes two arguments</p>
<p>err : Error - If an error occurs the err argument will be defined db
: object - The MongoDB instance</p>
<p>Section 28.4: Insert a document</p>
<p>Insert a document called 'myFirstDocument' and set <strong>2</strong>
properties, greetings and farewell</p>
<p><strong>const</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p><strong>const</strong> url = 'mongodb://localhost:27017/test';</p>
<p>MongoClient.connect(url, <strong>function</strong> (err, db) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p>db.collection('myCollection').insertOne({ <em>// Insert method
'insertOne'</em></p>
<p>"myFirstDocument": {</p>
<p>"greetings": "Hellu",</p>
<p>"farewell": "Bye"</p>
<p>}</p>
<p>}, <strong>function</strong> (err, result) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p>console.log("Inserted a document into the myCollection
collection!");</p>
<p><em>db.close();</em> // Don't forget to close the connection when you
are done</p>
<p>});</p>
<p>});</p>
<p>Collection method insertOne()</p>
<p><em>db.collection(</em>collection<em>).insertOne(</em>document<em>,</em>
options<em>,</em> callback<em>)</em></p>
<p>Argument Type Description</p>
<p>collection string A string specifying the collection</p>
<p>document object The document to be inserted into the collection</p>
<p>options object <em>(optional)</em> Optional settings <em>(default:
null)</em></p>
<p>callback Function Function to be called when the insert operation is
done</p>
<p>The callback function takes two arguments</p>
<p>err : Error - If an error occurs the err argument will be defined</p>
<p>result : object - An object containing details about the insert
operation</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 130</p>
<p><span id="Section_28_5__Read_a_collection"
class="anchor"></span>Section 28.5: Read a collection</p>
<p>Get all documents in the collection 'myCollection' and print them to
the console.</p>
<p><strong>const</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p><strong>const</strong> url = 'mongodb://localhost:27017/test';</p>
<p>MongoClient.connect(url, <strong>function</strong> (err, db) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p><strong>var</strong> cursor = db.collection('myCollection').find();
<em>// Read method 'find'</em></p>
<p>cursor.each(<strong>function</strong> (err, doc) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p><strong>if</strong> (doc != <strong>null</strong>) {</p>
<p><em>console.log(doc);</em> // Print all documents</p>
<p>} <strong>else</strong> {</p>
<p><em>db.close();</em> // Don't forget to close the connection when you
are done</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>Collection method find()</p>
<p>db.collection(<em>collection</em>).find()</p>
<p>Argument Type Description</p>
<p>collection string A string specifying the collection</p>
<p>Section 28.6: Update a document</p>
<p>Find a document with the property { greetings: 'Hellu' } and change
it to { greetings: 'Whut?' }</p>
<p><strong>const</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p><strong>const</strong> url = 'mongodb://localhost:27017/test';</p>
<p>MongoClient.connect(url, <strong>function</strong> (err, db) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p>db.collection('myCollection').updateOne({ <em>// Update method
'updateOne'</em></p>
<p>greetings: "Hellu" },</p>
<p>{ $set: { greetings: "Whut?" }},</p>
<p><strong>function</strong> (err, result) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p><em>db.close();</em> // Don't forget to close the connection when you
are done</p>
<p>});</p>
<p>});</p>
<p>Collection method updateOne()</p>
<p><em>db.collection(</em>collection<em>).updateOne(</em>filter<em>,</em>
update<em>,</em> options<em>.</em> callback<em>)</em></p>
<p>Parameter Type Description</p>
<p>filter object Specifies the selection critera</p>
<p>update object Specifies the modifications to apply</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 131</p>
<p><span id="options____object____optional__O"
class="anchor"></span>options object <em>(optional)</em> Optional
settings <em>(default: null)</em></p>
<p>callback Function Function to be called when the operation is
done</p>
<p>The callback function takes two arguments</p>
<p>err : Error - If an error occurs the err argument will be defined</p>
<p>db : object - The MongoDB instance</p>
<p>Section 28.7: Delete a document</p>
<p>Delete a document with the property { greetings: 'Whut?' }</p>
<p><strong>const</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p><strong>const</strong> url = 'mongodb://localhost:27017/test';</p>
<p>MongoClient.connect(url, <strong>function</strong> (err, db) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p>db.collection('myCollection').deleteOne(<em>// Delete method
'deleteOne'</em></p>
<p>{ greetings: "Whut?" },</p>
<p><strong>function</strong> (err, result) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p><em>db.close();</em> // Don't forget to close the connection when you
are done</p>
<p>});</p>
<p>});</p>
<p>Collection method deleteOne()</p>
<p>db.collection(<em>collection</em>).deleteOne(<em>filter</em>,
<em>options</em>, <em>callback</em>)</p>
<p>Parameter Type Description</p>
<p>filter object A document specifying the selection critera</p>
<p>options object <em>(optional)</em> Optional settings <em>(default:
null)</em></p>
<p>callback Function Function to be called when the operation is
done</p>
<p>The callback function takes two arguments</p>
<p>err : Error - If an error occurs the err argument will be defined</p>
<p>db : object - The MongoDB instance</p>
<p>Section 28.8: Delete multiple documents</p>
<p>Delete ALL documents with a 'farewell' property set to 'okay'.</p>
<p><strong>const</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p><strong>const</strong> url = 'mongodb://localhost:27017/test';</p>
<p>MongoClient.connect(url, <strong>function</strong> (err, db) {</p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p>db.collection('myCollection').deleteMany(<em>// MongoDB delete method
'deleteMany'</em></p>
<p><em>{ farewell: "okay" },</em> // Delete ALL documents with the
property 'farewell: okay' <em><strong>function</strong> (err, result)
{</em></p>
<p><strong>if</strong> (err) <strong>throw new</strong> Error(err);</p>
<p><em>db.close();</em> // Don't forget to close the connection when you
are done</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 132</p>
<p>});</p>
<p>});</p>
<p>Collection method deleteMany()</p>
<p>db.collection(<em>collection</em>).deleteMany(<em>filter</em>,
<em>options</em>, <em>callback</em>)</p>
<p>Parameter Type Description</p>
<p>filter document A document specifying the selection critera</p>
<p>options object <em>(optional)</em> Optional settings <em>(default:
null)</em></p>
<p>callback function Function to be called when the operation is
done</p>
<p>The callback function takes two arguments</p>
<p>err : Error - If an error occurs the err argument will be defined db
: object - The MongoDB instance</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 133</p>
<h2 id="chapter-29-handling-post-request-in">Chapter 29: Handling POST
request in</h2>
<p>Node.js</p>
<p>Section 29.1: Sample node.js server that just handles POST</p>
<p>requests</p>
<p>'use strict';</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>const</strong> PORT = 8080;</p>
<p><strong>const</strong> server = http.createServer((request, response)
=&gt; {</p>
<p><strong>let</strong> buffer = '';</p>
<p>request.on('data', chunk =&gt; {</p>
<p>buffer += chunk;</p>
<p>});</p>
<p>request.on('end', () =&gt; {</p>
<p><strong>const</strong> responseString = `Received string
${buffer}`;</p>
<p>console.log(`Responding with: ${responseString}`);</p>
<p>response.writeHead(200, "Content-Type: text/plain");</p>
<p>response.end(responseString);</p>
<p>});</p>
<p>}).listen(PORT, () =&gt; {</p>
<p>console.log(`Listening on ${PORT}`);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 134</p>
<h2 id="chapter-30-simple-rest-based-crud-api">Chapter 30: Simple REST
based CRUD API</h2>
<p>Section 30.1: REST API for CRUD in Express 3+</p>
<p><strong>var</strong> express = require("express"),</p>
<p>bodyParser = require("body-parser"),</p>
<p>server = express();</p>
<p>//body parser for parsing request body</p>
<p>server.use(bodyParser.json());</p>
<p>server.use(bodyParser.urlencoded({ extended: <strong>true</strong>
}));</p>
<p>//temperary store for `item` in memory</p>
<p><strong>var</strong> itemStore = [];</p>
<p>//GET all items</p>
<p>server.<strong>get</strong>('/item', <strong>function</strong> (req,
res) {</p>
<p>res.json(itemStore);</p>
<p>});</p>
<p>//GET the item with specified id</p>
<p>server.<strong>get</strong>('/item/:id', <strong>function</strong>
(req, res) {</p>
<p>res.json(itemStore[req.params.id]);</p>
<p>});</p>
<p>//POST new item</p>
<p>server.post('/item', <strong>function</strong> (req, res) {</p>
<p>itemStore.push(req.body);</p>
<p>res.json(req.body);</p>
<p>});</p>
<p>//PUT edited item in-place of item with specified id
<em>server.put('/item/:id', <strong>function</strong> (req, res)
{</em></p>
<p>itemStore[req.params.id] = req.body</p>
<p>res.json(req.body);</p>
<p>});</p>
<p>//DELETE item with specified id</p>
<p>server.<strong>delete</strong>('/item/:id', <strong>function</strong>
(req, res) {</p>
<p>itemStore.splice(req.params.id, 1)</p>
<p>res.json(req.body);</p>
<p>});</p>
<p>//START SERVER</p>
<p>server.listen(3000, <strong>function</strong> () {</p>
<p>console.log("Server running");</p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 135</p>
<h2 id="chapter-31-template-frameworks">Chapter 31: Template
frameworks</h2>
<p>Section 31.1: Nunjucks</p>
<p>Server-side engine with block inheritance, autoescaping, macros,
asynchronous control, and more. Heavily inspired by jinja2, very similar
to Twig (php).</p>
<p><a href="http://mozilla.github.io/nunjucks/">Docs -
http://mozilla.github.io/nunjucks/</a></p>
<p>Install - npm i nunjucks</p>
<p>Basic usage with <a href="http://expressjs.com/"><em>Express</em></a>
below.</p>
<p>app.js</p>
<p><strong>var</strong> express = require ('express');</p>
<p><strong>var</strong> nunjucks = require('nunjucks');</p>
<p><strong>var</strong> app = express();</p>
<p>app.use(express.<strong>static</strong>('/public'));</p>
<p>// Apply nunjucks and add custom filter and function (for example).
<em><strong>var</strong> env = nunjucks.configure(['views/'], {</em> //
set folders with templates</p>
<p>autoescape: <strong>true</strong>,</p>
<p>express: app</p>
<p>});</p>
<p>env.addFilter('myFilter', <strong>function</strong>(obj, arg1, arg2)
{</p>
<p>console.log('myFilter', obj, arg1, arg2);</p>
<p>// Do smth with obj</p>
<p>return <strong>obj;</strong></p>
<p>});</p>
<p>env.addGlobal('myFunc', <strong>function</strong>(obj, arg1) {</p>
<p>console.log('myFunc', obj, arg1);</p>
<p>// Do smth with obj</p>
<p>return <strong>obj;</strong></p>
<p>});</p>
<p>app.<strong>get</strong>('/', <strong>function</strong>(req,
res){</p>
<p>res.render('index.html', {title: 'Main page'});</p>
<p>});</p>
<p>app.<strong>get</strong>('/foo', <strong>function</strong>(req,
res){</p>
<p>res.locals.smthVar = 'This is Sparta!';</p>
<p>res.render('foo.html', {title: 'Foo page'});</p>
<p>});</p>
<p>app.listen(3000, <strong>function</strong>() {</p>
<p>console.log('Example app listening on port 3000...'); });</p>
<p>/views/index.html</p>
<p>&lt;html&gt;</p>
<p>&lt;head&gt;</p>
<p><strong>&lt;title&gt;</strong>Nunjucks
example<strong>&lt;/title&gt;</strong></p>
<p>&lt;/head&gt;</p>
<p>&lt;body&gt;</p>
<p>{% block content %}</p>
<p>{{title}}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 136</p>
<p>{% endblock %}</p>
<p>&lt;/body&gt;</p>
<p>&lt;/html&gt;</p>
<p>/views/foo.html</p>
<p>{% extends "index.html" %}</p>
<p>{# This is comment #}</p>
<p>{% block content %}</p>
<h1 id="title">{{title}}</h1>
<p>{# apply custom <strong>function</strong> and next
build-<strong>in</strong> and custom filters #} {{ myFunc(smthVar) |
lower | myFilter(5, 'abc') }}</p>
<p>{% endblock %}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 137</p>
<h2 id="chapter-32-node.js-architecture-inner">Chapter 32: Node.js
Architecture &amp; Inner</h2>
<p>Workings</p>
<p>Section 32.1: Node.js - under the hood</p>
<p><img src="media/index-149_1.jpeg"
style="width:6.5in;height:2.30556in" alt="index-149_1.jpg" /></p>
<p>Section 32.2: Node.js - in motion</p>
<p><img src="media/index-149_2.jpeg"
style="width:6.5in;height:3.61111in" alt="index-149_2.jpg" /></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 138</p>
<h2 id="chapter-33-debugging-node.js-application">Chapter 33: Debugging
Node.js application</h2>
<p>Section 33.1: Core node.js debugger and node inspector</p>
<p>Using core debugger</p>
<p>Node.js provides a build in non graphical debugging utility. To start
the build in the debugger, start the application with this command:</p>
<p>node debug filename.js</p>
<p>Consider the following simple Node.js application contained in the
debugDemo.js</p>
<p>'use strict';</p>
<p><strong>function</strong> addTwoNumber(a, b){</p>
<p>// function returns the sum of the two numbers</p>
<p>debugger</p>
<p><strong>return</strong> a + b;</p>
<p>}</p>
<p><strong>var</strong> result = addTwoNumber(5, 9);</p>
<p>console.log(result);</p>
<p>The keyword debugger will stop the debugger at that point in the
code.</p>
<p>Command reference</p>
<p>1. Stepping</p>
<p>cont, c - Continue execution</p>
<p>next, n - Step next</p>
<p>step, s - Step <strong>in</strong></p>
<p>out, o - Step out</p>
<p>2. Breakpoints</p>
<p>setBreakpoint(), sb()- Set breakpoint on current line
setBreakpoint(line), sb(line)- Set breakpoint on specific line</p>
<p>To Debug the above code run the following command</p>
<p>node debug debugDemo.js</p>
<p>Once the above commands runs you will see the following output. To
exit from the debugger interface, type process.exit()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 139</p>
<p><img src="media/index-151_1.jpeg"
style="width:6.5in;height:4.59722in" alt="index-151_1.jpg" /></p>
<p>Use watch(expression) command to add the variable or expression whose
value you want to watch and restart to restart the app and
debugging.</p>
<p>Use repl to enter code interactively. The repl mode has the same
context as the line you are debugging. This allows you to examine the
contents of variables and test out lines of code. Press Ctrl+C to leave
the debug repl.</p>
<p>Using Built-in Node inspector</p>
<p>Version ≥ v6.3.0</p>
<p><a
href="https://nodejs.org/api/debugger.html#debugger_v8_inspector_integration_for_node_js">You
can run node's built in v8 inspector! The</a> <a
href="https://github.com/node-inspector/node-inspector">node-inspector
plug-in is not needed anymore.</a></p>
<p>Simply pass the inspector flag and you'll be provided with a URL to
the inspector</p>
<p>node --inspect server.js</p>
<p>Using Node inspector</p>
<p>Install the node inspector:</p>
<p>npm <strong>install</strong>-g node-inspector</p>
<p>Run your app with the node-debug command:</p>
<p>node-debug filename.js</p>
<p>After that, hit in Chrome:</p>
<p><em>http:</em>//localhost:8080/debug?port=5858</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 140</p>
<p>Sometimes port 8080 might not be available on your computer. You may
get the following error:</p>
<p>Cannot start the server at 0.0.0.0:8080. Error: listen EACCES.</p>
<p>In this case, start the node inspector on a different port using the
following command.</p>
<p>$node-inspector --web-port=6500</p>
<p>You will see something like this:</p>
<p><img src="media/index-152_1.jpeg"
style="width:6.5in;height:2.97222in" alt="index-152_1.jpg" /></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 141</p>
<h2 id="chapter-34-node-server-without">Chapter 34: Node server
without</h2>
<p>framework</p>
<p>Section 34.1: Framework-less node server</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> path = require('path');</p>
<p>http.createServer(<strong>function</strong> (request, response) {</p>
<p>console.log('request ', request.url);</p>
<p><strong>var</strong> filePath = '.' + request.url;</p>
<p><strong>if</strong> (filePath == './')</p>
<p>filePath = './index.html';</p>
<p><strong>var</strong> extname =
String(path.extname(filePath)).toLowerCase(); <strong>var</strong>
contentType = 'text/html';</p>
<p><strong>var</strong> mimeTypes = {</p>
<p>'.html': 'text/html',</p>
<p>'.js': 'text/javascript',</p>
<p>'.css': 'text/css',</p>
<p>'.json': 'application/json',</p>
<p>'.png': 'image/png',</p>
<p>'.jpg': 'image/jpg',</p>
<p>'.gif': 'image/gif',</p>
<p>'.wav': 'audio/wav',</p>
<p>'.mp4': 'video/mp4',</p>
<p>'.woff': 'application/font-woff',</p>
<p>'.ttf': 'applilcation/font-ttf',</p>
<p>'.eot': 'application/vnd.ms-fontobject',</p>
<p>'.otf': 'application/font-otf',</p>
<p>'.svg': 'application/image/svg+xml'</p>
<p>};</p>
<p>contentType = mimeTypes[extname] || 'application/octect-stream';</p>
<p>fs.readFile(filePath, <strong>function</strong>(error, content) {</p>
<p><strong>if</strong> (error) {</p>
<p><strong>if</strong>(error.code == 'ENOENT'){</p>
<p>fs.readFile('./404.html', <strong>function</strong>(error, content)
{</p>
<p>response.writeHead(200, { 'Content-Type': contentType });</p>
<p>response.end(content, 'utf-8');</p>
<p>});</p>
<p>}</p>
<p>else <strong>{</strong></p>
<p>response.writeHead(500);</p>
<p>response.end('Sorry, check with the site admin for error:
'+error.code+' ..<strong>\n</strong>');</p>
<p>response.end();</p>
<p>}</p>
<p>}</p>
<p>else <strong>{</strong></p>
<p>response.writeHead(200, { 'Content-Type': contentType });</p>
<p>response.end(content, 'utf-8');</p>
<p>}</p>
<p>});</p>
<p>}).listen(8125);</p>
<p>console.log('Server running at http://127.0.0.1:8125/');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 142</p>
<p><span id="Section_34_2__Overcoming_CORS_Is"
class="anchor"></span>Section 34.2: Overcoming CORS Issues</p>
<p>// Website you wish to allow to connect to</p>
<p>response.setHeader('Access-Control-Allow-Origin', '*');</p>
<p>// Request methods you wish to allow</p>
<p>response.setHeader('Access-Control-Allow-Methods', 'GET, POST,
OPTIONS, PUT, PATCH, DELETE');</p>
<p>// Request headers you wish to allow</p>
<p>response.setHeader('Access-Control-Allow-Headers',
'X-Requested-With,content-type');</p>
<p>// Set to true if you need the website to include cookies in the
requests sent // to the API (e.g. in case you use sessions)</p>
<p>response.setHeader('Access-Control-Allow-Credentials',
<strong>true</strong>);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 143</p>
<h2 id="chapter-35-node.js-with-es6">Chapter 35: Node.JS with ES6</h2>
<p>ES6, ECMAScript 6 or ES2015 is the latest <a
href="http://www.ecma-international.org/ecma-262/6.0/">specification</a>
for JavaScript which introduces some syntactic sugar to the</p>
<p><a href="https://github.com/lukehoban/es6features">language. It's a
big update to the language and introduces a lot of new features</a></p>
<p><a href="https://nodejs.org/en/docs/es6/">More details on Node and
ES6 can be found on their site https://nodejs.org/en/docs/es6/</a></p>
<p>Section 35.1: Node ES6 Support and creating a project with</p>
<p>Babel</p>
<p>The whole ES6 spec is not yet implemented in its entirety so you will
only be able to use some of the new features.</p>
<p><a href="http://node.green/">You can see a list of the current
supported ES6 features at http://node.green/</a></p>
<p>Since NodeJS v6 there has been pretty good support. So if you using
NodeJS v6 or above you can enjoy using ES6. However, you may also want
to use some of the unreleased features and some from beyond. For this
you will need</p>
<p>to use a transpiler</p>
<p>It is possible to run a transpiler at run time and build, to use all
of the ES6 features and more. The most popular</p>
<p><a href="https://babeljs.io/">transpiler for JavaScript is called
Babel</a></p>
<p>Babel allows you to use all of the features from the ES6
specification and some additional not-in-spec features with</p>
<p>'stage-0' such as import thing from 'thing instead of
<strong>var</strong> thing = require('thing')</p>
<p>If we wanted to create a project where we use 'stage-0' features such
as import we would need to add Babel as a transpiler. You'll see
projects using react and Vue and other commonJS based patterns implement
stage-0 quite</p>
<p>often.</p>
<p>create a new node project</p>
<p><strong>mkdir</strong> my-es6-app</p>
<p><strong>cd</strong> my-es6-app</p>
<p>npm init</p>
<p>Install babel the ES6 preset and stage-0</p>
<p>npm <strong>install</strong>--save-dev babel-preset-es2015
babel-preset-stage-2 babel-cli babel-register</p>
<p>Create a new file called server.js and add a basic HTTP server.</p>
<p>import http from 'http'</p>
<p>http.createServer((req, res) =&gt; {</p>
<p>res.writeHead(200, {'Content-Type': 'text/plain'}) res.end('Hello
World<strong>\n</strong>')</p>
<p>}).listen(3000, '127.0.0.1')</p>
<p>console.log('Server running at http://127.0.0.1:3000/')</p>
<p>Note that we use an import http from 'http' this is a stage-0 feature
and if it works it means we've got the transpiler working correctly.</p>
<p>If you run node server.js it will fail not knowing how to handle the
import.</p>
<p>Creating a .babelrc file in the root of your directory and add the
following settings</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 144</p>
<p><span id="_8" class="anchor"></span>{</p>
<p>"presets": ["es2015", "stage-2"],</p>
<p>"plugins": []</p>
<p>}</p>
<p>you can now run the server with node src/index.js--exec
babel-node</p>
<p>Finishing off it is not a good idea to run a transpiler at runtime on
a production app. We can however implement</p>
<p>some scripts in our package.json to make it easier to work with.</p>
<p>"scripts": <strong>{</strong></p>
<p>"start": "node dist/index.js",</p>
<p>"dev": "babel-node src/index.js",</p>
<p>"build": "babel src -d dist",</p>
<p>"postinstall": "npm run build"</p>
<p>}<strong>,</strong></p>
<p>The above will on npm <strong>install</strong> build the transpiled
code to the dist directory allow npm <strong>start</strong> to use the
transpiled</p>
<p>code for our production app.</p>
<p>npm run dev will boot the server and babel runtime which is fine and
preferred when working on a project locally.</p>
<p>Going one further you could then install nodemon npm
<strong>install</strong> nodemon --save-dev to watch for changes and</p>
<p>then reboot the node app.</p>
<p>This really speeds up working with babel and NodeJS. In you
package.json just update the "dev" script to use</p>
<p>nodemon</p>
<p>"dev": "nodemon src/index.js --exec babel-node",</p>
<p>Section 35.2: Use JS es6 on your NodeJS app</p>
<p>JS es6 (also known as es2015) is a set of new features to JS language
aim to make it more intuitive when using OOP</p>
<p>or while facing modern development tasks.</p>
<p>Prerequisites:</p>
<p>1. Check out the new es6 features at <a
href="http://es6-features.org">http://es6-features.org - it may clarify
to you if you really intend to use it</a></p>
<p>on your next NodeJS app</p>
<p>2. Check the compatibility level of your node version at <a
href="http://node.green">http://node.green</a></p>
<p>3. If all is ok - let's code on!</p>
<p>Here is a very short sample of a simple hello world app with JS
es6</p>
<p>'use strict'</p>
<p>class Program</p>
<p>{</p>
<p>constructor()</p>
<p>{</p>
<p><strong>this</strong>.message = 'hello es6 :)';</p>
<p>}</p>
<p>print()</p>
<p>{</p>
<p>setTimeout(() =&gt;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 145</p>
<p>{</p>
<p>console.log(<strong>this</strong>.message);</p>
<p><strong>this</strong>.print();</p>
<p>}, Math.random() * 1000);</p>
<p>}</p>
<p>}</p>
<p><strong>new</strong> Program().print();</p>
<p>You can run this program and observe how it print the same message
over and over again.</p>
<p>Now.. let break it down line by line:</p>
<p>'use strict'</p>
<p>This line is actually required if you intend to use js es6. strict
mode, intentionally, has different semantics from</p>
<p>normal code (please read more about it on MDN -</p>
<p><a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode)</a></p>
<p>class Program</p>
<p>Unbelievable - a class keyword! Just for a quick reference - before
es6 the only way do define a class in js was with</p>
<p>the... <strong>function</strong> keyword!</p>
<p><em><strong>function</strong> MyClass()</em> // class definition</p>
<p>{</p>
<p>}</p>
<p><em><strong>var</strong> myClassObject = <strong>new</strong>
MyClass();</em> // generating a new object with a type of MyClass</p>
<p>When using OOP, a class is a very fundamental ability which assist
the developer to represent a specific part of a</p>
<p>system (breaking down code is crucial when the code is getting
larger.. for instance: when writing server-side code)</p>
<p>constructor()</p>
<p>{</p>
<p><strong>this</strong>.message = 'hello es6 :)';</p>
<p>}</p>
<p>You got to admit - this is pretty intuitive! This is the c'tor of my
class - this unique "function" will occur every time an object is
created from this particular class (in our program - only once)</p>
<p>print()</p>
<p>{</p>
<p><em>setTimeout(() =&gt;</em> // this is an 'arrow' function</p>
<p>{</p>
<p>console.log(<strong>this</strong>.message);</p>
<p><em><strong>this</strong>.print();</em> // here we call the 'print'
method from the class template itself (a recursion</p>
<p>in this particular case)</p>
<p>}, Math.random() * 1000);</p>
<p>}</p>
<p>Because print is defined in the class scope - it is actually a method
- which can be invoked from either the object of</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 146</p>
<p>the class or from within the class itself!</p>
<p>So.. till now we defined our class.. time to use it:</p>
<p><strong>new</strong> Program().print();</p>
<p>Which is truly equals to:</p>
<p><em><strong>var</strong> prog = <strong>new</strong> Program();</em>
// define a new object of type 'Program'</p>
<p><em>prog.print();</em> // use the program to print itself</p>
<p><strong>In conclusion:</strong> JS es6 can simplify your code - make
it more intuitive and easy to understand (comparing with the</p>
<p>previous version of JS).. you may try to re-write an existing code of
yours and see the difference for yourself</p>
<p>ENJOY :)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 147</p>
<h2 id="chapter-36-interacting-with-console">Chapter 36: Interacting
with Console</h2>
<p>Section 36.1: Logging</p>
<p>Console Module</p>
<p>Similar to the browser environment of JavaScript node.js provides a
<strong>console</strong> module which provides simple logging</p>
<p>and debugging possibilities.</p>
<p>The most important methods provided by the console module are
console.log, console.error and console.time.</p>
<p>But there are several others like console.info.</p>
<p>console.log</p>
<p>The parameters will be printed to the standard output (stdout) with a
new line.</p>
<p>console.log('Hello World');</p>
<p><img src="media/index-159_1.png"
style="width:2.70833in;height:0.40278in" alt="index-159_1.png" /></p>
<p>console.error</p>
<p>The parameters will be printed to the standard error (stderr) with a
new line.</p>
<p>console.error('Oh, sorry, there is an error.');</p>
<p><img src="media/index-159_2.png"
style="width:3.25in;height:0.34722in" alt="index-159_2.png" /></p>
<p>console.time, console.timeEnd</p>
<p>console.time starts a timer with an unique lable that can be used to
compute the duration of an operation. When</p>
<p>you call console.timeEnd with the same label, the timer stops and it
prints the elapsed time in milliseconds to stdout .</p>
<p><img src="media/index-159_3.png"
style="width:2.56944in;height:0.65278in" alt="index-159_3.png" /></p>
<p>Process Module</p>
<p>It is possible to use the <strong>process</strong> module to write
<strong>directly</strong> into the standard output of the console.
Therefore it</p>
<p>exists the method process.stdout.write. Unlike console.log this
method does not add a new line before your</p>
<p>output.</p>
<p>So in the following example the method is called two times, but no
new line is added in between their outputs.</p>
<p><img src="media/index-159_4.png"
style="width:5.31944in;height:0.34722in" alt="index-159_4.png" /></p>
<p>Formatting</p>
<p>One can use <strong>terminal (control) codes</strong> to issue
specific commands like switching colors or positioning the cursor.</p>
<p><img src="media/index-159_5.png"
style="width:3.83333in;height:0.34722in" alt="index-159_5.png" /></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 148</p>
<p>General</p>
<p>Effect Code</p>
<p>Reset \033[0m</p>
<p>Hicolor \033[1m</p>
<p>Underline \033[4m</p>
<p>Inverse \033[7m</p>
<p>Font Colors</p>
<p>Effect Code</p>
<p>Black \033[30m</p>
<p>Red \033[31m</p>
<p>Green \033[32m</p>
<p>Yellow \033[33m</p>
<p>Blue \033[34m</p>
<p>Magenta \033[35m</p>
<p>Cyan \033[36m</p>
<p>White \033[37m</p>
<p>Background Colors</p>
<p>Effect Code</p>
<p>Black \033[40m</p>
<p>Red \033[41m</p>
<p>Green \033[42m</p>
<p>Yellow \033[43m</p>
<p>Blue \033[44m</p>
<p>Magenta \033[45m</p>
<p>Cyan \033[46m</p>
<p>White \033[47m</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 149</p>
<h2 id="chapter-37-cassandra-integration">Chapter 37: Cassandra
Integration</h2>
<p>Section 37.1: Hello world</p>
<p><a href="https://github.com/datastax/nodejs-driver">For accessing
Cassandra cassandra-driver module from DataStax can be used. It supports
all the features and can</a> be easily configured.</p>
<p><strong>const</strong> cassandra = require("cassandra-driver");</p>
<p><strong>const</strong> clientOptions = {</p>
<p>contactPoints: ["host1", "host2"],</p>
<p>keyspace: "test"</p>
<p>};</p>
<p><strong>const</strong> client = <strong>new</strong>
cassandra.Client(clientOptions);</p>
<p><strong>const</strong> query = "SELECT hello FROM world WHERE name =
?"; client.execute(query, ["John"], (err, results) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> console.error(err);</p>
<p>}</p>
<p>console.log(results.rows);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 150</p>
<h2 id="chapter-38-creating-apis-with-node.js">Chapter 38: Creating
API's with Node.js</h2>
<p>Section 38.1: GET api using Express</p>
<p>Node.js apis can be easily constructed in Express web framework.</p>
<p>Following example creates a simple GET api for listing all users.</p>
<p>Example</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> users =[{</p>
<p>id: 1,</p>
<p>name: "John Doe",</p>
<p>age : 23,</p>
<p>email: "john@doe.com"</p>
<p>}];</p>
<p>// GET /api/users</p>
<p>app.<strong>get</strong>('/api/users', <strong>function</strong>(req,
res){</p>
<p><em><strong>return</strong> res.json(users);</em> //return response
as JSON</p>
<p>});</p>
<p>app.listen('3000', <strong>function</strong>(){</p>
<p>console.log('Server listening on port 3000');</p>
<p>});</p>
<p>Section 38.2: POST api using Express</p>
<p>Following example create POST api using Express. This example is
similar to GET example except the use of body-</p>
<p>parser that parses the post data and add it to req.body.</p>
<p>Example</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p>// for parsing the body in POST request</p>
<p><strong>var</strong> bodyParser = require('body-parser');</p>
<p><strong>var</strong> users =[{</p>
<p>id: 1,</p>
<p>name: "John Doe",</p>
<p>age : 23,</p>
<p>email: "john@doe.com"</p>
<p>}];</p>
<p>app.use(bodyParser.urlencoded({ extended: <strong>false</strong> }));
app.use(bodyParser.json());</p>
<p>// GET /api/users</p>
<p>app.<strong>get</strong>('/api/users', <strong>function</strong>(req,
res){</p>
<p><strong>return</strong> res.json(users);</p>
<p>});</p>
<p>/* POST /api/users</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 151</p>
<p>{</p>
<p>"user": {</p>
<p>"id": 3,</p>
<p>"name": "Test User",</p>
<p>"age" : 20,</p>
<p>"email": "test@test.com"</p>
<p>}</p>
<p>}</p>
<p>*/</p>
<p>app.post('/api/users', <strong>function</strong> (req, res) {</p>
<p><strong>var</strong> user = req.body.user;</p>
<p>users.push(user);</p>
<p><strong>return</strong> res.send('User has been added
successfully');</p>
<p>});</p>
<p>app.listen('3000', <strong>function</strong>(){</p>
<p>console.log('Server listening on port 3000');</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 152</p>
<h2 id="chapter-39-graceful-shutdown">Chapter 39: Graceful Shutdown</h2>
<p>Section 39.1: Graceful Shutdown - SIGTERM</p>
<p>By using <strong>server.close()</strong> and
<strong>process.exit()</strong>, we can catch the server exception and
do a graceful shutdown.</p>
<p><strong>var</strong> http = require('http');</p>
<p><strong>var</strong> server =
http.createServer(<strong>function</strong> (req, res) {
setTimeout(<strong>function</strong> () { <em>//simulate a long
request</em></p>
<p>res.writeHead(200, {'Content-Type': 'text/plain'});</p>
<p>res.end('Hello World<strong>\n</strong>');</p>
<p>}, 4000);</p>
<p>}).listen(9090, <strong>function</strong> (err) {</p>
<p>console.log('listening http://localhost:9090/'); console.log('pid is
' + process.pid);</p>
<p>});</p>
<p>process.on('SIGTERM', <strong>function</strong> () {</p>
<p>server.close(<strong>function</strong> () {</p>
<p>process.exit(0);</p>
<p>});</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 153</p>
<h2 id="chapter-40-using-iisnode-to-host-node.js">Chapter 40: Using
IISNode to host Node.js</h2>
<p>Web Apps in IIS</p>
<p>Section 40.1: Using an IIS Virtual Directory or Nested</p>
<p>Application via &lt;appSettings&gt;</p>
<p>Using a Virtual Directory or Nested Application in IIS is a common
scenario and most likely one that you'll want to</p>
<p>take advantage of when using IISNode.</p>
<p>IISNode doesn't provide direct support for Virtual Directories or
Nested Applications via configuration so to achieve</p>
<p>this we'll need to take advantage of a feature of IISNode that isn't
part of the configuration and is much lesser known. All children of the
<strong>&lt;appSettings&gt;</strong> element with the Web.config are
added to the process.env object as</p>
<p>properties using the appSetting key.</p>
<p>Lets create a Virtual Directory in our
<strong>&lt;appSettings&gt;</strong></p>
<p>&lt;appSettings&gt;</p>
<p><strong>&lt;add</strong> key="virtualDirPath" value="/foo"
<strong>/&gt;</strong></p>
<p>&lt;/appSettings&gt;</p>
<p>Within our Node.js App we can access the virtualDirPath setting</p>
<p>console.log(process.env.virtualDirPath); <em>// prints /foo</em></p>
<p>Now that we can use the <strong>&lt;appSettings&gt;</strong> element
for configuration, lets take advantage of that and use it in our server
code.</p>
<p>// Access the virtualDirPath appSettings and give it a default value
of '/' // in the event that it doesn't exist or isn't set</p>
<p><strong>var</strong> virtualDirPath = process.env.virtualDirPath ||
'/';</p>
<p>// We also want to make sure that our virtualDirPath // always starts
with a forward slash</p>
<p><strong>if</strong> (!virtualDirPath.startsWith('/', 0))</p>
<p>virtualDirPath = '/' + virtualDirPath;</p>
<p>// Setup a route at the index of our app</p>
<p>server.<strong>get</strong>(virtualDirPath, (req, res) =&gt; {</p>
<p><strong>return</strong> res.status(200).send('Hello World');</p>
<p>});</p>
<p>We can use the virtualDirPath with our static resources as well</p>
<p>// Public Directory</p>
<p>server.use(express.<strong>static</strong>(path.join(virtualDirPath,
'public'))); <em>// Bower</em></p>
<p>server.use('/bower_components',
express.<strong>static</strong>(path.join(virtualDirPath,
'bower_components')));</p>
<p>Lets put all of that together</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> server = express();</p>
<p><strong>const</strong> port = process.env.PORT || 3000;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 154</p>
<p><span id="___Access_the_virtualDirPath_app" class="anchor"></span>//
Access the virtualDirPath appSettings and give it a default value of '/'
// in the event that it doesn't exist or isn't set</p>
<p><strong>var</strong> virtualDirPath = process.env.virtualDirPath ||
'/';</p>
<p>// We also want to make sure that our virtualDirPath // always starts
with a forward slash</p>
<p><strong>if</strong> (!virtualDirPath.startsWith('/', 0))</p>
<p>virtualDirPath = '/' + virtualDirPath;</p>
<p>// Public Directory</p>
<p>server.use(express.<strong>static</strong>(path.join(virtualDirPath,
'public'))); <em>// Bower</em></p>
<p>server.use('/bower_components',
express.<strong>static</strong>(path.join(virtualDirPath,
'bower_components')));</p>
<p>// Setup a route at the index of our app</p>
<p>server.<strong>get</strong>(virtualDirPath, (req, res) =&gt; {</p>
<p><strong>return</strong> res.status(200).send('Hello World');</p>
<p>});</p>
<p>server.listen(port, () =&gt; {</p>
<p>console.log(`Listening on ${port}`);</p>
<p>});</p>
<p>Section 40.2: Getting Started</p>
<p><a href="https://github.com/tjanczuk/iisnode">IISNode</a> allows
Node.js Web Apps to be hosted on IIS 7/8 just like a .NET application
would. Of course, you can self host your node.exe process on Windows but
why do that when you can just run your app in IIS.</p>
<p>IISNode will handle scaling over multiple cores, process manageement
of node.exe, and auto-recycle your IIS</p>
<p><a
href="https://tomasz.janczuk.org/2011/08/hosting-nodejs-applications-in-iis-on.html">Application
whenever your app is updated, just to name a few of its
benefits.</a></p>
<p>Requirements</p>
<p>IISNode does have a few requirements before you can host your Node.js
app in IIS.</p>
<p>1. Node.js must be installed on the IIS host, 32-bit or 64-bit,
either are supported.</p>
<p>2. IISNode installed <a
href="https://github.com/azure/iisnode/releases/download/v0.2.21/iisnode-full-v0.2.21-x86.msi">x86
or</a> <a
href="https://github.com/azure/iisnode/releases/download/v0.2.21/iisnode-full-v0.2.21-x64.msi">x64,
this should match the bitness of your IIS Host.</a></p>
<p>3. <a href="http://www.iis.net/downloads/microsoft/url-rewrite">The
Microsoft URL-Rewrite Module for IIS</a> installed on your IIS host.</p>
<p>This is key, otherwise requests to your Node.js app won't function as
expected.</p>
<p>4. A Web.config in the root folder of your Node.js app.</p>
<p>5. IISNode configuration via an iisnode.yml file or an
<strong>&lt;iisnode&gt;</strong> element within your Web.config.</p>
<p>Section 40.3: Basic Hello World Example using Express</p>
<p>To get this example working, you'll need to create an IIS 7/8 app on
your IIS host and add the directory containing</p>
<p>the Node.js Web App as the Physical Directory. Ensure that your
Application/Application Pool Identity can access the Node.js install.
This example uses the Node.js 64-bit installation.</p>
<p>Project Strucure</p>
<p>This is the basic project structure of a IISNode/Node.js Web app. It
looks almost identical to any non-IISNode Web App except for the
addition of the Web.config.</p>
<p>-/app_root</p>
<p>- package.json</p>
<p>- server.js</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 155</p>
<p>- Web.config</p>
<p>server.js - Express Application</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> server = express();</p>
<p>// We need to get the port that IISNode passes into us // using the
PORT environment variable, if it isn't set use a default value
<em><strong>const</strong> port = process.env.PORT || 3000;</em></p>
<p>// Setup a route at the index of our app</p>
<p>server.<strong>get</strong>('/', (req, res) =&gt; {</p>
<p><strong>return</strong> res.status(200).send('Hello World');</p>
<p>});</p>
<p>server.listen(port, () =&gt; {</p>
<p>console.log(`Listening on ${port}`);</p>
<p>});</p>
<p>Configuration &amp; Web.config</p>
<p>The Web.config is just like any other IIS Web.config except the
following two things must be present, URL
<strong>&lt;rewrite&gt;&lt;rules&gt;</strong> and an IISNode
<strong>&lt;handler&gt;</strong>. Both of these elements are children of
the <strong>&lt;system.webServer&gt;</strong></p>
<p>element.</p>
<p>Configuration</p>
<p>You can configure IISNode by using a <a
href="https://raw.githubusercontent.com/tjanczuk/iisnode/master/src/samples/configuration/iisnode.yml">iisnode.yml
file or by adding the</a> <a
href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config#L11"><strong>&lt;iisnode&gt;</strong></a>
element as a child of</p>
<p><strong>&lt;system.webServer&gt;</strong> in your Web.config. Both of
these configuration can be used in conjunction with one another</p>
<p>however, in this case, Web.config will need to specify the
iisnode.yml file <strong>AND</strong> <a
href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config#L105-L111">any
configuration conflicts will be</a></p>
<p><a
href="https://github.com/tjanczuk/iisnode/blob/master/src/samples/configuration/web.config#L105-L111">take
from the iisnode.yml file instead. This configuration overriding cannot
happen the other way around.</a></p>
<p>IISNode Handler</p>
<p>In order for IIS to know that server.js contains our Node.js Web App
we need to explicitly tell it that. We can do</p>
<p>this by adding the IISNode <strong>&lt;handler&gt;</strong> to the
<strong>&lt;handlers&gt;</strong> element.</p>
<p>&lt;handlers&gt;</p>
<p><strong>&lt;add</strong> name="iisnode" path="server.js" verb="*"
modules="iisnode"<strong>/&gt;</strong></p>
<p>&lt;/handlers&gt;</p>
<p>URL-Rewrite Rules</p>
<p>The final part of the configuration is ensuring that traffic intended
for our Node.js app coming into our IIS instance</p>
<p>is being directed to IISNode. Without URL rewrite rules, we would
need to visit our app by going to http:<em>//&lt;host&gt;/server.js</em>
and even worse, when trying to request a resource supplied by server.js
you'll get a</p>
<p>404. This is why URL rewriting is necessary for IISNode web apps.</p>
<p>&lt;rewrite&gt;</p>
<p>&lt;rules&gt;</p>
<p>&lt;!-- First we consider whether the incoming URL matches a physical
file in the /public folder</p>
<p>--&gt;</p>
<p><strong>&lt;rule</strong> name="StaticContent"
patternSyntax="Wildcard"<strong>&gt;</strong></p>
<p><strong>&lt;action</strong> type="Rewrite" url="public/{R:0}"
logRewrittenUrl="true"<strong>/&gt; &lt;conditions&gt;</strong></p>
<p><strong>&lt;add</strong> input="{REQUEST_FILENAME}"
matchType="IsFile" negate="true"<strong>/&gt;</strong></p>
<p>&lt;/conditions&gt;</p>
<p><strong>&lt;match</strong> url="*.*"<strong>/&gt;</strong></p>
<p>&lt;/rule&gt;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 156</p>
<p><span id="_____All_other_URLs_are_mapped_t"
class="anchor"></span>&lt;!-- All other URLs are mapped to the Node.js
application entry point --&gt; <em><strong>&lt;rule</strong>
name="DynamicContent"<strong>&gt;</strong></em></p>
<p>&lt;conditions&gt;</p>
<p><strong>&lt;add</strong> input="{REQUEST_FILENAME}"
matchType="IsFile" negate="True"<strong>/&gt;</strong></p>
<p>&lt;/conditions&gt;</p>
<p><strong>&lt;action</strong> type="Rewrite"
url="server.js"<strong>/&gt;</strong></p>
<p>&lt;/rule&gt;</p>
<p>&lt;/rules&gt;</p>
<p>&lt;/rewrite&gt;</p>
<p><a href="https://gist.github.com/pbaio/f63918181d8d7f8ee1d2">This is
a working Web.config file for this example</a>, setup for a 64-bit
Node.js install.</p>
<p>That's it, now visit your IIS Site and see your Node.js application
working.</p>
<p>Section 40.4: Using Socket.io with IISNode</p>
<p>To get Socket.io working with IISNode, the only changes necessary
when not using a Virtual Directory/Nested</p>
<p>Application are within the Web.config.</p>
<p>Since Socket.io sends requests starting with /socket.io, IISNode
needs to communicate to IIS that these should</p>
<p>also be handled IISNode and aren't just static file requests or other
traffic. This requires a different <strong>&lt;handler&gt;</strong> than
standard IISNode apps.</p>
<p>&lt;handlers&gt;</p>
<p><strong>&lt;add</strong> name="iisnode-socketio" path="server.js"
verb="*" modules="iisnode" <strong>/&gt;</strong></p>
<p>&lt;/handlers&gt;</p>
<p>In addition to the changes to the <strong>&lt;handlers&gt;</strong>
we also need to add an additional URL rewrite rule. The rewrite rule</p>
<p>sends all /socket.io traffic to our server file where the Socket.io
server is running.</p>
<p><strong>&lt;rule</strong> name="SocketIO"
patternSyntax="ECMAScript"<strong>&gt;</strong></p>
<p><strong>&lt;match</strong>
url="socket.io.+"<strong>/&gt;</strong></p>
<p><strong>&lt;action</strong> type="Rewrite"
url="server.js"<strong>/&gt;</strong></p>
<p>&lt;/rule&gt;</p>
<p>If you are using IIS 8, you'll need to disable your webSockets
setting in your Web.config in addition to adding the above handler and
rewrite rules. This is unnecessary in IIS 7 since there is no webSocket
support.</p>
<p><strong>&lt;webSocket</strong> enabled="false"
<strong>/&gt;</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 157</p>
<h2 id="chapter-41-cli">Chapter 41: CLI</h2>
<p>Section 41.1: Command Line Options</p>
<p>-v,--version</p>
<p>Added in: v0.1.3 Print node's version.</p>
<p>-h,--help</p>
<p>Added in: v0.1.3 Print node command line options. The output of this
option is less detailed than this document.</p>
<p>-e,--eval "script"</p>
<p>Added in: v0.5.2 Evaluate the following argument as JavaScript. The
modules which are predefined in the REPL can</p>
<p>also be used in script.</p>
<p>-p,--print "script"</p>
<p>Added in: v0.6.4 Identical to -e but prints the result.</p>
<p>-c,--check</p>
<p>Added in: v5.0.0 Syntax check the script without executing.</p>
<p>-i,--interactive</p>
<p>Added in: v0.7.7 Opens the REPL even if stdin does not appear to be a
terminal.</p>
<p>-r,--require module</p>
<p>Added in: v1.6.0 Preload the specified module at startup.</p>
<p>Follows require()'s module resolution rules. module may be either a
path to a file, or a node module name.</p>
<p>--no-deprecation</p>
<p>Added in: v0.8.0 Silence deprecation warnings.</p>
<p>--trace-deprecation</p>
<p>Added in: v0.8.0 Print stack traces for deprecations.</p>
<p>--throw-deprecation</p>
<p>Added in: v0.11.14 Throw errors for deprecations.</p>
<p>--no-warnings</p>
<p>Added in: v6.0.0 Silence all process warnings (including
deprecations).</p>
<p>--trace-warnings</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 158</p>
<p>Added in: v6.0.0 Print stack traces for process warnings (including
deprecations).</p>
<p>--trace-sync-io</p>
<p>Added in: v2.1.0 Prints a stack trace whenever synchronous I/O is
detected after the first turn of the event loop.</p>
<p>--zero-fill-buffers</p>
<p>Added in: v6.0.0 Automatically zero-fills all newly allocated Buffer
and SlowBuffer instances.</p>
<p>--preserve-symlinks</p>
<p>Added in: v6.3.0 Instructs the module loader to preserve symbolic
links when resolving and caching modules.</p>
<p>By default, when Node.js loads a module from a path that is
symbolically linked to a different on-disk location, Node.js will
dereference the link and use the actual on-disk "real path" of the
module as both an identifier and as a</p>
<p>root path to locate other dependency modules. In most cases, this
default behavior is acceptable. However, when</p>
<p>using symbolically linked peer dependencies, as illustrated in the
example below, the default behavior causes an exception to be thrown if
moduleA attempts to require moduleB as a peer dependency:</p>
<p>{appDir}</p>
<p>├── app</p>
<p>│ ├── index.js</p>
<p>│ └── node_modules</p>
<p>│ ├── moduleA -&gt; {appDir}/moduleA</p>
<p>│ └── moduleB</p>
<p>│ ├── index.js</p>
<p>│ └── package.json</p>
<p>└── moduleA</p>
<p>├── index.js</p>
<p>└── package.json</p>
<p>The --preserve-symlinks command line flag instructs Node.js to use
the symlink path for modules as opposed to the</p>
<p>real path, allowing symbolically linked peer dependencies to be
found.</p>
<p>Note, however, that using --preserve-symlinks can have other side
effects. Specifically, symbolically linked native</p>
<p>modules can fail to load if those are linked from more than one
location in the dependency tree (Node.js would see those as two separate
modules and would attempt to load the module multiple times, causing an
exception to be</p>
<p>thrown).</p>
<p>--track-heap-objects</p>
<p>Added in: v2.4.0 Track heap object allocations for heap
snapshots.</p>
<p>--prof-process</p>
<p>Added in: v6.0.0 Process v8 profiler output generated using the v8
option --prof.</p>
<p>--v8-options</p>
<p>Added in: v0.1.3 Print v8 command line options.</p>
<p>Note: v8 options allow words to be separated by both dashes (-) or
underscores (_).</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 159</p>
<p>For example, --stack-trace-limit is equivalent to
--stack_trace_limit.</p>
<p>--tls-cipher-list=list</p>
<p>Added in: v4.0.0 Specify an alternative default TLS cipher list.
(Requires Node.js to be built with crypto support. (Default))</p>
<p>--enable-fips</p>
<p>Added in: v6.0.0 Enable FIPS-compliant crypto at startup. (Requires
Node.js to be built with ./configure --openssl-</p>
<p>fips)</p>
<p>--force-fips</p>
<p>Added in: v6.0.0 Force FIPS-compliant crypto on startup. (Cannot be
disabled from script code.) (Same requirements as --enable-fips)</p>
<p>--icu-data-dir=file</p>
<p>Added in: v0.11.15 Specify ICU data load path. (overrides
NODE_ICU_DATA)</p>
<p>Environment Variables</p>
<p>NODE_DEBUG=module[,…]</p>
<p>Added in: v0.1.32 ','-separated list of core modules that should
print debug information.</p>
<p>NODE_PATH=path[:…]</p>
<p>Added in: v0.1.32 ':'-separated list of directories prefixed to the
module search path.</p>
<p>Note: on Windows, this is a ';'-separated list instead.</p>
<p>NODE_DISABLE_COLORS=1</p>
<p>Added in: v0.3.0 When set to 1 colors will not be used in the
REPL.</p>
<p>NODE_ICU_DATA=file</p>
<p>Added in: v0.11.15 Data path for ICU (Intl object) data. Will extend
linked-in data when compiled with small-icu</p>
<p>support.</p>
<p>NODE_REPL_HISTORY=file</p>
<p>Added in: v5.0.0 Path to the file used to store the persistent REPL
history. The default path is ~/.node_repl_history, which is overridden
by this variable. Setting the value to an empty string ("" or " ")
disables persistent REPL history.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 160</p>
<h2 id="chapter-42-nodejs-frameworks">Chapter 42: NodeJS Frameworks</h2>
<p>Section 42.1: Web Server Frameworks</p>
<p>Express</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p>app.<strong>get</strong>('/', <strong>function</strong> (req, res)
{</p>
<p>res.send('Hello World!');</p>
<p>});</p>
<p>app.listen(3000, <strong>function</strong> () {</p>
<p>console.log('Example app listening on port 3000!'); });</p>
<p>Koa</p>
<p><strong>var</strong> koa = require('koa');</p>
<p><strong>var</strong> app = koa();</p>
<p>app.use(<strong>function</strong> *(next){</p>
<p><strong>var</strong> start = <strong>new</strong> Date;</p>
<p>yield next;</p>
<p><strong>var</strong> ms = <strong>new</strong> Date - start;</p>
<p>console.log('%s %s - %s', <strong>this</strong>.method,
<strong>this</strong>.url, ms); });</p>
<p>app.use(<strong>function</strong> *(){</p>
<p><strong>this</strong>.body = 'Hello World';</p>
<p>});</p>
<p>app.listen(3000);</p>
<p>Section 42.2: Command Line Interface Frameworks</p>
<p>Commander.js</p>
<p><strong>var</strong> program = require('commander');</p>
<p>program</p>
<p>.version('0.0.1')</p>
<p>program</p>
<p>.command('hi')</p>
<p>.description('initialize project configuration')
.action(<strong>function</strong>(){</p>
<p>console.log('Hi my Friend!!!');</p>
<p>});</p>
<p>program</p>
<p>.command('bye [name]')</p>
<p>.description('initialize project configuration')
.action(<strong>function</strong>(name){</p>
<p>console.log('Bye ' + name + '. It was good to see you!'); });</p>
<p>program</p>
<p>.command('*')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 161</p>
<p>.action(<strong>function</strong>(env){</p>
<p>console.log('Enter a Valid command');</p>
<p>terminate(<strong>true</strong>);</p>
<p>});</p>
<p>program.parse(process.argv);</p>
<p>Vorpal.js</p>
<p><strong>const</strong> vorpal = require('vorpal')();</p>
<p>vorpal</p>
<p>.command('foo', 'Outputs "bar".')</p>
<p>.action(<strong>function</strong>(args, callback) {</p>
<p><strong>this</strong>.log('bar');</p>
<p>callback();</p>
<p>});</p>
<p>vorpal</p>
<p>.delimiter('myapp$')</p>
<p>.show();</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 162</p>
<h2 id="chapter-43-grunt">Chapter 43: grunt</h2>
<p>Section 43.1: Introduction To GruntJs</p>
<p>Grunt is a JavaScript Task Runner, used for automation of repetitive
tasks like minification, compilation, unit testing, linting, etc.</p>
<p>In order to get started, you'll want to install Grunt's command line
interface (CLI) globally.</p>
<p>npm <strong>install</strong>-g grunt-cli</p>
<p><strong>Preparing a new Grunt project:</strong> A typical setup will
involve adding two files to your project: package.json and the</p>
<p>Gruntfile.</p>
<p>package.json: This file is used by npm to store metadata for projects
published as npm modules. You will list grunt</p>
<p>and the Grunt plugins your project needs as devDependencies in this
file.</p>
<p>Gruntfile: This file is named Gruntfile.js and is used to configure
or define tasks and load Grunt plugins.</p>
<p>Example package.json:</p>
<p>{</p>
<p>"name": "my-project-name",</p>
<p>"version": "0.1.0",</p>
<p>"devDependencies": {</p>
<p>"grunt": "~0.4.5",</p>
<p>"grunt-contrib-jshint": "~0.10.0",</p>
<p>"grunt-contrib-nodeunit": "~0.4.1",</p>
<p>"grunt-contrib-uglify": "~0.5.0"</p>
<p>}</p>
<p>}</p>
<p>Example gruntfile:</p>
<p>module.exports = <strong>function</strong>(grunt) {</p>
<p>// Project configuration.</p>
<p>grunt.initConfig({</p>
<p>pkg: grunt.file.readJSON('package.json'),</p>
<p>uglify: {</p>
<p>options: {</p>
<p>banner: '/*! &lt;%= pkg.name %&gt; &lt;%=
grunt.template.today("yyyy-mm-dd") %&gt; */<strong>\n</strong>'</p>
<p>},</p>
<p>build: {</p>
<p>src: 'src/&lt;%= pkg.name %&gt;.js',</p>
<p>dest: 'build/&lt;%= pkg.name %&gt;.min.js'</p>
<p>}</p>
<p>}</p>
<p>});</p>
<p>// Load the plugin that provides the "uglify" task.</p>
<p>grunt.loadNpmTasks('grunt-contrib-uglify');</p>
<p>// Default task(s).</p>
<p>grunt.registerTask('default', ['uglify']);</p>
<p>};</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 163</p>
<p><span id="Section_43_2__Installing_gruntpl"
class="anchor"></span>Section 43.2: Installing gruntplugins</p>
<p>Adding dependcy</p>
<p>To use a gruntplugin, you first need to add it as a dependency to
your project. Let's use the jshint plugin as an example.</p>
<p>npm <strong>install</strong> grunt-contrib-jshint --save-dev</p>
<p>The --save-dev option is used to add the plugin in the package.json,
this way the plugin is always installed after a</p>
<p><strong>npm</strong> install<strong>.</strong></p>
<p>Loading the plugin</p>
<p>You can load your plugin in the gruntfile file using
loadNpmTasks.</p>
<p>grunt.loadNpmTasks('grunt-contrib-jshint');</p>
<p>Configuring the task</p>
<p>You configure the task in the gruntfile adding a property called
jshint to the object passed to grunt.initConfig.</p>
<p>grunt.initConfig({</p>
<p>jshint: {</p>
<p>all: ['Gruntfile.js', 'lib/**/*.js', 'test/**/*.js']</p>
<p>}</p>
<p>});</p>
<p>Don't forget you can have other properties for other plugins you are
using.</p>
<p>Running the task</p>
<p>To just run the task with the plugin you can use the command
line.</p>
<p>grunt jshint</p>
<p>Or you can add jshint to another task.</p>
<p>grunt.registerTask('default', ['jshint']);</p>
<p>The default task runs with the grunt command in the terminal without
any options.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 164</p>
<h2 id="chapter-44-using-websockets-with">Chapter 44: Using WebSocket's
with</h2>
<p>Node.JS</p>
<p>Section 44.1: Installing WebSocket's</p>
<p>There are a few way's to install WebSocket's to your project. Here
are some example's:</p>
<p>npm <strong>install</strong>--save ws</p>
<p>or inside your package.json using:</p>
<p>"dependencies": {</p>
<p>"ws": "*"</p>
<p>},</p>
<p>Section 44.2: Adding WebSocket's to your file's</p>
<p>To add ws to your file's simply use:</p>
<p><strong>var</strong> ws = require('ws');</p>
<p>Section 44.3: Using WebSocket's and WebSocket Server's</p>
<p>To open a new WebSocket, simply add something like:</p>
<p><strong>var</strong> WebSocket = require("ws");</p>
<p><strong>var</strong> ws = <strong>new</strong>
WebSocket("ws://host:8080/OptionalPathName); // Continue on with your
code...</p>
<p>Or to open a server, use:</p>
<p><strong>var</strong> WebSocketServer = require("ws").Server;</p>
<p><strong>var</strong> ws = <strong>new</strong> WebSocketServer({port:
8080, path: "OptionalPathName"});</p>
<p>Section 44.4: A Simple WebSocket Server Example</p>
<p><strong>var</strong> WebSocketServer = require('ws').Server</p>
<p><em>, wss = <strong>new</strong> WebSocketServer({ port: 8080
});</em> // If you want to add a path as well, use path: "PathName"</p>
<p>wss.on('connection', <strong>function</strong> connection(ws) {</p>
<p>ws.on('message', <strong>function</strong> incoming(message) {</p>
<p>console.log('received: %s', message);</p>
<p>});</p>
<p>ws.send('something');</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 165</p>
<h2 id="chapter-45-metalsmith">Chapter 45: metalsmith</h2>
<p>Section 45.1: Build a simple blog</p>
<p>Assuming that you have node and npm installed and available, create a
project folder with a valid package.json. Install the necessary
dependencies:</p>
<p>npm <strong>install</strong>--save-dev metalsmith metalsmith-in-place
handlebars</p>
<p>Create a file called build.js at the root of your project folder,
containing the following:</p>
<p><strong>var</strong> metalsmith = require('metalsmith');</p>
<p><strong>var</strong> handlebars = require('handlebars');</p>
<p><strong>var</strong> inPlace = require('metalsmith-in-place');</p>
<p>Metalsmith(__dirname)</p>
<p>.use(inPlace('handlebars'))</p>
<p>.build(<strong>function</strong>(err) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log('Build finished!');</p>
<p>});</p>
<p>Create a folder called src at the root of your project folder. Create
index.html in src, containing the following:</p>
<p>---</p>
<p>title: My awesome blog</p>
<p>---</p>
<p>{{ title }}</p>
<p>Running node build.js will now build all files in src. After running
this command, you'll have index.html in your</p>
<p>build folder, with the following contents:</p>
<p><strong>&lt;h1&gt;</strong>My awesome
blog<strong>&lt;/h1&gt;</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 166</p>
<h2 id="chapter-46-parsing-command-line">Chapter 46: Parsing command
line</h2>
<p>arguments</p>
<p>Section 46.1: Passing action (verb) and values</p>
<p><strong>const</strong> options = require("commander");</p>
<p>options</p>
<p>.option("-v, --verbose", "Be verbose");</p>
<p>options</p>
<p>.command("convert")</p>
<p>.alias("c")</p>
<p>.description("Converts input file to output file") .option("-i,
--in-file ", "Input file") .option("-o, --out-file ", "Output file")
.action(doConvert);</p>
<p>options.parse(process.argv);</p>
<p><strong>if</strong> (!options.args.length) options.help();</p>
<p><strong>function</strong> doConvert(options){</p>
<p>//do something with options.inFile and options.outFile</p>
<p>};</p>
<p>Section 46.2: Passing boolean switches</p>
<p><strong>const</strong> options = require("commander");</p>
<p>options</p>
<p>.option("-v, --verbose")</p>
<p>.parse(process.argv);</p>
<p><strong>if</strong> (options.verbose){</p>
<p>console.log("Let's make some noise!");</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 167</p>
<h2 id="chapter-47-client-server-communication">Chapter 47:
Client-server communication</h2>
<p>Section 47.1: /w Express, jQuery and Jade</p>
<p>//'client.jade'</p>
<p>//a button is placed down; similar in HTML</p>
<p>button(type='button', id='send_by_button') Modify data</p>
<p>#modify Lorem ipsum Sender</p>
<p>//loading jQuery; it can be done from an online source as well</p>
<p>script(src='./js/jquery-2.2.0.min.js')</p>
<p>//AJAX request using jQuery</p>
<p>script</p>
<p><strong>$(</strong>function <strong>() {</strong></p>
<p>$('#send_by_button').click(<strong>function</strong> (e) {</p>
<p>e.preventDefault();</p>
<p>//test: the text within brackets should appear when clicking on said
button //window.alert('You clicked on me. - jQuery');</p>
<p>//a variable and a JSON initialized in the code</p>
<p><strong>var</strong> predeclared = "Katamori";</p>
<p><strong>var</strong> data = {</p>
<p>Title: "Name_SenderTest",</p>
<p>Nick: predeclared,</p>
<p>FirstName: "Zoltan",</p>
<p>Surname: "Schmidt"</p>
<p>};</p>
<p>//an AJAX request with given parameters</p>
<p>$.ajax({</p>
<p>type: 'POST',</p>
<p>data: JSON.stringify(data),</p>
<p>contentType: 'application/json',</p>
<p>url: 'http://localhost:7776/domaintest',</p>
<p>//on success, received data is used as 'data' function input</p>
<p>success: <strong>function</strong> (data) {</p>
<p>window.alert('Request sent; data received.');</p>
<p><strong>var</strong> jsonstr = JSON.stringify(data);</p>
<p><strong>var</strong> jsonobj = JSON.parse(jsonstr);</p>
<p>//if the 'nick' member of the JSON does not equal to the predeclared
string</p>
<p>(as it was initialized), then the backend script was executed,
meaning that communication has been established</p>
<p><strong>if</strong>(data.Nick != predeclared){</p>
<p>document.getElementById("modify").innerHTML = "JSON
changed!<strong>\n</strong>" + jsonstr;</p>
<p>};</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>});</p>
<p>//'domaintest_route.js'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 168</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> router = express.Router();</p>
<p>//an Express router listening to GET requests - in this case, it's
empty, meaning that nothing is displayed when you reach
'localhost/domaintest'</p>
<p>router.<strong>get</strong>('/', <strong>function</strong>(req, res,
next) {</p>
<p>});</p>
<p>//same for POST requests - notice, how the AJAX request above was
defined as POST <em>router.post('/', <strong>function</strong>(req, res)
{</em></p>
<p>res.setHeader('Content-Type', 'application/json');</p>
<p>//content generated here</p>
<p><strong>var</strong> some_json = {</p>
<p>Title: "Test",</p>
<p>Item: "Crate"</p>
<p>};</p>
<p><strong>var</strong> result = JSON.stringify(some_json);</p>
<p>//content got 'client.jade'</p>
<p><strong>var</strong> sent_data = req.body;</p>
<p>sent_data.Nick = "ttony33";</p>
<p>res.send(sent_data);</p>
<p>});</p>
<p>module.exports = router;</p>
<p>//based on a personally used gist: <a
href="https://gist.github.com/Katamori/5c9850f02e4baf6e9896">https://gist.github.com/Katamori/5c9850f02e4baf6e9896</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 169</p>
<h2 id="chapter-48-node.js-design-fundamental">Chapter 48: Node.js
Design Fundamental</h2>
<p>Section 48.1: The Node.js philosophy</p>
<p>Small Core<strong>,</strong> Small Module<strong>:</strong></p>
<p>Build small and single purpose modules not in term of code size only,
but also in term of scope that serves a single purpose</p>
<p>a -"Small is beautiful"</p>
<p>b -"Make each program do one thing well."</p>
<p>The Reactor Pattern</p>
<p>The Reactor Pattern is the heart of the node.js asynchronous nature.
Allowed the system to be implemented as a single-threaded process with a
series of event generators and event handlers, with the help of event
loop that runs</p>
<p>continuously.</p>
<p>The non-blocking I/O engine of Node.js <strong>–</strong> libuv
<strong>-</strong></p>
<p><strong>The Observer Pattern</strong>(EventEmitter) maintains a list
of dependents/observers and notifies them</p>
<p><strong>var</strong> events = require('events');</p>
<p><strong>var</strong> eventEmitter = <strong>new</strong>
events.EventEmitter();</p>
<p><strong>var</strong> ringBell = <strong>function</strong>
ringBell()</p>
<p>{</p>
<p>console.log('tring tring tring');</p>
<p>}</p>
<p>eventEmitter.on('doorOpen', ringBell);</p>
<p>eventEmitter.emit('doorOpen');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 170</p>
<h2 id="chapter-49-connect-to-mongodb">Chapter 49: Connect to
Mongodb</h2>
<p>MongoDB is a free and open-source cross-platform document-oriented
database program. Classified as a NoSQL</p>
<p>database program, MongoDB uses JSON-like documents with schemas.</p>
<p><a href="https://www.mongodb.com/">For more details go to
https://www.mongodb.com/</a></p>
<p>Section 49.1: Simple example to Connect mongoDB from</p>
<p>Node.JS</p>
<p>MongoClient.connect('mongodb://localhost:27017/myNewDB',<strong>function</strong>
(err,db) {</p>
<p><strong>if</strong>(err)</p>
<p>console.log("Unable to connect DB. Error: " + err)</p>
<p>else</p>
<p>console.log('Connected to DB');</p>
<p>db.close();</p>
<p>});</p>
<p>myNewDB is DB name, if it does not exists in database then it will
create automatically with this call.</p>
<p>Section 49.2: Simple way to Connect mongoDB with core</p>
<p>Node.JS</p>
<p><strong>var</strong> MongoClient =
require('mongodb').MongoClient;</p>
<p>//connection with mongoDB</p>
<p>MongoClient.connect("mongodb://localhost:27017/MyDb",
<strong>function</strong> (err, db) {</p>
<p>//check the connection</p>
<p><strong>if</strong>(err){</p>
<p>console.log("connection failed.");</p>
<p><strong>}</strong>else<strong>{</strong></p>
<p>console.log("successfully connected to mongoDB.");</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 171</p>
<h2 id="chapter-50-performance-challenges">Chapter 50: Performance
challenges</h2>
<p>Section 50.1: Processing long running queries with Node</p>
<p>Since Node is single-threaded, there is a need of workaround if it
comes to a long-running calculations.</p>
<p><strong>Note:</strong> this is "ready to run" example. Just, don't
forget to get jQuery and install the required modules.</p>
<p>Main logic of this example:</p>
<p>1. Client sends request to the server.</p>
<p>2. Server starts the routine in separate node instance and sends
immediate response back with related task ID. 3. Client continiously
sends checks to a server for status updates of the given task ID.</p>
<p>Project structure:</p>
<p>project</p>
<p>│ package.json</p>
<p>│ index.html</p>
<p>│</p>
<p>├───js</p>
<p>│ main.js</p>
<p>│ jquery-1.12.0.min.js</p>
<p>│</p>
<p>└───srv</p>
<p>│ app.js</p>
<p>├─── models</p>
<p>│ task.js</p>
<p>└─── tasks</p>
<p>data-processor.js</p>
<p>app.js:</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> app = express();</p>
<p><strong>var</strong> http = require('http').Server(app);</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p><strong>var</strong> bodyParser = require('body-parser');</p>
<p><strong>var</strong> childProcess= require('child_process');</p>
<p><strong>var</strong> Task = require('./models/task');</p>
<p>app.use(bodyParser.urlencoded({ extended: <strong>true</strong>
}));</p>
<p>app.use(bodyParser.json());</p>
<p>app.use(express.<strong>static</strong>(__dirname + '/../'));</p>
<p>app.<strong>get</strong>('/', <strong>function</strong>(request,
response){</p>
<p>response.render('index.html');</p>
<p>});</p>
<p>//route for the request itself</p>
<p>app.post('/long-running-request', <strong>function</strong>(request,
response){</p>
<p>//create new task item for status tracking</p>
<p><strong>var</strong> t = <strong>new</strong> Task({ status:
'Starting ...' });</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 172</p>
<p>t.save(<strong>function</strong>(err, task){</p>
<p>//create new instance of node for running separate task in another
thread</p>
<p>taskProcessor =
childProcess.fork('./srv/tasks/data-processor.js');</p>
<p>//process the messages comming from the task processor</p>
<p>taskProcessor.on('message', <strong>function</strong>(msg){</p>
<p>task.status = msg.status;</p>
<p>task.save();</p>
<p>}.bind(<strong>this</strong>));</p>
<p>//remove previously openned node instance when we finished</p>
<p>taskProcessor.on('close', <strong>function</strong>(msg){</p>
<p><strong>this</strong>.kill();</p>
<p>});</p>
<p>//send some params to our separate task</p>
<p><strong>var</strong> params = {</p>
<p>message: 'Hello from main thread'</p>
<p>};</p>
<p>taskProcessor.send(params);</p>
<p>response.status(200).json(task);</p>
<p>});</p>
<p>});</p>
<p>//route to check is the request is finished the calculations
<em>app.post('/is-ready', <strong>function</strong>(request,
response){</em></p>
<p>Task</p>
<p>.findById(request.body.id)</p>
<p>.exec(<strong>function</strong>(err, task){</p>
<p>response.status(200).json(task);</p>
<p>});</p>
<p>});</p>
<p>mongoose.connect('mongodb://localhost/test');</p>
<p>http.listen('1234');</p>
<p>task.js:</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p><strong>var</strong> taskSchema = mongoose.Schema({</p>
<p>status: {</p>
<p>type: String</p>
<p>}</p>
<p>});</p>
<p>mongoose.model('Task', taskSchema);</p>
<p>module.exports = mongoose.model('Task');</p>
<p>data-processor.js:</p>
<p>process.on('message', <strong>function</strong>(msg){</p>
<p>init = <strong>function</strong>(){</p>
<p>processData(msg.message);</p>
<p>}.bind(<strong>this</strong>)();</p>
<p><strong>function</strong> processData(message){</p>
<p>//send status update to the main app</p>
<p>process.send({ status: 'We have started processing your data.'
});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 173</p>
<p>//long calculations ..</p>
<p>setTimeout(<strong>function</strong>(){</p>
<p>process.send({ status: 'Done!' });</p>
<p>//notify node, that we are done with this task</p>
<p>process.disconnect();</p>
<p>}, 5000);</p>
<p>}</p>
<p>});</p>
<p>process.on('uncaughtException',<strong>function</strong>(err){</p>
<p>console.log("Error happened: " + err.message + "<strong>\n</strong>"
+ err.stack + ".<strong>\n</strong>");</p>
<p>console.log("Gracefully finish the routine.");</p>
<p>});</p>
<p>index.html:</p>
<p>&lt;html&gt;</p>
<p>&lt;head&gt;</p>
<p><strong>&lt;script</strong>
src="./js/jquery-1.12.0.min.js"<strong>&gt;&lt;/script&gt;</strong></p>
<p><strong>&lt;script</strong>
src="./js/main.js"<strong>&gt;&lt;/script&gt;</strong></p>
<p>&lt;/head&gt;</p>
<p>&lt;body&gt;</p>
<p><strong>&lt;p&gt;</strong>Example of processing long-running node
requests.<strong>&lt;/p&gt; &lt;button</strong> id="go"
type="button"<strong>&gt;</strong>Run<strong>&lt;/button&gt;</strong></p>
<p>&lt;br /&gt;</p>
<p>&lt;p&gt;<strong>Log:</strong>&lt;/p&gt;</p>
<p><strong>&lt;textarea</strong> id="log" rows="20"
cols="50"<strong>&gt;&lt;/textarea&gt;</strong></p>
<p>&lt;/body&gt;</p>
<p>&lt;/html&gt;</p>
<p>main.js:</p>
<p>$(document).on('ready', <strong>function</strong>(){</p>
<p>$('#go').on('click', <strong>function</strong>(e){</p>
<p>//clear log</p>
<p>$("#log").val('');</p>
<p>$.post("/long-running-request", {some_params: 'params' })</p>
<p>.done(<strong>function</strong>(task){</p>
<p>$("#log").val( $("#log").val() + '<strong>\n</strong>' +
task.status);</p>
<p>//function for tracking the status of the task</p>
<p><strong>function</strong> updateStatus(){</p>
<p>$.post("/is-ready", {id: task._id })</p>
<p>.done(<strong>function</strong>(response){</p>
<p>$("#log").val( $("#log").val() + '<strong>\n</strong>' +
response.status);</p>
<p><strong>if</strong>(response.status != 'Done!'){</p>
<p>checkTaskTimeout = setTimeout(updateStatus, 500);</p>
<p>}</p>
<p>});</p>
<p>}</p>
<p>//start checking the task</p>
<p><strong>var</strong> checkTaskTimeout = setTimeout(updateStatus,
100);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 174</p>
<p>});</p>
<p>});</p>
<p>package.json:</p>
<p>{</p>
<p>"name": "nodeProcessor",</p>
<p>"dependencies": {</p>
<p>"body-parser": "^1.15.2",</p>
<p>"express": "^4.14.0",</p>
<p>"html": "0.0.10",</p>
<p>"mongoose": "^4.5.5"</p>
<p>}</p>
<p>}</p>
<p><strong>Disclaimer:</strong> this example is intended to give you
basic idea. To use it in production environment, it needs</p>
<p>improvements.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 175</p>
<h2 id="chapter-51-send-web-notification">Chapter 51: Send Web
Notification</h2>
<p>Section 51.1: Send Web notification using GCM ( Google Cloud</p>
<p>Messaging System)</p>
<p>Such Example is knowing wide spreading among <strong>PWAs</strong>
(Progressive Web Applications) and in this example we're</p>
<p>going to send a simple Backend like notification using
<strong>NodeJS</strong> and <strong>ES6</strong></p>
<p>1. Install Node-GCM Module : npm <strong>install</strong>
node-gcm</p>
<p>2. Install Socket.io : npm <strong>install</strong> socket.io</p>
<p>3. <a href="https://console.cloud.google.com/">Create a GCM Enabled
application using Google Console.</a></p>
<p>4. Grabe your GCM Application Id (we will need it later on)</p>
<p>5. Grabe your GCM Application Secret code.</p>
<p>6. Open Your favorite code editor and add the following code :</p>
<p>'use strict';</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p><strong>const</strong> gcm = require('node-gcm');</p>
<p>app.io = require('socket.io')();</p>
<p>// [*] Configuring our GCM Channel.</p>
<p><strong>const</strong> sender = <strong>new</strong>
gcm.Sender('Project Secret');</p>
<p><strong>const</strong> regTokens = [];</p>
<p><strong>let</strong> message = <strong>new</strong> gcm.Message({</p>
<p>data: {</p>
<p>key1: 'msg1'</p>
<p>}</p>
<p>});</p>
<p>// [*] Configuring our static files.</p>
<p>app.use(express.<strong>static</strong>('public/'));</p>
<p>// [*] Configuring Routes.</p>
<p>app.<strong>get</strong>('/', (req, res) =&gt; {</p>
<p>res.sendFile(__dirname + '/public/index.html');</p>
<p>});</p>
<p>// [*] Configuring our Socket Connection.</p>
<p>app.io.on('connection', socket =&gt; {</p>
<p>console.log('we have a new connection ...');</p>
<p>socket.on('new_user', (reg_id) =&gt; {</p>
<p>// [*] Adding our user notification registration token to our list
typically hided in</p>
<p>a secret place.</p>
<p><strong>if</strong> (regTokens.indexOf(reg_id) ===-1) {</p>
<p>regTokens.push(reg_id);</p>
<p>// [*] Sending our push messages</p>
<p>sender.send(message, {</p>
<p>registrationTokens: regTokens</p>
<p>}, (err, response) =&gt; {</p>
<p><strong>if</strong> (err) console.error('err', err);</p>
<p><strong>else</strong> console.log(response);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 176</p>
<p>}</p>
<p>})</p>
<p>});</p>
<p>module.exports = app</p>
<p>PS : I'm using here a special hack in order to make Socket.io works
with Express because simply it doesn't work outside of the box.</p>
<p>Now Create a <strong>.json</strong> file and name it :
<strong>Manifest.json</strong>, open it and past the following :</p>
<p>{</p>
<p>"name": "Application Name",</p>
<p>"gcm_sender_id": "GCM Project ID"</p>
<p>}</p>
<p>Close it and save in your application <strong>ROOT</strong>
directory.</p>
<p>PS : the Manifest.json file needs to be in root directory or it won't
work.</p>
<p>In the code above I'm doing the following :</p>
<p>1. I seted up and sent a normal index.html page that will use
socket.io also.</p>
<p>2. I'm listening on a <strong>connection</strong> event fired from
the <strong>front-end</strong> aka my <strong>index.html page</strong>
(it will be fired once a</p>
<p>new client successfully connected to our pre-defined link)</p>
<p>3. I'm sending a special token know's as the <strong>registration
token</strong> from my index.html via socket.io
<strong>new_user</strong></p>
<p>event, such token will be our user unique passcode and each code is
generated usually from a supporting</p>
<p>browser for the <strong>Web notification API</strong> (read more <a
href="https://developer.mozilla.org/en/docs/Web/API/notification">here.</a></p>
<p>4. I'm simply using the <strong>node-gcm</strong> module to send my
notification which will be handled and shown later on</p>
<p><a
href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"><strong>using</strong>
Service Workers<strong>`.</strong></a></p>
<p>This is from <strong>NodeJS</strong> point of view. in other examples
I will show how we can send custom data, icons ..etc in our</p>
<p>push message.</p>
<p><a href="https://github.com/houssem-yahiaoui/webpush-notification">PS
: you can find the full working demo over here.</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 177</p>
<h2 id="chapter-52-remote-debugging-in-node.js">Chapter 52: Remote
Debugging in Node.JS</h2>
<p>Section 52.1: Use the proxy for debugging via port on Linux</p>
<p>If you start your application on Linux, use the proxy for debugging
via port, for example:</p>
<p>socat TCP-LISTEN:9958,fork TCP:127.0.0.1:5858 &amp;</p>
<p>Use port 9958 for remote debugging then.</p>
<p>Section 52.2: NodeJS run configuration</p>
<p>To set up Node remote debugging, simply run the node process with the
--debug flag. You can add a port on which the debugger should run using
--debug=.</p>
<p>When your node process starts up you should see the message</p>
<p>Debugger listening on port</p>
<p>Which will tell you that everything is good to go.</p>
<p>Then you set up the remote debugging target in your specific IDE.</p>
<p>Section 52.3: IntelliJ/Webstorm Configuration</p>
<p>1. Make sure that the NodeJS plugin is enabled</p>
<p>2. Select your run configurations (screen)</p>
<p><img src="media/index-189_1.jpeg"
style="width:2.08333in;height:1.98611in" alt="index-189_1.jpg" /></p>
<p><strong>3. Select</strong> + <strong>&gt;</strong> Node.js Remote
Debug</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 178</p>
<p><img src="media/index-190_1.jpeg"
style="width:2.09722in;height:5.72222in" alt="index-190_1.jpg" /></p>
<p>4. Make sure you enter the port selected above as well as the correct
host</p>
<p><img src="media/index-190_2.jpeg"
style="width:6.5in;height:1.02778in" alt="index-190_2.jpg" /></p>
<p>Once those are configured simply run the debug target as you normally
would and it will stop on your breakpoints.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 179</p>
<h2 id="chapter-53-database-mongodb-with">Chapter 53: Database (MongoDB
with</h2>
<p>Mongoose)</p>
<p>Section 53.1: Mongoose connection</p>
<p>Make sure to have mongodb running first! mongod --dbpath data/</p>
<p>package.json</p>
<p>"dependencies": {</p>
<p>"mongoose": "^4.5.5",</p>
<p>}</p>
<p>server.js (ECMA 6)</p>
<p>import mongoose from 'mongoose';</p>
<p>mongoose.connect('mongodb://localhost:27017/stackoverflow-example');
<strong>const</strong> db = mongoose.connection;</p>
<p>db.on('error', console.error.bind(console, 'DB connection
error!'));</p>
<p>server.js (ECMA 5.1)</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p>mongoose.connect('mongodb://localhost:27017/stackoverflow-example');
<strong>var</strong> db = mongoose.connection;</p>
<p>db.on('error', console.error.bind(console, 'DB connection
error!'));</p>
<p>Section 53.2: Model</p>
<p>Define your model(s):</p>
<p>app/models/user.js (ECMA 6)</p>
<p>import mongoose from 'mongoose';</p>
<p><strong>const</strong> userSchema = <strong>new</strong>
mongoose.Schema({</p>
<p>name: String,</p>
<p>password: String</p>
<p>});</p>
<p><strong>const</strong> User = mongoose.model('User', userSchema);</p>
<p>export <strong>default</strong> User;</p>
<p>app/model/user.js (ECMA 5.1)</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p><strong>var</strong> userSchema = <strong>new</strong>
mongoose.Schema({</p>
<p>name: String,</p>
<p>password: String</p>
<p>});</p>
<p><strong>var</strong> User = mongoose.model('User', userSchema);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 180</p>
<p><span id="module_exports___User" class="anchor"></span>module.exports
= User</p>
<p>Section 53.3: Insert data</p>
<p>ECMA 6:</p>
<p><strong>const</strong> user = <strong>new</strong> User({</p>
<p>name: 'Stack',</p>
<p>password: 'Overflow',</p>
<p>}) ;</p>
<p>user.save((err) =&gt; {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log('User saved!');</p>
<p>});</p>
<p>ECMA5.1:</p>
<p><strong>var</strong> user = <strong>new</strong> User({</p>
<p>name: 'Stack',</p>
<p>password: 'Overflow',</p>
<p>}) ;</p>
<p>user.save(<strong>function</strong> (err) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log('User saved!');</p>
<p>});</p>
<p>Section 53.4: Read data</p>
<p>ECMA6:</p>
<p>User.findOne({</p>
<p>name: 'stack'</p>
<p>}, (err, user) =&gt; {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong> (!user) {</p>
<p>console.log('No user was found');</p>
<p>} <strong>else</strong> {</p>
<p>console.log('User was found');</p>
<p>}</p>
<p>});</p>
<p>ECMA5.1:</p>
<p>User.findOne({</p>
<p>name: 'stack'</p>
<p>}, <strong>function</strong> (err, user) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong> (!user) {</p>
<p>console.log('No user was found');</p>
<p>} <strong>else</strong> {</p>
<p>console.log('User was found');</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 181</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 182</p>
<h2 id="chapter-54-good-coding-style">Chapter 54: Good coding style</h2>
<p>Section 54.1: Basic program for signup</p>
<p>Through this example, it will be explained to divide the
<strong>node.js</strong> code into different
<strong>modules/folders</strong> for better</p>
<p>undertandibility. Following this technique makes it easier for other
developers to understand the code, as they can</p>
<p>directly refer to the concerned file instead of going through the
whole code. The major use is when you are working in a team and a new
developer joins at a later stage, it will get easier for him to gel up
with the code itself.</p>
<p><strong>index.js</strong>: This file will manage server
connection.</p>
<p>//Import Libraries</p>
<p><strong>var</strong> express = require('express'),</p>
<p>session = require('express-session'),</p>
<p>mongoose = require('mongoose'),</p>
<p>request = require('request');</p>
<p>//Import custom modules</p>
<p><strong>var</strong> userRoutes = require('./app/routes/userRoutes');
<strong>var</strong> config = require('./app/config/config');</p>
<p>//Connect to Mongo DB</p>
<p>mongoose.connect(config.getDBString());</p>
<p>//Create a new Express application and Configure it
<em><strong>var</strong> app = express();</em></p>
<p>//Configure Routes</p>
<p>app.use(config.API_PATH, userRoutes());</p>
<p>//Start the server</p>
<p>app.listen(config.PORT);</p>
<p>console.log('Server started at - '+ config.URL+ ":"
+config.PORT);</p>
<p><strong>config.js</strong>: This file will manage all the
configuration related params which will remain same throughout.</p>
<p><strong>var</strong> config = {</p>
<p>VERSION: 1,</p>
<p>BUILD: 1,</p>
<p>URL: 'http://127.0.0.1',</p>
<p>API_PATH : '/api',</p>
<p>PORT : process.env.PORT || 8080,</p>
<p>DB : {</p>
<p>//MongoDB configuration</p>
<p>HOST : 'localhost',</p>
<p>PORT : '27017',</p>
<p>DATABASE : 'db'</p>
<p>},</p>
<p>/*</p>
<p>* Get DB Connection String for connecting to MongoDB database */</p>
<p>getDBString : <strong>function</strong>(){</p>
<p><strong>return</strong> 'mongodb://'+ <strong>this</strong>.DB.HOST
+':'+ <strong>this</strong>.DB.PORT +'/'+
<strong>this</strong>.DB.DATABASE;</p>
<p>},</p>
<p>/*</p>
<p>* Get the http URL</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 183</p>
<p> */</p>
<p>getHTTPUrl : <strong>function</strong>(){</p>
<p><strong>return</strong> 'http://' + <strong>this</strong>.URL + ":" +
<strong>this</strong>.PORT;</p>
<p>}</p>
<p>module.exports = config;</p>
<p><strong>user.js</strong>: Model file where schema is defined</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p>//Schema for User</p>
<p><strong>var</strong> UserSchema = <strong>new</strong> Schema({</p>
<p>name: {</p>
<p>type: String,</p>
<p>// required: true</p>
<p>},</p>
<p>email: {</p>
<p>type: String</p>
<p>},</p>
<p>password: {</p>
<p>type: String,</p>
<p>//required: true</p>
<p>},</p>
<p>dob: {</p>
<p>type: Date,</p>
<p>//required: true</p>
<p>},</p>
<p>gender: {</p>
<p>type: String, <em>// Male/Female</em></p>
<p>// required: true</p>
<p>}</p>
<p>});</p>
<p>//Define the model for User</p>
<p><strong>var</strong> User;</p>
<p><strong>if</strong>(mongoose.models.User)</p>
<p>User = mongoose.model('User');</p>
<p>else</p>
<p>User = mongoose.model('User', UserSchema);</p>
<p>//Export the User Model</p>
<p>module.exports = User;</p>
<p><strong>userController</strong>: This file contains the function for
user signUp</p>
<p><strong>var</strong> User = require('../models/user');</p>
<p><strong>var</strong> crypto = require('crypto');</p>
<p>//Controller for User</p>
<p><strong>var</strong> UserController = {</p>
<p>//Create a User</p>
<p>create: <strong>function</strong>(req, res){</p>
<p><strong>var</strong> repassword = req.body.repassword;</p>
<p><strong>var</strong> password = req.body.password;</p>
<p><strong>var</strong> userEmail = req.body.email;</p>
<p>//Check if the email address already exists</p>
<p>User.find({"email": userEmail}, <strong>function</strong>(err,
usr){</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 184</p>
<p><strong>if</strong>(usr.length &gt; 0){</p>
<p>//Email Exists</p>
<p>res.json('Email already exists');</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>else</p>
<p>{</p>
<p>//New Email</p>
<p>//Check for same passwords</p>
<p><strong>if</strong>(password != repassword){</p>
<p>res.json('Passwords does not match');</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>//Generate Password hash based on sha1</p>
<p><strong>var</strong> shasum = crypto.createHash('sha1');</p>
<p>shasum.update(req.body.password);</p>
<p><strong>var</strong> passwordHash = shasum.digest('hex');</p>
<p>//Create User</p>
<p><strong>var</strong> user = <strong>new</strong> User();</p>
<p>user.name = req.body.name;</p>
<p>user.email = req.body.email;</p>
<p>user.password = passwordHash;</p>
<p>user.dob = Date.parse(req.body.dob) || "";</p>
<p>user.gender = req.body.gender;</p>
<p>//Validate the User</p>
<p>user.validate(<strong>function</strong>(err){</p>
<p><strong>if</strong>(err){</p>
<p>res.json(err);</p>
<p>return<strong>;</strong></p>
<p><strong>}</strong>else<strong>{</strong></p>
<p>//Finally save the User</p>
<p>user.save(<strong>function</strong>(err){</p>
<p><strong>if</strong>(err)</p>
<p>{</p>
<p>res.json(err);</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>//Remove Password before sending User details</p>
<p>user.password = <strong>undefined</strong>;</p>
<p>res.json(user);</p>
<p>return<strong>;</strong></p>
<p>});</p>
<p>}</p>
<p>});</p>
<p>}</p>
<p>});</p>
<p>}</p>
<p>}</p>
<p>module.exports = UserController;</p>
<p><strong>userRoutes.js</strong>: This the route for userController</p>
<p><strong>var</strong> express = require('express');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 185</p>
<p><strong>var</strong> UserController =
require('../controllers/userController');</p>
<p>//Routes for User</p>
<p><strong>var</strong> UserRoutes = <strong>function</strong>(app)</p>
<p>{</p>
<p><strong>var</strong> router = express.Router();</p>
<p>router.route('/users')</p>
<p>.post(UserController.create);</p>
<p><strong>return</strong> router;</p>
<p>}</p>
<p>module.exports = UserRoutes;</p>
<p>The above example may appear too big but if a beginner at node.js
with a little blend of express knowledge tries to</p>
<p>go through this will find it easy and really helpful.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 186</p>
<h2 id="chapter-55-restful-api-design-best">Chapter 55: Restful API
Design: Best</h2>
<p>Practices</p>
<p>Section 55.1: Error Handling: GET all resources</p>
<p>How do you handle errors, rather then log them to the console?</p>
<p>Bad way:</p>
<p>Router.route('/')</p>
<p>.<strong>get</strong>((req, res) =&gt; {</p>
<p>Request.find((err, r) =&gt; {</p>
<p><strong>if</strong>(err){</p>
<p>console.log(err)</p>
<p>} <strong>else</strong> {</p>
<p>res.json(r)</p>
<p>}</p>
<p>})</p>
<p>})</p>
<p>.post((req, res) =&gt; {</p>
<p><strong>const</strong> request = <strong>new</strong> Request({</p>
<p>type: req.body.type,</p>
<p>info: req.body.info</p>
<p>});</p>
<p>request.info.user = req.user._id;</p>
<p>console.log("ABOUT TO SAVE REQUEST", request);</p>
<p>request.save((err, r) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>res.json({ message: 'there was an error saving your r' });</p>
<p>} <strong>else</strong> {</p>
<p>res.json(r);</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>Better way:</p>
<p>Router.route('/')</p>
<p>.<strong>get</strong>((req, res) =&gt; {</p>
<p>Request.find((err, r) =&gt; {</p>
<p><strong>if</strong>(err){</p>
<p>console.log(err)</p>
<p>} <strong>else</strong> {</p>
<p><strong>return</strong> next(err)</p>
<p>}</p>
<p>})</p>
<p>})</p>
<p>.post((req, res) =&gt; {</p>
<p><strong>const</strong> request = <strong>new</strong> Request({</p>
<p>type: req.body.type,</p>
<p>info: req.body.info</p>
<p>});</p>
<p>request.info.user = req.user._id;</p>
<p>console.log("ABOUT TO SAVE REQUEST", request);</p>
<p>request.save((err, r) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> next(err)</p>
<p>} <strong>else</strong> {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 187</p>
<p>res.json(r);</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 188</p>
<h2 id="chapter-56-deliver-html-or-any-other">Chapter 56: Deliver HTML
or any other</h2>
<p>sort of file</p>
<p>Section 56.1: Deliver HTML at specified path</p>
<p>Here's how to create an Express server and serve index.html by
default (empty path /), and page1.html for /page1 path.</p>
<p>Folder structure</p>
<p>project root</p>
<p>| server.js</p>
<p>|____views</p>
<p>| index.html</p>
<p>| page1.html</p>
<p>server.js</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> path = require('path');</p>
<p><strong>var</strong> app = express();</p>
<p>// deliver index.html if no file is requested</p>
<p>app.<strong>get</strong>("/", <strong>function</strong> (request,
response) {</p>
<p>response.sendFile(path.join(__dirname, 'views/index.html')); });</p>
<p>// deliver page1.html if page1 is requested</p>
<p>app.<strong>get</strong>('/page1', <strong>function</strong>(request,
response) {</p>
<p>response.sendFile(path.join(__dirname, 'views', 'page1.html',
<strong>function</strong>(error) {</p>
<p><strong>if</strong> (error) {</p>
<p>// do something in case of error</p>
<p>console.log(err);</p>
<p>response.end(JSON.stringify({error:"page not found"}));</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>app.listen(8080);</p>
<p>Note that sendFile() just streams a static file as response, offering
no opportunity to modify it. If you are serving</p>
<p>an HTML file and want to include dynamic data with it, then you will
need to use a <em>template engine</em> such as Pug, Mustache, or
EJS.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 189</p>
<h2 id="chapter-57-tcp-sockets">Chapter 57: TCP Sockets</h2>
<p>Section 57.1: A simple TCP server</p>
<p>// Include Nodejs' net module.</p>
<p><strong>const</strong> Net = require('net');</p>
<p>// The port on which the server is listening.</p>
<p><strong>const</strong> port = 8080;</p>
<p>// Use net.createServer() in your code. This is just for illustration
purpose. // Create a new TCP server.</p>
<p><strong>const</strong> server = <strong>new</strong>
Net.Server();</p>
<p>// The server listens to a socket for a client to make a connection
request. // Think of a socket as an end point.</p>
<p>server.listen(port, <strong>function</strong>() {</p>
<p>console.log(`Server listening <strong>for</strong> connection
requests on socket localhost:${port}`.); });</p>
<p>// When a client requests a connection with the server, the server
creates a new // socket dedicated to that client.</p>
<p>server.on('connection', <strong>function</strong>(socket) {</p>
<p>console.log('A new connection has been established.');</p>
<p>// Now that a TCP connection has been established, the server can
send data to // the client by writing to its socket.</p>
<p>socket.write('Hello, client.');</p>
<p>// The server can also receive data from the client by reading from
its socket.</p>
<p>socket.on('data', <strong>function</strong>(chunk) {</p>
<p>console.log(`Data received from client: ${chunk.toString()`.});</p>
<p>});</p>
<p>// When the client requests to end the TCP connection with the
server, the server // ends the connection.</p>
<p>socket.on('end', <strong>function</strong>() {</p>
<p>console.log('Closing connection with the client');</p>
<p>});</p>
<p>// Don't forget to catch error, for your own sake.</p>
<p>socket.on('error', <strong>function</strong>(err) {</p>
<p>console.log(`Error: ${err}`);</p>
<p>});</p>
<p>});</p>
<p>Section 57.2: A simple TCP client</p>
<p>// Include Nodejs' net module.</p>
<p><strong>const</strong> Net = require('net');</p>
<p>// The port number and hostname of the server.</p>
<p><strong>const</strong> port = 8080;</p>
<p><strong>const</strong> host = 'localhost';</p>
<p>// Create a new TCP client.</p>
<p><strong>const</strong> client = <strong>new</strong>
Net.Socket();</p>
<p>// Send a connection request to the server.</p>
<p>client.connect({ port: port, host: host }),
<strong>function</strong>() {</p>
<p>// If there is no error, the server has accepted the request and
created a new // socket dedicated to us.</p>
<p>console.log('TCP connection established with the server.');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 190</p>
<p>// The client can now send data to the server by writing to its
socket.</p>
<p>client.write('Hello, server.');</p>
<p>});</p>
<p>// The client can also receive data from the server by reading from
its socket. <em>client.on('data', <strong>function</strong>(chunk)
{</em></p>
<p>console.log(`Data received from the server:
${chunk.toString()}.`);</p>
<p>// Request an end to the connection after the data has been
received.</p>
<p>client.end();</p>
<p>});</p>
<p>client.on('end', <strong>function</strong>() {</p>
<p>console.log('Requested an end to the TCP connection'); });</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 191</p>
<h2 id="chapter-58-hack">Chapter 58: Hack</h2>
<p>Section 58.1: Add new extensions to require()</p>
<p>You can add new extensions to require() by extending
require.extensions.</p>
<p>For a <strong>XML</strong> example:</p>
<p>// Add .xml for require()</p>
<p>require.extensions['.xml'] = (module, filename) =&gt; {</p>
<p><strong>const</strong> fs = require('fs')</p>
<p><strong>const</strong> xml2js = require('xml2js')</p>
<p>module.exports = (callback) =&gt; {</p>
<p>// Read required file.</p>
<p>fs.readFile(filename, 'utf8', (err, data) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>callback(err)</p>
<p>return</p>
<p>}</p>
<p>// Parse it.</p>
<p>xml2js.parseString(data, (err, result) =&gt; {</p>
<p>callback(<strong>null</strong>, result)</p>
<p>})</p>
<p>})</p>
<p>}</p>
<p>}</p>
<p>If the content of hello.xml is following:</p>
<p><strong>&lt;?xml</strong> version="1.0"
encoding="UTF-8"<strong>?&gt;</strong></p>
<p>&lt;foo&gt;</p>
<p>&lt;bar&gt;<strong>baz</strong>&lt;/bar&gt;</p>
<p>&lt;qux /&gt;</p>
<p>&lt;/foo&gt;</p>
<p>You can read and parse it through require():</p>
<p>require('./hello')((err, xml) {</p>
<p><strong>if</strong> (err)</p>
<p>throw <strong>err;</strong></p>
<p>console.log(err);</p>
<p>})</p>
<p>It prints { foo: { bar: [ 'baz' ], qux: [ '' ] } }.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 192</p>
<h2 id="chapter-59-bluebird-promises">Chapter 59: Bluebird Promises</h2>
<p>Section 59.1: Converting nodeback library to Promises</p>
<p><strong>const</strong> Promise = require('bluebird'),</p>
<p>fs = require('fs')</p>
<p>Promise.promisifyAll(fs)</p>
<p>// now you can use promise based methods on 'fs' with the Async
suffix <em>fs.readFileAsync('file.txt').then(contents =&gt; {</em></p>
<p>console.log(contents)</p>
<p>}).<strong>catch</strong>(err =&gt; {</p>
<p>console.error('error reading', err)</p>
<p>})</p>
<p>Section 59.2: Functional Promises</p>
<p>Example of map:</p>
<p>Promise.resolve([ 1, 2, 3 ]).map(el =&gt; {</p>
<p><em><strong>return</strong> Promise.resolve(el * el)</em> // return
some async operation in real world</p>
<p>})</p>
<p>Example of filter:</p>
<p>Promise.resolve([ 1, 2, 3 ]).filter(el =&gt; {</p>
<p><em><strong>return</strong> Promise.resolve(el % 2 === 0)</em> //
return some async operation in real world</p>
<p>}).then(console.log)</p>
<p>Example of reduce:</p>
<p>Promise.resolve([ 1, 2, 3 ]).reduce((prev, curr) =&gt; {</p>
<p><em><strong>return</strong> Promise.resolve(prev + curr)</em> //
return some async operation in real world</p>
<p>}).then(console.log)</p>
<p>Section 59.3: Coroutines (Generators)</p>
<p><strong>const</strong> promiseReturningFunction =
Promise.coroutine(<strong>function</strong>* (file) {</p>
<p><em><strong>const</strong> data = yield fs.readFileAsync(file)</em>
// this returns a Promise and resolves to the file</p>
<p>contents</p>
<p><strong>return</strong> data.toString().toUpperCase()</p>
<p>})</p>
<p>promiseReturningFunction('file.txt').then(console.log)</p>
<p>Section 59.4: Automatic Resource Disposal (Promise.using)</p>
<p><strong>function</strong> somethingThatReturnsADisposableResource()
{</p>
<p><strong>return</strong> getSomeResourceAsync(...).disposer(resource
=&gt; { resource.dispose()</p>
<p>})</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 193</p>
<p><span id="Promise_using_somethingThatRetur"
class="anchor"></span>Promise.using(somethingThatReturnsADisposableResource(),
resource =&gt; {</p>
<p>// use the resource here, the disposer will automatically close it
when Promise.using exits</p>
<p>})</p>
<p>Section 59.5: Executing in series</p>
<p>Promise.resolve([1, 2, 3])</p>
<p>.mapSeries(el =&gt; Promise.resolve(el * el)) <em>// in real world,
use Promise returning async function</em> .then(console.log)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 194</p>
<h2 id="chapter-60-asyncawait">Chapter 60: Async/Await</h2>
<p>Async/await is a set of keywords that allows writing of asynchronous
code in a procedural manner without having</p>
<p>to rely on callbacks (<em>callback hell</em>) or promise-chaining
(.then().then().then()).</p>
<p>This works by using the await keyword to suspend the state of an
async function, until the resolution of a promise,</p>
<p>and using the async keyword to declare such async functions, which
return a promise.</p>
<p>Async/await is available from node.js 8 by default or 7 using the
flag --harmony-async-await.</p>
<p>Section 60.1: Comparison between Promises and Async/Await</p>
<p>Function using promises:</p>
<p><strong>function</strong> myAsyncFunction() {</p>
<p><strong>return</strong> aFunctionThatReturnsAPromise()</p>
<p>// doSomething is a sync function</p>
<p>.then(result =&gt; doSomething(result))</p>
<p>.<strong>catch</strong>(handleError);</p>
<p>}</p>
<p>So here is when Async/Await enter in action in order to get cleaner
our function:</p>
<p>async <strong>function</strong> myAsyncFunction() {</p>
<p><strong>let</strong> result;</p>
<p>try <strong>{</strong></p>
<p>result = await aFunctionThatReturnsAPromise();</p>
<p>} <strong>catch</strong> (error) {</p>
<p>handleError(error);</p>
<p>}</p>
<p>// doSomething is a sync function</p>
<p><strong>return</strong> doSomething(result);</p>
<p>}</p>
<p>So the keyword async would be similar to write <strong>return
new</strong> Promise((resolve, reject) =&gt; {...}.</p>
<p>And await similar to get your result in then callback.</p>
<p>Here I leave a pretty brief gif that will not left any doubt in mind
after seeing it:</p>
<p><a
href="https://twitter.com/manekinekko/status/855824609299636230">GIF</a></p>
<p>Section 60.2: Async Functions with Try-Catch Error Handling</p>
<p>One of the best features of async/await syntax is that standard
try-catch coding style is possible, just like you were</p>
<p>writing synchronous code.</p>
<p><strong>const</strong> myFunc = async (req, res) =&gt; {</p>
<p>try <strong>{</strong></p>
<p><strong>const</strong> result = await somePromise();</p>
<p>} <strong>catch</strong> (err) {</p>
<p>// handle errors here</p>
<p>}</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 195</p>
<p><span id="Here_s_an_example_with_Express_a"
class="anchor"></span>Here's an example with Express and
promise-mysql:</p>
<p>router.<strong>get</strong>('/flags/:id', async (req, res) =&gt;
{</p>
<p>try <strong>{</strong></p>
<p><strong>const</strong> connection = await
pool.createConnection();</p>
<p>try <strong>{</strong></p>
<p><strong>const</strong> sql = `SELECT f.id, f.width, f.height, f.code,
f.filename</p>
<p>FROM flags f</p>
<p>WHERE f.id = ?</p>
<p>LIMIT 1`;</p>
<p><strong>const</strong> flags = await connection.query(sql,
req.params.id); <strong>if</strong> (flags.length === 0)</p>
<p><strong>return</strong> res.status(404).send({ message: 'flag not
found' });</p>
<p><strong>return</strong> res.send({ flags[0] });</p>
<p><strong>}</strong> finally <strong>{</strong></p>
<p>pool.releaseConnection(connection);</p>
<p>}</p>
<p>} <strong>catch</strong> (err) {</p>
<p>// handle errors here</p>
<p>}</p>
<p>});</p>
<p>Section 60.3: Stops execution at await</p>
<p>If the promise doesn't return anything, the async task can be
completed using await.</p>
<p>try<strong>{</strong></p>
<p>await User.findByIdAndUpdate(user._id, {</p>
<p>$push: {</p>
<p>tokens: token</p>
<p>}</p>
<p>}).exec()</p>
<p>}<strong>catch</strong>(e){</p>
<p>handleError(e)</p>
<p>}</p>
<p>Section 60.4: Progression from Callbacks</p>
<p>In the beginning there were callbacks, and callbacks were ok:</p>
<p><strong>const</strong> getTemperature = (callback) =&gt; {</p>
<p>http.<strong>get</strong>('www.temperature.com/current', (res) =&gt;
{</p>
<p>callback(res.data.temperature)</p>
<p>})</p>
<p>}</p>
<p><strong>const</strong> getAirPollution = (callback) =&gt; {</p>
<p>http.<strong>get</strong>('www.pollution.com/current', (res) =&gt;
{</p>
<p>callback(res.data.pollution)</p>
<p>});</p>
<p>}</p>
<p>getTemperature(<strong>function</strong>(temp) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 196</p>
<p>getAirPollution(<strong>function</strong>(pollution) {</p>
<p>console.log(`the temp is ${temp} and the pollution is
${pollution}.`)</p>
<p>// The temp is 27 and the pollution is 0.5.</p>
<p>})</p>
<p>})</p>
<p>But there were a few <a href="http://callbackhell.com">really
frustrating issues with callbacks so we all started using
promises.</a></p>
<p><strong>const</strong> getTemperature = () =&gt; {</p>
<p><strong>return new</strong> Promise((resolve, reject) =&gt; {</p>
<p>http.<strong>get</strong>('www.temperature.com/current', (res) =&gt;
{</p>
<p>resolve(res.data.temperature)</p>
<p>})</p>
<p>})</p>
<p>}</p>
<p><strong>const</strong> getAirPollution = () =&gt; {</p>
<p><strong>return new</strong> Promise((resolve, reject) =&gt; {</p>
<p>http.<strong>get</strong>('www.pollution.com/current', (res) =&gt;
{</p>
<p>resolve(res.data.pollution)</p>
<p>})</p>
<p>})</p>
<p>}</p>
<p>getTemperature()</p>
<p>.then(temp =&gt; console.log(`the temp is ${temp}`))</p>
<p>.then(() =&gt; getAirPollution())</p>
<p>.then(pollution =&gt; console.log(`and the pollution is
${pollution}`)) <em>// the temp is 32</em></p>
<p>// and the pollution is 0.5</p>
<p>This was a bit better. Finally, we found async/await. Which still
uses promises under the hood.</p>
<p><strong>const</strong> temp = await getTemperature()</p>
<p><strong>const</strong> pollution = await getAirPollution()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 197</p>
<h2 id="chapter-61-koa-framework-v2">Chapter 61: Koa Framework v2</h2>
<p>Section 61.1: Hello World example</p>
<p><strong>const</strong> Koa = require('koa')</p>
<p><strong>const</strong> app = <strong>new</strong> Koa()</p>
<p>app.use(async ctx =&gt; {</p>
<p>ctx.body = 'Hello World'</p>
<p>})</p>
<p>app.listen(8080)</p>
<p>Section 61.2: Handling errors using middleware</p>
<p>app.use(async (ctx, next) =&gt; {</p>
<p>try <strong>{</strong></p>
<p><em>await next()</em> // attempt to invoke the next middleware
downstream</p>
<p>} <strong>catch</strong> (err) {</p>
<p><em>handleError(err, ctx)</em> // define your own error handling
function</p>
<p>}</p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 198</p>
<h2 id="chapter-62-unit-testing-frameworks">Chapter 62: Unit testing
frameworks</h2>
<p>Section 62.1: Mocha Asynchronous (async/await)</p>
<p><strong>const</strong> { expect } = require('chai')</p>
<p>describe('Suite Name', <strong>function</strong>() {</p>
<p>describe('#method()', <strong>function</strong>() {</p>
<p>it('should run without an error', async <strong>function</strong>()
{</p>
<p><strong>const</strong> result = await
answerToTheUltimateQuestion()</p>
<p>expect(result).to.be.equal(42)</p>
<p>})</p>
<p>})</p>
<p>})</p>
<p>Section 62.2: Mocha synchronous</p>
<p>describe('Suite Name', <strong>function</strong>() {</p>
<p>describe('#method()', <strong>function</strong>() {</p>
<p>it('should run without an error', <strong>function</strong>() {</p>
<p>expect([ 1, 2, 3 ].length).to.be.equal(3)</p>
<p>})</p>
<p>})</p>
<p>})</p>
<p>Section 62.3: Mocha asynchronous (callback)</p>
<p><strong>var</strong> expect = require("chai").expect;</p>
<p>describe('Suite Name', <strong>function</strong>() {</p>
<p>describe('#method()', <strong>function</strong>() {</p>
<p>it('should run without an error', <strong>function</strong>(done)
{</p>
<p>testSomething(err =&gt; {</p>
<p>expect(err).to.not.be.equal(<strong>null</strong>)</p>
<p>done()</p>
<p>})</p>
<p>})</p>
<p>})</p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 199</p>
<h2 id="chapter-63-ecmascript-2015-es6-with">Chapter 63: ECMAScript 2015
(ES6) with</h2>
<p>Node.js</p>
<p>Section 63.1: const/let declarations</p>
<p>Unlike <strong>var</strong>,
<strong>const</strong>/<strong>let</strong> are bound to lexical scope
rather than function scope.</p>
<p>{</p>
<p><em><strong>var</strong> x = 1</em> // will escape the scope</p>
<p><em><strong>let</strong> y = 2</em> // bound to lexical scope</p>
<p><em><strong>const</strong> z = 3</em> // bound to lexical scope,
constant</p>
<p>}</p>
<p>console.log(x) <em>// 1</em></p>
<p><em>console.log(y)</em> // ReferenceError: y is not defined</p>
<p><em>console.log(z)</em> // ReferenceError: z is not defined</p>
<p><a
href="https://runkit.com/594bb4eaaac7e6001294132c/595433650a7efc0011ffcf09">Run
in RunKit</a></p>
<p>Section 63.2: Arrow functions</p>
<p>Arrow functions automatically bind to the 'this' lexical scope of the
surrounding code.</p>
<p>performSomething(result =&gt; {</p>
<p><strong>this</strong>.someVariable = result</p>
<p>})</p>
<p>vs</p>
<p>performSomething(<strong>function</strong>(result) {</p>
<p><strong>this</strong>.someVariable = result</p>
<p>}.bind(<strong>this</strong>))</p>
<p>Section 63.3: Arrow Function Example</p>
<p>Let's consider this example, that outputs the squares of the numbers
3, 5, and 7:</p>
<p><strong>let</strong> nums = [3, 5, 7]</p>
<p><strong>let</strong> squares = nums.map(<strong>function</strong> (n)
{</p>
<p>return <strong>n * n</strong></p>
<p>})</p>
<p>console.log(squares)</p>
<p><a
href="https://runkit.com/594bb4eaaac7e6001294132c/595611661cba570012815901">Run
in RunKit</a></p>
<p>The function passed to .map can also be written as arrow function by
removing the <strong>function</strong> keyword and instead</p>
<p>adding the arrow =&gt;:</p>
<p><strong>let</strong> nums = [3, 5, 7]</p>
<p><strong>let</strong> squares = nums.map((n) =&gt; {</p>
<p>return <strong>n * n</strong></p>
<p>})</p>
<p>console.log(squares)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 200</p>
<p><span id="Run_in_RunKit" class="anchor"></span><a
href="https://runkit.com/594bb4eaaac7e6001294132c/595613101cba570012815999">Run
in RunKit</a></p>
<p>However, this can be written even more concise. If the function body
consists of only one statement and that</p>
<p>statement computes the return value, the curly braces of wrapping the
function body can be removed, as well as the <strong>return</strong>
keyword.</p>
<p><strong>let</strong> nums = [3, 5, 7]</p>
<p><strong>let</strong> squares = nums.map(n =&gt; n * n)</p>
<p>console.log(squares)</p>
<p><a
href="https://runkit.com/594bb4eaaac7e6001294132c/59561361f9fe430012c7ab34">Run
in RunKit</a></p>
<p>Section 63.4: destructuring</p>
<p><strong>let</strong> [x,y, ...nums] = [0, 1, 2, 3, 4, 5, 6];</p>
<p>console.log(x, y, nums);</p>
<p><strong>let</strong> {a, b, ...props} = {a:1, b:2, c:3, d:{e:4}}</p>
<p>console.log(a, b, props);</p>
<p><strong>let</strong> dog = {name: 'fido', age: 3};</p>
<p><strong>let</strong> {name:n, age} = dog;</p>
<p>console.log(n, age);</p>
<p>Section 63.5: flow</p>
<p>/* @flow */</p>
<p><strong>function</strong> product(a: number, b: number){</p>
<p><strong>return</strong> a * b;</p>
<p>}</p>
<p><strong>const</strong> b = 3;</p>
<p><strong>let</strong> c = [1,2,3,,{}];</p>
<p><strong>let</strong> d = 3;</p>
<p>import request from 'request';</p>
<p>request('http://dev.markitondemand.com/MODApis/Api/v2/Quote/json?symbol=AAPL',
(err, res, payload)=&gt;{</p>
<p>payload = JSON.parse(payload);</p>
<p><strong>let</strong> {LastPrice} = payload;</p>
<p>console.log(LastPrice);</p>
<p>});</p>
<p>Section 63.6: ES6 Class</p>
<p>class Mammel {</p>
<p>constructor(legs){</p>
<p><strong>this</strong>.legs = legs;</p>
<p>}</p>
<p>eat(){</p>
<p>console.log('eating...');</p>
<p>}</p>
<p><strong>static</strong> count(){</p>
<p>console.log('static count...');</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 201</p>
<p>class Dog extends Mammel{</p>
<p>constructor(name, legs){</p>
<p>super(legs);</p>
<p><strong>this</strong>.name = name;</p>
<p>}</p>
<p>sleep(){</p>
<p>super.eat();</p>
<p>console.log('sleeping');</p>
<p>}</p>
<p>}</p>
<p><strong>let</strong> d = <strong>new</strong> Dog('fido', 4);</p>
<p>d.sleep();</p>
<p>d.eat();</p>
<p>console.log('d', d);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 202</p>
<h2 id="chapter-64-routing-ajax-requests-with">Chapter 64: Routing AJAX
requests with</h2>
<p>Express.JS</p>
<p>Section 64.1: A simple implementation of AJAX</p>
<p>You should have the basic express-generator template</p>
<p>In app.js, add(you can add it anywhere after <strong>var</strong> app
= express.app()):</p>
<p>app.post(<strong>function</strong>(req, res, next){</p>
<p>next();</p>
<p>});</p>
<p>Now in your index.js file (or its respective match), add:</p>
<p>router.<strong>get</strong>('/ajax', <strong>function</strong>(req,
res){</p>
<p>res.render('ajax', {title: 'An Ajax Example', quote: "AJAX is
great!"}); });</p>
<p>router.post('/ajax', <strong>function</strong>(req, res){</p>
<p>res.render('ajax', {title: 'An Ajax Example', quote:
req.body.quote}); });</p>
<p>Create an ajax.jade / ajax.pug or ajax.ejs file in /views directory,
add:</p>
<p>For Jade/PugJS:</p>
<p>extends layout</p>
<p>script(src="http://code.jquery.com/jquery-3.1.0.min.js")
script(src="/magic.js")</p>
<p>h1 Quote: !{quote}</p>
<p>form(method="post" id="changeQuote")</p>
<p>input(type='text', placeholder='Set quote of the day',
name='quote')</p>
<p>input(type="submit", value="Save")</p>
<p>For EJS:</p>
<p><strong>&lt;script</strong>
src="http://code.jquery.com/jquery-3.1.0.min.js"<strong>&gt;&lt;/script&gt;
&lt;script</strong>
src="/magic.js"<strong>&gt;&lt;/script&gt;</strong></p>
<p><strong>&lt;h1&gt;</strong>Quote: &lt;%=quote%<strong>&gt;
&lt;/h1&gt;</strong></p>
<p><strong>&lt;form</strong> method="post"
id="changeQuote"<strong>&gt;</strong></p>
<p><strong>&lt;input</strong> type="text" placeholder="Set quote of the
day" name="quote"<strong>/&gt; &lt;input</strong> type="submit"
value="Save"<strong>&gt;</strong></p>
<p>&lt;/form&gt;</p>
<p>Now, create a file in /public called magic.js</p>
<p>$(document).ready(<strong>function</strong>(){</p>
<p>$("form#changeQuote").on('submit', <strong>function</strong>(e){</p>
<p>e.preventDefault();</p>
<p><strong>var</strong> data = $('input[name=quote]').val();</p>
<p>$.ajax({</p>
<p>type: 'post',</p>
<p>url: '/ajax',</p>
<p>data: data,</p>
<p>dataType: 'text'</p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 203</p>
<p>.done(<strong>function</strong>(data){</p>
<p>$('h1').html(data.quote);</p>
<p>});</p>
<p>});</p>
<p>});</p>
<p>And there you have it! When you click Save the quote will change!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 204</p>
<h2 id="chapter-65-sending-a-file-stream-to-client">Chapter 65: Sending
a file stream to client</h2>
<p>Section 65.1: Using fs And pipe To Stream Static Files From</p>
<p>The Server</p>
<p>A good VOD (Video On Demand) service should start with the basics.
Lets say you have a directory on your server</p>
<p>that is not publicly accessible, yet through some sort of portal or
paywall you want to allow users to access your media.</p>
<p><strong>var</strong> movie = path.resolve('./public/' +
req.params.filename);</p>
<p>fs.stat(movie, <strong>function</strong> (err, stats) {</p>
<p><strong>var</strong> range = req.headers.range;</p>
<p><strong>if</strong> (!range) {</p>
<p><strong>return</strong> res.sendStatus(416);</p>
<p>}</p>
<p>//Chunk logic here</p>
<p><strong>var</strong> positions = range.replace(<em>/bytes=/</em>,
"").split("-"); <strong>var</strong> start = parseInt(positions[0],
10);</p>
<p><strong>var</strong> total = stats.size;</p>
<p><strong>var</strong> end = positions[1] ? parseInt(positions[1], 10)
: total -1; <strong>var</strong> chunksize = (end - start) + 1;</p>
<p>res.writeHead(206, {</p>
<p>'Transfer-Encoding': 'chunked',</p>
<p>"Content-Range": "bytes " + start + "-" + end + "/" + total,</p>
<p>"Accept-Ranges": "bytes",</p>
<p>"Content-Length": chunksize,</p>
<p>"Content-Type": mime.lookup(req.params.filename)</p>
<p>});</p>
<p><strong>var</strong> stream = fs.createReadStream(movie, { start:
start, end: end, autoClose: <strong>true</strong> })</p>
<p>.on('end', <strong>function</strong> () {</p>
<p>console.log('Stream Done');</p>
<p>})</p>
<p>.on("error", <strong>function</strong> (err) {</p>
<p>res.end(err);</p>
<p>})</p>
<p>.pipe(res, { end: <strong>true</strong> });</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 205</p>
<p><span id="The_above_snippet_is_a_basic_out" class="anchor"></span>The
above snippet is a basic outline for how you would like to stream your
video to a client. The chunk logic depends on a variety of factors,
including network traffic and latency. It is important to balance chuck
size vs.</p>
<p>quantity.</p>
<p>Finally, the .pipe call lets node.js know to keep a connection open
with the server and to send additional chunks as</p>
<p>needed.</p>
<p>Section 65.2: Streaming Using fluent-mpeg</p>
<p>You can also use flent-ffmpeg to convert .mp4 files to .flv files, or
other types:</p>
<p>res.contentType('flv');</p>
<p><strong>var</strong> pathToMovie = './public/' +
req.params.filename;</p>
<p><strong>var</strong> proc = ffmpeg(pathToMovie)</p>
<p>.preset('flashvideo')</p>
<p>.on('end', <strong>function</strong> () {</p>
<p>console.log('Stream Done');</p>
<p>})</p>
<p>.on('error', <strong>function</strong> (err) {</p>
<p>console.log('an error happened: ' + err.message);</p>
<p>res.send(err.message);</p>
<p>})</p>
<p>.pipe(res, { end: <strong>true</strong> });</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 206</p>
<h2 id="chapter-66-nodejs-with-redis">Chapter 66: NodeJS with Redis</h2>
<p>Section 66.1: Getting Started</p>
<p>node_redis, as you may have guessed, is the <a
href="https://www.npmjs.com/package/redis">Redis client for Node.js</a>.
You can install it via npm using the following command.</p>
<p>npm <strong>install</strong> redis</p>
<p>Once you have installed node_redis module you are good to go. Let’s
create a simple file, app.js, and see how to</p>
<p>connect with Redis from Node.js.</p>
<p>app.js</p>
<p><strong>var</strong> redis = require('redis');</p>
<p>client = redis.createClient(); <em>//creates a new client</em></p>
<p>By default, redis.createClient() will use 127.0.0.1 and 6379 as the
hostname and port respectively. If you have a</p>
<p>different host/port you can supply them as following:</p>
<p><strong>var</strong> client = redis.createClient(port, host);</p>
<p>Now, you can perform some action once a connection has been
established. Basically, you just need to listen for connect events as
shown below.</p>
<p>client.on('connect', <strong>function</strong>() {</p>
<p>console.log('connected');</p>
<p>});</p>
<p>So, the following snippet goes into app.js:</p>
<p><strong>var</strong> redis = require('redis');</p>
<p><strong>var</strong> client = redis.createClient();</p>
<p>client.on('connect', <strong>function</strong>() {</p>
<p>console.log('connected');</p>
<p>});</p>
<p>Now, type node app in the terminal to run the app. Make sure your
Redis server is up and running before running</p>
<p>this snippet.</p>
<p>Section 66.2: Storing Key-Value Pairs</p>
<p>Now that you know how to connect with Redis from Node.js, let’s see
how to store key-value pairs in Redis storage.</p>
<p>Storing Strings</p>
<p>All the Redis commands are exposed as different functions on the
client object. To store a simple string use the following syntax:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 207</p>
<p>client.<strong>set</strong>('framework', 'AngularJS');</p>
<p>Or</p>
<p>client.<strong>set</strong>(['framework', 'AngularJS']);</p>
<p>The above snippets store a simple string AngularJS against the key
framework. You should note that both the</p>
<p>snippets do the same thing. The only difference is that the first one
passes a variable number of arguments while the later passes an args
array to client.<strong>set</strong>() function. You can also pass an
optional callback to get a notification</p>
<p>when the operation is complete:</p>
<p>client.<strong>set</strong>('framework', 'AngularJS',
<strong>function</strong>(err, reply) { console.log(reply);</p>
<p>});</p>
<p>If the operation failed for some reason, the err argument to the
callback represents the error. To retrieve the value of the key do the
following:</p>
<p>client.<strong>get</strong>('framework',
<strong>function</strong>(err, reply) {</p>
<p>console.log(reply);</p>
<p>});</p>
<p>client.<strong>get</strong>() lets you retrieve a key stored in
Redis. The value of the key can be accessed via the callback</p>
<p>argument reply. If the key doesn’t exist, the value of reply will be
empty.</p>
<p>Storing Hash</p>
<p>Many times storing simple values won’t solve your problem. You will
need to store hashes (objects) in Redis. For</p>
<p>that you can use hmset() function as following:</p>
<p>client.hmset('frameworks', 'javascript', 'AngularJS', 'css',
'Bootstrap', 'node', 'Express');</p>
<p>client.hgetall('frameworks', <strong>function</strong>(err, object)
{</p>
<p>console.log(object);</p>
<p>});</p>
<p>The above snippet stores a hash in Redis that maps each technology to
its framework. The first argument to hmset() is the name of the key.
Subsequent arguments represent key-value pairs. Similarly, hgetall() is
used to</p>
<p>retrieve the value of the key. If the key is found, the second
argument to the callback will contain the value which is an object.</p>
<p>Note that Redis doesn’t support nested objects. All the property
values in the object will be coerced into strings</p>
<p>before getting stored. You can also use the following syntax to store
objects in Redis:</p>
<p>client.hmset('frameworks', {</p>
<p>'javascript': 'AngularJS',</p>
<p>'css': 'Bootstrap',</p>
<p>'node': 'Express'</p>
<p>});</p>
<p>An optional callback can also be passed to know when the operation is
completed.</p>
<p>All the functions (commands) can be called with uppercase/lowercase
equivalents. For example, client.hmset()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 208</p>
<p><span id="and_client_HMSET___are_the_same" class="anchor"></span>and
client.HMSET() are the same. Storing Lists</p>
<p>If you want to store a list of items, you can use Redis lists. To
store a list use the following syntax:</p>
<p>client.rpush(['frameworks', 'angularjs', 'backbone'],
<strong>function</strong>(err, reply) {</p>
<p>console.log(reply); <em>//prints 2</em></p>
<p>});</p>
<p>The above snippet creates a list called frameworks and pushes two
elements to it. So, the length of the list is now</p>
<p>two. As you can see I have passed an args array to rpush. The first
item of the array represents the name of the key while the rest
represent the elements of the list. You can also use lpush() instead of
rpush() to push the elements</p>
<p>to the left.</p>
<p>To retrieve the elements of the list you can use the lrange()
function as following:</p>
<p>client.lrange('frameworks', 0,-1, <strong>function</strong>(err,
reply) {</p>
<p><em>console.log(reply);</em> // ['angularjs', 'backbone']</p>
<p>});</p>
<p>Just note that you get all the elements of the list by passing -1 as
the third argument to lrange(). If you want a subset of the list, you
should pass the end index here.</p>
<p>Storing Sets</p>
<p>Sets are similar to lists, but the difference is that they don’t
allow duplicates. So, if you don’t want any duplicate elements in your
list you can use a set. Here is how we can modify our previous snippet
to use a set instead of list.</p>
<p>client.sadd(['tags', 'angularjs', 'backbonejs', 'emberjs'],
<strong>function</strong>(err, reply) {</p>
<p>console.log(reply); <em>// 3</em></p>
<p>});</p>
<p>As you can see, the sadd() function creates a new set with the
specified elements. Here, the length of the set is</p>
<p>three. To retrieve the members of the set, use the smembers()
function as following:</p>
<p>client.smembers('tags', <strong>function</strong>(err, reply) {</p>
<p>console.log(reply);</p>
<p>});</p>
<p>This snippet will retrieve all the members of the set. Just note that
the order is not preserved while retrieving the members.</p>
<p>This was a list of the most important data structures found in every
Redis powered app. Apart from strings, lists,</p>
<p>sets, and hashes, you can store sorted sets, hyperLogLogs, and more
in Redis. If you want a complete list of</p>
<p>commands and data structures, visit the official Redis documentation.
Remember that almost every Redis command is exposed on the client object
offered by the node_redis module.</p>
<p>Section 66.3: Some more important operations supported by</p>
<p>node_redis</p>
<p>Checking the Existence of Keys</p>
<p>Sometimes you may need to check if a key already exists and proceed
accordingly. To do so you can use exists()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 209</p>
<p>function as shown below:</p>
<p>client.exists('key', <strong>function</strong>(err, reply) {</p>
<p><strong>if</strong> (reply === 1) {</p>
<p>console.log('exists');</p>
<p>} <strong>else</strong> {</p>
<p>console.log('doesn<strong>\'</strong>t exist');</p>
<p>}</p>
<p>});</p>
<p>Deleting and Expiring Keys</p>
<p>At times you will need to clear some keys and reinitialize them. To
clear the keys, you can use del command as</p>
<p>shown below:</p>
<p>client.del('frameworks', <strong>function</strong>(err, reply) {</p>
<p>console.log(reply);</p>
<p>});</p>
<p>You can also give an expiration time to an existing key as
following:</p>
<p>client.<strong>set</strong>('key1', 'val1');</p>
<p>client.expire('key1', 30);</p>
<p>The above snippet assigns an expiration time of 30 seconds to the key
key1.</p>
<p>Incrementing and Decrementing</p>
<p>Redis also supports incrementing and decrementing keys. To increment
a key use incr() function as shown below:</p>
<p>client.<strong>set</strong>('key1', 10, <strong>function</strong>()
{</p>
<p>client.incr('key1', <strong>function</strong>(err, reply) {</p>
<p>console.log(reply); <em>// 11</em></p>
<p>});</p>
<p>});</p>
<p>The incr() function increments a key value by 1. If you need to
increment by a different amount, you can use incrby() function.
Similarly, to decrement a key you can use the functions like decr() and
decrby().</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 210</p>
<h2 id="chapter-67-using-browserfiy-to-resolve">Chapter 67: Using
Browserfiy to resolve</h2>
<p>'required' error with browsers</p>
<p>Section 67.1: Example - file.js</p>
<p>In this example we have a file called <strong>file.js</strong>.</p>
<p>Let's assume that you have to parse an URL using JavaScript and
NodeJS querystring module.</p>
<p>To accomplish this all you have to do is to insert the following
statement in your file:</p>
<p><strong>const</strong> querystring = require('querystring');</p>
<p><strong>var</strong> ref =
querystring.parse("foo=bar&amp;abc=xyz&amp;abc=123");</p>
<p>What is this snippet doing?</p>
<p>Well, first, we create a querystring module which provides utilities
for parsing and formatting URL query strings. It can be accessed
using:</p>
<p><strong>const</strong> querystring = require('querystring');</p>
<p>Then, we parse a URL using the .parse() method. It parses a URL query
string (str) into a collection of key and value</p>
<p>pairs.</p>
<p>For example, the query string 'foo=bar&amp;abc=xyz&amp;abc=123' is
parsed into:</p>
<p>{ foo: 'bar', abc: ['xyz', '123'] }</p>
<p>Unfortunately, Browsers don't have the <em>require</em> method
defined, but Node.js does.</p>
<p>Install Browserfy</p>
<p>With Browserify you can write code that uses <em>require</em> in the
same way that you would use it in Node. So, how do you solve this? It's
simple.</p>
<p>1. First install node, which ships with npm. Then do:</p>
<p>npm install -g <strong>browserify</strong></p>
<p>2. Change into the directory in which your file.js is and Install our
<em>querystring</em> module with npm:</p>
<p>npm install <strong>querystring</strong></p>
<p><strong>Note:</strong> If you don't change in the specific directory
the command will fail because it can't find the file which contains</p>
<p>the module.</p>
<p>3. Now recursively bundle up all the required modules starting at
file.js into a single file called bundle.js (or</p>
<p>whatever you like to name it) with the <strong>browserify
command</strong>:</p>
<p><strong>browserify</strong> file.js -o bundle.js</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 211</p>
<p>Browserify parses the Abstract Syntax Tree for <em>require()</em>
calls to traverse the entire dependency graph of your</p>
<p>4. FinallyDrop a single tag into your html and you're done!</p>
<p>&lt;script <strong>src="bundle.js"</strong>&gt;&lt;/script&gt;</p>
<p>What happens is that you get a combination of your old .js file
(<strong>file.js</strong> that is) and your newly created
<strong>bundle.js</strong> file.</p>
<p>Those two files are merged into one single file.</p>
<p>Important</p>
<p>Please keep in mind that if you want to make any changes to your
file.js and will not affect the behaviour</p>
<p><strong>of your program.</strong> Your changes will only take effect
if you edit the newly created bundle.js</p>
<p>What does that mean?</p>
<p>This means that if you want to edit <strong>file.js</strong> for any
reasons, the changes will not have any effects. You really have to</p>
<p>edit <strong>bundle.js</strong> since it is a merge of
<strong>bundle.js</strong> and <strong>file.js</strong>.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 212</p>
<h2 id="chapter-68-node.js-and-mongodb.">Chapter 68: Node.JS and
MongoDB.</h2>
<p>Section 68.1: Connecting To a Database</p>
<p>To connect to a mongo database from node application we require
mongoose.</p>
<p>Installing Mongoose Go to the toot of your application and install
mongoose by</p>
<p>npm <strong>install</strong> mongoose</p>
<p>Next we connect to the database.</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p>//connect to the test database running on default mongod port of
localhost <em>mongoose.connect('mongodb://localhost/test');</em></p>
<p>//Connecting with custom credentials</p>
<p>mongoose.connect('mongodb://USER:PASSWORD@HOST:PORT/DATABASE');</p>
<p>//Using Pool Size to define the number of connections opening //Also
you can use a call back function for error handling
<em>mongoose.connect('mongodb://localhost:27017/consumers',</em></p>
<p>{server: { poolSize: 50 }},</p>
<p>function<strong>(err) {</strong></p>
<p><strong>if</strong>(err) {</p>
<p>console.log('error in this')</p>
<p>console.log(err);</p>
<p>// Do whatever to handle the error</p>
<p>} <strong>else</strong> {</p>
<p>console.log('Connected to the database');</p>
<p>}</p>
<p>});</p>
<p>Section 68.2: Creating New Collection</p>
<p>With Mongoose, everything is derived from a Schema. Lets create a
schema.</p>
<p><strong>var</strong> mongoose = require('mongoose');</p>
<p><strong>var</strong> Schema = mongoose.Schema;</p>
<p><strong>var</strong> AutoSchema = <strong>new</strong> Schema({</p>
<p>name : String,</p>
<p>countOf: Number,</p>
<p>});</p>
<p>// defining the document structure</p>
<p>// by default the collection created in the db would be the first
parameter we use (or the plural of it)</p>
<p>module.exports = mongoose.model('Auto', AutoSchema);</p>
<p>// we can over write it and define the collection name by specifying
that in the third parameters. <em>module.exports =
mongoose.model('Auto', AutoSchema, 'collectionName');</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 213</p>
<p><span id="___We_can_also_define_methods_in" class="anchor"></span>//
We can also define methods in the models.</p>
<p>AutoSchema.methods.speak = <strong>function</strong> () {</p>
<p><strong>var</strong> greeting = <strong>this</strong>.name</p>
<p>? "Hello this is " + <strong>this</strong>.name+ " and I have counts
of "+ <strong>this</strong>.countOf : "I don't have a name";</p>
<p>console.log(greeting);</p>
<p>}</p>
<p>mongoose.model('Auto', AutoSchema, 'collectionName');</p>
<p>Remember methods must be added to the schema before compiling it with
mongoose.model() like done above ..</p>
<p>Section 68.3: Inserting Documents</p>
<p>For inserting a new document in the collection, we create a object of
the schema.</p>
<p><strong>var</strong> Auto = require('models/auto')</p>
<p><strong>var</strong> autoObj = <strong>new</strong> Auto({</p>
<p>name: "NewName",</p>
<p>countOf: 10</p>
<p>});</p>
<p>We save it like the following</p>
<p>autoObj.save(<strong>function</strong>(err, insertedAuto) {</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p>insertedAuto.speak();</p>
<p>// output: Hello this is NewName and I have counts of 10</p>
<p>});</p>
<p>This will insert a new document in the collection</p>
<p>Section 68.4: Reading</p>
<p>Reading Data from the collection is very easy. Getting all data of
the collection.</p>
<p><strong>var</strong> Auto = require('models/auto')</p>
<p>Auto.find({}, <strong>function</strong> (err, autos) {</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p>// will return a json array of all the documents in the
collection</p>
<p>console.log(autos);</p>
<p>})</p>
<p>Reading data with a condition</p>
<p>Auto.find({countOf: {$gte: 5}}, <strong>function</strong> (err,
autos) {</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p>// will return a json array of all the documents in the collection
whose count is greater than</p>
<p>5</p>
<p>console.log(autos);</p>
<p>})</p>
<p>You can also specify the second parameter as object of what all
fields you need</p>
<p>Auto.find({},{name:1}, <strong>function</strong> (err, autos) {</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p>// will return a json array of name field of all the documents in the
collection</p>
<p>console.log(autos);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 214</p>
<p><span id="_15" class="anchor"></span>})</p>
<p>Finding one document in a collection.</p>
<p>Auto.findOne({name:"newName"}, <strong>function</strong> (err, auto)
{</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p>//will return the first object of the document whose name is
"newName"</p>
<p>console.log(auto);</p>
<p>})</p>
<p>Finding one document in a collection by id .</p>
<p>Auto.findById(123, <strong>function</strong> (err, auto) {</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p>//will return the first json object of the document whose id is
123</p>
<p>console.log(auto);</p>
<p>})</p>
<p>Section 68.5: Updating</p>
<p>For updating collections and documents we can use any of these
methods:</p>
<p>Methods</p>
<p>update()</p>
<p>updateOne()</p>
<p>updateMany()</p>
<p>replaceOne()</p>
<p>Update()</p>
<p>The update() method modifies one or many documents (update
parameters)</p>
<p>db.lights.update(</p>
<p>{ room: "Bedroom" },</p>
<p>{ status: "On" }</p>
<p>)</p>
<p>This operation searches the 'lights' collection for a document where
room is <strong>Bedroom</strong> <em>(1st parameter)</em>. It then</p>
<p>updates the matching documents status property to <strong>On</strong>
<em>(2nd parameter)</em> and returns a WriteResult object that</p>
<p>looks like this:</p>
<p>{ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 }</p>
<p>UpdateOne</p>
<p>The UpdateOne() method modifies ONE document (update parameters)</p>
<p>db.countries.update(</p>
<p>{ country: "Sweden" },</p>
<p>{ capital: "Stockholm" }</p>
<p>)</p>
<p>This operation searches the 'countries' collection for a document
where country is <strong>Sweden</strong> <em>(1st parameter)</em>. It
then</p>
<p>updates the matching documents property capital to
<strong>Stockholm</strong> <em>(2nd parameter)</em> and returns a
WriteResult object</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 215</p>
<p><span id="that_looks_like_this" class="anchor"></span>that looks like
this:</p>
<p>{ "acknowledged" : <strong>true</strong>, "matchedCount" : 1,
"modifiedCount" : 1 }</p>
<p>UpdateMany</p>
<p>The UpdateMany() method modifies multible documents (update
parameters)</p>
<p>db.food.updateMany(</p>
<p>{ sold: { $lt: 10 } },</p>
<p>{ $set: { sold: 55 } }</p>
<p>)</p>
<p>This operation updates all documents <em>(in a 'food'
collection)</em> where sold is <strong>lesser than 10</strong> *(1st
parameter) by setting</p>
<p>sold to <strong>55</strong>. It then returns a WriteResult object
that looks like this:</p>
<p>{ "acknowledged" : <strong>true</strong>, "matchedCount" : a,
"modifiedCount" : b }</p>
<p>a = Number of matched documents</p>
<p>b = Number of modified documents</p>
<p>ReplaceOne</p>
<p>Replaces the first matching document (replacement document)</p>
<p>This example collection called <strong>countries</strong> contains 3
documents:</p>
<p>{ "_id" : 1, "country" : "Sweden" }</p>
<p>{ "_id" : 2, "country" : "Norway" }</p>
<p>{ "_id" : 3, "country" : "Spain" }</p>
<p>The following operation replaces the document { country: "Spain" }
with document { country: "Finland" }</p>
<p>db.countries.replaceOne(</p>
<p>{ country: "Spain" },</p>
<p>{ country: "Finland" }</p>
<p>)</p>
<p>And returns:</p>
<p>{ "acknowledged" : <strong>true</strong>, "matchedCount" : 1,
"modifiedCount" : 1 }</p>
<p>The example collection <strong>countries</strong> now contains:</p>
<p>{ "_id" : 1, "country" : "Sweden" }</p>
<p>{ "_id" : 2, "country" : "Norway" }</p>
<p>{ "_id" : 3, "country" : "Finland" }</p>
<p>Section 68.6: Deleting</p>
<p>Deleting documents from a collection in mongoose is done in the
following manner.</p>
<p>Auto.remove({_id:123}, <strong>function</strong>(err, result){</p>
<p><strong>if</strong> (err) <strong>return</strong>
console.error(err);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 216</p>
<p><em>console.log(result);</em> // this will specify the mongo default
delete result. <em>});</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 217</p>
<h2 id="chapter-69-passport-integration">Chapter 69: Passport
integration</h2>
<p>Section 69.1: Local authentication</p>
<p>The <strong>passport-local</strong> module is used to implement a
local authentication.</p>
<p>This module lets you authenticate using a username and password in
your Node.js applications.</p>
<p>Registering the user :</p>
<p><strong>const</strong> passport = require('passport');</p>
<p><strong>const</strong> LocalStrategy =
require('passport-local').Strategy;</p>
<p>// A named strategy is used since two local strategy are used : //
one for the registration and the other to sign-in
<em>passport.use('localSignup', <strong>new</strong>
LocalStrategy({</em></p>
<p>// Overriding defaults expected parameters,</p>
<p>// which are 'username' and 'password'</p>
<p>usernameField: 'email',</p>
<p>passwordField: 'password',</p>
<p><em>passReqToCallback: <strong>true</strong></em> // allows us to
pass back the entire request to the callback . <em>},</em></p>
<p><strong>function</strong>(req, email, password, next) {</p>
<p>// Check in database if user is already registered</p>
<p>findUserByEmail(email, <strong>function</strong>(user) {</p>
<p>// If email already exists, abort registration process and // pass
'false' to the callback</p>
<p><strong>if</strong> (user) <strong>return</strong>
next(<strong>null</strong>, <strong>false</strong>);</p>
<p>// Else, we create the user</p>
<p>else <strong>{</strong></p>
<p>// Password must be hashed !</p>
<p><strong>let</strong> newUser = createUser(email, password);</p>
<p>newUser.save(<strong>function</strong>() {</p>
<p>// Pass the user to the callback</p>
<p><strong>return</strong> next(<strong>null</strong>, newUser);</p>
<p>});</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>Logging in the user :</p>
<p><strong>const</strong> passport = require('passport');</p>
<p><strong>const</strong> LocalStrategy =
require('passport-local').Strategy;</p>
<p>passport.use('localSignin', <strong>new</strong> LocalStrategy({</p>
<p>usernameField : 'email',</p>
<p>passwordField : 'password',</p>
<p>},</p>
<p><strong>function</strong>(email, password, next) {</p>
<p>// Find the user</p>
<p>findUserByEmail(email, <strong>function</strong>(user) {</p>
<p>// If user is not found, abort signing in process</p>
<p>// Custom messages can be provided in the verify callback // to give
the user more details concerning the failed authentication
<em><strong>if</strong> (!user)</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 218</p>
<p><span id="return_next_null__false___messag"
class="anchor"></span><strong>return</strong>
next(<strong>null</strong>, <strong>false</strong>, {message: 'This
e-mail address is not associated with any</p>
<p>account.'});</p>
<p>// Else, we check if password is valid</p>
<p>else <strong>{</strong></p>
<p>// If password is not correct, abort signing in process
<em><strong>if</strong> (!isPasswordValid(password))
<strong>return</strong> next(<strong>null</strong>,
<strong>false</strong>);</em> // Else, pass the user to callback</p>
<p>else return <strong>next(</strong>null<strong>, user);</strong></p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>Creating routes :</p>
<p>// ...</p>
<p>app.use(passport.initialize());</p>
<p>app.use(passport.session());</p>
<p>// Sign-in route</p>
<p>// Passport strategies are middlewares</p>
<p>app.post('/login', passport.authenticate('localSignin', {</p>
<p>successRedirect: '/me',</p>
<p>failureRedirect: '/login'</p>
<p>});</p>
<p>// Sign-up route</p>
<p>app.post('/register', passport.authenticate('localSignup', {</p>
<p>successRedirect: '/',</p>
<p>failureRedirect: '/signup'</p>
<p>});</p>
<p>// Call req.logout() to log out</p>
<p>app.<strong>get</strong>('/logout', <strong>function</strong>(req,
res) {</p>
<p>req.logout();</p>
<p>res.redirect('/');</p>
<p>});</p>
<p>app.listen(3000);</p>
<p>Section 69.2: Getting started</p>
<p><strong>Passport</strong> must be initialized using
passport.initialize() middleware. To use login sessions,
passport.session()</p>
<p>middleware is required.</p>
<p>Note that passport.serialize() and passport.deserializeUser() methods
must be defined. <strong>Passport</strong> will</p>
<p>serialize and deserialize user instances to and from the session</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> session = require('express-session');</p>
<p><strong>const</strong> passport = require('passport');</p>
<p><strong>const</strong> cookieParser = require('cookie-parser');</p>
<p><strong>const</strong> app = express();</p>
<p>// Required to read cookies</p>
<p>app.use(cookieParser());</p>
<p>passport.serializeUser(<strong>function</strong>(user, next) {</p>
<p>// Serialize the user in the session</p>
<p>next(<strong>null</strong>, user);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 219</p>
<p><span id="passport_deserializeUser_functio"
class="anchor"></span>passport.deserializeUser(<strong>function</strong>(user,
next) {</p>
<p>// Use the previously serialized user</p>
<p>next(<strong>null</strong>, user);</p>
<p>});</p>
<p>// Configuring express-session middleware</p>
<p>app.use(session({</p>
<p>secret: 'The cake is a lie',</p>
<p>resave: <strong>true</strong>,</p>
<p>saveUninitialized: <strong>true</strong></p>
<p>}));</p>
<p>// Initializing passport</p>
<p>app.use(passport.initialize());</p>
<p>app.use(passport.session());</p>
<p>// Starting express server on port 3000</p>
<p>app.listen(3000);</p>
<p>Section 69.3: Facebook authentication</p>
<p>The <strong>passport-facebook</strong> module is used to implement a
<strong>Facebook</strong> authentication. In this example, if the user
does</p>
<p>not exist on sign-in, he is created.</p>
<p>Implementing strategy :</p>
<p><strong>const</strong> passport = require('passport');</p>
<p><strong>const</strong> FacebookStrategy =
require('passport-facebook').Strategy;</p>
<p>// Strategy is named 'facebook' by default</p>
<p>passport.use({</p>
<p>clientID: 'yourclientid',</p>
<p>clientSecret: 'yourclientsecret',</p>
<p>callbackURL: '/auth/facebook/callback'</p>
<p>},</p>
<p>// Facebook will send a token and user's profile</p>
<p><strong>function</strong>(token, refreshToken, profile, next) {</p>
<p>// Check in database if user is already registered</p>
<p>findUserByFacebookId(profile.id, <strong>function</strong>(user)
{</p>
<p>// If user exists, returns his data to callback</p>
<p><strong>if</strong> (user) <strong>return</strong>
next(<strong>null</strong>, user);</p>
<p>// Else, we create the user</p>
<p>else <strong>{</strong></p>
<p><strong>let</strong> newUser = createUserFromFacebook(profile,
token);</p>
<p>newUser.save(<strong>function</strong>() {</p>
<p>// Pass the user to the callback</p>
<p><strong>return</strong> next(<strong>null</strong>, newUser);</p>
<p>});</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>Creating routes :</p>
<p>// ...</p>
<p>app.use(passport.initialize());</p>
<p>app.use(passport.session());</p>
<p>// Authentication route</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 220</p>
<p><span id="app_get___auth_facebook___passpo"
class="anchor"></span>app.<strong>get</strong>('/auth/facebook',
passport.authenticate('facebook', {</p>
<p>// Ask Facebook for more permissions</p>
<p>scope : 'email'</p>
<p>}));</p>
<p>// Called after Facebook has authenticated the user
<em>app.<strong>get</strong>('/auth/facebook/callback',</em></p>
<p>passport.authenticate('facebook', {</p>
<p>successRedirect : '/me',</p>
<p>failureRedirect : '/'</p>
<p>}));</p>
<p>//...</p>
<p>app.listen(3000);</p>
<p>Section 69.4: Simple Username-Password Authentication</p>
<p>In your routes/index.js</p>
<p>Here user is the model for the userSchema</p>
<p>router.post('/login', <strong>function</strong>(req, res, next) {</p>
<p><strong>if</strong> (!req.body.username || !req.body.password) {</p>
<p><strong>return</strong> res.status(400).json({</p>
<p>message: 'Please fill out all fields'</p>
<p>});</p>
<p>}</p>
<p>passport.authenticate('local', <strong>function</strong>(err, user,
info) {</p>
<p><strong>if</strong> (err) {</p>
<p>console.log("ERROR : " + err);</p>
<p><strong>return</strong> next(err);</p>
<p>}</p>
<p><strong>if</strong>(user) (</p>
<p>console.log("User Exists!")</p>
<p>//All the data of the user can be accessed by user.x</p>
<p>res.json({"success" : <strong>true</strong>});</p>
<p>return<strong>;</strong></p>
<p>} <strong>else</strong> {</p>
<p>res.json({"success" : <strong>false</strong>});</p>
<p>console.log("Error" + errorResponse());</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>})(req, res, next);</p>
<p>});</p>
<p>Section 69.5: Google Passport authentication</p>
<p>We have simple module available in npm for goggle authetication name
<strong>passport-google-oauth20</strong></p>
<p>Consider the following example In this example have created a folder
namely config having the passport.js and</p>
<p>google.js file in the root directory. In your app.js include the
following</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> session = require('express-session');</p>
<p><strong>var</strong> passport = require('./config/passport'); <em>//
path where the passport file placed</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 221</p>
<p><strong>var</strong> app = express();</p>
<p>passport(app);</p>
<p>// other code to initailize the server , error handle</p>
<p>In the passport.js file in the config folder include the following
code</p>
<p><strong>var</strong> passport = require ('passport'),</p>
<p>google = require('./google'),</p>
<p>User = require('./../model/user'); <em>// User is the mongoose
model</em></p>
<p>module.exports = <strong>function</strong>(app){</p>
<p>app.use(passport.initialize());</p>
<p>app.use(passport.session());</p>
<p>passport.serializeUser(<strong>function</strong>(user, done){</p>
<p>done(<strong>null</strong>, user);</p>
<p>});</p>
<p>passport.deserializeUser(<strong>function</strong> (user, done) {</p>
<p>done(<strong>null</strong>, user);</p>
<p>});</p>
<p>google();</p>
<p>};</p>
<p>In the google.js file in the same config folder include following</p>
<p><strong>var</strong> passport = require('passport'),</p>
<p>GoogleStrategy = require('passport-google-oauth20').Strategy, User =
require('./../model/user');</p>
<p>module.exports = <strong>function</strong> () {</p>
<p>passport.use(<strong>new</strong> GoogleStrategy({</p>
<p>clientID: 'CLIENT ID',</p>
<p>clientSecret: 'CLIENT SECRET',</p>
<p>callbackURL: "http://localhost:3000/auth/google/callback"</p>
<p>},</p>
<p><strong>function</strong>(accessToken, refreshToken, profile, cb)
{</p>
<p>User.findOne({ googleId : profile.id }, <strong>function</strong>
(err, user) {</p>
<p><strong>if</strong>(err){</p>
<p><strong>return</strong> cb(err, <strong>false</strong>, {message :
err});</p>
<p><strong>}</strong>else <strong>{</strong></p>
<p><strong>if</strong> (user != '' &amp;&amp; user !=
<strong>null</strong>) {</p>
<p><strong>return</strong> cb(<strong>null</strong>, user, {message :
"User "});</p>
<p>} <strong>else</strong> {</p>
<p><strong>var</strong> username = profile.displayName.split(' ');</p>
<p><strong>var</strong> userData = <strong>new</strong> User({</p>
<p>name : profile.displayName,</p>
<p>username : username[0],</p>
<p>password : username[0],</p>
<p>facebookId : '',</p>
<p>googleId : profile.id,</p>
<p>});</p>
<p>// send email to user just in case required to send the newly created
// credentails to user for future login without using google login</p>
<p>userData.save(<strong>function</strong> (err, newuser) {</p>
<p><strong>if</strong> (err) {</p>
<p><strong>return</strong> cb(<strong>null</strong>,
<strong>false</strong>, {message : err + " !!! Please try again"});</p>
<p><strong>}</strong>else<strong>{</strong></p>
<p><strong>return</strong> cb(<strong>null</strong>, newuser);</p>
<p>}</p>
<p>});</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 222</p>
<p>});</p>
<p>}</p>
<p>));</p>
<p>};</p>
<p>Here in this example, if user is not in DB then creating a new user
in DB for local reference using the field name</p>
<p>googleId in user model.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 223</p>
<h2 id="chapter-70-dependency-injection">Chapter 70: Dependency
Injection</h2>
<p>Section 70.1: Why Use Dependency Injection</p>
<p><strong>1.</strong> Fast Development process</p>
<p><strong>2.</strong> Decoupling</p>
<p><strong>3.</strong> Unit test writing</p>
<p>Fast Development process</p>
<p>When using dependency injection node developer can faster their
development proceess because after DI there is less code conflict and
easy to manage all module.</p>
<p>Decoupling</p>
<p>Modules becomes less couple then it is easy to maintain.</p>
<p>Unit test writing</p>
<p>Hardcoded dependencies can pass them into the module then easy to
write unit test for each module.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 224</p>
<h2 id="chapter-71-nodejs-beginner-guide">Chapter 71: NodeJS Beginner
Guide</h2>
<p>Section 71.1: Hello World !</p>
<p>Place the following code into a file name helloworld.js</p>
<p>console.log("Hello World");</p>
<p>Save the file, and execute it through Node.js:</p>
<p>node helloworld.js</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 225</p>
<h2 id="chapter-72-use-cases-of-node.js">Chapter 72: Use Cases of
Node.js</h2>
<p>Section 72.1: HTTP server</p>
<p><strong>const</strong> http = require('http');</p>
<p>console.log('Starting server...');</p>
<p><strong>var</strong> config = {</p>
<p>port: 80,</p>
<p>contentType: 'application/json; charset=utf-8'</p>
<p>};</p>
<p>// JSON-API server on port 80</p>
<p><strong>var</strong> server = http.createServer();</p>
<p>server.listen(config.port);</p>
<p>server.on('error', (err) =&gt; {</p>
<p><strong>if</strong> (err.code == 'EADDRINUSE') console.error('Port '+
config.port +' is already in use'); <strong>else</strong>
console.error(err.message);</p>
<p>});</p>
<p>server.on('request', (request, res) =&gt; {</p>
<p><strong>var</strong> remoteAddress =
request.headers['x-forwarded-for'] || request.connection.remoteAddress;
<em>//</em></p>
<p>Client address</p>
<p>console.log(remoteAddress +' '+ request.method +' '+
request.url);</p>
<p><strong>var</strong> out = {};</p>
<p>// Here you can change output according to `request.url`</p>
<p>out.test = request.url;</p>
<p>res.writeHead(200, {</p>
<p>'Content-Type': config.contentType</p>
<p>});</p>
<p>res.end(JSON.stringify(out));</p>
<p>});</p>
<p>server.on('listening', () =&gt; {</p>
<p>c.info('Server is available: http://localhost:'+ config.port);
});</p>
<p>Section 72.2: Console with command prompt</p>
<p><strong>const</strong> process = require('process');</p>
<p><strong>const</strong> rl =
require('readline').createInterface(process.stdin, process.stdout);</p>
<p>rl.pause();</p>
<p>console.log('Something long is happening here...');</p>
<p><strong>var</strong> cliConfig = {</p>
<p>promptPrefix: ' &gt; '</p>
<p>}</p>
<p>/*</p>
<p>Commands recognition</p>
<p>BEGIN</p>
<p>*/</p>
<p><strong>var</strong> commands = {</p>
<p><em>eval: <strong>function</strong>(arg) {</em> // Try typing in
console: eval 2 * 10 ^ 3 + 2 ^ 4</p>
<p>arg = arg.join(' ');</p>
<p><strong>try</strong> { console.log(eval(arg)); }</p>
<p><strong>catch</strong> (e) { console.log(e); }</p>
<p>},</p>
<p>exit: <strong>function</strong>(arg) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 226</p>
<p>process.exit();</p>
<p>}</p>
<p>};</p>
<p>rl.on('line', (str) =&gt; {</p>
<p>rl.pause();</p>
<p><em><strong>var</strong> arg =
str.trim().match(</em>/([^"]+)|("(?:[^"\\]|\\.)+")/g<em>);</em> //
Applying regular expression for</p>
<p>removing all spaces except for what between double quotes:
http://stackoverflow.com/a/14540319/2396907</p>
<p><strong>if</strong> (arg) {</p>
<p><strong>for</strong> (<strong>let</strong> n <strong>in</strong> arg)
{</p>
<p>arg[n] = arg[n].replace(<em>/^\"|\"$/g</em>, '');</p>
<p>}</p>
<p><strong>var</strong> commandName = arg[0];</p>
<p><strong>var</strong> command = commands[commandName];</p>
<p><strong>if</strong> (command) {</p>
<p>arg.shift();</p>
<p>command(arg);</p>
<p>}</p>
<p><strong>else</strong> console.log('Command "'+ commandName +'"
doesn<strong>\'</strong>t exist');</p>
<p>}</p>
<p>rl.prompt();</p>
<p>});</p>
<p>/*</p>
<p>END OF</p>
<p>Commands recognition</p>
<p>*/</p>
<p>rl.setPrompt(cliConfig.promptPrefix);</p>
<p>rl.prompt();</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 227</p>
<h2 id="chapter-73-sequelize.js">Chapter 73: Sequelize.js</h2>
<p>Section 73.1: Defining Models</p>
<p>There are two ways to define models in sequelize; with
sequelize.define(...), or sequelize.import(...). Both functions return a
sequelize model object.</p>
<p>1. sequelize.define(modelName, attributes, [options])</p>
<p>This is the way to go if you'd like to define all your models in one
file, or if you want to have extra control of your model definition.</p>
<p>/* Initialize Sequelize */</p>
<p><strong>const</strong> config = {</p>
<p>username: "database username",</p>
<p>password: "database password",</p>
<p>database: "database name",</p>
<p>host: "database's host URL",</p>
<p><em>dialect: "mysql"</em> // Other options are postgres, sqlite,
mariadb and mssql. <em>}</em></p>
<p><strong>var</strong> Sequelize = require("sequelize");</p>
<p><strong>var</strong> sequelize = <strong>new</strong>
Sequelize(config);</p>
<p>/* Define Models */</p>
<p>sequelize.define("MyModel", {</p>
<p>name: Sequelize.STRING,</p>
<p>comment: Sequelize.TEXT,</p>
<p>date: {</p>
<p>type: Sequelize.DATE,</p>
<p>allowNull: <strong>false</strong></p>
<p>}</p>
<p>});</p>
<p>For the documentation and more examples, check out the <a
href="https://doclets.io/sequelize/sequelize/master#dl-Sequelize-define">doclets
documentation</a>, or <a
href="http://docs.sequelizejs.com/en/v3/docs/models-definition/">sequelize.com's</a></p>
<p><a
href="http://docs.sequelizejs.com/en/v3/docs/models-definition/">documentation.</a></p>
<p>2. sequelize.import(path)</p>
<p>If your model definitions are broken into a file for each, then
import is your friend. In the file where you initialize Sequelize, you
need to call import like so:</p>
<p>/* Initialize Sequelize */</p>
<p>// Check previous code snippet for initialization</p>
<p>/* Define Models */</p>
<p>sequelize.import("./models/my_model.js"); <em>// The path could be
relative or absolute</em></p>
<p>Then in your model definition files, your code will look something
like this:</p>
<p>module.exports = <strong>function</strong>(sequelize, DataTypes)
{</p>
<p><strong>return</strong> sequelize.define("MyModel", {</p>
<p>name: DataTypes.STRING,</p>
<p>comment: DataTypes.TEXT,</p>
<p>date: {</p>
<p>type: DataTypes.DATE,</p>
<p>allowNull: <strong>false</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 228</p>
<p><span id="_17" class="anchor"></span>}</p>
<p>});</p>
<p>};</p>
<p>For more information on how to use import, check out sequelize's <a
href="https://github.com/sequelize/express-example/tree/master/models">express
example on GitHub</a>.</p>
<p>Section 73.2: Installation</p>
<p>Make sure that you first have Node.js and npm installed. Then install
sequelize.js with npm</p>
<p>npm <strong>install</strong>--save sequelize</p>
<p>You will also need to install supported database Node.js modules. You
only need to install the one you are using</p>
<p>For MYSQL and Mariadb</p>
<p>npm <strong>install</strong>--save mysql</p>
<p>For PostgreSQL</p>
<p>npm <strong>install</strong>--save pg pg-hstore</p>
<p>For SQLite</p>
<p>npm <strong>install</strong>--save sqlite</p>
<p>For MSSQL</p>
<p>npm <strong>install</strong>--save tedious</p>
<p>Once you have you set up installed you can include and create a new
Sequalize instance like so.</p>
<p>ES5 syntax</p>
<p><strong>var</strong> Sequelize = require('sequelize');</p>
<p><strong>var</strong> sequelize = <strong>new</strong>
Sequelize('database', 'username', 'password');</p>
<p>ES6 stage-0 Babel syntax</p>
<p>import Sequelize from 'sequelize';</p>
<p><strong>const</strong> sequelize = <strong>new</strong>
Sequelize('database', 'username', 'password');</p>
<p>You now have an instance of sequelize available. You could if you so
feel inclined call it a different name such as</p>
<p><strong>var</strong> db = <strong>new</strong> Sequelize('database',
'username', 'password');</p>
<p>or</p>
<p><strong>var</strong> database = <strong>new</strong>
Sequelize('database', 'username', 'password');</p>
<p>that part is your prerogative. Once you have this installed you can
use it inside of your application as per the API</p>
<p>documentation <a
href="http://docs.sequelizejs.com/en/v3/api/sequelize/">http://docs.sequelizejs.com/en/v3/api/sequelize/</a></p>
<p>Your next step after install would be to <a
href="http://docs.sequelizejs.com/en/v3/docs/getting-started/#your-first-model">set
up your own model</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 229</p>
<h2 id="chapter-74-postgresql-integration">Chapter 74: PostgreSQL
integration</h2>
<p>Section 74.1: Connect To PostgreSQL</p>
<p>Using PostgreSQLnpm module.</p>
<p>install dependency from npm</p>
<p>npm <strong>install</strong> pg --save</p>
<p>Now you have to create a PostgreSQL connection, which you can later
query.</p>
<p>Assume you Database_Name = students, Host = localhost and DB_User=
postgres</p>
<p><strong>var</strong> pg = require("pg")</p>
<p><strong>var</strong> connectionString =
"pg://postgres:postgres@localhost:5432/students"; <strong>var</strong>
client = <strong>new</strong> pg.Client(connectionString);</p>
<p>client.connect();</p>
<p>Section 74.2: Query with Connection Object</p>
<p>If you want to use connection object for query database you can use
this sample code.</p>
<p><strong>var</strong> queryString = "SELECT name, age FROM students "
; <strong>var</strong> query = client.query(queryString);</p>
<p>query.on("row", (row, result)=&gt; {</p>
<p>result.addRow(row);</p>
<p>});</p>
<p>query.on("end", <strong>function</strong> (result) {</p>
<p>//LOGIC</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 230</p>
<h2 id="chapter-75-mysql-integration">Chapter 75: MySQL integration</h2>
<p>In this topic you will learn how to integrate with Node.js using
MYSQL database management tool. You will learn</p>
<p>various ways to connect and interact with data residing in mysql
using a nodejs program and script.</p>
<p>Section 75.1: Connect to MySQL</p>
<p><a href="https://github.com/mysqljs/mysql">One of the easiest ways to
connect to MySQL is by using mysql module. This module handles the
connection</a></p>
<p>between Node.js app and MySQL server. You can install it like any
other module:</p>
<p>npm <strong>install</strong>--save mysql</p>
<p>Now you have to create a mysql connection, which you can later
query.</p>
<p><strong>const</strong> mysql = require('mysql');</p>
<p><strong>const</strong> connection = mysql.createConnection({</p>
<p>host : 'localhost',</p>
<p>user : 'me',</p>
<p>password : 'secret',</p>
<p>database : 'database_schema'</p>
<p>});</p>
<p>connection.connect();</p>
<p>// Execute some query statements</p>
<p>// I.e. SELECT * FROM FOO</p>
<p>connection.end();</p>
<p>In the next example you will learn how to query the connection
object.</p>
<p>Section 75.2: Using a connection pool</p>
<p>a. Running multiple queries at same time</p>
<p>All queries in MySQL connection are done one after another. It means
that if you want to do 10 queries and each query takes 2 seconds then it
will take 20 seconds to complete whole execution. The solution is to
create 10</p>
<p>connection and run each query in a different connection. This can be
done automatically using connection pool</p>
<p><strong>var</strong> pool = mysql.createPool({</p>
<p>connectionLimit : 10,</p>
<p>host : 'example.org',</p>
<p>user : 'bobby',</p>
<p>password : 'pass',</p>
<p>database : 'schema'</p>
<p>});</p>
<p><strong>for</strong>(<strong>var</strong> i=0;i&lt;10;i++){</p>
<p>pool.query('SELECT ` as example', <strong>function</strong>(err,
rows, fields) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log(rows[0].example); <em>//Show 1</em></p>
<p>});</p>
<p>}</p>
<p>It will run all the 10 queries in parallel.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 231</p>
<p><span id="When_you_use_pool_you_don_t_need"
class="anchor"></span>When you use pool you don't need the connection
anymore. You can query directly the pool. MySQL module will search for
the next free connection to execute your query.</p>
<p>b. Achieving multi-tenancy on database server with different
databases hosted on it.</p>
<p>Multitenancy is a common requirement of enterprise application
nowadays and creating connection pool for each database in database
server is not recommended. so, what we can do instead is create
connection pool with</p>
<p>database server and then switch them between databases hosted on
database server on demand.</p>
<p>Suppose our application has different databases for each firm hosted
on database server. We will connect to</p>
<p>respective firm database when user hits the application. Here is the
example on how to do that:</p>
<p><strong>var</strong> pool = mysql.createPool({</p>
<p>connectionLimit : 10,</p>
<p>host : 'example.org',</p>
<p>user : 'bobby',</p>
<p>password : 'pass'</p>
<p>});</p>
<p>pool.getConnection(<strong>function</strong>(err, connection){</p>
<p><strong>if</strong>(err){</p>
<p><strong>return</strong> cb(err);</p>
<p>}</p>
<p>connection.changeUser({database : "firm1"});</p>
<p>connection.query("SELECT * from history",
<strong>function</strong>(err, data){</p>
<p>connection.release();</p>
<p>cb(err, data);</p>
<p>});</p>
<p>});</p>
<p>Let me break down the example:</p>
<p>When defining pool configuration i did not gave the database name but
only gave database server i.e</p>
<p>{</p>
<p>connectionLimit : 10,</p>
<p>host : 'example.org',</p>
<p>user : 'bobby',</p>
<p>password : 'pass'</p>
<p>}</p>
<p>so when we want to use the specific database on database server, we
ask the connection to hit database by using:</p>
<p>connection.changeUser({database : "firm1"});</p>
<p>you can refer the official documentation <a
href="https://github.com/mysqljs/mysql#switching-users-and-altering-connection-state">here</a></p>
<p>Section 75.3: Query a connection object with parameters</p>
<p>When you want to use user generated content in the SQL, it with done
with parameters. For example for searching</p>
<p>user with the name aminadav you should do:</p>
<p><strong>var</strong> username = 'aminadav';</p>
<p><strong>var</strong> querystring = 'SELECT name, email from users
where name = ?'; connection.query(querystring, [username],
<strong>function</strong>(err, rows, fields) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p><strong>if</strong> (rows.length) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 232</p>
<p><span id="rows_forEach_function_row"
class="anchor"></span>rows.forEach(<strong>function</strong>(row) {</p>
<p>console.log(row.name, 'email address is', row.email);</p>
<p>});</p>
<p>} <strong>else</strong> {</p>
<p>console.log('There were no results.');</p>
<p>}</p>
<p>});</p>
<p>Section 75.4: Query a connection object without parameters</p>
<p>You send the query as a string and in response callback with the
answer is received. The callback gives you error, array of rows and
fields. Each row contains all the column of the returned table. Here is
a snippet for the following</p>
<p>explanation.</p>
<p>connection.query('SELECT name,email from users',
<strong>function</strong>(err, rows, fields) {</p>
<p><strong>if</strong> (err) <strong>throw</strong> err;</p>
<p>console.log('There are:', rows.length,' users'); console.log('First
user name is:',rows[0].name)</p>
<p>});</p>
<p>Section 75.5: Run a number of queries with a single</p>
<p>connection from a pool</p>
<p>There may be situations where you have setup a pool of MySQL
connections, but you have a number of queries you</p>
<p>would like to run in sequence:</p>
<p>SELECT 1; SELECT 2;</p>
<p>You <em>could</em> just run then using pool.query as seen elsewhere,
however if you only have one free connection in the</p>
<p>pool you must wait until a connection becomes available before you
can run the second query.</p>
<p>You can, however, retain an active connection from the pool and run
as many queries as you would like using a</p>
<p>single connection using pool.getConnection:</p>
<p>pool.getConnection(function (err, conn) { if (err) return
callback(err); conn.query('SELECT 1 AS seq', function (err,</p>
<p>rows) { if (err) throw err; conn.query('SELECT 2 AS seq', function
(err, rows) { if (err) throw err; conn.release(); callback(); }); });
});</p>
<p><strong>Note:</strong> You must remember to release the connection,
otherwise there is one less MySQL connection available to</p>
<p>the rest of the pool!</p>
<p><a href="https://www.npmjs.com/package/mysql#pooling-connections">For
more information on pooling MySQL connections check out the MySQL
docs.</a></p>
<p>Section 75.6: Export Connection Pool</p>
<p>// db.js</p>
<p><strong>const</strong> mysql = require('mysql');</p>
<p><strong>const</strong> pool = mysql.createPool({</p>
<p>connectionLimit : 10,</p>
<p>host : 'example.org',</p>
<p>user : 'bob',</p>
<p>password : 'secret',</p>
<p>database : 'my_db'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 233</p>
<p><span id="_18" class="anchor"></span>});</p>
<p>module.export = {</p>
<p>getConnection: (callback) =&gt; {</p>
<p><strong>return</strong> pool.getConnection(callback);</p>
<p>}</p>
<p>}</p>
<p>// app.js</p>
<p><strong>const</strong> db = require('./db');</p>
<p>db.getConnection((err, conn) =&gt; {</p>
<p>conn.query('SELECT something from sometable', (error, results,
fields) =&gt; {</p>
<p>// get the results</p>
<p>conn.release();</p>
<p>});</p>
<p>});</p>
<p>Section 75.7: Return the query when an error occurs</p>
<p>You can attach the query executed to your err object when an error
occurs:</p>
<p><strong>var</strong> q = mysql.query('SELECT `name` FROM `pokedex`
WHERE `id` = ?', [ 25 ], <strong>function</strong> (err, result) {</p>
<p><strong>if</strong> (err) {</p>
<p>// Table 'test.pokedex' doesn't exist</p>
<p><em>err.query = q.sql;</em> // SELECT `name` FROM `pokedex` WHERE
`id` = 25</p>
<p>callback(err);</p>
<p>}</p>
<p>else <strong>{</strong></p>
<p>callback(<strong>null</strong>, result);</p>
<p>}</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 234</p>
<h2 id="chapter-76-mysql-connection-pool">Chapter 76: MySQL Connection
Pool</h2>
<p>Section 76.1: Using a connection pool without database</p>
<p>Achieving multitenancy on database server with multiple databases
hosted on it.</p>
<p>Multitenancy is common requirement of enterprise application nowadays
and creating connection pool for each</p>
<p>database in database server is not recommended. so, what we can do
instead is create connection pool with database server and than switch
between databases hosted on database server on demand.</p>
<p>Suppose our application has different databases for each firm hosted
on database server. We will connect to respective firm database when
user hits the application. here is the example on how to do that:</p>
<p><strong>var</strong> pool = mysql.createPool({</p>
<p>connectionLimit : 10,</p>
<p>host : 'example.org',</p>
<p>user : 'bobby',</p>
<p>password : 'pass'</p>
<p>});</p>
<p>pool.getConnection(<strong>function</strong>(err, connection){</p>
<p><strong>if</strong>(err){</p>
<p><strong>return</strong> cb(err);</p>
<p>}</p>
<p>connection.changeUser({database : "firm1"});</p>
<p>connection.query("SELECT * from history",
<strong>function</strong>(err, data){</p>
<p>connection.release();</p>
<p>cb(err, data);</p>
<p>});</p>
<p>});</p>
<p>Let me break down the example:</p>
<p>When defining pool configuration i did not gave the database name but
only gave database server i.e</p>
<p>{</p>
<p>connectionLimit : 10,</p>
<p>host : 'example.org',</p>
<p>user : 'bobby',</p>
<p>password : 'pass'</p>
<p>}</p>
<p>so when we want to use the specific database on database server, we
ask the connection to hit database by using:</p>
<p>connection.changeUser({database : "firm1"});</p>
<p>you can refer the official documentation <a
href="https://github.com/mysqljs/mysql#switching-users-and-altering-connection-state">here</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 235</p>
<h2 id="chapter-77-mssql-intergration">Chapter 77: MSSQL
Intergration</h2>
<p>To integrate any database with nodejs you need a driver package or
you can call it a npm module which will provide</p>
<p>you with basic API to connect with the database and perform
interactions . Same is true with mssql database , here we will integrate
mssql with nodejs and perform some basic queries on SQL tabels.</p>
<p>Section 77.1: Connecting with SQL via. mssql npm module</p>
<p>We will start with creating a simple node application with a basic
structure and then connecting with local sql server database and
performing some queries on that database.</p>
<p><strong>Step 1:</strong> Create a directory/folder by the name of
project which you intent to create. Initialize a node application</p>
<p>using <em>npm init</em> command which will create a package.json in
current directory .</p>
<p><strong>mkdir</strong> mySqlApp</p>
<p><strong>//</strong>folder created</p>
<p><strong>cd</strong> mwSqlApp</p>
<p><strong>//</strong>change to newly created directory</p>
<p>npm init</p>
<p><strong>//</strong>answer all the question ..</p>
<p><strong>npm</strong> install</p>
<p><strong>//</strong>This will <strong>complete</strong> quickly since
we have not added any packages to our app.</p>
<p><strong>Step 2:</strong> Now we will create a App.js file in this
directory and install some packages which we are going to need to</p>
<p>connect to sql db.</p>
<p><strong>sudo</strong> gedit App.js</p>
<p><strong>//</strong>This will create App.js <strong>file</strong> ,
you can use your fav. text editor :<strong>)</strong> npm
<strong>install</strong>--save mssql</p>
<p><strong>//</strong>This will <strong>install</strong> the mssql
package to you app</p>
<p><strong>Step 3:</strong> Now we will add a basic configuration
variable to our application which will be used by mssql module to</p>
<p>establish a connection .</p>
<p>console.log("Hello world, This is an app to connect to sql server.");
<strong>var</strong> config = {</p>
<p>"user": "myusername", <em>//default is sa</em></p>
<p>"password": "yourStrong(!)Password",</p>
<p>"server": "localhost", <em>// for local machine</em></p>
<p>"database": "staging", <em>// name of database</em></p>
<p>"options": {</p>
<p>"encrypt": <strong>true</strong></p>
<p>}</p>
<p>}</p>
<p>sql.connect(config, err =&gt; {</p>
<p><strong>if</strong>(err){</p>
<p><strong>throw</strong> err ;</p>
<p>}</p>
<p>console.log("Connection Successful !");</p>
<p><strong>new</strong> sql.Request().query('select 1 as number', (err,
result) =&gt; {</p>
<p>//handle err</p>
<p>console.dir(result)</p>
<p>// This example uses callbacks strategy for getting results.</p>
<p>})</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 236</p>
<p>});</p>
<p>sql.on('error', err =&gt; {</p>
<p>// ... error handler</p>
<p>console.log("Sql database connection error " ,err); })</p>
<p><strong>Step 4:</strong> This is the easiest step ,where we start the
application and the application will connect to the sql server and</p>
<p>print out some simple results .</p>
<p>node App.js</p>
<p>// Output :</p>
<p>// Hello world, This is an app to connect to sql server. //
Connection Successful !</p>
<p>// 1</p>
<p>To use promises or async for query execution refer the official
documents of the mssql package :</p>
<p><a
href="https://www.npmjs.com/package/mssql#promises">Promises</a></p>
<p><a
href="https://www.npmjs.com/package/mssql#async-await">Async/Await</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 237</p>
<h2 id="chapter-78-node.js-with-oracle">Chapter 78: Node.js with
Oracle</h2>
<p>Section 78.1: Connect to Oracle DB</p>
<p>A very easy way to connect to an ORACLE database is by using <a
href="https://github.com/oracle/node-oracledb">oracledb module. This
module handles the</a> connection between your Node.js app and Oracle
server. You can install it like any other module:</p>
<p>npm <strong>install</strong> oracledb</p>
<p>Now you have to create an ORACLE connection, which you can later
query.</p>
<p><strong>const</strong> oracledb = require('oracledb');</p>
<p>oracledb.getConnection(</p>
<p>{</p>
<p>user : "oli",</p>
<p>password : "password",</p>
<p>connectString : "ORACLE_DEV_DB_TNS_NAME"</p>
<p>},</p>
<p>connExecute</p>
<p>);</p>
<p>The connectString "ORACLE_DEV_DB_TNA_NAME" may live in a tnsnames.org
file in the same directory or where</p>
<p>your oracle instant client is installed.</p>
<p><a
href="https://github.com/oracle/node-oracledb/blob/master/INSTALL.md#which-instructions-to-follow">If
you don't have any oracle instant client installed on you development
machine you may follow the instant</a></p>
<p><a
href="https://github.com/oracle/node-oracledb/blob/master/INSTALL.md#which-instructions-to-follow">client
installation guide</a> for your operating system.</p>
<p>Section 78.2: Using a local module for easier querying</p>
<p>To simplify your querying from ORACLE-DB, you may want to call your
query like this:</p>
<p><strong>const</strong> oracle = require('./oracle.js');</p>
<p><strong>const</strong> sql = "select 'test' as c1, 'oracle' as c2
from dual"; oracle.queryObject(sql, {}, {})</p>
<p>.then(<strong>function</strong>(result) {</p>
<p>console.log(result.rows[0]['C2']);</p>
<p>})</p>
<p><strong>.</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>next(err);</p>
<p>});</p>
<p>Building up the connection and executing is included in this
oracle.js file with content as follows:</p>
<p>'use strict';</p>
<p><strong>const</strong> oracledb = require('oracledb');</p>
<p><strong>const</strong> oracleDbRelease =
<strong>function</strong>(conn) {</p>
<p>conn.release(<strong>function</strong> (err) {</p>
<p><strong>if</strong> (err)</p>
<p>console.log(err.message);</p>
<p>});</p>
<p>};</p>
<p><strong>function</strong> queryArray(sql, bindParams, options) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 238</p>
<p><span id="options_isAutoCommit___false"
class="anchor"></span>options.isAutoCommit = <strong>false</strong>;
<em>// we only do SELECTs</em></p>
<p><strong>return new</strong>
Promise(<strong>function</strong>(resolve, reject) {</p>
<p>oracledb.getConnection(</p>
<p>{</p>
<p>user : "oli",</p>
<p>password : "password",</p>
<p>connectString : "ORACLE_DEV_DB_TNA_NAME"</p>
<p>})</p>
<p>.then(<strong>function</strong>(connection){</p>
<p>//console.log("sql log: " + sql + " params " + bindParams);</p>
<p>connection.execute(sql, bindParams, options)</p>
<p>.then(<strong>function</strong>(results) {</p>
<p>resolve(results);</p>
<p>process.nextTick(<strong>function</strong>() {</p>
<p>oracleDbRelease(connection);</p>
<p>});</p>
<p>})</p>
<p><strong>.</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>reject(err);</p>
<p>process.nextTick(<strong>function</strong>() {</p>
<p>oracleDbRelease(connection);</p>
<p>});</p>
<p>});</p>
<p>})</p>
<p><strong>.</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>reject(err);</p>
<p>});</p>
<p>});</p>
<p>}</p>
<p><strong>function</strong> queryObject(sql, bindParams, options) {</p>
<p>options['outFormat'] = oracledb.OBJECT; <em>// default is
oracledb.ARRAY</em></p>
<p><strong>return</strong> queryArray(sql, bindParams, options);</p>
<p>}</p>
<p>module.exports = queryArray;</p>
<p>module.exports.queryArray = queryArray;</p>
<p>module.exports.queryObject = queryObject;</p>
<p>Note that you have both methods queryArray and queryObject to call on
your oracle object.</p>
<p>Section 78.3: Query a connection object without parameters</p>
<p>Use may now use the connExecute-Function for executing a query. You
have the option to get the query result as</p>
<p>an object or array. The result ist printed to console.log.</p>
<p><strong>function</strong> connExecute(err, connection)</p>
<p>{</p>
<p><strong>if</strong> (err) {</p>
<p>console.error(err.message);</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>sql = "select 'test' as c1, 'oracle' as c2 from dual";</p>
<p>connection.execute(sql, {}, { outFormat: oracledb.OBJECT }, <em>// or
oracledb.ARRAY</em></p>
<p><strong>function</strong>(err, result)</p>
<p>{</p>
<p><strong>if</strong> (err) {</p>
<p>console.error(err.message);</p>
<p>connRelease(connection);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 239</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p>console.log(result.metaData);</p>
<p>console.log(result.rows);</p>
<p>connRelease(connection);</p>
<p>});</p>
<p>}</p>
<p>Since we used a non-pooling connection, we have to release our
connection again.</p>
<p><strong>function</strong> connRelease(connection)</p>
<p>{</p>
<p>connection.close(</p>
<p>function<strong>(err) {</strong></p>
<p><strong>if</strong> (err) {</p>
<p>console.error(err.message);</p>
<p>}</p>
<p>});</p>
<p>}</p>
<p>The output for an object will be</p>
<p>[ { name: 'C1' }, { name: 'C2' } ]</p>
<p>[ { C1: 'test', C2: 'oracle' } ]</p>
<p>and the output for an array will be</p>
<p>[ { name: 'C1' }, { name: 'C2' } ]</p>
<p>[ [ 'test', 'oracle' ] ]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 240</p>
<h2 id="chapter-79-synchronous-vs-asynchronous">Chapter 79: Synchronous
vs Asynchronous</h2>
<p>programming in nodejs</p>
<p>Section 79.1: Using async</p>
<p><a href="https://www.npmjs.com/package/async">The async package</a>
provides functions for asynchronous code.</p>
<p>Using the <a
href="http://caolan.github.io/async/docs.html#auto">auto</a> function
you can define asynchronous relations between two or more functions:</p>
<p><strong>var</strong> async = require('async');</p>
<p>async.auto({</p>
<p>get_data: <strong>function</strong>(callback) {</p>
<p>console.log('in get_data');</p>
<p>// async code to get some data</p>
<p>callback(<strong>null</strong>, 'data', 'converted to array');</p>
<p>},</p>
<p>make_folder: <strong>function</strong>(callback) {</p>
<p>console.log('in make_folder');</p>
<p>// async code to create a directory to store a file in // this is run
at the same time as getting the data</p>
<p>callback(<strong>null</strong>, 'folder');</p>
<p>},</p>
<p>write_file: ['get_data', 'make_folder',
<strong>function</strong>(results, callback) {</p>
<p>console.log('in write_file', JSON.stringify(results));</p>
<p>// once there is some data and the directory exists, // write the
data to a file in the directory</p>
<p>callback(<strong>null</strong>, 'filename');</p>
<p>}],</p>
<p>email_link: ['write_file', <strong>function</strong>(results,
callback) {</p>
<p>console.log('in email_link', JSON.stringify(results));</p>
<p>// once the file is written let's email a link to it... //
results.write_file contains the filename returned by write_file.</p>
<p>callback(<strong>null</strong>, {'file':results.write_file,
'email':'user@example.com'});</p>
<p>}]</p>
<p>}, <strong>function</strong>(err, results) {</p>
<p>console.log('err = ', err);</p>
<p>console.log('results = ', results);</p>
<p>});</p>
<p>This code could have been made synchronously, by just calling the
get_data, make_folder, write_file and email_link in the correct order.
Async keeps track of the results for you, and if an error occurred
(first parameter</p>
<p>of callback unequal to <strong>null</strong>) it stops the execution
of the other functions.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 241</p>
<h2 id="chapter-80-node.js-error-management">Chapter 80: Node.js Error
Management</h2>
<p>We will learn how to create Error objects and how to throw &amp;
handle errors in Node.js</p>
<p>Future edits related to best practices in error handling.</p>
<p>Section 80.1: try...catch block</p>
<p>try...catch block is for handling exceptions, remember exception
means the thrown error not the error.</p>
<p>try <strong>{</strong></p>
<p><strong>var</strong> a = 1;</p>
<p><em>b++;</em> //this will cause an error because be is undefined</p>
<p><em>console.log(b);</em> //this line will not be executed</p>
<p>} <strong>catch</strong> (error) {</p>
<p><em>console.log(error);</em> //here we handle the error caused in the
try block <em>}</em></p>
<p>In the <strong>try</strong> block b++ cause an error and that error
passed to <strong>catch</strong> block which can be handled there or
even can be thrown the same error in catch block or make little bit
modification then throw. Let's see next example.</p>
<p>try <strong>{</strong></p>
<p><strong>var</strong> a = 1;</p>
<p>b++;</p>
<p>console.log(b);</p>
<p>} <strong>catch</strong> (error) {</p>
<p>error.message = "b variable is undefined, so the undefined can't be
incremented"</p>
<p><strong>throw</strong> error;</p>
<p>}</p>
<p>In the above example we modified the message property of error object
and then throw the modified error.</p>
<p>You can through any error in your try block and handle it in the
catch block:</p>
<p>try <strong>{</strong></p>
<p><strong>var</strong> a = 1;</p>
<p><strong>throw new</strong> Error("Some error message");</p>
<p><em>console.log(a);</em> //this line will not be executed;</p>
<p>} <strong>catch</strong> (error) {</p>
<p><em>console.log(error);</em> //will be the above thrown error
<em>}</em></p>
<p>Section 80.2: Creating Error object</p>
<p>new Error(message)</p>
<p>Creates new error object, where the value message is being set to
message property of the created object. Usually</p>
<p>the message arguments are being passed to Error constructor as a
string. However if the message argument is object not a string then
Error constructor calls .toString() method of the passed object and sets
that value to</p>
<p>message property of the created error object.</p>
<p><strong>var</strong> err = <strong>new</strong> Error("The error
message");</p>
<p>console.log(err.message); <em>//prints: The error message</em>
console.log(err);</p>
<p>//output</p>
<p>//Error: The error message</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 242</p>
<p><span id="______at" class="anchor"></span>// at ...</p>
<p>Each error object has stack trace. Stack trace contains the
information of error message and shows where the error happened (the
above output shows the error stack). Once error object is created the
system captures the stack</p>
<p>trace of the error on current line. To get the stack trace use stack
property of any created error object. Below two lines are identical:</p>
<p>console.log(err);</p>
<p>console.log(err.stack);</p>
<p>Section 80.3: Throwing Error</p>
<p>Throwing error means exception if any exception is not handled then
the node server will crash.</p>
<p>The following line throws error:</p>
<p><strong>throw new</strong> Error("Some error occurred");</p>
<p>or</p>
<p><strong>var</strong> err = <strong>new</strong> Error("Some error
occurred");</p>
<p>throw <strong>err;</strong></p>
<p>or</p>
<p><strong>throw</strong> "Some error occurred";</p>
<p>The last example (throwing strings) is not good practice and is not
recommended (always throw errors which are</p>
<p>instances of Error object).</p>
<p>Note that if you <strong>throw</strong> an error in your, then the
system will crash on that line (if there is no exception handlers),
no</p>
<p>any code will be executed after that line.</p>
<p><strong>var</strong> a = 5;</p>
<p><strong>var</strong> err = <strong>new</strong> Error("Some error
message");</p>
<p><em><strong>throw</strong> err;</em> //this will print the error
stack and node server will stop <em>a++;</em> //this line will never be
executed</p>
<p><em>console.log(a);</em> //and this one also</p>
<p>But in this example:</p>
<p><strong>var</strong> a = 5;</p>
<p><strong>var</strong> err = <strong>new</strong> Error("Some error
message");</p>
<p><em>console.log(err);</em> //this will print the error stack</p>
<p>a++;</p>
<p><em>console.log(a);</em> //this line will be executed and will print
6</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 243</p>
<h2 id="chapter-81-node.js-v6-new-features-and">Chapter 81: Node.js v6
New Features and</h2>
<p>Improvement</p>
<p>With node 6 becoming the new LTS version of node. We can see an
number of improvements to the language</p>
<p>through the new ES6 standards introduces. We'll be walking through
some of the new features introduced and examples of how to implement
them.</p>
<p>Section 81.1: Default Function Parameters</p>
<p><strong>function</strong> addTwo(a, b = 2) {</p>
<p><strong>return</strong> a + b;</p>
<p>}</p>
<p><em>addTwo(3)</em> // Returns the result 5</p>
<p>With the addition of default function parameters you can now make
arguments optional and have them default to a</p>
<p>value of your choice.</p>
<p>Section 81.2: Rest Parameters</p>
<p><strong>function</strong> argumentLength(...args) {</p>
<p><strong>return</strong> args.length;</p>
<p>}</p>
<p>argumentLength(5) <em>// returns 1</em></p>
<p>argumentLength(5, 3) <em>//returns 2</em></p>
<p>argumentLength(5, 3, 6) <em>//returns 3</em></p>
<p>By prefacing the last argument of your function with ... all
arguments passed to the function are read as an array.</p>
<p>In this example we get pass in multiple arguments and get the length
of the array created from those arguments.</p>
<p>Section 81.3: Arrow Functions</p>
<p>Arrow function is the new way of defining a function in ECMAScript
6.</p>
<p>// traditional way of declaring and defining function
<em><strong>var</strong> sum = <strong>function</strong>(a,b)</em></p>
<p>{</p>
<p>return <strong>a+b;</strong></p>
<p>}</p>
<p>// Arrow Function</p>
<p><strong>let</strong> sum = (a, b)=&gt; a+b;</p>
<p>//Function defination using multiple lines</p>
<p><strong>let</strong> checkIfEven = (a) =&gt; {</p>
<p><strong>if</strong>( a % 2 == 0 )</p>
<p>return true<strong>;</strong></p>
<p>else</p>
<p>return false<strong>;</strong></p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 244</p>
<p><span id="Section_81_4___this__in_Arrow_Fu"
class="anchor"></span>Section 81.4: "this" in Arrow Function</p>
<p><em><strong>this</strong></em> in function refers to instance object
used to call that function but <em><strong>this</strong></em> in arrow
function is equal to <em>this</em> of</p>
<p>function in which arrow function is defined.</p>
<p>Let's understand using diagram</p>
<p><img src="media/index-256_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-256_1.jpg" /></p>
<p>Understanding using examples.</p>
<p><strong>var</strong> normalFn = <strong>function</strong>(){</p>
<p><em>console.log(<strong>this</strong>)</em> // refers to
global/window object. <em>}</em></p>
<p><em><strong>var</strong> arrowFn = () =&gt;
console.log(<strong>this</strong>);</em> // refers to window or global
object as function is defined in scope of global/window object</p>
<p><strong>var</strong> service = {</p>
<p>constructorFn : <strong>function</strong>(){</p>
<p><em>console.log(<strong>this</strong>);</em> // refers to service as
service object used to call method.</p>
<p><strong>var</strong> nestedFn = <strong>function</strong>(){</p>
<p><em>console.log(<strong>this</strong>);</em> // refers window or
global object because no instance object was used to call this
method.</p>
<p>}</p>
<p>nestedFn();</p>
<p>},</p>
<p>arrowFn : <strong>function</strong>(){</p>
<p><em>console.log(<strong>this</strong>);</em> // refers to service as
service object was used to call method.</p>
<p><em><strong>let</strong> fn = () =&gt;
console.log(<strong>this</strong>);</em> // refers to service object as
arrow function defined in</p>
<p>function which is called using instance object.</p>
<p>fn();</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 245</p>
<p><span id="___calling_defined_functions" class="anchor"></span>//
calling defined functions</p>
<p>constructorFn();</p>
<p>arrowFn();</p>
<p>service.constructorFn();</p>
<p>service.arrowFn();</p>
<p>In arrow function, <em>this</em> is lexical scope which is the scope
of function where arrow function is defined. The first example is the
traditional way of defining functions and hence, <em>this</em> refers to
<em>global/window</em> object.</p>
<p>In the second example <em>this</em> is used inside arrow function
hence <em>this</em> refers to the scope where it is defined(which is
windows or global object). In the third example <em>this</em> is service
object as service object is used to call the function.</p>
<p>In fourth example, arrow function in defined and called from the
function whose scope is <em>service</em>, hence it prints
<em>service</em> object.</p>
<p>Note: - global object is printed in Node.Js and windows object in
browser.</p>
<p>Section 81.5: Spread Operator</p>
<p><strong>function</strong> myFunction(x, y, z) { }</p>
<p><strong>var</strong> args = [0, 1, 2];</p>
<p>myFunction(...args);</p>
<p>The spread syntax allows an expression to be expanded in places where
multiple arguments (for function calls) or multiple elements (for array
literals) or multiple variables are expected. Just like the rest
parameters simply preface</p>
<p>your array with ...</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 246</p>
<h2 id="chapter-82-eventloop">Chapter 82: Eventloop</h2>
<p>In this post we are going to discuss how the concept of Eventloop
emerged and how it can be used for high</p>
<p>performance servers and event driven applications like GUIs.</p>
<p>Section 82.1: How the concept of event loop evolved</p>
<p>Eventloop in pseudo code</p>
<p>An event loop is a loop that waits for events and then reacts to
those events</p>
<p>while <strong>true</strong>:</p>
<p>wait <strong>for</strong> something to happen</p>
<p>react to whatever happened</p>
<p>Example of a single-threaded HTTP server with no event loop</p>
<p>while <strong>true</strong>:</p>
<p>socket = wait <strong>for</strong> the next TCP connection</p>
<p>read the HTTP request headers from (socket)</p>
<p>file_contents = fetch the requested file from disk</p>
<p>write the HTTP response headers to (socket)</p>
<p>write the (file_contents) to (socket)</p>
<p>close(socket)</p>
<p>Here's a simple form of a HTTP server which is a single threaded but
no event loop. The problem here is that it waits until each request is
finished before starting to process the next one. If it takes a while to
read the HTTP</p>
<p>request headers or to fetch the file from disk, we should be able to
start processing the next request while we wait for that to finish.</p>
<p>The most common solution is to make the program multi-threaded.</p>
<p>Example of a multi-threaded HTTP server with no event loop</p>
<p><strong>function</strong> handle_connection(socket):</p>
<p>read the HTTP request headers from (socket)</p>
<p>file_contents = fetch the requested file from disk</p>
<p>write the HTTP response headers to (socket)</p>
<p>write the (file_contents) to (socket)</p>
<p>close(socket)</p>
<p>while <strong>true</strong>:</p>
<p>socket = wait <strong>for</strong> the next TCP connection</p>
<p>spawn a <strong>new</strong> thread doing
handle_connection(socket)</p>
<p>Now we have made our little HTTP server multi threaded. This way, we
can immediately move on to the next request because the current request
is running in a background thread. Many servers, including Apache, use
this</p>
<p>approach.</p>
<p>But it's not perfect. One limitation is that you can only spawn so
many threads. For workloads where you have a</p>
<p>huge number of connections, but each connection only requires
attention every once in a while, the multi-threaded model won't perform
very well. The solution for those cases is to use an event loop:</p>
<p>Example of a HTTP server with event loop</p>
<p>while <strong>true</strong>:</p>
<p>event = wait <strong>for</strong> the next event to happen</p>
<p><strong>if</strong> (event.type == NEW_TCP_CONNECTION):</p>
<p>conn = <strong>new</strong> Connection</p>
<p>conn.socket = event.socket</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 247</p>
<p>start reading HTTP request headers from (conn.socket) with userdata =
(conn)</p>
<p><strong>else if</strong> (event.type ==
FINISHED_READING_FROM_SOCKET): conn = event.userdata</p>
<p>start fetching the requested file from disk with userdata =
(conn)</p>
<p><strong>else if</strong> (event.type ==
FINISHED_READING_FROM_DISK):</p>
<p>conn = event.userdata</p>
<p>conn.file_contents = the data we fetched from disk</p>
<p>conn.current_state = "writing headers"</p>
<p>start writing the HTTP response headers to (conn.socket) with
userdata = (conn)</p>
<p><strong>else if</strong> (event.type ==
FINISHED_WRITING_TO_SOCKET):</p>
<p>conn = event.userdata</p>
<p><strong>if</strong> (conn.current_state == "writing headers"):</p>
<p>conn.current_state = "writing file contents"</p>
<p>start writing (conn.file_contents) to (conn.socket) with userdata =
(conn)</p>
<p><strong>else if</strong> (conn.current_state == "writing file
contents"):</p>
<p>close(conn.socket)</p>
<p>Hopefully this pseudocode is intelligible. Here's what's going on: We
wait for things to happen. Whenever a new connection is created or an
existing connection needs our attention, we go deal with it, then go
back to waiting.</p>
<p>That way, we perform well when there are many connections and each
one only rarely requires attention.</p>
<p>In a real application (not pseudocode) running on Linux, the "wait
for the next event to happen" part would be</p>
<p>implemented by calling the poll() or epoll() system call. The "start
reading/writing something to a socket" parts would be implemented by
calling the recv() or send() system calls in non-blocking mode.</p>
<p>Reference:</p>
<p>[1]. "How does an event loop work?" [Online]. Available : <a
href="https://www.quora.com/How-does-an-event-loop-work">https://www.quora.com/How-does-an-event-loop-work</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 248</p>
<h2 id="chapter-83-nodejs-history">Chapter 83: Nodejs History</h2>
<p>Here we are going to discuss about the history of Node.js, version
information and it's current status.</p>
<p>Section 83.1: Key events in each year</p>
<p>2009</p>
<p><a
href="https://github.com/nodejs/node-v0.x-archive/commit/19478ed4b14263c489e872156ca55ff16a07ebe0">3rd
March : The project was named as "node"</a></p>
<p><a
href="https://groups.google.com/forum/?hl=en#!topic/nodejs/erDWyS4xPw8">1st
October : First very early preview of npm, the Node package</a></p>
<p><a
href="https://groups.google.com/forum/?hl=en#!topic/nodejs/erDWyS4xPw8">manager</a></p>
<p><a href="https://www.youtube.com/watch?v=ztspvPYybIY">8th November :
Ryan Dahl's (Creator of Node.js) Original Node.js Talk at JSConf
2009</a></p>
<p>2010</p>
<p>Express: A Node.js web development framework</p>
<p>Socket.io initial release</p>
<p><a
href="https://blog.heroku.com/archives/2010/4/28/node_js_support_experimental">28th
April : Experimental Node.js Support on Heroku</a></p>
<p><a href="https://www.youtube.com/watch?v=F6k8lTrAE2g">28th July :
Ryan Dahl's Google Tech Talk on Node.js</a></p>
<p><a
href="https://groups.google.com/forum/#!topic/nodejs/wEDF_X12HVc">20th
August : Node.js 0.2.0 released</a></p>
<p>2011</p>
<p>31st March : Node.js Guide</p>
<p>1st May : <a
href="https://nodejs.org/en/blog/npm/npm-1-0-released/">npm 1.0:
Released</a></p>
<p>1st May : <a
href="https://www.reddit.com/r/node/comments/h1m2o/i_am_ryan_dahl_creator_of_nodejs_ama/">Ryan
Dahl's AMA on Reddit</a></p>
<p><a href="http://nodebeginner.org/index.html">10th July : The Node
Beginner Book, an introduction to Node.js, is completed</a>.</p>
<p>A comprehensive Node.js tutorial for beginners.</p>
<p><a href="http://venturebeat.com/2011/08/16/linkedin-node/">16th
August : LinkedIn uses Node.js</a></p>
<p>LinkedIn launched its completely overhauled mobile app with new
features and new parts under the hood.</p>
<p><a href="https://www.youtube.com/watch?v=SAc0vQCC6UQ">5th October :
Ryan Dahl talks about the history of Node.js and why he created
it</a></p>
<p>5th December : <a
href="https://www.joyent.com/developers/videos/node-js-office-hours-curtis-chambers-uber">Node.js
in production at Uber</a></p>
<p>Uber Engineering Manager Curtis Chambers explains why his company
completely re-engineered their</p>
<p>application using Node.js to increase efficiency and improve the
partner and customer experience.</p>
<p>2012</p>
<p>30th January : <a
href="https://groups.google.com/forum/#!topic/nodejs/hfajgpvGTLY">Node.js
creator Ryan Dahl steps away from Node’s day-to-day</a></p>
<p>25th June : <a
href="https://nodejs.org/en/blog/release/v0.8.0/">Node.js v0.8.0
[stable] is out</a></p>
<p><a href="http://hueniverse.com/2012/12/20/hapi-a-prologue/">20th
December : Hapi, a Node.js framework</a> is released</p>
<p>2013</p>
<p><a
href="http://blog.mongodb.org/post/49262866911/the-mean-stack-mongodb-expressjs-angularjs-and">30th
April : The MEAN Stack: MongoDB, ExpressJS, AngularJS and
Node.js</a></p>
<p><a
href="http://www.ebaytechblog.com/2013/05/17/how-we-built-ebays-first-node-js-application/">17th
May : How We Built eBay’s First Node.js Application</a></p>
<p>15th November : <a
href="https://github.com/krakenjs/kraken-js/releases/tag/v0.6.1">PayPal
releases Kraken, a Node.js framework</a></p>
<p>22nd November : <a
href="http://www.joyent.com/blog/walmart-node-js-memory-leak">Node.js
Memory Leak at Walmart</a></p>
<p>Eran Hammer of Wal-Mart labs came to the Node.js core team
complaining of a memory leak he had</p>
<p>been tracking down for months.</p>
<p>19th December : Koa - Web framework for Node.js</p>
<p>2014</p>
<p>15th January : <a
href="https://nodejs.org/en/blog/uncategorized/tj-fontaine-new-node-lead/">TJ
Fontaine takes over Node project</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 249</p>
<p>23rd October : <a
href="https://www.joyent.com/blog/node-js-advisory-board">Node.js
Advisory Board</a></p>
<p>Joyent and several members of the Node.js community announced a
proposal for a Node.js Advisory</p>
<p>Board as a next step towards a fully open governance model for the
Node.js open source project.</p>
<p>19th November : <a
href="http://techblog.netflix.com/2014/11/nodejs-in-flames.html">Node.js
in Flame Graphs - Netflix</a></p>
<p>28th November : <a href="https://iojs.org/">IO.js</a> – Evented I/O
for V8 Javascript</p>
<p>2015</p>
<p>Q1</p>
<p>14th January : <a
href="https://github.com/nodejs/node/commit/b82bb600370db7207a39e53329af228f6af3ffa1">IO.js
1.0.0</a></p>
<p>10th Febraury : <a
href="http://www.joyent.com/about/press/joyent-moves-to-establish-nodejs-foundation">Joyent
Moves to Establish Node.js Foundation</a></p>
<p>Joyent, IBM, Microsoft, PayPal, Fidelity, SAP and The Linux
Foundation Join Forces to Support Node.js Community With Neutral and
Open Governance</p>
<p>27th Febraury : <a
href="https://github.com/nodejs/node/issues/978">IO.js and Node.js
reconciliation proposal</a></p>
<p>Q2</p>
<p><a href="https://www.npmjs.com/private-modules">14th April : npm
Private Modules</a></p>
<p><a
href="http://venturebeat.com/2015/05/08/node-lead-tj-fontaine-is-stepping-down-and-leaving-joyent-too/">28th
May : Node lead TJ Fontaine is stepping down and leaving Joyent</a></p>
<p><a
href="https://github.com/nodejs/node/issues/1664#issuecomment-101828384">13th
May : Node.js and io.js are merging under the Node Foundation</a></p>
<p>Q3</p>
<p>2nd August : <a href="http://trace.risingstack.com/">Trace - Node.js
performance monitoring and debugging</a></p>
<p>Trace is a visualized microservice monitoring tool that gets you all
the metrics you need when operating microservices.</p>
<p><a
href="https://medium.com/node-js-javascript/4-0-is-the-new-1-0-386597a3436d#.pjnzem4ar">13th
August : 4.0 is the new 1.0</a></p>
<p>Q4</p>
<p>12th October : <a
href="https://nodejs.org/en/blog/release/v4.2.0/">Node v4.2.0, first
Long Term Support release</a></p>
<p>8th December : <a
href="http://finance.yahoo.com/news/apigee-risingstack-yahoo-join-node-170000939.html">Apigee,
RisingStack and Yahoo join the Node.js Foundation</a></p>
<p>8th &amp; 9th December : <a
href="http://events.linuxfoundation.org/events/node-interactive/program/schedule">Node
Interactive</a></p>
<p>The first annual Node.js conference by the Node.js Foundation</p>
<p>2016</p>
<p>Q1</p>
<p>10th February : <a
href="https://nodejs.org/en/blog/announcements/foundation-express-news/">Express
becomes an incubated project</a></p>
<p><a
href="http://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm">23rd
March : The leftpad incident</a></p>
<p><a
href="https://nodejs.org/en/blog/announcements/welcome-google/">29th
March : Google Cloud Platform joins the Node.js Foundation</a></p>
<p>Q2</p>
<p><a
href="http://blog.npmjs.org/post/143451680695/how-many-npm-users-are-there">26th
April : npm has 210.000 users</a></p>
<p>Q3</p>
<p><a
href="http://blog.npmjs.org/post/147604242320/npm-has-a-new-cto">18th
July : CJ Silverio becomes the CTO of npm</a></p>
<p>1st August : <a href="https://trace.risingstack.com/">Trace, the
Node.js debugging solution becomes generally available</a></p>
<p><a
href="https://medium.com/@nodejs/news-from-the-node-js-ecosystem-6141bb3b2f10">15th
September : The first Node Interactive in Europe</a></p>
<p>Q4</p>
<p>11th October : <a
href="https://code.facebook.com/posts/1840075619545360">The yarn package
manager got released</a></p>
<p>18th October : <a
href="https://medium.com/@nodejs/node-js-v6-transitions-to-lts-be7f18c17159">Node.js
6 becomes the LTS version</a></p>
<p>Reference</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 250</p>
<p>1. "History of Node.js on a Timeline" [Online]. Available : [<a
href="https://blog.risingstack.com/history-of-node-js%5D">https://blog.risingstack.com/history-of-node-js]</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 251</p>
<h2 id="chapter-84-passport.js">Chapter 84: passport.js</h2>
<p>Passport is a popular authorisation module for node. In simple words
it handles all the authorisation requests on</p>
<p>your app by users. Passport supports over 300 strategies so that you
can easily integrate login with Facebook / Google or any other social
network using it. The strategy that we will discuss here is the Local
where you</p>
<p>authenticate an user using your own database of registered users(
using username and password).</p>
<p>Section 84.1: Example of LocalStrategy in passport.js</p>
<p><strong>var</strong> passport = require('passport');</p>
<p><strong>var</strong> LocalStrategy =
require('passport-local').Strategy;</p>
<p><em>passport.serializeUser(<strong>function</strong>(user, done)
{</em> //In serialize user you decide what to store in the session. Here
I'm storing the user id only.</p>
<p>done(<strong>null</strong>, user.id);</p>
<p>});</p>
<p><em>passport.deserializeUser(<strong>function</strong>(id, done)
{</em> //Here you retrieve all the info of the user from the session
storage using the user id stored in the session earlier using serialize
user. <em>db.findById(id, <strong>function</strong>(err, user)
{</em></p>
<p>done(err, user);</p>
<p>});</p>
<p>});</p>
<p>passport.use(<strong>new</strong>
LocalStrategy(<strong>function</strong>(username, password, done) {</p>
<p>db.findOne({'username':username},<strong>function</strong>(err,student){</p>
<p><strong>if</strong>(err)<strong>return</strong>
done(err,{message:message});<em>//wrong roll_number or password;</em>
<strong>var</strong> pass_retrieved = student.pass_word;</p>
<p>bcrypt.compare(password, pass_retrieved,
<strong>function</strong>(err3, correct) {</p>
<p><strong>if</strong>(err3){</p>
<p>message = [{"msg": "Incorrect Password!"}];</p>
<p><strong>return</strong>
done(<strong>null</strong>,<strong>false</strong>,{message:message});
<em>// wrong password</em></p>
<p>}</p>
<p><strong>if</strong>(correct){</p>
<p><strong>return</strong> done(<strong>null</strong>,student);</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>}));</p>
<p><em>app.use(session({ secret: 'super secret' }));</em> //to make
passport remember the user on other pages too.(Read about session store.
I used express-sessions.) <em>app.use(passport.initialize());</em></p>
<p>app.use(passport.session());</p>
<p>app.post('/',passport.authenticate('local',{successRedirect:'/users'
failureRedirect: '/'}),</p>
<p><strong>function</strong>(req,res,next){</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 252</p>
<h2 id="chapter-85-asynchronous-programming">Chapter 85: Asynchronous
programming</h2>
<p>Node is a programming language where everything could run on an
asynchronous way. Below you could find some</p>
<p>examples and the typical things of asynchronous working.</p>
<p>Section 85.1: Callback functions</p>
<p>Callback functions in JavaScript</p>
<p><a href="https://en.wikipedia.org/wiki/First-class_function">Callback
functions are common in JavaScript. Callback functions are possible in
JavaScript because functions are</a></p>
<p><a
href="https://en.wikipedia.org/wiki/First-class_function">first-class
citizens</a>.</p>
<p>Synchronous callbacks.</p>
<p>Callback functions can be synchronous or asynchronous. Since
Asynchronous callback functions may be more</p>
<p>complex here is a simple example of a synchronous callback
function.</p>
<p>// a function that uses a callback named `cb` as a parameter
<em><strong>function</strong> getSyncMessage(cb) {</em></p>
<p>cb("Hello World!");</p>
<p>}</p>
<p>console.log("Before getSyncMessage call");</p>
<p>// calling a function and sending in a callback function as an
argument. <em>getSyncMessage(<strong>function</strong>(message)
{</em></p>
<p>console.log(message);</p>
<p>});</p>
<p>console.log("After getSyncMessage call");</p>
<p>The output for the above code is:</p>
<p>&gt; Before getSyncMessage call</p>
<p>&gt; Hello World!</p>
<p>&gt; After getSyncMessage call</p>
<p>First we will step through how the above code is executed. This is
more for those who do not already understand</p>
<p>the concept of callbacks if you do already understand it feel free to
skip this paragraph. First the code is parsed and then the first
interesting thing to happen is line 6 is executed which outputs Before
getSyncMessage call to the</p>
<p>console. Then line 8 is executed which calls the function
getSyncMessage sending in an anonymous function as an argument for the
parameter named cb in the getSyncMessage function. Execution is now done
inside the</p>
<p>getSyncMessage function on line 3 which executes the function cb
which was just passed in, this call sends an argument string "Hello
World" for the param named message in the passed in anonymous function.
Execution then</p>
<p>goes to line 9 which logs Hello World! to the console. Then the
execution goes through the process of exiting the</p>
<p><a
href="https://developer.mozilla.org/en-US/docs/Glossary/Call_Stack">callstack</a>
(<a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">see
also) hitting line 10 then line 4 then finally back to line 11.</a></p>
<p>Some information to know about callbacks in general:</p>
<p>The function you send in to a function as a callback may be called
zero times, once, or multiple times. It all</p>
<p>depends on implementation.</p>
<p>The callback function may be called synchronously or asynchronously
and possibly both synchronously and</p>
<p>asynchronously.</p>
<p>Just like normal functions the names you give parameters to your
function are not important but the order is.</p>
<p>So for example on line 8 the parameter message could have been named
statement, msg, or if you're being</p>
<p>nonsensical something like jellybean. So you should know what
parameters are sent into your callback so</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 253</p>
<p>you can get them in the right order with proper names.</p>
<p>Asynchronous callbacks.</p>
<p>One thing to note about JavaScript is it is synchronous by default,
but there are APIs given in the environment</p>
<p>(browser, Node.js, etc.) that could make it asynchronous (there's
more about that <a
href="https://stackoverflow.com/a/13806828/2066736">here).</a></p>
<p>Some common things that are asynchronous in JavaScript environments
that accept callbacks:</p>
<p>Events</p>
<p>setTimeout</p>
<p>setInterval</p>
<p>the fetch API</p>
<p>Promises</p>
<p>Also any function that uses one of the above functions may be wrapped
with a function that takes a callback and the callback would then be an
asynchronous callback (although wrapping a promises with a function that
takes a</p>
<p>callback would likely be considered an anti-pattern as there are more
preferred ways to handle promises).</p>
<p>So given that information we can construct an asynchronous function
similar to the above synchronous one.</p>
<p>// a function that uses a callback named `cb` as a parameter
<em><strong>function</strong> getAsyncMessage(cb) {</em></p>
<p>setTimeout(<strong>function</strong> () { cb("Hello World!") },
1000); }</p>
<p>console.log("Before getSyncMessage call");</p>
<p>// calling a function and sending in a callback function as an
argument. <em>getAsyncMessage(<strong>function</strong>(message)
{</em></p>
<p>console.log(message);</p>
<p>});</p>
<p>console.log("After getSyncMessage call");</p>
<p>Which prints the following to the console:</p>
<p>&gt; Before getSyncMessage call</p>
<p>&gt; After getSyncMessage call</p>
<p>// pauses for 1000 ms with no output</p>
<p>&gt; Hello World!</p>
<p>Line execution goes to line 6 logs "Before getSyncMessage call". Then
execution goes to line 8 calling</p>
<p>getAsyncMessage with a callback for the param cb. Line 3 is then
executed which calls setTimeout with a callback as the first argument
and the number 300 as the second argument. setTimeout does whatever it
does and holds on to</p>
<p>that callback so that it can call it later in 1000 milliseconds, but
following setting up the timeout and before it pauses the 1000
milliseconds it hands execution back to where it left off so it goes to
line 4, then line 11, and then</p>
<p>pauses for 1 second and setTimeout then calls its callback function
which takes execution back to line 3 where getAsyncMessages callback is
called with value "Hello World" for its parameter message which is then
logged to the</p>
<p>console on line 9.</p>
<p>Callback functions in Node.js</p>
<p>NodeJS has asynchronous callbacks and commonly supplies two
parameters to your functions sometimes</p>
<p>conventionally called err and data. An example with reading a file
text.</p>
<p><strong>const</strong> fs = require("fs");</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 254</p>
<p><span id="fs_readFile____test_txt____utf8"
class="anchor"></span>fs.readFile("./test.txt", "utf8",
<strong>function</strong>(err, data) {</p>
<p><strong>if</strong>(err) {</p>
<p>// handle the error</p>
<p>} <strong>else</strong> {</p>
<p>// process the file text given with data</p>
<p>}</p>
<p>});</p>
<p>This is an example of a callback that is called a single time.</p>
<p>It's good practice to handle the error somehow even if your just
logging it or throwing it. The else is not necessary if</p>
<p>you throw or return and can be removed to decrease indentation so
long as you stop execution of the current function in the if by doing
something like throwing or returning.</p>
<p>Though it may be common to see err, data it may not always be the
case that your callbacks will use that pattern</p>
<p>it's best to look at documentation.</p>
<p>Another example callback comes from the express library (express
4.x):</p>
<p>// this code snippet was on http://expressjs.com/en/4x/api.html
<em><strong>const</strong> express = require('express');</em></p>
<p><strong>const</strong> app = express();</p>
<p>// this app.get method takes a url route to watch for and a callback
// to call whenever that route is requested by a user.
<em>app.<strong>get</strong>('/', <strong>function</strong>(req,
res){</em></p>
<p>res.send('hello world');</p>
<p>});</p>
<p>app.listen(3000);</p>
<p>This example shows a callback that is called multiple times. The
callback is provided with two objects as params named here as req and
res these names correspond to request and response respectively, and
they provide ways</p>
<p>to view the request coming in and set up the response that will be
sent to the user.</p>
<p>As you can see there are various ways a callback can be used to
execute sync and async code in JavaScript and</p>
<p>callbacks are very ubiquitous throughout JavaScript.</p>
<p>Section 85.2: Callback hell</p>
<p>Callback hell (also a pyramid of doom or boomerang effect) arises
when you nest too many callback functions</p>
<p>inside a callback function. Here is an example to read a file (in
ES6).</p>
<p><strong>const</strong> fs = require('fs');</p>
<p><strong>let</strong> filename = `${__dirname}/myfile.txt`;</p>
<p>fs.exists(filename, exists =&gt; {</p>
<p><strong>if</strong> (exists) {</p>
<p>fs.stat(filename, (err, stats) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>throw <strong>err;</strong></p>
<p>}</p>
<p><strong>if</strong> (stats.isFile()) {</p>
<p>fs.readFile(filename, <strong>null</strong>, (err, data) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>throw <strong>err;</strong></p>
<p>}</p>
<p>console.log(data);</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 255</p>
<p><span id="_20" class="anchor"></span>});</p>
<p>}</p>
<p>else <strong>{</strong></p>
<p><strong>throw new</strong> Error("This location contains not a
file");</p>
<p>}</p>
<p>});</p>
<p>}</p>
<p>else <strong>{</strong></p>
<p><strong>throw new</strong> Error("404: file not found");</p>
<p>}</p>
<p>});</p>
<p>How to avoid "Callback Hell"</p>
<p>It is recommended to nest no more than 2 callback functions. This
will help you maintain code readability and will me much easier to
maintain in the future. If you have a need to nest more than 2
callbacks, try to make use of</p>
<p><a href="https://nodejs.org/api/events.html">distributed events</a>
instead.</p>
<p><a href="https://caolan.github.io/async/">There also exists a library
called async that helps manage callbacks and their execution available
on npm. It</a></p>
<p>increases the readability of callback code and gives you more control
over your callback code flow, including allowing you to run them in
parallel or in series.</p>
<p>Section 85.3: Native Promises</p>
<p>Version ≥ v6.0.0</p>
<p>Promises are a tool for async programming. In JavaScript promises are
known for their then methods. Promises</p>
<p>have two main states 'pending' and 'settled'. Once a promise is
'settled' it cannot go back to 'pending'. This means that promises are
mostly good for events that only occur once. The 'settled' state has two
states as well 'resolved'</p>
<p>and 'rejected'. You can create a new promise using the
<strong>new</strong> keyword and passing a function into the constructor
<strong>new</strong> Promise(<strong>function</strong> (resolve, reject)
{}).</p>
<p>The function passed into the Promise constructor always receives a
first and second parameter usually named resolve and reject
respectively. The naming of these two parameters is convention, but they
will put the promise</p>
<p>into either the 'resolved' state or the 'rejected' state. When either
one of these is called the promise goes from being 'pending' to
'settled'. resolve is called when the desired action, which is often
asynchronous, has been</p>
<p>performed and reject is used if the action has errored.</p>
<p>In the below timeout is a function that returns a Promise.</p>
<p><strong>function</strong> timeout (ms) {</p>
<p><strong>return new</strong> Promise(<strong>function</strong>
(resolve, reject) {</p>
<p>setTimeout(<strong>function</strong> () {</p>
<p>resolve("It was resolved!");</p>
<p>}, ms)</p>
<p>});</p>
<p>}</p>
<p>timeout(1000).then(<strong>function</strong> (dataFromPromise) {</p>
<p>// logs "It was resolved!"</p>
<p>console.log(dataFromPromise);</p>
<p>})</p>
<p>console.log("waiting...");</p>
<p>console output</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 256</p>
<p><span id="waiting" class="anchor"></span>waiting...</p>
<p>// &lt;&lt; pauses for one second&gt;&gt;</p>
<p>It was resolved!</p>
<p>When timeout is called the function passed to the Promise constructor
is executed without delay. Then the</p>
<p>setTimeout method is executed and its callback is set to fire in the
next ms milliseconds, in this case ms=1000. Since the callback to the
setTimeout isn't fired yet the timeout function returns control to the
calling scope. The chain of</p>
<p>then methods are then stored to be called later when/if the Promise
has resolved. If there were <strong>catch</strong> methods</p>
<p>here they would be stored as well, but would be fired when/if the
promise 'rejects'.</p>
<p>The script then prints 'waiting...'. One second later the setTimeout
calls its callback which calls the resolve function with the string "It
was resolved!". That string is then passed into the then method's
callback and is then logged to</p>
<p>the user.</p>
<p>In the same sense you can wrap the asynchronous setTimeout function
which requires a callback you can wrap any</p>
<p>singular asynchronous action with a promise.</p>
<p>Read more about promises in the JavaScript documentation
Promises.</p>
<p>Section 85.4: Code example</p>
<p><strong>Question:</strong> What is the output of code below and
why?</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>console.log("A");</p>
<p>}, 1000);</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>console.log("B");</p>
<p>}, 0);</p>
<p>getDataFromDatabase(<strong>function</strong>(err, data) {</p>
<p>console.log("C");</p>
<p>setTimeout(<strong>function</strong>() {</p>
<p>console.log("D");</p>
<p>}, 1000);</p>
<p>});</p>
<p>console.log("E");</p>
<p><strong>Output:</strong> This is known for sure: EBAD. C is unknown
when it will be logged.</p>
<p><strong>Explanation:</strong> The compiler will not stop on the
setTimeout and the getDataFromDatabase methodes. So the first line he
will log is E. The callback functions <em>(first argument of
setTimeout)</em> will run after the set timeout on a</p>
<p>asynchronous way!</p>
<p>More details:</p>
<p>1. E has no setTimeout</p>
<p>2. B has a set timeout of 0 milliseconds</p>
<p>3. A has a set timeout of 1000 milliseconds</p>
<p>4. D must request a database, after it must D wait 1000 milliseconds
so it comes after A.</p>
<p>5. C is unknown because it is unknown when the data of the database
is requested. It could be before or after A.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 257</p>
<p><span id="Section_85_5__Async_error_handli"
class="anchor"></span>Section 85.5: Async error handling</p>
<p>Try catch</p>
<p>Errors must always be handled. If you are using synchronous
programming you could use a <strong>try catch</strong>. But this does
not work if you work asynchronous! Example:</p>
<p>try <strong>{</strong></p>
<p>setTimeout(<strong>function</strong>() {</p>
<p><strong>throw new</strong> Error("I'm an uncaught error and will stop
the server!");</p>
<p>}, 100);</p>
<p>}</p>
<p><strong>catch</strong> (ex) {</p>
<p>console.error("This error will not be work in an asynchronous
situation: " + ex); }</p>
<p>Async errors will only be handled inside the callback function!</p>
<p>Working possibilities</p>
<p>Version ≤ v0.8</p>
<p>Event handlers</p>
<p>The first versions of Node.JS got an event handler.</p>
<p>process.on("UncaughtException", <strong>function</strong>(err, data)
{</p>
<p><strong>if</strong> (err) {</p>
<p>// error handling</p>
<p>}</p>
<p>});</p>
<p>Version ≥ v0.8</p>
<p>Domains</p>
<p>Inside a domain, the errors are release via the event emitters. By
using this are all errors, timers, callback methodes implicitly only
registrated inside the domain. By an error, be an error event send and
didn't crash the application.</p>
<p><strong>var</strong> domain = require("domain");</p>
<p><strong>var</strong> d1 = domain.create();</p>
<p><strong>var</strong> d2 = domain.create();</p>
<p>d1.run(<strong>function</strong>() {</p>
<p>d2.add(setTimeout(<strong>function</strong>() {</p>
<p><strong>throw new</strong> Error("error on the timer of domain
2");</p>
<p>}, 0));</p>
<p>});</p>
<p>d1.on("error", <strong>function</strong>(err) {</p>
<p>console.log("error at domain 1: " + err);</p>
<p>});</p>
<p>d2.on("error", <strong>function</strong>(err) {</p>
<p>console.log("error at domain 2: " + err);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 258</p>
<h2 id="chapter-86-node.js-code-for-stdin-and">Chapter 86: Node.js code
for STDIN and</h2>
<p>STDOUT without using any library</p>
<p>This is a simple program in node.js to which takes input from the
user and prints it to the console.</p>
<p>The <strong>process</strong> object is a global that provides
information about, and control over, the current Node.js process. As
a</p>
<p>global, it is always available to Node.js applications without using
require().</p>
<p>Section 86.1: Program</p>
<p>The <strong>process.stdin</strong> property returns a Readable stream
equivalent to or associated with stdin.</p>
<p>The <strong>process.stdout</strong> property returns a Writable
stream equivalent to or associated with stdout.</p>
<p>process.stdin.resume()</p>
<p>console.log('Enter the data to be displayed ');</p>
<p>process.stdin.on('data', <strong>function</strong>(data) {
process.stdout.write(data) })</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 259</p>
<h2 id="chapter-87-mongodb-integration-for">Chapter 87: MongoDB
Integration for</h2>
<p>Node.js/Express.js</p>
<p>MongoDB is one of the most popular NoSQL databases, thanks to the
help of the MEAN stack. Interfacing with a</p>
<p>Mongo database from an Express app is quick and easy, once you
understand the kinda-wonky query syntax. We'll use Mongoose to help us
out.</p>
<p>Section 87.1: Installing MongoDB</p>
<p>npm <strong>install</strong>--save mongodb</p>
<p>npm <strong>install</strong>--save mongoose <strong>//</strong>A
simple wrapper <strong>for</strong> ease of development</p>
<p>In your server file (normally named index.js or server.js)</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> mongodb = require('mongodb');</p>
<p><strong>const</strong> mongoose = require('mongoose');</p>
<p><strong>const</strong> mongoConnectString =
'http://localhost/database name';</p>
<p>mongoose.connect(mongoConnectString, (err) =&gt; {</p>
<p><strong>if</strong> (err) {</p>
<p>console.log('Could not connect to the database');</p>
<p>}</p>
<p>});</p>
<p>Section 87.2: Creating a Mongoose Model</p>
<p><strong>const</strong> Schema = mongoose.Schema;</p>
<p><strong>const</strong> ObjectId = Schema.Types.ObjectId;</p>
<p><strong>const</strong> Article = <strong>new</strong> Schema({</p>
<p>title: {</p>
<p>type: String,</p>
<p>unique: <strong>true</strong>,</p>
<p>required: [<strong>true</strong>, 'Article must have title']</p>
<p>},</p>
<p>author: {</p>
<p>type: ObjectId,</p>
<p>ref: 'User'</p>
<p>}</p>
<p>});</p>
<p>module.exports = mongoose.model('Article, Article);</p>
<p>Let's dissect this. MongoDB and Mongoose use JSON(actually BSON, but
that's irrelevant here) as the data format.</p>
<p>At the top, I've set a few variables to reduce typing.</p>
<p>I create a <strong>new</strong> Schema and assign it to a constant.
It's simple JSON, and each attribute is another Object with</p>
<p>properties that help enforce a more consistent schema. Unique forces
new instances being inserted in the database to, obviously, be unique.
This is great for preventing a user creating multiple accounts on a
service.</p>
<p>Required is another, declared as an array. The first element is the
boolean value, and the second the error message should the value being
inserted or updated fail to exist.</p>
<p>ObjectIds are used for relationships between Models. Examples might
be 'Users have many Comments`. Other</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 260</p>
<p><span id="attributes_can_be_used_instead_o"
class="anchor"></span>attributes can be used instead of ObjectId.
Strings like a username is one example.</p>
<p>Lastly, exporting the model for use with your API routes provides
access to your schema.</p>
<p>Section 87.3: Querying your Mongo Database</p>
<p>A simple GET request. Let's assume the Model from the example above
is in the file ./db/models/Article.js.</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> Articles = require('./db/models/Article');</p>
<p>module.exports = <strong>function</strong> (app) {</p>
<p><strong>const</strong> routes = express.Router();</p>
<p>routes.<strong>get</strong>('/articles', (req, res) =&gt; {</p>
<p>Articles.find().limit(5).lean().exec((err, doc) =&gt; {</p>
<p><strong>if</strong> (doc.length &gt; 0) {</p>
<p>res.send({ data: doc });</p>
<p>} <strong>else</strong> {</p>
<p>res.send({ success: <strong>false</strong>, message: 'No documents
retrieved' });</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>app.use('/api', routes);</p>
<p>};</p>
<p>We can now get the data from our database by sending an HTTP request
to this endpoint. A few key things, though:</p>
<p>1. Limit does exactly what it looks like. I'm only getting 5
documents back. 2. Lean strips away some stuff from the raw BSON,
reducing complexity and overhead. Not required. But</p>
<p>useful.</p>
<p>3. When using find instead of findOne, confirm that the doc.length is
greater than 0. This is because find</p>
<p>always returns an array, so an empty array will not handle your error
unless it is checked for length</p>
<p>4. I personally like to send the error message in that format. Change
it to suit your needs. Same thing for the</p>
<p>returned document.</p>
<p>5. The code in this example is written under the assumption that you
have placed it in another file and not</p>
<p>directly on the express server. To call this in the server, include
these lines in your server code:</p>
<p><strong>const</strong> app = express();</p>
<p>require('./path/to/this/file')(app) <em>//</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 261</p>
<h2 id="chapter-88-lodash">Chapter 88: Lodash</h2>
<p>Lodash is a handy JavaScript utility library.</p>
<p>Section 88.1: Filter a collection</p>
<p>The code snippet below shows the various ways you can filter on an
array of objects using lodash.</p>
<p><strong>let</strong> lodash = require('lodash');</p>
<p><strong>var</strong> countries = [</p>
<p>{"key": "DE", "name": "Deutschland", "active":
<strong>false</strong>},</p>
<p>{"key": "ZA", "name": "South Africa", "active":
<strong>true</strong>}</p>
<p>];</p>
<p><strong>var</strong> filteredByFunction = lodash.filter(countries,
<strong>function</strong> (country) {</p>
<p><strong>return</strong> country.key === "DE";</p>
<p>});</p>
<p>// =&gt; [{"key": "DE", "name": "Deutschland"}];</p>
<p><strong>var</strong> filteredByObjectProperties =
lodash.filter(countries, { "key": "DE" }); <em>// =&gt; [{"key": "DE",
"name": "Deutschland"}];</em></p>
<p><strong>var</strong> filteredByProperties = lodash.filter(countries,
["key", "ZA"]); <em>// =&gt; [{"key": "ZA", "name": "South
Africa"}];</em></p>
<p><strong>var</strong> filteredByProperty = lodash.filter(countries,
"active"); <em>// =&gt; [{"key": "ZA", "name": "South
Africa"}];</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 262</p>
<h2 id="chapter-89-csv-parser-in-node-js">Chapter 89: csv parser in node
js</h2>
<p>Reading data in from a csv can be handled in many ways. One solution
is to read the csv file into an array. From</p>
<p>there you can do work on the array.</p>
<p>Section 89.1: Using FS to read in a CSV</p>
<p><a href="https://nodejs.org/api/fs.h">fs is the File System API</a>
in node. We can use the method readFile on our fs variable, pass it a
data.csv file, format</p>
<p>and function that reads and splits the csv for further
processing.</p>
<p>This assumes you have a file named data.csv in the same folder.</p>
<p>'use strict'</p>
<p><strong>const</strong> fs = require('fs');</p>
<p>fs.readFile('data.csv', 'utf8', <strong>function</strong> (err, data)
{</p>
<p><strong>var</strong> dataArray = data.split(<em>/\r?\n/</em>);</p>
<p>console.log(dataArray);</p>
<p>});</p>
<p>You can now use the array like any other to do work on it.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 263</p>
<h2 id="chapter-90-loopback---rest-based">Chapter 90: Loopback - REST
Based</h2>
<p>connector</p>
<p>Rest based connectors and how to deal with them. We all know Loopback
does not provide elegance to REST based</p>
<p>connections</p>
<p>Section 90.1: Adding a web based connector</p>
<p>//This example gets the response from iTunes</p>
<p>{</p>
<p>"rest": {</p>
<p>"name": "rest",</p>
<p>"connector": "rest",</p>
<p>"debug": <strong>true</strong>,</p>
<p>"options": {</p>
<p>"useQuerystring": <strong>true</strong>,</p>
<p>"timeout": 10000,</p>
<p>"headers": {</p>
<p>"accepts": "application/json",</p>
<p>"content-type": "application/json"</p>
<p>}</p>
<p>},</p>
<p>"operations": [</p>
<p>{</p>
<p>"template": {</p>
<p>"method": "GET",</p>
<p>"url": "https://itunes.apple.com/search",</p>
<p>"query": {</p>
<p>"term": "{keyword}",</p>
<p>"country": "{country=IN}",</p>
<p>"media": "{itemType=music}",</p>
<p>"limit": "{limit=10}",</p>
<p>"explicit": "false"</p>
<p>}</p>
<p>},</p>
<p>"functions": {</p>
<p>"search": [</p>
<p>"keyword",</p>
<p>"country",</p>
<p>"itemType",</p>
<p>"limit"</p>
<p>]</p>
<p>}</p>
<p>},</p>
<p>{</p>
<p>"template": {</p>
<p>"method": "GET",</p>
<p>"url": "https://itunes.apple.com/lookup",</p>
<p>"query": {</p>
<p>"id": "{id}"</p>
<p>}</p>
<p>},</p>
<p>"functions": {</p>
<p>"findById": [</p>
<p>"id"</p>
<p>]</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 264</p>
<p>]</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 265</p>
<h2 id="chapter-91-running-node.js-as-a-service">Chapter 91: Running
node.js as a service</h2>
<p>Unlike many web servers, Node isn't installed as a service out of the
box. But in production, it's better to have it run</p>
<p>as a dæmon, managed by an init system.</p>
<p>Section 91.1: Node.js as a systemd dæmon</p>
<p>systemd is the <em>de facto</em> init system in most Linux
distributions. After Node has been configured to run with systemd,</p>
<p>it's possible to use the service command to manage it.</p>
<p>First of all, it needs a config file, let's create it. For Debian
based distros, it will be in /etc/systemd/system/node.service</p>
<p>[Unit]</p>
<p>Description=My super nodejs app</p>
<p>[Service]</p>
<p># <strong>set</strong> the working directory to have consistent
relative paths WorkingDirectory=/<strong>var</strong>/www/app</p>
<p># start the server file (file is relative to WorkingDirectory here)
ExecStart=/usr/bin/node serverCluster.js</p>
<p># <strong>if</strong> process crashes, always <strong>try</strong> to
restart</p>
<p>Restart=always</p>
<p># <strong>let</strong> 500ms between the crash and the restart</p>
<p>RestartSec=500ms</p>
<p># send log tot syslog here (it doesn't compete with other log config
in the app itself) StandardOutput=syslog</p>
<p>StandardError=syslog</p>
<p># nodejs process name in syslog</p>
<p>SyslogIdentifier=nodejs</p>
<p># user and group starting the app</p>
<p>User=www-data</p>
<p>Group=www-data</p>
<p># set the environement (dev, prod…)</p>
<p>Environment=NODE_ENV=production</p>
<p>[Install]</p>
<p># start node at multi user system level (= sysVinit runlevel 3)
WantedBy=multi-user.target</p>
<p>It's now possible to respectively start, stop and restart the app
with:</p>
<p>service node start</p>
<p>service node stop</p>
<p>service node restart</p>
<p>To tell systemd to automatically start node on boot, just type:
systemctl enable node.</p>
<p>That's all, node now runs as a dæmon.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 266</p>
<h2 id="chapter-92-node.js-with-cors">Chapter 92: Node.js with CORS</h2>
<p>Section 92.1: Enable CORS in express.js</p>
<p>As node.js is often used to build API, proper CORS setting can be a
life saver if you want to be able to request the API from different
domains.</p>
<p>In the exemple, we'll set it up for the wider configuration
(authorize all request types from any domain.</p>
<p>In your server.js after initializing express:</p>
<p>// Create express server</p>
<p><strong>const</strong> app = express();</p>
<p>app.use((req, res, next) =&gt; {</p>
<p>res.header('Access-Control-Allow-Origin', '*');</p>
<p>// authorized headers for preflight requests</p>
<p>//
https://developer.mozilla.org/en-US/docs/Glossary/preflight_request</p>
<p>res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With,
Content-Type, Accept');</p>
<p>next();</p>
<p>app.options('*', (req, res) =&gt; {</p>
<p>// allowed XHR methods</p>
<p>res.header('Access-Control-Allow-Methods', 'GET, PATCH, PUT, POST,
DELETE, OPTIONS');</p>
<p>res.send();</p>
<p>});</p>
<p>});</p>
<p>Usually, node is ran behind a proxy on production servers. Therefore
the reverse proxy server (such as Apache or</p>
<p>Nginx) will be responsible for the CORS config.</p>
<p>To conveniently adapt this scenario, it's possible to only enable
node.js CORS when it's in development.</p>
<p>This is easily done by checking NODE_ENV:</p>
<p><strong>const</strong> app = express();</p>
<p><strong>if</strong> (process.env.NODE_ENV === 'development') {</p>
<p>// CORS settings</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 267</p>
<h2 id="chapter-93-getting-started-with-nodes">Chapter 93: Getting
started with Nodes</h2>
<p>profiling</p>
<p>The aim of this post is to get started with profiling nodejs
application and how to make sense of this results to</p>
<p>capture a bug or a memory leak. A nodejs running application is
nothing but a v8 engine processes which is in many terms similar to a
website running on a browser and we can basically capture all the
metrics which are</p>
<p>related to a website process for a node application.</p>
<p>The tool of my preference is chrome devtools or chrome inspector
coupled with the node-inspector.</p>
<p>Section 93.1: Profiling a simple node application</p>
<p><strong>Step 1</strong> : Install the node-inspector package using
npm globally on you machine</p>
<p>$ npm <strong>install</strong>-g node-inspector</p>
<p><strong>Step 2</strong> : Start the node-inspector server</p>
<p>$ node-inspector</p>
<p><strong>Step 3</strong> : Start debugging your node application</p>
<p>$ node --debug-brk your/short/node/script.js</p>
<p><strong>Step 4</strong> <a href="http://127.0.0.1:8080/?port=5858">:
Open http://127.0.0.1:8080/?port=5858 in the Chrome browser. And you
will see a chrom-dev tools</a></p>
<p>interface with your nodejs application source code in left panel .
And since we have used debug break option while debugging the
application the code execution will stop at the first line of code.</p>
<p><img src="media/index-279_1.png" style="width:6.5in;height:3.06944in"
alt="index-279_1.png" /></p>
<p><strong>Step 5</strong> : This is the easy part where you switch to
the profiling tab and start profiling the application . In case you</p>
<p>want get the profile for a particular method or flow make sure the
code execution is break-pointed just before that piece of code is
executed.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 268</p>
<p><img src="media/index-280_1.png" style="width:6.5in;height:3.06944in"
alt="index-280_1.png" /></p>
<p><strong>Step 6</strong> : Once you have recorded your CPU profile or
heap dump/snapshot or heap allocation you can then view the</p>
<p>results in the same window or save them to local drive for later
analysis or comparison with other profiles.</p>
<p>You can use this articles to know how to read the profiles :</p>
<p><a
href="http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art037">Reading
CPU Profiles</a></p>
<p><a href="https://developer.chrome.com/devtools/docs/profiles">Chrome
CPU profiler and Heap profiler</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 269</p>
<h2 id="chapter-94-node.js-performance">Chapter 94: Node.js
Performance</h2>
<p>Section 94.1: Enable gzip</p>
<p><strong>const</strong> http = require('http')</p>
<p><strong>const</strong> fs = require('fs')</p>
<p><strong>const</strong> zlib = require('zlib')</p>
<p>http.createServer((request, response) =&gt; {</p>
<p><strong>const</strong> stream = fs.createReadStream('index.html')
<strong>const</strong> acceptsEncoding =
request.headers['accept-encoding']</p>
<p><strong>let</strong> encoder = {</p>
<p>hasEncoder : <strong>false</strong>,</p>
<p>contentEncoding: {},</p>
<p>createEncoder : () =&gt; <strong>throw</strong> 'There is no
encoder'</p>
<p>}</p>
<p><strong>if</strong> (!acceptsEncoding) {</p>
<p>acceptsEncoding = ''</p>
<p>}</p>
<p><strong>if</strong> (acceptsEncoding.match(<em>/\bdeflate\b/</em>))
{</p>
<p>encoder = {</p>
<p>hasEncoder : <strong>true</strong>,</p>
<p>contentEncoding: { 'content-encoding': 'deflate' },</p>
<p>createEncoder : zlib.createDeflate</p>
<p>}</p>
<p>} <strong>else if</strong>
(acceptsEncoding.match(<em>/\bgzip\b/</em>)) {</p>
<p>encoder = {</p>
<p>hasEncoder : <strong>true</strong>,</p>
<p>contentEncoding: { 'content-encoding': 'gzip' },</p>
<p>createEncoder : zlib.createGzip</p>
<p>}</p>
<p>}</p>
<p>response.writeHead(200, encoder.contentEncoding)</p>
<p><strong>if</strong> (encoder.hasEncoder) {</p>
<p>stream = stream.pipe(encoder.createEncoder())</p>
<p>}</p>
<p>stream.pipe(response)</p>
<p>}).listen(1337)</p>
<p>Section 94.2: Event Loop</p>
<p>Blocking Operation Example</p>
<p><strong>let</strong> loop = (i, max) =&gt; {</p>
<p>while (i &lt; max) i++</p>
<p>return <strong>i</strong></p>
<p>}</p>
<p>// This operation will block Node.js</p>
<p>// Because, it's CPU-bound</p>
<p>// You should be careful about this kind of code</p>
<p>loop(0, 1e+12)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 270</p>
<p><span id="Non_Blocking_IO_Operation_Exampl"
class="anchor"></span>Non-Blocking IO Operation Example</p>
<p><strong>let</strong> i = 0</p>
<p><strong>const</strong> step = max =&gt; {</p>
<p>while (i &lt; max) i++</p>
<p>console.log('i = %d', i)</p>
<p>}</p>
<p><strong>const</strong> tick = max =&gt; process.nextTick(step,
max)</p>
<p>// this will postpone tick run step's while-loop to event loop cycles
// any other IO-bound operation (like filesystem reading) can take place
// in parallel</p>
<p>tick(1e+6)</p>
<p>tick(1e+7)</p>
<p>console.log('this will output before all of tick operations. i = %d',
i) console.log('because tick operations will be postponed')
tick(1e+8)</p>
<p><img src="media/index-282_1.png" style="width:6.5in;height:2.55556in"
alt="index-282_1.png" /></p>
<p>In simpler terms, Event Loop is a single-threaded queue mechanism
which executes your CPU-bound code until</p>
<p>end of its execution and IO-bound code in a non-blocking fashion.</p>
<p><a href="http://libuv.org/">However, Node.js under the carpet uses
multi-threading for some of its operations through libuv</a>
Library.</p>
<p>Performance Considerations</p>
<p>Non-blocking operations will not block the queue and will not effect
the performance of the loop.</p>
<p>However, CPU-bound operations will block the queue, so you should be
careful not to do CPU-bound operations in your Node.js code.</p>
<p>Node.js non-blocks IO because it offloads the work to the operating
system kernel, and when the IO operation supplies data (<em>as an
event</em>), it will notify your code with your supplied callbacks.</p>
<p>Section 94.3: Increase maxSockets</p>
<p>Basics</p>
<p>require('http').globalAgent.maxSockets = 25</p>
<p>// You can change 25 to Infinity or to a different value by
experimenting</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 271</p>
<p>Node.js by default is using maxSockets = <strong>Infinity</strong> <a
href="https://nodejs.org/dist/v0.12.0/docs/api/http.html#http_agent_maxsockets">at
the same time (since v0.12.0). Until Node v0.12.0, the default</a></p>
<p>was maxSockets = 5 <a
href="https://nodejs.org/dist/v0.11.0/docs/api/http.html#http_agent_maxsockets">(see
v0.11.0</a>). So, after more than 5 requests they will be queued. If you
want concurrency,</p>
<p>increase this number.</p>
<p>Setting your own agent</p>
<p>http API is using a <a
href="https://nodejs.org/api/http.html#http_class_http_agent"><strong>"Global
Agent"</strong></a>. You can supply your own agent. Like this:</p>
<p><strong>const</strong> http = require('http')</p>
<p><strong>const</strong> myGloriousAgent = <strong>new</strong>
http.Agent({ keepAlive: <strong>true</strong> })
myGloriousAgent.maxSockets = <strong>Infinity</strong></p>
<p>http.request({ ..., agent: myGloriousAgent }, ...)</p>
<p>Turning off Socket Pooling entirely</p>
<p><strong>const</strong> http = require('http')</p>
<p><strong>const</strong> options = {.....}</p>
<p>options.agent = <strong>false</strong></p>
<p><strong>const</strong> request = http.request(options)</p>
<p>Pitfalls</p>
<p>You should do the same thing for https API if you want the same
effects</p>
<p>Beware that, for example, <a
href="http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/node-configuring-maxsockets.html">AWS</a>
will use 50 instead of <strong>Infinity</strong>.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 272</p>
<h2 id="chapter-95-yarn-package-manager">Chapter 95: Yarn Package
Manager</h2>
<p><a href="https://yarnpkg.com">Yarn is a package manager for Node.js,
similar to npm. While sharing a lot of common ground, there are some
key</a></p>
<p>differences between Yarn and npm.</p>
<p>Section 95.1: Creating a basic package</p>
<p>The yarn init command will walk you through the creation of a
package.json file to configure some information</p>
<p>about your package. This is similar to the npm init command in
npm.</p>
<p>Create and navigate to a new directory to hold your package, and then
run yarn init</p>
<p><strong>mkdir</strong> my-package <strong>&amp;&amp; cd</strong>
my-package</p>
<p>yarn init</p>
<p>Answer the questions that follow in the CLI</p>
<p>question name (my-package): my-package</p>
<p>question version (1.0.0):</p>
<p>question description: A test package</p>
<p>question entry point (index.js):</p>
<p>question repository url:</p>
<p>question author: StackOverflow Documentation</p>
<p>question license (MIT):</p>
<p>success Saved package.json</p>
<p>Done <strong>in</strong> 27.31s.</p>
<p>This will generate a package.json file similar to the following</p>
<p>{</p>
<p>"name": "my-package",</p>
<p>"version": "1.0.0",</p>
<p>"description": "A test package",</p>
<p>"main": "index.js",</p>
<p>"author": "StackOverflow Documentation",</p>
<p>"license": "MIT"</p>
<p>}</p>
<p>Now lets try adding a dependency. The basic syntax for this is yarn
add [package-name]</p>
<p>Run the following to install ExpressJS</p>
<p>yarn add express</p>
<p>This will add a dependencies section to your package.json, and add
ExpressJS</p>
<p>"dependencies": {</p>
<p>"express": "^4.15.2"</p>
<p>}</p>
<p>Section 95.2: Yarn Installation</p>
<p>This example explains the different methods to install Yarn for your
OS.</p>
<p>macOS</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 273</p>
<p>Homebrew</p>
<p>brew update</p>
<p>brew install yarn</p>
<p>MacPorts</p>
<p>sudo <strong>port</strong> install <strong>yarn</strong></p>
<p>Adding Yarn to your PATH</p>
<p>Add the following to your preferred shell profile (.profile, .bashrc,
.zshrc etc)</p>
<p>export PATH="$PATH:`yarn global bin`"</p>
<p>Windows</p>
<p>Installer</p>
<p>First, install Node.js if it is not already installed.</p>
<p>Download the Yarn installer as an .msi <a
href="https://yarnpkg.com/en/docs/install">from the Yarn
website</a>.</p>
<p>Chocolatey</p>
<p>choco install yarn</p>
<p>Linux</p>
<p>Debian / Ubuntu</p>
<p>Ensure Node.js is installed for your distro, or run the following</p>
<p>curl -sL
https:<strong>//</strong>deb.nodesource.com<strong>/</strong>setup_6.x
<strong>| sudo</strong>-E <strong>bash</strong> -<strong>sudo apt-get
install</strong>-y nodejs</p>
<p>Configure the YarnPkg repository</p>
<p>curl -sS
https:<strong>//</strong>dl.yarnpkg.com<strong>/</strong>debian<strong>/</strong>pubkey.gpg
<strong>| sudo apt-key add</strong> -<strong>echo</strong> "deb
https://dl.yarnpkg.com/debian/ stable main" <strong>| sudo tee
/</strong>etc<strong>/</strong>apt<strong>/</strong>sources.list.d<strong>/</strong>yarn.list</p>
<p>Install Yarn</p>
<p>sudo apt-get update &amp;&amp; sudo apt-get install
<strong>yarn</strong></p>
<p>CentOS / Fedora / RHEL</p>
<p>Install Node.js if not already installed</p>
<p><em>curl --silent --location
https:</em>//rpm.nodesource.com/setup_6.x | bash -</p>
<p>Install Yarn</p>
<p><strong>sudo wget</strong>
https:<strong>//</strong>dl.yarnpkg.com<strong>/</strong>rpm<strong>/</strong>yarn.repo
-O
<strong>/</strong>etc<strong>/</strong>yum.repos.d<strong>/</strong>yarn.repo
<strong>sudo yum install</strong> yarn</p>
<p>Arch</p>
<p>Install Yarn via AUR.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 274</p>
<p><span id="Example_using_yaourt" class="anchor"></span>Example using
yaourt:</p>
<p>yaourt -S yarn</p>
<p>Solus</p>
<p><strong>sudo</strong> eopkg <strong>install</strong> yarn</p>
<p>All Distributions</p>
<p>Add the following to your preferred shell profile (.profile, .bashrc,
.zshrc etc)</p>
<p>export PATH="$PATH:`yarn global bin`"</p>
<p>Alternative Method of Installation</p>
<p>Shell script</p>
<p><em>curl -o--L https:</em>//yarnpkg.com/install.sh | bash</p>
<p>or specify a version to install</p>
<p><em>curl -o--L https:</em>//yarnpkg.com/install.sh | bash -s --
--version [version]</p>
<p>Tarball</p>
<p>cd /<strong>opt</strong></p>
<p><strong>wget</strong>
https:<strong>//</strong>yarnpkg.com<strong>/</strong>latest.tar.gz</p>
<p><strong>tar</strong> zvxf latest.tar.gz</p>
<p>Npm</p>
<p>If you already have npm installed, simply run</p>
<p>npm <strong>install</strong>-g yarn</p>
<p>Post Install</p>
<p>Check the installed version of Yarn by running</p>
<p>yarn --version</p>
<p>Section 95.3: Install package with Yarn</p>
<p>Yarn uses the same registry that npm does. That means that every
package that is a available on npm is the same on Yarn.</p>
<p>To install a package, run yarn add package.</p>
<p>If you need a specific version of the package, you can use yarn add
package@version.</p>
<p>If the version you need to install has been tagged, you can use yarn
add package@tag.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 275</p>
<h2 id="chapter-96-oauth-2.0">Chapter 96: OAuth 2.0</h2>
<p>Section 96.1: OAuth 2 with Redis Implementation - grant_type:</p>
<p>password</p>
<p>In this example I will be using oauth2 in rest api with redis
database</p>
<p><strong>Important:</strong> You will need to install redis database
on your machine, Download it from <a
href="https://redis.io/download">here for linux</a></p>
<p><a href="https://github.com/ServiceStack/redis-windows">users and
from here</a> to install windows version, and we will be using redis
manager desktop app, install it</p>
<p>from <a href="https://redisdesktop.com/download">here.</a></p>
<p>Now we have to set our node.js server to use redis database.</p>
<p>Creating Server file: app.js</p>
<p><strong>var</strong> express = require('express'),</p>
<p>bodyParser = require('body-parser'),</p>
<p>oauthserver = require('oauth2-server'); <em>// Would be:
'oauth2-server'</em></p>
<p><strong>var</strong> app = express();</p>
<p>app.use(bodyParser.urlencoded({ extended: <strong>true</strong>
}));</p>
<p>app.use(bodyParser.json());</p>
<p>app.oauth = oauthserver({</p>
<p>model: require('./routes/Oauth2/model'),</p>
<p>grants: ['password', 'refresh_token'],</p>
<p>debug: <strong>true</strong></p>
<p>});</p>
<p>// Handle token grant requests</p>
<p>app.all('/oauth/token', app.oauth.grant());</p>
<p>app.<strong>get</strong>('/secret', app.oauth.authorise(),
<strong>function</strong> (req, res) {</p>
<p>// Will require a valid access_token</p>
<p>res.send('Secret area');</p>
<p>});</p>
<p>app.<strong>get</strong>('/public', <strong>function</strong> (req,
res) {</p>
<p>// Does not require an access_token</p>
<p>res.send('Public area');</p>
<p>});</p>
<p>// Error handling</p>
<p>app.use(app.oauth.errorHandler());</p>
<p>app.listen(3000);</p>
<p>Create Oauth2 model in routes/Oauth2/model.js</p>
<p><strong>var</strong> model = module.exports,</p>
<p>util = require('util'),</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 276</p>
<p>redis = require('redis');</p>
<p><strong>var</strong> db = redis.createClient();</p>
<p><strong>var</strong> keys = {</p>
<p>token: 'tokens:%s',</p>
<p>client: 'clients:%s',</p>
<p>refreshToken: 'refresh_tokens:%s',</p>
<p>grantTypes: 'clients:%s:grant_types',</p>
<p>user: 'users:%s'</p>
<p>};</p>
<p>model.getAccessToken = <strong>function</strong> (bearerToken,
callback) { db.hgetall(util.format(keys.token, bearerToken),
<strong>function</strong> (err, token) {</p>
<p><strong>if</strong> (err) <strong>return</strong> callback(err);</p>
<p><strong>if</strong> (!token) <strong>return</strong> callback();</p>
<p>callback(<strong>null</strong>, {</p>
<p>accessToken: token.accessToken,</p>
<p>clientId: token.clientId,</p>
<p>expires: token.expires ? <strong>new</strong> Date(token.expires) :
<strong>null</strong>,</p>
<p>userId: token.userId</p>
<p>});</p>
<p>});</p>
<p>};</p>
<p>model.getClient = <strong>function</strong> (clientId, clientSecret,
callback) { db.hgetall(util.format(keys.client, clientId),
<strong>function</strong> (err, client) {</p>
<p><strong>if</strong> (err) <strong>return</strong> callback(err);</p>
<p><strong>if</strong> (!client || client.clientSecret !== clientSecret)
<strong>return</strong> callback();</p>
<p>callback(<strong>null</strong>, {</p>
<p>clientId: client.clientId,</p>
<p>clientSecret: client.clientSecret</p>
<p>});</p>
<p>});</p>
<p>};</p>
<p>model.getRefreshToken = <strong>function</strong> (bearerToken,
callback) { db.hgetall(util.format(keys.refreshToken, bearerToken),
<strong>function</strong> (err, token) {</p>
<p><strong>if</strong> (err) <strong>return</strong> callback(err);</p>
<p><strong>if</strong> (!token) <strong>return</strong> callback();</p>
<p>callback(<strong>null</strong>, {</p>
<p>refreshToken: token.accessToken,</p>
<p>clientId: token.clientId,</p>
<p>expires: token.expires ? <strong>new</strong> Date(token.expires) :
<strong>null</strong>,</p>
<p>userId: token.userId</p>
<p>});</p>
<p>});</p>
<p>};</p>
<p>model.grantTypeAllowed = <strong>function</strong> (clientId,
grantType, callback) { db.sismember(util.format(keys.grantTypes,
clientId), grantType, callback); };</p>
<p>model.saveAccessToken = <strong>function</strong> (accessToken,
clientId, expires, user, callback) { db.hmset(util.format(keys.token,
accessToken), {</p>
<p>accessToken: accessToken,</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 277</p>
<p>clientId: clientId,</p>
<p>expires: expires ? expires.toISOString() : <strong>null</strong>,</p>
<p>userId: user.id</p>
<p>}, callback);</p>
<p>};</p>
<p>model.saveRefreshToken = <strong>function</strong> (refreshToken,
clientId, expires, user, callback) {
db.hmset(util.format(keys.refreshToken, refreshToken), {</p>
<p>refreshToken: refreshToken,</p>
<p>clientId: clientId,</p>
<p>expires: expires ? expires.toISOString() : <strong>null</strong>,</p>
<p>userId: user.id</p>
<p>}, callback);</p>
<p>};</p>
<p>model.getUser = <strong>function</strong> (username, password,
callback) { db.hgetall(util.format(keys.user, username),
<strong>function</strong> (err, user) {</p>
<p><strong>if</strong> (err) <strong>return</strong> callback(err);</p>
<p><strong>if</strong> (!user || password !== user.password)
<strong>return</strong> callback();</p>
<p>callback(<strong>null</strong>, {</p>
<p>id: username</p>
<p>});</p>
<p>});</p>
<p>};</p>
<p>You only need to install redis on your machine and run the following
node file</p>
<p>#! /usr/bin/env node</p>
<p><strong>var</strong> db = require('redis').createClient();</p>
<p>db.multi()</p>
<p>.hmset('users:username', {</p>
<p>id: 'username',</p>
<p>username: 'username',</p>
<p>password: 'password'</p>
<p>})</p>
<p>.hmset('clients:client', {</p>
<p>clientId: 'client',</p>
<p>clientSecret: 'secret'</p>
<p><em>})</em>//clientId + clientSecret to base 64 will generate
Y2xpZW50OnNlY3JldA==</p>
<p>.sadd('clients:client:grant_types', [</p>
<p>'password',</p>
<p>'refresh_token'</p>
<p>])</p>
<p>.exec(<strong>function</strong> (errs) {</p>
<p><strong>if</strong> (errs) {</p>
<p>console.error(errs[0].message);</p>
<p><strong>return</strong> process.exit(1);</p>
<p>}</p>
<p>console.log('Client and user added successfully');</p>
<p>process.exit();</p>
<p>});</p>
<p><strong>Note</strong>: This file will set credentials for your
frontend to request token So your request from</p>
<p>Sample redis database after calling the above file:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 278</p>
<p><img src="media/index-290_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-290_1.jpg" /></p>
<p>Request will be as follows:</p>
<p>Sample Call to api</p>
<p><img src="media/index-290_2.jpeg"
style="width:6.5in;height:3.45833in" alt="index-290_2.jpg" /></p>
<p>Header:</p>
<p>1. authorization: Basic followed by the password set when you first
setup redis:</p>
<p>a. clientId + secretId to base64</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 279</p>
<p>2. Data form:</p>
<p>username: user that request token</p>
<p>password: user password</p>
<p>grant_type: depends on what options do you want, I choose passwod
which takes only username</p>
<p>and password to be created in redis, Data on redis will be as
below:</p>
<p>{</p>
<p>"access_token":"1d3fe602da12a086ecb2b996fd7b7ae874120c4f",
"token_type":"bearer", <em>// Will be used to access api + access+token
e.g. bearer</em></p>
<p>1d3fe602da12a086ecb2b996fd7b7ae874120c4f</p>
<p>"expires_in":3600,</p>
<p>"refresh_token":"b6ad56e5c9aba63c85d7e21b1514680bbf711450"</p>
<p>}</p>
<p>So We need to call our api and grab some secured data with our access
token we have just created, see below:</p>
<p><img src="media/index-291_1.jpeg"
style="width:6.5in;height:3.45833in" alt="index-291_1.jpg" /></p>
<p>when token expires api will throw an error that the token expires and
you cannot have access to any of the api calls,</p>
<p>see image below :</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 280</p>
<p><img src="media/index-292_1.jpeg"
style="width:6.5in;height:3.47222in" alt="index-292_1.jpg" /></p>
<p>Lets see what to do if the token expires, Let me first explain it to
you, if access token expires a refresh_token exists in redis that
reference the expired access_token So what we need is to call</p>
<p>oauth/token again with the refresh_token grant_type and set the
authorization to the Basic</p>
<p>clientId:clientsecret ( to base 64 ! ) and finally send the
refresh_token, this will generate a new access_token with a new expiry
data.</p>
<p>The following picture shows how to get a new access token:</p>
<p><img src="media/index-292_2.jpeg"
style="width:6.5in;height:3.47222in" alt="index-292_2.jpg" /></p>
<p>Hope to Help!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 281</p>
<h2 id="chapter-97-node-js-localization">Chapter 97: Node JS
Localization</h2>
<p>Its very easy to maintain localization nodejs express</p>
<p>Section 97.1: using i18n module to maintains localization in</p>
<p>node js app</p>
<p>Lightweight simple translation module with dynamic json storage.
Supports plain vanilla node.js apps and should work with any framework
(like express, restify and probably more) that exposes an app.use()
method passing in res</p>
<p>and req objects. Uses common __('...') syntax in app and templates.
Stores language files in json files compatible to webtranslateit json
format. Adds new strings on-the-fly when first used in your app. No
extra parsing needed.</p>
<p>express + i18n-node + cookieParser and avoid concurrency issues</p>
<p>// usual requirements</p>
<p><strong>var</strong> express = require('express'),</p>
<p>i18n = require('i18n'),</p>
<p>app = module.exports = express();</p>
<p>i18n.configure({</p>
<p>// setup some locales - other locales default to en silently</p>
<p>locales: ['en', 'ru', 'de'],</p>
<p>// sets a custom cookie name to parse locale settings from</p>
<p>cookie: 'yourcookiename',</p>
<p>// where to store json files - defaults to './locales'</p>
<p>directory: __dirname + '/locales'</p>
<p>});</p>
<p>app.configure(<strong>function</strong> () {</p>
<p>// you will need to use cookieParser to expose cookies to
req.cookies</p>
<p>app.use(express.cookieParser());</p>
<p>// i18n init parses req for language headers, cookies, etc.</p>
<p>app.use(i18n.init);</p>
<p>});</p>
<p>// serving homepage</p>
<p>app.<strong>get</strong>('/', <strong>function</strong> (req, res)
{</p>
<p>res.send(res.__('Hello World'));</p>
<p>});</p>
<p>// starting server</p>
<p><strong>if</strong> (!module.parent) {</p>
<p>app.listen(3000);</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 282</p>
<h2 id="chapter-98-deploying-node.js-application">Chapter 98: Deploying
Node.js application</h2>
<p>without downtime.</p>
<p>Section 98.1: Deployment using PM2 without downtime</p>
<p>ecosystem.json</p>
<p>{</p>
<p>"name": "app-name",</p>
<p>"script": "server",</p>
<p>"exec_mode": "cluster",</p>
<p>"instances": 0,</p>
<p>"wait_ready": <strong>true</strong></p>
<p>"listen_timeout": 10000,</p>
<p>"kill_timeout": 5000,</p>
<p>}</p>
<p>wait_ready</p>
<p>Instead of reload waiting for listen event, wait for
process.send('ready');</p>
<p>listen_timeout</p>
<p>Time in ms before forcing a reload if app not listening.</p>
<p>kill_timeout</p>
<p>Time in ms before sending a final SIGKLL.</p>
<p>server.js</p>
<p><strong>const</strong> http = require('http');</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p><strong>const</strong> server = http.Server(app);</p>
<p><strong>const</strong> port = 80;</p>
<p>server.listen(port, <strong>function</strong>() {</p>
<p>process.send('ready');</p>
<p>});</p>
<p>process.on('SIGINT', <strong>function</strong>() {</p>
<p>server.close(<strong>function</strong>() {</p>
<p>process.exit(0);</p>
<p>});</p>
<p>});</p>
<p>You might need to wait for your application to have etablished
connections with your DBs/caches/workers/whatever. PM2 needs to wait
before considering your application as online. To do this, you</p>
<p>need to provide wait_ready: <strong>true</strong> in a process file.
This will make PM2 listen for that event. In your application you</p>
<p>will need to add process.send('ready'); when you want your
application to be considered as ready.</p>
<p>When a process is stopped/restarted by PM2, some system signals are
sent to your process in a given order.</p>
<p>First a SIGINT a signal is sent to your processes, signal you can
catch to know that your process is going to be</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 283</p>
<p>stopped. If your application does not exit by itself before 1.6s
(customizable) it will receive a SIGKILL signal to force the process
exit. So if your application need to clean-up something states or jobs
you can catch the SIGINT signal to</p>
<p>prepare your application to exit.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 284</p>
<h2 id="chapter-99-node.js-express.js-with">Chapter 99: Node.js
(express.js) with</h2>
<p>angular.js Sample code</p>
<p>This example shows how to create a basic express app and then serve
AngularJS.</p>
<p>Section 99.1: Creating our project</p>
<p>We're good to go so, we run, again from console:</p>
<p><strong>mkdir</strong> our_project</p>
<p><strong>cd</strong> our_project</p>
<p>Now we're in the place where our code will live. To create the main
archive of our project you can run</p>
<p>Ok, but how we create the express skeleton project?</p>
<p>It's simple:</p>
<p>npm <strong>install</strong>-g express express-generator</p>
<p>Linux distros and Mac should use <strong>sudo</strong> to install
this because they're installed in the nodejs directory which is only</p>
<p>accessible by the <strong>root</strong> user. If everything went fine
we can, finally, create the express-app skeleton, just run</p>
<p>express</p>
<p>This command will create inside our folder an express example app.
The structure is as follow:</p>
<p>bin/</p>
<p>public/</p>
<p>routes/</p>
<p>views/</p>
<p>app.js</p>
<p>package.json</p>
<p>Now if we run <strong>npm start</strong> an go to <a
href="#Top_of_index_html">http://localhost:3000 we'll see the express
app up and running, fair enough we've</a></p>
<p>generated an express app without too much trouble, but how can we mix
this with AngularJS?.</p>
<p>How express works, briefly?</p>
<p><strong>Express</strong> is a framework built on top of
<strong>Nodejs</strong>, you can see the official documentation at the
<a href="http://expressjs.com">Express Site. But for</a></p>
<p>our purpose we need to know that <strong>Express</strong> is the
responsible when we type, for example,</p>
<p><a href="#Top_of_index_html">http://localhost:3000/home of rendering
the home page of our application. From the recently created app
created</a> we can check:</p>
<p>FILE: routes/index.js</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> router = express.Router();</p>
<p>/* GET home page. */</p>
<p>router.<strong>get</strong>('/', <strong>function</strong>(req, res,
next) {</p>
<p>res.render('index', { title: 'Express' });</p>
<p>});</p>
<p>module.exports = router;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 285</p>
<p>What this code is telling us is that when the user goes to <a
href="#Top_of_index_html">http://localhost:3000 it must render the</a>
<strong>index</strong> view and</p>
<p>pass a <strong>JSON</strong> with a title property and value Express.
But when we check the views directory and open index.jade we can see
this:</p>
<p>extends layout</p>
<p>block content</p>
<p>h1= title</p>
<p>p Welcome to #{title}</p>
<p>This is another powerful Express feature, <strong>template
engines</strong>, they allow you to render content in the page by</p>
<p>passing variables to it or inherit another template so your pages are
more compact and better understandable by</p>
<p>others. The file extension is <strong>.jade</strong> as far as I know
<strong>Jade</strong> changed the name for <strong>Pug</strong>,
basically is the same template</p>
<p>engine but with some updates and core modifications.</p>
<p>Installing Pug and updating Express template engine.</p>
<p>Ok, to start using Pug as the template engine of our project we need
to run:</p>
<p>npm <strong>install</strong>--save pug</p>
<p>This will install Pug as a dependency of our project and save it to
<strong>package.json</strong>. To use it we need to modify the file</p>
<p>app.js<strong>:</strong></p>
<p><strong>var</strong> app = express();</p>
<p>// view engine setup</p>
<p>app.<strong>set</strong>('views', path.join(__dirname, 'views'));</p>
<p>app.<strong>set</strong>('view engine', 'pug');</p>
<p>And replace the line of view engine with pug and that's all. We can
run again our project with <strong>npm start</strong> and we'll</p>
<p>see that everything is working fine.</p>
<p>How AngularJS fits in all of this?</p>
<p>AngularJS is an Javascript <strong>MVW</strong>(Model-View-Whatever)
Framework mainly used to create <strong>SPA</strong>(Simple Page</p>
<p>Application) installing is fairly simple, you can go to <a
href="https://angularjs.org">AngularJS website</a> and download the
latest version which is <strong>v1.6.4</strong>.</p>
<p>After we downloaded AngularJS when should copy the file to our
<strong>public/javascripts</strong> folder inside our project, a little
explanation, this is the folder that serves the static assets of our
site, images, css, javacript files and so on. Of</p>
<p>course this is configurable through the <strong>app.js</strong> file,
but we'll keep it simple. Now we create a file named
<strong>ng-app.js</strong>,</p>
<p>the file where our application will live, inside our javascripts
public folder, just where AngularJS lives. To bring</p>
<p>AngularJS up we need to modify the content of
<strong>views/layout.pug</strong> as follow:</p>
<p>doctype html</p>
<p>html(ng-app='first-app')</p>
<p>head</p>
<p>title= title</p>
<p>link(rel='stylesheet', href='/stylesheets/style.css')
body(ng-controller='indexController')</p>
<p>block content</p>
<p>script(type='text-javascript', src='javascripts/angular.min.js')
script(type='text-javascript', src='javascripts/ng-app.js')</p>
<p>What are we doing here?, well, we're including AngularJS core and our
recently created file <strong>ng-app.js</strong> so when the</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 286</p>
<p>template is rendered it will bring AngularJS up, notice the use of
the <strong>ng-app</strong> directive, this is telling AngularJS
that</p>
<p>this is our application name and it should stick to it.</p>
<p>So, the content of our <strong>ng-app.js</strong> will be:</p>
<p>angular.module('first-app', [])</p>
<p>.controller('indexController', ['$scope', indexController]);</p>
<p><strong>function</strong> indexController($scope) {</p>
<p>$scope.name = 'sigfried';</p>
<p>}</p>
<p>We're using the most basic AngularJS feature here, <strong>two-way
data binding</strong>, this allows us to refresh the content of</p>
<p>our view and controller instantly, this is a very simple explanation,
but you can make a research in Google or</p>
<p>StackOverflow to see how it really works.</p>
<p>So, we have the basic blocks of our AngularJS application, but there
is something we got to do, we need to update our index.pug page to see
the changes of our angular app, let's do it:</p>
<p>extends layout</p>
<p>block content</p>
<p>div(ng-controller='indexController')</p>
<p>h1= title</p>
<p>p Welcome {{name}}</p>
<p>input(type='text' ng-model='name')</p>
<p>Here we're just binding the input to our defined property name in the
AngularJS scope inside our controller:</p>
<p>$scope.name = 'sigfried';</p>
<p>The purpose of this is that whenever we change the text in the input
the paragraph above will update it content inside the {{name}}, this is
called <strong>interpolation</strong>, again another AngularJS feature
to render our content in the</p>
<p>template.</p>
<p>So, all is setup, we can now run <strong>npm start</strong> <a
href="#Top_of_index_html">go to http://localhost:3000 and see our
express application serving the</a></p>
<p>page and AngularJS managing the application frontend.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 287</p>
<h2 id="chapter-100-nodejs-routing">Chapter 100: NodeJs Routing</h2>
<p>How to set up basic Express web server under the node js and
Exploring the Express router.</p>
<p>Section 100.1: Express Web Server Routing</p>
<p>Creating Express Web Server</p>
<p>Express server came handy and it deeps through many user and
community. It is getting popular.</p>
<p>Lets create a Express Server. For Package Management and Flexibility
for Dependency We will use NPM(Node Package Manager).</p>
<p>1. Go to the Project directory and create package.json file.
<em><strong>package.json</strong></em></p>
<p>{</p>
<p>"name": "expressRouter",</p>
<p>"version": "0.0.1",</p>
<p>"scripts": {</p>
<p>"start": "node Server.js"</p>
<p>},</p>
<p>"dependencies": {</p>
<p>"express": "^4.12.3"</p>
<p>}</p>
<p>}</p>
<p>2. Save the file and install the express dependency using following
command <em>npm install</em>. This will create</p>
<p>node_modules in you project directory along with required
dependency.</p>
<p>3. Let's create Express Web Server. Go to the Project directory and
create server.js file. <em><strong>server.js</strong></em></p>
<p><strong>var</strong> express = require("express");</p>
<p><strong>var</strong> app = express();</p>
<p>//Creating Router() object</p>
<p><strong>var</strong> router = express.Router();</p>
<p>// Provide all routes here, this is for Home page.</p>
<p>router.<strong>get</strong>("/",<strong>function</strong>(req,res){</p>
<p>res.json({"message" : "Hello World"});</p>
<p>});</p>
<p>app.use("/api",router);</p>
<p>// Listen to this Port</p>
<p>app.listen(3000,<strong>function</strong>(){</p>
<p>console.log("Live at Port 3000");</p>
<p>});</p>
<p>4. Run the server by typing following command.</p>
<p>node server.js</p>
<p>If Server runs successfully, you will se something like this.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 288</p>
<p><img src="media/index-300_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-300_1.jpg" /></p>
<p>.</p>
<p>5. Now go to the browser or postman and made a request</p>
<p><a href="#Top_of_index_html">http://localhost:3000/api/</a></p>
<p>The output will be</p>
<p><img src="media/index-300_2.jpeg"
style="width:6.5in;height:3.65278in" alt="index-300_2.jpg" /></p>
<p>.</p>
<p>That is all, the basic of Express routing.</p>
<p>Now let's handle the GET,POST etc.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 289</p>
<p>Change yous server.js file like</p>
<p><strong>var</strong> express = require("express");</p>
<p><strong>var</strong> app = express();</p>
<p>//Creating Router() object</p>
<p><strong>var</strong> router = express.Router();</p>
<p>// Router middleware, mentioned it before defining routes.</p>
<p>router.use(<strong>function</strong>(req,res,next) {</p>
<p>console.log("/" + req.method);</p>
<p>next();</p>
<p>});</p>
<p>// Provide all routes here, this is for Home page.</p>
<p>router.<strong>get</strong>("/",<strong>function</strong>(req,res){</p>
<p>res.json({"message" : "Hello World"});</p>
<p>});</p>
<p>app.use("/api",router);</p>
<p>app.listen(3000,<strong>function</strong>(){</p>
<p>console.log("Live at Port 3000");</p>
<p>});</p>
<p>Now if you restart the server and made the request to</p>
<p><em>http:</em>//localhost:3000/api/</p>
<p>You Will see something like</p>
<p><img src="media/index-301_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-301_1.jpg" /></p>
<p>Accessing Parameter in Routing</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 290</p>
<p>You can access the parameter from url also, Like <a
href="http://example.com/api/:name/"><em>http://example.com/api/:name/</em></a>.
So name parameter can be access. Add the following code into your
server.js</p>
<p>router.<strong>get</strong>("/user/:id",<strong>function</strong>(req,res){</p>
<p>res.json({"message" : "Hello "+req.params.id});</p>
<p>});</p>
<p>Now restart server and go to [<a
href="#Top_of_index_html">http://localhost:3000/api/user/Adem][4]</a>,
the output will be like</p>
<p><img src="media/index-302_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-302_1.jpg" /></p>
<p>.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 291</p>
<h2 id="chapter-101-creating-a-node.js-library">Chapter 101: Creating a
Node.js Library</h2>
<p>that Supports Both Promises and Error-</p>
<p>First Callbacks</p>
<p>Many people like working with promises and/or async/await syntax, but
when writing a module it would be useful</p>
<p>to some programmers to support classic callback style methods as
well. Rather than creating two modules, or two sets of functions, or
having the programmer promisify your module, your module can support
both programming</p>
<p>methods at one using bluebird's asCallback() or Q's nodeify().</p>
<p>Section 101.1: Example Module and Corresponding Program</p>
<p>using Bluebird</p>
<p>math.js</p>
<p>'use strict';</p>
<p><strong>const</strong> Promise = require('bluebird');</p>
<p>module.exports = {</p>
<p>// example of a callback-only method</p>
<p>callbackSum: <strong>function</strong>(a, b, callback) {</p>
<p><strong>if</strong> (<strong>typeof</strong> a !== 'number')</p>
<p><strong>return</strong> callback(<strong>new</strong> Error('"a" must
be a number'));</p>
<p><strong>if</strong> (<strong>typeof</strong> b !== 'number')</p>
<p><strong>return</strong> callback(<strong>new</strong> Error('"b" must
be a number'));</p>
<p><strong>return</strong> callback(<strong>null</strong>, a + b);</p>
<p>},</p>
<p>// example of a promise-only method</p>
<p>promiseSum: <strong>function</strong>(a, b) {</p>
<p><strong>return new</strong>
Promise(<strong>function</strong>(resolve, reject) {</p>
<p><strong>if</strong> (<strong>typeof</strong> a !== 'number')</p>
<p><strong>return</strong> reject(<strong>new</strong> Error('"a" must
be a number'));</p>
<p><strong>if</strong> (<strong>typeof</strong> b !== 'number')</p>
<p><strong>return</strong> reject(<strong>new</strong> Error('"b" must
be a number'));</p>
<p>resolve(a + b);</p>
<p>});</p>
<p>},</p>
<p>// a method that can be used as a promise or with callbacks</p>
<p>sum: <strong>function</strong>(a, b, callback) {</p>
<p><strong>return new</strong>
Promise(<strong>function</strong>(resolve, reject) {</p>
<p><strong>if</strong> (<strong>typeof</strong> a !== 'number')</p>
<p><strong>return</strong> reject(<strong>new</strong> Error('"a" must
be a number'));</p>
<p><strong>if</strong> (<strong>typeof</strong> b !== 'number')</p>
<p><strong>return</strong> reject(<strong>new</strong> Error('"b" must
be a number'));</p>
<p>resolve(a + b);</p>
<p>}).asCallback(callback);</p>
<p>},</p>
<p>};</p>
<p>index.js</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 292</p>
<p>'use strict';</p>
<p><strong>const</strong> math = require('./math');</p>
<p>// classic callbacks</p>
<p>math.callbackSum(1, 3, <strong>function</strong>(err, result) {</p>
<p><strong>if</strong> (err)</p>
<p>console.log('Test 1: ' + err);</p>
<p>else</p>
<p>console.log('Test 1: the answer is ' + result);</p>
<p>});</p>
<p>math.callbackSum(1, 'd', <strong>function</strong>(err, result) {</p>
<p><strong>if</strong> (err)</p>
<p>console.log('Test 2: ' + err);</p>
<p>else</p>
<p>console.log('Test 2: the answer is ' + result);</p>
<p>});</p>
<p>// promises</p>
<p>math.promiseSum(2, 5)</p>
<p>.then(<strong>function</strong>(result) {</p>
<p>console.log('Test 3: the answer is ' + result);</p>
<p>})</p>
<p><strong>.</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>console.log('Test 3: ' + err);</p>
<p>});</p>
<p>math.promiseSum(1)</p>
<p>.then(<strong>function</strong>(result) {</p>
<p>console.log('Test 4: the answer is ' + result);</p>
<p>})</p>
<p><strong>.</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>console.log('Test 4: ' + err);</p>
<p>});</p>
<p>// promise/callback method used like a promise</p>
<p>math.sum(8, 2)</p>
<p>.then(<strong>function</strong>(result) {</p>
<p>console.log('Test 5: the answer is ' + result);</p>
<p>})</p>
<p><strong>.</strong>catch<strong>(</strong>function<strong>(err)
{</strong></p>
<p>console.log('Test 5: ' + err);</p>
<p>});</p>
<p>// promise/callback method used with callbacks</p>
<p>math.sum(7, 11, <strong>function</strong>(err, result) {</p>
<p><strong>if</strong> (err)</p>
<p>console.log('Test 6: ' + err);</p>
<p>else</p>
<p>console.log('Test 6: the answer is ' + result);</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 293</p>
<p>// promise/callback method used like a promise with async/await
syntax</p>
<p>(async () =&gt; {</p>
<p>try <strong>{</strong></p>
<p><strong>let</strong> x = await math.sum(6, 3);</p>
<p>console.log('Test 7a: ' + x);</p>
<p><strong>let</strong> y = await math.sum(4, 's');</p>
<p>console.log('Test 7b: ' + y);</p>
<p>} <strong>catch</strong>(err) {</p>
<p>console.log(err.message);</p>
<p>}</p>
<p>})();</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 294</p>
<h2 id="chapter-102-project-structure">Chapter 102: Project
Structure</h2>
<p>The structure of nodejs project is influenced by the personal
preferences, project's architecture and module</p>
<p>injection strategy being used.Also on event based arc' which uses
dynamic module instantiation mechanism. To have a MVC structure it is
imperative to separate out the server side and client side source code
as the client side</p>
<p>code will probably be minimized and sent to browser and is public in
its basic nature. And the server side or back-end will provide API to
perform CRUD operations</p>
<p>Section 102.1: A simple nodejs application with MVC and API</p>
<p>The first major distinction is between the dynamically generated
directories which will be used for hosting and source directories.</p>
<p>The source directories will have a config file or folder depending on
the amount of configuration you may have . This includes the environment
configuration and business logic configuration which you may choose</p>
<p>to put inside config directory.</p>
<p>|-- Config</p>
<p>|-- config.json</p>
<p>|-- appConfig</p>
<p>|-- pets.config</p>
<p>|-- payment.config</p>
<p>Now the most vital directories where we distinguish between the
server side/backend and the frontend</p>
<p>modules . The 2 directories <em>server</em> and <em>webapp</em>
represent the backend and frontend respectively which we can choose to
put inside a source directory viz. <em>src</em>.</p>
<p>You can go with different names as per personal choice for server or
webapp depending on what</p>
<p>makes sense for you. Make sure you don't want to make it too long or
to complex as it is in the end</p>
<p>internal project structure.</p>
<p>Inside the <em>server</em> directory you can have the controller ,the
App.js/index.js which will be you main nodejs file</p>
<p>and start point .The server dir. can also have the <em>dto</em> dir
which holds all the data transfer objects which will be usd by API
controllers.</p>
<p>|-- server</p>
<p>|-- dto</p>
<p>|-- pet.js</p>
<p>|-- payment.js</p>
<p>|-- controller</p>
<p>|-- PetsController.js</p>
<p>|-- PaymentController.js</p>
<p>|-- App.js</p>
<p>The webapp directory can be divided into two major parts
<em>public</em> and <em>mvc</em> , this is again influenced by what</p>
<p><a href="http://browserify.org/">build strategy you want to use. We
are using browserfiy the build the MVC part of webapp and minimize
the</a> contents from <em>mvc</em> directory simply put.</p>
<p>|-- webapp |-- public |-- mvc</p>
<p>Now the public directory can contain all the static
resources,images,css(you can have saas files as well) and</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 295</p>
<p>most importantly the HTML files .</p>
<p>|-- public</p>
<p><em>|-- build</em> // will contianed minified scripts(mvc)</p>
<p>|-- images</p>
<p>|-- mouse.jpg</p>
<p>|-- cat.jpg</p>
<p>|-- styles</p>
<p>|-- style.css</p>
<p>|-- views</p>
<p>|-- petStore.html</p>
<p>|-- paymentGateway.html</p>
<p>|-- header.html</p>
<p>|-- footer.html</p>
<p>|-- index.html</p>
<p>The <em>mvc</em> directory will contain the front-end logic including
the <em>models</em>,the <em>view controllers</em> and any other
<em>utils</em> modules you may need as part of UI. Also the index.js or
shell.js whichever may suite you is part of this</p>
<p>directory as well.</p>
<p>|-- mvc</p>
<p>|-- controllers</p>
<p>|-- Dashborad.js</p>
<p>|-- Help.js</p>
<p>|-- Login.js</p>
<p>|-- utils</p>
<p>|-- index.js</p>
<p>So in conclusion the entire project structure will look like
below.And a simple build task like <em>gulp browserify</em> will</p>
<p>minify the mvc scripts and publish in <em>public</em> directory. We
can then provide this public directory as static resource</p>
<p><em><strong>via</strong></em> express.use(satic('public' ))
<em><strong>api.</strong></em></p>
<p>|-- node_modules</p>
<p>|-- src</p>
<p>|-- server</p>
<p>|-- controller</p>
<p>|-- App.js <em>// node app</em></p>
<p>|-- webapp</p>
<p>|-- public</p>
<p>|-- styles</p>
<p>|-- images</p>
<p>|-- index.html</p>
<p>|-- mvc</p>
<p>|-- controller</p>
<p>|-- shell.js <em>// mvc shell</em></p>
<p>|-- config</p>
<p>|-- Readme.md</p>
<p>|-- .gitignore</p>
<p>|-- package.json</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 296</p>
<h2 id="chapter-103-avoid-callback-hell">Chapter 103: Avoid callback
hell</h2>
<p>Section 103.1: Async module</p>
<p>The source is available for download from GitHub. Alternatively, you
can install using npm:</p>
<p>$ npm install --save async</p>
<p>As well as using Bower:</p>
<p>$ bower install async</p>
<p>Example:</p>
<p><strong>var</strong> async = require("async");</p>
<p>async.parallel([</p>
<p><strong>function</strong>(callback) { ... },</p>
<p><strong>function</strong>(callback) { ... }</p>
<p>], <strong>function</strong>(err, results) {</p>
<p>// optional callback</p>
<p>});</p>
<p>Section 103.2: Async Module</p>
<p>Thankfully, libraries like Async.js exist to try and curb the
problem. Async adds a thin layer of functions on top of your code, but
can greatly reduce the complexity by avoiding callback nesting.</p>
<p>Many helper methods exist in Async that can be used in different
situations, like series, parallel, waterfall, etc. Each function has a
specific use-case, so take some time to learn which one will help in
which situations.</p>
<p>As good as Async is, like anything, its not perfect. Its very easy to
get carried away by combining series, parallel, forever, etc, at which
point you're right back to where you started with messy code. Be careful
not to prematurely</p>
<p>optimize. Just because a few async tasks can be run in parallel
doesn't always mean they should. In reality, since Node is only
single-threaded, running tasks in parallel on using Async has little to
no performance gain.</p>
<p><a href="https://github.com/caolan/async">The source is available for
download from https://github.com/caolan/async . Alternatively, you can
install using</a> npm:</p>
<p>$ npm install --save async</p>
<p>As well as using Bower:</p>
<p>$ bower install async</p>
<p>Async's waterfall Example:</p>
<p><strong>var</strong> fs = require('fs');</p>
<p><strong>var</strong> async = require('async');</p>
<p><strong>var</strong> myFile = '/tmp/test';</p>
<p>async.waterfall([</p>
<p><strong>function</strong>(callback) {</p>
<p>fs.readFile(myFile, 'utf8', callback);</p>
<p>},</p>
<p><strong>function</strong>(txt, callback) {</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 297</p>
<p>txt = txt + '<strong>\n</strong>Appended something!';</p>
<p>fs.writeFile(myFile, txt, callback);</p>
<p>}</p>
<p>], <strong>function</strong> (err, result) {</p>
<p><strong>if</strong>(err) <strong>return</strong>
console.log(err);</p>
<p>console.log('Appended text!');</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 298</p>
<h2 id="chapter-104-arduino-communication-with">Chapter 104: Arduino
communication with</h2>
<p>nodeJs</p>
<p>Way to show how Node.Js can communicate with Arduino Uno.</p>
<p>Section 104.1: Node Js communication with Arduino via</p>
<p>serialport</p>
<p>Node js code</p>
<p>Sample to start this topic is Node.js server communicating with
Arduino via serialport.</p>
<p>npm <strong>install</strong> express --save</p>
<p>npm <strong>install</strong> serialport --save</p>
<p>Sample app.js:</p>
<p><strong>const</strong> express = require('express');</p>
<p><strong>const</strong> app = express();</p>
<p><strong>var</strong> SerialPort = require("serialport");</p>
<p><strong>var</strong> port = 3000;</p>
<p><strong>var</strong> arduinoCOMPort = "COM3";</p>
<p><strong>var</strong> arduinoSerialPort = <strong>new</strong>
SerialPort(arduinoCOMPort, { baudrate: 9600</p>
<p>});</p>
<p>arduinoSerialPort.on('open',<strong>function</strong>() {</p>
<p>console.log('Serial Port ' + arduinoCOMPort + ' is opened.'); });</p>
<p>app.<strong>get</strong>('/', <strong>function</strong> (req, res)
{</p>
<p><strong>return</strong> res.send('Working');</p>
<p>})</p>
<p>app.<strong>get</strong>('/:action', <strong>function</strong> (req,
res) {</p>
<p><strong>var</strong> action = req.params.action ||
req.param('action');</p>
<p><strong>if</strong>(action == 'led'){</p>
<p>arduinoSerialPort.write("w");</p>
<p><strong>return</strong> res.send('Led light is on!');</p>
<p>}</p>
<p><strong>if</strong>(action == 'off') {</p>
<p>arduinoSerialPort.write("t");</p>
<p><strong>return</strong> res.send("Led light is off!");</p>
<p>}</p>
<p><strong>return</strong> res.send('Action: ' + action);</p>
<p>});</p>
<p>app.listen(port, <strong>function</strong> () {</p>
<p>console.log('Example app listening on port http://0.0.0.0:' + port +
'!');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 299</p>
<p>});</p>
<p>Starting sample express server:</p>
<p>node app.js</p>
<p>Arduino code</p>
<p>// the setup function runs once when you press reset or power the
board <em><strong>void</strong> setup() {</em></p>
<p>// initialize digital pin LED_BUILTIN as an output.</p>
<p><em>Serial.begin(9600);</em> // Begen listening on port 9600 for
serial</p>
<p>pinMode(LED_BUILTIN, OUTPUT);</p>
<p>digitalWrite(LED_BUILTIN, LOW);</p>
<p>}</p>
<p>// the loop function runs over and over again forever
<em><strong>void</strong> loop() {</em></p>
<p><strong>if</strong>(Serial.available() &gt; 0) <em>// Read from
serial port</em></p>
<p>{</p>
<p><em>char ReaderFromNode;</em> // Store current character</p>
<p>ReaderFromNode = (char) Serial.read();</p>
<p>convertToState(ReaderFromNode); <em>// Convert character to
state</em></p>
<p>}</p>
<p>delay(1000);</p>
<p>}</p>
<p><strong>void</strong> convertToState(char chr) {</p>
<p><strong>if</strong>(chr=='o'){</p>
<p>digitalWrite(LED_BUILTIN, HIGH);</p>
<p>delay(100);</p>
<p>}</p>
<p><strong>if</strong>(chr=='f'){</p>
<p>digitalWrite(LED_BUILTIN, LOW);</p>
<p>delay(100);</p>
<p>}</p>
<p>}</p>
<p>Starting Up</p>
<p>1. Connect the arduino to your machine.</p>
<p>2. Start the server</p>
<p>Control the build in led via node js express server.</p>
<p>To turn on the led:</p>
<p><em>http:</em>//0.0.0.0:3000/led</p>
<p>To turn off the led:</p>
<p><em>http:</em>//0.0.0.0:3000/off</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 300</p>
<h2 id="chapter-105-n-api">Chapter 105: N-API</h2>
<p>The N-API is a new and better way for creating native module for
NodeJS. N-API is in early stage so it may have</p>
<p>inconsistent documentation.</p>
<p>Section 105.1: Hello to N-API</p>
<p>This module register hello function on hello module. hello function
prints Hello world on console with printf and</p>
<p>return 1373 from native function into javascript caller.</p>
<p>#include</p>
<p>#include</p>
<p>napi_value say_hello(napi_env env, napi_callback_info info) {</p>
<p>napi_value retval;</p>
<p>printf("Hello world<strong>\n</strong>");</p>
<p>napi_create_number(env, 1373, &amp;retval);</p>
<p>return retval;</p>
<p>}</p>
<p>void init(napi_env env, napi_value exports, napi_value module, void*
priv) {</p>
<p>napi_status status;</p>
<p>napi_property_descriptor desc = {</p>
<p>/*</p>
<p>* String describing the key for the property, encoded as UTF8.</p>
<p>*/</p>
<p>.utf8name = "hello",</p>
<p>/*</p>
<p>* Set this to make the property descriptor object's value
property</p>
<p>* to be a JavaScript function represented by method.</p>
<p>* If this is passed in, set value, getter and setter to NULL (since
these members won't be used).</p>
<p>*/</p>
<p>.method = say_hello,</p>
<p>/*</p>
<p>* A function to call when a get access of the property is
performed.</p>
<p>* If this is passed in, set value and method to NULL (since these
members won't be used).</p>
<p>* The given function is called implicitly by the runtime when the
property is accessed</p>
<p>* from JavaScript code (or if a get on the property is performed
using a N-API call).</p>
<p>*/</p>
<p>.getter = NULL,</p>
<p>/*</p>
<p>* A function to call when a set access of the property is
performed.</p>
<p>* If this is passed in, set value and method to NULL (since these
members won't be used).</p>
<p>* The given function is called implicitly by the runtime when the
property is set</p>
<p>* from JavaScript code (or if a set on the property is performed
using a N-API call).</p>
<p>*/</p>
<p>.setter = NULL,</p>
<p>/*</p>
<p>* The value that's retrieved by a get access of the property if the
property is a data property.</p>
<p>* If this is passed in, set getter, setter, method and data to NULL
(since these members won't be used).</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 301</p>
<p>*/</p>
<p>.value = NULL,</p>
<p>/*</p>
<p>* The attributes associated with the particular property. See
napi_property_attributes.</p>
<p>*/</p>
<p>.attributes = napi_default,</p>
<p>/*</p>
<p>* The callback data passed into method, getter and setter if this
function is invoked.</p>
<p>*/</p>
<p>.data = NULL</p>
<p>};</p>
<p>/*</p>
<p>* This method allows the efficient definition of multiple properties
on a given object.</p>
<p>*/</p>
<p>status = napi_define_properties(env, exports, 1, &amp;desc);</p>
<p>if (status != napi_ok)</p>
<p>return;</p>
<p>}</p>
<p>NAPI_MODULE(hello, init)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 302</p>
<h2 id="chapter-106-multithreading">Chapter 106: Multithreading</h2>
<p>Node.js has been designed to be single threaded. So for all practical
purposes, applications that launch with Node</p>
<p>will run on a single thread.</p>
<p>However, Node.js itself runs multi-threaded. I/O operations and the
like will run from a thread pool. Further will any</p>
<p>instance of a node application run on a different thread, therefore
to run multi-threaded applications one launches multiple instances.</p>
<p>Section 106.1: Cluster</p>
<p>The cluster module allows one to start the same application multiple
times.</p>
<p>Clustering is desirable when the different instances have the same
flow of execution and don't depend on one another. In this scenario, you
have one master that can start forks and the forks (or children). The
children work</p>
<p>independently and have their one space of Ram and Event Loop.</p>
<p>Setting up clusters can be beneficial for websites / APIs. Any thread
can serve any customer, as it doesn't depend on</p>
<p>other threads. A Database (like Redis) would be used to share
Cookies, as <strong>variables can't be shared!</strong> between the</p>
<p>threads.</p>
<p>// runs in each instance</p>
<p><strong>var</strong> cluster = require('cluster');</p>
<p><strong>var</strong> numCPUs = require('os').cpus().length;</p>
<p>console.log('I am always called');</p>
<p><strong>if</strong> (cluster.isMaster) {</p>
<p>// runs only once (within the master);</p>
<p>console.log('I am the master, launching workers!');</p>
<p><strong>for</strong>(<strong>var</strong> i = 0; i &lt; numCPUs; i++)
cluster.fork();</p>
<p>} <strong>else</strong> {</p>
<p>// runs in each fork</p>
<p>console.log('I am a fork!');</p>
<p>// here one could start, as an example, a web server</p>
<p>}</p>
<p>console.log('I am always called as well');</p>
<p>Section 106.2: Child Process</p>
<p>Child Processes are the way to go when one wants to run processes
independently with different initialization and concerns. Like forks in
clusters, a child_process runs in its thread, but unlike forks, it has a
way to communicate</p>
<p>with its parent.</p>
<p>The communication goes both ways, so parent and child can listen for
messages and send messages.</p>
<p><strong>Parent</strong> (../parent.js)</p>
<p><strong>var</strong> child_process = require('child_process');</p>
<p>console.log('[Parent]', 'initalize');</p>
<p><strong>var</strong> child1 = child_process.fork(__dirname +
'/child');</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 303</p>
<p>child1.on('message', <strong>function</strong>(msg) {</p>
<p>console.log('[Parent]', 'Answer from child: ', msg); });</p>
<p>// one can send as many messages as one want</p>
<p>child1.send('Hello'); <em>// Hello to you too :)</em></p>
<p>child1.send('Hello'); <em>// Hello to you too :)</em></p>
<p>// one can also have multiple children</p>
<p><strong>var</strong> child2 = child_process.fork(__dirname +
'/child');</p>
<p><strong>Child</strong> (../child.js)</p>
<p>// here would one initialize this child</p>
<p>// this will be executed only once</p>
<p>console.log('[Child]', 'initalize');</p>
<p>// here one listens for new tasks from the parent</p>
<p>process.on('message', <strong>function</strong>(messageFromParent)
{</p>
<p>//do some intense work here</p>
<p>console.log('[Child]', 'Child doing some intense work');</p>
<p><strong>if</strong>(messageFromParent == 'Hello') process.send('Hello
to you too :)'); <strong>else</strong> process.send('what?');</p>
<p>})</p>
<p><a
href="https://nodejs.org/api/child_process.html#child_process_class_childprocess">Next
to message one can listen to many events</a> like 'error', 'connected'
or 'disconnect'.</p>
<p>Starting a child process has a certain cost associated with it. One
would want to spawn as few of them as possible.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 304</p>
<h2 id="chapter-107-windows-authentication">Chapter 107: Windows
authentication</h2>
<p>under node.js</p>
<p>Section 107.1: Using activedirectory</p>
<p><a href="https://github.com/gheeres/node-activedirectory">The example
below is taken from the full docs, available here (GitHub) or</a> <a
href="https://npmdoc.github.io/node-npmdoc-activedirectory/build/apidoc.html">here
(NPM).</a></p>
<p>Installation</p>
<p>npm <strong>install</strong>--save activedirectory</p>
<p>Usage</p>
<p>// Initialize</p>
<p><strong>var</strong> ActiveDirectory =
require('activedirectory');</p>
<p><strong>var</strong> config = {</p>
<p>url: 'ldap://dc.domain.com',</p>
<p>baseDN: 'dc=domain,dc=com'</p>
<p>};</p>
<p><strong>var</strong> ad = <strong>new</strong>
ActiveDirectory(config);</p>
<p><strong>var</strong> username = 'john.smith@domain.com';</p>
<p><strong>var</strong> password = 'password';</p>
<p>// Authenticate</p>
<p>ad.authenticate(username, password, <strong>function</strong>(err,
auth) {</p>
<p><strong>if</strong> (err) {</p>
<p>console.log('ERROR: '+JSON.stringify(err));</p>
<p>return<strong>;</strong></p>
<p>}</p>
<p><strong>if</strong> (auth) {</p>
<p>console.log('Authenticated!');</p>
<p>}</p>
<p>else <strong>{</strong></p>
<p>console.log('Authentication failed!');</p>
<p>}</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 305</p>
<h2 id="chapter-108-require">Chapter 108: Require()</h2>
<p>This documentation focuses on explaining the uses and of the
require() <a href="https://nodejs.org/en/">statement that NodeJS</a>
includes in their</p>
<p>language.</p>
<p>Require is an import of certain files or packages used with NodeJS's
modules. It is used to improve code structure</p>
<p>and uses. require() is used on files that are installed locally, with
a direct route from the file that is require'ing.</p>
<p>Section 108.1: Beginning require() use with a function and file</p>
<p>Require is a statement that Node interprets as, in some sense, a
getter function. For example, say you have a file</p>
<p>named analysis.js, and the inside of your file looks like this,</p>
<p><strong>function</strong> analyzeWeather(weather_data) {</p>
<p>console.log('Weather information for ' + weather_data.time + ': ');
console.log('Rainfall: ' + weather_data.precip);</p>
<p>console.log('Temperature: ' + weather_data.temp);</p>
<p>//More weather_data analysis/printing...</p>
<p>}</p>
<p>This file contains only the method, analyzeWeather(weather_data). If
we want to use this function, it must be either used inside of this
file, or copied to the file it wants to be used by. However, Node has
included a very useful</p>
<p><a href="https://nodejs.org/api/modules.html">tool to help with code
and file organization, which is modules</a>.</p>
<p>In order to utilize our function, we must first export the function
through a statement at the beginning. Our new</p>
<p>file looks like this,</p>
<p>module.exports = {</p>
<p>analyzeWeather: analyzeWeather</p>
<p>}</p>
<p><strong>function</strong> analyzeWeather(weather_data) {</p>
<p>console.log('Weather information for ' + weather_data.time + ': ');
console.log('Rainfall: ' + weather_data.precip);</p>
<p>console.log('Temperature: ' + weather_data.temp);</p>
<p>//More weather_data analysis/printing...</p>
<p>}</p>
<p>With this small module.exports statement, our function is now ready
for use outside of the file. All that is left to do</p>
<p>is to use require().</p>
<p>When require'ing a function or file, the syntax is very similar. It
is usually done at the beginning of the file and set</p>
<p>to <strong>var</strong>'s or <a
href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"><strong>const</strong></a>'s
for use throughout the file. For example, we have another file (on the
same level as analyze.js named handleWeather.js that looks like
this,</p>
<p><strong>const</strong> analysis = require('./analysis.js');</p>
<p>weather_data = {</p>
<p>time: '01/01/2001',</p>
<p>precip: 0.75,</p>
<p>temp: 78,</p>
<p>//More weather data...</p>
<p>};</p>
<p>analysis.analyzeWeather(weather_data);</p>
<p>In this file, we are using require() to grab our analysis.js file.
When used, we just call the variable or constant</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 306</p>
<p><span id="assigned_to_this_require_and_use"
class="anchor"></span>assigned to this require and use whatever function
inside that is exported.</p>
<p>Section 108.2: Beginning require() use with an NPM package</p>
<p>Node's require <a
href="https://docs.npmjs.com/how-npm-works/packages">is also very
helpful when used in tandem with an NPM package. Say, for example, you
would like to</a></p>
<p><a href="https://www.npmjs.com/package/request">use the NPM package
require in a file named</a> getWeather.js<a
href="https://docs.npmjs.com/cli/install">. After NPM installing your
package through your</a> command line (git install request), you are
ready to use it. Your getWeather.js file might like look this,</p>
<p><strong>var</strong> https = require('request');</p>
<p>//Construct your url variable...</p>
<p>https.<strong>get</strong>(url, <strong>function</strong>(error,
response, body) {</p>
<p><strong>if</strong> (error) {</p>
<p>console.log(error);</p>
<p>} <strong>else</strong> {</p>
<p>console.log('Response =&gt; ' + response);</p>
<p>console.log('Body =&gt; ' + body);</p>
<p>}</p>
<p>});</p>
<p>When this file is run, it first require's (imports) the package you
just installed called request. Inside of the request file, there are
many functions you now have access to, one of which is called
<strong>get</strong>. In the next couple lines, the</p>
<p><a
href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods">function
is used in order to make an HTTP GET request.</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 307</p>
<h2 id="chapter-109-route-controller-service">Chapter 109:
Route-Controller-Service</h2>
<p>structure for ExpressJS</p>
<p>Section 109.1: Model-Routes-Controllers-Services Directory</p>
<p>Structure</p>
<p>├───models</p>
<p>│ ├───user.model.js</p>
<p>├───routes</p>
<p>│ ├───user.route.js</p>
<p>├───services</p>
<p>│ ├───user.service.js</p>
<p>├───controllers</p>
<p>│ ├───user.controller.js</p>
<p>For modular code structure the logic should be divided into these
directories and files.</p>
<p><strong>Models</strong> - The schema definition of the Model</p>
<p><strong>Routes</strong> - The API routes maps to the Controllers</p>
<p><strong>Controllers</strong> - The controllers handles all the logic
behind validating request parameters, query, Sending</p>
<p>Responses with correct codes.</p>
<p><strong>Services</strong> - The services contains the database
queries and returning objects or throwing errors</p>
<p>This coder will end up writing more codes. But at the end the codes
will be much more maintainable and separated.</p>
<p>Section 109.2: Model-Routes-Controllers-Services Code</p>
<p>Structure</p>
<p>user.model.js</p>
<p><strong>var</strong> mongoose = require('mongoose')</p>
<p><strong>const</strong> UserSchema = <strong>new</strong>
mongoose.Schema({</p>
<p>name: String</p>
<p>})</p>
<p><strong>const</strong> User = mongoose.model('User', UserSchema)</p>
<p>module.exports = User;</p>
<p>user.routes.js</p>
<p><strong>var</strong> express = require('express');</p>
<p><strong>var</strong> router = express.Router();</p>
<p><strong>var</strong> UserController =
require('../controllers/user.controller')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 308</p>
<p>router.<strong>get</strong>('/', UserController.getUsers)</p>
<p>module.exports = router;</p>
<p>user.controllers.js</p>
<p><strong>var</strong> UserService =
require('../services/user.service')</p>
<p>exports.getUsers = async <strong>function</strong> (req, res, next)
{</p>
<p>// Validate request parameters, queries using express-validator</p>
<p><strong>var</strong> page = req.params.page ? req.params.page :
1;</p>
<p><strong>var</strong> limit = req.params.limit ? req.params.limit :
10; <strong>try</strong> {</p>
<p><strong>var</strong> users = await UserService.getUsers({}, page,
limit) <strong>return</strong> res.status(200).json({ status: 200, data:
users, message: "Succesfully Users</p>
<p>Retrieved" });</p>
<p>} <strong>catch</strong> (e) {</p>
<p><strong>return</strong> res.status(400).json({ status: 400, message:
e.message });</p>
<p>}</p>
<p>}</p>
<p>user.services.js</p>
<p><strong>var</strong> User = require('../models/user.model')</p>
<p>exports.getUsers = async <strong>function</strong> (query, page,
limit) {</p>
<p>try <strong>{</strong></p>
<p><strong>var</strong> users = await User.find(query)</p>
<p><strong>return</strong> users;</p>
<p>} <strong>catch</strong> (e) {</p>
<p>// Log Errors</p>
<p><strong>throw</strong> Error('Error while Paginating Users')</p>
<p>}</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 309</p>
<h2 id="chapter-110-push-notifications">Chapter 110: Push
notifications</h2>
<p>module/framework description</p>
<p>node.js/express Simple backe-end framework for Node.js application,
very easy to use and extremely powerful</p>
<p>Socket.io Socket.IO enables real-time bidirectional event-based
communication. It works on every platform, browser or device, focusing
equally on reliability and speed.</p>
<p>Push.js The world's most versatile desktop notifications
framework</p>
<p>OneSignal Just another form off push notifications for Apple
devices</p>
<p>Firebase Firebase is Google's mobile platform that helps you quickly
develop high-quality apps and grow your business.</p>
<p>So if you wanna make web app notification I suggest you to use
Push.js or SoneSignal framework for Web/mobile app.</p>
<p>Push is the fastest way to get up and running with Javascript
notifications. A fairly new addition to the official</p>
<p>specification, the Notification API allows modern browsers such as
Chrome, Safari, Firefox, and IE 9+ to push</p>
<p>notifications to a user’s desktop.</p>
<p>You will have to use Socket.io and some backend framework, I will
user Express for this example.</p>
<p>Section 110.1: Web notification</p>
<p>First, you will need to install <a
href="https://pushjs.org/">Push.js</a> module.</p>
<p>$ npm <strong>install</strong> push.js --save</p>
<p>Or import it to your front-end app through <a
href="https://cdnjs.com/libraries/push.js">CDN</a></p>
<p><strong>&lt;script</strong>
src="./push.min.js"<strong>&gt;&lt;/script&gt;</strong> <em>&lt;!-- CDN
link --&gt;</em></p>
<p>After you are done with that, you should be good to go. This is how
it should look like if u wanna make simple</p>
<p>notification:</p>
<p>Push.create('Hello World!')</p>
<p><a href="https://socket.io/">I will assume that you know how to setup
Socket.io</a> with your app. Here is some code example of my backend app
with express:</p>
<p><strong>var</strong> app = require('express')();</p>
<p><strong>var</strong> server = require('http').Server(app);</p>
<p><strong>var</strong> io = require('socket.io')(server);</p>
<p>server.listen(80);</p>
<p>app.<strong>get</strong>('/', <strong>function</strong> (req, res)
{</p>
<p>res.sendfile(__dirname + '/index.html');</p>
<p>});</p>
<p>io.on('connection', <strong>function</strong> (socket) {</p>
<p>socket.emit('pushNotification', { success: <strong>true</strong>,
msg: 'hello' });</p>
<p>});</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 310</p>
<p><span id="After_your_server_is_all_set_up"
class="anchor"></span>After your server is all set up, you should be
able to move on to front-end stuff. Now all we have to do is import</p>
<p><a href="https://cdnjs.com/libraries/socket.io">Socket.io CDN and add
this code to my</a> <em>index.html</em> file:</p>
<p>&lt;script <strong>src="../socket.io.js"</strong>&gt;&lt;/script&gt;
<strong><em>&lt;!-- CDN link --&gt;</em></strong> &lt;script&gt;</p>
<p>var socket = io.connect('http://localhost');</p>
<p>socket.on('pushNotification', function (data) {</p>
<p>console.log(data);</p>
<p>Push.create("Hello world!", {</p>
<p>body: data.msg, //this should print "hello"</p>
<p>icon: '/icon.png',</p>
<p>timeout: 4000,</p>
<p>onClick: function () {</p>
<p>window.focus();</p>
<p>this.close();</p>
<p>}</p>
<p>});</p>
<p>});</p>
<p>&lt;/script&gt;</p>
<p>There you go, now you should be able to display your notification,
this also works on any Android device, and if u</p>
<p>wanna use <a href="https://firebase.google.com/">Firebase</a> cloud
messaging, you can use it with this module, <a
href="https://github.com/Nickersoft/push-fcm-plugin">Here is link for
that example written by Nick</a> (creator of Push.js)</p>
<p>Section 110.2: Apple</p>
<p>Keep in mind that this will not work on Apple devices (I didnt test
them all), but if you want to make push</p>
<p><a href="https://onesignal.com/">notifications check OneSignal</a>
plugin.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 311</p>
<p><span id="Appendix_A__Installing_Node_js"
class="anchor"></span>Appendix A: Installing Node.js</p>
<p>Section A.1: Using Node Version Manager (nvm)</p>
<p><a href="https://github.com/creationix/nvm">Node Version Manager</a>,
otherwise known as nvm, is a bash script that simplifies the management
of multiple Node.js versions.</p>
<p>To install nvm, use the provided install script:</p>
<p><em>$ curl -o-
https:</em>//raw.githubusercontent.com/creationix/nvm/v0.31.3/install.sh
| bash</p>
<p>For windows there is a nvm-windows package with an installer. This <a
href="https://github.com/coreybutler/nvm-windows">GithHub</a> page has
the details for installing and</p>
<p>using the nvm-windows package.</p>
<p>After installing nvm, run "nvm on" from command line. This enables
nvm to control the node versions.</p>
<p>Note: You may need to restart your terminal for it to recognize the
newly installed nvm command.</p>
<p>Then install the latest Node version:</p>
<p>$ nvm install node</p>
<p>You can also install a specific Node version, by passing the major,
minor, and/or patch versions:</p>
<p>$ nvm install 6</p>
<p>$ nvm install 4.2</p>
<p>To list the versions available for install:</p>
<p>$ nvm ls-remote</p>
<p>You can then switch versions by passing the version the same way you
do when installing:</p>
<p>$ nvm use 5</p>
<p>You can set a specific version of Node that you installed to be the
<strong>default version</strong> by entering:</p>
<p>$ nvm alias <strong>default</strong> 4.2</p>
<p>To display a list of Node versions that are installed on your
machine, enter:</p>
<p>$ nvm ls</p>
<p>To use project-specific node versions, you can save the version in
.nvmrc file. This way, starting to work with</p>
<p>another project will be less error-prone after fetching it from its
repository.</p>
<p>$ <strong>echo</strong> "4.2" <strong>&gt;</strong> .nvmrc</p>
<p>$ nvm use</p>
<p>Found '/path/to/project/.nvmrc' with version
<strong>&lt;</strong>4.2<strong>&gt;</strong> Now using node v4.2
<strong>(</strong>npm v3.7.3<strong>)</strong></p>
<p>When Node is installed via nvm we don't have to use sudo to install
global packages since they are installed in home</p>
<p>folder. Thus npm i -g http-server works without any permission
errors.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 312</p>
<p><span id="Section_A_2__Installing_Node_js"
class="anchor"></span>Section A.2: Installing Node.js on Mac using
package manager</p>
<p>Homebrew</p>
<p><a href="http://brew.sh">You can install Node.js using the Homebrew
package manager.</a></p>
<p>Start by updating brew:</p>
<p>brew update</p>
<p>You may need to change permissions or paths. It's best to run this
before proceeding:</p>
<p>brew doctor</p>
<p>Next you can install Node.js by running:</p>
<p>brew install node</p>
<p>Once Node.js is installed, you can validate the version installed by
running:</p>
<p>node -v</p>
<p>Macports</p>
<p><a href="https://www.macports.org/">You can also install node.js
through Macports</a>.</p>
<p>First update it to make sure the lastest packages are referenced:</p>
<p><strong>sudo</strong> port selfupdate</p>
<p>Then install nodejs and npm</p>
<p><strong>sudo</strong> port <strong>install</strong> nodejs npm</p>
<p>You can now run node through CLI directly by invoking node. Also, you
can check your current node version with</p>
<p>node -v</p>
<p>Section A.3: Installing Node.js on Windows</p>
<p>Standard installation</p>
<p><a href="https://nodejs.org/en/download/">All Node.js binaries,
installers, and source files can be downloaded here.</a></p>
<p>You can download just the node.exe runtime or use the Windows
installer (.msi), which will also install npm, the</p>
<p>recommended package manager for Node.js, and configure paths.</p>
<p>Installation by package manager</p>
<p>You can also install by package manager <a
href="https://chocolatey.org/"><em>Chocolatey</em></a> (Software
Management Automation).</p>
<p># choco install nodejs.install</p>
<p><a href="https://chocolatey.org/packages/nodejs.install">More
information about current version, you can find in the choco repository
here</a>.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 313</p>
<p><span id="Section_A_4__Install_Node_js_on"
class="anchor"></span>Section A.4: Install Node.js on Ubuntu</p>
<p>Using the apt package manager</p>
<p>sudo apt-get update</p>
<p>sudo apt-get install <strong>nodejs</strong></p>
<p>sudo apt-get install <strong>npm</strong></p>
<p><strong>sudo ln</strong>-s
<strong>/</strong>usr<strong>/</strong>bin<strong>/</strong>nodejs
<strong>/</strong>usr<strong>/</strong>bin<strong>/</strong>node</p>
<p># the node &amp; npm versions in apt are outdated. This is how you
can update them: <em><strong>sudo</strong> npm
<strong>install</strong>-g npm</em></p>
<p>sudo <strong>npm</strong> install<strong>-g n</strong></p>
<p><em><strong>sudo</strong> n stable</em> # (or lts, or a specific
version)</p>
<p>Using the latest of specific version (e.g. LTS 6.x) directly from
nodesource</p>
<p>curl -sL
https:<strong>//</strong>deb.nodesource.com<strong>/</strong>setup_6.x
<strong>| sudo</strong>-E <strong>bash</strong> -<strong>apt-get
install</strong>-y nodejs</p>
<p>Also, for the right way to install global npm modules, set the
personal directory for them (eliminates the need for</p>
<p>sudo and avoids EACCES errors):</p>
<p><strong>mkdir</strong> ~<strong>/</strong>.npm-global</p>
<p><strong>echo</strong> "export PATH=~/.npm-global/bin:$PATH"
<strong>&gt;&gt;</strong> ~<strong>/</strong>.profile
<strong>source</strong> ~<strong>/</strong>.profile</p>
<p>npm config <strong>set</strong> prefix '~/.npm-global'</p>
<p>Section A.5: Installing Node.js with n</p>
<p>First, there is a really nice wrapper for setting up n on your
system. Just run:</p>
<p><em>curl -L https:</em>//git.io/n-install | bash</p>
<p>to install n. Then install binaries in a variety of ways:</p>
<p>latest</p>
<p>n latest</p>
<p>stable</p>
<p>n stable</p>
<p>lts</p>
<p>n lts</p>
<p>Any other version</p>
<p>n</p>
<p>e.g. n 4.4.7</p>
<p>If this version is already installed, this command will activate that
version.</p>
<p>Switching versions</p>
<p>n by itself will produce a selection list of installed binaries. Use
up and down to find the one you want and Enter to activate it.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 314</p>
<p><span id="Section_A_6__Install_Node_js_Fro"
class="anchor"></span>Section A.6: Install Node.js From Source with APT
package</p>
<p>manager</p>
<p>Prerequisites</p>
<p>sudo apt-get install <strong>build-essential</strong></p>
<p>sudo apt-get install <strong>python</strong></p>
<p><strong>[</strong>optional<strong>]</strong></p>
<p>sudo apt-get install git</p>
<p>Get source and build</p>
<p>cd <strong>~</strong></p>
<p><strong>git clone</strong>
https:<strong>//</strong>github.com<strong>/</strong>nodejs<strong>/</strong>node.git</p>
<p><strong>OR</strong> For the latest LTS Node.js version 6.10.2</p>
<p>cd <strong>~</strong></p>
<p><strong>wget</strong>
https:<strong>//</strong>nodejs.org<strong>/</strong>dist<strong>/</strong>v6.3.0<strong>/</strong>node-v6.10.2.tar.gz
<strong>tar</strong>-xzvf node-v6.10.2.tar.gz</p>
<p>Change to the source directory such as in <strong>cd</strong>
~<strong>/</strong>node-v6.10.2</p>
<p>.<strong>/</strong>configure</p>
<p>make</p>
<p>sudo make install</p>
<p>Section A.7: Install Node.js from source on Centos, RHEL and</p>
<p>Fedora</p>
<p>Prerequisites</p>
<p>git</p>
<p>clang and clang++ 3.4^ or gcc and g++ 4.8^</p>
<p>Python 2.6 or 2.7</p>
<p>GNU Make 3.81^</p>
<p>Get source</p>
<p>Node.js v6.x LTS</p>
<p><em>git clone -b v6.x https:</em>//github.com/nodejs/node.git</p>
<p>Node.js v7.x</p>
<p><em>git clone -b v7.x https:</em>//github.com/nodejs/node.git</p>
<p>Build</p>
<p><strong>cd</strong> node</p>
<p>.<strong>/</strong>configure</p>
<p>make<strong>-jX</strong></p>
<p>su<strong>-c</strong> make install</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 315</p>
<p><span id="X___the_number_of_processor_core" class="anchor"></span>X -
the number of processor cores, greatly speeds up the build</p>
<p>Cleanup [Optional]</p>
<p>cd</p>
<p><strong>rm</strong>-rf node</p>
<p>Section A.8: Installing with Node Version Manager under Fish</p>
<p>Shell with Oh My Fish!</p>
<p><a href="https://github.com/creationix/nvm">Node Version Manager</a>
(nvm) greatly simplifies the management of Node.js versions, their
installation, and removes</p>
<p>the need for sudo when dealing with packages (e.g. npm
<strong>install</strong> ...<a href="https://fishshell.com/">). Fish
Shell (</a>fish) "<em>is a smart and user-friendly</em></p>
<p>command line shell for OS X, Linux, and the rest of the family<em>"
that is a popular alternative among programmers to</em></p>
<p>common shells such as bash<a
href="https://github.com/oh-my-fish/oh-my-fish">. Lastly, Oh My Fish
(</a>omf) allows for customizing and installing packages within Fish</p>
<p>shell.</p>
<p>This guide assumes you are already using Fish as your
shell<strong>.</strong></p>
<p>Install nvm</p>
<p><em>curl -o-
https:</em>//raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh
| bash</p>
<p>Install Oh My Fish</p>
<p><em>curl -L
https:</em>//github.com/oh-my-fish/oh-my-fish/raw/master/bin/install |
fish</p>
<p>(Note: You will be prompted to restart your terminal at this point.
Go ahead and do so now.)</p>
<p>Install plugin-nvm for Oh My Fish</p>
<p>We will install <a
href="https://github.com/derekstavis/plugin-nvm">plugin-nvm via Oh My
Fish to expose</a> nvm capabilities within the Fish shell:</p>
<p>omf install nvm</p>
<p>Install Node.js with Node Version Manager</p>
<p>You are now ready to use nvm. You may install and use the version of
Node.js of your liking. Some examples:</p>
<p>Install the most recent Node version: nvm install node</p>
<p>Install 6.3.1 specifically: nvm install 6.3.1</p>
<p>List installed verisons: nvm ls</p>
<p>Switch to a previously installed 4.3.1: nvm use 4.3.1</p>
<p>Final Notes</p>
<p>Remember again, that we no longer need sudo when dealing with Node.js
using this method! Node versions, packages, and so on are installed in
your home directory.</p>
<p>Section A.9: Installing Node.js on Raspberry PI</p>
<p>To install v6.x update the packages</p>
<p>curl -sL
https:<strong>//</strong>deb.nodesource.com<strong>/</strong>setup_6.x
<strong>| sudo</strong>-E <strong>bash</strong> -</p>
<p>Using the apt package manager</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 316</p>
<p>sudo apt-get install<strong>-y nodejs</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 317</p>
<p><span id="Credits" class="anchor"></span>Credits</p>
<p>Thank you greatly to all the people from Stack Overflow Documentation
who helped provide this content,</p>
<p>more changes can be sent to web@petercv.com for new content to be
published or updated</p>
<p><a href="https://stackoverflow.com/users/5192846/">Abdelaziz
Mokhnache</a> Chapter 1</p>
<p><a href="https://stackoverflow.com/users/3681236/">Aeolingamenfel</a>
Chapters 1 and 4</p>
<p><a href="https://stackoverflow.com/users/2080069/">Ahmed Metwally</a>
Chapter 20</p>
<p><a href="https://stackoverflow.com/users/6121703/">Aikon Mogwai</a>
Chapters 3, 26 and 31</p>
<p><a href="https://stackoverflow.com/users/2049247/">aisflat439</a>
Chapter 89</p>
<p><a href="https://stackoverflow.com/users/5300410/">Ajitej Kaushik</a>
Chapter 54</p>
<p><a href="https://stackoverflow.com/users/6045122/">akinjide</a>
Chapter 23</p>
<p><a href="https://stackoverflow.com/users/6161714/">Alex Logan</a>
Chapters 17 and 24</p>
<p><a href="https://stackoverflow.com/users/6060774/">alexi2</a> Chapter
3</p>
<p><a href="https://stackoverflow.com/users/1432509/">Alister</a>
Chapter 33</p>
<p><a href="https://stackoverflow.com/users/4745878/">Aljoscha Meyer</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/5284288/">Amila Sampath</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/1229624/">Aminadav</a>
Chapters 5, 75 and 111</p>
<p><a href="https://stackoverflow.com/users/2028364/">Amreesh Tyagi</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/5339201/">Andrés
Encarnación</a> Chapter 75</p>
<p><a href="https://stackoverflow.com/users/4655076/">Andres C.
Viesca</a> Chapter 3</p>
<p><a href="https://stackoverflow.com/users/2278598/">Andrew Brooke</a>
Chapter 95</p>
<p><a href="https://stackoverflow.com/users/6222152/">AndrewLeonardi</a>
Chapter 6</p>
<p><a href="https://stackoverflow.com/users/1766225/">Anh Cao</a>
Chapter 111</p>
<p><a href="https://stackoverflow.com/users/804721/">Ankit Gomkale</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/3027001/">Ankur Anand</a>
Chapters 1, 2, 10, 33 and 48</p>
<p><a href="https://stackoverflow.com/users/186298/">Antenka</a> Chapter
50</p>
<p><a href="https://stackoverflow.com/users/3083488/">Aph</a> Chapter
3</p>
<p><a href="https://stackoverflow.com/users/1643749/">Apidcloud</a>
Chapter 22</p>
<p><a href="https://stackoverflow.com/users/3137109/">arcs</a> Chapter
106</p>
<p><a href="https://stackoverflow.com/users/1637386/">Asaf Manassen</a>
Chapters 3 and 10</p>
<p><a href="https://stackoverflow.com/users/2016436/">asherbar</a>
Chapter 111</p>
<p><a href="https://stackoverflow.com/users/23501/">Ates Goral</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/6767721/">B Thuy</a> Chapter
57</p>
<p><a href="https://stackoverflow.com/users/6568784/">baranskistad</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/1029516/">Batsu</a> Chapters
3 and 111</p>
<p><a href="https://stackoverflow.com/users/1000737/">Bearington</a>
Chapter 17</p>
<p><a href="https://stackoverflow.com/users/2823898/">Benjamin</a>
Chapter 8</p>
<p><a href="https://stackoverflow.com/users/1913371/">Beshoy Hanna</a>
Chapter 65</p>
<p><a href="https://stackoverflow.com/users/3849075/">Bharat</a> Chapter
6</p>
<p><a href="https://stackoverflow.com/users/598477/">Big Dude</a>
Chapter 67</p>
<p><a href="https://stackoverflow.com/users/1541138/">Brett Jackson</a>
Chapter 22</p>
<p><a href="https://stackoverflow.com/users/1141093/">brianmearns</a>
Chapter 3</p>
<p><a href="https://stackoverflow.com/users/1717735/">Buzut</a> Chapters
91, 92 and 111</p>
<p><a href="https://stackoverflow.com/users/1397311/">ccnokes</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/139300/">CD..</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/1363247/">Chance Snow</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/712316/">Chezzwizz</a>
Chapters 1 and 111</p>
<p><a href="https://stackoverflow.com/users/1558527/">Christophe
Marois</a> Chapter 4</p>
<p><a href="https://stackoverflow.com/users/2898801/">Christopher
Ronning</a> Chapter 1</p>
<p><a href="https://stackoverflow.com/users/2877698/">CJ Harries</a>
Chapter 107</p>
<p><a href="https://stackoverflow.com/users/1288680/">Clement JACOB</a>
Chapter 14</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 318</p>
<p><a
href="https://stackoverflow.com/users/4031815/">commonSenseCode</a>
Chapter 6</p>
<p><a href="https://stackoverflow.com/users/1149962/">cyanbeam</a>
Chapters 5 and 21</p>
<p><a href="https://stackoverflow.com/users/3042856/">Damaged
Organic</a> Chapters 3 and 8</p>
<p><a href="https://stackoverflow.com/users/5617140/">damitj07</a>
Chapters 77, 93 and 102</p>
<p><a href="https://stackoverflow.com/users/5428438/">Daniel Verem</a>
Chapter 3</p>
<p><a href="https://stackoverflow.com/users/3543416/">Dark Horse</a>
Chapters 1, 2 and 4</p>
<p><a href="https://stackoverflow.com/users/3438226/">Dave</a> Chapters
60 and 101</p>
<p><a href="https://stackoverflow.com/users/3838549/">David G.</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/1049894/">David Gatti</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/2633527/">David Xu</a>
Chapters 59, 60, 61, 62 and 63</p>
<p><a href="https://stackoverflow.com/users/14966/">Dean Rather</a>
Chapter 12</p>
<p><a href="https://stackoverflow.com/users/1030974/">devnull69</a>
Chapters 3, 5 and 23</p>
<p><a href="https://stackoverflow.com/users/817766/">Djizeus</a> Chapter
1</p>
<p><a href="https://stackoverflow.com/users/5104100/">Dmitriy
Borisov</a> Chapter 111</p>
<p><a href="https://stackoverflow.com/users/4533572/">Dom Vinyard</a>
Chapter 60</p>
<p><a
href="https://stackoverflow.com/users/5111850/">DominicValenciana</a>
Chapter 81</p>
<p><a href="https://stackoverflow.com/users/2587646/">DrakaSAN</a>
Chapters 2, 4, 5, 11 and 25</p>
<p><a href="https://stackoverflow.com/users/1730638/">dthree</a> Chapter
42</p>
<p><a href="https://stackoverflow.com/users/1705189/">Duly Kinsky</a>
Chapters 4, 11 and 21</p>
<p><a href="https://stackoverflow.com/users/3252835/">duncanhall</a>
Chapter 22</p>
<p><a href="https://stackoverflow.com/users/2872106/">efeder</a>
Chapters 10 and 21</p>
<p><a href="https://stackoverflow.com/users/109960/">Eric Fortin</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/1002833/">Eric Smekens</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/5873766/">evalsocket</a>
Chapter 66</p>
<p><a href="https://stackoverflow.com/users/3708596/">Everettss</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/454533/">Explosion Pills</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/6608382/">F. Kauder</a>
Chapter 25</p>
<p><a href="https://stackoverflow.com/users/1174869/">FabianCook</a>
Chapters 28 and 49</p>
<p><a href="https://stackoverflow.com/users/4932544/">Fikra</a> Chapter
73</p>
<p><a href="https://stackoverflow.com/users/8088868/">Florian
Hämmerle</a> Chapters 1, 2, 8, 9, 62, 63 and 94</p>
<p><a href="https://stackoverflow.com/users/2879085/">Forivin</a>
Chapter 27</p>
<p><a href="https://stackoverflow.com/users/3297820/">Freddie
Coleman</a> Chapter 13</p>
<p><a href="https://stackoverflow.com/users/3389981/">fresh5447</a>
Chapter 55</p>
<p><a href="https://stackoverflow.com/users/889158/">gentlejo</a>
Chapter 98</p>
<p><a href="https://stackoverflow.com/users/1597872/">GilZ</a> Chapter
111</p>
<p><a href="https://stackoverflow.com/users/2259144/">gnerkus</a>
Chapter 4</p>
<p><a href="https://stackoverflow.com/users/620039/">guleria</a>
Chapters 19, 22 and 111</p>
<p><a href="https://stackoverflow.com/users/4551041/">H. Pauwelyn</a>
Chapter 85</p>
<p><a href="https://stackoverflow.com/users/1008741/">Harangue</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/2441637/">Hasan A Yousef</a>
Chapter 34</p>
<p><a href="https://stackoverflow.com/users/1380918/">hexacyanide</a>
Chapters 1, 2, 4, 5, 15 and 111</p>
<p><a href="https://stackoverflow.com/users/5027503/">Himani Agrawal</a>
Chapters 17 and 56</p>
<p><a href="https://stackoverflow.com/users/1849644/">Houssem
Yahiaoui</a> Chapter 51</p>
<p><a href="https://stackoverflow.com/users/383912/">HungryCoder</a>
Chapters 2 and 111</p>
<p><a href="https://stackoverflow.com/users/6237235/">Iceman</a>
Chapters 26 and 30</p>
<p><a href="https://stackoverflow.com/users/115363/">Inanc Gumus</a>
Chapters 1, 3, 94 and 111</p>
<p><a href="https://stackoverflow.com/users/1420197/">Ionică Bizău</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/4863783/">iSkore</a> Chapter
15</p>
<p><a href="https://stackoverflow.com/users/1363231/">Ivan Hristov</a>
Chapter 32</p>
<p><a href="https://stackoverflow.com/users/3505299/">Jacek Labuda</a>
Chapter 111</p>
<p><a href="https://stackoverflow.com/users/1985406/">jakerella</a>
Chapter 4</p>
<p><a href="https://stackoverflow.com/users/743957/">James
Billingham</a> Chapter 6</p>
<p><a href="https://stackoverflow.com/users/1944335/">James Taylor</a>
Chapter 2</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 319</p>
<p><a href="https://stackoverflow.com/users/1561059/">jamescostian</a>
Chapter 11</p>
<p><a href="https://stackoverflow.com/users/545332/">Jason</a> Chapter
5</p>
<p><a href="https://stackoverflow.com/users/3836926/">Jasper</a> Chapter
1</p>
<p><a href="https://stackoverflow.com/users/5291686/">jdrydn</a>
Chapters 5 and 75</p>
<p><a href="https://stackoverflow.com/users/630496/">jemiloii</a>
Chapter 3</p>
<p><a href="https://stackoverflow.com/users/1114/">Jeremy Banks</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/2404065/">jerry</a> Chapter
25</p>
<p><a href="https://stackoverflow.com/users/330920/">João Andrade</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/1760315/">joeyfb</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/2066736/">John</a> Chapter
85</p>
<p><a href="https://stackoverflow.com/users/1946501/">John Slegers</a>
Chapters 1 and 23</p>
<p><a href="https://stackoverflow.com/users/1174135/">John Vincent
Jardin</a> Chapters 18, 19 and 111</p>
<p><a href="https://stackoverflow.com/users/3454745/">johni</a> Chapter
21</p>
<p><a href="https://stackoverflow.com/users/1058612/">JohnnyCoder</a>
Chapter 75</p>
<p><a href="https://stackoverflow.com/users/1492826/">Jonas S</a>
Chapter 12</p>
<p><a href="https://stackoverflow.com/users/446039/">Josh</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/4581977/">Joshua
Kleveter</a> Chapter 12</p>
<p><a href="https://stackoverflow.com/users/1360732/">Kapil Vats</a>
Chapter 75</p>
<p><a href="https://stackoverflow.com/users/2050499/">Karlen</a> Chapter
80</p>
<p><a href="https://stackoverflow.com/users/1699937/">Kelum
Senanayake</a> Chapters 82 and 83</p>
<p><a href="https://stackoverflow.com/users/4276650/">KlwntSingh</a>
Chapters 13, 16, 21, 22, 75, 76 and 81</p>
<p><a href="https://stackoverflow.com/users/27009/">Kornel</a> Chapter
10</p>
<p><a href="https://stackoverflow.com/users/5677183/">Léo Martin</a>
Chapter 69</p>
<p><a href="https://stackoverflow.com/users/112534/">lauriys</a> Chapter
10</p>
<p><a href="https://stackoverflow.com/users/2531068/">Loufylouf</a>
Chapter 5</p>
<p><a href="https://stackoverflow.com/users/3755845/">Louis
Barranqueiro</a> Chapters 4 and 13</p>
<p><a href="https://stackoverflow.com/users/3750462/">Luis González</a>
Chapter 19</p>
<p><a href="https://stackoverflow.com/users/5645571/">M. A. Cordeiro</a>
Chapter 69</p>
<p><a href="https://stackoverflow.com/users/890537/">m02ph3u5</a>
Chapters 2 and 5</p>
<p><a href="https://stackoverflow.com/users/1420173/">M1kstur</a>
Chapter 88</p>
<p><a href="https://stackoverflow.com/users/7994013/">Maciej
Rostański</a> Chapter 111</p>
<p><a href="https://stackoverflow.com/users/2065736/">Manas Jayanth</a>
Chapter 29</p>
<p><a href="https://stackoverflow.com/users/6192780/">Manuel</a> Chapter
60</p>
<p><a href="https://stackoverflow.com/users/1757214/">manuerumx</a>
Chapter 24</p>
<p><a href="https://stackoverflow.com/users/5243162/">Mario Rozic</a>
Chapter 110</p>
<p><a href="https://stackoverflow.com/users/1191635/">Matthew
Harwood</a> Chapter 2</p>
<p><a href="https://stackoverflow.com/users/3858/">Matthew Shanley</a>
Chapter 33</p>
<p><a
href="https://stackoverflow.com/users/4712818/">MatthieuLemoine</a>
Chapter 22</p>
<p><a href="https://stackoverflow.com/users/2016735/">MayorMonty</a>
Chapter 8</p>
<p><a href="https://stackoverflow.com/users/3927621/">Meinkraft</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/6102253/">mezzode</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/11432/">Michael Buen</a>
Chapter 14</p>
<p><a href="https://stackoverflow.com/users/278354/">midnightsyntax</a>
Chapters 4, 28 and 68</p>
<p><a href="https://stackoverflow.com/users/5526354/">Mikhail</a>
Chapters 2, 3, 4, 13, 24 and 26</p>
<p><a href="https://stackoverflow.com/users/3873452/">MindlessRanger</a>
Chapter 11</p>
<p><a href="https://stackoverflow.com/users/3701067/">Mindsers</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/3736538/">Mohit Gangrade</a>
Chapter 3</p>
<p><a href="https://stackoverflow.com/users/2910269/">MSB</a> Chapter
5</p>
<p><a href="https://stackoverflow.com/users/2100197/">Mukesh Sharma</a>
Chapters 3, 8, 22, 23 and 38</p>
<p><a href="https://stackoverflow.com/users/3556874/">Naeem Shaikh</a>
Chapters 3, 24 and 43</p>
<p><a href="https://stackoverflow.com/users/7749877/">Nainesh Raval</a>
Chapter 49</p>
<p><a href="https://stackoverflow.com/users/6301910/">Native Coder</a>
Chapter 85</p>
<p><a href="https://stackoverflow.com/users/1408759/">ndugger</a>
Chapter 1</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 320</p>
<p><a href="https://stackoverflow.com/users/2639721/">Nick</a> Chapters
1 and 2</p>
<p><a href="https://stackoverflow.com/users/4342875/">Niklas</a> Chapter
3</p>
<p><a href="https://stackoverflow.com/users/5051423/">Niroshan
Ranapathi</a> Chapters 70, 71, 73 and 74</p>
<p><a href="https://stackoverflow.com/users/2680461/">Nivesh</a>
Chapters 3, 12 and 16</p>
<p><a
href="https://stackoverflow.com/users/2679630/">nomanbinhussein</a>
Chapters 60 and 109</p>
<p><a href="https://stackoverflow.com/users/1079901/">noob</a> Chapter
3</p>
<p><a href="https://stackoverflow.com/users/3706693/">num8er</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/132064/">NuSkooler</a>
Chapter 111</p>
<p><a href="https://stackoverflow.com/users/3741067/">oliolioli</a>
Chapter 78</p>
<p><a href="https://stackoverflow.com/users/1925689/">Oliver</a> Chapter
6</p>
<p><a href="https://stackoverflow.com/users/5792737/">omgimanerd</a>
Chapter 85</p>
<p><a href="https://stackoverflow.com/users/3690529/">optimus</a>
Chapter 17</p>
<p><a href="https://stackoverflow.com/users/4398444/">Osama Bari</a>
Chapters 63 and 97</p>
<p><a href="https://stackoverflow.com/users/4242097/">Parham Alvani</a>
Chapter 105</p>
<p><a href="https://stackoverflow.com/users/4719725/">parlad neupane</a>
Chapter 100</p>
<p><a href="https://stackoverflow.com/users/884491/">Pasha Rumkin</a>
Chapter 3</p>
<p><a href="https://stackoverflow.com/users/6728192/">Pauly Garcia</a>
Chapter 23</p>
<p><a href="https://stackoverflow.com/users/3307454/">Pedro Otero</a>
Chapter 5</p>
<p><a href="https://stackoverflow.com/users/2980607/">peteb</a> Chapters
4, 9 and 40</p>
<p><a href="https://stackoverflow.com/users/4504895/">Peter G</a>
Chapter 23</p>
<p><a href="https://stackoverflow.com/users/8161432/">Philip Cornelius
Glover</a> Chapter 108</p>
<p><a href="https://stackoverflow.com/users/592744/">Philipp Flenker</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/951667/">Pieter
Herroelen</a> Chapter 2</p>
<p><a href="https://stackoverflow.com/users/1504668/">pranspach</a>
Chapters 19 and 23</p>
<p><a href="https://stackoverflow.com/users/493726/">Qiong Wu</a>
Chapter 24</p>
<p><a href="https://stackoverflow.com/users/4484822/">QoP</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/3296811/">Quill</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/5267551/">Rafal Wiliński</a>
Chapters 2 and 3</p>
<p><a href="https://stackoverflow.com/users/3559733/">raghu</a> Chapter
22</p>
<p><a href="https://stackoverflow.com/users/194175/">rdegges</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/5053119/">Red</a> Chapter
84</p>
<p><a href="https://stackoverflow.com/users/343263/">refaelos</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/1091402/">Rick</a> Chapter
52</p>
<p><a href="https://stackoverflow.com/users/5644413/">Rishikesh
Chandra</a> Chapter 1</p>
<p><a href="https://stackoverflow.com/users/2738732/">riyadhalnur</a>
Chapters 8 and 16</p>
<p><a href="https://stackoverflow.com/users/1162192/">Rizowski</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/459517/">Robbie</a> Chapter
10</p>
<p><a href="https://stackoverflow.com/users/7616306/">Roopesh</a>
Chapter 90</p>
<p><a href="https://stackoverflow.com/users/4905262/">Rowan Harley</a>
Chapter 44</p>
<p><a href="https://stackoverflow.com/users/7342110/">Rupali Pemare</a>
Chapter 69</p>
<p><a href="https://stackoverflow.com/users/3705518/">Sameer
Srivastava</a> Chapter 17</p>
<p><a href="https://stackoverflow.com/users/1047268/">Sanketh Katta</a>
Chapter 14</p>
<p><a href="https://stackoverflow.com/users/2685083/">Sathish</a>
Chapter 39</p>
<p><a href="https://stackoverflow.com/users/5704901/">Satyam S</a>
Chapter 68</p>
<p><a href="https://stackoverflow.com/users/8143718/">sBanda</a>
Chapters 13, 16 and 104</p>
<p><a
href="https://stackoverflow.com/users/2612484/">ScientiaEtVeritas</a>
Chapter 36</p>
<p><a href="https://stackoverflow.com/users/1109178/">Shabin Hashim</a>
Chapters 1, 3, 5, 10 and 111</p>
<p><a href="https://stackoverflow.com/users/4111052/">shikhar bansal</a>
Chapter 69</p>
<p><a href="https://stackoverflow.com/users/4420424/">Shriganesh
Kolhe</a> Chapters 25 and 49</p>
<p><a href="https://stackoverflow.com/users/5550507/">Sibeesh Venu</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/1001562/">Siddharth
Srivastva</a> Chapter 111</p>
<p><a href="https://stackoverflow.com/users/4613549/">sigfried</a>
Chapter 99</p>
<p><a href="https://stackoverflow.com/users/6404493/">signal</a> Chapter
58</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 321</p>
<p><a href="https://stackoverflow.com/users/2806499/">Simplans</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/293465/">sjmarshy</a>
Chapters 16 and 22</p>
<p><a href="https://stackoverflow.com/users/1587206/">Skanda</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/7395882/">skiilaa</a>
Chapters 62 and 95</p>
<p><a href="https://stackoverflow.com/users/4446093/">Sky</a> Chapter
25</p>
<p><a href="https://stackoverflow.com/users/3078446/">snuggles08</a>
Chapter 18</p>
<p><a href="https://stackoverflow.com/users/6637668/">Sorangwala
Abbasali</a> Chapter 75</p>
<p><a href="https://stackoverflow.com/users/1041104/">SteveLacy</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/2948765/">still_learning</a>
Chapters 2 and 4</p>
<p><a href="https://stackoverflow.com/users/3398960/">subbu</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/2619666/">Sven 31415</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/3871521/">Sveratum</a>
Chapter 111</p>
<p><a href="https://stackoverflow.com/users/3933588/">Syam Pradeep</a>
Chapter 86</p>
<p><a href="https://stackoverflow.com/users/2946880/">SynapseTech</a>
Chapter 64</p>
<p><a href="https://stackoverflow.com/users/1437845/">tandrewnichols</a>
Chapters 3 and 111</p>
<p><a href="https://stackoverflow.com/users/6407868/">the12</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/1903116/">thefourtheye</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/1079817/">theunexpected1</a>
Chapter 1</p>
<p><a href="https://stackoverflow.com/users/284480/">Tim Jones</a>
Chapter 4</p>
<p><a href="https://stackoverflow.com/users/1306877/">tlo</a> Chapter
2</p>
<p><a href="https://stackoverflow.com/users/5384592/">Tomás Cañibano</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/5810474/">Toni Villena</a>
Chapter 60</p>
<p><a href="https://stackoverflow.com/users/2733488/">topheman</a>
Chapter 16</p>
<p><a href="https://stackoverflow.com/users/2224265/">Tushar Gupta</a>
Chapter 19</p>
<p><a href="https://stackoverflow.com/users/1154423/">tverdohleb</a>
Chapters 3 and 22</p>
<p><a href="https://stackoverflow.com/users/7610111/">tyehia</a>
Chapters 22, 96 and 103</p>
<p><a href="https://stackoverflow.com/users/7040389/">umesh</a> Chapter
7</p>
<p><a href="https://stackoverflow.com/users/2314737/">user2314737</a>
Chapters 1 and 56</p>
<p><a href="https://stackoverflow.com/users/6939352/">user6939352</a>
Chapter 10</p>
<p><a href="https://stackoverflow.com/users/3786332/">uzaif</a> Chapters
2 and 5</p>
<p><a href="https://stackoverflow.com/users/4731240/">V1P3R</a> Chapters
10 and 111</p>
<p><a href="https://stackoverflow.com/users/246263/">Veger</a> Chapter
79</p>
<p><a href="https://stackoverflow.com/users/2772643/">victorkohl</a>
Chapters 10 and 111</p>
<p><a href="https://stackoverflow.com/users/2396907/">vintproykt</a>
Chapter 72</p>
<p><a href="https://stackoverflow.com/users/2039855/">VladNeacsu</a>
Chapter 2</p>
<p><a href="https://stackoverflow.com/users/6919770/">VooVoo</a> Chapter
52</p>
<p><a href="https://stackoverflow.com/users/4251546/">Vsevolod
Goloviznin</a> Chapter 37</p>
<p><a
href="https://stackoverflow.com/users/5918874/">vsjn3290ckjnaoij2jikndckjb</a>
Chapter 45</p>
<p><a href="https://stackoverflow.com/users/5354188/">Waterscroll</a>
Chapter 43</p>
<p><a href="https://stackoverflow.com/users/145279/">Will</a> Chapter
24</p>
<p><a href="https://stackoverflow.com/users/4508990/">William Carron</a>
Chapter 87</p>
<p><a href="https://stackoverflow.com/users/3593217/">xam</a> Chapters
1, 35 and 73</p>
<p><a href="https://stackoverflow.com/users/1539384/">xims</a> Chapter
3</p>
<p><a href="https://stackoverflow.com/users/3178237/">Yerko Palma</a>
Chapters 2 and 3</p>
<p><a href="https://stackoverflow.com/users/4062197/">ymz</a> Chapter
35</p>
<p><a href="https://stackoverflow.com/users/2452381/">yrtimiD</a>
Chapter 46</p>
<p><a href="https://stackoverflow.com/users/1476885/">Zanon</a> Chapter
4</p>
<p><a href="https://stackoverflow.com/users/4232386/">Ze Rubeus</a>
Chapters 21 and 41</p>
<p><a href="https://stackoverflow.com/users/2320153/">Zoltán Schmidt</a>
Chapter 47</p>
<p><a href="https://stackoverflow.com/users/2013580/">zurfyx</a>
Chapters 12, 35 and 53</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Node.js Notes for
Professionals</a> 322</p>
<p><span id="You_may_also_like" class="anchor"></span>You may also
like</p>
<p><img src="media/index-334_1.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_1.jpg" /></p>
<p><img src="media/index-334_2.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_2.jpg" /></p>
<p><img src="media/index-334_3.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_3.jpg" /></p>
<p><img src="media/index-334_4.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_4.jpg" /></p>
<p><img src="media/index-334_5.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_5.jpg" /></p>
<p><img src="media/index-334_6.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_6.jpg" /></p>
<p><img src="media/index-334_7.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_7.jpg" /></p>
<p><img src="media/index-334_8.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_8.jpg" /></p>
<p><img src="media/index-334_9.jpeg"
style="width:2.52778in;height:3.5in" alt="index-334_9.jpg" /></p>
</body>
</html>
