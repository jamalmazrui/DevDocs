
openpyxl Documentation
发布 3.0.5 See AUTHORS
2020 年 09 月 17 日



Contents1支持	32如何贡献52.1 其他提供帮助的方式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53安装73.1	Working with a checkout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .74Usage examples94.1 教程 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .94.2	Cookbook . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .165性能215.1 性能 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .216其他主题256.1 优化模式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256.2 插入删除行或列, 移动范围单元格 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .276.3 与 Pandas 和 NumPy 一起使用 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .286.4 图表 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .306.5 注释 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .826.6 样式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .836.7 其他工作表属性 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .916.8 条件格式 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .936.9 数据透视表 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .986.10 打印设置 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .986.11 筛选和排序 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1006.12 数据验证 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1016.13 定义名称 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104i
6.14 工作簿表格 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
	6.15 Parsing Formulas	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
6.16 保护 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
7 开发者信息	113
7.1 Development . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
8 API 文档	119
8.1 关键类 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
8.2 完整 API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
9 Indices and tables	411
10 发布说明	413
10.1 3.0.4 (2020-06-24) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 413
10.2 3.0.3 (2020-01-20) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414
10.3 3.0.2 (2019-11-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414
10.4 3.0.1 (2019-11-14) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414
10.5 3.0.0 (2019-09-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
10.6 2.6.4 (2019-09-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
10.7 2.6.3 (2019-08-19) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
10.8 2.6.2 (2019-03-29) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
10.9 2.6.1 (2019-03-04) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
10.10 2.6.0 (2019-02-06) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
10.11 2.6.-b1 (2019-01-08) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 416
10.12 2.6-a1 (2018-11-21)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
10.13 2.5.14 (2019-01-23) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
10.14 2.5.13 (brown bag) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418
10.15 2.5.12 (2018-11-29) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418
10.16 2.5.11 (2018-11-21) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418
10.17 2.5.10 (2018-11-13) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 418
10.18 2.5.9 (2018-10-19) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
10.19 2.5.8 (2018-09-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
10.20 2.5.7 (2018-09-13) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
10.21 2.5.6 (2018-08-30) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
10.22 2.5.5 (2018-08-04) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
10.23 2.5.4 (2018-06-07) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
10.24 2.5.3 (2018-04-18) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 420
10.25 2.5.2 (2018-04-06) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421
10.26 2.5.1 (2018-03-12) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421
10.27 2.5.0 (2018-01-24) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 421
10.28 2.5.0-b2 (2018-01-19)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
10.29 2.5.0-b1 (2017-10-19)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
ii
10.30 2.5.0-a3 (2017-08-14)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423
10.31 2.5.0-a2 (2017-06-25)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423
10.32 2.5.0-a1 (2017-05-30)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
10.33 2.4.11 (2018-01-24) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
10.34 2.4.10 (2018-01-19) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425
10.35 2.4.9 (2017-10-19) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425
10.36 2.4.8 (2017-05-30) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426
10.37 2.4.7 (2017-04-24) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426
10.38 2.4.6 (2017-04-14) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 426
10.39 2.4.5 (2017-03-07) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
10.40 2.4.4 (2017-02-23) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
10.41 2.4.3 (unreleased)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
10.42 2.4.2 (2017-01-31) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
10.43 2.4.1 (2016-11-23) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
10.44 2.4.0 (2016-09-15) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
10.45 2.4.0-b1 (2016-06-08)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
10.46 2.4.0-a1 (2016-04-11)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 430
10.47 2.3.5 (2016-04-11) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432
10.48 2.3.4 (2016-03-16) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432
10.49 2.3.3 (2016-01-18) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432
10.50 2.3.2 (2015-12-07) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433
10.51 2.3.1 (2015-11-20) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433
10.52 2.3.0 (2015-10-20) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434
10.53 2.3.0-b2 (2015-09-04)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434
10.54 2.3.0-b1 (2015-06-29)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
10.55 2.2.6 (unreleased)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
10.56 2.2.5 (2015-06-29) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
10.57 2.2.4 (2015-06-17) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
10.58 2.2.3 (2015-05-26) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
10.59 2.2.2 (2015-04-28) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
10.60 2.2.1 (2015-03-31) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
10.61 2.2.0 (2015-03-11) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438
10.62 2.2.0-b1 (2015-02-18)	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438
10.63 2.1.5 (2015-02-18) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
10.64 2.1.4 (2014-12-16) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
10.65 2.1.3 (2014-12-09) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
10.66 2.1.2 (2014-10-23) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
10.67 2.1.1 (2014-10-08) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 440
10.68 2.1.0 (2014-09-21) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441
10.69 2.0.5 (2014-08-08) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
10.70 2.0.4 (2014-06-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
10.71 2.0.3 (2014-05-22) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
iii
10.72 2.0.2 (2014-05-13) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
10.73 2.0.1 (2014-05-13) brown bag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
10.74 2.0.0 (2014-05-13) brown bag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
10.75 1.8.6 (2014-05-05) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
10.76 1.8.5 (2014-03-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
10.77 1.8.4 (2014-02-25) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
10.78 1.8.3 (2014-02-09) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 445
10.79 1.8.2 (2014-01-17) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446
10.80 1.8.1 (2014-01-14) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446
10.81 1.8.0 (2014-01-08) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446
10.82 1.7.0 (2013-10-31) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447
Python 模块索引	449
索引	453
iv

openpyxl Documentation, 发布 3.0.5

Author Eric Gazoni, Charlie Clark
Source code http://bitbucket.org/openpyxl/openpyxl/src
Issues http://bitbucket.org/openpyxl/openpyxl/issues
Generated 2020 年 09 月 17 日
License MIT/Expat
Version 3.0.5
Contents
Contents
1
支持

这是一个由志愿者在业余时间维护的开源项目。这很可能意味着会缺少你想要的特定的功能。But things don't have to stay that way. 你可以对这个项目进行贡献Development 或者和开发者联系来开发特定的功能。
可以向 'Clark Consulting & Research <http://www.clark-consulting.eu/>'_ 和 Adimian 寻求专业支持。欢迎为该项目捐款以支持进一步的开发和维护。
错误报告和功能请求可以使用 issue tracker 来提交。请提供错误的完整最终，并尽可能提交示例文件。如果出于保密原因您无法公开提供文件，请与开发人员联系。
Chapter 1. 支持
2
如何贡献

只要遵从了以下步骤，我们欢迎任何帮助:
1. 为了每一个独立的功能开了新的 fork (https://bitbucket.org/openpyxl/openpyxl/fork) , 也不要想着同时解决所有的问题，这也能使为 review 和 merge 你的 changes 的人更加方便;-)
2. Hack hack hack
3. 不要忘了为你的修改添加单元测试！（是的，即使只有一行代码，没有单元测试也是不会被接受的哦。）如果不知道怎么做，可以参考源代码中大量的例子
4. 如果添加了一个完整的功能或者对某个功能做出了改进，你可以自豪地把自己加入作者文件中:-)
5. 为了让大家知道你刚提交的功能是多么的棒，务必更新一下文档！
6. 当以上步骤都完成之后，提一个 pull request（在你的 repository 页点击大大的"pull request" 按钮）然后等你的代码被 review。如果以上步骤都完成了，那么就会合并到主 repository 。
更多信息请查询Development
2.1 其他提供帮助的方式
即使你不会写代码（或者代码写得不是很好），也有多种方式来作出贡献
• 为 bug 追踪器（bug tracker）进行分流: 关闭已经解决的，无关的，不能复现的 bug
• 对几乎每个方面的文档进行更新: 增加了大量大型的特性（主要是图表和图像）但是没有文档，因此很难用新特性来做点什么
• proposing compatibility fixes for different versions of Python: 我们支持 2.7, 3.4, 3.5, 3.6 和 3.7
Chapter 2. 如何贡献
3
安装

使用 pip 安装 openpyxl。建议在不带系统软件包的 Python virtualenv 中执行此操作:
$ pip install openpyxl

注解: 支持流行的 lxml 库，在创建大量文件的时候特别有用。

警告: 为了在 openpyxl 文件中包含（jpeg, png, bmp,⋯）等图片，你还需要安装 pillow:
$ pip install pillow或者你也可以浏览 https://pypi.python.org/pypi/Pillow/, 选择最新版本或下拉到页面最后选择 Windows 二进制版3.1 Working with a checkout
Sometimes you might want to work with the checkout of a particular version. This may be the case if bugs have been fixed but a release has not yet been made.
$ pip install -e hg+https://bitbucket.org/openpyxl/openpyxl@3.0#egg=openpyxl
Chapter 3. 安装
4
Usage examples

4.1 教程
4.1.1 教程
新建工作表无须再文件系统中创建文件即可开始使用 openpyxl。只要导入 Workbook 类就可以开始工作了:
>>> from openpyxl import Workbook
>>> wb = Workbook()
一个工作表至少有一个工作簿. 你可以通过 Workbook.active 来获取这个属性:
>>> ws = wb.active

注解: 这个值默认为 0。除非你修改了这个值，不然这个方法会一直获取第一个工作表。

你可以使用 Workbook.create_sheet 方法来创建新的工作簿:
>>> ws1 = wb.create_sheet("Mysheet") # insert at the end (default)
# or
(下页继续)

(续上页)
>>> ws2 = wb.create_sheet("Mysheet", 0) # insert at first position
# or
>>> ws3 = wb.create_sheet("Mysheet", -1) # insert at the penultimate position
工作薄在创建时会自动生成一个名字，以 (Sheet, Sheet1, Sheet2, ⋯) 来进行命名。你也可以通过 Worksheet.title 属性来改名:
ws.title = "New Title"
默认情况下，包含该标题的选项卡的背景颜色为白色。你也可以使用 RRGGBB 颜色来改变 Worksheet.sheet_properties.tabColor 属性:
ws.sheet_properties.tabColor = "1072BA"
给工作表命名后，就可以将其作为工作簿的键:
>>> ws3 = wb["New Title"]
你可以使用 Workbook.sheetname 属性查看工作簿中所有工作表的名称:
>>> print(wb.sheetnames)
['Sheet2', 'New Title', 'Sheet1']
你可以遍历工作表:
>>> for sheet in wb:
...	print(sheet.title)
你可以 ** 一个工作表 ** 中创建一个工作簿的复制:
Workbook.copy_worksheet method:
>>> source = wb.active
>>> target = wb.copy_worksheet(source)

注解: 只有单元格（包含值、样式、超链接和注释）以及确定的工作簿属性（包含尺寸、格式和属性）会被复制。其余的工作表/工作簿属性都不会被复制，例如：文件、图表。你也 ** 不能 ** 跨工作表复制工作簿。在工作表以 read-only 或 write_only 模式打开时也无法复制。

Playing with data
访问单元格
现在我们已经知道如何创建工作表，我们可以开始修改单元格内容了。可以直接通过工作表的键来访问单元格:
>>> c = ws['A4']
此处会返回 A4 单元格，如果不存在不将会进行创建可以直接分配值:
>>> ws['A4'] = 4
这里是 Worksheet.cell 方法.
也可以通过行列符号访问单元格:
>>> d = ws.cell(row=4, column=2, value=10)

注解: 当工作薄在内存中被创建之后并没有单元格 cells ，单元格只有在被第一次访问 (access) 的时候才会创建

警告: 由于这个特性，即使你未对单元格赋值，滚动浏览而非直接访问时也会在内存中直接创建。
Something like
>>> for x in range(1,101):
...	for y in range(1,101):
...	ws.cell(row=x, column=y)will create 100x100 cells in memory, for nothing.访问大量单元格
可以使用切片来访问一系列单元格:
>>> cell_range = ws['A1':'C2']
一系列的行和列也可以通过类似的方法获取:
>>> colC = ws['C']
>>> col_range = ws['C:D']
>>> row10 = ws[10]
>>> row_range = ws[5:10]
你也使用 Worksheet.iter_rows 方法:
>>> for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):
...	for cell in row:
...	print(cell)
<Cell Sheet1.A1>
<Cell Sheet1.B1>
<Cell Sheet1.C1>
<Cell Sheet1.A2>
<Cell Sheet1.B2>
<Cell Sheet1.C2>
同样 Worksheet.iter_cols 方法会返回列:
>>> for col in ws.iter_cols(min_row=1, max_col=3, max_row=2):
...	for cell in col:
...	print(cell)
<Cell Sheet1.A1>
<Cell Sheet1.A2>
<Cell Sheet1.B1>
<Cell Sheet1.B2>
<Cell Sheet1.C1>
<Cell Sheet1.C2>

注解: 由于性能原因 Worksheet.iter_cols() 方法在只读模式下不可用。

如果你需要遍历文件中的所有行和列，你可以使用 Worksheet.rows 属性
>>> ws = wb.active
>>> ws['C9'] = 'hello world'
>>> tuple(ws.rows)
((<Cell Sheet.A1>, <Cell Sheet.B1>, <Cell Sheet.C1>),
(<Cell Sheet.A2>, <Cell Sheet.B2>, <Cell Sheet.C2>),
(<Cell Sheet.A3>, <Cell Sheet.B3>, <Cell Sheet.C3>),
(<Cell Sheet.A4>, <Cell Sheet.B4>, <Cell Sheet.C4>),
(<Cell Sheet.A5>, <Cell Sheet.B5>, <Cell Sheet.C5>),
(<Cell Sheet.A6>, <Cell Sheet.B6>, <Cell Sheet.C6>),
(<Cell Sheet.A7>, <Cell Sheet.B7>, <Cell Sheet.C7>),
(<Cell Sheet.A8>, <Cell Sheet.B8>, <Cell Sheet.C8>),
(<Cell Sheet.A9>, <Cell Sheet.B9>, <Cell Sheet.C9>))
或者 Worksheet.columns 属性:
>>> tuple(ws.columns)
((<Cell Sheet.A1>,
<Cell Sheet.A2>,
<Cell Sheet.A3>,
<Cell Sheet.A4>,
<Cell Sheet.A5>,
<Cell Sheet.A6>, ...
<Cell Sheet.B7>,
<Cell Sheet.B8>,
<Cell Sheet.B9>),
(<Cell Sheet.C1>,
<Cell Sheet.C2>,
<Cell Sheet.C3>,
<Cell Sheet.C4>,
<Cell Sheet.C5>,
<Cell Sheet.C6>,
<Cell Sheet.C7>,
<Cell Sheet.C8>,
<Cell Sheet.C9>))
注解: 由于性能原因 Worksheet.columns 方法在只读模式下不可用。

Values only
如果你只想要工作薄的值，你可以使用 Worksheet.values 属性。这会遍历工作簿中所有的行但只返回单元格值:
for row in ws.values:
for value in row: print(value)Worksheet.iter_rows 和 Worksheet.iter_cols 可以用values_only参数来近返回单元格值:
>>> for row in ws.iter_rows(min_row=1, max_col=3, max_row=2, values_only=True): ... print(row)
(下页继续)
(续上页)
(None, None, None)
(None, None, None)
数据存储一旦有了Cell, 我们可以为其分配一个值:
>>> c.value = 'hello, world'
>>> print(c.value) 'hello, world'
>>> d.value = 3.14 >>> print(d.value)
3.14保存至文件
保存工作表最简单和安全的方法就是使用Workbook类的Workbook.save()方法:
>>> wb = Workbook()
>>> wb.save('balances.xlsx')
警告: 这个操作将会无警告直接覆盖已有文件

注解: 文件名后缀并不强制为 xlsx 或 xlsm，但是如果你没使用官方后缀名会在用其他的应用打开的时候会遇到一些麻烦。由于 OOXML 文件基本上都是 ZIP 文件，你也可以用你喜欢的 ZIP 压缩管理器打开

你可以指定属性 template=True 将工作表保存为模板:
>>> wb = load_workbook('document.xlsx')
>>> wb.template = True
>>> wb.save('document_template.xltx')
或者设置属性为 False (默认) 将其保存为一个文档:
>>> wb = load_workbook('document_template.xltx')
>>> wb.template = False >>> wb.save('document.xlsx', as_template=False)
警告: 你应当在保存模板文档时监视数据的属性和我文档拓展名，否则引擎可能会无法打开文档。

注解: 以下操作将会失败:
>>> wb = load_workbook('document.xlsx')
>>> # 需要保存为 *.xlsx 拓展名
>>> wb.save('new_document.xlsm')
>>> # 微软 Excel 无法打开这个文档
>>>
>>> # or
>>>
>>> # 需要执行 keep_vba=True
>>> wb = load_workbook('document.xlsm')
>>> wb.save('new_document.xlsm')
>>> # 微软 Excel 将不会打开这个文档
>>>
>>> # or
>>>
>>> wb = load_workbook('document.xltm', keep_vba=True)
>>> # 如果需要一个模板文档，需要将拓展名指定为 *.xltm.
>>> wb.save('new_document.xlsm')
>>> # 微软 Excel 将不会打开这个文档

保存成流 (stream)
如果你想把文件保存成流。例如当使用 Pyramid, Flask 或 Django 等 web 应用程序时，你可以提供
NamedTemporaryFile():
>>> from tempfile import NamedTemporaryFile
>>> from openpyxl import Workbook
>>> wb = Workbook()
>>> with NamedTemporaryFile() as tmp:
wb.save(tmp.name)
(下页继续)
(续上页)
tmp.seek(0) stream = tmp.read()
从文件加载
你可以使用openpyxl.load_workbook()方法来打开一个已存在的工作表:
>>> from openpyxl import load_workbook >>> wb2 = load_workbook('test.xlsx')
>>> print wb2.sheetnames
['Sheet2', 'New Title', 'Sheet1']
教程到这里就结束了, 你可以继续简单用法部分
4.2 Cookbook
4.2.1 简单用法
写入工作表
>>> from openpyxl import Workbook >>> from openpyxl.utils import get_column_letter
>>> >>> wb = Workbook()
>>>
>>> dest_filename = 'empty_book.xlsx'
>>>
>>> ws1 = wb.active >>> ws1.title = "range names"
>>> >>> for row in range(1, 40):
...	ws1.append(range(600))
>>>
>>> ws2 = wb.create_sheet(title="Pi")
>>> >>> ws2['F5'] = 3.14
>>>
>>> ws3 = wb.create_sheet(title="Data")
(下页继续)

(续上页)
>>> for row in range(10, 20):
...	for col in range(27, 54):
...	_ = ws3.cell(column=col, row=row, value="{0}".format(get_column_letter(col)))
>>> print(ws3['AA10'].value)
AA
>>> wb.save(filename = dest_filename)
读取已有的工作表
>>> from openpyxl import load_workbook
>>> wb = load_workbook(filename = 'empty_book.xlsx')
>>> sheet_ranges = wb['range names']
>>> print(sheet_ranges['D18'].value)
3

注解: 在使用 load_workbook 函数时有几个可供选择。
• data_only controls whether cells with formulae have either the formula (default) or the value stored the last time Excel read the sheet.
• keep_vba controls whether any Visual Basic elements are preserved or not (default). If they are preserved they are still not editable.

警告: 用 openpyxl 打开文件并进行保存会导致图片和图表的丢失，因为 openpyxl 无法读取 Excel 文件所有可能的项。
使用数字格式
>>> import datetime
>>> from openpyxl import Workbook
>>> wb = Workbook()
>>> ws = wb.active
>>> # set date using a Python datetime
>>> ws['A1'] = datetime.datetime(2010, 7, 21)
>>>
>>> ws['A1'].number_format
'yyyy-mm-dd h:mm:ss'
4.2.	Cookbook
使用公式
>>> from openpyxl import Workbook
>>> wb = Workbook()
>>> ws = wb.active
>>> # add a simple formula
>>> ws["A1"] = "=SUM(1, 1)"
>>> wb.save("formula.xlsx")
警告: 号。您必须为函数使用英文名称，并且函数参数必须用逗号分隔，而不能使用其他标点符号，例如分openpyxl 不会检查公式但可以检查公式的名称:
>>> from openpyxl.utils import FORMULAE >>> "HEX2DEC" in FORMULAE True
如果你正在尝试使用一个未知的公式，可能是因为这公式未被包含在最初的规范中。这样的公式只有以 _xlfn 为前缀才能起作用。合并 / 拆分单元格
When you merge cells all cells but the top-left one are removed from the worksheet. To carry the borderinformation of the merged cell, the boundary cells of the merged cell are created as MergeCells which always have the value None. See 合并单元格的样式 for information on formatting merged cells.
>>> from openpyxl.workbook import Workbook
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> ws.merge_cells('A2:D2') >>> ws.unmerge_cells('A2:D2')
>>>
>>> # or equivalently
>>> ws.merge_cells(start_row=2, start_column=1, end_row=4, end_column=4)
>>> ws.unmerge_cells(start_row=2, start_column=1, end_row=4, end_column=4)
插入图像
>>> from openpyxl import Workbook >>> from openpyxl.drawing.image import Image
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>> ws['A1'] = 'You should see three logos below'
>>> # create an image
>>> img = Image('logo.png')
>>> # add to worksheet and anchor next to cells
>>> ws.add_image(img, 'A1')
>>> wb.save('logo.xlsx')
隐藏
>>> import openpyxl
>>> wb = openpyxl.Workbook()
>>> ws = wb.create_sheet()
>>> ws.column_dimensions.group('A','D', hidden=True) >>> ws.row_dimensions.group(1,10, hidden=True)
>>> wb.save('group.xlsx')
4.2.	Cookbook


CHAPTER 5

性能

5.1 性能
openpyxl 尝试来平衡功能与性能。如果有疑问，我们把重点放在功能而非性能上：一旦建立了 API ，性能调整将变得更简单。与其他库和应用程序相比，内存使用率很高，约为原始文件大小的 50 倍，例如 50 MB 的 Excel 文件为内存使用约为 2.5 GB。由于许多用例只涉及读取或写入文件，the 优化模式 modes mean this is less of a problem.
5.1.1 基准测试
所有基准都是综合性的，并且高度依赖于硬件，但是它们仍然可以提供说明（indication）。
写入性能
benchmark code 可以调整使用更多的工作表以及数据中字符串的比例。由于不同版本的 Python 也会对性能有着显著影响，所以使用了 driver script 对 tox 环境下不同的版本 Python 进行测试。
性能与出色的替代库 xlsxwriter 进行了比较
Versions:
python: 3.6.9
openpyxl: 3.0.1
xlsxwriter: 1.2.5
(下页继续)
(续上页)
Dimensions:
Rows = 1000
Cols = 50
Sheets = 1
Proportion text = 0.10
Times: xlsxwriter	:0.59xlsxwriter (optimised):0.54	openpyxl	:0.73openpyxl (optimised) :0.61Versions:
python: 3.7.5 openpyxl: 3.0.1 xlsxwriter: 1.2.5
Dimensions:
Rows = 1000
Cols = 50
Sheets = 1
Proportion text= 0.10Times:
xlsxwriter:0.65xlsxwriter (optimised):0.53	openpyxl	:0.70openpyxl (optimised) :
Versions:
python: 3.8.0 openpyxl: 3.0.1 xlsxwriter: 1.2.5
Dimensions:
Rows = 1000 Cols = 500.63(下页继续)
Chapter 5. 性能 openpyxl Documentation, 发布 3.0.5

(续上页)
Sheets = 1
Proportion text = 0.10
Times: xlsxwriter	:0.54xlsxwriter (optimised):0.50	openpyxl	:1.10openpyxl (optimised) :0.57读取性能
读取性能测试使用了 bug report 提供的文件，和早期的 xlrd 库进行比较。xlrd 主要用于.XLS 文件较旧的
BIFF 文件格式，它对 XLSX 文件支持有限。
基准测试代码显示了处理文件时正确选项的重要性。在这种情况下，禁用外部链接将让 openpyxl 停止打开链接工作表的缓存副本。
两个库的一个主要区别是 openpyxl 的只读模式可以快速打开工作簿，使其适用于多进程，这也大大减少了内存的使用。xlrd 也不会自动将日期和时间转换为 Python 的 datetime，尽管它会相应地注释单元格（annotate cells），但是在客户端代码中这样做会大大降低性能。
Versions:
python: 3.6.9 xlread: 1.2.0 openpyxl: 3.0.1
openpyxl, read-only
Workbook loaded 1.14s
OptimizationData 23.17s Output Model 0.00s
>>DATA>> 0.00s
Store days 0% 23.92s
Store days 100% 17.35s
Total time 65.59s
0 cells in total
Versions:
python: 3.7.5 xlread: 1.2.0 openpyxl: 3.0.1(下页继续)
5.1. 性能
(续上页)
openpyxl, read-only
Workbook loaded 0.98s
OptimizationData 21.35s Output Model 0.00s
>>DATA>> 0.00s
Store days 0% 20.70s
Store days 100% 16.16s
Total time 59.19s
0 cells in total
Versions:
python: 3.8.0 xlread: 1.2.0 openpyxl: 3.0.1
openpyxl, read-only
Workbook loaded 0.90s
OptimizationData 19.58s Output Model 0.00s
>>DATA>> 0.00s
Store days 0% 19.35s
Store days 100% 15.02s
Total time 54.85s
0 cells in total并行
读取工作表会占用大量 CPU 从而限制了从并行中获取好处。但是，如果你主要对 dump 工作表内容感兴趣，你可以使用 openpyxl 的只读模式打开复数工作表来利用多核 CPU。
Sample code using the same source file as for read performance shows that performance scales reasonably with only a slight overhead due to creating additional Python processes.
Chapter 5. 性能
CHAPTER 6

其他主题

6.1 优化模式
6.1.1 只读模式
有时，你可能需要打开或写入极端大的 XLSX 文件，但通用的 openpyxl 程序无法处理这么大的负载。幸运的是，有两种模式可以使你在（几乎）恒定的内存消耗下读写无限量的数据。
介绍openpyxl.worksheet._read_only.ReadOnlyWorksheet:
from openpyxl import load_workbook wb = load_workbook(filename='large_file.xlsx', read_only=True) ws = wb['big_data']
for row in ws.rows:
for cell in row:
print(cell.value)警告:
• openpyxl.worksheet._read_only.ReadOnlyWorksheet是只读的单元格的返回值不是openpyxl.cell.cell.Cell 而是 openpyxl.cell._read_only.

ReadOnlyCell.
工作表尺寸（dimensions）
只读模式依赖创建文件的应用以及库提供工作表的正确信息，尤其是文件的已使用部分，称之为尺寸（dimensions）。一些应用汇进行设置错误。可以使用 ws.calculate_dimension() 函数来检查工作表的尺寸（dimensions）。如果返回和范围和你知道的不一样，比如说 A1:A1 ，你可以简单重置 max_row 和 max_column 属性，即可使用该文件:
ws.reset_dimensions()
6.1.2 只写模式
常规的openpyxl.worksheet.worksheet.Worksheet 被替代成更快的 openpyxl.worksheet.
_write_only.WriteOnlyWorksheet。当你想导出大量数据的时候请确保安装了 lxml 库.
>>> from openpyxl import Workbook
>>> wb = Workbook(write_only=True) >>> ws = wb.create_sheet()
>>> >>> # now we'll fill it with 100 rows x 200 columns
>>> >>> for irow in range(100):
...	ws.append(['%d' % i for i in range(200)]) >>> # save the file
>>> wb.save('new_big_file.xlsx') # doctest: +SKIP
如果你想要带有样式或者注释的单元格可以使用openpyxl.cell.WriteOnlyCell()
>>> from openpyxl import Workbook
>>> wb = Workbook(write_only = True)
>>> ws = wb.create_sheet()
>>> from openpyxl.cell import WriteOnlyCell
>>> from openpyxl.comments import Comment
>>> from openpyxl.styles import Font
>>> cell = WriteOnlyCell(ws, value="hello world")
>>> cell.font = Font(name='Courier', size=36) >>> cell.comment = Comment(text="A comment", author="Author's Name")
>>> ws.append([cell, 3.14, None])
>>> wb.save('write_only_file.xlsx') 以上会创建只有一张工作表的只写工作簿，一行写入（append）三个单元格：一个带有自定义字体和注释的文字单元格，一个浮点数单元格和一个空单元格（一定会被丢弃）。
警告:
• 和普通工作簿不同的是，新创建的只写工作簿没有任何工作表；工作表只能由 create_sheet()方法进行创建。
• 在只读工作簿中，只能由 append() 来添加行。无法使用 cell() 或 iter_rows() 对任意位置的单元进行读取或写入。
• 可以导出不限量的数据（即使超过 Excel 的处理上限），同时内存使用量小于 10Mb。
• 一个只写工作簿只能保存一次。之后如果任何尝试保存和添加数据（append()）的操作都会会引发openpyxl.utils.exceptions.WorkbookAlreadySaved错误。
• Everything that appears in the file before the actual cell data must be created before cells are added because it must written to the file before then. For example, freeze_panes should be set before cells are added.6.2 插入删除行或列, 移动范围单元格
6.2.1 插入行和列
你可以使用工作表相关的方法来插入行和列:
• openpyxl.worksheet.worksheet.Worksheet.insert_rows()
• openpyxl.worksheet.worksheet.Worksheet.insert_cols()
• openpyxl.worksheet.worksheet.Worksheet.delete_rows()
• openpyxl.worksheet.worksheet.Worksheet.delete_cols()
默认是一行或一列。例如在第七行插入一行 (存在第七行):
>>> ws.insert_rows(7)
6.2.2 删除多行或多列
删除F:H列:
>>> ws.delete_cols(6, 3)
6.2. 插入删除行或列, 移动范围单元格
6.2.3 Moving ranges of cells
你也可以在一个工作表内移动范围单元格:
>>> ws.move_range("D4:F10", rows=-1, cols=2)
这会将D4:F10单元格向上移动一行向右移动两列，已存在的单元格将会被覆盖如果单元格包含公式，你可以让 openpyxl 帮你进行 translate，但也并非总是你想要的结果，因此默认是禁用的。同时，只有单元格本身的公式将会被 translate。其他单元格对该单元格的引用或 defined name 将不会被更新。你可以使用Parsing Formulas 来做这件事:
>>> ws.move_range("G4:H10", rows=1, cols=1, translate=True)
公式中的相对引用移动一行和一列 6.3 与 Pandas 和 NumPy 一起使用
openpyxl 可以与流行的 Pandas 和 NumPy 一起使用
6.3.1 NumPy 支持
openpyxl 内置支持 NumPy 的 float，integer 和 boolean 类型。DateTimes are supported using the Pandas'Timestamp type.
6.3.2 和 Pandas Dataframes 一起使用
openpyxl.utils.dataframe.dataframe_to_rows() 提供了一种使用 Pandas Dataframes 的简单方法:
from openpyxl.utils.dataframe import dataframe_to_rows wb = Workbook() ws = wb.active
for r in dataframe_to_rows(df, index=True, header=True):
ws.append(r)虽然 Pandas 本身支持对 Excel 的转换，但这为客户端代码提供了更多的灵活性，包括直接将数据帧（stream dataframes）流传输到文件的能力。将 dataframe 转换为工作簿时高亮表头和索引:
wb = Workbook() ws = wb.active
for r in dataframe_to_rows(df, index=True, header=True):
ws.append(r)
for cell in ws['A'] + ws[1]: cell.style = 'Pandas'
wb.save("pandas_openpyxl.xlsx")另外，如果你只想转换数据，你可以使用只写模式:
from openpyxl.cell.cell import WriteOnlyCell wb = Workbook(write_only=True) ws = wb.create_sheet()
cell = WriteOnlyCell(ws) cell.style = 'Pandas'
def format_first_row(row, cell):
for c in row: cell.value = c yield cell
rows = dataframe_to_rows(df) first_row = format_first_row(next(rows), cell) ws.append(first_row)
for row in rows:
row = list(row) cell.value = row[0] row[0] = cell ws.append(row)
wb.save("openpyxl_stream.xlsx")此代码和标准工作簿一起起作用。
6.3. 与 Pandas 和 NumPy 一起使用
6.3.3 将工作簿转换为 Dataframe（PS：样例文件可以参考 df.to_excel() 的文件）
如果工作簿没有表头和索引很容易用 values 属性将一个工作簿转换为 Dataframe:
df = DataFrame(ws.values)
如果工作簿确实有表头和索引，例如 Pandas 创建的文件，那还要做更多的一些工作:
from itertools import islice data = ws.values cols = next(data)[1:] data = list(data) idx = [r[0] for r in data] data = (islice(r, 1, None) for r in data) df = DataFrame(data, index=idx, columns=cols)
6.4 图表
6.4.1 图标类型
以下图表是可用的:
面积图二维面积图
面积图类似于折线图，不同之处在于填充了绘制线下方的区域。通过将分组设置为"标准"，"堆叠"或"百分比堆叠"，可以使用不同的变体。默认为"标准"。
from openpyxl import Workbook from openpyxl.chart import (
AreaChart,
Reference,
    Series, )
wb = Workbook() ws = wb.active(下页继续)

(续上页)
rows = [
['Number', 'Batch 1', 'Batch 2'],
[2, 40, 30],
[3, 40, 25],
[4, 50, 30],
[5, 30, 10],
[6, 25, 5],
[7, 50, 10],
]
for row in rows:
ws.append(row)
chart = AreaChart() chart.title = "Area Chart" chart.style = 13 chart.x_axis.title = 'Test' chart.y_axis.title = 'Percentage'
cats = Reference(ws, min_col=1, min_row=1, max_row=7) data = Reference(ws, min_col=2, min_row=1, max_col=3, max_row=7) chart.add_data(data, titles_from_data=True) chart.set_categories(cats)
ws.add_chart(chart, "A10")
wb.save("area.xlsx")
三维面积图
你也可以创建三维面积图
from openpyxl import Workbook from openpyxl.chart import (
AreaChart3D,
Reference,
    Series, )
wb = Workbook() ws = wb.active
rows = [
['Number', 'Batch 1', 'Batch 2'],
[2, 30, 40],
[3, 25, 40],(下页继续)
(续上页)
[4 ,30, 50],
[5 ,10, 30],
[6, 5, 25],
[7 ,10, 50],
]
for row in rows:
ws.append(row)
chart = AreaChart3D() chart.title = "Area Chart" chart.style = 13 chart.x_axis.title = 'Test' chart.y_axis.title = 'Percentage' chart.legend = None
cats = Reference(ws, min_col=1, min_row=1, max_row=7) data = Reference(ws, min_col=2, min_row=1, max_col=3, max_row=7) chart.add_data(data, titles_from_data=True) chart.set_categories(cats)
ws.add_chart(chart, "A10")
wb.save("area3D.xlsx")这将生成一个简单的三维面积图，其中第三个轴可用于替换图例：

条形图和柱状图
在条形图中，值被绘制为水平条或垂直列。（In bar charts values are plotted as either horizontal bars or vertical columns.）
垂直水平和堆叠条形图

注解: 以下设置会影响不同的图表类型。
通过分别将 type 设置为 col 或 bar，可以柱状和水平条形图之间切换。
使用堆叠图表时，需要将 overlap 属性设置为 100。
如果条是水平的，则 x 和 y 轴将反转。


from openpyxl import Workbook from openpyxl.chart import BarChart, Series, Reference
wb = Workbook(write_only=True) ws = wb.create_sheet()
rows = [
('Number', 'Batch 1', 'Batch 2'),
(2, 10, 30),
(3, 40, 60),
(4, 50, 70),
(5, 20, 10),
(6, 10, 40),
(7, 50, 30),
]
for row in rows:
ws.append(row)
chart1 = BarChart()(下页继续) (续上页)
chart1.type = "col" chart1.style = 10 chart1.title = "Bar Chart" chart1.y_axis.title = 'Test number' chart1.x_axis.title = 'Sample length (mm)'
data = Reference(ws, min_col=2, min_row=1, max_row=7, max_col=3) cats = Reference(ws, min_col=1, min_row=2, max_row=7) chart1.add_data(data, titles_from_data=True) chart1.set_categories(cats) chart1.shape = 4 ws.add_chart(chart1, "A10")
from copy import deepcopy
chart2 = deepcopy(chart1) chart2.style = 11 chart2.type = "bar" chart2.title = "Horizontal Bar Chart"
ws.add_chart(chart2, "G10")
chart3 = deepcopy(chart1) chart3.type = "col" chart3.style = 12 chart3.grouping = "stacked" chart3.overlap = 100 chart3.title = 'Stacked Chart'
ws.add_chart(chart3, "A27")
chart4 = deepcopy(chart1) chart4.type = "bar" chart4.style = 13 chart4.grouping = "percentStacked" chart4.overlap = 100 chart4.title = 'Percent Stacked Chart'(下页继续)

ws.add_chart(chart4, "G27")
wb.save("bar.xlsx")
以上创建了四个图表，展示了各种可能性。
三维条形图
你也能创建三维条形图
from openpyxl import Workbook from openpyxl.chart import (
Reference,
Series,
    BarChart3D, )
wb = Workbook() ws = wb.active
rows = [
(None, 2013, 2014),
("Apples", 5, 4),
("Oranges", 6, 2),
("Pears", 8, 3)
]
for row in rows:
ws.append(row)
data = Reference(ws, min_col=2, min_row=1, max_col=3, max_row=4) titles = Reference(ws, min_col=1, min_row=2, max_row=4) chart = BarChart3D() chart.title = "3D Bar Chart" chart.add_data(data=data, titles_from_data=True) chart.set_categories(titles)
ws.add_chart(chart, "E5") wb.save("bar3d.xlsx")这样能创建一个简单的三维条形图

气泡图
气泡图类似于散点图但使用第三维来决定气泡的大小，可以包含多个图例。
"""
Sample bubble chart
"""
from openpyxl import Workbook from openpyxl.chart import Series, Reference, BubbleChart
wb = Workbook() ws = wb.active
rows = [
("Number of Products", "Sales in USD", "Market share"),
(14, 12200, 15),
(20, 60000, 33),
(18, 24400, 10),
(22, 32000, 42),
(),
(12, 8200, 18),
(15, 50000, 30),
(19, 22400, 15),
(25, 25000, 50),
]
for row in rows:
ws.append(row)(下页继续)
chart = BubbleChart() chart.style = 18 # use a preset style
# add the first series of data xvalues = Reference(ws, min_col=1, min_row=2, max_row=5) yvalues = Reference(ws, min_col=2, min_row=2, max_row=5) size = Reference(ws, min_col=3, min_row=2, max_row=5) series = Series(values=yvalues, xvalues=xvalues, zvalues=size, title="2013") chart.series.append(series)
# add the second xvalues = Reference(ws, min_col=1, min_row=7, max_row=10) yvalues = Reference(ws, min_col=2, min_row=7, max_row=10) size = Reference(ws, min_col=3, min_row=7, max_row=10) series = Series(values=yvalues, xvalues=xvalues, zvalues=size, title="2014") chart.series.append(series)
# place the chart starting in cell E1 ws.add_chart(chart, "E1") wb.save("bubble.xlsx")这会产生一个有两个图例的气泡图，并且样式如下

Line Charts
Line Charts
Line charts allow data to be plotted against a fixed axis. They are similar to scatter charts, the main difference is that with line charts each data series is plotted against the same values.
Different kinds of axes can be used for the secondary axes.

Similar to bar charts there are three kinds of line charts: standard, stacked and percentStacked.
from datetime import date
from openpyxl import Workbook from openpyxl.chart import (
LineChart,
    Reference, ) from openpyxl.chart.axis import DateAxis
wb = Workbook() ws = wb.active
rows = [
['Date', 'Batch 1', 'Batch 2', 'Batch 3'],
[date(2015,9, 1), 40, 30, 25],
[date(2015,9, 2), 40, 25, 30],
[date(2015,9, 3), 50, 30, 45],
[date(2015,9, 4), 30, 25, 40],
[date(2015,9, 5), 25, 35, 30],
[date(2015,9, 6), 20, 40, 35],
]
for row in rows:
ws.append(row)
c1 = LineChart() c1.title = "Line Chart" c1.style = 13 c1.y_axis.title = 'Size' c1.x_axis.title = 'Test Number'
data = Reference(ws, min_col=2, min_row=1, max_col=4, max_row=7) c1.add_data(data, titles_from_data=True)
# Style the lines s1 = c1.series[0]
s1.marker.symbol = "triangle" s1.marker.graphicalProperties.solidFill = "FF0000" # Marker filling s1.marker.graphicalProperties.line.solidFill = "FF0000" # Marker outline(下页继续)
40
s1.graphicalProperties.line.noFill = True
s2 = c1.series[1] s2.graphicalProperties.line.solidFill = "00AAAA" s2.graphicalProperties.line.dashStyle = "sysDot" s2.graphicalProperties.line.width = 100050 # width in EMUs
s2 = c1.series[2] s2.smooth = True # Make the line smooth
ws.add_chart(c1, "A10")
from copy import deepcopy stacked = deepcopy(c1) stacked.grouping = "stacked" stacked.title = "Stacked Line Chart" ws.add_chart(stacked, "A27")
percent_stacked = deepcopy(c1) percent_stacked.grouping = "percentStacked" percent_stacked.title = "Percent Stacked Line Chart" ws.add_chart(percent_stacked, "A44")
# Chart with date axis c2 = LineChart() c2.title = "Date Axis" c2.style = 12 c2.y_axis.title = "Size" c2.y_axis.crossAx = 500 c2.x_axis = DateAxis(crossAx=100) c2.x_axis.number_format = 'd-mmm' c2.x_axis.majorTimeUnit = "days" c2.x_axis.title = "Date"
c2.add_data(data, titles_from_data=True) dates = Reference(ws, min_col=1, min_row=2, max_row=7) c2.set_categories(dates)
ws.add_chart(c2, "A61")(下页继续) (续上页)
wb.save("line.xlsx")



3D Line Charts
In 3D line charts the third axis is the same as the legend for the series.
from datetime import date
from openpyxl import Workbook from openpyxl.chart import (
LineChart3D,
    Reference, ) from openpyxl.chart.axis import DateAxis
wb = Workbook() ws = wb.active
rows = [
['Date', 'Batch 1', 'Batch 2', 'Batch 3'],
[date(2015,9, 1), 40, 30, 25],
[date(2015,9, 2), 40, 25, 30],
[date(2015,9, 3), 50, 30, 45],
[date(2015,9, 4), 30, 25, 40],
[date(2015,9, 5), 25, 35, 30],
[date(2015,9, 6), 20, 40, 35],
]
for row in rows:
ws.append(row)
c1 = LineChart3D() c1.title = "3D Line Chart" c1.legend = None c1.style = 15 c1.y_axis.title = 'Size' c1.x_axis.title = 'Test Number'
data = Reference(ws, min_col=2, min_row=1, max_col=4, max_row=7) c1.add_data(data, titles_from_data=True)
ws.add_chart(c1, "A10")(下页继续)
(续上页)
wb.save("line3D.xlsx")

Scatter Charts
Scatter, or xy, charts are similar to some line charts. The main difference is that one series of values is plotted against another. This is useful where values are unordered.
from openpyxl import Workbook from openpyxl.chart import (
ScatterChart,
Reference,
    Series, )
wb = Workbook() ws = wb.active(下页继续)
(续上页)
rows = [
['Size', 'Batch 1', 'Batch 2'],
[2, 40, 30],
[3, 40, 25],
[4, 50, 30],
[5, 30, 25],
[6, 25, 35],
[7, 20, 40],
]
for row in rows:
ws.append(row)
chart = ScatterChart() chart.title = "Scatter Chart" chart.style = 13 chart.x_axis.title = 'Size' chart.y_axis.title = 'Percentage'
xvalues = Reference(ws, min_col=1, min_row=2, max_row=7) for i in range(2, 4):
values = Reference(ws, min_col=i, min_row=1, max_row=7) series = Series(values, xvalues, title_from_data=True) chart.series.append(series)
ws.add_chart(chart, "A10")
wb.save("scatter.xlsx")

注解:	The specification says that there are the following types of scatter charts: 'line',
'lineMarker','marker','smooth','smoothMarker'. However, at least in Microsoft Excel, this is just a shortcut for other settings that otherwise have no effect. For consistency with line charts, the style for each series should be set manually.

Pie Charts
Pie Charts
Pie charts plot data as slices of a circle with each slice representing the percentage of the whole. Slices are plotted in a clockwise direction with 0° being at the top of the circle. Pie charts can only take a single series of data. The title of the chart will default to being the title of the series.
from openpyxl import Workbook from openpyxl.chart import (
(下页继续)
(续上页)
PieChart,
ProjectedPieChart,
    Reference ) from openpyxl.chart.series import DataPoint
data = [
['Pie', 'Sold'],
['Apple', 50],
['Cherry', 30],
['Pumpkin', 10],
['Chocolate', 40],
]
wb = Workbook() ws = wb.active
for row in data:
ws.append(row)
pie = PieChart() labels = Reference(ws, min_col=1, min_row=2, max_row=5) data = Reference(ws, min_col=2, min_row=1, max_row=5) pie.add_data(data, titles_from_data=True) pie.set_categories(labels) pie.title = "Pies sold by category"
# Cut the first slice out of the pie slice = DataPoint(idx=0, explosion=20) pie.series[0].data_points = [slice]
ws.add_chart(pie, "D1")
ws = wb.create_sheet(title="Projection")
data = [
['Page', 'Views'],
['Search', 95],
['Products', 4],(下页继续) (续上页)
['Offers', 0.5],
['Sales', 0.5],
]
for row in data:
ws.append(row)
projected_pie = ProjectedPieChart() projected_pie.type = "pie" projected_pie.splitType = "val" # split by value labels = Reference(ws, min_col=1, min_row=2, max_row=5) data = Reference(ws, min_col=2, min_row=1, max_row=5) projected_pie.add_data(data, titles_from_data=True) projected_pie.set_categories(labels)
ws.add_chart(projected_pie, "A10")
from copy import deepcopy projected_bar = deepcopy(projected_pie) projected_bar.type = "bar" projected_bar.splitType = 'pos' # split by position
ws.add_chart(projected_bar, "A27")
wb.save("pie.xlsx")
Projected Pie Charts
Projected pie charts extract some slices from a pie chart and project them into a second pie or bar chart. This is useful when there are several smaller items in the data series. The chart can be split according to percent, val(ue) or pos(ition). If nothing is set then the application decides which to use. In addition custom splits can be defined.


3D Pie Charts
Pie charts can also be created with a 3D effect.

from openpyxl import Workbook
from openpyxl.chart import (
PieChart3D,
Reference
)
data = [
['Pie', 'Sold'],
['Apple', 50],
['Cherry', 30],
['Pumpkin', 10],
['Chocolate', 40],
]
wb = Workbook() ws = wb.active
for row in data:
ws.append(row)
pie = PieChart3D() labels = Reference(ws, min_col=1, min_row=2, max_row=5) data = Reference(ws, min_col=2, min_row=1, max_row=5) pie.add_data(data, titles_from_data=True) pie.set_categories(labels) pie.title = "Pies sold by category"
ws.add_chart(pie, "D1")
wb.save("pie3D.xlsx")
Gradient Pie Charts
Pie charts can also be created with gradient series.
..literalinclude:: pie-gradient.py

旭日图
旭日图和饼图相似，不同之处在于使用的是圆形还是圆环。他们还可以将多个系列的数据绘制为同心环。
from openpyxl import Workbook
from openpyxl.chart import (
DoughnutChart,
Reference,
    Series, ) from openpyxl.chart.series import DataPoint(下页继续)

data = [
['Pie', 2014, 2015],
['Plain', 40, 50],
['Jam', 2, 10],
['Lime', 20, 30],
['Chocolate', 30, 40],
]
wb = Workbook() ws = wb.active
for row in data:
ws.append(row)
chart = DoughnutChart() labels = Reference(ws, min_col=1, min_row=2, max_row=5) data = Reference(ws, min_col=2, min_row=1, max_row=5) chart.add_data(data, titles_from_data=True) chart.set_categories(labels) chart.title = "Doughnuts sold by category" chart.style = 26
# Cut the first slice out of the doughnut slices = [DataPoint(idx=i) for i in range(4)] plain, jam, lime, chocolate = slices chart.series[0].data_points = slices plain.graphicalProperties.solidFill = "FAE1D0" jam.graphicalProperties.solidFill = "BB2244" lime.graphicalProperties.solidFill = "22DD22" chocolate.graphicalProperties.solidFill = "61210B" chocolate.explosion = 10
ws.add_chart(chart, "E1")
from copy import deepcopy
chart2 = deepcopy(chart) chart2.title = None
data = Reference(ws, min_col=3, min_row=1, max_row=5) series2 = Series(data, title_from_data=True)(下页继续)
series2.data_points = slices chart2.series.append(series2)
ws.add_chart(chart2, "E17")
wb.save("doughnut.xlsx")

Radar Charts
Data that is arranged in columns or rows on a worksheet can be plotted in a radar chart. Radar charts compare the aggregate values of multiple data series. It is effectively a projection of an area chart on a circular x-axis.
There are two types of radar chart: standard, where the area is marked with a line; and filled, where the whole area is filled. The additional type"marker"has no effect. If markers are desired these can be set for the relevant series.
from openpyxl import Workbook from openpyxl.chart import (
RadarChart,
Reference,
)(下页继续)

wb = Workbook() ws = wb.active
rows = [
['Month', "Bulbs", "Seeds", "Flowers", "Trees & shrubs"],
['Jan', 0, 2500, 500, 0,],
['Feb', 0, 5500, 750, 1500],
['Mar', 0, 9000, 1500, 2500],
['Apr', 0, 6500, 2000, 4000],
['May', 0, 3500, 5500, 3500],
['Jun', 0, 0, 7500, 1500],
['Jul', 0, 0, 8500, 800],
['Aug', 1500, 0, 7000, 550],
['Sep', 5000, 0, 3500, 2500],
['Oct', 8500, 0, 2500, 6000],
['Nov', 3500, 0, 500, 5500],
['Dec', 500, 0, 100, 3000 ],
]
for row in rows:
ws.append(row)
chart = RadarChart() chart.type = "filled" labels = Reference(ws, min_col=1, min_row=2, max_row=13) data = Reference(ws, min_col=2, max_col=5, min_row=1, max_row=13) chart.add_data(data, titles_from_data=True) chart.set_categories(labels) chart.style = 26 chart.title = "Garden Centre Sales" chart.y_axis.delete = True
ws.add_chart(chart, "A17")
wb.save("radar.xlsx")

Stock Charts
Data that is arranged in columns or rows in a specific order on a worksheet can be plotted in a stock chart. As its name implies, a stock chart is most often used to illustrate the fluctuation of stock prices. However, this chart may also be used for scientific data. For example, you could use a stock chart to indicate the fluctuation of daily or annual temperatures. You must organize your data in the correct order to create stock charts.
The way stock chart data is organized in the worksheet is very important. For example, to create a simple high-low-close stock chart, you should arrange your data with High, Low, and Close entered as column headings, in that order.
Although stock charts are a distinct type, the various types are just shortcuts for particular formatting options:
• high-low-close is essentially a line chart with no lines and the marker set to XYZ. It also sets hiLoLines to True
• open-high-low-close is the same as a high-low-close chart with the marker for each data point set to XZZ and upDownLines.
Volume can be added by combining the stock chart with a bar chart for the volume.
from datetime import date
from openpyxl import Workbook
from openpyxl.chart import (
BarChart,
StockChart,
Reference,
    Series, ) from openpyxl.chart.axis import DateAxis, ChartLines from openpyxl.chart.updown_bars import UpDownBars
wb = Workbook() ws = wb.active
rows = [
	['Date',	'Volume','Open', 'High', 'Low', 'Close'],
	['2015-01-01', 20000,	26.2, 27.20, 23.49, 25.45, ],
	['2015-01-02', 10000,	25.45, 25.03, 19.55, 23.05, ],
	['2015-01-03', 15000,	23.05, 24.46, 20.03, 22.42, ],
	['2015-01-04', 2000,	22.42, 23.97, 20.07, 21.90, ],
	['2015-01-05', 12000,	21.9, 23.65, 19.50, 21.51, ],
]
for row in rows:
ws.append(row)
# High-low-close c1 = StockChart() labels = Reference(ws, min_col=1, min_row=2, max_row=6) data = Reference(ws, min_col=4, max_col=6, min_row=1, max_row=6) c1.add_data(data, titles_from_data=True)(下页继续)
(续上页)
c1.set_categories(labels) for s in c1.series:
s.graphicalProperties.line.noFill = True
# marker for close
s.marker.symbol = "dot"
s.marker.size = 5 c1.title = "High-low-close" c1.hiLowLines = ChartLines()
# Excel is broken and needs a cache of values in order to display hiLoLines :-/ from openpyxl.chart.data_source import NumData, NumVal pts = [NumVal(idx=i) for i in range(len(data) - 1)] cache = NumData(pt=pts) c1.series[-1].val.numRef.numCache = cache
ws.add_chart(c1, "A10")
# Open-high-low-close c2 = StockChart() data = Reference(ws, min_col=3, max_col=6, min_row=1, max_row=6) c2.add_data(data, titles_from_data=True) c2.set_categories(labels) for s in c2.series:
s.graphicalProperties.line.noFill = True
c2.hiLowLines = ChartLines() c2.upDownBars = UpDownBars() c2.title = "Open-high-low-close"
# add dummy cache c2.series[-1].val.numRef.numCache = cache
ws.add_chart(c2, "G10")
# Create bar chart for volume
bar = BarChart() data = Reference(ws, min_col=2, min_row=1, max_row=6) bar.add_data(data, titles_from_data=True) bar.set_categories(labels)(下页继续)


from copy import deepcopy
# Volume-high-low-close b1 = deepcopy(bar) c3 = deepcopy(c1) c3.y_axis.majorGridlines = None c3.y_axis.title = "Price" b1.y_axis.axId = 20 b1.z_axis = c3.y_axis b1.y_axis.crosses = "max" b1 += c3
c3.title = "High low close volume"
ws.add_chart(b1, "A27")
## Volume-open-high-low-close b2 = deepcopy(bar) c4 = deepcopy(c2) c4.y_axis.majorGridlines = None c4.y_axis.title = "Price" b2.y_axis.axId = 20 b2.z_axis = c4.y_axis b2.y_axis.crosses = "max" b2 += c4
ws.add_chart(b2, "G27")
wb.save("stock.xlsx")警告: Due to a bug in Excel high-low lines will only be shown if at least one of the data series has some dummy values. This can be done with the following hack:
from openpyxl.chart.data_source import NumData, NumVal pts = [NumVal(idx=i) for i in range(len(data) - 1)] cache = NumData(pt=pts) c1.series[-1].val.numRef.numCache = cacheSurface charts
Data that is arranged in columns or rows on a worksheet can be plotted in a surface chart. A surface chart is useful when you want to find optimum combinations between two sets of data. As in a topographic map, colors and patterns indicate areas that are in the same range of values.
By default all surface charts are 3D. 2D wireframe and contour charts are created by setting the rotation and perspective.
from openpyxl import Workbook from openpyxl.chart import (
SurfaceChart,
SurfaceChart3D,
Reference,
    Series, ) from openpyxl.chart.axis import SeriesAxis
wb = Workbook() ws = wb.active
data = [
[None, 10, 20, 30, 40, 50,],(下页继续)
[0.1, 15, 65, 105, 65, 15,],
[0.2, 35, 105, 170, 105, 35,],
[0.3, 55, 135, 215, 135, 55,],
[0.4, 75, 155, 240, 155, 75,],
[0.5, 80, 190, 245, 190, 80,],
[0.6, 75, 155, 240, 155, 75,],
[0.7, 55, 135, 215, 135, 55,],
[0.8, 35, 105, 170, 105, 35,],
[0.9, 15, 65, 105, 65, 15],
]
for row in data:
ws.append(row)
c1 = SurfaceChart() ref = Reference(ws, min_col=2, max_col=6, min_row=1, max_row=10) labels = Reference(ws, min_col=1, min_row=2, max_row=10) c1.add_data(ref, titles_from_data=True) c1.set_categories(labels) c1.title = "Contour"
ws.add_chart(c1, "A12")
from copy import deepcopy
# wireframe c2 = deepcopy(c1) c2.wireframe = True c2.title = "2D Wireframe"
ws.add_chart(c2, "G12")
# 3D Surface c3 = SurfaceChart3D() c3.add_data(ref, titles_from_data=True) c3.set_categories(labels) c3.title = "Surface"
ws.add_chart(c3, "A29")(下页继续)

c4 = deepcopy(c3) c4.wireframe = True c4.title = "3D Wireframe"
ws.add_chart(c4, "G29")
wb.save("surface.xlsx")

6.4.2 创建图表
图表由至少一个系列的一个或多个数据点组成。系列由单元格范围的引用组成。
>>> from openpyxl import Workbook
>>> wb = Workbook()
>>> ws = wb.active
>>> for i in range(10):
...	ws.append([i])
>>>
>>> from openpyxl.chart import BarChart, Reference, Series
(下页继续)
>>> values = Reference(ws, min_col=1, min_row=1, max_col=1, max_row=10)
>>> chart = BarChart()
>>> chart.add_data(values)
>>> ws.add_chart(chart, "E15")
>>> wb.save("SampleChart.xlsx")
默认情况下，图表的左上角固定在单元格 E15 上，大小为 15 x 7.5 厘米（大约 5 列乘 14 行）。可以通过设置图表的 anchor，width 和 height 属性来更改。实际大小将取决于操作系统和设备。其他锚点（anchors ）也是有可能的。更多资料请参考 openpyxl.drawing.spreadsheet_drawing。
6.4.3 使用轴
Axis Limits and Scale
Minima and Maxima
Axis minimum and maximum values can be set manually to display specific regions on a chart.
from openpyxl import Workbook from openpyxl.chart import (
ScatterChart,
Reference,
    Series, )
wb = Workbook() ws = wb.active
ws.append(['X', '1/X']) for x in range(-10, 11):
if x:
ws.append([x, 1.0 / x])
chart1 = ScatterChart() chart1.title = "Full Axes" chart1.x_axis.title = 'x' chart1.y_axis.title = '1/x' chart1.legend = None
chart2 = ScatterChart()(下页继续)

chart2.title = "Clipped Axes" chart2.x_axis.title = 'x' chart2.y_axis.title = '1/x' chart2.legend = None
chart2.x_axis.scaling.min = 0 chart2.y_axis.scaling.min = 0 chart2.x_axis.scaling.max = 11 chart2.y_axis.scaling.max = 1.5
x = Reference(ws, min_col=1, min_row=2, max_row=22) y = Reference(ws, min_col=2, min_row=2, max_row=22) s = Series(y, xvalues=x) chart1.append(s) chart2.append(s)
ws.add_chart(chart1, "C1") ws.add_chart(chart2, "C15")
wb.save("minmax.xlsx")


注解: In some cases such as the one shown, setting the axis limits is effectively equivalent to displaying a sub-range of the data. For large datasets, rendering of scatter plots (and possibly others) will be much faster when using subsets of the data rather than axis limits in both Excel and Open/Libre Office.

Logarithmic Scaling
Both the x- and y-axes can be scaled logarithmically. The base of the logarithm can be set to any valid float. If the x-axis is scaled logarithmically, negative values in the domain will be discarded.
from openpyxl import Workbook from openpyxl.chart import (
(下页继续)
(续上页)
ScatterChart,
Reference,
    Series, ) import math
wb = Workbook() ws = wb.active
ws.append(['X', 'Gaussian']) for i, x in enumerate(range(-10, 11)):
ws.append([x, "=EXP(-(($A${row}/6)^2))".format(row = i + 2)])
chart1 = ScatterChart() chart1.title = "No Scaling" chart1.x_axis.title = 'x' chart1.y_axis.title = 'y' chart1.legend = None
chart2 = ScatterChart() chart2.title = "X Log Scale" chart2.x_axis.title = 'x (log10)' chart2.y_axis.title = 'y' chart2.legend = None chart2.x_axis.scaling.logBase = 10
chart3 = ScatterChart() chart3.title = "Y Log Scale" chart3.x_axis.title = 'x' chart3.y_axis.title = 'y (log10)' chart3.legend = None chart3.y_axis.scaling.logBase = 10
chart4 = ScatterChart() chart4.title = "Both Log Scale" chart4.x_axis.title = 'x (log10)' chart4.y_axis.title = 'y (log10)' chart4.legend = None
chart4.x_axis.scaling.logBase = 10 chart4.y_axis.scaling.logBase = 10(下页继续)
chart5 = ScatterChart() chart5.title = "Log Scale Base e" chart5.x_axis.title = 'x (ln)' chart5.y_axis.title = 'y (ln)' chart5.legend = None chart5.x_axis.scaling.logBase = math.e chart5.y_axis.scaling.logBase = math.e
x = Reference(ws, min_col=1, min_row=2, max_row=22) y = Reference(ws, min_col=2, min_row=2, max_row=22) s = Series(y, xvalues=x) chart1.append(s) chart2.append(s) chart3.append(s) chart4.append(s) chart5.append(s)
ws.add_chart(chart1, "C1") ws.add_chart(chart2, "I1") ws.add_chart(chart3, "C15") ws.add_chart(chart4, "I15") ws.add_chart(chart5, "F30")
wb.save("log.xlsx")This produces five charts that look something like this:

The first four charts show the same data unscaled, scaled logarithmically in each axis and in both axes, with the logarithm base set to 10. The final chart shows the same data with both axes scaled, but the base of the logarithm set to e.
Axis Orientation
Axes can be displayed "normally"or in reverse. Axis orientation is controlled by the scaling orientation property, which can have a value of either 'minMax' for normal orientation or 'maxMin' for reversed.
from openpyxl import Workbook from openpyxl.chart import (
ScatterChart,
Reference,
    Series, )
wb = Workbook() ws = wb.active(下页继续)
ws["A1"] = "Archimedean Spiral" ws.append(["T", "X", "Y"]) for i, t in enumerate(range(100)):
ws.append([t / 16.0, "=$A${row}*COS($A${row})".format(row = i + 3),
"=$A${row}*SIN($A${row})".format(row = i + 3)])
chart1 = ScatterChart() chart1.title = "Default Orientation" chart1.x_axis.title = 'x' chart1.y_axis.title = 'y' chart1.legend = None
chart2 = ScatterChart() chart2.title = "Flip X" chart2.x_axis.title = 'x' chart2.y_axis.title = 'y' chart2.legend = None chart2.x_axis.scaling.orientation = "maxMin" chart2.y_axis.scaling.orientation = "minMax"
chart3 = ScatterChart() chart3.title = "Flip Y" chart3.x_axis.title = 'x' chart3.y_axis.title = 'y' chart3.legend = None chart3.x_axis.scaling.orientation = "minMax" chart3.y_axis.scaling.orientation = "maxMin"
chart4 = ScatterChart() chart4.title = "Flip Both" chart4.x_axis.title = 'x' chart4.y_axis.title = 'y' chart4.legend = None chart4.x_axis.scaling.orientation = "maxMin" chart4.y_axis.scaling.orientation = "maxMin"
x = Reference(ws, min_col=2, min_row=2, max_row=102) y = Reference(ws, min_col=3, min_row=2, max_row=102) s = Series(y, xvalues=x) chart1.append(s)(下页继续)

chart2.append(s) chart3.append(s) chart4.append(s)
ws.add_chart(chart1, "D1") ws.add_chart(chart2, "J1") ws.add_chart(chart3, "D15") ws.add_chart(chart4, "J15")
wb.save("orientation.xlsx")
This produces four charts with the axes in each possible combination of orientations that look something like this:

Adding a second axis
Adding a second axis actually involves creating a second chart that shares a common x-axis with the first chart but has a separate y-axis.
from openpyxl import Workbook from openpyxl.chart import (
LineChart,
BarChart,
Reference,
Series,
)(下页继续)
wb = Workbook() ws = wb.active
rows = [
['Aliens', 2, 3, 4, 5, 6, 7],
['Humans', 10, 40, 50, 20, 10, 50],
]
for row in rows:
ws.append(row)
c1 = BarChart() v1 = Reference(ws, min_col=1, min_row=1, max_col=7) c1.add_data(v1, titles_from_data=True, from_rows=True)
c1.x_axis.title = 'Days' c1.y_axis.title = 'Aliens' c1.y_axis.majorGridlines = None c1.title = 'Survey results'
# Create a second chart c2 = LineChart() v2 = Reference(ws, min_col=1, min_row=2, max_col=7) c2.add_data(v2, titles_from_data=True, from_rows=True) c2.y_axis.axId = 200 c2.y_axis.title = "Humans"
# Display y-axis of the second chart on the right by setting it to cross the x-
 ,→axis at its maximum c1.y_axis.crosses = "max" c1 += c2
ws.add_chart(c1, "D4")
wb.save("secondary.xlsx")This produces a combined line and bar chart looking something like this:

6.4.4 更改图表布局
更改绘图区和图例的布局
可以通过使用 layout 类实例的 layout 属性来设置图表的布局。
表格布局
位置和大小
图表可以放置在容器中。可以通过x和y调整位置。w和h调整大小。单位是容器的比例。图表不能放置在容器的外部，并且宽度和高度是主要限制：如果 x+w>1，则 x=1-w。
x 是从左侧开始的水平位置 y 是从顶部开始的垂直位置 h 是图表相对于其容器的高度 w 是盒子（box）的宽度
模式
除了大小和位置外，相关属性的模式也可以设置为 factor 或 edge。默认值为 factor:
layout.xMode = edge

目标（Target）
~layoutTarget' 属性可以设置成outer或者inner. 默认值为outer:
layout.layoutTarget = inner
图例布局
图例的位置可以通过设置位置参数来进行改变：r、l、t`、, ``b和tr, 分别代表右、左、上、下以及右上。默认值为r.
legend.position = 'tr'
或者应用手动布局：
legend.layout = ManualLayout()
from openpyxl import Workbook, load_workbook from openpyxl.chart import ScatterChart, Series, Reference from openpyxl.chart.layout import Layout, ManualLayout
wb = Workbook() ws = wb.active
rows = [
['Size', 'Batch 1', 'Batch 2'],
[2, 40, 30],
[3, 40, 25],
[4, 50, 30],
[5, 30, 25],
[6, 25, 35],
[7, 20, 40],
]
for row in rows:
ws.append(row)
ch1 = ScatterChart() xvalues = Reference(ws, min_col=1, min_row=2, max_row=7) for i in range(2, 4):
values = Reference(ws, min_col=i, min_row=1, max_row=7)(下页继续)
(续上页)
series = Series(values, xvalues, title_from_data=True) ch1.series.append(series)
ch1.title = "Default layout" ch1.style = 13 ch1.x_axis.title = 'Size' ch1.y_axis.title = 'Percentage' ch1.legend.position = 'r'
ws.add_chart(ch1, "B10")
from copy import deepcopy
# Half-size chart, bottom right ch2 = deepcopy(ch1) ch2.title = "Manual chart layout" ch2.legend.position = "tr" ch2.layout=Layout( manualLayout=ManualLayout( x=0.25, y=0.25, h=0.5, w=0.5,
    ) ) ws.add_chart(ch2, "H10")
# Half-size chart, centred ch3 = deepcopy(ch1) ch3.layout = Layout( ManualLayout( x=0.25, y=0.25, h=0.5, w=0.5, xMode="edge", yMode="edge",
    ) ) ch3.title = "Manual chart layout, edge mode" ws.add_chart(ch3, "B27")
# Manually position the legend bottom left(下页继续)
ch4 = deepcopy(ch1) ch4.title = "Manual legend layout" ch4.legend.layout = Layout( manualLayout=ManualLayout( yMode='edge', xMode='edge', x=0, y=0.9, h=0.1, w=0.5
    ) )
ws.add_chart(ch4, "H27")
wb.save("chart_layout.xlsx")以上会创建四个图表并展示了各种可能性：

6.4.5 图表样式
Adding Patterns
Whole data series and individual data points can be extensively styled through the graphicalProperties. Getting things just right may take some time.
from openpyxl import Workbook from openpyxl.chart import BarChart, Reference from openpyxl.chart.marker import DataPoint
from openpyxl.drawing.fill import PatternFillProperties, ColorChoice
wb = Workbook() ws = wb.active
rows = [
("Sample",),
(1,),
(2,),
(3,),
(2,),
(3,),
(3,),
(1,),
(2,),
]
for r in rows:
ws.append(r)
c = BarChart() data = Reference(ws, min_col=1, min_row=1, max_row=8) c.add_data(data, titles_from_data=True)
c.title = "Chart with patterns"
# set a pattern for the whole series series = c.series[0] fill = PatternFillProperties(prst="pct5") fill.foreground = ColorChoice(prstClr="red") fill.background = ColorChoice(prstClr="blue") series.graphicalProperties.pattFill = fill
# set a pattern for a 6th data point (0-indexed) pt = DataPoint(idx=5) pt.graphicalProperties.pattFill = PatternFillProperties(prst="ltHorz")(下页继续)
series.dPt.append(pt)
ws.add_chart(c, "C1")
wb.save("pattern.xlsx")

6.4.6 高级图表
图表能合并生成新的图表：
Gauge Charts
Gauge charts combine a pie chart and a doughnut chart to create a "gauge". The first chart is a doughnut chart with four slices. The first three slices correspond to the colours of the gauge; the fourth slice, which is half of the doughnut, is made invisible.
A pie chart containing three slices is added. The first and third slice are invisible so that the second slice can act as the needle on the gauge.
The effects are done using the graphical properties of individual data points in a data series.
from openpyxl import Workbook
from openpyxl.chart import PieChart, DoughnutChart, Series, Reference from openpyxl.chart.series import DataPoint
data = [
["Donut", "Pie"],(下页继续)

[25, 75],
[50, 1],
[25, 124],
[100],
]
# based on http://www.excel-easy.com/examples/gauge-chart.html
wb = Workbook() ws = wb.active for row in data:
ws.append(row)
# First chart is a doughnut chart c1 = DoughnutChart(firstSliceAng=270, holeSize=50) c1.title = "Code coverage" c1.legend = None
ref = Reference(ws, min_col=1, min_row=2, max_row=5) s1 = Series(ref, title_from_data=False)
slices = [DataPoint(idx=i) for i in range(4)] slices[0].graphicalProperties.solidFill = "FF3300" # red slices[1].graphicalProperties.solidFill = "FCF305" # yellow slices[2].graphicalProperties.solidFill = "1FB714" # green slices[3].graphicalProperties.noFill = True # invisible
s1.data_points = slices c1.series = [s1]
# Second chart is a pie chart c2 = PieChart(firstSliceAng=270) c2.legend = None
ref = Reference(ws, min_col=2, min_row=2, max_col=2, max_row=4) s2 = Series(ref, title_from_data=False)
slices = [DataPoint(idx=i) for i in range(3)] slices[0].graphicalProperties.noFill = True # invisible slices[1].graphicalProperties.solidFill = "000000" # black needle(下页继续)
slices[2].graphicalProperties.noFill = True # invisible s2.data_points = slices c2.series = [s2]
c1 += c2 # combine charts
ws.add_chart(c1, "D1")
wb.save("gauge.xlsx")

6.4.7 使用 chartsheets
图表能被加入到一个称为 chartsheets 特殊工作簿中：
Chartsheets
Chartsheets are special worksheets which only contain charts. All the data for the chart must be on a different worksheet.
from openpyxl import Workbook
from openpyxl.chart import PieChart, Reference, Series
wb = Workbook() ws = wb.active cs = wb.create_chartsheet()
rows = [
["Bob", 3],(下页继续)

["Harry", 2],
["James", 4],
]
for row in rows:
ws.append(row)
chart = PieChart() labels = Reference(ws, min_col=1, min_row=1, max_row=3) data = Reference(ws, min_col=2, min_row=1, max_row=3) chart.series = (Series(data),) chart.title = "PieChart"
cs.add_chart(chart)
wb.save("demo.xlsx")

6.5 注释
警告: openpyxl 目前只支持读写文字注释。格式信息会丢失。在读取时，注释尺寸也会丢失，但是可以重新写入。注释目前不支持 read_only=True 模式下使用。
6.5.1 为单元格添加注释
注释的 text 和 author 是必填属性
>>> from openpyxl import Workbook >>> from openpyxl.comments import Comment
>>> wb = Workbook()
>>> ws = wb.active
>>> comment = ws["A1"].comment
>>> comment = Comment('This is the comment text', 'Comment Author')
>>> comment.text
'This is the comment text'
>>> comment.author
'Comment Author'
如果你为不同的单元格设置了相同的注释，那么 openpyxl 会自动进行复制
>>> from openpyxl import Workbook >>> from openpyxl.comments import Comment
>>> wb=Workbook()
>>> ws=wb.active
>>> comment = Comment("Text", "Author")
>>> ws["A1"].comment = comment
>>> ws["B2"].comment = comment
>>> ws["A1"].comment is comment
True
>>> ws["B2"].comment is comment
False
6.5.2 加载和保存注释
加载时工作簿中存在的注释会自动存储在其相应单元格的 comment 属性中。格式信息（如字体大小，粗体和斜体）以及注释的容器框的原始尺寸和位置都将丢失。保存工作簿时保留在工作簿中的注释会自动保存到工作簿文件中。注释尺寸可以设定成只写。注释尺寸以像素为单位。
>>> from openpyxl import Workbook
>>> from openpyxl.comments import Comment
>>> from openpyxl.utils import units
>>>
>>> wb=Workbook()
>>> ws=wb.active
>>>
>>> comment = Comment("Text", "Author")
>>> comment.width = 300
>>> comment.height = 50
>>> >>> ws["A1"].comment = comment
>>>
>>> wb.save('commented_book.xlsx')
如果有需要的话, openpyxl.utils.units有将其他度量单位（mm，points）转换为像素的辅助函数:
>>> from openpyxl import Workbook
>>> from openpyxl.comments import Comment
>>> from openpyxl.utils import units
>>>
>>> wb=Workbook()
>>> ws=wb.active
>>>
>>> comment = Comment("Text", "Author")
>>> comment.width = units.points_to_pixels(300)
>>> comment.height = units.points_to_pixels(50)
>>> >>> ws["A1"].comment = comment
6.6 样式
6.6.1 介绍
样式用于在屏幕上显示时更改数据的外观。它们还用于确定数字的格式。
样式可以应用于以下方面:
• Font：设置字体大小、颜色、下划线等等
• PatternFill：设置图案或者颜色渐变
• Border：设置单元格的边框
• Alignment：单元格对齐
• Protection：保护工作表
以下是默认值
>>> from openpyxl.styles import PatternFill, Border, Side, Alignment,␣
,→Protection, Font
>>> font = Font(name='Calibri',
...	size=11,
...	bold=False,
...	italic=False,
...	vertAlign=None,
...	underline='none',
...	strike=False,
...	color='FF000000')
>>> fill = PatternFill(fill_type=None,
...	start_color='FFFFFFFF',
...	end_color='FF000000')
>>> border = Border(left=Side(border_style=None,
...	color='FF000000'),
...	right=Side(border_style=None,
...	color='FF000000'),
...	top=Side(border_style=None,
...	color='FF000000'),
...	bottom=Side(border_style=None,
...	color='FF000000'),
...	diagonal=Side(border_style=None,
...	color='FF000000'),
...	diagonal_direction=0,
...	outline=Side(border_style=None,
...	color='FF000000'),
...	vertical=Side(border_style=None,
...	color='FF000000'),
...	horizontal=Side(border_style=None,
...	color='FF000000')
...	)
>>> alignment=Alignment(horizontal='general',
...	vertical='bottom',
...	text_rotation=0,
(下页继续)
(续上页)
...	wrap_text=False,
...	shrink_to_fit=False,
...	indent=0)
>>> number_format = 'General'
>>> protection = Protection(locked=True,
...	hidden=False)
>>>
6.6.2 单元格样式和命名样式
有两种不同的样式: 单元格样式和命名样式, 也被成为样式模板。
单元格样式
单元格样式在对象之间共享，一旦被分配之后就无法更改。这样可以避免不必要的副作用，例如仅更改一个单元格时就更改许多单元格的样式。
>>> from openpyxl.styles import colors
>>> from openpyxl.styles import Font, Color
>>> from openpyxl import Workbook
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> a1 = ws['A1']
>>> d4 = ws['D4']
>>> ft = Font(color="FF0000")
>>> a1.font = ft
>>> d4.font = ft
>>>
>>> a1.font.italic = True # is not allowed # doctest: +SKIP >>>
>>> # If you want to change the color of a Font, you need to reassign it
>>>
>>> a1.font = Font(color="FF0000", italic=True) # the change only affects A16.6.3 复制样式
样式也可以被复制
>>> from openpyxl.styles import Font
>>> from copy import copy
>>>
>>> ft1 = Font(name='Arial', size=14)
>>> ft2 = copy(ft1)
>>> ft2.name = "Tahoma"
>>> ft1.name
'Arial'
>>> ft2.name
'Tahoma'
>>> ft2.size # copied from the
14.0
6.6.4 颜色
 可以通过三种方式：indexed, aRGB 或者 theme 来设置字体、背景、边框等的颜色。索引颜色（indexed colours）是旧版实现，颜色本身取决于工作簿或应用程序默认提供的索引。主题颜色可用于互补色，但也取决于工作簿中存在的主题。因此，建议使用 aRGB 颜色。
aRGB 颜色使用红色，绿色和蓝色的十六进制值设置 RGB 颜色。
>>> from openpyxl.styles import Font
>>> font = Font(color="FF0000")
理论上，alpha 值是指颜色的透明度，但这与单元格样式无关。默认值 00 将前置任何简单的 RGB 值：
>>> from openpyxl.styles import Font
>>> font = Font(color="00FF00")
>>> font.color.rgb
'0000FF00'
还支持传统索引颜色以及主题和色彩（themes and tints）。
>>> from openpyxl.styles.colors import Color
>>> c = Color(indexed=32)
>>> c = Color(theme=6, tint=0.5)
Indexed Colours
索引 64 和 65 不能设置，并且分别保留给系统前景色和背景色。
6.6.5 应用样式
样式被直接应用到单元格
>>> from openpyxl.workbook import Workbook >>> from openpyxl.styles import Font, Fill
>>> wb = Workbook()
>>> ws = wb.active
>>> c = ws['A1']
>>> c.font = Font(size=12)
样式也可以应用于列和行，但是请注意，这仅适用于关闭文件后创建的单元格（在 Excel）。如果要对整个行和列应用样式，则必须自己将样式应用于每个单元格。这是文件格式的限制:: Styles can also applied to columns and rows but note that this applies only to cells created (in Excel) after the file is closed. If you want to apply styles to entire rows and columns then you must apply the style to each cell yourself. This is a restriction of the file format:
>>> col = ws.column_dimensions['A']
>>> col.font = Font(bold=True)
>>> row = ws.row_dimensions[1] >>> row.font = Font(underline="single")
6.6.6 合并单元格的样式
合并单元格和其他单元格对象的行为相似，通过左上单元格来定义值和样式。可以改变左上单元格的边框来改变整个合并单元格的边框。这种格式是出于编辑目的才被生成（The formatting is generated for the purpose of writing.）
>>> from openpyxl.styles import Border, Side, PatternFill, Font, GradientFill,␣
,→Alignment
>>> from openpyxl import Workbook
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>> ws.merge_cells('B2:F4')
>>>
>>> top_left_cell = ws['B2']
(下页继续)
(续上页)
>>> top_left_cell.value = "My Cell"
>>>
>>> thin = Side(border_style="thin", color="000000") >>> double = Side(border_style="double", color="ff0000")
>>> >>> top_left_cell.border = Border(top=double, left=thin, right=thin,␣
,→bottom=double)
>>> top_left_cell.fill = PatternFill("solid", fgColor="DDDDDD") >>> top_left_cell.fill = fill = GradientFill(stop=("000000", "FFFFFF"))
>>> top_left_cell.font = Font(b=True, color="FF0000")
>>> top_left_cell.alignment = Alignment(horizontal="center", vertical="center")
>>>
>>> wb.save("styled.xlsx")
6.6.7 编辑页面设置
>>> from openpyxl.workbook import Workbook
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> ws.page_setup.orientation = ws.ORIENTATION_LANDSCAPE
>>> ws.page_setup.paperSize = ws.PAPERSIZE_TABLOID
>>> ws.page_setup.fitToHeight = 0
>>> ws.page_setup.fitToWidth = 1
命名样式
与单元格样式相反，命名样式是可变的。当您想一次将格式应用于许多不同的单元格时，它们很有意义。注意一旦将命名样式分配给单元格后，对该样式的更改将 ** 不会 ** 影响单元格。一旦命名样式被注册到工作簿，就可以简单的通过名字来进行引用
6.6.8 创建命名样式
>>> from openpyxl.styles import NamedStyle, Font, Border, Side
>>> highlight = NamedStyle(name="highlight")
>>> highlight.font = Font(bold=True, size=20)
(下页继续)
(续上页)
>>> bd = Side(style='thick', color="000000")
>>> highlight.border = Border(left=bd, top=bd, right=bd, bottom=bd)
创建命名样式后，即可将其注册到工作簿中：
>>> wb.add_named_style(highlight)
命名样式在首次分配给单元格时也会自动注册：
>>> ws['A1'].style = highlight
注册后，仅使用名称分配样式：
>>> ws['D5'].style = 'highlight'
6.6.9 使用内置样式（Ps：以下注释由译者根据 office365 中文版进行添加）
该规范（specification）包括一些可以使用的内置样式。不幸的是，这些样式的名称以其本地化形式存储。openpyxl 仅会识别英文名称，并且只能与此处的文字完全一样。
•'Normal'# 无样式
数字格式
•'Comma'# 千位分隔，保留两位小数'Warning Text'
•'Comma [0]'# 千位分隔，不保留小数
•'Currency'# 货币，保留两位小数
•'Currency [0]'# 货币，不保留小数
•'Percent'# 百分比
Informative
•'Calculation'# 计算
•'Total'# 汇总
•'Note'# 注释
•'Warning Text'# 警告文本
•'Explanatory Text'# 解释性文本
文字样式
•'Title'# 标题
•'Headline 1'# 标题 1
•'Headline 2'# 标题 2
•'Headline 3'# 标题 3
•'Headline 4'# 标题 4
•'Hyperlink'# 超链接
•'Followed Hyperlink'# 已访问的超链接
•'Linked Cell'# 链接单元格
Comparisons
•'Input'# 输入
•'Output'# 输出
•'Check Cell'# 检查单元格
•'Good'# 好
•'Bad'# 坏
•'Neutral'# 始终
高亮
•'Accent1'# 着色 1
•'20 % - Accent1'
•'40 % - Accent1'
•'60 % - Accent1'
•'Accent2'# 着色 2
•'20 % - Accent2'
•'40 % - Accent2'
•'60 % - Accent2'
•'Accent3'# 着色 3
•'20 % - Accent3'
•'40 % - Accent3'

•'60 % - Accent3'
•'Accent4'# 着色 4
•'20 % - Accent4'
•'40 % - Accent4'
•'60 % - Accent4'
•'Accent5'# 着色 5
•'20 % - Accent5'
•'40 % - Accent5'
•'60 % - Accent5'
•'Accent6'# 着色 6
•'20 % - Accent6'
•'40 % - Accent6'
•'60 % - Accent6'
  •'Pandas'# 好像是自定义的有关内置样式的更多信息，请参阅openpyxl.styles.builtins
6.7 其他工作表属性
有一些特定行为的高级属性，最常用的是页面设置参数（page setup property）fitTopage 和定义工作表选项卡颜色的 'tabColor'。
6.7.1 工作表可用属性
•"enableFormatConditionsCalculation"
•"filterMode"
•"published"
•"syncHorizontal"
•"syncRef"
•"syncVertical"
•"transitionEvaluation"
•"transitionEntry"
•"tabColor"
6.7. 其他工作表属性
6.7.2 页面设置属性的可用字段
"autoPageBreaks""fitToPage"
6.7.3 outlines 的可用字段
•"applyStyles"
•"summaryBelow"
•"summaryRight"
  •"showOutlineSymbols" 更多信息请查询 http://msdn.microsoft.com/en-us/library/documentformat.openxml.
spreadsheet.sheetproperties%28v=office.14%29.aspx_

注解: 默认情况下，会对 outline 属性进行初始化，因此您可以直接修改它们的 4 个属性，而页面设置属性不一样。如果要修改后者，首先要必要的参数初始化对 openpyxl.worksheet.properties.PageSetupProperties 对象进行初始化。一旦完成，可以在以后需要时通过例程直接对其进行修改。

>>> from openpyxl.workbook import Workbook
>>> from openpyxl.worksheet.properties import WorksheetProperties,␣
,→PageSetupProperties
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> wsprops = ws.sheet_properties
>>> wsprops.tabColor = "1072BA"
>>> wsprops.filterMode = False >>> wsprops.pageSetUpPr = PageSetupProperties(fitToPage=True,␣
,→autoPageBreaks=False)
>>> wsprops.outlinePr.summaryBelow = False
>>> wsprops.outlinePr.applyStyles = True
>>> wsprops.pageSetUpPr.autoPageBreaks = True
6.8 条件格式
Excel 支持三种类型的条件格式：内置、标准和自定义内建条件格式将特定规则与预定义样式结合在一起。标准条件格式将特定规则与自定义格式结合在一起。In additional it is possible to define custom formulae for applying custom formats using differential styles.

注解: 不同规则的语法差异很大，以至于 openpyxl 不知道规则是否有意义。

创建条件格式规则的基本语法为：
>>> from openpyxl.formatting import Rule
>>> from openpyxl.styles import Font, PatternFill, Border
>>> from openpyxl.styles.differential import DifferentialStyle >>> dxf = DifferentialStyle(font=Font(bold=True), fill=PatternFill(start_color= ,→'EE1111', end_color='EE1111'))
>>> rule = Rule(type='cellIs', dxf=dxf, formula=["10"])
由于某些规则的签名可能非常冗长，因此也有一些方便的工厂（factories）来创建它们。
6.8.1 内置格式
内置格式有：
• 色阶（ColorScale）
• 图表集（IconSet）
• 数据条（DataBar）
Builtin formats contain a sequence of formatting settings which combine a type with an integer for comparison. 可能的类型有：'num','percent','max','min','formula','percentile'。
色阶
你可以使用 2 或 3 种颜色的色阶。2 种色阶产生一种颜色到另一种颜色的渐变；3 种颜色色阶会将 1 种颜色用于 2 个颜色的渐变。创建色阶的完整规则为:
>>> from openpyxl.formatting.rule import ColorScale, FormatObject
>>> from openpyxl.styles import Color
>>> first = FormatObject(type='min')
>>> last = FormatObject(type='max')
(下页继续)

>>> # colors match the format objects:
>>> colors = [Color('AA0000'), Color('00AA00')]
>>> cs2 = ColorScale(cfvo=[first, last], color=colors)
>>> # a three color scale would extend the sequences
>>> mid = FormatObject(type='num', val=40)
>>> colors.insert(1, Color('00AA00')) >>> cs3 = ColorScale(cfvo=[first, mid, last], color=colors)
>>> # create a rule with the color scale
>>> from openpyxl.formatting.rule import Rule
>>> rule = Rule(type='colorScale', colorScale=cs3)
有一个方便创建色阶规则的函数：
>>> from openpyxl.formatting.rule import ColorScaleRule
>>> rule = ColorScaleRule(start_type='percentile', start_value=10, start_color=
,→'FFAA0000',
...	mid_type='percentile', mid_value=50, mid_color=
,→'FF0000AA',
...	end_type='percentile', end_value=90, end_color=
,→'FF00AA00')
图标集
从以下图标中进行选择: '3Arrows', '3ArrowsGray', '3Flags', '3TrafficLights1',
'3TrafficLights2', '3Signs', '3Symbols', '3Symbols2', '4Arrows', '4ArrowsGray'
, '4RedToBlack', '4Rating', '4TrafficLights', '5Arrows', '5ArrowsGray', '5Rating'
, '5Quarters'
创建图表集完整规则为：
>>> from openpyxl.formatting.rule import IconSet, FormatObject
>>> first = FormatObject(type='percent', val=0)
>>> second = FormatObject(type='percent', val=33)
>>> third = FormatObject(type='percent', val=67)
>>> iconset = IconSet(iconSet='3TrafficLights1', cfvo=[first, second, third],␣
 ,→showValue=None, percent=None, reverse=None) >>> # assign the icon set to a rule
>>> from openpyxl.formatting.rule import Rule
>>> rule = Rule(type='iconSet', iconSet=iconset)
有一个方便创建色阶图表集规则的函数：
>>> from openpyxl.formatting.rule import IconSetRule >>> rule = IconSetRule('5Arrows', 'percent', [10, 20, 30, 40, 50],␣
,→showValue=None, percent=None, reverse=None)
数据条目前，openpyxl 支持原始规范中定义的数据条。之后的扩展中添加了边框和方向。完整创建数据条的规则为：
>>> from openpyxl.formatting.rule import DataBar, FormatObject
>>> first = FormatObject(type='min')
>>> second = FormatObject(type='max')
>>> data_bar = DataBar(cfvo=[first, second], color="638EC6", showValue=None,␣ ,→minLength=None, maxLength=None)
>>> # assign the data bar to a rule
>>> from openpyxl.formatting.rule import Rule
>>> rule = Rule(type='dataBar', dataBar=data_bar)
有一个方便创建数据条规则的函数：
>>> from openpyxl.formatting.rule import DataBarRule >>> rule = DataBarRule(start_type='percentile', start_value=10, end_type= ,→'percentile', end_value='90',
...	color="FF638EC6", showValue="None", minLength=None,␣
,→maxLength=None)
6.8.2 标准条件格式
标准条件格式为：
• 平均值（Average）
• 百分比（Percent）
• 唯一值或重复值（Unique or duplicate）
• 值（Value）
• 排名（Rank）
>>> from openpyxl import Workbook
>>> from openpyxl.styles import Color, PatternFill, Font, Border
>>> from openpyxl.styles.differential import DifferentialStyle
(下页继续)
>>> from openpyxl.formatting.rule import ColorScaleRule, CellIsRule,␣
,→FormulaRule
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> # Create fill
>>> redFill = PatternFill(start_color='EE1111',
...	end_color='EE1111',
...	fill_type='solid')
>>>
>>> # Add a two-color scale
>>> # Takes colors in excel 'RRGGBB' style. >>> ws.conditional_formatting.add('A1:A10',
...	ColorScaleRule(start_type='min', start_color='AA0000',
...	end_type='max', end_color='00AA00')
...	)
>>>
>>> # Add a three-color scale
>>> ws.conditional_formatting.add('B1:B10',
...	ColorScaleRule(start_type='percentile', start_value=10,␣
,→start_color='AA0000',
...	mid_type='percentile', mid_value=50, mid_color=
,→'0000AA',
...	end_type='percentile', end_value=90, end_color=
,→'00AA00')
...	)
>>>
>>> # Add a conditional formatting based on a cell comparison
>>> # addCellIs(range_string, operator, formula, stopIfTrue, wb, font, border,␣
,→fill)
>>> # Format if cell is less than 'formula' >>> ws.conditional_formatting.add('C2:C10',
...	CellIsRule(operator='lessThan', formula=['C$1'],␣
,→stopIfTrue=True, fill=redFill))
>>>
>>> # Format if cell is between 'formula'
>>> ws.conditional_formatting.add('D2:D10',
...	CellIsRule(operator='between', formula=['1','5'],␣
,→stopIfTrue=True, fill=redFill))(下页继续)

>>>
>>> # Format using a formula
>>> ws.conditional_formatting.add('E1:E10',
...	FormulaRule(formula=['ISBLANK(E1)'], stopIfTrue=True,␣
,→fill=redFill))
>>>
>>> # Aside from the 2-color and 3-color scales, format rules take fonts,␣ ,→borders and fills for styling:
>>> myFont = Font()
>>> myBorder = Border()
>>> ws.conditional_formatting.add('E1:E10',
...	FormulaRule(formula=['E1=0'], font=myFont, border=myBorder,␣
,→fill=redFill))
>>>
>>> # Highlight cells that contain particular text by using a special formula
>>> red_text = Font(color="9C0006")
>>> red_fill = PatternFill(bgColor="FFC7CE")
>>> dxf = DifferentialStyle(font=red_text, fill=red_fill) >>> rule = Rule(type="containsText", operator="containsText", text="highlight",
,→ dxf=dxf)
>>> rule.formula = ['NOT(ISERROR(SEARCH("highlight",A1)))']
>>> ws.conditional_formatting.add('A1:F40', rule)
>>> wb.save("test.xlsx")
6.8.3 条件格式应用在全部行
有时你想将条件格式应用于多个单元格，例如一行包含特定值的一些单元格。
>>> ws.append(['Software', 'Developer', 'Version'])
>>> ws.append(['Excel', 'Microsoft', '2016'])
>>> ws.append(['openpyxl', 'Open source', '2.6'])
>>> ws.append(['OpenOffice', 'Apache', '4.1.4'])
>>> ws.append(['Word', 'Microsoft', '2010'])
我们要突出开发人员是 Microsoft 的行。我们通过创建表达式规则并使用公式来识别哪些行包含了 Microsoft 开发的 Software。
>>> red_fill = PatternFill(bgColor="FFC7CE")
>>> dxf = DifferentialStyle(fill=red_fill)
>>> r = Rule(type="expression", dxf=dxf, stopIfTrue=True)
(下页继续)
>>> r.formula = ['$A2="Microsoft"']
>>> ws.conditional_formatting.add("A1:C10", r)

注解: 在这种情况下，该公式使用 ** 绝对引用 ** B 列，以及 ** 相对引用 ** 行号，在这种情况下, 1 是行号相对于应用格式的范围。做到这一点可能很棘手，但是即使已将规则添加到工作表的条件格式集合中，也可以对其进行调整。

6.9 数据透视表
openpyxl 为数据透视表提供读取支持以便于可以保留在现有的文件中。数据透视表的规范虽然很广泛，但不是很清楚，也不意味着客户端代码应该能够创建数据透视表。（The specification for pivot tables, while extensive, is not very clear and it is not intended that client code should be able to create pivot tables.）但是，应该可以编辑和操作现有的数据透视表，例如。更改其范围或是能自动更新设置。
和图表、图片、表格一样，数据透视表没有专门管理的 API，因此客户端代码不得不遍历工作表
_pivots列表
6.9.1 例子
from openpyxl import load_workbook wb = load_workbook("campaign.xlsx") ws = wb["Results"] pivot = ws._pivots[0] # any will do as they share the same cache pivot.cache.refreshOnLoad = True
更多信息请查询openpyxl.pivot.cache.CacheDefinition
6.10 打印设置
openpyxl 为打印设置提供合理的全面支持 6.10.1 编辑打印设置
>>> from openpyxl.workbook import Workbook
>>>
(下页继续)
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> ws.print_options.horizontalCentered = True
>>> ws.print_options.verticalCentered = True
6.10.2 页眉页脚
页眉和页脚使用自己的格式语言。在编辑的时候完全可以支持但是由于于复杂和嵌套的可能性，在读取它们时仅部分支持。支持字体，大小和颜色，居左，居中或居右元素。粒度控制（突出显示单个单词）需要手动应用控制代码（Granular control (highlighting individuals words) will require applying control codes manually）
>>> from openpyxl.workbook import Workbook
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>> >>> ws.oddHeader.left.text = "Page &[Page] of &N"
>>> ws.oddHeader.left.size = 14
>>> ws.oddHeader.left.font = "Tahoma,Bold" >>> ws.oddHeader.left.color = "CC3366"
也支持 evenHeader 和 evenFooter 以及 firstHeader 和 firstFooter.
6.10.3 增加打印标题
您可以在每页上打印标题，以确保正确标记数据。
>>> from openpyxl.workbook import Workbook
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> ws.print_title_cols = 'A:B' # the first two cols
>>> ws.print_title_rows = '1:1' # the first row
6.10.4 增加打印区域
你可以只选择工作簿的一部分来作为打印区域
6.10. 打印设置

>>> from openpyxl.workbook import Workbook
>>>
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> ws.print_area = 'A1:F10'
6.11 筛选和排序
在工作簿中添加筛选是可能的

注解: 筛选和排序只能通过 openpyxl 进行设置，但是只有在 Excel 这样的程序中才会被应用。这是由于他们会在范围内重新排列或者格式化单元格或行。（This is because they actually
rearranges or format cells or rows in the range）

定义一个范围后，你可以对一列添加筛选或者添加排序条件:（To add a filter you define a range and then add columns and sort conditions:）
from openpyxl import Workbook
wb = Workbook() ws = wb.active
data = [
["Fruit", "Quantity"],
["Kiwi", 3],
["Grape", 15],
["Apple", 3],
["Peach", 3],
["Pomegranate", 3],
["Pear", 3],
["Tangerine", 3],
["Blueberry", 3],
["Mango", 3],
["Watermelon", 3],
["Blackberry", 3],
["Orange", 3],
["Raspberry", 3],(下页继续)
(续上页)
["Banana", 3]
]
for r in data:
ws.append(r)
ws.auto_filter.ref = "A1:B15" ws.auto_filter.add_filter_column(0, ["Kiwi", "Apple", "Mango"]) ws.auto_filter.add_sort_condition("B2:B15")
wb.save("filtered.xlsx")这会将相关指令添加到文件中，但实际上不会过滤或排序。（PS：译者使用上诉代码在 Excel 中试了一下这个功能，其中已经出现了筛选栏控件，但是未生效，点击"确认"即可生效，排序功能点了"确认也没办法使用"）

6.12 数据验证
数据验证器可以应用于范围单元格，但也不是强制和 evaluated。范围不必是连续的：例如"A1
B2：B5"包含 A1 和单元格 B2 至 B5，但不包含 A2 或 B2。
6.12. 数据验证
6.12.1 例子
>>> from openpyxl import Workbook
>>> from openpyxl.worksheet.datavalidation import DataValidation >>>
>>> # Create the workbook and worksheet we'll be working with
>>> wb = Workbook()
>>> ws = wb.active
>>>
>>> # Create a data-validation object with list validation
>>> dv = DataValidation(type="list", formula1='"Dog,Cat,Bat"', allow_
,→blank=True)
>>>
>>> # Optionally set a custom error message
>>> dv.error ='Your entry is not in the list'
>>> dv.errorTitle = 'Invalid Entry'
>>>
>>> # Optionally set a custom prompt message
>>> dv.prompt = 'Please select from the list'
>>> dv.promptTitle = 'List Selection'
>>>
>>> # Add the data-validation object to the worksheet
>>> ws.add_data_validation(dv)>>> # Create some cells, and add them to the data-validation object
>>> c1 = ws["A1"]
>>> c1.value = "Dog"
>>> dv.add(c1)
>>> c2 = ws["A2"]
>>> c2.value = "An invalid value"
>>> dv.add(c2)
>>>
>>> # Or, apply the validation to a range of cells
>>> dv.add('B1:B1048576') # This is the same as for the whole of column B
>>> >>> # Check with a cell is in the validator
>>> "B4" in dv
True

注解: 没有在任何单元格应用的验证将会在保存的时候被忽略。

6.12.2 其他验证的例子
任何证书:
dv = DataValidation(type="whole")
任何大于 100 的整数:
dv = DataValidation(type="whole", operator="greaterThan", formula1=100)
任何小数:
dv = DataValidation(type="decimal")
任何在 0 至 1 之间的小数:
dv = DataValidation(type="decimal", operator="between", formula1=0, formula2=1)
任何日期:
dv = DataValidation(type="date")
时间:
dv = DataValidation(type="time")
15 长度以下的文本:
dv = DataValidation(type="textLength", operator="lessThanOrEqual"), formula1=15)
序列:
6.12. 数据验证
from openpyxl.utils import quote_sheetname dv = DataValidation(type="list", formula1="{0}!$B$1:$B$10".format(quote_ ,→sheetname(sheetname))
)自定义规则:
dv = DataValidation(type="custom", formula1"=SOMEFORMULA")

注解: See http://www.contextures.com/xlDataVal07.html for custom rules

6.13 定义名称
该规范对定义的名称有以下说法:
   "定义名称是用于表示单元格，区域，公式或常量值的描述性文本。" 这意味着它们的定义是非常宽松的。它们可能包含一个常数，一个公式，一个单元格引用，一个区域或跨不同工作表的多个区域。它们在工作簿全局定义并可以通过 defined_names 属性进行访问。
6.13.1 区域的使用示例
访问名为"my_range"的区域:
my_range = wb.defined_names['my_range']
# if this contains a range of cells then the destinations attribute is not None dests = my_range.destinations # returns a generator of (worksheet title, cell␣
,→range) tuples
cells = [] for title, coord in dests: ws = wb[title] cells.append(ws[coord])6.13.2 创建新的命名区域
import openpyxl wb = openpyxl.Workbook() new_range = openpyxl.workbook.defined_name.DefinedName('newrange', attr_text=
 ,→'Sheet!$A$1:$A$5') wb.defined_names.append(new_range)
# create a local named range (only valid for a specific sheet) sheetid = wb.sheetnames.index('Sheet') private_range = openpyxl.workbook.defined_name.DefinedName('privaterange',␣
 ,→attr_text='Sheet!$A$6', localSheetId=sheetid) wb.defined_names.append(private_range)
# this local range can't be retrieved from the global defined names assert('privaterange' not in wb.defined_names)
# the scope has to be supplied to retrieve local ranges: print(wb.defined_names.localnames(sheetid)) print(wb.defined_names.get('privaterange', sheetid).attr_text)['privaterange']
Sheet!$A$6
6.14 工作簿表格
工作簿表格是对单元格组的引用。这使得某些操作（例如，对表格中的单元格进行样式设置）更加容易。
6.14.1 创建表格
from openpyxl import Workbook
from openpyxl.worksheet.table import Table, TableStyleInfo
wb = Workbook() ws = wb.active
data = [
['Apples', 10000, 5000, 8000, 6000],(下页继续)
6.14. 工作簿表格
(续上页)
	['Pears',	2000, 3000, 4000, 5000],
['Bananas', 6000, 6000, 6500, 6000],
['Oranges', 500, 300, 200, 700],
]
# add column headings. NB. these must be strings ws.append(["Fruit", "2011", "2012", "2013", "2014"]) for row in data:
ws.append(row)
tab = Table(displayName="Table1", ref="A1:E5")
# Add a default style with striped rows and banded columns style = TableStyleInfo(name="TableStyleMedium9", showFirstColumn=False, showLastColumn=False, showRowStripes=True,␣ ,→showColumnStripes=True) tab.tableStyleInfo = style
'''
Table must be added using ws.add_table() method to avoid duplicate names. Using this method ensures table name is unque through out defined names and␣ ,→all other table name.
''' ws.add_table(tab) wb.save("table.xlsx")在一个工作簿中表格名称必须是唯一的。默认情况下，表是从第一行的标题开始创建的，并且所有列的筛选以及表标题和列标题必须始终包含字符串。
警告: 在只写模式下，您必须手动将列标题添加到表格中，并且值必须始终与相应单元格的值相同（有关如何执行此操作的示例，请参见下面的例子），否则 Excel 可能会认为该文件无效并删除表格。
通过 TableStyleInfo 来管理样式。这允许你对行和列设置条纹以及应用不同的颜色主题。
6.14.2 使用表格
ws.tables是特定工作簿下所有表格的 dictionary-like 对象:
>>> ws.tables
{"Table1", <openpyxl.worksheet.table.Table object>}
通过范围或者名称获取表格
>>> ws.tables["Table1"] or >>> ws.tables["A1:D10"]
遍历工作簿下所有的表格
>>> for table in ws.tables.values():
>>>	print(table)
获取表名以及工作簿内所有表格的范围返回表格名和范围的列表
>>> ws.tables.items()
>>> [("Table1", "A1:D10")]
删除表格
>>> del ws.tables["Table1"]
工作簿中的表格数量
>>> len(ws.tables)
>>> 1
6.14.3 手动添加表格表头
在只写模式下你可以添加没有表头的表格:
>>> table.headerRowCount = False
或者手动初始化表头:
6.14. 工作簿表格
>>> headings = ["Fruit", "2011", "2012", "2013", "2014"] # all values must be␣
,→strings
>>> table._initialise_columns()
>>> for column, value in zip(table.tableColumns, headings): column.name = value6.15 Parsing Formulas
openpyxl 支持对单元格中嵌入的公式进行有限的解析。openpyxl.formula 类包含 Tokenizer 类用于将公式分解为其组成的 tokens（openpyxl.formula package contains a Tokenizer class to break formulas into their consitutuent tokens.）用法如下:
>>> from openpyxl.formula import Tokenizer
>>> tok = Tokenizer("""=IF($A$1,"then True",MAX(DEFAULT_VAL,'Sheet 2'!B1))""") >>> print("\n".join("%12s%11s%9s" % (t.value, t.type, t.subtype) for t in tok.
,→items))
	IF(	FUNC	OPEN
	$A$1	OPERAND	RANGE
	,	SEP	ARG
"then True"	OPERAND	TEXT
	,	SEP	ARG
	MAX(	FUNC	OPEN
DEFAULT_VAL	OPERAND	RANGE
	,	SEP	ARG
'Sheet 2'!B1	OPERAND	RANGE
	)	FUNC	CLOSE
	)	FUNC	CLOSE如上所示, tokens 有三个令人感兴趣的属性:
• .value: The substring of the formula that produced this token
• .type: The type of token this represents. Can be one of
- Token.LITERAL: If the cell does not contain a formula, its value is represented by a single LITERAL token.
- Token.OPERAND: A generic term for any value in the Excel formula. (See .subtype below for more details).
- Token.FUNC: Function calls are broken up into tokens for the opener (e.g., SUM(), followed by the arguments, followed by the closer (i.e., )). The function name and opening parenthesis together form one FUNC token, and the matching parenthesis forms another FUNC token.
- Token.ARRAY: Array literals (enclosed between curly braces) get two ARRAY tokens each, one for the opening { and one for the closing }.
- Token.PAREN: When used for grouping subexpressions (and not to denote function calls), parentheses are tokenized as PAREN tokens (one per character).
- Token.SEP: These tokens are created from either commas (,) or semicolons (;). Commas create SEP tokens when they are used to separate function arguments (e.g., SUM(a, b)) or when they are used to separate array elements (e.g., {a,b}). (They have another use as an infix operator for joining ranges). Semicolons are always used to separate rows in an array literal, so always create SEP tokens.
- Token.OP_PRE: Designates a prefix unary operator. Its value is always + or -
- Token.OP_IN: Designates an infix binary operator. Possible values are >=, <=, <>, =, >, <, *, /, +, -, ^, or &.
- Token.OP_POST: Designates a postfix unary operator. Its value is always %.
- Token.WSPACE: Created for any whitespace encountered. Its value is always a single space, regardless of how much whitespace is found.
• .subtype: Some of the token types above use the subtype to provide additional information about the token. Possible subtypes are:
- Token.TEXT, Token.NUMBER, Token.LOGICAL, Token.ERROR, Token.RANGE: these subtypes describe the various forms of OPERAND found in formulae. LOGICAL is either TRUE or FALSE, RANGE is either a named range or a direct reference to another range. TEXT,
NUMBER, and ERROR all refer to literal values in the formula
- Token.OPEN and Token.CLOSE: these two subtypes are used by PAREN, FUNC, and ARRAY, to describe whether the token is opening a new subexpression or closing it.
- Token.ARG and Token.ROW: are used by the SEP tokens, to distinguish between the comma and semicolon. Commas produce tokens of subtype ARG whereas semicolons produce tokens of subtype ROW
6.15.1 Translating formulae from one location to another
It is possible to translate (in the mathematical sense) formulae from one location to another using the openpyxl.formulas.translate.Translator class. For example, there a range of cells B2:E7 with a sum of each row in column F:
>>> from openpyxl.formula.translate import Translator
>>> ws['F2'] = "=SUM(B2:E2)"
(下页继续)
6.15.	Parsing Formulas
(续上页)
>>> # move the formula one colum to the right
>>> ws['G2'] = Translator("=SUM(B2:E2)", origin="F2").translate_formula("G2")
>>> ws['G2'].value '=SUM(C2:F2)'

注解: This is limited to the same general restrictions of formulae: A1 cell-references only and no support for defined names.

6.16 保护
警告: 工作簿或工作表的密码保护仅提供了十分基础的安全。数据未进行加密，所以可以使用各种免费工具进行修改。实际上，规范指出：工作表或工作簿的保护不应该与文件安全性混淆。这是为了保护你的工作簿免受意外修改的影响，并不能保护免受恶意修改的影响。
Openpyxl 支持保护工作簿和工作表不被修改。除非指定明确算法，否则将使用 Open XML
"Legacy Password Hash Algorithm"来生成哈希密码值。
6.16.1 工作簿保护
为防止其他用户查看隐藏的工作表、添加、移动、删除或隐藏工作表以及重命名工作表，可以使用密码保护工作簿的结构。可以使用 openpyxl.workbook.protection.WorkbookProtection. workbookPassword属性设置密码:
>>> wb.security.workbookPassword = '...'
>>> wb.security.lockStructure = True
同样，可以通过设置另一个密码来防止从共享工作簿中删除更改跟踪和更改历史记录。可以使用 openpyxl.workbook.protection.WorkbookProtection.revisionsPassword属性设置密码:
>>> wb.security.revisionsPassword = '...'
:class:`openpyxl.workbook.protection.WorkbookProtection` 对象上的其他属性可以精确控制所设置的限制（restrictions are in place），但是只有设置密码后，这些属性才能生效。如果需要设置原始密码值而非使用默认哈希算法，我们也提供特定的设置函数-例如: hashed_password = ... wb.security.set_workbook_password(hashed_password, already_hashed=True)
6.16.2 工作表保护
也可以通过在openpyxl.worksheet.protection.SheetProtection对象上设置属性来锁定工作表。与工作簿保护不同，可以使用或不使用密码来启用工作表保护。使用openpyxl.worksheet. protection.SheetProtection.sheet属性或调用 enable() 或 disable() 俩启用工作表保护:
>>> ws = wb.active
>>> ws.protection.sheet = True
>>> ws.protection.enable()
>>> ws.protection.disable()
如果未设置密码，那么用户不需要密码即可禁用工作表保护。否则，他们必要提供密码才能修改保护配置。使用openpxyl.worksheet.protection.SheetProtection.password()设置密码:
>>> ws = wb.active
>>> ws.protection.password = '...'
6.16. 保护


CHAPTER 7

开发者信息

7.1 Development
If you find the openpyxl project intriguing and want to contribute a new awesome feature, fix a nasty bug or improve the documentation this section will guide you in setting up your development environment.
We will look into the coding standards and version control system workflows used, as well as cloning the openpyxl code to your local machine, setting up a virtual Python environment, running tests and building the documentation.
7.1.1 Getting the source
The source code of openpyxl is hosted on BitBucket as a Mercurial project which you can download using e.g. the GUI client SourceTree by Atlassian. If you prefer working with the command line you can use the following:
$ hg clone https://bitbucket.org/openpyxl/openpyxl $ hg up 3.0
Please note that the default branch should never be used for development work. For bug fixes and minor patches you should base your work on the branch of the current release, e.g 3.0. New features should generally be based on the development branch of the next minor version. If in doubt get in touch with the openpyxl development team.
It is worthwhile to add an upstream remote reference to the original repository to update your fork with the latest changes, by adding to the ./hg/hgrc file the following:
[paths] default = ...
openpyxl-master = https://bitbucket.org/openpyxl/openpyxlYou can then grab any new changes using:
$ hg pull openpyxl-master
After that you should create a virtual environment using virtualenv and install the project requirements and the project itself:
$ cd openpyxl
$ virtualenv openpyxl-env
Activate the environment using:
$ source bin/activate # or ./openpyxl-env/Scripts/activate on Windows
Install the dev and prod dependencies and the package itself using:
(openpyxl-env) $ pip install -U -r requirements.txt (openpyxl-env) $ pip install -e .
7.1.2 Running tests
Note that contributions to the project without tests will not be accepted.
We use pytest as the test runner with pytest-cov for coverage information and pytest-flakes for static code analysis.
To run all the tests you need to either execute:
(openpxyl-env) $ pytest -xrf openpyxl # the flags will stop testing at the␣
,→first error
Or use tox to run the tests on different Python versions and configurations:
$ tox openpyxl
openpyxl Documentation, 发布 3.0.5
Coverage
The goal is 100 % coverage for unit tests - data types and utility functions. Coverage information can be obtained using:
py.test --cov openpyxl
Organisation
Tests should be preferably at package / module level e.g openpyxl/cell. This makes testing and getting statistics for code under development easier:
py.test --cov openpyxl/cell openpyxl/cell
Checking XML
Use the openpyxl.tests.helper.compare_xml function to compare generated and expected fragments of XML.
Schema validation
When working on code to generate XML it is possible to validate that the generated XML conforms to the published specification. Note, this won't necessarily guarantee that everything is fine but is preferable to reverse engineering!
Microsoft Tools
Along with the SDK, Microsoft also has a"Productivity Tool"for working with Office OpenXML.
This allows you to quickly inspect or compare whole Excel files. Unfortunately, validation errors contain many false positives. The tool also contain links to the specification and implementers' notes.
7.1.3 File Support and Specifications
The primary aim of openpyxl is to support reading and writing Microsoft Excel 2010 files. These are zipped OOXML files that are specified by ECMA 376 and ISO 29500.
Where possible we try to support files generated by other libraries or programs, but can't guarantee it, because often these do not strictly adhere to the above format.
7.1.	Development
7.1.4 Support of Python Versions
Python 3.6 and upwards are supported
7.1.5 Coding style
We orient ourselves at PEP-8 for the coding style, except when implementing attributes for roundtripping. Despite that you are encouraged to use Python data conventions (boolean, None, etc.). Note exceptions from this convestion in docstrings.
7.1.6 Contributing
Contributions in the form of pull requests are always welcome. Don't forget to add yourself to the list of authors!
7.1.7 Branch naming convention
We use a "major.minor.patch"numbering system, ie. 3.0.5. Development branches are named after "major.minor"releases. In general, API change will only happen major releases but there will be exceptions. Always communicate API changes to the mailing list before making them. If you are changing an API try and an implement a fallback (with deprecation warning) for the old behaviour.
The "default branch"is used for releases and always has changes from a development branch merged in. It should never be the target for a pull request.
7.1.8 Pull Requests
Pull requests should be submitted to the current, unreleased development branch. Eg. if the current release is 3.0.5, pull requests should be made to the 3.0 branch. Exceptions are bug fixes to released versions which should be made to the relevant release branch and merged upstream into development.
Please use tox to test code for different submissions before making a pull request. This is especially important for picking up problems across Python versions.
Documentation
Remember to update the documentation when adding or changing features. Check that documentation is syntactically correct.:
openpyxl Documentation, 发布 3.0.5
tox -e doc
7.1.9 Benchmarking
Benchmarking and profiling are ongoing tasks. Contributions to these are very welcome as we know there is a lot to do.
Memory Use
There is a tox profile for long-running memory benchmarks using the memory_utils package.:
tox -e memory
Pympler
As openpyxl does not include any internal memory benchmarking tools, the python pympler package was used during the testing of styles to profile the memory usage in openpyxl.reader. excel.read_style_table():
# in openpyxl/reader/style.py from pympler import muppy, summary
def read_style_table(xml_source):
...
if cell_xfs is not None: # ~ line 47 initialState = summary.summarize(muppy.get_objects()) # Capture the␣
,→initial state for index, cell_xfs_node in enumerate(cell_xfs_nodes):
... table[index] = new_style
finalState = summary.summarize(muppy.get_objects()) # Capture the final␣
,→state diff = summary.get_diff(initialState, finalState) # Compare summary.print_(diff)pympler.summary.print_() prints to the console a report of object memory usage, allowing the comparison of different methods and examination of memory usage. A useful future development would be to construct a benchmarking package to measure the performance of different components.
7.1.	Development


CHAPTER 8

API 文档

8.1 关键类
• openpyxl.workbook.workbook.Workbook
• openpyxl.worksheet.worksheet.Worksheet
• openpyxl.cell.cell.Cell
8.2 完整 API
8.2.1 openpyxl package
Subpackages openpyxl.cell package Submodules
openpyxl.cell.cell module
Manage individual cells in a spreadsheet.
The Cell class is required to know its value and type, display options, and any other features of an Excel cell. Utilities for referencing cells using Excel's 'A1'column/row nomenclature are also provided.
class openpyxl.cell.cell.Cell(worksheet,	row=None,	column=None,	value=None, style_array=None)
基类：openpyxl.styles.styleable.StyleableObject
Describes cell associated properties.
Properties of interest include style, type, value, and address. base_date check_error(value)
Tries to convert Error"else N/A
check_string(value)
Check string coding, length, and line break character
col_idx
The numerical index of the column
column
    Column number of this cell (1-based) column_letter
comment
Returns the comment associated with this cell
Type openpyxl.comments.Comment
coordinate
    This cell's coordinate (ex. 'A5') data_type encoding
hyperlink
Return the hyperlink target or an empty string
internal_value
    Always returns the value for excel. is_date
True if the value is formatted as a date
        Type bool offset(row=0, column=0)
Returns a cell location relative to this cell.
参数
   • row (int) - number of rows to offset
   • column (int) - number of columns to offset 返回类型 openpyxl.cell.Cell
parent
row
Row number of this cell (1-based)
value
Get or set the value held in the cell.
Type depends on the value (string, float, int or datetime.datetime)
class openpyxl.cell.cell.MergedCell(worksheet, row=None, column=None) 基类：openpyxl.styles.styleable.StyleableObject
Describes the properties of a cell in a merged cell and helps to display the borders of the merged cell.
The value of a MergedCell is always None. column comment = None
coordinate
         This cell's coordinate (ex. 'A5') data_type = 'n' hyperlink = None row value = None openpyxl.cell.cell.WriteOnlyCell(ws=None, value=None) openpyxl.cell.cell.get_type(t, value)
openpyxl.cell.read_only module
class openpyxl.cell.read_only.EmptyCell 基类：object alignment = None border = None data_type = 'n' fill = None
     font = None is_date = False number_format = None value = None class openpyxl.cell.read_only.ReadOnlyCell(sheet,	row,	column,	value,	data_type='n', style_id=0)
基类：object
alignment border column column_letter coordinate data_type fill font internal_value is_date number_format parent protection row style_array value
openpyxl.cell.text module
Richtext definition
class openpyxl.cell.text.InlineFont(rFont=None,	charset=None,	family=None,	b=None, i=None,	strike=None,	outline=None,	shadow=None, condense=None,	extend=None,	color=None,	sz=None, u=None, vertAlign=None, scheme=None)
基类：openpyxl.styles.fonts.Font
Font for inline text because, yes what you need are different objects with the same elements but different constraints.
b
Values must be of type <class 'bool'>
charset
Values must be of type <class 'int'>
color
Values must be of type <class 'openpyxl.styles.colors.Color'>
condense
Values must be of type <class 'bool'>
extend
Values must be of type <class 'bool'>
family
Values must be of type <class 'float'>
i
Values must be of type <class 'bool'>
outline
Values must be of type <class 'bool'>
rFont
Values must be of type <class 'str'>
scheme
Value must be one of {'major', 'minor'}
shadow
Values must be of type <class 'bool'>
strike
Values must be of type <class 'bool'>
sz
    Values must be of type <class 'float'> tagname = 'RPrElt'
u
Value must be one of {'singleAccounting', 'single', 'double', 'doubleAccounting'}
vertAlign
Value must be one of {'baseline', 'superscript', 'subscript'}
class openpyxl.cell.text.PhoneticProperties(fontId=None, type=None, alignment=None) 基类：openpyxl.descriptors.serialisable.Serialisable
alignment
Value must be one of {'center', 'noControl', 'left', 'distributed'}
fontId
    Values must be of type <class 'int'> tagname = 'phoneticPr'
type
Value must be one of {'halfwidthKatakana','Hiragana','noConversion','fullwidthKatakana'
}
class openpyxl.cell.text.PhoneticText(sb=None, eb=None, t=None) 基类：openpyxl.descriptors.serialisable.Serialisable
eb
Values must be of type <class 'int'>
sb
Values must be of type <class 'int'>
t
    Values must be of type <class 'str'> tagname = 'rPh'
text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.cell.text.RichText(rPr=None, t=None) 基类：openpyxl.descriptors.serialisable.Serialisable
font
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rPr
Values must be of type <class 'openpyxl.cell.text.InlineFont'>
t
    Values must be of type <class 'str'> tagname = 'RElt'
text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.cell.text.Text(t=None, r=(), rPh=(), phoneticPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable PhoneticProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
content
Text stripped of all formatting
formatted
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
phonetic
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
phoneticPr
Values must be of type <class 'openpyxl.cell.text.PhoneticProperties'>
plain
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
r
A sequence (list or tuple) that may only contain objects of the declared type
rPh
A sequence (list or tuple) that may only contain objects of the declared type
t
    Values must be of type <class 'str'> tagname = 'text'
openpyxl.chart package Submodules
openpyxl.chart.area_chart module
class openpyxl.chart.area_chart.AreaChart(axId=None, extLst=None, **kw) 基类：openpyxl.chart.area_chart._AreaChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dropLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
grouping
Value must be one of {'standard', 'percentStacked', 'stacked'}
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'areaChart'
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
         Values must be of type <class 'openpyxl.chart.axis.NumericAxis'> class openpyxl.chart.area_chart.AreaChart3D(gapDepth=None, **kw) 基类：openpyxl.chart.area_chart.AreaChart
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dropLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
gapDepth
Values must be of type <class 'float'>
grouping
Value must be one of {'standard', 'percentStacked', 'stacked'}
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'area3DChart'
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
z_axis
Values must be of type <class 'openpyxl.chart.axis.SeriesAxis'>
openpyxl.chart.axis module
class openpyxl.chart.axis.ChartLines(spPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
spPr
         Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'chartLines' class openpyxl.chart.axis.DateAxis(auto=None, lblOffset=None, baseTimeUnit=None, majorUnit=None, majorTimeUnit=None, minorUnit=None, minorTimeUnit=None, extLst=None, **kw)
基类：openpyxl.chart.axis.TextAxis
auto
Values must be of type <class 'bool'>
axId
Values must be of type <class 'int'>
axPos
Value must be one of {'b', 'l', 't', 'r'}
baseTimeUnit
Value must be one of {'months', 'years', 'days'}
crossAx
Values must be of type <class 'int'>
crosses
Value must be one of {'max', 'min', 'autoZero'}
crossesAt
Values must be of type <class 'float'>
delete
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
lblOffset
Values must be of type <class 'int'>
majorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
majorTickMark
Value must be one of {'cross', 'out', 'in'}
majorTimeUnit
Value must be one of {'months', 'years', 'days'}
majorUnit
Values must be of type <class 'float'>
minorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
minorTickMark
Value must be one of {'cross', 'out', 'in'}
minorTimeUnit
Value must be one of {'months', 'years', 'days'}
minorUnit
Values must be of type <class 'float'>
numFmt
Values must be of type <class 'openpyxl.chart.data_source.NumFmt'>
scaling
Values must be of type <class 'openpyxl.chart.axis.Scaling'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'dateAx'
tickLblPos
Value must be one of {'nextTo', 'low', 'high'}
title
Values must be of type <class 'openpyxl.chart.title.Title'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.axis.DisplayUnitsLabel(layout=None,	tx=None,	spPr=None, txPr=None)
基类：openpyxl.descriptors.serialisable.Serialisable
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
layout
Values must be of type <class 'openpyxl.chart.layout.Layout'>

spPr
'openpyxl.chart.shapes.GraphicalProperties'>
tagname = 'dispUnitsLbl'
text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
textPropertes
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
tx
Values must be of type <class 'openpyxl.chart.text.Text'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.axis.DisplayUnitsLabelList(custUnit=None,	builtInUnit=None,	dispUnitsLbl=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
builtInUnit
Value must be one of {'tenThousands','millions','hundredMillions','hundredThousands'
, 'hundreds', 'trillions', 'thousands', 'billions', 'tenMillions'}
custUnit
Values must be of type <class 'float'>
dispUnitsLbl
Values must be of type <class 'openpyxl.chart.axis.DisplayUnitsLabel'>
extLst
         Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> tagname = 'dispUnits' class openpyxl.chart.axis.NumericAxis(crossBetween=None,	majorUnit=None,	minorUnit=None, dispUnits=None, extLst=None, **kw)
基类：openpyxl.chart.axis._BaseAxis
axId
Values must be of type <class 'int'>
axPos
Value must be one of {'b', 'l', 't', 'r'}
crossAx
Values must be of type <class 'int'>
crossBetween
Value must be one of {'midCat', 'between'}
crosses
Value must be one of {'max', 'min', 'autoZero'}
crossesAt
Values must be of type <class 'float'>
delete
Values must be of type <class 'bool'>
dispUnits
Values must be of type <class 'openpyxl.chart.axis.DisplayUnitsLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
classmethod from_tree(node)
Special case value axes with no gridlines
majorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
majorTickMark
Value must be one of {'cross', 'out', 'in'}
majorUnit
Values must be of type <class 'float'>
minorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
minorTickMark
Value must be one of {'cross', 'out', 'in'}
minorUnit
Values must be of type <class 'float'>
numFmt
Values must be of type <class 'openpyxl.chart.data_source.NumFmt'>
scaling
Values must be of type <class 'openpyxl.chart.axis.Scaling'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'valAx'
tickLblPos
Value must be one of {'nextTo', 'low', 'high'}
title
'openpyxl.chart.title.Title'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.axis.Scaling(logBase=None,	orientation='minMax',	max=None, min=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
logBase
Values must be of type <class 'float'>
max
Values must be of type <class 'float'>
min
Values must be of type <class 'float'>
orientation
         Value must be one of {'maxMin', 'minMax'} tagname = 'scaling' class openpyxl.chart.axis.SeriesAxis(tickLblSkip=None, tickMarkSkip=None, extLst=None,
**kw)
基类：openpyxl.chart.axis._BaseAxis
axId
Values must be of type <class 'int'>
axPos
Value must be one of {'b', 'l', 't', 'r'}
crossAx
Values must be of type <class 'int'>
crosses
Value must be one of {'max', 'min', 'autoZero'}
crossesAt
Values must be of type <class 'float'>
delete
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>

majorGridlines
'openpyxl.chart.axis.ChartLines'>
majorTickMark
Value must be one of {'cross', 'out', 'in'}
minorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
minorTickMark
Value must be one of {'cross', 'out', 'in'}
numFmt
Values must be of type <class 'openpyxl.chart.data_source.NumFmt'>
scaling
Values must be of type <class 'openpyxl.chart.axis.Scaling'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'serAx'
tickLblPos
Value must be one of {'nextTo', 'low', 'high'}
tickLblSkip
Values must be of type <class 'int'>
tickMarkSkip
Values must be of type <class 'int'>
title
Values must be of type <class 'openpyxl.chart.title.Title'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.axis.TextAxis(auto=None,	lblAlgn=None,	lblOffset=100,	tickLblSkip=None,	tickMarkSkip=None,	noMultiLvlLbl=None, extLst=None, **kw)
基类：openpyxl.chart.axis._BaseAxis
auto
Values must be of type <class 'bool'>
axId
Values must be of type <class 'int'>
axPos
Value must be one of {'b', 'l', 't', 'r'}
crossAx
'int'>
crosses
Value must be one of {'max', 'min', 'autoZero'}
crossesAt
Values must be of type <class 'float'>
delete
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
lblAlgn
Value must be one of {'ctr', 'l', 'r'}
lblOffset
Values must be of type <class 'float'>
majorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
majorTickMark
Value must be one of {'cross', 'out', 'in'}
minorGridlines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
minorTickMark
Value must be one of {'cross', 'out', 'in'}
noMultiLvlLbl
Values must be of type <class 'bool'>
numFmt
Values must be of type <class 'openpyxl.chart.data_source.NumFmt'>
scaling
Values must be of type <class 'openpyxl.chart.axis.Scaling'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'catAx'
tickLblPos
Value must be one of {'nextTo', 'low', 'high'}
tickLblSkip
Values must be of type <class 'int'>
tickMarkSkip
'int'>
title
Values must be of type <class 'openpyxl.chart.title.Title'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
openpyxl.chart.bar_chart module
class openpyxl.chart.bar_chart.BarChart(gapWidth=150,	overlap=None,	serLines=None, extLst=None, **kw)
基类：openpyxl.chart.bar_chart._BarChartBase
barDir
Value must be one of {'bar', 'col'}
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gapWidth
Values must be of type <class 'float'>
grouping
Value must be one of {'standard', 'clustered', 'percentStacked', 'stacked'}
overlap
Values must be of type <class 'float'>
ser
A sequence (list or tuple) that may only contain objects of the declared type
serLines
    Values must be of type <class 'openpyxl.chart.axis.ChartLines'> tagname = 'barChart'
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>

class openpyxl.chart.bar_chart.BarChart3D(gapWidth=150, gapDepth=150, shape=None, ser-
Lines=None, extLst=None, **kw)
基类：openpyxl.chart.bar_chart._BarChartBase, openpyxl.chart._3d._3DBase
backWall
Values must be of type <class 'openpyxl.chart._3d.Surface'>
barDir
Value must be one of {'bar', 'col'}
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
floor
Values must be of type <class 'openpyxl.chart._3d.Surface'>
gapDepth
Values must be of type <class 'float'>
gapWidth
Values must be of type <class 'float'>
grouping
Value must be one of {'standard', 'clustered', 'percentStacked', 'stacked'}
ser
A sequence (list or tuple) that may only contain objects of the declared type
serLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
shape
Value must be one of {'coneToMax','cone','box','cylinder','pyramid','pyramidToMax'
}
sideWall
    Values must be of type <class 'openpyxl.chart._3d.Surface'> tagname = 'bar3DChart'
varyColors
Values must be of type <class 'bool'>
view3D
Values must be of type <class 'openpyxl.chart._3d.View3D'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
z_axis
Values must be of type <class 'openpyxl.chart.axis.SeriesAxis'>
openpyxl.chart.bubble_chart module
class openpyxl.chart.bubble_chart.BubbleChart(varyColors=None,	ser=(),	dLbls=None, bubble3D=None, bubbleScale=None, showNegBubbles=None,	sizeRepresents=None,
extLst=None, **kw)
基类：openpyxl.chart._chart.ChartBase
bubble3D
Values must be of type <class 'bool'>
bubbleScale
Values must be of type <class 'float'>
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dataLabels
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
ser
A sequence (list or tuple) that may only contain objects of the declared type
showNegBubbles
Values must be of type <class 'bool'>
sizeRepresents
    Value must be one of {'area', 'w'} tagname = 'bubbleChart'
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
openpyxl.chart.chartspace module
class openpyxl.chart.chartspace.ChartContainer(title=None,	autoTitleDeleted=None,	pivotFmts=(),	view3D=None,	floor=None, sideWall=None,	backWall=None, plotArea=None,	legend=None,	plotVisOnly=True, dispBlanksAs='gap', showDLblsOverMax=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoTitleDeleted
Values must be of type <class 'bool'>
backWall
Values must be of type <class 'openpyxl.chart._3d.Surface'>
dispBlanksAs
Value must be one of {'gap', 'span', 'zero'}
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
floor
Values must be of type <class 'openpyxl.chart._3d.Surface'>
legend
Values must be of type <class 'openpyxl.chart.legend.Legend'>
pivotFmts
Wrap a sequence in an containing object
plotArea
Values must be of type <class 'openpyxl.chart.plotarea.PlotArea'>
plotVisOnly
Values must be of type <class 'bool'>
showDLblsOverMax
Values must be of type <class 'bool'>
sideWall
    Values must be of type <class 'openpyxl.chart._3d.Surface'> tagname = 'chart'
title
Values must be of type <class 'openpyxl.chart.title.Title'>
view3D
Values must be of type <class 'openpyxl.chart._3d.View3D'>
class openpyxl.chart.chartspace.ChartSpace(date1904=None,	lang=None,	roundedCorners=None,	style=None,	clrMapOvr=None, pivotSource=None,	protection=None, chart=None,	spPr=None,	txPr=None,	externalData=None,	printSettings=None,	user-
Shapes=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
chart
Values must be of type <class 'openpyxl.chart.chartspace.ChartContainer'>
clrMapOvr
Values must be of type <class 'openpyxl.drawing.colors.ColorMapping'>
date1904
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
externalData
Values must be of type <class 'openpyxl.chart.chartspace.ExternalData'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
lang
Values must be of type <class 'str'>
pivotSource
Values must be of type <class 'openpyxl.chart.pivot.PivotSource'>
printSettings
Values must be of type <class 'openpyxl.chart.print_settings.PrintSettings'>
protection
Values must be of type <class 'openpyxl.chart.chartspace.Protection'>
roundedCorners
Values must be of type <class 'bool'>
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
style
    Values must be of type <class 'float'> tagname = 'chartSpace'
textProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") to_tree(tagname=None, idx=None, namespace=None)
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
userShapes
Values must be of type <class 'str'>
class openpyxl.chart.chartspace.ExternalData(autoUpdate=None, id=None) 基类：openpyxl.descriptors.serialisable.Serialisable
autoUpdate
Values must be of type <class 'bool'>
id
         Values must be of type <class 'str'> tagname = 'externalData' class openpyxl.chart.chartspace.Protection(chartObject=None, data=None, formatting=None, selection=None, userInterface=None)
基类：openpyxl.descriptors.serialisable.Serialisable
chartObject
Values must be of type <class 'bool'>
data
Values must be of type <class 'bool'>
formatting
Values must be of type <class 'bool'>
selection
    Values must be of type <class 'bool'> tagname = 'protection'
userInterface
Values must be of type <class 'bool'>
openpyxl.chart.data_source module
Collection of utility primitives for charts.
class openpyxl.chart.data_source.AxDataSource(numRef=None, numLit=None, strRef=None, strLit=None, multiLvlStrRef=None)
基类：openpyxl.descriptors.serialisable.Serialisable
multiLvlStrRef
Values must be of type <class 'openpyxl.chart.data_source.MultiLevelStrRef'>
numLit
Values must be of type <class 'openpyxl.chart.data_source.NumData'>
numRef
Values must be of type <class 'openpyxl.chart.data_source.NumRef'>
strLit
Values must be of type <class 'openpyxl.chart.data_source.StrData'>
strRef
         Values must be of type <class 'openpyxl.chart.data_source.StrRef'> tagname = 'cat' class openpyxl.chart.data_source.Level(pt=()) 基类：openpyxl.descriptors.serialisable.Serialisable
pt
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'lvl' class openpyxl.chart.data_source.MultiLevelStrData(ptCount=None, lvl=(), extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
lvl
A sequence (list or tuple) that may only contain objects of the declared type
ptCount
         Values must be of type <class 'int'> tagname = 'multiLvlStrData' class openpyxl.chart.data_source.MultiLevelStrRef(f=None,	multiLvlStrCache=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
f
Values must be of type <class 'str'>
multiLvlStrCache
    Values must be of type <class 'openpyxl.chart.data_source.MultiLevelStrData'> tagname = 'multiLvlStrRef'
class openpyxl.chart.data_source.NumData(formatCode=None,	ptCount=None,	pt=(), extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
formatCode
Values must be of type <class 'str'>
pt
A sequence (list or tuple) that may only contain objects of the declared type
ptCount
Values must be of type <class 'int'>
class openpyxl.chart.data_source.NumDataSource(numRef=None, numLit=None) 基类：openpyxl.descriptors.serialisable.Serialisable
numLit
Values must be of type <class 'openpyxl.chart.data_source.NumData'>
numRef
Values must be of type <class 'openpyxl.chart.data_source.NumRef'>
class openpyxl.chart.data_source.NumFmt(formatCode=None, sourceLinked=False) 基类：openpyxl.descriptors.serialisable.Serialisable
formatCode
Values must be of type <class 'str'>
sourceLinked
Values must be of type <class 'bool'>
class openpyxl.chart.data_source.NumRef(f=None, numCache=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
f
Values must be of type <class 'str'>
numCache
Values must be of type <class 'openpyxl.chart.data_source.NumData'>
ref
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.chart.data_source.NumVal(idx=None, formatCode=None, v=None) 基类：openpyxl.descriptors.serialisable.Serialisable
formatCode
Values must be of type <class 'str'>
idx
Values must be of type <class 'int'>
v
         Values must be of type <class 'NoneType'> class openpyxl.chart.data_source.NumberValueDescriptor(*args, **kw) 基类：openpyxl.descriptors.nested.NestedText Data should be numerical but isn't always :-/ allow_none = True class openpyxl.chart.data_source.StrData(ptCount=None, pt=(), extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
pt
A sequence (list or tuple) that may only contain objects of the declared type
ptCount
         Values must be of type <class 'int'> tagname = 'strData' class openpyxl.chart.data_source.StrRef(f=None, strCache=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
f
Values must be of type <class 'str'>
strCache
         Values must be of type <class 'openpyxl.chart.data_source.StrData'> tagname = 'strRef' class openpyxl.chart.data_source.StrVal(idx=0, v=None) 基类：openpyxl.descriptors.serialisable.Serialisable
idx
    Values must be of type <class 'int'> tagname = 'strVal'
v
Values must be of type <class 'str'>
openpyxl.chart.descriptors module
class openpyxl.chart.descriptors.NestedGapAmount(**kw) 基类：openpyxl.descriptors.nested.NestedMinMax allow_none = True max = 500 min = 0
class openpyxl.chart.descriptors.NestedOverlap(**kw) 基类：openpyxl.descriptors.nested.NestedMinMax allow_none = True max = 100 min = -100
class openpyxl.chart.descriptors.NumberFormatDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.Typed Allow direct assignment of format code allow_none = True expected_type openpyxl.chart.data_source.NumFmt的别名
openpyxl.chart.error_bar module
class openpyxl.chart.error_bar.ErrorBars(errDir=None,	errBarType='both',	errValType='fixedVal',	noEndCap=None,	plus=None, minus=None, val=None, spPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
direction
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
errBarType
Value must be one of {'plus', 'minus', 'both'}
errDir
Value must be one of {'y', 'x'}
errValType
Value must be one of {'percentage', 'cust', 'stdErr', 'stdDev', 'fixedVal'}
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
minus
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
noEndCap
Values must be of type <class 'bool'>
plus
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
size
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
style
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'errBars'
val
Values must be of type <class 'float'>
openpyxl.chart.label module
class openpyxl.chart.label.DataLabel(idx=0, **kw) 基类：openpyxl.chart.label._DataLabelBase
dLblPos
Value must be one of {'b', 'l', 't', 'inEnd', 'bestFit', 'ctr', 'r', 'outEnd',
'inBase'}
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
idx
Values must be of type <class 'int'>
numFmt
Values must be of type <class 'str'>
separator
Values must be of type <class 'str'>
showBubbleSize
Values must be of type <class 'bool'>
showCatName
Values must be of type <class 'bool'>
showLeaderLines
Values must be of type <class 'bool'>
showLegendKey
Values must be of type <class 'bool'>
showPercent
Values must be of type <class 'bool'>
showSerName
Values must be of type <class 'bool'>
showVal
Values must be of type <class 'bool'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'dLbl'
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.label.DataLabelList(dLbl=(), delete=None, **kw) 基类：openpyxl.chart.label._DataLabelBase
dLbl
A sequence (list or tuple) that may only contain objects of the declared type
dLblPos
Value must be one of {'b', 'l', 't', 'inEnd', 'bestFit', 'ctr', 'r', 'outEnd',
'inBase'}
delete
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>

numFmt
'str'>
separator
Values must be of type <class 'str'>
showBubbleSize
Values must be of type <class 'bool'>
showCatName
Values must be of type <class 'bool'>
showLeaderLines
Values must be of type <class 'bool'>
showLegendKey
Values must be of type <class 'bool'>
showPercent
Values must be of type <class 'bool'>
showSerName
Values must be of type <class 'bool'>
showVal
Values must be of type <class 'bool'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'dLbls'
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
openpyxl.chart.layout module
class openpyxl.chart.layout.Layout(manualLayout=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
manualLayout
    Values must be of type <class 'openpyxl.chart.layout.ManualLayout'> tagname = 'layout'
class openpyxl.chart.layout.ManualLayout(layoutTarget=None,	xMode=None,	yMode=None,
wMode='factor', hMode='factor', x=None, y=None,
w=None, h=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
h
Values must be of type <class 'float'>
hMode
Value must be one of {'factor', 'edge'}
height
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
layoutTarget
    Value must be one of {'outer', 'inner'} tagname = 'manualLayout'
w
Values must be of type <class 'float'>
wMode
Value must be one of {'factor', 'edge'}
width
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
x
Values must be of type <class 'float'>
xMode
Value must be one of {'factor', 'edge'}
y
Values must be of type <class 'float'>
yMode
Value must be one of {'factor', 'edge'}
openpyxl.chart.legend module
class openpyxl.chart.legend.Legend(legendPos='r',	legendEntry=(),	layout=None,	overlay=None, spPr=None, txPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
layout
Values must be of type <class 'openpyxl.chart.layout.Layout'>
legendEntry
A sequence (list or tuple) that may only contain objects of the declared type
legendPos
Value must be one of {'b', 'tr', 'l', 't', 'r'}
overlay
Values must be of type <class 'bool'>
position
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'legend'
textProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.legend.LegendEntry(idx=0, delete=False, txPr=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
delete
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
idx
    Values must be of type <class 'int'> tagname = 'legendEntry'
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
openpyxl.chart.line_chart module
class openpyxl.chart.line_chart.LineChart(hiLowLines=None,	upDownBars=None,
	marker=None,	smooth=None,	extLst=None,
**kw)
基类：openpyxl.chart.line_chart._LineChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dropLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
grouping
Value must be one of {'standard', 'percentStacked', 'stacked'}
hiLowLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
marker
Values must be of type <class 'bool'>
ser
A sequence (list or tuple) that may only contain objects of the declared type
smooth
    Values must be of type <class 'bool'> tagname = 'lineChart'
upDownBars
Values must be of type <class 'openpyxl.chart.updown_bars.UpDownBars'>
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis._BaseAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
class openpyxl.chart.line_chart.LineChart3D(gapDepth=None, hiLowLines=None, upDownBars=None, marker=None, smooth=None,
**kw)
基类：openpyxl.chart.line_chart._LineChartBase
dLbls
'openpyxl.chart.label.DataLabelList'>
dropLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gapDepth
Values must be of type <class 'float'>
grouping
Value must be one of {'standard', 'percentStacked', 'stacked'}
hiLowLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
marker
Values must be of type <class 'bool'>
ser
A sequence (list or tuple) that may only contain objects of the declared type
smooth
    Values must be of type <class 'bool'> tagname = 'line3DChart'
upDownBars
Values must be of type <class 'openpyxl.chart.updown_bars.UpDownBars'>
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
z_axis
Values must be of type <class 'openpyxl.chart.axis.SeriesAxis'>
openpyxl.chart.marker module
class openpyxl.chart.marker.DataPoint(idx=None, invertIfNegative=None, marker=None, bubble3D=None, explosion=None, spPr=None, pictureOptions=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
bubble3D
Values must be of type <class 'bool'>
explosion
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
idx
Values must be of type <class 'int'>
invertIfNegative
Values must be of type <class 'bool'>
marker
Values must be of type <class 'openpyxl.chart.marker.Marker'>
pictureOptions
Values must be of type <class 'openpyxl.chart.picture.PictureOptions'>
spPr
         Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'dPt' class openpyxl.chart.marker.Marker(symbol=None, size=None, spPr=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
size
Values must be of type <class 'float'>
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
symbol
Value must be one of {'plus', 'dash', 'star', 'dot', 'x', 'diamond', 'square',
   'auto', 'triangle', 'circle', 'picture'} tagname = 'marker'

openpyxl.chart.picture module
class openpyxl.chart.picture.PictureOptions(applyToFront=None,	applyToSides=None, applyToEnd=None,	pictureFormat=None,	pictureStackUnit=None)
基类：openpyxl.descriptors.serialisable.Serialisable
applyToEnd
Values must be of type <class 'bool'>
applyToFront
Values must be of type <class 'bool'>
applyToSides
Values must be of type <class 'bool'>
pictureFormat
Value must be one of {'stackScale', 'stack', 'stretch'}
pictureStackUnit
    Values must be of type <class 'float'> tagname = 'pictureOptions'
openpyxl.chart.pie_chart module
class openpyxl.chart.pie_chart.CustomSplit(secondPiePt=()) 基类：openpyxl.descriptors.serialisable.Serialisable
secondPiePt
         A sequence of primitive types that are stored as a single attribute. "val"is the default attribute tagname = 'custSplit' class openpyxl.chart.pie_chart.DoughnutChart(firstSliceAng=0,	holeSize=10,	extLst=None,
**kw)
基类：openpyxl.chart.pie_chart._PieChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
firstSliceAng
Values must be of type <class 'float'>
holeSize
Values must be of type <class 'float'>
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'doughnutChart'
varyColors
Values must be of type <class 'bool'>
class openpyxl.chart.pie_chart.PieChart(firstSliceAng=0, extLst=None, **kw) 基类：openpyxl.chart.pie_chart._PieChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
firstSliceAng
Values must be of type <class 'float'>
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'pieChart'
varyColors
Values must be of type <class 'bool'>
class openpyxl.chart.pie_chart.PieChart3D(varyColors=True, ser=(), dLbls=None) 基类：openpyxl.chart.pie_chart._PieChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'pie3DChart'
varyColors
Values must be of type <class 'bool'>
class openpyxl.chart.pie_chart.ProjectedPieChart(ofPieType='pie',	gapWidth=None, splitType='auto',	splitPos=None,	custSplit=None,	secondPieSize=75,	ser-
Lines=None, extLst=None, **kw)
基类：openpyxl.chart.pie_chart._PieChartBase
From the spec 21.2.2.126
This element contains the pie of pie or bar of pie series on this chart. Only the first series shall be displayed. The splitType element shall determine whether the splitPos and custSplit elements apply.
custSplit
Values must be of type <class 'openpyxl.chart.pie_chart.CustomSplit'>
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gapWidth
Values must be of type <class 'float'>
join_lines
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
ofPieType
Value must be one of {'pie', 'bar'}
secondPieSize
Values must be of type <class 'float'>
ser
A sequence (list or tuple) that may only contain objects of the declared type
serLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
splitPos
Values must be of type <class 'float'>
splitType
    Value must be one of {'percent', 'cust', 'val', 'pos', 'auto'} tagname = 'ofPieChart'
type
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
varyColors
Values must be of type <class 'bool'>
openpyxl.chart.pivot module
class openpyxl.chart.pivot.PivotFormat(idx=0,	spPr=None,	txPr=None,	marker=None, dLbl=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
DataLabel
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
TextBody
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
dLbl
Values must be of type <class 'openpyxl.chart.label.DataLabel'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
idx
Values must be of type <class 'int'>
marker
Values must be of type <class 'openpyxl.chart.marker.Marker'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'pivotFmt'
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.pivot.PivotSource(name=None, fmtId=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fmtId
Values must be of type <class 'int'>
name
    Values must be of type <class 'str'> tagname = 'pivotSource' openpyxl.chart.plotarea module
class openpyxl.chart.plotarea.DataTable(showHorzBorder=None,	showVertBorder=None,
	showOutline=None,	showKeys=None,	spPr=None,
txPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
showHorzBorder
Values must be of type <class 'bool'>
showKeys
Values must be of type <class 'bool'>
showOutline
Values must be of type <class 'bool'>
showVertBorder
Values must be of type <class 'bool'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'dTable'
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.plotarea.PlotArea(layout=None, dTable=None, spPr=None, _charts=(),
_axes=(), extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
area3DChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
areaChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
bar3DChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
barChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
bubbleChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
catAx
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
dTable
Values must be of type <class 'openpyxl.chart.plotarea.DataTable'>
dateAx
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
doughnutChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
classmethod from_tree(node)
Create object from XML
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
layout
Values must be of type <class 'openpyxl.chart.layout.Layout'>
line3DChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
lineChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
ofPieChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
pie3DChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
pieChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
radarChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
scatterChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
serAx
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
stockChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
surface3DChart
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
surfaceChart
Allow a multisequence to be built up from parts
    Excluded from the instance __elements__ or __attrs__ as is effectively an Alias tagname = 'plotArea' to_tree(tagname=None, idx=None, namespace=None)
valAx
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias openpyxl.chart.print_settings module
class openpyxl.chart.print_settings.PageMargins(l=0.75,	r=0.75,	t=1,	b=1,	header=0.5, footer=0.5)
基类：openpyxl.descriptors.serialisable.Serialisable
Identical to openpyxl.worksheet.page.Pagemargins but element names are different :-/
b
Values must be of type <class 'float'>
bottom
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
footer
Values must be of type <class 'float'>
header
Values must be of type <class 'float'>
l
Values must be of type <class 'float'>
left
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
r
Values must be of type <class 'float'>
right
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
t
    Values must be of type <class 'float'> tagname = 'pageMargins'
top
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.chart.print_settings.PrintSettings(headerFooter=None, pageMargins=None, pageSetup=None)
基类：openpyxl.descriptors.serialisable.Serialisable
headerFooter
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooter'>
pageMargins
Values must be of type <class 'openpyxl.chart.print_settings.PageMargins'>
pageSetup
    Values must be of type <class 'openpyxl.worksheet.page.PrintPageSetup'> tagname = 'printSettings'
openpyxl.chart.radar_chart module
class openpyxl.chart.radar_chart.RadarChart(radarStyle='standard',	varyColors=None, ser=(), dLbls=None, extLst=None, **kw)
基类：openpyxl.chart._chart.ChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dataLabels
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
radarStyle
Value must be one of {'standard', 'filled', 'marker'}
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'radarChart'
type
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
openpyxl.chart.reader module
Read a chart
openpyxl.chart.reader.read_chart(chartspace)
openpyxl.chart.reference module
class openpyxl.chart.reference.DummyWorksheet(title) 基类：object
class openpyxl.chart.reference.Reference(worksheet=None, min_col=None, min_row=None,
	max_col=None,	max_row=None,
range_string=None)
基类：openpyxl.descriptors.Strict Normalise cell range references
cols
Return all columns in the range
max_col
Values must be of type <class 'int'>
max_row
Values must be of type <class 'int'>
min_col
Values must be of type <class 'int'>
min_row
Values must be of type <class 'int'>
pop()
Return and remove the first cell
range_string
Values must be of type <class 'str'>
rows
    Return all rows in the range sheetname
openpyxl.chart.scatter_chart module
class openpyxl.chart.scatter_chart.ScatterChart(scatterStyle=None,	varyColors=None, ser=(), dLbls=None, extLst=None, **kw)
基类：openpyxl.chart._chart.ChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>

dataLabels
(eg.
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
scatterStyle
Value must be one of {'lineMarker', 'line', 'smoothMarker', 'smooth', 'marker'}
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'scatterChart'
varyColors
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
openpyxl.chart.series module
class openpyxl.chart.series.Series(idx=0,	order=0,	tx=None,	spPr=None,	pictureOptions=None, dPt=(), dLbls=None, trendline=None, errBars=None, cat=None, val=None, invertIfNegative=None, shape=None, xVal=None, yVal=None, bubbleSize=None, bubble3D=None,	marker=None,	smooth=None,	explosion=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Generic series object. Should not be instantiated directly. User the chart.Series factory instead.
bubble3D
Values must be of type <class 'bool'>
bubbleSize
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
cat
Values must be of type <class 'openpyxl.chart.data_source.AxDataSource'>
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dPt
A sequence (list or tuple) that may only contain objects of the declared type
data_points
(eg.
errBars
Values must be of type <class 'openpyxl.chart.error_bar.ErrorBars'>
explosion
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
identifiers
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
idx
Values must be of type <class 'int'>
invertIfNegative
Values must be of type <class 'bool'>
labels
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
marker
Values must be of type <class 'openpyxl.chart.marker.Marker'>
order
Values must be of type <class 'int'>
pictureOptions
Values must be of type <class 'openpyxl.chart.picture.PictureOptions'>
shape
Value must be one of {'coneToMax','cone','box','cylinder','pyramid','pyramidToMax'
}
smooth
Values must be of type <class 'bool'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'ser'
title
(eg.
to_tree(tagname=None, idx=None)
trendline
Values must be of type <class 'openpyxl.chart.trendline.Trendline'>
tx
Values must be of type <class 'openpyxl.chart.series.SeriesLabel'>
val
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
xVal
Values must be of type <class 'openpyxl.chart.data_source.AxDataSource'>
yVal
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
zVal
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.chart.series.SeriesLabel(strRef=None, v=None) 基类：openpyxl.descriptors.serialisable.Serialisable
strRef
    Values must be of type <class 'openpyxl.chart.data_source.StrRef'> tagname = 'tx'
v
Values must be of type <class 'str'>
value
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.chart.series.XYSeries(idx=0,	order=0,	tx=None,	spPr=None,	pictureOptions=None,	dPt=(),	dLbls=None,	trendline=None, errBars=None,	cat=None,	val=None,	invertIfNegative=None,	shape=None,	xVal=None,	yVal=None, bubbleSize=None,	bubble3D=None,	marker=None, smooth=None, explosion=None, extLst=None)
基类：openpyxl.chart.series.Series
Dedicated series for charts that have x and y series

bubble3D
Values must be of type <class 'bool'>
bubbleSize
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dPt
A sequence (list or tuple) that may only contain objects of the declared type
errBars
Values must be of type <class 'openpyxl.chart.error_bar.ErrorBars'>
idx
Values must be of type <class 'int'>
invertIfNegative
Values must be of type <class 'bool'>
marker
Values must be of type <class 'openpyxl.chart.marker.Marker'>
order
Values must be of type <class 'int'>
smooth
Values must be of type <class 'bool'>
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
trendline
Values must be of type <class 'openpyxl.chart.trendline.Trendline'>
tx
Values must be of type <class 'openpyxl.chart.series.SeriesLabel'>
xVal
Values must be of type <class 'openpyxl.chart.data_source.AxDataSource'>
yVal
Values must be of type <class 'openpyxl.chart.data_source.NumDataSource'>
openpyxl.chart.series_factory module
openpyxl.chart.series_factory.SeriesFactory(values,	xvalues=None,	zvalues=None,	title=None, title_from_data=False) Convenience Factory for creating chart data series.
openpyxl.chart.shapes module
class openpyxl.chart.shapes.GraphicalProperties(bwMode=None, xfrm=None, noFill=None, solidFill=None,	gradFill=None,	pattFill=None, ln=None, scene3d=None, custGeom=None, prstGeom=None, sp3d=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Somewhat vaguely 21.2.2.197 says this:
This element specifies the formatting for the parent chart element. The custGeom, prstGeom, scene3d, and xfrm elements are not supported. The bwMode attribute is not supported.
This doesn't leave much. And the element is used in different places.
bwMode
Value must be one of {'gray','hidden','clr','auto','grayWhite','invGray','black'
, 'blackGray', 'white', 'blackWhite', 'ltGray'}
custGeom
Values must be of type <class 'openpyxl.drawing.geometry.CustomGeometry2D'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gradFill
Values must be of type <class 'openpyxl.drawing.fill.GradientFillProperties'>
line
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
ln
Values must be of type <class 'openpyxl.drawing.line.LineProperties'>
noFill
Values must be of type <class 'bool'>
pattFill
Values must be of type <class 'openpyxl.drawing.fill.PatternFillProperties'>
prstGeom
Values must be of type <class 'openpyxl.drawing.geometry.PresetGeometry2D'>
scene3d
Values must be of type <class 'openpyxl.drawing.geometry.Scene3D'>
shape3D
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
solidFill
Values must be of type <class 'openpyxl.drawing.colors.ColorChoice'>
sp3d
    Values must be of type <class 'openpyxl.drawing.geometry.Shape3D'> tagname = 'spPr'
transform
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
xfrm
Values must be of type <class 'openpyxl.drawing.geometry.Transform2D'>
openpyxl.chart.stock_chart module
class openpyxl.chart.stock_chart.StockChart(ser=(), dLbls=None, dropLines=None, hiLowLines=None, upDownBars=None, extLst=None,
**kw)
基类：openpyxl.chart._chart.ChartBase
dLbls
Values must be of type <class 'openpyxl.chart.label.DataLabelList'>
dataLabels
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
dropLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
hiLowLines
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'stockChart'
upDownBars
Values must be of type <class 'openpyxl.chart.updown_bars.UpDownBars'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
openpyxl.chart.surface_chart module
class openpyxl.chart.surface_chart.BandFormat(idx=0, spPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
idx
Values must be of type <class 'int'>
spPr
         Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'bandFmt' class openpyxl.chart.surface_chart.BandFormatList(bandFmt=()) 基类：openpyxl.descriptors.serialisable.Serialisable
bandFmt
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'bandFmts' class openpyxl.chart.surface_chart.SurfaceChart(**kw) 基类：openpyxl.chart.surface_chart.SurfaceChart3D
bandFmts
Values must be of type <class 'openpyxl.chart.surface_chart.BandFormatList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'surfaceChart'
wireframe
Values must be of type <class 'bool'>
class openpyxl.chart.surface_chart.SurfaceChart3D(**kw) 基类：openpyxl.chart.surface_chart._SurfaceChartBase, openpyxl.chart._3d._3DBase
bandFmts
Values must be of type <class 'openpyxl.chart.surface_chart.BandFormatList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
ser
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'surface3DChart'
wireframe
Values must be of type <class 'bool'>
x_axis
Values must be of type <class 'openpyxl.chart.axis.TextAxis'>
y_axis
Values must be of type <class 'openpyxl.chart.axis.NumericAxis'>
z_axis
Values must be of type <class 'openpyxl.chart.axis.SeriesAxis'>
openpyxl.chart.text module
class openpyxl.chart.text.RichText(bodyPr=None, lstStyle=None, p=None) 基类：openpyxl.descriptors.serialisable.Serialisable
From the specification: 21.2.2.216
This element specifies text formatting. The lstStyle element is not supported.
bodyPr
Values must be of type <class 'openpyxl.drawing.text.RichTextProperties'>
lstStyle
Values must be of type <class 'openpyxl.drawing.text.ListStyle'>
p
A sequence (list or tuple) that may only contain objects of the declared type
paragraphs
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
properties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
         (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'rich' class openpyxl.chart.text.Text(strRef=None, rich=None) 基类：openpyxl.descriptors.serialisable.Serialisable
The value can be either a cell reference or a text element If both are present then the reference will be used.
rich
Values must be of type <class 'openpyxl.chart.text.RichText'>
strRef
    Values must be of type <class 'openpyxl.chart.data_source.StrRef'> tagname = 'tx' to_tree(tagname=None, idx=None, namespace=None)
openpyxl.chart.title module
class openpyxl.chart.title.Title(tx=None,	layout=None,	overlay=None,	spPr=None, txPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
body
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
layout
Values must be of type <class 'openpyxl.chart.layout.Layout'>
overlay
Values must be of type <class 'bool'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'title'
text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
tx
Values must be of type <class 'openpyxl.chart.text.Text'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.chart.title.TitleDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.Typed allow_none = True expected_type
Title的别名
openpyxl.chart.title.title_maker(text)
openpyxl.chart.trendline module
class openpyxl.chart.trendline.Trendline(name=None, spPr=None, trendlineType='linear', order=None, period=None, forward=None, backward=None, intercept=None, dispRSqr=None, dispEq=None, trendlineLbl=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
backward
Values must be of type <class 'float'>
dispEq
Values must be of type <class 'bool'>
dispRSqr
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
forward
Values must be of type <class 'float'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
intercept
Values must be of type <class 'float'>
name
Values must be of type <class 'str'>
order
Values must be of type <class 'int'>
period
Values must be of type <class 'int'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'trendline'
trendlineLbl
Values must be of type <class 'openpyxl.chart.trendline.TrendlineLabel'>
trendlineType
Value must be one of {'exp', 'movingAvg', 'power', 'poly', 'linear', 'log'}
class openpyxl.chart.trendline.TrendlineLabel(layout=None,	tx=None,	numFmt=None, spPr=None, txPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
layout
Values must be of type <class 'openpyxl.chart.layout.Layout'>
numFmt
Values must be of type <class 'openpyxl.chart.data_source.NumFmt'>
spPr
    Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'> tagname = 'trendlineLbl'
textProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
tx
Values must be of type <class 'openpyxl.chart.text.Text'>
txPr
Values must be of type <class 'openpyxl.chart.text.RichText'>
openpyxl.chart.updown_bars module
class openpyxl.chart.updown_bars.UpDownBars(gapWidth=150, upBars=None, downBars=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
downBars
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gapWidth
    Values must be of type <class 'float'> tagname = 'upbars'
upBars
Values must be of type <class 'openpyxl.chart.axis.ChartLines'>
openpyxl.chartsheet package Submodules
openpyxl.chartsheet.chartsheet module
class openpyxl.chartsheet.chartsheet.Chartsheet(sheetPr=None, sheetViews=None, sheetProtection=None,	customSheetViews=None, pageMargins=None,	pageSetup=None, headerFooter=None, drawing=None, drawingHF=None,	picture=None,	webPublishItems=None,	extLst=None,	parent=None, title=", sheet_state='visible')
	基类：openpyxl.workbook.child._WorkbookChild,	openpyxl.descriptors.serialisable.
Serialisable
HeaderFooter
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") add_chart(chart)
customSheetViews
Values must be of type <class 'openpyxl.chartsheet.custom.CustomChartsheetViews'>
drawing
Values must be of type <class 'openpyxl.worksheet.drawing.Drawing'>
drawingHF
Values must be of type <class 'openpyxl.chartsheet.relation.DrawingHF'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
headerFooter
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooter'>
mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml'
pageMargins
Values must be of type <class 'openpyxl.worksheet.page.PageMargins'>
pageSetup
Values must be of type <class 'openpyxl.worksheet.page.PrintPageSetup'>
picture
Values must be of type <class 'openpyxl.chartsheet.relation.SheetBackgroundPicture'>
sheetPr
Values must be of type <class 'openpyxl.chartsheet.properties.ChartsheetProperties'>
sheetProtection
Values must be of type <class 'openpyxl.chartsheet.protection.ChartsheetProtection'>
sheetViews
Values must be of type <class 'openpyxl.chartsheet.views.ChartsheetViewList'>
sheet_state
    Value must be one of {'visible', 'hidden', 'veryHidden'} tagname = 'chartsheet' to_tree()
webPublishItems
Values must be of type <class 'openpyxl.chartsheet.publish.WebPublishItems'>
openpyxl.chartsheet.custom module
class openpyxl.chartsheet.custom.CustomChartsheetView(guid=None,	scale=None, state='visible',	zoomToFit=None, pageMargins=None,	page-
Setup=None, headerFooter=None)
基类：openpyxl.descriptors.serialisable.Serialisable guid
headerFooter
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooter'>
pageMargins
Values must be of type <class 'openpyxl.worksheet.page.PageMargins'>
pageSetup
Values must be of type <class 'openpyxl.worksheet.page.PrintPageSetup'>
scale
Values must be of type <class 'int'>
state
    Value must be one of {'visible', 'hidden', 'veryHidden'} tagname = 'customSheetView'
zoomToFit
Values must be of type <class 'bool'>
class openpyxl.chartsheet.custom.CustomChartsheetViews(customSheetView=None) 基类：openpyxl.descriptors.serialisable.Serialisable
customSheetView
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'customSheetViews'
openpyxl.chartsheet.properties module
class openpyxl.chartsheet.properties.ChartsheetProperties(published=None,	code-
Name=None, tabColor=None)
基类：openpyxl.descriptors.serialisable.Serialisable
codeName
Values must be of type <class 'str'>
published
Values must be of type <class 'bool'>
tabColor
    Values must be of type <class 'openpyxl.styles.colors.Color'> tagname = 'sheetPr'
openpyxl.chartsheet.protection module
class openpyxl.chartsheet.protection.ChartsheetProtection(content=None,	objects=None, hashValue=None,	spin-
Count=None, saltValue=None, algorithmName=None,	password=None)
基类：openpyxl.descriptors.serialisable.Serialisable, openpyxl.worksheet.protection.
_Protected
algorithmName
Values must be of type <class 'str'>
content
Values must be of type <class 'bool'>
hashValue
objects
    Values must be of type <class 'bool'> saltValue spinCount
    Values must be of type <class 'int'> tagname = 'sheetProtection'
openpyxl.chartsheet.publish module
class openpyxl.chartsheet.publish.WebPublishItem(id=None, divId=None, sourceType=None, sourceRef=None, sourceObject=None, destinationFile=None, title=None, autoRepublish=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoRepublish
Values must be of type <class 'bool'>
destinationFile
Values must be of type <class 'str'>
divId
Values must be of type <class 'str'>
id
Values must be of type <class 'int'>
sourceObject
Values must be of type <class 'str'>
sourceRef
Values must be of type <class 'str'>
sourceType
Value must be one of {'sheet','autoFilter','range','pivotTable','label','printArea'
    , 'chart', 'query'} tagname = 'webPublishItem'
title
Values must be of type <class 'str'>
class openpyxl.chartsheet.publish.WebPublishItems(count=None, webPublishItem=None) 基类：openpyxl.descriptors.serialisable.Serialisable

count
tagname = 'WebPublishItems'
webPublishItem
A sequence (list or tuple) that may only contain objects of the declared type
openpyxl.chartsheet.relation module
class openpyxl.chartsheet.relation.DrawingHF(id=None, lho=None, lhe=None, lhf=None, cho=None, che=None, chf=None, rho=None, rhe=None, rhf=None, lfo=None, lfe=None, lff=None, cfo=None, cfe=None, cff=None,
rfo=None, rfe=None, rff=None)
基类：openpyxl.descriptors.serialisable.Serialisable
centerFooterEvenPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
centerFooterFirstPage
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
centerFooterOddPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
centerHeaderEvenPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
centerHeaderFirstPage
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
centerHeaderOddPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
cfe
Values must be of type <class 'int'>
cff
Values must be of type <class 'int'>
cfo
che
Values must be of type <class 'int'>
chf
Values must be of type <class 'int'>
cho
Values must be of type <class 'int'>
id
Values must be of type <class 'str'>
leftFooterEvenPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
leftFooterFirstPage
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
leftFooterOddPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
leftHeaderEvenPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
leftHeaderFirstPage
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
leftHeaderOddPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
lfe
Values must be of type <class 'int'>
lff
Values must be of type <class 'int'>
lfo
Values must be of type <class 'int'>
lhe
Values must be of type <class 'int'>
lhf
lho
Values must be of type <class 'int'>
rfe
Values must be of type <class 'int'>
rff
Values must be of type <class 'int'>
rfo
Values must be of type <class 'int'>
rhe
Values must be of type <class 'int'>
rhf
Values must be of type <class 'int'>
rho
Values must be of type <class 'int'>
rightFooterEvenPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rightFooterFirstPage
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rightFooterOddPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rightHeaderEvenPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rightHeaderFirstPage
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rightHeaderOddPages
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.chartsheet.relation.SheetBackgroundPicture(id) 基类：openpyxl.descriptors.serialisable.Serialisable

id
'str'>
tagname = 'picture'
openpyxl.chartsheet.views module
class openpyxl.chartsheet.views.ChartsheetView(tabSelected=None,zoomScale=None,workbookViewId=0,zoomToFit=None,extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
tabSelected
    Values must be of type <class 'bool'> tagname = 'sheetView'
workbookViewId
Values must be of type <class 'int'>
zoomScale
Values must be of type <class 'int'>
zoomToFit
         Values must be of type <class 'bool'> class openpyxl.chartsheet.views.ChartsheetViewList(sheetView=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
sheetView
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'sheetViews'
openpyxl.comments package Submodules
openpyxl.comments.author module
class openpyxl.comments.author.AuthorList(author=()) 基类：openpyxl.descriptors.serialisable.Serialisable author
A sequence (list or tuple) that may only contain objects of the declared type
authors
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'authors'
openpyxl.comments.comment_sheet module
class openpyxl.comments.comment_sheet.CommentRecord(ref=",	authorId=0,	guid=None, shapeId=0,	text=None,	commentPr=None,	author=None,
height=79, width=144)
基类：openpyxl.descriptors.serialisable.Serialisable
author
Values must be of type <class 'str'>
authorId
Values must be of type <class 'int'>
commentPr
Values must be of type <class 'openpyxl.comments.comment_sheet.Properties'>
content
Remove all inline formatting and stuff
classmethod from_cell(cell)
    Class method to convert cell comment guid
ref
Values must be of type <class 'str'>
shapeId
    Values must be of type <class 'int'> tagname = 'comment'
text
Values must be of type <class 'openpyxl.cell.text.Text'>
class openpyxl.comments.comment_sheet.CommentSheet(authors=None,	commentList=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
authors
Values must be of type <class 'openpyxl.comments.author.AuthorList'>
commentList
Wrap a sequence in an containing object
comments
Return a dictionary of comments keyed by coord
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
classmethod from_comments(comments)
    Create a comment sheet from a list of comments for a particular worksheet mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml'
path
    Return path within the archive tagname = 'comments' to_tree() write_shapes(vml=None)
Create the VML for comments
class openpyxl.comments.comment_sheet.Properties(locked=None,defaultSize=None,_print=None,disabled=None,	uiOb-ject=None,autoFill=None,	auto-Line=None,altText=None,	tex-tHAlign=None,textVAlign=None,lockText=None,	justLastX=None,	au-toScale=None, rowHidden=None, colHidden=None, anchor=None)
基类：openpyxl.descriptors.serialisable.Serialisable
altText
Values must be of type <class 'str'>
autoFill
Values must be of type <class 'bool'>
autoLine
Values must be of type <class 'bool'>
autoScale
Values must be of type <class 'bool'>
colHidden
Values must be of type <class 'bool'>
defaultSize
Values must be of type <class 'bool'>
disabled
Values must be of type <class 'bool'>
justLastX
Values must be of type <class 'bool'>
lockText
Values must be of type <class 'bool'>
locked
Values must be of type <class 'bool'>
rowHidden
Values must be of type <class 'bool'>
textHAlign
Value must be one of {'distributed', 'left', 'center', 'justify', 'right'}
textVAlign
Value must be one of {'justify', 'distributed', 'center', 'bottom', 'top'}
uiObject
Values must be of type <class 'bool'>
openpyxl.comments.comment_sheet.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.comments.comments module
class openpyxl.comments.comments.Comment(text, author, height=79, width=144) 基类：object
bind(cell)
    Bind comment to a particular cell parent
text
Any comment text stripped of all formatting.
unbind()
Unbind a comment from a cell
openpyxl.comments.shape_writer module
class openpyxl.comments.shape_writer.ShapeWriter(comments) 基类：object
Create VML for comments add_comment_shape(root, idx, coord, height, width) add_comment_shapetype(root)
vml = None vml_path = None
     write(root) openpyxl.comments.shape_writer.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.compat package
class openpyxl.compat.DummyCode 基类：object
openpyxl.compat.deprecated(reason)
Submodules
openpyxl.compat.abc module
openpyxl.compat.accumulate module
Python 2 implementation of the accumulate function in itertools From the Python documentation https:
//docs.python.org/3/library/itertools.html#itertool-functions
openpyxl.compat.accumulate.accumulate(iterable, func=<built-in function add>)
Return running totals
openpyxl.compat.numbers module
openpyxl.compat.singleton module
class openpyxl.compat.singleton.Cached(*args, **kw) 基类：type
Caching metaclass Child classes will only create new instances of themselves if one doesn't already exist. Does not work with __slots__
class openpyxl.compat.singleton.Singleton(*args, **kw) 基类：type
Singleton metaclass Based on Python Cookbook 3rd Edition Recipe 9.13 Only one instance of a class can exist. Does not work with __slots__
openpyxl.compat.strings module
openpyxl.compat.strings.safe_string(value)
Safely and consistently format numeric values
openpyxl.descriptors package
class openpyxl.descriptors.MetaSerialisable 基类：type
class openpyxl.descriptors.MetaStrict 基类：type
class openpyxl.descriptors.Strict 基类：object
Submodules
openpyxl.descriptors.base module
Based on Python Cookbook 3rd Edition, 8.13 http://chimera.labs.oreilly.com/books/1230000000393/ch08. html#_discussiuncion_130 class openpyxl.descriptors.base.ASCII(*args, **kw) 基类：openpyxl.descriptors.base.Typed expected_type builtins.bytes的别名
class openpyxl.descriptors.base.Alias(alias) 基类：openpyxl.descriptors.base.Descriptor
Aliases can be used when either the desired attribute name is not allowed or confusing in Python (eg.
    "type") or a more descriptve name is desired (eg. "underline"for "u") class openpyxl.descriptors.base.Bool(*args, **kw) 基类：openpyxl.descriptors.base.Convertible expected_type builtins.bool的别名
class openpyxl.descriptors.base.Convertible(*args, **kw) 基类：openpyxl.descriptors.base.Typed
     Values must be convertible to a particular type class openpyxl.descriptors.base.DateTime(*args, **kw) 基类：openpyxl.descriptors.base.Typed expected_type datetime.datetime的别名
class openpyxl.descriptors.base.Default(name=None, **kw) 基类：openpyxl.descriptors.base.Typed
When called returns an instance of the expected type. Additional default values can be passed in to the descriptor
class openpyxl.descriptors.base.Descriptor(name=None, **kw) 基类：object
class openpyxl.descriptors.base.Float(*args, **kw) 基类：openpyxl.descriptors.base.Convertible expected_type builtins.float的别名
class openpyxl.descriptors.base.Integer(*args, **kw) 基类：openpyxl.descriptors.base.Convertible expected_type builtins.int的别名
class openpyxl.descriptors.base.Length(name=None, **kw) 基类：openpyxl.descriptors.base.Descriptor class openpyxl.descriptors.base.MatchPattern(name=None, **kw) 基类：openpyxl.descriptors.base.Descriptor Values must match a regex pattern allow_none = False
class openpyxl.descriptors.base.Max(**kw) 基类：openpyxl.descriptors.base.Convertible Values must be less than a max value allow_none = False expected_type builtins.float的别名 class openpyxl.descriptors.base.Min(**kw) 基类：openpyxl.descriptors.base.Convertible Values must be greater than a min value allow_none = False expected_type builtins.float的别名 class openpyxl.descriptors.base.MinMax(**kw) 基类：openpyxl.descriptors.base.Min, openpyxl.descriptors.base.Max
     Values must be greater than min value and less than a max one class openpyxl.descriptors.base.NoneSet(name=None, **kw) 基类：openpyxl.descriptors.base.Set
    'none'will be treated as None class openpyxl.descriptors.base.Set(name=None, **kw) 基类：openpyxl.descriptors.base.Descriptor
     Value can only be from a set of know values class openpyxl.descriptors.base.String(*args, **kw) 基类：openpyxl.descriptors.base.Typed expected_type builtins.str的别名 class openpyxl.descriptors.base.Text(*args, **kw) 基类：openpyxl.descriptors.base.String, openpyxl.descriptors.base.Convertible class openpyxl.descriptors.base.Tuple(*args, **kw) 基类：openpyxl.descriptors.base.Typed expected_type builtins.tuple的别名 class openpyxl.descriptors.base.Typed(*args, **kw) 基类：openpyxl.descriptors.base.Descriptor
Values must of a particular type
allow_none = False expected_type builtins.NoneType的别名 nested = False
openpyxl.descriptors.excel module
Excel specific descriptors class openpyxl.descriptors.excel.Base64Binary(name=None, **kw) 基类：openpyxl.descriptors.base.MatchPattern pattern = '^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$' class openpyxl.descriptors.excel.CellRange(name=None, **kw) 基类：openpyxl.descriptors.base.MatchPattern allow_none = True pattern = '^[$]?([A-Za-z]{1,3})[$]?(\\d+)(:[$]?([A-Za-z]{1,3})[$]?(\\d+)?)?$|^[A-Za-z]{1,3}:[A-Za-z class openpyxl.descriptors.excel.Extension(uri=None) 基类：openpyxl.descriptors.serialisable.Serialisable
uri
Values must be of type <class 'str'>
class openpyxl.descriptors.excel.ExtensionList(ext=()) 基类：openpyxl.descriptors.serialisable.Serialisable
ext
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.descriptors.excel.Guid(name=None, **kw) 基类：openpyxl.descriptors.base.MatchPattern pattern = '{[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}\\}' class openpyxl.descriptors.excel.HexBinary(name=None, **kw) 基类：openpyxl.descriptors.base.MatchPattern pattern = '[0-9a-fA-F]+$' class openpyxl.descriptors.excel.Percentage(**kw) 基类：openpyxl.descriptors.base.MinMax max = 1000000 min = -1000000 pattern = '((100)|([0-9][0-9]?))(\\.[0-9][0-9]?)?%'
class openpyxl.descriptors.excel.Relation(*args, **kw) 基类：openpyxl.descriptors.base.String allow_none = True namespace = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships' class openpyxl.descriptors.excel.TextPoint(**kw) 基类：openpyxl.descriptors.base.MinMax
Size in hundredths of points. In theory other units of measurement can be used but these are unbounded
     expected_type builtins.int的别名 max = 400000 min = -400000 class openpyxl.descriptors.excel.UniversalMeasure(name=None, **kw) 基类：openpyxl.descriptors.base.MatchPattern pattern = '[0-9]+(\\.[0-9]+)?(mm|cm|in|pt|pc|pi)'
openpyxl.descriptors.namespace module
openpyxl.descriptors.namespace.namespaced(obj, tagname, namespace=None)
Utility to create a namespaced tag for an object
openpyxl.descriptors.nested module
Generic serialisable classes class openpyxl.descriptors.nested.EmptyTag(*args, **kw) 基类：openpyxl.descriptors.nested.Nested, openpyxl.descriptors.base.Bool
Boolean if a tag exists or not.
     from_tree(node) to_tree(tagname=None, value=None, namespace=None) class openpyxl.descriptors.nested.Nested(name=None, **kw) 基类：openpyxl.descriptors.base.Descriptor attribute = 'val' from_tree(node) nested = True
     to_tree(tagname=None, value=None, namespace=None) class openpyxl.descriptors.nested.NestedBool(*args, **kw) 基类：openpyxl.descriptors.nested.NestedValue, openpyxl.descriptors.base.Bool from_tree(node) class openpyxl.descriptors.nested.NestedFloat(*args, **kw) 基类：openpyxl.descriptors.nested.NestedValue, openpyxl.descriptors.base.Float class openpyxl.descriptors.nested.NestedInteger(*args, **kw) 基类：openpyxl.descriptors.nested.NestedValue, openpyxl.descriptors.base.Integer class openpyxl.descriptors.nested.NestedMinMax(**kw) 基类：openpyxl.descriptors.nested.Nested, openpyxl.descriptors.base.MinMax class openpyxl.descriptors.nested.NestedNoneSet(name=None, **kw) 基类：openpyxl.descriptors.nested.Nested, openpyxl.descriptors.base.NoneSet class openpyxl.descriptors.nested.NestedSet(name=None, **kw) 基类：openpyxl.descriptors.nested.Nested, openpyxl.descriptors.base.Set class openpyxl.descriptors.nested.NestedString(*args, **kw) 基类：openpyxl.descriptors.nested.NestedValue, openpyxl.descriptors.base.String class openpyxl.descriptors.nested.NestedText(*args, **kw) 基类：openpyxl.descriptors.nested.NestedValue
     Represents any nested tag with the value as the contents of the tag from_tree(node) to_tree(tagname=None, value=None, namespace=None) class openpyxl.descriptors.nested.NestedValue(*args, **kw) 基类：openpyxl.descriptors.nested.Nested, openpyxl.descriptors.base.Convertible
Nested tag storing the value on the 'val'attribute
openpyxl.descriptors.sequence module
class openpyxl.descriptors.sequence.MultiSequence(name=None, **kw) 基类：openpyxl.descriptors.sequence.Sequence Sequences can contain objects with different tags to_tree(tagname, obj, namespace=None)
Convert the sequence represented by the descriptor to an XML element
class openpyxl.descriptors.sequence.MultiSequencePart(expected_type, store) 基类：openpyxl.descriptors.base.Alias
Allow a multisequence to be built up from parts
     Excluded from the instance __elements__ or __attrs__ as is effectively an Alias class openpyxl.descriptors.sequence.NestedSequence(name=None, **kw) 基类：openpyxl.descriptors.sequence.Sequence Wrap a sequence in an containing object count = False from_tree(node) to_tree(tagname, obj, namespace=None)
Convert the sequence represented by the descriptor to an XML element
class openpyxl.descriptors.sequence.Sequence(name=None, **kw) 基类：openpyxl.descriptors.base.Descriptor
A sequence (list or tuple) that may only contain objects of the declared type
expected_type builtins.NoneType的别名 idx_base = 0 seq_types = (<class 'list'>, <class 'tuple'>) to_tree(tagname, obj, namespace=None)
         Convert the sequence represented by the descriptor to an XML element unique = False class openpyxl.descriptors.sequence.ValueSequence(name=None, **kw) 基类：openpyxl.descriptors.sequence.Sequence
A sequence of primitive types that are stored as a single attribute. "val"is the default attribute attribute = 'val' from_tree(node) to_tree(tagname, obj, namespace=None)
Convert the sequence represented by the descriptor to an XML element
openpyxl.descriptors.serialisable module
class openpyxl.descriptors.serialisable.Serialisable 基类：openpyxl.descriptors._Serialisable
Objects can serialise to XML their attributes and child objects. The following class attributes are created by the metaclass at runtime: __attrs__ = attributes __nested__ = single-valued child treated as an attribute __elements__ = child elements
classmethod from_tree(node)
    Create object from XML idx_base = 0 namespace = None tagname to_tree(tagname=None, idx=None, namespace=None)
openpyxl.descriptors.slots module
class openpyxl.descriptors.slots.AutoSlotProperties 基类：type
openpyxl.drawing package Submodules
openpyxl.drawing.colors module
class openpyxl.drawing.colors.ColorChoice(scrgbClr=None,	srgbClr=None,	hslClr=None, sysClr=None, schemeClr=None, prstClr=None)
基类：openpyxl.descriptors.serialisable.Serialisable
RGB
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
RGBPercent
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
hslClr
    Values must be of type <class 'openpyxl.drawing.colors.HSLColor'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff' ,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray' ,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen'
,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise',
'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown'
, 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray',
'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
, 'darkOrchid', 'dimGrey'}
schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sysClr
         Values must be of type <class 'openpyxl.drawing.colors.SystemColor'> tagname = 'colorChoice' class openpyxl.drawing.colors.ColorChoiceDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.Typed
Objects can choose from 7 different kinds of color system. Assume RGBHex if a string is passed in.
allow_none = True expected_type
ColorChoice的别名
class openpyxl.drawing.colors.ColorMapping(bg1='lt1',	tx1='dk1',	bg2='lt2',	tx2='dk2', accent1='accent1',	accent2='accent2',	accent3='accent3',	accent4='accent4',	accent5='accent5', accent6='accent6', hlink='hlink', folHlink='folHlink', extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
accent1
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
accent2
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
accent3
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
accent4
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
accent5
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
accent6
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
bg1
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
bg2
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
folHlink
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
hlink
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
tagname = 'clrMapOvr'
tx1
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'}
tx2
Value must be one of {'accent6', 'accent4', 'lt2', 'accent3', 'folHlink', 'accent5',
        'lt1', 'hlink', 'accent1', 'dk2', 'dk1', 'accent2'} class openpyxl.drawing.colors.HSLColor(hue=None, sat=None, lum=None) 基类：openpyxl.descriptors.serialisable.Serialisable
hue
Values must be of type <class 'int'>
lum
Values must be of type <class 'float'>
sat
         Values must be of type <class 'float'> tagname = 'hslClr' class openpyxl.drawing.colors.RGBPercent(r=None, g=None, b=None) 基类：openpyxl.descriptors.serialisable.Serialisable
b
Values must be of type <class 'float'>
g
Values must be of type <class 'float'>
r
         Values must be of type <class 'float'> tagname = 'rgbClr' class openpyxl.drawing.colors.SchemeColor(tint=None, shade=None, comp=None, inv=None, gray=None,	alpha=None,	alphaOff=None,	alphaMod=None,	hue=None,	hueOff=None, hueMod=None,	sat=None,	satOff=None,	satMod=None,	lum=None,	lumOff=None,	lumMod=None,	red=None,	redOff=None,	redMod=None,	green=None,	greenOff=None, greenMod=None,	blue=None,	blueOff=None, blueMod=None, gamma=None, invGamma=None, val=None)
基类：openpyxl.descriptors.serialisable.Serialisable
alpha
Values must be of type <class 'int'>
alphaMod
Values must be of type <class 'int'>
alphaOff
Values must be of type <class 'int'>
blue
Values must be of type <class 'int'>
blueMod
Values must be of type <class 'int'>
blueOff
Values must be of type <class 'int'>
comp
Values must be of type <class 'bool'>
gamma
Values must be of type <class 'bool'>
gray
Values must be of type <class 'int'>
green
Values must be of type <class 'int'>
greenMod
Values must be of type <class 'int'>
greenOff
Values must be of type <class 'int'>
hue
Values must be of type <class 'int'>
hueMod
Values must be of type <class 'int'>
hueOff
Values must be of type <class 'int'>
inv
Values must be of type <class 'int'>
invGamma
Values must be of type <class 'bool'>

lum
'int'>
lumMod
'int'>
lumOff
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
red
Values must be of type <class 'int'>
redMod
Values must be of type <class 'int'>
redOff
Values must be of type <class 'int'>
sat
Values must be of type <class 'int'>
satMod
Values must be of type <class 'int'>
satOff
Values must be of type <class 'int'>
shade
    Values must be of type <class 'int'> tagname = 'schemeClr'
tint
Values must be of type <class 'int'>
val
Value must be one of {'accent2','accent6','tx1','accent4','lt2','tx2','folHlink'
, 'accent5', 'phClr', 'bg1', 'hlink', 'lt1', 'accent1', 'accent3', 'dk1', 'dk2'
, 'bg2'}
class openpyxl.drawing.colors.SystemColor(val='windowText',	lastClr=None,	tint=None, shade=None, comp=None, inv=None, gray=None,
alpha=None,alphaOff=None,alphaMod=None,hue=None,hueOff=None,hueMod=None,sat=None,satOff=None,satMod=None,lum=None,lumOff=None,lumMod=None,red=None,redOff=None,redMod=None,green=None,greenOff=None,greenMod=None,blue=None,blueOff=None,blueMod=None,gamma=None, invGamma=None)
基类：openpyxl.descriptors.serialisable.Serialisable
alpha
Values must be of type <class 'int'>
alphaMod
Values must be of type <class 'int'>
alphaOff
Values must be of type <class 'int'>
blue
Values must be of type <class 'int'>
blueMod
Values must be of type <class 'int'>
blueOff
Values must be of type <class 'int'>
comp
Values must be of type <class 'openpyxl.drawing.colors.Transform'>
gamma
Values must be of type <class 'openpyxl.drawing.colors.Transform'>
gray
Values must be of type <class 'openpyxl.drawing.colors.Transform'>
green
Values must be of type <class 'int'>
greenMod
Values must be of type <class 'int'>
greenOff
Values must be of type <class 'int'>
hue
Values must be of type <class 'int'>
hueMod
'int'>
hueOff
'int'>
inv
Values must be of type <class 'openpyxl.drawing.colors.Transform'>
invGamma
Values must be of type <class 'openpyxl.drawing.colors.Transform'>
lastClr
Values must be of type <class 'str'>
lum
Values must be of type <class 'int'>
lumMod
Values must be of type <class 'int'>
lumOff
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
red
Values must be of type <class 'int'>
redMod
Values must be of type <class 'int'>
redOff
Values must be of type <class 'int'>
sat
Values must be of type <class 'int'>
satMod
Values must be of type <class 'int'>
satOff
Values must be of type <class 'int'>
shade
    Values must be of type <class 'int'> tagname = 'sysClr'
tint
Values must be of type <class 'int'>
val
Value must be one of {'infoText', 'inactiveCaptionText', 'btnFace', 'menuText',
'inactiveBorder', 'btnShadow', 'grayText', 'menuBar', 'btnText', 'activeBorder',
'windowFrame','menuHighlight','activeCaption','infoBk','highlightText','captionText',
'gradientActiveCaption','background','appWorkspace','btnHighlight','window','3dLight'
,'scrollBar','hotLight','3dDkShadow','menu','windowText','gradientInactiveCaption'
, 'inactiveCaption', 'highlight'}
class openpyxl.drawing.colors.Transform 基类：openpyxl.descriptors.serialisable.Serialisable
openpyxl.drawing.connector module
class openpyxl.drawing.connector.Connection(id=None, idx=None) 基类：openpyxl.descriptors.serialisable.Serialisable
id
Values must be of type <class 'int'>
idx
Values must be of type <class 'int'>
class openpyxl.drawing.connector.ConnectorLocking(extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
class openpyxl.drawing.connector.ConnectorNonVisual(cNvPr=None, cNvCxnSpPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cNvCxnSpPr
Values must be of type <class 'openpyxl.drawing.connector.NonVisualConnectorProperties'>
cNvPr
Values must be of type <class 'openpyxl.drawing.properties.NonVisualDrawingProps'>
class openpyxl.drawing.connector.ConnectorShape(nvCxnSpPr=None,	spPr=None,
style=None,	macro=None,	fPublished=None)
基类：openpyxl.descriptors.serialisable.Serialisable
fPublished
Values must be of type <class 'bool'>
macro
Values must be of type <class 'str'>
nvCxnSpPr
'openpyxl.drawing.connector.ConnectorNonVisual'>
spPr
'openpyxl.chart.shapes.GraphicalProperties'>
style
    Values must be of type <class 'openpyxl.drawing.geometry.ShapeStyle'> tagname = 'cxnSp'
class openpyxl.drawing.connector.NonVisualConnectorProperties(cxnSpLocks=None,
	stCxn=None,	end-
Cxn=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
cxnSpLocks
Values must be of type <class 'openpyxl.drawing.connector.ConnectorLocking'>
endCxn
Values must be of type <class 'openpyxl.drawing.connector.Connection'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
stCxn
Values must be of type <class 'openpyxl.drawing.connector.Connection'>
class openpyxl.drawing.connector.Shape(macro=None, textlink=None, fPublished=None, fLock-
sText=None, nvSpPr=None, spPr=None, style=None, txBody=None)
基类：openpyxl.descriptors.serialisable.Serialisable
fLocksText
Values must be of type <class 'bool'>
fPublished
Values must be of type <class 'bool'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
macro
Values must be of type <class 'str'>
meta
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
nvSpPr
Values must be of type <class 'openpyxl.drawing.connector.ShapeMeta'>
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
style
Values must be of type <class 'openpyxl.drawing.geometry.ShapeStyle'>
textlink
Values must be of type <class 'str'>
txBody
Values must be of type <class 'openpyxl.chart.text.RichText'>
class openpyxl.drawing.connector.ShapeMeta(cNvPr=None, cNvSpPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cNvPr
Values must be of type <class 'openpyxl.drawing.properties.NonVisualDrawingProps'>
cNvSpPr
    Values must be of type <class 'openpyxl.drawing.properties.NonVisualDrawingShapeProps'> tagname = 'nvSpPr'
openpyxl.drawing.drawing module
class openpyxl.drawing.drawing.Drawing 基类：object
a drawing object - eg container for shapes or charts we assume user specifies dimensions in pixels; units are converted to EMU in the drawing part anchor
count = 0
get_emu_dimensions() return (x, y, w, h) in EMU

注解: Deprecated: Private method used when serialising

height set_dimension(w=0, h=0) width

openpyxl.drawing.effect module
class openpyxl.drawing.effect.AlphaBiLevelEffect(thresh=None) 基类：openpyxl.descriptors.serialisable.Serialisable
thresh
Values must be of type <class 'int'>
class openpyxl.drawing.effect.AlphaCeilingEffect 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.effect.AlphaFloorEffect 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.effect.AlphaInverseEffect 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.effect.AlphaModulateEffect(cont=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cont
         Values must be of type <class 'openpyxl.drawing.effect.EffectContainer'> class openpyxl.drawing.effect.AlphaModulateFixedEffect(amt=None) 基类：openpyxl.descriptors.serialisable.Serialisable
amt
         Values must be of type <class 'int'> class openpyxl.drawing.effect.AlphaReplaceEffect(a=None) 基类：openpyxl.descriptors.serialisable.Serialisable
a
         Values must be of type <class 'int'> class openpyxl.drawing.effect.BiLevelEffect(thresh=None) 基类：openpyxl.descriptors.serialisable.Serialisable
thresh
         Values must be of type <class 'int'> class openpyxl.drawing.effect.BlurEffect(rad=None, grow=None) 基类：openpyxl.descriptors.serialisable.Serialisable
grow
Values must be of type <class 'bool'>
rad
Values must be of type <class 'float'>
class openpyxl.drawing.effect.Color 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.effect.ColorChangeEffect(useA=None, clrFrom=None, clrTo=None) 基类：openpyxl.descriptors.serialisable.Serialisable
clrFrom
Values must be of type <class 'openpyxl.drawing.effect.Color'>
clrTo
Values must be of type <class 'openpyxl.drawing.effect.Color'>
useA
Values must be of type <class 'bool'>
class openpyxl.drawing.effect.ColorReplaceEffect 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.effect.DuotoneEffect 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.effect.EffectContainer(type=None, name=None) 基类：openpyxl.descriptors.serialisable.Serialisable
name
Values must be of type <class 'str'>
type
Value must be one of {'tree', 'sib'}
class openpyxl.drawing.effect.EffectList(blur=None, fillOverlay=None, glow=None, innerShdw=None, outerShdw=None, prstShdw=None, reflection=None, softEdge=None)
基类：openpyxl.descriptors.serialisable.Serialisable
blur
Values must be of type <class 'openpyxl.drawing.effect.BlurEffect'>
fillOverlay
Values must be of type <class 'openpyxl.drawing.effect.FillOverlayEffect'>
glow
Values must be of type <class 'openpyxl.drawing.effect.GlowEffect'>
innerShdw
Values must be of type <class 'openpyxl.drawing.effect.InnerShadowEffect'>
outerShdw
Values must be of type <class 'openpyxl.drawing.effect.OuterShadow'>
prstShdw
Values must be of type <class 'openpyxl.drawing.effect.PresetShadowEffect'>
reflection
Values must be of type <class 'openpyxl.drawing.effect.ReflectionEffect'>
softEdge
Values must be of type <class 'openpyxl.drawing.effect.SoftEdgesEffect'>
class openpyxl.drawing.effect.FillOverlayEffect(blend=None) 基类：openpyxl.descriptors.serialisable.Serialisable
blend
Value must be one of {'darken', 'mult', 'screen', 'lighten', 'over'}
class openpyxl.drawing.effect.GlowEffect(rad=None, **kw) 基类：openpyxl.drawing.colors.ColorChoice
hslClr
Values must be of type <class 'openpyxl.drawing.colors.HSLColor'>
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff'
,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray'
,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen'
,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise',
'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown'
, 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray', 'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
, 'darkOrchid', 'dimGrey'}
rad
Values must be of type <class 'float'>
schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sysClr
Values must be of type <class 'openpyxl.drawing.colors.SystemColor'>
class openpyxl.drawing.effect.GrayscaleEffect 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'grayscl' class openpyxl.drawing.effect.HSLEffect(hue=None, sat=None, lum=None) 基类：openpyxl.descriptors.serialisable.Serialisable
hue
Values must be of type <class 'int'>
lum
Values must be of type <class 'int'>
sat
Values must be of type <class 'int'>
class openpyxl.drawing.effect.InnerShadowEffect(blurRad=None,	dist=None,	dir=None,
**kw)
基类：openpyxl.drawing.colors.ColorChoice
blurRad
Values must be of type <class 'float'>
dir
Values must be of type <class 'int'>
dist
Values must be of type <class 'float'>
hslClr
Values must be of type <class 'openpyxl.drawing.colors.HSLColor'>
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff'
,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray'
,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen'
,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise',
'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown'
, 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray',
'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
, 'darkOrchid', 'dimGrey'}
schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sysClr
Values must be of type <class 'openpyxl.drawing.colors.SystemColor'>
class openpyxl.drawing.effect.LuminanceEffect(bright=0, contrast=0) 基类：openpyxl.descriptors.serialisable.Serialisable
bright
Values must be of type <class 'int'>
contrast
         Values must be of type <class 'int'> tagname = 'lum' class openpyxl.drawing.effect.OuterShadow(blurRad=None, dist=None, dir=None, sx=None,
sy=None, kx=None, ky=None, algn=None, rotWithShape=None, **kw)
基类：openpyxl.drawing.colors.ColorChoice
algn
Value must be one of {'b', 'tr', 'br', 'bl', 'l', 't', 'ctr', 'r', 'tl'}
blurRad
Values must be of type <class 'float'>
dir
Values must be of type <class 'int'>
dist
Values must be of type <class 'float'>
hslClr
Values must be of type <class 'openpyxl.drawing.colors.HSLColor'>
kx
Values must be of type <class 'int'>
ky
Values must be of type <class 'int'>
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff'
,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray'
,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen' ,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise',
'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown'
, 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray',
'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
, 'darkOrchid', 'dimGrey'}
rotWithShape
Values must be of type <class 'bool'>
schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sx
Values must be of type <class 'int'>
sy
Values must be of type <class 'int'>
sysClr
         Values must be of type <class 'openpyxl.drawing.colors.SystemColor'> tagname = 'outerShdw' class openpyxl.drawing.effect.PresetShadowEffect(prst=None, dist=None, dir=None, **kw) 基类：openpyxl.drawing.colors.ColorChoice
dir
Values must be of type <class 'int'>

dist
'float'>
hslClr
'openpyxl.drawing.colors.HSLColor'>
prst
Value must be one of {'shdw10', 'shdw1', 'shdw8', 'shdw13', 'shdw7', 'shdw4',
'shdw11', 'shdw17', 'shdw3', 'shdw5', 'shdw6', 'shdw19', 'shdw14', 'shdw12'
, 'shdw15', 'shdw9', 'shdw20', 'shdw18', 'shdw16', 'shdw2'}
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff'
,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray'
,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen'
,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise',
'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown'
, 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray',
'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
    , 'darkOrchid', 'dimGrey'} schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sysClr
Values must be of type <class 'openpyxl.drawing.colors.SystemColor'>
class openpyxl.drawing.effect.ReflectionEffect(blurRad=None,	stA=None,	stPos=None, endA=None,	endPos=None,	dist=None, dir=None,	fadeDir=None,	sx=None, sy=None, kx=None, ky=None, algn=None,
rotWithShape=None)
基类：openpyxl.descriptors.serialisable.Serialisable
algn
Value must be one of {'b', 'tr', 'br', 'bl', 'l', 't', 'ctr', 'r', 'tl'}
blurRad
Values must be of type <class 'float'>
dir
Values must be of type <class 'int'>
dist
Values must be of type <class 'float'>
endA
Values must be of type <class 'int'>
endPos
Values must be of type <class 'int'>
fadeDir
Values must be of type <class 'int'>
kx
Values must be of type <class 'int'>
ky
Values must be of type <class 'int'>
rotWithShape
Values must be of type <class 'bool'>
stA
Values must be of type <class 'int'>
stPos
'int'>
sx
'int'>
sy
         Values must be of type <class 'int'> class openpyxl.drawing.effect.SoftEdgesEffect(rad=None) 基类：openpyxl.descriptors.serialisable.Serialisable
rad
         Values must be of type <class 'float'> class openpyxl.drawing.effect.TintEffect(hue=0, amt=0) 基类：openpyxl.descriptors.serialisable.Serialisable
amt
Values must be of type <class 'int'>
hue
    Values must be of type <class 'int'> tagname = 'tint'
openpyxl.drawing.fill module
class openpyxl.drawing.fill.Blip(cstate=None,	embed=None,	link=None,	noGrp=None, noSelect=None,	noRot=None,	noChangeAspect=None, noMove=None, noResize=None, noEditPoints=None, noAdjustHandles=None, noChangeArrowheads=None, noChangeShapeType=None,	extLst=None,	alphaBiLevel=None,	alphaCeiling=None,	alphaFloor=None,	alphaInv=None, alphaMod=None,	alphaModFix=None,	alphaRepl=None, biLevel=None, blur=None, clrChange=None, clrRepl=None, duotone=None, fillOverlay=None, grayscl=None, hsl=None, lum=None, tint=None)
基类：openpyxl.descriptors.serialisable.Serialisable
alphaBiLevel
Values must be of type <class 'openpyxl.drawing.effect.AlphaBiLevelEffect'>
alphaCeiling
Values must be of type <class 'openpyxl.drawing.effect.AlphaCeilingEffect'>
alphaFloor
Values must be of type <class 'openpyxl.drawing.effect.AlphaFloorEffect'>

alphaInv
'openpyxl.drawing.effect.AlphaInverseEffect'>
alphaMod
'openpyxl.drawing.effect.AlphaModulateEffect'>
alphaModFix
Values must be of type <class 'openpyxl.drawing.effect.AlphaModulateFixedEffect'>
alphaRepl
Values must be of type <class 'openpyxl.drawing.effect.AlphaReplaceEffect'>
biLevel
Values must be of type <class 'openpyxl.drawing.effect.BiLevelEffect'>
blur
Values must be of type <class 'openpyxl.drawing.effect.BlurEffect'>
clrChange
Values must be of type <class 'openpyxl.drawing.effect.ColorChangeEffect'>
clrRepl
Values must be of type <class 'openpyxl.drawing.effect.ColorReplaceEffect'>
cstate
Value must be one of {'print', 'email', 'screen', 'hqprint'}
duotone
Values must be of type <class 'openpyxl.drawing.effect.DuotoneEffect'>
embed
Values must be of type <class 'str'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fillOverlay
Values must be of type <class 'openpyxl.drawing.effect.FillOverlayEffect'>
grayscl
Values must be of type <class 'openpyxl.drawing.effect.GrayscaleEffect'>
hsl
Values must be of type <class 'openpyxl.drawing.effect.HSLEffect'>
link
Values must be of type <class 'str'>
lum
    Values must be of type <class 'openpyxl.drawing.effect.LuminanceEffect'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' noAdjustHandles
'bool'>
noChangeArrowheads
'bool'>
noChangeAspect
Values must be of type <class 'bool'>
noChangeShapeType
Values must be of type <class 'bool'>
noEditPoints
Values must be of type <class 'bool'>
noGrp
Values must be of type <class 'bool'>
noMove
Values must be of type <class 'bool'>
noResize
Values must be of type <class 'bool'>
noRot
Values must be of type <class 'bool'>
noSelect
    Values must be of type <class 'bool'> tagname = 'blip'
tint
Values must be of type <class 'openpyxl.drawing.effect.TintEffect'>
class openpyxl.drawing.fill.BlipFillProperties(dpi=None,	rotWithShape=None,
	blip=None,	tile=None,
stretch=<openpyxl.drawing.fill.StretchInfoProperties
	object>	Parameters:	fill-
Rect=<openpyxl.drawing.fill.RelativeRect
object>	Parameters:	l=None,	t=None, r=None, b=None, srcRect=None)
基类：openpyxl.descriptors.serialisable.Serialisable
blip
Values must be of type <class 'openpyxl.drawing.fill.Blip'>
dpi
Values must be of type <class 'int'>
rotWithShape
'bool'>
srcRect
'openpyxl.drawing.fill.RelativeRect'>
stretch
    Values must be of type <class 'openpyxl.drawing.fill.StretchInfoProperties'> tagname = 'blipFill'
tile
Values must be of type <class 'openpyxl.drawing.fill.TileInfoProperties'>
class openpyxl.drawing.fill.GradientFillProperties(flip=None,	rotWithShape=None,
	gsLst=(),	lin=None,	path=None,
tileRect=None)
基类：openpyxl.descriptors.serialisable.Serialisable
flip
Value must be one of {'xy', 'y', 'x'}
gsLst
Wrap a sequence in an containing object
lin
Values must be of type <class 'openpyxl.drawing.fill.LinearShadeProperties'>
linear
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
path
Values must be of type <class 'openpyxl.drawing.fill.PathShadeProperties'>
rotWithShape
Values must be of type <class 'bool'>
stop_list
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'gradFill'
tileRect
Values must be of type <class 'openpyxl.drawing.fill.RelativeRect'>
class openpyxl.drawing.fill.GradientStop(pos=None,	scrgbClr=None,	srgbClr=None,
hslClr=None,	sysClr=None,	schemeClr=None, prstClr=None)

基类：openpyxl.descriptors.serialisable.Serialisable
RGB
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
RGBPercent
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
hslClr
    Values must be of type <class 'openpyxl.drawing.colors.HSLColor'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
pos
Values must be of type <class 'float'>
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff'
,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray'
,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen'
,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise',
'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown'
, 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray', 'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
, 'darkOrchid', 'dimGrey'}
schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sysClr
         Values must be of type <class 'openpyxl.drawing.colors.SystemColor'> tagname = 'gs' class openpyxl.drawing.fill.LinearShadeProperties(ang=None, scaled=None) 基类：openpyxl.descriptors.serialisable.Serialisable
ang
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
scaled
         Values must be of type <class 'bool'> tagname = 'lin' class openpyxl.drawing.fill.PathShadeProperties(path=None, fillToRect=None) 基类：openpyxl.descriptors.serialisable.Serialisable
fillToRect
    Values must be of type <class 'openpyxl.drawing.fill.RelativeRect'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
path
         Value must be one of {'rect', 'circle', 'shape'} tagname = 'path' class openpyxl.drawing.fill.PatternFillProperties(prst=None, fgClr=None, bgClr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
background
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
bgClr
Values must be of type <class 'openpyxl.drawing.colors.ColorChoice'>
fgClr
Values must be of type <class 'openpyxl.drawing.colors.ColorChoice'>
foreground
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
preset
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
prst
Value must be one of {'wdDnDiag', 'diagCross', 'weave', 'dashDnDiag', 'smCheck',
'lgGrid', 'sphere', 'pct60', 'vert', 'upDiag', 'cross', 'pct75', 'pct5', 'pct20',
'dkHorz','pct80','dashHorz','dkDnDiag','horz','narVert','divot','lgConfetti',
'dashUpDiag','dkVert','wdUpDiag','diagBrick','narHorz','plaid','smConfetti',
'ltVert','ltUpDiag','horzBrick','wave','ltHorz','smGrid','dotDmnd','pct25'
,'pct30','ltDnDiag','pct50','pct40','dkUpDiag','trellis','pct70','lgCheck'
, 'solidDmnd', 'dashVert', 'zigZag', 'dotGrid', 'dnDiag', 'shingle', 'pct10',
        'openDmnd', 'pct90'} tagname = 'pattFill' class openpyxl.drawing.fill.RelativeRect(l=None, t=None, r=None, b=None) 基类：openpyxl.descriptors.serialisable.Serialisable
b
Values must be of type <class 'float'>
bottom
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
l
Values must be of type <class 'float'>
left
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
r
Values must be of type <class 'float'>
right
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
t
    Values must be of type <class 'float'> tagname = 'rect'
top
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.drawing.fill.SolidColorFillProperties(scrgbClr=None,	srgbClr=None,
hslClr=None, sysClr=None, scheme-
Clr=None, prstClr=None)
基类：openpyxl.descriptors.serialisable.Serialisable
RGB
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
RGBPercent
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
hslClr
Values must be of type <class 'openpyxl.drawing.colors.HSLColor'>
prstClr
Value must be one of {'green','brown','ltSlateGray','darkCyan','lime','dkMagenta'
,'pink','medOrchid','olive','darkSlateBlue','seaShell','gainsboro','whiteSmoke'
,'paleGoldenrod','salmon','lightCoral','white','plum','firebrick','lavender',
'slateBlue','medTurquoise','gray','aqua','midnightBlue','mistyRose','dkRed',
'darkOliveGreen','dkCyan','lightGoldenrodYellow','violet','aliceBlue','chocolate'
, 'darkTurquoise', 'cornsilk', 'springGreen', 'black', 'dkGoldenrod', 'chartreuse',
'moccasin','mediumBlue','limeGreen','orchid','dkBlue','slateGray','peachPuff'
,'dkOrange','medBlue','goldenrod','teal','lightSlateGray','mediumTurquoise',
'mediumAquamarine','aquamarine','darkSlateGrey','crimson','red','darkSlateGray'
,'navy','papayaWhip','indigo','lemonChiffon','ltYellow','dkViolet','paleGreen',
'dkSalmon','deepPink','forestGreen','skyBlue','purple','darkOrange','mediumOrchid'
, 'cadetBlue', 'cornflowerBlue', 'lightSalmon', 'steelBlue', 'lightYellow', 'seaGreen'
,'ltPink','indianRed','deepSkyBlue','lightGray','honeydew','wheat','linen',
'ltSalmon','navajoWhite','darkSalmon','lavenderBlush','ltSkyBlue','mediumSeaGreen'
,'lightSteelBlue','ltGray','rosyBrown','dkKhaki','gold','lightGrey','lightCyan'
,'lightSkyBlue','tomato','floralWhite','orange','snow','darkViolet','sienna',
'ltCyan','darkGray','peru','silver','dkSeaGreen','grey','blueViolet','dkTurquoise', 'ghostWhite','darkGrey','hotPink','blanchedAlmond','medSpringGreen','sandyBrown' , 'azure', 'dkGreen', 'dkSlateGrey', 'mediumPurple', 'maroon', 'ltSteelBlue',
'yellow','turquoise','powderBlue','bisque','lightGreen','lightSeaGreen','beige'
, 'darkGreen', 'darkBlue', 'oldLace', 'ltGreen', 'dkOrchid', 'ltGoldenrodYellow',
'dkGrey','oliveDrab','lightSlateGrey','darkGoldenrod','dodgerBlue','yellowGreen'
, 'cyan', 'medSeaGreen', 'blue', 'mintCream', 'dkSlateGray', 'medAquamarine',
'orangeRed', 'burlyWood', 'greenYellow', 'lawnGreen', 'ivory', 'darkSeaGreen',
'thistle','medVioletRed','ltBlue','ltGrey','antiqueWhite','darkKhaki','fuchsia',
'lightBlue','ltSeaGreen','dkGray','dkOliveGreen','ltCoral','lightPink','dimGray',
'darkRed','royalBlue','tan','paleVioletRed','medSlateBlue','khaki','dkSlateBlue'
, 'magenta', 'mediumSlateBlue', 'mediumSpringGreen', 'slateGrey', 'saddleBrown',
'medPurple','coral','ltSlateGrey','darkMagenta','mediumVioletRed','paleTurquoise'
, 'darkOrchid', 'dimGrey'}
schemeClr
Values must be of type <class 'openpyxl.drawing.colors.SchemeColor'>
scrgbClr
Values must be of type <class 'openpyxl.drawing.colors.RGBPercent'>
srgbClr
Values must be of type <class 'str'>
sysClr
         Values must be of type <class 'openpyxl.drawing.colors.SystemColor'> tagname = 'solidFill' class openpyxl.drawing.fill.StretchInfoProperties(fillRect=<openpyxl.drawing.fill.RelativeRect
object> Parameters: l=None, t=None, r=None, b=None)
基类：openpyxl.descriptors.serialisable.Serialisable
fillRect
         Values must be of type <class 'openpyxl.drawing.fill.RelativeRect'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' tagname = 'stretch' class openpyxl.drawing.fill.TileInfoProperties(tx=None, ty=None, sx=None, sy=None, flip=None, algn=None)
基类：openpyxl.descriptors.serialisable.Serialisable
algn
Value must be one of {'b', 'tr', 'br', 'bl', 'l', 't', 'ctr', 'r', 'tl'}
flip
Value must be one of {'xy', 'y', 'x'}
sx
Values must be of type <class 'int'>
sy
Values must be of type <class 'int'>
tx
Values must be of type <class 'int'>
ty
Values must be of type <class 'int'>
openpyxl.drawing.geometry module
class openpyxl.drawing.geometry.AdjPoint2D(x=None, y=None) 基类：openpyxl.descriptors.serialisable.Serialisable
x
Values must be of type <class 'int'>
y
Values must be of type <class 'int'>
class openpyxl.drawing.geometry.AdjustHandleList 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.drawing.geometry.Backdrop(anchor=None,	norm=None,	up=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
anchor
Values must be of type <class 'openpyxl.drawing.geometry.Point3D'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
norm
Values must be of type <class 'openpyxl.drawing.geometry.Vector3D'>
up
Values must be of type <class 'openpyxl.drawing.geometry.Vector3D'>
class openpyxl.drawing.geometry.Bevel(w=None, h=None, prst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
h
Values must be of type <class 'int'>
prst
Value must be one of {'hardEdge', 'divot', 'riblet', 'slope', 'angle', 'convex', 'coolSlant', 'relaxedInset', 'artDeco', 'cross', 'circle', 'softRound'} tagname = 'bevel'
w
Values must be of type <class 'int'>
class openpyxl.drawing.geometry.Camera(prst=None, fov=None, zoom=None, rot=None) 基类：openpyxl.descriptors.serialisable.Serialisable
fov
Values must be of type <class 'int'>
prst
Value must be one of {'isometricOffAxis2Top','obliqueBottomRight','obliqueTopRight',
'isometricOffAxis1Right', 'legacyObliqueRight', 'perspectiveAbove', 'isometricLeftUp'
 , 'legacyObliqueBottomLeft', 'isometricBottomUp', 'legacyObliqueTopRight', 'perspectiveHeroicLeftFacing', 'isometricOffAxis1Left', 'isometricOffAxis3Bottom',
'legacyPerspectiveBottom', 'perspectiveHeroicRightFacing', 'legacyPerspectiveTopRight'
, 'isometricTopUp', 'legacyPerspectiveBottomLeft', 'perspectiveFront',
'legacyPerspectiveTop','obliqueTop','perspectiveAboveLeftFacing','legacyObliqueFront'
	,	'perspectiveContrastingRightFacing',	'perspectiveHeroicExtremeRightFacing'
, 'legacyPerspectiveTopLeft', 'isometricLeftDown', 'perspectiveRelaxed'
	,	'legacyPerspectiveBottomRight',	'perspectiveHeroicExtremeLeftFacing',
	'legacyObliqueBottomRight',	'isometricTopDown',	'legacyObliqueTop',
'isometricOffAxis1Top','legacyPerspectiveRight','orthographicFront','obliqueBottomLeft'
, 'legacyObliqueLeft', 'isometricOffAxis2Left', 'isometricOffAxis3Left',
'isometricOffAxis2Right', 'obliqueRight', 'isometricRightDown', 'legacyObliqueTopLeft'
, 'obliqueBottom', 'perspectiveContrastingLeftFacing', 'legacyPerspectiveLeft',
'isometricOffAxis4Left','perspectiveLeft','isometricBottomDown','isometricOffAxis4Right'
,'isometricRightUp','obliqueTopLeft','perspectiveRelaxedModerately','perspectiveRight',
'perspectiveAboveRightFacing','legacyPerspectiveFront','perspectiveBelow','obliqueLeft'
, 'legacyObliqueBottom', 'isometricOffAxis4Bottom', 'isometricOffAxis3Right'}
rot
    Values must be of type <class 'openpyxl.drawing.geometry.SphereCoords'> tagname = 'camera'
zoom
Values must be of type <class 'openpyxl.descriptors.excel.Percentage'>
class openpyxl.drawing.geometry.ConnectionSite(ang=None, pos=None) 基类：openpyxl.descriptors.serialisable.Serialisable
ang
Values must be of type <class 'float'>
pos
         Values must be of type <class 'openpyxl.drawing.geometry.AdjPoint2D'> class openpyxl.drawing.geometry.ConnectionSiteList(cxn=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cxn
Values must be of type <class 'openpyxl.drawing.geometry.ConnectionSite'>
class openpyxl.drawing.geometry.CustomGeometry2D(avLst=None,	gdLst=None,	ahLst=None,
cxnLst=None, rect=None, pathLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
ahLst
Values must be of type <class 'openpyxl.drawing.geometry.AdjustHandleList'>
avLst
Values must be of type <class 'openpyxl.drawing.geometry.GeomGuideList'>
cxnLst
Values must be of type <class 'openpyxl.drawing.geometry.ConnectionSiteList'>
gdLst
Values must be of type <class 'openpyxl.drawing.geometry.GeomGuideList'>
pathLst
         Values must be of type <class 'openpyxl.drawing.geometry.Path2DList'> class openpyxl.drawing.geometry.FontReference(idx=None) 基类：openpyxl.descriptors.serialisable.Serialisable
idx
         Value must be one of {'major', 'minor'} class openpyxl.drawing.geometry.GeomGuide(name=None, fmla=None) 基类：openpyxl.descriptors.serialisable.Serialisable
fmla
Values must be of type <class 'str'>
name
         Values must be of type <class 'str'> class openpyxl.drawing.geometry.GeomGuideList(gd=None) 基类：openpyxl.descriptors.serialisable.Serialisable
gd
         Values must be of type <class 'openpyxl.drawing.geometry.GeomGuide'> class openpyxl.drawing.geometry.GeomRect(l=None, t=None, r=None, b=None) 基类：openpyxl.descriptors.serialisable.Serialisable

b
'int'>
l
Values must be of type <class 'int'>
r
Values must be of type <class 'int'>
t
Values must be of type <class 'int'>
class openpyxl.drawing.geometry.GroupTransform2D(rot=0,	flipH=None,	flipV=None,
	off=None,	ext=None,	chOff=None,
chExt=None)
基类：openpyxl.descriptors.serialisable.Serialisable
chExt
Values must be of type <class 'openpyxl.drawing.geometry.PositiveSize2D'>
chOff
Values must be of type <class 'openpyxl.drawing.geometry.Point2D'>
ext
Values must be of type <class 'openpyxl.drawing.geometry.PositiveSize2D'>
flipH
Values must be of type <class 'bool'>
flipV
    Values must be of type <class 'bool'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
off
Values must be of type <class 'openpyxl.drawing.geometry.Point2D'>
rot
         Values must be of type <class 'int'> tagname = 'xfrm' class openpyxl.drawing.geometry.LightRig(rig=None, dir=None, rot=None) 基类：openpyxl.descriptors.serialisable.Serialisable
dir
Value must be one of {'b', 'tr', 'br', 'bl', 'l', 't', 'r', 'tl'}
rig
Value must be one of {'sunset','threePt','legacyNormal1','legacyFlat4','brightRoom'
, 'legacyFlat3', 'flood', 'legacyHarsh3', 'flat', 'legacyHarsh2', 'soft', 'twoPt',
'legacyNormal2', 'freezing', 'legacyFlat1', 'glow', 'legacyHarsh4', 'contrasting',
'harsh', 'balanced', 'sunrise', 'legacyNormal4', 'legacyFlat2', 'chilly', 'morning'
, 'legacyNormal3', 'legacyHarsh1'}
rot
         Values must be of type <class 'openpyxl.drawing.geometry.SphereCoords'> tagname = 'lightRig' class openpyxl.drawing.geometry.Path2D(w=None, h=None, fill=None, stroke=None, extrusionOk=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extrusionOk
Values must be of type <class 'bool'>
fill
Value must be one of {'darkenLess', 'darken', 'lighten', 'lightenLess', 'norm'}
h
Values must be of type <class 'float'>
stroke
Values must be of type <class 'bool'>
w
Values must be of type <class 'float'>
class openpyxl.drawing.geometry.Path2DList(path=None) 基类：openpyxl.descriptors.serialisable.Serialisable
path
Values must be of type <class 'openpyxl.drawing.geometry.Path2D'>
class openpyxl.drawing.geometry.Point2D(x=None, y=None) 基类：openpyxl.descriptors.serialisable.Serialisable namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' tagname = 'off'
x
Values must be of type <class 'int'>
y
Values must be of type <class 'int'>
class openpyxl.drawing.geometry.Point3D(x=None, y=None, z=None) 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'anchor'
x
Values must be of type <class 'int'>
y
'int'>
z
Values must be of type <class 'int'>
class openpyxl.drawing.geometry.PositiveSize2D(cx=None, cy=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cx
Values must be of type <class 'int'>
cy
Values must be of type <class 'int'>
height
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
    Dimensions in EMUs tagname = 'ext'
width
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.drawing.geometry.PresetGeometry2D(prst=None, avLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
avLst
    Values must be of type <class 'openpyxl.drawing.geometry.GeomGuideList'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
prst
Value must be one of {'curvedDownArrow', 'flowChartPunchedTape', 'ellipseRibbon2',
'actionButtonSound','flowChartTerminator','rightArrowCallout','nonIsoscelesTrapezoid',
'bentArrow','snip1Rect','flowChartMagneticDisk','mathDivide','flowChartOnlineStorage'
,'star24','leftUpArrow','round1Rect','curvedConnector3','flowChartInternalStorage',
'homePlate','flowChartDocument','curvedUpArrow','flowChartDisplay','mathNotEqual'
, 'leftArrowCallout', 'gear6', 'callout1', 'corner', 'accentCallout1', 'lineInv',
'actionButtonForwardNext','leftRightCircularArrow','stripedRightArrow','swooshArrow',
'actionButtonReturn','star6','heart','downArrowCallout','borderCallout2','chartStar'
,'flowChartDecision','star8','bracePair','borderCallout3','roundRect','bentUpArrow'
,'upArrow','flowChartManualOperation','donut','leftRightArrowCallout','star5',
'uturnArrow','mathEqual','curvedLeftArrow','actionButtonEnd','wedgeRectCallout',
'flowChartMagneticDrum','leftBracket','flowChartOr','callout3','star4','blockArc', 'trapezoid','plaque','decagon','diagStripe','snip2SameRect','wedgeRoundRectCallout'
, 'moon', 'flowChartManualInput', 'lightningBolt', 'notchedRightArrow', 'octagon',
'accentBorderCallout3','flowChartOffpageConnector','mathMinus','quadArrowCallout' , 'wave', 'leftRightRibbon', 'actionButtonBlank', 'pentagon', 'cube', 'leftBrace',
'rtTriangle', 'cloudCallout', 'flowChartInputOutput', 'star10', 'funnel', 'dodecagon'
, 'bentConnector3', 'line', 'foldedCorner', 'rightArrow', 'snipRoundRect', 'star32'
 , 'smileyFace', 'upDownArrow', 'can', 'round2DiagRect', 'curvedRightArrow', 'snip2DiagRect','noSmoking','callout2','upArrowCallout','actionButtonHome','arc', 'hexagon','halfFrame','wedgeEllipseCallout','rightBracket','accentCallout2','ribbon',
'flowChartSort','chord','actionButtonInformation','flowChartExtract','leftCircularArrow'
, 'quadArrow', 'rect', 'verticalScroll', 'flowChartDelay', 'accentBorderCallout1'
, 'flowChartAlternateProcess', 'star7', 'curvedConnector2', 'flowChartPreparation'
, 'curvedConnector5', 'chevron', 'actionButtonBackPrevious', 'borderCallout1',
'squareTabs','doubleWave','chartPlus','star12','actionButtonDocument','leftArrow'
, 'irregularSeal1', 'circularArrow', 'round2SameRect', 'gear9', 'downArrow',
'cornerTabs','accentCallout3','actionButtonMovie','flowChartOfflineStorage','diamond'
, 'plaqueTabs', 'bevel', 'bentConnector4', 'teardrop', 'leftRightArrow', 'heptagon'
, 'star16', 'bentConnector5', 'flowChartConnector', 'mathMultiply', 'chartX',
'mathPlus','parallelogram','flowChartSummingJunction','ribbon2','irregularSeal2',
'pieWedge','frame','bentConnector2','flowChartMultidocument','leftRightUpArrow',
'straightConnector1','actionButtonBeginning','ellipse','flowChartMagneticTape','cloud'
,'flowChartPredefinedProcess','horizontalScroll','bracketPair','accentBorderCallout2'
, 'curvedConnector4', 'plus', 'flowChartProcess', 'actionButtonHelp', 'rightBrace'
, 'flowChartCollate', 'flowChartPunchedCard', 'flowChartMerge', 'triangle', 'pie',
'upDownArrowCallout', 'ellipseRibbon', 'sun'}
class openpyxl.drawing.geometry.Scene3D(camera=None,	lightRig=None,	backdrop=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
backdrop
Values must be of type <class 'openpyxl.drawing.geometry.Backdrop'>
camera
Values must be of type <class 'openpyxl.drawing.geometry.Camera'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
lightRig
Values must be of type <class 'openpyxl.drawing.geometry.LightRig'>
class openpyxl.drawing.geometry.Shape3D(z=None, extrusionH=None, contourW=None, prstMaterial=None, bevelT=None, bevelB=None, extrusionClr=None, contourClr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
bevelB
'openpyxl.drawing.geometry.Bevel'>
bevelT
Values must be of type <class 'openpyxl.drawing.geometry.Bevel'>
contourClr
Values must be of type <class 'openpyxl.styles.colors.Color'>
contourW
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
extrusionClr
Values must be of type <class 'openpyxl.styles.colors.Color'>
extrusionH
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
prstMaterial
Value must be one of {'matte','legacyMatte','legacyMetal','legacyWireframe','powder'
, 'flat', 'softmetal', 'plastic', 'softEdge', 'clear', 'legacyPlastic', 'warmMatte',
'translucentPowder', 'metal', 'dkEdge'}
z
Values must be of type <class 'openpyxl.descriptors.base.Integer'>
class openpyxl.drawing.geometry.ShapeStyle(lnRef=None,	fillRef=None,	effectRef=None, fontRef=None)
基类：openpyxl.descriptors.serialisable.Serialisable
effectRef
Values must be of type <class 'openpyxl.drawing.geometry.StyleMatrixReference'>
fillRef
Values must be of type <class 'openpyxl.drawing.geometry.StyleMatrixReference'>
fontRef
Values must be of type <class 'openpyxl.drawing.geometry.FontReference'>
lnRef
Values must be of type <class 'openpyxl.drawing.geometry.StyleMatrixReference'>
class openpyxl.drawing.geometry.SphereCoords(lat=None, lon=None, rev=None) 基类：openpyxl.descriptors.serialisable.Serialisable
lat
Values must be of type <class 'int'>

lon
'int'>
rev
         Values must be of type <class 'int'> tagname = 'sphereCoords' class openpyxl.drawing.geometry.StyleMatrixReference(idx=None) 基类：openpyxl.descriptors.serialisable.Serialisable
idx
Values must be of type <class 'int'>
class openpyxl.drawing.geometry.Transform2D(rot=None, flipH=None, flipV=None, off=None, ext=None, chOff=None, chExt=None)
基类：openpyxl.descriptors.serialisable.Serialisable
chExt
Values must be of type <class 'openpyxl.drawing.geometry.PositiveSize2D'>
chOff
Values must be of type <class 'openpyxl.drawing.geometry.Point2D'>
ext
Values must be of type <class 'openpyxl.drawing.geometry.PositiveSize2D'>
flipH
Values must be of type <class 'bool'>
flipV
    Values must be of type <class 'bool'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
off
Values must be of type <class 'openpyxl.drawing.geometry.Point2D'>
rot
         Values must be of type <class 'int'> tagname = 'xfrm' class openpyxl.drawing.geometry.Vector3D(dx=None, dy=None, dz=None) 基类：openpyxl.descriptors.serialisable.Serialisable
dx
Values must be of type <class 'int'>
dy
Values must be of type <class 'int'>
dz
'int'>
tagname = 'vector'
openpyxl.drawing.graphic module
class openpyxl.drawing.graphic.GraphicData(uri='http://schemas.openxmlformats.org/drawingml/2006/chart', chart=None)
基类：openpyxl.descriptors.serialisable.Serialisable
chart
    Values must be of type <class 'openpyxl.drawing.relation.ChartRelation'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' tagname = 'graphicData'
uri
Values must be of type <class 'str'>
class openpyxl.drawing.graphic.GraphicFrame(nvGraphicFramePr=None,	xfrm=None,
graphic=None, macro=None, fPublished=None)
基类：openpyxl.descriptors.serialisable.Serialisable
fPublished
Values must be of type <class 'bool'>
graphic
Values must be of type <class 'openpyxl.drawing.graphic.GraphicObject'>
macro
Values must be of type <class 'str'>
nvGraphicFramePr
    Values must be of type <class 'openpyxl.drawing.graphic.NonVisualGraphicFrame'> tagname = 'graphicFrame'
xfrm
Values must be of type <class 'openpyxl.drawing.xdr.XDRTransform2D'>
class openpyxl.drawing.graphic.GraphicFrameLocking(noGrp=None, noDrilldown=None, noSelect=None,	noChangeAspect=None, noMove=None,	noResize=None,
extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
noChangeAspect
'bool'>
noDrilldown
Values must be of type <class 'bool'>
noGrp
Values must be of type <class 'bool'>
noMove
Values must be of type <class 'bool'>
noResize
Values must be of type <class 'bool'>
noSelect
Values must be of type <class 'bool'>
class openpyxl.drawing.graphic.GraphicObject(graphicData=None) 基类：openpyxl.descriptors.serialisable.Serialisable
graphicData
         Values must be of type <class 'openpyxl.drawing.graphic.GraphicData'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' tagname = 'graphic' class openpyxl.drawing.graphic.GroupShape(nvGrpSpPr=None, grpSpPr=None, pic=None) 基类：openpyxl.descriptors.serialisable.Serialisable
grpSpPr
Values must be of type <class 'openpyxl.drawing.properties.GroupShapeProperties'>
nonVisualProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
nvGrpSpPr
Values must be of type <class 'openpyxl.drawing.properties.NonVisualGroupShape'>
pic
Values must be of type <class 'openpyxl.drawing.picture.PictureFrame'>
visualProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.drawing.graphic.NonVisualGraphicFrame(cNvPr=None,	cNvGraphicFramePr=None)
基类：openpyxl.descriptors.serialisable.Serialisable
cNvGraphicFramePr
'openpyxl.drawing.graphic.NonVisualGraphicFrameProperties'>
cNvPr
         Values must be of type <class 'openpyxl.drawing.properties.NonVisualDrawingProps'> tagname = 'nvGraphicFramePr' class openpyxl.drawing.graphic.NonVisualGraphicFrameProperties(graphicFrameLocks=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
graphicFrameLocks
    Values must be of type <class 'openpyxl.drawing.graphic.GraphicFrameLocking'> tagname = 'cNvGraphicFramePr'
openpyxl.drawing.image module
class openpyxl.drawing.image.Image(img) 基类：object
Image in a spreadsheet anchor = 'A1' path
openpyxl.drawing.line module
class openpyxl.drawing.line.DashStop(d=0, sp=0) 基类：openpyxl.descriptors.serialisable.Serialisable
d
Values must be of type <class 'int'>
length
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
sp
Values must be of type <class 'int'>

space
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
         (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'ds' class openpyxl.drawing.line.DashStopList(ds=None) 基类：openpyxl.descriptors.serialisable.Serialisable
ds
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.drawing.line.LineEndProperties(type=None, w=None, len=None) 基类：openpyxl.descriptors.serialisable.Serialisable
len
Value must be one of {'lg', 'med', 'sm'}
namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' tagname = 'end'
type
Value must be one of {'oval', 'diamond', 'arrow', 'stealth', 'triangle', 'none'}
w
Value must be one of {'lg', 'med', 'sm'}
class openpyxl.drawing.line.LineProperties(w=None, cap=None, cmpd=None, algn=None, noFill=None, solidFill=None, gradFill=None, pattFill=None, prstDash=None, custDash=None, round=None, bevel=None, miter=None, head-
End=None, tailEnd=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
algn
Value must be one of {'ctr', 'in'}
bevel
Values must be of type <class 'bool'>
cap
Value must be one of {'rnd', 'flat', 'sq'}
cmpd
Value must be one of {'tri', 'thinThick', 'sng', 'dbl', 'thickThin'}
custDash
Values must be of type <class 'openpyxl.drawing.line.DashStop'>
dashStyle
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gradFill
Values must be of type <class 'openpyxl.drawing.fill.GradientFillProperties'>
headEnd
Values must be of type <class 'openpyxl.drawing.line.LineEndProperties'>
miter
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
noFill
Values must be of type <class 'bool'>
pattFill
Values must be of type <class 'openpyxl.drawing.fill.PatternFillProperties'>
prstDash
Value must be one of {'dash','dot','lgDashDot','solid','lgDashDotDot','sysDashDotDot'
, 'lgDash', 'dashDot', 'sysDot', 'sysDash', 'sysDashDot'}
round
Values must be of type <class 'bool'>
solidFill
    Values must be of type <class 'openpyxl.drawing.colors.ColorChoice'> tagname = 'ln'
tailEnd
Values must be of type <class 'openpyxl.drawing.line.LineEndProperties'>
w
Values must be of type <class 'float'>
width
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
openpyxl.drawing.picture module
class openpyxl.drawing.picture.NonVisualPictureProperties(preferRelativeResize=None, picLocks=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
picLocks
Values must be of type <class 'openpyxl.drawing.picture.PictureLocking'>
preferRelativeResize
         Values must be of type <class 'bool'> tagname = 'cNvPicPr' class openpyxl.drawing.picture.PictureFrame(macro=None, fPublished=None, nvPicPr=None, blipFill=None, spPr=None, style=None)
基类：openpyxl.descriptors.serialisable.Serialisable
blipFill
Values must be of type <class 'openpyxl.drawing.fill.BlipFillProperties'>
fPublished
Values must be of type <class 'bool'>
graphicalProperties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
macro
Values must be of type <class 'str'>
nvPicPr
Values must be of type <class 'openpyxl.drawing.picture.PictureNonVisual'>
spPr
Values must be of type <class 'openpyxl.chart.shapes.GraphicalProperties'>
style
         Values must be of type <class 'openpyxl.drawing.geometry.ShapeStyle'> tagname = 'pic' class openpyxl.drawing.picture.PictureLocking(noCrop=None, noGrp=None, noSelect=None, noRot=None,	noChangeAspect=None, noMove=None,	noResize=None,	noEditPoints=None,	noAdjustHandles=None, noChangeArrowheads=None,	noChange-
ShapeType=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
    Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' noAdjustHandles
Values must be of type <class 'bool'>
noChangeArrowheads
Values must be of type <class 'bool'>
noChangeAspect
Values must be of type <class 'bool'>
noChangeShapeType
Values must be of type <class 'bool'>
noCrop
Values must be of type <class 'bool'>
noEditPoints
Values must be of type <class 'bool'>
noGrp
Values must be of type <class 'bool'>
noMove
Values must be of type <class 'bool'>
noResize
Values must be of type <class 'bool'>
noRot
Values must be of type <class 'bool'>
noSelect
         Values must be of type <class 'bool'> tagname = 'picLocks' class openpyxl.drawing.picture.PictureNonVisual(cNvPr=None, cNvPicPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cNvPicPr
Values must be of type <class 'openpyxl.drawing.picture.NonVisualPictureProperties'>
cNvPr
    Values must be of type <class 'openpyxl.drawing.properties.NonVisualDrawingProps'> tagname = 'nvPicPr'
openpyxl.drawing.properties module
class openpyxl.drawing.properties.GroupLocking(noGrp=None,	noUngrp=None,	noSelect=None,	noRot=None,	noChangeAspect=None,	noChangeArrowheads=None, noMove=None,	noResize=None,	noEditPoints=None,	noAdjustHandles=None, noChangeShapeType=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
    Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
noAdjustHandles
Values must be of type <class 'bool'>
noChangeArrowheads
Values must be of type <class 'bool'>
noChangeAspect
Values must be of type <class 'bool'>
noChangeShapeType
Values must be of type <class 'bool'>
noEditPoints
Values must be of type <class 'bool'>
noGrp
Values must be of type <class 'bool'>
noMove
Values must be of type <class 'bool'>
noResize
Values must be of type <class 'bool'>
noRot
Values must be of type <class 'bool'>
noSelect
Values must be of type <class 'bool'>
noUngrp
    Values must be of type <class 'bool'> tagname = 'grpSpLocks'
class openpyxl.drawing.properties.GroupShapeProperties(bwMode=None,	xfrm=None, scene3d=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
bwMode
Value must be one of {'gray','hidden','clr','auto','grayWhite','invGray','black'
, 'blackGray', 'white', 'blackWhite', 'ltGray'}
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
scene3d
    Values must be of type <class 'openpyxl.drawing.geometry.Scene3D'> tagname = 'grpSpPr'
xfrm
Values must be of type <class 'openpyxl.drawing.geometry.GroupTransform2D'>
class openpyxl.drawing.properties.NonVisualDrawingProps(id=None,	name=None,	descr=None,	hidden=None,	title=None,	hlinkClick=None, hlinkHover=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
descr
Values must be of type <class 'str'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
hidden
Values must be of type <class 'bool'>
hlinkClick
Values must be of type <class 'openpyxl.drawing.text.Hyperlink'>
hlinkHover
Values must be of type <class 'openpyxl.drawing.text.Hyperlink'>
id
Values must be of type <class 'int'>
name
    Values must be of type <class 'str'> tagname = 'cNvPr'
title
Values must be of type <class 'str'>
class openpyxl.drawing.properties.NonVisualDrawingShapeProps(spLocks=None,
txBox=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
spLocks
    Values must be of type <class 'openpyxl.drawing.properties.GroupLocking'> tagname = 'cNvSpPr'
txBax
Values must be of type <class 'bool'>
class openpyxl.drawing.properties.NonVisualGroupDrawingShapeProps(grpSpLocks=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
grpSpLocks
         Values must be of type <class 'openpyxl.drawing.properties.GroupLocking'> tagname = 'cNvGrpSpPr' class openpyxl.drawing.properties.NonVisualGroupShape(cNvPr=None, cNvGrpSpPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cNvGrpSpPr
Values must be of type <class'openpyxl.drawing.properties.NonVisualGroupDrawingShapeProps'
>
cNvPr
    Values must be of type <class 'openpyxl.drawing.properties.NonVisualDrawingProps'> tagname = 'nvGrpSpPr'
openpyxl.drawing.relation module
class openpyxl.drawing.relation.ChartRelation(id) 基类：openpyxl.descriptors.serialisable.Serialisable
id
    Values must be of type <class 'str'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/chart' tagname = 'chart'
openpyxl.drawing.spreadsheet_drawing module
class openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor(pos=None, ext=None, **kw) 基类：openpyxl.drawing.spreadsheet_drawing._AnchorBase
clientData
Values must be of type <class 'openpyxl.drawing.spreadsheet_drawing.AnchorClientData'>
contentPart
Values must be of type <class 'str'>
cxnSp
Values must be of type <class 'openpyxl.drawing.connector.Shape'>
ext
Values must be of type <class 'openpyxl.drawing.xdr.XDRPositiveSize2D'>
graphicFrame
Values must be of type <class 'openpyxl.drawing.graphic.GraphicFrame'>
grpSp
Values must be of type <class 'openpyxl.drawing.graphic.GroupShape'>
pic
Values must be of type <class 'openpyxl.drawing.picture.PictureFrame'>
pos
Values must be of type <class 'openpyxl.drawing.xdr.XDRPoint2D'>
sp
         Values must be of type <class 'openpyxl.drawing.connector.Shape'> tagname = 'absoluteAnchor' class openpyxl.drawing.spreadsheet_drawing.AnchorClientData(fLocksWithSheet=None,
fPrintsWithSheet=None)
基类：openpyxl.descriptors.serialisable.Serialisable
fLocksWithSheet
Values must be of type <class 'bool'>
fPrintsWithSheet
Values must be of type <class 'bool'>
class openpyxl.drawing.spreadsheet_drawing.AnchorMarker(col=0,	colOff=0,	row=0, rowOff=0)
基类：openpyxl.descriptors.serialisable.Serialisable
col
Values must be of type <class 'int'>
colOff
Values must be of type <class 'int'>
row
Values must be of type <class 'int'>
rowOff
         Values must be of type <class 'int'> tagname = 'marker' class openpyxl.drawing.spreadsheet_drawing.OneCellAnchor(_from=None, ext=None, **kw) 基类：openpyxl.drawing.spreadsheet_drawing._AnchorBase
clientData
Values must be of type <class 'openpyxl.drawing.spreadsheet_drawing.AnchorClientData'>
contentPart
Values must be of type <class 'str'>
cxnSp
Values must be of type <class 'openpyxl.drawing.connector.Shape'>
ext
Values must be of type <class 'openpyxl.drawing.xdr.XDRPositiveSize2D'>
graphicFrame
Values must be of type <class 'openpyxl.drawing.graphic.GraphicFrame'>
grpSp
Values must be of type <class 'openpyxl.drawing.graphic.GroupShape'>
pic
Values must be of type <class 'openpyxl.drawing.picture.PictureFrame'>
sp
    Values must be of type <class 'openpyxl.drawing.connector.Shape'> tagname = 'oneCellAnchor'
class openpyxl.drawing.spreadsheet_drawing.SpreadsheetDrawing(twoCellAnchor=(), oneCel-
lAnchor=(),	absoluteAnchor=())
基类：openpyxl.descriptors.serialisable.Serialisable PartName = '/xl/drawings/drawing{0}.xml'
absoluteAnchor
    A sequence (list or tuple) that may only contain objects of the declared type mime_type = 'application/vnd.openxmlformats-officedocument.drawing+xml' oneCellAnchor
    A sequence (list or tuple) that may only contain objects of the declared type path tagname = 'wsDr'
twoCellAnchor
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor(editAs=None,	_from=None, to=None, **kw)
基类：openpyxl.drawing.spreadsheet_drawing._AnchorBase
clientData
Values must be of type <class 'openpyxl.drawing.spreadsheet_drawing.AnchorClientData'>
contentPart
Values must be of type <class 'str'>
cxnSp
Values must be of type <class 'openpyxl.drawing.connector.Shape'>
editAs
Value must be one of {'absolute', 'oneCell', 'twoCell'}
graphicFrame
Values must be of type <class 'openpyxl.drawing.graphic.GraphicFrame'>
grpSp
Values must be of type <class 'openpyxl.drawing.graphic.GroupShape'>
pic
Values must be of type <class 'openpyxl.drawing.picture.PictureFrame'>
sp
    Values must be of type <class 'openpyxl.drawing.connector.Shape'> tagname = 'twoCellAnchor'
to
Values must be of type <class 'openpyxl.drawing.spreadsheet_drawing.AnchorMarker'>
openpyxl.drawing.text module
class openpyxl.drawing.text.AutonumberBullet(type=None, startAt=None) 基类：openpyxl.descriptors.serialisable.Serialisable
startAt
Values must be of type <class 'int'>
type
	Value	must	be	one	of	{'arabic2Minus', 'ea1ChsPeriod', 'alphaLcParenBoth',
'circleNumWdBlackPlain', 'hindiNumPeriod', 'ea1JpnKorPeriod', 'alphaUcParenBoth',
'arabic1Minus','arabicParenR','hindiAlpha1Period','alphaLcParenR','romanUcPeriod',
'alphaLcPeriod','arabicPeriod','hebrew2Minus','hindiNumParenR','romanLcParenBoth'
, 'ea1JpnChsDbPeriod', 'circleNumWdWhitePlain', 'arabicPlain', 'thaiAlphaParenR'
, 'arabicParenBoth', 'thaiNumParenBoth', 'romanUcParenBoth', 'arabicDbPeriod',
'ea1ChsPlain','thaiNumParenR','ea1ChtPeriod','thaiAlphaParenBoth','thaiAlphaPeriod'
, 'romanUcParenR', 'hindiAlphaPeriod', 'alphaUcParenR', 'romanLcParenR',
'romanLcPeriod', 'ea1ChtPlain', 'ea1JpnKorPlain', 'thaiNumPeriod', 'arabicDbPlain'
, 'alphaUcPeriod', 'circleNumDbPlain'}
class openpyxl.drawing.text.CharacterProperties(kumimoji=None,	lang=None,	altLang=None, sz=None, b=None, i=None, u=None,	strike=None,	kern=None, cap=None,	spc=None,	normalizeH=None, baseline=None, noProof=None, dirty=None,	err=None,	smtClean=None, smtId=None,	bmk=None,	ln=None, highlight=None,	latin=None,	ea=None, cs=None,	sym=None,	hlinkClick=None, hlinkMouseOver=None,	rtl=None, extLst=None, noFill=None, solidFill=None, gradFill=None,	blipFill=None,	pattFill=None, grpFill=None, effectLst=None, effectDag=None, uLnTx=None, uLn=None, uFillTx=None, uFill=None)
基类：openpyxl.descriptors.serialisable.Serialisable
altLang
Values must be of type <class 'str'>
b
Values must be of type <class 'bool'>
baseline
Values must be of type <class 'int'>
blipFill
Values must be of type <class 'openpyxl.drawing.fill.BlipFillProperties'>
bmk
Values must be of type <class 'str'>
cap
Value must be one of {'small', 'all'}

cs
'openpyxl.drawing.text.Font'>
dirty
'bool'>
ea
Values must be of type <class 'openpyxl.drawing.text.Font'>
effectDag
Values must be of type <class 'openpyxl.drawing.effect.EffectContainer'>
effectLst
Values must be of type <class 'openpyxl.drawing.effect.EffectList'>
err
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gradFill
Values must be of type <class 'openpyxl.drawing.fill.GradientFillProperties'>
grpFill
Values must be of type <class 'bool'>
highlight
Values must be of type <class 'openpyxl.styles.colors.Color'>
hlinkClick
Values must be of type <class 'openpyxl.drawing.text.Hyperlink'>
hlinkMouseOver
Values must be of type <class 'openpyxl.drawing.text.Hyperlink'>
i
Values must be of type <class 'bool'>
kern
Values must be of type <class 'int'>
kumimoji
Values must be of type <class 'bool'>
lang
Values must be of type <class 'str'>
latin
Values must be of type <class 'openpyxl.drawing.text.Font'>
ln
'openpyxl.drawing.line.LineProperties'>
namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
noFill
Values must be of type <class 'bool'>
noProof
Values must be of type <class 'bool'>
normalizeH
Values must be of type <class 'bool'>
pattFill
Values must be of type <class 'openpyxl.drawing.fill.PatternFillProperties'>
rtl
Values must be of type <class 'bool'>
smtClean
Values must be of type <class 'bool'>
smtId
Values must be of type <class 'int'>
solidFill
Values must be of type <class 'openpyxl.drawing.colors.ColorChoice'>
spc
Values must be of type <class 'int'>
strike
Value must be one of {'sngStrike', 'dblStrike', 'noStrike'}
sym
Values must be of type <class 'openpyxl.drawing.text.Font'>
sz
    Values must be of type <class 'float'> tagname = 'defRPr'
u
Value must be one of {'heavy', 'dotDotDashHeavy', 'dash', 'dotted', 'dotDash'
, 'dotDotDash', 'sng', 'dashLong', 'dotDashHeavy', 'dottedHeavy', 'words',
'dashLongHeavy', 'wavy', 'wavyDbl', 'wavyHeavy', 'dashHeavy', 'dbl'}
uFill
Values must be of type <class 'bool'>
uFillTx
'bool'>
uLn
'openpyxl.drawing.line.LineProperties'>
uLnTx
         Values must be of type <class 'bool'> class openpyxl.drawing.text.EmbeddedWAVAudioFile(name=None) 基类：openpyxl.descriptors.serialisable.Serialisable
name
Values must be of type <class 'str'>
class openpyxl.drawing.text.Font(typeface=None,	panose=None,	pitchFamily=None, charset=None)
基类：openpyxl.descriptors.serialisable.Serialisable
charset
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' panose
pitchFamily
    Values must be of type <class 'float'> tagname = 'latin'
typeface
         Values must be of type <class 'str'> class openpyxl.drawing.text.GeomGuide(name=None, fmla=None) 基类：openpyxl.descriptors.serialisable.Serialisable
fmla
Values must be of type <class 'str'>
name
         Values must be of type <class 'str'> class openpyxl.drawing.text.GeomGuideList(gd=None) 基类：openpyxl.descriptors.serialisable.Serialisable
gd
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.drawing.text.Hyperlink(invalidUrl=None,	action=None,	tgtFrame=None,
tooltip=None,	history=None,	highlightClick=None, endSnd=None, snd=None, extLst=None, id=None)
基类：openpyxl.descriptors.serialisable.Serialisable

action
'str'>
endSnd
'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
highlightClick
Values must be of type <class 'bool'>
history
Values must be of type <class 'bool'>
id
Values must be of type <class 'str'>
invalidUrl
    Values must be of type <class 'str'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
snd
    Values must be of type <class 'openpyxl.drawing.text.EmbeddedWAVAudioFile'> tagname = 'hlinkClick'
tgtFrame
Values must be of type <class 'str'>
tooltip
         Values must be of type <class 'str'> class openpyxl.drawing.text.LineBreak(rPr=None) 基类：openpyxl.descriptors.serialisable.Serialisable namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
rPr
Values must be of type <class 'openpyxl.drawing.text.CharacterProperties'>
tagname = 'br'class openpyxl.drawing.text.ListStyle(defPPr=None,lvl1pPr=None,lvl2pPr=None,lvl3pPr=None,lvl4pPr=None,lvl5pPr=None,lvl6pPr=None,lvl7pPr=None,lvl8pPr=None,lvl9pPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
defPPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
extLst
'openpyxl.descriptors.excel.ExtensionList'>
lvl1pPr
'openpyxl.drawing.text.ParagraphProperties'>
lvl2pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl3pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl4pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl5pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl6pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl7pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl8pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
lvl9pPr
         Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' tagname = 'lstStyle' class openpyxl.drawing.text.Paragraph(pPr=None, endParaRPr=None, r=None, br=None, fld=None)
基类：openpyxl.descriptors.serialisable.Serialisable
br
Values must be of type <class 'openpyxl.drawing.text.LineBreak'>
endParaRPr
Values must be of type <class 'openpyxl.drawing.text.CharacterProperties'>
fld
    Values must be of type <class 'openpyxl.drawing.text.TextField'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
properties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
r
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'p'
text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.drawing.text.ParagraphProperties(marL=None, marR=None, lvl=None, indent=None,	algn=None,	defTabSz=None, rtl=None, eaLnBrk=None, fontAlgn=None, latinLnBrk=None,	hangingPunct=None, lnSpc=None,	spcBef=None,	spcAft=None,	tabLst=None,	defRPr=None, extLst=None,	buClrTx=None,	buClr=None, buSzTx=None, buSzPct=None, buSzPts=None,	buFontTx=None,	buFont=None,	buNone=None,	buAutoNum=None,	buChar=None,
buBlip=None)
基类：openpyxl.descriptors.serialisable.Serialisable
algn
Value must be one of {'dist', 'thaiDist', 'l', 'ctr', 'r', 'just', 'justLow'}
buAutoNum
Values must be of type <class 'bool'>
buBlip
Values must be of type <class 'openpyxl.drawing.fill.Blip'>
buChar
Values must be of type <class 'str'>
buClr
Values must be of type <class 'openpyxl.styles.colors.Color'>
buClrTx
Values must be of type <class 'bool'>
buFont
Values must be of type <class 'openpyxl.drawing.text.Font'>

buFontTx
Values must be of type <class 'bool'>
buNone
Values must be of type <class 'bool'>
buSzPct
Values must be of type <class 'int'>
buSzPts
Values must be of type <class 'int'>
buSzTx
Values must be of type <class 'bool'>
defRPr
Values must be of type <class 'openpyxl.drawing.text.CharacterProperties'>
defTabSz
Values must be of type <class 'int'>
eaLnBrk
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fontAlgn
Value must be one of {'base', 'b', 't', 'ctr', 'auto'}
hangingPunct
Values must be of type <class 'bool'>
indent
Values must be of type <class 'int'>
latinLnBrk
Values must be of type <class 'bool'>
lnSpc
Values must be of type <class 'openpyxl.drawing.text.Spacing'>
lvl
Values must be of type <class 'int'>
marL
Values must be of type <class 'int'>
marR
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main' rtl
Values must be of type <class 'bool'>
spcAft
Values must be of type <class 'openpyxl.drawing.text.Spacing'>
spcBef
Values must be of type <class 'openpyxl.drawing.text.Spacing'>
tabLst
         Values must be of type <class 'openpyxl.drawing.text.TabStopList'> tagname = 'pPr' class openpyxl.drawing.text.PresetTextShape(prst=None, avLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
avLst
Values must be of type <class 'openpyxl.drawing.text.GeomGuideList'>
prst
Values must be of type <openpyxl.descriptors.base.Set object at 0x7f3966b4e9e8>
class openpyxl.drawing.text.RegularTextRun(rPr=None, t=") 基类：openpyxl.descriptors.serialisable.Serialisable namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
properties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
rPr
Values must be of type <class 'openpyxl.drawing.text.CharacterProperties'>
t
    Values must be of type <class 'str'> tagname = 'r'
value
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.drawing.text.RichTextProperties(rot=None,	spcFirstLastPara=None,	vertOverflow=None,	horzOverflow=None, vert=None,	wrap=None,	lIns=None, tIns=None, rIns=None, bIns=None, numCol=None,	spcCol=None,	rtlCol=None, fromWordArt=None,	anchor=None, anchorCtr=None,	forceAA=None, upright=None,	compatLnSpc=None, prstTxWarp=None,	scene3d=None, extLst=None,	noAutofit=None,	normAutofit=None, spAutoFit=None, flatTx=None)
基类：openpyxl.descriptors.serialisable.Serialisable
anchor
Value must be one of {'b', 'dist', 't', 'ctr', 'just'}
anchorCtr
Values must be of type <class 'bool'>
bIns
Values must be of type <class 'int'>
compatLnSpc
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
flatTx
Values must be of type <class 'int'>
forceAA
Values must be of type <class 'bool'>
fromWordArt
Values must be of type <class 'bool'>
horzOverflow
Value must be one of {'clip', 'overflow'}
lIns
    Values must be of type <class 'int'> namespace = 'http://schemas.openxmlformats.org/drawingml/2006/main'
noAutofit
Values must be of type <class 'bool'>
normAutofit
Values must be of type <class 'bool'>
numCol
Values must be of type <class 'int'>
prstTxWarp
Values must be of type <class 'openpyxl.drawing.text.PresetTextShape'>
rIns
Values must be of type <class 'int'>
rot
Values must be of type <class 'int'>
rtlCol
Values must be of type <class 'bool'>
scene3d
Values must be of type <class 'openpyxl.drawing.geometry.Scene3D'>
spAutoFit
Values must be of type <class 'bool'>
spcCol
Values must be of type <class 'int'>
spcFirstLastPara
Values must be of type <class 'bool'>
tIns
    Values must be of type <class 'int'> tagname = 'bodyPr'
upright
Values must be of type <class 'bool'>
vert
Value must be one of {'wordArtVertRtl','horz','mongolianVert','wordArtVert','vert'
, 'vert270', 'eaVert'}
vertOverflow
Value must be one of {'clip', 'ellipsis', 'overflow'}
wrap
Value must be one of {'square', 'none'}
class openpyxl.drawing.text.Spacing(spcPct=None, spcPts=None) 基类：openpyxl.descriptors.serialisable.Serialisable
spcPct
Values must be of type <class 'int'>
spcPts
         Values must be of type <class 'int'> class openpyxl.drawing.text.TabStop(pos=None, algn=None) 基类：openpyxl.descriptors.serialisable.Serialisable
algn
Values must be of type <openpyxl.descriptors.base.Set object at 0x7f3966b46828>
pos
         Values must be of type <class 'openpyxl.descriptors.base.Integer'> class openpyxl.drawing.text.TabStopList(tab=None) 基类：openpyxl.descriptors.serialisable.Serialisable
tab
         Values must be of type <class 'openpyxl.drawing.text.TabStop'> class openpyxl.drawing.text.TextField(id=None, type=None, rPr=None, pPr=None, t=None) 基类：openpyxl.descriptors.serialisable.Serialisable
id
Values must be of type <class 'str'>
pPr
Values must be of type <class 'openpyxl.drawing.text.ParagraphProperties'>
rPr
Values must be of type <class 'openpyxl.drawing.text.CharacterProperties'>
t
Values must be of type <class 'str'>
type
Values must be of type <class 'str'>
class openpyxl.drawing.text.TextNormalAutofit(fontScale=None, lnSpcReduction=None) 基类：openpyxl.descriptors.serialisable.Serialisable
fontScale
Values must be of type <class 'int'>
lnSpcReduction
Values must be of type <class 'int'>
openpyxl.drawing.xdr module
Spreadsheet Drawing has some copies of Drawing ML elements class openpyxl.drawing.xdr.XDRPoint2D(x=None, y=None) 基类：openpyxl.drawing.geometry.Point2D
namespace = None
x
Values must be of type <class 'int'>
y
         Values must be of type <class 'int'> class openpyxl.drawing.xdr.XDRPositiveSize2D(cx=None, cy=None) 基类：openpyxl.drawing.geometry.PositiveSize2D
cx
Values must be of type <class 'int'>
cy
         Values must be of type <class 'int'> namespace = None class openpyxl.drawing.xdr.XDRTransform2D(rot=None, flipH=None, flipV=None, off=None, ext=None, chOff=None, chExt=None)
基类：openpyxl.drawing.geometry.Transform2D
chExt
Values must be of type <class 'openpyxl.drawing.geometry.PositiveSize2D'>
chOff
Values must be of type <class 'openpyxl.drawing.geometry.Point2D'>
ext
Values must be of type <class 'openpyxl.drawing.geometry.PositiveSize2D'>
flipH
Values must be of type <class 'bool'>
flipV
    Values must be of type <class 'bool'> namespace = None
off
Values must be of type <class 'openpyxl.drawing.geometry.Point2D'>
rot
Values must be of type <class 'int'>
openpyxl.formatting package
Submodules
openpyxl.formatting.formatting module
class openpyxl.formatting.formatting.ConditionalFormatting(sqref=(),	pivot=None, cfRule=(), extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
cells
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
cfRule
A sequence (list or tuple) that may only contain objects of the declared type
pivot
Values must be of type <class 'bool'>
rules
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
sqref
         Values must be of type <class 'openpyxl.worksheet.cell_range.MultiCellRange'> tagname = 'conditionalFormatting' class openpyxl.formatting.formatting.ConditionalFormattingList 基类：object
Conditional formatting rules.
add(range_string, cfRule)
Add a rule such as ColorScaleRule, FormulaRule or CellIsRule The priority will be added automatically.
openpyxl.formatting.rule module
openpyxl.formatting.rule.CellIsRule(operator=None,	formula=None,	stopIfTrue=None, font=None, border=None, fill=None) Conditional formatting rule based on cell contents. class openpyxl.formatting.rule.ColorScale(cfvo=None, color=None) 基类：openpyxl.formatting.rule.RuleType
color
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'colorScale' openpyxl.formatting.rule.ColorScaleRule(start_type=None, start_value=None, start_color=None, mid_type=None, mid_value=None, mid_color=None, end_type=None, end_value=None,
                                     end_color=None) Backwards compatibility
class openpyxl.formatting.rule.DataBar(minLength=None,	maxLength=None,	show-
Value=None, cfvo=None, color=None)
基类：openpyxl.formatting.rule.RuleType
color
Values must be of type <class 'openpyxl.styles.colors.Color'>
maxLength
Values must be of type <class 'int'>
minLength
Values must be of type <class 'int'>
showValue
         Values must be of type <class 'bool'> tagname = 'dataBar' openpyxl.formatting.rule.DataBarRule(start_type=None, start_value=None, end_type=None,
end_value=None, color=None, showValue=None, minLength=None, maxLength=None)
class openpyxl.formatting.rule.FormatObject(type, val=None, gte=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
gte
    Values must be of type <class 'bool'> tagname = 'cfvo'
type
Value must be one of {'percent', 'min', 'max', 'num', 'percentile', 'formula'}
val
Values must be of type <class 'float'>
openpyxl.formatting.rule.FormulaRule(formula=None,	stopIfTrue=None,	font=None,	border=None, fill=None) Conditional formatting with custom differential style
class openpyxl.formatting.rule.IconSet(iconSet=None, showValue=None, percent=None, reverse=None, cfvo=None)
基类：openpyxl.formatting.rule.RuleType
iconSet
Value must be one of {'5Quarters','4RedToBlack','5Arrows','3ArrowsGray','4ArrowsGray'
, '3Arrows', '5ArrowsGray', '3Symbols', '4TrafficLights', '3Signs', '5Rating',
'3TrafficLights2', '3Flags', '3TrafficLights1', '4Rating', '4Arrows', '3Symbols2'}
percent
Values must be of type <class 'bool'>
reverse
Values must be of type <class 'bool'>
showValue
         Values must be of type <class 'bool'> tagname = 'iconSet' openpyxl.formatting.rule.IconSetRule(icon_style=None,	type=None,	values=None,	show-
                                  Value=None, percent=None, reverse=None) Convenience function for creating icon set rules
class openpyxl.formatting.rule.Rule(type, dxfId=None, priority=0, stopIfTrue=None, aboveAverage=None,	percent=None,	bottom=None,	operator=None,	text=None,	timePeriod=None,	rank=None,
stdDev=None,equalAverage=None,formula=(),colorScale=None,dataBar=None,iconSet=None,extLst=None, dxf=None)
基类：openpyxl.descriptors.serialisable.Serialisable
aboveAverage
Values must be of type <class 'bool'>
bottom
Values must be of type <class 'bool'>
colorScale
Values must be of type <class 'openpyxl.formatting.rule.ColorScale'>
dataBar
Values must be of type <class 'openpyxl.formatting.rule.DataBar'>
dxf
Values must be of type <class 'openpyxl.styles.differential.DifferentialStyle'>
dxfId
Values must be of type <class 'int'>
equalAverage
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
formula
A sequence (list or tuple) that may only contain objects of the declared type
iconSet
Values must be of type <class 'openpyxl.formatting.rule.IconSet'>
operator
Value must be one of {'lessThanOrEqual', 'greaterThan', 'notEqual', 'notContains'
, 'notBetween', 'containsText', 'between', 'equal', 'lessThan', 'endsWith',
'greaterThanOrEqual', 'beginsWith'}
percent
Values must be of type <class 'bool'>
priority
Values must be of type <class 'int'>
rank
Values must be of type <class 'int'>
stdDev
Values must be of type <class 'int'>
stopIfTrue
    Values must be of type <class 'bool'> tagname = 'cfRule'
text
Values must be of type <class 'str'>
timePeriod
Value must be one of {'tomorrow', 'lastMonth', 'nextWeek', 'today', 'last7Days',
'lastWeek', 'thisWeek', 'yesterday', 'thisMonth', 'nextMonth'}
type
Value must be one of {'aboveAverage','notContainsText','duplicateValues','expression'
, 'colorScale', 'timePeriod', 'uniqueValues', 'containsText', 'notContainsErrors',
'top10', 'cellIs', 'containsErrors', 'dataBar', 'containsBlanks', 'notContainsBlanks'
, 'endsWith', 'iconSet', 'beginsWith'}
class openpyxl.formatting.rule.RuleType 基类：openpyxl.descriptors.serialisable.Serialisable
cfvo
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.formatting.rule.ValueDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.Float
Expected type depends upon type attribue of parent :-(
Most values should be numeric BUT they can also be cell references
openpyxl.formula package Submodules
openpyxl.formula.tokenizer module
This module contains a tokenizer for Excel formulae.
The tokenizer is based on the Javascript tokenizer found at http://ewbi.blogs.com/develops/2004/12/excel_ formula_p.html written by Eric Bachtal class openpyxl.formula.tokenizer.Token(value, type_, subtype=") 基类：object
A token in an Excel formula.
Tokens have three attributes:
• value: The string value parsed that led to this token
• type: A string identifying the type of token
• subtype: A string identifying subtype of the token (optional, and defaults to "")
ARG = 'ARG'
ARRAY = 'ARRAY'
CLOSE = 'CLOSE'
ERROR = 'ERROR'
FUNC = 'FUNC'
LITERAL = 'LITERAL'
LOGICAL = 'LOGICAL'
NUMBER = 'NUMBER'
OPEN = 'OPEN'
OPERAND = 'OPERAND'
OP_IN = 'OPERATOR-INFIX'
OP_POST = 'OPERATOR-POSTFIX'
OP_PRE = 'OPERATOR-PREFIX'
PAREN = 'PAREN'
RANGE = 'RANGE'
ROW = 'ROW'
SEP = 'SEP'
TEXT = 'TEXT' WSPACE = 'WHITE-SPACE'
get_closer()
Return a closing token that matches this token's type.
classmethod make_operand(value) Create an operand token. classmethod make_separator(value)
Create a separator token
classmethod make_subexp(value, func=False) Create a subexpression token.
         value: The value of the token func: If True, force the token to be of type FUNC subtype type value class openpyxl.formula.tokenizer.Tokenizer(formula) 基类：object
A tokenizer for Excel worksheet formulae.
Converts a str string representing an Excel formula (in A1 notation) into a sequence of Token objects. formula: The str string to tokenize
Tokenizer defines a method ._parse() to parse the formula into tokens, which can then be accessed through the .items attribute.
ERROR_CODES = ('#NULL!', '#DIV/0!', '#VALUE!', '#REF!', '#NAME?', '#NUM!', '#N/A', '#GETTING_DATA')
SN_RE = re.compile('^[1-9](\\.[0-9]+)?[Ee]$')
STRING_REGEXES = {'"': re.compile('"(?:[^"]*"")*[^"]*"(?!")'), "'": re.compile("'(?:[^']*'')*[^']*
TOKEN_ENDERS = ',;}) +-*/^&=><%' WSPACE_RE = re.compile('[ \\n]+') assert_empty_token(can_follow=())
Ensure that there's no token currently being parsed.
Or if there is a token being parsed, it must end with a character in can_follow.
If there are unconsumed token contents, it means we hit an unexpected token transition. In this case, we raise a TokenizerError
check_scientific_notation()
Consumes a + or - character if part of a number in sci. notation.
Returns True if the character was consumed and self.offset was updated, False otherwise.
render()
Convert the parsed tokens back to a string.
save_token()
If there's a token being parsed, add it to the item list.
exception openpyxl.formula.tokenizer.TokenizerError 基类：Exception
Base class for all Tokenizer errors.
openpyxl.formula.translate module
This module contains code to translate formulae across cells in a worksheet.
The idea is that if A1 has formula"=B1+C1", then translating it to cell A2 results in formula"=B2+C2" . The algorithm relies on the formula tokenizer to identify the parts of the formula that need to change.
class openpyxl.formula.translate.Translator(formula, origin) 基类：object
Modifies a formula so that it can be translated from one cell to another.
formula: The str string to translate. Must include the leading '=' character.
origin: The cell address (in A1 notation) where this formula was defined (excluding the worksheet name).
CELL_REF_RE = re.compile('(\\$?[A-Za-z]{1,3})(\\$?[1-9][0-9]{0,6})$')
COL_RANGE_RE = re.compile('(\\$?[A-Za-z]{1,3}):(\\$?[A-Za-z]{1,3})$') ROW_RANGE_RE = re.compile('(\\$?[1-9][0-9]{0,6}):(\\$?[1-9][0-9]{0,6})$')
get_tokens()
Returns a list with the tokens comprising the formula.
static strip_ws_name(range_str)
    Splits out the worksheet reference, if any, from a range reference. static translate_col(col_str, cdelta)
Translate a range col-snippet by the given number of columns
translate_formula(dest=None, row_delta=0, col_delta=0)
Convert the formula into A1 notation, or as row and column coordinates
The formula is converted into A1 assuming it is assigned to the cell whose address is dest (no worksheet name).
classmethod translate_range(range_str, rdelta, cdelta) Translate an A1-style range reference to the destination cell.
    rdelta: the row offset to add to the range cdelta: the column offset to add to the range range_str: an A1-style reference to a range. Potentially includes the worksheet reference. Could also be a named range. static translate_row(row_str, rdelta)
Translate a range row-snippet by the given number of rows.
exception openpyxl.formula.translate.TranslatorError 基类：Exception
Raised when a formula can't be translated across cells.
This error arises when a formula's references would be translated outside the worksheet's bounds on the top or left. Excel represents these situations with a #REF! literal error. E.g., if the formula at B2 is'=A1', attempting to translate the formula to B1 raises TranslatorError, since there's no cell above A1. Similarly, translating the same formula from B2 to A2 raises TranslatorError, since there' s no cell to the left of A1.
openpyxl.packaging package
Stuff related to Office OpenXML packaging: relationships, archive, content types.
Submodules
openpyxl.packaging.core module
class openpyxl.packaging.core.DocumentProperties(category=None,	contentStatus=None,	keywords=None,	lastModifiedBy=None,	lastPrinted=None, revision=None,	version=None,
created=datetime.datetime(2020,
9,	17,	7,	20,	40,	57644),	creator='openpyxl',	description=None, identifier=None,	language=None,	modified=datetime.datetime(2020, 9, 17, 7, 20,
40, 57654), subject=None, title=None)
基类：openpyxl.descriptors.serialisable.Serialisable
High-level properties of the document. Defined in ECMA-376 Par2 Annex D
category
Values must be of type <class 'str'>
contentStatus
Values must be of type <class 'str'>
created
Values must be of type <class 'datetime.datetime'>
creator
Values must be of type <class 'str'>
description
Values must be of type <class 'str'>
identifier
Values must be of type <class 'str'>
keywords
Values must be of type <class 'str'>
language
Values must be of type <class 'str'>
lastModifiedBy
Values must be of type <class 'str'>
lastPrinted
Values must be of type <class 'datetime.datetime'>
last_modified_by
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
modified
    Values must be of type <class 'datetime.datetime'> namespace = 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties'
revision
Values must be of type <class 'str'>
subject
    Values must be of type <class 'str'> tagname = 'coreProperties'
title
Values must be of type <class 'str'>
version
Values must be of type <class 'str'>
class openpyxl.packaging.core.NestedDateTime(*args, **kw) 基类：openpyxl.descriptors.base.DateTime, openpyxl.descriptors.nested.NestedText expected_type datetime.datetime的别名 to_tree(tagname=None, value=None, namespace=None) class openpyxl.packaging.core.QualifiedDateTime(*args, **kw) 基类：openpyxl.packaging.core.NestedDateTime
In certain situations Excel will complain if the additional type attribute isn't set to_tree(tagname=None, value=None, namespace=None)
openpyxl.packaging.core.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.packaging.extended module
class openpyxl.packaging.extended.DigSigBlob 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.packaging.extended.ExtendedProperties(Template=None,	Manager=None, Company=None,	Pages=None,
	Words=None,	Characters=None,
PresentationFormat=None,
	Lines=None,	Paragraphs=None,
	Slides=None,	Notes=None,	Total-
	Time=None,	HiddenSlides=None,
MMClips=None,	ScaleCrop=None, HeadingPairs=None,	TitlesOfParts=None,	LinksUpToDate=None,	CharactersWith-
	Spaces=None,	SharedDoc=None,
HyperlinkBase=None, HLinks=None, HyperlinksChanged=None,
DigSig=None, Application='Microsoft Excel', AppVersion=None, DocSecurity=None)
基类：openpyxl.descriptors.serialisable.Serialisable
See 22.2
Most of this is irrelevant
AppVersion
Values must be of type <class 'str'>
Application
Values must be of type <class 'str'>
Characters
Values must be of type <class 'int'>
CharactersWithSpaces
Values must be of type <class 'int'>
Company
Values must be of type <class 'str'>
DigSig
Values must be of type <class 'openpyxl.packaging.extended.DigSigBlob'>
DocSecurity
Values must be of type <class 'int'>
HLinks
Values must be of type <class 'openpyxl.packaging.extended.VectorVariant'>
HeadingPairs
Values must be of type <class 'openpyxl.packaging.extended.VectorVariant'>
HiddenSlides
Values must be of type <class 'int'>
HyperlinkBase
Values must be of type <class 'str'>
HyperlinksChanged
Values must be of type <class 'bool'>
Lines
Values must be of type <class 'int'>
LinksUpToDate
Values must be of type <class 'bool'>
MMClips
Values must be of type <class 'int'>
Manager
Values must be of type <class 'str'>
Notes
Values must be of type <class 'int'>
Pages
Values must be of type <class 'int'>
Paragraphs
Values must be of type <class 'int'>
PresentationFormat
Values must be of type <class 'str'>
ScaleCrop
Values must be of type <class 'bool'>
SharedDoc
Values must be of type <class 'bool'>
Slides
Values must be of type <class 'int'>
Template
Values must be of type <class 'str'>
TitlesOfParts
Values must be of type <class 'openpyxl.packaging.extended.VectorLpstr'>
TotalTime
Values must be of type <class 'int'>
Words
         Values must be of type <class 'int'> tagname = 'Properties' to_tree() class openpyxl.packaging.extended.VectorLpstr 基类：openpyxl.descriptors.serialisable.Serialisable class openpyxl.packaging.extended.VectorVariant 基类：openpyxl.descriptors.serialisable.Serialisable openpyxl.packaging.extended.get_version()
openpyxl.packaging.interface module
class openpyxl.packaging.interface.ISerialisableFile 基类：abc.ABC
Interface for Serialisable classes that represent files in the archive
id
Object id making it unique
openpyxl.packaging.manifest module
File manifest class openpyxl.packaging.manifest.FileExtension(Extension, ContentType) 基类：openpyxl.descriptors.serialisable.Serialisable
ContentType
Values must be of type <class 'str'>
Extension
         Values must be of type <class 'str'> tagname = 'Default' class openpyxl.packaging.manifest.Manifest(Default=(), Override=()) 基类：openpyxl.descriptors.serialisable.Serialisable
Default
A sequence (list or tuple) that may only contain objects of the declared type
Override
A sequence (list or tuple) that may only contain objects of the declared type append(obj)
Add content object to the package manifest # needs a contract⋯
extensions
    Map content types to file extensions Skip parts without extensions filenames find(content_type)
Find specific content-type
findall(content_type)
    Find all elements of a specific content-type path = '[Content_Types].xml' tagname = 'Types'
to_tree()
Custom serialisation method to allow setting a default namespace
class openpyxl.packaging.manifest.Override(PartName, ContentType) 基类：openpyxl.descriptors.serialisable.Serialisable
ContentType
Values must be of type <class 'str'>
PartName
         Values must be of type <class 'str'> tagname = 'Override' openpyxl.packaging.manifest.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.packaging.relationship module
class openpyxl.packaging.relationship.Relationship(Id=None, Type=None, type=None, Target=None, TargetMode=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Represents many kinds of relationships.
Id
Values must be of type <class 'str'>
Target
Values must be of type <class 'str'>
TargetMode
Values must be of type <class 'str'>
Type
Values must be of type <class 'str'>
id
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'Relationship'
target
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.packaging.relationship.RelationshipList(Relationship=()) 基类：openpyxl.descriptors.serialisable.Serialisable
Relationship
    A sequence (list or tuple) that may only contain objects of the declared type append(value) find(content_type)
    Find relationships by content-type NB. these content-types namespaced objects and different to the MIME-types in the package manifest :-( tagname = 'Relationships' to_tree()
openpyxl.packaging.relationship.get_dependents(archive, filename) Normalise dependency file paths to absolute ones
Relative paths are relative to parent object
openpyxl.packaging.relationship.get_rel(archive, deps, id=None, cls=None)
Get related object based on id or rel_type
openpyxl.packaging.relationship.get_rels_path(path)
Convert relative path to absolutes that can be loaded from a zip archive. The path to be passed in is that of containing object (workbook, worksheet, etc.) openpyxl.packaging.relationship.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.packaging.workbook module
class openpyxl.packaging.workbook.ChildSheet(name=None,	sheetId=None,	state='visible', id=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Represents a reference to a worksheet or chartsheet in workbook.xml
It contains the title, order and state but only an indirect reference to the objects themselves.
id
Values must be of type <class 'str'>
name
Values must be of type <class 'str'>
sheetId
Values must be of type <class 'int'>
state
         Value must be one of {'visible', 'hidden', 'veryHidden'} tagname = 'sheet' class openpyxl.packaging.workbook.FileRecoveryProperties(autoRecover=None,	crashSave=None,	dataExtract-
Load=None, repairLoad=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoRecover
Values must be of type <class 'bool'>
crashSave
Values must be of type <class 'bool'>
dataExtractLoad
Values must be of type <class 'bool'>
repairLoad
Values must be of type <class 'bool'>
     tagname = 'fileRecoveryPr' class openpyxl.packaging.workbook.PivotCache(cacheId=None, id=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cacheId
Values must be of type <class 'int'>
id
         Values must be of type <class 'str'> tagname = 'pivotCache' class openpyxl.packaging.workbook.WorkbookPackage(conformance=None,	fileVersion=None, fileSharing=None,	workbookPr=None, workbookProtection=None, bookViews=(), sheets=(), functionGroups=None, externalReferences=(),	definedNames=None, calcPr=None,	oleSize=None,	customWorkbookViews=(),	pivotCaches=(), smartTagPr=None,	smartTagTypes=None,	webPublishing=None, fileRecoveryPr=None,	webPublishObjects=None,	extLst=None,	Ignorable=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Represent the workbook file in the archive
Ignorable
    Values must be of type <class 'str'> active
bookViews
Wrap a sequence in an containing object
calcPr
Values must be of type <class 'openpyxl.workbook.properties.CalcProperties'>
conformance
Value must be one of {'transitional', 'strict'}
customWorkbookViews
Wrap a sequence in an containing object
definedNames
Values must be of type <class 'openpyxl.workbook.defined_name.DefinedNameList'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
externalReferences
Wrap a sequence in an containing object
fileRecoveryPr
Values must be of type <class 'openpyxl.packaging.workbook.FileRecoveryProperties'>
fileSharing
Values must be of type <class 'openpyxl.workbook.protection.FileSharing'>
fileVersion
Values must be of type <class 'openpyxl.workbook.properties.FileVersion'>
functionGroups
Values must be of type <class 'openpyxl.workbook.function_group.FunctionGroupList'>
oleSize
Values must be of type <class 'str'>
pivotCaches
Wrap a sequence in an containing object
pivot_caches
Get PivotCache objects
properties
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
sheets
Wrap a sequence in an containing object
smartTagPr
Values must be of type <class 'openpyxl.workbook.smart_tags.SmartTagProperties'>
smartTagTypes
    Values must be of type <class 'openpyxl.workbook.smart_tags.SmartTagList'> tagname = 'workbook' to_tree()
webPublishObjects
Values must be of type <class 'openpyxl.workbook.web.WebPublishObjectList'>
webPublishing
Values must be of type <class 'openpyxl.workbook.web.WebPublishing'>
workbookPr
Values must be of type <class 'openpyxl.workbook.properties.WorkbookProperties'>
workbookProtection
Values must be of type <class 'openpyxl.workbook.protection.WorkbookProtection'> openpyxl.pivot package Submodules
openpyxl.pivot.cache module
class openpyxl.pivot.cache.CacheDefinition(invalid=None,	saveData=None,	refreshOnLoad=None,	optimizeMemory=None,	enableRefresh=None,	refreshedBy=None,	refreshedDate=None, refreshedDateIso=None, backgroundQuery=None,	missingItemsLimit=None,	createdVersion=None,	refreshedVersion=None,	minRefreshableVersion=None,	recordCount=None, upgradeOnRefresh=None, tupleCache=None, supportSubquery=None, supportAdvancedDrill=None, cacheSource=None, cacheFields=(), cacheHierarchies=(), kpis=(), calculatedItems=(), calculatedMembers=(), dimensions=(), measureGroups=(), maps=(), extLst=None, id=None)
基类：openpyxl.descriptors.serialisable.Serialisable
backgroundQuery
Values must be of type <class 'bool'>
cacheFields
Wrap a sequence in an containing object
cacheHierarchies
Wrap a sequence in an containing object
cacheSource
Values must be of type <class 'openpyxl.pivot.cache.CacheSource'>
calculatedItems
Wrap a sequence in an containing object
calculatedMembers
Wrap a sequence in an containing object
createdVersion
Values must be of type <class 'int'>
dimensions
Wrap a sequence in an containing object
enableRefresh
Values must be of type <class 'bool'>

extLst
'openpyxl.descriptors.excel.ExtensionList'>
id
Values must be of type <class 'str'>
invalid
Values must be of type <class 'bool'>
kpis
Wrap a sequence in an containing object
maps
Wrap a sequence in an containing object
measureGroups
    Wrap a sequence in an containing object mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml'
minRefreshableVersion
Values must be of type <class 'int'>
missingItemsLimit
Values must be of type <class 'int'>
optimizeMemory
    Values must be of type <class 'bool'> path
recordCount
    Values must be of type <class 'int'> records = None
refreshOnLoad
Values must be of type <class 'bool'>
refreshedBy
Values must be of type <class 'str'>
refreshedDate
Values must be of type <class 'float'>
refreshedDateIso
Values must be of type <class 'datetime.datetime'>
refreshedVersion
    Values must be of type <class 'int'> rel_type = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/pivotCacheDefinitio saveData
'bool'>
supportAdvancedDrill
Values must be of type <class 'bool'>
supportSubquery
    Values must be of type <class 'bool'> tagname = 'pivotCacheDefinition' to_tree()
tupleCache
Values must be of type <class 'openpyxl.pivot.cache.TupleCache'>
upgradeOnRefresh
Values must be of type <class 'bool'>
class openpyxl.pivot.cache.CacheField(sharedItems=None, fieldGroup=None, mpMap=None, extLst=None, name=None, caption=None, propertyName=None, serverField=None, uniqueList=True, numFmtId=None, formula=None, sqlType=0, hierarchy=0, level=0, databaseField=True, mapping-
Count=None, memberPropertyField=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
databaseField
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fieldGroup
Values must be of type <class 'openpyxl.pivot.cache.FieldGroup'>
formula
Values must be of type <class 'str'>
hierarchy
Values must be of type <class 'int'>
level
Values must be of type <class 'int'>
mappingCount
Values must be of type <class 'int'>
memberPropertyField
'bool'>
mpMap
Values must be of type <class 'int'>
name
Values must be of type <class 'str'>
numFmtId
Values must be of type <class 'int'>
propertyName
Values must be of type <class 'str'>
serverField
Values must be of type <class 'bool'>
sharedItems
Values must be of type <class 'openpyxl.pivot.cache.SharedItems'>
sqlType
    Values must be of type <class 'int'> tagname = 'cacheField'
uniqueList
Values must be of type <class 'bool'>
class openpyxl.pivot.cache.CacheHierarchy(uniqueName=",	caption=None,	measure=None, set=None,	parentSet=None,	iconSet=0,	attribute=None,	time=None,	keyAttribute=None, defaultMemberUniqueName=None,	allUniqueName=None, allCaption=None, dimensionUniqueName=None,	displayFolder=None,	measureGroup=None,	measures=None,	count=None, oneField=None,	memberValueDatatype=None, unbalanced=None,	unbalancedGroup=None,	hidden=None, fieldsUsage=None, groupLevels=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
allCaption
Values must be of type <class 'str'>
allUniqueName
Values must be of type <class 'str'>
attribute
Values must be of type <class 'bool'>
caption
'str'>
count
Values must be of type <class 'int'>
defaultMemberUniqueName
Values must be of type <class 'str'>
dimensionUniqueName
Values must be of type <class 'str'>
displayFolder
Values must be of type <class 'str'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fieldsUsage
Values must be of type <class 'openpyxl.pivot.cache.FieldsUsage'>
groupLevels
Values must be of type <class 'openpyxl.pivot.cache.GroupLevels'>
hidden
Values must be of type <class 'bool'>
iconSet
Values must be of type <class 'int'>
keyAttribute
Values must be of type <class 'bool'>
measure
Values must be of type <class 'bool'>
measureGroup
Values must be of type <class 'str'>
measures
Values must be of type <class 'bool'>
memberValueDatatype
Values must be of type <class 'int'>
oneField
Values must be of type <class 'bool'>
parentSet
Values must be of type <class 'int'>
set
'bool'>
tagname = 'cacheHierarchy'
time
Values must be of type <class 'bool'>
unbalanced
Values must be of type <class 'bool'>
unbalancedGroup
Values must be of type <class 'bool'>
uniqueName
Values must be of type <class 'str'>
class openpyxl.pivot.cache.CacheSource(type=None,	connectionId=None,	worksheet-
Source=None, consolidation=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
connectionId
Values must be of type <class 'int'>
consolidation
Values must be of type <class 'openpyxl.pivot.cache.Consolidation'>
extLst
    Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> tagname = 'cacheSource'
type
Value must be one of {'consolidation', 'scenario', 'worksheet', 'external'}
worksheetSource
Values must be of type <class 'openpyxl.pivot.cache.WorksheetSource'>
class openpyxl.pivot.cache.CalculatedItem(field=None,	formula=None,	pivotArea=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
field
Values must be of type <class 'int'>
formula
Values must be of type <class 'str'>
pivotArea
Values must be of type <class 'openpyxl.pivot.table.PivotArea'>

     tagname = 'calculatedItem' class openpyxl.pivot.cache.CalculatedMember(name=None, mdx=None, memberName=None,
	hierarchy=None,	parent=None,	solve-
Order=None, set=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
hierarchy
Values must be of type <class 'str'>
mdx
Values must be of type <class 'str'>
memberName
Values must be of type <class 'str'>
name
Values must be of type <class 'str'>
parent
Values must be of type <class 'str'>
set
Values must be of type <class 'bool'>
solveOrder
         Values must be of type <class 'int'> tagname = 'calculatedMember' class openpyxl.pivot.cache.Consolidation(autoPage=None, pages=(), rangeSets=()) 基类：openpyxl.descriptors.serialisable.Serialisable
autoPage
Values must be of type <class 'bool'>
pages
Wrap a sequence in an containing object
rangeSets
         Wrap a sequence in an containing object tagname = 'consolidation' class openpyxl.pivot.cache.DiscretePr(count=None, x=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
tagname = 'discretePr'
x
Values must be of type <class 'int'>
class openpyxl.pivot.cache.FieldGroup(par=None,	base=None,	rangePr=None,	discretePr=None, groupItems=None)
基类：openpyxl.descriptors.serialisable.Serialisable
base
Values must be of type <class 'int'>
discretePr
Values must be of type <class 'openpyxl.pivot.cache.DiscretePr'>
groupItems
Values must be of type <class 'openpyxl.pivot.cache.GroupItems'>
par
Values must be of type <class 'int'>
rangePr
         Values must be of type <class 'openpyxl.pivot.cache.RangePr'> tagname = 'fieldGroup' class openpyxl.pivot.cache.FieldUsage(x=None) 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'fieldUsage'
x
Values must be of type <class 'int'>
class openpyxl.pivot.cache.FieldsUsage(count=None, fieldUsage=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
fieldUsage
         Values must be of type <class 'openpyxl.pivot.cache.FieldUsage'> class openpyxl.pivot.cache.GroupItems(count=None, m=(), n=(), b=(), e=(), s=(), d=()) 基类：openpyxl.descriptors.serialisable.Serialisable
b
    A sequence (list or tuple) that may only contain objects of the declared type count
d
A sequence (list or tuple) that may only contain objects of the declared type
e
A sequence (list or tuple) that may only contain objects of the declared type
m
A sequence (list or tuple) that may only contain objects of the declared type
n
A sequence (list or tuple) that may only contain objects of the declared type
s
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'groupItems' class openpyxl.pivot.cache.GroupLevel(uniqueName=None, caption=None, user=None, custom-
RollUp=None, groups=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
customRollUp
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
groups
    Values must be of type <class 'openpyxl.pivot.cache.Groups'> tagname = 'groupLevel'
uniqueName
Values must be of type <class 'str'>
user
         Values must be of type <class 'bool'> class openpyxl.pivot.cache.GroupLevels(count=None, groupLevel=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
groupLevel
         Values must be of type <class 'openpyxl.pivot.cache.GroupLevel'> class openpyxl.pivot.cache.GroupMember(uniqueName=None, group=None) 基类：openpyxl.descriptors.serialisable.Serialisable
group
Values must be of type <class 'bool'>
tagname = 'groupMember'
uniqueName
         Values must be of type <class 'str'> class openpyxl.pivot.cache.GroupMembers(count=None, groupMember=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
groupMember
         Values must be of type <class 'openpyxl.pivot.cache.GroupMember'> class openpyxl.pivot.cache.Groups(count=None, group=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
group
         Values must be of type <class 'openpyxl.pivot.cache.LevelGroup'> tagname = 'groups' class openpyxl.pivot.cache.LevelGroup(name=None,	uniqueName=None,	caption=None,
uniqueParent=None, id=None, groupMembers=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
groupMembers
Values must be of type <class 'openpyxl.pivot.cache.GroupMembers'>
id
Values must be of type <class 'int'>
name
    Values must be of type <class 'str'> tagname = 'levelGroup'
uniqueName
Values must be of type <class 'str'>
uniqueParent
         Values must be of type <class 'str'> class openpyxl.pivot.cache.MeasureDimensionMap(measureGroup=None, dimension=None) 基类：openpyxl.descriptors.serialisable.Serialisable

dimension
measureGroup
'int'>
     tagname = 'map' class openpyxl.pivot.cache.MeasureGroup(name=None, caption=None) 基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
name
         Values must be of type <class 'str'> tagname = 'measureGroup' class openpyxl.pivot.cache.OLAPSet(count=None, maxRank=None, setDefinition=None, sortType=None, queryFailed=None, tpls=None, sortByTuple=None)
基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
maxRank
Values must be of type <class 'int'>
queryFailed
Values must be of type <class 'bool'>
setDefinition
Values must be of type <class 'str'>
sortByTuple
Values must be of type <class 'openpyxl.pivot.fields.TupleList'>
sortType
Value must be one of {'ascending','descendingAlpha','descending','descendingNatural'
    , 'ascendingAlpha', 'ascendingNatural'} tagname = 'set'
tpls
Values must be of type <class 'openpyxl.pivot.fields.TupleList'>
class openpyxl.pivot.cache.OLAPSets(count=None, set=None) 基类：openpyxl.descriptors.serialisable.Serialisable count
set
'openpyxl.pivot.cache.OLAPSet'>
class openpyxl.pivot.cache.PCDKPI(uniqueName=None,	caption=None,	displayFolder=None, measureGroup=None,	parent=None,	value=None, goal=None,	status=None,	trend=None,	weight=None, time=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
displayFolder
Values must be of type <class 'str'>
goal
Values must be of type <class 'str'>
measureGroup
Values must be of type <class 'str'>
parent
Values must be of type <class 'str'>
status
    Values must be of type <class 'str'> tagname = 'pCDKPI'
time
Values must be of type <class 'str'>
trend
Values must be of type <class 'str'>
uniqueName
Values must be of type <class 'str'>
value
Values must be of type <class 'str'>
weight
Values must be of type <class 'str'>
class openpyxl.pivot.cache.PCDSDTCEntries(count=None,	m=None,	n=None,	e=None, s=None)
基类：openpyxl.descriptors.serialisable.Serialisable
count
e
'openpyxl.pivot.fields.Error'>
m
Values must be of type <class 'openpyxl.pivot.fields.Missing'>
n
Values must be of type <class 'openpyxl.pivot.fields.Number'>
s
         Values must be of type <class 'openpyxl.pivot.fields.Text'> tagname = 'pCDSDTCEntries' class openpyxl.pivot.cache.Page(count=None, pageItem=None) 基类：openpyxl.descriptors.serialisable.Serialisable count
pageItem
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'PCDSCPage' class openpyxl.pivot.cache.PageItem(name=None) 基类：openpyxl.descriptors.serialisable.Serialisable
name
         Values must be of type <class 'str'> tagname = 'pageItem' class openpyxl.pivot.cache.PivotDimension(measure=None, name=None, uniqueName=None, caption=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
measure
Values must be of type <class 'bool'>
name
    Values must be of type <class 'str'> tagname = 'dimension'
uniqueName
Values must be of type <class 'str'>

class openpyxl.pivot.cache.Query(mdx=None, tpls=None) 基类：openpyxl.descriptors.serialisable.Serialisable
mdx
    Values must be of type <class 'str'> tagname = 'query'
tpls
Values must be of type <class 'openpyxl.pivot.fields.TupleList'>
class openpyxl.pivot.cache.QueryCache(count=None, query=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
query
         Values must be of type <class 'openpyxl.pivot.cache.Query'> tagname = 'queryCache' class openpyxl.pivot.cache.RangePr(autoStart=True, autoEnd=True, groupBy=<class 'range'>,
startNum=None, endNum=None, startDate=None, end-
Date=None, groupInterval=1)
基类：openpyxl.descriptors.serialisable.Serialisable
autoEnd
Values must be of type <class 'bool'>
autoStart
Values must be of type <class 'bool'>
endDate
Values must be of type <class 'datetime.datetime'>
endNum
Values must be of type <class 'float'>
groupBy
Value must be one of {'hours', 'seconds', 'years', 'minutes', 'range', 'months',
'days', 'quarters'}
groupInterval
Values must be of type <class 'float'>
startDate
Values must be of type <class 'datetime.datetime'>
startNum
Values must be of type <class 'float'>
     tagname = 'rangePr' class openpyxl.pivot.cache.RangeSet(i1=None,	i2=None,	i3=None,	i4=None,	ref=None, name=None, sheet=None)
基类：openpyxl.descriptors.serialisable.Serialisable
i1
Values must be of type <class 'int'>
i2
Values must be of type <class 'int'>
i3
Values must be of type <class 'int'>
i4
Values must be of type <class 'int'>
name
Values must be of type <class 'str'>
ref
Values must be of type <class 'str'>
sheet
         Values must be of type <class 'str'> tagname = 'rangeSet' class openpyxl.pivot.cache.ServerFormat(culture=None, format=None) 基类：openpyxl.descriptors.serialisable.Serialisable
culture
Values must be of type <class 'str'>
format
         Values must be of type <class 'str'> tagname = 'serverFormat' class openpyxl.pivot.cache.ServerFormatList(count=None, serverFormat=None) 基类：openpyxl.descriptors.serialisable.Serialisable count
serverFormat
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'serverFormats'
class openpyxl.pivot.cache.SharedItems(_fields=(),	containsSemiMixedTypes=None,	containsNonDate=None,	containsDate=None,	containsString=None,	containsBlank=None,	containsMixedTypes=None,	containsNumber=None,	containsInteger=None, minValue=None, maxValue=None, minDate=None, maxDate=None, count=None, long-
Text=None)
基类：openpyxl.descriptors.serialisable.Serialisable
b
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
containsBlank
Values must be of type <class 'bool'>
containsDate
Values must be of type <class 'bool'>
containsInteger
Values must be of type <class 'bool'>
containsMixedTypes
Values must be of type <class 'bool'>
containsNonDate
Values must be of type <class 'bool'>
containsNumber
Values must be of type <class 'bool'>
containsSemiMixedTypes
Values must be of type <class 'bool'>
containsString
    Values must be of type <class 'bool'> count
d
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
e
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
longText
Values must be of type <class 'bool'>
m
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
maxDate
Values must be of type <class 'datetime.datetime'>
maxValue
Values must be of type <class 'float'>
minDate
Values must be of type <class 'datetime.datetime'>
minValue
Values must be of type <class 'float'>
n
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
s
Allow a multisequence to be built up from parts
         Excluded from the instance __elements__ or __attrs__ as is effectively an Alias tagname = 'sharedItems' class openpyxl.pivot.cache.TupleCache(entries=None, sets=None, queryCache=None, server-
Formats=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
entries
Values must be of type <class 'openpyxl.pivot.cache.PCDSDTCEntries'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
queryCache
Values must be of type <class 'openpyxl.pivot.cache.QueryCache'>
serverFormats
Values must be of type <class 'openpyxl.pivot.cache.ServerFormatList'>
sets
         Values must be of type <class 'openpyxl.pivot.cache.OLAPSets'> tagname = 'tupleCache' class openpyxl.pivot.cache.WorksheetSource(ref=None, name=None, sheet=None) 基类：openpyxl.descriptors.serialisable.Serialisable

name
'str'>
ref
'str'>
sheet
         Values must be of type <class 'str'> tagname = 'worksheetSource' openpyxl.pivot.cache.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.pivot.fields module
class openpyxl.pivot.fields.Boolean(x=(), v=None, u=None, f=None, c=None, cp=None) 基类：openpyxl.descriptors.serialisable.Serialisable
c
Values must be of type <class 'str'>
cp
Values must be of type <class 'int'>
f
    Values must be of type <class 'bool'> tagname = 'b'
u
Values must be of type <class 'bool'>
v
Values must be of type <class 'bool'>
x
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.pivot.fields.DateTimeField(x=(),	v=None,	u=None,	f=None,	c=None, cp=None)
基类：openpyxl.descriptors.serialisable.Serialisable
c
'str'>
cp
'int'>
f
    Values must be of type <class 'bool'> tagname = 'd'
u
Values must be of type <class 'bool'>
v
Values must be of type <class 'datetime.datetime'>
x
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.pivot.fields.Error(tpls=None,	x=(),	v=None,	u=None,	f=None,	c=None,
	cp=None,	_in=None,	bc=None,	fc=None,	i=None,
un=None, st=None, b=None)
基类：openpyxl.descriptors.serialisable.Serialisable
b
    Values must be of type <class 'bool'> bc
c
Values must be of type <class 'str'>
cp
Values must be of type <class 'int'>
f
    Values must be of type <class 'bool'> fc
i
Values must be of type <class 'bool'>
st
    Values must be of type <class 'bool'> tagname = 'e'
tpls
Values must be of type <class 'openpyxl.pivot.fields.TupleList'>
u
'bool'>
un
'bool'>
v
Values must be of type <class 'str'>
x
         A sequence (list or tuple) that may only contain objects of the declared type class openpyxl.pivot.fields.Index(v=0) 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'x'
v
Values must be of type <class 'int'>
class openpyxl.pivot.fields.Missing(tpls=(), x=(), u=None, f=None, c=None, cp=None, _in=None, bc=None, fc=None, i=None, un=None,
st=None, b=None)
基类：openpyxl.descriptors.serialisable.Serialisable
b
    Values must be of type <class 'bool'> bc
c
Values must be of type <class 'str'>
cp
Values must be of type <class 'int'>
f
    Values must be of type <class 'bool'> fc
i
Values must be of type <class 'bool'>
st
    Values must be of type <class 'bool'> tagname = 'm'
tpls
A sequence (list or tuple) that may only contain objects of the declared type
u
'bool'>
un
'bool'>
x
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.pivot.fields.Number(tpls=(),	x=(),	v=None,	u=None,	f=None,	c=None,
	cp=None,	_in=None,	bc=None,	fc=None,	i=None,
un=None, st=None, b=None)
基类：openpyxl.descriptors.serialisable.Serialisable
b
    Values must be of type <class 'bool'> bc
c
Values must be of type <class 'str'>
cp
Values must be of type <class 'int'>
f
    Values must be of type <class 'bool'> fc
i
Values must be of type <class 'bool'>
st
    Values must be of type <class 'bool'> tagname = 'n'
tpls
A sequence (list or tuple) that may only contain objects of the declared type
u
Values must be of type <class 'bool'>
un
Values must be of type <class 'bool'>
v
Values must be of type <class 'float'>
x
A sequence (list or tuple) that may only contain objects of the declared type

class openpyxl.pivot.fields.Text(tpls=(), x=(), v=None, u=None, f=None, c=None, cp=None, _in=None, bc=None, fc=None, i=None, un=None, st=None, b=None)
基类：openpyxl.descriptors.serialisable.Serialisable
b
    Values must be of type <class 'bool'> bc
c
Values must be of type <class 'str'>
cp
Values must be of type <class 'int'>
f
    Values must be of type <class 'bool'> fc
i
Values must be of type <class 'bool'>
st
    Values must be of type <class 'bool'> tagname = 's'
tpls
A sequence (list or tuple) that may only contain objects of the declared type
u
Values must be of type <class 'bool'>
un
Values must be of type <class 'bool'>
v
Values must be of type <class 'str'>
x
         A sequence (list or tuple) that may only contain objects of the declared type class openpyxl.pivot.fields.Tuple(fld=None, hier=None, item=None) 基类：openpyxl.descriptors.serialisable.Serialisable
fld
Values must be of type <class 'int'>
hier
Values must be of type <class 'int'>
item
'int'>
class openpyxl.pivot.fields.TupleList(c=None, tpl=None) 基类：openpyxl.descriptors.serialisable.Serialisable
c
Values must be of type <class 'int'>
tpl
Values must be of type <class 'openpyxl.pivot.fields.Tuple'>
openpyxl.pivot.record module
class openpyxl.pivot.record.Record(_fields=(), m=None, n=None, b=None, e=None, s=None, d=None, x=None)
基类：openpyxl.descriptors.serialisable.Serialisable
b
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
d
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
e
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
m
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
n
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
s
Allow a multisequence to be built up from parts
    Excluded from the instance __elements__ or __attrs__ as is effectively an Alias tagname = 'r'
x
Allow a multisequence to be built up from parts
Excluded from the instance __elements__ or __attrs__ as is effectively an Alias
class openpyxl.pivot.record.RecordList(count=None, r=(), extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable count
extLst
    Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml' path
r
         A sequence (list or tuple) that may only contain objects of the declared type rel_type = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/pivotCacheRecords' tagname = 'pivotCacheRecords' to_tree() openpyxl.pivot.record.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
     Returns an (optionally) encoded string containing the XML data. openpyxl.pivot.table module
class openpyxl.pivot.table.AutoSortScope(pivotArea=None) 基类：openpyxl.descriptors.serialisable.Serialisable
pivotArea
Values must be of type <class 'openpyxl.pivot.table.PivotArea'>
class openpyxl.pivot.table.ChartFormat(chart=None,	format=None,	series=None,	pivotArea=None)
基类：openpyxl.descriptors.serialisable.Serialisable
chart
Values must be of type <class 'int'>
format
Values must be of type <class 'int'>
pivotArea
'openpyxl.pivot.table.PivotArea'>
series
         Values must be of type <class 'bool'> tagname = 'chartFormat' class openpyxl.pivot.table.ColHierarchiesUsage(count=None, colHierarchyUsage=()) 基类：openpyxl.descriptors.serialisable.Serialisable
colHierarchyUsage
         A sequence (list or tuple) that may only contain objects of the declared type count tagname = 'colHierarchiesUsage' class openpyxl.pivot.table.ConditionalFormat(scope=None, type=None, priority=None, pivotAreas=(), extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
pivotAreas
Wrap a sequence in an containing object
priority
Values must be of type <class 'int'>
scope
    Value must be one of {'selection', 'field', 'data'} tagname = 'conditionalFormat'
type
Value must be one of {'column', 'row', 'all'}
class openpyxl.pivot.table.DataField(name=None,	fld=None,	subtotal='sum',	showDataAs='normal',	baseField=-1,	baseItem=1048832, numFmtId=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
baseField
Values must be of type <class 'int'>
baseItem
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>

fld
'int'>
name
Values must be of type <class 'str'>
numFmtId
Values must be of type <class 'int'>
showDataAs
Value must be one of {'percent', 'difference', 'runTotal', 'percentOfRow', 'index',
'percentOfTotal', 'normal', 'percentDiff', 'percentOfCol'}
subtotal
Value must be one of {'sum', 'stdDevp', 'min', 'average', 'countNums', 'var',
        'max', 'varp', 'stdDev', 'product', 'count'} tagname = 'dataField' class openpyxl.pivot.table.FieldItem(n=None, t='data', h=None, s=None, sd=True, f=None, m=None, c=None, x=None, d=None, e=None)
基类：openpyxl.descriptors.serialisable.Serialisable
c
Values must be of type <class 'bool'>
d
Values must be of type <class 'bool'>
e
Values must be of type <class 'bool'>
f
Values must be of type <class 'bool'>
h
Values must be of type <class 'bool'>
m
Values must be of type <class 'bool'>
n
Values must be of type <class 'str'>
s
Values must be of type <class 'bool'>
sd
Values must be of type <class 'bool'>
t
Value must be one of {'stdDevP', 'sum', 'blank', 'data', 'min', 'countA', 'var'
    , 'max', 'grand', 'varP', 'stdDev', 'product', 'default', 'avg', 'count'} tagname = 'item'
x
Values must be of type <class 'int'>
class openpyxl.pivot.table.Format(action='formatting',	dxfId=None,	pivotArea=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
action
Value must be one of {'blank', 'drill', 'formatting', 'formula'}
dxfId
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
pivotArea
         Values must be of type <class 'openpyxl.pivot.table.PivotArea'> tagname = 'format' class openpyxl.pivot.table.HierarchyUsage(hierarchyUsage=None) 基类：openpyxl.descriptors.serialisable.Serialisable
hierarchyUsage
         Values must be of type <class 'int'> tagname = 'hierarchyUsage' class openpyxl.pivot.table.Location(ref=None,	firstHeaderRow=None,	firstDataRow=None, firstDataCol=None,	rowPageCount=None,	colPage-
Count=None)
基类：openpyxl.descriptors.serialisable.Serialisable
colPageCount
Values must be of type <class 'int'>
firstDataCol
Values must be of type <class 'int'>
firstDataRow
Values must be of type <class 'int'>
firstHeaderRow
Values must be of type <class 'int'>
ref
Values must be of type <class 'str'>
rowPageCount
'int'>
     tagname = 'location' class openpyxl.pivot.table.MemberList(count=None, level=None, member=()) 基类：openpyxl.descriptors.serialisable.Serialisable count level
Values must be of type <class 'int'>
member
         Wrap a sequence in an containing object tagname = 'members' class openpyxl.pivot.table.MemberProperty(name=None,	showCell=None,	showTip=None, showAsCaption=None,	nameLen=None, pPos=None, pLen=None, level=None, field=None)
基类：openpyxl.descriptors.serialisable.Serialisable
field
Values must be of type <class 'int'>
level
Values must be of type <class 'int'>
name
Values must be of type <class 'str'>
nameLen
Values must be of type <class 'int'>
pLen
Values must be of type <class 'int'>
pPos
Values must be of type <class 'int'>
showAsCaption
Values must be of type <class 'bool'>
showCell
Values must be of type <class 'bool'>
showTip
    Values must be of type <class 'bool'> tagname = 'mps'
class openpyxl.pivot.table.PageField(fld=None,	item=None,	hier=None,	name=None, cap=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
cap
Values must be of type <class 'str'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fld
Values must be of type <class 'int'>
hier
Values must be of type <class 'int'>
item
Values must be of type <class 'int'>
name
         Values must be of type <class 'str'> tagname = 'pageField' class openpyxl.pivot.table.PivotArea(references=(), extLst=None, field=None, type='normal', dataOnly=True,	labelOnly=None,	grandRow=None, grandCol=None,	cacheIndex=None,	outline=True, offset=None,	collapsedLevelsAreSubtotals=None,
axis=None, fieldPosition=None)
基类：openpyxl.descriptors.serialisable.Serialisable
axis
Value must be one of {'axisValues', 'axisCol', 'axisRow', 'axisPage'}
cacheIndex
Values must be of type <class 'bool'>
collapsedLevelsAreSubtotals
Values must be of type <class 'bool'>
dataOnly
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
field
Values must be of type <class 'int'>
fieldPosition
Values must be of type <class 'int'>

grandCol
'bool'>
grandRow
'bool'>
labelOnly
Values must be of type <class 'bool'>
offset
Values must be of type <class 'str'>
outline
Values must be of type <class 'bool'>
references
    Wrap a sequence in an containing object tagname = 'pivotArea'
type
Value must be one of {'topEnd', 'data', 'topRight', 'normal', 'all', 'button',
'origin'}
class openpyxl.pivot.table.PivotField(items=(),	autoSortScope=None,	name=None, axis=None,	dataField=None,	subtotalCaption=None, showDropDowns=True,	hiddenLevel=None, uniqueMemberProperty=None,	compact=True, allDrilled=None,	numFmtId=None,	outline=True, subtotalTop=True, dragToRow=True, dragToCol=True, multipleItemSelectionAllowed=None, dragToPage=True, dragToData=True,	dragOff=True,	showAll=True, insertBlankRow=None, serverField=None, insertPageBreak=None,	autoShow=None,	topAutoShow=True, hideNewItems=None,	measureFilter=None,	includeNewItemsInFilter=None,	itemPageCount=10,	sort-
Type='manual', dataSourceSort=None, nonAutoSortDefault=None, rankBy=None, defaultSubtotal=True, sumSubtotal=None, countASubtotal=None, avgSubtotal=None, maxSubtotal=None, minSubtotal=None, productSubtotal=None, countSubtotal=None, stdDevSubtotal=None, stdDevPSubtotal=None, varSubtotal=None, varPSubtotal=None, showPropCell=None, showPropTip=None, showPropAsCaption=None, defaultAttributeDrillState=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
allDrilled
'bool'>
autoShow
'bool'>
autoSortScope
Values must be of type <class 'openpyxl.pivot.table.AutoSortScope'>
avgSubtotal
Values must be of type <class 'bool'>
axis
Value must be one of {'axisValues', 'axisCol', 'axisRow', 'axisPage'}
compact
Values must be of type <class 'bool'>
countASubtotal
Values must be of type <class 'bool'>
countSubtotal
Values must be of type <class 'bool'>
dataField
Values must be of type <class 'bool'>
dataSourceSort
Values must be of type <class 'bool'>
defaultAttributeDrillState
Values must be of type <class 'bool'>
defaultSubtotal
Values must be of type <class 'bool'>
dragOff
Values must be of type <class 'bool'>
dragToCol
Values must be of type <class 'bool'>
dragToData
Values must be of type <class 'bool'>
dragToPage
Values must be of type <class 'bool'>
dragToRow
Values must be of type <class 'bool'>
extLst
'openpyxl.descriptors.excel.ExtensionList'>
hiddenLevel
'bool'>
hideNewItems
Values must be of type <class 'bool'>
includeNewItemsInFilter
Values must be of type <class 'bool'>
insertBlankRow
Values must be of type <class 'bool'>
insertPageBreak
Values must be of type <class 'bool'>
itemPageCount
Values must be of type <class 'int'>
items
Wrap a sequence in an containing object
maxSubtotal
Values must be of type <class 'bool'>
measureFilter
Values must be of type <class 'bool'>
minSubtotal
Values must be of type <class 'bool'>
multipleItemSelectionAllowed
Values must be of type <class 'bool'>
name
Values must be of type <class 'str'>
nonAutoSortDefault
Values must be of type <class 'bool'>
numFmtId
Values must be of type <class 'int'>
outline
Values must be of type <class 'bool'>
productSubtotal
Values must be of type <class 'bool'>
rankBy
'int'>
serverField
'bool'>
showAll
Values must be of type <class 'bool'>
showDropDowns
Values must be of type <class 'bool'>
showPropAsCaption
Values must be of type <class 'bool'>
showPropCell
Values must be of type <class 'bool'>
showPropTip
Values must be of type <class 'bool'>
sortType
Value must be one of {'ascending', 'manual', 'descending'}
stdDevPSubtotal
Values must be of type <class 'bool'>
stdDevSubtotal
Values must be of type <class 'bool'>
subtotalCaption
Values must be of type <class 'str'>
subtotalTop
Values must be of type <class 'bool'>
sumSubtotal
    Values must be of type <class 'bool'> tagname = 'pivotField'
topAutoShow
Values must be of type <class 'bool'>
uniqueMemberProperty
Values must be of type <class 'str'>
varPSubtotal
Values must be of type <class 'bool'>
varSubtotal
Values must be of type <class 'bool'>

class openpyxl.pivot.table.PivotFilter(fld=None, mpFld=None, type=None, evalOrder=None, id=None,	iMeasureHier=None,	iMeasureFld=None, name=None, description=None, stringValue1=None, stringValue2=None, autoFilter=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoFilter
Values must be of type <class 'openpyxl.worksheet.filters.AutoFilter'>
description
Values must be of type <class 'str'>
evalOrder
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fld
Values must be of type <class 'int'>
iMeasureFld
Values must be of type <class 'int'>
iMeasureHier
Values must be of type <class 'int'>
id
Values must be of type <class 'int'>
mpFld
Values must be of type <class 'int'>
name
Values must be of type <class 'str'>
stringValue1
Values must be of type <class 'str'>
stringValue2
    Values must be of type <class 'str'> tagname = 'filter'
type
Value must be one of {'Q3','sum','captionLessThan','valueNotEqual','lastMonth',
'lastYear','M5','valueEqual','lastQuarter','dateNewerThan','yesterday','Q4',
'dateOlderThanOrEqual','unknown','tomorrow','valueNotBetween','captionEndsWith'
, 'M3', 'M10', 'captionNotContains', 'nextQuarter', 'M12', 'captionGreaterThan'
,'today','thisWeek','thisYear','captionBeginsWith','captionContains','count', 'valueGreaterThanOrEqual', 'lastWeek', 'percent', 'yearToDate', 'captionNotEqual',
'Q1', 'captionLessThanOrEqual', 'valueGreaterThan', 'captionNotBetween', 'M7', 'M2', 'captionEqual', 'nextYear', 'captionNotEndsWith', 'M8', 'captionBetween',
'valueBetween','M11','thisMonth','M4','captionNotBeginsWith','dateBetween','M6',
'dateEqual','nextWeek','dateNotBetween','thisQuarter','captionGreaterThanOrEqual'
, 'valueLessThan', 'Q2', 'dateNotEqual', 'M1', 'dateNewerThanOrEqual', 'M9',
        'valueLessThanOrEqual', 'dateOlderThan', 'nextMonth'} class openpyxl.pivot.table.PivotFilters(count=None, filter=None) 基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
filter
Values must be of type <class 'openpyxl.pivot.table.PivotFilter'>
class openpyxl.pivot.table.PivotHierarchy(outline=None,	multipleItemSelectionAllowed=None,	subtotalTop=None,	showInFieldList=None,	dragToRow=None,	dragToCol=None, dragToPage=None, dragToData=None, dragOff=None,	includeNewItemsInFilter=None, caption=None,	mps=(),	members=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caption
Values must be of type <class 'str'>
dragOff
Values must be of type <class 'bool'>
dragToCol
Values must be of type <class 'bool'>
dragToData
Values must be of type <class 'bool'>
dragToPage
Values must be of type <class 'bool'>
dragToRow
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
includeNewItemsInFilter
Values must be of type <class 'bool'>
members
Values must be of type <class 'openpyxl.pivot.table.MemberList'>
mps
Wrap a sequence in an containing object
multipleItemSelectionAllowed
Values must be of type <class 'bool'>
outline
Values must be of type <class 'bool'>
showInFieldList
Values must be of type <class 'bool'>
subtotalTop
         Values must be of type <class 'bool'> tagname = 'pivotHierarchy' class openpyxl.pivot.table.PivotTableStyle(name=None, showRowHeaders=None, showColHeaders=None, showRowStripes=None, showCol-
Stripes=None, showLastColumn=None)
基类：openpyxl.descriptors.serialisable.Serialisable
name
Values must be of type <class 'str'>
showColHeaders
Values must be of type <class 'bool'>
showColStripes
Values must be of type <class 'bool'>
showLastColumn
Values must be of type <class 'bool'>
showRowHeaders
Values must be of type <class 'bool'>
showRowStripes
    Values must be of type <class 'bool'> tagname = 'pivotTableStyleInfo'
class openpyxl.pivot.table.Reference(field=None,	count=None,	selected=None,	byPosition=None,	relative=None,	defaultSubtotal=None, sumSubtotal=None,	countASubtotal=None,	avgSubtotal=None, maxSubtotal=None, minSubtotal=None, productSubtotal=None,	countSubtotal=None,	stdDevSubtotal=None,	stdDevPSubtotal=None,	varSubtotal=None, varPSubtotal=None, x=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
avgSubtotal
Values must be of type <class 'bool'>
byPosition
    Values must be of type <class 'bool'> count
countASubtotal
Values must be of type <class 'bool'>
countSubtotal
Values must be of type <class 'bool'>
defaultSubtotal
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
field
Values must be of type <class 'int'>
maxSubtotal
Values must be of type <class 'bool'>
minSubtotal
Values must be of type <class 'bool'>
productSubtotal
Values must be of type <class 'bool'>
relative
Values must be of type <class 'bool'>
selected
Values must be of type <class 'bool'>
stdDevPSubtotal
Values must be of type <class 'bool'>
stdDevSubtotal
Values must be of type <class 'bool'>
sumSubtotal
    Values must be of type <class 'bool'> tagname = 'reference'
varPSubtotal
Values must be of type <class 'bool'>
varSubtotal
Values must be of type <class 'bool'>
x
Values must be of type <class 'int'>
class openpyxl.pivot.table.RowColField(x=None) 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'field'
x
Values must be of type <class 'int'>
class openpyxl.pivot.table.RowColItem(t='data', r=0, i=0, x=None) 基类：openpyxl.descriptors.serialisable.Serialisable
i
Values must be of type <class 'int'>
r
Values must be of type <class 'int'>
t
Value must be one of {'stdDevP', 'sum', 'blank', 'data', 'min', 'countA', 'var'
    , 'max', 'grand', 'varP', 'stdDev', 'product', 'default', 'avg', 'count'} tagname = 'i'
x
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.pivot.table.RowHierarchiesUsage(count=None, rowHierarchyUsage=()) 基类：openpyxl.descriptors.serialisable.Serialisable count
rowHierarchyUsage
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'rowHierarchiesUsage'
class openpyxl.pivot.table.TableDefinition(name=None, cacheId=None, dataOnRows=False, dataPosition=None,	dataCaption=None,	grandTotalCaption=None,	errorCaption=None, showError=False,	missingCaption=None, showMissing=True,	pageStyle=None,	pivotTableStyle=None,	vacatedStyle=None,	tag=None, updatedVersion=0,	minRefreshableVersion=0, asteriskTotals=False,	showItems=True,	editData=False,	disableFieldList=False,	showCalcMbrs=True,	visualTotals=True,	showMultipleLabel=True,	showDataDropDown=True, showDrill=True, printDrill=False, showMemberPropertyTips=True,	showDataTips=True,	enableWizard=True, enableDrill=True, enableFieldProperties=True, preserveFormatting=True, useAutoFormatting=False, pageWrap=0, pageOverThenDown=False,	subtotalHiddenItems=False, rowGrandTotals=True,	colGrandTotals=True, fieldPrintTitles=False,	itemPrintTitles=False, mergeItem=False,	showDropZones=True,	createdVersion=0,	indent=1,	showEmptyRow=False, showEmptyCol=False, showHeaders=True, compact=True,	outline=False,	outlineData=False, compactData=True,	published=False,	gridDropZones=False,	immersive=True,	multipleFieldFilters=None,	chartFormat=0,	rowHeaderCaption=None, colHeaderCaption=None, fieldListSortAscending=None, mdxSubqueries=None, customListSort=None, autoFormatId=None, applyNumberFormats=False,	applyBorderFormats=False, applyFontFormats=False,	applyPatternFormats=False,	applyAlignmentFormats=False, applyWidthHeightFormats=False, location=None, pivotFields=(),	rowFields=(),	rowItems=(), colFields=(),	colItems=(),	pageFields=(), dataFields=(),	formats=(),	conditionalFormats=(), chartFormats=(), pivotHierarchies=(), pivotTableStyleInfo=None,	filters=(),	rowHierarchiesUsage=None,	colHierarchiesUsage=None, extLst=None, id=None)
基类：openpyxl.descriptors.serialisable.Serialisable
applyAlignmentFormats
Values must be of type <class 'bool'>
applyBorderFormats
Values must be of type <class 'bool'>
applyFontFormats
Values must be of type <class 'bool'>
applyNumberFormats
Values must be of type <class 'bool'>
applyPatternFormats
Values must be of type <class 'bool'>
applyWidthHeightFormats
Values must be of type <class 'bool'>
asteriskTotals
Values must be of type <class 'bool'>
autoFormatId
    Values must be of type <class 'int'> cache = None
cacheId
Values must be of type <class 'int'>
chartFormat
Values must be of type <class 'int'>
chartFormats
Wrap a sequence in an containing object
colFields
Wrap a sequence in an containing object
colGrandTotals
Values must be of type <class 'bool'>
colHeaderCaption
Values must be of type <class 'str'>
colHierarchiesUsage
Values must be of type <class 'openpyxl.pivot.table.ColHierarchiesUsage'>
colItems
Wrap a sequence in an containing object
compact
Values must be of type <class 'bool'>
compactData
Values must be of type <class 'bool'>
conditionalFormats
Wrap a sequence in an containing object
createdVersion
Values must be of type <class 'int'>
customListSort
Values must be of type <class 'bool'>
dataCaption
Values must be of type <class 'str'>
dataFields
Wrap a sequence in an containing object
dataOnRows
Values must be of type <class 'bool'>
dataPosition
Values must be of type <class 'int'>
disableFieldList
Values must be of type <class 'bool'>
editData
Values must be of type <class 'bool'>
enableDrill
Values must be of type <class 'bool'>
enableFieldProperties
Values must be of type <class 'bool'>
enableWizard
Values must be of type <class 'bool'>
errorCaption
Values must be of type <class 'str'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fieldListSortAscending
Values must be of type <class 'bool'>
fieldPrintTitles
Values must be of type <class 'bool'>
filters
Wrap a sequence in an containing object
formats
Wrap a sequence in an containing object
grandTotalCaption
Values must be of type <class 'str'>
gridDropZones
Values must be of type <class 'bool'>
id
Values must be of type <class 'str'>
immersive
Values must be of type <class 'bool'>
indent
Values must be of type <class 'int'>
itemPrintTitles
Values must be of type <class 'bool'>
location
Values must be of type <class 'openpyxl.pivot.table.Location'>
mdxSubqueries
Values must be of type <class 'bool'>
mergeItem
    Values must be of type <class 'bool'> mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml'
minRefreshableVersion
Values must be of type <class 'int'>
missingCaption
Values must be of type <class 'str'>
multipleFieldFilters
Values must be of type <class 'bool'>
name
Values must be of type <class 'str'>
outline
Values must be of type <class 'bool'>
outlineData
Values must be of type <class 'bool'>
pageFields
Wrap a sequence in an containing object
pageOverThenDown
Values must be of type <class 'bool'>
pageStyle
Values must be of type <class 'str'>
pageWrap
    Values must be of type <class 'int'> path
pivotFields
Wrap a sequence in an containing object
pivotHierarchies
Wrap a sequence in an containing object
pivotTableStyle
Values must be of type <class 'str'>
pivotTableStyleInfo
Values must be of type <class 'openpyxl.pivot.table.PivotTableStyle'>
preserveFormatting
Values must be of type <class 'bool'>
printDrill
Values must be of type <class 'bool'>
published
    Values must be of type <class 'bool'> rel_type = 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/pivotTable'
rowFields
Wrap a sequence in an containing object
rowGrandTotals
Values must be of type <class 'bool'>
rowHeaderCaption
Values must be of type <class 'str'>
rowHierarchiesUsage
Values must be of type <class 'openpyxl.pivot.table.RowHierarchiesUsage'>
rowItems
Wrap a sequence in an containing object
showCalcMbrs
Values must be of type <class 'bool'>
showDataDropDown
Values must be of type <class 'bool'>
showDataTips
Values must be of type <class 'bool'>
showDrill
Values must be of type <class 'bool'>
showDropZones
Values must be of type <class 'bool'>
showEmptyCol
Values must be of type <class 'bool'>
showEmptyRow
Values must be of type <class 'bool'>
showError
Values must be of type <class 'bool'>
showHeaders
Values must be of type <class 'bool'>
showItems
Values must be of type <class 'bool'>
showMemberPropertyTips
Values must be of type <class 'bool'>
showMissing
Values must be of type <class 'bool'>
showMultipleLabel
Values must be of type <class 'bool'>
subtotalHiddenItems
Values must be of type <class 'bool'>
tag
    Values must be of type <class 'str'> tagname = 'pivotTableDefinition' to_tree()
updatedVersion
Values must be of type <class 'int'> useAutoFormatting
Values must be of type <class 'bool'>
vacatedStyle
Values must be of type <class 'str'>
visualTotals
Values must be of type <class 'bool'>
openpyxl.pivot.table.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.reader package Submodules
openpyxl.reader.drawings module
openpyxl.reader.drawings.find_images(archive, path)
Given the path to a drawing file extract charts and images
Ingore errors due to unsupported parts of DrawingML
openpyxl.reader.excel module
Read an xlsx file into Python
class openpyxl.reader.excel.ExcelReader(fn,	read_only=False,	keep_vba=False, data_only=False, keep_links=True)
基类：object
Read an Excel package and dispatch the contents to the relevant modules read() read_chartsheet(sheet, rel) read_manifest() read_properties()
     read_strings() read_theme() read_workbook() read_worksheets() openpyxl.reader.excel.load_workbook(filename,	read_only=False,	keep_vba=False, data_only=False, keep_links=True) Open the given filename and return the workbook
参数
• filename (string or a file-like object open in binary mode c.f., zipfile.ZipFile) - the path to open or a file-like object
• read_only (bool) - optimised for reading, content cannot be edited
• keep_vba (bool) - preseve vba content (this does NOT mean you can use it)
• data_only (bool) - controls whether cells with formulae have either the formula (default) or the value stored the last time Excel read the sheet
• keep_links (bool) - whether links to external workbooks should be preserved. The default is True 返回类型 openpyxl.workbook.Workbook

	注解:	When using lazy load, all worksheets will be openpyxl.worksheet.iter_worksheet.
IterableWorksheet and the returned workbook will be read-only.

openpyxl.reader.strings module
openpyxl.reader.strings.read_string_table(xml_source)
Read in all shared strings in the table
openpyxl.reader.workbook module
class openpyxl.reader.workbook.WorkbookParser(archive,	workbook_part_name, keep_links=True)
基类：object
assign_names()
Bind reserved names to parsed worksheets
find_sheets()
Find all sheets in the workbook and return the link to the source file.
Older XLSM files sometimes contain invalid sheet elements. Warn user when these are removed.
parse()
pivot_caches
    Get PivotCache objects rels
openpyxl.styles package Submodules
openpyxl.styles.alignment module
class openpyxl.styles.alignment.Alignment(horizontal=None, vertical=None, textRotation=0, wrapText=None,	shrinkToFit=None,	indent=0, relativeIndent=0,	justifyLastLine=None,	readingOrder=0, text_rotation=None, wrap_text=None, shrink_to_fit=None, mergeCell=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Alignment options for use in styles.
horizontal
Value must be one of {'fill','distributed','general','left','centerContinuous','center'
, 'justify', 'right'}
indent
Values must be of type <class 'float'>
justifyLastLine
Values must be of type <class 'bool'>
readingOrder
Values must be of type <class 'float'>
relativeIndent
Values must be of type <class 'float'>
shrinkToFit
Values must be of type <class 'bool'>
shrink_to_fit
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'alignment'
textRotation
Value must be one of {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180}
text_rotation
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
vertical
Value must be one of {'justify', 'distributed', 'center', 'bottom', 'top'}
wrapText
Values must be of type <class 'bool'>
wrap_text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
openpyxl.styles.borders module
class openpyxl.styles.borders.Border(left=<openpyxl.styles.borders.Side	object> Parameters:	style=None,	color=None, right=<openpyxl.styles.borders.Side	object> Parameters:	style=None,	color=None, top=<openpyxl.styles.borders.Side	object>	Parameters:	style=None,	color=None,	bottom=<openpyxl.styles.borders.Side	object>	Parameters:	style=None,	color=None,	diagonal=<openpyxl.styles.borders.Side	object>	Parameters: style=None, color=None, diagonal_direction=None, vertical=None, horizontal=None, diagonalUp=False, diagonalDown=False, outline=True, start=None, end=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Border positioning for use in styles.
bottom
Values must be of type <class 'openpyxl.styles.borders.Side'>
diagonal
Values must be of type <class 'openpyxl.styles.borders.Side'>
diagonalDown
Values must be of type <class 'bool'>
diagonalUp
Values must be of type <class 'bool'>
end
Values must be of type <class 'openpyxl.styles.borders.Side'>
horizontal
Values must be of type <class 'openpyxl.styles.borders.Side'>
left
Values must be of type <class 'openpyxl.styles.borders.Side'>
outline
Values must be of type <class 'bool'>
right
Values must be of type <class 'openpyxl.styles.borders.Side'>
start
    Values must be of type <class 'openpyxl.styles.borders.Side'> tagname = 'border'
top
Values must be of type <class 'openpyxl.styles.borders.Side'>
vertical
Values must be of type <class 'openpyxl.styles.borders.Side'>
class openpyxl.styles.borders.Side(style=None, color=None, border_style=None) 基类：openpyxl.descriptors.serialisable.Serialisable
Border options for use in styles. Caution: if you do not specify a border_style, other attributes will have no effect !
border_style
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
color
Values must be of type <class 'openpyxl.styles.colors.Color'>
style
Value must be one of {'medium', 'thick', 'dashDotDot', 'dotted', 'double', 'mediumDashDotDot','hair','slantDashDot','dashDot','mediumDashed','dashed'
, 'mediumDashDot', 'thin'}
openpyxl.styles.builtins module
openpyxl.styles.cell_style module
class openpyxl.styles.cell_style.ArrayDescriptor(key) 基类：object
class openpyxl.styles.cell_style.CellStyle(numFmtId=0,	fontId=0,	fillId=0,	borderId=0, xfId=None,	quotePrefix=None,	pivotButton=None,	applyNumberFormat=None,	applyFont=None,	applyFill=None,	applyBorder=None,	applyAlignment=None,	applyProtection=None, alignment=None, protection=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
alignment
    Values must be of type <class 'openpyxl.styles.alignment.Alignment'> applyAlignment
applyBorder
Values must be of type <class 'bool'>
applyFill
Values must be of type <class 'bool'>
applyFont
Values must be of type <class 'bool'>
applyNumberFormat
    Values must be of type <class 'bool'> applyProtection
borderId
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fillId
Values must be of type <class 'int'>
fontId
Values must be of type <class 'int'>
classmethod from_array(style)
Convert from StyleArray
numFmtId
Values must be of type <class 'int'>
pivotButton
Values must be of type <class 'bool'>
protection
Values must be of type <class 'openpyxl.styles.protection.Protection'>
quotePrefix
    Values must be of type <class 'bool'> tagname = 'xf'
to_array()
Convert to StyleArray
xfId
         Values must be of type <class 'int'> class openpyxl.styles.cell_style.CellStyleList(count=None, xf=()) 基类：openpyxl.descriptors.serialisable.Serialisable
alignment
    A sequence (list or tuple) that may only contain objects of the declared type count
protection
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'cellXfs'
xf
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.styles.cell_style.StyleArray 基类：array.array
Simplified named tuple with an array alignmentId borderId fillId fontId numFmtId
pivotButton protectionId quotePrefix tagname = 'xf' xfId
openpyxl.styles.colors module
class openpyxl.styles.colors.Color(rgb='00000000', indexed=None, auto=None, theme=None, tint=0.0, index=None, type='rgb')
基类：openpyxl.descriptors.serialisable.Serialisable
Named colors for use in styles.
auto
    Values must be of type <class 'bool'> index
indexed
Values must be of type <class 'int'>
rgb
    Values must be of type <class 'str'> tagname = 'color'
theme
Values must be of type <class 'int'>
tint
Values must be of type <class 'float'>
type
         Values must be of type <class 'str'> value class openpyxl.styles.colors.ColorDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.Typed expected_type
Color 的别名
class openpyxl.styles.colors.ColorList(indexedColors=(), mruColors=()) 基类：openpyxl.descriptors.serialisable.Serialisable index
indexedColors
Wrap a sequence in an containing object
mruColors
         Wrap a sequence in an containing object tagname = 'colors' class openpyxl.styles.colors.RGB(*args, **kw) 基类：openpyxl.descriptors.base.Typed Descriptor for aRGB values If not supplied alpha is 00
     expected_type builtins.str的别名 class openpyxl.styles.colors.RgbColor(rgb=None) 基类：openpyxl.descriptors.serialisable.Serialisable
rgb
    Values must be of type <class 'str'> tagname = 'rgbColor'
openpyxl.styles.differential module
class openpyxl.styles.differential.DifferentialStyle(font=None,	numFmt=None, fill=None,	alignment=None,	border=None,	protection=None,
extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
alignment
Values must be of type <class 'openpyxl.styles.alignment.Alignment'>
border
Values must be of type <class 'openpyxl.styles.borders.Border'>
fill
Values must be of type <class 'openpyxl.styles.fills.Fill'>
font
Values must be of type <class 'openpyxl.styles.fonts.Font'>
numFmt
Values must be of type <class 'openpyxl.styles.numbers.NumberFormat'>
protection
    Values must be of type <class 'openpyxl.styles.protection.Protection'> tagname = 'dxf'
class openpyxl.styles.differential.DifferentialStyleList(dxf=()) 基类：openpyxl.descriptors.serialisable.Serialisable
Deduping container for differential styles.
add(dxf)
Add a differential style and return its index
append(dxf)
Check to see whether style already exists and append it if does not.
dxf
A sequence (list or tuple) that may only contain objects of the declared type
styles
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'dxfs'
openpyxl.styles.fills module
class openpyxl.styles.fills.Fill 基类：openpyxl.descriptors.serialisable.Serialisable Base class
classmethod from_tree(el)
         Create object from XML tagname = 'fill' class openpyxl.styles.fills.GradientFill(type='linear', degree=0, left=0, right=0, top=0, bottom=0, stop=())
基类：openpyxl.styles.fills.Fill
Fill areas with gradient
Two types of gradient fill are supported:
• A type='linear'gradient interpolates colours between a set of specified Stops, across the length of an area. The gradient is left-to-right by default, but this orientation can be modified with the degree attribute. A list of Colors can be provided instead and they will be positioned with equal distance between them.
• A type='path'gradient applies a linear gradient from each edge of the area. Attributes top, right, bottom, left specify the extent of fill from the respective borders. Thus top="0.2"will fill the top 20% of the cell.
bottom
Values must be of type <class 'float'>
degree
Values must be of type <class 'float'>
fill_type
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
left
Values must be of type <class 'float'>
right
    Values must be of type <class 'float'> stop tagname = 'gradientFill' to_tree(tagname=None, namespace=None, idx=None)
top
Values must be of type <class 'float'>
type
Value must be one of {'linear', 'path'}
class openpyxl.styles.fills.PatternFill(patternType=None,	fg-
Color=<openpyxl.styles.colors.Color	object> Parameters:	rgb='00000000',	indexed=None, auto=None, theme=None, tint=0.0, type='rgb', bgColor=<openpyxl.styles.colors.Color object> Parameters:	rgb='00000000', indexed=None, auto=None, theme=None, tint=0.0, type='rgb', fill_type=None, start_color=None, end_color=None)
基类：openpyxl.styles.fills.Fill
Area fill patterns for use in styles. Caution: if you do not specify a fill_type, other attributes will have no effect !
bgColor
Values must be of type <class 'openpyxl.styles.colors.Color'>
end_color
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
fgColor
Values must be of type <class 'openpyxl.styles.colors.Color'>
fill_type
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
patternType
Value must be one of {'lightHorizontal', 'darkHorizontal', 'lightGray', 'gray0625',
'darkGray','lightGrid','gray125','solid','darkDown','darkVertical','lightTrellis'
, 'lightUp', 'darkTrellis', 'lightDown', 'lightVertical', 'mediumGray', 'darkGrid'
, 'darkUp'}
start_color
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
         (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") tagname = 'patternFill' to_tree(tagname=None, idx=None) class openpyxl.styles.fills.Stop(color, position) 基类：openpyxl.descriptors.serialisable.Serialisable
color
Values must be of type <class 'openpyxl.styles.colors.Color'>
position
         Values must be of type <class 'float'> tagname = 'stop' class openpyxl.styles.fills.StopList(name=None, **kw) 基类：openpyxl.descriptors.sequence.Sequence expected_type
Stop的别名
openpyxl.styles.fonts module
class openpyxl.styles.fonts.Font(name=None,	sz=None,	b=None,	i=None,	charset=None, u=None,	strike=None,	color=None,	scheme=None, family=None,	size=None,	bold=None,	italic=None, strikethrough=None,	underline=None,	vertAlign=None, outline=None, shadow=None, condense=None, extend=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Font options used in styles.
UNDERLINE_DOUBLE = 'double'
UNDERLINE_DOUBLE_ACCOUNTING = 'doubleAccounting'
UNDERLINE_SINGLE = 'single'
UNDERLINE_SINGLE_ACCOUNTING = 'singleAccounting'
b
Values must be of type <class 'bool'>
bold
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
charset
Values must be of type <class 'int'>
color
Values must be of type <class 'openpyxl.styles.colors.Color'>
condense
Values must be of type <class 'bool'>
extend
Values must be of type <class 'bool'>
family
Values must be of type <class 'float'>
classmethod from_tree(node)
Set default value for underline if child element is present
i
Values must be of type <class 'bool'>
italic
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
name
Values must be of type <class 'str'>
outline
Values must be of type <class 'bool'>
scheme
Value must be one of {'major', 'minor'}
shadow
Values must be of type <class 'bool'>
size
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
strike
Values must be of type <class 'bool'>
strikethrough
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
sz
    Values must be of type <class 'float'> tagname = 'font'
u
Value must be one of {'singleAccounting', 'single', 'double', 'doubleAccounting'}
underline
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
vertAlign
Value must be one of {'baseline', 'superscript', 'subscript'}

openpyxl.styles.named_styles module
class openpyxl.styles.named_styles.NamedStyle(name='Normal', font=<openpyxl.styles.fonts.Font
object> Parameters: name=None, charset=None, family=None, b=False, i=False, strike=None, outline=None, shadow=None, condense=None, color=None, extend=None, sz=None, u=None, vertAlign=None, scheme=None, fill=<openpyxl.styles.fills.PatternFill object> Parameters: patternType=None,
fgColor=<openpyxl.styles.colors.Color
object> Parameters: rgb='00000000', indexed=None, auto=None, theme=None, tint=0.0, type='rgb', bgColor=<openpyxl.styles.colors.Color object> Parameters: rgb='00000000', indexed=None, auto=None, theme=None, tint=0.0, type='rgb', border=<openpyxl.styles.borders.Border object> Parameters: outline=True, diagonalUp=False, diagonalDown=False, start=None, end=None, left=<openpyxl.styles.borders.Side object> Parameters: style=None, color=None, right=<openpyxl.styles.borders.Side object> Parameters: style=None, color=None, top=<openpyxl.styles.borders.Side object> Parameters: style=None, color=None, bottom=<openpyxl.styles.borders.Side object> Parameters: style=None, color=None, diagonal=<openpyxl.styles.borders.Side object> Parameters: style=None, color=None, vertical=None, horizontal=None, alignment=<openpyxl.styles.alignment.Alignment object> Parameters: horizontal=None, vertical=None, textRotation=0, wrapText=None, shrinkToFit=None, indent=0.0, relativeIndent=0.0, justifyLastLine=None, readingOrder=0.0, number_format=None, protection=<openpyxl.styles.protection.Protection
object>	Parameters:	locked=True,	hidden=False,	builtinId=None,	hidden=False, xfId=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Named and editable styles
alignment
Values must be of type <class 'openpyxl.styles.alignment.Alignment'>
as_name()
Return relevant named style
as_tuple()
Return a style array representing the current style
as_xf()
Return equivalent XfStyle
bind(wb)
Bind a named style to a workbook
border
Values must be of type <class 'openpyxl.styles.borders.Border'>
builtinId
Values must be of type <class 'int'>
fill
Values must be of type <class 'openpyxl.styles.fills.Fill'>
font
Values must be of type <class 'openpyxl.styles.fonts.Font'>
hidden
Values must be of type <class 'bool'>
name
Values must be of type <class 'str'>
number_format
Values must be of type <class 'str'>
protection
Values must be of type <class 'openpyxl.styles.protection.Protection'>
xfId
Index of the style in the list of named styles
class openpyxl.styles.named_styles.NamedStyleList 基类：list
Named styles are editable and can be applied to multiple objects As only the index is stored in referencing objects the order mus be preserved.
append(style)
Append object to the end of the list.
names
openpyxl.styles.numbers module
class openpyxl.styles.numbers.NumberFormat(numFmtId=None, formatCode=None) 基类：openpyxl.descriptors.serialisable.Serialisable
formatCode
Values must be of type <class 'str'>
numFmtId
         Values must be of type <class 'int'> class openpyxl.styles.numbers.NumberFormatDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.String class openpyxl.styles.numbers.NumberFormatList(count=None, numFmt=()) 基类：openpyxl.descriptors.serialisable.Serialisable count
numFmt
A sequence (list or tuple) that may only contain objects of the declared type
openpyxl.styles.numbers.builtin_format_code(index) Return one of the standard format codes by index.
openpyxl.styles.numbers.builtin_format_id(fmt) Return the id of a standard style.
openpyxl.styles.numbers.is_builtin(fmt) openpyxl.styles.numbers.is_date_format(fmt)
openpyxl.styles.numbers.is_datetime(fmt)
Return date, time or datetime
openpyxl.styles.protection module
class openpyxl.styles.protection.Protection(locked=True, hidden=False) 基类：openpyxl.descriptors.serialisable.Serialisable
Protection options for use in styles.
hidden
Values must be of type <class 'bool'>
locked
Values must be of type <class 'bool'>
tagname = 'protection'
openpyxl.styles.proxy module
class openpyxl.styles.proxy.StyleProxy(target) 基类：object
Proxy formatting objects so that they cannot be altered
copy(**kw)
Return a copy of the proxied object. Keyword args will be passed through

注解: Deprecated: Use copy(obj) or cell.obj = cell.obj + other

openpyxl.styles.styleable module
class openpyxl.styles.styleable.NamedStyleDescriptor 基类：object
     collection = '_named_styles' key = 'xfId' class openpyxl.styles.styleable.NumberFormatDescriptor 基类：object
     collection = '_number_formats' key = 'numFmtId' class openpyxl.styles.styleable.StyleArrayDescriptor(key) 基类：object
class openpyxl.styles.styleable.StyleDescriptor(collection, key) 基类：object
class openpyxl.styles.styleable.StyleableObject(sheet, style_array=None) 基类：object
Base class for styleble objects implementing proxy and lookup functions alignment border fill font
has_style number_format parent pivotButton protection quotePrefix style style_id
openpyxl.styles.stylesheet module
class openpyxl.styles.stylesheet.Stylesheet(numFmts=None,	fonts=(),	fills=(),	borders=(),	cellStyleXfs=None,	cellXfs=None, cellStyles=None,	dxfs=(),	tableStyles=None, colors=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
borders
Wrap a sequence in an containing object
cellStyleXfs
Values must be of type <class 'openpyxl.styles.cell_style.CellStyleList'>
cellStyles
Values must be of type <class 'openpyxl.styles.named_styles._NamedCellStyleList'>
cellXfs
Values must be of type <class 'openpyxl.styles.cell_style.CellStyleList'>
colors
    Values must be of type <class 'openpyxl.styles.colors.ColorList'> custom_formats
dxfs
Wrap a sequence in an containing object
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
fills
Wrap a sequence in an containing object
fonts
Wrap a sequence in an containing object
classmethod from_tree(node)
Create object from XML
numFmts
Values must be of type <class 'openpyxl.styles.numbers.NumberFormatList'>
tableStyles
    Values must be of type <class 'openpyxl.styles.table.TableStyleList'> tagname = 'styleSheet' to_tree(tagname=None, idx=None, namespace=None)
openpyxl.styles.stylesheet.apply_stylesheet(archive, wb)
     Add styles to workbook if present openpyxl.styles.stylesheet.write_stylesheet(wb)
openpyxl.styles.table module
class openpyxl.styles.table.TableStyle(name=None, pivot=None, table=None, count=None, tableStyleElement=())
基类：openpyxl.descriptors.serialisable.Serialisable
count
Values must be of type <class 'int'>
name
Values must be of type <class 'str'>
pivot
Values must be of type <class 'bool'>
table
Values must be of type <class 'bool'>
tableStyleElement
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'tableStyle' class openpyxl.styles.table.TableStyleElement(type=None, size=None, dxfId=None) 基类：openpyxl.descriptors.serialisable.Serialisable
dxfId
Values must be of type <class 'int'>
size
    Values must be of type <class 'int'> tagname = 'tableStyleElement'
type
Value must be one of {'pageFieldValues', 'totalRow', 'thirdSubtotalRow', 'blankRow',
'firstTotalCell','lastHeaderCell','headerRow','firstColumnSubheading','firstHeaderCell' ,'thirdRowSubheading','secondRowSubheading','thirdSubtotalColumn','lastColumn',
'secondColumnStripe','secondSubtotalColumn','firstColumn','firstRowStripe','wholeTable'
,'thirdColumnSubheading','firstRowSubheading','firstColumnStripe','pageFieldLabels'
, 'lastTotalCell', 'secondRowStripe', 'firstSubtotalColumn', 'secondColumnSubheading'
, 'firstSubtotalRow', 'secondSubtotalRow'}
class openpyxl.styles.table.TableStyleList(count=None,	defaultTa-
	bleStyle='TableStyleMedium9',	defaultPivot-
Style='PivotStyleLight16', tableStyle=())
基类：openpyxl.descriptors.serialisable.Serialisable count
defaultPivotStyle
Values must be of type <class 'str'>
defaultTableStyle
Values must be of type <class 'str'>
tableStyle
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'tableStyles'
openpyxl.utils package Submodules
openpyxl.utils.bound_dictionary module
class openpyxl.utils.bound_dictionary.BoundDictionary(reference=None, *args, **kw) 基类：collections.defaultdict
A default dictionary where elements are tightly coupled.
The factory method is responsible for binding the parent object to the child.
If a reference attribute is assigned then child objects will have the key assigned to this.
Otherwise it's just a defaultdict.
openpyxl.utils.cell module
Collection of utilities used within the package and also available for client code openpyxl.utils.cell.absolute_coordinate(coord_string)
Convert a coordinate to an absolute coordinate string (B12 -> $B$12)
openpyxl.utils.cell.cols_from_range(range_string)
Get individual addresses for every cell in a range. Yields one row at a time.
openpyxl.utils.cell.column_index_from_string(str_col)
Convert a column name into a numerical index ('A'-> 1)
openpyxl.utils.cell.coordinate_from_string(coord_string)
Convert a coordinate string like 'B12'to a tuple ('B', 12)
openpyxl.utils.cell.coordinate_to_tuple(coordinate)
Convert an Excel style coordinate to (row, colum) tuple
openpyxl.utils.cell.get_column_interval(start, end)
Given the start and end columns, return all the columns in the series.
The start and end columns can be either column letters or 1-based indexes.
openpyxl.utils.cell.get_column_letter(idx)
Convert a column index into a column letter (3 -> 'C')
openpyxl.utils.cell.quote_sheetname(sheetname)
Add quotes around sheetnames if they contain spaces.
openpyxl.utils.cell.range_boundaries(range_string)
Convert a range string into a tuple of boundaries: (min_col, min_row, max_col, max_row) Cell coordinates will be converted into a range with the cell at both end
openpyxl.utils.cell.range_to_tuple(range_string)
Convert a worksheet range to the sheetname and maximum and minimum coordinate indices
openpyxl.utils.cell.rows_from_range(range_string)
     Get individual addresses for every cell in a range. Yields one row at a time. openpyxl.utils.dataframe module
openpyxl.utils.dataframe.dataframe_to_rows(df, index=True, header=True)
Convert a Pandas dataframe into something suitable for passing into a worksheet. If index is True then the index will be included, starting one row below the header. If header is True then column headers will be included starting one column to the right. Formatting should be done by client code.
openpyxl.utils.dataframe.expand_levels(levels, labels)
Multiindexes need expanding so that subtitles repeat
openpyxl.utils.datetime module
class openpyxl.utils.datetime.GMT 基类：datetime.tzinfo
dst(dt) datetime -> DST offset as timedelta positive east of UTC.
tzname(dt) datetime -> string name of time zone.
utcoffset(dt) datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
openpyxl.utils.datetime.days_to_time(value)
openpyxl.utils.datetime.from_ISO8601(formatted_string)
Convert from a timestamp string to a datetime object. According to 18.17.4 in the specification the following ISO 8601 formats are supported.
Dates B.1.1 and B.2.1 Times B.1.2 and B.2.2 Datetimes B.1.3 and B.2.3
     There is no concept of timedeltas openpyxl.utils.datetime.from_excel(value, offset=2415018.5)
openpyxl.utils.datetime.time_to_days(value)
Convert a time value to fractions of day
openpyxl.utils.datetime.timedelta_to_days(value)
Convert a timedelta value to fractions of a day
openpyxl.utils.datetime.to_ISO8601(dt)
Convert from a datetime to a timestamp string.
openpyxl.utils.datetime.to_excel(dt, offset=2415018.5)
openpyxl.utils.escape module
OOXML has non-standard escaping for characters <
openpyxl.utils.escape.escape(value)
Convert ASCII < 31 to OOXML: n == _x + hex(ord(n)) + _
openpyxl.utils.escape.unescape(value)
Convert escaped strings to ASCIII: _x000a_ == n
openpyxl.utils.exceptions module
Definitions for openpyxl shared exception classes.
exception openpyxl.utils.exceptions.CellCoordinatesException 基类：Exception
Error for converting between numeric and A1-style cell references.
exception openpyxl.utils.exceptions.IllegalCharacterError 基类：Exception
The data submitted which cannot be used directly in Excel files. It must be removed or escaped.
exception openpyxl.utils.exceptions.InvalidFileException 基类：Exception
Error for trying to open a non-ooxml file.
exception openpyxl.utils.exceptions.NamedRangeException 基类：Exception
Error for badly formatted named ranges.
exception openpyxl.utils.exceptions.ReadOnlyWorkbookException 基类：Exception
Error for trying to modify a read-only workbook
exception openpyxl.utils.exceptions.SheetTitleException 基类：Exception
Error for bad sheet names.
exception openpyxl.utils.exceptions.WorkbookAlreadySaved 基类：Exception
Error when attempting to perform operations on a dump workbook while it has already been dumped once
openpyxl.utils.formulas module List of builtin formulae
openpyxl.utils.indexed_list module
class openpyxl.utils.indexed_list.IndexedList(iterable=None) 基类：list
List with optimised access by value Based on Alex Martelli's recipe http://code.activestate.com/recipes/52303-the-auxiliary-dictionary-idiom-for-sequences-with-/ add(value)
append(value)
Append object to the end of the list.
index(value)
Return first index of value.
Raises ValueError if the value is not present.
openpyxl.utils.inference module
Type inference functions
openpyxl.utils.inference.cast_numeric(value)
Explicity convert a string to a numeric value
openpyxl.utils.inference.cast_percentage(value)
Explicitly convert a string to numeric value and format as a percentage
openpyxl.utils.inference.cast_time(value)
Explicitly convert a string to a number and format as datetime or time
openpyxl.utils.protection module
openpyxl.utils.protection.hash_password(plaintext_password=")
Create a password hash from a given string for protecting a worksheet only. This will not work for encrypting a workbook.
This method is based on the algorithm provided by Daniel Rentz of OpenOffice and the PEAR package Spreadsheet_Excel_Writer by Xavier Noguer <xnoguer@rezebra.com>. See also http://blogs.msdn.
com/b/ericwhite/archive/2008/02/23/the-legacy-hashing-algorithm-in-open-xml.aspx
openpyxl.utils.units module
openpyxl.utils.units.DEFAULT_HEADER = 0.3
From the ECMA Spec (4th Edition part 1) Page setup: "Left Page Margin in inches"p. 1647
Docs from http://startbigthinksmall.wordpress.com/2010/01/04/points-inches-and-emus-measuring-units-in-office-op See also http://msdn.microsoft.com/en-us/library/dd560821(v=office.12).aspx dxa: The main unit in OOXML is a twentieth of a point. Also called twips. pt: point. In Excel there are 72 points to an inch hp: half-points are used to specify font sizes. A font-size of 12pt equals 24 half points pct: Half-points are used to specify font sizes. A font-size of 12pt equals 24 half points
EMU: English Metric Unit, EMUs are used for coordinates in vector-based drawings and embedded pictures. One inch equates to 914400 EMUs and a centimeter is 360000. For bitmaps the default resolution is 96 dpi (known as PixelsPerInch in Excel). Spec p. 1122
For radial geometry Excel uses integert units of 1/60000th of a degree.
openpyxl.utils.units.EMU_to_cm(value) openpyxl.utils.units.EMU_to_inch(value) openpyxl.utils.units.EMU_to_pixels(value) openpyxl.utils.units.angle_to_degrees(value)
openpyxl.utils.units.cm_to_EMU(value)
1 cm = 360000 EMUs
openpyxl.utils.units.cm_to_dxa(value)
openpyxl.utils.units.degrees_to_angle(value)
     1 degree = 60000 angles openpyxl.utils.units.dxa_to_cm(value) openpyxl.utils.units.dxa_to_inch(value) openpyxl.utils.units.inch_to_EMU(value)
1 inch = 914400 EMUs
openpyxl.utils.units.inch_to_dxa(value)
1 inch = 72 * 20 dxa
openpyxl.utils.units.pixels_to_EMU(value)
1 pixel = 9525 EMUs
openpyxl.utils.units.pixels_to_points(value, dpi=96)
     96 dpi, 72i openpyxl.utils.units.points_to_pixels(value, dpi=96)
openpyxl.utils.units.short_color(color) format a color to its short size
openpyxl.workbook package Subpackages
openpyxl.workbook.external_link package
Submodules
openpyxl.workbook.external_link.external module
class openpyxl.workbook.external_link.external.ExternalBook(sheetNames=None,	de-
	finedNames=(),	sheet-
DataSet=None, id=None)
基类：openpyxl.descriptors.serialisable.Serialisable
definedNames
Wrap a sequence in an containing object
id
Values must be of type <class 'str'>
sheetDataSet
Values must be of type <class'openpyxl.workbook.external_link.external.ExternalSheetDataSet'
>
sheetNames
Values must be of type <class'openpyxl.workbook.external_link.external.ExternalSheetNames'
>
     tagname = 'externalBook' class openpyxl.workbook.external_link.external.ExternalCell(r=None, t=None, vm=None, v=None)
基类：openpyxl.descriptors.serialisable.Serialisable
r
Values must be of type <class 'str'>
t
Value must be one of {'b', 'inlineStr', 'str', 'n', 'e', 'd', 's'}
v
Values must be of type <class 'str'>
vm
Values must be of type <class 'int'>
class openpyxl.workbook.external_link.external.ExternalDefinedName(name=None,
refersTo=None, sheetId=None)
基类：openpyxl.descriptors.serialisable.Serialisable
name
Values must be of type <class 'str'>
refersTo
Values must be of type <class 'str'>
sheetId
    Values must be of type <class 'int'> tagname = 'definedName'
class openpyxl.workbook.external_link.external.ExternalLink(externalBook=None,
ddeLink=None, oleLink=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
externalBook
Values must be of type <class 'openpyxl.workbook.external_link.external.ExternalBook'>
file_link
         Values must be of type <class 'openpyxl.packaging.relationship.Relationship'> mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml' path tagname = 'externalLink' to_tree() class openpyxl.workbook.external_link.external.ExternalRow(r=(), cell=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cell
A sequence (list or tuple) that may only contain objects of the declared type
r
Values must be of type <class 'int'>
class openpyxl.workbook.external_link.external.ExternalSheetData(sheetId=None, refresh-
Error=None, row=())
基类：openpyxl.descriptors.serialisable.Serialisable
refreshError
Values must be of type <class 'bool'>
row
A sequence (list or tuple) that may only contain objects of the declared type
sheetId
Values must be of type <class 'int'>
class openpyxl.workbook.external_link.external.ExternalSheetDataSet(sheetData=None) 基类：openpyxl.descriptors.serialisable.Serialisable
sheetData
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.workbook.external_link.external.ExternalSheetNames(sheetName=()) 基类：openpyxl.descriptors.serialisable.Serialisable
sheetName
A sequence of primitive types that are stored as a single attribute. "val"is the default attribute
openpyxl.workbook.external_link.external.read_external_link(archive, book_path)
Submodules
openpyxl.workbook.child module
openpyxl.workbook.child.avoid_duplicate_name(names, value)
Naive check to see whether name already exists. If name does exist suggest a name using an incrementer
Duplicates are case insensitive
openpyxl.workbook.defined_name module
class openpyxl.workbook.defined_name.DefinedName(name=None,	comment=None,	customMenu=None,	description=None, help=None,	statusBar=None,	localSheetId=None,	hidden=None, function=None,	vbProcedure=None, xlm=None,	functionGroupId=None, shortcutKey=None,	publishToServer=None,	workbookParameter=None, attr_text=None)
基类：openpyxl.descriptors.serialisable.Serialisable attr_text
comment
Values must be of type <class 'str'>
customMenu
Values must be of type <class 'str'>
description
    Values must be of type <class 'str'> destinations
function
Values must be of type <class 'bool'>
functionGroupId
Values must be of type <class 'int'>
help
Values must be of type <class 'str'>
hidden
    Values must be of type <class 'bool'> is_external is_reserved
localSheetId
Values must be of type <class 'int'>
name
Values must be of type <class 'str'>
publishToServer
Values must be of type <class 'bool'>
shortcutKey
Values must be of type <class 'str'>
statusBar
    Values must be of type <class 'str'> tagname = 'definedName' type
value
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
vbProcedure
Values must be of type <class 'bool'>
workbookParameter
Values must be of type <class 'bool'>
xlm
Values must be of type <class 'bool'>
class openpyxl.workbook.defined_name.DefinedNameList(definedName=()) 基类：openpyxl.descriptors.serialisable.Serialisable append(defn)
definedName
    A sequence (list or tuple) that may only contain objects of the declared type delete(name, scope=None)
Delete a name assigned to a specific or global
get(name, scope=None)
Get the name assigned to a specicic sheet or global
localnames(scope)
    Provide a list of all names for a particular worksheet tagname = 'definedNames'
openpyxl.workbook.external_reference module
class openpyxl.workbook.external_reference.ExternalReference(id) 基类：openpyxl.descriptors.serialisable.Serialisable
id
    Values must be of type <class 'str'> tagname = 'externalReference'
openpyxl.workbook.function_group module
class openpyxl.workbook.function_group.FunctionGroup(name=None) 基类：openpyxl.descriptors.serialisable.Serialisable
name
         Values must be of type <class 'str'> tagname = 'functionGroup' class openpyxl.workbook.function_group.FunctionGroupList(builtInGroupCount=16, function-
Group=())
基类：openpyxl.descriptors.serialisable.Serialisable
builtInGroupCount
Values must be of type <class 'int'>
functionGroup
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'functionGroups'
openpyxl.workbook.properties module
class openpyxl.workbook.properties.CalcProperties(calcId=124519,	calcMode=None,	fullCalcOnLoad=True,	refMode=None, iterate=None,	iterateCount=None,	iterateDelta=None,	fullPrecision=None, calcCompleted=None, calcOnSave=None, concurrentCalc=None,	concurrentManualCount=None, forceFullCalc=None)
基类：openpyxl.descriptors.serialisable.Serialisable
calcCompleted
Values must be of type <class 'bool'>
calcId
Values must be of type <class 'int'>
calcMode
Value must be one of {'manual', 'autoNoTable', 'auto'}
calcOnSave
Values must be of type <class 'bool'>
concurrentCalc
Values must be of type <class 'bool'>
concurrentManualCount
Values must be of type <class 'int'>
forceFullCalc
Values must be of type <class 'bool'>
fullCalcOnLoad
Values must be of type <class 'bool'>
fullPrecision
Values must be of type <class 'bool'>
iterate
Values must be of type <class 'bool'>
iterateCount
Values must be of type <class 'int'>
iterateDelta
Values must be of type <class 'float'>
refMode
Value must be one of {'A1', 'R1C1'}
     tagname = 'calcPr' class openpyxl.workbook.properties.FileVersion(appName=None,	lastEdited=None,	lowestEdited=None,	rupBuild=None,	code-
Name=None)
基类：openpyxl.descriptors.serialisable.Serialisable
appName
    Values must be of type <class 'str'> codeName
lastEdited
Values must be of type <class 'str'>
lowestEdited
Values must be of type <class 'str'>
rupBuild
         Values must be of type <class 'str'> tagname = 'fileVersion' class openpyxl.workbook.properties.WorkbookProperties(date1904=None,	dateCompatibil-
	ity=None,	showObjects=None,
showBorderUnselectedTables=None, filterPrivacy=None,	promptedSolutions=None,	showInkAnnotation=None,	backupFile=None, saveExternalLinkValues=None,	updateLinks=None,	codeName=None, hidePivotFieldList=None,	showPivotChartFilter=None,	allowRefreshQuery=None,	publishItems=None, checkCompatibility=None, autoCompressPictures=None, refreshAllConnections=None,	defaultThemeVersion=None)
基类：openpyxl.descriptors.serialisable.Serialisable
allowRefreshQuery
Values must be of type <class 'bool'>
autoCompressPictures
Values must be of type <class 'bool'>
backupFile
Values must be of type <class 'bool'>
checkCompatibility
Values must be of type <class 'bool'>
codeName
Values must be of type <class 'str'>
date1904
Values must be of type <class 'bool'>
dateCompatibility
Values must be of type <class 'bool'>
defaultThemeVersion
Values must be of type <class 'int'>
filterPrivacy
Values must be of type <class 'bool'>
hidePivotFieldList
Values must be of type <class 'bool'>
promptedSolutions
Values must be of type <class 'bool'>
publishItems
Values must be of type <class 'bool'>
refreshAllConnections
Values must be of type <class 'bool'>
saveExternalLinkValues
Values must be of type <class 'bool'>
showBorderUnselectedTables
Values must be of type <class 'bool'>
showInkAnnotation
Values must be of type <class 'bool'>
showObjects
Value must be one of {'placeholders', 'all'}
showPivotChartFilter
    Values must be of type <class 'bool'> tagname = 'workbookPr'
updateLinks
Value must be one of {'never', 'userSet', 'always'} openpyxl.workbook.protection module
openpyxl.workbook.protection.DocumentSecurity openpyxl.workbook.protection.WorkbookProtection的别名 class openpyxl.workbook.protection.FileSharing(readOnlyRecommended=None,	userName=None,	reservationPassword=None, algorithmName=None,	hashValue=None, saltValue=None, spinCount=None)
基类：openpyxl.descriptors.serialisable.Serialisable
algorithmName
    Values must be of type <class 'str'> hashValue
readOnlyRecommended
    Values must be of type <class 'bool'> reservationPassword saltValue spinCount
    Values must be of type <class 'int'> tagname = 'fileSharing'
userName
Values must be of type <class 'str'>
class openpyxl.workbook.protection.WorkbookProtection(workbookPassword=None,	workbookPasswordCharacterSet=None, revisionsPassword=None,	revisionsPasswordCharacterSet=None, lockStructure=None,	lockWindows=None,	lockRevision=None, revisionsAlgorithmName=None, revisionsHashValue=None,	revisionsSaltValue=None,	revisionsSpinCount=None,	workbookAlgorithmName=None,	workbookHashValue=None,	workbookSaltValue=None,	workbookSpin-
Count=None)
基类：openpyxl.descriptors.serialisable.Serialisable
classmethod from_tree(node)
Don't hash passwords when deserialising from XML
lockRevision
Values must be of type <class 'bool'>
lockStructure
Values must be of type <class 'bool'>
lockWindows
Values must be of type <class 'bool'>
lock_revision
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
lock_structure
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
lock_windows
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
revision_password
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
revisionsAlgorithmName
    Values must be of type <class 'str'> revisionsHashValue
revisionsPassword
Return the revisions password value, regardless of hash.
revisionsPasswordCharacterSet
    Values must be of type <class 'str'> revisionsSaltValue revisionsSpinCount
Values must be of type <class 'int'>
set_revisions_password(value=", already_hashed=False) Set a revision password on this workbook.
set_workbook_password(value=", already_hashed=False) Set a password on this workbook.
tagname = 'workbookPr'
workbookAlgorithmName
Values must be of type <class 'str'>
workbookHashValue
workbookPassword
Return the workbook password value, regardless of hash.
workbookPasswordCharacterSet
    Values must be of type <class 'str'> workbookSaltValue workbookSpinCount
Values must be of type <class 'int'>
workbook_password
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
openpyxl.workbook.smart_tags module
class openpyxl.workbook.smart_tags.SmartTag(namespaceUri=None, name=None, url=None) 基类：openpyxl.descriptors.serialisable.Serialisable
name
Values must be of type <class 'str'>
namespaceUri
    Values must be of type <class 'str'> tagname = 'smartTagType'
url
Values must be of type <class 'str'>
class openpyxl.workbook.smart_tags.SmartTagList(smartTagType=()) 基类：openpyxl.descriptors.serialisable.Serialisable
smartTagType
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'smartTagTypes' class openpyxl.workbook.smart_tags.SmartTagProperties(embed=None, show=None) 基类：openpyxl.descriptors.serialisable.Serialisable
embed
Values must be of type <class 'bool'>
show
    Value must be one of {'all', 'noIndicator'} tagname = 'smartTagPr'
openpyxl.workbook.views module
class openpyxl.workbook.views.BookView(visibility='visible',	minimized=False,	showHorizontalScroll=True, showVerticalScroll=True, showSheetTabs=True, xWindow=None, yWindow=None, windowWidth=None, windowHeight=None, tabRatio=600, firstSheet=0,	activeTab=0,	autoFilterDateGrouping=True, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
activeTab
Values must be of type <class 'int'>
autoFilterDateGrouping
Values must be of type <class 'bool'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
firstSheet
Values must be of type <class 'int'>
minimized
Values must be of type <class 'bool'>
showHorizontalScroll
Values must be of type <class 'bool'>
showSheetTabs
Values must be of type <class 'bool'>
showVerticalScroll
Values must be of type <class 'bool'>
tabRatio
    Values must be of type <class 'int'> tagname = 'workbookView'
visibility
Value must be one of {'visible', 'hidden', 'veryHidden'}
windowHeight
Values must be of type <class 'int'>
windowWidth
Values must be of type <class 'int'>
xWindow
Values must be of type <class 'int'>
yWindow
Values must be of type <class 'int'>
class openpyxl.workbook.views.CustomWorkbookView(name=None,	guid=None,	autoUpdate=None,	mergeInterval=None, changesSavedWin=None, onlySync=None, personalView=None,	includePrintSettings=None,	includeHiddenRowCol=None,	maximized=None,	minimized=None, showHorizontalScroll=None, showVerticalScroll=None,	showSheetTabs=None,	xWindow=None,	yWindow=None,	windowWidth=None,	windowHeight=None,	tabRatio=None, activeSheetId=None,	showFormulaBar=None,	showStatusbar=None,	showComments='commIndicator',	showObjects='all', extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
activeSheetId
Values must be of type <class 'int'>
autoUpdate
Values must be of type <class 'bool'>
changesSavedWin
Values must be of type <class 'bool'>
extLst
    Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> guid
includeHiddenRowCol
Values must be of type <class 'bool'>
includePrintSettings
Values must be of type <class 'bool'>
maximized
Values must be of type <class 'bool'>
mergeInterval
Values must be of type <class 'int'>
minimized
Values must be of type <class 'bool'>
name
Values must be of type <class 'str'>
onlySync
Values must be of type <class 'bool'>
personalView
Values must be of type <class 'bool'>
showComments
Value must be one of {'commIndicator', 'commIndAndComment', 'commNone'}
showFormulaBar
Values must be of type <class 'bool'>
showHorizontalScroll
Values must be of type <class 'bool'>
showObjects
Value must be one of {'placeholders', 'all'}
showSheetTabs
Values must be of type <class 'bool'>
showStatusbar
Values must be of type <class 'bool'>
showVerticalScroll
Values must be of type <class 'bool'>
tabRatio
    Values must be of type <class 'int'> tagname = 'customWorkbookView'
windowHeight
Values must be of type <class 'int'>
windowWidth
Values must be of type <class 'int'>
xWindow
Values must be of type <class 'int'>
yWindow
Values must be of type <class 'int'>
openpyxl.workbook.web module
class openpyxl.workbook.web.WebPublishObject(id=None, divId=None, sourceObject=None, destinationFile=None, title=None, autoRepublish=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoRepublish
Values must be of type <class 'bool'>
destinationFile
Values must be of type <class 'str'>
divId
Values must be of type <class 'str'>
id
Values must be of type <class 'int'>
sourceObject
    Values must be of type <class 'str'> tagname = 'webPublishingObject'
title
Values must be of type <class 'str'>
class openpyxl.workbook.web.WebPublishObjectList(count=None, webPublishObject=()) 基类：openpyxl.descriptors.serialisable.Serialisable count tagname = 'webPublishingObjects'
webPublishObject
A sequence (list or tuple) that may only contain objects of the declared type
class openpyxl.workbook.web.WebPublishing(css=None,	thicket=None,	longFileNames=None, vml=None,	allowPng=None,	targetScreenSize='800x600',	dpi=None,	codePage=None,
characterSet=None)
基类：openpyxl.descriptors.serialisable.Serialisable
allowPng
Values must be of type <class 'bool'>
characterSet
Values must be of type <class 'str'>
codePage
Values must be of type <class 'int'>
css
Values must be of type <class 'bool'>
dpi
Values must be of type <class 'int'>
longFileNames
    Values must be of type <class 'bool'> tagname = 'webPublishing'
targetScreenSize
Value must be one of {'1152x900', '1280x1024', '720x512', '1024x768', '544x376',
'1152x882', '1600x1200', '640x480', '1920x1200', '800x600', '1800x1440'}
thicket
Values must be of type <class 'bool'>
vml
Values must be of type <class 'bool'>
openpyxl.workbook.workbook module
Workbook is the top-level container for all document information.
class openpyxl.workbook.workbook.Workbook(write_only=False, iso_dates=False) 基类：object
Workbook is the container for all other parts of the document.
active
Get the currently active sheet or None
        Type openpyxl.worksheet.worksheet.Worksheet add_named_range(named_range)
Add an existing named_range to the list of named_ranges.

注解: Deprecated: Use workbook.defined_names.append

add_named_style(style)
Add a named style
chartsheets
A list of Chartsheets in this workbook
Type list of openpyxl.chartsheet.chartsheet.Chartsheet
close()
Close workbook file if open. Only affects read-only and write-only modes.
copy_worksheet(from_worksheet)
Copy an existing worksheet in the current workbook
警告: This function cannot copy worksheets between workbooks. worksheets can only be copied within the workbook that they belong
        参数 from_worksheet - the worksheet to be copied from 返回 copy of the initial worksheet create_chartsheet(title=None, index=None) create_named_range(name, worksheet=None, value=None, scope=None)
Create a new named_range on a worksheet
create_sheet(title=None, index=None)
Create a worksheet (at an optional index).
参数
• title (str) - optional title of the sheet
• index (int) - optional position at which the sheet will be inserted
data_only excel_base_date get_index(worksheet)
Return the index of the worksheet.

注解: Deprecated: Use wb.index(worksheet)

get_named_range(name)
Return the range specified by name.

注解: Deprecated: Use workbook.defined_names[name]

get_named_ranges()
Return all named ranges

注解: Deprecated: Use workbook.defined_names.definedName

get_sheet_by_name(name)
Returns a worksheet by its name. param name the name of the worksheet to look for type name string

注解: Deprecated: Use wb[sheetname]

get_sheet_names()

注解: Deprecated: Use wb.sheetnames

index(worksheet)
Return the index of a worksheet.
mime_type
The mime type is determined by whether a workbook is a template or not and whether it contains macros or not. Excel requires the file extension to match but openpyxl does not enforce this.
move_sheet(sheet, offset=0)
Move a sheet or sheetname
named_styles
    List available named styles path = '/xl/workbook.xml' read_only remove(worksheet)
    Remove worksheet from this workbook. remove_named_range(named_range) Remove a named_range from this workbook.

注解: Deprecated: Use del workbook.defined_names[name]

remove_sheet(worksheet)
Remove worksheet from this workbook.

注解: Deprecated: Use wb.remove(worksheet) or del wb[sheetname]

save(filename)
	Save the current workbook under the given filename.	Use this function instead of using an
ExcelWriter.
警告: When creating your workbook using write_only set to True, you will only be able to call this function once. Subsequents attempts to modify or save the file will raise an openpyxl.shared.exc.WorkbookAlreadySaved exception.
sheetnames
Returns the list of the names of worksheets in this workbook.
Names are returned in the worksheets order.
Type list of strings
style_names
    List of named styles template = False
worksheets
A list of sheets in this workbook
        Type list of openpyxl.worksheet.worksheet.Worksheet write_only
openpyxl.worksheet package Submodules
openpyxl.worksheet.cell_range module
class openpyxl.worksheet.cell_range.CellRange(range_string=None,min_col=None,min_row=None,max_col=None,max_row=None, title=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Represents a range in a sheet: title and coordinates.
This object is used to perform operations on ranges, like:
• shift, expand or shrink
• union/intersection with another sheet range,
We can check whether a range is:
• equal or not equal to another,
• disjoint of another,
• contained in another.
We can get:
• the size of a range.
• the range bounds (vertices)
• the coordinates,
• the string representation,
bottom
A list of cell coordinates that comprise the bottom of the range
bounds
    Vertices of the range as a tuple cells
cols
Return cell coordinates as columns
coord
    Excel-style representation of the range expand(right=0, down=0, left=0, up=0)
Expand the range by the dimensions provided.
参数
• right (int) - expand range to the right by this number of cells
• down (int) - expand range down by this number of cells
• left (int) - expand range to the left by this number of cells
• up (int) - expand range up by this number of cells
intersection(other)
Return a new range with cells common to this range and other 参数 other (openpyxl.worksheet.cell_range.CellRange) - Other sheet range. 返回 the intersecting sheet range.
Raise ValueError if the other range doesn't intersect with this range. isdisjoint(other)
Return True if this range has no cell in common with other. Ranges are disjoint if and only if their intersection is the empty range.
参数 other (openpyxl.worksheet.cell_range.CellRange) - Other sheet range.
返回 True if the range has no cells in common with other.
issubset(other)
Test whether every cell in this range is also in other. 参数 other (openpyxl.worksheet.cell_range.CellRange) - Other sheet range 返回 True if range <= other.
issuperset(other)
Test whether every cell in other is in this range.
参数 other (openpyxl.worksheet.cell_range.CellRange) - Other sheet range 返回 True if range >= other (or other in range).
left
A list of cell coordinates that comprise the left-side of the range
max_col
Values must be of type <class 'int'>
max_row
Values must be of type <class 'int'>
min_col
Values must be of type <class 'int'>
min_row
Values must be of type <class 'int'>
right
A list of cell coordinates that comprise the right-side of the range
rows
    Return cell coordinates as rows shift(col_shift=0, row_shift=0)
Shift the focus of the range according to the shift values (col_shift, row_shift).
参数
• col_shift (int) - number of columns to be moved by, can be negative
• row_shift (int) - number of rows to be moved by, can be negative
Raise ValueError if any row or column index < 1
shrink(right=0, bottom=0, left=0, top=0)
Shrink the range by the dimensions provided.
参数
• right (int) - shrink range from the right by this number of cells
• down (int) - shrink range from the top by this number of cells
• left (int) - shrink range from the left by this number of cells
• up (int) - shrink range from the bottown by this number of cells
size
    Return the size of the range as a dictionary of rows and columns. top
A list of cell coordinates that comprise the top of the range
union(other)
Return the minimal superset of this range and other. This new range will contain all cells from this range, other, and any additional cells required to form a rectangular CellRange. 参数 other (openpyxl.worksheet.cell_range.CellRange) - Other sheet range.
返回 a CellRange that is a superset of this and other.
class openpyxl.worksheet.cell_range.MultiCellRange(ranges=()) 基类：openpyxl.descriptors.Strict add(coord)
Add a cell coordinate or CellRange
ranges
    A sequence (list or tuple) that may only contain objects of the declared type remove(coord)
openpyxl.worksheet.cell_watch module
class openpyxl.worksheet.cell_watch.CellWatch(r=None) 基类：openpyxl.descriptors.serialisable.Serialisable
r
         Values must be of type <class 'str'> tagname = 'cellWatch' class openpyxl.worksheet.cell_watch.CellWatches(cellWatch=()) 基类：openpyxl.descriptors.serialisable.Serialisable cellWatch
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'cellWatches'
openpyxl.worksheet.controls module
class openpyxl.worksheet.controls.Control(controlPr=None, shapeId=None, name=None) 基类：openpyxl.descriptors.serialisable.Serialisable
controlPr
Values must be of type <class 'openpyxl.worksheet.controls.ControlProperty'>
name
Values must be of type <class 'str'>
shapeId
         Values must be of type <class 'int'> tagname = 'control' class openpyxl.worksheet.controls.ControlProperty(anchor=None,	locked=True,	defaultSize=True, _print=True, disabled=False, recalcAlways=False,	uiObject=False, autoFill=True,	autoLine=True,	autoPict=True,	macro=None,	altText=None,	linkedCell=None,	list-
FillRange=None, cf='pict', id=None)
基类：openpyxl.descriptors.serialisable.Serialisable
altText
Values must be of type <class 'str'>
anchor
Values must be of type <class 'openpyxl.worksheet.ole.ObjectAnchor'>
autoFill
Values must be of type <class 'bool'>
autoLine
Values must be of type <class 'bool'>
autoPict
Values must be of type <class 'bool'>
cf
Values must be of type <class 'str'>
defaultSize
Values must be of type <class 'bool'>
disabled
Values must be of type <class 'bool'>
id
Values must be of type <class 'str'>
linkedCell
Values must be of type <class 'str'>
listFillRange
Values must be of type <class 'str'>
locked
Values must be of type <class 'bool'>
macro
Values must be of type <class 'str'>
recalcAlways
    Values must be of type <class 'bool'> tagname = 'controlPr'
uiObject
Values must be of type <class 'bool'>
class openpyxl.worksheet.controls.Controls(control=()) 基类：openpyxl.descriptors.serialisable.Serialisable
control
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'controls'
openpyxl.worksheet.copier module
class openpyxl.worksheet.copier.WorksheetCopy(source_worksheet, target_worksheet) 基类：object
Copy the values, styles, dimensions, merged cells, margins, and print/page setup from one worksheet to another within the same workbook. copy_worksheet()
openpyxl.worksheet.custom module
class openpyxl.worksheet.custom.CustomProperties(customPr=()) 基类：openpyxl.descriptors.serialisable.Serialisable
customPr
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'customProperties' class openpyxl.worksheet.custom.CustomProperty(name=None) 基类：openpyxl.descriptors.serialisable.Serialisable
name
    Values must be of type <class 'str'> tagname = 'customProperty'
openpyxl.worksheet.datavalidation module
class openpyxl.worksheet.datavalidation.DataValidation(type=None,	formula1=None,	formula2=None,	allow_blank=False, showErrorMessage=True,	showInputMessage=True,	showDropDown=None,	allowBlank=None, sqref=(),	promptTitle=None, errorStyle=None,	error=None, prompt=None,	errorTitle=None, imeMode=None, operator=None)
基类：openpyxl.descriptors.serialisable.Serialisable add(cell)
Adds a cell or cell coordinate to this validator
allowBlank
Values must be of type <class 'bool'>
allow_blank
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
cells
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
error
Values must be of type <class 'str'>
errorStyle
Value must be one of {'information', 'stop', 'warning'}
errorTitle
Values must be of type <class 'str'>
formula1
Values must be of type <class 'str'>
formula2
Values must be of type <class 'str'>
hide_drop_down
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
imeMode
Value must be one of {'fullAlpha', 'fullKatakana', 'noControl', 'off', 'fullHangul',
'halfKatakana', 'hiragana', 'disabled', 'halfAlpha', 'halfHangul', 'on'}
operator
Value must be one of {'lessThanOrEqual', 'greaterThan', 'notEqual', 'notBetween',
'between', 'equal', 'lessThan', 'greaterThanOrEqual'}
prompt
Values must be of type <class 'str'>
promptTitle
Values must be of type <class 'str'>
ranges
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
showDropDown
Values must be of type <class 'bool'>
showErrorMessage
Values must be of type <class 'bool'>
showInputMessage
Values must be of type <class 'bool'>
sqref
    Values must be of type <class 'openpyxl.worksheet.cell_range.MultiCellRange'> tagname = 'dataValidation'
type
Value must be one of {'whole', 'textLength', 'custom', 'list', 'decimal', 'date',
'time'}
validation_type
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.worksheet.datavalidation.DataValidationList(disablePrompts=None,	xWindow=None,	yWindow=None, count=None,	dataValida-
tion=())
基类：openpyxl.descriptors.serialisable.Serialisable append(dv) count
dataValidation
A sequence (list or tuple) that may only contain objects of the declared type
disablePrompts
    Values must be of type <class 'bool'> tagname = 'dataValidations' to_tree(tagname=None)
Need to skip validations that have no cell ranges
xWindow
Values must be of type <class 'int'>
yWindow
Values must be of type <class 'int'>
openpyxl.worksheet.datavalidation.collapse_cell_addresses(cells, input_ranges=())
Collapse a collection of cell co-ordinates down into an optimal range or collection of ranges.
E.g. Cells A1, A2, A3, B1, B2 and B3 should have the data-validation object applied, attempt to collapse down to a single range, A1:B3.
     Currently only collapsing contiguous vertical ranges (i.e. above example results in A1:A3 B1:B3). openpyxl.worksheet.datavalidation.expand_cell_ranges(range_string)
Expand cell ranges to a sequence of addresses. Reverse of collapse_cell_addresses Eg. converts"A1:A2
B1:B2"to (A1, A2, B1, B2)
openpyxl.worksheet.dimensions module
class openpyxl.worksheet.dimensions.ColumnDimension(worksheet,	index='A',	width=13, bestFit=False,	hidden=False,	outlineLevel=0, outline_level=None, collapsed=False, style=None, min=None, max=None,	customWidth=False, visible=None, auto_size=None)
基类：openpyxl.worksheet.dimensions.Dimension
Information about the display properties of a column.

auto_size
(eg.
bestFit
Values must be of type <class 'bool'>
collapsed
Values must be of type <class 'bool'>
customWidth
Always true if there is a width for the column
index
Values must be of type <class 'str'>
max
Values must be of type <class 'int'>
min
Values must be of type <class 'int'>
reindex()
    Set boundaries for column definition to_tree()
width
Values must be of type <class 'float'>
class openpyxl.worksheet.dimensions.Dimension(index, hidden, outlineLevel, collapsed, worksheet, visible=True, style=None)
基类：openpyxl.descriptors.Strict, openpyxl.styles.styleable.StyleableObject
Information about the display properties of a row or column.
collapsed
Values must be of type <class 'bool'>
hidden
Values must be of type <class 'bool'>
index
Values must be of type <class 'int'>
outlineLevel
Values must be of type <class 'int'>
outline_level
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
style
(eg.
class openpyxl.worksheet.dimensions.DimensionHolder(worksheet,	reference='index',	default_factory=None)
基类：openpyxl.utils.bound_dictionary.BoundDictionary Allow columns to be grouped group(start, end=None, outline_level=1, hidden=False) allow grouping a range of consecutive rows or columns together
参数
• start - first row or column to be grouped (mandatory)
• end - last row or column to be grouped (optional, default to start)
• outline_level - outline level
• hidden - should the group be hidden on workbook open or not
     to_tree() class openpyxl.worksheet.dimensions.RowDimension(worksheet,	index=0,	ht=None,	customHeight=None,	s=None,	customFormat=None, hidden=False, outlineLevel=0, outline_level=None,	collapsed=False, visible=None,	height=None,	r=None, spans=None,	thickBot=None,	thick-
Top=None, **kw)
基类：openpyxl.worksheet.dimensions.Dimension
Information about the display properties of a row.
customFormat
Always true if there is a style for the row
customHeight
Always true if there is a height for the row
height
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
ht
Values must be of type <class 'float'>
r
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
s
(eg.
thickBot
Values must be of type <class 'bool'>
thickTop
         Values must be of type <class 'bool'> class openpyxl.worksheet.dimensions.SheetDimension(ref=None) 基类：openpyxl.descriptors.serialisable.Serialisable boundaries
ref
    Values must be of type <class 'str'> tagname = 'dimension'
class openpyxl.worksheet.dimensions.SheetFormatProperties(baseColWidth=8,default-ColWidth=None,de-faultRowHeight=15,cus-tomHeight=None,zero-	Height=None,	thickTop=None,
thickBottom=None,out-lineLevelRow=None,out-lineLevelCol=None)
基类：openpyxl.descriptors.serialisable.Serialisable
baseColWidth
Values must be of type <class 'int'>
customHeight
Values must be of type <class 'bool'>
defaultColWidth
Values must be of type <class 'float'>
defaultRowHeight
Values must be of type <class 'float'>
outlineLevelCol
Values must be of type <class 'int'>
outlineLevelRow
    Values must be of type <class 'int'> tagname = 'sheetFormatPr'

thickBottom
Values must be of type <class 'bool'>
thickTop
Values must be of type <class 'bool'>
zeroHeight
Values must be of type <class 'bool'>
openpyxl.worksheet.drawing module
class openpyxl.worksheet.drawing.Drawing(id=None) 基类：openpyxl.descriptors.serialisable.Serialisable
id
    Values must be of type <class 'str'> tagname = 'drawing'
openpyxl.worksheet.errors module
class openpyxl.worksheet.errors.Extension(uri=None) 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'extension'
uri
Values must be of type <class 'str'>
class openpyxl.worksheet.errors.ExtensionList(ext=()) 基类：openpyxl.descriptors.serialisable.Serialisable
ext
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'extensionList' class openpyxl.worksheet.errors.IgnoredError(sqref=None,	evalError=False,	twoDigitTextYear=False,	numberStoredAsText=False, formula=False, formulaRange=False, unlockedFormula=False,	emptyCellReference=False, listDataValidation=False,	calculatedColumn=False)
基类：openpyxl.descriptors.serialisable.Serialisable
calculatedColumn
Values must be of type <class 'bool'>
emptyCellReference
Values must be of type <class 'bool'>
evalError
Values must be of type <class 'bool'>
formula
Values must be of type <class 'bool'>
formulaRange
Values must be of type <class 'bool'>
listDataValidation
Values must be of type <class 'bool'>
numberStoredAsText
    Values must be of type <class 'bool'> sqref openpyxl.descriptors.excel.CellRange的别名 tagname = 'ignoredError'
twoDigitTextYear
Values must be of type <class 'bool'>
unlockedFormula
Values must be of type <class 'bool'>
class openpyxl.worksheet.errors.IgnoredErrors(ignoredError=(), extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.worksheet.errors.ExtensionList'>
ignoredError
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'ignoredErrors'
openpyxl.worksheet.filters module
class openpyxl.worksheet.filters.AutoFilter(ref=None,	filterColumn=(),	sortState=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable add_filter_column(col_id, vals, blank=False) Add row filter for specified column.
参数
• col_id (int) - Zero-origin column id. 0 means first column.
• vals (str[]) - Value list to show.
• blank (bool) - Show rows that have blank cell if True (default=''False'')
add_sort_condition(ref, descending=False)
Add sort condition for cpecified range of cells.
参数
• ref (string) - range of the cells (e.g. 'A2:A150')
• descending (bool) - Descending sort order (default=''False'')
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
filterColumn
    A sequence (list or tuple) that may only contain objects of the declared type ref
sortState
         Values must be of type <class 'openpyxl.worksheet.filters.SortState'> tagname = 'autoFilter' class openpyxl.worksheet.filters.ColorFilter(dxfId=None, cellColor=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cellColor
Values must be of type <class 'bool'>
dxfId
         Values must be of type <class 'int'> tagname = 'colorFilter' class openpyxl.worksheet.filters.CustomFilter(operator=None, val=None) 基类：openpyxl.descriptors.serialisable.Serialisable
operator
Value must be one of {'lessThanOrEqual','greaterThan','notEqual','equal','lessThan'
    , 'greaterThanOrEqual'} tagname = 'customFilter'
val
Values must be of type <class 'str'>
class openpyxl.worksheet.filters.CustomFilters(_and=None, customFilter=()) 基类：openpyxl.descriptors.serialisable.Serialisable
customFilter
A sequence (list or tuple) that may only contain objects of the declared type

     tagname = 'customFilters' class openpyxl.worksheet.filters.DateGroupItem(year=None, month=None, day=None,
	hour=None,	minute=None,	second=None,
dateTimeGrouping=None)
基类：openpyxl.descriptors.serialisable.Serialisable
dateTimeGrouping
Value must be one of {'minute', 'day', 'hour', 'month', 'second', 'year'}
day
Values must be of type <class 'float'>
hour
Values must be of type <class 'float'>
minute
Values must be of type <class 'float'>
month
Values must be of type <class 'float'>
second
    Values must be of type <class 'int'> tagname = 'dateGroupItem'
year
Values must be of type <class 'int'>
class openpyxl.worksheet.filters.DynamicFilter(type=None, val=None, valIso=None, max-
Val=None, maxValIso=None)
基类：openpyxl.descriptors.serialisable.Serialisable
maxVal
Values must be of type <class 'float'>
maxValIso
    Values must be of type <class 'datetime.datetime'> tagname = 'dynamicFilter'
type
Value must be one of {'Q3', 'lastMonth', 'M5', 'lastYear', 'lastQuarter', 'null',
'Q4', 'tomorrow', 'M3', 'nextQuarter', 'M12', 'today', 'thisWeek', 'thisYear'
, 'yearToDate', 'M10', 'Q1', 'M7', 'M2', 'belowAverage', 'nextYear', 'M8'
, 'M11', 'thisMonth', 'M4', 'M6', 'nextWeek', 'thisQuarter', 'Q2', 'M1',
'lastWeek', 'M9', 'aboveAverage', 'yesterday', 'nextMonth'}
val
Values must be of type <class 'float'>
8.2.
valIso
Values must be of type <class 'datetime.datetime'>
class openpyxl.worksheet.filters.FilterColumn(colId=None, hiddenButton=None, showButton=None, filters=None, top10=None, customFilters=None, dynamicFilter=None, colorFilter=None, iconFilter=None, extLst=None, blank=None, vals=None)
基类：openpyxl.descriptors.serialisable.Serialisable
colId
Values must be of type <class 'int'>
col_id
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
colorFilter
Values must be of type <class 'openpyxl.worksheet.filters.ColorFilter'>
customFilters
Values must be of type <class 'openpyxl.worksheet.filters.CustomFilters'>
dynamicFilter
Values must be of type <class 'openpyxl.worksheet.filters.DynamicFilter'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
filters
Values must be of type <class 'openpyxl.worksheet.filters.Filters'>
hiddenButton
Values must be of type <class 'bool'>
iconFilter
Values must be of type <class 'openpyxl.worksheet.filters.IconFilter'>
showButton
    Values must be of type <class 'bool'> tagname = 'filterColumn'
top10
Values must be of type <class 'openpyxl.worksheet.filters.Top10'>
class openpyxl.worksheet.filters.Filters(blank=None, calendarType=None, filter=(), date-
GroupItem=())
基类：openpyxl.descriptors.serialisable.Serialisable
blank
Values must be of type <class 'bool'>
calendarType
Value must be one of {'gregorianUs','thai','gregorianXlitFrench','gregorian','japan'
, 'gregorianMeFrench', 'hebrew', 'korea', 'hijri', 'saka', 'gregorianXlitEnglish',
'gregorianArabic', 'taiwan'}
dateGroupItem
A sequence (list or tuple) that may only contain objects of the declared type
filter
         A sequence of primitive types that are stored as a single attribute. "val"is the default attribute tagname = 'filters' class openpyxl.worksheet.filters.IconFilter(iconSet=None, iconId=None) 基类：openpyxl.descriptors.serialisable.Serialisable
iconId
Values must be of type <class 'int'>
iconSet
Value must be one of {'5Quarters','4RedToBlack','5Arrows','3ArrowsGray','4ArrowsGray'
, '3Arrows', '5ArrowsGray', '3Symbols', '4TrafficLights', '3Signs', '5Rating',
        '3TrafficLights2', '3Flags', '3TrafficLights1', '4Rating', '4Arrows', '3Symbols2'} tagname = 'iconFilter' class openpyxl.worksheet.filters.SortCondition(ref=None, descending=None, sortBy=None,
	customList=None,	dxfId=None,	icon-
Set=None, iconId=None)
基类：openpyxl.descriptors.serialisable.Serialisable
customList
Values must be of type <class 'str'>
descending
Values must be of type <class 'bool'>
dxfId
Values must be of type <class 'int'>
iconId
Values must be of type <class 'int'>
iconSet
Value must be one of {'5Quarters','4RedToBlack','5Arrows','3ArrowsGray','4ArrowsGray'
, '3Arrows', '5ArrowsGray', '3Symbols', '4TrafficLights', '3Signs', '5Rating',
'3TrafficLights2', '3Flags', '3TrafficLights1', '4Rating', '4Arrows', '3Symbols2'}
ref
sortBy
         Value must be one of {'value', 'icon', 'cellColor', 'fontColor'} tagname = 'sortCondition' class openpyxl.worksheet.filters.SortState(columnSort=None,	caseSensitive=None,	sortMethod=None,	ref=None,	sortCondition=(), extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
caseSensitive
Values must be of type <class 'bool'>
columnSort
Values must be of type <class 'bool'>
extLst
    Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'> ref
sortCondition
A sequence (list or tuple) that may only contain objects of the declared type
sortMethod
         Value must be one of {'stroke', 'pinYin'} tagname = 'sortState' class openpyxl.worksheet.filters.Top10(top=None, percent=None, val=None, filterVal=None) 基类：openpyxl.descriptors.serialisable.Serialisable
filterVal
Values must be of type <class 'float'>
percent
    Values must be of type <class 'bool'> tagname = 'top10'
top
Values must be of type <class 'bool'>
val
Values must be of type <class 'float'>
openpyxl.worksheet.header_footer module
class openpyxl.worksheet.header_footer.HeaderFooter(differentOddEven=None,	differentFirst=None,	scaleWithDoc=None, alignWithMargins=None,	oddHeader=None,	oddFooter=None, evenHeader=None, evenFooter=None, firstHeader=None, firstFooter=None)
基类：openpyxl.descriptors.serialisable.Serialisable
alignWithMargins
Values must be of type <class 'bool'>
differentFirst
Values must be of type <class 'bool'>
differentOddEven
Values must be of type <class 'bool'>
evenFooter
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooterItem'>
evenHeader
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooterItem'>
firstFooter
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooterItem'>
firstHeader
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooterItem'>
oddFooter
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooterItem'>
oddHeader
Values must be of type <class 'openpyxl.worksheet.header_footer.HeaderFooterItem'>
scaleWithDoc
         Values must be of type <class 'bool'> tagname = 'headerFooter' class openpyxl.worksheet.header_footer.HeaderFooterItem(left=None,	right=None,	center=None)
基类：openpyxl.descriptors.Strict Header or footer item
center
Values must be of type <class 'openpyxl.worksheet.header_footer._HeaderFooterPart'>
centre
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
    (eg. "type") or a more descriptve name is desired (eg. "underline"for "u") classmethod from_tree(node)
left
Values must be of type <class 'openpyxl.worksheet.header_footer._HeaderFooterPart'>
right
Values must be of type <class 'openpyxl.worksheet.header_footer._HeaderFooterPart'>
to_tree(tagname)
Return as XML node
openpyxl.worksheet.hyperlink module
class openpyxl.worksheet.hyperlink.Hyperlink(ref=None, location=None, tooltip=None, display=None, id=None, target=None)
基类：openpyxl.descriptors.serialisable.Serialisable
display
Values must be of type <class 'str'>
id
Values must be of type <class 'str'>
location
Values must be of type <class 'str'>
ref
    Values must be of type <class 'str'> tagname = 'hyperlink'
target
Values must be of type <class 'str'>
tooltip
Values must be of type <class 'str'>
class openpyxl.worksheet.hyperlink.HyperlinkList(hyperlink=()) 基类：openpyxl.descriptors.serialisable.Serialisable append(value)
hyperlink
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'hyperlinks'
openpyxl.worksheet.merge module
class openpyxl.worksheet.merge.MergeCell(ref=None) 基类：openpyxl.worksheet.cell_range.CellRange
ref
         Excel-style representation of the range tagname = 'mergeCell' class openpyxl.worksheet.merge.MergeCells(count=None, mergeCell=()) 基类：openpyxl.descriptors.serialisable.Serialisable count
mergeCell
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'mergeCells' class openpyxl.worksheet.merge.MergedCellRange(worksheet, coord) 基类：openpyxl.worksheet.cell_range.CellRange
MergedCellRange stores the border information of a merged cell in the top left cell of the merged cell. The remaining cells in the merged cell are stored as MergedCell objects and get their border information from the upper left cell.
format()
Each cell of the merged cell is created as MergedCell if it does not already exist.
The MergedCells at the edge of the merged cell gets its borders from the upper left cell.
• The top MergedCells get the top border from the top left cell.
• The bottom MergedCells get the bottom border from the top left cell.
• The left MergedCells get the left border from the top left cell.
• The right MergedCells get the right border from the top left cell.
openpyxl.worksheet.ole module
class openpyxl.worksheet.ole.ObjectAnchor(_from=None,	to=None,	moveWithCells=False, sizeWithCells=False, z_order=None)
基类：openpyxl.descriptors.serialisable.Serialisable
moveWithCells
Values must be of type <class 'bool'>
sizeWithCells
Values must be of type <class 'bool'>
tagname = 'anchor'
to
Values must be of type <class 'openpyxl.drawing.spreadsheet_drawing.AnchorMarker'>
z_order
Values must be of type <class 'int'>
class openpyxl.worksheet.ole.ObjectPr(anchor=None, locked=True, defaultSize=True, _print=True, disabled=False, uiObject=False, autoFill=True, autoLine=True, autoPict=True,
macro=None, altText=None, dde=False)
基类：openpyxl.descriptors.serialisable.Serialisable
altText
Values must be of type <class 'str'>
anchor
Values must be of type <class 'openpyxl.worksheet.ole.ObjectAnchor'>
autoFill
Values must be of type <class 'bool'>
autoLine
Values must be of type <class 'bool'>
autoPict
Values must be of type <class 'bool'>
dde
Values must be of type <class 'bool'>
defaultSize
Values must be of type <class 'bool'>
disabled
Values must be of type <class 'bool'>
locked
Values must be of type <class 'bool'>
macro
    Values must be of type <class 'str'> tagname = 'objectPr'
uiObject
Values must be of type <class 'bool'>
class openpyxl.worksheet.ole.OleObject(objectPr=None,	progId=None,
dvAspect='DVASPECT_CONTENT',	link=None, oleUpdate=None, autoLoad=False, shapeId=None) 基类：openpyxl.descriptors.serialisable.Serialisable
autoLoad
Values must be of type <class 'bool'>
dvAspect
Value must be one of {'DVASPECT_ICON', 'DVASPECT_CONTENT'}
link
Values must be of type <class 'str'>
objectPr
Values must be of type <class 'openpyxl.worksheet.ole.ObjectPr'>
oleUpdate
Value must be one of {'OLEUPDATE_ONCALL', 'OLEUPDATE_ALWAYS'}
progId
Values must be of type <class 'str'>
shapeId
         Values must be of type <class 'int'> tagname = 'oleObject' class openpyxl.worksheet.ole.OleObjects(oleObject=()) 基类：openpyxl.descriptors.serialisable.Serialisable
oleObject
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'oleObjects'
openpyxl.worksheet.page module
class openpyxl.worksheet.page.PageMargins(left=0.75,	right=0.75,	top=1,	bottom=1, header=0.5, footer=0.5)
基类：openpyxl.descriptors.serialisable.Serialisable
Information about page margins for view/print layouts. Standard values (in inches) left, right = 0.75 top, bottom = 1 header, footer = 0.5
bottom
Values must be of type <class 'float'>
footer
Values must be of type <class 'float'>
header
Values must be of type <class 'float'>
left
Values must be of type <class 'float'>
right
    Values must be of type <class 'float'> tagname = 'pageMargins'
top
Values must be of type <class 'float'>
class openpyxl.worksheet.page.PrintOptions(horizontalCentered=None,	verticalCen-
	tered=None,	headings=None,	gridLines=None,
gridLinesSet=None)
基类：openpyxl.descriptors.serialisable.Serialisable Worksheet print options
gridLines
Values must be of type <class 'bool'>
gridLinesSet
Values must be of type <class 'bool'>
headings
Values must be of type <class 'bool'>
horizontalCentered
    Values must be of type <class 'bool'> tagname = 'printOptions'
verticalCentered
Values must be of type <class 'bool'>
class openpyxl.worksheet.page.PrintPageSetup(worksheet=None,	orientation=None,	paperSize=None,	scale=None,	fitToHeight=None, fitToWidth=None, firstPageNumber=None, useFirstPageNumber=None,	paperHeight=None, paperWidth=None, pageOrder=None, usePrinterDefaults=None,	blackAndWhite=None, draft=None,	cellComments=None,	errors=None,	horizontalDpi=None,	verticalDpi=None, copies=None, id=None)
基类：openpyxl.descriptors.serialisable.Serialisable Worksheet print page setup autoPageBreaks
blackAndWhite
Values must be of type <class 'bool'>
cellComments
Value must be one of {'asDisplayed', 'atEnd'}
copies
Values must be of type <class 'int'>
draft
Values must be of type <class 'bool'>
errors
Value must be one of {'NA', 'blank', 'dash', 'displayed'}
firstPageNumber
Values must be of type <class 'int'>
fitToHeight
    Values must be of type <class 'int'> fitToPage
fitToWidth
Values must be of type <class 'int'>
classmethod from_tree(node)
Create object from XML
horizontalDpi
Values must be of type <class 'int'>
id
Values must be of type <class 'str'>
orientation
Value must be one of {'default', 'portrait', 'landscape'}
pageOrder
    Value must be one of {'overThenDown', 'downThenOver'} paperHeight
paperSize
    Values must be of type <class 'int'> paperWidth
scale
Values must be of type <class 'int'>
sheet_properties
Proxy property
tagname = 'pageSetup'
useFirstPageNumber
Values must be of type <class 'bool'>
usePrinterDefaults
Values must be of type <class 'bool'>
verticalDpi
Values must be of type <class 'int'>
openpyxl.worksheet.pagebreak module
class openpyxl.worksheet.pagebreak.Break(id=0, min=0, max=16383, man=True, pt=None) 基类：openpyxl.descriptors.serialisable.Serialisable
id
Values must be of type <class 'int'>
man
Values must be of type <class 'bool'>
max
Values must be of type <class 'int'>
min
Values must be of type <class 'int'>
pt
         Values must be of type <class 'bool'> tagname = 'brk' class openpyxl.worksheet.pagebreak.ColBreak(count=None, manualBreakCount=None, brk=()) 基类：openpyxl.worksheet.pagebreak.RowBreak
brk
         A sequence (list or tuple) that may only contain objects of the declared type count manualBreakCount tagname = 'colBreaks' openpyxl.worksheet.pagebreak.PageBreak openpyxl.worksheet.pagebreak.RowBreak的别名 class openpyxl.worksheet.pagebreak.RowBreak(count=None, manualBreakCount=None, brk=()) 基类：openpyxl.descriptors.serialisable.Serialisable
append(brk=None)
Add a page break
brk
    A sequence (list or tuple) that may only contain objects of the declared type count manualBreakCount tagname = 'rowBreaks'
openpyxl.worksheet.picture module
class openpyxl.worksheet.picture.SheetBackgroundPicture 基类：openpyxl.descriptors.serialisable.Serialisable tagname = 'sheetBackgroundPicture'
openpyxl.worksheet.properties module
Worksheet Properties
class openpyxl.worksheet.properties.Outline(applyStyles=None, summaryBelow=None, sum-
maryRight=None, showOutlineSymbols=None)
基类：openpyxl.descriptors.serialisable.Serialisable
applyStyles
Values must be of type <class 'bool'>
showOutlineSymbols
Values must be of type <class 'bool'>
summaryBelow
Values must be of type <class 'bool'>
summaryRight
         Values must be of type <class 'bool'> tagname = 'outlinePr' class openpyxl.worksheet.properties.PageSetupProperties(autoPageBreaks=None,	fit-
ToPage=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoPageBreaks
Values must be of type <class 'bool'>
fitToPage
Values must be of type <class 'bool'>
     tagname = 'pageSetUpPr' class openpyxl.worksheet.properties.WorksheetProperties(codeName=None,	enableFormatConditionsCalculation=None,	filterMode=None,	published=None, syncHorizontal=None,	syncRef=None,	syncVertical=None, transitionEvaluation=None,
transitionEntry=None,	tabColor=None,	outlinePr=None,
pageSetUpPr=None)
基类：openpyxl.descriptors.serialisable.Serialisable
codeName
Values must be of type <class 'str'>
enableFormatConditionsCalculation
Values must be of type <class 'bool'>
filterMode
Values must be of type <class 'bool'>
outlinePr
Values must be of type <class 'openpyxl.worksheet.properties.Outline'>
pageSetUpPr
Values must be of type <class 'openpyxl.worksheet.properties.PageSetupProperties'>
published
Values must be of type <class 'bool'>
syncHorizontal
Values must be of type <class 'bool'>
syncRef
Values must be of type <class 'str'>
syncVertical
Values must be of type <class 'bool'>
tabColor
    Values must be of type <class 'openpyxl.styles.colors.Color'> tagname = 'sheetPr'
transitionEntry
Elements
transitionEvaluation
Values must be of type <class 'bool'>
openpyxl.worksheet.protection module
class openpyxl.worksheet.protection.SheetProtection(sheet=False,	objects=False,	scenarios=False,	formatCells=True, formatRows=True,	format-
Columns=True,	insertColumns=True, insertRows=True,	insertHyperlinks=True,	deleteColumns=True, deleteRows=True,	selectLockedCells=False,	selectUnlockedCells=False,	sort=True,	autoFilter=True,	pivotTables=True,	password=None,	algorithmName=None, saltValue=None,	spinCount=None, hashValue=None)
基类：openpyxl.descriptors.serialisable.Serialisable, openpyxl.worksheet.protection. _Protected
Information about protection of various aspects of a sheet. True values mean that protection for the object or action is active This is the default when protection is active, ie. users cannot do something
algorithmName
Values must be of type <class 'str'>
autoFilter
Values must be of type <class 'bool'>
deleteColumns
Values must be of type <class 'bool'>
deleteRows
    Values must be of type <class 'bool'> disable() enable()
enabled
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
formatCells
Values must be of type <class 'bool'>
formatColumns
Values must be of type <class 'bool'>
formatRows
Values must be of type <class 'bool'>
hashValue
insertColumns
Values must be of type <class 'bool'>
insertHyperlinks
Values must be of type <class 'bool'>
insertRows
Values must be of type <class 'bool'>
objects
Values must be of type <class 'bool'>
pivotTables
    Values must be of type <class 'bool'> saltValue scenarios
Values must be of type <class 'bool'>
selectLockedCells
Values must be of type <class 'bool'>
selectUnlockedCells
    Values must be of type <class 'bool'> set_password(value=", already_hashed=False) Set a password on this sheet.
sheet
Values must be of type <class 'bool'>
sort
Values must be of type <class 'bool'>
spinCount
    Values must be of type <class 'int'> tagname = 'sheetProtection'
openpyxl.worksheet.related module
class openpyxl.worksheet.related.Related(id=None) 基类：openpyxl.descriptors.serialisable.Serialisable
id
    Values must be of type <class 'str'> to_tree(tagname, idx=None) openpyxl.worksheet.scenario module
class openpyxl.worksheet.scenario.InputCells(r=None,	deleted=False,	undone=False, val=None, numFmtId=None)
基类：openpyxl.descriptors.serialisable.Serialisable
deleted
Values must be of type <class 'bool'>
numFmtId
Values must be of type <class 'int'>
r
    Values must be of type <class 'str'> tagname = 'inputCells'
undone
Values must be of type <class 'bool'>
val
Values must be of type <class 'str'>
class openpyxl.worksheet.scenario.Scenario(inputCells=(), name=None, locked=False, hidden=False, count=None, user=None, comment=None)
基类：openpyxl.descriptors.serialisable.Serialisable
comment
    Values must be of type <class 'str'> count
hidden
Values must be of type <class 'bool'>
inputCells
A sequence (list or tuple) that may only contain objects of the declared type
locked
Values must be of type <class 'bool'>
name
    Values must be of type <class 'str'> tagname = 'scenario'
user
Values must be of type <class 'str'>
class openpyxl.worksheet.scenario.ScenarioList(scenario=(),	current=None,	show=None, sqref=None)
基类：openpyxl.descriptors.serialisable.Serialisable append(scenario)
current
Values must be of type <class 'int'>
scenario
A sequence (list or tuple) that may only contain objects of the declared type
show
Values must be of type <class 'int'>
sqref
    Values must be of type <class 'openpyxl.worksheet.cell_range.MultiCellRange'> tagname = 'scenarios'
openpyxl.worksheet.smart_tag module
class openpyxl.worksheet.smart_tag.CellSmartTag(cellSmartTagPr=(),	type=None, deleted=False, xmlBased=False)
基类：openpyxl.descriptors.serialisable.Serialisable
cellSmartTagPr
A sequence (list or tuple) that may only contain objects of the declared type
deleted
    Values must be of type <class 'bool'> tagname = 'cellSmartTag'
type
Values must be of type <class 'int'>
xmlBased
         Values must be of type <class 'bool'> class openpyxl.worksheet.smart_tag.CellSmartTagPr(key=None, val=None) 基类：openpyxl.descriptors.serialisable.Serialisable
key
    Values must be of type <class 'str'> tagname = 'cellSmartTagPr'
val
Values must be of type <class 'str'>
class openpyxl.worksheet.smart_tag.CellSmartTags(cellSmartTag=(), r=None) 基类：openpyxl.descriptors.serialisable.Serialisable
cellSmartTag
A sequence (list or tuple) that may only contain objects of the declared type
r
         Values must be of type <class 'str'> tagname = 'cellSmartTags' class openpyxl.worksheet.smart_tag.SmartTags(cellSmartTags=()) 基类：openpyxl.descriptors.serialisable.Serialisable
cellSmartTags
    A sequence (list or tuple) that may only contain objects of the declared type tagname = 'smartTags'
openpyxl.worksheet.table module
class openpyxl.worksheet.table.Table(id=1,	displayName=None,	ref=None,	name=None, comment=None, tableType=None, headerRowCount=1, insertRow=None,	insertRowShift=None,	totalsRowCount=None, totalsRowShown=None, published=None, headerRowDxfId=None, dataDxfId=None, totalsRowDxfId=None,	headerRowBorderDxfId=None,	tableBorderDxfId=None,	totalsRowBorderDxfId=None,	headerRowCellStyle=None,	dataCellStyle=None,	totalsRowCellStyle=None, connectionId=None, autoFilter=None, sortState=None, tableColumns=(), tableStyleInfo=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
autoFilter
Values must be of type <class 'openpyxl.worksheet.filters.AutoFilter'>
comment
Values must be of type <class 'str'>
connectionId
Values must be of type <class 'int'>
dataCellStyle
Values must be of type <class 'str'>
dataDxfId
Values must be of type <class 'int'>

displayName
'str'>
extLst
'openpyxl.descriptors.excel.ExtensionList'>
headerRowBorderDxfId
Values must be of type <class 'int'>
headerRowCellStyle
Values must be of type <class 'str'>
headerRowCount
Values must be of type <class 'int'>
headerRowDxfId
Values must be of type <class 'int'>
id
Values must be of type <class 'int'>
insertRow
Values must be of type <class 'bool'>
insertRowShift
    Values must be of type <class 'bool'> mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml'
name
Values must be of type <class 'str'>
path
Return path within the archive
published
    Values must be of type <class 'bool'> ref
sortState
Values must be of type <class 'openpyxl.worksheet.filters.SortState'>
tableBorderDxfId
Values must be of type <class 'int'>
tableColumns
Wrap a sequence in an containing object
tableStyleInfo
Values must be of type <class 'openpyxl.worksheet.table.TableStyleInfo'>
tableType
    Value must be one of {'queryTable', 'xml', 'worksheet'} tagname = 'table' to_tree()
totalsRowBorderDxfId
Values must be of type <class 'int'>
totalsRowCellStyle
Values must be of type <class 'str'>
totalsRowCount
Values must be of type <class 'int'>
totalsRowDxfId
Values must be of type <class 'int'>
totalsRowShown
Values must be of type <class 'bool'>
class openpyxl.worksheet.table.TableColumn(id=None, uniqueName=None, name=None, totalsRowFunction=None,	totalsRowLabel=None, queryTableFieldId=None, headerRowDxfId=None, dataDxfId=None,	totalsRowDxfId=None,	headerRowCellStyle=None,	dataCellStyle=None, totalsRowCellStyle=None,	calculatedColumnFormula=None,	totalsRowFormula=None,
xmlColumnPr=None, extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
calculatedColumnFormula
Values must be of type <class 'openpyxl.worksheet.table.TableFormula'>
dataCellStyle
Values must be of type <class 'str'>
dataDxfId
Values must be of type <class 'int'>
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
classmethod from_tree(node)
Create object from XML
headerRowCellStyle
Values must be of type <class 'str'>
headerRowDxfId
'int'>
id
'int'>
name
Values must be of type <class 'str'>
queryTableFieldId
    Values must be of type <class 'int'> tagname = 'tableColumn'
totalsRowCellStyle
Values must be of type <class 'str'>
totalsRowDxfId
Values must be of type <class 'int'>
totalsRowFormula
Values must be of type <class 'openpyxl.worksheet.table.TableFormula'>
totalsRowFunction
Value must be one of {'sum','min','average','countNums','var','custom','max'
, 'stdDev', 'count'}
totalsRowLabel
Values must be of type <class 'str'>
uniqueName
Values must be of type <class 'str'>
xmlColumnPr
Values must be of type <class 'openpyxl.worksheet.table.XMLColumnProps'>
class openpyxl.worksheet.table.TableFormula(array=None, attr_text=None) 基类：openpyxl.descriptors.serialisable.Serialisable
array
    Values must be of type <class 'bool'> attr_text tagname = 'tableFormula'
text
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
(eg. "type") or a more descriptve name is desired (eg. "underline"for "u")
class openpyxl.worksheet.table.TableList 基类：dict
add(table) get(name=None, table_range=None)
Return the value for key if key is in the dictionary, else default.
items()→ a set-like object providing a view on D's items
class openpyxl.worksheet.table.TableNameDescriptor(*args, **kw) 基类：openpyxl.descriptors.base.String
     Table names cannot have spaces in them class openpyxl.worksheet.table.TablePartList(count=None, tablePart=()) 基类：openpyxl.descriptors.serialisable.Serialisable append(part) count
tablePart
         A sequence (list or tuple) that may only contain objects of the declared type tagname = 'tableParts' class openpyxl.worksheet.table.TableStyleInfo(name=None,	showFirstColumn=None,
	showLastColumn=None,	showRow-
Stripes=None, showColumnStripes=None)
基类：openpyxl.descriptors.serialisable.Serialisable
name
Values must be of type <class 'str'>
showColumnStripes
Values must be of type <class 'bool'>
showFirstColumn
Values must be of type <class 'bool'>
showLastColumn
Values must be of type <class 'bool'>
showRowStripes
    Values must be of type <class 'bool'> tagname = 'tableStyleInfo'class openpyxl.worksheet.table.XMLColumnProps(mapId=None,xpath=None,denor-malized=None,xmlDataType=None,extLst=None)
基类：openpyxl.descriptors.serialisable.Serialisable
denormalized
Values must be of type <class 'bool'>
extLst
'openpyxl.descriptors.excel.ExtensionList'>
mapId
'int'>
tagname = 'xmlColumnPr'
xmlDataType
Values must be of type <class 'str'>
xpath
Values must be of type <class 'str'>
openpyxl.worksheet.table.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.worksheet.views module
class openpyxl.worksheet.views.Pane(xSplit=None,	ySplit=None,	topLeftCell=None,	activePane='topLeft', state='split')
基类：openpyxl.descriptors.serialisable.Serialisable
activePane
Value must be one of {'topLeft', 'topRight', 'bottomRight', 'bottomLeft'}
state
Value must be one of {'split', 'frozenSplit', 'frozen'}
topLeftCell
Values must be of type <class 'str'>
xSplit
Values must be of type <class 'float'>
ySplit
Values must be of type <class 'float'>
class openpyxl.worksheet.views.Selection(pane=None,	activeCell='A1',	activeCellId=None, sqref='A1')
基类：openpyxl.descriptors.serialisable.Serialisable

activeCell
'str'>
activeCellId
'int'>
pane
Value must be one of {'topLeft', 'topRight', 'bottomRight', 'bottomLeft'}
sqref
Values must be of type <class 'str'>
class openpyxl.worksheet.views.SheetView(windowProtection=None,	showFormulas=None, showGridLines=None,	showRowColHeaders=None, showZeros=None,	rightToLeft=None,	tabSelected=None,	showRuler=None,	showOutlineSymbols=None,	defaultGridColor=None, showWhiteSpace=None,	view=None,	topLeftCell=None,	colorId=None,	zoomScale=None, zoomScaleNormal=None,	zoomScaleSheetLayoutView=None,	zoomScalePageLayoutView=None, zoomToFit=None,	workbookViewId=0,	selection=None, pane=None)
基类：openpyxl.descriptors.serialisable.Serialisable
Information about the visible portions of this sheet.
colorId
Values must be of type <class 'int'>
defaultGridColor
Values must be of type <class 'bool'>
pane
Values must be of type <class 'openpyxl.worksheet.views.Pane'>
rightToLeft
Values must be of type <class 'bool'>
selection
A sequence (list or tuple) that may only contain objects of the declared type
showFormulas
Values must be of type <class 'bool'>
showGridLines
Values must be of type <class 'bool'>
showOutlineSymbols
Values must be of type <class 'bool'>
showRowColHeaders
'bool'>
showRuler
'bool'>
showWhiteSpace
Values must be of type <class 'bool'>
showZeros
Values must be of type <class 'bool'>
tabSelected
    Values must be of type <class 'bool'> tagname = 'sheetView'
topLeftCell
Values must be of type <class 'str'>
view
Value must be one of {'pageBreakPreview', 'normal', 'pageLayout'}
windowProtection
Values must be of type <class 'bool'>
workbookViewId
Values must be of type <class 'int'>
zoomScale
Values must be of type <class 'int'>
zoomScaleNormal
Values must be of type <class 'int'>
zoomScalePageLayoutView
Values must be of type <class 'int'>
zoomScaleSheetLayoutView
Values must be of type <class 'int'>
zoomToFit
         Values must be of type <class 'bool'> class openpyxl.worksheet.views.SheetViewList(sheetView=None, extLst=None) 基类：openpyxl.descriptors.serialisable.Serialisable
extLst
Values must be of type <class 'openpyxl.descriptors.excel.ExtensionList'>
sheetView
A sequence (list or tuple) that may only contain objects of the declared type
tagname = 'sheetViews'
openpyxl.worksheet.worksheet module
Worksheet is the 2nd-level container in Excel.
class openpyxl.worksheet.worksheet.Worksheet(parent, title=None) 基类：openpyxl.workbook.child._WorkbookChild
Represents a worksheet.
Do not create worksheets yourself, use openpyxl.workbook.Workbook.create_sheet() instead
BREAK_COLUMN = 2
BREAK_NONE = 0
BREAK_ROW = 1
ORIENTATION_LANDSCAPE = 'landscape'
ORIENTATION_PORTRAIT = 'portrait'
PAPERSIZE_A3 = '8'
PAPERSIZE_A4 = '9'
PAPERSIZE_A4_SMALL = '10'
PAPERSIZE_A5 = '11'
PAPERSIZE_EXECUTIVE = '7'
PAPERSIZE_LEDGER = '4'
PAPERSIZE_LEGAL = '5'
PAPERSIZE_LETTER = '1'
PAPERSIZE_LETTER_SMALL = '2' PAPERSIZE_STATEMENT = '6'
PAPERSIZE_TABLOID = '3'
SHEETSTATE_HIDDEN = 'hidden'
SHEETSTATE_VERYHIDDEN = 'veryHidden' SHEETSTATE_VISIBLE = 'visible' active_cell add_chart(chart, anchor=None)
Add a chart to the sheet Optionally provide a cell for the top-left anchor

add_data_validation(data_validation)
    Add a data-validation object to the sheet. The data-validation object defines the type of datavalidation to be applied and the cell or range of cells it should apply to. add_image(img, anchor=None)
    Add an image to the sheet. Optionally provide a cell for the top-left anchor add_pivot(pivot)
add_table(table)
Check for duplicate name in definedNames and other worksheet tables before adding table.
append(iterable)
Appends a group of values at the bottom of the current sheet.
• If it's a list: all values are added in order, starting from the first column
• If it's a dict: values are assigned to the columns indicated by the keys (numbers or letters)
参数 iterable (list|tuple|range|generator or dict) - list, range or generator, or dict containing values to append
Usage:
• append(['This is A1', 'This is B1', 'This is C1'])
• or append({'A': 'This is A1', 'C': 'This is C1'})
• or append({1 : 'This is A1', 3 : 'This is C1'})
Raise TypeError when iterable is neither a list/tuple nor a dict
calculate_dimension()
Return the minimum bounding range for all cells containing data (ex. 'A1:M24')
返回类型 string
cell(row, column, value=None)
Returns a cell object based on the given coordinates.
Usage: cell(row=15, column=1, value=5)
Calling cell creates cells in memory when they are first accessed.
参数
• row (int) - row index of the cell (e.g. 4)
• column (int) - column index of the cell (e.g. 3)
• value (numeric or time or string or bool or none) - value of the cell (e.g.
     5) 返回类型 openpyxl.cell.cell.Cell columns
Produces all cells in the worksheet, by column (see iter_cols())
delete_cols(idx, amount=1)
Delete column or columns from col==idx
delete_rows(idx, amount=1)
Delete row or rows from row==idx
dimensions
    Returns the result of calculate_dimension() freeze_panes insert_cols(idx, amount=1)
Insert column or columns before col==idx
insert_rows(idx, amount=1)
    Insert row or rows before row==idx iter_cols(min_col=None,	max_col=None,	min_row=None,	max_row=None,	values_only=False)
Produces cells from the worksheet, by column. Specify the iteration range using indices of rows and columns.
If no indices are specified the range starts at A1.
If no cells are in the worksheet an empty tuple will be returned.
参数
   • min_col (int) - smallest column index (1-based index)
   • min_row (int) - smallest row index (1-based index)
   • max_col (int) - largest column index (1-based index)
   • max_row (int) - largest row index (1-based index)
   • values_only (bool) - whether only cell values should be returned 返回类型 generator
iter_rows(min_row=None,	max_row=None,	min_col=None,	max_col=None,	values_only=False)
Produces cells from the worksheet, by row. Specify the iteration range using indices of rows and columns.
If no indices are specified the range starts at A1.
If no cells are in the worksheet an empty tuple will be returned.
参数
   • min_col (int) - smallest column index (1-based index)
   • min_row (int) - smallest row index (1-based index)
   • max_col (int) - largest column index (1-based index)
   • max_row (int) - largest row index (1-based index)
   • values_only (bool) - whether only cell values should be returned 返回类型 generator
max_column
The maximum column index containing data (1-based)
Type int
max_row
The maximum row index containing data (1-based)
        Type int merge_cells(range_string=None, start_row=None, start_column=None, end_row=None, end_column=None)
Set merge on a cell range. Range is a cell range (e.g. A1:E1)
merged_cell_ranges Return a copy of cell ranges

注解: Deprecated: Use ws.merged_cells.ranges

mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'
min_column
The minimum column index containing data (1-based)
Type int
min_row
The minimium row index containing data (1-based)
Type int
move_range(cell_range, rows=0, cols=0, translate=False)
Move a cell range by the number of rows and/or columns: down if rows > 0 and up if rows < 0 right if cols > 0 and left if cols < 0 Existing cells will be overwritten. Formulae and references will not be updated.
page_breaks
print_area
The print area for the worksheet, or None if not set. To set, supply a range like 'A1:D4'or a list of ranges.
print_title_cols
Columns to be printed at the left side of every page (ex: 'A:C')
print_title_rows
    Rows to be printed at the top of every page (ex: '1:3') print_titles
rows
Produces all cells in the worksheet, by row (see iter_rows())
        Type generator selected_cell set_printer_settings(paper_size, orientation)
    Set printer settings sheet_view show_gridlines show_summary_below show_summary_right tables unmerge_cells(range_string=None, start_row=None, start_column=None, end_row=None, end_column=None)
Remove merge on a cell range. Range is a cell range (e.g. A1:E1)
values
Produces all cell values in the worksheet, by row
Type generator
openpyxl.writer package Submodules
openpyxl.writer.excel module
Write a .xlsx file.
class openpyxl.writer.excel.ExcelWriter(workbook, archive) 基类：object
Write a workbook object to an Excel file.
save()
Write data into the archive.
write_data()
Write the various xml files into the zip archive.
write_worksheet(ws)
openpyxl.writer.excel.save_virtual_workbook(workbook) Return an in-memory workbook, suitable for a Django response.

注解: Deprecated: Use a NamedTemporaryFile

openpyxl.writer.excel.save_workbook(workbook, filename)
Save the given workbook on the filesystem under the name filename.
参数
• workbook (openpyxl.workbook.Workbook) - the workbook to save
• filename (string) - the path to which save the workbook
返回类型 bool
openpyxl.writer.excel.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.writer.theme module
Write the theme xml based on a fixed string.
openpyxl.writer.theme.write_theme() Write the theme xml.
openpyxl.xml package
Collection of XML resources compatible across different Python versions openpyxl.xml.defusedxml_available() openpyxl.xml.defusedxml_env_set() openpyxl.xml.lxml_available()
openpyxl.xml.lxml_env_set()
Submodules
openpyxl.xml.constants module
Constants for fixed paths in a file and xml namespace urls.
openpyxl.xml.functions module
XML compatability functions openpyxl.xml.functions.localname(node) openpyxl.xml.functions.tostring(element,	*,	encoding='utf-8',	method=None, short_empty_elements=True) Generate string representation of XML element.
All subelements are included. If encoding is "unicode", a string is returned. Otherwise a bytestring is returned.
element is an Element instance, encoding is an optional output encoding defaulting to US-ASCII, method is an optional output which can be one of "xml"(default), "html", "text"or "c14n".
Returns an (optionally) encoded string containing the XML data.
openpyxl.xml.functions.whitespace(node)


CHAPTER 9

Indices and tables

• genindex
• modindex
• search
	Chapter 9.	Indices and tables
CHAPTER 10

发布说明

10.1 3.0.4 (2020-06-24)
10.1.1 Bugfixes
• #844 Find tables by name
• #1414 Worksheet protection missing in existing files • #1439 Exception when reading files with external images
• #1452 Reading lots of merged cells is very slow.
• #1455 Read support for Bubble Charts.
• #1458 Preserve any indexed colours
• #1473 Reading many thousand of merged cells is really slow.
• #1474 Adding tables in write-only mode raises an exception.
10.1.2 Pull Requests
• PR377 Add support for finding tables by name or range.

10.2 3.0.3 (2020-01-20)
10.2.1 Bugfixes
• #1260 Exception when handling merged cells with hyperlinks
• #1373 Problems when both lxml and defusedxml are installed
• #1385 CFVO with incorrect values cannot be processed
10.3 3.0.2 (2019-11-25)
10.3.1 Bug fixes
• #1267 DeprecationError if both defusedxml and lxml are installed
• #1345 ws._current_row is higher than ws.max_row
• #1365 Border bottom style is not optional when it should be
• #1367 Empty cells in read-only, values-only mode are sometimes returned as ReadOnlyCells
• #1368 Cannot add page breaks to existing worksheets if none exist already
10.3.2 Pull Requests
• PR359 Improvements to the documentation
10.4 3.0.1 (2019-11-14)
10.4.1 Bugfixes
• #1250 Cannot read empty charts.
10.4.2 Pull Requests
• PR354 Fix for #1250
• PR352 TableStyleElement is a sequence
10.5 3.0.0 (2019-09-25)
10.5.1 Python 3.6+ only release
10.6 2.6.4 (2019-09-25)
10.6.1 Final release for Python 2.7 and 3.5
10.6.2 Bugfixes
• ' #1330 <https://bitbucket.org/openpyxl/openpyxl/issues/1330>'_ Cannot save workbooks with comments more than once.
10.7 2.6.3 (2019-08-19)
10.7.1 Bugfixes
• #1237 Fix 3D charts.
• #1290 Minimum for holeSize in Doughnut charts too high
• #1291 Warning for MergedCells with comments
• #1296 Pagebreaks duplicated
• #1309 Workbook has no default CellStyle
• #1330 Workbooks with comments cannot be saved multiple times
10.7.2 Pull Requests
• PR344 Make sure NamedStyles number formats are correctly handled
10.8 2.6.2 (2019-03-29)
10.8.1 Bugfixes
• #1173 Workbook has no _date_formats attribute
• #1190 Cannot create charts for worksheets with quotes in the title
• #1228 MergedCells not removed when range is unmerged
10.5.	3.0.0 (2019-09-25)
• #1232 Link to pivot table lost from charts
• #1233 Chart colours change after saving
• #1236 Cannot use ws.cell in read-only mode with Python 2.7
10.9 2.6.1 (2019-03-04)
10.9.1 Bugfixes
• #1174 ReadOnlyCell.is_date does not work properly
• #1175 Cannot read Google Docs spreadsheet with a Pivot Table
• #1180 Charts created with openpyxl cannot be styled
• #1181 Cannot handle some numpy number types
• #1182 Exception when reading unknowable number formats
• #1186 Only last formatting rule for a range loaded
• #1191 Give MergedCell a value attribute
• #1193 Cannot process worksheets with comments
• #1197 Cannot process worksheets with both row and page breaks
• #1204 Cannot reset dimensions in ReadOnlyWorksheets
• #1211 Incorrect descriptor in ParagraphProperties
• #1213 Missing hier attribute in PageField raises an exception
10.10 2.6.0 (2019-02-06)
10.10.1 Bugfixes
• #1162 Exception on tables with names containing spaces.
• #1170 Cannot save files with existing images.
10.11 2.6.-b1 (2019-01-08)
10.11.1 Bugfixes
• #1141 Cannot use read-only mode with stream
• #1143 Hyperlinks always set on A1
• #1151 Internal row counter not initialised when reading files
• #1152 Exception raised on out of bounds date
10.12 2.6-a1 (2018-11-21)
10.12.1 Major changes
• Implement robust for merged cells so that these can be formatted the way Excel does without confusion.
Thanks to Magnus Schieder.
10.12.2 Minor changes
• Add support for worksheet scenarios
• Add read support for chartsheets
• Add method for moving ranges of cells on a worksheet
• Drop support for Python 3.4
• Last version to support Python 2.7
10.12.3 Deprecations
• Type inference and coercion for cell values
10.13 2.5.14 (2019-01-23)
10.13.1 Bugfixes
• #1150 Correct typo in LineProperties
• #1142 Exception raised for unsupported image files
• #1159 Exception raised when cannot find source for non-local cache object
10.13.2 Pull Requests
• PR301 Add support for nested brackets to the tokeniser
• PR303 Improvements on handling nested brackets in the tokeniser
10.12.	2.6-a1 (2018-11-21)
10.14 2.5.13 (brown bag)
10.15 2.5.12 (2018-11-29)
10.15.1 Bugfixes
• #1130 Overwriting default font in Normal style affects library default
• #1133 Images not added to anchors.
• #1134 Cannot read pivot table formats without dxId
• #1138 Repeated registration of simple filter could lead to memory leaks
10.15.2 Pull Requests
• PR300 Use defusedxml if available
10.16 2.5.11 (2018-11-21)
10.16.1 Pull Requests
• PR295 Improved handling of missing rows
• PR296 Add support for defined names to tokeniser
10.17 2.5.10 (2018-11-13)
10.17.1 Bugfixes
• #1114 Empty column dimensions should not be saved.
10.17.2 Pull Requests
• PR285 Tokenizer failure for quoted sheet name in second half of range
• PR289 Improved error detection in ranges.
10.18 2.5.9 (2018-10-19)
10.18.1 Bugfixes
• #1000 Clean AutoFilter name definitions
• #1106 Attribute missing from Shape object
• #1109 Failure to read all DrawingML means workbook can't be read
10.18.2 Pull Requests
• PR281 Allow newlines in formulae
• PR284 Fix whitespace in front of infix operator in formulae
10.19 2.5.8 (2018-09-25)
• #877 Cannot control how missing values are displayed in charts.
• #948 Cell references can't be used for chart titles
• #1095 Params in iter_cols and iter_rows methods are slightly wrong.
10.20 2.5.7 (2018-09-13)
• #954 Sheet title containing % need quoting in references
• #1047 Cannot set quote prefix
• #1093 Pandas timestamps raise KeyError
10.21 2.5.6 (2018-08-30)
• #832 Read-only mode can leave find-handles open when reading dimensions
• #933 Set a worksheet directly as active
• #1086 Internal row counter not adjusted when rows are deleted or inserted
10.18.	2.5.9 (2018-10-19)
10.22 2.5.5 (2018-08-04)
10.22.1 Bugfixes
• #1049 Files with Mac epoch are read incorrectly
• #1058 Cannot copy merged cells
• #1066 Cannot access ws.active_cell
10.22.2 Pull Requests
• PR267 Introduce read-support for images
10.23 2.5.4 (2018-06-07)
10.23.1 Bugfixes
• #1025 Cannot read files with 3D charts.
• #1030 Merged cells take a long time to parse
10.23.2 Minor changes
• Improve read support for pivot tables and don't always create a Filters child for filterColumn objects.
• Support folding rows <https://bitbucket.org/openpyxl/openpyxl/pull-requests/259/fold-rows>'_
10.24 2.5.3 (2018-04-18)
10.24.1 Bugfixes
• #983 Warning level too aggressive.
• #1015 Alignment and protection values not saved for named styles.
• #1017 Deleting elements from a legend doesn't work.
• #1018 Index names repeated for every row in dataframe.
• #1020 Worksheet protection not being stored.
• #1023 Exception raised when reading a tooltip.
10.25 2.5.2 (2018-04-06)
10.25.1 Bugfixes
• #949 High memory use when reading text-heavy files.
• #970 Copying merged cells copies references.
• #978 Cannot set comment size.
• #985 Exception when trying to save workbooks with no views.
• #995 Cannot delete last row or column.
• #1002 Cannot read Drawings containing embedded images.
10.25.2 Minor changes
• Support for dataframes with multiple columns and multiple indices.
10.26 2.5.1 (2018-03-12)
10.26.1 Bugfixes
• #934 Headers and footers not included in write-only mode.
• #960 Deprecation warning raised when using ad-hoc access in read-only mode.
• #964 Not all cells removed when deleting multiple rows.
• #966 Cannot read 3d bar chart correctly.
• #967 Problems reading some charts.
• #968 Worksheets with SHA protection become corrupted after saving.
• #974 Problem when deleting ragged rows or columns.
• #976 GroupTransforms and GroupShapeProperties have incorrect descriptors
• Make sure that headers and footers in chartsheets are included in the file
10.27 2.5.0 (2018-01-24)
10.27.1 Minor changes
• Correct definition for Connection Shapes. Related to # 958
10.25.	2.5.2 (2018-04-06)
10.28 2.5.0-b2 (2018-01-19)
10.28.1 Bugfixes
• #915 TableStyleInfo has no required attributes
• #925 Cannot read files with 3D drawings
• #926 Incorrect version check in installer
• Cell merging uses transposed parameters
• #928 ExtLst missing keyword for PivotFields
• #932 Inf causes problems for Excel
• #952 Cannot load table styles with custom names
10.28.2 Major Changes
• You can now insert and delete rows and columns in worksheets
10.28.3 Minor Changes
• pip now handles which Python versions can be used.
10.29 2.5.0-b1 (2017-10-19)
10.29.1 Bugfixes
• #812 Explicitly support for multiple cell ranges in conditonal formatting
• #827 Non-contiguous cell ranges in validators get merged
• #837 Empty data validators create invalid Excel files
• #860 Large validation ranges use lots of memory
• #876 Unicode in chart axes not handled correctly in Python 2
• #882 ScatterCharts have defective axes
• #885 Charts with empty numVal elements cannot be read
• #894 Scaling options from existing files ignored
• #895 Charts with PivotSource cannot be read
• #903 Cannot read gradient fills
• #904 Quotes in number formats could be treated as datetimes
10.29.2 Major Changes
worksheet.cell() no longer accepts a coordinate parameter. The syntax is now ws.cell(row, column, value=None)
10.29.3 Minor Changes
Added CellRange and MultiCellRange types (thanks to Laurent LaPorte for the suggestion) as a utility type for things like data validations, conditional formatting and merged cells.
10.29.4 Deprecations
ws.merged_cell_ranges has been deprecated because MultiCellRange provides sufficient functionality
10.30 2.5.0-a3 (2017-08-14)
10.30.1 Bugfixes
• #848 Reading workbooks with Pie Charts raises an exception
• #857 Pivot Tables without Worksheet Sources raise an exception
10.31 2.5.0-a2 (2017-06-25)
10.31.1 Major Changes
• Read support for charts
10.31.2 Bugfixes
• #833 Cannot access chartsheets by title
• #834 Preserve workbook views
• #841 Incorrect classification of a datetime
10.30.	2.5.0-a3 (2017-08-14)
10.32 2.5.0-a1 (2017-05-30)
10.32.1 Compatibility
• Dropped support for Python 2.6 and 3.3. openpyxl will not run with Python 2.6
10.32.2 Major Changes
• Read/write support for pivot tables
10.32.3 Deprecations
• Dropped the anchor method from images and additional constructor arguments
10.32.4 Bugfixes
• #779 Fails to recognise Chinese date format'
• #828 Include hidden cells in charts'
10.32.5 Pull requests
• 163 Improved GradientFill
10.32.6 Minor changes
• Remove deprecated methods from Cell
• Remove deprecated methods from Worksheet
• Added read/write support for the datetime type for cells
10.33 2.4.11 (2018-01-24)
• #957 https://bitbucket.org/openpyxl/openpyxl/issues/957 Relationship type for tables is borked
10.34 2.4.10 (2018-01-19)
10.34.1 Bugfixes
• #912 https://bitbucket.org/openpyxl/openpyxl/issues/912 Copying objects uses shallow copy
• #921 https://bitbucket.org/openpyxl/openpyxl/issues/921 API documentation not generated automatically
• #927 https://bitbucket.org/openpyxl/openpyxl/issues/927 Exception raised when adding coloured borders together
• #931 https://bitbucket.org/openpyxl/openpyxl/issues/931 Number formats not correctly deduplicated
10.34.2 Pull requests
• 203 https://bitbucket.org/openpyxl/openpyxl/pull-requests/203/ Correction to worksheet protection description
• 210 https://bitbucket.org/openpyxl/openpyxl/pull-requests/210/ Some improvements to the API docs
• 211 https://bitbucket.org/openpyxl/openpyxl/pull-requests/211/ Improved deprecation decorator
• 218 https://bitbucket.org/openpyxl/openpyxl/pull-requests/218/ Fix problems with deepcopy
10.35 2.4.9 (2017-10-19)
10.35.1 Bugfixes
• #809 Incomplete documentation of copy_worksheet method
• #811 Scoped definedNames not removed when worksheet is deleted
• #824 Raise an exception if a chart is used in multiple sheets
• #842 Non-ASCII table column headings cause an exception in Python 2
• #846 Conditional formats not supported in write-only mode
• #849 Conditional formats with no sqref cause an exception
• #859 Headers that start with a number conflict with font size
• #902 TableStyleElements don't always have a condtional format
• #908 Read-only mode sometimes returns too many cells
10.34.	2.4.10 (2018-01-19)
10.35.2 Pull requests
• #179 Cells kept in a set
• #180 Support for Workbook protection
• #182 Read support for page breaks
• #183 Improve documentation of copy_worksheet method
• #198 Fix for #908
10.36 2.4.8 (2017-05-30)
10.36.1 Bugfixes
• AutoFilter.sortState being assignd to the ws.sortState
• #766 Sheetnames with apostrophes need additional escaping
• #729 Cannot open files created by Microsoft Dynamics
• #819 Negative percents not case correctly
• #821 Runtime imports can cause deadlock
• #855 Print area containing only columns leads to corrupt file
10.36.2 Minor changes
• Preserve any table styles
10.37 2.4.7 (2017-04-24)
10.37.1 Bugfixes
• #807 Sample files being included by mistake in sdist
10.38 2.4.6 (2017-04-14)
10.38.1 Bugfixes
• #776 Cannot apply formatting to plot area
• #780 Exception when element attributes are Python keywords

#781 Exception raised when saving files with styled columns
#785 Number formats for data labels are incorrect
#788 Worksheet titles not quoted in defined names
#800 Font underlines not read correctly
10.39 2.4.5 (2017-03-07)
10.39.1 Bugfixes
• #750 Adding images keeps file handles open
• #772 Exception for column-only ranges
• #773 Cannot copy worksheets with non-ascii titles on Python 2
10.39.2 Pull requests
• 161 Support for non-standard names for Workbook part.
• 162 Documentation correction
10.40 2.4.4 (2017-02-23)
10.40.1 Bugfixes
• #673 Add close method to workbooks
• #762 openpyxl can create files with invalid style indices
• #729 Allow images in write-only mode
• #744 Rounded corners for charts
• #747 Use repr when handling non-convertible objects
• #764 Hashing function is incorrect
• #765 Named styles share underlying array
10.40.2 Minor Changes
• Add roundtrip support for worksheet tables.
10.39.	2.4.5 (2017-03-07)
10.40.3 Pull requests
• 160 Don't init mimetypes more than once.
10.41 2.4.3 (unreleased)
bad release
10.42 2.4.2 (2017-01-31)
10.42.1 Bug fixes
• #727 DeprecationWarning is incorrect
• #734 Exception raised if userName is missing
• #739 Always provide a date1904 attribute
• #740 Hashes should be stored as Base64
• #743 Print titles broken on sheetnames with spaces
• #748 Workbook breaks when active sheet is removed
• #754 Incorrect descriptor for Filter values
• #756 Potential XXE vulerability
• #758 Cannot create files with page breaks and charts
• #759 Problems with worksheets with commas in their titles
10.42.2 Minor Changes
• Add unicode support for sheet name incrementation.
10.43 2.4.1 (2016-11-23)
10.43.1 Bug fixes
• #643 Make checking for duplicate sheet titles case insensitive
• #647 Trouble handling LibreOffice files with named styles
#687 Directly assigned new named styles always refer to "Normal"
#690 Cannot parse print titles with multiple sheet names
#691 Cannot work with macro files created by LibreOffice
Prevent duplicate differential styles
#694 Allow sheet titles longer than 31 characters
• #697 Cannot unset hyperlinks
• #699 Exception raised when format objects use cell references
• #703 Copy height and width when copying comments
• #705 Incorrect content type for VBA macros
• #707 IndexError raised in read-only mode when accessing individual cells
• #711 Files with external links become corrupted
• #715 Cannot read files containing macro sheets
• #717 Details from named styles not preserved when reading files
• #722 Remove broken Print Title and Print Area definitions
10.43.2 Minor changes
• Add support for Python 3.6
• Correct documentation for headers and footers
10.43.3 Deprecations
Worksheet methods get_named_range() and get_sqaured_range()
10.43.4 Bug fixes
10.44 2.4.0 (2016-09-15)
10.44.1 Bug fixes
• #652 Exception raised when epoch is 1904
• #642 Cannot handle unicode in headers and footers in Python 2
• #646 Cannot handle unicode sheetnames in Python 2
• #658 Chart styles, and axis units should not be 0
• #663 Strings in external workbooks not unicode
10.44.	2.4.0 (2016-09-15)
10.44.2 Major changes
• Add support for builtin styles and include one for Pandas
10.44.3 Minor changes
• Add a keep_links option to load_workbook. External links contain cached copies of the external workbooks. If these are big it can be advantageous to be able to disable them.
• Provide an example for using cell ranges in DataValidation.
• PR 138 - add copy support to comments.
10.45 2.4.0-b1 (2016-06-08)
10.45.1 Minor changes
• Add an the alias hide_drop_down to DataValidation for showDropDown because that is how Excel works.
10.45.2 Bug fixes
• #625 Exception raises when inspecting EmptyCells in read-only mode
• #547 Functions for handling OOXML "escaped"ST_XStrings
• #629 Row Dimensions not supported in write-only mode
• #530 Problems when removing worksheets with charts
• #630 Cannot use SheetProtection in write-only mode
10.45.3 Features
• Add write support for worksheet tables
10.46 2.4.0-a1 (2016-04-11)
10.46.1 Minor changes
• Remove deprecated methods from DataValidation Remove deprecated methods from PrintPageSetup Convert AutoFilter to Serialisable and extend support for filters
Add support for SortState
Removed use_iterators keyword when loading workbooks. Use read_only instead.
Removed optimized_write keyword for new workbooks. Use write_only instead.
• Improve print title support
• Add print area support
• New implementation of defined names
• New implementation of page headers and footers
• Add support for Python's NaN
• Added iter_cols method for worksheets
• ws.rows and ws.columns now always return generators and start at the top of the worksheet
• Add a values property for worksheets
• Default column width changed to 8 as per the specification
10.46.2 Deprecations
• Cell anchor method
• Worksheet point_pos method
• Worksheet add_print_title method
• Worksheet HeaderFooter attribute, replaced by individual ones
• Flatten function for cells
• Workbook	get_named_range,	add_named_range,	remove_named_range,	get_sheet_names, get_sheet_by_name
• Comment text attribute
• Use of range strings deprecated for ws.iter_rows()
• Use of coordinates deprecated for ws.cell()
• Deprecate .copy() method for StyleProxy objects
10.46.3 Bug fixes
• #152 Hyperlinks lost when reading files
• #171 Add function for copying worksheets
10.46.	2.4.0-a1 (2016-04-11)

#386 Cells with inline strings considered empty
#397 Add support for ranges of rows and columns
#446 Workbook with definedNames corrupted by openpyxl
#481 "safe"reserved ranges are not read from workbooks
• #501 Discarding named ranges can lead to corrupt files
• #574 Exception raised when using the class method to parse Relationships
• #579 Crashes when reading defined names with no content
• #597 Cannot read worksheets without coordinates
• #617 Customised named styles not correctly preserved
10.47 2.3.5 (2016-04-11)
10.47.1 Bug fixes
• #618 Comments not written in write-only mode
10.48 2.3.4 (2016-03-16)
10.48.1 Bug fixes
• #594 Content types might be missing when keeping VBA
• #599 Cells with only one cell look empty
• #607 Serialise NaN as ''
10.48.2 Minor changes
• Preserve the order of external references because formualae use numerical indices.
• Typo corrected in cell unit tests (PR 118)
10.49 2.3.3 (2016-01-18)
10.49.1 Bug fixes
#540 Cannot read merged cells in read-only mode
#565 Empty styled text blocks cannot be parsed
#569 Issue warning rather than raise Exception raised for unparsable definedNames
#575 Cannot open workbooks with embdedded OLE files
#584 Exception when saving borders with attributes
10.49.2 Minor changes
• PR 103 Documentation about chart scaling and axis limits
• Raise an exception when trying to copy cells from other workbooks.
10.50 2.3.2 (2015-12-07)
10.50.1 Bug fixes
• #554 Cannot add comments to a worksheet when preserving VBA
• #561 Exception when reading phonetic text
• #562 DARKBLUE is the same as RED
• #563 Minimum for row and column indexes not enforced
10.50.2 Minor changes
• PR 97 One VML file per worksheet.
• PR 96 Correct descriptor for CharacterProperties.rtl
• #498 Metadata is not essential to use the package.
10.51 2.3.1 (2015-11-20)
10.51.1 Bug fixes
• #534 Exception when using columns property in read-only mode.
• #536 Incorrectly handle comments from Google Docs files.
• #539 Flexible value types for conditional formatting.
• #542 Missing content types for images.
• #543 Make sure images fit containers on all OSes.
10.50.	2.3.2 (2015-12-07)
#544 Gracefully handle missing cell styles.
#546 ExternalLink duplicated when editing a file with macros.
#548 Exception with non-ASCII worksheet titles
#551 Combine multiple LineCharts
10.51.2 Minor changes
• PR 88 Fix page margins in parser.
10.52 2.3.0 (2015-10-20)
10.52.1 Major changes
• Support the creation of chartsheets
10.52.2 Bug fixes
• #532 Problems when cells have no style in read-only mode.
10.52.3 Minor changes
• PR 79 Make PlotArea editable in charts
• Use graphicalProperties as the alias for spPr
10.53 2.3.0-b2 (2015-09-04)
10.53.1 Bug fixes
• #488 Support hashValue attribute for sheetProtection
• #493 Warn that unsupported extensions will be dropped
• #494 Cells with exponentials causes a ValueError
• #497 Scatter charts are broken
• #499 Inconsistent conversion of localised datetimes
• #500 Adding images leads to unreadable files
• #509 Improve handling of sheet names

#515 Non-ascii titles have bad repr
#516 Ignore unassigned worksheets
10.53.2 Minor changes
• Worksheets are now iterable by row.
• Assign individual cell styles only if they are explicitly set.
10.54 2.3.0-b1 (2015-06-29)
10.54.1 Major changes
• Shift to using (row, column) indexing for cells. Cells will at some point lose coordinates.
• New implementation of conditional formatting. Databars now partially preserved.
• et_xmlfile is now a standalone library.
• Complete rewrite of chart package
• Include a tokenizer for fomulae to be able to adjust cell references in them. PR 63
10.54.2 Minor changes
• Read-only and write-only worksheets renamed.
• Write-only workbooks support charts and images.
• PR76 Prevent comment images from conflicting with VBA
10.54.3 Bug fixes
• #81 Support stacked bar charts
• #88 Charts break hyperlinks
• #97 Pie and combination charts
• #99 Quote worksheet names in chart references
• #150 Support additional chart options
• #172 Support surface charts
• #381 Preserve named styles
10.54.	2.3.0-b1 (2015-06-29)
#470 Adding more than 10 worksheets with the same name leads to duplicates sheet names and an
invalid file
10.55 2.2.6 (unreleased)
10.55.1 Bug fixes
• #502 Unexpected keyword "mergeCell"
• #503 tostring missing in dump_worksheet
• #506 Non-ASCII formulae cannot be parsed
• #508 Cannot save files with coloured tabs
• Regex for ignoring named ranges is wrong (character class instead of prefix)
10.56 2.2.5 (2015-06-29)
10.56.1 Bug fixes
• #463 Unexpected keyword "mergeCell"
• #484 Unusual dimensions breaks read-only mode
• #485 Move return out of loop
10.57 2.2.4 (2015-06-17)
10.57.1 Bug fixes
• #464 Cannot use images when preserving macros
• #465 ws.cell() returns an empty cell on read-only workbooks
• #467 Cannot edit a file with ActiveX components
• #471 Sheet properties elements must be in order
• #475 Do not redefine class __slots__ in subclasses
• #477 Write-only support for SheetProtection
• #478 Write-only support for DataValidation
• Improved regex when checking for datetime formats
10.58 2.2.3 (2015-05-26)
10.58.1 Bug fixes
• #451 fitToPage setting ignored
• #458 Trailing spaces lost when saving files.
• #459 setup.py install fails with Python 3
• #462 Vestigial rId conflicts when adding charts, images or comments
• #455 Enable Zip64 extensions for all versions of Python
10.59 2.2.2 (2015-04-28)
10.59.1 Bug fixes
• #447 Uppercase datetime number formats not recognised.
• #453 Borders broken in shared_styles.
10.60 2.2.1 (2015-03-31)
10.60.1 Minor changes
• PR54 Improved precision on times near midnight.
• PR55 Preserve macro buttons
10.60.2 Bug fixes
• #429 Workbook fails to load because header and footers cannot be parsed.
• #433 File-like object with encoding=None
• #434 SyntaxError when writing page breaks.
• #436 Read-only mode duplicates empty rows.
• #437 Cell.offset raises an exception
• #438 Cells with pivotButton and quotePrefix styles cannot be read
• #440 Error when customised versions of builtin formats
• #442 Exception raised when a fill element contains no children
10.58.	2.2.3 (2015-05-26)

• #444 Styles cannot be copied
10.61 2.2.0 (2015-03-11)
10.61.1 Bug fixes
• #415 Improved exception when passing in invalid in memory files.
10.62 2.2.0-b1 (2015-02-18)
10.62.1 Major changes
• Cell styles deprecated, use formatting objects (fonts, fills, borders, etc.) directly instead
• Charts will no longer try and calculate axes by default
• Support for template file types - PR21
• Moved ancillary functions and classes into utils package - single place of reference
• PR 34 Fully support page setup
• Removed SAX-based XML Generator. Special thanks to Elias Rabel for implementing xmlfile for xml.etree
• Preserve sheet view definitions in existing files (frozen panes, zoom, etc.)
10.62.2 Bug fixes
• #103 Set the zoom of a sheet
• #199 Hide gridlines
• #215 Preserve sheet view setings • #262 Set the zoom of a sheet
• #392 Worksheet header not read
• #387 Cannot read files without styles.xml
• #410 Exception when preserving whitespace in strings
• #417 Cannot create print titles
• #420 Rename confusing constants
• #422 Preserve color index in a workbook if it differs from the standard
10.62.3 Minor changes
• Use a 2-way cache for column index lookups
• Clean up tests in cells
• PR 40 Support frozen panes and autofilter in write-only mode
• Use ws.calculate_dimension(force=True) in read-only mode for unsized worksheets
10.63 2.1.5 (2015-02-18)
10.63.1 Bug fixes
• #403 Cannot add comments in write-only mode
• #401 Creating cells in an empty row raises an exception
• #408 from_excel adjustment for Julian dates 1 < x < 60
• #409 refersTo is an optional attribute
10.63.2 Minor changes
• Allow cells to be appended to standard worksheets for code compatibility with write-only mode.
10.64 2.1.4 (2014-12-16)
10.64.1 Bug fixes
• #393 IterableWorksheet skips empty cells in rows
• #394 Date format is applied to all columns (while only first column contains dates)
• #395 temporary files not cleaned properly
• #396 Cannot write "="in Excel file
• #398 Cannot write empty rows in write-only mode with LXML installed
10.64.2 Minor changes
• Add relation namespace to root element for compatibility with iWork
• Serialize comments relation in LXML-backend
10.63.	2.1.5 (2015-02-18)
10.65 2.1.3 (2014-12-09)
10.65.1 Minor changes
• PR 31 Correct tutorial
• PR 32 See #380
• PR 37 Bind worksheet to ColumnDimension objects
10.65.2 Bug fixes
• #379 ws.append() doesn't set RowDimension Correctly
• #380 empty cells formatted as datetimes raise exceptions
10.66 2.1.2 (2014-10-23)
10.66.1 Minor changes
• PR 30 Fix regex for positive exponentials
• PR 28 Fix for #328
10.66.2 Bug fixes
• #120, #168 defined names with formulae raise exceptions, #292
• #328 ValueError when reading cells with hyperlinks
• #369 IndexError when reading definedNames
• #372 number_format not consistently applied from styles
10.67 2.1.1 (2014-10-08)
10.67.1 Minor changes
• PR 20 Support different workbook code names
• Allow auto_axis keyword for ScatterCharts

10.67.2
• #332 Fills lost in ConditionalFormatting
• #360 Support value="none"in attributes
• #363 Support undocumented value for textRotation
• #364 Preserve integers in read-only mode
• #366 Complete read support for DataValidation
• #367 Iterate over unsized worksheets
10.68 2.1.0 (2014-09-21)
10.68.1 Major changes
•"read_only"and "write_only"new flags for workbooks
• Support for reading and writing worksheet protection
• Support for reading hidden rows
• Cells now manage their styles directly
• ColumnDimension and RowDimension object manage their styles directly
• Use xmlfile for writing worksheets if available - around 3 times faster
• Datavalidation now part of the worksheet package
10.68.2 Minor changes
• Number formats are now just strings
• Strings can be used for RGB and aRGB colours for Fonts, Fills and Borders
• Create all style tags in a single pass
• Performance improvement when appending rows
• Cleaner conversion of Python to Excel values
• PR6 reserve formatting for empty rows
• standard worksheets can append from ranges and generators
10.68.	2.1.0 (2014-09-21)
10.68.3
• #153 Cannot read visibility of sheets and rows
• #181 No content type for worksheets
• 241 Cannot read sheets with inline strings
• 322 1-indexing for merged cells
• 339 Correctly handle removal of cell protection
• 341 Cells with formulae do not round-trip
• 347 Read DataValidations
• 353 Support Defined Named Ranges to external workbooks
10.69 2.0.5 (2014-08-08)
10.69.1 Bug fixes
• #348 incorrect casting of boolean strings
• #349 roundtripping cells with formulae
10.70 2.0.4 (2014-06-25)
10.70.1 Minor changes
• Add a sample file illustrating colours
10.70.2 Bug fixes
• #331 DARKYELLOW was incorrect
• Correctly handle extend attribute for fonts
10.71 2.0.3 (2014-05-22)
10.71.1 Minor changes
• Updated docs
10.71.2
• #319 Cannot load Workbooks with vertAlign styling for fonts
10.72 2.0.2 (2014-05-13)
10.73 2.0.1 (2014-05-13) brown bag
10.74 2.0.0 (2014-05-13) brown bag
10.74.1 Major changes
• This is last release that will support Python 3.2
• Cells are referenced with 1-indexing: A1 == cell(row=1, column=1)
• Use jdcal for more efficient and reliable conversion of datetimes
• Significant speed up when reading files
• Merged immutable styles
• Type inference is disabled by default
• RawCell renamed ReadOnlyCell
• ReadOnlyCell.internal_value and ReadOnlyCell.value now behave the same as Cell
• Provide no size information on unsized worksheets
• Lower memory footprint when reading files
10.74.2 Minor changes
• All tests converted to pytest
• Pyflakes used for static code analysis
• Sample code in the documentation is automatically run
• Support GradientFills
• BaseColWidth set
10.72.	2.0.2 (2014-05-13)

10.74.3 Pull requests
• #70 Add filterColumn, sortCondition support to AutoFilter
• #80 Reorder worksheets parts
• #82 Update API for conditional formatting
• #87 Add support for writing Protection styles, others
• #89 Better handling of content types when preserving macros
10.74.4 Bug fixes
• #46 ColumnDimension style error
• #86 reader.worksheet.fast_parse sets booleans to integers
• #98 Auto sizing column widths does not work
• #137 Workbooks with chartsheets
• #185 Invalid PageMargins
• #230 Using v in cells creates invalid files
• #243 - IndexError when loading workbook
• #263 - Forded conversion of line breaks
• #267 - Raise exceptions when passed invalid types
• #270 - Cannot open files which use non-standard sheet names or reference Ids
• #269 - Handling unsized worksheets in IterableWorksheet
• #270 - Handling Workbooks with non-standard references
• #275 - Handling auto filters where there are only custom filters
• #277 - Harmonise chart and cell coordinates
• #280- Explicit exception raising for invalid characters
• #286 - Optimized writer can not handle a datetime.time value
• #296 - Cell coordinates not consistent with documentation
• #300 - Missing column width causes load_workbook() exception
• #304 - Handling Workbooks with absolute paths for worksheets (from Sharepoint)
10.75 1.8.6 (2014-05-05)
10.75.1 Minor changes
Fixed typo for import Elementtree
10.75.2 Bugfixes
• #279 Incorrect path for comments files on Windows
10.76 1.8.5 (2014-03-25)
10.76.1 Minor changes
• The '='string is no longer interpreted as a formula
• When a client writes empty xml tags for cells (e.g. <c r='A1'></c>), reader will not crash
10.77 1.8.4 (2014-02-25)
10.77.1 Bugfixes
• #260 better handling of undimensioned worksheets
• #268 non-ascii in formualae
• #282 correct implementation of register_namepsace for Python 2.6
10.78 1.8.3 (2014-02-09)
10.78.1 Major changes
Always parse using cElementTree
10.78.2 Minor changes
Slight improvements in memory use when parsing
• #256 - error when trying to read comments with optimised reader
• #260 - unsized worksheets
10.75.	1.8.6 (2014-05-05)
• #264 - only numeric cells can be dates
10.79 1.8.2 (2014-01-17)
• #247 - iterable worksheets open too many files
• #252 - improved handling of lxml
• #253 - better handling of unique sheetnames
10.80 1.8.1 (2014-01-14)
• #246
10.81 1.8.0 (2014-01-08)
10.81.1 Compatibility
Support for Python 2.5 dropped.
10.81.2 Major changes
• Support conditional formatting
• Support lxml as backend
• Support reading and writing comments
• pytest as testrunner now required
• Improvements in charts: new types, more reliable
10.81.3 Minor changes
• load_workbook now accepts data_only to allow extracting values only from formulae. Default is false.
• Images can now be anchored to cells
• Docs updated
• Provisional benchmarking
• Added convenience methods for accessing worksheets and cells by key
10.82 1.7.0 (2013-10-31)
10.82.1 Major changes
Drops support for Python < 2.5 and last version to support Python 2.5
10.82.2 Compatibility
Tests run on Python 2.5, 2.6, 2.7, 3.2, 3.3
10.82.3 Merged pull requests
• 27 Include more metadata
• 41 Able to read files with chart sheets
• 45 Configurable Worksheet classes
• 3 Correct serialisation of Decimal
• 36 Preserve VBA macros when reading files
• 44 Handle empty oddheader and oddFooter tags
• 43 Fixed issue that the reader never set the active sheet
• 33 Reader set value and type explicitly and TYPE_ERROR checking
• 22 added page breaks, fixed formula serialization
• 39 Fix Python 2.6 compatibility
• 47 Improvements in styling
10.82.4 Known bugfixes
• #109
• #165
• #209
• #112
• #166
• #109
• #223
• #124
10.82.	1.7.0 (2013-10-31)
• #157
10.82.5 Miscellaneous
Performance improvements in optimised writer
Docs updated


Python 模块索引

o	openpyxl.chart.series_factory, 165
openpyxl, 119	openpyxl.chart.shapes, 166
openpyxl.cell, 119	openpyxl.chart.stock_chart, 167
openpyxl.cell.cell, 119	openpyxl.chart.surface_chart, 168
openpyxl.cell.read_only, 121	openpyxl.chart.text, 169
openpyxl.cell.text, 122	openpyxl.chart.title, 170
openpyxl.chart, 125	openpyxl.chart.trendline, 171
openpyxl.chart.area_chart, 125	openpyxl.chart.updown_bars, 172
openpyxl.chart.axis, 127	openpyxl.chartsheet, 173
openpyxl.chart.bar_chart, 134	openpyxl.chartsheet.chartsheet, 173
openpyxl.chart.bubble_chart, 136	openpyxl.chartsheet.custom, 174
openpyxl.chart.chartspace, 137	openpyxl.chartsheet.properties, 175
openpyxl.chart.data_source, 139	openpyxl.chartsheet.protection, 175
openpyxl.chart.descriptors, 143	openpyxl.chartsheet.publish, 176
openpyxl.chart.error_bar, 143	openpyxl.chartsheet.relation, 177
openpyxl.chart.label, 144	openpyxl.chartsheet.views, 180
openpyxl.chart.layout, 146	openpyxl.comments, 180
openpyxl.chart.legend, 147	openpyxl.comments.author, 180
openpyxl.chart.line_chart, 149	openpyxl.comments.comment_sheet, 181
openpyxl.chart.marker, 150	openpyxl.comments.comments, 183
openpyxl.chart.picture, 152	openpyxl.comments.shape_writer, 184
openpyxl.chart.pie_chart, 152	openpyxl.compat, 184
openpyxl.chart.pivot, 155	openpyxl.compat.abc, 184
openpyxl.chart.plotarea, 156	openpyxl.compat.accumulate, 184
openpyxl.chart.print_settings, 159	openpyxl.compat.numbers, 185
openpyxl.chart.radar_chart, 160	openpyxl.compat.singleton, 185
openpyxl.chart.reader, 160	openpyxl.compat.strings, 185
openpyxl.chart.reference, 161	openpyxl.descriptors, 185
openpyxl.chart.scatter_chart, 161	openpyxl.descriptors.base, 185
openpyxl.chart.series, 162	openpyxl.descriptors.excel, 188
openpyxl.descriptors.namespace, 189	openpyxl.reader.strings, 319
openpyxl.descriptors.nested, 189	openpyxl.reader.workbook, 319
openpyxl.descriptors.sequence, 190	openpyxl.styles, 320
openpyxl.descriptors.serialisable, 191	openpyxl.styles.alignment, 320
openpyxl.descriptors.slots, 192	openpyxl.styles.borders, 321
openpyxl.drawing, 192	openpyxl.styles.builtins, 323
openpyxl.drawing.colors, 192	openpyxl.styles.cell_style, 323
openpyxl.drawing.connector, 200	openpyxl.styles.colors, 325
openpyxl.drawing.drawing, 202	openpyxl.styles.differential, 326
openpyxl.drawing.effect, 203	openpyxl.styles.fills, 327
openpyxl.drawing.fill, 212	openpyxl.styles.fonts, 329
openpyxl.drawing.geometry, 221	openpyxl.styles.named_styles, 332
openpyxl.drawing.graphic, 230	openpyxl.styles.numbers, 334
openpyxl.drawing.image, 232	openpyxl.styles.protection, 334
openpyxl.drawing.line, 232	openpyxl.styles.proxy, 335
openpyxl.drawing.picture, 234	openpyxl.styles.styleable, 335
openpyxl.drawing.properties, 237	openpyxl.styles.stylesheet, 336
openpyxl.drawing.relation, 239	openpyxl.styles.table, 337
openpyxl.drawing.spreadsheet_drawing, 240	openpyxl.utils, 338
openpyxl.drawing.text, 242	openpyxl.utils.bound_dictionary, 338
openpyxl.drawing.xdr, 254	openpyxl.utils.cell, 338
openpyxl.formatting, 255	openpyxl.utils.dataframe, 339
openpyxl.formatting.formatting, 256	openpyxl.utils.datetime, 340
openpyxl.formatting.rule, 256	openpyxl.utils.escape, 340
openpyxl.formula, 260	openpyxl.utils.exceptions, 340
openpyxl.formula.tokenizer, 260	openpyxl.utils.formulas, 341
openpyxl.formula.translate, 262	openpyxl.utils.indexed_list, 341
openpyxl.packaging, 263	openpyxl.utils.inference, 342
openpyxl.packaging.core, 264	openpyxl.utils.protection, 342
openpyxl.packaging.extended, 265	openpyxl.utils.units, 342
openpyxl.packaging.interface, 268	openpyxl.workbook, 343
openpyxl.packaging.manifest, 268	openpyxl.workbook.child, 346
openpyxl.packaging.relationship, 269	openpyxl.workbook.defined_name, 346
openpyxl.packaging.workbook, 271	openpyxl.workbook.external_link, 343
openpyxl.pivot, 274	openpyxl.workbook.external_link.external,
openpyxl.pivot.cache, 274	344
openpyxl.pivot.fields, 291	openpyxl.workbook.external_reference, 348
openpyxl.pivot.record, 296	openpyxl.workbook.function_group, 348
openpyxl.pivot.table, 297	openpyxl.workbook.properties, 349
openpyxl.reader, 318	openpyxl.workbook.protection, 352
openpyxl.reader.drawings, 318	openpyxl.workbook.smart_tags, 354
openpyxl.reader.excel, 318	openpyxl.workbook.views, 355
Python 模块索引
openpyxl Documentation, 发布 3.0.5

openpyxl.workbook.web, 358 openpyxl.workbook.workbook, 359 openpyxl.worksheet, 362 openpyxl.worksheet.cell_range, 362 openpyxl.worksheet.cell_watch, 365 openpyxl.worksheet.controls, 366 openpyxl.worksheet.copier, 367 openpyxl.worksheet.custom, 367 openpyxl.worksheet.datavalidation, 368 openpyxl.worksheet.dimensions, 370 openpyxl.worksheet.drawing, 374 openpyxl.worksheet.errors, 374 openpyxl.worksheet.filters, 375 openpyxl.worksheet.header_footer, 381 openpyxl.worksheet.hyperlink, 382 openpyxl.worksheet.merge, 383 openpyxl.worksheet.ole, 383 openpyxl.worksheet.page, 385 openpyxl.worksheet.pagebreak, 388 openpyxl.worksheet.picture, 389 openpyxl.worksheet.properties, 389 openpyxl.worksheet.protection, 391 openpyxl.worksheet.related, 392 openpyxl.worksheet.scenario, 393 openpyxl.worksheet.smart_tag, 394 openpyxl.worksheet.table, 395 openpyxl.worksheet.views, 400 openpyxl.worksheet.worksheet, 403 openpyxl.writer, 407 openpyxl.writer.excel, 407 openpyxl.writer.theme, 408 openpyxl.xml, 408 openpyxl.xml.constants, 409 openpyxl.xml.functions, 409
Python 模块索引
Python 模块索引

索引

A	属性), 272
a (openpyxl.drawing.effect.AlphaReplaceEffect 属性), active (openpyxl.workbook.workbook.Workbook 属
	203	性), 359
aboveAverage (openpyxl.formatting.rule.Rule 属性), active_cell (openpyxl.worksheet.worksheet.Worksheet
	258	属性), 403
absolute_coordinate() (在 openpyxl.utils.cell 模块 activeCell (openpyxl.worksheet.views.Selection 属中), 338	性), 400
AbsoluteAnchor	(open- activeCellId (openpyxl.worksheet.views.Selection
pyxl.drawing.spreadsheet_drawing 中的 属性), 401 类), 240 activePane (openpyxl.worksheet.views.Pane 属性),
absoluteAnchor	(open-	400
	pyxl.drawing.spreadsheet_drawing.SpreadsheetDrawingactiveSheetId	(open-
属性), 241
accent1 (openpyxl.drawing.colors.ColorMapping 属
性), 194
accent2 (openpyxl.drawing.colors.ColorMapping 属
性), 194
accent3 (openpyxl.drawing.colors.ColorMapping 属
性), 194
accent4 (openpyxl.drawing.colors.ColorMapping 属
性), 194
accent5 (openpyxl.drawing.colors.ColorMapping 属
性), 194
accent6 (openpyxl.drawing.colors.ColorMapping 属
性), 194pyxl.workbook.views.CustomWorkbookView 属性), 356
activeTab (openpyxl.workbook.views.BookView 属
性), 355
add() (openpyxl.formatting.formatting.ConditionalFormattingList
方法), 256
add() (openpyxl.styles.differential.DifferentialStyleList
方法), 327
add() (openpyxl.utils.indexed_list.IndexedList 方法),
341
add() (openpyxl.worksheet.cell_range.MultiCellRange
方法), 365
add() (openpyxl.worksheet.datavalidation.DataValidationaccumulate() (在 openpyxl.compat.accumulate 模块	方法), 368
	中), 184	add() (openpyxl.worksheet.table.TableList 方法), 398
action (openpyxl.drawing.text.Hyperlink 属性), 246 add_chart() (openpyxl.chartsheet.chartsheet.Chartsheet
action (openpyxl.pivot.table.Format 属性), 300	方法), 173
active (openpyxl.packaging.workbook.WorkbookPackageadd_chart() (openpyxl.worksheet.worksheet.Worksheet

        方法), 403	algn (openpyxl.drawing.text.ParagraphProperties 属 add_comment_shape()	(open-	性), 249
	pyxl.comments.shape_writer.ShapeWriter	algn (openpyxl.drawing.text.TabStop 属性), 254
	方法), 184	algorithmName	(open-
add_comment_shapetype()	(open-	pyxl.chartsheet.protection.ChartsheetProtection pyxl.comments.shape_writer.ShapeWriter	属性), 175
        方法), 184 algorithmName (openadd_data_validation() (open- pyxl.workbook.protection.FileSharing 属 pyxl.worksheet.worksheet.Worksheet 方 性), 352
	法), 403	algorithmName	(open-
add_filter_column()	(open-	pyxl.worksheet.protection.SheetProtection pyxl.worksheet.filters.AutoFilter 方法),	属性), 391
	375	Alias (openpyxl.descriptors.base 中的类), 185
add_image() (openpyxl.worksheet.worksheet.Worksheetalignment (openpyxl.cell.read_only.EmptyCell 属方法), 404	性), 121
add_named_range()	(open- alignment (openpyxl.cell.read_only.ReadOnlyCell 属 pyxl.workbook.workbook.Workbook	方	性), 122
	法), 359	alignment (openpyxl.cell.text.PhoneticProperties 属
add_named_style()	(open-	性), 123
	pyxl.workbook.workbook.Workbook	方 Alignment (openpyxl.styles.alignment 中的类), 320
	法), 359	alignment (openpyxl.styles.cell_style.CellStyle 属
add_pivot() (openpyxl.worksheet.worksheet.Worksheet	性), 323
        方法), 404 alignment (openpyxl.styles.cell_style.CellStyleList add_sort_condition() (open- 属性), 324 pyxl.worksheet.filters.AutoFilter 方法), alignment (openpyxl.styles.differential.DifferentialStyle
	376	属性), 326
add_table() (openpyxl.worksheet.worksheet.Worksheetalignment (openpyxl.styles.named_styles.NamedStyle 方法), 404	属性), 333
AdjPoint2D (openpyxl.drawing.geometry 中的类), alignment (openpyxl.styles.styleable.StyleableObject
	221	属性), 335
AdjustHandleList (openpyxl.drawing.geometry 中的 alignmentId (openpyxl.styles.cell_style.StyleArray
	类), 221	属性), 324
ahLst (openpyxl.drawing.geometry.CustomGeometry2DalignWithMargins	(open属性), 223	pyxl.worksheet.header_footer.HeaderFooter
algn (openpyxl.drawing.effect.OuterShadow 属性),	属性), 381
	208	allCaption (openpyxl.pivot.cache.CacheHierarchy
algn (openpyxl.drawing.effect.ReflectionEffect 属性),	属性), 277
	211	allDrilled (openpyxl.pivot.table.PivotField 属性),
algn (openpyxl.drawing.fill.TileInfoProperties 属性),	303
	220	allow_blank (openpyxl.worksheet.datavalidation.DataValidation
algn (openpyxl.drawing.line.LineProperties 属性),	属性), 368
	233	allow_none (openpyxl.chart.data_source.NumberValueDescriptor
	属性), 142	类), 203
allow_none (openpyxl.chart.descriptors.NestedGapAmountalphaFloor (openpyxl.drawing.fill.Blip 属性), 212
	属性), 143	AlphaFloorEffect (openpyxl.drawing.effect 中的类),
allow_none (openpyxl.chart.descriptors.NestedOverlap	203
        属性), 143 alphaInv (openpyxl.drawing.fill.Blip 属性), 212 allow_none (openpyxl.chart.descriptors.NumberFormatDescriptorAlphaInverseEffect (openpyxl.drawing.effect 中的
属性), 143
allow_none (openpyxl.chart.title.TitleDescriptor 属
性), 171
allow_none (openpyxl.descriptors.base.MatchPattern
属性), 186
allow_none (openpyxl.descriptors.base.Max 属性),
187
allow_none (openpyxl.descriptors.base.Min 属性),
187
allow_none (openpyxl.descriptors.base.Typed 属性),
187
allow_none (openpyxl.descriptors.excel.CellRange 属
性), 188
allow_none (openpyxl.descriptors.excel.Relation 属
性), 189类), 203
alphaMod (openpyxl.drawing.colors.SchemeColor 属
性), 196
alphaMod (openpyxl.drawing.colors.SystemColor 属
性), 198
alphaMod (openpyxl.drawing.fill.Blip 属性), 213 alphaModFix (openpyxl.drawing.fill.Blip 属性), 213
AlphaModulateEffect (openpyxl.drawing.effect 中的
类), 203
AlphaModulateFixedEffect	(openpyxl.drawing.effect 中的类), 203
alphaOff (openpyxl.drawing.colors.SchemeColor 属
性), 196
alphaOff (openpyxl.drawing.colors.SystemColor 属
性), 198allow_none (openpyxl.drawing.colors.ColorChoiceDescriptoralphaRepl (openpyxl.drawing.fill.Blip 属性), 213
        属性), 193 AlphaReplaceEffect (openpyxl.drawing.effect 中的 allowBlank (openpyxl.worksheet.datavalidation.DataValidation 类), 203
	属性), 368	altLang (openpyxl.drawing.text.CharacterProperties
allowPng (openpyxl.workbook.web.WebPublishing 属	属性), 243
	性), 358	altText (openpyxl.comments.comment_sheet.Properties
allowRefreshQuery	(open-	属性), 182
pyxl.workbook.properties.WorkbookProperties altText (openpyxl.worksheet.controls.ControlProperty属性), 350
allUniqueName	(open-
pyxl.pivot.cache.CacheHierarchy 属性),
277
alpha (openpyxl.drawing.colors.SchemeColor 属性),
195
alpha (openpyxl.drawing.colors.SystemColor 属性),
198
alphaBiLevel (openpyxl.drawing.fill.Blip 属性), 212
AlphaBiLevelEffect (openpyxl.drawing.effect 中的
类), 203
alphaCeiling (openpyxl.drawing.fill.Blip 属性), 212 AlphaCeilingEffect (openpyxl.drawing.effect 中的属性), 366
altText (openpyxl.worksheet.ole.ObjectPr 属性), 384 amt (openpyxl.drawing.effect.AlphaModulateFixedEffect
属性), 203
amt (openpyxl.drawing.effect.TintEffect 属性), 212 anchor (openpyxl.drawing.drawing.Drawing 属性),
202
anchor (openpyxl.drawing.geometry.Backdrop 属性),
221
anchor (openpyxl.drawing.image.Image 属性), 232 anchor (openpyxl.drawing.text.RichTextProperties 属
性), 252
anchor (openpyxl.worksheet.controls.ControlProperty属性), 366
anchor (openpyxl.worksheet.ole.ObjectPr 属性), 384
AnchorClientData	(open-
pyxl.drawing.spreadsheet_drawing 中的类), 240
anchorCtr (openpyxl.drawing.text.RichTextProperties
属性), 252
AnchorMarker	(open-
pyxl.drawing.spreadsheet_drawing 中的类), 240
ang (openpyxl.drawing.fill.LinearShadeProperties 属
性), 217
ang (openpyxl.drawing.geometry.ConnectionSite 属
        性), 222 angle_to_degrees() (在 openpyxl.utils.units 模块
中), 343
append() (openpyxl.packaging.manifest.Manifest 方
法), 268apply_stylesheet() (在 openpyxl.styles.stylesheet
模块中), 337
applyAlignment (openpyxl.styles.cell_style.CellStyle
属性), 323
applyAlignmentFormats	(open-
pyxl.pivot.table.TableDefinition 属性),
312
applyBorder (openpyxl.styles.cell_style.CellStyle 属
性), 323
applyBorderFormats	(open-
pyxl.pivot.table.TableDefinition 属性),
313
applyFill (openpyxl.styles.cell_style.CellStyle 属
性), 323
applyFont (openpyxl.styles.cell_style.CellStyle 属性), 323
applyFontFormats pyxl.pivot.table.TableDefinition(open属性),
(open属性),
(open属性),
(open属性),
(open属性),append() (openpyxl.packaging.relationship.RelationshipList	313
	方法), 270	applyNumberFormat
append() (openpyxl.styles.differential.DifferentialStyleList	pyxl.styles.cell_style.CellStyle 方法), 327	323
append() (openpyxl.styles.named_styles.NamedStyleListapplyNumberFormats
	方法), 333	pyxl.pivot.table.TableDefinition
append() (openpyxl.utils.indexed_list.IndexedList 方	313
	法), 341	applyPatternFormats
append() (openpyxl.workbook.defined_name.DefinedNameList	pyxl.pivot.table.TableDefinition 方法), 347	313
append() (openpyxl.worksheet.datavalidation.DataValidationListapplyProtection
	方法), 370	pyxl.styles.cell_style.CellStyleappend() (openpyxl.worksheet.hyperlink.HyperlinkList	323
	方法), 382	applyStyles (openpyxl.worksheet.properties.Outline
append() (openpyxl.worksheet.pagebreak.RowBreak	属性), 389
	方法), 388	applyToEnd (openpyxl.chart.picture.PictureOptions
append() (openpyxl.worksheet.scenario.ScenarioList	属性), 152
        方法), 394	applyToFront	(openappend() (openpyxl.worksheet.table.TablePartList 方	pyxl.chart.picture.PictureOptions 属性),
	法), 399	152
append() (openpyxl.worksheet.worksheet.Worksheet applyToSides (open方法), 404 pyxl.chart.picture.PictureOptions 属性),
Application (openpyxl.packaging.extended.ExtendedProperties 152
属性), 266	applyWidthHeightFormats	(openpyxl.pivot.table.TableDefinition 属性),	属性), 191
	313	attribute (openpyxl.pivot.cache.CacheHierarchy 属
appName (openpyxl.workbook.properties.FileVersion	性), 277
	属性), 350	author (openpyxl.comments.author.AuthorList 属
AppVersion (openpyxl.packaging.extended.ExtendedProperties 性), 180
属性), 266
area3DChart (openpyxl.chart.plotarea.PlotArea 属
性), 156
AreaChart (openpyxl.chart.area_chart 中的类), 125 areaChart (openpyxl.chart.plotarea.PlotArea 属性),
156
AreaChart3D (openpyxl.chart.area_chart 中的类), 126
ARG (openpyxl.formula.tokenizer.Token 属性), 260 ARRAY (openpyxl.formula.tokenizer.Token 属性), 260 array (openpyxl.worksheet.table.TableFormula 属性), 398
ArrayDescriptor (openpyxl.styles.cell_style 中的
类), 323
as_name() (openpyxl.styles.named_styles.NamedStyle
方法), 333author (openpyxl.comments.comment_sheet.CommentRecord 属性), 181
authorId (openpyxl.comments.comment_sheet.CommentRecord 属性), 181
AuthorList (openpyxl.comments.author 中的类), 180 authors (openpyxl.comments.author.AuthorList 属
性), 181
authors (openpyxl.comments.comment_sheet.CommentSheet 属性), 181
auto (openpyxl.chart.axis.DateAxis 属性), 127 auto (openpyxl.chart.axis.TextAxis 属性), 132 auto (openpyxl.styles.colors.Color 属性), 325 auto_size (openpyxl.worksheet.dimensions.ColumnDimension
属性), 370
autoCompressPictures	(open-
pyxl.workbook.properties.WorkbookPropertiesas_tuple() (openpyxl.styles.named_styles.NamedStyle	属性), 350
方法), 333
as_xf() (openpyxl.styles.named_styles.NamedStyle
方法), 333
ASCII (openpyxl.descriptors.base 中的类), 185
assert_empty_token()	(open-
pyxl.formula.tokenizer.Tokenizer 方法),
261
assign_names()	(open-
pyxl.reader.workbook.WorkbookParser
方法), 319
asteriskTotals	(open-
pyxl.pivot.table.TableDefinition 属性),
313autoEnd (openpyxl.pivot.cache.RangePr 属性), 287 autoFill (openpyxl.comments.comment_sheet.Properties
属性), 182
autoFill (openpyxl.worksheet.controls.ControlProperty
属性), 366
autoFill (openpyxl.worksheet.ole.ObjectPr 属性),
384
autoFilter (openpyxl.pivot.table.PivotFilter 属性), 307
AutoFilter (openpyxl.worksheet.filters 中的类), 375 autoFilter (openpyxl.worksheet.protection.SheetProtection
属性), 391
autoFilter (openpyxl.worksheet.table.Table 属性),attr_text (openpyxl.workbook.defined_name.DefinedName	395
        属性), 346 autoFilterDateGrouping (openattr_text (openpyxl.worksheet.table.TableFormula pyxl.workbook.views.BookView 属性), 属性), 398	355
attribute (openpyxl.descriptors.nested.Nested 属 autoFormatId (openpyxl.pivot.table.TableDefinition
        性), 189	属性), 313 attribute (openpyxl.descriptors.sequence.ValueSequenceautoLine (openpyxl.comments.comment_sheet.Properties 属性), 182	属性), 139 autoLine (openpyxl.worksheet.controls.ControlPropertyautoUpdate (openpyxl.workbook.views.CustomWorkbookView
	属性), 366	属性), 356
autoLine (openpyxl.worksheet.ole.ObjectPr 属性), avgSubtotal (openpyxl.pivot.table.PivotField 属性),
384 304
autoLoad (openpyxl.worksheet.ole.OleObject 属性), avgSubtotal (openpyxl.pivot.table.Reference 属性),
385 310
AutonumberBullet (openpyxl.drawing.text 中的类), avLst (openpyxl.drawing.geometry.CustomGeometry2D
	242	属性), 223
autoPage (openpyxl.pivot.cache.Consolidation 属性), avLst (openpyxl.drawing.geometry.PresetGeometry2D
	280	属性), 226
autoPageBreaks	(open- avLst (openpyxl.drawing.text.PresetTextShape 属性),
pyxl.worksheet.page.PrintPageSetup 属 251 性), 386 avoid_duplicate_name()	(在	open-
autoPageBreaks	(open-	pyxl.workbook.child 模块中), 346
pyxl.worksheet.properties.PageSetupPropertiesAxDataSource (openpyxl.chart.data_source 中的类),
	属性), 389	139
autoPict (openpyxl.worksheet.controls.ControlPropertyaxId (openpyxl.chart.axis.DateAxis 属性), 127
	属性), 366	axId (openpyxl.chart.axis.NumericAxis 属性), 129
autoPict (openpyxl.worksheet.ole.ObjectPr 属性), axId (openpyxl.chart.axis.SeriesAxis 属性), 131
	384	axId (openpyxl.chart.axis.TextAxis 属性), 132
autoRecover (openpyxl.packaging.workbook.FileRecoveryPropertiesaxis (openpyxl.pivot.table.PivotArea 属性), 302
属性), 271
autoRepublish	(open-
pyxl.chartsheet.publish.WebPublishItem
属性), 176
autoRepublish	(open-
pyxl.workbook.web.WebPublishObject 属性), 358axis (openpyxl.pivot.table.PivotField 属性), 304 axPos (openpyxl.chart.axis.DateAxis 属性), 127 axPos (openpyxl.chart.axis.NumericAxis 属性), 129 axPos (openpyxl.chart.axis.SeriesAxis 属性), 131 axPos (openpyxl.chart.axis.TextAxis 属性), 132
BautoScale (openpyxl.comments.comment_sheet.Propertiesb (openpyxl.cell.text.InlineFont 属性), 123
属性), 182
autoShow (openpyxl.pivot.table.PivotField 属性), 304
AutoSlotProperties (openpyxl.descriptors.slots 中
的类), 192
AutoSortScope (openpyxl.pivot.table 中的类), 297 autoSortScope (openpyxl.pivot.table.PivotField 属
性), 304
autoStart (openpyxl.pivot.cache.RangePr 属性), 287 autoTitleDeleted	(open-
pyxl.chart.chartspace.ChartContainer
属性), 137
autoUpdate (openpyxl.chart.chartspace.ExternalDatab (openpyxl.chart.print_settings.PageMargins 属性),
159
b (openpyxl.drawing.colors.RGBPercent 属性), 195 b (openpyxl.drawing.fill.RelativeRect 属性), 218 b (openpyxl.drawing.geometry.GeomRect 属性), 223 b (openpyxl.drawing.text.CharacterProperties 属性),
243
b (openpyxl.pivot.cache.GroupItems 属性), 281 b (openpyxl.pivot.cache.SharedItems 属性), 289 b (openpyxl.pivot.fields.Error 属性), 292 b (openpyxl.pivot.fields.Missing 属性), 293 b (openpyxl.pivot.fields.Number 属性), 294b (openpyxl.pivot.fields.Text 属性), 295	base_date (openpyxl.cell.cell.Cell 属性), 120
b (openpyxl.pivot.record.Record 属性), 296	baseColWidth	(open-
b (openpyxl.styles.fonts.Font 属性), 329 pyxl.worksheet.dimensions.SheetFormatProperties Backdrop (openpyxl.drawing.geometry 中的类), 221 属性), 373
backdrop (openpyxl.drawing.geometry.Scene3D 属 baseField (openpyxl.pivot.table.DataField 属性),
	性), 227	298
background (openpyxl.drawing.fill.PatternFillPropertiesbaseItem (openpyxl.pivot.table.DataField 属性), 298
	属性), 217	baseline (openpyxl.drawing.text.CharacterProperties
backgroundQuery	(open-	属性), 243
pyxl.pivot.cache.CacheDefinition 属性), baseTimeUnit (openpyxl.chart.axis.DateAxis 属性),
	274	127
backupFile (openpyxl.workbook.properties.WorkbookPropertiesbc (openpyxl.pivot.fields.Error 属性), 292
        属性), 350 bc (openpyxl.pivot.fields.Missing 属性), 293 backWall (openpyxl.chart.bar_chart.BarChart3D 属 bc (openpyxl.pivot.fields.Number 属性), 294
	性), 135	bc (openpyxl.pivot.fields.Text 属性), 295
backWall (openpyxl.chart.chartspace.ChartContainer bestFit (openpyxl.worksheet.dimensions.ColumnDimension 属性), 137	属性), 371
backward (openpyxl.chart.trendline.Trendline 属性), Bevel (openpyxl.drawing.geometry 中的类), 221
	171	bevel (openpyxl.drawing.line.LineProperties 属性),
bandFmt (openpyxl.chart.surface_chart.BandFormatList	233
	属性), 168	bevelB (openpyxl.drawing.geometry.Shape3D 属性),
bandFmts (openpyxl.chart.surface_chart.SurfaceChart	227
	属性), 168	bevelT (openpyxl.drawing.geometry.Shape3D 属性),
bandFmts (openpyxl.chart.surface_chart.SurfaceChart3D	228

属性), 168
BandFormat (openpyxl.chart.surface_chart 中的类), 168
BandFormatList (openpyxl.chart.surface_chart 中的
类), 168
bar3DChart (openpyxl.chart.plotarea.PlotArea 属性), 156
BarChart (openpyxl.chart.bar_chart 中的类), 134 barChart (openpyxl.chart.plotarea.PlotArea 属性), 156
BarChart3D (openpyxl.chart.bar_chart 中的类), 134 barDir (openpyxl.chart.bar_chart.BarChart 属性),
        134 barDir (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
base (openpyxl.pivot.cache.FieldGroup 属性), 281 Base64Binary (openpyxl.descriptors.excel 中的类),
188
bg1(openpyxl.drawing.colors.ColorMapping
194属性),bg2(openpyxl.drawing.colors.ColorMapping
194属性),bgClr (openpyxl.drawing.fill.PatternFillProperties 属
性), 217
bgColor (openpyxl.styles.fills.PatternFill 属性), 328 biLevel (openpyxl.drawing.fill.Blip 属性), 213 BiLevelEffect (openpyxl.drawing.effect 中的类),
        203 bind() (openpyxl.comments.comments.Comment 方
法), 183
bind() (openpyxl.styles.named_styles.NamedStyle 方
法), 333
bIns (openpyxl.drawing.text.RichTextProperties 属
性), 252
blackAndWhite	(openpyxl.worksheet.page.PrintPageSetup 属
性), 386
blank (openpyxl.worksheet.filters.Filters 属性), 378 blend (openpyxl.drawing.effect.FillOverlayEffect 属
        性), 205 Blip (openpyxl.drawing.fill 中的类), 212 blip (openpyxl.drawing.fill.BlipFillProperties 属性),
        214 blipFill (openpyxl.drawing.picture.PictureFrame 属
性), 235
blipFill (openpyxl.drawing.text.CharacterProperties 属性), 243
BlipFillProperties (openpyxl.drawing.fill 中的类),
        214 blue (openpyxl.drawing.colors.SchemeColor 属性),
        196 blue (openpyxl.drawing.colors.SystemColor 属性),
198blueMod (openpyxl.drawing.colors.SchemeColor
性), 196属blueMod (openpyxl.drawing.colors.SystemColor
性), 198属blueOff (openpyxl.drawing.colors.SchemeColor
性), 196属blueOff (openpyxl.drawing.colors.SystemColor属性), 198
blur (openpyxl.drawing.effect.EffectList 属性), 204 blur (openpyxl.drawing.fill.Blip 属性), 213 BlurEffect (openpyxl.drawing.effect 中的类), 203 blurRad (openpyxl.drawing.effect.InnerShadowEffect 属性), 206
blurRad (openpyxl.drawing.effect.OuterShadow 属
性), 208
blurRad (openpyxl.drawing.effect.ReflectionEffect 属
性), 211
bmk (openpyxl.drawing.text.CharacterProperties 属
性), 243
body (openpyxl.chart.title.Title 属性), 170 bodyPr (openpyxl.chart.text.RichText 属性), 169 bold (openpyxl.styles.fonts.Font 属性), 330 BookView (openpyxl.workbook.views 中的类), 355 Bool (openpyxl.descriptors.base 中的类), 186 Boolean (openpyxl.pivot.fields 中的类), 291
border (openpyxl.cell.read_only.EmptyCell 属性),
        121 border (openpyxl.cell.read_only.ReadOnlyCell 属
性), 122
Border (openpyxl.styles.borders 中的类), 321
border (openpyxl.styles.differential.DifferentialStyle 属性), 326
border (openpyxl.styles.named_styles.NamedStyle 属
性), 333
border (openpyxl.styles.styleable.StyleableObject 属
性), 335
border_style (openpyxl.styles.borders.Side 属性),
        322 borderId (openpyxl.styles.cell_style.CellStyle 属性),
        323 borderId (openpyxl.styles.cell_style.StyleArray 属
性), 324
borders (openpyxl.styles.stylesheet.Stylesheet 属性),
        336 bottom (openpyxl.chart.print_settings.PageMargins 属性), 159
bottom (openpyxl.drawing.fill.RelativeRect 属性), 218 bottom (openpyxl.formatting.rule.Rule 属性), 258 bottom (openpyxl.styles.borders.Border 属性), 321
bottom (openpyxl.styles.fills.GradientFill 属性), 327 bottom (openpyxl.worksheet.cell_range.CellRange 属
性), 363
bottom (openpyxl.worksheet.page.PageMargins 属
性), 385
boundaries (openpyxl.worksheet.dimensions.SheetDimension 属性), 373
BoundDictionary (openpyxl.utils.bound_dictionary 中的类), 338
bounds (openpyxl.worksheet.cell_range.CellRange 属
性), 363
br (openpyxl.drawing.text.Paragraph 属性), 248 Break (openpyxl.worksheet.pagebreak 中的类), 388
BREAK_COLUMN	(open-

bookViews (openpyxl.packaging.workbook.WorkbookPackage	pyxl.worksheet.worksheet.Worksheet 属属性), 272	性), 403
BREAK_NONE (openpyxl.worksheet.worksheet.Worksheet	模块中), 334
	属性), 403	builtInGroupCount	(open-
BREAK_ROW (openpyxl.worksheet.worksheet.Worksheet	pyxl.workbook.function_group.FunctionGroupList 属性), 403	属性), 348
bright (openpyxl.drawing.effect.LuminanceEffect 属 builtinId (openpyxl.styles.named_styles.NamedStyle
	性), 208	属性), 333
brk (openpyxl.worksheet.pagebreak.ColBreak 属性), builtInUnit (openpyxl.chart.axis.DisplayUnitsLabelList
        388 属性), 129
brk (openpyxl.worksheet.pagebreak.RowBreak 属性), buNone (openpyxl.drawing.text.ParagraphProperties
        389 属性), 250 buAutoNum (openpyxl.drawing.text.ParagraphProperties buSzPct (openpyxl.drawing.text.ParagraphProperties
属性), 249
bubble3D (openpyxl.chart.bubble_chart.BubbleChart
属性), 136
bubble3D (openpyxl.chart.marker.DataPoint 属性),
150
bubble3D (openpyxl.chart.series.Series 属性), 162 bubble3D (openpyxl.chart.series.XYSeries 属性), 164
BubbleChart (openpyxl.chart.bubble_chart 中的类),
136
bubbleChart (openpyxl.chart.plotarea.PlotArea 属
性), 157属性), 250
buSzPts (openpyxl.drawing.text.ParagraphProperties
属性), 250
buSzTx (openpyxl.drawing.text.ParagraphProperties
属性), 250
bwMode (openpyxl.chart.shapes.GraphicalProperties
属性), 166
bwMode (openpyxl.drawing.properties.GroupShapeProperties
属性), 238
byPosition (openpyxl.pivot.table.Reference 属性),
310bubbleScale (openpyxl.chart.bubble_chart.BubbleChart
C属性), 136
bubbleSize (openpyxl.chart.series.Series 属性), 162 bubbleSize (openpyxl.chart.series.XYSeries 属性),
165
buBlip (openpyxl.drawing.text.ParagraphProperties
属性), 249
buChar (openpyxl.drawing.text.ParagraphProperties
属性), 249
buClr (openpyxl.drawing.text.ParagraphProperties 属
性), 249
buClrTx (openpyxl.drawing.text.ParagraphProperties
属性), 249
buFont (openpyxl.drawing.text.ParagraphProperties
属性), 249c (openpyxl.pivot.fields.Boolean 属性), 291 c (openpyxl.pivot.fields.DateTimeField 属性), 291 c (openpyxl.pivot.fields.Error 属性), 292 c (openpyxl.pivot.fields.Missing 属性), 293 c (openpyxl.pivot.fields.Number 属性), 294 c (openpyxl.pivot.fields.Text 属性), 295 c (openpyxl.pivot.fields.TupleList 属性), 296 c (openpyxl.pivot.table.FieldItem 属性), 299 cache (openpyxl.pivot.table.TableDefinition 属性), 313
Cached (openpyxl.compat.singleton 中的类), 185
CacheDefinition (openpyxl.pivot.cache 中的类), 274
CacheField (openpyxl.pivot.cache 中的类), 276buFontTx (openpyxl.drawing.text.ParagraphProperties cacheFields (openpyxl.pivot.cache.CacheDefinition 属性), 249	属性), 274
builtin_format_code()	(在	open- cacheHierarchies	(openpyxl.styles.numbers 模块中), 334	pyxl.pivot.cache.CacheDefinition 属性),
builtin_format_id() (在 openpyxl.styles.numbers	274
CacheHierarchy (openpyxl.pivot.cache 中的类), 277 cacheId (openpyxl.packaging.workbook.PivotCache 属性), 272
cacheId (openpyxl.pivot.table.TableDefinition 属性),
        313 cacheIndex (openpyxl.pivot.table.PivotArea 属性), 302
CacheSource (openpyxl.pivot.cache 中的类), 279 cacheSource (openpyxl.pivot.cache.CacheDefinition 属性), 274
calcCompleted	(openpyxl.workbook.properties.CalcProperties
属性), 349
calcId (openpyxl.workbook.properties.CalcProperties 属性), 349
性), 379
Camera (openpyxl.drawing.geometry 中的类), 222 camera (openpyxl.drawing.geometry.Scene3D 属性),
        227 cap (openpyxl.drawing.line.LineProperties 属性), 233 cap (openpyxl.drawing.text.CharacterProperties 属
性), 243
cap (openpyxl.pivot.table.PageField 属性), 302 caption (openpyxl.pivot.cache.CacheField 属性), 276 caption (openpyxl.pivot.cache.CacheHierarchy 属
        性), 277 caption (openpyxl.pivot.cache.GroupLevel 属性), 282 caption (openpyxl.pivot.cache.LevelGroup 属性), 283 caption (openpyxl.pivot.cache.MeasureGroup 属性),
calcMode (openpyxl.workbook.properties.CalcPropertiescaption (openpyxl.pivot.cache.PCDKPI 属性), 285
	属性), 349	caption (openpyxl.pivot.cache.PivotDimension 属
calcOnSave (openpyxl.workbook.properties.CalcProperties	性), 286
	属性), 349	caption (openpyxl.pivot.table.PivotHierarchy 属性),
calcPr (openpyxl.packaging.workbook.WorkbookPackage	308284

属性), 272
CalcProperties (openpyxl.workbook.properties 中的
类), 349
calculate_dimension()	(openpyxl.worksheet.worksheet.Worksheet 方法), 404
calculatedColumn	(openpyxl.worksheet.errors.IgnoredError 属性), 374
calculatedColumnFormula	(openpyxl.worksheet.table.TableColumn	属性), 397
CalculatedItem (openpyxl.pivot.cache 中的类), 279 calculatedItems	(openpyxl.pivot.cache.CacheDefinition 属性),
274
CalculatedMember (openpyxl.pivot.cache 中的类),
280
calculatedMembers	(openpyxl.pivot.cache.CacheDefinition 属性),
        274 calendarType (openpyxl.worksheet.filters.Filters 属 caseSensitive (openpyxl.worksheet.filters.SortState 属性), 380
cast_numeric() (在 openpyxl.utils.inference 模块
中), 342
cast_percentage() (在 openpyxl.utils.inference 模块中), 342
cast_time() (在 openpyxl.utils.inference 模块中),
        342 cat (openpyxl.chart.series.Series 属性), 162 catAx (openpyxl.chart.plotarea.PlotArea 属性), 157 category (openpyxl.packaging.core.DocumentProperties 属性), 264
Cell (openpyxl.cell.cell 中的类), 120 cell (openpyxl.workbook.external_link.external.ExternalRow 属性), 345
cell() (openpyxl.worksheet.worksheet.Worksheet 方
法), 404
CELL_REF_RE (openpyxl.formula.translate.Translator 属性), 262
cellColor (openpyxl.worksheet.filters.ColorFilter 属
性), 376
cellComments	(open-
pyxl.worksheet.page.PrintPageSetup 属 cellXfs (openpyxl.styles.stylesheet.Stylesheet 属性),
	性), 387	336
CellCoordinatesException, 340 center (openpyxl.worksheet.header_footer.HeaderFooterItem CellIsRule() (在 openpyxl.formatting.rule 模块中), 属性), 381
	256	centerFooterEvenPages	(open-
CellRange (openpyxl.descriptors.excel 中的类), 188 pyxl.chartsheet.relation.DrawingHF 属 CellRange (openpyxl.worksheet.cell_range 中的类), 性), 177
	362	centerFooterFirstPage	(open-
cells (openpyxl.formatting.formatting.ConditionalFormatting	pyxl.chartsheet.relation.DrawingHF 属属性), 256	性), 177
cells (openpyxl.worksheet.cell_range.CellRange 属 centerFooterOddPages	(open性), 363	pyxl.chartsheet.relation.DrawingHF 属
cells (openpyxl.worksheet.datavalidation.DataValidation	性), 177属性), 368
CellSmartTag (openpyxl.worksheet.smart_tag 中的
类), 394
cellSmartTag	(openpyxl.worksheet.smart_tag.CellSmartTags
属性), 395
CellSmartTagPr (openpyxl.worksheet.smart_tag 中的类), 394
cellSmartTagPr	(openpyxl.worksheet.smart_tag.CellSmartTag
属性), 394
CellSmartTags (openpyxl.worksheet.smart_tag 中的
类), 394
cellSmartTags	(openpyxl.worksheet.smart_tag.SmartTags 属性), 395
CellStyle (openpyxl.styles.cell_style 中的类), 323
CellStyleList (openpyxl.styles.cell_style 中的类),
        324 cellStyles (openpyxl.styles.stylesheet.Stylesheet 属
性), 336
cellStyleXfs (openpyxl.styles.stylesheet.Stylesheet 属性), 336
CellWatch (openpyxl.worksheet.cell_watch 中的类),
365
centerHeaderEvenPages	(openpyxl.chartsheet.relation.DrawingHF 属性), 177
centerHeaderFirstPage	(openpyxl.chartsheet.relation.DrawingHF 属性), 177
centerHeaderOddPages	(openpyxl.chartsheet.relation.DrawingHF 属性), 177
centre (openpyxl.worksheet.header_footer.HeaderFooterItem 属性), 381
cf (openpyxl.worksheet.controls.ControlProperty 属
性), 366
cfe (openpyxl.chartsheet.relation.DrawingHF 属性),
        177 cff (openpyxl.chartsheet.relation.DrawingHF 属性),
        177 cfo (openpyxl.chartsheet.relation.DrawingHF 属性),
        177 cfRule (openpyxl.formatting.formatting.ConditionalFormatting
        属性), 256
cellWatch (openpyxl.worksheet.cell_watch.CellWatchesCharacterProperties (openpyxl.drawing.text 中的属性), 365	类), 243
CellWatches (openpyxl.worksheet.cell_watch 中的 Characters (openpyxl.packaging.extended.ExtendedProperties
	类), 365	属性), 266cfvo (openpyxl.formatting.rule.RuleType 属性), 259 changesSavedWin	(openpyxl.workbook.views.CustomWorkbookView 属性), 356
characterSet	(openpyxl.workbook.web.WebPublishing 属性),
358
CharactersWithSpaces	(openpyxl.packaging.extended.ExtendedProperties
属性), 266
charset (openpyxl.cell.text.InlineFont 属性), 123 charset (openpyxl.drawing.text.Font 属性), 246 charset (openpyxl.styles.fonts.Font 属性), 330 chart (openpyxl.chart.chartspace.ChartSpace 属性),
        138 chart (openpyxl.drawing.graphic.GraphicData 属性),
        230 chart (openpyxl.pivot.table.ChartFormat 属性), 297
ChartContainer (openpyxl.chart.chartspace 中的类),
137
ChartFormat (openpyxl.pivot.table 中的类), 297 chartFormat (openpyxl.pivot.table.TableDefinition 属性), 313
chartFormats (openpyxl.pivot.table.TableDefinition 属性), 313
ChartLines (openpyxl.chart.axis 中的类), 127 chartObject (openpyxl.chart.chartspace.Protection 属性), 139
ChartRelation (openpyxl.drawing.relation 中的类),
239
Chartsheet (openpyxl.chartsheet.chartsheet 中的类), 173
ChartsheetProperties	(openpyxl.chartsheet.properties 中的类), 175
ChartsheetProtection	(openpyxl.chartsheet.protection 中的类), 175
chartsheets (openpyxl.workbook.workbook.Workbook 属性), 359
ChartsheetView (openpyxl.chartsheet.views 中的类),
180
ChartsheetViewList (openpyxl.chartsheet.views 中的类), 180
ChartSpace (openpyxl.chart.chartspace 中的类), 137 che (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 check_error() (openpyxl.cell.cell.Cell 方法), 120 check_scientific_notation()	(openpyxl.formula.tokenizer.Tokenizer 方法),
        262 check_string() (openpyxl.cell.cell.Cell 方法), 120
checkCompatibility	(open-
pyxl.workbook.properties.WorkbookProperties
属性), 350
chExt (openpyxl.drawing.geometry.GroupTransform2D 属性), 224
chExt (openpyxl.drawing.geometry.Transform2D 属
性), 229
chExt (openpyxl.drawing.xdr.XDRTransform2D 属
性), 255
chf (openpyxl.chartsheet.relation.DrawingHF 属性),
178
ChildSheet (openpyxl.packaging.workbook 中的类),
        271 cho (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 chOff (openpyxl.drawing.geometry.GroupTransform2D 属性), 224
chOff (openpyxl.drawing.geometry.Transform2D 属
性), 229
chOff (openpyxl.drawing.xdr.XDRTransform2D 属
性), 255
clientData (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor 属性), 240
clientData (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor 属性), 241
clientData (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor 属性), 242
CLOSE (openpyxl.formula.tokenizer.Token 属性), 260 close() (openpyxl.workbook.workbook.Workbook 方
法), 359
clrChange (openpyxl.drawing.fill.Blip 属性), 213 clrFrom (openpyxl.drawing.effect.ColorChangeEffect 属性), 204
clrMapOvr (openpyxl.chart.chartspace.ChartSpace 属
性), 138
clrRepl (openpyxl.drawing.fill.Blip 属性), 213 clrTo (openpyxl.drawing.effect.ColorChangeEffect 属
性), 204

cm_to_dxa() (在 openpyxl.utils.units 模块中), 343 262 cm_to_EMU() (在 openpyxl.utils.units 模块中), 343 ColBreak (openpyxl.worksheet.pagebreak 中的类), cmpd (openpyxl.drawing.line.LineProperties 属性), 388
	233	colFields (openpyxl.pivot.table.TableDefinition 属
cNvCxnSpPr (openpyxl.drawing.connector.ConnectorNonVisual 性), 313 属性), 200	colGrandTotals
cNvGraphicFramePr	(open-	pyxl.pivot.table.TableDefinition
	pyxl.drawing.graphic.NonVisualGraphicFrame	313
	属性), 231	colHeaderCaption
cNvGrpSpPr (openpyxl.drawing.properties.NonVisualGroupShapepyxl.pivot.table.TableDefinition(open属性),
(open属性),	属性), 239	313
cNvPicPr (openpyxl.drawing.picture.PictureNonVisual colHidden (openpyxl.comments.comment_sheet.Properties 属性), 236	属性), 182
cNvPr (openpyxl.drawing.connector.ConnectorNonVisualColHierarchiesUsage (openpyxl.pivot.table 中的类), 属性), 200	298
cNvPr (openpyxl.drawing.connector.ShapeMeta 属 colHierarchiesUsage	(open性), 202	pyxl.pivot.table.TableDefinition 属性),
cNvPr (openpyxl.drawing.graphic.NonVisualGraphicFrame	313
        属性), 232 colHierarchyUsage (opencNvPr (openpyxl.drawing.picture.PictureNonVisual pyxl.pivot.table.ColHierarchiesUsage 属属性), 236	性), 298
cNvPr (openpyxl.drawing.properties.NonVisualGroupShapecolId (openpyxl.worksheet.filters.FilterColumn 属属性), 239	性), 378
cNvSpPr (openpyxl.drawing.connector.ShapeMeta 属 colItems (openpyxl.pivot.table.TableDefinition 属
	性), 202	性), 313
codeName (openpyxl.chartsheet.properties.ChartsheetPropertiescollapse_cell_addresses() (在 open属性), 175 pyxl.worksheet.datavalidation 模块中),
codeName (openpyxl.workbook.properties.FileVersion	370
	属性), 350	collapsed (openpyxl.worksheet.dimensions.ColumnDimension
codeName (openpyxl.workbook.properties.WorkbookProperties 属性), 371
	属性), 351	collapsed (openpyxl.worksheet.dimensions.Dimension
codeName (openpyxl.worksheet.properties.WorksheetProperties 属性), 371
	属性), 390	collapsedLevelsAreSubtotals	(open-
codePage (openpyxl.workbook.web.WebPublishing 属	pyxl.pivot.table.PivotArea 属性), 302
	性), 358	collection (openpyxl.styles.styleable.NamedStyleDescriptor
col (openpyxl.drawing.spreadsheet_drawing.AnchorMarker 属性), 335
	属性), 240	collection (openpyxl.styles.styleable.NumberFormatDescriptor
col_id (openpyxl.worksheet.filters.FilterColumn 属	属性), 335
	性), 378	colOff (openpyxl.drawing.spreadsheet_drawing.AnchorMarker
col_idx (openpyxl.cell.cell.Cell 属性), 120	属性), 240
COL_RANGE_RE	(open- color (openpyxl.cell.text.InlineFont 属性), 123
pyxl.formula.translate.Translator 属性), Color (openpyxl.drawing.effect 中的类), 203

color (openpyxl.formatting.rule.ColorScale 属性),
        256 color (openpyxl.formatting.rule.DataBar 属性), 257 color (openpyxl.styles.borders.Side 属性), 322 Color (openpyxl.styles.colors 中的类), 325 color (openpyxl.styles.fills.Stop 属性), 329 color (openpyxl.styles.fonts.Font 属性), 330
ColorChangeEffect (openpyxl.drawing.effect 中的
类), 204
ColorChoice (openpyxl.drawing.colors 中的类), 192
ColorChoiceDescriptor (openpyxl.drawing.colors 中的类), 193
ColorDescriptor (openpyxl.styles.colors 中的类),
325
ColorFilter (openpyxl.worksheet.filters 中的类), 376 colorFilter (openpyxl.worksheet.filters.FilterColumn 属性), 378
colorId (openpyxl.worksheet.views.SheetView 属性), 401
ColorList (openpyxl.styles.colors 中的类), 325
ColorMapping (openpyxl.drawing.colors 中的类), 193
ColorReplaceEffect (openpyxl.drawing.effect 中的
类), 204
colors (openpyxl.styles.stylesheet.Stylesheet 属性), 336
ColorScale (openpyxl.formatting.rule 中的类), 256 colorScale (openpyxl.formatting.rule.Rule 属性),
258
ColorScaleRule() (在 openpyxl.formatting.rule 模块中), 256
colPageCount (openpyxl.pivot.table.Location 属性),
        300 cols (openpyxl.chart.reference.Reference 属性), 161 cols (openpyxl.worksheet.cell_range.CellRange 属
性), 363
cols_from_range() (在 openpyxl.utils.cell 模块中),
        339 column (openpyxl.cell.cell.Cell 属性), 120 column (openpyxl.cell.cell.MergedCell 属性), 121 column (openpyxl.cell.read_only.ReadOnlyCell 属
        性), 122 column_index_from_string()	(在 openpyxl.utils.cell 模块中), 339
column_letter (openpyxl.cell.cell.Cell 属性), 120
column_letter	(openpyxl.cell.read_only.ReadOnlyCell 属性), 122
ColumnDimension (openpyxl.worksheet.dimensions 中的类), 370
columns (openpyxl.worksheet.worksheet.Worksheet 属
性), 405
columnSort (openpyxl.worksheet.filters.SortState 属
性), 380
comment (openpyxl.cell.cell.Cell 属性), 120 comment (openpyxl.cell.cell.MergedCell 属性), 121 Comment (openpyxl.comments.comments 中的类), 183 comment (openpyxl.workbook.defined_name.DefinedName 属性), 346
comment (openpyxl.worksheet.scenario.Scenario 属
性), 393
comment (openpyxl.worksheet.table.Table 属性), 395
commentList (openpyxl.comments.comment_sheet.CommentSheet 属性), 182
commentPr (openpyxl.comments.comment_sheet.CommentRecord 属性), 181
CommentRecord (openpyxl.comments.comment_sheet 中的类), 181
comments (openpyxl.comments.comment_sheet.CommentSheet 属性), 182
CommentSheet (openpyxl.comments.comment_sheet 中的类), 181
comp (openpyxl.drawing.colors.SchemeColor 属性),
        196 comp (openpyxl.drawing.colors.SystemColor 属性),
        198 compact (openpyxl.pivot.table.PivotField 属性), 304 compact (openpyxl.pivot.table.TableDefinition 属性),
        313 compactData (openpyxl.pivot.table.TableDefinition 属性), 313
Company (openpyxl.packaging.extended.ExtendedProperties 属性), 266
compatLnSpc (openpyxl.drawing.text.RichTextProperties 属性), 252
concurrentCalc	(openpyxl.workbook.properties.CalcProperties
属性), 349
concurrentManualCount	(openpyxl.workbook.properties.CalcProperties
属性), 349
condense (openpyxl.cell.text.InlineFont 属性), 123 condense (openpyxl.styles.fonts.Font 属性), 330 ConditionalFormat (openpyxl.pivot.table 中的类),
298
conditionalFormats	(openpyxl.pivot.table.TableDefinition 属性),
314
ConditionalFormatting	(openpyxl.formatting.formatting 中的类), 256
ConditionalFormattingList	(openpyxl.formatting.formatting 中的类), 256 containsDate (openpyxl.pivot.cache.SharedItems 属
性), 289
containsInteger (openpyxl.pivot.cache.SharedItems 属性), 289
containsMixedTypes	(openpyxl.pivot.cache.SharedItems 属性), 289
containsNonDate (openpyxl.pivot.cache.SharedItems 属性), 289
containsNumber (openpyxl.pivot.cache.SharedItems 属性), 289
containsSemiMixedTypes	(openpyxl.pivot.cache.SharedItems 属性), 289
containsString (openpyxl.pivot.cache.SharedItems 属性), 289
conformance (openpyxl.packaging.workbook.WorkbookPackagecontent (openpyxl.comments.comment_sheet.CommentRecordcontent (openpyxl.cell.text.Text 属性), 125 content (openpyxl.chartsheet.protection.ChartsheetProtection 属性), 175

属性), 272
Connection (openpyxl.drawing.connector 中的类),
        200 connectionId (openpyxl.pivot.cache.CacheSource 属
性), 279
connectionId (openpyxl.worksheet.table.Table 属性), 395
ConnectionSite (openpyxl.drawing.geometry 中的
类), 222
ConnectionSiteList (openpyxl.drawing.geometry 中的类), 223
ConnectorLocking (openpyxl.drawing.connector 中的类), 200
ConnectorNonVisual (openpyxl.drawing.connector 中的类), 200
ConnectorShape (openpyxl.drawing.connector 中的
类), 200
Consolidation (openpyxl.pivot.cache 中的类), 280 consolidation (openpyxl.pivot.cache.CacheSource 属性), 279
cont (openpyxl.drawing.effect.AlphaModulateEffect 属性), 203
containsBlank (openpyxl.pivot.cache.SharedItems 属性), 289
属性), 181
contentPart (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor 属性), 240
contentPart (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor 属性), 241
contentPart (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor 属性), 242
contentStatus	(open-
pyxl.packaging.core.DocumentProperties
属性), 264
ContentType (openpyxl.packaging.manifest.FileExtension 属性), 268
ContentType (openpyxl.packaging.manifest.Override 属性), 269
contourClr (openpyxl.drawing.geometry.Shape3D 属
性), 228
contourW (openpyxl.drawing.geometry.Shape3D 属
性), 228
contrast (openpyxl.drawing.effect.LuminanceEffect 属性), 208
Control (openpyxl.worksheet.controls 中的类), 366 control (openpyxl.worksheet.controls.Controls 属
性), 367
controlPr (openpyxl.worksheet.controls.Control 属
性), 366
ControlProperty (openpyxl.worksheet.controls 中的
类), 366
Controls (openpyxl.worksheet.controls 中的类), 367
Convertible (openpyxl.descriptors.base 中的类), 186 coord (openpyxl.worksheet.cell_range.CellRange 属
性), 363
coordinate (openpyxl.cell.cell.Cell 属性), 120 coordinate (openpyxl.cell.cell.MergedCell 属性), 121
coordinate (openpyxl.cell.read_only.ReadOnlyCell 属性), 122
coordinate_from_string() (在 openpyxl.utils.cell 模块中), 339
coordinate_to_tuple() (在 openpyxl.utils.cell 模块
中), 339
copies (openpyxl.worksheet.page.PrintPageSetup 属
性), 387
copy() (openpyxl.styles.proxy.StyleProxy 方法), 335 copy_worksheet()	(openpyxl.workbook.workbook.Workbook	方法), 360
copy_worksheet()	(openpyxl.worksheet.copier.WorksheetCopy
方法), 367
count (openpyxl.chartsheet.publish.WebPublishItems 属性), 176
count (openpyxl.descriptors.sequence.NestedSequence 属性), 191
count (openpyxl.drawing.drawing.Drawing 属性), 202 count (openpyxl.pivot.cache.CacheHierarchy 属性),
        278 count (openpyxl.pivot.cache.DiscretePr 属性), 280 count (openpyxl.pivot.cache.FieldsUsage 属性), 281 count (openpyxl.pivot.cache.GroupItems 属性), 281 count (openpyxl.pivot.cache.GroupLevels 属性), 282 count (openpyxl.pivot.cache.GroupMembers 属性),
        283 count (openpyxl.pivot.cache.Groups 属性), 283
        count (openpyxl.pivot.cache.OLAPSet 属性), 284 count (openpyxl.pivot.cache.OLAPSets 属性), 284 count (openpyxl.pivot.cache.Page 属性), 286 count (openpyxl.pivot.cache.PCDSDTCEntries 属
性), 285
count (openpyxl.pivot.cache.QueryCache 属性), 287 count (openpyxl.pivot.cache.ServerFormatList 属性),
        288 count (openpyxl.pivot.cache.SharedItems 属性), 289 count (openpyxl.pivot.record.RecordList 属性), 297 count (openpyxl.pivot.table.ColHierarchiesUsage 属
性), 298
count (openpyxl.pivot.table.MemberList 属性), 301 count (openpyxl.pivot.table.PivotFilters 属性), 308 count (openpyxl.pivot.table.Reference 属性), 310 count (openpyxl.pivot.table.RowHierarchiesUsage 属
性), 311
count (openpyxl.styles.cell_style.CellStyleList 属性),
        324 count (openpyxl.styles.numbers.NumberFormatList 属性), 334
count (openpyxl.styles.table.TableStyle 属性), 337 count (openpyxl.styles.table.TableStyleList 属性), 338 count (openpyxl.workbook.web.WebPublishObjectList 属性), 358
count (openpyxl.worksheet.datavalidation.DataValidationList 属性), 370
count (openpyxl.worksheet.merge.MergeCells 属性),
        383 count (openpyxl.worksheet.pagebreak.ColBreak 属
性), 388
count (openpyxl.worksheet.pagebreak.RowBreak 属
性), 389
count (openpyxl.worksheet.scenario.Scenario 属性),
        393 count (openpyxl.worksheet.table.TablePartList 属性),
        399 countASubtotal (openpyxl.pivot.table.PivotField 属
性), 304
countASubtotal (openpyxl.pivot.table.Reference 属
性), 310
countSubtotal (openpyxl.pivot.table.PivotField 属
性), 304
countSubtotal (openpyxl.pivot.table.Reference 属
性), 310
cp (openpyxl.pivot.fields.Boolean 属性), 291

cp (openpyxl.pivot.fields.DateTimeField 属性), 292 131 cp (openpyxl.pivot.fields.Error 属性), 292 crossesAt (openpyxl.chart.axis.TextAxis 属性), 133 cp (openpyxl.pivot.fields.Missing 属性), 293 cs (openpyxl.drawing.text.CharacterProperties 属性), cp (openpyxl.pivot.fields.Number 属性), 294 243
cp (openpyxl.pivot.fields.Text 属性), 295	css (openpyxl.workbook.web.WebPublishing 属性),
crashSave (openpyxl.packaging.workbook.FileRecoveryProperties358
	属性), 271	cstate (openpyxl.drawing.fill.Blip 属性), 213
create_chartsheet()	(open- culture (openpyxl.pivot.cache.ServerFormat 属性),
pyxl.workbook.workbook.Workbook	方	288 法), 360	current (openpyxl.worksheet.scenario.ScenarioList
create_named_range()	(open-	属性), 394
pyxl.workbook.workbook.Workbook 方 custDash (openpyxl.drawing.line.LineProperties 属法), 360	性), 233
create_sheet()	(open- custGeom (openpyxl.chart.shapes.GraphicalProperties
pyxl.workbook.workbook.Workbook	方	属性), 166 法), 360	custom_formats	(open-
created (openpyxl.packaging.core.DocumentProperties	pyxl.styles.stylesheet.Stylesheet 属性), 属性), 264	336
createdVersion (open- CustomChartsheetView (openpyxl.chartsheet.custom pyxl.pivot.cache.CacheDefinition 属性), 中的类), 174
	274	CustomChartsheetViews	(open-
createdVersion	(open-	pyxl.chartsheet.custom 中的类), 175
pyxl.pivot.table.TableDefinition 属性), CustomFilter (openpyxl.worksheet.filters 中的类),
	314	376
creator (openpyxl.packaging.core.DocumentProperties customFilter	(open-
	属性), 264	pyxl.worksheet.filters.CustomFilters 属
crossAx (openpyxl.chart.axis.DateAxis 属性), 127	性), 376
crossAx (openpyxl.chart.axis.NumericAxis 属性), CustomFilters (openpyxl.worksheet.filters 中的类),
129 376
crossAx (openpyxl.chart.axis.SeriesAxis 属性), 131	customFilters	(open-
crossAx (openpyxl.chart.axis.TextAxis 属性), 132	pyxl.worksheet.filters.FilterColumn 属
crossBetween (openpyxl.chart.axis.NumericAxis 属	性), 378 性), 129	customFormat	(open-
crosses (openpyxl.chart.axis.DateAxis 属性), 127	pyxl.worksheet.dimensions.RowDimension
crosses (openpyxl.chart.axis.NumericAxis 属性),	属性), 372
130 CustomGeometry2D (openpyxl.drawing.geometry 中的
crosses (openpyxl.chart.axis.SeriesAxis 属性), 131	类), 223
crosses (openpyxl.chart.axis.TextAxis 属性), 133	customHeight	(open-
crossesAt (openpyxl.chart.axis.DateAxis 属性), 127	pyxl.worksheet.dimensions.RowDimension
crossesAt (openpyxl.chart.axis.NumericAxis 属性),	属性), 372
	130	customHeight	(open-
crossesAt (openpyxl.chart.axis.SeriesAxis 属性),	pyxl.worksheet.dimensions.SheetFormatProperties 属性), 373	cxnSp (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor
customList (openpyxl.worksheet.filters.SortCondition	属性), 240
	属性), 379	cxnSp (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor
customListSort (open- 属性), 241 pyxl.pivot.table.TableDefinition 属性), cxnSp (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor
	314	属性), 242
customMenu (openpyxl.workbook.defined_name.DefinedNamecxnSpLocks (openpyxl.drawing.connector.NonVisualConnectorPropert 属性), 346	属性), 201
customPr (openpyxl.worksheet.custom.CustomPropertiescy (openpyxl.drawing.geometry.PositiveSize2D 属性),
属性), 367
CustomProperties (openpyxl.worksheet.custom 中的
类), 367
CustomProperty (openpyxl.worksheet.custom 中的
类), 368
customRollUp (openpyxl.pivot.cache.GroupLevel 属
性), 282226
cy (openpyxl.drawing.xdr.XDRPositiveSize2D 属性), 255
D
d (openpyxl.drawing.line.DashStop 属性), 232 d (openpyxl.pivot.cache.GroupItems 属性), 281customSheetView	(open- d (openpyxl.pivot.cache.SharedItems 属性), 289
pyxl.chartsheet.custom.CustomChartsheetViewsd (openpyxl.pivot.record.Record 属性), 296
	属性), 175	d (openpyxl.pivot.table.FieldItem 属性), 299
customSheetViews	(open- DashStop (openpyxl.drawing.line 中的类), 232
pyxl.chartsheet.chartsheet.Chartsheet 属 DashStopList (openpyxl.drawing.line 中的类), 233
	性), 173	dashStyle (openpyxl.drawing.line.LineProperties 属
CustomSplit (openpyxl.chart.pie_chart 中的类), 152	性), 233
customWidth (openpyxl.worksheet.dimensions.ColumnDimensiondata (openpyxl.chart.chartspace.Protection 属性), 属性), 371	139
CustomWorkbookView (openpyxl.workbook.views 中的 data_only (openpyxl.workbook.workbook.Workbook
	类), 356	属性), 360
customWorkbookViews (open- data_points (openpyxl.chart.series.Series 属性), pyxl.packaging.workbook.WorkbookPackage 163
	属性), 272	data_type (openpyxl.cell.cell.Cell 属性), 120
custSplit (openpyxl.chart.pie_chart.ProjectedPieChartdata_type (openpyxl.cell.cell.MergedCell 属性), 121 属性), 154	data_type (openpyxl.cell.read_only.EmptyCell 属
custUnit (openpyxl.chart.axis.DisplayUnitsLabelList	性), 121
	属性), 129	data_type (openpyxl.cell.read_only.ReadOnlyCell 属
cx (openpyxl.drawing.geometry.PositiveSize2D 属性),	性), 122
	226	DataBar (openpyxl.formatting.rule 中的类), 257
cx (openpyxl.drawing.xdr.XDRPositiveSize2D 属性), dataBar (openpyxl.formatting.rule.Rule 属性), 258
	255	DataBarRule() (在 openpyxl.formatting.rule 模块
cxn (openpyxl.drawing.geometry.ConnectionSiteList	中), 257
	属性), 223	databaseField (openpyxl.pivot.cache.CacheField 属
cxnLst (openpyxl.drawing.geometry.CustomGeometry2D	性), 276
	属性), 223	dataCaption (openpyxl.pivot.table.TableDefinition
	属性), 314	中的类), 368
dataCellStyle (openpyxl.worksheet.table.Table 属 dataValidation	(open-
	性), 395	pyxl.worksheet.datavalidation.DataValidationList
dataCellStyle	(open-	属性), 370
pyxl.worksheet.table.TableColumn 属 DataValidationList (open性), 397 pyxl.worksheet.datavalidation 中的类),
dataDxfId (openpyxl.worksheet.table.Table 属性),	369
	395	date1904 (openpyxl.chart.chartspace.ChartSpace 属
dataDxfId (openpyxl.worksheet.table.TableColumn	性), 138 属性), 397	date1904 (openpyxl.workbook.properties.WorkbookProperties
dataExtractLoad	(open-	属性), 351
pyxl.packaging.workbook.FileRecoveryPropertiesdateAx (openpyxl.chart.plotarea.PlotArea 属性), 157
属性), 271
DataField (openpyxl.pivot.table 中的类), 298 dataField (openpyxl.pivot.table.PivotField 属性),
304
dataFields (openpyxl.pivot.table.TableDefinition 属
性), 314
dataframe_to_rows() (在 openpyxl.utils.dataframe
模块中), 339
DataLabel (openpyxl.chart.label 中的类), 144
DataLabel (openpyxl.chart.pivot.PivotFormat 属性), 155
DataLabelList (openpyxl.chart.label 中的类), 145DateAxis (openpyxl.chart.axis 中的类), 127
dateCompatibility	(open-
pyxl.workbook.properties.WorkbookProperties
属性), 351
DateGroupItem (openpyxl.worksheet.filters 中的类),
377
dateGroupItem (openpyxl.worksheet.filters.Filters 属
性), 379
DateTime (openpyxl.descriptors.base 中的类), 186 DateTimeField (openpyxl.pivot.fields 中的类), 291
dateTimeGrouping	(openpyxl.worksheet.filters.DateGroupItem 属dataLabels (openpyxl.chart.bubble_chart.BubbleChart	性), 377
	属性), 136	day (openpyxl.worksheet.filters.DateGroupItem 属
dataLabels (openpyxl.chart.radar_chart.RadarChart	性), 377
	属性), 160	days_to_time() (在 openpyxl.utils.datetime 模块
dataLabels (openpyxl.chart.scatter_chart.ScatterChart	中), 340

属性), 161
dataLabels (openpyxl.chart.stock_chart.StockChart 属性), 167
dataOnly (openpyxl.pivot.table.PivotArea 属性), 302 dataOnRows (openpyxl.pivot.table.TableDefinition 属
性), 314
DataPoint (openpyxl.chart.marker 中的类), 150 dataPosition (openpyxl.pivot.table.TableDefinition 属性), 314
dataSourceSort (openpyxl.pivot.table.PivotField 属
性), 304
DataTable (openpyxl.chart.plotarea 中的类), 156
DataValidation (openpyxl.worksheet.datavalidation dde (openpyxl.worksheet.ole.ObjectPr 属性), 384 Default (openpyxl.descriptors.base 中的类), 186
Default (openpyxl.packaging.manifest.Manifest 属
性), 268
DEFAULT_HEADER() (在 openpyxl.utils.units 模块中),
342
defaultAttributeDrillState	(openpyxl.pivot.table.PivotField 属性), 304
defaultColWidth	(open-
pyxl.worksheet.dimensions.SheetFormatProperties
属性), 373
defaultGridColor	(openpyxl.worksheet.views.SheetView 属性),

	401	属性), 250
defaultMemberUniqueName	(open- defusedxml_available() (在 openpyxl.xml 模块中), pyxl.pivot.cache.CacheHierarchy 属性),	408
        278	defusedxml_env_set() (在 openpyxl.xml 模块中), defaultPivotStyle	(open-	408
pyxl.styles.table.TableStyleList 属性), degree (openpyxl.styles.fills.GradientFill 属性), 327
        338	degrees_to_angle() (在 openpyxl.utils.units 模块 defaultRowHeight	(open-	中), 343
pyxl.worksheet.dimensions.SheetFormatPropertiesdelete (openpyxl.chart.axis.DateAxis 属性), 127
	属性), 373	delete (openpyxl.chart.axis.NumericAxis 属性), 130
defaultSize (openpyxl.comments.comment_sheet.Propertiesdelete (openpyxl.chart.axis.SeriesAxis 属性), 131 属性), 182	delete (openpyxl.chart.axis.TextAxis 属性), 133 defaultSize (openpyxl.worksheet.controls.ControlPropertydelete (openpyxl.chart.label.DataLabelList 属性),
属性), 366
defaultSize (openpyxl.worksheet.ole.ObjectPr 属
性), 384
defaultSubtotal (openpyxl.pivot.table.PivotField 属
性), 304
defaultSubtotal (openpyxl.pivot.table.Reference 属
性), 310
defaultTableStyle	(open-
pyxl.styles.table.TableStyleList 属性),
338
defaultThemeVersion	(open-145
delete (openpyxl.chart.legend.LegendEntry 属性),
148
delete() (openpyxl.workbook.defined_name.DefinedNameList
方法), 347
delete_cols()	(open-
pyxl.worksheet.worksheet.Worksheet 方法), 405
delete_rows()	(open-
pyxl.worksheet.worksheet.Worksheet 方法), 405pyxl.workbook.properties.WorkbookProperties deleteColumns (open属性), 351 pyxl.worksheet.protection.SheetProtection
DefinedName (openpyxl.workbook.defined_name 中的	属性), 391
	类), 346	deleted (openpyxl.worksheet.scenario.InputCells 属definedName (openpyxl.workbook.defined_name.DefinedNameList性), 393
	属性), 347	deleted (openpyxl.worksheet.smart_tag.CellSmartTag
DefinedNameList (openpyxl.workbook.defined_name 属性), 394 中的类), 347 deleteRows (openpyxl.worksheet.protection.SheetProtection
definedNames	(open-	属性), 391
        pyxl.packaging.workbook.WorkbookPackage denormalized (open属性), 272 pyxl.worksheet.table.XMLColumnProps definedNames (open- 属性), 399
pyxl.workbook.external_link.external.ExternalBookdeprecated() (在 openpyxl.compat 模块中), 184
	属性), 344	descending (openpyxl.worksheet.filters.SortCondition
defPPr (openpyxl.drawing.text.ListStyle 属性), 247	属性), 379
defRPr (openpyxl.drawing.text.ParagraphProperties descr (openpyxl.drawing.properties.NonVisualDrawingProps 属性), 250	属性), 238 defTabSz (openpyxl.drawing.text.ParagraphProperties description (openpyxl.packaging.core.DocumentProperties 属性), 264	dimensions (openpyxl.worksheet.worksheet.Worksheet
description (openpyxl.pivot.table.PivotFilter 属性),	属性), 405
        307	dimensionUniqueName	(opendescription (openpyxl.workbook.defined_name.DefinedName	pyxl.pivot.cache.CacheHierarchy 属性),

属性), 346
Descriptor (openpyxl.descriptors.base 中的类), 186 destinationFile	(openpyxl.chartsheet.publish.WebPublishItem
属性), 176
destinationFile	(openpyxl.workbook.web.WebPublishObject 属性), 358
destinations	(openpyxl.workbook.defined_name.DefinedName 属性), 346
diagonal (openpyxl.styles.borders.Border 属性), 321 diagonalDown (openpyxl.styles.borders.Border 属性),
        322 diagonalUp (openpyxl.styles.borders.Border 属性),
322
differentFirst	(openpyxl.worksheet.header_footer.HeaderFooter
属性), 381
DifferentialStyle (openpyxl.styles.differential 中的类), 326
DifferentialStyleList	(openpyxl.styles.differential 中的类), 326
differentOddEven	(openpyxl.worksheet.header_footer.HeaderFooter
属性), 381
        278 dir (openpyxl.drawing.effect.InnerShadowEffect 属
性), 206
dir (openpyxl.drawing.effect.OuterShadow 属性), 208 dir (openpyxl.drawing.effect.PresetShadowEffect 属
性), 209
dir (openpyxl.drawing.effect.ReflectionEffect 属性),
        211 dir (openpyxl.drawing.geometry.LightRig 属性), 224 direction (openpyxl.chart.error_bar.ErrorBars 属
性), 143
dirty (openpyxl.drawing.text.CharacterProperties 属
性), 244
disable() (openpyxl.worksheet.protection.SheetProtection 方法), 391
disabled (openpyxl.comments.comment_sheet.Properties 属性), 182
disabled (openpyxl.worksheet.controls.ControlProperty 属性), 367
disabled (openpyxl.worksheet.ole.ObjectPr 属性),
384
disableFieldList	(openpyxl.pivot.table.TableDefinition 属性),
314
disablePrompts	(open-
DigSig (openpyxl.packaging.extended.ExtendedProperties	属性), 370
	属性), 266	DiscretePr (openpyxl.pivot.cache 中的类), 280
DigSigBlob (openpyxl.packaging.extended 中的类), discretePr (openpyxl.pivot.cache.FieldGroup 属性),
	265	281
dimension (openpyxl.pivot.cache.MeasureDimensionMapdispBlanksAs	(open属性), 283	pyxl.chart.chartspace.ChartContainer
Dimension (openpyxl.worksheet.dimensions 中的类),	属性), 137
	371	dispEq (openpyxl.chart.trendline.Trendline 属性),
DimensionHolder (openpyxl.worksheet.dimensions	171
	中的类), 372	display (openpyxl.worksheet.hyperlink.Hyperlink 属
dimensions (openpyxl.pivot.cache.CacheDefinition	性), 382
	属性), 274	displayFolder	(open-pyxl.worksheet.datavalidation.DataValidationList pyxl.pivot.cache.CacheHierarchy 属性),
        278 displayFolder (openpyxl.pivot.cache.PCDKPI 属
性), 285
displayName (openpyxl.worksheet.table.Table 属性), 395
DisplayUnitsLabel (openpyxl.chart.axis 中的类), 128
DisplayUnitsLabelList (openpyxl.chart.axis 中的
类), 129
dispRSqr (openpyxl.chart.trendline.Trendline 属性),
        171 dispUnits (openpyxl.chart.axis.NumericAxis 属性),
130
dispUnitsLbl	(openpyxl.chart.axis.DisplayUnitsLabelList 属性), 129
dist (openpyxl.drawing.effect.InnerShadowEffect 属
性), 206
dist (openpyxl.drawing.effect.OuterShadow 属性),
        208 dist (openpyxl.drawing.effect.PresetShadowEffect 属
性), 209
dist (openpyxl.drawing.effect.ReflectionEffect 属性),
        211 divId (openpyxl.chartsheet.publish.WebPublishItem 属性), 176
divId (openpyxl.workbook.web.WebPublishObject 属
性), 358
dLbl (openpyxl.chart.label.DataLabelList 属性), 145 dLbl (openpyxl.chart.pivot.PivotFormat 属性), 155 dLblPos (openpyxl.chart.label.DataLabel 属性), 144 dLblPos (openpyxl.chart.label.DataLabelList 属性),
        145 dLbls (openpyxl.chart.area_chart.AreaChart 属性),
        125 dLbls (openpyxl.chart.area_chart.AreaChart3D 属
性), 126
dLbls (openpyxl.chart.bar_chart.BarChart 属性),
        134 dLbls (openpyxl.chart.bar_chart.BarChart3D 属性),
135
dLbls (openpyxl.chart.bubble_chart.BubbleChart 属
性), 136
dLbls (openpyxl.chart.line_chart.LineChart 属性),
        149 dLbls (openpyxl.chart.line_chart.LineChart3D 属
性), 149
dLbls (openpyxl.chart.pie_chart.DoughnutChart 属
性), 152
dLbls (openpyxl.chart.pie_chart.PieChart 属性), 153 dLbls (openpyxl.chart.pie_chart.PieChart3D 属性),
        153 dLbls (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
dLbls (openpyxl.chart.radar_chart.RadarChart 属
性), 160
dLbls (openpyxl.chart.scatter_chart.ScatterChart 属
性), 161
dLbls (openpyxl.chart.series.Series 属性), 162 dLbls (openpyxl.chart.series.XYSeries 属性), 165 dLbls (openpyxl.chart.stock_chart.StockChart 属性), 167
DocSecurity (openpyxl.packaging.extended.ExtendedProperties 属性), 266
DocumentProperties (openpyxl.packaging.core 中的
类), 264
DocumentSecurity()	(在	openpyxl.workbook.protection 模块中), 352
DoughnutChart (openpyxl.chart.pie_chart 中的类),
        152 doughnutChart (openpyxl.chart.plotarea.PlotArea 属
性), 157
downBars (openpyxl.chart.updown_bars.UpDownBars 属性), 172
dpi (openpyxl.drawing.fill.BlipFillProperties 属性),
        214 dpi (openpyxl.workbook.web.WebPublishing 属性),
        359 dPt (openpyxl.chart.series.Series 属性), 162 dPt (openpyxl.chart.series.XYSeries 属性), 165 draft (openpyxl.worksheet.page.PrintPageSetup 属
性), 387
dragOff (openpyxl.pivot.table.PivotField 属性), 304
dragOff (openpyxl.pivot.table.PivotHierarchy 属性),
        308 dragToCol (openpyxl.pivot.table.PivotField 属性),
        304 dragToCol (openpyxl.pivot.table.PivotHierarchy 属
性), 308
dragToData (openpyxl.pivot.table.PivotField 属性),
        304 dragToData (openpyxl.pivot.table.PivotHierarchy 属
性), 308
dragToPage (openpyxl.pivot.table.PivotField 属性),
        304 dragToPage (openpyxl.pivot.table.PivotHierarchy 属
性), 308
dragToRow (openpyxl.pivot.table.PivotField 属性),
        304 dragToRow (openpyxl.pivot.table.PivotHierarchy 属
性), 308
drawing (openpyxl.chartsheet.chartsheet.Chartsheet 属性), 173
Drawing (openpyxl.drawing.drawing 中的类), 202 Drawing (openpyxl.worksheet.drawing 中的类), 374
drawingHF (openpyxl.chartsheet.chartsheet.Chartsheet 属性), 173
DrawingHF (openpyxl.chartsheet.relation 中的类), 177 dropLines (openpyxl.chart.area_chart.AreaChart 属
性), 125
dropLines (openpyxl.chart.area_chart.AreaChart3D 属性), 126
dropLines (openpyxl.chart.line_chart.LineChart 属
性), 149
dropLines (openpyxl.chart.line_chart.LineChart3D 属性), 150
dropLines (openpyxl.chart.stock_chart.StockChart 属性), 167
ds (openpyxl.drawing.line.DashStopList 属性), 233 dst() (openpyxl.utils.datetime.GMT 方法), 340 dTable (openpyxl.chart.plotarea.PlotArea 属性), 157 DummyCode (openpyxl.compat 中的类), 184
DummyWorksheet (openpyxl.chart.reference 中的类),
        161 duotone (openpyxl.drawing.fill.Blip 属性), 213 DuotoneEffect (openpyxl.drawing.effect 中的类),
        204 dvAspect (openpyxl.worksheet.ole.OleObject 属性),
        385
        dx (openpyxl.drawing.geometry.Vector3D 属性), 229 dxa_to_cm() (在 openpyxl.utils.units 模块中), 343 dxa_to_inch() (在 openpyxl.utils.units 模块中), 343
        dxf (openpyxl.formatting.rule.Rule 属性), 258
        dxf (openpyxl.styles.differential.DifferentialStyleList
        属性), 327
dxfId (openpyxl.formatting.rule.Rule 属性), 258 dxfId (openpyxl.pivot.table.Format 属性), 300 dxfId (openpyxl.styles.table.TableStyleElement 属
性), 337
dxfId (openpyxl.worksheet.filters.ColorFilter 属性),
        376 dxfId (openpyxl.worksheet.filters.SortCondition 属
性), 379
dxfs (openpyxl.styles.stylesheet.Stylesheet 属性), 336
dy (openpyxl.drawing.geometry.Vector3D 属性), 229
DynamicFilter (openpyxl.worksheet.filters 中的类),
377
dynamicFilter	(openpyxl.worksheet.filters.FilterColumn 属性), 378
dz (openpyxl.drawing.geometry.Vector3D 属性), 229
E
e (openpyxl.pivot.cache.GroupItems 属性), 281 e (openpyxl.pivot.cache.PCDSDTCEntries 属性), 286 e (openpyxl.pivot.cache.SharedItems 属性), 289 e (openpyxl.pivot.record.Record 属性), 296
e (openpyxl.pivot.table.FieldItem 属性), 299 ea (openpyxl.drawing.text.CharacterProperties 属性),
        244 eaLnBrk (openpyxl.drawing.text.ParagraphProperties 属性), 250
eb (openpyxl.cell.text.PhoneticText 属性), 124 editAs (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor 属性), 242
editData (openpyxl.pivot.table.TableDefinition 属
性), 314

EffectContainer (openpyxl.drawing.effect 中的类), end_color (openpyxl.styles.fills.PatternFill 属性),
	204	328
effectDag (openpyxl.drawing.text.CharacterProperties endA (openpyxl.drawing.effect.ReflectionEffect 属性), 属性), 244	211
EffectList (openpyxl.drawing.effect 中的类), 204	endCxn (openpyxl.drawing.connector.NonVisualConnectorProperties effectLst (openpyxl.drawing.text.CharacterProperties	属性), 201
	属性), 244	endDate (openpyxl.pivot.cache.RangePr 属性), 287
effectRef (openpyxl.drawing.geometry.ShapeStyle endNum (openpyxl.pivot.cache.RangePr 属性), 287
	属性), 228	endParaRPr (openpyxl.drawing.text.Paragraph 属性),
embed (openpyxl.drawing.fill.Blip 属性), 213	248
embed (openpyxl.workbook.smart_tags.SmartTagPropertiesendPos (openpyxl.drawing.effect.ReflectionEffect 属
属性), 354
EmbeddedWAVAudioFile (openpyxl.drawing.text 中的
类), 246
EmptyCell (openpyxl.cell.read_only 中的类), 121
emptyCellReference	(open-
pyxl.worksheet.errors.IgnoredError 属性), 374
EmptyTag (openpyxl.descriptors.nested 中的类), 189
EMU_to_cm() (在 openpyxl.utils.units 模块中), 343
EMU_to_inch() (在 openpyxl.utils.units 模块中), 343
EMU_to_pixels() (在 openpyxl.utils.units 模块中),
343性), 211
endSnd (openpyxl.drawing.text.Hyperlink 属性), 247 entries (openpyxl.pivot.cache.TupleCache 属性),
290
equalAverage (openpyxl.formatting.rule.Rule 属性),
258
err (openpyxl.drawing.text.CharacterProperties 属
性), 244
errBars (openpyxl.chart.series.Series 属性), 163 errBars (openpyxl.chart.series.XYSeries 属性), 165 errBarType (openpyxl.chart.error_bar.ErrorBars 属
性), 143enable() (openpyxl.worksheet.protection.SheetProtectionerrDir (openpyxl.chart.error_bar.ErrorBars 属性), 方法), 391	143
enabled (openpyxl.worksheet.protection.SheetProtectionERROR (openpyxl.formula.tokenizer.Token 属性), 260 属性), 391	Error (openpyxl.pivot.fields 中的类), 292
enableDrill (openpyxl.pivot.table.TableDefinition error (openpyxl.worksheet.datavalidation.DataValidation 属性), 314	属性), 368
enableFieldProperties	(open- ERROR_CODES (openpyxl.formula.tokenizer.Tokenizer pyxl.pivot.table.TableDefinition 属性),	属性), 261
        314 ErrorBars (openpyxl.chart.error_bar 中的类), 143 enableFormatConditionsCalculation (open- errorCaption (openpyxl.pivot.table.TableDefinition pyxl.worksheet.properties.WorksheetProperties 属性), 314
	属性), 390	errors (openpyxl.worksheet.page.PrintPageSetup 属
enableRefresh	(open-	性), 387
pyxl.pivot.cache.CacheDefinition 属性), errorStyle (openpyxl.worksheet.datavalidation.DataValidation
	274	属性), 368
enableWizard (openpyxl.pivot.table.TableDefinition errorTitle (openpyxl.worksheet.datavalidation.DataValidation 属性), 314	属性), 368
encoding (openpyxl.cell.cell.Cell 属性), 120	errValType (openpyxl.chart.error_bar.ErrorBars 属
end (openpyxl.styles.borders.Border 属性), 322	性), 143
escape() (在 openpyxl.utils.escape 模块中), 340 expected_type (openpyxl.descriptors.base.Tuple 属 evalError (openpyxl.worksheet.errors.IgnoredError 性), 187
	属性), 375	expected_type (openpyxl.descriptors.base.Typed 属
evalOrder (openpyxl.pivot.table.PivotFilter 属性),	性), 188
        307 expected_type (openevenFooter (openpyxl.worksheet.header_footer.HeaderFooter pyxl.descriptors.excel.TextPoint 属性), 属性), 381	189
evenHeader (openpyxl.worksheet.header_footer.HeaderFooterexpected_type	(open-
属性), 381
excel_base_date	(open-
pyxl.workbook.workbook.Workbook	属性), 360
ExcelReader (openpyxl.reader.excel 中的类), 318 ExcelWriter (openpyxl.writer.excel 中的类), 407 expand() (openpyxl.worksheet.cell_range.CellRange
方法), 363
expand_cell_ranges()	(在	open-
pyxl.worksheet.datavalidation 模块中),
370
expand_levels() (在 openpyxl.utils.dataframe 模块
中), 339
expected_type	(open-pyxl.descriptors.sequence.Sequence	属性), 191
expected_type	(open-
pyxl.drawing.colors.ColorChoiceDescriptor
属性), 193
expected_type	(open-
pyxl.packaging.core.NestedDateTime 属性), 265
expected_type	(open-
pyxl.styles.colors.ColorDescriptor 属性),
325
expected_type (openpyxl.styles.colors.RGB 属性),
326
expected_type (openpyxl.styles.fills.StopList 属性),	pyxl.chart.descriptors.NumberFormatDescriptor	329
属性), 143
expected_type (openpyxl.chart.title.TitleDescriptor
属性), 171
expected_type (openpyxl.descriptors.base.ASCII 属
性), 185
expected_type (openpyxl.descriptors.base.Bool 属
性), 186
expected_type (openpyxl.descriptors.base.DateTime
属性), 186
expected_type (openpyxl.descriptors.base.Float 属
性), 186
expected_type (openpyxl.descriptors.base.Integer 属
性), 186
expected_type (openpyxl.descriptors.base.Max 属
性), 187
expected_type (openpyxl.descriptors.base.Min 属
性), 187
expected_type (openpyxl.descriptors.base.String 属
性), 187explosion (openpyxl.chart.marker.DataPoint 属性),
151
explosion (openpyxl.chart.series.Series 属性), 163 ext (openpyxl.descriptors.excel.ExtensionList 属性),
188
ext (openpyxl.drawing.geometry.GroupTransform2D
属性), 224
ext (openpyxl.drawing.geometry.Transform2D 属性),
229
ext (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor
属性), 240
ext (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor
属性), 241
ext (openpyxl.drawing.xdr.XDRTransform2D 属性),
255
ext (openpyxl.worksheet.errors.ExtensionList 属性),
374
extend (openpyxl.cell.text.InlineFont 属性), 123 extend (openpyxl.styles.fonts.Font 属性), 330ExtendedProperties (openpyxl.packaging.extended	的类), 345
	中的类), 265	ExternalSheetDataSet	(open-
Extension (openpyxl.descriptors.excel 中的类), 188	pyxl.workbook.external_link.external 中
Extension (openpyxl.packaging.manifest.FileExtension	的类), 345
	属性), 268	ExternalSheetNames	(open-
Extension (openpyxl.worksheet.errors 中的类), 374	pyxl.workbook.external_link.external 中
ExtensionList (openpyxl.descriptors.excel 中的类),	的类), 345
	188	extLst (openpyxl.chart.area_chart.AreaChart 属性),
ExtensionList (openpyxl.worksheet.errors 中的类),	125
	374	extLst (openpyxl.chart.axis.DateAxis 属性), 127
extensions (openpyxl.packaging.manifest.Manifest extLst (openpyxl.chart.axis.DisplayUnitsLabelList
	属性), 269	属性), 129
ExternalBook	(open- extLst (openpyxl.chart.axis.NumericAxis 属性), 130
pyxl.workbook.external_link.external 中 extLst (openpyxl.chart.axis.Scaling 属性), 131
	的类), 344	extLst (openpyxl.chart.axis.SeriesAxis 属性), 131
externalBook	(open- extLst (openpyxl.chart.axis.TextAxis 属性), 133
pyxl.workbook.external_link.external.ExternalLinkextLst (openpyxl.chart.bar_chart.BarChart 属性),
	属性), 345	134
ExternalCell	(open- extLst (openpyxl.chart.bar_chart.BarChart3D 属
	pyxl.workbook.external_link.external 中	性), 135
	的类), 344	extLst (openpyxl.chart.bubble_chart.BubbleChart 属
ExternalData (openpyxl.chart.chartspace 中的类),	性), 136
	139	extLst (openpyxl.chart.chartspace.ChartContainer
externalData	(open-	属性), 137
pyxl.chart.chartspace.ChartSpace 属性), extLst (openpyxl.chart.chartspace.ChartSpace 属性),
	138	138
ExternalDefinedName	(open- extLst (openpyxl.chart.data_source.MultiLevelStrData
	pyxl.workbook.external_link.external 中	属性), 140
	的类), 344	extLst (openpyxl.chart.data_source.MultiLevelStrRef
ExternalLink	(open-	属性), 140
pyxl.workbook.external_link.external 中 extLst (openpyxl.chart.data_source.NumData 属
	的类), 345	性), 141
ExternalReference	(open- extLst (openpyxl.chart.data_source.NumRef 属性),
pyxl.workbook.external_reference 中的	141 类), 348	extLst (openpyxl.chart.data_source.StrData 属性),
externalReferences	(open-	142
pyxl.packaging.workbook.WorkbookPackage extLst (openpyxl.chart.data_source.StrRef 属性),
	属性), 273	142
ExternalRow (openpyxl.workbook.external_link.externalextLst (openpyxl.chart.error_bar.ErrorBars 属性),
	中的类), 345	144
ExternalSheetData	(open- extLst (openpyxl.chart.label.DataLabel 属性), 144
pyxl.workbook.external_link.external 中 extLst (openpyxl.chart.label.DataLabelList 属性),

        145 extLst (openpyxl.chart.layout.Layout 属性), 146 extLst (openpyxl.chart.layout.ManualLayout 属性),
        147 extLst (openpyxl.chart.legend.Legend 属性), 147 extLst (openpyxl.chart.legend.LegendEntry 属性),
        148 extLst (openpyxl.chart.line_chart.LineChart 属性),
        149 extLst (openpyxl.chart.line_chart.LineChart3D 属
性), 150
extLst (openpyxl.chart.marker.DataPoint 属性), 151 extLst (openpyxl.chart.marker.Marker 属性), 151
extLst (openpyxl.chart.pie_chart.DoughnutChart 属
性), 152
extLst (openpyxl.chart.pie_chart.PieChart 属性),
        153 extLst (openpyxl.chart.pie_chart.PieChart3D 属
性), 153
extLst (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
extLst (openpyxl.chart.pivot.PivotFormat 属性), 155 extLst (openpyxl.chart.pivot.PivotSource 属性), 155
extLst (openpyxl.chart.plotarea.DataTable 属性),
        156 extLst (openpyxl.chart.plotarea.PlotArea 属性), 157 extLst (openpyxl.chart.radar_chart.RadarChart 属
性), 160
extLst (openpyxl.chart.scatter_chart.ScatterChart 属性), 162
extLst (openpyxl.chart.series.Series 属性), 163
extLst (openpyxl.chart.shapes.GraphicalProperties
属性), 166
extLst (openpyxl.chart.stock_chart.StockChart 属性), 167
extLst (openpyxl.chart.surface_chart.SurfaceChart
属性), 168
extLst (openpyxl.chart.surface_chart.SurfaceChart3D 属性), 168
extLst (openpyxl.chart.title.Title 属性), 170
extLst (openpyxl.chart.trendline.Trendline 属性),
171
extLst (openpyxl.chart.trendline.TrendlineLabel 属
性), 172
extLst (openpyxl.chart.updown_bars.UpDownBars 属性), 173
extLst (openpyxl.chartsheet.chartsheet.Chartsheet 属
性), 173
extLst (openpyxl.chartsheet.views.ChartsheetView 属性), 180
extLst (openpyxl.chartsheet.views.ChartsheetViewList 属性), 180
extLst (openpyxl.comments.comment_sheet.CommentSheet 属性), 182
extLst (openpyxl.drawing.colors.ColorMapping 属
性), 194
extLst (openpyxl.drawing.connector.ConnectorLocking 属性), 200
extLst (openpyxl.drawing.connector.NonVisualConnectorProperties 属性), 201
extLst (openpyxl.drawing.fill.Blip 属性), 213 extLst (openpyxl.drawing.geometry.Backdrop 属性),
        221 extLst (openpyxl.drawing.geometry.Scene3D 属性),
        227 extLst (openpyxl.drawing.geometry.Shape3D 属性),
        228 extLst (openpyxl.drawing.graphic.GraphicFrameLocking 属性), 230
extLst (openpyxl.drawing.graphic.NonVisualGraphicFrameProperties 属性), 232
extLst (openpyxl.drawing.line.LineProperties 属性),
        234 extLst (openpyxl.drawing.picture.NonVisualPictureProperties 属性), 234
extLst (openpyxl.drawing.picture.PictureLocking 属
性), 235
extLst (openpyxl.drawing.properties.GroupLocking 属性), 237
extLst (openpyxl.drawing.properties.GroupShapeProperties 属性), 238
extLst (openpyxl.drawing.properties.NonVisualDrawingProps 属性), 238
	属性), 239	314
extLst (openpyxl.drawing.properties.NonVisualGroupDrawingShapePropsextLst (openpyxl.styles.cell_style.CellStyle 属性),属性), 239
extLst (openpyxl.drawing.text.CharacterProperties
属性), 244
extLst (openpyxl.drawing.text.Hyperlink 属性), 247 extLst (openpyxl.drawing.text.ListStyle 属性), 247 extLst (openpyxl.drawing.text.ParagraphProperties
属性), 250
extLst (openpyxl.drawing.text.RichTextProperties 属
性), 252
extLst (openpyxl.formatting.rule.FormatObject 属
性), 257
extLst (openpyxl.formatting.rule.Rule 属性), 258323
extLst (openpyxl.styles.stylesheet.Stylesheet 属性),
336
extLst (openpyxl.workbook.views.BookView 属性),
355
extLst (openpyxl.workbook.views.CustomWorkbookView
属性), 356
extLst (openpyxl.worksheet.errors.IgnoredErrors 属
性), 375
extLst (openpyxl.worksheet.filters.AutoFilter 属性),
376
extLst (openpyxl.worksheet.filters.FilterColumn 属extLst (openpyxl.packaging.workbook.WorkbookPackage	性), 378extLst (openpyxl.drawing.properties.NonVisualDrawingShapeProps 属性), 272
extLst (openpyxl.pivot.cache.CacheDefinition 属性),
        274 extLst (openpyxl.pivot.cache.CacheField 属性), 276 extLst (openpyxl.pivot.cache.CacheHierarchy 属性),
        278 extLst (openpyxl.pivot.cache.CacheSource 属性),
        279 extLst (openpyxl.pivot.cache.CalculatedItem 属性),
        279 extLst (openpyxl.pivot.cache.CalculatedMember 属
性), 280
extLst (openpyxl.pivot.cache.GroupLevel 属性), 282 extLst (openpyxl.pivot.cache.TupleCache 属性), 290 extLst (openpyxl.pivot.record.RecordList 属性), 297 extLst (openpyxl.pivot.table.ConditionalFormat 属
性), 298
extLst (openpyxl.pivot.table.DataField 属性), 298 extLst (openpyxl.pivot.table.Format 属性), 300 extLst (openpyxl.pivot.table.PageField 属性), 302 extLst (openpyxl.pivot.table.PivotArea 属性), 302 extLst (openpyxl.pivot.table.PivotField 属性), 304 extLst (openpyxl.pivot.table.PivotFilter 属性), 307 extLst (openpyxl.pivot.table.PivotHierarchy 属性),
        308 extLst (openpyxl.pivot.table.Reference 属性), 310 extLst (openpyxl.pivot.table.TableDefinition 属性), extLst (openpyxl.worksheet.filters.SortState 属性),
        380 extLst (openpyxl.worksheet.table.Table 属性), 396 extLst (openpyxl.worksheet.table.TableColumn 属
性), 397
extLst (openpyxl.worksheet.table.XMLColumnProps 属性), 399
extLst (openpyxl.worksheet.views.SheetViewList 属
性), 402
extrusionClr (openpyxl.drawing.geometry.Shape3D 属性), 228
extrusionH (openpyxl.drawing.geometry.Shape3D 属
性), 228
extrusionOk (openpyxl.drawing.geometry.Path2D 属
性), 225
F
f (openpyxl.chart.data_source.MultiLevelStrRef 属
性), 140
f (openpyxl.chart.data_source.NumRef 属性), 141 f (openpyxl.chart.data_source.StrRef 属性), 142 f (openpyxl.pivot.fields.Boolean 属性), 291 f (openpyxl.pivot.fields.DateTimeField 属性), 292 f (openpyxl.pivot.fields.Error 属性), 292 f (openpyxl.pivot.fields.Missing 属性), 293 f (openpyxl.pivot.fields.Number 属性), 294 f (openpyxl.pivot.fields.Text 属性), 295
f (openpyxl.pivot.table.FieldItem 属性), 299 fadeDir (openpyxl.drawing.effect.ReflectionEffect 属
性), 211
family (openpyxl.cell.text.InlineFont 属性), 123 family (openpyxl.styles.fonts.Font 属性), 330 fc (openpyxl.pivot.fields.Error 属性), 292 fc (openpyxl.pivot.fields.Missing 属性), 293 fc (openpyxl.pivot.fields.Number 属性), 294 fc (openpyxl.pivot.fields.Text 属性), 295 fgClr (openpyxl.drawing.fill.PatternFillProperties 属
性), 218
fgColor (openpyxl.styles.fills.PatternFill 属性), 328 field (openpyxl.pivot.cache.CalculatedItem 属性),
        279 field (openpyxl.pivot.table.MemberProperty 属性),
        301 field (openpyxl.pivot.table.PivotArea 属性), 302 field (openpyxl.pivot.table.Reference 属性), 310 FieldGroup (openpyxl.pivot.cache 中的类), 281 fieldGroup (openpyxl.pivot.cache.CacheField 属性), 276
FieldItem (openpyxl.pivot.table 中的类), 299
fieldListSortAscending	(openpyxl.pivot.table.TableDefinition 属性),
        314 fieldPosition (openpyxl.pivot.table.PivotArea 属
性), 302
fieldPrintTitles	(openpyxl.pivot.table.TableDefinition 属性),
314
FieldsUsage (openpyxl.pivot.cache 中的类), 281 fileRecoveryPr	(openpyxl.packaging.workbook.WorkbookPackage
属性), 273
FileRecoveryProperties	(openpyxl.packaging.workbook 中的类), 271
fileSharing (openpyxl.packaging.workbook.WorkbookPackage 属性), 273
FileSharing (openpyxl.workbook.protection 中的类),
        352 fileVersion (openpyxl.packaging.workbook.WorkbookPackage 属性), 273
FileVersion (openpyxl.workbook.properties 中的类),
        350 fill (openpyxl.cell.read_only.EmptyCell 属性), 121 fill (openpyxl.cell.read_only.ReadOnlyCell 属性),
        122 fill (openpyxl.drawing.geometry.Path2D 属性), 225 fill (openpyxl.styles.differential.DifferentialStyle 属
性), 326
Fill (openpyxl.styles.fills 中的类), 327
fill (openpyxl.styles.named_styles.NamedStyle 属
性), 333
fill (openpyxl.styles.styleable.StyleableObject 属性),
        335 fill_type (openpyxl.styles.fills.GradientFill 属性),
        328 fill_type (openpyxl.styles.fills.PatternFill 属性),
        328 fillId (openpyxl.styles.cell_style.CellStyle 属性),
        323 fillId (openpyxl.styles.cell_style.StyleArray 属性),

fieldsUsage (openpyxl.pivot.cache.CacheHierarchy	324
        属性), 278 fillOverlay (openpyxl.drawing.effect.EffectList 属 FieldUsage (openpyxl.pivot.cache 中的类), 281 性), 204
fieldUsage (openpyxl.pivot.cache.FieldsUsage 属 fillOverlay (openpyxl.drawing.fill.Blip 属性), 213
	性), 281	FillOverlayEffect (openpyxl.drawing.effect 中的
file_link (openpyxl.workbook.external_link.external.ExternalLink类), 205
	属性), 345	fillRect (openpyxl.drawing.fill.StretchInfoProperties
FileExtension (openpyxl.packaging.manifest 中的	属性), 220
	类), 268	fillRef (openpyxl.drawing.geometry.ShapeStyle 属
filenames (openpyxl.packaging.manifest.Manifest 属	性), 228
	性), 269	fills (openpyxl.styles.stylesheet.Stylesheet 属性),
        336	firstPageNumber	(openfillToRect (openpyxl.drawing.fill.PathShadeProperties	pyxl.worksheet.page.PrintPageSetup 属属性), 217	性), 387 filter (openpyxl.pivot.table.PivotFilters 属性), 308 firstSheet (openpyxl.workbook.views.BookView 属 filter (openpyxl.worksheet.filters.Filters 属性), 379	性), 355
FilterColumn (openpyxl.worksheet.filters 中的类), firstSliceAng	(open-
	378	pyxl.chart.pie_chart.DoughnutChart 属
filterColumn (openpyxl.worksheet.filters.AutoFilter	性), 152
        属性), 376 firstSliceAng (openpyxl.chart.pie_chart.PieChart filterMode (openpyxl.worksheet.properties.WorksheetProperties 属性), 153
	属性), 390	fitToHeight (openpyxl.worksheet.page.PrintPageSetup
filterPrivacy	(open-	属性), 387
pyxl.workbook.properties.WorkbookProperties fitToPage (openpyxl.worksheet.page.PrintPageSetup属性), 351
filters (openpyxl.pivot.table.TableDefinition 属性), 314
Filters (openpyxl.worksheet.filters 中的类), 378 filters (openpyxl.worksheet.filters.FilterColumn 属
性), 378
filterVal (openpyxl.worksheet.filters.Top10 属性),
380
find() (openpyxl.packaging.manifest.Manifest 方法),
269属性), 387
fitToPage (openpyxl.worksheet.properties.PageSetupProperties
属性), 389
fitToWidth (openpyxl.worksheet.page.PrintPageSetup
属性), 387
flatTx (openpyxl.drawing.text.RichTextProperties 属
性), 252
fld (openpyxl.drawing.text.Paragraph 属性), 248 fld (openpyxl.pivot.fields.Tuple 属性), 295 fld (openpyxl.pivot.table.DataField 属性), 298find() (openpyxl.packaging.relationship.RelationshipListfld (openpyxl.pivot.table.PageField 属性), 302
        方法), 270 find_images() (在 openpyxl.reader.drawings 模块
中), 318
find_sheets()	(open-
pyxl.reader.workbook.WorkbookParser
方法), 319
findall() (openpyxl.packaging.manifest.Manifest 方
法), 269
firstDataCol (openpyxl.pivot.table.Location 属性),
300
firstDataRow (openpyxl.pivot.table.Location 属性),
300fld (openpyxl.pivot.table.PivotFilter 属性), 307 flip (openpyxl.drawing.fill.GradientFillProperties 属
性), 215
flip (openpyxl.drawing.fill.TileInfoProperties 属性),
220
flipH (openpyxl.drawing.geometry.GroupTransform2D
属性), 224
flipH (openpyxl.drawing.geometry.Transform2D 属
        性), 229 flipH (openpyxl.drawing.xdr.XDRTransform2D 属
性), 255
flipV (openpyxl.drawing.geometry.GroupTransform2DfirstFooter (openpyxl.worksheet.header_footer.HeaderFooter 属性), 224
	属性), 381	flipV (openpyxl.drawing.geometry.Transform2D 属
firstHeader (openpyxl.worksheet.header_footer.HeaderFooter 性), 229
	属性), 381	flipV (openpyxl.drawing.xdr.XDRTransform2D 属
firstHeaderRow (openpyxl.pivot.table.Location 属	性), 255
	性), 300	Float (openpyxl.descriptors.base 中的类), 186
fLocksText (openpyxl.drawing.connector.Shape 属	属性), 254
	性), 201	footer (openpyxl.chart.print_settings.PageMargins
fLocksWithSheet	(open-	属性), 159
pyxl.drawing.spreadsheet_drawing.AnchorClientDatafooter (openpyxl.worksheet.page.PageMargins 属

属性), 240
floor (openpyxl.chart.bar_chart.BarChart3D 属性),
        135 floor (openpyxl.chart.chartspace.ChartContainer 属
性), 137
fmla (openpyxl.drawing.geometry.GeomGuide 属性),
        223 fmla (openpyxl.drawing.text.GeomGuide 属性), 246 fmtId (openpyxl.chart.pivot.PivotSource 属性), 155 folHlink (openpyxl.drawing.colors.ColorMapping 属
性), 194
font (openpyxl.cell.read_only.EmptyCell 属性), 121 font (openpyxl.cell.read_only.ReadOnlyCell 属性),
        122 font (openpyxl.cell.text.RichText 属性), 124 Font (openpyxl.drawing.text 中的类), 246 font (openpyxl.styles.differential.DifferentialStyle 属
        性), 326 Font (openpyxl.styles.fonts 中的类), 329
        font (openpyxl.styles.named_styles.NamedStyle 属
性), 333
font (openpyxl.styles.styleable.StyleableObject 属性),
        335 fontAlgn (openpyxl.drawing.text.ParagraphProperties 属性), 250
fontId (openpyxl.cell.text.PhoneticProperties 属性),
        124 fontId (openpyxl.styles.cell_style.CellStyle 属性),
        323 fontId (openpyxl.styles.cell_style.StyleArray 属性),
        324 fontRef (openpyxl.drawing.geometry.ShapeStyle 属
性), 228
FontReference (openpyxl.drawing.geometry 中的类),
        223 fonts (openpyxl.styles.stylesheet.Stylesheet 属性),
        336 fontScale (openpyxl.drawing.text.TextNormalAutofit
性), 385
forceAA (openpyxl.drawing.text.RichTextProperties 属性), 252
forceFullCalc	(openpyxl.workbook.properties.CalcProperties
属性), 349
foreground (openpyxl.drawing.fill.PatternFillProperties 属性), 218
format (openpyxl.pivot.cache.ServerFormat 属性), 288
Format (openpyxl.pivot.table 中的类), 300 format (openpyxl.pivot.table.ChartFormat 属性), 297 format() (openpyxl.worksheet.merge.MergedCellRange 方法), 383
formatCells (openpyxl.worksheet.protection.SheetProtection 属性), 391
formatCode (openpyxl.chart.data_source.NumData 属性), 141
formatCode (openpyxl.chart.data_source.NumFmt 属性), 141
formatCode (openpyxl.chart.data_source.NumVal 属
性), 141
formatCode (openpyxl.styles.numbers.NumberFormat 属性), 334
formatColumns	(openpyxl.worksheet.protection.SheetProtection
属性), 391
FormatObject (openpyxl.formatting.rule 中的类),
        257 formatRows (openpyxl.worksheet.protection.SheetProtection 属性), 391
formats (openpyxl.pivot.table.TableDefinition 属性),
        315 formatted (openpyxl.cell.text.Text 属性), 125 formatting (openpyxl.chart.chartspace.Protection 属
性), 139
formula (openpyxl.formatting.rule.Rule 属性), 258
formula (openpyxl.pivot.cache.CacheField 属性), 276

formula (openpyxl.pivot.cache.CalculatedItem 属性),	法), 130
	279	from_tree() (openpyxl.chart.plotarea.PlotArea 类方
formula (openpyxl.worksheet.errors.IgnoredError 属	法), 157
	性), 375	from_tree() (openpyxl.descriptors.nested.EmptyTag
formula1 (openpyxl.worksheet.datavalidation.DataValidation 方法), 189
        属性), 368 from_tree() (openpyxl.descriptors.nested.Nested 方 formula2 (openpyxl.worksheet.datavalidation.DataValidation 法), 189
	属性), 369	from_tree() (openpyxl.descriptors.nested.NestedBool
formulaRange	(open-	方法), 190
pyxl.worksheet.errors.IgnoredError 属 from_tree() (openpyxl.descriptors.nested.NestedText 性), 375	方法), 190
FormulaRule() (在 openpyxl.formatting.rule 模块 from_tree() (openpyxl.descriptors.sequence.NestedSequence 中), 257	方法), 191
forward (openpyxl.chart.trendline.Trendline 属性), from_tree() (openpyxl.descriptors.sequence.ValueSequence
	171	方法), 191
fov (openpyxl.drawing.geometry.Camera 属性), 222 from_tree() (openpyxl.descriptors.serialisable.Serialisable
fPrintsWithSheet	(open-	类方法), 191
pyxl.drawing.spreadsheet_drawing.AnchorClientDatafrom_tree() (openpyxl.styles.fills.Fill 类方法), 327
        属性), 240	from_tree() (openpyxl.styles.fonts.Font 类方法), fPublished (openpyxl.drawing.connector.ConnectorShape	330
属性), 200
fPublished (openpyxl.drawing.connector.Shape 属
性), 201
fPublished (openpyxl.drawing.graphic.GraphicFrame
属性), 230
fPublished (openpyxl.drawing.picture.PictureFrame
属性), 235
freeze_panes	(open-
pyxl.worksheet.worksheet.Worksheet 属性), 405
from_array() (openpyxl.styles.cell_style.CellStyle
类方法), 323from_tree() (openpyxl.styles.stylesheet.Stylesheet 类
方法), 336
from_tree() (openpyxl.workbook.protection.WorkbookProtection
类方法), 352
from_tree() (openpyxl.worksheet.header_footer.HeaderFooterItem
类方法), 382
from_tree() (openpyxl.worksheet.page.PrintPageSetup
类方法), 387
from_tree() (openpyxl.worksheet.table.TableColumn
类方法), 397
fromWordArt (openpyxl.drawing.text.RichTextProperties
属性), 252from_cell() (openpyxl.comments.comment_sheet.CommentRecordfullCalcOnLoad (open类方法), 181 pyxl.workbook.properties.CalcProperties from_comments() (open- 属性), 349
pyxl.comments.comment_sheet.CommentSheetfullPrecision	(open类方法), 182	pyxl.workbook.properties.CalcProperties
from_excel() (在 openpyxl.utils.datetime 模块中),	属性), 349
	340	FUNC (openpyxl.formula.tokenizer.Token 属性), 260
from_ISO8601() (在 openpyxl.utils.datetime 模块 function (openpyxl.workbook.defined_name.DefinedName
        中), 340	属性), 346 from_tree() (openpyxl.chart.axis.NumericAxis 类方 FunctionGroup (openpyxl.workbook.function_group 中的类), 348	223
functionGroup	(open- GeomGuideList (openpyxl.drawing.text 中的类), 246
pyxl.workbook.function_group.FunctionGroupListGeomRect (openpyxl.drawing.geometry 中的类), 223

属性), 348
functionGroupId	(openpyxl.workbook.defined_name.DefinedName 属性), 346
FunctionGroupList	(openpyxl.workbook.function_group 中的类),
348
functionGroups	(openpyxl.packaging.workbook.WorkbookPackage 属性), 273
G
g (openpyxl.drawing.colors.RGBPercent 属性), 195 gamma (openpyxl.drawing.colors.SchemeColor 属性),
        196 gamma (openpyxl.drawing.colors.SystemColor 属性),
        198 gapDepth (openpyxl.chart.area_chart.AreaChart3D 属性), 126
gapDepth (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
gapDepth (openpyxl.chart.line_chart.LineChart3D 属性), 150
gapWidth (openpyxl.chart.bar_chart.BarChart 属
性), 134
gapWidth (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
get() (openpyxl.workbook.defined_name.DefinedNameList 方法), 347
get() (openpyxl.worksheet.table.TableList 方法), 399 get_closer() (openpyxl.formula.tokenizer.Token 方
法), 261
get_column_interval() (在 openpyxl.utils.cell 模块
中), 339
get_column_letter() (在 openpyxl.utils.cell 模块
中), 339
get_dependents()	(在	open-
pyxl.packaging.relationship 模块中), 270
get_emu_dimensions()	(openpyxl.drawing.drawing.Drawing 方法),
        202 get_index() (openpyxl.workbook.workbook.Workbook 方法), 360
get_named_range()	(openpyxl.workbook.workbook.Workbook	方法), 360
get_named_ranges()	(openpyxl.workbook.workbook.Workbook	方法), 360
get_rel() (在 openpyxl.packaging.relationship 模块
中), 270
get_rels_path()	(在	openpyxl.packaging.relationship 模块中), 270
gapWidth (openpyxl.chart.pie_chart.ProjectedPieChart	pyxl.workbook.workbook.Workbook	方属性), 154	法), 361
gapWidth (openpyxl.chart.updown_bars.UpDownBars get_sheet_names()	(open属性), 173	pyxl.workbook.workbook.Workbook	方
gd (openpyxl.drawing.geometry.GeomGuideList 属	法), 361
        性), 223	get_tokens()	(opengd (openpyxl.drawing.text.GeomGuideList 属性), 246	pyxl.formula.translate.Translator 方法), gdLst (openpyxl.drawing.geometry.CustomGeometry2D	262
	属性), 223	get_type() (在 openpyxl.cell.cell 模块中), 121
GeomGuide (openpyxl.drawing.geometry 中的类), 223 get_version() (在 openpyxl.packaging.extended 模
GeomGuide (openpyxl.drawing.text 中的类), 246	块中), 268
GeomGuideList (openpyxl.drawing.geometry 中的类), glow (openpyxl.drawing.effect.EffectList 属性), 204get_sheet_by_name()	(openGlowEffect (openpyxl.drawing.effect 中的类), 205 GMT (openpyxl.utils.datetime 中的类), 340
goal (openpyxl.pivot.cache.PCDKPI 属性), 285 gradFill (openpyxl.chart.shapes.GraphicalProperties 属性), 166
gradFill (openpyxl.drawing.line.LineProperties 属
性), 234
gradFill (openpyxl.drawing.text.CharacterProperties 属性), 244
GradientFill (openpyxl.styles.fills 中的类), 327
GradientFillProperties (openpyxl.drawing.fill 中的类), 215
GradientStop (openpyxl.drawing.fill 中的类), 215 grandCol (openpyxl.pivot.table.PivotArea 属性), 302 grandRow (openpyxl.pivot.table.PivotArea 属性), 303 grandTotalCaption	(openpyxl.pivot.table.TableDefinition 属性),
        315 graphic (openpyxl.drawing.graphic.GraphicFrame 属
性), 230
graphicalProperties	(openpyxl.chart.axis.ChartLines 属性), 127
graphicalProperties	(open-
pyxl.chart.axis.DisplayUnitsLabel 属性),
128
graphicalProperties	(open-
pyxl.chart.chartspace.ChartSpace 属性),
138
graphicalProperties	(open-
pyxl.chart.error_bar.ErrorBars 属性),
144
graphicalProperties	(open-
pyxl.chart.legend.Legend 属性), 148
graphicalProperties	(openpyxl.chart.marker.DataPoint 属性), 151
graphicalProperties	(openpyxl.chart.marker.Marker 属性), 151
graphicalProperties	(openpyxl.chart.pivot.PivotFormat 属性), 155
graphicalProperties	(openpyxl.chart.plotarea.DataTable 属性), 156
graphicalProperties	(openpyxl.chart.plotarea.PlotArea 属性), 157
graphicalProperties (openpyxl.chart.series.Series 属性), 163
GraphicalProperties (openpyxl.chart.shapes 中的
类), 166
graphicalProperties	(openpyxl.chart.surface_chart.BandFormat
属性), 168
graphicalProperties (openpyxl.chart.title.Title 属
性), 170
graphicalProperties	(openpyxl.chart.trendline.Trendline 属性),
171
graphicalProperties	(openpyxl.chart.trendline.TrendlineLabel 属性), 172
graphicalProperties	(openpyxl.drawing.connector.Shape 属性), 201
graphicalProperties	(openpyxl.drawing.picture.PictureFrame	属性), 235
GraphicData (openpyxl.drawing.graphic 中的类), 230
graphicData (openpyxl.drawing.graphic.GraphicObject 属性), 231
GraphicFrame (openpyxl.drawing.graphic 中的类),
230
graphicFrame	(open-
pyxl.drawing.spreadsheet_drawing.AbsoluteAnchor
属性), 240
graphicFrame	(open-
pyxl.drawing.spreadsheet_drawing.OneCellAnchor
属性), 241
graphicFrame	(open-
pyxl.drawing.spreadsheet_drawing.TwoCellAnchor
属性), 242
GraphicFrameLocking (openpyxl.drawing.graphic 中的类), 230
graphicFrameLocks	(open-
pyxl.drawing.graphic.NonVisualGraphicFrameProperties
属性), 232
GraphicObject (openpyxl.drawing.graphic 中的类),
231
gray (openpyxl.drawing.colors.SchemeColor 属性),
        196 gray (openpyxl.drawing.colors.SystemColor 属性),
198
GrayscaleEffect (openpyxl.drawing.effect 中的类),
        206 grayscl (openpyxl.drawing.fill.Blip 属性), 213 green (openpyxl.drawing.colors.SchemeColor 属性),
        196 green (openpyxl.drawing.colors.SystemColor 属性),
        198 greenMod (openpyxl.drawing.colors.SchemeColor 属
性), 196
greenMod (openpyxl.drawing.colors.SystemColor 属
性), 198
greenOff (openpyxl.drawing.colors.SchemeColor 属
性), 196
greenOff (openpyxl.drawing.colors.SystemColor 属
性), 198
gridDropZones (openpyxl.pivot.table.TableDefinition 属性), 315
gridLines (openpyxl.worksheet.page.PrintOptions 属
性), 386
gridLinesSet	(openpyxl.worksheet.page.PrintOptions 属性),
        386 group (openpyxl.pivot.cache.GroupMember 属性),
        282 group (openpyxl.pivot.cache.Groups 属性), 283 grouping (openpyxl.chart.line_chart.LineChart3D 属性), 150
groupInterval (openpyxl.pivot.cache.RangePr 属
性), 287
GroupItems (openpyxl.pivot.cache 中的类), 281 groupItems (openpyxl.pivot.cache.FieldGroup 属性), 281
GroupLevel (openpyxl.pivot.cache 中的类), 282 groupLevel (openpyxl.pivot.cache.GroupLevels 属
性), 282
GroupLevels (openpyxl.pivot.cache 中的类), 282 groupLevels (openpyxl.pivot.cache.CacheHierarchy 属性), 278
GroupLocking (openpyxl.drawing.properties 中的类),
237
GroupMember (openpyxl.pivot.cache 中的类), 282 groupMember (openpyxl.pivot.cache.GroupMembers 属性), 283
GroupMembers (openpyxl.pivot.cache 中的类), 283 groupMembers (openpyxl.pivot.cache.LevelGroup 属
性), 283
Groups (openpyxl.pivot.cache 中的类), 283
groups (openpyxl.pivot.cache.GroupLevel 属性), 282 GroupShape (openpyxl.drawing.graphic 中的类), 231
GroupShapeProperties	(open-
pyxl.drawing.properties 中的类), 237
GroupTransform2D (openpyxl.drawing.geometry 中的
        类), 224 grow (openpyxl.drawing.effect.BlurEffect 属性), 203

group() (openpyxl.worksheet.dimensions.DimensionHoldergrpFill (openpyxl.drawing.text.CharacterProperties 方法), 372	属性), 244 groupBy (openpyxl.pivot.cache.RangePr 属性), 287 grpSp (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor grouping (openpyxl.chart.area_chart.AreaChart 属 属性), 240
	性), 126	grpSp (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor
grouping (openpyxl.chart.area_chart.AreaChart3D 属性), 241 属性), 126 grpSp (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor
grouping (openpyxl.chart.bar_chart.BarChart 属	属性), 242
	性), 134	grpSpLocks (openpyxl.drawing.properties.NonVisualGroupDrawingSha
grouping (openpyxl.chart.bar_chart.BarChart3D 属	属性), 239
	性), 135	grpSpPr (openpyxl.drawing.graphic.GroupShape 属
grouping (openpyxl.chart.line_chart.LineChart 属	性), 231
	性), 149	gsLst (openpyxl.drawing.fill.GradientFillProperties
	属性), 215	pyxl.chartsheet.chartsheet.Chartsheet 属
gte (openpyxl.formatting.rule.FormatObject 属性),	性), 173
	257	headerFooter	(open-
guid (openpyxl.chartsheet.custom.CustomChartsheetView pyxl.chartsheet.custom.CustomChartsheetView 属性), 174	属性), 174 guid (openpyxl.comments.comment_sheet.CommentRecordHeaderFooter (openpyxl.worksheet.header_footer 中
属性), 181
Guid (openpyxl.descriptors.excel 中的类), 188 guid (openpyxl.workbook.views.CustomWorkbookView
属性), 356
H
h (openpyxl.chart.layout.ManualLayout 属性), 147 h (openpyxl.drawing.geometry.Bevel 属性), 221 h (openpyxl.drawing.geometry.Path2D 属性), 225 h (openpyxl.pivot.table.FieldItem 属性), 299
hangingPunct	(open-
pyxl.drawing.text.ParagraphProperties
属性), 250
has_style (openpyxl.styles.styleable.StyleableObject
属性), 335
hash_password() (在 openpyxl.utils.protection 模块
中), 342的类), 381
HeaderFooterItem	(open-
pyxl.worksheet.header_footer 中的类),
381
headerRowBorderDxfId	(openpyxl.worksheet.table.Table 属性), 396
headerRowCellStyle	(openpyxl.worksheet.table.Table 属性), 396
headerRowCellStyle	(open-
pyxl.worksheet.table.TableColumn	属性), 397
headerRowCount (openpyxl.worksheet.table.Table 属
性), 396
headerRowDxfId (openpyxl.worksheet.table.Table 属
性), 396
headerRowDxfId	(openpyxl.worksheet.table.TableColumn	属hashValue (openpyxl.chartsheet.protection.ChartsheetProtection 性), 397
	属性), 175	HeadingPairs	(open-
hashValue (openpyxl.workbook.protection.FileSharing	pyxl.packaging.extended.ExtendedProperties 属性), 352	属性), 266
hashValue (openpyxl.worksheet.protection.SheetProtectionheadings (openpyxl.worksheet.page.PrintOptions 属属性), 392	性), 386
headEnd (openpyxl.drawing.line.LineProperties 属 height (openpyxl.chart.layout.ManualLayout 属性),
	性), 234	147
header (openpyxl.chart.print_settings.PageMargins height (openpyxl.drawing.drawing.Drawing 属性), 属性), 159	202
header (openpyxl.worksheet.page.PageMargins 属 height (openpyxl.drawing.geometry.PositiveSize2D
	性), 385	属性), 226
headerFooter	(open- height (openpyxl.worksheet.dimensions.RowDimension pyxl.chart.print_settings.PrintSettings	属性), 372
	属性), 159	help (openpyxl.workbook.defined_name.DefinedName
HeaderFooter	(open-	属性), 346
pyxl.chartsheet.chartsheet.Chartsheet 属 HexBinary (openpyxl.descriptors.excel 中的类), 188
	性), 173	hidden (openpyxl.drawing.properties.NonVisualDrawingProps
headerFooter	(open-	属性), 238
hidden (openpyxl.pivot.cache.CacheHierarchy 属性), hiLowLines (openpyxl.chart.line_chart.LineChart 属
	278	性), 149
hidden (openpyxl.styles.named_styles.NamedStyle 属 hiLowLines (openpyxl.chart.line_chart.LineChart3D
	性), 333	属性), 150
hidden (openpyxl.styles.protection.Protection 属性), hiLowLines (openpyxl.chart.stock_chart.StockChart
        334	属性), 167 hidden (openpyxl.workbook.defined_name.DefinedNamehistory (openpyxl.drawing.text.Hyperlink 属性), 247
属性), 347
hidden (openpyxl.worksheet.dimensions.Dimension
属性), 371
hidden (openpyxl.worksheet.scenario.Scenario 属性),
393
hiddenButton	(open-
pyxl.worksheet.filters.FilterColumn 属性), 378
hiddenLevel (openpyxl.pivot.table.PivotField 属性),
305
HiddenSlides	(open-
pyxl.packaging.extended.ExtendedProperties
属性), 267
hide_drop_down	(open-
pyxl.worksheet.datavalidation.DataValidation
属性), 369
hideNewItems (openpyxl.pivot.table.PivotField 属
性), 305
hidePivotFieldList	(open-
pyxl.workbook.properties.WorkbookProperties
属性), 351
hier (openpyxl.pivot.fields.Tuple 属性), 295 hier (openpyxl.pivot.table.PageField 属性), 302 hierarchy (openpyxl.pivot.cache.CacheField 属性),
276
hierarchy (openpyxl.pivot.cache.CalculatedMember
属性), 280
HierarchyUsage (openpyxl.pivot.table 中的类), 300
hierarchyUsage	(open-
pyxl.pivot.table.HierarchyUsage 属性),
300hlink (openpyxl.drawing.colors.ColorMapping 属性),
194
hlinkClick (openpyxl.drawing.properties.NonVisualDrawingProps
属性), 238
hlinkClick (openpyxl.drawing.text.CharacterProperties
属性), 244
hlinkHover (openpyxl.drawing.properties.NonVisualDrawingProps
属性), 238
hlinkMouseOver	(open-
pyxl.drawing.text.CharacterProperties
属性), 244
HLinks (openpyxl.packaging.extended.ExtendedProperties
属性), 266
hMode (openpyxl.chart.layout.ManualLayout 属性),
147
holeSize (openpyxl.chart.pie_chart.DoughnutChart
属性), 152
horizontal (openpyxl.styles.alignment.Alignment 属
性), 320
horizontal (openpyxl.styles.borders.Border 属性),
322
horizontalCentered	(open-
pyxl.worksheet.page.PrintOptions 属性),
386
horizontalDpi	(open-
pyxl.worksheet.page.PrintPageSetup 属性), 387
horzOverflow	(open-
pyxl.drawing.text.RichTextProperties 属性), 252
hour (openpyxl.worksheet.filters.DateGroupItem 属highlight (openpyxl.drawing.text.CharacterProperties	性), 377
	属性), 244	hsl (openpyxl.drawing.fill.Blip 属性), 213
highlightClick (openpyxl.drawing.text.Hyperlink 属 hslClr (openpyxl.drawing.colors.ColorChoice 属性),
	性), 247	192

hslClr (openpyxl.drawing.effect.GlowEffect 属性),
        205 hslClr (openpyxl.drawing.effect.InnerShadowEffect 属性), 206
hslClr (openpyxl.drawing.effect.OuterShadow 属性),
        208 hslClr (openpyxl.drawing.effect.PresetShadowEffect 属性), 210
hslClr (openpyxl.drawing.fill.GradientStop 属性),
        216 hslClr (openpyxl.drawing.fill.SolidColorFillProperties 属性), 219
HSLColor (openpyxl.drawing.colors 中的类), 195 HSLEffect (openpyxl.drawing.effect 中的类), 206 ht (openpyxl.worksheet.dimensions.RowDimension 属性), 372
hue (openpyxl.drawing.colors.HSLColor 属性), 195 hue (openpyxl.drawing.colors.SchemeColor 属性),
        196 hue (openpyxl.drawing.colors.SystemColor 属性), 198 hue (openpyxl.drawing.effect.HSLEffect 属性), 206 hue (openpyxl.drawing.effect.TintEffect 属性), 212 hueMod (openpyxl.drawing.colors.SchemeColor 属性),
        196 hueMod (openpyxl.drawing.colors.SystemColor 属性),
        198 hueOff (openpyxl.drawing.colors.SchemeColor 属性),
        196 hueOff (openpyxl.drawing.colors.SystemColor 属性),
        199 hyperlink (openpyxl.cell.cell.Cell 属性), 120 hyperlink (openpyxl.cell.cell.MergedCell 属性), 121
        Hyperlink (openpyxl.drawing.text 中的类), 246
Hyperlink (openpyxl.worksheet.hyperlink 中的类),
        382 hyperlink (openpyxl.worksheet.hyperlink.HyperlinkList 属性), 382
HyperlinkBase	(openpyxl.packaging.extended.ExtendedProperties
属性), 267
HyperlinkList (openpyxl.worksheet.hyperlink 中的
类), 382
HyperlinksChanged	(openpyxl.packaging.extended.ExtendedProperties 属性), 267
I
i (openpyxl.cell.text.InlineFont 属性), 123 i (openpyxl.drawing.text.CharacterProperties 属性),
        244 i (openpyxl.pivot.fields.Error 属性), 292 i (openpyxl.pivot.fields.Missing 属性), 293 i (openpyxl.pivot.fields.Number 属性), 294 i (openpyxl.pivot.fields.Text 属性), 295 i (openpyxl.pivot.table.RowColItem 属性), 311 i (openpyxl.styles.fonts.Font 属性), 330 i1 (openpyxl.pivot.cache.RangeSet 属性), 288 i2 (openpyxl.pivot.cache.RangeSet 属性), 288 i3 (openpyxl.pivot.cache.RangeSet 属性), 288 i4 (openpyxl.pivot.cache.RangeSet 属性), 288 IconFilter (openpyxl.worksheet.filters 中的类), 379
        iconFilter (openpyxl.worksheet.filters.FilterColumn 属性), 378
iconId (openpyxl.worksheet.filters.IconFilter 属性),
        379 iconId (openpyxl.worksheet.filters.SortCondition 属
性), 379
IconSet (openpyxl.formatting.rule 中的类), 257 iconSet (openpyxl.formatting.rule.IconSet 属性),
        257 iconSet (openpyxl.formatting.rule.Rule 属性), 259
        iconSet (openpyxl.pivot.cache.CacheHierarchy 属
性), 278
iconSet (openpyxl.worksheet.filters.IconFilter 属性),
        379 iconSet (openpyxl.worksheet.filters.SortCondition 属
性), 379
IconSetRule() (在 openpyxl.formatting.rule 模块
中), 258
id (openpyxl.chart.chartspace.ExternalData 属性),
        139 id (openpyxl.chartsheet.publish.WebPublishItem 属
	178	identifier (openpyxl.packaging.core.DocumentProperties
id (openpyxl.chartsheet.relation.SheetBackgroundPicture	属性), 264
	属性), 179	identifiers (openpyxl.chart.series.Series 属性),
id (openpyxl.drawing.connector.Connection 属性),	163
	200	idx (openpyxl.chart.data_source.NumVal 属性), 142
id (openpyxl.drawing.properties.NonVisualDrawingPropsidx (openpyxl.chart.data_source.StrVal 属性), 142属性), 238
id (openpyxl.drawing.relation.ChartRelation 属性),
239
id (openpyxl.drawing.text.Hyperlink 属性), 247 id (openpyxl.drawing.text.TextField 属性), 254 id (openpyxl.packaging.interface.ISerialisableFile 属
性), 268
Id (openpyxl.packaging.relationship.Relationship 属
性), 269
id (openpyxl.packaging.relationship.Relationship 属
性), 270
id (openpyxl.packaging.workbook.ChildSheet 属性),
271
id (openpyxl.packaging.workbook.PivotCache 属性),
272
id (openpyxl.pivot.cache.CacheDefinition 属性), 275 id (openpyxl.pivot.cache.LevelGroup 属性), 283 id (openpyxl.pivot.table.PivotFilter 属性), 307 id (openpyxl.pivot.table.TableDefinition 属性), 315idx (openpyxl.chart.label.DataLabel 属性), 144 idx (openpyxl.chart.legend.LegendEntry 属性), 148 idx (openpyxl.chart.marker.DataPoint 属性), 151 idx (openpyxl.chart.pivot.PivotFormat 属性), 155 idx (openpyxl.chart.series.Series 属性), 163 idx (openpyxl.chart.series.XYSeries 属性), 165 idx (openpyxl.chart.surface_chart.BandFormat 属
性), 168
idx (openpyxl.drawing.connector.Connection 属性),
200
idx (openpyxl.drawing.geometry.FontReference 属
性), 223
idx (openpyxl.drawing.geometry.StyleMatrixReference
属性), 229
idx_base (openpyxl.descriptors.sequence.Sequence
属性), 191
idx_base (openpyxl.descriptors.serialisable.Serialisable
属性), 192
Ignorable (openpyxl.packaging.workbook.WorkbookPackageid (openpyxl.workbook.external_link.external.ExternalBook 属性), 272
        属性), 344	IgnoredError (openpyxl.worksheet.errors 中的类), id (openpyxl.workbook.external_reference.ExternalReference	374        性), 176 id (openpyxl.chartsheet.relation.DrawingHF 属性), 属性), 348
id (openpyxl.workbook.web.WebPublishObject 属性),
        358 id (openpyxl.worksheet.controls.ControlProperty 属
性), 367
id (openpyxl.worksheet.drawing.Drawing 属性), 374 id (openpyxl.worksheet.hyperlink.Hyperlink 属性),
        382 id (openpyxl.worksheet.page.PrintPageSetup 属性),
        387 id (openpyxl.worksheet.pagebreak.Break 属性), 388 id (openpyxl.worksheet.related.Related 属性), 392 id (openpyxl.worksheet.table.Table 属性), 396
        id (openpyxl.worksheet.table.TableColumn 属性), 398 ignoredError	(openpyxl.worksheet.errors.IgnoredErrors 属性), 375
IgnoredErrors (openpyxl.worksheet.errors 中的类),
375
IllegalCharacterError, 341
Image (openpyxl.drawing.image 中的类), 232 iMeasureFld (openpyxl.pivot.table.PivotFilter 属性),
        307 iMeasureHier (openpyxl.pivot.table.PivotFilter 属
性), 307
imeMode (openpyxl.worksheet.datavalidation.DataValidation 属性), 369
immersive (openpyxl.pivot.table.TableDefinition 属
性), 315
inch_to_dxa() (在 openpyxl.utils.units 模块中), 343 inch_to_EMU() (在 openpyxl.utils.units 模块中), 343
includeHiddenRowCol (open-
pyxl.workbook.views.CustomWorkbookView 属性), 356
includeNewItemsInFilter	(openpyxl.pivot.table.PivotField 属性), 305
includeNewItemsInFilter	(open-
pyxl.pivot.table.PivotHierarchy 属性),
308
includePrintSettings	(open-
pyxl.workbook.views.CustomWorkbookView 属性), 356
indent (openpyxl.drawing.text.ParagraphProperties
属性), 250
indent (openpyxl.pivot.table.TableDefinition 属性),
315
indent (openpyxl.styles.alignment.Alignment 属性), 320
Index (openpyxl.pivot.fields 中的类), 293 index (openpyxl.styles.colors.Color 属性), 325 index (openpyxl.styles.colors.ColorList 属性), 325 393
inputCells (openpyxl.worksheet.scenario.Scenario
属性), 393
insert_cols()	(open-
pyxl.worksheet.worksheet.Worksheet 方法), 405
insert_rows()	(open-
pyxl.worksheet.worksheet.Worksheet 方法), 405
insertBlankRow (openpyxl.pivot.table.PivotField 属
性), 305
insertColumns	(open-
pyxl.worksheet.protection.SheetProtection
属性), 392
insertHyperlinks	(open-
pyxl.worksheet.protection.SheetProtection
属性), 392
insertPageBreak (openpyxl.pivot.table.PivotField 属
性), 305
insertRow (openpyxl.worksheet.table.Table 属性),
396
insertRows (openpyxl.worksheet.protection.SheetProtection
index (openpyxl.worksheet.dimensions.ColumnDimensioninsertRowShift (openpyxl.worksheet.table.Table 属属性), 392

属性), 371
index (openpyxl.worksheet.dimensions.Dimension 属
性), 371
index() (openpyxl.utils.indexed_list.IndexedList 方
法), 342
index() (openpyxl.workbook.workbook.Workbook 方
法), 361
indexed (openpyxl.styles.colors.Color 属性), 325 indexedColors (openpyxl.styles.colors.ColorList 属
性), 325
IndexedList (openpyxl.utils.indexed_list 中的类), 341
InlineFont (openpyxl.cell.text 中的类), 122
InnerShadowEffect (openpyxl.drawing.effect 中的
类), 206
innerShdw (openpyxl.drawing.effect.EffectList 属性),
204
InputCells (openpyxl.worksheet.scenario 中的类),
性), 396
Integer (openpyxl.descriptors.base 中的类), 186 intercept (openpyxl.chart.trendline.Trendline 属
性), 171
internal_value (openpyxl.cell.cell.Cell 属性), 120
internal_value	(open-
pyxl.cell.read_only.ReadOnlyCell 属性),
122
intersection()	(open-
pyxl.worksheet.cell_range.CellRange 方法), 363
inv (openpyxl.drawing.colors.SchemeColor 属性),
196
inv (openpyxl.drawing.colors.SystemColor 属性), 199 invalid (openpyxl.pivot.cache.CacheDefinition 属
性), 275
InvalidFileException, 341 invalidUrl (openpyxl.drawing.text.Hyperlink 属性), 247
invertIfNegative	(openpyxl.chart.marker.DataPoint 属性), 151
invertIfNegative (openpyxl.chart.series.Series 属
性), 163
invertIfNegative (openpyxl.chart.series.XYSeries 属性), 165
invGamma (openpyxl.drawing.colors.SchemeColor 属
性), 196
invGamma (openpyxl.drawing.colors.SystemColor 属
性), 199
is_builtin() (在 openpyxl.styles.numbers 模块中),
        334 is_date (openpyxl.cell.cell.Cell 属性), 120 is_date (openpyxl.cell.read_only.EmptyCell 属性),
        122 is_date (openpyxl.cell.read_only.ReadOnlyCell 属
性), 122
is_date_format() (在 openpyxl.styles.numbers 模块
中), 334
is_datetime() (在 openpyxl.styles.numbers 模块中),
334
pyxl.pivot.table.TableDefinition 属性),
        315 items (openpyxl.pivot.table.PivotField 属性), 305 items() (openpyxl.worksheet.table.TableList 方法),
        399 iter_cols() (openpyxl.worksheet.worksheet.Worksheet 方法), 405
iter_rows() (openpyxl.worksheet.worksheet.Worksheet 方法), 405
iterate (openpyxl.workbook.properties.CalcProperties 属性), 349
iterateCount	(openpyxl.workbook.properties.CalcProperties
属性), 349
iterateDelta	(openpyxl.workbook.properties.CalcProperties 属性), 349 J
join_lines (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
is_external (openpyxl.workbook.defined_name.DefinedName	pyxl.styles.alignment.Alignment 属性), 属性), 347	320
is_reserved (openpyxl.workbook.defined_name.DefinedNamejustLastX (openpyxl.comments.comment_sheet.Properties 属性), 347	属性), 183 isdisjoint()	(open-
K
pyxl.worksheet.cell_range.CellRange 方
	法), 363	kern (openpyxl.drawing.text.CharacterProperties 属
                                                        性), 244 ISerialisableFile (openpyxl.packaging.interface
        中的类), 268 key (openpyxl.styles.styleable.NamedStyleDescriptor 属性), 335 issubset() (openpyxl.worksheet.cell_range.CellRange
方法), 364	key (openpyxl.styles.styleable.NumberFormatDescriptor 属性), 335
issuperset()	(open-
pyxl.worksheet.cell_range.CellRange 方 key (openpyxl.worksheet.smart_tag.CellSmartTagPr 属性), 394
        法), 364 italic (openpyxl.styles.fonts.Font 属性), 330	keyAttribute (openpyxl.pivot.cache.CacheHierarchy 属性), 278 item (openpyxl.pivot.fields.Tuple 属性), 295
item (openpyxl.pivot.table.PageField 属性), 302 keywords (openpyxl.packaging.core.DocumentProperties 属性), 264 itemPageCount (openpyxl.pivot.table.PivotField 属
	性), 305	kpis (openpyxl.pivot.cache.CacheDefinition 属性),
                                                        275 itemPrintTitles	(open-justifyLastLine	(openkumimoji (openpyxl.drawing.text.CharacterProperties 属性), 244
kx (openpyxl.drawing.effect.OuterShadow 属性), 208 kx (openpyxl.drawing.effect.ReflectionEffect 属性),
        211 ky (openpyxl.drawing.effect.OuterShadow 属性), 208 ky (openpyxl.drawing.effect.ReflectionEffect 属性), 211
L
l (openpyxl.chart.print_settings.PageMargins 属性),
        159 l (openpyxl.drawing.fill.RelativeRect 属性), 218 l (openpyxl.drawing.geometry.GeomRect 属性), 224 labelOnly (openpyxl.pivot.table.PivotArea 属性),
        303 labels (openpyxl.chart.series.Series 属性), 163 lang (openpyxl.chart.chartspace.ChartSpace 属性),
        138 lang (openpyxl.drawing.text.CharacterProperties 属
性), 244
性), 128
Layout (openpyxl.chart.layout 中的类), 146 layout (openpyxl.chart.legend.Legend 属性), 148 layout (openpyxl.chart.plotarea.PlotArea 属性), 157 layout (openpyxl.chart.title.Title 属性), 170 layout (openpyxl.chart.trendline.TrendlineLabel 属
性), 172
layoutTarget (openpyxl.chart.layout.ManualLayout 属性), 147
lblAlgn (openpyxl.chart.axis.TextAxis 属性), 133 lblOffset (openpyxl.chart.axis.DateAxis 属性), 127 lblOffset (openpyxl.chart.axis.TextAxis 属性), 133 left (openpyxl.chart.print_settings.PageMargins 属
性), 159
left (openpyxl.drawing.fill.RelativeRect 属性), 218 left (openpyxl.styles.borders.Border 属性), 322
left (openpyxl.styles.fills.GradientFill 属性), 328 left (openpyxl.worksheet.cell_range.CellRange 属
性), 364
language (openpyxl.packaging.core.DocumentPropertiesleft (openpyxl.worksheet.page.PageMargins 属性), 264	385
last_modified_by	(open- leftFooterEvenPages
	pyxl.packaging.core.DocumentProperties	pyxl.chartsheet.relation.DrawingHF
	属性), 264	性), 178
lastClr (openpyxl.drawing.colors.SystemColor 属 leftFooterFirstPage
	性), 199	pyxl.chartsheet.relation.DrawingHF
lastEdited (openpyxl.workbook.properties.FileVersion	性), 178
	属性), 350	leftFooterOddPages
lastModifiedBy	(open-	pyxl.chartsheet.relation.DrawingHF
	pyxl.packaging.core.DocumentProperties	性), 178
	属性), 264	leftHeaderEvenPages
lastPrinted (openpyxl.packaging.core.DocumentProperties	pyxl.chartsheet.relation.DrawingHF 属性), 264	性), 178
lat (openpyxl.drawing.geometry.SphereCoords 属性), leftHeaderFirstPage
	228	pyxl.chartsheet.relation.DrawingHF
latin (openpyxl.drawing.text.CharacterProperties 属	性), 178
	性), 244	leftHeaderOddPages
latinLnBrk (openpyxl.drawing.text.ParagraphProperties	pyxl.chartsheet.relation.DrawingHF属性),
(open属
(open属
(open属
(open属
(open属
(open属	属性), 250	性), 178
layout (openpyxl.chart.axis.DisplayUnitsLabel 属 legend (openpyxl.chart.chartspace.ChartContainerleft (openpyxl.worksheet.header_footer.HeaderFooterItem 属性), 382

属性), 137
Legend (openpyxl.chart.legend 中的类), 147 LegendEntry (openpyxl.chart.legend 中的类), 148 legendEntry (openpyxl.chart.legend.Legend 属性),
        148 legendPos (openpyxl.chart.legend.Legend 属性), 148
        len (openpyxl.drawing.line.LineEndProperties 属性), 233
Length (openpyxl.descriptors.base 中的类), 186 length (openpyxl.drawing.line.DashStop 属性), 232 Level (openpyxl.chart.data_source 中的类), 140 level (openpyxl.pivot.cache.CacheField 属性), 276 level (openpyxl.pivot.table.MemberList 属性), 301 level (openpyxl.pivot.table.MemberProperty 属性), 301
LevelGroup (openpyxl.pivot.cache 中的类), 283 lfe (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 lff (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 lfo (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 lhe (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 lhf (openpyxl.chartsheet.relation.DrawingHF 属性),
        178 lho (openpyxl.chartsheet.relation.DrawingHF 属性), 179
LightRig (openpyxl.drawing.geometry 中的类), 224 lightRig (openpyxl.drawing.geometry.Scene3D 属
性), 227
lin (openpyxl.drawing.fill.GradientFillProperties 属
性), 215
line (openpyxl.chart.shapes.GraphicalProperties 属
性), 166
line3DChart (openpyxl.chart.plotarea.PlotArea 属
性), 157
linear (openpyxl.drawing.fill.GradientFillProperties 属性), 215
LinearShadeProperties (openpyxl.drawing.fill 中的
类), 217
LineBreak (openpyxl.drawing.text 中的类), 247 LineChart (openpyxl.chart.line_chart 中的类), 149 lineChart (openpyxl.chart.plotarea.PlotArea 属性),
157
LineChart3D (openpyxl.chart.line_chart 中的类),
149
LineEndProperties (openpyxl.drawing.line 中的类),
233
LineProperties (openpyxl.drawing.line 中的类), 233
Lines (openpyxl.packaging.extended.ExtendedProperties 属性), 267
link (openpyxl.drawing.fill.Blip 属性), 213 link (openpyxl.worksheet.ole.OleObject 属性), 385 linkedCell (openpyxl.worksheet.controls.ControlProperty 属性), 367
LinksUpToDate	(openpyxl.packaging.extended.ExtendedProperties
属性), 267
lIns (openpyxl.drawing.text.RichTextProperties 属
性), 252
listDataValidation	(openpyxl.worksheet.errors.IgnoredError 属性), 375
listFillRange	(openpyxl.worksheet.controls.ControlProperty
属性), 367
ListStyle (openpyxl.drawing.text 中的类), 247
LITERAL (openpyxl.formula.tokenizer.Token 属性),
        260 ln (openpyxl.chart.shapes.GraphicalProperties 属性),
        166 ln (openpyxl.drawing.text.CharacterProperties 属性),
        244 lnRef (openpyxl.drawing.geometry.ShapeStyle 属性),
        228 lnSpc (openpyxl.drawing.text.ParagraphProperties 属
性), 250
lnSpcReduction	(openpyxl.drawing.text.TextNormalAutofit 属性), 254
load_workbook() (在 openpyxl.reader.excel 模块中),
        319 localname() (在 openpyxl.xml.functions 模块中),

	409	260
localnames()	(open- lon (openpyxl.drawing.geometry.SphereCoords 属性),
	pyxl.workbook.defined_name.DefinedNameList	228
	方法), 348	longFileNames	(open-
localSheetId	(open-	pyxl.workbook.web.WebPublishing 属性),
	pyxl.workbook.defined_name.DefinedName	359
	属性), 347	longText (openpyxl.pivot.cache.SharedItems 属性),
Location (openpyxl.pivot.table 中的类), 300	289
location (openpyxl.pivot.table.TableDefinition 属 lowestEdited	(open性), 315	pyxl.workbook.properties.FileVersion 属
location (openpyxl.worksheet.hyperlink.Hyperlink 属	性), 350 性), 382	lstStyle (openpyxl.chart.text.RichText 属性), 169
lock_revision	(open- lum (openpyxl.drawing.colors.HSLColor 属性), 195
pyxl.workbook.protection.WorkbookProtection lum (openpyxl.drawing.colors.SchemeColor 属性),
	属性), 353	196
lock_structure	(open- lum (openpyxl.drawing.colors.SystemColor 属性), 199
pyxl.workbook.protection.WorkbookProtection lum (openpyxl.drawing.effect.HSLEffect 属性), 206
	属性), 353	lum (openpyxl.drawing.fill.Blip 属性), 213
lock_windows	(open- LuminanceEffect (openpyxl.drawing.effect 中的类),
	pyxl.workbook.protection.WorkbookProtection	207
	属性), 353	lumMod (openpyxl.drawing.colors.SchemeColor 属性),
locked (openpyxl.comments.comment_sheet.Properties	197
属性), 183
locked (openpyxl.styles.protection.Protection 属性),
334
locked (openpyxl.worksheet.controls.ControlProperty
属性), 367
locked (openpyxl.worksheet.ole.ObjectPr 属性), 384 locked (openpyxl.worksheet.scenario.Scenario 属性),
393
lockRevision	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 352
lockStructure	(open-lumMod (openpyxl.drawing.colors.SystemColor 属性),
199
lumOff (openpyxl.drawing.colors.SchemeColor 属性),
197
lumOff (openpyxl.drawing.colors.SystemColor 属性),
199
lvl (openpyxl.chart.data_source.MultiLevelStrData
属性), 140
lvl (openpyxl.drawing.text.ParagraphProperties 属
性), 250
lvl1pPr (openpyxl.drawing.text.ListStyle 属性), 248 lvl2pPr (openpyxl.drawing.text.ListStyle 属性), 248pyxl.workbook.protection.WorkbookProtection lvl3pPr (openpyxl.drawing.text.ListStyle 属性), 248 属性), 353 lvl4pPr (openpyxl.drawing.text.ListStyle 属性), 248lockText (openpyxl.comments.comment_sheet.Propertieslvl5pPr (openpyxl.drawing.text.ListStyle 属性), 248 属性), 183 lvl6pPr (openpyxl.drawing.text.ListStyle 属性), 248
lockWindows (openpyxl.workbook.protection.WorkbookProtectionlvl7pPr (openpyxl.drawing.text.ListStyle 属性), 248 属性), 353	lvl8pPr (openpyxl.drawing.text.ListStyle 属性), 248 logBase (openpyxl.chart.axis.Scaling 属性), 131	lvl9pPr (openpyxl.drawing.text.ListStyle 属性), 248 LOGICAL (openpyxl.formula.tokenizer.Token 属性), lxml_available() (在 openpyxl.xml 模块中), 408

lxml_env_set() (在 openpyxl.xml 模块中), 408
M
m (openpyxl.pivot.cache.GroupItems 属性), 282 m (openpyxl.pivot.cache.PCDSDTCEntries 属性), 286 m (openpyxl.pivot.cache.SharedItems 属性), 289 m (openpyxl.pivot.record.Record 属性), 296
m (openpyxl.pivot.table.FieldItem 属性), 299 macro (openpyxl.drawing.connector.ConnectorShape 属性), 200
macro (openpyxl.drawing.connector.Shape 属性), 201 macro (openpyxl.drawing.graphic.GraphicFrame 属
性), 230
macro (openpyxl.drawing.picture.PictureFrame 属
性), 235
macro (openpyxl.worksheet.controls.ControlProperty 属性), 367
macro (openpyxl.worksheet.ole.ObjectPr 属性), 384
majorGridlines (openpyxl.chart.axis.DateAxis 属
性), 127
majorGridlines (openpyxl.chart.axis.NumericAxis 属性), 130
majorGridlines (openpyxl.chart.axis.SeriesAxis 属
性), 131
majorGridlines (openpyxl.chart.axis.TextAxis 属
性), 133
majorTickMark (openpyxl.chart.axis.DateAxis 属性),
        127 majorTickMark (openpyxl.chart.axis.NumericAxis 属
性), 130
majorTickMark (openpyxl.chart.axis.SeriesAxis 属
性), 132
majorTickMark (openpyxl.chart.axis.TextAxis 属性),
        133 majorTimeUnit (openpyxl.chart.axis.DateAxis 属性),
        128 majorUnit (openpyxl.chart.axis.DateAxis 属性), 128 majorUnit (openpyxl.chart.axis.NumericAxis 属性),
        130 make_operand() (openpyxl.formula.tokenizer.Token 类方法), 261
make_separator()	(openpyxl.formula.tokenizer.Token 类方法),
        261 make_subexp() (openpyxl.formula.tokenizer.Token 类方法), 261
man (openpyxl.worksheet.pagebreak.Break 属性), 388
Manager (openpyxl.packaging.extended.ExtendedProperties 属性), 267
Manifest (openpyxl.packaging.manifest 中的类), 268 manualBreakCount	(openpyxl.worksheet.pagebreak.ColBreak	属性), 388
manualBreakCount	(openpyxl.worksheet.pagebreak.RowBreak 属性), 389
ManualLayout (openpyxl.chart.layout 中的类), 146 manualLayout (openpyxl.chart.layout.Layout 属性),
        146 mapId (openpyxl.worksheet.table.XMLColumnProps 属性), 400
mappingCount (openpyxl.pivot.cache.CacheField 属
性), 276
maps (openpyxl.pivot.cache.CacheDefinition 属性),
        275 marker (openpyxl.chart.line_chart.LineChart 属性),
        149 marker (openpyxl.chart.line_chart.LineChart3D 属
性), 150
Marker (openpyxl.chart.marker 中的类), 151 marker (openpyxl.chart.marker.DataPoint 属性), 151 marker (openpyxl.chart.pivot.PivotFormat 属性), 155 marker (openpyxl.chart.series.Series 属性), 163 marker (openpyxl.chart.series.XYSeries 属性), 165 marL (openpyxl.drawing.text.ParagraphProperties 属
性), 250
marR (openpyxl.drawing.text.ParagraphProperties 属
性), 250
MatchPattern (openpyxl.descriptors.base 中的类),
        186 max (openpyxl.chart.axis.Scaling 属性), 131 max (openpyxl.chart.descriptors.NestedGapAmount 属性), 143
	143	性), 278
Max (openpyxl.descriptors.base 中的类), 186 measure (openpyxl.pivot.cache.PivotDimension 属 max (openpyxl.descriptors.excel.Percentage 属性), 188 性), 286 max (openpyxl.descriptors.excel.TextPoint 属性), 189 MeasureDimensionMap (openpyxl.pivot.cache 中的 max (openpyxl.worksheet.dimensions.ColumnDimension 类), 283
	属性), 371	measureFilter (openpyxl.pivot.table.PivotField 属
max (openpyxl.worksheet.pagebreak.Break 属性), 388 性), 305 max_col (openpyxl.chart.reference.Reference 属性), MeasureGroup (openpyxl.pivot.cache 中的类), 284
	161	measureGroup (openpyxl.pivot.cache.CacheHierarchy
max_col (openpyxl.worksheet.cell_range.CellRange	属性), 278
	属性), 364	measureGroup	(open-
max_column (openpyxl.worksheet.worksheet.Worksheet	pyxl.pivot.cache.MeasureDimensionMap 属性), 406	属性), 284
max_row (openpyxl.chart.reference.Reference 属性), measureGroup (openpyxl.pivot.cache.PCDKPI 属性),
	161	285
max_row (openpyxl.worksheet.cell_range.CellRange measureGroups (open属性), 364 pyxl.pivot.cache.CacheDefinition 属性),
max_row (openpyxl.worksheet.worksheet.Worksheet 属	275
	性), 406	measures (openpyxl.pivot.cache.CacheHierarchy 属
maxDate (openpyxl.pivot.cache.SharedItems 属性),	性), 278
	290	member (openpyxl.pivot.table.MemberList 属性), 301
maximized (openpyxl.workbook.views.CustomWorkbookViewMemberList (openpyxl.pivot.table 中的类), 301max (openpyxl.chart.descriptors.NestedOverlap 属性), 属性), 356
maxLength (openpyxl.formatting.rule.DataBar 属性),
        257 maxRank (openpyxl.pivot.cache.OLAPSet 属性), 284 maxSubtotal (openpyxl.pivot.table.PivotField 属性),
        305 maxSubtotal (openpyxl.pivot.table.Reference 属性),
        310 maxVal (openpyxl.worksheet.filters.DynamicFilter 属
性), 377
maxValIso (openpyxl.worksheet.filters.DynamicFilter 属性), 377
maxValue (openpyxl.pivot.cache.SharedItems 属性),
        290 mdx (openpyxl.pivot.cache.CalculatedMember 属性),
        280 mdx (openpyxl.pivot.cache.Query 属性), 287 mdxSubqueries (openpyxl.pivot.table.TableDefinition 属性), 315
measure (openpyxl.pivot.cache.CacheHierarchy 属 memberName (openpyxl.pivot.cache.CalculatedMember 属性), 280
MemberProperty (openpyxl.pivot.table 中的类), 301 memberPropertyField	(openpyxl.pivot.cache.CacheField 属性), 276
members (openpyxl.pivot.table.PivotHierarchy 属性),
308
memberValueDatatype	(openpyxl.pivot.cache.CacheHierarchy 属性),
278
merge_cells()	(openpyxl.worksheet.worksheet.Worksheet 方法), 406
MergeCell (openpyxl.worksheet.merge 中的类), 383 mergeCell (openpyxl.worksheet.merge.MergeCells 属
性), 383
MergeCells (openpyxl.worksheet.merge 中的类), 383 merged_cell_ranges	(openpyxl.worksheet.worksheet.Worksheet 属性), 406
MergedCell (openpyxl.cell.cell 中的类), 121
MergedCellRange (openpyxl.worksheet.merge 中的
类), 383
mergeInterval	(openpyxl.workbook.views.CustomWorkbookView 属性), 356
mergeItem (openpyxl.pivot.table.TableDefinition 属
性), 315
meta (openpyxl.drawing.connector.Shape 属性), 201
MetaSerialisable (openpyxl.descriptors 中的类),
185
MetaStrict (openpyxl.descriptors 中的类), 185
min (openpyxl.worksheet.pagebreak.Break 属性), 388
min_col (openpyxl.chart.reference.Reference 属性),
        161 min_col (openpyxl.worksheet.cell_range.CellRange 属性), 364
min_column (openpyxl.worksheet.worksheet.Worksheet 属性), 406
min_row (openpyxl.chart.reference.Reference 属性),
        161 min_row (openpyxl.worksheet.cell_range.CellRange 属性), 364
mime_type (openpyxl.chartsheet.chartsheet.Chartsheet	性), 406
	属性), 173	minDate (openpyxl.pivot.cache.SharedItems 属性),
mime_type (openpyxl.comments.comment_sheet.CommentSheet 290
	属性), 182	minimized (openpyxl.workbook.views.BookView 属
mime_type (openpyxl.drawing.spreadsheet_drawing.SpreadsheetDrawing性), 355
	属性), 241	minimized (openpyxl.workbook.views.CustomWorkbookView
mime_type (openpyxl.pivot.cache.CacheDefinition 属	属性), 356
	性), 275	minLength (openpyxl.formatting.rule.DataBar 属性),
mime_type (openpyxl.pivot.record.RecordList 属性),	257
	297	MinMax (openpyxl.descriptors.base 中的类), 187
mime_type (openpyxl.pivot.table.TableDefinition 属 minorGridlines (openpyxl.chart.axis.DateAxis 属
	性), 315	性), 128
mime_type (openpyxl.workbook.external_link.external.ExternalLinkminorGridlines (openpyxl.chart.axis.NumericAxismin_row (openpyxl.worksheet.worksheet.Worksheet 属

属性), 345
mime_type (openpyxl.workbook.workbook.Workbook 属性), 361
mime_type (openpyxl.worksheet.table.Table 属性),
        396 mime_type (openpyxl.worksheet.worksheet.Worksheet 属性), 406
min (openpyxl.chart.axis.Scaling 属性), 131 min (openpyxl.chart.descriptors.NestedGapAmount 属性), 143
min (openpyxl.chart.descriptors.NestedOverlap 属性), 143
Min (openpyxl.descriptors.base 中的类), 187
min (openpyxl.descriptors.excel.Percentage 属性), 188 min (openpyxl.descriptors.excel.TextPoint 属性), 189 min (openpyxl.worksheet.dimensions.ColumnDimension 属性), 371
属性), 130
minorGridlines (openpyxl.chart.axis.SeriesAxis 属
性), 132
minorGridlines (openpyxl.chart.axis.TextAxis 属
性), 133
minorTickMark (openpyxl.chart.axis.DateAxis 属性),
        128 minorTickMark (openpyxl.chart.axis.NumericAxis 属
性), 130
minorTickMark (openpyxl.chart.axis.SeriesAxis 属
性), 132
minorTickMark (openpyxl.chart.axis.TextAxis 属性),
        133 minorTimeUnit (openpyxl.chart.axis.DateAxis 属性),
        128 minorUnit (openpyxl.chart.axis.DateAxis 属性), 128 minorUnit (openpyxl.chart.axis.NumericAxis 属性), 130
minRefreshableVersion	(openpyxl.pivot.cache.CacheDefinition 属性),
275
minRefreshableVersion	(openpyxl.pivot.table.TableDefinition 属性),
        315 minSubtotal (openpyxl.pivot.table.PivotField 属性),
        305 minSubtotal (openpyxl.pivot.table.Reference 属性),
        310 minus (openpyxl.chart.error_bar.ErrorBars 属性),
        144 minute (openpyxl.worksheet.filters.DateGroupItem 属性), 377
minValue (openpyxl.pivot.cache.SharedItems 属性),290
Missing (openpyxl.pivot.fields 中的类), 293missingCaption(open-pyxl.pivot.table.TableDefinition
315属性),missingItemsLimit(open-pyxl.pivot.cache.CacheDefinition
275属性),miter (openpyxl.drawing.line.LineProperties 属性),234
mpMap (openpyxl.pivot.cache.CacheField 属性), 277 mps (openpyxl.pivot.table.PivotHierarchy 属性), 309 mruColors (openpyxl.styles.colors.ColorList 属性), 326
MultiCellRange (openpyxl.worksheet.cell_range 中的类), 365
MultiLevelStrData (openpyxl.chart.data_source 中的类), 140
MultiLevelStrRef (openpyxl.chart.data_source 中的类), 140
multiLvlStrCache	(openpyxl.chart.data_source.MultiLevelStrRef
属性), 140
multiLvlStrRef	(openpyxl.chart.data_source.AxDataSource
属性), 139
multipleFieldFilters	(openpyxl.pivot.table.TableDefinition 属性),
315
multipleItemSelectionAllowed	(openpyxl.pivot.table.PivotField 属性), 305
multipleItemSelectionAllowed	(openpyxl.pivot.table.PivotHierarchy 属性), 309
MultiSequence (openpyxl.descriptors.sequence 中的
N        属性), 264 month (openpyxl.worksheet.filters.DateGroupItem 属n (openpyxl.pivot.cache.GroupItems 属性), 282 n (openpyxl.pivot.cache.PCDSDTCEntries 属性), 286 n (openpyxl.pivot.cache.SharedItems 属性), 290 n (openpyxl.pivot.record.Record 属性), 296 n (openpyxl.pivot.table.FieldItem 属性), 299 name (openpyxl.chart.pivot.PivotSource 属性), 155 name (openpyxl.chart.trendline.Trendline 属性), 171 name (openpyxl.drawing.effect.EffectContainer 属性),
204
name (openpyxl.drawing.geometry.GeomGuide 属性),
223
name (openpyxl.drawing.properties.NonVisualDrawingProps性), 377
move_range()
pyxl.worksheet.worksheet.Worksheet 法), 406
move_sheet()
pyxl.workbook.workbook.Workbook 法), 361
moveWithCells pyxl.worksheet.ole.ObjectAnchor
383(open方
(open方
 (open属性),mpFld (openpyxl.pivot.table.PivotFilter 属性), 307MMClips (openpyxl.packaging.extended.ExtendedPropertiesMultiSequencePart (openpyxl.descriptors.sequence 属性), 267	中的类), 190 modified (openpyxl.packaging.core.DocumentProperties类), 190
属性), 238
name (openpyxl.drawing.text.EmbeddedWAVAudioFile 属性), 246
name (openpyxl.drawing.text.GeomGuide 属性), 246 name (openpyxl.packaging.workbook.ChildSheet 属性),
        271 name (openpyxl.pivot.cache.CacheField 属性), 277 name (openpyxl.pivot.cache.CalculatedMember 属性),
        280 name (openpyxl.pivot.cache.LevelGroup 属性), 283 name (openpyxl.pivot.cache.MeasureGroup 属性), 284 name (openpyxl.pivot.cache.PageItem 属性), 286
        name (openpyxl.pivot.cache.PivotDimension 属性),
        286 name (openpyxl.pivot.cache.RangeSet 属性), 288 name (openpyxl.pivot.cache.WorksheetSource 属性),
        290 name (openpyxl.pivot.table.DataField 属性), 299 name (openpyxl.pivot.table.MemberProperty 属性),
        301 name (openpyxl.pivot.table.PageField 属性), 302 name (openpyxl.pivot.table.PivotField 属性), 305 name (openpyxl.pivot.table.PivotFilter 属性), 307 name (openpyxl.pivot.table.PivotTableStyle 属性), 309 name (openpyxl.pivot.table.TableDefinition 属性), 315 name (openpyxl.styles.fonts.Font 属性), 330 name (openpyxl.styles.named_styles.NamedStyle 属
性), 333
name (openpyxl.styles.table.TableStyle 属性), 337 name (openpyxl.workbook.defined_name.DefinedName 属性), 347
name (openpyxl.worksheet.scenario.Scenario 属性),
        393 name (openpyxl.worksheet.table.Table 属性), 396
        name (openpyxl.worksheet.table.TableColumn 属性),
        398 name (openpyxl.worksheet.table.TableStyleInfo 属性),
399
named_styles	(openpyxl.workbook.workbook.Workbook	属性), 361
NamedRangeException, 341
NamedStyle (openpyxl.styles.named_styles 中的类),
332
NamedStyleDescriptor (openpyxl.styles.styleable 中的类), 335
NamedStyleList (openpyxl.styles.named_styles 中的
类), 333
nameLen (openpyxl.pivot.table.MemberProperty 属
性), 301
names (openpyxl.styles.named_styles.NamedStyleList 属性), 334
namespace (openpyxl.descriptors.excel.Relation 属
性), 189
namespace (openpyxl.descriptors.serialisable.Serialisable 属性), 192
namespace (openpyxl.drawing.colors.ColorChoice 属
性), 192
namespace (openpyxl.drawing.colors.SchemeColor 属
性), 197
namespace (openpyxl.drawing.colors.SystemColor 属
name (openpyxl.workbook.external_link.external.ExternalDefinedNamenamespace (openpyxl.drawing.fill.Blip 属性), 213
	属性), 344	namespace (openpyxl.drawing.fill.GradientFillProperties
name (openpyxl.workbook.function_group.FunctionGroup	属性), 215性), 199

属性), 348
name (openpyxl.workbook.smart_tags.SmartTag 属
性), 354
name (openpyxl.workbook.views.CustomWorkbookView
属性), 356
name (openpyxl.worksheet.controls.Control 属性), 366 name (openpyxl.worksheet.custom.CustomProperty 属
性), 368
namespace (openpyxl.drawing.fill.GradientStop 属
性), 216
namespace (openpyxl.drawing.fill.LinearShadeProperties
属性), 217
namespace (openpyxl.drawing.fill.PathShadeProperties
属性), 217
namespace (openpyxl.drawing.fill.PatternFillProperties
属性), 218

namespace (openpyxl.drawing.fill.RelativeRect 属性),	248
	218	namespace (openpyxl.drawing.text.ParagraphProperties
namespace (openpyxl.drawing.fill.StretchInfoProperties	属性), 250
	属性), 220	namespace (openpyxl.drawing.text.RegularTextRun
namespace (openpyxl.drawing.geometry.GroupTransform2D 属性), 251
	属性), 224	namespace (openpyxl.drawing.text.RichTextProperties
namespace (openpyxl.drawing.geometry.Point2D 属	属性), 252
	性), 225	namespace (openpyxl.drawing.xdr.XDRPoint2D 属
namespace (openpyxl.drawing.geometry.PositiveSize2D	性), 254
	属性), 226	namespace (openpyxl.drawing.xdr.XDRPositiveSize2D
namespace (openpyxl.drawing.geometry.PresetGeometry2D 属性), 255
	属性), 226	namespace (openpyxl.drawing.xdr.XDRTransform2D
namespace (openpyxl.drawing.geometry.Shape3D 属 属性), 255
性), 228 namespace (openpyxl.packaging.core.DocumentProperties
namespace (openpyxl.drawing.geometry.Transform2D	属性), 265
	属性), 229	namespaced() (在 openpyxl.descriptors.namespace
namespace (openpyxl.drawing.graphic.GraphicData	模块中), 189
	属性), 230	namespaceUri	(open-
namespace (openpyxl.drawing.graphic.GraphicObject	pyxl.workbook.smart_tags.SmartTag 属
	属性), 231	性), 354
namespace (openpyxl.drawing.line.DashStop 属性), nested (openpyxl.descriptors.base.Typed 属性), 188
	232	Nested (openpyxl.descriptors.nested 中的类), 189
namespace (openpyxl.drawing.line.LineEndProperties nested (openpyxl.descriptors.nested.Nested 属性),
	属性), 233	189
namespace (openpyxl.drawing.line.LineProperties 属 NestedBool (openpyxl.descriptors.nested 中的类), 性), 234	190
namespace (openpyxl.drawing.picture.PictureLocking NestedDateTime (openpyxl.packaging.core 中的类),
	属性), 235	265
namespace (openpyxl.drawing.properties.GroupLocking NestedFloat (openpyxl.descriptors.nested 中的类), 属性), 237	190
namespace (openpyxl.drawing.relation.ChartRelation NestedGapAmount (openpyxl.chart.descriptors 中的属性), 239	类), 143
namespace (openpyxl.drawing.text.CharacterProperties NestedInteger (openpyxl.descriptors.nested 中的属性), 245	类), 190
namespace (openpyxl.drawing.text.Font 属性), 246 NestedMinMax (openpyxl.descriptors.nested 中的类), namespace (openpyxl.drawing.text.Hyperlink 属性), 190
	247	NestedNoneSet (openpyxl.descriptors.nested 中的
namespace (openpyxl.drawing.text.LineBreak 属性),	类), 190
247 NestedOverlap (openpyxl.chart.descriptors 中的类),
namespace (openpyxl.drawing.text.ListStyle 属性),	143
248 NestedSequence (openpyxl.descriptors.sequence 中的
namespace (openpyxl.drawing.text.Paragraph 属性),	类), 191

NestedSet (openpyxl.descriptors.nested 中的类), 190
NestedString (openpyxl.descriptors.nested 中的类),
190
NestedText (openpyxl.descriptors.nested 中的类),
190
NestedValue (openpyxl.descriptors.nested 中的类),
        190 noAdjustHandles (openpyxl.drawing.fill.Blip 属性),
213
noAdjustHandles	(openpyxl.drawing.picture.PictureLocking 属性), 235
noAdjustHandles	(openpyxl.drawing.properties.GroupLocking
属性), 237
noAutofit (openpyxl.drawing.text.RichTextProperties 属性), 252
noChangeArrowheads (openpyxl.drawing.fill.Blip 属
性), 214
noChangeArrowheads	(openpyxl.drawing.picture.PictureLocking 属性), 236
noChangeArrowheads	(openpyxl.drawing.properties.GroupLocking
属性), 237
noChangeAspect (openpyxl.drawing.fill.Blip 属性),
214
noChangeAspect	(openpyxl.drawing.graphic.GraphicFrameLocking
属性), 230
noChangeAspect	(openpyxl.drawing.picture.PictureLocking 属性), 236
noChangeAspect	(openpyxl.drawing.properties.GroupLocking
属性), 237
noChangeShapeType (openpyxl.drawing.fill.Blip 属
性), 214
noChangeShapeType	(openpyxl.drawing.picture.PictureLocking 属性), 236
noChangeShapeType	(openpyxl.drawing.properties.GroupLocking
属性), 237
noCrop (openpyxl.drawing.picture.PictureLocking 属
性), 236
noDrilldown (openpyxl.drawing.graphic.GraphicFrameLocking 属性), 231
noEditPoints (openpyxl.drawing.fill.Blip 属性), 214 noEditPoints	(openpyxl.drawing.picture.PictureLocking 属性), 236
noEditPoints	(openpyxl.drawing.properties.GroupLocking
属性), 237
noEndCap (openpyxl.chart.error_bar.ErrorBars 属
性), 144
noFill (openpyxl.chart.shapes.GraphicalProperties 属性), 166
noFill (openpyxl.drawing.line.LineProperties 属性),
        234 noFill (openpyxl.drawing.text.CharacterProperties 属性), 245
noGrp (openpyxl.drawing.fill.Blip 属性), 214 noGrp (openpyxl.drawing.graphic.GraphicFrameLocking 属性), 231
noGrp (openpyxl.drawing.picture.PictureLocking 属
性), 236
noGrp (openpyxl.drawing.properties.GroupLocking 属
性), 237
noMove (openpyxl.drawing.fill.Blip 属性), 214
noMove (openpyxl.drawing.graphic.GraphicFrameLocking 属性), 231
noMove (openpyxl.drawing.picture.PictureLocking 属
性), 236
noMove (openpyxl.drawing.properties.GroupLocking 属性), 237
noMultiLvlLbl (openpyxl.chart.axis.TextAxis 属性),
133
nonAutoSortDefault	(openpyxl.pivot.table.PivotField 属性), 305
NoneSet (openpyxl.descriptors.base 中的类), 187
NonVisualConnectorProperties	(openpyxl.drawing.connector 中的类), 201 NonVisualDrawingProps	(openpyxl.drawing.properties 中的类), 238
NonVisualDrawingShapeProps	(openpyxl.drawing.properties 中的类), 238
NonVisualGraphicFrame (openpyxl.drawing.graphic 中的类), 231
NonVisualGraphicFrameProperties	(openpyxl.drawing.graphic 中的类), 232
NonVisualGroupDrawingShapeProps	(openpyxl.drawing.properties 中的类), 239
NonVisualGroupShape (openpyxl.drawing.properties 中的类), 239
NonVisualPictureProperties	(openpyxl.drawing.picture 中的类), 234
nonVisualProperties	(openpyxl.drawing.graphic.GroupShape 属性),
        231 noProof (openpyxl.drawing.text.CharacterProperties 属性), 245
noResize (openpyxl.drawing.fill.Blip 属性), 214 noSelect (openpyxl.drawing.properties.GroupLocking 属性), 237
Notes (openpyxl.packaging.extended.ExtendedProperties 属性), 267
noUngrp (openpyxl.drawing.properties.GroupLocking 属性), 237
NUMBER (openpyxl.formula.tokenizer.Token 属性), 260
Number (openpyxl.pivot.fields 中的类), 294 number_format (openpyxl.cell.read_only.EmptyCell 属性), 122
number_format	(openpyxl.cell.read_only.ReadOnlyCell 属性),
122
number_format	(openpyxl.styles.named_styles.NamedStyle 属性), 333
number_format	(openpyxl.styles.styleable.StyleableObject 属性), 336
noResize (openpyxl.drawing.graphic.GraphicFrameLockingNumberFormatDescriptor	(open属性), 231	pyxl.chart.descriptors 中的类), 143
noResize (openpyxl.drawing.picture.PictureLocking NumberFormatDescriptor (openpyxl.styles.numbers 属性), 236	中的类), 334
noResize (openpyxl.drawing.properties.GroupLocking NumberFormatDescriptor (openpyxl.styles.styleable 属性), 237	中的类), 335
norm (openpyxl.drawing.geometry.Backdrop 属性), NumberFormatList (openpyxl.styles.numbers 中的
	221	类), 334
normalizeH (openpyxl.drawing.text.CharacterPropertiesnumberStoredAsText	(open属性), 245	pyxl.worksheet.errors.IgnoredError 属
normAutofit (openpyxl.drawing.text.RichTextProperties	性), 375
	属性), 252	NumberValueDescriptor	(open-
noRot (openpyxl.drawing.fill.Blip 属性), 214 pyxl.chart.data_source 中的类), 142 noRot (openpyxl.drawing.picture.PictureLocking 属 numCache (openpyxl.chart.data_source.NumRef 属
	性), 236	性), 141
noRot (openpyxl.drawing.properties.GroupLocking 属 numCol (openpyxl.drawing.text.RichTextProperties 属
	性), 237	性), 252
noSelect (openpyxl.drawing.fill.Blip 属性), 214 NumData (openpyxl.chart.data_source 中的类), 140 noSelect (openpyxl.drawing.graphic.GraphicFrameLockingNumDataSource (openpyxl.chart.data_source 中的属性), 231	类), 141
noSelect (openpyxl.drawing.picture.PictureLocking NumericAxis (openpyxl.chart.axis 中的类), 129
	属性), 236	numFmt (openpyxl.chart.axis.DateAxis 属性), 128NumberFormat (openpyxl.styles.numbers 中的类), 334

numFmt (openpyxl.chart.axis.NumericAxis 属性), 130 numFmt (openpyxl.chart.axis.SeriesAxis 属性), 132 numFmt (openpyxl.chart.axis.TextAxis 属性), 133 NumFmt (openpyxl.chart.data_source 中的类), 141 numFmt (openpyxl.chart.label.DataLabel 属性), 144 numFmt (openpyxl.chart.label.DataLabelList 属性),
        145 numFmt (openpyxl.chart.trendline.TrendlineLabel 属
性), 172
numFmt (openpyxl.styles.differential.DifferentialStyle 属性), 326
numFmt (openpyxl.styles.numbers.NumberFormatList 属性), 334
numFmtId (openpyxl.pivot.cache.CacheField 属性),
        277 numFmtId (openpyxl.pivot.table.DataField 属性), 299 numFmtId (openpyxl.pivot.table.PivotField 属性), 305 numFmtId (openpyxl.styles.cell_style.CellStyle 属性),
        324 numFmtId (openpyxl.styles.cell_style.StyleArray 属
性), 324
numFmtId (openpyxl.styles.numbers.NumberFormat 属性), 334
numFmtId (openpyxl.worksheet.scenario.InputCells 属
性), 393
numFmts (openpyxl.styles.stylesheet.Stylesheet 属性),
        337 numLit (openpyxl.chart.data_source.AxDataSource 属性), 140
numLit (openpyxl.chart.data_source.NumDataSource 属性), 141
NumRef (openpyxl.chart.data_source 中的类), 141 numRef (openpyxl.chart.data_source.AxDataSource 属性), 140
numRef (openpyxl.chart.data_source.NumDataSource 属性), 141
NumVal (openpyxl.chart.data_source 中的类), 141 nvGrpSpPr (openpyxl.drawing.graphic.GroupShape 属
性), 231
nvPicPr (openpyxl.drawing.picture.PictureFrame 属
性), 235
nvSpPr (openpyxl.drawing.connector.Shape 属性), 201
O
ObjectAnchor (openpyxl.worksheet.ole 中的类), 383 ObjectPr (openpyxl.worksheet.ole 中的类), 384 objectPr (openpyxl.worksheet.ole.OleObject 属性),
        385 objects (openpyxl.chartsheet.protection.ChartsheetProtection 属性), 176
objects (openpyxl.worksheet.protection.SheetProtection 属性), 392
oddFooter (openpyxl.worksheet.header_footer.HeaderFooter 属性), 381
oddHeader (openpyxl.worksheet.header_footer.HeaderFooter 属性), 381
off (openpyxl.drawing.geometry.GroupTransform2D 属性), 224
off (openpyxl.drawing.geometry.Transform2D 属性),
        229 off (openpyxl.drawing.xdr.XDRTransform2D 属性),
        255 offset (openpyxl.pivot.table.PivotArea 属性), 303 offset() (openpyxl.cell.cell.Cell 方法), 120 ofPieChart (openpyxl.chart.plotarea.PlotArea 属性),
        157 ofPieType (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
OLAPSet (openpyxl.pivot.cache 中的类), 284
OLAPSets (openpyxl.pivot.cache 中的类), 284 OleObject (openpyxl.worksheet.ole 中的类), 384 oleObject (openpyxl.worksheet.ole.OleObjects 属性),
385

nvCxnSpPr (openpyxl.drawing.connector.ConnectorShapeOleObjects (openpyxl.worksheet.ole 中的类), 385
	属性), 200	oleSize (openpyxl.packaging.workbook.WorkbookPackage
nvGraphicFramePr	(open-	属性), 273
pyxl.drawing.graphic.GraphicFrame 属 oleUpdate (openpyxl.worksheet.ole.OleObject 属性),
	性), 230	385
OneCellAnchor	(open- openpyxl.chart.scatter_chart (模块), 161
pyxl.drawing.spreadsheet_drawing 中的 openpyxl.chart.series (模块), 162
	类), 241	openpyxl.chart.series_factory (模块), 165
oneCellAnchor	(open- openpyxl.chart.shapes (模块), 166
pyxl.drawing.spreadsheet_drawing.SpreadsheetDrawingopenpyxl.chart.stock_chart (模块), 167
	属性), 241	openpyxl.chart.surface_chart (模块), 168
oneField (openpyxl.pivot.cache.CacheHierarchy 属 openpyxl.chart.text (模块), 169
	性), 278	openpyxl.chart.title (模块), 170
onlySync (openpyxl.workbook.views.CustomWorkbookViewopenpyxl.chart.trendline (模块), 171
	属性), 357	openpyxl.chart.updown_bars (模块), 172
OP_IN (openpyxl.formula.tokenizer.Token 属性), 260 openpyxl.chartsheet (模块), 173
OP_POST (openpyxl.formula.tokenizer.Token 属性), openpyxl.chartsheet.chartsheet (模块), 173
	260	openpyxl.chartsheet.custom (模块), 174
OP_PRE (openpyxl.formula.tokenizer.Token 属性), 260 openpyxl.chartsheet.properties (模块), 175
OPEN (openpyxl.formula.tokenizer.Token 属性), 260	openpyxl.chartsheet.protection (模块), 175
openpyxl (模块), 119	openpyxl.chartsheet.publish (模块), 176
openpyxl.cell (模块), 119	openpyxl.chartsheet.relation (模块), 177
openpyxl.cell.cell (模块), 119	openpyxl.chartsheet.views (模块), 180
openpyxl.cell.read_only (模块), 121	openpyxl.comments (模块), 180
openpyxl.cell.text (模块), 122	openpyxl.comments.author (模块), 180
openpyxl.chart (模块), 125	openpyxl.comments.comment_sheet (模块), 181
openpyxl.chart.area_chart (模块), 125	openpyxl.comments.comments (模块), 183
openpyxl.chart.axis (模块), 127	openpyxl.comments.shape_writer (模块), 184
openpyxl.chart.bar_chart (模块), 134	openpyxl.compat (模块), 184
openpyxl.chart.bubble_chart (模块), 136	openpyxl.compat.abc (模块), 184
openpyxl.chart.chartspace (模块), 137	openpyxl.compat.accumulate (模块), 184
openpyxl.chart.data_source (模块), 139	openpyxl.compat.numbers (模块), 185
openpyxl.chart.descriptors (模块), 143	openpyxl.compat.singleton (模块), 185
openpyxl.chart.error_bar (模块), 143	openpyxl.compat.strings (模块), 185
openpyxl.chart.label (模块), 144	openpyxl.descriptors (模块), 185
openpyxl.chart.layout (模块), 146	openpyxl.descriptors.base (模块), 185
openpyxl.chart.legend (模块), 147	openpyxl.descriptors.excel (模块), 188
openpyxl.chart.line_chart (模块), 149	openpyxl.descriptors.namespace (模块), 189
openpyxl.chart.marker (模块), 150	openpyxl.descriptors.nested (模块), 189
openpyxl.chart.picture (模块), 152	openpyxl.descriptors.sequence (模块), 190
openpyxl.chart.pie_chart (模块), 152	openpyxl.descriptors.serialisable (模块), 191
openpyxl.chart.pivot (模块), 155	openpyxl.descriptors.slots (模块), 192
openpyxl.chart.plotarea (模块), 156	openpyxl.drawing (模块), 192
openpyxl.chart.print_settings (模块), 159	openpyxl.drawing.colors (模块), 192
openpyxl.chart.radar_chart (模块), 160	openpyxl.drawing.connector (模块), 200
openpyxl.chart.reader (模块), 160	openpyxl.drawing.drawing (模块), 202
openpyxl.chart.reference (模块), 161	openpyxl.drawing.effect (模块), 203

openpyxl.drawing.fill (模块), 212	openpyxl.styles.fills (模块), 327
openpyxl.drawing.geometry (模块), 221	openpyxl.styles.fonts (模块), 329
openpyxl.drawing.graphic (模块), 230	openpyxl.styles.named_styles (模块), 332
openpyxl.drawing.image (模块), 232	openpyxl.styles.numbers (模块), 334
openpyxl.drawing.line (模块), 232	openpyxl.styles.protection (模块), 334
openpyxl.drawing.picture (模块), 234	openpyxl.styles.proxy (模块), 335
openpyxl.drawing.properties (模块), 237	openpyxl.styles.styleable (模块), 335
openpyxl.drawing.relation (模块), 239	openpyxl.styles.stylesheet (模块), 336
openpyxl.drawing.spreadsheet_drawing (模块), openpyxl.styles.table (模块), 337
	240	openpyxl.utils (模块), 338
openpyxl.drawing.text (模块), 242	openpyxl.utils.bound_dictionary (模块), 338
openpyxl.drawing.xdr (模块), 254	openpyxl.utils.cell (模块), 338
openpyxl.formatting (模块), 255	openpyxl.utils.dataframe (模块), 339
openpyxl.formatting.formatting (模块), 256	openpyxl.utils.datetime (模块), 340
openpyxl.formatting.rule (模块), 256	openpyxl.utils.escape (模块), 340
openpyxl.formula (模块), 260	openpyxl.utils.exceptions (模块), 340
openpyxl.formula.tokenizer (模块), 260	openpyxl.utils.formulas (模块), 341
openpyxl.formula.translate (模块), 262	openpyxl.utils.indexed_list (模块), 341
openpyxl.packaging (模块), 263	openpyxl.utils.inference (模块), 342
openpyxl.packaging.core (模块), 264	openpyxl.utils.protection (模块), 342
openpyxl.packaging.extended (模块), 265	openpyxl.utils.units (模块), 342
openpyxl.packaging.interface (模块), 268	openpyxl.workbook (模块), 343
openpyxl.packaging.manifest (模块), 268	openpyxl.workbook.child (模块), 346
openpyxl.packaging.relationship (模块), 269	openpyxl.workbook.defined_name (模块), 346
openpyxl.packaging.workbook (模块), 271	openpyxl.workbook.external_link (模块), 343
openpyxl.pivot (模块), 274	openpyxl.workbook.external_link.external (模
openpyxl.pivot.cache (模块), 274	块), 344
openpyxl.pivot.fields (模块), 291	openpyxl.workbook.external_reference (模块),
openpyxl.pivot.record (模块), 296	348
openpyxl.pivot.table (模块), 297	openpyxl.workbook.function_group (模块), 348
openpyxl.reader (模块), 318	openpyxl.workbook.properties (模块), 349
openpyxl.reader.drawings (模块), 318	openpyxl.workbook.protection (模块), 352
openpyxl.reader.excel (模块), 318	openpyxl.workbook.smart_tags (模块), 354
openpyxl.reader.strings (模块), 319	openpyxl.workbook.views (模块), 355
openpyxl.reader.workbook (模块), 319	openpyxl.workbook.web (模块), 358
openpyxl.styles (模块), 320	openpyxl.workbook.workbook (模块), 359
openpyxl.styles.alignment (模块), 320	openpyxl.worksheet (模块), 362
openpyxl.styles.borders (模块), 321	openpyxl.worksheet.cell_range (模块), 362
openpyxl.styles.builtins (模块), 323	openpyxl.worksheet.cell_watch (模块), 365
openpyxl.styles.cell_style (模块), 323	openpyxl.worksheet.controls (模块), 366
openpyxl.styles.colors (模块), 325	openpyxl.worksheet.copier (模块), 367
openpyxl.styles.differential (模块), 326	openpyxl.worksheet.custom (模块), 367
openpyxl.worksheet.datavalidation (模块), 368 ORIENTATION_LANDSCAPE	(open-
openpyxl.worksheet.dimensions (模块), 370	pyxl.worksheet.worksheet.Worksheet 属
openpyxl.worksheet.drawing (模块), 374	性), 403
openpyxl.worksheet.errors (模块), 374	ORIENTATION_PORTRAIT	(open-
openpyxl.worksheet.filters (模块), 375	pyxl.worksheet.worksheet.Worksheet 属
openpyxl.worksheet.header_footer (模块), 381	性), 403
openpyxl.worksheet.hyperlink (模块), 382	OuterShadow (openpyxl.drawing.effect 中的类), 208
openpyxl.worksheet.merge (模块), 383	outerShdw (openpyxl.drawing.effect.EffectList 属性),
openpyxl.worksheet.ole (模块), 383	204
openpyxl.worksheet.page (模块), 385	outline (openpyxl.cell.text.InlineFont 属性), 123
openpyxl.worksheet.pagebreak (模块), 388	outline (openpyxl.pivot.table.PivotArea 属性), 303
openpyxl.worksheet.picture (模块), 389	outline (openpyxl.pivot.table.PivotField 属性), 305
openpyxl.worksheet.properties (模块), 389	outline (openpyxl.pivot.table.PivotHierarchy 属性),
openpyxl.worksheet.protection (模块), 391	309
openpyxl.worksheet.related (模块), 392	outline (openpyxl.pivot.table.TableDefinition 属性),
openpyxl.worksheet.scenario (模块), 393	315
openpyxl.worksheet.smart_tag (模块), 394	outline (openpyxl.styles.borders.Border 属性), 322
openpyxl.worksheet.table (模块), 395	outline (openpyxl.styles.fonts.Font 属性), 330
openpyxl.worksheet.views (模块), 400	Outline (openpyxl.worksheet.properties 中的类), 389
openpyxl.worksheet.worksheet (模块), 403	outline_level	(open-
openpyxl.writer (模块), 407	pyxl.worksheet.dimensions.Dimension
openpyxl.writer.excel (模块), 407	属性), 371
openpyxl.writer.theme (模块), 408	outlineData (openpyxl.pivot.table.TableDefinition
openpyxl.xml (模块), 408	属性), 315
openpyxl.xml.constants (模块), 409	outlineLevel	(open-
openpyxl.xml.functions (模块), 409	pyxl.worksheet.dimensions.Dimension
OPERAND (openpyxl.formula.tokenizer.Token 属性),	属性), 371
	260	outlineLevelCol	(open-
operator (openpyxl.formatting.rule.Rule 属性), 259 pyxl.worksheet.dimensions.SheetFormatProperties operator (openpyxl.worksheet.datavalidation.DataValidation 属性), 373
	属性), 369	outlineLevelRow	(open-
operator (openpyxl.worksheet.filters.CustomFilter	pyxl.worksheet.dimensions.SheetFormatProperties
	属性), 376	属性), 373
optimizeMemory	(open- outlinePr (openpyxl.worksheet.properties.WorksheetProperties
	pyxl.pivot.cache.CacheDefinition 属性),	属性), 390
	275	overlap (openpyxl.chart.bar_chart.BarChart 属性),
order (openpyxl.chart.series.Series 属性), 163	134
order (openpyxl.chart.series.XYSeries 属性), 165	overlay (openpyxl.chart.legend.Legend 属性), 148
order (openpyxl.chart.trendline.Trendline 属性), 171 overlay (openpyxl.chart.title.Title 属性), 170
orientation (openpyxl.chart.axis.Scaling 属性), 131 Override (openpyxl.packaging.manifest 中的类), 269
orientation (openpyxl.worksheet.page.PrintPageSetupOverride (openpyxl.packaging.manifest.Manifest 属
	属性), 387	性), 268
P	性), 316
p (openpyxl.chart.text.RichText 属性), 169	pageWrap (openpyxl.pivot.table.TableDefinition 属
Page (openpyxl.pivot.cache 中的类), 286	性), 316
page_breaks (openpyxl.worksheet.worksheet.WorksheetPane (openpyxl.worksheet.views 中的类), 400
	属性), 406	pane (openpyxl.worksheet.views.Selection 属性), 401
PageBreak() (在 openpyxl.worksheet.pagebreak 模块 pane (openpyxl.worksheet.views.SheetView 属性), 401
	中), 388	panose (openpyxl.drawing.text.Font 属性), 246
PageField (openpyxl.pivot.table 中的类), 301 paperHeight (openpyxl.worksheet.page.PrintPageSetup pageFields (openpyxl.pivot.table.TableDefinition 属 属性), 387
	性), 315	paperSize (openpyxl.worksheet.page.PrintPageSetup
PageItem (openpyxl.pivot.cache 中的类), 286	属性), 387
pageItem (openpyxl.pivot.cache.Page 属性), 286	PAPERSIZE_A3	(open-
PageMargins (openpyxl.chart.print_settings 中的	pyxl.worksheet.worksheet.Worksheet 属
	类), 159	性), 403
pageMargins (openpyxl.chart.print_settings.PrintSettingsPAPERSIZE_A4	(open属性), 159	pyxl.worksheet.worksheet.Worksheet 属
pageMargins (openpyxl.chartsheet.chartsheet.Chartsheet	性), 403
        属性), 174 PAPERSIZE_A4_SMALL (openpageMargins (openpyxl.chartsheet.custom.CustomChartsheetViewpyxl.worksheet.worksheet.Worksheet 属属性), 174	性), 403
PageMargins (openpyxl.worksheet.page 中的类), 385 PAPERSIZE_A5 (openpageOrder (openpyxl.worksheet.page.PrintPageSetup pyxl.worksheet.worksheet.Worksheet 属属性), 387	性), 403
pageOverThenDown	(open- PAPERSIZE_EXECUTIVE	(openpyxl.pivot.table.TableDefinition 属性),	pyxl.worksheet.worksheet.Worksheet 属
	316	性), 403
Pages (openpyxl.packaging.extended.ExtendedPropertiesPAPERSIZE_LEDGER	(open属性), 267	pyxl.worksheet.worksheet.Worksheet 属
pages (openpyxl.pivot.cache.Consolidation 属性),	性), 403
        280 PAPERSIZE_LEGAL (openpageSetup (openpyxl.chart.print_settings.PrintSettings pyxl.worksheet.worksheet.Worksheet 属属性), 160	性), 403
pageSetup (openpyxl.chartsheet.chartsheet.Chartsheet PAPERSIZE_LETTER	(open属性), 174	pyxl.worksheet.worksheet.Worksheet 属
pageSetup (openpyxl.chartsheet.custom.CustomChartsheetView 性), 403
        属性), 174 PAPERSIZE_LETTER_SMALL (openpageSetUpPr (openpyxl.worksheet.properties.WorksheetPropertiespyxl.worksheet.worksheet.Worksheet 属属性), 390	性), 403
PageSetupProperties (open- PAPERSIZE_STATEMENT (openpyxl.worksheet.properties 中的类), 389 pyxl.worksheet.worksheet.Worksheet 属 pageStyle (openpyxl.pivot.table.TableDefinition 属 性), 403
	PAPERSIZE_TABLOID	(open-
	pyxl.worksheet.worksheet.Worksheet 属	269
	性), 403	path (openpyxl.pivot.cache.CacheDefinition 属性),
paperWidth (openpyxl.worksheet.page.PrintPageSetup	275
属性), 387
par (openpyxl.pivot.cache.FieldGroup 属性), 281 Paragraph (openpyxl.drawing.text 中的类), 248path (openpyxl.pivot.record.RecordList 属性), 297 path (openpyxl.pivot.table.TableDefinition 属性), 316 path (openpyxl.workbook.external_link.external.ExternalLinkParagraphProperties (openpyxl.drawing.text 中的	属性), 345
	类), 249	path (openpyxl.workbook.workbook.Workbook 属性),
paragraphs (openpyxl.chart.text.RichText 属性), 169	361
Paragraphs (openpyxl.packaging.extended.ExtendedPropertiespath (openpyxl.worksheet.table.Table 属性), 396
属性), 267
PAREN (openpyxl.formula.tokenizer.Token 属性), 260 parent (openpyxl.cell.cell.Cell 属性), 121 parent (openpyxl.cell.read_only.ReadOnlyCell 属
        性), 122 parent (openpyxl.comments.comments.Comment 属
性), 183
parent (openpyxl.pivot.cache.CalculatedMember 属
性), 280
parent (openpyxl.pivot.cache.PCDKPI 属性), 285 parent (openpyxl.styles.styleable.StyleableObject 属
性), 336
parentSet (openpyxl.pivot.cache.CacheHierarchy 属
性), 278
parse() (openpyxl.reader.workbook.WorkbookParser
方法), 320Path2D (openpyxl.drawing.geometry 中的类), 225
Path2DList (openpyxl.drawing.geometry 中的类),
225
pathLst (openpyxl.drawing.geometry.CustomGeometry2D
属性), 223
PathShadeProperties (openpyxl.drawing.fill 中的
类), 217
pattern (openpyxl.descriptors.excel.Base64Binary
属性), 188
pattern (openpyxl.descriptors.excel.CellRange 属
性), 188
pattern (openpyxl.descriptors.excel.Guid 属性), 188 pattern (openpyxl.descriptors.excel.HexBinary 属
性), 188
pattern (openpyxl.descriptors.excel.Percentage 属
性), 188PartName (openpyxl.drawing.spreadsheet_drawing.SpreadsheetDrawingpattern (openpyxl.descriptors.excel.UniversalMeasure 属性), 241	属性), 189
PartName (openpyxl.packaging.manifest.Override 属 PatternFill (openpyxl.styles.fills 中的类), 328
	性), 269	PatternFillProperties (openpyxl.drawing.fill 中的
path (openpyxl.comments.comment_sheet.CommentSheet	类), 217
	属性), 182	patternType (openpyxl.styles.fills.PatternFill 属性),
path (openpyxl.drawing.fill.GradientFillProperties 属	329
	性), 215	pattFill (openpyxl.chart.shapes.GraphicalProperties
path (openpyxl.drawing.fill.PathShadeProperties 属	属性), 166
	性), 217	pattFill (openpyxl.drawing.line.LineProperties 属
path (openpyxl.drawing.geometry.Path2DList 属性),	性), 234
        225	pattFill (openpyxl.drawing.text.CharacterProperties path (openpyxl.drawing.image.Image 属性), 232	属性), 245
path (openpyxl.drawing.spreadsheet_drawing.SpreadsheetDrawingPCDKPI (openpyxl.pivot.cache 中的类), 285
	属性), 242	PCDSDTCEntries (openpyxl.pivot.cache 中的类), 285
path (openpyxl.packaging.manifest.Manifest 属性), percent (openpyxl.formatting.rule.IconSet 属性),
258
percent (openpyxl.formatting.rule.Rule 属性), 259 percent (openpyxl.worksheet.filters.Top10 属性), 380 Percentage (openpyxl.descriptors.excel 中的类), 188 period (openpyxl.chart.trendline.Trendline 属性),
171
personalView	(open-
pyxl.workbook.views.CustomWorkbookView 属性), 357
phonetic (openpyxl.cell.text.Text 属性), 125 phoneticPr (openpyxl.cell.text.Text 属性), 125 PhoneticProperties (openpyxl.cell.text 中的类),
123
PhoneticProperties (openpyxl.cell.text.Text 属性), 124
PhoneticText (openpyxl.cell.text 中的类), 124 pic (openpyxl.drawing.graphic.GroupShape 属性),
231163
pictureStackUnit	(open-
pyxl.chart.picture.PictureOptions 属性),
152
pie3DChart (openpyxl.chart.plotarea.PlotArea 属性), 158
PieChart (openpyxl.chart.pie_chart 中的类), 153 pieChart (openpyxl.chart.plotarea.PlotArea 属性), 158
PieChart3D (openpyxl.chart.pie_chart 中的类), 153 pitchFamily (openpyxl.drawing.text.Font 属性), 246 pivot (openpyxl.formatting.formatting.ConditionalFormatting
属性), 256
pivot (openpyxl.styles.table.TableStyle 属性), 337
pivot_caches	(open-
pyxl.packaging.workbook.WorkbookPackage
属性), 273
pivot_caches	(open-pic (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor	pyxl.reader.workbook.WorkbookParser 属性), 240	属性), 320
pic (openpyxl.drawing.spreadsheet_drawing.OneCellAnchorpivotArea (openpyxl.pivot.cache.CalculatedItem 属属性), 241	性), 279
pic (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchorPivotArea (openpyxl.pivot.table 中的类), 302
        属性), 242	pivotArea (openpyxl.pivot.table.AutoSortScope 属 picLocks (openpyxl.drawing.picture.NonVisualPictureProperties性), 297
属性), 235
picture (openpyxl.chartsheet.chartsheet.Chartsheet
属性), 174
pictureFormat	(open-
pyxl.chart.picture.PictureOptions 属性),
152
PictureFrame (openpyxl.drawing.picture 中的类),
235
PictureLocking (openpyxl.drawing.picture 中的类), 235
PictureNonVisual (openpyxl.drawing.picture 中的
类), 236
pictureOptions (openpyxl.chart.marker.DataPoint
属性), 151
PictureOptions (openpyxl.chart.picture 中的类),
152
pictureOptions (openpyxl.chart.series.Series 属性),pivotArea (openpyxl.pivot.table.ChartFormat 属性),
297
pivotArea (openpyxl.pivot.table.Format 属性), 300 pivotAreas (openpyxl.pivot.table.ConditionalFormat
属性), 298
pivotButton (openpyxl.styles.cell_style.CellStyle 属
性), 324
pivotButton (openpyxl.styles.cell_style.StyleArray
属性), 324
pivotButton (openpyxl.styles.styleable.StyleableObject
属性), 336
PivotCache (openpyxl.packaging.workbook 中的类),
272
pivotCaches (openpyxl.packaging.workbook.WorkbookPackage
属性), 273
PivotDimension (openpyxl.pivot.cache 中的类), 286
PivotField (openpyxl.pivot.table 中的类), 303pivotFields (openpyxl.pivot.table.TableDefinition pos (openpyxl.drawing.geometry.ConnectionSite 属属性), 316	性), 222
PivotFilter (openpyxl.pivot.table 中的类), 306	pos (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor PivotFilters (openpyxl.pivot.table 中的类), 308	属性), 240
pivotFmts (openpyxl.chart.chartspace.ChartContainer pos (openpyxl.drawing.text.TabStop 属性), 254
属性), 137
PivotFormat (openpyxl.chart.pivot 中的类), 155
pivotHierarchies	(open-
pyxl.pivot.table.TableDefinition 属性), 316
PivotHierarchy (openpyxl.pivot.table 中的类), 308 pivotSource (openpyxl.chart.chartspace.ChartSpace
属性), 138
PivotSource (openpyxl.chart.pivot 中的类), 155position (openpyxl.chart.legend.Legend 属性), 148 position (openpyxl.styles.fills.Stop 属性), 329
PositiveSize2D (openpyxl.drawing.geometry 中的
类), 226
pPos (openpyxl.pivot.table.MemberProperty 属性),
301
pPr (openpyxl.drawing.text.Paragraph 属性), 248 pPr (openpyxl.drawing.text.TextField 属性), 254
preferRelativeResize	(open-pivotTables (openpyxl.worksheet.protection.SheetProtection	pyxl.drawing.picture.NonVisualPictureProperties
属性), 392
PivotTableStyle (openpyxl.pivot.table 中的类), 309 pivotTableStyle	(open-
pyxl.pivot.table.TableDefinition 属性),
316
pivotTableStyleInfo	(open-
pyxl.pivot.table.TableDefinition 属性),
        316 pixels_to_EMU() (在 openpyxl.utils.units 模块中),
        343 pixels_to_points() (在 openpyxl.utils.units 模块
中), 343
plain (openpyxl.cell.text.Text 属性), 125 pLen (openpyxl.pivot.table.MemberProperty 属性),
301
plotArea (openpyxl.chart.chartspace.ChartContainer
属性), 137
PlotArea (openpyxl.chart.plotarea 中的类), 156属性), 235
PresentationFormat	(open-
pyxl.packaging.extended.ExtendedProperties
属性), 267
preserveFormatting	(open-
pyxl.pivot.table.TableDefinition 属性),
316
preset (openpyxl.drawing.fill.PatternFillProperties
属性), 218
PresetGeometry2D (openpyxl.drawing.geometry 中的
类), 226
PresetShadowEffect (openpyxl.drawing.effect 中的
类), 209
PresetTextShape (openpyxl.drawing.text 中的类),
251
print_area (openpyxl.worksheet.worksheet.Worksheet
属性), 406
print_title_cols	(open-plotVisOnly (openpyxl.chart.chartspace.ChartContainer	pyxl.worksheet.worksheet.Worksheet 属
	属性), 137	性), 406
plus (openpyxl.chart.error_bar.ErrorBars 属性), 144 print_title_rows	(open-
Point2D (openpyxl.drawing.geometry 中的类), 225	pyxl.worksheet.worksheet.Worksheet 属
Point3D (openpyxl.drawing.geometry 中的类), 225	性), 407
points_to_pixels() (在 openpyxl.utils.units 模块 print_titles	(open中), 343	pyxl.worksheet.worksheet.Worksheet 属
pop() (openpyxl.chart.reference.Reference 方法), 161	性), 407
pos (openpyxl.drawing.fill.GradientStop 属性), 216	printDrill (openpyxl.pivot.table.TableDefinition 属

性), 316
PrintOptions (openpyxl.worksheet.page 中的类), 386
PrintPageSetup (openpyxl.worksheet.page 中的类),
386
printSettings	(openpyxl.chart.chartspace.ChartSpace 属性), 138
PrintSettings (openpyxl.chart.print_settings 中的
类), 159
priority (openpyxl.formatting.rule.Rule 属性), 259 priority (openpyxl.pivot.table.ConditionalFormat 属性), 298
productSubtotal (openpyxl.pivot.table.PivotField 属
性), 305
productSubtotal (openpyxl.pivot.table.Reference 属
性), 310
progId (openpyxl.worksheet.ole.OleObject 属性), 385
ProjectedPieChart (openpyxl.chart.pie_chart 中的
类), 153
protection (openpyxl.styles.cell_style.CellStyle 属
性), 324
protection (openpyxl.styles.cell_style.CellStyleList 属性), 324
protection (openpyxl.styles.differential.DifferentialStyle 属性), 326
protection (openpyxl.styles.named_styles.NamedStyle 属性), 333
Protection (openpyxl.styles.protection 中的类), 334 protection (openpyxl.styles.styleable.StyleableObject 属性), 336
protectionId (openpyxl.styles.cell_style.StyleArray 属性), 325
prst (openpyxl.drawing.effect.PresetShadowEffect 属
性), 210
prst (openpyxl.drawing.fill.PatternFillProperties 属
性), 218
prst (openpyxl.drawing.geometry.Bevel 属性), 221 prst (openpyxl.drawing.geometry.Camera 属性), 222

prompt (openpyxl.worksheet.datavalidation.DataValidationprst (openpyxl.drawing.geometry.PresetGeometry2D 属性), 369	属性), 226
promptedSolutions	(open- prst (openpyxl.drawing.text.PresetTextShape 属性),
	pyxl.workbook.properties.WorkbookProperties	251
        属性), 351	prstClr (openpyxl.drawing.colors.ColorChoice 属 promptTitle (openpyxl.worksheet.datavalidation.DataValidation性), 192
	属性), 369	prstClr (openpyxl.drawing.effect.GlowEffect 属性),
properties (openpyxl.chart.text.RichText 属性), 169	205
Properties (openpyxl.comments.comment_sheet 中 prstClr (openpyxl.drawing.effect.InnerShadowEffect
	的类), 182	属性), 206
properties (openpyxl.drawing.text.Paragraph 属性), prstClr (openpyxl.drawing.effect.OuterShadow 属
	248	性), 208
properties (openpyxl.drawing.text.RegularTextRun prstClr (openpyxl.drawing.effect.PresetShadowEffect
	属性), 251	属性), 210
properties (openpyxl.packaging.workbook.WorkbookPackageprstClr (openpyxl.drawing.fill.GradientStop 属性), 属性), 273	216
propertyName (openpyxl.pivot.cache.CacheField 属 prstClr (openpyxl.drawing.fill.SolidColorFillProperties
	性), 277	属性), 219
protection (openpyxl.cell.read_only.ReadOnlyCell prstDash (openpyxl.drawing.line.LineProperties 属属性), 122	性), 234
Protection (openpyxl.chart.chartspace 中的类), 139 prstGeom (openpyxl.chart.shapes.GraphicalProperties protection (openpyxl.chart.chartspace.ChartSpace 属性), 166
	属性), 138	prstMaterial (openpyxl.drawing.geometry.Shape3D
	属性), 228	性), 398
prstShdw (openpyxl.drawing.effect.EffectList 属性), quote_sheetname() (在 openpyxl.utils.cell 模块中),
	204	339
prstTxWarp (openpyxl.drawing.text.RichTextProperties quotePrefix (openpyxl.styles.cell_style.CellStyle 属属性), 253	性), 324
pt (openpyxl.chart.data_source.Level 属性), 140 quotePrefix (openpyxl.styles.cell_style.StyleArray pt (openpyxl.chart.data_source.NumData 属性), 141 属性), 325
pt (openpyxl.chart.data_source.StrData 属性), 142	quotePrefix (openpyxl.styles.styleable.StyleableObject pt (openpyxl.worksheet.pagebreak.Break 属性), 388	属性), 336
ptCount (openpyxl.chart.data_source.MultiLevelStrData 属性), 140	R
ptCount (openpyxl.chart.data_source.NumData 属 r (openpyxl.cell.text.Text 属性), 125
	性), 141	r (openpyxl.chart.print_settings.PageMargins 属性),
ptCount (openpyxl.chart.data_source.StrData 属性),	159
	142	r (openpyxl.drawing.colors.RGBPercent 属性), 195
published (openpyxl.chartsheet.properties.ChartsheetPropertiesr (openpyxl.drawing.fill.RelativeRect 属性), 218
	属性), 175	r (openpyxl.drawing.geometry.GeomRect 属性), 224
published (openpyxl.pivot.table.TableDefinition 属 r (openpyxl.drawing.text.Paragraph 属性), 249
	性), 316	r (openpyxl.pivot.record.RecordList 属性), 297
published (openpyxl.worksheet.properties.WorksheetPropertiesr (openpyxl.pivot.table.RowColItem 属性), 311

属性), 390
published (openpyxl.worksheet.table.Table 属性),
396
publishItems	(open-
pyxl.workbook.properties.WorkbookProperties
属性), 351
publishToServer	(openpyxl.workbook.defined_name.DefinedName 属性), 347
Q
QualifiedDateTime (openpyxl.packaging.core 中的
类), 265
Query (openpyxl.pivot.cache 中的类), 286 query (openpyxl.pivot.cache.QueryCache 属性), 287 QueryCache (openpyxl.pivot.cache 中的类), 287 queryCache (openpyxl.pivot.cache.TupleCache 属性),
        290 queryFailed (openpyxl.pivot.cache.OLAPSet 属性),
284
queryTableFieldId	(openpyxl.worksheet.table.TableColumn	属
r (openpyxl.workbook.external_link.external.ExternalCell 属性), 344
r (openpyxl.workbook.external_link.external.ExternalRow 属性), 345
r (openpyxl.worksheet.cell_watch.CellWatch 属性),
        365 r (openpyxl.worksheet.dimensions.RowDimension 属
性), 372
r (openpyxl.worksheet.scenario.InputCells 属性), 393 r (openpyxl.worksheet.smart_tag.CellSmartTags 属
性), 395
rad (openpyxl.drawing.effect.BlurEffect 属性), 203 rad (openpyxl.drawing.effect.GlowEffect 属性), 206 rad (openpyxl.drawing.effect.SoftEdgesEffect 属性),
        212 radarChart (openpyxl.chart.plotarea.PlotArea 属性),
158
RadarChart (openpyxl.chart.radar_chart 中的类),
        160 radarStyle (openpyxl.chart.radar_chart.RadarChart 属性), 160
RANGE (openpyxl.formula.tokenizer.Token 属性), 260 range_boundaries() (在 openpyxl.utils.cell 模块中),
339
range_string (openpyxl.chart.reference.Reference
        属性), 161 range_to_tuple() (在 openpyxl.utils.cell 模块中), 339
RangePr (openpyxl.pivot.cache 中的类), 287 rangePr (openpyxl.pivot.cache.FieldGroup 属性), 281 readingOrder (openpyxl.styles.alignment.Alignment
属性), 320
ReadOnlyCell (openpyxl.cell.read_only 中的类), 122 readOnlyRecommended (open-
pyxl.workbook.protection.FileSharing 属性), 352
ReadOnlyWorkbookException, 341
ranges (openpyxl.worksheet.cell_range.MultiCellRange	pyxl.worksheet.controls.ControlProperty 属性), 365	属性), 367 ranges (openpyxl.worksheet.datavalidation.DataValidationRecord (openpyxl.pivot.record 中的类), 296recalcAlways	(open-

属性), 369
RangeSet (openpyxl.pivot.cache 中的类), 288 rangeSets (openpyxl.pivot.cache.Consolidation 属
性), 280
rank (openpyxl.formatting.rule.Rule 属性), 259 rankBy (openpyxl.pivot.table.PivotField 属性), 305 read() (openpyxl.reader.excel.ExcelReader 方法),
        318 read_chart() (在 openpyxl.chart.reader 模块中),
160
read_chartsheet()	(openpyxl.reader.excel.ExcelReader 方法), 318
read_external_link()	(在	openpyxl.workbook.external_link.external 模块中), 346
read_manifest()	(openpyxl.reader.excel.ExcelReader 方法), 318
read_only (openpyxl.workbook.workbook.Workbook 属性), 361
read_properties()	(openpyxl.reader.excel.ExcelReader 方法), 318
read_string_table() (在 openpyxl.reader.strings 模块中), 319
read_strings() (openpyxl.reader.excel.ExcelReader 方法), 318
read_theme() (openpyxl.reader.excel.ExcelReader 方
法), 319
read_workbook()	(openpyxl.reader.excel.ExcelReader 方法), 319
read_worksheets()	(openpyxl.reader.excel.ExcelReader 方法), 319 recordCount (openpyxl.pivot.cache.CacheDefinition 属性), 275
RecordList (openpyxl.pivot.record 中的类), 297 records (openpyxl.pivot.cache.CacheDefinition 属
性), 275
red (openpyxl.drawing.colors.SchemeColor 属性),
        197 red (openpyxl.drawing.colors.SystemColor 属性), 199 redMod (openpyxl.drawing.colors.SchemeColor 属性),
        197 redMod (openpyxl.drawing.colors.SystemColor 属性),
        199 redOff (openpyxl.drawing.colors.SchemeColor 属性),
        197 redOff (openpyxl.drawing.colors.SystemColor 属性),
        199 ref (openpyxl.chart.data_source.NumRef 属性), 141 ref (openpyxl.comments.comment_sheet.CommentRecord 属性), 181
ref (openpyxl.pivot.cache.RangeSet 属性), 288 ref (openpyxl.pivot.cache.WorksheetSource 属性),
        291 ref (openpyxl.pivot.table.Location 属性), 300 ref (openpyxl.worksheet.dimensions.SheetDimension 属性), 373
ref (openpyxl.worksheet.filters.AutoFilter 属性), 376 ref (openpyxl.worksheet.filters.SortCondition 属性),
        379 ref (openpyxl.worksheet.filters.SortState 属性), 380 ref (openpyxl.worksheet.hyperlink.Hyperlink 属性),
382

ref (openpyxl.worksheet.merge.MergeCell 属性), 383	性), 316
ref (openpyxl.worksheet.table.Table 属性), 396 Reference (openpyxl.chart.reference 中的类), 161
Reference (openpyxl.pivot.table 中的类), 309Related (openpyxl.worksheet.related 中的类), 392
Relation (openpyxl.descriptors.excel 中的类), 188
Relationship (openpyxl.packaging.relationship 中的references (openpyxl.pivot.table.PivotArea 属性),	类), 269
	303	Relationship	(open-
refersTo (openpyxl.workbook.external_link.external.ExternalDefinedNamepyxl.packaging.relationship.RelationshipList
	属性), 344	属性), 270
reflection (openpyxl.drawing.effect.EffectList 属 RelationshipList (openpyxl.packaging.relationship
	性), 204	中的类), 270
ReflectionEffect (openpyxl.drawing.effect 中的类), relative (openpyxl.pivot.table.Reference 属性), 310
	211	relativeIndent	(open-
refMode (openpyxl.workbook.properties.CalcProperties	pyxl.styles.alignment.Alignment 属性), 属性), 349	320
refreshAllConnections	(open- RelativeRect (openpyxl.drawing.fill 中的类), 218
pyxl.workbook.properties.WorkbookProperties rels (openpyxl.reader.workbook.WorkbookParser 属属性), 351
refreshedBy (openpyxl.pivot.cache.CacheDefinition
属性), 275
refreshedDate	(open-
pyxl.pivot.cache.CacheDefinition 属性),
275
refreshedDateIso	(open-
pyxl.pivot.cache.CacheDefinition 属性),
275
refreshedVersion	(open-
pyxl.pivot.cache.CacheDefinition 属性),
275
refreshError	(open-性), 320
remove() (openpyxl.workbook.workbook.Workbook 方
法), 361
remove() (openpyxl.worksheet.cell_range.MultiCellRange
方法), 365
remove_named_range()	(open-
pyxl.workbook.workbook.Workbook	方法), 361
remove_sheet()	(open-
pyxl.workbook.workbook.Workbook	方法), 361
render() (openpyxl.formula.tokenizer.Tokenizer 方
法), 262pyxl.workbook.external_link.external.ExternalSheetDatarepairLoad (openpyxl.packaging.workbook.FileRecoveryProperties
	属性), 345	属性), 271
refreshOnLoad	(open- reservationPassword	(openpyxl.pivot.cache.CacheDefinition 属性),	pyxl.workbook.protection.FileSharing 属
	275	性), 352
RegularTextRun (openpyxl.drawing.text 中的类), 251 rev (openpyxl.drawing.geometry.SphereCoords 属性), reindex() (openpyxl.worksheet.dimensions.ColumnDimension 229
	方法), 371	reverse (openpyxl.formatting.rule.IconSet 属性),
rel_type (openpyxl.pivot.cache.CacheDefinition 属	258
	性), 275	revision (openpyxl.packaging.core.DocumentProperties
rel_type (openpyxl.pivot.record.RecordList 属性),	属性), 265
	297	revision_password	(open-
rel_type (openpyxl.pivot.table.TableDefinition 属	pyxl.workbook.protection.WorkbookProtection

属性), 353
revisionsAlgorithmName	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 353
revisionsHashValue	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 353
revisionsPassword	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 353
revisionsPasswordCharacterSet	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 353
revisionsSaltValue	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 353
revisionsSpinCount	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 353
rfe (openpyxl.chartsheet.relation.DrawingHF 属性),
        179 rff (openpyxl.chartsheet.relation.DrawingHF 属性),
        179 rfo (openpyxl.chartsheet.relation.DrawingHF 属性),
        179 rFont (openpyxl.cell.text.InlineFont 属性), 123 RGB (openpyxl.drawing.colors.ColorChoice 属性), 192
RGB (openpyxl.drawing.fill.GradientStop 属性), 216
RGB (openpyxl.drawing.fill.SolidColorFillProperties 属性), 219
RGB (openpyxl.styles.colors 中的类), 326 rgb (openpyxl.styles.colors.Color 属性), 325 rgb (openpyxl.styles.colors.RgbColor 属性), 326 RgbColor (openpyxl.styles.colors 中的类), 326
RGBPercent (openpyxl.drawing.colors 中的类), 195
RGBPercent (openpyxl.drawing.colors.ColorChoice 属
性), 192
RGBPercent (openpyxl.drawing.fill.GradientStop 属
性), 216
        179 rhf (openpyxl.chartsheet.relation.DrawingHF 属性),
        179 rho (openpyxl.chartsheet.relation.DrawingHF 属性),
        179 rich (openpyxl.chart.text.Text 属性), 170 RichText (openpyxl.cell.text 中的类), 124
RichText (openpyxl.chart.text 中的类), 169
RichTextProperties (openpyxl.drawing.text 中的
类), 251
rig (openpyxl.drawing.geometry.LightRig 属性), 224 right (openpyxl.chart.print_settings.PageMargins 属性), 159
right (openpyxl.drawing.fill.RelativeRect 属性), 218 right (openpyxl.styles.borders.Border 属性), 322
right (openpyxl.styles.fills.GradientFill 属性), 328 right (openpyxl.worksheet.cell_range.CellRange 属
性), 364
right (openpyxl.worksheet.header_footer.HeaderFooterItem 属性), 382
right (openpyxl.worksheet.page.PageMargins 属性),
386
rightFooterEvenPages	(openpyxl.chartsheet.relation.DrawingHF 属性), 179
rightFooterFirstPage	(openpyxl.chartsheet.relation.DrawingHF 属性), 179
rightFooterOddPages	(openpyxl.chartsheet.relation.DrawingHF 属性), 179
rightHeaderEvenPages	(openpyxl.chartsheet.relation.DrawingHF 属性), 179
rightHeaderFirstPage	(openpyxl.chartsheet.relation.DrawingHF 属性), 179
RGBPercent (openpyxl.drawing.fill.SolidColorFillProperties 性), 179
	属性), 219	rightToLeft (openpyxl.worksheet.views.SheetView
rhe (openpyxl.chartsheet.relation.DrawingHF 属性),	属性), 401rightHeaderOddPages	(openpyxl.chartsheet.relation.DrawingHF 属
rIns (openpyxl.drawing.text.RichTextProperties 属
性), 253
rot (openpyxl.drawing.geometry.Camera 属性), 222 rot (openpyxl.drawing.geometry.GroupTransform2D 属性), 224
rot (openpyxl.drawing.geometry.LightRig 属性), 225 rot (openpyxl.drawing.geometry.Transform2D 属性),
        229 rot (openpyxl.drawing.text.RichTextProperties 属性),
253
rot (openpyxl.drawing.xdr.XDRTransform2D 属性),
255
rotWithShape	(open-
pyxl.drawing.effect.OuterShadow 属性),
209
rotWithShape	(open-
pyxl.drawing.effect.ReflectionEffect 属性), 211
rotWithShape	(open-
pyxl.drawing.fill.BlipFillProperties	属性), 214
rotWithShape	(open-
pyxl.drawing.fill.GradientFillProperties
属性), 215
round (openpyxl.drawing.line.LineProperties 属性),
234
roundedCorners	(openpyxl.chart.chartspace.ChartSpace 属性),
        138 row (openpyxl.cell.cell.Cell 属性), 121 row (openpyxl.cell.cell.MergedCell 属性), 121
        row (openpyxl.cell.read_only.ReadOnlyCell 属性),
122
388
RowColField (openpyxl.pivot.table 中的类), 311
RowColItem (openpyxl.pivot.table 中的类), 311
RowDimension (openpyxl.worksheet.dimensions 中的
类), 372
rowFields (openpyxl.pivot.table.TableDefinition 属
性), 316
rowGrandTotals	(open-
pyxl.pivot.table.TableDefinition 属性),
316
rowHeaderCaption	(open-
pyxl.pivot.table.TableDefinition 属性),
        316 rowHidden (openpyxl.comments.comment_sheet.Properties 属性), 183
RowHierarchiesUsage (openpyxl.pivot.table 中的类),
311
rowHierarchiesUsage	(openpyxl.pivot.table.TableDefinition 属性),
316
rowHierarchyUsage	(openpyxl.pivot.table.RowHierarchiesUsage
属性), 311
rowItems (openpyxl.pivot.table.TableDefinition 属
性), 316
rowOff (openpyxl.drawing.spreadsheet_drawing.AnchorMarker 属性), 241
rowPageCount (openpyxl.pivot.table.Location 属性),
        300 rows (openpyxl.chart.reference.Reference 属性), 161 rows (openpyxl.worksheet.cell_range.CellRange 属
        性), 364 rows (openpyxl.worksheet.worksheet.Worksheet 属

row (openpyxl.drawing.spreadsheet_drawing.AnchorMarker 性), 407
	属性), 241	rows_from_range() (在 openpyxl.utils.cell 模块中),
ROW (openpyxl.formula.tokenizer.Token 属性), 260	339
row (openpyxl.workbook.external_link.external.ExternalSheetDatarPh (openpyxl.cell.text.Text 属性), 125
	属性), 345	rPr (openpyxl.cell.text.RichText 属性), 124
ROW_RANGE_RE	(open- rPr (openpyxl.drawing.text.LineBreak 属性), 247
pyxl.formula.translate.Translator 属性), rPr (openpyxl.drawing.text.RegularTextRun 属性),
	262	251
RowBreak (openpyxl.worksheet.pagebreak 中的类), rPr (openpyxl.drawing.text.TextField 属性), 254
rtl (openpyxl.drawing.text.CharacterProperties 属 save() (openpyxl.workbook.workbook.Workbook 方性), 245	法), 362
rtl (openpyxl.drawing.text.ParagraphProperties 属 save() (openpyxl.writer.excel.ExcelWriter 方法), 407 性), 250	save_token()	(open-
rtlCol (openpyxl.drawing.text.RichTextProperties 属	pyxl.formula.tokenizer.Tokenizer 方法), 性), 253	262
Rule (openpyxl.formatting.rule 中的类), 258	save_virtual_workbook() (在 openpyxl.writer.excel
rules (openpyxl.formatting.formatting.ConditionalFormatting 模块中), 408
	属性), 256	save_workbook() (在 openpyxl.writer.excel 模块中),
RuleType (openpyxl.formatting.rule 中的类), 259	408
rupBuild (openpyxl.workbook.properties.FileVersion saveData (openpyxl.pivot.cache.CacheDefinition 属
	属性), 350	性), 275
	saveExternalLinkValues	(open-
S	pyxl.workbook.properties.WorkbookProperties
s (openpyxl.pivot.cache.GroupItems 属性), 282	属性), 351
s (openpyxl.pivot.cache.PCDSDTCEntries 属性), 286 sb (openpyxl.cell.text.PhoneticText 属性), 124
s (openpyxl.pivot.cache.SharedItems 属性), 290	scale (openpyxl.chartsheet.custom.CustomChartsheetView
s (openpyxl.pivot.record.Record 属性), 296	属性), 174
s (openpyxl.pivot.table.FieldItem 属性), 299	scale (openpyxl.worksheet.page.PrintPageSetup 属
s (openpyxl.worksheet.dimensions.RowDimension 属 性), 387 性), 372 ScaleCrop (openpyxl.packaging.extended.ExtendedProperties
safe_string() (在 openpyxl.compat.strings 模块中),	属性), 267
	185	scaled (openpyxl.drawing.fill.LinearShadeProperties
saltValue (openpyxl.chartsheet.protection.ChartsheetProtection 属性), 217
	属性), 176	scaleWithDoc	(open-
saltValue (openpyxl.workbook.protection.FileSharing pyxl.worksheet.header_footer.HeaderFooter 属性), 352	属性), 381 saltValue (openpyxl.worksheet.protection.SheetProtectionScaling (openpyxl.chart.axis 中的类), 131

属性), 392
sat (openpyxl.drawing.colors.HSLColor 属性), 195 sat (openpyxl.drawing.colors.SchemeColor 属性),
        197 sat (openpyxl.drawing.colors.SystemColor 属性), 199 sat (openpyxl.drawing.effect.HSLEffect 属性), 206 satMod (openpyxl.drawing.colors.SchemeColor 属性),
        197 satMod (openpyxl.drawing.colors.SystemColor 属性),
        199 satOff (openpyxl.drawing.colors.SchemeColor 属性),
        197 satOff (openpyxl.drawing.colors.SystemColor 属性),
199
scaling (openpyxl.chart.axis.DateAxis 属性), 128 scaling (openpyxl.chart.axis.NumericAxis 属性),
        130 scaling (openpyxl.chart.axis.SeriesAxis 属性), 132 scaling (openpyxl.chart.axis.TextAxis 属性), 133 scatterChart (openpyxl.chart.plotarea.PlotArea 属
性), 158
ScatterChart (openpyxl.chart.scatter_chart 中的
类), 161
scatterStyle	(openpyxl.chart.scatter_chart.ScatterChart
属性), 162
	属性), 394	217
ScenarioList (openpyxl.worksheet.scenario 中的类), scrgbClr (openpyxl.drawing.fill.SolidColorFillProperties
	393	属性), 220
scenarios (openpyxl.worksheet.protection.SheetProtectionsd (openpyxl.pivot.table.FieldItem 属性), 299
	属性), 392	second (openpyxl.worksheet.filters.DateGroupItem
scene3d (openpyxl.chart.shapes.GraphicalProperties	属性), 377
        属性), 166	secondPiePt (openpyxl.chart.pie_chart.CustomSplit Scene3D (openpyxl.drawing.geometry 中的类), 227	属性), 152 scene3d (openpyxl.drawing.properties.GroupShapePropertiessecondPieSize	(open属性), 238	pyxl.chart.pie_chart.ProjectedPieChart
scene3d (openpyxl.drawing.text.RichTextProperties	属性), 154
属性), 253
scheme (openpyxl.cell.text.InlineFont 属性), 123 scheme (openpyxl.styles.fonts.Font 属性), 330 schemeClr (openpyxl.drawing.colors.ColorChoice 属
性), 193
schemeClr (openpyxl.drawing.effect.GlowEffect 属
性), 206selected (openpyxl.pivot.table.Reference 属性), 310 selected_cell	(open-
pyxl.worksheet.worksheet.Worksheet 属性), 407
selection (openpyxl.chart.chartspace.Protection 属
性), 139
Selection (openpyxl.worksheet.views 中的类), 400schemeClr (openpyxl.drawing.effect.InnerShadowEffect selection (openpyxl.worksheet.views.SheetView 属属性), 207	性), 401
schemeClr (openpyxl.drawing.effect.OuterShadow 属 selectLockedCells	(open-
	性), 209	pyxl.worksheet.protection.SheetProtection
schemeClr (openpyxl.drawing.effect.PresetShadowEffect	属性), 392
	属性), 210	selectUnlockedCells	(open-
schemeClr (openpyxl.drawing.fill.GradientStop 属	pyxl.worksheet.protection.SheetProtection
        性), 217	属性), 392 schemeClr (openpyxl.drawing.fill.SolidColorFillPropertiesSEP (openpyxl.formula.tokenizer.Token 属性), 261Scenario (openpyxl.worksheet.scenario 中的类), 393 scenario (openpyxl.worksheet.scenario.ScenarioList 属性), 220
SchemeColor (openpyxl.drawing.colors 中的类), 195 scope (openpyxl.pivot.table.ConditionalFormat 属
性), 298
scrgbClr (openpyxl.drawing.colors.ColorChoice 属
性), 193
scrgbClr (openpyxl.drawing.effect.GlowEffect 属性),
206
scrgbClr (openpyxl.drawing.effect.InnerShadowEffect
属性), 207
scrgbClr (openpyxl.drawing.effect.OuterShadow 属
性), 209
separator (openpyxl.chart.label.DataLabel 属性),
145
separator (openpyxl.chart.label.DataLabelList 属
性), 146
seq_types (openpyxl.descriptors.sequence.Sequence
属性), 191
Sequence (openpyxl.descriptors.sequence 中的类),
191
ser (openpyxl.chart.area_chart.AreaChart 属性), 126 ser (openpyxl.chart.area_chart.AreaChart3D 属性),
126
scrgbClr (openpyxl.drawing.effect.PresetShadowEffect ser (openpyxl.chart.bar_chart.BarChart3D 属性), 属性), 211	135
scrgbClr (openpyxl.drawing.fill.GradientStop 属性), ser (openpyxl.chart.bubble_chart.BubbleChart 属性),ser (openpyxl.chart.bar_chart.BarChart 属性), 134 136 ser (openpyxl.chart.line_chart.LineChart 属性), 149 ser (openpyxl.chart.line_chart.LineChart3D 属性),
        150 ser (openpyxl.chart.pie_chart.DoughnutChart 属性),
        152 ser (openpyxl.chart.pie_chart.PieChart 属性), 153 ser (openpyxl.chart.pie_chart.PieChart3D 属性),
        153 ser (openpyxl.chart.pie_chart.ProjectedPieChart 属
性), 154
ser (openpyxl.chart.radar_chart.RadarChart 属性),
        160 ser (openpyxl.chart.scatter_chart.ScatterChart 属
性), 162
ser (openpyxl.chart.stock_chart.StockChart 属性),
        167 ser (openpyxl.chart.surface_chart.SurfaceChart 属
性), 168
ser (openpyxl.chart.surface_chart.SurfaceChart3D 属性), 169
serAx (openpyxl.chart.plotarea.PlotArea 属性), 158
Serialisable (openpyxl.descriptors.serialisable 中的类), 191
Series (openpyxl.chart.series 中的类), 162
series (openpyxl.pivot.table.ChartFormat 属性), 298 SeriesAxis (openpyxl.chart.axis 中的类), 131
SeriesFactory() (在 openpyxl.chart.series_factory 模块中), 165
SeriesLabel (openpyxl.chart.series 中的类), 164 serLines (openpyxl.chart.bar_chart.BarChart 属
性), 134
serLines (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
serLines (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
serverField (openpyxl.pivot.cache.CacheField 属
性), 277
serverField (openpyxl.pivot.table.PivotField 属性), 306
ServerFormat (openpyxl.pivot.cache 中的类), 288
serverFormat	(openpyxl.pivot.cache.ServerFormatList	属性), 288
ServerFormatList (openpyxl.pivot.cache 中的类),
        288 serverFormats (openpyxl.pivot.cache.TupleCache 属
性), 290
Set (openpyxl.descriptors.base 中的类), 187 set (openpyxl.pivot.cache.CacheHierarchy 属性), 278 set (openpyxl.pivot.cache.CalculatedMember 属性),
        280 set (openpyxl.pivot.cache.OLAPSets 属性), 285
set_dimension()	(openpyxl.drawing.drawing.Drawing 方法),
202
set_password()	(openpyxl.worksheet.protection.SheetProtection
方法), 392
set_printer_settings()	(openpyxl.worksheet.worksheet.Worksheet 方法), 407
set_revisions_password()	(open-
pyxl.workbook.protection.WorkbookProtection
方法), 353
set_workbook_password()	(open-
pyxl.workbook.protection.WorkbookProtection
方法), 353
setDefinition (openpyxl.pivot.cache.OLAPSet 属
性), 284
sets (openpyxl.pivot.cache.TupleCache 属性), 290 shade (openpyxl.drawing.colors.SchemeColor 属性),
        197 shade (openpyxl.drawing.colors.SystemColor 属性),
        199 shadow (openpyxl.cell.text.InlineFont 属性), 123 shadow (openpyxl.styles.fonts.Font 属性), 330 shape (openpyxl.chart.bar_chart.BarChart3D 属性),
        135 shape (openpyxl.chart.series.Series 属性), 163 Shape (openpyxl.drawing.connector 中的类), 201 shape3D (openpyxl.chart.shapes.GraphicalProperties 属性), 166
Shape3D (openpyxl.drawing.geometry 中的类), 227

shapeId (openpyxl.comments.comment_sheet.CommentRecord 性), 271
属性), 181
shapeId (openpyxl.worksheet.controls.Control 属性),
366
shapeId (openpyxl.worksheet.ole.OleObject 属性),
385
ShapeMeta (openpyxl.drawing.connector 中的类), 202
ShapeStyle (openpyxl.drawing.geometry 中的类), 228
ShapeWriter (openpyxl.comments.shape_writer 中的
类), 184sheetId (openpyxl.workbook.external_link.external.ExternalDefinedNa
属性), 344
sheetId (openpyxl.workbook.external_link.external.ExternalSheetData
属性), 345
sheetname (openpyxl.chart.reference.Reference 属
性), 161
sheetName (openpyxl.workbook.external_link.external.ExternalSheetNa
属性), 346
sheetNames (openpyxl.workbook.external_link.external.ExternalBook
属性), 344SharedDoc (openpyxl.packaging.extended.ExtendedPropertiessheetnames (openpyxl.workbook.workbook.Workbook
属性), 267
SharedItems (openpyxl.pivot.cache 中的类), 288 sharedItems (openpyxl.pivot.cache.CacheField 属
性), 277
sheet (openpyxl.pivot.cache.RangeSet 属性), 288 sheet (openpyxl.pivot.cache.WorksheetSource 属性),
291
sheet (openpyxl.worksheet.protection.SheetProtection
属性), 392
sheet_properties	(open-
pyxl.worksheet.page.PrintPageSetup 属性), 387属性), 362
sheetPr (openpyxl.chartsheet.chartsheet.Chartsheet
属性), 174
sheetProtection	(open-
pyxl.chartsheet.chartsheet.Chartsheet 属性), 174
SheetProtection (openpyxl.worksheet.protection 中
的类), 391
sheets (openpyxl.packaging.workbook.WorkbookPackage
属性), 273
SHEETSTATE_HIDDEN	(openpyxl.worksheet.worksheet.Worksheet 属sheet_state (openpyxl.chartsheet.chartsheet.Chartsheet	性), 403
        属性), 174 SHEETSTATE_VERYHIDDEN (opensheet_view (openpyxl.worksheet.worksheet.Worksheet pyxl.worksheet.worksheet.Worksheet 属属性), 407	性), 403
SheetBackgroundPicture	(open- SHEETSTATE_VISIBLE	(openpyxl.chartsheet.relation 中的类), 179	pyxl.worksheet.worksheet.Worksheet 属
SheetBackgroundPicture	(open-	性), 403
	pyxl.worksheet.picture 中的类), 389	SheetTitleException, 341
sheetData (openpyxl.workbook.external_link.external.ExternalSheetDataSetsheetView (openpyxl.chartsheet.views.ChartsheetViewList 属性), 345	属性), 180
sheetDataSet	(open- SheetView (openpyxl.worksheet.views 中的类), 401
pyxl.workbook.external_link.external.ExternalBooksheetView (openpyxl.worksheet.views.SheetViewList
	属性), 344	属性), 402
SheetDimension (openpyxl.worksheet.dimensions 中 SheetViewList (openpyxl.worksheet.views 中的类), 的类), 373	402
SheetFormatProperties (open- sheetViews (openpyxl.chartsheet.chartsheet.Chartsheet pyxl.worksheet.dimensions 中的类), 373 属性), 174 sheetId (openpyxl.packaging.workbook.ChildSheet 属 shift() (openpyxl.worksheet.cell_range.CellRange 方法), 364	pyxl.pivot.table.PivotTableStyle 属性),
short_color() (在 openpyxl.utils.units 模块中), 343	309 shortcutKey (openpyxl.workbook.defined_name.DefinedNameshowColumnStripes	(open属性), 347	pyxl.worksheet.table.TableStyleInfo 属
show (openpyxl.workbook.smart_tags.SmartTagProperties	性), 399
属性), 354
show (openpyxl.worksheet.scenario.ScenarioList 属
性), 394
show_gridlines	(open-
pyxl.worksheet.worksheet.Worksheet 属性), 407
show_summary_below	(open-
pyxl.worksheet.worksheet.Worksheet 属性), 407
show_summary_right	(open-
pyxl.worksheet.worksheet.Worksheet 属性), 407
showAll (openpyxl.pivot.table.PivotField 属性), 306
showAsCaption	(open-
pyxl.pivot.table.MemberProperty 属性),
301
showBorderUnselectedTables	(open-showComments	(open-
pyxl.workbook.views.CustomWorkbookView 属性), 357
showDataAs (openpyxl.pivot.table.DataField 属性),
299
showDataDropDown	(open-
pyxl.pivot.table.TableDefinition 属性),
317
showDataTips (openpyxl.pivot.table.TableDefinition
属性), 317
showDLblsOverMax	(open-
pyxl.chart.chartspace.ChartContainer
属性), 137
showDrill (openpyxl.pivot.table.TableDefinition 属
性), 317
showDropDown	(open-
pyxl.worksheet.datavalidation.DataValidation	pyxl.workbook.properties.WorkbookProperties	属性), 369
属性), 351
showBubbleSize (openpyxl.chart.label.DataLabel 属
性), 145
showBubbleSize (openpyxl.chart.label.DataLabelList
属性), 146
showButton (openpyxl.worksheet.filters.FilterColumn
属性), 378
showCalcMbrs (openpyxl.pivot.table.TableDefinition
属性), 316
showCatName (openpyxl.chart.label.DataLabel 属性),
145
showCatName (openpyxl.chart.label.DataLabelList 属
性), 146
showCell (openpyxl.pivot.table.MemberProperty 属
性), 301
showColHeaders	(open-
pyxl.pivot.table.PivotTableStyle 属性),
309
showColStripes	(open-showDropDowns (openpyxl.pivot.table.PivotField 属
性), 306
showDropZones (openpyxl.pivot.table.TableDefinition
属性), 317
showEmptyCol (openpyxl.pivot.table.TableDefinition
属性), 317
showEmptyRow (openpyxl.pivot.table.TableDefinition
属性), 317
showError (openpyxl.pivot.table.TableDefinition 属
性), 317
showErrorMessage	(open-
pyxl.worksheet.datavalidation.DataValidation
属性), 369
showFirstColumn	(open-
pyxl.worksheet.table.TableStyleInfo 属性), 399
showFormulaBar	(open-
pyxl.workbook.views.CustomWorkbookView 属性), 357

showFormulas (openpyxl.worksheet.views.SheetView
属性), 401
showGridLines (openpyxl.worksheet.views.SheetView
属性), 401
showHeaders (openpyxl.pivot.table.TableDefinition
属性), 317
showHorizontalScroll	(open-
pyxl.workbook.views.BookView 属性),
355
showHorizontalScroll	(open-
pyxl.workbook.views.CustomWorkbookView 属性), 357
showHorzBorder (openpyxl.chart.plotarea.DataTable
属性), 156
showInFieldList	(open-
pyxl.pivot.table.PivotHierarchy 属性),
309
showInkAnnotation	(open-
pyxl.workbook.properties.WorkbookProperties
属性), 351
showInputMessage	(open-
pyxl.worksheet.datavalidation.DataValidation
属性), 369
showItems (openpyxl.pivot.table.TableDefinition 属
性), 317
showKeys (openpyxl.chart.plotarea.DataTable 属性),
156
showLastColumn	(open-
pyxl.pivot.table.PivotTableStyle 属性),
309
showLastColumn	(open-
pyxl.worksheet.table.TableStyleInfo 属性), 399
showLeaderLines (openpyxl.chart.label.DataLabel 属
性), 145
showLeaderLines	(open-
pyxl.chart.label.DataLabelList 属性),
146
showLegendKey (openpyxl.chart.label.DataLabel 属
性), 145
showLegendKey (openpyxl.chart.label.DataLabelList
属性), 146
showMemberPropertyTips	(open-
pyxl.pivot.table.TableDefinition 属性),
317
showMissing (openpyxl.pivot.table.TableDefinition
属性), 317
showMultipleLabel	(open-
pyxl.pivot.table.TableDefinition 属性),
317
showNegBubbles	(open-
pyxl.chart.bubble_chart.BubbleChart 属性), 136
showObjects (openpyxl.workbook.properties.WorkbookProperties
属性), 351
showObjects (openpyxl.workbook.views.CustomWorkbookView
属性), 357
showOutline (openpyxl.chart.plotarea.DataTable 属
性), 156
showOutlineSymbols	(open-
pyxl.worksheet.properties.Outline 属性),
389
showOutlineSymbols	(open-
pyxl.worksheet.views.SheetView 属性),
401
showPercent (openpyxl.chart.label.DataLabel 属性),
145
showPercent (openpyxl.chart.label.DataLabelList 属
性), 146
showPivotChartFilter	(open-
pyxl.workbook.properties.WorkbookProperties
属性), 351
showPropAsCaption (openpyxl.pivot.table.PivotField
属性), 306
showPropCell (openpyxl.pivot.table.PivotField 属
性), 306
showPropTip (openpyxl.pivot.table.PivotField 属性),
306
showRowColHeaders	(open-
pyxl.worksheet.views.SheetView 属性),
401
showRowHeaders	(open-
pyxl.pivot.table.PivotTableStyle 属性),
309
showRowStripes	(openpyxl.pivot.table.PivotTableStyle 属性),
309
showRowStripes	(openpyxl.worksheet.table.TableStyleInfo 属性), 399
showRuler (openpyxl.worksheet.views.SheetView 属
性), 402
showSerName (openpyxl.chart.label.DataLabel 属性),
        145 showSerName (openpyxl.chart.label.DataLabelList 属
性), 146
showSheetTabs (openpyxl.workbook.views.BookView 属性), 355
showSheetTabs	(openpyxl.workbook.views.CustomWorkbookView 属性), 357
showStatusbar	(openpyxl.workbook.views.CustomWorkbookView 属性), 357
showTip (openpyxl.pivot.table.MemberProperty 属
性), 301
showVal (openpyxl.chart.label.DataLabel 属性), 145 showVal (openpyxl.chart.label.DataLabelList 属性),
        146 showValue (openpyxl.formatting.rule.DataBar 属性),
        257 showValue (openpyxl.formatting.rule.IconSet 属性),
        258 showVertBorder (openpyxl.chart.plotarea.DataTable 属性), 156
showVerticalScroll	(openpyxl.workbook.views.BookView 属性),
355
showVerticalScroll	(openpyxl.workbook.views.CustomWorkbookView 属性), 357
showWhiteSpace	(openpyxl.worksheet.views.SheetView 属性),
        402 showZeros (openpyxl.worksheet.views.SheetView 属
性), 402
shrink() (openpyxl.worksheet.cell_range.CellRange 方法), 364
shrink_to_fit	(openpyxl.styles.alignment.Alignment 属性),
        320 shrinkToFit (openpyxl.styles.alignment.Alignment 属性), 320
Side (openpyxl.styles.borders 中的类), 322 sideWall (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
sideWall (openpyxl.chart.chartspace.ChartContainer 属性), 137
Singleton (openpyxl.compat.singleton 中的类), 185 size (openpyxl.chart.error_bar.ErrorBars 属性), 144 size (openpyxl.chart.marker.Marker 属性), 151 size (openpyxl.styles.fonts.Font 属性), 330 size (openpyxl.styles.table.TableStyleElement 属性),
        337 size (openpyxl.worksheet.cell_range.CellRange 属
性), 365
sizeRepresents	(openpyxl.chart.bubble_chart.BubbleChart 属性), 136
sizeWithCells	(openpyxl.worksheet.ole.ObjectAnchor 属性),
383
Slides (openpyxl.packaging.extended.ExtendedProperties 属性), 267
SmartTag (openpyxl.workbook.smart_tags 中的类), 354
SmartTagList (openpyxl.workbook.smart_tags 中的
类), 354
smartTagPr (openpyxl.packaging.workbook.WorkbookPackage 属性), 273
SmartTagProperties	(openpyxl.workbook.smart_tags 中的类), 354
SmartTags (openpyxl.worksheet.smart_tag 中的类),
395
smartTagType	(openpyxl.workbook.smart_tags.SmartTagList
属性), 354
smartTagTypes	(openpyxl.packaging.workbook.WorkbookPackage
属性), 273
smooth (openpyxl.chart.line_chart.LineChart 属性),
        149 smooth (openpyxl.chart.line_chart.LineChart3D 属
性), 150
smooth (openpyxl.chart.series.Series 属性), 163 smooth (openpyxl.chart.series.XYSeries 属性), 165 smtClean (openpyxl.drawing.text.CharacterProperties 属性), 245
smtId (openpyxl.drawing.text.CharacterProperties 属
性), 245
SN_RE (openpyxl.formula.tokenizer.Tokenizer 属性),
        261 snd (openpyxl.drawing.text.Hyperlink 属性), 247 softEdge (openpyxl.drawing.effect.EffectList 属性),
205
SoftEdgesEffect (openpyxl.drawing.effect 中的类),
212
SolidColorFillProperties (openpyxl.drawing.fill 中的类), 219
solidFill (openpyxl.chart.shapes.GraphicalProperties 属性), 167
solidFill (openpyxl.drawing.line.LineProperties 属
性), 234
solidFill (openpyxl.drawing.text.CharacterProperties 属性), 245
solveOrder (openpyxl.pivot.cache.CalculatedMember 属性), 280
sort (openpyxl.worksheet.protection.SheetProtection 属性), 392
sortBy (openpyxl.worksheet.filters.SortCondition 属
性), 380
sortByTuple (openpyxl.pivot.cache.OLAPSet 属性),
284
SortCondition (openpyxl.worksheet.filters 中的类),
        379 sortCondition (openpyxl.worksheet.filters.SortState 属性), 380
sortMethod (openpyxl.worksheet.filters.SortState 属
性), 380
SortState (openpyxl.worksheet.filters 中的类), 380 sortState (openpyxl.worksheet.filters.AutoFilter 属
性), 376
sortState (openpyxl.worksheet.table.Table 属性),
        396 sortType (openpyxl.pivot.cache.OLAPSet 属性), 284 sortType (openpyxl.pivot.table.PivotField 属性), 306 sourceLinked (openpyxl.chart.data_source.NumFmt 属性), 141
sourceObject	(openpyxl.chartsheet.publish.WebPublishItem
属性), 176
sourceObject	(openpyxl.workbook.web.WebPublishObject 属性), 358
sourceRef (openpyxl.chartsheet.publish.WebPublishItem 属性), 176
sourceType (openpyxl.chartsheet.publish.WebPublishItem 属性), 176
sp (openpyxl.drawing.line.DashStop 属性), 232 sp (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor 属性), 240
sp (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor 属性), 241
sp (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor 属性), 242
sp3d (openpyxl.chart.shapes.GraphicalProperties 属
性), 167
space (openpyxl.drawing.line.DashStop 属性), 232 Spacing (openpyxl.drawing.text 中的类), 253 spAutoFit (openpyxl.drawing.text.RichTextProperties 属性), 253
spc (openpyxl.drawing.text.CharacterProperties 属
性), 245
spcAft (openpyxl.drawing.text.ParagraphProperties 属性), 251
spcBef (openpyxl.drawing.text.ParagraphProperties 属性), 251
spcCol (openpyxl.drawing.text.RichTextProperties 属
性), 253
spcFirstLastPara	(openpyxl.drawing.text.RichTextProperties 属性), 253
spcPct (openpyxl.drawing.text.Spacing 属性), 253 spPr (openpyxl.drawing.connector.ConnectorShape spcPts (openpyxl.drawing.text.Spacing 属性), 253 属性), 201
SphereCoords (openpyxl.drawing.geometry 中的类), spPr (openpyxl.drawing.connector.Shape 属性), 202
	228	spPr (openpyxl.drawing.picture.PictureFrame 属性),
spinCount (openpyxl.chartsheet.protection.ChartsheetProtection 235
        属性), 176 SpreadsheetDrawing (openspinCount (openpyxl.workbook.protection.FileSharing pyxl.drawing.spreadsheet_drawing 中的属性), 352	类), 241
spinCount (openpyxl.worksheet.protection.SheetProtectionsqlType (openpyxl.pivot.cache.CacheField 属性), 277
	属性), 392	sqref (openpyxl.formatting.formatting.ConditionalFormatting
splitPos (openpyxl.chart.pie_chart.ProjectedPieChart	属性), 256
	属性), 154	sqref (openpyxl.worksheet.datavalidation.DataValidation
splitType (openpyxl.chart.pie_chart.ProjectedPieChart	属性), 369
        属性), 154	sqref (openpyxl.worksheet.errors.IgnoredError 属 spLocks (openpyxl.drawing.properties.NonVisualDrawingShapeProps性), 375属性), 239
spPr (openpyxl.chart.axis.ChartLines 属性), 127 spPr (openpyxl.chart.axis.DateAxis 属性), 128 spPr (openpyxl.chart.axis.DisplayUnitsLabel 属性),
        128 spPr (openpyxl.chart.axis.NumericAxis 属性), 130 spPr (openpyxl.chart.axis.SeriesAxis 属性), 132 spPr (openpyxl.chart.axis.TextAxis 属性), 133 spPr (openpyxl.chart.chartspace.ChartSpace 属性),
        138 spPr (openpyxl.chart.error_bar.ErrorBars 属性), 144 spPr (openpyxl.chart.label.DataLabel 属性), 145 spPr (openpyxl.chart.label.DataLabelList 属性), 146 spPr (openpyxl.chart.legend.Legend 属性), 148 spPr (openpyxl.chart.marker.DataPoint 属性), 151 spPr (openpyxl.chart.marker.Marker 属性), 151 spPr (openpyxl.chart.pivot.PivotFormat 属性), 155 spPr (openpyxl.chart.plotarea.DataTable 属性), 156 spPr (openpyxl.chart.plotarea.PlotArea 属性), 158 spPr (openpyxl.chart.series.Series 属性), 163 spPr (openpyxl.chart.series.XYSeries 属性), 165 spPr (openpyxl.chart.surface_chart.BandFormat 属
性), 168
spPr (openpyxl.chart.title.Title 属性), 170 spPr (openpyxl.chart.trendline.Trendline 属性), 171 spPr (openpyxl.chart.trendline.TrendlineLabel 属性),
172
sqref (openpyxl.worksheet.scenario.ScenarioList 属
性), 394
sqref (openpyxl.worksheet.views.Selection 属性), 401
srcRect (openpyxl.drawing.fill.BlipFillProperties 属
性), 215
srgbClr (openpyxl.drawing.colors.ColorChoice 属
性), 193
srgbClr (openpyxl.drawing.effect.GlowEffect 属性),
        206 srgbClr (openpyxl.drawing.effect.InnerShadowEffect 属性), 207
srgbClr (openpyxl.drawing.effect.OuterShadow 属
性), 209
srgbClr (openpyxl.drawing.effect.PresetShadowEffect 属性), 211
srgbClr (openpyxl.drawing.fill.GradientStop 属性),
        217 srgbClr (openpyxl.drawing.fill.SolidColorFillProperties 属性), 220
st (openpyxl.pivot.fields.Error 属性), 292 st (openpyxl.pivot.fields.Missing 属性), 293 st (openpyxl.pivot.fields.Number 属性), 294 st (openpyxl.pivot.fields.Text 属性), 295 stA (openpyxl.drawing.effect.ReflectionEffect 属性),
	329	StretchInfoProperties (openpyxl.drawing.fill 中的
startAt (openpyxl.drawing.text.AutonumberBullet	类), 220
	属性), 242	Strict (openpyxl.descriptors 中的类), 185
startDate (openpyxl.pivot.cache.RangePr 属性), 287 strike (openpyxl.cell.text.InlineFont 属性), 123 startNum (openpyxl.pivot.cache.RangePr 属性), 287 strike (openpyxl.drawing.text.CharacterProperties state (openpyxl.chartsheet.custom.CustomChartsheetView 属性), 245
属性), 174
state (openpyxl.packaging.workbook.ChildSheet
性), 271
state (openpyxl.worksheet.views.Pane 属性), 400 status (openpyxl.pivot.cache.PCDKPI 属性), 285属strike (openpyxl.styles.fonts.Font 属性), 330 strikethrough (openpyxl.styles.fonts.Font 属性), 330
String (openpyxl.descriptors.base 中的类), 187
STRING_REGEXES	(open-statusBar (openpyxl.workbook.defined_name.DefinedName	pyxl.formula.tokenizer.Tokenizer 属性), 属性), 347	261 stCxn (openpyxl.drawing.connector.NonVisualConnectorPropertiesstringValue1 (openpyxl.pivot.table.PivotFilter 属        211 start (openpyxl.styles.borders.Border 属性), 322 start_color (openpyxl.styles.fills.PatternFill 属性), 属性), 201
stdDev (openpyxl.formatting.rule.Rule 属性), 259 stdDevPSubtotal (openpyxl.pivot.table.PivotField 属
性), 306
stdDevPSubtotal (openpyxl.pivot.table.Reference 属
性), 310
stdDevSubtotal (openpyxl.pivot.table.PivotField 属
性), 306
stdDevSubtotal (openpyxl.pivot.table.Reference 属
性), 310
stockChart (openpyxl.chart.plotarea.PlotArea 属性),
158
StockChart (openpyxl.chart.stock_chart 中的类), 167
Stop (openpyxl.styles.fills 中的类), 329 stop (openpyxl.styles.fills.GradientFill 属性), 328
性), 307
stringValue2 (openpyxl.pivot.table.PivotFilter 属
性), 307
strip_ws_name()	(open-
pyxl.formula.translate.Translator 静态方法), 262
strLit (openpyxl.chart.data_source.AxDataSource
属性), 140
stroke (openpyxl.drawing.geometry.Path2D 属性), 225
StrRef (openpyxl.chart.data_source 中的类), 142 strRef (openpyxl.chart.data_source.AxDataSource
属性), 140
stop_list (openpyxl.drawing.fill.GradientFillPropertiesstyle (openpyxl.chart.chartspace.ChartSpace 属性),strRef (openpyxl.chart.series.SeriesLabel 属性), 164 strRef (openpyxl.chart.text.Text 属性), 170 StrVal (openpyxl.chart.data_source 中的类), 142

属性), 215
stopIfTrue (openpyxl.formatting.rule.Rule 属性), 259
StopList (openpyxl.styles.fills 中的类), 329 stPos (openpyxl.drawing.effect.ReflectionEffect 属
性), 211
strCache (openpyxl.chart.data_source.StrRef 属性), 142
StrData (openpyxl.chart.data_source 中的类), 142 stretch (openpyxl.drawing.fill.BlipFillProperties 属
性), 215
        138 style (openpyxl.chart.error_bar.ErrorBars 属性),
        144 style (openpyxl.drawing.connector.ConnectorShape 属性), 201
style (openpyxl.drawing.connector.Shape 属性), 202 style (openpyxl.drawing.picture.PictureFrame 属
性), 235
style (openpyxl.styles.borders.Side 属性), 322
style (openpyxl.styles.styleable.StyleableObject 属
性), 336
style (openpyxl.worksheet.dimensions.Dimension 属
性), 371
style_array (openpyxl.cell.read_only.ReadOnlyCell 属性), 122
style_id (openpyxl.styles.styleable.StyleableObject 属性), 336
style_names (openpyxl.workbook.workbook.Workbook 属性), 362
StyleableObject (openpyxl.styles.styleable 中的类), 335
StyleArray (openpyxl.styles.cell_style 中的类), 324
StyleArrayDescriptor (openpyxl.styles.styleable 中的类), 335
StyleDescriptor (openpyxl.styles.styleable 中的类), 335
StyleMatrixReference (openpyxl.drawing.geometry 中的类), 229
StyleProxy (openpyxl.styles.proxy 中的类), 335
        306 sumSubtotal (openpyxl.pivot.table.Reference 属性),
311
supportAdvancedDrill	(openpyxl.pivot.cache.CacheDefinition 属性),
276
supportSubquery	(openpyxl.pivot.cache.CacheDefinition 属性),
        276 surface3DChart (openpyxl.chart.plotarea.PlotArea 属性), 158
surfaceChart (openpyxl.chart.plotarea.PlotArea 属
性), 158
SurfaceChart (openpyxl.chart.surface_chart 中的
类), 168
SurfaceChart3D (openpyxl.chart.surface_chart 中的
styles (openpyxl.styles.differential.DifferentialStyleListsx (openpyxl.drawing.effect.ReflectionEffect 属性), 属性), 327	212
Stylesheet (openpyxl.styles.stylesheet 中的类), 336 sx (openpyxl.drawing.fill.TileInfoProperties 属性), subject (openpyxl.packaging.core.DocumentProperties	220        类), 168 sx (openpyxl.drawing.effect.OuterShadow 属性), 209

属性), 265
subtotal (openpyxl.pivot.table.DataField 属性), 299 subtotalCaption (openpyxl.pivot.table.PivotField 属
性), 306
subtotalHiddenItems	(openpyxl.pivot.table.TableDefinition 属性),
        317 subtotalTop (openpyxl.pivot.table.PivotField 属性),
        306 subtotalTop (openpyxl.pivot.table.PivotHierarchy 属
性), 309
subtype (openpyxl.formula.tokenizer.Token
261属性),summaryBelow(open-pyxl.worksheet.properties.Outline
389属性),summaryRight(open-pyxl.worksheet.properties.Outline
389属性),sumSubtotal (openpyxl.pivot.table.PivotField 属性),sy (openpyxl.drawing.effect.OuterShadow 属性), 209
sy(openpyxl.drawing.effect.ReflectionEffect 属性),
212sy(openpyxl.drawing.fill.TileInfoProperties 属性),
221sym(openpyxl.drawing.text.CharacterProperties 属性), 245
symbol (openpyxl.chart.marker.Marker 属性), 151
syncHorizontal	(open-
pyxl.worksheet.properties.WorksheetProperties
属性), 390
syncRef (openpyxl.worksheet.properties.WorksheetProperties 属性), 390
syncVertical	(open-
pyxl.worksheet.properties.WorksheetProperties
属性), 390
sysClr (openpyxl.drawing.colors.ColorChoice 属性),
        193 sysClr (openpyxl.drawing.effect.GlowEffect 属性),
206
sysClr (openpyxl.drawing.effect.InnerShadowEffect 属性), 207
sysClr (openpyxl.drawing.effect.OuterShadow 属性),
        209 sysClr (openpyxl.drawing.effect.PresetShadowEffect 属性), 211
sysClr (openpyxl.drawing.fill.GradientStop 属性),
        217 sysClr (openpyxl.drawing.fill.SolidColorFillProperties 属性), 220
SystemColor (openpyxl.drawing.colors 中的类), 197 sz (openpyxl.cell.text.InlineFont 属性), 123 sz (openpyxl.drawing.text.CharacterProperties 属性),
        245 sz (openpyxl.styles.fonts.Font 属性), 331
T
t (openpyxl.cell.text.PhoneticText 属性), 124 t (openpyxl.cell.text.RichText 属性), 124 t (openpyxl.cell.text.Text 属性), 125 t (openpyxl.chart.print_settings.PageMargins 属性),
        159 t (openpyxl.drawing.fill.RelativeRect 属性), 219 t (openpyxl.drawing.geometry.GeomRect 属性), 224 t (openpyxl.drawing.text.RegularTextRun 属性), 251 t (openpyxl.drawing.text.TextField 属性), 254 t (openpyxl.pivot.table.FieldItem 属性), 299 t (openpyxl.pivot.table.RowColItem 属性), 311 TableDefinition (openpyxl.pivot.table 中的类), 311
TableFormula (openpyxl.worksheet.table 中的类),
398
TableList (openpyxl.worksheet.table 中的类), 398
TableNameDescriptor (openpyxl.worksheet.table 中的类), 399
tablePart (openpyxl.worksheet.table.TablePartList 属性), 399
TablePartList (openpyxl.worksheet.table 中的类),
        399 tables (openpyxl.worksheet.worksheet.Worksheet 属
性), 407
TableStyle (openpyxl.styles.table 中的类), 337 tableStyle (openpyxl.styles.table.TableStyleList 属
性), 338
TableStyleElement (openpyxl.styles.table 中的类),
        337 tableStyleElement (openpyxl.styles.table.TableStyle 属性), 337
TableStyleInfo (openpyxl.worksheet.table 中的类),
        399 tableStyleInfo (openpyxl.worksheet.table.Table 属
性), 396
TableStyleList (openpyxl.styles.table 中的类), 338 tableStyles (openpyxl.styles.stylesheet.Stylesheet 属
性), 337
tableType (openpyxl.worksheet.table.Table 属性),
396

t (openpyxl.workbook.external_link.external.ExternalCelltabLst (openpyxl.drawing.text.ParagraphProperties 属性), 344	属性), 251
tab (openpyxl.drawing.text.TabStopList 属性), 254 tabRatio (openpyxl.workbook.views.BookView 属性), tabColor (openpyxl.chartsheet.properties.ChartsheetProperties 355
        属性), 175	tabRatio (openpyxl.workbook.views.CustomWorkbookView tabColor (openpyxl.worksheet.properties.WorksheetProperties 属性), 357
属性), 390
table (openpyxl.styles.table.TableStyle 属性), 337 Table (openpyxl.worksheet.table 中的类), 395 tableBorderDxfId (openpyxl.worksheet.table.Table
属性), 396
TableColumn (openpyxl.worksheet.table 中的类), 397 tableColumns (openpyxl.worksheet.table.Table 属性),
396tabSelected (openpyxl.chartsheet.views.ChartsheetView
属性), 180
tabSelected (openpyxl.worksheet.views.SheetView
属性), 402
TabStop (openpyxl.drawing.text 中的类), 254 TabStopList (openpyxl.drawing.text 中的类), 254 tag (openpyxl.pivot.table.TableDefinition 属性), 317 tagname (openpyxl.cell.text.InlineFont 属性), 123
tagname (openpyxl.cell.text.PhoneticProperties 属
性), 124
tagname (openpyxl.cell.text.PhoneticText 属性), 124 tagname (openpyxl.cell.text.RichText 属性), 124 tagname (openpyxl.cell.text.Text 属性), 125 tagname (openpyxl.chart.area_chart.AreaChart 属
性), 126
tagname (openpyxl.chart.area_chart.AreaChart3D 属
性), 126
tagname (openpyxl.chart.axis.ChartLines 属性), 127 tagname (openpyxl.chart.axis.DateAxis 属性), 128 tagname (openpyxl.chart.axis.DisplayUnitsLabel 属
性), 129
tagname (openpyxl.chart.axis.DisplayUnitsLabelList 属性), 129
tagname (openpyxl.chart.axis.NumericAxis 属性),
        130 tagname (openpyxl.chart.axis.Scaling 属性), 131 tagname (openpyxl.chart.axis.SeriesAxis 属性), 132 tagname (openpyxl.chart.axis.TextAxis 属性), 133 tagname (openpyxl.chart.bar_chart.BarChart 属性),
        134 tagname (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
tagname (openpyxl.chart.bubble_chart.BubbleChart 属性), 136
tagname (openpyxl.chart.chartspace.ChartContainer 属性), 137
tagname (openpyxl.chart.chartspace.ChartSpace 属
性), 138
tagname (openpyxl.chart.chartspace.ExternalData 属
性), 139
tagname (openpyxl.chart.chartspace.Protection 属
性), 139
tagname (openpyxl.chart.data_source.AxDataSource 属性), 140
(openpyxl.chart.data_source.Level 属性),
140
(openpyxl.chart.data_source.StrData 属性),
142
(openpyxl.chart.data_source.StrRef 属性),
142
(openpyxl.chart.data_source.StrVal 属性),
        142 tagname (openpyxl.chart.error_bar.ErrorBars 属性),
        144 tagname (openpyxl.chart.label.DataLabel 属性), 145 tagname (openpyxl.chart.label.DataLabelList 属性),
        146 tagname (openpyxl.chart.layout.Layout 属性), 146 tagname (openpyxl.chart.layout.ManualLayout 属性),
        147 tagname (openpyxl.chart.legend.Legend 属性), 148 tagname (openpyxl.chart.legend.LegendEntry 属性),
        148 tagname (openpyxl.chart.line_chart.LineChart 属
性), 149
tagname (openpyxl.chart.line_chart.LineChart3D 属
性), 150
tagname (openpyxl.chart.marker.DataPoint 属性),
        151 tagname (openpyxl.chart.marker.Marker 属性), 151
        tagname (openpyxl.chart.picture.PictureOptions 属
性), 152
tagname (openpyxl.chart.pie_chart.CustomSplit 属
性), 152
tagname (openpyxl.chart.pie_chart.DoughnutChart 属性), 153
tagname (openpyxl.chart.pie_chart.PieChart 属性),
        153 tagname (openpyxl.chart.pie_chart.PieChart3D 属
性), 153
tagname (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
tagname (openpyxl.chart.pivot.PivotFormat 属性),
155

(openpyxl.chart.data_source.MultiLevelStrDatatagname (openpyxl.chart.pivot.PivotSource 属性), 属性), 140	155
(openpyxl.chart.data_source.MultiLevelStrRef tagname (openpyxl.chart.plotarea.DataTable 属性), 属性), 140	156
tagname (openpyxl.chart.surface_chart.BandFormatList	属性), 192
	属性), 168	tagname (openpyxl.drawing.colors.ColorChoice 属
tagname (openpyxl.chart.surface_chart.SurfaceChart	性), 193
	属性), 168	tagname (openpyxl.drawing.colors.ColorMapping 属
tagname (openpyxl.chart.plotarea.PlotArea 属性), 158 tagname (openpyxl.chart.print_settings.PageMargins
属性), 159
tagname (openpyxl.chart.print_settings.PrintSettings
属性), 160
tagname (openpyxl.chart.radar_chart.RadarChart 属
性), 160
tagname (openpyxl.chart.scatter_chart.ScatterChart
属性), 162
tagname (openpyxl.chart.series.Series 属性), 163 tagname (openpyxl.chart.series.SeriesLabel 属性),
164
tagname (openpyxl.chart.shapes.GraphicalProperties
属性), 167
tagname (openpyxl.chart.stock_chart.StockChart 属
性), 167
tagname (openpyxl.chart.surface_chart.BandFormat
属性), 168属性), 176
tagname (openpyxl.chartsheet.publish.WebPublishItem
属性), 176
tagname (openpyxl.chartsheet.publish.WebPublishItems
属性), 177
tagname (openpyxl.chartsheet.relation.SheetBackgroundPicture
属性), 180
tagname (openpyxl.chartsheet.views.ChartsheetView
属性), 180
tagname (openpyxl.chartsheet.views.ChartsheetViewList
属性), 180
tagname (openpyxl.comments.author.AuthorList 属
性), 181
tagname (openpyxl.comments.comment_sheet.CommentRecord 属性), 181
tagname (openpyxl.comments.comment_sheet.CommentSheet 属性), 182
tagname (openpyxl.descriptors.serialisable.Serialisabletagname (openpyxl.chart.surface_chart.SurfaceChart3D	性), 195
属性), 169
tagname (openpyxl.chart.text.RichText 属性), 169 tagname (openpyxl.chart.text.Text 属性), 170 tagname (openpyxl.chart.title.Title 属性), 170 tagname (openpyxl.chart.trendline.Trendline 属性),
172
tagname (openpyxl.chart.trendline.TrendlineLabel 属
性), 172
tagname (openpyxl.chart.updown_bars.UpDownBars 属性), 173
tagname (openpyxl.chartsheet.chartsheet.Chartsheet
属性), 174tagname (openpyxl.drawing.colors.HSLColor 属性),
195
tagname (openpyxl.drawing.colors.RGBPercent 属
性), 195
tagname (openpyxl.drawing.colors.SchemeColor 属
性), 197
tagname (openpyxl.drawing.colors.SystemColor 属
性), 199
tagname (openpyxl.drawing.connector.ConnectorShape
属性), 201
tagname (openpyxl.drawing.connector.ShapeMeta 属
性), 202tagname (openpyxl.chartsheet.custom.CustomChartsheetViewtagname (openpyxl.drawing.effect.GrayscaleEffect 属属性), 175	性), 206
(openpyxl.chartsheet.custom.CustomChartsheetViewstagname (openpyxl.drawing.effect.LuminanceEffect 属性), 175	属性), 208
(openpyxl.chartsheet.properties.ChartsheetPropertiestagname (openpyxl.drawing.effect.OuterShadow 属属性), 175	性), 209
(openpyxl.chartsheet.protection.ChartsheetProtectiontagname (openpyxl.drawing.effect.TintEffect 属性),

        212 tagname (openpyxl.drawing.fill.Blip 属性), 214 tagname (openpyxl.drawing.fill.BlipFillProperties 属
性), 215
tagname (openpyxl.drawing.fill.GradientFillProperties 属性), 215
tagname (openpyxl.drawing.fill.GradientStop 属性),
        217 tagname (openpyxl.drawing.fill.LinearShadeProperties 属性), 217
tagname (openpyxl.drawing.fill.PathShadeProperties 属性), 217
tagname (openpyxl.drawing.fill.PatternFillProperties 属性), 218
tagname (openpyxl.drawing.fill.RelativeRect 属性),
219
(openpyxl.drawing.graphic.GraphicFrame 属性), 230
(openpyxl.drawing.graphic.GraphicObject 属性), 231
(openpyxl.drawing.graphic.NonVisualGraphicFrame 属性), 232
tagname (openpyxl.drawing.graphic.NonVisualGraphicFrameProperties 属性), 232
tagname (openpyxl.drawing.line.DashStop 属性), 233 tagname (openpyxl.drawing.line.LineEndProperties 属性), 233
tagname (openpyxl.drawing.line.LineProperties 属
性), 234
tagname (openpyxl.drawing.picture.NonVisualPictureProperties 属性), 235
tagname (openpyxl.drawing.picture.PictureFrame 属

tagname (openpyxl.drawing.fill.SolidColorFillProperties	性), 235
	属性), 220	tagname (openpyxl.drawing.picture.PictureLocking 属
tagname (openpyxl.drawing.fill.StretchInfoProperties	性), 236
	属性), 220	tagname (openpyxl.drawing.picture.PictureNonVisual
tagname (openpyxl.drawing.geometry.Bevel 属性),	属性), 236
	222	tagname (openpyxl.drawing.properties.GroupLocking
tagname (openpyxl.drawing.geometry.Camera 属性),	属性), 237
	222	tagname (openpyxl.drawing.properties.GroupShapeProperties
tagname (openpyxl.drawing.geometry.GroupTransform2D	属性), 238
	属性), 224	tagname (openpyxl.drawing.properties.NonVisualDrawingProps
tagname (openpyxl.drawing.geometry.LightRig 属性),	属性), 238
	225	tagname (openpyxl.drawing.properties.NonVisualDrawingShapeProps
tagname (openpyxl.drawing.geometry.Point2D 属性),	属性), 239
	225	tagname (openpyxl.drawing.properties.NonVisualGroupDrawingShapeP
tagname (openpyxl.drawing.geometry.Point3D 属性),	属性), 239
	225	tagname (openpyxl.drawing.properties.NonVisualGroupShape
tagname (openpyxl.drawing.geometry.PositiveSize2D	属性), 239
	属性), 226	tagname (openpyxl.drawing.relation.ChartRelation 属
tagname (openpyxl.drawing.geometry.SphereCoords 性), 239 属性), 229 tagname (openpyxl.drawing.spreadsheet_drawing.AbsoluteAnchor
  (openpyxl.drawing.geometry.Transform2D	属性), 240 属性), 229	tagname (openpyxl.drawing.spreadsheet_drawing.AnchorMarker
	(openpyxl.drawing.geometry.Vector3D 属	属性), 241
	性), 230	tagname (openpyxl.drawing.spreadsheet_drawing.OneCellAnchor
	(openpyxl.drawing.graphic.GraphicData 属	属性), 241
	性), 230	tagname (openpyxl.drawing.spreadsheet_drawing.SpreadsheetDrawing
	属性), 242	性), 271
tagname (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchortagname (openpyxl.packaging.workbook.FileRecoveryProperties
	属性), 242	属性), 272
tagname (openpyxl.drawing.text.CharacterProperties tagname (openpyxl.packaging.workbook.PivotCache
	属性), 245	属性), 272
tagname (openpyxl.drawing.text.Font 属性), 246	tagname (openpyxl.packaging.workbook.WorkbookPackage
tagname (openpyxl.drawing.text.Hyperlink 属性), 247	属性), 273
tagname (openpyxl.drawing.text.LineBreak 属性), 247 tagname (openpyxl.pivot.cache.CacheDefinition 属
tagname (openpyxl.drawing.text.ListStyle 属性), 248	性), 276
tagname (openpyxl.drawing.text.Paragraph 属性), 249 tagname (openpyxl.pivot.cache.CacheField 属性), 277
tagname (openpyxl.drawing.text.ParagraphProperties tagname (openpyxl.pivot.cache.CacheHierarchy 属
	属性), 251	性), 279
tagname (openpyxl.drawing.text.RegularTextRun 属 tagname (openpyxl.pivot.cache.CacheSource 属性), 性), 251	279
tagname (openpyxl.drawing.text.RichTextProperties tagname (openpyxl.pivot.cache.CalculatedItem 属性),
	属性), 253	279
tagname (openpyxl.formatting.formatting.ConditionalFormattingtagname (openpyxl.pivot.cache.CalculatedMember 属
	属性), 256	性), 280
tagname (openpyxl.formatting.rule.ColorScale 属性), tagname (openpyxl.pivot.cache.Consolidation 属性),
256 280
tagname (openpyxl.formatting.rule.DataBar 属性), tagname (openpyxl.pivot.cache.DiscretePr 属性), 280
257 tagname (openpyxl.pivot.cache.FieldGroup 属性), 281
tagname (openpyxl.formatting.rule.FormatObject 属 tagname (openpyxl.pivot.cache.FieldUsage 属性), 281 性), 257 tagname (openpyxl.pivot.cache.GroupItems 属性),
tagname (openpyxl.formatting.rule.IconSet 属性),	282
258 tagname (openpyxl.pivot.cache.GroupLevel 属性), 282
tagname (openpyxl.formatting.rule.Rule 属性), 259	tagname (openpyxl.pivot.cache.GroupMember 属性),
tagname (openpyxl.packaging.core.DocumentProperties	282
	属性), 265	tagname (openpyxl.pivot.cache.Groups 属性), 283
tagname (openpyxl.packaging.extended.ExtendedPropertiestagname (openpyxl.pivot.cache.LevelGroup 属性), 283
	属性), 268	tagname (openpyxl.pivot.cache.MeasureDimensionMap
tagname (openpyxl.packaging.manifest.FileExtension	属性), 284
	属性), 268	tagname (openpyxl.pivot.cache.MeasureGroup 属性),
tagname (openpyxl.packaging.manifest.Manifest 属	284
	性), 269	tagname (openpyxl.pivot.cache.OLAPSet 属性), 284
tagname (openpyxl.packaging.manifest.Override 属 tagname (openpyxl.pivot.cache.Page 属性), 286
	性), 269	tagname (openpyxl.pivot.cache.PageItem 属性), 286
(openpyxl.packaging.relationship.Relationship tagname (openpyxl.pivot.cache.PCDKPI 属性), 285
	属性), 270	tagname (openpyxl.pivot.cache.PCDSDTCEntries 属
(openpyxl.packaging.relationship.RelationshipList 性), 286
	属性), 270	tagname (openpyxl.pivot.cache.PivotDimension 属
	(openpyxl.packaging.workbook.ChildSheet 属	性), 286

tagname (openpyxl.pivot.cache.Query 属性), 287
tagname (openpyxl.pivot.cache.QueryCache 属性),
        287 tagname (openpyxl.pivot.cache.RangePr 属性), 287 tagname (openpyxl.pivot.cache.RangeSet 属性), 288 tagname (openpyxl.pivot.cache.ServerFormat 属性),
        288 tagname (openpyxl.pivot.cache.ServerFormatList 属
性), 288
tagname (openpyxl.pivot.cache.SharedItems 属性),
        290 tagname (openpyxl.pivot.cache.TupleCache 属性),
        290 tagname (openpyxl.pivot.cache.WorksheetSource 属
性), 291
tagname (openpyxl.pivot.fields.Boolean 属性), 291 tagname (openpyxl.pivot.fields.DateTimeField 属性),
        292 tagname (openpyxl.pivot.fields.Error 属性), 292 tagname (openpyxl.pivot.fields.Index 属性), 293 tagname (openpyxl.pivot.fields.Missing 属性), 293 tagname (openpyxl.pivot.fields.Number 属性), 294 tagname (openpyxl.pivot.fields.Text 属性), 295 tagname (openpyxl.pivot.record.Record 属性), 296
        tagname (openpyxl.pivot.record.RecordList 属性), 297 tagname (openpyxl.pivot.table.ChartFormat 属性),
        298 tagname (openpyxl.pivot.table.ColHierarchiesUsage 属性), 298
tagname (openpyxl.pivot.table.ConditionalFormat 属
性), 298
tagname (openpyxl.pivot.table.DataField 属性), 299 tagname (openpyxl.pivot.table.FieldItem 属性), 300 tagname (openpyxl.pivot.table.Format 属性), 300 tagname (openpyxl.pivot.table.HierarchyUsage 属性),
300
(openpyxl.pivot.table.Location 属性), 301
(openpyxl.pivot.table.MemberList 属性), 301 (openpyxl.pivot.table.MemberProperty 属
性), 301
(openpyxl.pivot.table.PageField 属性), 302
(openpyxl.pivot.table.PivotArea 属性), 303 (openpyxl.pivot.table.PivotField 属性), 306
(openpyxl.pivot.table.PivotFilter 属性), 307
(openpyxl.pivot.table.PivotHierarchy 属性),
309
(openpyxl.pivot.table.PivotTableStyle 属性),
        309 tagname (openpyxl.pivot.table.Reference 属性), 311 tagname (openpyxl.pivot.table.RowColField 属性),
        311 tagname (openpyxl.pivot.table.RowColItem 属性),
        311 tagname (openpyxl.pivot.table.RowHierarchiesUsage 属性), 311
tagname (openpyxl.pivot.table.TableDefinition 属性),
        317 tagname (openpyxl.styles.alignment.Alignment 属性),
        320 tagname (openpyxl.styles.borders.Border 属性), 322 tagname (openpyxl.styles.cell_style.CellStyle 属性),
        324 tagname (openpyxl.styles.cell_style.CellStyleList 属
性), 324
tagname (openpyxl.styles.cell_style.StyleArray 属性),
        325 tagname (openpyxl.styles.colors.Color 属性), 325 tagname (openpyxl.styles.colors.ColorList 属性), 326 tagname (openpyxl.styles.colors.RgbColor 属性), 326 tagname (openpyxl.styles.differential.DifferentialStyle 属性), 326
tagname (openpyxl.styles.differential.DifferentialStyleList 属性), 327
tagname (openpyxl.styles.fills.Fill 属性), 327 tagname (openpyxl.styles.fills.GradientFill 属性), 328 tagname (openpyxl.styles.fills.PatternFill 属性), 329 tagname (openpyxl.styles.fills.Stop 属性), 329 tagname (openpyxl.styles.fonts.Font 属性), 331 tagname (openpyxl.styles.protection.Protection 属性),
        334 tagname (openpyxl.styles.stylesheet.Stylesheet 属性),
        337 tagname (openpyxl.styles.table.TableStyle 属性), 337
        tagname (openpyxl.styles.table.TableStyleElement 属

tagname (openpyxl.workbook.defined_name.DefinedNametagname (openpyxl.worksheet.cell_watch.CellWatch 属性), 347	属性), 365
tagname (openpyxl.workbook.defined_name.DefinedNameListtagname (openpyxl.worksheet.cell_watch.CellWatches 属性), 348	属性), 366
tagname (openpyxl.workbook.external_link.external.ExternalBooktagname (openpyxl.worksheet.controls.Control 属性), 属性), 344	366
tagname (openpyxl.workbook.external_link.external.ExternalDefinedNametagname (openpyxl.worksheet.controls.ControlProperty 属性), 345	属性), 367
tagname (openpyxl.workbook.external_link.external.ExternalLinktagname (openpyxl.worksheet.controls.Controls 属属性), 345	性), 367
tagname (openpyxl.workbook.external_reference.ExternalReferencetagname (openpyxl.worksheet.custom.CustomProperties 属性), 348	属性), 368
tagname (openpyxl.workbook.function_group.FunctionGrouptagname (openpyxl.worksheet.custom.CustomProperty 属性), 348	属性), 368
tagname (openpyxl.workbook.function_group.FunctionGroupListtagname (openpyxl.worksheet.datavalidation.DataValidation 属性), 348	属性), 369
tagname (openpyxl.workbook.properties.CalcProperties tagname (openpyxl.worksheet.datavalidation.DataValidationList 属性), 349	属性), 370
性), 337
tagname (openpyxl.styles.table.TableStyleList 属性),
338属性), 358
(openpyxl.workbook.web.WebPublishObjectList 属性), 358tagname (openpyxl.workbook.properties.FileVersion tagname (openpyxl.worksheet.dimensions.SheetDimension 属性), 350	属性), 373
tagname (openpyxl.workbook.properties.WorkbookPropertiestagname (openpyxl.worksheet.dimensions.SheetFormatProperties 属性), 351	属性), 373
tagname (openpyxl.workbook.protection.FileSharing tagname (openpyxl.worksheet.drawing.Drawing 属属性), 352	性), 374
tagname (openpyxl.workbook.protection.WorkbookProtectiontagname (openpyxl.worksheet.errors.Extension 属性), 属性), 353	374
tagname (openpyxl.workbook.smart_tags.SmartTag tagname (openpyxl.worksheet.errors.ExtensionList 属属性), 354	性), 374
tagname (openpyxl.workbook.smart_tags.SmartTagList tagname (openpyxl.worksheet.errors.IgnoredError 属属性), 354	性), 375
tagname (openpyxl.workbook.smart_tags.SmartTagPropertiestagname (openpyxl.worksheet.errors.IgnoredErrors 属属性), 354	性), 375
tagname (openpyxl.workbook.views.BookView 属性), tagname (openpyxl.worksheet.filters.AutoFilter 属性),
	355	376
(openpyxl.workbook.views.CustomWorkbookViewtagname (openpyxl.worksheet.filters.ColorFilter 属属性), 357	性), 376
(openpyxl.workbook.web.WebPublishing 属 tagname (openpyxl.worksheet.filters.CustomFilter 属
	性), 359	性), 376
(openpyxl.workbook.web.WebPublishObject tagname (openpyxl.worksheet.filters.CustomFilters 属
性), 376
tagname (openpyxl.worksheet.filters.DateGroupItem
属性), 377
tagname (openpyxl.worksheet.filters.DynamicFilter
属性), 377
tagname (openpyxl.worksheet.filters.FilterColumn 属
性), 378
tagname (openpyxl.worksheet.filters.Filters 属性),
379
tagname (openpyxl.worksheet.filters.IconFilter 属性),
379
tagname (openpyxl.worksheet.filters.SortCondition 属
性), 380
tagname (openpyxl.worksheet.filters.SortState 属性),
380
tagname (openpyxl.worksheet.filters.Top10 属性), 380性), 388
(openpyxl.worksheet.pagebreak.RowBreak 属性), 389
tagname (openpyxl.worksheet.picture.SheetBackgroundPicture
属性), 389
tagname (openpyxl.worksheet.properties.Outline 属
性), 389
tagname (openpyxl.worksheet.properties.PageSetupProperties
属性), 389
tagname (openpyxl.worksheet.properties.WorksheetProperties
属性), 390
tagname (openpyxl.worksheet.protection.SheetProtection
属性), 392
tagname (openpyxl.worksheet.scenario.InputCells 属
性), 393
tagname (openpyxl.worksheet.scenario.Scenario 属tagname (openpyxl.worksheet.header_footer.HeaderFooter	性), 393
属性), 381
tagname (openpyxl.worksheet.hyperlink.Hyperlink 属
性), 382
tagname (openpyxl.worksheet.hyperlink.HyperlinkList
属性), 382
tagname (openpyxl.worksheet.merge.MergeCell 属性),
383
tagname (openpyxl.worksheet.merge.MergeCells 属
性), 383
tagname (openpyxl.worksheet.ole.ObjectAnchor 属
性), 383
tagname (openpyxl.worksheet.ole.ObjectPr 属性), 384 tagname (openpyxl.worksheet.ole.OleObject 属性),
385
tagname (openpyxl.worksheet.ole.OleObjects 属性),
385
tagname (openpyxl.worksheet.page.PageMargins 属
性), 386
tagname (openpyxl.worksheet.page.PrintOptions 属
性), 386tagname (openpyxl.worksheet.scenario.ScenarioList
属性), 394
tagname (openpyxl.worksheet.smart_tag.CellSmartTag
属性), 394
tagname (openpyxl.worksheet.smart_tag.CellSmartTagPr
属性), 394
tagname (openpyxl.worksheet.smart_tag.CellSmartTags
属性), 395
tagname (openpyxl.worksheet.smart_tag.SmartTags
属性), 395
tagname (openpyxl.worksheet.table.Table 属性), 397 tagname (openpyxl.worksheet.table.TableColumn 属
性), 398
tagname (openpyxl.worksheet.table.TableFormula 属
性), 398
tagname (openpyxl.worksheet.table.TablePartList 属
性), 399
tagname (openpyxl.worksheet.table.TableStyleInfo 属
性), 399
tagname (openpyxl.worksheet.table.XMLColumnPropstagname (openpyxl.worksheet.page.PrintPageSetup	属性), 400
	属性), 388	tagname (openpyxl.worksheet.views.SheetView 属性),
tagname (openpyxl.worksheet.pagebreak.Break 属性),	402
	388	tagname (openpyxl.worksheet.views.SheetViewList 属
	(openpyxl.worksheet.pagebreak.ColBreak 属	性), 402

tailEnd (openpyxl.drawing.line.LineProperties 属
性), 234
Target (openpyxl.packaging.relationship.Relationship
属性), 270
target (openpyxl.packaging.relationship.Relationship
属性), 270
target (openpyxl.worksheet.hyperlink.Hyperlink 属
性), 382textHAlign (openpyxl.comments.comment_sheet.Properties
属性), 183
textlink (openpyxl.drawing.connector.Shape 属性),
202
TextNormalAutofit (openpyxl.drawing.text 中的类), 254
TextPoint (openpyxl.descriptors.excel 中的类), 189
textPropertes	(open-TargetMode (openpyxl.packaging.relationship.Relationship pyxl.chart.axis.DisplayUnitsLabel 属性), 属性), 270	129
targetScreenSize	(open- textProperties	(openpyxl.workbook.web.WebPublishing 属性),	pyxl.chart.chartspace.ChartSpace 属性),
	359	138
Template (openpyxl.packaging.extended.ExtendedPropertiestextProperties (openpyxl.chart.legend.Legend 属属性), 267	性), 148
template (openpyxl.workbook.workbook.Workbook 属 textProperties (open性), 362 pyxl.chart.trendline.TrendlineLabel 属 Text (openpyxl.cell.text 中的类), 124 性), 172
text (openpyxl.cell.text.PhoneticText 属性), 124	textRotation (openpyxl.styles.alignment.Alignment
text (openpyxl.cell.text.RichText 属性), 124	属性), 320
text (openpyxl.chart.axis.DisplayUnitsLabel 属性), textVAlign (openpyxl.comments.comment_sheet.Properties
	129	属性), 183
Text (openpyxl.chart.text 中的类), 169 tgtFrame (openpyxl.drawing.text.Hyperlink 属性), text (openpyxl.chart.title.Title 属性), 170 247
text (openpyxl.comments.comment_sheet.CommentRecordtheme (openpyxl.styles.colors.Color 属性), 325
        属性), 181 text (openpyxl.comments.comments.Comment 属
性), 183
Text (openpyxl.descriptors.base 中的类), 187 text (openpyxl.drawing.text.Paragraph 属性), 249 text (openpyxl.formatting.rule.Rule 属性), 259 TEXT (openpyxl.formula.tokenizer.Token 属性), 261 Text (openpyxl.pivot.fields 中的类), 294 text (openpyxl.worksheet.table.TableFormula 属性),
398
text_rotation	(open-
pyxl.styles.alignment.Alignment 属性), 321
TextAxis (openpyxl.chart.axis 中的类), 132
TextBody (openpyxl.chart.pivot.PivotFormat 属性), 155
TextField (openpyxl.drawing.text 中的类), 254thickBot (openpyxl.worksheet.dimensions.RowDimension
属性), 373
thickBottom (openpyxl.worksheet.dimensions.SheetFormatProperties
属性), 373
thicket (openpyxl.workbook.web.WebPublishing 属
性), 359
thickTop (openpyxl.worksheet.dimensions.RowDimension
属性), 373
thickTop (openpyxl.worksheet.dimensions.SheetFormatProperties
属性), 374
thresh (openpyxl.drawing.effect.AlphaBiLevelEffect
属性), 203
thresh (openpyxl.drawing.effect.BiLevelEffect 属性),
203
tickLblPos (openpyxl.chart.axis.DateAxis 属性),
128
tickLblPos (openpyxl.chart.axis.NumericAxis 属
性), 130
tickLblPos (openpyxl.chart.axis.SeriesAxis 属性),
        132 tickLblPos (openpyxl.chart.axis.TextAxis 属性), 133 tickLblSkip (openpyxl.chart.axis.SeriesAxis 属性),
        132 tickLblSkip (openpyxl.chart.axis.TextAxis 属性),
        133 tickMarkSkip (openpyxl.chart.axis.SeriesAxis 属性),
        132 tickMarkSkip (openpyxl.chart.axis.TextAxis 属性),
        133 tile (openpyxl.drawing.fill.BlipFillProperties 属性),
215
TileInfoProperties (openpyxl.drawing.fill 中的类),
        220 tileRect (openpyxl.drawing.fill.GradientFillProperties 属性), 215
time (openpyxl.pivot.cache.CacheHierarchy 属性),
        279 time (openpyxl.pivot.cache.PCDKPI 属性), 285 time_to_days() (在 openpyxl.utils.datetime 模块
中), 340
timedelta_to_days() (在 openpyxl.utils.datetime 模块中), 340
timePeriod (openpyxl.formatting.rule.Rule 属性),
        259 tIns (openpyxl.drawing.text.RichTextProperties 属
性), 253
tint (openpyxl.drawing.colors.SchemeColor 属性),
        197 tint (openpyxl.drawing.colors.SystemColor 属性),
        199 tint (openpyxl.drawing.fill.Blip 属性), 214 tint (openpyxl.styles.colors.Color 属性), 325
        TintEffect (openpyxl.drawing.effect 中的类), 212 title (openpyxl.chart.axis.DateAxis 属性), 128 title (openpyxl.chart.axis.NumericAxis 属性), 130 title (openpyxl.chart.axis.SeriesAxis 属性), 132 title (openpyxl.chart.axis.TextAxis 属性), 134 title (openpyxl.chart.chartspace.ChartContainer 属
性), 137
title (openpyxl.chart.series.Series 属性), 163 Title (openpyxl.chart.title 中的类), 170 title (openpyxl.chartsheet.publish.WebPublishItem 属性), 176
title (openpyxl.drawing.properties.NonVisualDrawingProps 属性), 238
title (openpyxl.packaging.core.DocumentProperties 属性), 265
title (openpyxl.workbook.web.WebPublishObject 属
性), 358
title_maker() (在 openpyxl.chart.title 模块中), 171 TitleDescriptor (openpyxl.chart.title 中的类), 170
TitlesOfParts	(open-
pyxl.packaging.extended.ExtendedProperties
属性), 267
to (openpyxl.drawing.spreadsheet_drawing.TwoCellAnchor 属性), 242
to (openpyxl.worksheet.ole.ObjectAnchor 属性), 384 to_array() (openpyxl.styles.cell_style.CellStyle 方
法), 324
to_excel() (在 openpyxl.utils.datetime 模块中), 340
to_ISO8601() (在 openpyxl.utils.datetime 模块中),
        340 to_tree() (openpyxl.chart.chartspace.ChartSpace 方
法), 139
to_tree() (openpyxl.chart.plotarea.PlotArea 方法),
        158 to_tree() (openpyxl.chart.series.Series 方法), 164 to_tree() (openpyxl.chart.text.Text 方法), 170 to_tree() (openpyxl.chartsheet.chartsheet.Chartsheet 方法), 174
to_tree() (openpyxl.comments.comment_sheet.CommentSheet 方法), 182
to_tree() (openpyxl.descriptors.nested.EmptyTag 方法), 189
to_tree() (openpyxl.descriptors.nested.Nested 方
法), 189
to_tree() (openpyxl.descriptors.nested.NestedText 方法), 190
to_tree() (openpyxl.descriptors.sequence.MultiSequence 方法), 190
to_tree() (openpyxl.descriptors.sequence.NestedSequence

	方法), 191	法), 392
to_tree() (openpyxl.descriptors.sequence.Sequence to_tree() (openpyxl.worksheet.table.Table 方法), 方法), 191	397
to_tree() (openpyxl.descriptors.sequence.ValueSequenceToken (openpyxl.formula.tokenizer 中的类), 260
        方法), 191	TOKEN_ENDERS	(opento_tree() (openpyxl.descriptors.serialisable.Serialisable	pyxl.formula.tokenizer.Tokenizer 属性), 方法), 192	261
to_tree() (openpyxl.packaging.core.NestedDateTime Tokenizer (openpyxl.formula.tokenizer 中的类), 261 方法), 265	TokenizerError, 262
to_tree() (openpyxl.packaging.core.QualifiedDateTimetooltip (openpyxl.drawing.text.Hyperlink 属性), 247 方法), 265 tooltip (openpyxl.worksheet.hyperlink.Hyperlink 属
to_tree() (openpyxl.packaging.extended.ExtendedProperties 性), 382
	方法), 268	top (openpyxl.chart.print_settings.PageMargins 属
to_tree() (openpyxl.packaging.manifest.Manifest 方	性), 159
	法), 269	top (openpyxl.drawing.fill.RelativeRect 属性), 219
to_tree() (openpyxl.packaging.relationship.RelationshipListtop (openpyxl.styles.borders.Border 属性), 322
        方法), 270 top (openpyxl.styles.fills.GradientFill 属性), 328 to_tree() (openpyxl.packaging.workbook.WorkbookPackagetop (openpyxl.worksheet.cell_range.CellRange 属性),
	方法), 273	365
to_tree() (openpyxl.pivot.cache.CacheDefinition 方 top (openpyxl.worksheet.filters.Top10 属性), 380 法), 276	top (openpyxl.worksheet.page.PageMargins 属性),
to_tree() (openpyxl.pivot.record.RecordList 方法),	386
	297	Top10 (openpyxl.worksheet.filters 中的类), 380
to_tree() (openpyxl.pivot.table.TableDefinition 方 top10 (openpyxl.worksheet.filters.FilterColumn 属法), 317	性), 378
to_tree() (openpyxl.styles.fills.GradientFill 方法), topAutoShow (openpyxl.pivot.table.PivotField 属性),
328 306
to_tree() (openpyxl.styles.fills.PatternFill 方法), topLeftCell (openpyxl.worksheet.views.Pane 属性),
329 400
to_tree() (openpyxl.styles.stylesheet.Stylesheet 方 topLeftCell (openpyxl.worksheet.views.SheetView 法), 337	属性), 402
to_tree() (openpyxl.workbook.external_link.external.ExternalLinktostring() (在 openpyxl.comments.comment_sheet 方法), 345	模块中), 183
to_tree() (openpyxl.worksheet.datavalidation.DataValidationListtostring() (在 openpyxl.comments.shape_writer 模方法), 370	块中), 184
to_tree() (openpyxl.worksheet.dimensions.ColumnDimensiontostring() (在 openpyxl.packaging.core 模块中), 方法), 371	265
to_tree() (openpyxl.worksheet.dimensions.DimensionHoldertostring() (在 openpyxl.packaging.manifest 模块方法), 372	中), 269
to_tree() (openpyxl.worksheet.header_footer.HeaderFooterItemtostring() (在 openpyxl.packaging.relationship 模块方法), 382	中), 270
to_tree() (openpyxl.worksheet.related.Related 方 tostring() (在 openpyxl.pivot.cache 模块中), 291

tostring() (在 openpyxl.pivot.record 模块中), 297 tostring() (在 openpyxl.pivot.table 模块中), 318 tostring() (在 openpyxl.worksheet.table 模块中),
        400
        tostring() (在 openpyxl.writer.excel 模块中), 408 tostring() (在 openpyxl.xml.functions 模块中), 409
        totalsRowBorderDxfId	(openpyxl.worksheet.table.Table 属性), 397
totalsRowCellStyle	(openpyxl.worksheet.table.Table 属性), 397
totalsRowCellStyle	(openpyxl.worksheet.table.TableColumn	属性), 398
totalsRowCount (openpyxl.worksheet.table.Table 属
性), 397
totalsRowDxfId (openpyxl.worksheet.table.Table 属
性), 397
totalsRowDxfId(open-pyxl.worksheet.table.TableColumn 性), 398属totalsRowFormula(open-pyxl.worksheet.table.TableColumn 性), 398属totalsRowFunction(open-pyxl.worksheet.table.TableColumn 性), 398属totalsRowLabel(open-pyxl.worksheet.table.TableColumn 性), 398属totalsRowShown (openpyxl.worksheet.table.Table 属
性), 397
Transform (openpyxl.drawing.colors 中的类), 200
Transform2D (openpyxl.drawing.geometry 中的类),
229
transitionEntry	(open-
pyxl.worksheet.properties.WorksheetProperties
属性), 390
transitionEvaluation	(open-
pyxl.worksheet.properties.WorksheetProperties
属性), 390
translate_col()(open-pyxl.formula.translate.Translator 方法), 262静态translate_formula()(open-pyxl.formula.translate.Translator
262方法),translate_range()(open-pyxl.formula.translate.Translator
法), 263类方translate_row()(open-pyxl.formula.translate.Translator静态方法), 263
Translator (openpyxl.formula.translate 中的类), 262 TranslatorError, 263 trend (openpyxl.pivot.cache.PCDKPI 属性), 285 trendline (openpyxl.chart.series.Series 属性), 164 trendline (openpyxl.chart.series.XYSeries 属性), 165
Trendline (openpyxl.chart.trendline 中的类), 171
TrendlineLabel (openpyxl.chart.trendline 中的类),
        172 trendlineLbl (openpyxl.chart.trendline.Trendline

TotalTime (openpyxl.packaging.extended.ExtendedProperties 属性), 172
	属性), 267	trendlineType (openpyxl.chart.trendline.Trendline
tpl (openpyxl.pivot.fields.TupleList 属性), 296	属性), 172 tpls (openpyxl.pivot.cache.OLAPSet 属性), 284	Tuple (openpyxl.descriptors.base 中的类), 187 tpls (openpyxl.pivot.cache.Query 属性), 287	Tuple (openpyxl.pivot.fields 中的类), 295 tpls (openpyxl.pivot.fields.Error 属性), 292	TupleCache (openpyxl.pivot.cache 中的类), 290 tpls (openpyxl.pivot.fields.Missing 属性), 293	tupleCache (openpyxl.pivot.cache.CacheDefinition tpls (openpyxl.pivot.fields.Number 属性), 294	属性), 276
tpls (openpyxl.pivot.fields.Text 属性), 295	TupleList (openpyxl.pivot.fields 中的类), 296 transform (openpyxl.chart.shapes.GraphicalProperties TwoCellAnchor	(open属性), 167	pyxl.drawing.spreadsheet_drawing 中的
	类), 242	type (openpyxl.cell.text.PhoneticProperties 属性),
twoCellAnchor	(open-	124
pyxl.drawing.spreadsheet_drawing.SpreadsheetDrawingtype (openpyxl.chart.pie_chart.ProjectedPieChart

属性), 242
twoDigitTextYear	(open-
pyxl.worksheet.errors.IgnoredError 属性), 375
tx (openpyxl.chart.axis.DisplayUnitsLabel 属性), 129 tx (openpyxl.chart.series.Series 属性), 164 tx (openpyxl.chart.series.XYSeries 属性), 165 tx (openpyxl.chart.title.Title 属性), 170
tx (openpyxl.chart.trendline.TrendlineLabel 属性),
172
tx (openpyxl.drawing.fill.TileInfoProperties 属性),
221
tx1 (openpyxl.drawing.colors.ColorMapping 属性),
195
tx2 (openpyxl.drawing.colors.ColorMapping 属性),
195
属性), 154
type (openpyxl.chart.radar_chart.RadarChart 属性),
160
type (openpyxl.drawing.effect.EffectContainer 属性),
204
type (openpyxl.drawing.line.LineEndProperties 属
性), 233
type (openpyxl.drawing.text.AutonumberBullet 属
性), 242
type (openpyxl.drawing.text.TextField 属性), 254 type (openpyxl.formatting.rule.FormatObject 属性),
257
type (openpyxl.formatting.rule.Rule 属性), 259 type (openpyxl.formula.tokenizer.Token 属性), 261
Type (openpyxl.packaging.relationship.Relationship
txBax (openpyxl.drawing.properties.NonVisualDrawingShapePropstype (openpyxl.pivot.cache.CacheSource 属性), 279属性), 270

属性), 239
txBody (openpyxl.drawing.connector.Shape 属性),
        202 txPr (openpyxl.chart.axis.DateAxis 属性), 128 txPr (openpyxl.chart.axis.DisplayUnitsLabel 属性),
        129 txPr (openpyxl.chart.axis.NumericAxis 属性), 131 txPr (openpyxl.chart.axis.SeriesAxis 属性), 132 txPr (openpyxl.chart.axis.TextAxis 属性), 134 txPr (openpyxl.chart.chartspace.ChartSpace 属性),
        139 txPr (openpyxl.chart.label.DataLabel 属性), 145 txPr (openpyxl.chart.label.DataLabelList 属性), 146 txPr (openpyxl.chart.legend.Legend 属性), 148 txPr (openpyxl.chart.legend.LegendEntry 属性), 148 txPr (openpyxl.chart.pivot.PivotFormat 属性), 155 txPr (openpyxl.chart.plotarea.DataTable 属性), 156 txPr (openpyxl.chart.title.Title 属性), 170 txPr (openpyxl.chart.trendline.TrendlineLabel 属性),
        172 ty (openpyxl.drawing.fill.TileInfoProperties 属性),
221
type (openpyxl.pivot.table.ConditionalFormat 属性),
        298 type (openpyxl.pivot.table.PivotArea 属性), 303 type (openpyxl.pivot.table.PivotFilter 属性), 307 type (openpyxl.styles.colors.Color 属性), 325
        type (openpyxl.styles.fills.GradientFill 属性), 328 type (openpyxl.styles.table.TableStyleElement 属性),
        337 type (openpyxl.workbook.defined_name.DefinedName 属性), 347
type (openpyxl.worksheet.datavalidation.DataValidation 属性), 369
type (openpyxl.worksheet.filters.DynamicFilter 属
性), 377
type (openpyxl.worksheet.smart_tag.CellSmartTag 属性), 394
Typed (openpyxl.descriptors.base 中的类), 187 typeface (openpyxl.drawing.text.Font 属性), 246
tzname() (openpyxl.utils.datetime.GMT 方法), 340
U
u (openpyxl.cell.text.InlineFont 属性), 123
u (openpyxl.drawing.text.CharacterProperties 属性),	pyxl.styles.fonts.Font 属性), 329
	245	undone (openpyxl.worksheet.scenario.InputCells 属
u (openpyxl.pivot.fields.Boolean 属性), 291	性), 393
u (openpyxl.pivot.fields.DateTimeField 属性), 292 unescape() (在 openpyxl.utils.escape 模块中), 340 u (openpyxl.pivot.fields.Error 属性), 292 union() (openpyxl.worksheet.cell_range.CellRange u (openpyxl.pivot.fields.Missing 属性), 293 方法), 365
u (openpyxl.pivot.fields.Number 属性), 294	unique (openpyxl.descriptors.sequence.Sequence 属
u (openpyxl.pivot.fields.Text 属性), 295	性), 191
u (openpyxl.styles.fonts.Font 属性), 331 uniqueList (openpyxl.pivot.cache.CacheField 属性), uFill (openpyxl.drawing.text.CharacterProperties 属 277
	性), 245	uniqueMemberProperty	(open-
uFillTx (openpyxl.drawing.text.CharacterProperties	pyxl.pivot.table.PivotField 属性), 306
	属性), 245	uniqueName (openpyxl.pivot.cache.CacheHierarchy
uiObject (openpyxl.comments.comment_sheet.Properties	属性), 279
	属性), 183	uniqueName (openpyxl.pivot.cache.GroupLevel 属性),
uiObject (openpyxl.worksheet.controls.ControlProperty	282属性), 367
uiObject (openpyxl.worksheet.ole.ObjectPr 属性),
        384 uLn (openpyxl.drawing.text.CharacterProperties 属
性), 246
uLnTx (openpyxl.drawing.text.CharacterProperties 属
性), 246
un (openpyxl.pivot.fields.Error 属性), 293 un (openpyxl.pivot.fields.Missing 属性), 294 un (openpyxl.pivot.fields.Number 属性), 294 un (openpyxl.pivot.fields.Text 属性), 295 unbalanced (openpyxl.pivot.cache.CacheHierarchy 属性), 279
unbalancedGroup	(openpyxl.pivot.cache.CacheHierarchy 属性),
        279 unbind() (openpyxl.comments.comments.Comment 方法), 183
underline (openpyxl.styles.fonts.Font 属性), 331
UNDERLINE_DOUBLE (openpyxl.styles.fonts.Font 属
性), 329
UNDERLINE_DOUBLE_ACCOUNTING	(openpyxl.styles.fonts.Font 属性), 329
UNDERLINE_SINGLE (openpyxl.styles.fonts.Font 属
性), 329
UNDERLINE_SINGLE_ACCOUNTING	(openuniqueName (openpyxl.pivot.cache.GroupMember 属
性), 283
uniqueName (openpyxl.pivot.cache.LevelGroup 属性),
        283 uniqueName (openpyxl.pivot.cache.PCDKPI 属性),
        285 uniqueName (openpyxl.pivot.cache.PivotDimension 属性), 286
uniqueName (openpyxl.worksheet.table.TableColumn 属性), 398
uniqueParent (openpyxl.pivot.cache.LevelGroup 属
性), 283
UniversalMeasure (openpyxl.descriptors.excel 中的
类), 189
unlockedFormula	(openpyxl.worksheet.errors.IgnoredError 属性), 375
unmerge_cells()	(openpyxl.worksheet.worksheet.Worksheet 方法), 407
up (openpyxl.drawing.geometry.Backdrop 属性), 221 upBars (openpyxl.chart.updown_bars.UpDownBars 属性), 173
updatedVersion	(openpyxl.pivot.table.TableDefinition 属性),
317
updateLinks (openpyxl.workbook.properties.WorkbookPropertiesutcoffset() (openpyxl.utils.datetime.GMT 方法),属性), 351
upDownBars (openpyxl.chart.line_chart.LineChart 属
性), 149
upDownBars (openpyxl.chart.line_chart.LineChart3D 属性), 150
upDownBars (openpyxl.chart.stock_chart.StockChart 属性), 167
UpDownBars (openpyxl.chart.updown_bars 中的类),
172
upgradeOnRefresh	(openpyxl.pivot.cache.CacheDefinition 属性),
        276 upright (openpyxl.drawing.text.RichTextProperties 属性), 253
uri (openpyxl.descriptors.excel.Extension 属性), 188 uri (openpyxl.drawing.graphic.GraphicData 属性),
        230 uri (openpyxl.worksheet.errors.Extension 属性), 374 url (openpyxl.workbook.smart_tags.SmartTag 属性),
        354 useA (openpyxl.drawing.effect.ColorChangeEffect 属
性), 204
useAutoFormatting	(openpyxl.pivot.table.TableDefinition 属性),
317
useFirstPageNumber	(openpyxl.worksheet.page.PrintPageSetup 属性), 388
usePrinterDefaults	(openpyxl.worksheet.page.PrintPageSetup 属性), 388
user (openpyxl.pivot.cache.GroupLevel 属性), 282 user (openpyxl.worksheet.scenario.Scenario 属性),
393
userInterface	(openpyxl.chart.chartspace.Protection 属性),
        139 userName (openpyxl.workbook.protection.FileSharing 属性), 352
userShapes (openpyxl.chart.chartspace.ChartSpace 属性), 139
340
V
v (openpyxl.chart.data_source.NumVal 属性), 142 v (openpyxl.chart.data_source.StrVal 属性), 142 v (openpyxl.chart.series.SeriesLabel 属性), 164 v (openpyxl.pivot.fields.Boolean 属性), 291 v (openpyxl.pivot.fields.DateTimeField 属性), 292 v (openpyxl.pivot.fields.Error 属性), 293 v (openpyxl.pivot.fields.Index 属性), 293 v (openpyxl.pivot.fields.Number 属性), 294 v (openpyxl.pivot.fields.Text 属性), 295 v (openpyxl.workbook.external_link.external.ExternalCell 属性), 344
vacatedStyle (openpyxl.pivot.table.TableDefinition 属性), 318
val (openpyxl.chart.error_bar.ErrorBars 属性), 144 val (openpyxl.chart.series.Series 属性), 164 val (openpyxl.drawing.colors.SchemeColor 属性),
        197 val (openpyxl.drawing.colors.SystemColor 属性), 199 val (openpyxl.formatting.rule.FormatObject 属性),
        257 val (openpyxl.worksheet.filters.CustomFilter 属性),
        376 val (openpyxl.worksheet.filters.DynamicFilter 属性),
        377 val (openpyxl.worksheet.filters.Top10 属性), 380
        val (openpyxl.worksheet.scenario.InputCells 属性),
        393 val (openpyxl.worksheet.smart_tag.CellSmartTagPr 属性), 394
valAx (openpyxl.chart.plotarea.PlotArea 属性), 158 validation_type	(open-
pyxl.worksheet.datavalidation.DataValidation
属性), 369
valIso (openpyxl.worksheet.filters.DynamicFilter 属
性), 377
value (openpyxl.cell.cell.Cell 属性), 121 value (openpyxl.cell.cell.MergedCell 属性), 121 value (openpyxl.cell.read_only.EmptyCell 属性), 122 value (openpyxl.cell.read_only.ReadOnlyCell 属性),
        122 value (openpyxl.chart.series.SeriesLabel 属性), 164 value (openpyxl.drawing.text.RegularTextRun 属性),
        251 value (openpyxl.formula.tokenizer.Token 属性), 261 value (openpyxl.pivot.cache.PCDKPI 属性), 285 value (openpyxl.styles.colors.Color 属性), 325
        value (openpyxl.workbook.defined_name.DefinedName 属性), 347
ValueDescriptor (openpyxl.formatting.rule 中的类),
        259 values (openpyxl.worksheet.worksheet.Worksheet 属
性), 407
ValueSequence (openpyxl.descriptors.sequence 中的
类), 191
varPSubtotal (openpyxl.pivot.table.PivotField 属
性), 306
varPSubtotal (openpyxl.pivot.table.Reference 属性),
        311 varSubtotal (openpyxl.pivot.table.PivotField 属性),
        306 varSubtotal (openpyxl.pivot.table.Reference 属性),
        311 varyColors (openpyxl.chart.area_chart.AreaChart 属性), 126
varyColors (openpyxl.chart.area_chart.AreaChart3D 属性), 126
varyColors (openpyxl.chart.bar_chart.BarChart 属
性), 134
varyColors (openpyxl.chart.bar_chart.BarChart3D 属性), 135
varyColors (openpyxl.chart.bubble_chart.BubbleChart 属性), 136
varyColors (openpyxl.chart.line_chart.LineChart 属
性), 149
varyColors (openpyxl.chart.line_chart.LineChart3D 属性), 150
varyColors (openpyxl.chart.pie_chart.DoughnutChart 属性), 153
varyColors (openpyxl.chart.pie_chart.PieChart 属
性), 153
varyColors (openpyxl.chart.pie_chart.PieChart3D 属性), 153
varyColors (openpyxl.chart.pie_chart.ProjectedPieChart 属性), 154
varyColors (openpyxl.chart.radar_chart.RadarChart 属性), 160
varyColors (openpyxl.chart.scatter_chart.ScatterChart 属性), 162
vbProcedure (openpyxl.workbook.defined_name.DefinedName 属性), 347
Vector3D (openpyxl.drawing.geometry 中的类), 229
VectorLpstr (openpyxl.packaging.extended 中的类), 268
VectorVariant (openpyxl.packaging.extended 中的
类), 268
version (openpyxl.packaging.core.DocumentProperties 属性), 265
vert (openpyxl.drawing.text.RichTextProperties 属
性), 253
vertAlign (openpyxl.cell.text.InlineFont 属性), 123 vertAlign (openpyxl.styles.fonts.Font 属性), 331 vertical (openpyxl.styles.alignment.Alignment 属
性), 321
vertical (openpyxl.styles.borders.Border 属性), 322 verticalCentered	(openpyxl.worksheet.page.PrintOptions 属性),
        386 verticalDpi (openpyxl.worksheet.page.PrintPageSetup 属性), 388
vertOverflow	(openpyxl.drawing.text.RichTextProperties 属性), 253
view (openpyxl.worksheet.views.SheetView 属性), 402
view3D (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
view3D (openpyxl.chart.chartspace.ChartContainer 属性), 137
visibility (openpyxl.workbook.views.BookView 属
性), 355
visualProperties	(openpyxl.drawing.graphic.GroupShape 属性),
231
visualTotals (openpyxl.pivot.table.TableDefinition weight (openpyxl.pivot.cache.PCDKPI 属性), 285
	属性), 318	whitespace() (在 openpyxl.xml.functions 模块中),
vm (openpyxl.workbook.external_link.external.ExternalCell	409
	属性), 344	width (openpyxl.chart.layout.ManualLayout 属性),
vml (openpyxl.comments.shape_writer.ShapeWriter	147
        属性), 184	width (openpyxl.drawing.drawing.Drawing 属性), 202 vml (openpyxl.workbook.web.WebPublishing 属性), width (openpyxl.drawing.geometry.PositiveSize2D 属
	359	性), 226
vml_path (openpyxl.comments.shape_writer.ShapeWriterwidth (openpyxl.drawing.line.LineProperties 属性),属性), 184
W
w (openpyxl.chart.layout.ManualLayout 属性), 147 w (openpyxl.drawing.geometry.Bevel 属性), 222 w (openpyxl.drawing.geometry.Path2D 属性), 225 w (openpyxl.drawing.line.LineEndProperties 属性),
        233 w (openpyxl.drawing.line.LineProperties 属性), 234 webPublishing	(openpyxl.packaging.workbook.WorkbookPackage
属性), 273
WebPublishing (openpyxl.workbook.web 中的类), 358
WebPublishItem (openpyxl.chartsheet.publish 中的
类), 176
webPublishItem	(openpyxl.chartsheet.publish.WebPublishItems
属性), 177
webPublishItems	(openpyxl.chartsheet.chartsheet.Chartsheet 属性), 174
WebPublishItems (openpyxl.chartsheet.publish 中的
类), 176
WebPublishObject (openpyxl.workbook.web 中的类),
358
webPublishObject	(openpyxl.workbook.web.WebPublishObjectList 属性), 358
WebPublishObjectList (openpyxl.workbook.web 中的类), 358
webPublishObjects	(openpyxl.packaging.workbook.WorkbookPackage
属性), 273
        234 width (openpyxl.worksheet.dimensions.ColumnDimension 属性), 371
windowHeight (openpyxl.workbook.views.BookView 属性), 355
windowHeight	(openpyxl.workbook.views.CustomWorkbookView 属性), 357
windowProtection	(openpyxl.worksheet.views.SheetView 属性),
        402 windowWidth (openpyxl.workbook.views.BookView 属
性), 355
windowWidth (openpyxl.workbook.views.CustomWorkbookView 属性), 357
wireframe (openpyxl.chart.surface_chart.SurfaceChart 属性), 168
wireframe (openpyxl.chart.surface_chart.SurfaceChart3D 属性), 169
wMode (openpyxl.chart.layout.ManualLayout 属性), 147
Words (openpyxl.packaging.extended.ExtendedProperties 属性), 267
Workbook (openpyxl.workbook.workbook 中的类), 359 workbook_password	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 354
workbookAlgorithmName	(open-
pyxl.workbook.protection.WorkbookProtection
        属性), 353 WorkbookAlreadySaved, 341
workbookHashValue	(open-
pyxl.workbook.protection.WorkbookProtection

属性), 353
WorkbookPackage (openpyxl.packaging.workbook 中的类), 272
workbookParameter	(open-
pyxl.workbook.defined_name.DefinedName 属性), 347
WorkbookParser (openpyxl.reader.workbook 中的类),
319
workbookPassword	(open-
pyxl.workbook.protection.WorkbookProtection
属性), 354
workbookPasswordCharacterSet	(open-属性), 362
WorksheetSource (openpyxl.pivot.cache 中的类), 290 worksheetSource	(openpyxl.pivot.cache.CacheSource 属性), 279
wrap (openpyxl.drawing.text.RichTextProperties 属
性), 253
wrap_text (openpyxl.styles.alignment.Alignment 属
性), 321
wrapText (openpyxl.styles.alignment.Alignment 属
性), 321
write() (openpyxl.comments.shape_writer.ShapeWriter
方法), 184pyxl.workbook.protection.WorkbookProtection write_data() (openpyxl.writer.excel.ExcelWriter 方
	属性), 354	法), 407workbookPr (openpyxl.packaging.workbook.WorkbookPackagewrite_only (openpyxl.workbook.workbook.Workbook
	属性), 273	属性), 362
WorkbookProperties (openpyxl.workbook.properties write_shapes()	(open-
	中的类), 350	pyxl.comments.comment_sheet.CommentSheet
workbookProtection	(open-	方法), 182
pyxl.packaging.workbook.WorkbookPackage write_stylesheet() (在 openpyxl.styles.stylesheet
	属性), 273	模块中), 337
WorkbookProtection (openpyxl.workbook.protection write_theme() (在 openpyxl.writer.theme 模块中),
	中的类), 352	408
workbookSaltValue	(open- write_worksheet()	(open-
	pyxl.workbook.protection.WorkbookProtection	pyxl.writer.excel.ExcelWriter 方法), 408
属性), 354 WriteOnlyCell() (在 openpyxl.cell.cell 模块中), 121
workbookSpinCount (open- WSPACE (openpyxl.formula.tokenizer.Token 属性), 261
pyxl.workbook.protection.WorkbookProtection WSPACE_RE (openpyxl.formula.tokenizer.Tokenizer 属
	属性), 354	性), 261
workbookViewId	(open-
X
pyxl.chartsheet.views.ChartsheetView 属性), 180 x (openpyxl.chart.layout.ManualLayout 属性), 147
workbookViewId	(open- x (openpyxl.drawing.geometry.AdjPoint2D 属性), 221
pyxl.worksheet.views.SheetView 属性), x (openpyxl.drawing.geometry.Point2D 属性), 225
402 x (openpyxl.drawing.geometry.Point3D 属性), 225
Worksheet (openpyxl.worksheet.worksheet 中的类), x (openpyxl.drawing.xdr.XDRPoint2D 属性), 255
403 x (openpyxl.pivot.cache.DiscretePr 属性), 281
WorksheetCopy (openpyxl.worksheet.copier 中的类), x (openpyxl.pivot.cache.FieldUsage 属性), 281
	367	x (openpyxl.pivot.fields.Boolean 属性), 291
WorksheetProperties	(open- x (openpyxl.pivot.fields.DateTimeField 属性), 292
	pyxl.worksheet.properties 中的类), 390	x (openpyxl.pivot.fields.Error 属性), 293
worksheets (openpyxl.workbook.workbook.Workbook x (openpyxl.pivot.fields.Missing 属性), 294

x (openpyxl.pivot.fields.Number 属性), 294 x (openpyxl.pivot.fields.Text 属性), 295 x (openpyxl.pivot.record.Record 属性), 296
x (openpyxl.pivot.table.FieldItem 属性), 300 x (openpyxl.pivot.table.Reference 属性), 311 x (openpyxl.pivot.table.RowColField 属性), 311 x (openpyxl.pivot.table.RowColItem 属性), 311 x_axis (openpyxl.chart.area_chart.AreaChart 属性),
        126 x_axis (openpyxl.chart.area_chart.AreaChart3D 属
性), 126
x_axis (openpyxl.chart.bar_chart.BarChart 属性),
        134 x_axis (openpyxl.chart.bar_chart.BarChart3D 属
性), 135
x_axis (openpyxl.chart.bubble_chart.BubbleChart 属
性), 136
x_axis (openpyxl.chart.line_chart.LineChart 属性),
        149 x_axis (openpyxl.chart.line_chart.LineChart3D 属
性), 150
x_axis (openpyxl.chart.radar_chart.RadarChart 属
性), 160
x_axis (openpyxl.chart.scatter_chart.ScatterChart 属性), 162
x_axis (openpyxl.chart.stock_chart.StockChart 属
性), 167
x_axis (openpyxl.chart.surface_chart.SurfaceChart3D 属性), 169
XDRPoint2D (openpyxl.drawing.xdr 中的类), 254
XDRPositiveSize2D (openpyxl.drawing.xdr 中的类),
255
XDRTransform2D (openpyxl.drawing.xdr 中的类), 255 xf (openpyxl.styles.cell_style.CellStyleList 属性), 324 xfId (openpyxl.styles.cell_style.CellStyle 属性), 324 xfId (openpyxl.styles.cell_style.StyleArray 属性),
        325 xfId (openpyxl.styles.named_styles.NamedStyle 属
性), 333
xfrm (openpyxl.chart.shapes.GraphicalProperties 属
        性), 167 xfrm (openpyxl.drawing.graphic.GraphicFrame 属性), 230 xfrm (openpyxl.drawing.properties.GroupShapeProperties 属性), 238
xlm (openpyxl.workbook.defined_name.DefinedName 属性), 347
xmlBased (openpyxl.worksheet.smart_tag.CellSmartTag 属性), 394
xmlColumnPr (openpyxl.worksheet.table.TableColumn 属性), 398
XMLColumnProps (openpyxl.worksheet.table 中的类),
        399 xmlDataType (openpyxl.worksheet.table.XMLColumnProps 属性), 400
xMode (openpyxl.chart.layout.ManualLayout 属性),
        147 xpath (openpyxl.worksheet.table.XMLColumnProps 属性), 400
xSplit (openpyxl.worksheet.views.Pane 属性), 400 xVal (openpyxl.chart.series.Series 属性), 164 xVal (openpyxl.chart.series.XYSeries 属性), 165 xWindow (openpyxl.workbook.views.BookView 属性),
        355 xWindow (openpyxl.workbook.views.CustomWorkbookView 属性), 357
xWindow (openpyxl.worksheet.datavalidation.DataValidationList 属性), 370
XYSeries (openpyxl.chart.series 中的类), 164
Y
y (openpyxl.chart.layout.ManualLayout 属性), 147 y (openpyxl.drawing.geometry.AdjPoint2D 属性), 221 y (openpyxl.drawing.geometry.Point2D 属性), 225 y (openpyxl.drawing.geometry.Point3D 属性), 225 y (openpyxl.drawing.xdr.XDRPoint2D 属性), 255 y_axis (openpyxl.chart.area_chart.AreaChart 属性),
        126 y_axis (openpyxl.chart.area_chart.AreaChart3D 属
性), 126
y_axis (openpyxl.chart.bar_chart.BarChart 属性),
        134 y_axis (openpyxl.chart.bar_chart.BarChart3D 属
性), 135

y_axis (openpyxl.chart.bubble_chart.BubbleChart 属	属性), 374
	性), 136	zoom (openpyxl.drawing.geometry.Camera 属性), 222
y_axis (openpyxl.chart.line_chart.LineChart 属性), zoomScale (openpyxl.chartsheet.views.ChartsheetView
	149	属性), 180
y_axis (openpyxl.chart.line_chart.LineChart3D 属 zoomScale (openpyxl.worksheet.views.SheetView 属
	性), 150	性), 402
y_axis (openpyxl.chart.radar_chart.RadarChart 属 zoomScaleNormal	(open性), 160	pyxl.worksheet.views.SheetView 属性),
y_axis (openpyxl.chart.scatter_chart.ScatterChart	402
        属性), 162	zoomScalePageLayoutView	(openy_axis (openpyxl.chart.stock_chart.StockChart 属	pyxl.worksheet.views.SheetView 属性),
	性), 167	402
y_axis (openpyxl.chart.surface_chart.SurfaceChart3D zoomScaleSheetLayoutView	(open属性), 169	pyxl.worksheet.views.SheetView 属性),
year (openpyxl.worksheet.filters.DateGroupItem 属	402
	性), 377	zoomToFit (openpyxl.chartsheet.custom.CustomChartsheetView
yMode (openpyxl.chart.layout.ManualLayout 属性),	属性), 175
	147	zoomToFit (openpyxl.chartsheet.views.ChartsheetView
ySplit (openpyxl.worksheet.views.Pane 属性), 400 属性), 180 yVal (openpyxl.chart.series.Series 属性), 164 zoomToFit (openpyxl.worksheet.views.SheetView 属 yVal (openpyxl.chart.series.XYSeries 属性), 165 性), 402
yWindow (openpyxl.workbook.views.BookView 属性), zVal (openpyxl.chart.series.Series 属性), 164
        355 yWindow (openpyxl.workbook.views.CustomWorkbookView
属性), 357
yWindow (openpyxl.worksheet.datavalidation.DataValidationList
属性), 370
Z
z (openpyxl.drawing.geometry.Point3D 属性), 226 z (openpyxl.drawing.geometry.Shape3D 属性), 228 z_axis (openpyxl.chart.area_chart.AreaChart3D 属
性), 126
z_axis (openpyxl.chart.bar_chart.BarChart3D 属
        性), 136 z_axis (openpyxl.chart.line_chart.LineChart3D 属
性), 150
z_axis (openpyxl.chart.surface_chart.SurfaceChart3D
属性), 169
z_order (openpyxl.worksheet.ole.ObjectAnchor 属
        性), 384 zeroHeight (openpyxl.worksheet.dimensions.SheetFormatProperties




































openpyxl Documentation, 发布 3.0.5

CHAPTER

2

1



1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

10	Chapter 4.	Usage examples

4.1. 教程	11

openpyxl Documentation, 发布 3.0.5

10	Chapter 4.	Usage examples

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

10	Chapter 4.	Usage examples

1

openpyxl Documentation, 发布 3.0.5

1

openpyxl Documentation, 发布 3.0.5



2

1



1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

1

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5
(续上页)

6.4. 图表	31

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.6. 样式	83

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.8. 条件格式	93

openpyxl Documentation, 发布 3.0.5

1

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

6.8. 条件格式	93

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5
(续上页)

openpyxl Documentation, 发布 3.0.5
(续上页)

26	Chapter 6. 其他主题

1

openpyxl Documentation, 发布 3.0.5
(续上页)

6.8. 条件格式	93

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

1

openpyxl Documentation, 发布 3.0.5

26	Chapter 6. 其他主题

openpyxl Documentation, 发布 3.0.5



114	Chapter 7. 开发者信息

1



1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121



1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
"type") or a more descriptve name is desired (eg. "underline"for "u")

openpyxl Documentation, 发布 3.0.5
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
"type") or a more descriptve name is desired (eg. "underline"for "u")

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
"type") or a more descriptve name is desired (eg. "underline"for "u")

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class 'int'>

openpyxl Documentation, 发布 3.0.5
Values must be of type <class 'int'>

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class 'int'>

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class 'int'>
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class 'int'>
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class 'int'>
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
"type") or a more descriptve name is desired (eg. "underline"for "u")

openpyxl Documentation, 发布 3.0.5
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
"type") or a more descriptve name is desired (eg. "underline"for "u")

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Aliases can be used when either the desired attribute name is not allowed or confusing in Python
"type") or a more descriptve name is desired (eg. "underline"for "u")

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

	完整 API	377

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5
Values must be of type <class
Values must be of type <class

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

8.2. 完整 API	121

openpyxl Documentation, 发布 3.0.5

120	Chapter 8.	API 文档

openpyxl Documentation, 发布 3.0.5



2

1



1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
•
•
•
•

•
428	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5
•
•
•
•

1

openpyxl Documentation, 发布 3.0.5
•
•
•
•

openpyxl Documentation, 发布 3.0.5
•
•
•
•

414	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5
•
•
•
•

•
428	Chapter 10. 发布说明

openpyxl Documentation, 发布 3.0.5
•

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5
•
•

1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

openpyxl Documentation, 发布 3.0.5
Bug fixes

openpyxl Documentation, 发布 3.0.5
Bug fixes

414	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5
Bug fixes

1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

1

openpyxl Documentation, 发布 3.0.5

414	Chapter 10. 发布说明

openpyxl Documentation, 发布 3.0.5



2

1



1

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

454	索引

索引	455

openpyxl Documentation, 发布 3.0.5

454	索引

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5
tagname
tagname
tagname

tagname
tagname
tagname
532	索引

tagname
tagname
tagname
索引	531

openpyxl Documentation, 发布 3.0.5
tagname
tagname
tagname

tagname
tagname
tagname
索引	531

openpyxl Documentation, 发布 3.0.5
tagname

openpyxl Documentation, 发布 3.0.5
tagname

tagname
tagname
tagname
532	索引

tagname
索引	537

openpyxl Documentation, 发布 3.0.5
tagname tagname tagname
tagname

tagname tagname tagname
tagname tagname
索引	535

openpyxl Documentation, 发布 3.0.5

openpyxl Documentation, 发布 3.0.5

454	索引

索引	455

openpyxl Documentation, 发布 3.0.5

454	索引

