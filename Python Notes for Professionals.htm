<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>Python Notes for Professionals</title>
  <style>
    html {
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 12px;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      html {
        background-color: white;
      }
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    svg {
      height: auto;
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, Consolas, 'Lucida Console', monospace;
      font-size: 85%;
      margin: 0;
      hyphens: manual;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    /* The extra [class] is a hack that increases specificity enough to
       override a similar rule in reveal.js */
    ul.task-list[class]{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      font-size: inherit;
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
    .display.math{display: block; text-align: center; margin: 0.5rem auto;}
  </style>
</head>
<body>
<h1 id="table-of-contents">Table of Contents</h1>
<p><a
href="#chapter-7-enum-..........................................................................................................................................................-51"><u>Chapter
7: Enum
..........................................................................................................................................................
51</u></a></p>
<p><a
href="#chapter-8-set-...............................................................................................................................................................-52"><u>Chapter
8: Set
...............................................................................................................................................................
52</u></a></p>
<p><a
href="#chapter-9-simple-mathematical-operators-.................................................................................................-57"><u>Chapter
9: Simple Mathematical Operators
.................................................................................................
57</u></a></p>
<p><a
href="#chapter-10-bitwise-operators-.............................................................................................................................-65"><u>Chapter
10: Bitwise Operators
.............................................................................................................................
65</u></a></p>
<p><a
href="#chapter-11-boolean-operators-............................................................................................................................-69"><u>Chapter
11: Boolean Operators
............................................................................................................................
69</u></a></p>
<p><a
href="#chapter-12-operator-precedence-......................................................................................................................-72"><u>Chapter
12: Operator Precedence
......................................................................................................................
72</u></a></p>
<p><a
href="#chapter-13-variable-scope-and-binding-.........................................................................................................-73"><u>Chapter
13: Variable Scope and Binding
.........................................................................................................
73</u></a></p>
<p><a
href="#chapter-14-conditionals-.........................................................................................................................................-80"><u>Chapter
14: Conditionals
.........................................................................................................................................
80</u></a></p>
<p><a
href="#chapter-15-comparisons-........................................................................................................................................-86"><u>Chapter
15: Comparisons
........................................................................................................................................
86</u></a></p>
<p><a
href="#chapter-16-loops-.......................................................................................................................................................-91"><u>Chapter
16: Loops
.......................................................................................................................................................
91</u></a></p>
<p><a href="#Chapter_17__Arrays"><u>Chapter 17: Arrays
....................................................................................................................................................
102</u></a></p>
<p><a
href="#chapter-18-multidimensional-arrays-..............................................................................................................-106"><u>Chapter
18: Multidimensional arrays
..............................................................................................................
106</u></a></p>
<p><a
href="#chapter-19-dictionary-............................................................................................................................................-108"><u>Chapter
19: Dictionary
............................................................................................................................................
108</u></a></p>
<p><a
href="#chapter-20-list-.........................................................................................................................................................-117"><u>Chapter
20: List
.........................................................................................................................................................
117</u></a></p>
<p><a
href="#chapter-21-list-comprehensions-......................................................................................................................-130"><u>Chapter
21: List comprehensions
......................................................................................................................
130</u></a></p>
<p><a
href="#chapter-22-list-slicing-selecting-parts-of-lists-.......................................................................................-144"><u>Chapter
22: List slicing (selecting parts of lists)
.......................................................................................
144</u></a></p>
<p><a
href="#chapter-23-groupby-............................................................................................................................................-146"><u>Chapter
23: groupby()
............................................................................................................................................
146</u></a></p>
<p><a href="#Chapter_24__Linked_lists"><u>Chapter 24: Linked lists
.........................................................................................................................................
149</u></a></p>
<p><a
href="#chapter-25-linked-list-node-.............................................................................................................................-154"><u>Chapter
25: Linked List Node
.............................................................................................................................
154</u></a></p>
<p><a
href="#chapter-26-filter-......................................................................................................................................................-155"><u>Chapter
26: Filter
......................................................................................................................................................
155</u></a></p>
<p><a
href="#chapter-27-heapq-...................................................................................................................................................-158"><u>Chapter
27: Heapq
...................................................................................................................................................
158</u></a></p>
<p><a
href="#chapter-28-tuple-.....................................................................................................................................................-160"><u>Chapter
28: Tuple
.....................................................................................................................................................
160</u></a></p>
<p><a
href="#chapter-29-basic-input-and-output-...............................................................................................................-165"><u>Chapter
29: Basic Input and Output
...............................................................................................................
165</u></a></p>
<p><a
href="#chapter-30-files-folders-io-.........................................................................................................................-171"><u>Chapter
30: Files &amp; Folders I/O
.........................................................................................................................
171</u></a></p>
<p><a
href="#chapter-31-os.path-..................................................................................................................................................-178"><u>Chapter
31: os.path
..................................................................................................................................................
178</u></a></p>
<p><a
href="#chapter-32-iterables-and-iterators-................................................................................................................-180"><u>Chapter
32: Iterables and Iterators
................................................................................................................
180</u></a></p>
<p><a
href="#chapter-33-functions-.............................................................................................................................................-183"><u>Chapter
33: Functions
.............................................................................................................................................
183</u></a></p>
<p><a
href="#chapter-34-defining-functions-with-list-arguments-..............................................................................-199"><u>Chapter
34: Defining functions with list arguments
..............................................................................
199</u></a></p>
<p><a
href="#chapter-35-functional-programming-in-python-......................................................................................-201"><u>Chapter
35: Functional Programming in Python
......................................................................................
201</u></a></p>
<p><a href="#Chapter_36__Partial_functions"><u>Chapter 36: Partial
functions
..............................................................................................................................
202</u></a></p>
<p><a
href="#chapter-37-decorators-.........................................................................................................................................-203"><u>Chapter
37: Decorators
.........................................................................................................................................
203</u></a></p>
<p><a
href="#chapter-38-classes-.................................................................................................................................................-209"><u>Chapter
38: Classes
.................................................................................................................................................
209</u></a></p>
<p><a
href="#chapter-39-metaclasses-.......................................................................................................................................-226"><u>Chapter
39: Metaclasses
.......................................................................................................................................
226</u></a></p>
<p><a
href="#chapter-40-string-formatting-.........................................................................................................................-232"><u>Chapter
40: String Formatting
.........................................................................................................................
232</u></a></p>
<p><a
href="#chapter-41-string-methods-................................................................................................................................-240"><u>Chapter
41: String Methods
................................................................................................................................
240</u></a></p>
<p><a
href="#chapter-42-using-loops-within-functions-....................................................................................................-255"><u>Chapter
42: Using loops within functions
....................................................................................................
255</u></a></p>
<p><a href="#Chapter_43__Importing_modules"><u>Chapter 43: Importing
modules
........................................................................................................................
256</u></a></p>
<p><a
href="#chapter-44-dierence-between-module-and-package-......................................................................-262"><u>Chapter
44: Dierence between Module and Package
......................................................................
262</u></a></p>
<p><a
href="#chapter-45-math-module-....................................................................................................................................-264"><u>Chapter
45: Math Module
....................................................................................................................................
264</u></a></p>
<p><a
href="#chapter-46-complex-math-.................................................................................................................................-273"><u>Chapter
46: Complex math
.................................................................................................................................
273</u></a></p>
<p><a
href="#chapter-47-collections-module-.......................................................................................................................-275"><u>Chapter
47: Collections module
.......................................................................................................................
275</u></a></p>
<p><a
href="#chapter-48-operator-module-...........................................................................................................................-282"><u>Chapter
48: Operator module
...........................................................................................................................
282</u></a></p>
<p><a href="#Chapter_49__JSON_Module"><u>Chapter 49: JSON Module
....................................................................................................................................
284</u></a></p>
<p><a
href="#chapter-50-sqlite3-module-.................................................................................................................................-289"><u>Chapter
50: Sqlite3 Module
.................................................................................................................................
289</u></a></p>
<p><a
href="#chapter-51-the-os-module-...................................................................................................................................-291"><u>Chapter
51: The os Module
...................................................................................................................................
291</u></a></p>
<p><a
href="#chapter-52-the-locale-module-..........................................................................................................................-293"><u>Chapter
52: The locale Module
..........................................................................................................................
293</u></a></p>
<p><a
href="#chapter-53-itertools-module-..............................................................................................................................-294"><u>Chapter
53: Itertools Module
..............................................................................................................................
294</u></a></p>
<p><a
href="#chapter-54-asyncio-module-...............................................................................................................................-301"><u>Chapter
54: Asyncio Module
...............................................................................................................................
301</u></a></p>
<p><a
href="#chapter-55-random-module-.............................................................................................................................-307"><u>Chapter
55: Random module
.............................................................................................................................
307</u></a></p>
<p><a
href="#chapter-56-functools-module-...........................................................................................................................-312"><u>Chapter
56: Functools Module
...........................................................................................................................
312</u></a></p>
<p><a
href="#chapter-57-the-dis-module-................................................................................................................................-315"><u>Chapter
57: The dis module
................................................................................................................................
315</u></a></p>
<p><a href="#Chapter_58__The_base64_Module"><u>Chapter 58: The base64
Module
.......................................................................................................................
317</u></a></p>
<p><a
href="#chapter-59-queue-module-..................................................................................................................................-322"><u>Chapter
59: Queue Module
..................................................................................................................................
322</u></a></p>
<p><a
href="#chapter-60-deque-module-..................................................................................................................................-324"><u>Chapter
60: Deque Module
..................................................................................................................................
324</u></a></p>
<p><a
href="#chapter-61-webbrowser-module-......................................................................................................................-326"><u>Chapter
61: Webbrowser Module
......................................................................................................................
326</u></a></p>
<p><a
href="#chapter-62-tkinter-...................................................................................................................................................-328"><u>Chapter
62: tkinter
...................................................................................................................................................
328</u></a></p>
<p><a
href="#chapter-63-pyautogui-module-..........................................................................................................................-331"><u>Chapter
63: pyautogui module
..........................................................................................................................
331</u></a></p>
<p><a
href="#chapter-64-indexing-and-slicing-......................................................................................................................-332"><u>Chapter
64: Indexing and Slicing
......................................................................................................................
332</u></a></p>
<p><a
href="#chapter-65-plotting-with-matplotlib-..............................................................................................................-337"><u>Chapter
65: Plotting with Matplotlib
..............................................................................................................
337</u></a></p>
<p><a
href="#chapter-66-graph-tool-..........................................................................................................................................-345"><u>Chapter
66: graph-tool
..........................................................................................................................................
345</u></a></p>
<p><a href="#Chapter_67__Generators"><u>Chapter 67: Generators
.........................................................................................................................................
347</u></a></p>
<p><a
href="#chapter-68-reduce-.................................................................................................................................................-356"><u>Chapter
68: Reduce
.................................................................................................................................................
356</u></a></p>
<p><a
href="#chapter-69-map-function-....................................................................................................................................-358"><u>Chapter
69: Map Function
....................................................................................................................................
358</u></a></p>
<p><a
href="#chapter-70-exponentiation-................................................................................................................................-365"><u>Chapter
70: Exponentiation
................................................................................................................................
365</u></a></p>
<p><a
href="#chapter-71-searching-............................................................................................................................................-371"><u>Chapter
71: Searching
............................................................................................................................................
371</u></a></p>
<p><a
href="#chapter-72-sorting-minimum-and-maximum-............................................................................................-376"><u>Chapter
72: Sorting, Minimum and Maximum
............................................................................................
376</u></a></p>
<p><a
href="#chapter-73-counting-..............................................................................................................................................-382"><u>Chapter
73: Counting
..............................................................................................................................................
382</u></a></p>
<p><a
href="#chapter-74-the-print-function-.........................................................................................................................-384"><u>Chapter
74: The Print Function
.........................................................................................................................
384</u></a></p>
<p><a
href="#chapter-75-regular-expressions-regex-...................................................................................................-388"><u>Chapter
75: Regular Expressions (Regex)
...................................................................................................
388</u></a></p>
<p><a
href="#chapter-76-copying-data-....................................................................................................................................-396"><u>Chapter
76: Copying data
....................................................................................................................................
396</u></a></p>
<p><a
href="#chapter-77-context-managers-with-statement-...............................................................................-398"><u>Chapter
77: Context Managers (“with” Statement)
...............................................................................
398</u></a></p>
<p><a
href="#chapter-78-the-__name__-special-variable-...........................................................................................-402"><u>Chapter
78: The __name__ special variable
...........................................................................................
402</u></a></p>
<p><a href="#Chapter_79__Checking_Path_Existe"><u>Chapter 79: Checking
Path Existence and Permissions
.........................................................................
404</u></a></p>
<p><a
href="#chapter-80-creating-python-packages-.......................................................................................................-406"><u>Chapter
80: Creating Python packages
.......................................................................................................
406</u></a></p>
<p><a href="#Chapter_81__Usage_of__pip__modul"><u>Chapter 81: Usage of
"pip" module: PyPI Package Manager
.............................................................
410</u></a></p>
<p><a
href="#chapter-82-pip-pypi-package-manager-......................................................................................................-412"><u>Chapter
82: pip: PyPI Package Manager
......................................................................................................
412</u></a></p>
<p><a
href="#chapter-83-parsing-command-line-arguments-......................................................................................-418"><u>Chapter
83: Parsing Command Line arguments
......................................................................................
418</u></a></p>
<p><a
href="#chapter-84-subprocess-library-......................................................................................................................-424"><u>Chapter
84: Subprocess Library
......................................................................................................................
424</u></a></p>
<p><a
href="#chapter-85-setup.py-..............................................................................................................................................-427"><u>Chapter
85: setup.py
..............................................................................................................................................
427</u></a></p>
<p><a
href="#chapter-86-recursion-............................................................................................................................................-430"><u>Chapter
86: Recursion
............................................................................................................................................
430</u></a></p>
<p><a
href="#chapter-87-type-hints-..........................................................................................................................................-437"><u>Chapter
87: Type Hints
..........................................................................................................................................
437</u></a></p>
<p><a
href="#chapter-88-exceptions-..........................................................................................................................................-440"><u>Chapter
88: Exceptions
..........................................................................................................................................
440</u></a></p>
<p><a
href="#chapter-89-raise-custom-errors-exceptions-.........................................................................................-448"><u>Chapter
89: Raise Custom Errors / Exceptions
.........................................................................................
448</u></a></p>
<p><a
href="#chapter-90-commonwealth-exceptions-.......................................................................................................-450"><u>Chapter
90: Commonwealth Exceptions
.......................................................................................................
450</u></a></p>
<p><a
href="#chapter-91-urllib-.......................................................................................................................................................-456"><u>Chapter
91: urllib
.......................................................................................................................................................
456</u></a></p>
<p><a
href="#chapter-92-web-scraping-with-python-.........................................................................................................-458"><u>Chapter
92: Web scraping with Python
.........................................................................................................
458</u></a></p>
<p><a href="#Chapter_93__HTML_Parsing"><u>Chapter 93: HTML Parsing
....................................................................................................................................
462</u></a></p>
<p><a
href="#chapter-94-manipulating-xml-..........................................................................................................................-464"><u>Chapter
94: Manipulating XML
..........................................................................................................................
464</u></a></p>
<p><a
href="#chapter-95-python-requests-post-..................................................................................................................-468"><u>Chapter
95: Python Requests Post
..................................................................................................................
468</u></a></p>
<p><a
href="#chapter-96-distribution-........................................................................................................................................-473"><u>Chapter
96: Distribution
........................................................................................................................................
473</u></a></p>
<p><a
href="#chapter-97-property-objects-............................................................................................................................-475"><u>Chapter
97: Property Objects
............................................................................................................................
475</u></a></p>
<p><a
href="#chapter-98-overloading-......................................................................................................................................-479"><u>Chapter
98: Overloading
......................................................................................................................................
479</u></a></p>
<p><a
href="#chapter-99-polymorphism-..................................................................................................................................-484"><u>Chapter
99: Polymorphism
..................................................................................................................................
484</u></a></p>
<p><a
href="#chapter-100-method-overriding-......................................................................................................................-488"><u>Chapter
100: Method Overriding
......................................................................................................................
488</u></a></p>
<p><a
href="#chapter-101-user-defined-methods-................................................................................................................-489"><u>Chapter
101: User-Defined Methods
................................................................................................................
489</u></a></p>
<p><a href="#Chapter_102__String_representati"><u>Chapter 102: String
representations of class instances: __str__ and __repr__</u></a></p>
<p><a
href="#chapter-103-debugging-........................................................................................................................................-496"><u>Chapter
103: Debugging
........................................................................................................................................
496</u></a></p>
<p><a
href="#chapter-104-reading-and-writing-csv-........................................................................................................-499"><u>Chapter
104: Reading and Writing CSV
........................................................................................................
499</u></a></p>
<p><a
href="#chapter-105-writing-to-csv-from-string-or-list-......................................................................................-501"><u>Chapter
105: Writing to CSV from String or List
......................................................................................
501</u></a></p>
<p><a href="#Chapter_106__Dynamic_code_execut"><u>Chapter 106: Dynamic
code execution with `exec` and `eval`
.............................................................
502</u></a></p>
<p><a
href="#chapter-107-pyinstaller---distributing-python-code-..............................................................................-504"><u>Chapter
107: PyInstaller - Distributing Python Code
..............................................................................
504</u></a></p>
<p><a
href="#chapter-108-data-visualization-with-python-.............................................................................................-506"><u>Chapter
108: Data Visualization with Python
.............................................................................................
506</u></a></p>
<p><a href="#Chapter_109__The_Interpreter__Co"><u>Chapter 109: The
Interpreter (Command Line Console)
.......................................................................
513</u></a></p>
<p><a
href="#chapter-110-args-and-kwargs-.......................................................................................................................-518"><u>Chapter
110: *args and **kwargs
.......................................................................................................................
518</u></a></p>
<p><a
href="#chapter-111-garbage-collection-........................................................................................................................-521"><u>Chapter
111: Garbage Collection
........................................................................................................................
521</u></a></p>
<p><a
href="#chapter-112-pickle-data-serialisation-.............................................................................................................-526"><u>Chapter
112: Pickle data serialisation
.............................................................................................................
526</u></a></p>
<p><a
href="#chapter-113-binary-data-......................................................................................................................................-528"><u>Chapter
113: Binary Data
......................................................................................................................................
528</u></a></p>
<p><a href="#Chapter_114__Idioms"><u>Chapter 114: Idioms
..................................................................................................................................................
530</u></a></p>
<p><a href="#Chapter_115__Data_Serialization"><u>Chapter 115: Data
Serialization
..........................................................................................................................
533</u></a></p>
<p><a href="#Chapter_116__Multiprocessing"><u>Chapter 116:
Multiprocessing
...............................................................................................................................
535</u></a></p>
<p><a href="#Chapter_117__Multithreading"><u>Chapter 117: Multithreading
.................................................................................................................................
537</u></a></p>
<p><a
href="#chapter-118-processes-and-threads-..............................................................................................................-542"><u>Chapter
118: Processes and Threads
..............................................................................................................
542</u></a></p>
<p><a
href="#chapter-119-python-concurrency-.....................................................................................................................-546"><u>Chapter
119: Python concurrency
.....................................................................................................................
546</u></a></p>
<p><a
href="#chapter-120-parallel-computation-..................................................................................................................-550"><u>Chapter
120: Parallel computation
..................................................................................................................
550</u></a></p>
<p><a href="#Chapter_121__Sockets"><u>Chapter 121: Sockets
................................................................................................................................................
552</u></a></p>
<p><a href="#Chapter_122__Websockets"><u>Chapter 122: Websockets
......................................................................................................................................
556</u></a></p>
<p><a href="#Chapter_123__Sockets_And_Message"><u>Chapter 123: Sockets
And Message Encryption/Decryption Between Client and Server</u></a></p>
<p><a
href="#chapter-124-python-networking-.....................................................................................................................-563"><u>Chapter
124: Python Networking
.....................................................................................................................
563</u></a></p>
<p><a
href="#chapter-125-python-http-server-....................................................................................................................-567"><u>Chapter
125: Python HTTP Server
....................................................................................................................
567</u></a></p>
<p><a
href="#chapter-126-flask-....................................................................................................................................................-571"><u>Chapter
126: Flask
....................................................................................................................................................
571</u></a></p>
<p><a
href="#chapter-127-introduction-to-rabbitmq-using-amqpstorm-................................................................-576"><u>Chapter
127: Introduction to RabbitMQ using AMQPStorm
................................................................
576</u></a></p>
<p><a
href="#chapter-128-descriptor-.........................................................................................................................................-580"><u>Chapter
128: Descriptor
.........................................................................................................................................
580</u></a></p>
<p><a href="#Chapter_129__tempfile_NamedTempo"><u>Chapter 129: tempfile
NamedTemporaryFile
.............................................................................................
582</u></a></p>
<p><a href="#Chapter_130__Input__Subset_and_O"><u>Chapter 130: Input,
Subset and Output External Data Files using Pandas
................................. 584</u></a></p>
<p><a
href="#chapter-131-unzipping-files-................................................................................................................................-586"><u>Chapter
131: Unzipping Files
................................................................................................................................
586</u></a></p>
<p><a
href="#chapter-132-working-with-zip-archives-........................................................................................................-587"><u>Chapter
132: Working with ZIP archives
........................................................................................................
587</u></a></p>
<p><a
href="#chapter-133-getting-start-with-gzip-..............................................................................................................-589"><u>Chapter
133: Getting start with GZip
..............................................................................................................
589</u></a></p>
<p><a
href="#chapter-134-stack-...................................................................................................................................................-590"><u>Chapter
134: Stack
...................................................................................................................................................
590</u></a></p>
<p><a href="#Chapter_135__Working_around_the"><u>Chapter 135: Working
around the Global Interpreter Lock (GIL)
..................................................... 593</u></a></p>
<p><a
href="#chapter-136-deployment-.....................................................................................................................................-595"><u>Chapter
136: Deployment
.....................................................................................................................................
595</u></a></p>
<p><a
href="#chapter-137-logging-..............................................................................................................................................-597"><u>Chapter
137: Logging
..............................................................................................................................................
597</u></a></p>
<p><a href="#Chapter_138__Web_Server_Gateway"><u>Chapter 138: Web Server
Gateway Interface (WSGI)
.............................................................................
601</u></a></p>
<p><a
href="#chapter-139-python-server-sent-events-......................................................................................................-602"><u>Chapter
139: Python Server Sent Events
......................................................................................................
602</u></a></p>
<p><a href="#Chapter_140__Alternatives_to_swi"><u>Chapter 140:
Alternatives to switch statement from other languages
....................................... 604</u></a></p>
<p><a href="#Chapter_141__List_destructuring"><u>Chapter 141: List
destructuring (aka packing and unpacking)
.........................................................
607</u></a></p>
<p><a
href="#chapter-142-accessing-python-source-code-and-bytecode-..............................................................-611"><u>Chapter
142: Accessing Python source code and bytecode
..............................................................
611</u></a></p>
<p><a
href="#chapter-143-mixins-..................................................................................................................................................-613"><u>Chapter
143: Mixins
..................................................................................................................................................
613</u></a></p>
<p><a
href="#chapter-144-attribute-access-...........................................................................................................................-615"><u>Chapter
144: Attribute Access
...........................................................................................................................
615</u></a></p>
<p><a
href="#chapter-145-arcpy-..................................................................................................................................................-618"><u>Chapter
145: ArcPy
..................................................................................................................................................
618</u></a></p>
<p><a
href="#chapter-146-abstract-base-classes-abc-...................................................................................................-619"><u>Chapter
146: Abstract Base Classes (abc)
...................................................................................................
619</u></a></p>
<p><a
href="#chapter-147-plugin-and-extension-classes-.................................................................................................-621"><u>Chapter
147: Plugin and Extension Classes
.................................................................................................
621</u></a></p>
<p><a href="#Chapter_148__Immutable_datatypes"><u>Chapter 148: Immutable
datatypes(int, float, str, tuple and frozensets)
.................................. 624</u></a></p>
<p><a href="#Chapter_149__Incompatibilities_m"><u>Chapter 149:
Incompatibilities moving from Python 2 to Python 3
................................................ 625</u></a></p>
<p><a
href="#chapter-150-2to3-tool-............................................................................................................................................-650"><u>Chapter
150: 2to3 tool
............................................................................................................................................
650</u></a></p>
<p><a
href="#chapter-151-non-ocial-python-implementations-................................................................................-652"><u>Chapter
151: Non-ocial Python implementations
................................................................................
652</u></a></p>
<p><a
href="#chapter-152-abstract-syntax-tree-...................................................................................................................-656"><u>Chapter
152: Abstract syntax tree
...................................................................................................................
656</u></a></p>
<p><a
href="#chapter-153-unicode-and-bytes-.......................................................................................................................-658"><u>Chapter
153: Unicode and bytes
.......................................................................................................................
658</u></a></p>
<p><a
href="#chapter-154-python-serial-communication-pyserial-.........................................................................-661"><u>Chapter
154: Python Serial Communication (pyserial)
.........................................................................
661</u></a></p>
<p><a
href="#chapter-155-neo4j-and-cypher-using-py2neo-.........................................................................................-664"><u>Chapter
155: Neo4j and Cypher using Py2Neo
.........................................................................................
664</u></a></p>
<p><a href="#Chapter_156__Basic_Curses_with_P"><u>Chapter 156: Basic
Curses with Python
..........................................................................................................
666</u></a></p>
<p><a href="#Chapter_157__Templates_in_python"><u>Chapter 157: Templates
in python
...................................................................................................................
667</u></a></p>
<p><a
href="#chapter-158-pillow-...................................................................................................................................................-668"><u>Chapter
158: Pillow
...................................................................................................................................................
668</u></a></p>
<p><a
href="#chapter-159-the-pass-statement-....................................................................................................................-669"><u>Chapter
159: The pass statement
....................................................................................................................
669</u></a></p>
<p><a
href="#chapter-160-cli-subcommands-with-precise-help-output-..................................................................-671"><u>Chapter
160: CLI subcommands with precise help output
..................................................................
671</u></a></p>
<p><a href="#Chapter_161__Database_Access"><u>Chapter 161: Database
Access
............................................................................................................................
674</u></a></p>
<p><a
href="#chapter-162-connecting-python-to-sql-server-.......................................................................................-685"><u>Chapter
162: Connecting Python to SQL Server
.......................................................................................
685</u></a></p>
<p><a
href="#chapter-163-postgresql-......................................................................................................................................-686"><u>Chapter
163: PostgreSQL
......................................................................................................................................
686</u></a></p>
<p><a
href="#chapter-164-python-and-excel-..........................................................................................................................-687"><u>Chapter
164: Python and Excel
..........................................................................................................................
687</u></a></p>
<p><a
href="#chapter-165-turtle-graphics-..............................................................................................................................-693"><u>Chapter
165: Turtle Graphics
..............................................................................................................................
693</u></a></p>
<p><a
href="#chapter-166-python-persistence-......................................................................................................................-694"><u>Chapter
166: Python Persistence
......................................................................................................................
694</u></a></p>
<p><a
href="#chapter-167-design-patterns-.............................................................................................................................-696"><u>Chapter
167: Design Patterns
.............................................................................................................................
696</u></a></p>
<p><a
href="#chapter-168-hashlib-................................................................................................................................................-701"><u>Chapter
168: hashlib
................................................................................................................................................
701</u></a></p>
<p><a href="#Chapter_169__Creating_a_Windows"><u>Chapter 169: Creating a
Windows service using Python
.......................................................................
703</u></a></p>
<p><a href="#Chapter_170__Mutable_vs_Immutabl"><u>Chapter 170: Mutable
vs Immutable (and Hashable) in Python
....................................................... 706</u></a></p>
<p><a
href="#chapter-171-configparser-....................................................................................................................................-710"><u>Chapter
171: configparser
....................................................................................................................................
710</u></a></p>
<p><a
href="#chapter-172-optical-character-recognition-..............................................................................................-711"><u>Chapter
172: Optical Character Recognition
..............................................................................................
711</u></a></p>
<p><a
href="#chapter-173-virtual-environments-..................................................................................................................-713"><u>Chapter
173: Virtual environments
..................................................................................................................
713</u></a></p>
<p><a href="#Chapter_174__Python_Virtual_Envi"><u>Chapter 174: Python
Virtual Environment - virtualenv
.........................................................................
721</u></a></p>
<p><a
href="#chapter-175-virtual-environment-with-virtualenvwrapper-................................................................-724"><u>Chapter
175: Virtual environment with virtualenvwrapper
................................................................
724</u></a></p>
<p><a href="#Chapter_176__Create_virtual_envi"><u>Chapter 176: Create
virtual environment with virtualenvwrapper in windows
........................ 726</u></a></p>
<p><a
href="#chapter-177-sys-........................................................................................................................................................-727"><u>Chapter
177: sys
........................................................................................................................................................
727</u></a></p>
<p><a
href="#chapter-178-chempy---python-package-......................................................................................................-728"><u>Chapter
178: ChemPy - python package
......................................................................................................
728</u></a></p>
<p><a href="#Chapter_179__pygame"><u>Chapter 179: pygame
..............................................................................................................................................
731</u></a></p>
<p><a
href="#chapter-180-pyglet-.................................................................................................................................................-734"><u>Chapter
180: Pyglet
.................................................................................................................................................
734</u></a></p>
<p><a
href="#chapter-181-audio-....................................................................................................................................................-736"><u>Chapter
181: Audio
....................................................................................................................................................
736</u></a></p>
<p><a
href="#chapter-182-pyaudio-..............................................................................................................................................-738"><u>Chapter
182: pyaudio
..............................................................................................................................................
738</u></a></p>
<p><a
href="#chapter-183-shelve-..................................................................................................................................................-741"><u>Chapter
183: shelve
..................................................................................................................................................
741</u></a></p>
<p><a href="#Chapter_184__IoT_Programming_wit"><u>Chapter 184: IoT
Programming with Python and Raspberry PI
....................................................... 744</u></a></p>
<p><a href="#Chapter_185__kivy___Cross_platfo"><u>Chapter 185: kivy -
Cross-platform Python Framework for NUI Development
....................... 748</u></a></p>
<p><a href="#Chapter_186__Pandas_Transform__P"><u>Chapter 186: Pandas
Transform: Preform operations on groups and concatenate the</u></a></p>
<p><a href="#Chapter_187__Similarities_in_syn"><u>Chapter 187:
Similarities in syntax, Dierences in meaning: Python vs. JavaScript
............. 752</u></a></p>
<p><a
href="#chapter-188-call-python-from-c-...................................................................................................................-753"><u>Chapter
188: Call Python from C#
...................................................................................................................
753</u></a></p>
<p><a
href="#chapter-189-ctypes-.................................................................................................................................................-755"><u>Chapter
189: ctypes
.................................................................................................................................................
755</u></a></p>
<p><a href="#Chapter_190__Writing_extensions"><u>Chapter 190: Writing
extensions
........................................................................................................................
760</u></a></p>
<p><a href="#Chapter_191__Python_Lex_Yacc"><u>Chapter 191: Python
Lex-Yacc
.............................................................................................................................
763</u></a></p>
<p><a href="#Chapter_192__Unit_Testing"><u>Chapter 192: Unit Testing
......................................................................................................................................
772</u></a></p>
<p><a
href="#chapter-193-py.test-.................................................................................................................................................-780"><u>Chapter
193: py.test
.................................................................................................................................................
780</u></a></p>
<p><a
href="#chapter-194-profiling-.............................................................................................................................................-785"><u>Chapter
194: Profiling
.............................................................................................................................................
785</u></a></p>
<p><a
href="#chapter-195-python-speed-of-program-.......................................................................................................-788"><u>Chapter
195: Python speed of program
.......................................................................................................
788</u></a></p>
<p><a
href="#chapter-196-performance-optimization-.......................................................................................................-792"><u>Chapter
196: Performance optimization
.......................................................................................................
792</u></a></p>
<p><a
href="#chapter-197-security-and-cryptography-....................................................................................................-794"><u>Chapter
197: Security and Cryptography
....................................................................................................
794</u></a></p>
<p><a
href="#chapter-198-secure-shell-connection-in-python-......................................................................................-798"><u>Chapter
198: Secure Shell Connection in Python
......................................................................................
798</u></a></p>
<p><a
href="#chapter-199-python-anti-patterns-..................................................................................................................-799"><u>Chapter
199: Python Anti-Patterns
..................................................................................................................
799</u></a></p>
<p><a
href="#chapter-200-common-pitfalls-...........................................................................................................................-802"><u>Chapter
200: Common Pitfalls
...........................................................................................................................
802</u></a></p>
<p><a
href="#chapter-201-hidden-features-............................................................................................................................-816"><u>Chapter
201: Hidden Features
............................................................................................................................
816</u></a></p>
<p><a href="#Chapter_1__Getting_started_with"><u>Chapter 1: Getting
started with Python</u></a></p>
<p><a href="#Chapter_2__Python_Data_Types"><u>Chapter 2: Python Data
Types</u></a></p>
<p><a href="#Chapter_3__Indentation"><u>Chapter 3:
Indentation</u></a></p>
<p><a href="#Chapter_4__Comments_and_Document"><u>Chapter 4: Comments
and Documentation</u></a></p>
<p><a href="#Chapter_5__Date_and_Time"><u>Chapter 5: Date and
Time</u></a></p>
<p><a href="#Chapter_6__Date_Formatting"><u>Chapter 6: Date
Formatting</u></a></p>
<p><a href="#Chapter_7__Enum_1"><u>Chapter 7: Enum</u></a></p>
<p><a href="#Chapter_8__Set_1"><u>Chapter 8: Set</u></a></p>
<p><a href="#Chapter_9__Simple_Mathematical_O_1"><u>Chapter 9: Simple
Mathematical Operators</u></a></p>
<p><a href="#Chapter_10__Bitwise_Operators_1"><u>Chapter 10: Bitwise
Operators</u></a></p>
<p><a href="#Chapter_11__Boolean_Operators_1"><u>Chapter 11: Boolean
Operators</u></a></p>
<p><a href="#Chapter_12__Operator_Precedence_1"><u>Chapter 12: Operator
Precedence</u></a></p>
<p><a href="#Chapter_13__Variable_Scope_and_B_1"><u>Chapter 13: Variable
Scope and Binding</u></a></p>
<p><a href="#Chapter_14__Conditionals_1"><u>Chapter 14:
Conditionals</u></a></p>
<p><a href="#Chapter_15__Comparisons_1"><u>Chapter 15:
Comparisons</u></a></p>
<p><a href="#Chapter_16__Loops_1"><u>Chapter 16: Loops</u></a></p>
<p><a href="#Chapter_17__Arrays_1"><u>Chapter 17: Arrays</u></a></p>
<p><a href="#Chapter_18__Multidimensional_arr_1"><u>Chapter 18:
Multidimensional arrays</u></a></p>
<p><a href="#Chapter_19__Dictionary_1"><u>Chapter 19:
Dictionary</u></a></p>
<p><a href="#Chapter_20__List_1"><u>Chapter 20: List</u></a></p>
<p><a href="#Chapter_21__List_comprehensions_1"><u>Chapter 21: List
comprehensions</u></a></p>
<p><a href="#Chapter_22__List_slicing__select_1"><u>Chapter 22: List
slicing (selecting parts of</u></a></p>
<p><a href="#Chapter_23__groupby_1"><u>Chapter 23: groupby()</u></a></p>
<p><a href="#Chapter_24__Linked_lists_1"><u>Chapter 24: Linked
lists</u></a></p>
<p><a href="#Chapter_25__Linked_List_Node_1"><u>Chapter 25: Linked List
Node</u></a></p>
<p><a href="#Chapter_26__Filter_1"><u>Chapter 26: Filter</u></a></p>
<p><a href="#Chapter_27__Heapq_1"><u>Chapter 27: Heapq</u></a></p>
<p><a href="#Chapter_28__Tuple_1"><u>Chapter 28: Tuple</u></a></p>
<p><a href="#Chapter_29__Basic_Input_and_Outp_1"><u>Chapter 29: Basic
Input and Output</u></a></p>
<p><a href="#Chapter_30__Files___Folders_I_O_1"><u>Chapter 30: Files
&amp; Folders I/O</u></a></p>
<p><a href="#Chapter_31__os_path_1"><u>Chapter 31: os.path</u></a></p>
<p><a href="#Chapter_32__Iterables_and_Iterat_1"><u>Chapter 32:
Iterables and Iterators</u></a></p>
<p><a href="#Chapter_33__Functions_1"><u>Chapter 33:
Functions</u></a></p>
<p><a href="#Chapter_34__Defining_functions_w_1"><u>Chapter 34: Defining
functions with list</u></a></p>
<p><a href="#Chapter_35__Functional_Programmi_1"><u>Chapter 35:
Functional Programming in</u></a></p>
<p><a href="#Chapter_36__Partial_functions_1"><u>Chapter 36: Partial
functions</u></a></p>
<p><a href="#Chapter_37__Decorators_1"><u>Chapter 37:
Decorators</u></a></p>
<p><a href="#Chapter_38__Classes_1"><u>Chapter 38: Classes</u></a></p>
<p><a href="#Chapter_39__Metaclasses_1"><u>Chapter 39:
Metaclasses</u></a></p>
<p><a href="#Chapter_40__String_Formatting_1"><u>Chapter 40: String
Formatting</u></a></p>
<p><a href="#Chapter_41__String_Methods_1"><u>Chapter 41: String
Methods</u></a></p>
<p><a href="#Chapter_42__Using_loops_within_f_1"><u>Chapter 42: Using
loops within functions</u></a></p>
<p><a href="#Chapter_43__Importing_modules_1"><u>Chapter 43: Importing
modules</u></a></p>
<p><a href="#Chapter_44__Di_erence_between_Mo_1"><u>Chapter 44:
Dierence between Module</u></a></p>
<p><a href="#Chapter_45__Math_Module_1"><u>Chapter 45: Math
Module</u></a></p>
<p><a href="#Chapter_46__Complex_math_1"><u>Chapter 46: Complex
math</u></a></p>
<p><a href="#Chapter_47__Collections_module_1"><u>Chapter 47:
Collections module</u></a></p>
<p><a href="#Chapter_48__Operator_module_1"><u>Chapter 48: Operator
module</u></a></p>
<p><a href="#Chapter_49__JSON_Module_1"><u>Chapter 49: JSON
Module</u></a></p>
<p><a href="#Chapter_50__Sqlite3_Module_1"><u>Chapter 50: Sqlite3
Module</u></a></p>
<p><a href="#Chapter_51__The_os_Module_1"><u>Chapter 51: The os
Module</u></a></p>
<p><a href="#Chapter_52__The_locale_Module_1"><u>Chapter 52: The locale
Module</u></a></p>
<p><a href="#Chapter_53__Itertools_Module_1"><u>Chapter 53: Itertools
Module</u></a></p>
<p><a href="#Chapter_54__Asyncio_Module_1"><u>Chapter 54: Asyncio
Module</u></a></p>
<p><a href="#Chapter_55__Random_module_1"><u>Chapter 55: Random
module</u></a></p>
<p><a href="#Chapter_56__Functools_Module_1"><u>Chapter 56: Functools
Module</u></a></p>
<p><a href="#Chapter_57__The_dis_module_1"><u>Chapter 57: The dis
module</u></a></p>
<p><a href="#Chapter_58__The_base64_Module_1"><u>Chapter 58: The base64
Module</u></a></p>
<p><a href="#Chapter_59__Queue_Module_1"><u>Chapter 59: Queue
Module</u></a></p>
<p><a href="#Chapter_60__Deque_Module_1"><u>Chapter 60: Deque
Module</u></a></p>
<p><a href="#Chapter_61__Webbrowser_Module_1"><u>Chapter 61: Webbrowser
Module</u></a></p>
<p><a href="#Chapter_62__tkinter_1"><u>Chapter 62: tkinter</u></a></p>
<p><a href="#Chapter_63__pyautogui_module_1"><u>Chapter 63: pyautogui
module</u></a></p>
<p><a href="#Chapter_64__Indexing_and_Slicing_1"><u>Chapter 64: Indexing
and Slicing</u></a></p>
<p><a href="#Chapter_65__Plotting_with_Matplo_1"><u>Chapter 65: Plotting
with Matplotlib</u></a></p>
<p><a href="#Chapter_66__graph_tool_1"><u>Chapter 66:
graph-tool</u></a></p>
<p><a href="#Chapter_67__Generators_1"><u>Chapter 67:
Generators</u></a></p>
<p><a href="#Chapter_68__Reduce_1"><u>Chapter 68: Reduce</u></a></p>
<p><a href="#Chapter_69__Map_Function_1"><u>Chapter 69: Map
Function</u></a></p>
<p><a href="#Chapter_70__Exponentiation_1"><u>Chapter 70:
Exponentiation</u></a></p>
<p><a href="#Chapter_71__Searching_1"><u>Chapter 71:
Searching</u></a></p>
<p><a href="#Chapter_72__Sorting__Minimum_and_1"><u>Chapter 72: Sorting,
Minimum and</u></a></p>
<p><a href="#Chapter_73__Counting_1"><u>Chapter 73: Counting</u></a></p>
<p><a href="#Chapter_74__The_Print_Function_1"><u>Chapter 74: The Print
Function</u></a></p>
<p><a href="#Chapter_75__Regular_Expressions_1"><u>Chapter 75: Regular
Expressions (Regex)</u></a></p>
<p><a href="#Chapter_76__Copying_data_1"><u>Chapter 76: Copying
data</u></a></p>
<p><a href="#Chapter_77__Context_Managers___w_1"><u>Chapter 77: Context
Managers (“with”</u></a></p>
<p><a href="#Chapter_78__The___name___special_1"><u>Chapter 78: The
__name__ special</u></a></p>
<p><a href="#Chapter_79__Checking_Path_Existe_1"><u>Chapter 79: Checking
Path Existence and</u></a></p>
<p><a href="#Chapter_80__Creating_Python_pack_1"><u>Chapter 80: Creating
Python packages</u></a></p>
<p><a href="#Chapter_81__Usage_of__pip__modul_1"><u>Chapter 81: Usage of
"pip" module: PyPI</u></a></p>
<p><a href="#Chapter_82__pip__PyPI_Package_Ma_1"><u>Chapter 82: pip:
PyPI Package Manager</u></a></p>
<p><a href="#Chapter_83__Parsing_Command_Line_1"><u>Chapter 83: Parsing
Command Line</u></a></p>
<p><a href="#Chapter_84__Subprocess_Library_1"><u>Chapter 84: Subprocess
Library</u></a></p>
<p><a href="#Chapter_85__setup_py_1"><u>Chapter 85: setup.py</u></a></p>
<p><a href="#Chapter_86__Recursion_1"><u>Chapter 86:
Recursion</u></a></p>
<p><a href="#Chapter_87__Type_Hints_1"><u>Chapter 87: Type
Hints</u></a></p>
<p><a href="#Chapter_88__Exceptions_1"><u>Chapter 88:
Exceptions</u></a></p>
<p><a href="#Chapter_89__Raise_Custom_Errors_1"><u>Chapter 89: Raise
Custom Errors /</u></a></p>
<p><a href="#Chapter_90__Commonwealth_Excepti_1"><u>Chapter 90:
Commonwealth Exceptions</u></a></p>
<p><a href="#Chapter_91__urllib_1"><u>Chapter 91: urllib</u></a></p>
<p>Notes for Professionals Python Python <strong>Notes for
Professionals</strong>®</p>
<p><img src="media/index-1_1.jpeg" style="width:6.5in;height:4.02778in"
alt="index-1_1.jpg" /></p>
<p>800+ pages</p>
<p>of professional hints and tricks</p>
<p><a href="https://goalkicker.com">GoalKicker.com</a> Disclaimer</p>
<p>This is an unocial free book created for educational purposes and
is</p>
<p><a href="https://goalkicker.com">Free Programming Books</a> not
aliated with ocial Python® group(s) or company(s).</p>
<p>All trademarks and registered trademarks are</p>
<p>the property of their respective owners</p>
<p>Contents</p>
<p><a href="#About"><strong>About</strong></a>
...................................................................................................................................................................................
<a href="#About">1</a></p>
<p><a href="#Chapter_1__Getting_started_with"><strong>Chapter 1: Getting
started with Python Language</strong>
......................................................................................
2</a></p>
<p><a href="#Chapter_1__Getting_started_with">Section 1.1: Getting
Started</a>
...........................................................................................................................................
<a href="#Chapter_1__Getting_started_with">2</a></p>
<p><a href="#Python_s_interpretive_power_for">Section 1.2: Creating
variables and assigning values</a>
................................................................................................
<a href="#Python_s_interpretive_power_for">6</a></p>
<p><a href="#Section_1_3__Block_Indentation">Section 1.3: Block
Indentation</a>
.....................................................................................................................................
<a href="#Section_1_3__Block_Indentation">10</a></p>
<p><a href="#Python_2_allows_mixing_tabs_and">Section 1.4: Datatypes</a>
.................................................................................................................................................
<a href="#Python_2_allows_mixing_tabs_and">11</a></p>
<p><a href="#__bar">Section 1.5: Collection Types</a>
......................................................................................................................................
<a href="#__bar">15</a></p>
<p><a href="#A_defaultdict_will_never_raise_a">Section 1.6: IDLE -
Python GUI</a>
....................................................................................................................................
<a href="#A_defaultdict_will_never_raise_a">19</a></p>
<p><a href="#Section_1_7__User_Input">Section 1.7: User Input</a>
.................................................................................................................................................
<a href="#Section_1_7__User_Input">21</a></p>
<p><a href="#Section_1_7__User_Input">Section 1.8: Built in Modules and
Functions</a>
..............................................................................................................
<a href="#Section_1_7__User_Input">21</a></p>
<p><a href="#____math___doc">Section 1.9: Creating a module</a>
...................................................................................................................................
<a href="#____math___doc">25</a></p>
<p><a href="#____Hello">Section 1.10: Installation of Python 2.7.x and
3.x</a>
.......................................................................................................
<a href="#____Hello">26</a></p>
<p><a href="#sudo_make_install">Section 1.11: String function - str()
and repr()</a>
...........................................................................................................
<a href="#sudo_make_install">28</a></p>
<p><a href="#For_many_types__this_function_ma">Section 1.12: Installing
external modules using pip</a>
...................................................................................................
<a href="#For_many_types__this_function_ma">29</a></p>
<p><a href="#For_more_information_regarding_p">Section 1.13: Help
Utility</a>
...............................................................................................................................................
<a href="#For_more_information_regarding_p">31</a></p>
<p><a href="#Chapter_2__Python_Data_Types"><strong>Chapter 2: Python
Data Types</strong></a>
............................................................................................................................
<a href="#Chapter_2__Python_Data_Types">33</a></p>
<p><a href="#Chapter_2__Python_Data_Types">Section 2.1: String Data
Type</a>
.....................................................................................................................................
<a href="#Chapter_2__Python_Data_Types">33</a></p>
<p><a href="#Chapter_2__Python_Data_Types">Section 2.2: Set Data
Types</a>
.......................................................................................................................................
<a href="#Chapter_2__Python_Data_Types">33</a></p>
<p><a href="#Chapter_2__Python_Data_Types">Section 2.3: Numbers data
type</a>
................................................................................................................................
<a href="#Chapter_2__Python_Data_Types">33</a></p>
<p><a href="#Section_2_4__List_Data_Type">Section 2.4: List Data
Type</a>
.........................................................................................................................................
<a href="#Section_2_4__List_Data_Type">34</a></p>
<p><a href="#Section_2_4__List_Data_Type">Section 2.5: Dictionary Data
Type</a>
.............................................................................................................................
<a href="#Section_2_4__List_Data_Type">34</a></p>
<p><a href="#Section_2_4__List_Data_Type">Section 2.6: Tuple Data
Type</a>
.....................................................................................................................................
<a href="#Section_2_4__List_Data_Type">34</a></p>
<p><a href="#Chapter_3__Indentation"><strong>Chapter 3:
Indentation</strong></a>
.............................................................................................................................................
<a href="#Chapter_3__Indentation">35</a></p>
<p><a href="#Chapter_3__Indentation">Section 3.1: Simple example</a>
.......................................................................................................................................
<a href="#Chapter_3__Indentation">35</a></p>
<p><a href="#Chapter_3__Indentation">Section 3.2: How Indentation is
Parsed</a>
.....................................................................................................................
<a href="#Chapter_3__Indentation">35</a></p>
<p><a href="#if_foo">Section 3.3: Indentation Errors</a>
...................................................................................................................................
<a href="#if_foo">36</a></p>
<p><a href="#Chapter_4__Comments_and_Document"><strong>Chapter 4:
Comments and Documentation</strong></a>
..................................................................................................
<a href="#Chapter_4__Comments_and_Document">37</a></p>
<p><a href="#Chapter_4__Comments_and_Document">Section 4.1: Single line,
inline and multiline comments</a>
............................................................................................
<a href="#Chapter_4__Comments_and_Document">37</a></p>
<p><a href="#Chapter_4__Comments_and_Document">Section 4.2:
Programmatically accessing docstrings</a>
..............................................................................................
<a href="#Chapter_4__Comments_and_Document">37</a></p>
<p><a href="#function___doc___is_just_the_act">Section 4.3: Write
documentation using docstrings</a>
................................................................................................
<a href="#function___doc___is_just_the_act">38</a></p>
<p><a href="#Chapter_5__Date_and_Time"><strong>Chapter 5: Date and
Time</strong></a>
......................................................................................................................................
<a href="#Chapter_5__Date_and_Time">42</a></p>
<p><a href="#Chapter_5__Date_and_Time">Section 5.1: Parsing a string
into a timezone aware datetime object</a>
.................................................................... <a
href="#Chapter_5__Date_and_Time">42</a></p>
<p><a href="#Chapter_5__Date_and_Time">Section 5.2: Constructing
timezone-aware datetimes</a>
............................................................................................
<a href="#Chapter_5__Date_and_Time">42</a></p>
<p><a href="#dt_new___dt_pdt___timedelta_hour">Section 5.3: Computing
time dierences</a>
..................................................................................................................
<a href="#dt_new___dt_pdt___timedelta_hour">44</a></p>
<p><a href="#dt_new___dt_pdt___timedelta_hour">Section 5.4: Basic
datetime objects usage</a>
...............................................................................................................
<a href="#dt_new___dt_pdt___timedelta_hour">44</a></p>
<p><a href="#__Datetime_object">Section 5.5: Switching between time
zones</a>
..............................................................................................................
<a href="#__Datetime_object">45</a></p>
<p><a href="#__Datetime_object">Section 5.6: Simple date arithmetic</a>
...........................................................................................................................
<a href="#__Datetime_object">45</a></p>
<p><a href="#This_will_produce_results_simila">Section 5.7: Converting
timestamp to datetime</a>
......................................................................................................
<a href="#This_will_produce_results_simila">46</a></p>
<p><a href="#This_will_produce_results_simila">Section 5.8: Subtracting
months from a date accurately</a>
.......................................................................................
<a href="#This_will_produce_results_simila">46</a></p>
<p><a href="#This_will_produce_results_simila">Section 5.9: Parsing an
arbitrary ISO 8601 timestamp with minimal libraries</a>
...................................................... <a
href="#This_will_produce_results_simila">46</a></p>
<p><a href="#str_datetime_datetime_2016__7__2">Section 5.10: Get an ISO
8601 timestamp</a>
..................................................................................................................
<a href="#str_datetime_datetime_2016__7__2">47</a></p>
<p><a href="#str_datetime_datetime_2016__7__2">Section 5.11: Parsing a
string with a short time zone name into a timezone aware datetime
object</a> ................ <a
href="#str_datetime_datetime_2016__7__2">47</a></p>
<p><a href="#a_timezone_aware_datetime_object">Section 5.12: Fuzzy
datetime parsing (extracting datetime out of a text)</a>
............................................................ <a
href="#a_timezone_aware_datetime_object">48</a></p>
<p><a href="#string_not_recognized_as_being_p">Section 5.13: Iterate
over dates</a>
..................................................................................................................................
<a href="#string_not_recognized_as_being_p">49</a></p>
<p><a href="#Chapter_6__Date_Formatting"><strong>Chapter 6: Date
Formatting</strong></a>
..................................................................................................................................
<a href="#Chapter_6__Date_Formatting">50</a></p>
<p><a href="#Chapter_6__Date_Formatting">Section 6.1: Time between two
date-times</a>
...............................................................................................................
<a href="#Chapter_6__Date_Formatting">50</a></p>
<p><a href="#Chapter_6__Date_Formatting">Section 6.2: Outputting
datetime object to string</a>
....................................................................................................
<a href="#Chapter_6__Date_Formatting">50</a></p>
<p><a href="#Chapter_6__Date_Formatting">Section 6.3: Parsing string to
datetime object</a>
.........................................................................................................
<a href="#Chapter_6__Date_Formatting">50</a></p>
<h1
id="chapter-7-enum-..........................................................................................................................................................-51"><a
href="#Chapter_7__Enum_1">Chapter 7: Enum</a>
..........................................................................................................................................................
<a href="#Chapter_7__Enum_1">51</a></h1>
<p><a href="#Chapter_7__Enum_1">Section 7.1: Creating an enum (Python
2.4 through 3.3)</a>
.........................................................................................
<a href="#Chapter_7__Enum_1">51</a></p>
<p><a href="#Chapter_7__Enum_1">Section 7.2: Iteration</a>
...................................................................................................................................................
<a href="#Chapter_7__Enum_1">51</a></p>
<h1
id="chapter-8-set-...............................................................................................................................................................-52"><a
href="#Chapter_8__Set_1">Chapter 8: Set</a>
...............................................................................................................................................................
<a href="#Chapter_8__Set_1">52</a></h1>
<p><a href="#Chapter_8__Set_1">Section 8.1: Operations on sets</a>
..................................................................................................................................
<a href="#Chapter_8__Set_1">52</a></p>
<p><a href="#symmetric_difference_s____t">Section 8.2: Get the unique
elements of a list</a>
..........................................................................................................
<a href="#symmetric_difference_s____t">53</a></p>
<p><a href="#symmetric_difference_s____t">Section 8.3: Set of Sets</a>
................................................................................................................................................
<a href="#symmetric_difference_s____t">53</a></p>
<p><a href="#symmetric_difference_s____t">Section 8.4: Set Operations
using Methods and Builtins</a>
.........................................................................................
<a href="#symmetric_difference_s____t">53</a></p>
<p><a href="#Sets_a_and_d_are_disjoint_if_no">Section 8.5: Sets versus
multisets</a>
..............................................................................................................................
<a href="#Sets_a_and_d_are_disjoint_if_no">55</a></p>
<h1
id="chapter-9-simple-mathematical-operators-.................................................................................................-57"><a
href="#Chapter_9__Simple_Mathematical_O_1">Chapter 9: Simple
Mathematical Operators</a>
.................................................................................................
<a href="#Chapter_9__Simple_Mathematical_O_1">57</a></h1>
<p><a href="#Chapter_9__Simple_Mathematical_O_1">Section 9.1:
Division</a>
.....................................................................................................................................................
<a href="#Chapter_9__Simple_Mathematical_O_1">57</a></p>
<p><a href="#from___future___import_division">Section 9.2: Addition</a>
....................................................................................................................................................
<a href="#from___future___import_division">58</a></p>
<p><a href="#__Using_the__in_place_______oper">Section 9.3:
Exponentiation</a>
........................................................................................................................................
<a href="#__Using_the__in_place_______oper">59</a></p>
<p><a href="#import_math">Section 9.4: Trigonometric Functions</a>
........................................................................................................................
<a href="#import_math">60</a></p>
<p><a href="#Section_9_5__Inplace_Operations">Section 9.5: Inplace
Operations</a>
.................................................................................................................................
<a href="#Section_9_5__Inplace_Operations">61</a></p>
<p><a href="#Section_9_5__Inplace_Operations">Section 9.6:
Subtraction</a>
..............................................................................................................................................
<a href="#Section_9_5__Inplace_Operations">61</a></p>
<p><a href="#Section_9_5__Inplace_Operations">Section 9.7:
Multiplication</a>
...........................................................................................................................................
<a href="#Section_9_5__Inplace_Operations">61</a></p>
<p><a href="#operator_mul_a__b__________6">Section 9.8: Logarithms</a>
..............................................................................................................................................
<a href="#operator_mul_a__b__________6">62</a></p>
<p><a href="#operator_mul_a__b__________6">Section 9.9: Modulus</a>
...................................................................................................................................................
<a href="#operator_mul_a__b__________6">62</a></p>
<h1
id="chapter-10-bitwise-operators-.............................................................................................................................-65"><a
href="#Chapter_10__Bitwise_Operators_1">Chapter 10: Bitwise
Operators</a>
.............................................................................................................................
<a href="#Chapter_10__Bitwise_Operators_1">65</a></h1>
<p><a href="#Chapter_10__Bitwise_Operators_1">Section 10.1: Bitwise
NOT</a>
............................................................................................................................................
<a href="#Chapter_10__Bitwise_Operators_1">65</a></p>
<p><a href="#__Out___3">Section 10.2: Bitwise XOR (Exclusive OR)</a>
..................................................................................................................
<a href="#__Out___3">66</a></p>
<p><a href="#__Out__0b100010">Section 10.3: Bitwise AND</a>
............................................................................................................................................
<a href="#__Out__0b100010">67</a></p>
<p><a href="#__Out__0b100010">Section 10.4: Bitwise OR</a>
..............................................................................................................................................
<a href="#__Out__0b100010">67</a></p>
<p><a href="#__Out__0b100010">Section 10.5: Bitwise Left Shift</a>
....................................................................................................................................
<a href="#__Out__0b100010">67</a></p>
<p><a href="#3____4">Section 10.6: Bitwise Right Shift</a>
..................................................................................................................................
<a href="#3____4">68</a></p>
<p><a href="#3____4">Section 10.7: Inplace Operations</a>
................................................................................................................................
<a href="#3____4">68</a></p>
<h1
id="chapter-11-boolean-operators-............................................................................................................................-69"><a
href="#Chapter_11__Boolean_Operators_1">Chapter 11: Boolean
Operators</a>
............................................................................................................................
<a href="#Chapter_11__Boolean_Operators_1">69</a></h1>
<p><a href="#Chapter_11__Boolean_Operators_1">Section 11.1: `and` and
`or` are not guaranteed to return a boolean</a>
......................................................................
<a href="#Chapter_11__Boolean_Operators_1">69</a></p>
<p><a href="#Chapter_11__Boolean_Operators_1">Section 11.2: A simple
example</a>
...................................................................................................................................
<a href="#Chapter_11__Boolean_Operators_1">69</a></p>
<p><a href="#Chapter_11__Boolean_Operators_1">Section 11.3:
Short-circuit evaluation</a>
.........................................................................................................................
<a href="#Chapter_11__Boolean_Operators_1">69</a></p>
<p><a href="#false_func">Section 11.4: and</a>
...........................................................................................................................................................
<a href="#false_func">70</a></p>
<p><a href="#false_func">Section 11.5: or</a>
..............................................................................................................................................................
<a href="#false_func">70</a></p>
<p><a href="#x___False">Section 11.6: not</a>
............................................................................................................................................................
<a href="#x___False">71</a></p>
<h1
id="chapter-12-operator-precedence-......................................................................................................................-72"><a
href="#Chapter_12__Operator_Precedence_1">Chapter 12: Operator
Precedence</a>
......................................................................................................................
<a href="#Chapter_12__Operator_Precedence_1">72</a></h1>
<p><a href="#Chapter_12__Operator_Precedence_1">Section 12.1: Simple
Operator Precedence Examples in python</a>
.............................................................................
<a href="#Chapter_12__Operator_Precedence_1">72</a></p>
<h1
id="chapter-13-variable-scope-and-binding-.........................................................................................................-73"><a
href="#Chapter_13__Variable_Scope_and_B_1">Chapter 13: Variable Scope
and Binding</a>
.........................................................................................................
<a href="#Chapter_13__Variable_Scope_and_B_1">73</a></h1>
<p><a href="#Chapter_13__Variable_Scope_and_B_1">Section 13.1: Nonlocal
Variables</a>
.................................................................................................................................
<a href="#Chapter_13__Variable_Scope_and_B_1">73</a></p>
<p><a href="#Chapter_13__Variable_Scope_and_B_1">Section 13.2: Global
Variables</a>
....................................................................................................................................
<a href="#Chapter_13__Variable_Scope_and_B_1">73</a></p>
<p><a href="#read_y___________NameError__glob">Section 13.3: Local
Variables</a>
......................................................................................................................................
<a href="#read_y___________NameError__glob">74</a></p>
<p><a href="#Control_flow_constructs_have_no">Section 13.4: The del
command</a>
.................................................................................................................................
<a href="#Control_flow_constructs_have_no">75</a></p>
<p><a href="#x_____a___1___b___2">Section 13.5: Functions skip class
scope when looking up names</a>
.........................................................................
<a href="#x_____a___1___b___2">76</a></p>
<p><a href="#The_scope_of_names_defined_in_a">Section 13.6: Local vs
Global Scope</a>
...........................................................................................................................
<a href="#The_scope_of_names_defined_in_a">77</a></p>
<p><a href="#print__bar__in_globals_______Fal">Section 13.7: Binding
Occurrence</a>
...............................................................................................................................
<a href="#print__bar__in_globals_______Fal">79</a></p>
<h1
id="chapter-14-conditionals-.........................................................................................................................................-80"><a
href="#Chapter_14__Conditionals_1">Chapter 14: Conditionals</a>
.........................................................................................................................................
<a href="#Chapter_14__Conditionals_1">80</a></h1>
<p><a href="#Chapter_14__Conditionals_1">Section 14.1: Conditional
Expression (or "The Ternary Operator")</a>
.........................................................................
<a href="#Chapter_14__Conditionals_1">80</a></p>
<p><a href="#Chapter_14__Conditionals_1">Section 14.2: if, elif, and
else</a>
.......................................................................................................................................
<a href="#Chapter_14__Conditionals_1">80</a></p>
<p><a href="#Chapter_14__Conditionals_1">Section 14.3: Truth Values</a>
...........................................................................................................................................
<a href="#Chapter_14__Conditionals_1">80</a></p>
<p><a href="#None">Section 14.4: Boolean Logic Expressions</a>
...................................................................................................................
<a href="#None">81</a></p>
<p><a href="#____if_a_in__3__4__6">Section 14.5: Using the cmp function
to get the comparison result of two objects</a>
............................................. <a
href="#____if_a_in__3__4__6">83</a></p>
<p><a href="#____if_a_in__3__4__6">Section 14.6: Else statement</a>
.......................................................................................................................................
<a href="#____if_a_in__3__4__6">83</a></p>
<p><a href="#Section_14_7__Testing_if_an_obje">Section 14.7: Testing if
an object is None and assigning it</a>
......................................................................................
<a href="#Section_14_7__Testing_if_an_obje">84</a></p>
<p><a href="#Section_14_7__Testing_if_an_obje">Section 14.8: If
statement</a>
............................................................................................................................................
<a href="#Section_14_7__Testing_if_an_obje">84</a></p>
<h1
id="chapter-15-comparisons-........................................................................................................................................-86"><a
href="#Chapter_15__Comparisons_1">Chapter 15: Comparisons</a>
........................................................................................................................................
<a href="#Chapter_15__Comparisons_1">86</a></h1>
<p><a href="#Chapter_15__Comparisons_1">Section 15.1: Chain
Comparisons</a>
................................................................................................................................
<a href="#Chapter_15__Comparisons_1">86</a></p>
<p><a href="#Section_15_2__Comparison_by__is">Section 15.2: Comparison
by `is` vs `==`</a>
......................................................................................................................
<a href="#Section_15_2__Comparison_by__is">87</a></p>
<p><a href="#if_var_is_sentinel">Section 15.3: Greater than or less
than</a>
......................................................................................................................
<a href="#if_var_is_sentinel">88</a></p>
<p><a href="#if_var_is_sentinel">Section 15.4: Not equal to</a>
...........................................................................................................................................
<a href="#if_var_is_sentinel">88</a></p>
<p><a href="#Section_15_5__Equal_To">Section 15.5: Equal To</a>
.................................................................................................................................................
<a href="#Section_15_5__Equal_To">89</a></p>
<p><a href="#Section_15_5__Equal_To">Section 15.6: Comparing Objects</a>
...............................................................................................................................
<a href="#Section_15_5__Equal_To">89</a></p>
<h1
id="chapter-16-loops-.......................................................................................................................................................-91"><a
href="#Chapter_16__Loops_1">Chapter 16: Loops</a>
.......................................................................................................................................................
<a href="#Chapter_16__Loops_1">91</a></h1>
<p><a href="#Chapter_16__Loops_1">Section 16.1: Break and Continue in
Loops</a>
................................................................................................................
<a href="#Chapter_16__Loops_1">91</a></p>
<p><a href="#1___1_1">Section 16.2: For loops</a>
................................................................................................................................................
<a href="#1___1_1">93</a></p>
<p><a href="#1___1_1">Section 16.3: Iterating over lists</a>
..................................................................................................................................
<a href="#1___1_1">93</a></p>
<p><a href="#The_range_function_generates_num">Section 16.4: Loops with
an "else" clause</a>
..................................................................................................................
<a href="#The_range_function_generates_num">94</a></p>
<p><a href="#">Section 16.5: The Pass Statement</a>
..............................................................................................................................
<a href="#">96</a></p>
<p><a href="#pass__we_don_t_want_to_do_anythi">Section 16.6: Iterating
over dictionaries</a>
....................................................................................................................
<a href="#pass__we_don_t_want_to_do_anythi">97</a></p>
<p><a href="#a____1">Section 16.7: The "half loop" do-while</a>
........................................................................................................................
<a href="#a____1">98</a></p>
<p><a href="#a____1">Section 16.8: Looping and Unpacking</a>
.......................................................................................................................
<a href="#a____1">98</a></p>
<p><a href="#i1__i2__i3___item">Section 16.9: Iterating dierent portion
of a list with dierent step size</a>
............................................................... <a
href="#i1__i2__i3___item">99</a></p>
<p><a href="#for_i_in_range_2_4">Section 16.10: While Loop</a>
..........................................................................................................................................
<a href="#for_i_in_range_2_4">100</a></p>
<p><span id="Chapter_17__Arrays" class="anchor"></span><a
href="#Chapter_17__Arrays_1">Chapter 17: Arrays
....................................................................................................................................................
102</a></p>
<p><a href="#Chapter_17__Arrays_1">Section 17.1: Access individual
elements through indexes
.....................................................................................
102</a></p>
<p><a href="#Chapter_17__Arrays_1">Section 17.2: Basic Introduction to
Arrays</a>
..............................................................................................................
<a href="#Chapter_17__Arrays_1">102</a></p>
<p><a href="#In_the_declaration_above__arrayI">Section 17.3: Append any
value to the array using append() method</a>
................................................................ <a
href="#In_the_declaration_above__arrayI">103</a></p>
<p><a href="#In_the_declaration_above__arrayI">Section 17.4: Insert
value in an array using insert() method</a>
................................................................................
<a href="#In_the_declaration_above__arrayI">103</a></p>
<p><a href="#In_the_declaration_above__arrayI">Section 17.5: Extend
python array using extend() method</a>
...................................................................................
<a href="#In_the_declaration_above__arrayI">103</a></p>
<p><a href="#Section_17_6__Add_items_from_lis">Section 17.6: Add items
from list into array using fromlist() method</a>
.................................................................. <a
href="#Section_17_6__Add_items_from_lis">104</a></p>
<p><a href="#Section_17_6__Add_items_from_lis">Section 17.7: Remove any
array element using remove() method</a>
..................................................................... <a
href="#Section_17_6__Add_items_from_lis">104</a></p>
<p><a href="#Section_17_6__Add_items_from_lis">Section 17.8: Remove last
array element using pop() method</a>
............................................................................
<a href="#Section_17_6__Add_items_from_lis">104</a></p>
<p><a href="#Section_17_6__Add_items_from_lis">Section 17.9: Fetch any
element through its index using index() method</a>
........................................................... <a
href="#Section_17_6__Add_items_from_lis">104</a></p>
<p><a href="#Section_17_6__Add_items_from_lis">Section 17.10: Reverse a
python array using reverse() method</a>
...........................................................................
<a href="#Section_17_6__Add_items_from_lis">104</a></p>
<p><a href="#Section_17_11__Get_array_bu_er_i">Section 17.11: Get array
buer information through buer_info() method</a>
........................................................ <a
href="#Section_17_11__Get_array_bu_er_i">105</a></p>
<p><a href="#Section_17_11__Get_array_bu_er_i">Section 17.12: Check for
number of occurrences of an element using count() method</a>
.................................... <a
href="#Section_17_11__Get_array_bu_er_i">105</a></p>
<p><a href="#Section_17_11__Get_array_bu_er_i">Section 17.13: Convert
array to string using tostring() method</a>
............................................................................
<a href="#Section_17_11__Get_array_bu_er_i">105</a></p>
<p><a href="#Section_17_11__Get_array_bu_er_i">Section 17.14: Convert
array to a python list with same elements using tolist() method</a>
.................................. <a
href="#Section_17_11__Get_array_bu_er_i">105</a></p>
<p><a href="#Section_17_11__Get_array_bu_er_i">Section 17.15: Append a
string to char array using fromstring() method</a>
........................................................... <a
href="#Section_17_11__Get_array_bu_er_i">105</a></p>
<h1
id="chapter-18-multidimensional-arrays-..............................................................................................................-106"><a
href="#Chapter_18__Multidimensional_arr_1">Chapter 18: Multidimensional
arrays</a>
..............................................................................................................
<a href="#Chapter_18__Multidimensional_arr_1">106</a></h1>
<p><a href="#Chapter_18__Multidimensional_arr_1">Section 18.1: Lists in
lists</a>
............................................................................................................................................
<a href="#Chapter_18__Multidimensional_arr_1">106</a></p>
<p><a href="#Chapter_18__Multidimensional_arr_1">Section 18.2: Lists in
lists in lists in..</a>
..........................................................................................................................
<a href="#Chapter_18__Multidimensional_arr_1">106</a></p>
<h1
id="chapter-19-dictionary-............................................................................................................................................-108"><a
href="#Chapter_19__Dictionary_1">Chapter 19: Dictionary</a>
............................................................................................................................................
<a href="#Chapter_19__Dictionary_1">108</a></h1>
<p><a href="#Chapter_19__Dictionary_1">Section 19.1: Introduction to
Dictionary</a>
...................................................................................................................
<a href="#Chapter_19__Dictionary_1">108</a></p>
<p><a href="#Section_19_2__Avoiding_KeyError">Section 19.2: Avoiding
KeyError Exceptions</a>
...........................................................................................................
<a href="#Section_19_2__Avoiding_KeyError">109</a></p>
<p><a href="#Section_19_2__Avoiding_KeyError">Section 19.3: Iterating
Over a Dictionary
.................................................................................................................
109</a></p>
<p><a href="#d_____a___1___b___2___c__3">Section 19.4: Dictionary with
default values</a>
...........................................................................................................
<a href="#d_____a___1___b___2___c__3">110</a></p>
<p><a href="#__Another_key_____This_worked">Section 19.5: Merging
dictionaries</a>
...........................................................................................................................
<a href="#__Another_key_____This_worked">111</a></p>
<p><a href="#__Another_key_____This_worked">Section 19.6: Accessing keys
and values</a>
................................................................................................................
<a href="#__Another_key_____This_worked">111</a></p>
<p><a href="#_b____2">Section 19.7: Accessing values of a dictionary</a>
.......................................................................................................
<a href="#_b____2">112</a></p>
<p><a href="#_b____2">Section 19.8: Creating a dictionary</a>
..........................................................................................................................
<a href="#_b____2">112</a></p>
<p><a href="#Every_key_must_be_unique__otherw">Section 19.9: Creating an
ordered dictionary</a>
.........................................................................................................
<a href="#Every_key_must_be_unique__otherw">113</a></p>
<p><a href="#Every_key_must_be_unique__otherw">Section 19.10: Unpacking
dictionaries using the ** operator</a>
.................................................................................
<a href="#Every_key_must_be_unique__otherw">113</a></p>
<p><a href="#____def_parrot_voltage__state__a">Section 19.11: The
trailing comma</a>
............................................................................................................................
<a href="#____def_parrot_voltage__state__a">114</a></p>
<p><a href="#____def_parrot_voltage__state__a">Section 19.12: The dict()
constructor</a>
........................................................................................................................
<a href="#____def_parrot_voltage__state__a">114</a></p>
<p><a href="#____def_parrot_voltage__state__a">Section 19.13:
Dictionaries Example</a>
.........................................................................................................................
<a href="#____def_parrot_voltage__state__a">114</a></p>
<p><a href="#car_____wheels___4___color____Re">Section 19.14: All
combinations of dictionary values
..............................................................................................
115</a></p>
<h1
id="chapter-20-list-.........................................................................................................................................................-117"><a
href="#Chapter_20__List_1">Chapter 20: List</a>
.........................................................................................................................................................
<a href="#Chapter_20__List_1">117</a></h1>
<p><a href="#Chapter_20__List_1">Section 20.1: List methods and
supported operators</a>
............................................................................................
<a href="#Chapter_20__List_1">117</a></p>
<p><a href="#copy_____Returns_a_shallow_copy">Section 20.2: Accessing
list values</a>
..........................................................................................................................
<a href="#copy_____Returns_a_shallow_copy">122</a></p>
<p><a href="#Advanced_slicing">Section 20.3: Checking if list is
empty</a>
.....................................................................................................................
<a href="#Advanced_slicing">123</a></p>
<p><a href="#Advanced_slicing">Section 20.4: Iterating over a list</a>
.............................................................................................................................
<a href="#Advanced_slicing">123</a></p>
<p><a href="#baz">Section 20.5: Checking whether an item is in a
list</a>
................................................................................................
<a href="#baz">124</a></p>
<p><a href="#baz">Section 20.6: Any and All</a>
..........................................................................................................................................
<a href="#baz">124</a></p>
<p><a href="#vals____1__2__3__4">Section 20.7: Reversing list
elements</a>
......................................................................................................................
<a href="#vals____1__2__3__4">125</a></p>
<p><a href="#vals____1__2__3__4">Section 20.8: Concatenate and Merge
lists</a>
............................................................................................................
<a href="#vals____1__2__3__4">125</a></p>
<p><a href="#__a2_b2">Section 20.9: Length of a list</a>
....................................................................................................................................
<a href="#__a2_b2">126</a></p>
<p><a href="#__a2_b2">Section 20.10: Remove duplicate values in list</a>
.......................................................................................................
<a href="#__a2_b2">126</a></p>
<p><a href="#names_____aixk____duke____edik">Section 20.11: Comparison
of lists</a>
............................................................................................................................
<a href="#names_____aixk____duke____edik">127</a></p>
<p><a href="#names_____aixk____duke____edik">Section 20.12: Accessing
values in nested list</a>
........................................................................................................
<a href="#names_____aixk____duke____edik">127</a></p>
<p><a href="#Using_nested_for_loops_to_print">Section 20.13:
Initializing a List to a Fixed Number of Elements
...........................................................................
128</a></p>
<h1
id="chapter-21-list-comprehensions-......................................................................................................................-130"><a
href="#Chapter_21__List_comprehensions_1">Chapter 21: List
comprehensions</a>
......................................................................................................................
<a href="#Chapter_21__List_comprehensions_1">130</a></h1>
<p><a href="#Chapter_21__List_comprehensions_1">Section 21.1: List
Comprehensions</a>
...........................................................................................................................
<a href="#Chapter_21__List_comprehensions_1">130</a></p>
<p><a href="#_sorted_x__for_x_in___2__1____4">Section 21.2: Conditional
List Comprehensions</a>
......................................................................................................
<a href="#_sorted_x__for_x_in___2__1____4">132</a></p>
<p><a href="#The_same_couldn_t_have_been_achi">Section 21.3: Avoid
repetitive and expensive operations using conditional clause</a>
............................................ <a
href="#The_same_couldn_t_have_been_achi">134</a></p>
<p><a href="#function_invocation_of_the_origi">Section 21.4: Dictionary
Comprehensions
...............................................................................................................
135</a></p>
<p><a href="#dict__name__len_name___for_name">Section 21.5: List
Comprehensions with Nested Loops</a>
..........................................................................................
<a href="#dict__name__len_name___for_name">136</a></p>
<p><a href="#comprehension_could_be_error_pro">Section 21.6: Generator
Expressions
........................................................................................................................
138</a></p>
<p><a href="#Section_21_7__Set_Comprehensions">Section 21.7: Set
Comprehensions</a>
...........................................................................................................................
<a href="#Section_21_7__Set_Comprehensions">140</a></p>
<p><a href="#Section_21_7__Set_Comprehensions">Section 21.8: Refactoring
filter and map to list comprehensions
.........................................................................
140</a></p>
<p><a href="#__Filter">Section 21.9: Comprehensions involving tuples
......................................................................................................
141</a></p>
<p><a href="#__SyntaxError__invalid_syntax">Section 21.10: Counting
Occurrences Using Comprehension</a>
...............................................................................
<a href="#__SyntaxError__invalid_syntax">142</a></p>
<p><a href="#__SyntaxError__invalid_syntax">Section 21.11: Changing
Types in a List</a>
....................................................................................................................
<a href="#__SyntaxError__invalid_syntax">142</a></p>
<p><a href="#__SyntaxError__invalid_syntax">Section 21.12: Nested List
Comprehensions</a>
............................................................................................................
<a href="#__SyntaxError__invalid_syntax">142</a></p>
<p><a href="#The_Nested_example_is_equivalent">Section 21.13: Iterate
two or more list simultaneously within list comprehension</a>
.............................................. <a
href="#The_Nested_example_is_equivalent">143</a></p>
<h1
id="chapter-22-list-slicing-selecting-parts-of-lists-.......................................................................................-144"><a
href="#Chapter_22__List_slicing__select_1">Chapter 22: List slicing
(selecting parts of lists)</a>
.......................................................................................
<a href="#Chapter_22__List_slicing__select_1">144</a></h1>
<p><a href="#Chapter_22__List_slicing__select_1">Section 22.1: Using the
third "step" argument</a>
........................................................................................................
<a href="#Chapter_22__List_slicing__select_1">144</a></p>
<p><a href="#Chapter_22__List_slicing__select_1">Section 22.2: Selecting
a sublist from a list</a>
............................................................................................................
<a href="#Chapter_22__List_slicing__select_1">144</a></p>
<p><a href="#Chapter_22__List_slicing__select_1">Section 22.3: Reversing
a list with slicing</a>
................................................................................................................
<a href="#Chapter_22__List_slicing__select_1">144</a></p>
<p><a href="#Chapter_22__List_slicing__select_1">Section 22.4: Shifting
a list using slicing
..................................................................................................................
144</a></p>
<h1
id="chapter-23-groupby-............................................................................................................................................-146"><a
href="#Chapter_23__groupby_1">Chapter 23: groupby()</a>
............................................................................................................................................
<a href="#Chapter_23__groupby_1">146</a></h1>
<p><a href="#Chapter_23__groupby_1">Section 23.1: Example 4
.............................................................................................................................................
146</a></p>
<p><a href="#Chapter_23__groupby_1">Section 23.2: Example 2</a>
............................................................................................................................................
<a href="#Chapter_23__groupby_1">146</a></p>
<p><a href="#dic_k____list_v">Section 23.3: Example 3</a>
............................................................................................................................................
<a href="#dic_k____list_v">147</a></p>
<p><span id="Chapter_24__Linked_lists" class="anchor"></span><a
href="#Chapter_24__Linked_lists_1">Chapter 24: Linked lists
.........................................................................................................................................
149</a></p>
<p><a href="#Chapter_24__Linked_lists_1">Section 24.1: Single linked
list example</a>
...................................................................................................................
<a href="#Chapter_24__Linked_lists_1">149</a></p>
<h1
id="chapter-25-linked-list-node-.............................................................................................................................-154"><a
href="#Chapter_25__Linked_List_Node_1">Chapter 25: Linked List Node</a>
.............................................................................................................................
<a href="#Chapter_25__Linked_List_Node_1">154</a></h1>
<p><a href="#Chapter_25__Linked_List_Node_1">Section 25.1: Write a
simple Linked List Node in python</a>
.......................................................................................
<a href="#Chapter_25__Linked_List_Node_1">154</a></p>
<h1
id="chapter-26-filter-......................................................................................................................................................-155"><a
href="#Chapter_26__Filter_1">Chapter 26: Filter</a>
......................................................................................................................................................
<a href="#Chapter_26__Filter_1">155</a></h1>
<p><a href="#Chapter_26__Filter_1">Section 26.1: Basic use of filter</a>
.................................................................................................................................
<a href="#Chapter_26__Filter_1">155</a></p>
<p><a href="#Chapter_26__Filter_1">Section 26.2: Filter without
function</a>
........................................................................................................................
<a href="#Chapter_26__Filter_1">155</a></p>
<p><a href="#_i_for_i_in__1__0__2___________a">Section 26.3: Filter as
short-circuit check</a>
...............................................................................................................
<a href="#_i_for_i_in__1__0__2___________a">156</a></p>
<p><a href="#_i_for_i_in__1__0__2___________a">Section 26.4:
Complementary function: filterfalse, ifilterfalse</a>
..............................................................................
<a href="#_i_for_i_in__1__0__2___________a">156</a></p>
<h1
id="chapter-27-heapq-...................................................................................................................................................-158"><a
href="#Chapter_27__Heapq_1">Chapter 27: Heapq</a>
...................................................................................................................................................
<a href="#Chapter_27__Heapq_1">158</a></h1>
<p><a href="#Chapter_27__Heapq_1">Section 27.1: Largest and smallest
items in a collection</a>
.......................................................................................
<a href="#Chapter_27__Heapq_1">158</a></p>
<p><a href="#Chapter_27__Heapq_1">Section 27.2: Smallest item in a
collection</a>
..............................................................................................................
<a href="#Chapter_27__Heapq_1">158</a></p>
<h1
id="chapter-28-tuple-.....................................................................................................................................................-160"><a
href="#Chapter_28__Tuple_1">Chapter 28: Tuple</a>
.....................................................................................................................................................
<a href="#Chapter_28__Tuple_1">160</a></h1>
<p><a href="#Chapter_28__Tuple_1">Section 28.1: Tuple</a>
.....................................................................................................................................................
<a href="#Chapter_28__Tuple_1">160</a></p>
<p><a href="#Section_28_2__Tuples_are_immutab">Section 28.2: Tuples are
immutable</a>
........................................................................................................................
<a href="#Section_28_2__Tuples_are_immutab">161</a></p>
<p><a href="#Section_28_2__Tuples_are_immutab">Section 28.3: Packing and
Unpacking Tuples</a>
........................................................................................................
<a href="#Section_28_2__Tuples_are_immutab">161</a></p>
<p><a href="#a_trailing_comma">Section 28.4: Built-in Tuple
Functions</a>
.....................................................................................................................
<a href="#a_trailing_comma">162</a></p>
<p><a href="#tuple3_____a____b____c____d____e">Section 28.5: Tuple Are
Element-wise Hashable and Equatable</a>
.........................................................................
<a href="#tuple3_____a____b____c____d____e">163</a></p>
<p><a href="#_________hello________not_ok">Section 28.6: Indexing Tuples
...................................................................................................................................
164</a></p>
<p><a href="#_________hello________not_ok">Section 28.7: Reversing
Elements</a>
............................................................................................................................
<a href="#_________hello________not_ok">164</a></p>
<h1
id="chapter-29-basic-input-and-output-...............................................................................................................-165"><a
href="#Chapter_29__Basic_Input_and_Outp_1">Chapter 29: Basic Input and
Output</a>
...............................................................................................................
<a href="#Chapter_29__Basic_Input_and_Outp_1">165</a></h1>
<p><a href="#Chapter_29__Basic_Input_and_Outp_1">Section 29.1: Using the
print function</a>
......................................................................................................................
<a href="#Chapter_29__Basic_Input_and_Outp_1">165</a></p>
<p><a href="#Chapter_29__Basic_Input_and_Outp_1">Section 29.2: Input
from a File</a>
.................................................................................................................................
<a href="#Chapter_29__Basic_Input_and_Outp_1">165</a></p>
<p><a href="#To_demonstrate_the_difference_be">Section 29.3: Read from
stdin</a>
..................................................................................................................................
<a href="#To_demonstrate_the_difference_be">167</a></p>
<p><a href="#To_demonstrate_the_difference_be">Section 29.4: Using
input() and raw_input()</a>
..........................................................................................................
<a href="#To_demonstrate_the_difference_be">167</a></p>
<p><a href="#To_demonstrate_the_difference_be">Section 29.5: Function to
prompt user for a number</a>
............................................................................................
<a href="#To_demonstrate_the_difference_be">167</a></p>
<p><a href="#return_float_raw_input_msg">Section 29.6: Printing a string
without a newline at the end
.................................................................................
168</a></p>
<h1
id="chapter-30-files-folders-io-.........................................................................................................................-171"><a
href="#Chapter_30__Files___Folders_I_O_1">Chapter 30: Files &amp;
Folders I/O</a>
.........................................................................................................................
<a href="#Chapter_30__Files___Folders_I_O_1">171</a></h1>
<p><a href="#Chapter_30__Files___Folders_I_O_1">Section 30.1: File
modes</a>
............................................................................................................................................
<a href="#Chapter_30__Files___Folders_I_O_1">171</a></p>
<p><a href="#Write">Section 30.2: Reading a file line-by-line
..................................................................................................................
172</a></p>
<p><a href="#__If_the_result_is_an_empty_stri">Section 30.3: Iterate
files (recursively)</a>
....................................................................................................................
<a href="#__If_the_result_is_an_empty_stri">173</a></p>
<p><a href="#__If_the_result_is_an_empty_stri">Section 30.4: Getting the
full contents of a file</a>
......................................................................................................
<a href="#__If_the_result_is_an_empty_stri">173</a></p>
<p><a href="#in_file_close">Section 30.5: Writing to a file</a>
...................................................................................................................................
<a href="#in_file_close">174</a></p>
<p><a href="#myfile___None">Section 30.6: Check whether a file or path
exists</a>
..................................................................................................
<a href="#myfile___None">175</a></p>
<p><a href="#Section_30_7__Random_File_Access">Section 30.7: Random File
Access Using mmap</a>
....................................................................................................
<a href="#Section_30_7__Random_File_Access">176</a></p>
<p><a href="#Section_30_7__Random_File_Access">Section 30.8: Replacing
text in a file</a>
.......................................................................................................................
<a href="#Section_30_7__Random_File_Access">176</a></p>
<p><a href="#Section_30_7__Random_File_Access">Section 30.9: Checking if
a file is empty</a>
.................................................................................................................
<a href="#Section_30_7__Random_File_Access">176</a></p>
<p><a href="#Section_30_10__Read_a_file_betwe">Section 30.10: Read a
file between a range of lines</a>
..............................................................................................
<a href="#Section_30_10__Read_a_file_betwe">177</a></p>
<p><a href="#Section_30_10__Read_a_file_betwe">Section 30.11: Copy a
directory tree</a>
........................................................................................................................
<a href="#Section_30_10__Read_a_file_betwe">177</a></p>
<p><a href="#Section_30_10__Read_a_file_betwe">Section 30.12: Copying
contents of one file to a dierent file</a>
..............................................................................
<a href="#Section_30_10__Read_a_file_betwe">177</a></p>
<h1
id="chapter-31-os.path-..................................................................................................................................................-178"><a
href="#Chapter_31__os_path_1">Chapter 31: os.path</a>
..................................................................................................................................................
<a href="#Chapter_31__os_path_1">178</a></h1>
<p><a href="#Chapter_31__os_path_1">Section 31.1: Join Paths</a>
.............................................................................................................................................
<a href="#Chapter_31__os_path_1">178</a></p>
<p><a href="#Chapter_31__os_path_1">Section 31.2: Path Component
Manipulation</a>
..........................................................................................................
<a href="#Chapter_31__os_path_1">178</a></p>
<p><a href="#Chapter_31__os_path_1">Section 31.3: Get the parent
directory</a>
.....................................................................................................................
<a href="#Chapter_31__os_path_1">178</a></p>
<p><a href="#Chapter_31__os_path_1">Section 31.4: If the given path
exists</a>
........................................................................................................................
<a href="#Chapter_31__os_path_1">178</a></p>
<p><a href="#Section_31_5__check_if_the_given">Section 31.5: check if
the given path is a directory, file, symbolic link, mount point etc</a>
.................................... <a
href="#Section_31_5__check_if_the_given">179</a></p>
<p><a href="#Section_31_5__check_if_the_given">Section 31.6: Absolute
Path from Relative Path</a>
.....................................................................................................
<a href="#Section_31_5__check_if_the_given">179</a></p>
<h1
id="chapter-32-iterables-and-iterators-................................................................................................................-180"><a
href="#Chapter_32__Iterables_and_Iterat_1">Chapter 32: Iterables and
Iterators</a>
................................................................................................................
<a href="#Chapter_32__Iterables_and_Iterat_1">180</a></h1>
<p><a href="#Chapter_32__Iterables_and_Iterat_1">Section 32.1: Iterator
vs Iterable vs Generator</a>
.......................................................................................................
<a href="#Chapter_32__Iterables_and_Iterat_1">180</a></p>
<p><a href="#def___iter___self">Section 32.2: Extract values one by
one</a>
.................................................................................................................
<a href="#def___iter___self">181</a></p>
<p><a href="#def___iter___self">Section 32.3: Iterating over entire
iterable</a>
.............................................................................................................
<a href="#def___iter___self">181</a></p>
<p><a href="#def___iter___self">Section 32.4: Verify only one element in
iterable</a>
..................................................................................................
<a href="#def___iter___self">181</a></p>
<p><a href="#Section_32_5__What_can_be_iterab">Section 32.5: What can be
iterable
..........................................................................................................................
182</a></p>
<p><a href="#Section_32_5__What_can_be_iterab">Section 32.6: Iterator
isn't reentrant!</a>
.......................................................................................................................
<a href="#Section_32_5__What_can_be_iterab">182</a></p>
<h1
id="chapter-33-functions-.............................................................................................................................................-183"><a
href="#Chapter_33__Functions_1">Chapter 33: Functions</a>
.............................................................................................................................................
<a href="#Chapter_33__Functions_1">183</a></h1>
<p><a href="#Chapter_33__Functions_1">Section 33.1: Defining and calling
simple functions</a>
...............................................................................................
<a href="#Chapter_33__Functions_1">183</a></p>
<p><a href="#Also_you_can_give_a_default_valu">Section 33.2: Defining a
function with an arbitrary number of arguments</a>
........................................................ <a
href="#Also_you_can_give_a_default_valu">184</a></p>
<p><a href="#def_f1___kwargs">Section 33.3: Lambda (Inline/Anonymous)
Functions</a>
..........................................................................................
<a href="#def_f1___kwargs">187</a></p>
<p><a href="#prints">Section 33.4: Defining a function with optional
arguments</a>
..................................................................................
<a href="#prints">189</a></p>
<p><a href="#Section_33_5__Defining_a_functio">Section 33.5: Defining a
function with optional mutable arguments</a>
................................................................... <a
href="#Section_33_5__Defining_a_functio">190</a></p>
<p><a href="#to_append_elem">Section 33.6: Argument passing and
mutability</a>
....................................................................................................
<a href="#to_append_elem">191</a></p>
<p><a href="#__Out___1__3__5__9__4__6">Section 33.7: Returning values
from functions</a>
.......................................................................................................
<a href="#__Out___1__3__5__9__4__6">192</a></p>
<p><a href="#__Out___1__3__5__9__4__6">Section 33.8: Closure</a>
.................................................................................................................................................
<a href="#__Out___1__3__5__9__4__6">192</a></p>
<p><a href="#return_y___x">Section 33.9: Forcing the use of named
parameters</a>
............................................................................................
<a href="#return_y___x">193</a></p>
<p><a href="#f_1__2__c_3">Section 33.10: Nested functions</a>
...............................................................................................................................
<a href="#f_1__2__c_3">194</a></p>
<p><a href="#f_1__2__c_3">Section 33.11: Recursion limit</a>
....................................................................................................................................
<a href="#f_1__2__c_3">194</a></p>
<p><a href="#From_Python_3_5__the_exception_i">Section 33.12: Recursive
Lambda using assigned variable
...................................................................................
195</a></p>
<p><a href="#From_Python_3_5__the_exception_i">Section 33.13: Recursive
functions</a>
...........................................................................................................................
<a href="#From_Python_3_5__the_exception_i">195</a></p>
<p><a href="#def_factorial_n">Section 33.14: Defining a function with
arguments</a>
................................................................................................
<a href="#def_factorial_n">196</a></p>
<p><a href="#def_factorial_n">Section 33.15: Iterable and dictionary
unpacking</a>
..................................................................................................
<a href="#def_factorial_n">196</a></p>
<p><a href="#____unpacking_1__2__d_4___args_l">Section 33.16: Defining a
function with multiple arguments</a>
.................................................................................
<a href="#____unpacking_1__2__d_4___args_l">198</a></p>
<h1
id="chapter-34-defining-functions-with-list-arguments-..............................................................................-199"><a
href="#Chapter_34__Defining_functions_w_1">Chapter 34: Defining
functions with list arguments</a>
..............................................................................
<a href="#Chapter_34__Defining_functions_w_1">199</a></h1>
<p><a href="#Chapter_34__Defining_functions_w_1">Section 34.1: Function
and Call
.................................................................................................................................
199</a></p>
<h1
id="chapter-35-functional-programming-in-python-......................................................................................-201"><a
href="#Chapter_35__Functional_Programmi_1">Chapter 35: Functional
Programming in Python</a>
......................................................................................
<a href="#Chapter_35__Functional_Programmi_1">201</a></h1>
<p><a href="#Chapter_35__Functional_Programmi_1">Section 35.1: Lambda
Function</a>
................................................................................................................................
<a href="#Chapter_35__Functional_Programmi_1">201</a></p>
<p><a href="#Chapter_35__Functional_Programmi_1">Section 35.2: Map
Function</a>
......................................................................................................................................
<a href="#Chapter_35__Functional_Programmi_1">201</a></p>
<p><a href="#Chapter_35__Functional_Programmi_1">Section 35.3: Reduce
Function</a>
.................................................................................................................................
<a href="#Chapter_35__Functional_Programmi_1">201</a></p>
<p><a href="#Chapter_35__Functional_Programmi_1">Section 35.4: Filter
Function</a>
.....................................................................................................................................
<a href="#Chapter_35__Functional_Programmi_1">201</a></p>
<p><span id="Chapter_36__Partial_functions" class="anchor"></span><a
href="#Chapter_36__Partial_functions_1">Chapter 36: Partial functions
..............................................................................................................................
202</a></p>
<p><a href="#Chapter_36__Partial_functions_1">Section 36.1: Raise the
power</a>
...................................................................................................................................
<a href="#Chapter_36__Partial_functions_1">202</a></p>
<h1
id="chapter-37-decorators-.........................................................................................................................................-203"><a
href="#Chapter_37__Decorators_1">Chapter 37: Decorators</a>
.........................................................................................................................................
<a href="#Chapter_37__Decorators_1">203</a></h1>
<p><a href="#Chapter_37__Decorators_1">Section 37.1: Decorator
function</a>
..............................................................................................................................
<a href="#Chapter_37__Decorators_1">203</a></p>
<p><a href="#return_func__args____kwargs___Ca">Section 37.2: Decorator
class
...................................................................................................................................
204</a></p>
<p><a href="#self_func___func">Section 37.3: Decorator with arguments
(decorator factory)</a>
..............................................................................
<a href="#self_func___func">205</a></p>
<p><a href="#Section_37_4__Making_a_decorator">Section 37.4: Making a
decorator look like the decorated function</a>
.................................................................... <a
href="#Section_37_4__Making_a_decorator">207</a></p>
<p><a href="#Section_37_4__Making_a_decorator">Section 37.5: Using a
decorator to time a function</a>
...............................................................................................
<a href="#Section_37_4__Making_a_decorator">207</a></p>
<p><a href="#t1___time_time">Section 37.6: Create singleton class with a
decorator</a>
..........................................................................................
<a href="#t1___time_time">208</a></p>
<h1
id="chapter-38-classes-.................................................................................................................................................-209"><a
href="#Chapter_38__Classes_1">Chapter 38: Classes</a>
.................................................................................................................................................
<a href="#Chapter_38__Classes_1">209</a></h1>
<p><a href="#Chapter_38__Classes_1">Section 38.1: Introduction to
classes</a>
........................................................................................................................
<a href="#Chapter_38__Classes_1">209</a></p>
<p><a href="#documentation">Section 38.2: Bound, unbound, and static
methods</a>
..............................................................................................
<a href="#documentation">210</a></p>
<p><a href="#a_f_is_a_f____True">Section 38.3: Basic inheritance</a>
................................................................................................................................
<a href="#a_f_is_a_f____True">212</a></p>
<p><a href="#__Output__False">Section 38.4: Monkey Patching</a>
................................................................................................................................
<a href="#__Output__False">214</a></p>
<p><a href="#__Output__False">Section 38.5: New-style vs. old-style
classes
..........................................................................................................
214</a></p>
<p><a href="#type__A_new_style_class_is_a_use">Section 38.6: Class
methods: alternate initializers</a>
.................................................................................................
<a href="#type__A_new_style_class_is_a_use">215</a></p>
<p><a href="#Notice_cls_instead_of_self_as_th">Section 38.7: Multiple
Inheritance</a>
............................................................................................................................
<a href="#Notice_cls_instead_of_self_as_th">217</a></p>
<p><a href="#print_isinstance_a_Bar">Section 38.8: Properties</a>
............................................................................................................................................
<a href="#print_isinstance_a_Bar">219</a></p>
<p><a href="#__Make_name_read_only_by_not_pro">Section 38.9: Default
values for instance variables
...............................................................................................
220</a></p>
<p><a href="#class_Rectangle_object">Section 38.10: Class and instance
variables</a>
...........................................................................................................
<a href="#class_Rectangle_object">221</a></p>
<p><a href="#def___init___self__y">Section 38.11: Class composition</a>
..............................................................................................................................
<a href="#def___init___self__y">222</a></p>
<p><a href="#class_City_object">Section 38.12: Listing All Class
Members</a>
.................................................................................................................
<a href="#class_City_object">223</a></p>
<p><a href="#Caveats">Section 38.13: Singleton class</a>
...................................................................................................................................
<a href="#Caveats">224</a></p>
<p><a href="#self__decorated___decorated">Section 38.14: Descriptors and
Dotted Lookups</a>
....................................................................................................
<a href="#self__decorated___decorated">225</a></p>
<h1
id="chapter-39-metaclasses-.......................................................................................................................................-226"><a
href="#Chapter_39__Metaclasses_1">Chapter 39: Metaclasses</a>
.......................................................................................................................................
<a href="#Chapter_39__Metaclasses_1">226</a></h1>
<p><a href="#Chapter_39__Metaclasses_1">Section 39.1: Basic
Metaclasses</a>
...............................................................................................................................
<a href="#Chapter_39__Metaclasses_1">226</a></p>
<p><a href="#pass">Section 39.2: Singletons using metaclasses</a>
...........................................................................................................
<a href="#pass">227</a></p>
<p><a href="#pass">Section 39.3: Using a metaclass</a>
..............................................................................................................................
<a href="#pass">227</a></p>
<p><a href="#pass">Section 39.4: Introduction to Metaclasses</a>
..............................................................................................................
<a href="#pass">227</a></p>
<p><a href="#____type_5">Section 39.5: Custom functionality with
metaclasses</a>
...........................................................................................
<a href="#____type_5">228</a></p>
<p><a href="#def___new___cls__class_name__cla">Section 39.6: The default
metaclass</a>
.......................................................................................................................
<a href="#def___new___cls__class_name__cla">229</a></p>
<h1
id="chapter-40-string-formatting-.........................................................................................................................-232"><a
href="#Chapter_40__String_Formatting_1">Chapter 40: String
Formatting</a>
.........................................................................................................................
<a href="#Chapter_40__String_Formatting_1">232</a></h1>
<p><a href="#Chapter_40__String_Formatting_1">Section 40.1: Basics of
String Formatting</a>
...............................................................................................................
<a href="#Chapter_40__String_Formatting_1">232</a></p>
<p><a href="#and_it_offers_greater_flexibilit">Section 40.2: Alignment
and padding</a>
.....................................................................................................................
<a href="#and_it_offers_greater_flexibilit">233</a></p>
<p><a href="#_____9s___format__Hello">Section 40.3: Format literals
(f-string)</a>
....................................................................................................................
<a href="#_____9s___format__Hello">234</a></p>
<p><a href="#_____9s___format__Hello">Section 40.4: Float formatting</a>
.................................................................................................................................
<a href="#_____9s___format__Hello">234</a></p>
<p><a href="#_42_123">Section 40.5: Named placeholders</a>
.........................................................................................................................
<a href="#_42_123">235</a></p>
<p><a href="#Section_40_6__String_formatting">Section 40.6: String
formatting with datetime</a>
.......................................................................................................
<a href="#Section_40_6__String_formatting">236</a></p>
<p><a href="#Section_40_6__String_formatting">Section 40.7: Formatting
Numerical Values</a>
...........................................................................................................
<a href="#Section_40_6__String_formatting">236</a></p>
<p><a href="#Section_40_8__Nested_formatting">Section 40.8: Nested
formatting</a>
..............................................................................................................................
<a href="#Section_40_8__Nested_formatting">237</a></p>
<p><a href="#Section_40_8__Nested_formatting">Section 40.9: Format using
Getitem and Getattr</a>
...................................................................................................
<a href="#Section_40_8__Nested_formatting">237</a></p>
<p><a href="#Section_40_8__Nested_formatting">Section 40.10: Padding and
truncating strings, combined</a>
....................................................................................
<a href="#Section_40_8__Nested_formatting">237</a></p>
<p><a href="#____3________________e__3">Section 40.11: Custom formatting
for a class</a>
.........................................................................................................
<a href="#____3________________e__3">238</a></p>
<h1
id="chapter-41-string-methods-................................................................................................................................-240"><a
href="#Chapter_41__String_Methods_1">Chapter 41: String Methods</a>
................................................................................................................................
<a href="#Chapter_41__String_Methods_1">240</a></h1>
<p><a href="#Chapter_41__String_Methods_1">Section 41.1: Changing the
capitalization of a string</a>
.............................................................................................
<a href="#Chapter_41__String_Methods_1">240</a></p>
<p><a href="#___This_is_a__string">Section 41.2: str.translate:
Translating characters in a string</a>
...............................................................................
<a href="#___This_is_a__string">241</a></p>
<p><a href="#_ths_syntx_s_vry_sfl">Section 41.3: str.format and
f-strings: Format values into a string</a>
......................................................................
<a href="#_ths_syntx_s_vry_sfl">242</a></p>
<p><a href="#_____________________________for">Section 41.4: String
module's useful constants
.......................................................................................................
243</a></p>
<p><a href="#string_punctuation">Section 41.5: Stripping unwanted
leading/trailing characters from a string</a>
...................................................... <a
href="#string_punctuation">244</a></p>
<p><a href="#For_example__using_str_rstrip">Section 41.6: Reversing a
string</a>
...............................................................................................................................
<a href="#For_example__using_str_rstrip">245</a></p>
<p><a href="#For_example__using_str_rstrip">Section 41.7: Split a string
based on a delimiter into a list of strings</a>
................................................................... <a
href="#For_example__using_str_rstrip">245</a></p>
<p><a href="#The_sep_parameter_can_be_used_to">Section 41.8: Replace all
occurrences of one substring with another substring</a>
................................................ <a
href="#The_sep_parameter_can_be_used_to">246</a></p>
<p><a href="#str_replace_takes_two_arguments">Section 41.9: Testing what
a string is composed of</a>
...............................................................................................
<a href="#str_replace_takes_two_arguments">247</a></p>
<p><a href="#_____Hello_World__isalnum______c">Section 41.10: String
Contains</a>
...................................................................................................................................
<a href="#_____Hello_World__isalnum______c">249</a></p>
<p><a href="#_____Hello_World__isalnum______c">Section 41.11: Join a
list of strings into one string
...................................................................................................
249</a></p>
<p><a href="#_once___upon___a___time">Section 41.12: Counting number of
times a substring appears in a string</a>
.......................................................... <a
href="#_once___upon___a___time">250</a></p>
<p><a href="#_once___upon___a___time">Section 41.13: Case insensitive
string comparisons</a>
................................................................................................
<a href="#_once___upon___a___time">250</a></p>
<p><a href="#____help_str_casefold">Section 41.14: Justify strings</a>
.....................................................................................................................................
<a href="#____help_str_casefold">251</a></p>
<p><a href="#print___________mi______km____fo">Section 41.15: Test the
starting and ending characters of a string</a>
......................................................................
<a href="#print___________mi______km____fo">252</a></p>
<p><a href="#____s____this_ends_in_a_full_sto">Section 41.16: Conversion
between str or bytes data and unicode characters</a>
.................................................. <a
href="#____s____this_ends_in_a_full_sto">253</a></p>
<h1
id="chapter-42-using-loops-within-functions-....................................................................................................-255"><a
href="#Chapter_42__Using_loops_within_f_1">Chapter 42: Using loops
within functions</a>
....................................................................................................
<a href="#Chapter_42__Using_loops_within_f_1">255</a></h1>
<p><a href="#Chapter_42__Using_loops_within_f_1">Section 42.1: Return
statement inside loop in a function</a>
......................................................................................
<a href="#Chapter_42__Using_loops_within_f_1">255</a></p>
<p><span id="Chapter_43__Importing_modules" class="anchor"></span><a
href="#Chapter_43__Importing_modules_1">Chapter 43: Importing modules
........................................................................................................................
256</a></p>
<p><a href="#Chapter_43__Importing_modules_1">Section 43.1: Importing a
module</a>
............................................................................................................................
<a href="#Chapter_43__Importing_modules_1">256</a></p>
<p><a href="#Multiple_imports_can_be_made_on">Section 43.2: The __all__
special variable</a>
............................................................................................................
<a href="#Multiple_imports_can_be_made_on">257</a></p>
<p><a href="#21">Section 43.3: Import modules from an arbitrary
filesystem location</a>
.................................................................. <a
href="#21">258</a></p>
<p><a href="#21">Section 43.4: Importing all names from a module</a>
................................................................................................
<a href="#21">258</a></p>
<p><a href="#SyntaxError__import___only_allow">Section 43.5:
Programmatic importing</a>
...................................................................................................................
<a href="#SyntaxError__import___only_allow">259</a></p>
<p><a href="#SyntaxError__import___only_allow">Section 43.6: PEP8 rules
for Imports</a>
.......................................................................................................................
<a href="#SyntaxError__import___only_allow">259</a></p>
<p><a href="#doubly_true_if_you_have_multiple">Section 43.7: Importing
specific names from a module
........................................................................................
260</a></p>
<p><a href="#doubly_true_if_you_have_multiple">Section 43.8: Importing
submodules</a>
.......................................................................................................................
<a href="#doubly_true_if_you_have_multiple">260</a></p>
<p><a href="#doubly_true_if_you_have_multiple">Section 43.9:
Re-importing a module
......................................................................................................................
260</a></p>
<p><a href="#This_is_because_the_interpreter">Section 43.10:
__import__() function</a>
.....................................................................................................................
<a href="#This_is_because_the_interpreter">261</a></p>
<h1
id="chapter-44-dierence-between-module-and-package-......................................................................-262"><a
href="#Chapter_44__Di_erence_between_Mo_1">Chapter 44: Dierence between
Module and Package</a>
......................................................................
<a href="#Chapter_44__Di_erence_between_Mo_1">262</a></h1>
<p><a href="#Chapter_44__Di_erence_between_Mo_1">Section 44.1:
Modules</a>
................................................................................................................................................
<a href="#Chapter_44__Di_erence_between_Mo_1">262</a></p>
<p><a href="#Chapter_44__Di_erence_between_Mo_1">Section 44.2:
Packages</a>
.............................................................................................................................................
<a href="#Chapter_44__Di_erence_between_Mo_1">262</a></p>
<h1
id="chapter-45-math-module-....................................................................................................................................-264"><a
href="#Chapter_45__Math_Module_1">Chapter 45: Math Module</a>
....................................................................................................................................
<a href="#Chapter_45__Math_Module_1">264</a></h1>
<p><a href="#Chapter_45__Math_Module_1">Section 45.1: Rounding: round,
floor, ceil, trunc</a>
......................................................................................................
<a href="#Chapter_45__Math_Module_1">264</a></p>
<p><a href="#As_with_any_floating_point_repre">Section 45.2:
Trigonometry</a>
......................................................................................................................................
<a href="#As_with_any_floating_point_repre">265</a></p>
<p><a href="#__Out__1_5707963267948966___This">Section 45.3: Pow for
faster exponentiation
...........................................................................................................
266</a></p>
<p><a href="#__Out__1_5707963267948966___This">Section 45.4: Infinity
and NaN ("not a number")</a>
...................................................................................................
<a href="#__Out__1_5707963267948966___This">266</a></p>
<p><a href="#__Out__nan">Section 45.5: Logarithms</a>
..........................................................................................................................................
<a href="#__Out__nan">269</a></p>
<p><a href="#__Out__nan">Section 45.6: Constants</a>
............................................................................................................................................
<a href="#__Out__nan">269</a></p>
<p><a href="#Python_3_x_Version_____3_5">Section 45.7: Imaginary
Numbers</a>
...........................................................................................................................
<a href="#Python_3_x_Version_____3_5">270</a></p>
<p><a href="#Python_3_x_Version_____3_5">Section 45.8: Copying signs</a>
.....................................................................................................................................
<a href="#Python_3_x_Version_____3_5">270</a></p>
<p><a href="#Python_3_x_Version_____3_5">Section 45.9: Complex numbers
and the cmath module</a>
......................................................................................
<a href="#Python_3_x_Version_____3_5">270</a></p>
<h1
id="chapter-46-complex-math-.................................................................................................................................-273"><a
href="#Chapter_46__Complex_math_1">Chapter 46: Complex math</a>
.................................................................................................................................
<a href="#Chapter_46__Complex_math_1">273</a></h1>
<p><a href="#Chapter_46__Complex_math_1">Section 46.1: Advanced complex
arithmetic</a>
...........................................................................................................
<a href="#Chapter_46__Complex_math_1">273</a></p>
<p><a href="#Section_46_2__Basic_complex_arit">Section 46.2: Basic
complex arithmetic</a>
..................................................................................................................
<a href="#Section_46_2__Basic_complex_arit">274</a></p>
<h1
id="chapter-47-collections-module-.......................................................................................................................-275"><a
href="#Chapter_47__Collections_module_1">Chapter 47: Collections
module</a>
.......................................................................................................................
<a href="#Chapter_47__Collections_module_1">275</a></h1>
<p><a href="#Chapter_47__Collections_module_1">Section 47.1:
collections.Counter</a>
..............................................................................................................................
<a href="#Chapter_47__Collections_module_1">275</a></p>
<p><a href="#____list_c_elements">Section 47.2:
collections.OrderedDict</a>
......................................................................................................................
<a href="#____list_c_elements">276</a></p>
<p><a href="#____print_d">Section 47.3: collections.defaultdict
.........................................................................................................................
277</a></p>
<p><a href="#0">Section 47.4: collections.namedtuple</a>
......................................................................................................................
<a href="#0">278</a></p>
<p><a href="#print_dave_____yields__Person_ag">Section 47.5:
collections.deque</a>
................................................................................................................................
<a href="#print_dave_____yields__Person_ag">279</a></p>
<p><a href="#deque___l____g____h____i____j">Section 47.6:
collections.ChainMap
..........................................................................................................................
280</a></p>
<h1
id="chapter-48-operator-module-...........................................................................................................................-282"><a
href="#Chapter_48__Operator_module_1">Chapter 48: Operator module</a>
...........................................................................................................................
<a href="#Chapter_48__Operator_module_1">282</a></h1>
<p><a href="#Chapter_48__Operator_module_1">Section 48.1: Itemgetter</a>
............................................................................................................................................
<a href="#Chapter_48__Operator_module_1">282</a></p>
<p><a href="#Chapter_48__Operator_module_1">Section 48.2: Operators as
alternative to an infix operator</a>
.................................................................................
<a href="#Chapter_48__Operator_module_1">282</a></p>
<p><a href="#Chapter_48__Operator_module_1">Section 48.3:
Methodcaller</a>
.......................................................................................................................................
<a href="#Chapter_48__Operator_module_1">282</a></p>
<p><span id="Chapter_49__JSON_Module" class="anchor"></span><a
href="#Chapter_49__JSON_Module_1">Chapter 49: JSON Module
....................................................................................................................................
284</a></p>
<p><a href="#Chapter_49__JSON_Module_1">Section 49.1: Storing data in a
file
............................................................................................................................
284</a></p>
<p><a href="#Chapter_49__JSON_Module_1">Section 49.2: Retrieving data
from a file</a>
................................................................................................................
<a href="#Chapter_49__JSON_Module_1">284</a></p>
<p><a href="#Chapter_49__JSON_Module_1">Section 49.3: Formatting JSON
output</a>
...................................................................................................................
<a href="#Chapter_49__JSON_Module_1">284</a></p>
<p><a href="#Sorting_keys_alphabetically_to_g">Section 49.4: `load` vs
`loads`, `dump` vs `dumps`
...................................................................................................
285</a></p>
<p><a href="#with_open_json_file_path___w___a">Section 49.5: Calling
`json.tool` from the command line to pretty-print JSON output</a>
...................................... <a
href="#with_open_json_file_path___w___a">286</a></p>
<p><a href="#with_open_json_file_path___w___a">Section 49.6: JSON
encoding custom objects
........................................................................................................
286</a></p>
<p><a href="#class_DatetimeJSONEncoder_json_J">Section 49.7: Creating
JSON from Python dict</a>
......................................................................................................
<a href="#class_DatetimeJSONEncoder_json_J">287</a></p>
<p><a href="#class_DatetimeJSONEncoder_json_J">Section 49.8: Creating
Python dict from JSON</a>
......................................................................................................
<a href="#class_DatetimeJSONEncoder_json_J">287</a></p>
<h1
id="chapter-50-sqlite3-module-.................................................................................................................................-289"><a
href="#Chapter_50__Sqlite3_Module_1">Chapter 50: Sqlite3 Module</a>
.................................................................................................................................
<a href="#Chapter_50__Sqlite3_Module_1">289</a></h1>
<p><a href="#Chapter_50__Sqlite3_Module_1">Section 50.1: Sqlite3 - Not
require separate server process</a>
.................................................................................
<a href="#Chapter_50__Sqlite3_Module_1">289</a></p>
<p><a href="#Chapter_50__Sqlite3_Module_1">Section 50.2: Getting the
values from the database and Error handling</a>
........................................................... <a
href="#Chapter_50__Sqlite3_Module_1">289</a></p>
<h1
id="chapter-51-the-os-module-...................................................................................................................................-291"><a
href="#Chapter_51__The_os_Module_1">Chapter 51: The os Module</a>
...................................................................................................................................
<a href="#Chapter_51__The_os_Module_1">291</a></h1>
<p><a href="#Chapter_51__The_os_Module_1">Section 51.1: makedirs -
recursive directory creation</a>
............................................................................................
<a href="#Chapter_51__The_os_Module_1">291</a></p>
<p><a href="#if_not_os_path_isdir____dir2_sub">Section 51.2: Create a
directory</a>
...............................................................................................................................
<a href="#if_not_os_path_isdir____dir2_sub">292</a></p>
<p><a href="#if_not_os_path_isdir____dir2_sub">Section 51.3: Get current
directory</a>
..........................................................................................................................
<a href="#if_not_os_path_isdir____dir2_sub">292</a></p>
<p><a href="#if_not_os_path_isdir____dir2_sub">Section 51.4: Determine
the name of the operating system</a>
................................................................................
<a href="#if_not_os_path_isdir____dir2_sub">292</a></p>
<p><a href="#if_not_os_path_isdir____dir2_sub">Section 51.5: Remove a
directory</a>
............................................................................................................................
<a href="#if_not_os_path_isdir____dir2_sub">292</a></p>
<p><a href="#if_not_os_path_isdir____dir2_sub">Section 51.6: Follow a
symlink (POSIX)
....................................................................................................................
292</a></p>
<p><a href="#if_not_os_path_isdir____dir2_sub">Section 51.7: Change
permissions on a file</a>
.............................................................................................................
<a href="#if_not_os_path_isdir____dir2_sub">292</a></p>
<h1
id="chapter-52-the-locale-module-..........................................................................................................................-293"><a
href="#Chapter_52__The_locale_Module_1">Chapter 52: The locale
Module</a>
..........................................................................................................................
<a href="#Chapter_52__The_locale_Module_1">293</a></h1>
<p><a href="#Chapter_52__The_locale_Module_1">Section 52.1: Currency
Formatting US Dollars Using the locale Module</a>
............................................................. <a
href="#Chapter_52__The_locale_Module_1">293</a></p>
<h1
id="chapter-53-itertools-module-..............................................................................................................................-294"><a
href="#Chapter_53__Itertools_Module_1">Chapter 53: Itertools Module</a>
..............................................................................................................................
<a href="#Chapter_53__Itertools_Module_1">294</a></h1>
<p><a href="#Chapter_53__Itertools_Module_1">Section 53.1: Combinations
method in Itertools Module</a>
.......................................................................................
<a href="#Chapter_53__Itertools_Module_1">294</a></p>
<p><a href="#Chapter_53__Itertools_Module_1">Section 53.2:
itertools.dropwhile</a>
..............................................................................................................................
<a href="#Chapter_53__Itertools_Module_1">294</a></p>
<p><a href="#The_output_produced_by_dropwhile">Section 53.3: Zipping two
iterators until they are both exhausted</a>
......................................................................
<a href="#The_output_produced_by_dropwhile">295</a></p>
<p><a href="#The_output_produced_by_dropwhile">Section 53.4: Take a
slice of a generator</a>
...............................................................................................................
<a href="#The_output_produced_by_dropwhile">295</a></p>
<p><a href="#Traceback__most_recent_call_last">Section 53.5: Grouping
items from an iterable object using a function</a>
.............................................................. <a
href="#Traceback__most_recent_call_last">296</a></p>
<p><a href="#print_key__list_group">Section 53.6:
itertools.takewhile</a>
...............................................................................................................................
<a href="#print_key__list_group">297</a></p>
<p><a href="#print_key__list_group">Section 53.7:
itertools.permutations</a>
........................................................................................................................
<a href="#print_key__list_group">297</a></p>
<p><a href="#if_the_list_a_has_duplicate_elem">Section 53.8:
itertools.repeat</a>
....................................................................................................................................
<a href="#if_the_list_a_has_duplicate_elem">298</a></p>
<p><a href="#if_the_list_a_has_duplicate_elem">Section 53.9: Get an
accumulated sum of numbers in an iterable</a>
......................................................................
<a href="#if_the_list_a_has_duplicate_elem">298</a></p>
<p><a href="#if_the_list_a_has_duplicate_elem">Section 53.10: Cycle
through elements in an iterator</a>
............................................................................................
<a href="#if_the_list_a_has_duplicate_elem">298</a></p>
<p><a href="#if_the_list_a_has_duplicate_elem">Section 53.11:
itertools.product</a>
.................................................................................................................................
<a href="#if_the_list_a_has_duplicate_elem">298</a></p>
<p><a href="#For_example">Section 53.12: itertools.count</a>
....................................................................................................................................
<a href="#For_example">299</a></p>
<p><a href="#0_1">Section 53.13: Chaining multiple iterators
together</a>
...............................................................................................
<a href="#0_1">300</a></p>
<h1
id="chapter-54-asyncio-module-...............................................................................................................................-301"><a
href="#Chapter_54__Asyncio_Module_1">Chapter 54: Asyncio Module</a>
...............................................................................................................................
<a href="#Chapter_54__Asyncio_Module_1">301</a></h1>
<p><a href="#Chapter_54__Asyncio_Module_1">Section 54.1: Coroutine and
Delegation Syntax</a>
.....................................................................................................
<a href="#Chapter_54__Asyncio_Module_1">301</a></p>
<p><a href="#print__cor2___i">Section 54.2: Asynchronous Executors</a>
...................................................................................................................
<a href="#print__cor2___i">302</a></p>
<p><a href="#picklable__The_most_common_non_p">Section 54.3: Using
UVLoop</a>
.....................................................................................................................................
<a href="#picklable__The_most_common_non_p">303</a></p>
<p><a href="#picklable__The_most_common_non_p">Section 54.4:
Synchronization Primitive: Event</a>
.......................................................................................................
<a href="#picklable__The_most_common_non_p">303</a></p>
<p><a href="#main_future___asyncio_wait__cons">Section 54.5: A Simple
Websocket</a>
..........................................................................................................................
<a href="#main_future___asyncio_wait__cons">304</a></p>
<p><a href="#main_future___asyncio_wait__cons">Section 54.6: Common
Misconception about asyncio</a>
..........................................................................................
<a href="#main_future___asyncio_wait__cons">304</a></p>
<h1
id="chapter-55-random-module-.............................................................................................................................-307"><a
href="#Chapter_55__Random_module_1">Chapter 55: Random module</a>
.............................................................................................................................
<a href="#Chapter_55__Random_module_1">307</a></h1>
<p><a href="#Chapter_55__Random_module_1">Section 55.1: Creating a
random user password</a>
...................................................................................................
<a href="#Chapter_55__Random_module_1">307</a></p>
<p><a href="#Chapter_55__Random_module_1">Section 55.2: Create
cryptographically secure random numbers</a>
.......................................................................
<a href="#Chapter_55__Random_module_1">307</a></p>
<p><a href="#The_easiest_way_to_use_it_simply">Section 55.3: Random and
sequences: shue, choice and sample</a>
.................................................................... <a
href="#The_easiest_way_to_use_it_simply">308</a></p>
<p><a href="#print_random_sample_laughs__4">Section 55.4: Creating
random integers and floats: randint, randrange, random, and uniform
...................... 309</a></p>
<p><a href="#page_335">Section 55.5: Reproducible random numbers: Seed
and State
............................................................................
310</a></p>
<p><a href="#__Out__9">Section 55.6: Random Binary Decision</a>
...................................................................................................................
<a href="#__Out__9">311</a></p>
<h1
id="chapter-56-functools-module-...........................................................................................................................-312"><a
href="#Chapter_56__Functools_Module_1">Chapter 56: Functools Module</a>
...........................................................................................................................
<a href="#Chapter_56__Functools_Module_1">312</a></h1>
<p><a href="#Chapter_56__Functools_Module_1">Section 56.1: partial</a>
...................................................................................................................................................
<a href="#Chapter_56__Functools_Module_1">312</a></p>
<p><a href="#Chapter_56__Functools_Module_1">Section 56.2:
cmp_to_key</a>
.......................................................................................................................................
<a href="#Chapter_56__Functools_Module_1">312</a></p>
<p><a href="#Chapter_56__Functools_Module_1">Section 56.3: lru_cache
.............................................................................................................................................
312</a></p>
<p><a href="#_lru_cache_maxsize_None_____Boun">Section 56.4:
total_ordering
.....................................................................................................................................
313</a></p>
<p><a href="#Section_56_5__reduce">Section 56.5: reduce</a>
..................................................................................................................................................
<a href="#Section_56_5__reduce">314</a></p>
<h1
id="chapter-57-the-dis-module-................................................................................................................................-315"><a
href="#Chapter_57__The_dis_module_1">Chapter 57: The dis module</a>
................................................................................................................................
<a href="#Chapter_57__The_dis_module_1">315</a></h1>
<p><a href="#Chapter_57__The_dis_module_1">Section 57.1: What is Python
bytecode?</a>
.................................................................................................................
<a href="#Chapter_57__The_dis_module_1">315</a></p>
<p><a href="#Chapter_57__The_dis_module_1">Section 57.2: Constants in
the dis module</a>
..............................................................................................................
<a href="#Chapter_57__The_dis_module_1">315</a></p>
<p><a href="#Chapter_57__The_dis_module_1">Section 57.3: Disassembling
modules</a>
.....................................................................................................................
<a href="#Chapter_57__The_dis_module_1">315</a></p>
<p><span id="Chapter_58__The_base64_Module" class="anchor"></span><a
href="#Chapter_58__The_base64_Module_1">Chapter 58: The base64 Module
.......................................................................................................................
317</a></p>
<p><a href="#adobe_If_adobe_is_True__the_enco">Section 58.1: Encoding
and Decoding Base64</a>
.......................................................................................................
<a href="#adobe_If_adobe_is_True__the_enco">318</a></p>
<p><a href="#s1___e_decode__UTF_8">Section 58.2: Encoding and Decoding
Base32
.......................................................................................................
319</a></p>
<p><a href="#Base32_Encoded__JBSWY3DPEBLW64TM">Section 58.3: Encoding
and Decoding Base16
........................................................................................................
320</a></p>
<p><a href="#Base32_Encoded__JBSWY3DPEBLW64TM">Section 58.4: Encoding
and Decoding ASCII85</a>
......................................................................................................
<a href="#Base32_Encoded__JBSWY3DPEBLW64TM">320</a></p>
<p><a href="#print_s2">Section 58.5: Encoding and Decoding Base85
.......................................................................................................
321</a></p>
<h1
id="chapter-59-queue-module-..................................................................................................................................-322"><a
href="#Chapter_59__Queue_Module_1">Chapter 59: Queue Module</a>
..................................................................................................................................
<a href="#Chapter_59__Queue_Module_1">322</a></h1>
<p><a href="#Chapter_59__Queue_Module_1">Section 59.1: Simple
example</a>
...................................................................................................................................
<a href="#Chapter_59__Queue_Module_1">322</a></p>
<h1
id="chapter-60-deque-module-..................................................................................................................................-324"><a
href="#Chapter_60__Deque_Module_1">Chapter 60: Deque Module</a>
..................................................................................................................................
<a href="#Chapter_60__Deque_Module_1">324</a></h1>
<p><a href="#Chapter_60__Deque_Module_1">Section 60.1: Basic deque
using</a>
...............................................................................................................................
<a href="#Chapter_60__Deque_Module_1">324</a></p>
<p><a href="#Chapter_60__Deque_Module_1">Section 60.2: Available methods
in deque
..............................................................................................................
324</a></p>
<p><a href="#dl_remove_1_____deque___2__0__2">Section 60.3: limit deque
size</a>
...................................................................................................................................
<a href="#dl_remove_1_____deque___2__0__2">325</a></p>
<p><a href="#dl_remove_1_____deque___2__0__2">Section 60.4: Breadth
First Search</a>
..........................................................................................................................
<a href="#dl_remove_1_____deque___2__0__2">325</a></p>
<h1
id="chapter-61-webbrowser-module-......................................................................................................................-326"><a
href="#Chapter_61__Webbrowser_Module_1">Chapter 61: Webbrowser
Module</a>
......................................................................................................................
<a href="#Chapter_61__Webbrowser_Module_1">326</a></h1>
<p><a href="#Chapter_61__Webbrowser_Module_1">Section 61.1: Opening a
URL with Default Browser</a>
................................................................................................
<a href="#Chapter_61__Webbrowser_Module_1">326</a></p>
<p><a href="#Section_61_2__Opening_a_URL_with">Section 61.2: Opening a
URL with Dierent Browsers</a>
...........................................................................................
<a href="#Section_61_2__Opening_a_URL_with">327</a></p>
<h1
id="chapter-62-tkinter-...................................................................................................................................................-328"><a
href="#Chapter_62__tkinter_1">Chapter 62: tkinter</a>
...................................................................................................................................................
<a href="#Chapter_62__tkinter_1">328</a></h1>
<p><a href="#Chapter_62__tkinter_1">Section 62.1: Geometry Managers</a>
...........................................................................................................................
<a href="#Chapter_62__tkinter_1">328</a></p>
<p><a href="#columnspan__the_number_of_column">Section 62.2: A minimal
tkinter Application</a>
............................................................................................................
<a href="#columnspan__the_number_of_column">329</a></p>
<h1
id="chapter-63-pyautogui-module-..........................................................................................................................-331"><a
href="#Chapter_63__pyautogui_module_1">Chapter 63: pyautogui module</a>
..........................................................................................................................
<a href="#Chapter_63__pyautogui_module_1">331</a></h1>
<p><a href="#Chapter_63__pyautogui_module_1">Section 63.1: Mouse
Functions</a>
..................................................................................................................................
<a href="#Chapter_63__pyautogui_module_1">331</a></p>
<p><a href="#Chapter_63__pyautogui_module_1">Section 63.2: Keyboard
Functions</a>
...........................................................................................................................
<a href="#Chapter_63__pyautogui_module_1">331</a></p>
<p><a href="#Chapter_63__pyautogui_module_1">Section 63.3: Screenshot
And Image Recognition</a>
.................................................................................................
<a href="#Chapter_63__pyautogui_module_1">331</a></p>
<h1
id="chapter-64-indexing-and-slicing-......................................................................................................................-332"><a
href="#Chapter_64__Indexing_and_Slicing_1">Chapter 64: Indexing and
Slicing</a>
......................................................................................................................
<a href="#Chapter_64__Indexing_and_Slicing_1">332</a></h1>
<p><a href="#Chapter_64__Indexing_and_Slicing_1">Section 64.1: Basic
Slicing</a>
.........................................................................................................................................
<a href="#Chapter_64__Indexing_and_Slicing_1">332</a></p>
<p><a href="#Notice_that_for_negative_steps_t">Section 64.2: Reversing
an object</a>
...........................................................................................................................
<a href="#Notice_that_for_negative_steps_t">333</a></p>
<p><a href="#Notice_that_for_negative_steps_t">Section 64.3: Slice
assignment</a>
.................................................................................................................................
<a href="#Notice_that_for_negative_steps_t">333</a></p>
<p><a href="#Notice_that_for_negative_steps_t">Section 64.4: Making a
shallow copy of an array
..................................................................................................
333</a></p>
<p><a href="#Let_s_examine_the_syntax______me">Section 64.5: Indexing
custom classes: __getitem__, __setitem__ and __delitem__</a>
................................... <a
href="#Let_s_examine_the_syntax______me">334</a></p>
<p><a href="#a_1_5_2_6_1">Section 64.6: Basic Indexing</a>
.....................................................................................................................................
<a href="#a_1_5_2_6_1">335</a></p>
<h1
id="chapter-65-plotting-with-matplotlib-..............................................................................................................-337"><a
href="#Chapter_65__Plotting_with_Matplo_1">Chapter 65: Plotting with
Matplotlib</a>
..............................................................................................................
<a href="#Chapter_65__Plotting_with_Matplo_1">337</a></h1>
<p><a href="#Chapter_65__Plotting_with_Matplo_1">Section 65.1: Plots
with Common X-axis but dierent Y-axis : Using twinx()</a>
....................................................... <a
href="#Chapter_65__Plotting_with_Matplo_1">337</a></p>
<p><a href="#page_363">Section 65.2: Plots with common Y-axis and
dierent X-axis using twiny()</a>
....................................................... <a
href="#page_363">338</a></p>
<p><a href="#page_365">Section 65.3: A Simple Plot in Matplotlib</a>
.................................................................................................................
<a href="#page_365">340</a></p>
<p><a href="#page_366">Section 65.4: Adding more features to a simple
plot : axis labels, title, axis ticks, grid, and legend</a>
................ <a href="#page_366">341</a></p>
<p><a href="#page_367">Section 65.5: Making multiple plots in the same
figure by superimposition similar to MATLAB</a> ......................
<a href="#page_367">342</a></p>
<p><a href="#plt_axis__0__6_5___1_1__1_1">Section 65.6: Making multiple
Plots in the same figure using plot superimposition with separate
plot</a></p>
<p><a href="#plt_axis__0__6_5___1_1__1_1">commands</a>
.........................................................................................................................................................
<a href="#plt_axis__0__6_5___1_1__1_1">343</a></p>
<h1
id="chapter-66-graph-tool-..........................................................................................................................................-345"><a
href="#Chapter_66__graph_tool_1">Chapter 66: graph-tool</a>
..........................................................................................................................................
<a href="#Chapter_66__graph_tool_1">345</a></h1>
<p><a href="#Chapter_66__graph_tool_1">Section 66.1: PyDotPlus</a>
.............................................................................................................................................
<a href="#Chapter_66__graph_tool_1">345</a></p>
<p><a href="#Chapter_66__graph_tool_1">Section 66.2: PyGraphviz</a>
..........................................................................................................................................
<a href="#Chapter_66__graph_tool_1">345</a></p>
<p><span id="Chapter_67__Generators" class="anchor"></span><a
href="#Chapter_67__Generators_1">Chapter 67: Generators
.........................................................................................................................................
347</a></p>
<p><a href="#Chapter_67__Generators_1">Section 67.1: Introduction</a>
..........................................................................................................................................
<a href="#Chapter_67__Generators_1">347</a></p>
<p><a href="#function_again_and_use_it_a_seco">Section 67.2: Infinite
sequences</a>
...............................................................................................................................
<a href="#function_again_and_use_it_a_seco">349</a></p>
<p><a href="#break___stop_after_taking_the_fi">Section 67.3: Sending
objects to a generator</a>
........................................................................................................
<a href="#break___stop_after_taking_the_fi">350</a></p>
<p><a href="#Section_67_4__Yielding_all_value">Section 67.4: Yielding
all values from another iterable</a>
.........................................................................................
<a href="#Section_67_4__Yielding_all_value">351</a></p>
<p><a href="#Section_67_4__Yielding_all_value">Section 67.5:
Iteration</a>
...............................................................................................................................................
<a href="#Section_67_4__Yielding_all_value">351</a></p>
<p><a href="#Section_67_4__Yielding_all_value">Section 67.6: The next()
function</a>
.............................................................................................................................
<a href="#Section_67_4__Yielding_all_value">351</a></p>
<p><a href="#yield_2">Section 67.7: Coroutines</a>
...........................................................................................................................................
<a href="#yield_2">352</a></p>
<p><a href="#yield_2">Section 67.8: Refactoring list-building code</a>
...........................................................................................................
<a href="#yield_2">352</a></p>
<p><a href="#def_create_gen">Section 67.9: Yield with recursion:
recursively listing all files in a directory</a>
........................................................ <a
href="#def_create_gen">353</a></p>
<p><a href="#Section_67_10__Generator_express">Section 67.10: Generator
expressions
......................................................................................................................
354</a></p>
<p><a href="#Section_67_10__Generator_express">Section 67.11: Using a
generator to find Fibonacci Numbers</a>
...............................................................................
<a href="#Section_67_10__Generator_express">354</a></p>
<p><a href="#Section_67_10__Generator_express">Section 67.12:
Searching</a>
...........................................................................................................................................
<a href="#Section_67_10__Generator_express">354</a></p>
<p><a href="#For_this_purpose__it_may_be_desi">Section 67.13: Iterating
over generators in parallel</a>
...............................................................................................
<a href="#For_this_purpose__it_may_be_desi">355</a></p>
<h1
id="chapter-68-reduce-.................................................................................................................................................-356"><a
href="#Chapter_68__Reduce_1">Chapter 68: Reduce</a>
.................................................................................................................................................
<a href="#Chapter_68__Reduce_1">356</a></h1>
<p><a href="#Chapter_68__Reduce_1">Section 68.1: Overview</a>
..............................................................................................................................................
<a href="#Chapter_68__Reduce_1">356</a></p>
<p><a href="#Chapter_68__Reduce_1">Section 68.2: Using reduce</a>
.......................................................................................................................................
<a href="#Chapter_68__Reduce_1">356</a></p>
<p><a href="#_______5___2___10">Section 68.3: Cumulative product</a>
............................................................................................................................
<a href="#_______5___2___10">357</a></p>
<p><a href="#_______5___2___10">Section 68.4: Non short-circuit variant
of any/all</a>
.................................................................................................
<a href="#_______5___2___10">357</a></p>
<h1
id="chapter-69-map-function-....................................................................................................................................-358"><a
href="#Chapter_69__Map_Function_1">Chapter 69: Map Function</a>
....................................................................................................................................
<a href="#Chapter_69__Map_Function_1">358</a></h1>
<p><a href="#Chapter_69__Map_Function_1">Section 69.1: Basic use of map,
itertools.imap and future_builtins.map</a>
............................................................. <a
href="#Chapter_69__Map_Function_1">358</a></p>
<p><a href="#Chapter_69__Map_Function_1">Section 69.2: Mapping each
value in an iterable</a>
...................................................................................................
<a href="#Chapter_69__Map_Function_1">358</a></p>
<p><a href="#__Out___1__1__2__2__3__3">Section 69.3: Mapping values of
dierent iterables</a>
..............................................................................................
<a href="#__Out___1__1__2__2__3__3">359</a></p>
<p><a href="#Section_69_4__Transposing_with_M">Section 69.4: Transposing
with Map: Using "None" as function argument (python 2.x only)</a>
.......................... <a
href="#Section_69_4__Transposing_with_M">361</a></p>
<p><a href="#Section_69_4__Transposing_with_M">Section 69.5: Series and
Parallel Mapping
..............................................................................................................
361</a></p>
<h1
id="chapter-70-exponentiation-................................................................................................................................-365"><a
href="#Chapter_70__Exponentiation_1">Chapter 70: Exponentiation</a>
................................................................................................................................
<a href="#Chapter_70__Exponentiation_1">365</a></h1>
<p><a href="#Chapter_70__Exponentiation_1">Section 70.1: Exponentiation
using builtins: ** and pow()</a>
......................................................................................
<a href="#Chapter_70__Exponentiation_1">365</a></p>
<p><a href="#Chapter_70__Exponentiation_1">Section 70.2: Square root:
math.sqrt() and cmath.sqrt</a>
.........................................................................................
<a href="#Chapter_70__Exponentiation_1">365</a></p>
<p><a href="#math_sqrt__10">Section 70.3: Modular exponentiation: pow()
with 3 arguments</a>
..........................................................................
<a href="#math_sqrt__10">366</a></p>
<p><a href="#math_sqrt__10">Section 70.4: Computing large integer
roots</a>
.........................................................................................................
<a href="#math_sqrt__10">366</a></p>
<p><a href="#root___cube_____1_0___3">Section 70.5: Exponentiation using
the math module: math.pow()</a>
..................................................................... <a
href="#root___cube_____1_0___3">367</a></p>
<p><a href="#Section_70_6__Exponential_functi">Section 70.6: Exponential
function: math.exp() and cmath.exp()
.........................................................................
368</a></p>
<p><a href="#Section_70_6__Exponential_functi">Section 70.7: Exponential
function minus 1: math.expm1()</a>
....................................................................................
<a href="#Section_70_6__Exponential_functi">368</a></p>
<p><a href="#planks_law_1000__5000__________4">Section 70.8: Magic
methods and exponentiation: builtin, math and cmath</a>
...................................................... <a
href="#planks_law_1000__5000__________4">369</a></p>
<p><a href="#math_pow_Integer_2___0_5____1_41">Section 70.9: Roots:
nth-root with fractional exponents</a>
.......................................................................................
<a href="#math_pow_Integer_2___0_5____1_41">370</a></p>
<h1
id="chapter-71-searching-............................................................................................................................................-371"><a
href="#Chapter_71__Searching_1">Chapter 71: Searching</a>
............................................................................................................................................
<a href="#Chapter_71__Searching_1">371</a></h1>
<p><a href="#Chapter_71__Searching_1">Section 71.1: Searching for an
element
....................................................................................................................
371</a></p>
<p><a href="#Chapter_71__Searching_1">Section 71.2: Searching in custom
classes: __contains__ and __iter__</a>
........................................................... <a
href="#Chapter_71__Searching_1">371</a></p>
<p><a href="#def___contains___self__value">Section 71.3: Getting the
index for strings: str.index(), str.rindex() and str.find(), str.rfind()
............................... 372</a></p>
<p><a href="#astring_rindex__o___4__7____6">Section 71.4: Getting the
index list and tuples: list.index(), tuple.index()</a>
.............................................................. <a
href="#astring_rindex__o___4__7____6">373</a></p>
<p><a href="#astring_rindex__o___4__7____6">Section 71.5: Searching
key(s) for a value in dict
...................................................................................................
373</a></p>
<p><a href="#getOneKeyForValue_adict__10">Section 71.6: Getting the
index for sorted sequences: bisect.bisect_left()</a>
.......................................................... <a
href="#getOneKeyForValue_adict__10">374</a></p>
<p><a href="#getOneKeyForValue_adict__10">Section 71.7: Searching nested
sequences</a>
.............................................................................................................
<a href="#getOneKeyForValue_adict__10">374</a></p>
<h1
id="chapter-72-sorting-minimum-and-maximum-............................................................................................-376"><a
href="#Chapter_72__Sorting__Minimum_and_1">Chapter 72: Sorting, Minimum
and Maximum</a>
............................................................................................
<a href="#Chapter_72__Sorting__Minimum_and_1">376</a></h1>
<p><a href="#Chapter_72__Sorting__Minimum_and_1">Section 72.1: Make
custom classes orderable</a>
........................................................................................................
<a href="#Chapter_72__Sorting__Minimum_and_1">376</a></p>
<p><a href="#def___lt___self__other">Section 72.2: Special case:
dictionaries</a>
...................................................................................................................
<a href="#def___lt___self__other">378</a></p>
<p><a href="#Again_this_is_possible_using_the">Section 72.3: Using the
key argument</a>
....................................................................................................................
<a href="#Again_this_is_possible_using_the">379</a></p>
<p><a href="#Again_this_is_possible_using_the">Section 72.4: Default
Argument to max, min</a>
.........................................................................................................
<a href="#Again_this_is_possible_using_the">379</a></p>
<p><a href="#max_____default_42">Section 72.5: Getting a sorted
sequence</a>
................................................................................................................
<a href="#max_____default_42">380</a></p>
<p><a href="#max_____default_42">Section 72.6: Extracting N largest or N
smallest items from an iterable</a>
............................................................ <a
href="#max_____default_42">380</a></p>
<p><a href="#len__given_a_string__returns_the">Section 72.7: Getting the
minimum or maximum of several values</a>
.................................................................... <a
href="#len__given_a_string__returns_the">381</a></p>
<p><a href="#len__given_a_string__returns_the">Section 72.8: Minimum and
Maximum of a sequence
...........................................................................................
381</a></p>
<h1
id="chapter-73-counting-..............................................................................................................................................-382"><a
href="#Chapter_73__Counting_1">Chapter 73: Counting</a>
..............................................................................................................................................
<a href="#Chapter_73__Counting_1">382</a></h1>
<p><a href="#Chapter_73__Counting_1">Section 73.1: Counting all
occurrence of all items in an iterable: collections.Counter</a>
........................................ <a
href="#Chapter_73__Counting_1">382</a></p>
<p><a href="#Chapter_73__Counting_1">Section 73.2: Getting the most
common value(-s): collections.Counter.most_common()</a>
................................ <a
href="#Chapter_73__Counting_1">382</a></p>
<p><a href="#Chapter_73__Counting_1">Section 73.3: Counting the
occurrences of one item in a sequence: list.count() and
tuple.count()</a> .................. <a
href="#Chapter_73__Counting_1">382</a></p>
<p><a href="#alist_count_1">Section 73.4: Counting the occurrences of a
substring in a string: str.count()</a>
................................................... <a
href="#alist_count_1">383</a></p>
<p><a href="#alist_count_1">Section 73.5: Counting occurrences in numpy
array</a>
............................................................................................
<a href="#alist_count_1">383</a></p>
<h1
id="chapter-74-the-print-function-.........................................................................................................................-384"><a
href="#Chapter_74__The_Print_Function_1">Chapter 74: The Print
Function</a>
.........................................................................................................................
<a href="#Chapter_74__The_Print_Function_1">384</a></h1>
<p><a href="#Chapter_74__The_Print_Function_1">Section 74.1: Print
basics</a>
...........................................................................................................................................
<a href="#Chapter_74__The_Print_Function_1">384</a></p>
<p><a href="#_make_a_random_number_between_0">Section 74.2: Print
parameters</a>
................................................................................................................................
<a href="#_make_a_random_number_between_0">385</a></p>
<h1
id="chapter-75-regular-expressions-regex-...................................................................................................-388"><a
href="#Chapter_75__Regular_Expressions_1">Chapter 75: Regular
Expressions (Regex)</a>
...................................................................................................
<a href="#Chapter_75__Regular_Expressions_1">388</a></h1>
<p><a href="#Chapter_75__Regular_Expressions_1">Section 75.1: Matching
the beginning of a string</a>
...................................................................................................
<a href="#Chapter_75__Regular_Expressions_1">388</a></p>
<p><a href="#__Out___123">Section 75.2: Searching</a>
............................................................................................................................................
<a href="#__Out___123">389</a></p>
<p><a href="#__Out___123">Section 75.3: Precompiled patterns</a>
.........................................................................................................................
<a href="#__Out___123">389</a></p>
<p><a href="#expressions__docs__SO_answer___s">Section 75.4: Flags</a>
....................................................................................................................................................
<a href="#expressions__docs__SO_answer___s">390</a></p>
<p><a href="#The_group_matches_the_empty_stri">Section 75.5: Replacing
.............................................................................................................................................
391</a></p>
<p><a href="#The_group_matches_the_empty_stri">Section 75.6: Find All
Non-Overlapping Matches</a>
...................................................................................................
<a href="#The_group_matches_the_empty_stri">391</a></p>
<p><a href="#889">Section 75.7: Checking for allowed characters</a>
......................................................................................................
<a href="#889">392</a></p>
<p><a href="#889">Section 75.8: Splitting a string using regular
expressions</a>
.....................................................................................
<a href="#889">392</a></p>
<p><a href="#889">Section 75.9: Grouping</a>
..............................................................................................................................................
<a href="#889">392</a></p>
<p><a href="#sentence____This_is_a_phone_numb">Section 75.10: Escaping
Special Characters</a>
...........................................................................................................
<a href="#sentence____This_is_a_phone_numb">393</a></p>
<p><a href="#__Out____b">Section 75.11: Match an expression only in
specific locations</a>
...............................................................................
<a href="#__Out____b">394</a></p>
<p><a href="#Section_75_12__Iterating_over_ma">Section 75.12: Iterating
over matches using `re.finditer`</a>
........................................................................................
<a href="#Section_75_12__Iterating_over_ma">395</a></p>
<h1
id="chapter-76-copying-data-....................................................................................................................................-396"><a
href="#Chapter_76__Copying_data_1">Chapter 76: Copying data</a>
....................................................................................................................................
<a href="#Chapter_76__Copying_data_1">396</a></h1>
<p><a href="#Chapter_76__Copying_data_1">Section 76.1: Copy a
dictionary</a>
................................................................................................................................
<a href="#Chapter_76__Copying_data_1">396</a></p>
<p><a href="#Chapter_76__Copying_data_1">Section 76.2: Performing a
shallow copy</a>
...............................................................................................................
<a href="#Chapter_76__Copying_data_1">396</a></p>
<p><a href="#Chapter_76__Copying_data_1">Section 76.3: Performing a deep
copy</a>
....................................................................................................................
<a href="#Chapter_76__Copying_data_1">396</a></p>
<p><a href="#Chapter_76__Copying_data_1">Section 76.4: Performing a
shallow copy of a list</a>
..................................................................................................
<a href="#Chapter_76__Copying_data_1">396</a></p>
<p><a href="#Chapter_76__Copying_data_1">Section 76.5: Copy a set</a>
...........................................................................................................................................
<a href="#Chapter_76__Copying_data_1">396</a></p>
<h1
id="chapter-77-context-managers-with-statement-...............................................................................-398"><a
href="#Chapter_77__Context_Managers___w_1">Chapter 77: Context Managers
(“with” Statement)</a>
...............................................................................
<a href="#Chapter_77__Context_Managers___w_1">398</a></h1>
<p><a href="#Chapter_77__Context_Managers___w_1">Section 77.1:
Introduction to context managers and the with statement</a>
............................................................ <a
href="#Chapter_77__Context_Managers___w_1">398</a></p>
<p><a href="#Chapter_77__Context_Managers___w_1">Section 77.2: Writing
your own context manager</a>
.................................................................................................
<a href="#Chapter_77__Context_Managers___w_1">398</a></p>
<p><a href="#exits_normally__all_three_of_the">Section 77.3: Writing
your own contextmanager using generator syntax</a>
......................................................... <a
href="#exits_normally__all_three_of_the">399</a></p>
<p><a href="#The_decorator_simplifies_the_tas">Section 77.4: Multiple
context managers</a>
................................................................................................................
<a href="#The_decorator_simplifies_the_tas">400</a></p>
<p><a href="#The_decorator_simplifies_the_tas">Section 77.5: Assigning
to a target</a>
..........................................................................................................................
<a href="#The_decorator_simplifies_the_tas">400</a></p>
<p><a href="#with_database_connection_as_curs">Section 77.6: Manage
Resources</a>
.............................................................................................................................
<a href="#with_database_connection_as_curs">401</a></p>
<h1
id="chapter-78-the-__name__-special-variable-...........................................................................................-402"><a
href="#Chapter_78__The___name___special_1">Chapter 78: The __name__
special variable</a>
...........................................................................................
<a href="#Chapter_78__The___name___special_1">402</a></h1>
<p><a href="#Chapter_78__The___name___special_1">Section 78.1: __name__
== '__main__'</a>
.................................................................................................................
<a href="#Chapter_78__The___name___special_1">402</a></p>
<p><a href="#Chapter_78__The___name___special_1">Section 78.2: Use in
logging</a>
.....................................................................................................................................
<a href="#Chapter_78__The___name___special_1">402</a></p>
<p><a href="#Chapter_78__The___name___special_1">Section 78.3:
function_class_or_module.__name__</a>
..........................................................................................
<a href="#Chapter_78__The___name___special_1">402</a></p>
<p><span id="Chapter_79__Checking_Path_Existe" class="anchor"></span><a
href="#Chapter_79__Checking_Path_Existe_1">Chapter 79: Checking Path
Existence and Permissions
.........................................................................
404</a></p>
<p><a href="#Chapter_79__Checking_Path_Existe_1">Section 79.1: Perform
checks using os.access</a>
........................................................................................................
<a href="#Chapter_79__Checking_Path_Existe_1">404</a></p>
<h1
id="chapter-80-creating-python-packages-.......................................................................................................-406"><a
href="#Chapter_80__Creating_Python_pack_1">Chapter 80: Creating Python
packages</a>
.......................................................................................................
<a href="#Chapter_80__Creating_Python_pack_1">406</a></h1>
<p><a href="#Chapter_80__Creating_Python_pack_1">Section 80.1:
Introduction</a>
.........................................................................................................................................
<a href="#Chapter_80__Creating_Python_pack_1">406</a></p>
<p><a href="#Chapter_80__Creating_Python_pack_1">Section 80.2: Uploading
to PyPI</a>
..............................................................................................................................
<a href="#Chapter_80__Creating_Python_pack_1">406</a></p>
<p><a href="#____package_name_foo">Section 80.3: Making package
executable</a>
.............................................................................................................
<a href="#____package_name_foo">408</a></p>
<p><span id="Chapter_81__Usage_of__pip__modul" class="anchor"></span><a
href="#Chapter_81__Usage_of__pip__modul_1">Chapter 81: Usage of "pip"
module: PyPI Package Manager
.............................................................
410</a></p>
<p><a href="#Chapter_81__Usage_of__pip__modul_1">Section 81.1: Example
use of commands</a>
................................................................................................................
<a href="#Chapter_81__Usage_of__pip__modul_1">410</a></p>
<p><a href="#Chapter_81__Usage_of__pip__modul_1">Section 81.2: Handling
ImportError Exception</a>
........................................................................................................
<a href="#Chapter_81__Usage_of__pip__modul_1">410</a></p>
<p><a href="#import_pip">Section 81.3: Force install</a>
..........................................................................................................................................
<a href="#import_pip">411</a></p>
<h1
id="chapter-82-pip-pypi-package-manager-......................................................................................................-412"><a
href="#Chapter_82__pip__PyPI_Package_Ma_1">Chapter 82: pip: PyPI Package
Manager</a>
......................................................................................................
<a href="#Chapter_82__pip__PyPI_Package_Ma_1">412</a></h1>
<p><a href="#Chapter_82__pip__PyPI_Package_Ma_1">Section 82.1: Install
Packages</a>
..................................................................................................................................
<a href="#Chapter_82__pip__PyPI_Package_Ma_1">412</a></p>
<p><a href="#Chapter_82__pip__PyPI_Package_Ma_1">Section 82.2: To list
all packages installed using `pip`
...........................................................................................
412</a></p>
<p><a href="#Chapter_82__pip__PyPI_Package_Ma_1">Section 82.3: Upgrade
Packages</a>
............................................................................................................................
<a href="#Chapter_82__pip__PyPI_Package_Ma_1">412</a></p>
<p><a href="#__pip_install___upgrade_SomePack">Section 82.4: Uninstall
Packages</a>
.............................................................................................................................
<a href="#__pip_install___upgrade_SomePack">413</a></p>
<p><a href="#__pip_install___upgrade_SomePack">Section 82.5: Updating
all outdated packages on Linux</a>
......................................................................................
<a href="#__pip_install___upgrade_SomePack">413</a></p>
<p><a href="#__pip_install___upgrade_SomePack">Section 82.6: Updating
all outdated packages on Windows
................................................................................
413</a></p>
<p><a href="#__pip_install___upgrade_SomePack">Section 82.7: Create a
requirements.txt file of all packages on the system
....................................................... 413</a></p>
<p><a href="#Section_82_8__Using_a_certain_Py">Section 82.8: Using a
certain Python version with pip</a>
..........................................................................................
<a href="#Section_82_8__Using_a_certain_Py">414</a></p>
<p><a href="#Section_82_8__Using_a_certain_Py">Section 82.9: Create a
requirements.txt file of packages only in the current virtualenv</a>
.................................. <a
href="#Section_82_8__Using_a_certain_Py">414</a></p>
<p><a href="#Global_packages_will_not_be_list">Section 82.10: Installing
packages not yet on pip as wheels</a>
................................................................................
<a href="#Global_packages_will_not_be_list">415</a></p>
<h1
id="chapter-83-parsing-command-line-arguments-......................................................................................-418"><a
href="#Chapter_83__Parsing_Command_Line_1">Chapter 83: Parsing Command
Line arguments</a>
......................................................................................
<a href="#Chapter_83__Parsing_Command_Line_1">418</a></h1>
<p><a href="#Chapter_83__Parsing_Command_Line_1">Section 83.1: Hello
world in argparse</a>
......................................................................................................................
<a href="#Chapter_83__Parsing_Command_Line_1">418</a></p>
<p><a href="#Chapter_83__Parsing_Command_Line_1">Section 83.2: Using
command line arguments with argv</a>
.....................................................................................
<a href="#Chapter_83__Parsing_Command_Line_1">418</a></p>
<p><a href="#By_convention__the_first_element">Section 83.3: Setting
mutually exclusive arguments with argparse</a>
.................................................................... <a
href="#By_convention__the_first_element">419</a></p>
<p><a href="#group_add_argument___f______foo">Section 83.4: Basic
example with docopt</a>
...............................................................................................................
<a href="#group_add_argument___f______foo">420</a></p>
<p><a href="#group_add_argument___f______foo">Section 83.5: Custom
parser error message with argparse</a>
.................................................................................
<a href="#group_add_argument___f______foo">420</a></p>
<p><a href="#parser___argparse_ArgumentParser">Section 83.6: Conceptual
grouping of arguments with argparse.add_argument_group()</a>
............................. <a
href="#parser___argparse_ArgumentParser">421</a></p>
<p><a href="#parser_add_argument__name___help">Section 83.7: Advanced
example with docopt and docopt_dispatch</a>
................................................................. <a
href="#parser_add_argument__name___help">422</a></p>
<h1
id="chapter-84-subprocess-library-......................................................................................................................-424"><a
href="#Chapter_84__Subprocess_Library_1">Chapter 84: Subprocess
Library</a>
......................................................................................................................
<a href="#Chapter_84__Subprocess_Library_1">424</a></h1>
<p><a href="#Chapter_84__Subprocess_Library_1">Section 84.1: More
flexibility with Popen</a>
.................................................................................................................
<a href="#Chapter_84__Subprocess_Library_1">424</a></p>
<p><a href="#in_the_case_the_subcommand_outpu">Section 84.2: Calling
External Commands</a>
..............................................................................................................
<a href="#in_the_case_the_subcommand_outpu">425</a></p>
<p><a href="#in_the_case_the_subcommand_outpu">Section 84.3: How to
create the command list argument</a>
....................................................................................
<a href="#in_the_case_the_subcommand_outpu">425</a></p>
<h1
id="chapter-85-setup.py-..............................................................................................................................................-427"><a
href="#Chapter_85__setup_py_1">Chapter 85: setup.py</a>
..............................................................................................................................................
<a href="#Chapter_85__setup_py_1">427</a></h1>
<p><a href="#Chapter_85__setup_py_1">Section 85.1: Purpose of
setup.py</a>
............................................................................................................................
<a href="#Chapter_85__setup_py_1">427</a></p>
<p><a href="#Chapter_85__setup_py_1">Section 85.2: Using source control
metadata in setup.py</a>
....................................................................................
<a href="#Chapter_85__setup_py_1">427</a></p>
<p><a href="#Section_85_3__Adding_command_lin">Section 85.3: Adding
command line scripts to your python package
.................................................................
428</a></p>
<p><a href="#Section_85_3__Adding_command_lin">Section 85.4: Adding
installation options</a>
................................................................................................................
<a href="#Section_85_3__Adding_command_lin">428</a></p>
<h1
id="chapter-86-recursion-............................................................................................................................................-430"><a
href="#Chapter_86__Recursion_1">Chapter 86: Recursion</a>
............................................................................................................................................
<a href="#Chapter_86__Recursion_1">430</a></h1>
<p><a href="#Chapter_86__Recursion_1">Section 86.1: The What, How, and
When of Recursion</a>
..........................................................................................
<a href="#Chapter_86__Recursion_1">430</a></p>
<p><a href="#return__n_0">Section 86.2: Tree exploration with
recursion</a>
........................................................................................................
<a href="#return__n_0">433</a></p>
<p><a href="#Section_86_3__Sum_of_numbers_fro">Section 86.3: Sum of
numbers from 1 to n</a>
..............................................................................................................
<a href="#Section_86_3__Sum_of_numbers_fro">434</a></p>
<p><a href="#Section_86_3__Sum_of_numbers_fro">Section 86.4: Increasing
the Maximum Recursion Depth
......................................................................................
434</a></p>
<p><a href="#From_Python_3_5__the_exception_i_1">Section 86.5: Tail
Recursion - Bad Practice</a>
............................................................................................................
<a href="#From_Python_3_5__the_exception_i_1">435</a></p>
<p><a href="#From_Python_3_5__the_exception_i_1">Section 86.6: Tail
Recursion Optimization Through Stack Introspection</a>
............................................................ <a
href="#From_Python_3_5__the_exception_i_1">435</a></p>
<h1
id="chapter-87-type-hints-..........................................................................................................................................-437"><a
href="#Chapter_87__Type_Hints_1">Chapter 87: Type Hints</a>
..........................................................................................................................................
<a href="#Chapter_87__Type_Hints_1">437</a></h1>
<p><a href="#Chapter_87__Type_Hints_1">Section 87.1: Adding types to a
function</a>
.................................................................................................................
<a href="#Chapter_87__Type_Hints_1">437</a></p>
<p><a href="#Section_87_2__NamedTuple">Section 87.2: NamedTuple</a>
.......................................................................................................................................
<a href="#Section_87_2__NamedTuple">438</a></p>
<p><a href="#Section_87_2__NamedTuple">Section 87.3: Generic Types</a>
.....................................................................................................................................
<a href="#Section_87_2__NamedTuple">438</a></p>
<p><a href="#Section_87_2__NamedTuple">Section 87.4: Variables and
Attributes</a>
....................................................................................................................
<a href="#Section_87_2__NamedTuple">438</a></p>
<p><a href="#____x____class__int">Section 87.5: Class Members and
Methods</a>
............................................................................................................
<a href="#____x____class__int">439</a></p>
<p><a href="#____x____class__int">Section 87.6: Type hints for keyword
arguments</a>
..................................................................................................
<a href="#____x____class__int">439</a></p>
<h1
id="chapter-88-exceptions-..........................................................................................................................................-440"><a
href="#Chapter_88__Exceptions_1">Chapter 88: Exceptions</a>
..........................................................................................................................................
<a href="#Chapter_88__Exceptions_1">440</a></h1>
<p><a href="#Chapter_88__Exceptions_1">Section 88.1: Catching Exceptions
............................................................................................................................
440</a></p>
<p><a href="#Chapter_88__Exceptions_1">Section 88.2: Do not catch
everything!</a>
...................................................................................................................
<a href="#Chapter_88__Exceptions_1">440</a></p>
<p><a href="#In_most_cases_it_s_bad_practice">Section 88.3: Re-raising
exceptions
.........................................................................................................................
441</a></p>
<p><a href="#In_most_cases_it_s_bad_practice">Section 88.4: Catching
multiple exceptions</a>
............................................................................................................
<a href="#In_most_cases_it_s_bad_practice">441</a></p>
<p><a href="#If_you_wish_to_handle_different">Section 88.5: Exception
Hierarchy</a>
...........................................................................................................................
<a href="#If_you_wish_to_handle_different">442</a></p>
<p><a href="#____ValueError">Section 88.6: Else</a>
.......................................................................................................................................................
<a href="#____ValueError">444</a></p>
<p><a href="#____ValueError">Section 88.7: Raising Exceptions
..............................................................................................................................
444</a></p>
<p><a href="#return_odds___1">Section 88.8: Creating custom exception
types
.....................................................................................................
445</a></p>
<p><a href="#return_odds___1">Section 88.9: Practical examples of
exception handling
.......................................................................................
445</a></p>
<p><a href="#d_____7__3____25__9____38__5">Section 88.10: Exceptions are
Objects too</a>
..............................................................................................................
<a href="#d_____7__3____25__9____38__5">446</a></p>
<p><a href="#d_____7__3____25__9____38__5">Section 88.11: Running
clean-up code with finally
..................................................................................................
446</a></p>
<p><a href="#resource___allocate_some_expensi">Section 88.12: Chain
exceptions with raise from</a>
....................................................................................................
<a href="#resource___allocate_some_expensi">447</a></p>
<h1
id="chapter-89-raise-custom-errors-exceptions-.........................................................................................-448"><a
href="#Chapter_89__Raise_Custom_Errors_1">Chapter 89: Raise Custom
Errors / Exceptions</a>
.........................................................................................
<a href="#Chapter_89__Raise_Custom_Errors_1">448</a></h1>
<p><a href="#Chapter_89__Raise_Custom_Errors_1">Section 89.1: Custom
Exception</a>
...............................................................................................................................
<a href="#Chapter_89__Raise_Custom_Errors_1">448</a></p>
<p><a href="#Chapter_89__Raise_Custom_Errors_1">Section 89.2: Catch
custom Exception</a>
....................................................................................................................
<a href="#Chapter_89__Raise_Custom_Errors_1">448</a></p>
<h1
id="chapter-90-commonwealth-exceptions-.......................................................................................................-450"><a
href="#Chapter_90__Commonwealth_Excepti_1">Chapter 90: Commonwealth
Exceptions</a>
.......................................................................................................
<a href="#Chapter_90__Commonwealth_Excepti_1">450</a></h1>
<p><a href="#Chapter_90__Commonwealth_Excepti_1">Section 90.1: Other
Errors</a>
.........................................................................................................................................
<a href="#Chapter_90__Commonwealth_Excepti_1">450</a></p>
<p><a href="#print_x___is_a_divisor_of___div">Section 90.2: NameError:
name '???' is not defined</a>
..............................................................................................
<a href="#print_x___is_a_divisor_of___div">451</a></p>
<p><a href="#d_is_accessible_because_the_for">Section 90.3:
TypeErrors</a>
..........................................................................................................................................
<a href="#d_is_accessible_because_the_for">452</a></p>
<p><a href="#d___1___1_0">Section 90.4: Syntax Error on good code</a>
...............................................................................................................
<a href="#d___1___1_0">453</a></p>
<p><a href="#SyntaxError__invalid_syntax">Section 90.5:
IndentationErrors (or indentation SyntaxErrors)</a>
............................................................................
<a href="#SyntaxError__invalid_syntax">454</a></p>
<h1
id="chapter-91-urllib-.......................................................................................................................................................-456"><a
href="#Chapter_91__urllib_1">Chapter 91: urllib</a>
.......................................................................................................................................................
<a href="#Chapter_91__urllib_1">456</a></h1>
<p><a href="#Chapter_91__urllib_1">Section 91.1: HTTP GET</a>
..............................................................................................................................................
<a href="#Chapter_91__urllib_1">456</a></p>
<p><a href="#Chapter_91__urllib_1">Section 91.2: HTTP POST</a>
..........................................................................................................................................
<a href="#Chapter_91__urllib_1">456</a></p>
<p><a href="#Top_of_index_html">Section 91.3: Decode received bytes
according to content type encoding</a>
........................................................ <a
href="#Top_of_index_html">457</a></p>
<h1
id="chapter-92-web-scraping-with-python-.........................................................................................................-458"><a
href="#Top_of_index_html">Chapter 92: Web scraping with Python</a>
.........................................................................................................
<a href="#Top_of_index_html">458</a></h1>
<p><a href="#Top_of_index_html">Section 92.1: Scraping using the Scrapy
framework</a>
.............................................................................................
<a href="#Top_of_index_html">458</a></p>
<p><a href="#Top_of_index_html">Section 92.2: Scraping using Selenium
WebDriver</a>
................................................................................................
<a href="#Top_of_index_html">458</a></p>
<p><a href="#Top_of_index_html">Section 92.3: Basic example of using
requests and lxml to scrape some data</a>
................................................. <a
href="#Top_of_index_html">459</a></p>
<p><a href="#Top_of_index_html">Section 92.4: Maintaining web-scraping
session with requests</a>
...........................................................................
<a href="#Top_of_index_html">459</a></p>
<p><a href="#Top_of_index_html">Section 92.5: Scraping using
BeautifulSoup4</a>
.........................................................................................................
<a href="#Top_of_index_html">460</a></p>
<p><a href="#Top_of_index_html">Section 92.6: Simple web content
download with urllib.request</a>
..........................................................................
<a href="#Top_of_index_html">460</a></p>
<p><a href="#Top_of_index_html">Section 92.7: Modify Scrapy user
agent</a>
.................................................................................................................
<a href="#Top_of_index_html">460</a></p>
<p><a href="#Top_of_index_html">Section 92.8: Scraping with curl</a>
...............................................................................................................................
<a href="#Top_of_index_html">460</a></p>
<p><span id="Chapter_93__HTML_Parsing" class="anchor"></span><a
href="#Top_of_index_html">Chapter 93: HTML Parsing
....................................................................................................................................
462</a></p>
<p><a href="#Top_of_index_html">Section 93.1: Using CSS selectors in
BeautifulSoup
................................................................................................
462</a></p>
<p><a href="#Top_of_index_html">Section 93.2: PyQuery
...............................................................................................................................................
462</a></p>
<p><a href="#Top_of_index_html">Section 93.3: Locate a text after an
element in BeautifulSoup</a>
............................................................................
<a href="#Top_of_index_html">463</a></p>
<h1
id="chapter-94-manipulating-xml-..........................................................................................................................-464"><a
href="#Top_of_index_html">Chapter 94: Manipulating XML</a>
..........................................................................................................................
<a href="#Top_of_index_html">464</a></h1>
<p><a href="#Top_of_index_html">Section 94.1: Opening and reading using
an ElementTree</a>
...................................................................................
<a href="#Top_of_index_html">464</a></p>
<p><a href="#Top_of_index_html">Section 94.2: Create and Build XML
Documents
....................................................................................................
464</a></p>
<p><a href="#Top_of_index_html">Section 94.3: Modifying an XML File</a>
........................................................................................................................
<a href="#Top_of_index_html">465</a></p>
<p><a href="#Top_of_index_html">Section 94.4: Searching the XML with
XPath</a>
..........................................................................................................
<a href="#Top_of_index_html">465</a></p>
<p><a href="#Top_of_index_html">Section 94.5: Opening and reading large
XML files using iterparse (incremental parsing)</a>
............................. <a href="#Top_of_index_html">466</a></p>
<h1
id="chapter-95-python-requests-post-..................................................................................................................-468"><a
href="#Top_of_index_html">Chapter 95: Python Requests Post</a>
..................................................................................................................
<a href="#Top_of_index_html">468</a></h1>
<p><a href="#Top_of_index_html">Section 95.1: Simple Post</a>
..........................................................................................................................................
<a href="#Top_of_index_html">468</a></p>
<p><a href="#Top_of_index_html">Section 95.2: Form Encoded Data</a>
...........................................................................................................................
<a href="#Top_of_index_html">469</a></p>
<p><a href="#Top_of_index_html">Section 95.3: File Upload</a>
..........................................................................................................................................
<a href="#Top_of_index_html">469</a></p>
<p><a href="#Top_of_index_html">Section 95.4: Responses</a>
...........................................................................................................................................
<a href="#Top_of_index_html">470</a></p>
<p><a href="#Top_of_index_html">Section 95.5: Authentication</a>
.....................................................................................................................................
<a href="#Top_of_index_html">470</a></p>
<p><a href="#Top_of_index_html">Section 95.6: Proxies</a>
.................................................................................................................................................
<a href="#Top_of_index_html">471</a></p>
<h1
id="chapter-96-distribution-........................................................................................................................................-473"><a
href="#Top_of_index_html">Chapter 96: Distribution</a>
........................................................................................................................................
<a href="#Top_of_index_html">473</a></h1>
<p><a href="#Top_of_index_html">Section 96.1: py2app</a>
.................................................................................................................................................
<a href="#Top_of_index_html">473</a></p>
<p><a href="#Top_of_index_html">Section 96.2: cx_Freeze</a>
............................................................................................................................................
<a href="#Top_of_index_html">474</a></p>
<h1
id="chapter-97-property-objects-............................................................................................................................-475"><a
href="#Top_of_index_html">Chapter 97: Property Objects</a>
............................................................................................................................
<a href="#Top_of_index_html">475</a></h1>
<p><a href="#Top_of_index_html">Section 97.1: Using the @property
decorator for read-write properties
.............................................................
475</a></p>
<p><a href="#Top_of_index_html">Section 97.2: Using the @property
decorator</a>
.......................................................................................................
<a href="#Top_of_index_html">475</a></p>
<p><a href="#Top_of_index_html">Section 97.3: Overriding just a getter,
setter or a deleter of a property object</a>
................................................. <a
href="#Top_of_index_html">476</a></p>
<p><a href="#Top_of_index_html">Section 97.4: Using properties without
decorators
................................................................................................
476</a></p>
<h1
id="chapter-98-overloading-......................................................................................................................................-479"><a
href="#Top_of_index_html">Chapter 98: Overloading</a>
......................................................................................................................................
<a href="#Top_of_index_html">479</a></h1>
<p><a href="#Top_of_index_html">Section 98.1: Operator overloading</a>
.........................................................................................................................
<a href="#Top_of_index_html">479</a></p>
<p><a href="#Top_of_index_html">Section 98.2: Magic/Dunder Methods</a>
....................................................................................................................
<a href="#Top_of_index_html">480</a></p>
<p><a href="#Top_of_index_html">Section 98.3: Container and sequence
types</a>
.........................................................................................................
<a href="#Top_of_index_html">481</a></p>
<p><a href="#Top_of_index_html">Section 98.4: Callable types</a>
.....................................................................................................................................
<a href="#Top_of_index_html">482</a></p>
<p><a href="#Top_of_index_html">Section 98.5: Handling unimplemented
behaviour
................................................................................................
482</a></p>
<h1
id="chapter-99-polymorphism-..................................................................................................................................-484"><a
href="#Top_of_index_html">Chapter 99: Polymorphism</a>
..................................................................................................................................
<a href="#Top_of_index_html">484</a></h1>
<p><a href="#Top_of_index_html">Section 99.1: Duck Typing</a>
.........................................................................................................................................
<a href="#Top_of_index_html">484</a></p>
<p><a href="#Top_of_index_html">Section 99.2: Basic Polymorphism</a>
..........................................................................................................................
<a href="#Top_of_index_html">484</a></p>
<h1
id="chapter-100-method-overriding-......................................................................................................................-488"><a
href="#Top_of_index_html">Chapter 100: Method Overriding</a>
......................................................................................................................
<a href="#Top_of_index_html">488</a></h1>
<p><a href="#Top_of_index_html">Section 100.1: Basic method
overriding</a>
...................................................................................................................
<a href="#Top_of_index_html">488</a></p>
<h1
id="chapter-101-user-defined-methods-................................................................................................................-489"><a
href="#Top_of_index_html">Chapter 101: User-Defined Methods</a>
................................................................................................................
<a href="#Top_of_index_html">489</a></h1>
<p><a href="#Top_of_index_html">Section 101.1: Creating user-defined
method objects</a>
............................................................................................
<a href="#Top_of_index_html">489</a></p>
<p><a href="#Top_of_index_html">Section 101.2: Turtle example</a>
...................................................................................................................................
<a href="#Top_of_index_html">490</a></p>
<p><span id="Chapter_102__String_representati" class="anchor"></span><a
href="#Top_of_index_html">Chapter 102: String representations of class
instances: __str__ and __repr__</a></p>
<p><a href="#Top_of_index_html"><strong>methods</strong></a>
........................................................................................................................................................................
<a href="#Top_of_index_html">491</a></p>
<p><a href="#Top_of_index_html">Section 102.1: Motivation</a>
...........................................................................................................................................
<a href="#Top_of_index_html">491</a></p>
<p><a href="#Top_of_index_html">Section 102.2: Both methods implemented,
eval-round-trip style __repr__()</a>
.................................................. <a
href="#Top_of_index_html">495</a></p>
<h1
id="chapter-103-debugging-........................................................................................................................................-496"><a
href="#Top_of_index_html">Chapter 103: Debugging</a>
........................................................................................................................................
<a href="#Top_of_index_html">496</a></h1>
<p><a href="#Top_of_index_html">Section 103.1: Via IPython and ipdb</a>
.........................................................................................................................
<a href="#Top_of_index_html">496</a></p>
<p><a href="#Top_of_index_html">Section 103.2: The Python Debugger:
Step-through Debugging with _pdb_</a>
.................................................... <a
href="#Top_of_index_html">496</a></p>
<p><a href="#Top_of_index_html">Section 103.3: Remote debugger</a>
.............................................................................................................................
<a href="#Top_of_index_html">498</a></p>
<h1
id="chapter-104-reading-and-writing-csv-........................................................................................................-499"><a
href="#Top_of_index_html">Chapter 104: Reading and Writing CSV</a>
........................................................................................................
<a href="#Top_of_index_html">499</a></h1>
<p><a href="#Top_of_index_html">Section 104.1: Using pandas</a>
.....................................................................................................................................
<a href="#Top_of_index_html">499</a></p>
<p><a href="#Top_of_index_html">Section 104.2: Writing a TSV file</a>
..............................................................................................................................
<a href="#Top_of_index_html">499</a></p>
<h1
id="chapter-105-writing-to-csv-from-string-or-list-......................................................................................-501"><a
href="#Top_of_index_html">Chapter 105: Writing to CSV from String or
List</a>
......................................................................................
<a href="#Top_of_index_html">501</a></h1>
<p><a href="#Top_of_index_html">Section 105.1: Basic Write Example</a>
..........................................................................................................................
<a href="#Top_of_index_html">501</a></p>
<p><a href="#Top_of_index_html">Section 105.2: Appending a String as a
newline in a CSV file</a>
...............................................................................
<a href="#Top_of_index_html">501</a></p>
<p><span id="Chapter_106__Dynamic_code_execut" class="anchor"></span><a
href="#Top_of_index_html">Chapter 106: Dynamic code execution with
`exec` and `eval`
.............................................................
502</a></p>
<p><a href="#Top_of_index_html">Section 106.1: Executing code provided
by untrusted user using exec, eval, or ast.literal_eval</a>
....................... <a href="#Top_of_index_html">502</a></p>
<p><a href="#Top_of_index_html">Section 106.2: Evaluating a string
containing a Python literal with ast.literal_eval</a>
........................................... <a
href="#Top_of_index_html">502</a></p>
<p><a href="#Top_of_index_html">Section 106.3: Evaluating statements
with exec</a>
.....................................................................................................
<a href="#Top_of_index_html">502</a></p>
<p><a href="#Top_of_index_html">Section 106.4: Evaluating an expression
with eval</a>
.................................................................................................
<a href="#Top_of_index_html">503</a></p>
<p><a href="#Top_of_index_html">Section 106.5: Precompiling an
expression to evaluate it multiple times</a>
............................................................ <a
href="#Top_of_index_html">503</a></p>
<p><a href="#Top_of_index_html">Section 106.6: Evaluating an expression
with eval using custom globals</a>
........................................................... <a
href="#Top_of_index_html">503</a></p>
<h1
id="chapter-107-pyinstaller---distributing-python-code-..............................................................................-504"><a
href="#Top_of_index_html">Chapter 107: PyInstaller - Distributing Python
Code</a>
..............................................................................
<a href="#Top_of_index_html">504</a></h1>
<p><a href="#Top_of_index_html">Section 107.1: Installation and
Setup</a>
........................................................................................................................
<a href="#Top_of_index_html">504</a></p>
<p><a href="#Top_of_index_html">Section 107.2: Using Pyinstaller
................................................................................................................................
504</a></p>
<p><a href="#Top_of_index_html">Section 107.3: Bundling to One Folder
.....................................................................................................................
505</a></p>
<p><a href="#Top_of_index_html">Section 107.4: Bundling to a Single
File</a>
...................................................................................................................
<a href="#Top_of_index_html">505</a></p>
<h1
id="chapter-108-data-visualization-with-python-.............................................................................................-506"><a
href="#Top_of_index_html">Chapter 108: Data Visualization with
Python</a>
.............................................................................................
<a href="#Top_of_index_html">506</a></h1>
<p><a href="#Top_of_index_html">Section 108.1: Seaborn</a>
..............................................................................................................................................
<a href="#Top_of_index_html">506</a></p>
<p><a href="#Top_of_index_html">Section 108.2: Matplotlib</a>
...........................................................................................................................................
<a href="#Top_of_index_html">508</a></p>
<p><a href="#Top_of_index_html">Section 108.3: Plotly</a>
...................................................................................................................................................
<a href="#Top_of_index_html">509</a></p>
<p><a href="#Top_of_index_html">Section 108.4: MayaVI</a>
...............................................................................................................................................
<a href="#Top_of_index_html">511</a></p>
<p><span id="Chapter_109__The_Interpreter__Co" class="anchor"></span><a
href="#Top_of_index_html">Chapter 109: The Interpreter (Command Line
Console)
.......................................................................
513</a></p>
<p><a href="#Top_of_index_html">Section 109.1: Getting general help</a>
..........................................................................................................................
<a href="#Top_of_index_html">513</a></p>
<p><a href="#Top_of_index_html">Section 109.2: Referring to the last
expression</a>
......................................................................................................
<a href="#Top_of_index_html">513</a></p>
<p><a href="#Top_of_index_html">Section 109.3: Opening the Python
console
............................................................................................................
514</a></p>
<p><a href="#Top_of_index_html">Section 109.4: The PYTHONSTARTUP
variable</a>
......................................................................................................
<a href="#Top_of_index_html">514</a></p>
<p><a href="#Top_of_index_html">Section 109.5: Command line
arguments</a>
...............................................................................................................
<a href="#Top_of_index_html">514</a></p>
<p><a href="#Top_of_index_html">Section 109.6: Getting help about an
object</a>
...........................................................................................................
<a href="#Top_of_index_html">515</a></p>
<h1
id="chapter-110-args-and-kwargs-.......................................................................................................................-518"><a
href="#Top_of_index_html">Chapter 110: *args and **kwargs</a>
.......................................................................................................................
<a href="#Top_of_index_html">518</a></h1>
<p><a href="#Top_of_index_html">Section 110.1: Using **kwargs when
writing functions</a>
............................................................................................
<a href="#Top_of_index_html">518</a></p>
<p><a href="#Top_of_index_html">Section 110.2: Using *args when writing
functions
..................................................................................................
518</a></p>
<p><a href="#Top_of_index_html">Section 110.3: Populating kwarg values
with a dictionary</a>
.....................................................................................
<a href="#Top_of_index_html">519</a></p>
<p><a href="#Top_of_index_html">Section 110.4: Keyword-only and
Keyword-required arguments</a>
........................................................................
<a href="#Top_of_index_html">519</a></p>
<p><a href="#Top_of_index_html">Section 110.5: Using **kwargs when
calling functions</a>
............................................................................................
<a href="#Top_of_index_html">519</a></p>
<p><a href="#Top_of_index_html">Section 110.6: **kwargs and default
values</a>
.............................................................................................................
<a href="#Top_of_index_html">519</a></p>
<p><a href="#Top_of_index_html">Section 110.7: Using *args when calling
functions</a>
..................................................................................................
<a href="#Top_of_index_html">520</a></p>
<h1
id="chapter-111-garbage-collection-........................................................................................................................-521"><a
href="#Top_of_index_html">Chapter 111: Garbage Collection</a>
........................................................................................................................
<a href="#Top_of_index_html">521</a></h1>
<p><a href="#Top_of_index_html">Section 111.1: Reuse of primitive
objects</a>
..................................................................................................................
<a href="#Top_of_index_html">521</a></p>
<p><a href="#Top_of_index_html">Section 111.2: Eects of the del
command</a>
..............................................................................................................
<a href="#Top_of_index_html">521</a></p>
<p><a href="#Top_of_index_html">Section 111.3: Reference Counting</a>
............................................................................................................................
<a href="#Top_of_index_html">522</a></p>
<p><a href="#Top_of_index_html">Section 111.4: Garbage Collector for
Reference Cycles</a>
.........................................................................................
<a href="#Top_of_index_html">522</a></p>
<p><a href="#Top_of_index_html">Section 111.5: Forcefully deallocating
objects</a>
.........................................................................................................
<a href="#Top_of_index_html">523</a></p>
<p><a href="#Top_of_index_html">Section 111.6: Viewing the refcount of
an object</a>
.....................................................................................................
<a href="#Top_of_index_html">524</a></p>
<p><a href="#Top_of_index_html">Section 111.7: Do not wait for the
garbage collection to clean up</a>
........................................................................
<a href="#Top_of_index_html">524</a></p>
<p><a href="#Top_of_index_html">Section 111.8: Managing garbage
collection</a>
...........................................................................................................
<a href="#Top_of_index_html">524</a></p>
<h1
id="chapter-112-pickle-data-serialisation-.............................................................................................................-526"><a
href="#Top_of_index_html">Chapter 112: Pickle data serialisation</a>
.............................................................................................................
<a href="#Top_of_index_html">526</a></h1>
<p><a href="#Top_of_index_html">Section 112.1: Using Pickle to serialize
and deserialize an object
..........................................................................
526</a></p>
<p><a href="#Top_of_index_html">Section 112.2: Customize Pickled
Data</a>
....................................................................................................................
<a href="#Top_of_index_html">526</a></p>
<h1
id="chapter-113-binary-data-......................................................................................................................................-528"><a
href="#Top_of_index_html">Chapter 113: Binary Data</a>
......................................................................................................................................
<a href="#Top_of_index_html">528</a></h1>
<p><a href="#Top_of_index_html">Section 113.1: Format a list of values
into a byte object</a>
........................................................................................
<a href="#Top_of_index_html">528</a></p>
<p><a href="#Top_of_index_html">Section 113.2: Unpack a byte object
according to a format string</a>
......................................................................
<a href="#Top_of_index_html">528</a></p>
<p><a href="#Top_of_index_html">Section 113.3: Packing a structure</a>
............................................................................................................................
<a href="#Top_of_index_html">528</a></p>
<p><span id="Chapter_114__Idioms" class="anchor"></span><a
href="#Top_of_index_html">Chapter 114: Idioms
..................................................................................................................................................
530</a></p>
<p><a href="#Top_of_index_html">Section 114.1: Dictionary key
initializations</a>
..............................................................................................................
<a href="#Top_of_index_html">530</a></p>
<p><a href="#Top_of_index_html">Section 114.2: Switching variables</a>
............................................................................................................................
<a href="#Top_of_index_html">530</a></p>
<p><a href="#Top_of_index_html">Section 114.3: Use truth value
testing</a>
......................................................................................................................
<a href="#Top_of_index_html">530</a></p>
<p><a href="#Top_of_index_html">Section 114.4: Test for "__main__" to
avoid unexpected code execution</a>
.......................................................... <a
href="#Top_of_index_html">531</a></p>
<p><span id="Chapter_115__Data_Serialization" class="anchor"></span><a
href="#Top_of_index_html">Chapter 115: Data Serialization
..........................................................................................................................
533</a></p>
<p><a href="#Top_of_index_html">Section 115.1: Serialization using
JSON</a>
....................................................................................................................
<a href="#Top_of_index_html">533</a></p>
<p><a href="#Top_of_index_html">Section 115.2: Serialization using
Pickle</a>
...................................................................................................................
<a href="#Top_of_index_html">533</a></p>
<p><span id="Chapter_116__Multiprocessing" class="anchor"></span><a
href="#Top_of_index_html">Chapter 116: Multiprocessing
...............................................................................................................................
535</a></p>
<p><a href="#Top_of_index_html">Section 116.1: Running Two Simple
Processes
.........................................................................................................
535</a></p>
<p><a href="#Top_of_index_html">Section 116.2: Using Pool and Map
...........................................................................................................................
535</a></p>
<p><span id="Chapter_117__Multithreading" class="anchor"></span><a
href="#Top_of_index_html">Chapter 117: Multithreading
.................................................................................................................................
537</a></p>
<p><a href="#Top_of_index_html">Section 117.1: Basics of
multithreading</a>
....................................................................................................................
<a href="#Top_of_index_html">537</a></p>
<p><a href="#Top_of_index_html">Section 117.2: Communicating between
threads</a>
....................................................................................................
<a href="#Top_of_index_html">538</a></p>
<p><a href="#Top_of_index_html">Section 117.3: Creating a worker
pool</a>
......................................................................................................................
<a href="#Top_of_index_html">539</a></p>
<p><a href="#Top_of_index_html">Section 117.4: Advanced use of
multithreads
..........................................................................................................
539</a></p>
<p><a href="#Top_of_index_html">Section 117.5: Stoppable Thread with a
while Loop</a>
...............................................................................................
<a href="#Top_of_index_html">541</a></p>
<h1
id="chapter-118-processes-and-threads-..............................................................................................................-542"><a
href="#Top_of_index_html">Chapter 118: Processes and Threads</a>
..............................................................................................................
<a href="#Top_of_index_html">542</a></h1>
<p><a href="#Top_of_index_html">Section 118.1: Global Interpreter
Lock</a>
......................................................................................................................
<a href="#Top_of_index_html">542</a></p>
<p><a href="#Top_of_index_html">Section 118.2: Running in Multiple
Threads</a>
.............................................................................................................
<a href="#Top_of_index_html">543</a></p>
<p><a href="#Top_of_index_html">Section 118.3: Running in Multiple
Processes</a>
..........................................................................................................
<a href="#Top_of_index_html">544</a></p>
<p><a href="#Top_of_index_html">Section 118.4: Sharing State Between
Threads
.......................................................................................................
544</a></p>
<p><a href="#Top_of_index_html">Section 118.5: Sharing State Between
Processes
....................................................................................................
545</a></p>
<h1
id="chapter-119-python-concurrency-.....................................................................................................................-546"><a
href="#Top_of_index_html">Chapter 119: Python concurrency</a>
.....................................................................................................................
<a href="#Top_of_index_html">546</a></h1>
<p><a href="#Top_of_index_html">Section 119.1: The multiprocessing
module</a>
.............................................................................................................
<a href="#Top_of_index_html">546</a></p>
<p><a href="#Top_of_index_html">Section 119.2: The threading module</a>
.......................................................................................................................
<a href="#Top_of_index_html">547</a></p>
<p><a href="#Top_of_index_html">Section 119.3: Passing data between
multiprocessing processes</a>
........................................................................
<a href="#Top_of_index_html">547</a></p>
<h1
id="chapter-120-parallel-computation-..................................................................................................................-550"><a
href="#Top_of_index_html">Chapter 120: Parallel computation</a>
..................................................................................................................
<a href="#Top_of_index_html">550</a></h1>
<p><a href="#Top_of_index_html">Section 120.1: Using the multiprocessing
module to parallelise tasks</a>
................................................................. <a
href="#Top_of_index_html">550</a></p>
<p><a href="#Top_of_index_html">Section 120.2: Using a C-extension to
parallelize tasks</a>
........................................................................................
<a href="#Top_of_index_html">550</a></p>
<p><a href="#Top_of_index_html">Section 120.3: Using Parent and Children
scripts to execute code in parallel</a>
.................................................... <a
href="#Top_of_index_html">550</a></p>
<p><a href="#Top_of_index_html">Section 120.4: Using PyPar module to
parallelize</a>
..................................................................................................
<a href="#Top_of_index_html">551</a></p>
<p><span id="Chapter_121__Sockets" class="anchor"></span><a
href="#Top_of_index_html">Chapter 121: Sockets
................................................................................................................................................
552</a></p>
<p><a href="#Top_of_index_html">Section 121.1: Raw Sockets on Linux
.........................................................................................................................
552</a></p>
<p><a href="#Top_of_index_html">Section 121.2: Sending data via UDP</a>
.......................................................................................................................
<a href="#Top_of_index_html">552</a></p>
<p><a href="#Top_of_index_html">Section 121.3: Receiving data via
UDP</a>
.....................................................................................................................
<a href="#Top_of_index_html">553</a></p>
<p><a href="#Top_of_index_html">Section 121.4: Sending data via TCP</a>
........................................................................................................................
<a href="#Top_of_index_html">553</a></p>
<p><a href="#Top_of_index_html">Section 121.5: Multi-threaded TCP Socket
Server</a>
...................................................................................................
<a href="#Top_of_index_html">553</a></p>
<p><span id="Chapter_122__Websockets" class="anchor"></span><a
href="#Top_of_index_html">Chapter 122: Websockets
......................................................................................................................................
556</a></p>
<p><a href="#Top_of_index_html">Section 122.1: Simple Echo with
aiohttp</a>
...................................................................................................................
<a href="#Top_of_index_html">556</a></p>
<p><a href="#Top_of_index_html">Section 122.2: Wrapper Class with
aiohttp</a>
.............................................................................................................
<a href="#Top_of_index_html">556</a></p>
<p><a href="#Top_of_index_html">Section 122.3: Using Autobahn as a
Websocket Factory
......................................................................................
557</a></p>
<p><span id="Chapter_123__Sockets_And_Message" class="anchor"></span><a
href="#Top_of_index_html">Chapter 123: Sockets And Message
Encryption/Decryption Between Client and Server</a></p>
<p>............................................................................................................................................................................................
<a href="#Top_of_index_html">559</a></p>
<p><a href="#Top_of_index_html">Section 123.1: Server side
Implementation</a>
..............................................................................................................
<a href="#Top_of_index_html">559</a></p>
<p><a href="#Top_of_index_html">Section 123.2: Client side
Implementation</a>
..............................................................................................................
<a href="#Top_of_index_html">561</a></p>
<h1
id="chapter-124-python-networking-.....................................................................................................................-563"><a
href="#Top_of_index_html">Chapter 124: Python Networking</a>
.....................................................................................................................
<a href="#Top_of_index_html">563</a></h1>
<p><a href="#Top_of_index_html">Section 124.1: Creating a Simple Http
Server</a>
..........................................................................................................
<a href="#Top_of_index_html">563</a></p>
<p><a href="#Top_of_index_html">Section 124.2: Creating a TCP server</a>
......................................................................................................................
<a href="#Top_of_index_html">563</a></p>
<p><a href="#Top_of_index_html">Section 124.3: Creating a UDP Server</a>
.....................................................................................................................
<a href="#Top_of_index_html">564</a></p>
<p><a href="#Top_of_index_html">Section 124.4: Start Simple HttpServer
in a thread and open the browser</a>
......................................................... <a
href="#Top_of_index_html">564</a></p>
<p><a href="#Top_of_index_html">Section 124.5: The simplest Python
socket client-server example</a>
.......................................................................
<a href="#Top_of_index_html">565</a></p>
<h1
id="chapter-125-python-http-server-....................................................................................................................-567"><a
href="#Top_of_index_html">Chapter 125: Python HTTP Server</a>
....................................................................................................................
<a href="#Top_of_index_html">567</a></h1>
<p><a href="#Top_of_index_html">Section 125.1: Running a simple HTTP
server</a>
.........................................................................................................
<a href="#Top_of_index_html">567</a></p>
<p><a href="#Top_of_index_html">Section 125.2: Serving files
........................................................................................................................................
567</a></p>
<p><a href="#Top_of_index_html">Section 125.3: Basic handling of GET,
POST, PUT using BaseHTTPRequestHandler</a>
......................................... <a
href="#Top_of_index_html">568</a></p>
<p><a href="#Top_of_index_html">Section 125.4: Programmatic API of
SimpleHTTPServer</a>
.......................................................................................
<a href="#Top_of_index_html">569</a></p>
<h1
id="chapter-126-flask-....................................................................................................................................................-571"><a
href="#Top_of_index_html">Chapter 126: Flask</a>
....................................................................................................................................................
<a href="#Top_of_index_html">571</a></h1>
<p><a href="#Top_of_index_html">Section 126.1: Files and Templates
...........................................................................................................................
571</a></p>
<p><a href="#Top_of_index_html">Section 126.2: The basics</a>
..........................................................................................................................................
<a href="#Top_of_index_html">571</a></p>
<p><a href="#Top_of_index_html">Section 126.3: Routing URLs</a>
.....................................................................................................................................
<a href="#Top_of_index_html">572</a></p>
<p><a href="#Top_of_index_html">Section 126.4: HTTP Methods</a>
...................................................................................................................................
<a href="#Top_of_index_html">573</a></p>
<p><a href="#Top_of_index_html">Section 126.5: Jinja Templating</a>
...............................................................................................................................
<a href="#Top_of_index_html">573</a></p>
<p><a href="#Top_of_index_html">Section 126.6: The Request Object</a>
..........................................................................................................................
<a href="#Top_of_index_html">574</a></p>
<h1
id="chapter-127-introduction-to-rabbitmq-using-amqpstorm-................................................................-576"><a
href="#Top_of_index_html">Chapter 127: Introduction to RabbitMQ using
AMQPStorm</a>
................................................................ <a
href="#Top_of_index_html">576</a></h1>
<p><a href="#Top_of_index_html">Section 127.1: How to consume messages
from RabbitMQ</a>
..................................................................................
<a href="#Top_of_index_html">576</a></p>
<p><a href="#Top_of_index_html">Section 127.2: How to publish messages
to RabbitMQ</a>
.........................................................................................
<a href="#Top_of_index_html">577</a></p>
<p><a href="#Top_of_index_html">Section 127.3: How to create a delayed
queue in RabbitMQ</a>
................................................................................
<a href="#Top_of_index_html">577</a></p>
<h1
id="chapter-128-descriptor-.........................................................................................................................................-580"><a
href="#Top_of_index_html">Chapter 128: Descriptor</a>
.........................................................................................................................................
<a href="#Top_of_index_html">580</a></h1>
<p><a href="#Top_of_index_html">Section 128.1: Simple descriptor</a>
...............................................................................................................................
<a href="#Top_of_index_html">580</a></p>
<p><a href="#Top_of_index_html">Section 128.2: Two-way conversions
.......................................................................................................................
581</a></p>
<p><span id="Chapter_129__tempfile_NamedTempo" class="anchor"></span><a
href="#Top_of_index_html">Chapter 129: tempfile NamedTemporaryFile
.............................................................................................
582</a></p>
<p><a href="#Top_of_index_html">Section 129.1: Create (and write to a)
known, persistent temporary file</a>
............................................................. <a
href="#Top_of_index_html">582</a></p>
<p><span id="Chapter_130__Input__Subset_and_O" class="anchor"></span><a
href="#Top_of_index_html">Chapter 130: Input, Subset and Output External
Data Files using Pandas</a> ................................. <a
href="#Top_of_index_html">584</a></p>
<p><a href="#Top_of_index_html">Section 130.1: Basic Code to Import,
Subset and Write External Data Files Using Pandas</a>
............................... <a href="#Top_of_index_html">584</a></p>
<h1
id="chapter-131-unzipping-files-................................................................................................................................-586"><a
href="#Top_of_index_html">Chapter 131: Unzipping Files</a>
................................................................................................................................
<a href="#Top_of_index_html">586</a></h1>
<p><a href="#Top_of_index_html">Section 131.1: Using Python
ZipFile.extractall() to decompress a ZIP file</a>
............................................................ <a
href="#Top_of_index_html">586</a></p>
<p><a href="#Top_of_index_html">Section 131.2: Using Python
TarFile.extractall() to decompress a tarball</a>
........................................................... <a
href="#Top_of_index_html">586</a></p>
<h1
id="chapter-132-working-with-zip-archives-........................................................................................................-587"><a
href="#Top_of_index_html">Chapter 132: Working with ZIP archives</a>
........................................................................................................
<a href="#Top_of_index_html">587</a></h1>
<p><a href="#Top_of_index_html">Section 132.1: Examining Zipfile
Contents</a>
...............................................................................................................
<a href="#Top_of_index_html">587</a></p>
<p><a href="#Top_of_index_html">Section 132.2: Opening Zip Files
...............................................................................................................................
587</a></p>
<p><a href="#Top_of_index_html">Section 132.3: Extracting zip file
contents to a directory</a>
.......................................................................................
<a href="#Top_of_index_html">588</a></p>
<p><a href="#Top_of_index_html">Section 132.4: Creating new archives</a>
......................................................................................................................
<a href="#Top_of_index_html">588</a></p>
<h1
id="chapter-133-getting-start-with-gzip-..............................................................................................................-589"><a
href="#Top_of_index_html">Chapter 133: Getting start with GZip</a>
..............................................................................................................
<a href="#Top_of_index_html">589</a></h1>
<p><a href="#Top_of_index_html">Section 133.1: Read and write GNU zip
files</a>
............................................................................................................
<a href="#Top_of_index_html">589</a></p>
<h1
id="chapter-134-stack-...................................................................................................................................................-590"><a
href="#Top_of_index_html">Chapter 134: Stack</a>
...................................................................................................................................................
<a href="#Top_of_index_html">590</a></h1>
<p><a href="#Top_of_index_html">Section 134.1: Creating a Stack class
with a List Object</a>
........................................................................................
<a href="#Top_of_index_html">590</a></p>
<p><a href="#Top_of_index_html">Section 134.2: Parsing Parentheses</a>
.........................................................................................................................
<a href="#Top_of_index_html">591</a></p>
<p><span id="Chapter_135__Working_around_the" class="anchor"></span><a
href="#Top_of_index_html">Chapter 135: Working around the Global
Interpreter Lock (GIL)
..................................................... 593</a></p>
<p><a href="#Top_of_index_html">Section 135.1: Multiprocessing.Pool</a>
..........................................................................................................................
<a href="#Top_of_index_html">593</a></p>
<p><a href="#Top_of_index_html">Section 135.2: Cython nogil:</a>
......................................................................................................................................
<a href="#Top_of_index_html">594</a></p>
<h1
id="chapter-136-deployment-.....................................................................................................................................-595"><a
href="#Top_of_index_html">Chapter 136: Deployment</a>
.....................................................................................................................................
<a href="#Top_of_index_html">595</a></h1>
<p><a href="#Top_of_index_html">Section 136.1: Uploading a Conda
Package</a>
............................................................................................................
<a href="#Top_of_index_html">595</a></p>
<h1
id="chapter-137-logging-..............................................................................................................................................-597"><a
href="#Top_of_index_html">Chapter 137: Logging</a>
..............................................................................................................................................
<a href="#Top_of_index_html">597</a></h1>
<p><a href="#Top_of_index_html">Section 137.1: Introduction to Python
Logging
........................................................................................................
597</a></p>
<p><a href="#Top_of_index_html">Section 137.2: Logging exceptions</a>
...........................................................................................................................
<a href="#Top_of_index_html">598</a></p>
<p><span id="Chapter_138__Web_Server_Gateway" class="anchor"></span><a
href="#Top_of_index_html">Chapter 138: Web Server Gateway Interface
(WSGI)
.............................................................................
601</a></p>
<p><a href="#Top_of_index_html">Section 138.1: Server Object
(Method)</a>
.....................................................................................................................
<a href="#Top_of_index_html">601</a></p>
<h1
id="chapter-139-python-server-sent-events-......................................................................................................-602"><a
href="#Top_of_index_html">Chapter 139: Python Server Sent Events</a>
......................................................................................................
<a href="#Top_of_index_html">602</a></h1>
<p><a href="#Top_of_index_html">Section 139.1: Flask SSE</a>
.............................................................................................................................................
<a href="#Top_of_index_html">602</a></p>
<p><a href="#Top_of_index_html">Section 139.2: Asyncio SSE
........................................................................................................................................
602</a></p>
<p><span id="Chapter_140__Alternatives_to_swi" class="anchor"></span><a
href="#Top_of_index_html">Chapter 140: Alternatives to switch statement
from other languages</a> ....................................... <a
href="#Top_of_index_html">604</a></p>
<p><a href="#Top_of_index_html">Section 140.1: Use what the language
oers: the if/else construct</a>
..................................................................... <a
href="#Top_of_index_html">604</a></p>
<p><a href="#Top_of_index_html">Section 140.2: Use a dict of functions
......................................................................................................................
604</a></p>
<p><a href="#Top_of_index_html">Section 140.3: Use class
introspection</a>
.....................................................................................................................
<a href="#Top_of_index_html">605</a></p>
<p><a href="#Top_of_index_html">Section 140.4: Using a context
manager</a>
................................................................................................................
<a href="#Top_of_index_html">606</a></p>
<p><span id="Chapter_141__List_destructuring" class="anchor"></span><a
href="#Top_of_index_html">Chapter 141: List destructuring (aka packing
and unpacking)</a>
......................................................... <a
href="#Top_of_index_html">607</a></p>
<p><a href="#Top_of_index_html">Section 141.1: Destructuring
assignment</a>
.................................................................................................................
<a href="#Top_of_index_html">607</a></p>
<p><a href="#Top_of_index_html">Section 141.2: Packing function
arguments</a>
............................................................................................................
<a href="#Top_of_index_html">608</a></p>
<p><a href="#Top_of_index_html">Section 141.3: Unpacking function
arguments</a>
........................................................................................................
<a href="#Top_of_index_html">610</a></p>
<h1
id="chapter-142-accessing-python-source-code-and-bytecode-..............................................................-611"><a
href="#Top_of_index_html">Chapter 142: Accessing Python source code and
bytecode</a>
.............................................................. <a
href="#Top_of_index_html">611</a></h1>
<p><a href="#Top_of_index_html">Section 142.1: Display the bytecode of a
function
..................................................................................................
611</a></p>
<p><a href="#Top_of_index_html">Section 142.2: Display the source code
of an object</a>
.............................................................................................
<a href="#Top_of_index_html">611</a></p>
<p><a href="#Top_of_index_html">Section 142.3: Exploring the code object
of a function
..........................................................................................
612</a></p>
<h1
id="chapter-143-mixins-..................................................................................................................................................-613"><a
href="#Top_of_index_html">Chapter 143: Mixins</a>
..................................................................................................................................................
<a href="#Top_of_index_html">613</a></h1>
<p><a href="#Top_of_index_html">Section 143.1: Mixin</a>
.....................................................................................................................................................
<a href="#Top_of_index_html">613</a></p>
<p><a href="#Top_of_index_html">Section 143.2: Overriding Methods in
Mixins</a>
...........................................................................................................
<a href="#Top_of_index_html">614</a></p>
<h1
id="chapter-144-attribute-access-...........................................................................................................................-615"><a
href="#Top_of_index_html">Chapter 144: Attribute Access</a>
...........................................................................................................................
<a href="#Top_of_index_html">615</a></h1>
<p><a href="#Top_of_index_html">Section 144.1: Basic Attribute Access
using the Dot Notation</a>
...............................................................................
<a href="#Top_of_index_html">615</a></p>
<p><a href="#Top_of_index_html">Section 144.2: Setters, Getters &amp;
Properties</a>
............................................................................................................
<a href="#Top_of_index_html">615</a></p>
<h1
id="chapter-145-arcpy-..................................................................................................................................................-618"><a
href="#Top_of_index_html">Chapter 145: ArcPy</a>
..................................................................................................................................................
<a href="#Top_of_index_html">618</a></h1>
<p><a href="#Top_of_index_html">Section 145.1: createDissolvedGDB to
create a file gdb on the workspace</a>
........................................................ <a
href="#Top_of_index_html">618</a></p>
<p><a href="#Top_of_index_html">Section 145.2: Printing one field's
value for all rows of feature class in file geodatabase using
Search</a></p>
<p><a href="#Top_of_index_html">Cursor</a>
.................................................................................................................................................................
<a href="#Top_of_index_html">618</a></p>
<h1
id="chapter-146-abstract-base-classes-abc-...................................................................................................-619"><a
href="#Top_of_index_html">Chapter 146: Abstract Base Classes (abc)</a>
...................................................................................................
<a href="#Top_of_index_html">619</a></h1>
<p><a href="#Top_of_index_html">Section 146.1: Setting the ABCMeta
metaclass</a>
.......................................................................................................
<a href="#Top_of_index_html">619</a></p>
<p><a href="#Top_of_index_html">Section 146.2: Why/How to use ABCMeta
and @abstractmethod</a>
......................................................................
<a href="#Top_of_index_html">619</a></p>
<h1
id="chapter-147-plugin-and-extension-classes-.................................................................................................-621"><a
href="#Top_of_index_html">Chapter 147: Plugin and Extension Classes</a>
.................................................................................................
<a href="#Top_of_index_html">621</a></h1>
<p><a href="#Top_of_index_html">Section 147.1: Mixins</a>
...................................................................................................................................................
<a href="#Top_of_index_html">621</a></p>
<p><a href="#Top_of_index_html">Section 147.2: Plugins with Customized
Classes</a>
.....................................................................................................
<a href="#Top_of_index_html">622</a></p>
<p><span id="Chapter_148__Immutable_datatypes" class="anchor"></span><a
href="#Top_of_index_html">Chapter 148: Immutable datatypes(int, float,
str, tuple and frozensets)</a> .................................. <a
href="#Top_of_index_html">624</a></p>
<p><a href="#Top_of_index_html">Section 148.1: Individual characters of
strings are not assignable</a>
.......................................................................
<a href="#Top_of_index_html">624</a></p>
<p><a href="#Top_of_index_html">Section 148.2: Tuple's individual
members aren't assignable</a>
...............................................................................
<a href="#Top_of_index_html">624</a></p>
<p><a href="#Top_of_index_html">Section 148.3: Frozenset's are immutable
and not assignable
.............................................................................
624</a></p>
<p><span id="Chapter_149__Incompatibilities_m" class="anchor"></span><a
href="#Top_of_index_html">Chapter 149: Incompatibilities moving from
Python 2 to Python 3 ................................................
625</a></p>
<p><a href="#Top_of_index_html">Section 149.1: Integer Division
...................................................................................................................................
625</a></p>
<p><a href="#Top_of_index_html">Section 149.2: Unpacking Iterables</a>
..........................................................................................................................
<a href="#Top_of_index_html">626</a></p>
<p><a href="#Top_of_index_html">Section 149.3: Strings: Bytes versus
Unicode</a>
..........................................................................................................
<a href="#Top_of_index_html">628</a></p>
<p><a href="#Top_of_index_html">Section 149.4: Print statement vs. Print
function</a>
....................................................................................................
<a href="#Top_of_index_html">630</a></p>
<p><a href="#Top_of_index_html">Section 149.5: Dierences between range
and xrange functions</a>
........................................................................
<a href="#Top_of_index_html">631</a></p>
<p><a href="#Top_of_index_html">Section 149.6: Raising and handling
Exceptions
.....................................................................................................
632</a></p>
<p><a href="#Top_of_index_html">Section 149.7: Leaked variables in list
comprehension
..........................................................................................
634</a></p>
<p><a href="#Top_of_index_html">Section 149.8: True, False and None
........................................................................................................................
635</a></p>
<p><a href="#Top_of_index_html">Section 149.9: User Input
...........................................................................................................................................
635</a></p>
<p><a href="#Top_of_index_html">Section 149.10: Comparison of dierent
types</a>
.......................................................................................................
<a href="#Top_of_index_html">636</a></p>
<p><a href="#Top_of_index_html">Section 149.11: .next() method on
iterators renamed</a>
.............................................................................................
<a href="#Top_of_index_html">636</a></p>
<p><a href="#Top_of_index_html">Section 149.12: filter(), map() and
zip() return iterators instead of sequences</a>
................................................... <a
href="#Top_of_index_html">637</a></p>
<p><a href="#Top_of_index_html">Section 149.13: Renamed modules
...........................................................................................................................
637</a></p>
<p><a href="#Top_of_index_html">Section 149.14: Removed operators
&lt;&gt; and ``, synonymous with != and repr()</a>
................................................... <a
href="#Top_of_index_html">638</a></p>
<p><a href="#Top_of_index_html">Section 149.15: long vs. int</a>
.........................................................................................................................................
<a href="#Top_of_index_html">638</a></p>
<p><a href="#Top_of_index_html">Section 149.16: All classes are
"new-style classes" in Python 3</a>
............................................................................
<a href="#Top_of_index_html">639</a></p>
<p><a href="#Top_of_index_html">Section 149.17: Reduce is no longer a
built-in</a>
.........................................................................................................
<a href="#Top_of_index_html">640</a></p>
<p><a href="#Top_of_index_html">Section 149.18: Absolute/Relative
Imports</a>
..............................................................................................................
<a href="#Top_of_index_html">640</a></p>
<p><a href="#Top_of_index_html">Section 149.19: map()</a>
................................................................................................................................................
<a href="#Top_of_index_html">642</a></p>
<p><a href="#Top_of_index_html">Section 149.20: The round() function
tie-breaking and return type</a>
.................................................................... <a
href="#Top_of_index_html">643</a></p>
<p><a href="#Top_of_index_html">Section 149.21: File I/O</a>
..............................................................................................................................................
<a href="#Top_of_index_html">644</a></p>
<p><a href="#Top_of_index_html">Section 149.22: cmp function removed in
Python 3</a>
...............................................................................................
<a href="#Top_of_index_html">644</a></p>
<p><a href="#Top_of_index_html">Section 149.23: Octal Constants</a>
...............................................................................................................................
<a href="#Top_of_index_html">645</a></p>
<p><a href="#Top_of_index_html">Section 149.24: Return value when
writing to a file object
....................................................................................
645</a></p>
<p><a href="#Top_of_index_html">Section 149.25: exec statement is a
function in Python 3
......................................................................................
645</a></p>
<p><a href="#Top_of_index_html">Section 149.26: encode/decode to hex no
longer available</a>
.................................................................................
<a href="#Top_of_index_html">646</a></p>
<p><a href="#Top_of_index_html">Section 149.27: Dictionary method
changes</a>
..........................................................................................................
<a href="#Top_of_index_html">647</a></p>
<p><a href="#Top_of_index_html">Section 149.28: Class Boolean Value</a>
.......................................................................................................................
<a href="#Top_of_index_html">647</a></p>
<p><a href="#Top_of_index_html">Section 149.29: hasattr function bug in
Python 2
...................................................................................................
648</a></p>
<h1
id="chapter-150-2to3-tool-............................................................................................................................................-650"><a
href="#Top_of_index_html">Chapter 150: 2to3 tool</a>
............................................................................................................................................
<a href="#Top_of_index_html">650</a></h1>
<p><a href="#Top_of_index_html">Section 150.1: Basic Usage</a>
........................................................................................................................................
<a href="#Top_of_index_html">650</a></p>
<h1
id="chapter-151-non-ocial-python-implementations-................................................................................-652"><a
href="#Top_of_index_html">Chapter 151: Non-ocial Python
implementations</a>
................................................................................
<a href="#Top_of_index_html">652</a></h1>
<p><a href="#Top_of_index_html">Section 151.1: IronPython</a>
...........................................................................................................................................
<a href="#Top_of_index_html">652</a></p>
<p><a href="#Top_of_index_html">Section 151.2: Jython</a>
.................................................................................................................................................
<a href="#Top_of_index_html">652</a></p>
<p><a href="#Top_of_index_html">Section 151.3: Transcrypt</a>
..........................................................................................................................................
<a href="#Top_of_index_html">653</a></p>
<h1
id="chapter-152-abstract-syntax-tree-...................................................................................................................-656"><a
href="#Top_of_index_html">Chapter 152: Abstract syntax tree</a>
...................................................................................................................
<a href="#Top_of_index_html">656</a></h1>
<p><a href="#Top_of_index_html">Section 152.1: Analyze functions in a
python script
................................................................................................
656</a></p>
<h1
id="chapter-153-unicode-and-bytes-.......................................................................................................................-658"><a
href="#Top_of_index_html">Chapter 153: Unicode and bytes</a>
.......................................................................................................................
<a href="#Top_of_index_html">658</a></h1>
<p><a href="#Top_of_index_html">Section 153.1: Encoding/decoding error
handling
..................................................................................................
658</a></p>
<p><a href="#Top_of_index_html">Section 153.2: File I/O</a>
................................................................................................................................................
<a href="#Top_of_index_html">658</a></p>
<p><a href="#Top_of_index_html">Section 153.3: Basics</a>
..................................................................................................................................................
<a href="#Top_of_index_html">659</a></p>
<h1
id="chapter-154-python-serial-communication-pyserial-.........................................................................-661"><a
href="#Top_of_index_html">Chapter 154: Python Serial Communication
(pyserial)</a>
.........................................................................
<a href="#Top_of_index_html">661</a></h1>
<p><a href="#Top_of_index_html">Section 154.1: Initialize serial
device</a>
.........................................................................................................................
<a href="#Top_of_index_html">661</a></p>
<p><a href="#Top_of_index_html">Section 154.2: Read from serial port</a>
.......................................................................................................................
<a href="#Top_of_index_html">661</a></p>
<p><a href="#Top_of_index_html">Section 154.3: Check what serial ports
are available on your machine</a>
.............................................................. <a
href="#Top_of_index_html">661</a></p>
<h1
id="chapter-155-neo4j-and-cypher-using-py2neo-.........................................................................................-664"><a
href="#Top_of_index_html">Chapter 155: Neo4j and Cypher using Py2Neo</a>
.........................................................................................
<a href="#Top_of_index_html">664</a></h1>
<p><a href="#Top_of_index_html">Section 155.1: Adding Nodes to Neo4j
Graph
..........................................................................................................
664</a></p>
<p><a href="#Top_of_index_html">Section 155.2: Importing and
Authenticating</a>
..........................................................................................................
<a href="#Top_of_index_html">664</a></p>
<p><a href="#Top_of_index_html">Section 155.3: Adding Relationships to
Neo4j Graph</a>
.............................................................................................
<a href="#Top_of_index_html">664</a></p>
<p><a href="#Top_of_index_html">Section 155.4: Query 1 : Autocomplete on
News Titles</a>
..........................................................................................
<a href="#Top_of_index_html">664</a></p>
<p><a href="#Top_of_index_html">Section 155.5: Query 2 : Get News
Articles by Location on a particular date</a>
..................................................... <a
href="#Top_of_index_html">665</a></p>
<p><a href="#Top_of_index_html">Section 155.6: Cypher Query Samples</a>
....................................................................................................................
<a href="#Top_of_index_html">665</a></p>
<p><span id="Chapter_156__Basic_Curses_with_P" class="anchor"></span><a
href="#Top_of_index_html">Chapter 156: Basic Curses with Python
..........................................................................................................
666</a></p>
<p><a href="#Top_of_index_html">Section 156.1: The wrapper() helper
function</a>
.........................................................................................................
<a href="#Top_of_index_html">666</a></p>
<p><a href="#Top_of_index_html">Section 156.2: Basic Invocation
Example</a>
................................................................................................................
<a href="#Top_of_index_html">666</a></p>
<p><span id="Chapter_157__Templates_in_python" class="anchor"></span><a
href="#Top_of_index_html">Chapter 157: Templates in python
...................................................................................................................
667</a></p>
<p><a href="#Top_of_index_html">Section 157.1: Simple data output
program using template</a>
.................................................................................
<a href="#Top_of_index_html">667</a></p>
<p><a href="#Top_of_index_html">Section 157.2: Changing delimiter</a>
............................................................................................................................
<a href="#Top_of_index_html">667</a></p>
<h1
id="chapter-158-pillow-...................................................................................................................................................-668"><a
href="#Top_of_index_html">Chapter 158: Pillow</a>
...................................................................................................................................................
<a href="#Top_of_index_html">668</a></h1>
<p><a href="#Top_of_index_html">Section 158.1: Read Image File</a>
.................................................................................................................................
<a href="#Top_of_index_html">668</a></p>
<p><a href="#Top_of_index_html">Section 158.2: Convert files to JPEG</a>
........................................................................................................................
<a href="#Top_of_index_html">668</a></p>
<h1
id="chapter-159-the-pass-statement-....................................................................................................................-669"><a
href="#Top_of_index_html">Chapter 159: The pass statement</a>
....................................................................................................................
<a href="#Top_of_index_html">669</a></h1>
<p><a href="#Top_of_index_html">Section 159.1: Ignore an exception</a>
...........................................................................................................................
<a href="#Top_of_index_html">669</a></p>
<p><a href="#Top_of_index_html">Section 159.2: Create a new Exception
that can be caught</a>
..................................................................................
<a href="#Top_of_index_html">669</a></p>
<h1
id="chapter-160-cli-subcommands-with-precise-help-output-..................................................................-671"><a
href="#Top_of_index_html">Chapter 160: CLI subcommands with precise help
output</a>
.................................................................. <a
href="#Top_of_index_html">671</a></h1>
<p><a href="#Top_of_index_html">Section 160.1: Native way (no
libraries)</a>
...................................................................................................................
<a href="#Top_of_index_html">671</a></p>
<p><a href="#Top_of_index_html">Section 160.2: argparse (default help
formatter)</a>
..................................................................................................
<a href="#Top_of_index_html">671</a></p>
<p><a href="#Top_of_index_html">Section 160.3: argparse (custom help
formatter)</a>
..................................................................................................
<a href="#Top_of_index_html">672</a></p>
<p><span id="Chapter_161__Database_Access" class="anchor"></span><a
href="#Top_of_index_html">Chapter 161: Database Access
............................................................................................................................
674</a></p>
<p><a href="#Top_of_index_html">Section 161.1: SQLite</a>
...................................................................................................................................................
<a href="#Top_of_index_html">674</a></p>
<p><a href="#Top_of_index_html">Section 161.2: Accessing MySQL database
using MySQLdb</a>
.................................................................................
<a href="#Top_of_index_html">679</a></p>
<p><a href="#Top_of_index_html">Section 161.3: Connection</a>
..........................................................................................................................................
<a href="#Top_of_index_html">680</a></p>
<p><a href="#Top_of_index_html">Section 161.4: PostgreSQL Database
access using psycopg2</a>
..............................................................................
<a href="#Top_of_index_html">681</a></p>
<p><a href="#Top_of_index_html">Section 161.5: Oracle database</a>
................................................................................................................................
<a href="#Top_of_index_html">682</a></p>
<p><a href="#Top_of_index_html">Section 161.6: Using sqlalchemy</a>
...............................................................................................................................
<a href="#Top_of_index_html">684</a></p>
<h1
id="chapter-162-connecting-python-to-sql-server-.......................................................................................-685"><a
href="#Top_of_index_html">Chapter 162: Connecting Python to SQL
Server</a>
.......................................................................................
<a href="#Top_of_index_html">685</a></h1>
<p><a href="#Top_of_index_html">Section 162.1: Connect to Server, Create
Table, Query Data</a>
................................................................................
<a href="#Top_of_index_html">685</a></p>
<h1
id="chapter-163-postgresql-......................................................................................................................................-686"><a
href="#Top_of_index_html">Chapter 163: PostgreSQL</a>
......................................................................................................................................
<a href="#Top_of_index_html">686</a></h1>
<p><a href="#Top_of_index_html">Section 163.1: Getting Started</a>
...................................................................................................................................
<a href="#Top_of_index_html">686</a></p>
<h1
id="chapter-164-python-and-excel-..........................................................................................................................-687"><a
href="#Top_of_index_html">Chapter 164: Python and Excel</a>
..........................................................................................................................
<a href="#Top_of_index_html">687</a></h1>
<p><a href="#Top_of_index_html">Section 164.1: Read the excel data using
xlrd module</a>
...........................................................................................
<a href="#Top_of_index_html">687</a></p>
<p><a href="#Top_of_index_html">Section 164.2: Format Excel files with
xlsxwriter
.....................................................................................................
687</a></p>
<p><a href="#Top_of_index_html">Section 164.3: Put list data into a
Excel's file</a>
...........................................................................................................
<a href="#Top_of_index_html">688</a></p>
<p><a href="#Top_of_index_html">Section 164.4: OpenPyXL</a>
..........................................................................................................................................
<a href="#Top_of_index_html">689</a></p>
<p><a href="#Top_of_index_html">Section 164.5: Create excel charts with
xlsxwriter</a>
..................................................................................................
<a href="#Top_of_index_html">689</a></p>
<h1
id="chapter-165-turtle-graphics-..............................................................................................................................-693"><a
href="#Top_of_index_html">Chapter 165: Turtle Graphics</a>
..............................................................................................................................
<a href="#Top_of_index_html">693</a></h1>
<p><a href="#Top_of_index_html">Section 165.1: Ninja Twist (Turtle
Graphics)</a>
............................................................................................................
<a href="#Top_of_index_html">693</a></p>
<h1
id="chapter-166-python-persistence-......................................................................................................................-694"><a
href="#Top_of_index_html">Chapter 166: Python Persistence</a>
......................................................................................................................
<a href="#Top_of_index_html">694</a></h1>
<p><a href="#Top_of_index_html">Section 166.1: Python Persistence</a>
............................................................................................................................
<a href="#Top_of_index_html">694</a></p>
<p><a href="#Top_of_index_html">Section 166.2: Function utility for save
and load</a>
....................................................................................................
<a href="#Top_of_index_html">695</a></p>
<h1
id="chapter-167-design-patterns-.............................................................................................................................-696"><a
href="#Top_of_index_html">Chapter 167: Design Patterns</a>
.............................................................................................................................
<a href="#Top_of_index_html">696</a></h1>
<p><a href="#Top_of_index_html">Section 167.1: Introduction to design
patterns and Singleton Pattern</a>
................................................................. <a
href="#Top_of_index_html">696</a></p>
<p><a href="#Top_of_index_html">Section 167.2: Strategy Pattern</a>
................................................................................................................................
<a href="#Top_of_index_html">698</a></p>
<p><a href="#Top_of_index_html">Section 167.3: Proxy</a>
...................................................................................................................................................
<a href="#Top_of_index_html">699</a></p>
<h1
id="chapter-168-hashlib-................................................................................................................................................-701"><a
href="#Top_of_index_html">Chapter 168: hashlib</a>
................................................................................................................................................
<a href="#Top_of_index_html">701</a></h1>
<p><a href="#Top_of_index_html">Section 168.1: MD5 hash of a string</a>
.........................................................................................................................
<a href="#Top_of_index_html">701</a></p>
<p><a href="#Top_of_index_html">Section 168.2: algorithm provided by
OpenSSL</a>
.....................................................................................................
<a href="#Top_of_index_html">702</a></p>
<p><span id="Chapter_169__Creating_a_Windows" class="anchor"></span><a
href="#Top_of_index_html">Chapter 169: Creating a Windows service using
Python
.......................................................................
703</a></p>
<p><a href="#Top_of_index_html">Section 169.1: A Python script that can
be run as a service</a>
..................................................................................
<a href="#Top_of_index_html">703</a></p>
<p><a href="#Top_of_index_html">Section 169.2: Running a Flask web
application as a service</a>
...............................................................................
<a href="#Top_of_index_html">704</a></p>
<p><span id="Chapter_170__Mutable_vs_Immutabl" class="anchor"></span><a
href="#Top_of_index_html">Chapter 170: Mutable vs Immutable (and
Hashable) in Python</a>
....................................................... <a
href="#Top_of_index_html">706</a></p>
<p><a href="#Top_of_index_html">Section 170.1: Mutable vs Immutable</a>
.......................................................................................................................
<a href="#Top_of_index_html">706</a></p>
<p><a href="#Top_of_index_html">Section 170.2: Mutable and Immutable as
Arguments</a>
..........................................................................................
<a href="#Top_of_index_html">708</a></p>
<h1
id="chapter-171-configparser-....................................................................................................................................-710"><a
href="#Top_of_index_html">Chapter 171: configparser</a>
....................................................................................................................................
<a href="#Top_of_index_html">710</a></h1>
<p><a href="#Top_of_index_html">Section 171.1: Creating configuration
file programmatically</a>
.................................................................................
<a href="#Top_of_index_html">710</a></p>
<p><a href="#Top_of_index_html">Section 171.2: Basic usage
.........................................................................................................................................
710</a></p>
<h1
id="chapter-172-optical-character-recognition-..............................................................................................-711"><a
href="#Top_of_index_html">Chapter 172: Optical Character Recognition</a>
..............................................................................................
<a href="#Top_of_index_html">711</a></h1>
<p><a href="#Top_of_index_html">Section 172.1: PyTesseract</a>
........................................................................................................................................
<a href="#Top_of_index_html">711</a></p>
<p><a href="#Top_of_index_html">Section 172.2: PyOCR</a>
................................................................................................................................................
<a href="#Top_of_index_html">711</a></p>
<h1
id="chapter-173-virtual-environments-..................................................................................................................-713"><a
href="#Top_of_index_html">Chapter 173: Virtual environments</a>
..................................................................................................................
<a href="#Top_of_index_html">713</a></h1>
<p><a href="#Top_of_index_html">Section 173.1: Creating and using a
virtual environment</a>
.......................................................................................
<a href="#Top_of_index_html">713</a></p>
<p><a href="#Top_of_index_html">Section 173.2: Specifying specific
python version to use in script on Unix/Linux</a>
............................................... <a
href="#Top_of_index_html">715</a></p>
<p><a href="#Top_of_index_html">Section 173.3: Creating a virtual
environment for a dierent version of python</a>
............................................... <a
href="#Top_of_index_html">715</a></p>
<p><a href="#Top_of_index_html">Section 173.4: Making virtual
environments using Anaconda</a>
..............................................................................
<a href="#Top_of_index_html">715</a></p>
<p><a href="#Top_of_index_html">Section 173.5: Managing multiple virtual
environments with virtualenvwrapper</a>
............................................... <a
href="#Top_of_index_html">716</a></p>
<p><a href="#Top_of_index_html">Section 173.6: Installing packages in a
virtual environment</a>
.................................................................................
<a href="#Top_of_index_html">717</a></p>
<p><a href="#Top_of_index_html">Section 173.7: Discovering which virtual
environment you are using</a>
.................................................................. <a
href="#Top_of_index_html">718</a></p>
<p><a href="#Top_of_index_html">Section 173.8: Checking if running
inside a virtual environment</a>
..........................................................................
<a href="#Top_of_index_html">719</a></p>
<p><a href="#Top_of_index_html">Section 173.9: Using virtualenv with
fish shell</a>
.........................................................................................................
<a href="#Top_of_index_html">719</a></p>
<p><span id="Chapter_174__Python_Virtual_Envi" class="anchor"></span><a
href="#Top_of_index_html">Chapter 174: Python Virtual Environment -
virtualenv
.........................................................................
721</a></p>
<p><a href="#Top_of_index_html">Section 174.1: Installation</a>
..........................................................................................................................................
<a href="#Top_of_index_html">721</a></p>
<p><a href="#Top_of_index_html">Section 174.2: Usage</a>
.................................................................................................................................................
<a href="#Top_of_index_html">721</a></p>
<p><a href="#Top_of_index_html">Section 174.3: Install a package in your
Virtualenv</a>
...............................................................................................
<a href="#Top_of_index_html">721</a></p>
<p><a href="#Top_of_index_html">Section 174.4: Other useful virtualenv
commands</a>
.................................................................................................
<a href="#Top_of_index_html">722</a></p>
<h1
id="chapter-175-virtual-environment-with-virtualenvwrapper-................................................................-724"><a
href="#Top_of_index_html">Chapter 175: Virtual environment with
virtualenvwrapper</a>
................................................................ <a
href="#Top_of_index_html">724</a></h1>
<p><a href="#Top_of_index_html">Section 175.1: Create virtual
environment with virtualenvwrapper</a>
......................................................................
<a href="#Top_of_index_html">724</a></p>
<p><span id="Chapter_176__Create_virtual_envi" class="anchor"></span><a
href="#Top_of_index_html">Chapter 176: Create virtual environment with
virtualenvwrapper in windows</a> ........................ <a
href="#Top_of_index_html">726</a></p>
<p><a href="#Top_of_index_html">Section 176.1: Virtual environment with
virtualenvwrapper for windows
.............................................................
726</a></p>
<h1
id="chapter-177-sys-........................................................................................................................................................-727"><a
href="#Top_of_index_html">Chapter 177: sys</a>
........................................................................................................................................................
<a href="#Top_of_index_html">727</a></h1>
<p><a href="#Top_of_index_html">Section 177.1: Command line
arguments</a>
................................................................................................................
<a href="#Top_of_index_html">727</a></p>
<p><a href="#Top_of_index_html">Section 177.2: Script name</a>
........................................................................................................................................
<a href="#Top_of_index_html">727</a></p>
<p><a href="#Top_of_index_html">Section 177.3: Standard error stream</a>
......................................................................................................................
<a href="#Top_of_index_html">727</a></p>
<p><a href="#Top_of_index_html">Section 177.4: Ending the process
prematurely and returning an exit code
....................................................... 727</a></p>
<h1
id="chapter-178-chempy---python-package-......................................................................................................-728"><a
href="#Top_of_index_html">Chapter 178: ChemPy - python package</a>
......................................................................................................
<a href="#Top_of_index_html">728</a></h1>
<p><a href="#Top_of_index_html">Section 178.1: Parsing formulae</a>
...............................................................................................................................
<a href="#Top_of_index_html">728</a></p>
<p><a href="#Top_of_index_html">Section 178.2: Balancing stoichiometry
of a chemical reaction</a>
...........................................................................
<a href="#Top_of_index_html">728</a></p>
<p><a href="#Top_of_index_html">Section 178.3: Balancing reactions</a>
..........................................................................................................................
<a href="#Top_of_index_html">728</a></p>
<p><a href="#Top_of_index_html">Section 178.4: Chemical equilibria</a>
............................................................................................................................
<a href="#Top_of_index_html">729</a></p>
<p><a href="#Top_of_index_html">Section 178.5: Ionic strength</a>
.....................................................................................................................................
<a href="#Top_of_index_html">729</a></p>
<p><a href="#Top_of_index_html">Section 178.6: Chemical kinetics (system
of ordinary dierential equations)</a>
.................................................... <a
href="#Top_of_index_html">729</a></p>
<p><span id="Chapter_179__pygame" class="anchor"></span><a
href="#Top_of_index_html">Chapter 179: pygame
..............................................................................................................................................
731</a></p>
<p><a href="#Top_of_index_html">Section 179.1: Pygame's mixer module</a>
....................................................................................................................
<a href="#Top_of_index_html">731</a></p>
<p><a href="#Top_of_index_html">Section 179.2: Installing pygame
..............................................................................................................................
732</a></p>
<h1
id="chapter-180-pyglet-.................................................................................................................................................-734"><a
href="#Top_of_index_html">Chapter 180: Pyglet</a>
.................................................................................................................................................
<a href="#Top_of_index_html">734</a></h1>
<p><a href="#Top_of_index_html">Section 180.1: Installation of Pyglet
..........................................................................................................................
734</a></p>
<p><a href="#Top_of_index_html">Section 180.2: Hello World in Pyglet</a>
........................................................................................................................
<a href="#Top_of_index_html">734</a></p>
<p><a href="#Top_of_index_html">Section 180.3: Playing Sound in Pyglet
....................................................................................................................
734</a></p>
<p><a href="#Top_of_index_html">Section 180.4: Using Pyglet for
OpenGL</a>
.................................................................................................................
<a href="#Top_of_index_html">734</a></p>
<p><a href="#Top_of_index_html">Section 180.5: Drawing Points Using
Pyglet and OpenGL</a>
.....................................................................................
<a href="#Top_of_index_html">734</a></p>
<h1
id="chapter-181-audio-....................................................................................................................................................-736"><a
href="#Top_of_index_html">Chapter 181: Audio</a>
....................................................................................................................................................
<a href="#Top_of_index_html">736</a></h1>
<p><a href="#Top_of_index_html">Section 181.1: Working with WAV
files</a>
......................................................................................................................
<a href="#Top_of_index_html">736</a></p>
<p><a href="#Top_of_index_html">Section 181.2: Convert any soundfile
with python and mpeg</a>
............................................................................
<a href="#Top_of_index_html">736</a></p>
<p><a href="#Top_of_index_html">Section 181.3: Playing Windows' beeps
....................................................................................................................
736</a></p>
<p><a href="#Top_of_index_html">Section 181.4: Audio With Pyglet</a>
..............................................................................................................................
<a href="#Top_of_index_html">737</a></p>
<h1
id="chapter-182-pyaudio-..............................................................................................................................................-738"><a
href="#Top_of_index_html">Chapter 182: pyaudio</a>
..............................................................................................................................................
<a href="#Top_of_index_html">738</a></h1>
<p><a href="#Top_of_index_html">Section 182.1: Callback Mode Audio
I/O</a>
..................................................................................................................
<a href="#Top_of_index_html">738</a></p>
<p><a href="#Top_of_index_html">Section 182.2: Blocking Mode Audio
I/O</a>
.................................................................................................................
<a href="#Top_of_index_html">739</a></p>
<h1
id="chapter-183-shelve-..................................................................................................................................................-741"><a
href="#Top_of_index_html">Chapter 183: shelve</a>
..................................................................................................................................................
<a href="#Top_of_index_html">741</a></h1>
<p><a href="#Top_of_index_html">Section 183.1: Creating a new Shelf
..........................................................................................................................
741</a></p>
<p><a href="#Top_of_index_html">Section 183.2: Sample code for
shelve</a>
....................................................................................................................
<a href="#Top_of_index_html">742</a></p>
<p><a href="#Top_of_index_html">Section 183.3: To summarize the
interface (key is a string, data is an arbitrary object):
.................................. 742</a></p>
<p><a href="#Top_of_index_html">Section 183.4: Write-back</a>
.........................................................................................................................................
<a href="#Top_of_index_html">742</a></p>
<p><span id="Chapter_184__IoT_Programming_wit" class="anchor"></span><a
href="#Top_of_index_html">Chapter 184: IoT Programming with Python and
Raspberry PI</a> .......................................................
<a href="#Top_of_index_html">744</a></p>
<p><a href="#Top_of_index_html">Section 184.1: Example - Temperature
sensor
........................................................................................................
744</a></p>
<p><span id="Chapter_185__kivy___Cross_platfo" class="anchor"></span><a
href="#Top_of_index_html">Chapter 185: kivy - Cross-platform Python
Framework for NUI Development</a> ....................... <a
href="#Top_of_index_html">748</a></p>
<p><a href="#Top_of_index_html">Section 185.1: First App</a>
..............................................................................................................................................
<a href="#Top_of_index_html">748</a></p>
<p><span id="Chapter_186__Pandas_Transform__P" class="anchor"></span><a
href="#Top_of_index_html">Chapter 186: Pandas Transform: Preform
operations on groups and concatenate the</a></p>
<p><a href="#Top_of_index_html"><strong>results</strong></a>
.............................................................................................................................................................................
<a href="#Top_of_index_html">750</a></p>
<p><a href="#Top_of_index_html">Section 186.1: Simple transform</a>
...............................................................................................................................
<a href="#Top_of_index_html">750</a></p>
<p><a href="#Top_of_index_html">Section 186.2: Multiple results per
group</a>
................................................................................................................
<a href="#Top_of_index_html">751</a></p>
<p><span id="Chapter_187__Similarities_in_syn" class="anchor"></span><a
href="#Top_of_index_html">Chapter 187: Similarities in syntax,
Dierences in meaning: Python vs. JavaScript</a> ............. <a
href="#Top_of_index_html">752</a></p>
<p><a href="#Top_of_index_html">Section 187.1: `in` with lists</a>
.........................................................................................................................................
<a href="#Top_of_index_html">752</a></p>
<h1
id="chapter-188-call-python-from-c-...................................................................................................................-753"><a
href="#Top_of_index_html">Chapter 188: Call Python from C#</a>
...................................................................................................................
<a href="#Top_of_index_html">753</a></h1>
<p><a href="#Top_of_index_html">Section 188.1: Python script to be
called by C# application</a>
..................................................................................
<a href="#Top_of_index_html">753</a></p>
<p><a href="#Top_of_index_html">Section 188.2: C# code calling Python
script</a>
..........................................................................................................
<a href="#Top_of_index_html">753</a></p>
<h1
id="chapter-189-ctypes-.................................................................................................................................................-755"><a
href="#Top_of_index_html">Chapter 189: ctypes</a>
.................................................................................................................................................
<a href="#Top_of_index_html">755</a></h1>
<p><a href="#Top_of_index_html">Section 189.1: ctypes arrays</a>
.....................................................................................................................................
<a href="#Top_of_index_html">755</a></p>
<p><a href="#Top_of_index_html">Section 189.2: Wrapping functions for
ctypes</a>
........................................................................................................
<a href="#Top_of_index_html">755</a></p>
<p><a href="#Top_of_index_html">Section 189.3: Basic usage</a>
........................................................................................................................................
<a href="#Top_of_index_html">756</a></p>
<p><a href="#Top_of_index_html">Section 189.4: Common pitfalls</a>
................................................................................................................................
<a href="#Top_of_index_html">756</a></p>
<p><a href="#Top_of_index_html">Section 189.5: Basic ctypes object</a>
...........................................................................................................................
<a href="#Top_of_index_html">757</a></p>
<p><a href="#Top_of_index_html">Section 189.6: Complex usage</a>
..................................................................................................................................
<a href="#Top_of_index_html">758</a></p>
<p><span id="Chapter_190__Writing_extensions" class="anchor"></span><a
href="#Top_of_index_html">Chapter 190: Writing extensions
........................................................................................................................
760</a></p>
<p><a href="#Top_of_index_html">Section 190.1: Hello World with C
Extension</a>
............................................................................................................
<a href="#Top_of_index_html">760</a></p>
<p><a href="#Top_of_index_html">Section 190.2: C Extension Using c++ and
Boost
....................................................................................................
760</a></p>
<p><a href="#Top_of_index_html">Section 190.3: Passing an open file to C
Extensions</a>
..............................................................................................
<a href="#Top_of_index_html">762</a></p>
<p><span id="Chapter_191__Python_Lex_Yacc" class="anchor"></span><a
href="#Top_of_index_html">Chapter 191: Python Lex-Yacc
.............................................................................................................................
763</a></p>
<p><a href="#Top_of_index_html">Section 191.1: Getting Started with
PLY</a>
....................................................................................................................
<a href="#Top_of_index_html">763</a></p>
<p><a href="#Top_of_index_html">Section 191.2: The "Hello, World!" of
PLY - A Simple Calculator</a>
............................................................................
<a href="#Top_of_index_html">763</a></p>
<p><a href="#Top_of_index_html">Section 191.3: Part 1: Tokenizing Input
with Lex
.......................................................................................................
765</a></p>
<p><a href="#Top_of_index_html">Section 191.4: Part 2: Parsing Tokenized
Input with Yacc</a>
......................................................................................
<a href="#Top_of_index_html">768</a></p>
<p><span id="Chapter_192__Unit_Testing" class="anchor"></span><a
href="#Top_of_index_html">Chapter 192: Unit Testing
......................................................................................................................................
772</a></p>
<p><a href="#Top_of_index_html">Section 192.1: Test Setup and Teardown
within a unittest.TestCase</a>
.................................................................... <a
href="#Top_of_index_html">772</a></p>
<p><a href="#Top_of_index_html">Section 192.2: Asserting on
Exceptions</a>
...................................................................................................................
<a href="#Top_of_index_html">772</a></p>
<p><a href="#Top_of_index_html">Section 192.3: Testing Exceptions</a>
............................................................................................................................
<a href="#Top_of_index_html">773</a></p>
<p><a href="#Top_of_index_html">Section 192.4: Choosing Assertions
Within Unittests</a>
.............................................................................................
<a href="#Top_of_index_html">774</a></p>
<p><a href="#Top_of_index_html">Section 192.5: Unit tests with
pytest</a>
........................................................................................................................
<a href="#Top_of_index_html">775</a></p>
<p><a href="#Top_of_index_html">Section 192.6: Mocking functions with
unittest.mock.create_autospec
...............................................................
778</a></p>
<h1
id="chapter-193-py.test-.................................................................................................................................................-780"><a
href="#Top_of_index_html">Chapter 193: py.test</a>
.................................................................................................................................................
<a href="#Top_of_index_html">780</a></h1>
<p><a href="#Top_of_index_html">Section 193.1: Setting up py.test</a>
...............................................................................................................................
<a href="#Top_of_index_html">780</a></p>
<p><a href="#Top_of_index_html">Section 193.2: Intro to Test
Fixtures</a>
.........................................................................................................................
<a href="#Top_of_index_html">780</a></p>
<p><a href="#Top_of_index_html">Section 193.3: Failing Tests</a>
.......................................................................................................................................
<a href="#Top_of_index_html">783</a></p>
<h1
id="chapter-194-profiling-.............................................................................................................................................-785"><a
href="#Top_of_index_html">Chapter 194: Profiling</a>
.............................................................................................................................................
<a href="#Top_of_index_html">785</a></h1>
<p><a href="#Top_of_index_html">Section 194.1: %%timeit and %timeit in
IPython</a>
......................................................................................................
<a href="#Top_of_index_html">785</a></p>
<p><a href="#Top_of_index_html">Section 194.2: Using cProfile (Preferred
Profiler)</a>
...................................................................................................
<a href="#Top_of_index_html">785</a></p>
<p><a href="#Top_of_index_html">Section 194.3: timeit() function</a>
.................................................................................................................................
<a href="#Top_of_index_html">785</a></p>
<p><a href="#Top_of_index_html">Section 194.4: timeit command line</a>
.........................................................................................................................
<a href="#Top_of_index_html">786</a></p>
<p><a href="#Top_of_index_html">Section 194.5: line_profiler in command
line</a>
..........................................................................................................
<a href="#Top_of_index_html">786</a></p>
<h1
id="chapter-195-python-speed-of-program-.......................................................................................................-788"><a
href="#Top_of_index_html">Chapter 195: Python speed of program</a>
.......................................................................................................
<a href="#Top_of_index_html">788</a></h1>
<p><a href="#Top_of_index_html">Section 195.1: Deque operations</a>
..............................................................................................................................
<a href="#Top_of_index_html">788</a></p>
<p><a href="#Top_of_index_html">Section 195.2: Algorithmic Notations</a>
.......................................................................................................................
<a href="#Top_of_index_html">788</a></p>
<p><a href="#Top_of_index_html">Section 195.3: Notation
..............................................................................................................................................
789</a></p>
<p><a href="#Top_of_index_html">Section 195.4: List operations</a>
...................................................................................................................................
<a href="#Top_of_index_html">790</a></p>
<p><a href="#Top_of_index_html">Section 195.5: Set operations</a>
...................................................................................................................................
<a href="#Top_of_index_html">790</a></p>
<h1
id="chapter-196-performance-optimization-.......................................................................................................-792"><a
href="#Top_of_index_html">Chapter 196: Performance optimization</a>
.......................................................................................................
<a href="#Top_of_index_html">792</a></h1>
<p><a href="#Top_of_index_html">Section 196.1: Code profiling</a>
.....................................................................................................................................
<a href="#Top_of_index_html">792</a></p>
<h1
id="chapter-197-security-and-cryptography-....................................................................................................-794"><a
href="#Top_of_index_html">Chapter 197: Security and Cryptography</a>
....................................................................................................
<a href="#Top_of_index_html">794</a></h1>
<p><a href="#Top_of_index_html">Section 197.1: Secure Password Hashing
.................................................................................................................
794</a></p>
<p><a href="#Top_of_index_html">Section 197.2: Calculating a Message
Digest</a>
.........................................................................................................
<a href="#Top_of_index_html">794</a></p>
<p><a href="#Top_of_index_html">Section 197.3: Available Hashing
Algorithms</a>
..........................................................................................................
<a href="#Top_of_index_html">794</a></p>
<p><a href="#Top_of_index_html">Section 197.4: File Hashing</a>
.......................................................................................................................................
<a href="#Top_of_index_html">795</a></p>
<p><a href="#Top_of_index_html">Section 197.5: Generating RSA signatures
using pycrypto</a>
...................................................................................
<a href="#Top_of_index_html">795</a></p>
<p><a href="#Top_of_index_html">Section 197.6: Asymmetric RSA encryption
using pycrypto</a>
.................................................................................
<a href="#Top_of_index_html">796</a></p>
<p><a href="#Top_of_index_html">Section 197.7: Symmetric encryption
using pycrypto
............................................................................................
797</a></p>
<h1
id="chapter-198-secure-shell-connection-in-python-......................................................................................-798"><a
href="#Top_of_index_html">Chapter 198: Secure Shell Connection in
Python</a>
......................................................................................
<a href="#Top_of_index_html">798</a></h1>
<p><a href="#Top_of_index_html">Section 198.1: ssh connection</a>
...................................................................................................................................
<a href="#Top_of_index_html">798</a></p>
<h1
id="chapter-199-python-anti-patterns-..................................................................................................................-799"><a
href="#Top_of_index_html">Chapter 199: Python Anti-Patterns</a>
..................................................................................................................
<a href="#Top_of_index_html">799</a></h1>
<p><a href="#Top_of_index_html">Section 199.1: Overzealous except
clause</a>
...............................................................................................................
<a href="#Top_of_index_html">799</a></p>
<p><a href="#Top_of_index_html">Section 199.2: Looking before you leap
with processor-intensive function</a>
........................................................ <a
href="#Top_of_index_html">799</a></p>
<h1
id="chapter-200-common-pitfalls-...........................................................................................................................-802"><a
href="#Top_of_index_html">Chapter 200: Common Pitfalls</a>
...........................................................................................................................
<a href="#Top_of_index_html">802</a></h1>
<p><a href="#Top_of_index_html">Section 200.1: List multiplication and
common references</a>
..................................................................................
<a href="#Top_of_index_html">802</a></p>
<p><a href="#Top_of_index_html">Section 200.2: Mutable default
argument</a>
..............................................................................................................
<a href="#Top_of_index_html">805</a></p>
<p><a href="#Top_of_index_html">Section 200.3: Changing the sequence you
are iterating over</a>
............................................................................
<a href="#Top_of_index_html">806</a></p>
<p><a href="#Top_of_index_html">Section 200.4: Integer and String
identity</a>
..............................................................................................................
<a href="#Top_of_index_html">809</a></p>
<p><a href="#Top_of_index_html">Section 200.5: Dictionaries are
unordered</a>
.............................................................................................................
<a href="#Top_of_index_html">810</a></p>
<p><a href="#Top_of_index_html">Section 200.6: Variable leaking in list
comprehensions and for loops</a>
................................................................ <a
href="#Top_of_index_html">811</a></p>
<p><a href="#Top_of_index_html">Section 200.7: Chaining of or operator
...................................................................................................................
811</a></p>
<p><a href="#Top_of_index_html">Section 200.8: sys.argv[0] is the name
of the file being executed</a>
......................................................................
<a href="#Top_of_index_html">812</a></p>
<p><a href="#Top_of_index_html">Section 200.9: Accessing int literals'
attributes</a>
......................................................................................................
<a href="#Top_of_index_html">812</a></p>
<p><a href="#Top_of_index_html">Section 200.10: Global Interpreter Lock
(GIL) and blocking threads</a>
................................................................... <a
href="#Top_of_index_html">813</a></p>
<p><a href="#Top_of_index_html">Section 200.11: Multiple return</a>
..................................................................................................................................
<a href="#Top_of_index_html">814</a></p>
<p><a href="#Top_of_index_html">Section 200.12: Pythonic JSON keys</a>
.......................................................................................................................
<a href="#Top_of_index_html">814</a></p>
<h1
id="chapter-201-hidden-features-............................................................................................................................-816"><a
href="#Top_of_index_html">Chapter 201: Hidden Features</a>
............................................................................................................................
<a href="#Top_of_index_html">816</a></h1>
<p><a href="#Top_of_index_html">Section 201.1: Operator Overloading</a>
.......................................................................................................................
<a href="#Top_of_index_html">816</a></p>
<p><a href="#Top_of_index_html"><strong>Credits</strong></a>
............................................................................................................................................................................
<a href="#Top_of_index_html">817</a></p>
<p><a href="#Top_of_index_html"><strong>You may also like</strong>
......................................................................................................................................................
831</a></p>
<p><span id="About" class="anchor"></span>About</p>
<p>Please feel free to share this PDF with anyone for free,</p>
<p>latest version of this book can be downloaded from:</p>
<p><a
href="https://goalkicker.com/PythonBook">https://GoalKicker.com/PythonBook</a></p>
<p><em>This</em> Python® Notes for Professionals <em>book is compiled
from <a href="https://archive.org/details/documentation-dump.7z">Stack
Overflow</a></em></p>
<p><a
href="https://archive.org/details/documentation-dump.7z">Documentation</a>,
the content is written by the beautiful people at Stack Overflow.</p>
<p>Text content is released under Creative Commons BY-SA, see credits at
the end</p>
<p>of this book whom contributed to the various chapters. Images may be
copyright</p>
<p>of their respective owners unless otherwise specified</p>
<p>This is an unofficial free book created for educational purposes and
is not</p>
<p>affiliated with official Python® group(s) or company(s) nor Stack
Overflow. All</p>
<p>trademarks and registered trademarks are the property of their
respective</p>
<p>company owners</p>
<p>The information presented in this book is not guaranteed to be
correct nor</p>
<p>accurate, use at your own risk</p>
<p>Please send feedback and corrections to web@petercv.com</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 1</p>
<p><span id="Chapter_1__Getting_started_with"
class="anchor"></span>Chapter 1: Getting started with Python</p>
<p>Language</p>
<p>Python 3.x</p>
<p>Version Release Date</p>
<p><a
href="https://www.python.org/downloads/release/python-383rc1/">3.8</a>
2020-04-29</p>
<p><a
href="https://www.python.org/downloads/release/python-370/">3.7</a>
2018-06-27</p>
<p><a
href="https://www.python.org/downloads/release/python-360/">3.6</a>
2016-12-23</p>
<p><a
href="https://www.python.org/downloads/release/python-350/">3.5</a>
2015-09-13</p>
<p><a href="https://www.python.org/download/releases/3.4.0/">3.4</a>
2014-03-17</p>
<p><a href="https://www.python.org/download/releases/3.3.0/">3.3</a>
2012-09-29</p>
<p><a href="https://www.python.org/download/releases/3.2/">3.2</a>
2011-02-20</p>
<p><a href="https://www.python.org/download/releases/3.1/">3.1</a>
2009-06-26</p>
<p><a href="https://www.python.org/download/releases/3.0/">3.0</a>
2008-12-03</p>
<p>Python 2.x</p>
<p>Version Release Date</p>
<p><a href="https://www.python.org/download/releases/2.7/">2.7</a>
2010-07-03</p>
<p><a href="https://www.python.org/download/releases/2.6/">2.6</a>
2008-10-02</p>
<p><a href="https://www.python.org/download/releases/2.5/">2.5</a>
2006-09-19</p>
<p><a href="https://www.python.org/download/releases/2.4/">2.4</a>
2004-11-30</p>
<p><a href="https://www.python.org/download/releases/2.3/">2.3</a>
2003-07-29</p>
<p><a href="https://www.python.org/download/releases/2.2/">2.2</a>
2001-12-21</p>
<p><a href="https://www.python.org/download/releases/2.1/">2.1</a>
2001-04-15</p>
<p><a href="https://www.python.org/download/releases/2.0/">2.0</a>
2000-10-16</p>
<p>Section 1.1: Getting Started</p>
<p>Python is a widely used high-level programming language for
general-purpose programming, created by Guido van Rossum and first
released in 1991. Python features a dynamic type system and automatic
memory management</p>
<p>and supports multiple programming paradigms, including
object-oriented, imperative, functional programming, and procedural
styles. It has a large and comprehensive standard library.</p>
<p>Two major versions of Python are currently in active use:</p>
<p>Python 3.x is the current version and is under active
development.</p>
<p>Python 2.x is the legacy version and will receive only security
updates until 2020. No new features will be implemented. Note that many
projects still use Python 2, although migrating to Python 3 is getting
easier.</p>
<p>You can download and install either version of Python <a
href="https://www.python.org/downloads/">here. See Python 3 vs. Python 2
for a comparison between</a> them. In addition, some third-parties offer
re-packaged versions of Python that add commonly used libraries and</p>
<p><a href="https://www.python.org/download/alternatives/">other
features to ease setup for common use cases, such as math, data analysis
or scientific use. See the list at the</a></p>
<p><a href="https://www.python.org/download/alternatives/">official
site</a>.</p>
<p>Verify if Python is installed</p>
<p>To confirm that Python was installed correctly, you can verify that
by running the following command in your favorite terminal (If you are
using Windows OS, you need to add path of python to the environment
variable before</p>
<p>using it in command prompt):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 2</p>
<p>$ python --version</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>If you have <em>Python 3</em> installed, and it is your default
version (see <strong>Troubleshooting</strong> for more details) you
should see</p>
<p>something like this:</p>
<p>$ python --version</p>
<p>Python 3.6.0</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>If you have <em>Python 2</em> installed, and it is your default
version (see <strong>Troubleshooting</strong> for more details) you
should see something like this:</p>
<p>$ python --version</p>
<p>Python 2.7.13</p>
<p>If you have installed Python 3, but $ python --version outputs a
Python 2 version, you also have Python 2 installed. This is often the
case on MacOS, and many Linux distributions. Use $ python3 instead to
explicitly use the</p>
<p>Python 3 interpreter.</p>
<p>Hello, World in Python using IDLE</p>
<p><a href="https://docs.python.org/2/library/idle.html">IDLE is a
simple editor for Python, that comes bundled with Python.</a></p>
<p>How to create Hello, World program in IDLE</p>
<p>Open IDLE on your system of choice.</p>
<p>In older versions of Windows, it can be found at All Programs under
the Windows menu.</p>
<p>In Windows 8+, search for IDLE or find it in the apps that are
present in your system. On Unix-based (including Mac) systems you can
open it from the shell by typing $ idle</p>
<p>python_file.py.</p>
<p>It will open a shell with options along the top.</p>
<p>In the shell, there is a prompt of three right angle brackets:</p>
<p>&gt;&gt;&gt;</p>
<p>Now write the following code in the prompt:</p>
<p>&gt;&gt;&gt; <strong>print</strong>("Hello, World")</p>
<p>Hit Enter .</p>
<p>&gt;&gt;&gt; <strong>print</strong>("Hello, World")</p>
<p>Hello, World</p>
<p>Hello World Python file</p>
<p>Create a new file hello.py that contains the following line:</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>print</strong>('Hello, World')</p>
<p>Python 2.x Version ≥ 2.6</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 3</p>
<p>You can use the Python 3 <strong>print</strong> function in Python 2
with the following <strong>import</strong> statement:</p>
<p><strong>from</strong> __future__ <strong>import</strong>
print_function</p>
<p>Python 2 has a number of functionalities that can be optionally
imported from Python 3 using the __future__ module, as discussed
here.</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>If using Python 2, you may also type the line below. Note that this
is not valid in Python 3 and thus not</p>
<p>recommended because it reduces cross-version code compatibility.</p>
<p><strong>print</strong> 'Hello, World'</p>
<p>In your terminal, navigate to the directory containing the file
hello.py.</p>
<p>Type python hello.py, then hit the Enter key.</p>
<p>$ python hello.py</p>
<p>Hello, World</p>
<p>You should see Hello, World printed to the console.</p>
<p>You can also substitute hello.py with the path to your file. For
example, if you have the file in your home directory and your user is
"user" on Linux, you can type python /home/user/hello.py.</p>
<p>Launch an interactive Python shell</p>
<p>By executing (running) the python command in your terminal, you are
presented with an interactive Python shell.</p>
<p><a href="https://docs.python.org/3.6/tutorial/interpreter.html">This
is also known as the Python Interpreter</a> or a REPL (for 'Read
Evaluate Print Loop').</p>
<p>$ python</p>
<p>Python 2.7.12 (default, Jun 28 2016, 08:46:01)</p>
<p>[GCC 6.1.1 20160602] on linux</p>
<p>Type "help", "copyright", "credits" <strong>or</strong> "license"
<strong>for</strong> more information. &gt;&gt;&gt;
<strong>print</strong> 'Hello, World'</p>
<p>Hello, World</p>
<p>&gt;&gt;&gt;</p>
<p>If you want to run Python 3 from your terminal, execute the command
python3.</p>
<p>$ python3</p>
<p>Python 3.6.0 (default, Jan 13 2017, 00:00:00)</p>
<p>[GCC 6.1.1 20160602] on linux</p>
<p>Type "help", "copyright", "credits" <strong>or</strong> "license"
<strong>for</strong> more information. &gt;&gt;&gt;
<strong>print</strong>('Hello, World')</p>
<p>Hello, World</p>
<p>&gt;&gt;&gt;</p>
<p>Alternatively, start the interactive prompt and load file with python
-i .</p>
<p>In command line, run:</p>
<p>$ python -i hello.py</p>
<p>"Hello World"</p>
<p>&gt;&gt;&gt;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 4</p>
<p>There are multiple ways to close the Python shell:</p>
<p>&gt;&gt;&gt; exit()</p>
<p>or</p>
<p>&gt;&gt;&gt; quit()</p>
<p>Alternatively, CTRL + D will close the shell and put you back on your
terminal's command line.</p>
<p>If you want to cancel a command you're in the middle of typing and
get back to a clean command prompt, while</p>
<p>staying inside the Interpreter shell, use CTRL + C .</p>
<p><a href="https://www.python.org/shell/">Try an interactive Python
shell online</a>.</p>
<p>Other Online Shells</p>
<p>Various websites provide online access to Python shells.</p>
<p>Online shells may be useful for the following purposes:</p>
<p>Run a small code snippet from a machine which lacks python
installation(smartphones, tablets etc).</p>
<p>Learn or teach basic Python.</p>
<p>Solve online judge problems.</p>
<p>Examples:</p>
<p>Disclaimer: documentation author(s) are not affiliated with any
resources listed below.</p>
<p><a href="https://www.python.org/shell/">https://www.python.org/shell/
- The online Python shell hosted by the official Python website.</a></p>
<p><a href="https://ideone.com/">https://ideone.com/</a> - Widely used
on the Net to illustrate code snippet behavior.</p>
<p><a
href="https://repl.it/languages/python3">https://repl.it/languages/python3</a>
- Powerful and simple online compiler, IDE and interpreter. Code,
compile,</p>
<p>and run code in Python.</p>
<p><a
href="https://www.tutorialspoint.com/execute_python_online.php">https://www.tutorialspoint.com/execute_python_online.php
- Full-featured UNIX shell, and a user-friendly</a></p>
<p>project explorer.</p>
<p><a
href="http://rextester.com/l/python3_online_compiler">http://rextester.com/l/python3_online_compiler</a>
- Simple and easy to use IDE which shows execution time</p>
<p>Run commands as a string</p>
<p>Python can be passed arbitrary code as a string in the shell:</p>
<p>$ python -c 'print("Hello, World")'</p>
<p>Hello, World</p>
<p>This can be useful when concatenating the results of scripts together
in the shell.</p>
<p>Shells and Beyond</p>
<p><em>Package Management</em> - The PyPA recommended tool for
installing Python packages is <a
href="https://pip.pypa.io/en/stable/">PIP</a>. To install, on your</p>
<p>command line execute pip install . For instance, pip install numpy.
(Note: On windows you must add pip to your PATH environment variables.
To avoid this, use python -m pip install )</p>
<p><em>Shells</em> - So far, we have discussed different ways to run
code using Python's native interactive shell. Shells use</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 5</p>
<p><span id="Python_s_interpretive_power_for" class="anchor"></span><a
href="https://docs.python.org/3/library/idle.html">Python's interpretive
power for experimenting with code real-time. Alternative shells include
IDLE</a> - a pre-bundled</p>
<p><a href="https://ipython.org/install.html">GUI, IPython - known for
extending the interactive experience, etc.</a></p>
<p><em>Programs</em> - For long-term storage you can save content to .py
files and edit/execute them as scripts or programs</p>
<p><a
href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments">with
external tools e.g. shell, IDEs</a> <a
href="https://www.jetbrains.com/pycharm/download/">(such as
PyCharm</a><a href="https://github.com/jupyter/notebook">), Jupyter
notebooks</a>, etc. Intermediate users may use these</p>
<p>tools; however, the methods discussed here are sufficient for getting
started.</p>
<p><a href="http://www.pythontutor.com/visualize.html#mode=edit">Python
tutor allows you to step through Python code so you can visualize how
the program will flow, and helps you</a></p>
<p>to understand where your program went wrong.</p>
<p><a href="https://www.python.org/dev/peps/pep-0008/">PEP8</a> defines
guidelines for formatting Python code. Formatting code well is important
so you can quickly read what</p>
<p>the code does.</p>
<p>Section 1.2: Creating variables and assigning values</p>
<p>To create a variable in Python, all you need to do is specify the
variable name, and then assign a value to it.</p>
<p>&lt;variable <strong>name</strong>&gt; <strong>=</strong>
&lt;value&gt;</p>
<p>Python uses = to assign values to variables. There's no need to
declare a variable in advance (or to assign a data</p>
<p>type to it), assigning a value to a variable itself declares and
initializes the variable with that value. There's no way to declare a
variable without assigning it an initial value.</p>
<p># Integer</p>
<p>a = 2</p>
<p>print<strong>(a)</strong></p>
<p># Output: 2</p>
<p># Integer</p>
<p>b = 9223372036854775807</p>
<p>print<strong>(b)</strong></p>
<p># Output: 9223372036854775807</p>
<p># Floating point</p>
<p>pi = 3.14</p>
<p>print<strong>(pi)</strong></p>
<p># Output: 3.14</p>
<p># String</p>
<p>c = 'A'</p>
<p>print<strong>(c)</strong></p>
<p># Output: A</p>
<p># String</p>
<p>name = 'John Doe'</p>
<p><strong>print</strong>(name)</p>
<p># Output: John Doe</p>
<p># Boolean</p>
<p>q = True</p>
<p>print<strong>(q)</strong></p>
<p># Output: True</p>
<p># Empty value or null data type</p>
<p>x = None</p>
<p>print<strong>(x)</strong></p>
<p># Output: None</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 6</p>
<p>Variable assignment works from left to right. So the following will
give you an syntax error.</p>
<p>0 = x</p>
<p>=&gt; Output: SyntaxError: can't assign to literal</p>
<p>You can not use python's keywords as a valid variable name. You can
see the list of keyword by:</p>
<p><strong>import</strong> keyword</p>
<p><strong>print</strong>(keyword.kwlist)</p>
<p>Rules for variable naming:</p>
<p>1. Variables names must start with a letter or an underscore.</p>
<p>x = True <em># valid</em></p>
<p>_y = True <em># valid</em></p>
<p><em>9x = False</em> # starts with numeral</p>
<p>=&gt; SyntaxError: invalid syntax</p>
<p><em>$y = False</em> # starts with symbol</p>
<p>=&gt; SyntaxError: invalid syntax</p>
<p>2. The remainder of your variable name may consist of letters,
numbers and underscores.</p>
<p>has_0_in_it = "Still Valid"</p>
<p>3. Names are case sensitive.</p>
<p>x = 9</p>
<p>y = X*5</p>
<p>=&gt;NameError: name 'X' <strong>is not</strong> defined</p>
<p>Even though there's no need to specify a data type when declaring a
variable in Python, while allocating the</p>
<p>necessary area in memory for the variable, the Python interpreter
automatically picks the most suitable built-in type for it:</p>
<p>a = 2</p>
<p><strong>print</strong>(type(a))</p>
<p># Output: &lt;type 'int'&gt;</p>
<p>b = 9223372036854775807</p>
<p><strong>print</strong>(type(b))</p>
<p># Output: &lt;type 'int'&gt;</p>
<p>pi = 3.14</p>
<p><strong>print</strong>(type(pi))</p>
<p># Output: &lt;type 'float'&gt;</p>
<p>c = 'A'</p>
<p><strong>print</strong>(type(c))</p>
<p># Output: &lt;type 'str'&gt;</p>
<p>name = 'John Doe'</p>
<p><strong>print</strong>(type(name))</p>
<p># Output: &lt;type 'str'&gt;</p>
<p>q = True</p>
<p><strong>print</strong>(type(q))</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 7</p>
<p># Output: &lt;type 'bool'&gt;</p>
<p>x = None</p>
<p><strong>print</strong>(type(x))</p>
<p># Output: &lt;type 'NoneType'&gt;</p>
<p>Now you know the basics of assignment, let's get this subtlety about
assignment in python out of the way.</p>
<p>When you use = to do an assignment operation, what's on the left of =
is a <em><strong>name</strong></em> for the
<em><strong>object</strong></em> on the right. Finally,</p>
<p>what = does is assign the <em><strong>reference</strong></em> of the
object on the right to the <em><strong>name</strong></em> on the
left.</p>
<p>That is:</p>
<p><em>a_name = an_object</em> # "a_name" is now a name for the
reference to the object "an_object"</p>
<p>So, from many assignment examples above, if we pick pi = 3.14, then
pi is <strong>a</strong> name (not <strong>the</strong> name, since an
object</p>
<p>can have multiple names) for the object 3.14. If you don't understand
something below, come back to this point</p>
<p>and read this again! Also, you can take a look at <a
href="http://effbot.org/zone/python-objects.htm">this</a> for a better
understanding.</p>
<p>You can assign multiple values to multiple variables in one line.
Note that there must be the same number of</p>
<p>arguments on the right and left sides of the = operator:</p>
<p>a, b, c = 1, 2, 3</p>
<p><strong>print</strong>(a, b, c)</p>
<p># Output: 1 2 3</p>
<p>a, b, c = 1, 2</p>
<p>=&gt; Traceback (most recent call last):</p>
<p>=&gt; File "name.py", line N, <strong>in</strong></p>
<p>=&gt; a, b, c = 1, 2</p>
<p>=&gt; ValueError: need more than 2 values to unpack</p>
<p>a, b = 1, 2, 3</p>
<p>=&gt; Traceback (most recent call last):</p>
<p>=&gt; File "name.py", line N, <strong>in</strong></p>
<p>=&gt; a, b = 1, 2, 3</p>
<p>=&gt; ValueError: too many values to unpack</p>
<p>The error in last example can be obviated by assigning remaining
values to equal number of arbitrary variables.</p>
<p>This dummy variable can have any name, but it is conventional to use
the underscore (_) for assigning unwanted</p>
<p>values:</p>
<p>a, b, _ = 1, 2, 3</p>
<p><strong>print</strong>(a, b)</p>
<p># Output: 1, 2</p>
<p>Note that the number of _ and number of remaining values must be
equal. Otherwise 'too many values to unpack</p>
<p>error' is thrown as above:</p>
<p>a, b, _ = 1,2,3,4</p>
<p>=&gt;Traceback (most recent call last):</p>
<p>=&gt;File "name.py", line N, <strong>in</strong></p>
<p>=&gt;a, b, _ = 1,2,3,4</p>
<p>=&gt;ValueError: too many values to unpack (expected 3)</p>
<p>You can also assign a single value to several variables
simultaneously.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 8</p>
<p>a = b = c = 1</p>
<p><strong>print</strong>(a, b, c)</p>
<p># Output: 1 1 1</p>
<p>When using such cascading assignment, it is important to note that
all three variables a, b and c refer to the <em>same</em></p>
<p><em>object</em> in memory, an int object with the value of 1. In
other words, a, b and c are three different names given to the same int
object. Assigning a different object to one of them afterwards doesn't
change the others, just as expected:</p>
<p><em>a = b = c = 1</em> # all three names a, b and c refer to same int
object with value 1 <em><strong>print</strong>(a, b, c)</em></p>
<p># Output: 1 1 1</p>
<p><em>b = 2</em> # b now refers to another int object, one with a value
of 2 <em><strong>print</strong>(a, b, c)</em></p>
<p># Output: 1 2 1 # so output is as expected.</p>
<p>The above is also true for mutable types (like list, dict, etc.) just
as it is true for immutable types (like int, string, tuple, etc.):</p>
<p><em>x = y = [7, 8, 9]</em> # x and y refer to the same list object
just created, [7, 8, 9] <em>x = [13, 8, 9]</em> # x now refers to a
different list object just created, [13, 8, 9]
<em><strong>print</strong>(y)</em> # y still refers to the list it was
first assigned # Output: [7, 8, 9]</p>
<p>So far so good. Things are a bit different when it comes to
<em>modifying</em> the object (in contrast to <em>assigning</em> the
name to a different object, which we did above) when the cascading
assignment is used for mutable types. Take a look</p>
<p>below, and you will see it first hand:</p>
<p><em>x = y = [7, 8, 9]</em> # x and y are two different names for the
same list object just created, [7, 8, 9]</p>
<p><em>x[0] = 13</em> # we are updating the value of the list [7, 8, 9]
through one of its names, x</p>
<p>in this case</p>
<p><em><strong>print</strong>(y)</em> # printing the value of the list
using its other name # Output: [13, 8, 9] # hence, naturally the change
is reflected</p>
<p>Nested lists are also valid in python. This means that a list can
contain another list as an element.</p>
<p>x = [1, 2, [3, 4, 5], 6, 7] <em># this is nested list</em></p>
<p>print <strong>x[2]</strong></p>
<p># Output: [3, 4, 5]</p>
<p><strong>print</strong> x[2][1]</p>
<p># Output: 4</p>
<p>Lastly, variables in Python do not have to stay the same type as
which they were first defined -- you can simply use = to assign a new
value to a variable, even if that value is of a different type.</p>
<p>a = 2</p>
<p>print<strong>(a)</strong></p>
<p># Output: 2</p>
<p>a = "New value"</p>
<p>print<strong>(a)</strong></p>
<p># Output: New value</p>
<p>If this bothers you, think about the fact that what's on the left of
= is just a name for an object. First you call the int object with value
2 a, then you change your mind and decide to give the name a to a string
object, having value</p>
<p>'New value'. Simple, right?</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 9</p>
<p><span id="Section_1_3__Block_Indentation"
class="anchor"></span>Section 1.3: Block Indentation</p>
<p>Python uses indentation to define control and loop constructs. This
contributes to Python's readability, however, it</p>
<p>requires the programmer to pay close attention to the use of
whitespace. Thus, editor miscalibration could result in</p>
<p>code that behaves in unexpected ways.</p>
<p>Python uses the colon symbol (:) and indentation for showing where
blocks of code begin and end (If you come</p>
<p><a href="https://en.wikipedia.org/wiki/%3F:">from another language,
do not confuse this with somehow being related to the ternary operator).
That is, blocks in</a></p>
<p>Python, such as functions, loops, if clauses and other constructs,
have no ending identifiers. All blocks start with a</p>
<p>colon and then contain the indented lines below it.</p>
<p>For example:</p>
<p><em><strong>def</strong> my_function():</em> # This is a function
definition. Note the colon (:)</p>
<p><em>a = 2</em> # This line belongs to the function because it's
indented</p>
<p><em><strong>return</strong> a</em> # This line also belongs to the
same function</p>
<p><em><strong>print</strong>(my_function())</em> # This line is OUTSIDE
the function block</p>
<p>or</p>
<p><em><strong>if</strong> a &gt; b:</em> # If block starts here</p>
<p><em><strong>print</strong>(a)</em> # This is part of the if block</p>
<p><em><strong>else</strong>:</em> # else must be at the same level as
if</p>
<p><em><strong>print</strong>(b)</em> # This line is part of the else
block</p>
<p>Blocks that contain exactly one single-line statement may be put on
the same line, though this form is generally not</p>
<p>considered good style:</p>
<p><strong>if</strong> a &gt; b: <strong>print</strong>(a)</p>
<p>else<strong>:</strong> print<strong>(b)</strong></p>
<p>Attempting to do this with more than a single statement will
<em>not</em> work:</p>
<p><strong>if</strong> x &gt; y: y = x</p>
<p><em><strong>print</strong>(y)</em> # IndentationError: unexpected
indent</p>
<p><em><strong>if</strong> x &gt; y: <strong>while</strong> y != z: y -=
1</em> # SyntaxError: invalid syntax</p>
<p>An empty block causes an IndentationError. Use <strong>pass</strong>
(a command that does nothing) when you have a block with no content:</p>
<p><strong>def</strong> will_be_implemented_later():</p>
<p>pass</p>
<p>Spaces vs. Tabs</p>
<p>In short: <strong>always</strong> use 4 spaces for indentation.</p>
<p><a
href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces">Using
tabs exclusively is possible but PEP 8</a>, the style guide for Python
code, states that spaces are preferred.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>Python 3 disallows mixing the use of tabs and spaces for indentation.
In such case a compile-time error is generated: Inconsistent use of tabs
<strong>and</strong> spaces <strong>in</strong> indentation and the
program will not run.</p>
<p>Python 2.x Version ≤ 2.7</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 10</p>
<p><span id="Python_2_allows_mixing_tabs_and"
class="anchor"></span>Python 2 allows mixing tabs and spaces in
indentation; this is strongly discouraged. The tab character
completes</p>
<p><a
href="https://docs.python.org/2/reference/lexical_analysis.html#indentation">the
previous indentation to be a multiple of <strong>8</strong> spaces.
Since it is common that editors are configured to show tabs</a></p>
<p>as multiple of <strong>4</strong> spaces, this can cause subtle
bugs.</p>
<p><a
href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces">Citing
PEP 8</a>:</p>
<p>When invoking the Python 2 command line interpreter with the -t
option, it issues warnings about code</p>
<p>that illegally mixes tabs and spaces. When using -tt these warnings
become errors. These options are highly recommended!</p>
<p>Many editors have "tabs to spaces" configuration. When configuring
the editor, one should differentiate between</p>
<p>the tab <em>character</em> ('\t') and the Tab key.</p>
<p>The tab <em>character</em> should be configured to show 8 spaces, to
match the language semantics - at least in cases</p>
<p>when (accidental) mixed indentation is possible. Editors can also
automatically convert the tab character to spaces.</p>
<p>However, it might be helpful to configure the editor so that pressing
the Tab key will insert 4 spaces, instead of inserting a tab
character.</p>
<p>Python source code written with a mix of tabs and spaces, or with
non-standard number of indentation spaces can</p>
<p>be made pep8-conformant using <a
href="http://stackoverflow.com/questions/2625294/how-do-i-autoformat-some-python-code-to-be-correctly-formatted">autopep8</a>.
(A less powerful alternative comes with most Python installations:</p>
<p><a
href="https://pypi.python.org/pypi/Reindent/0.1.0">reindent.py)</a></p>
<p>Section 1.4: Datatypes</p>
<p>Built-in Types</p>
<p>Booleans</p>
<p>bool: A boolean value of either True or False. Logical operations
like <strong>and</strong>, or, <strong>not</strong> can be performed on
booleans.</p>
<p><em>x <strong>or</strong> y</em> # if x is False then y otherwise
x</p>
<p><em>x <strong>and</strong> y</em> # if x is False then x otherwise
y</p>
<p><em><strong>not</strong> x</em> # if x is True then False, otherwise
True</p>
<p>In Python 2.x and in Python 3.x, a boolean is also an int. The bool
type is a subclass of the int type and True and</p>
<p>False are its only instances:</p>
<p>issubclass(bool, int) <em># True</em></p>
<p>isinstance(True, bool) <em># True</em></p>
<p>isinstance(False, bool) <em># True</em></p>
<p>If boolean values are used in arithmetic operations, their integer
values (1 and 0 for True and False) will be used to</p>
<p>return an integer result:</p>
<p>True + False == 1 <em># 1 + 0 == 1</em></p>
<p>True * True == 1 <em># 1 * 1 == 1</em></p>
<p>Numbers</p>
<p>int: Integer number</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 11</p>
<p>a = 2</p>
<p>b = 100</p>
<p>c = 123456789</p>
<p>d = 38563846326424324</p>
<p>Integers in Python are of arbitrary sizes.</p>
<p>Note: in older versions of Python, a long type was available and this
was distinct from int. The two have</p>
<p>been unified.</p>
<p>float : Floating point number; precision depends on the
implementation and system architecture, for CPython the float datatype
corresponds to a C double.</p>
<p>a = 2.0</p>
<p>b = 100.e0</p>
<p>c = 123456789.e1</p>
<p>complex : Complex numbers</p>
<p>a = 2 + 1j</p>
<p>b = 100 + 10j</p>
<p>The &lt;, &lt;=, &gt; and &gt;= operators will raise a TypeError
exception when any operand is a complex number.</p>
<p>Strings</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>str: a <strong>unicode string</strong>. The type of 'hello'</p>
<p>bytes : a <strong>byte string</strong>. The type of b'hello'</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>str: a <strong>byte string</strong>. The type of 'hello'</p>
<p>bytes : synonym for str</p>
<p>unicode : a <strong>unicode string</strong>. The type of u'hello'</p>
<p>Sequences and collections</p>
<p>Python differentiates between ordered sequences and unordered
collections (such as set and dict).</p>
<p>strings (str, bytes, unicode) are sequences</p>
<p>reversed : A reversed order of str with reversed function</p>
<p>a = reversed('hello')</p>
<p>tuple : An ordered collection of n values of any type (n &gt;=
0).</p>
<p>a = (1, 2, 3)</p>
<p>b = ('a', 1, 'python', (1, 2))</p>
<p>b[2] = 'something else' <em># returns a TypeError</em></p>
<p>Supports indexing; immutable; hashable if all its members are
hashable</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 12</p>
<p>list: An ordered collection of n values (n &gt;= 0)</p>
<p>a = [1, 2, 3]</p>
<p>b = ['a', 1, 'python', (1, 2), [1, 2]]</p>
<p>b[2] = 'something else' <em># allowed</em></p>
<p>Not hashable; mutable.</p>
<p>set: An unordered collection of unique values. Items must be <a
href="https://docs.python.org/3.5/glossary.html">hashable.</a></p>
<p>a = {1, 2, 'a'}</p>
<p>dict<a href="https://docs.python.org/3.5/glossary.html">: An
unordered collection of unique key-value pairs; keys must be
hashable.</a></p>
<p>a = {1: 'one',</p>
<p>2: 'two'}</p>
<p>b = {'a': [1, 2, 3],</p>
<p>'b': 'a string'}</p>
<p>An object is hashable if it has a hash value which never changes
during its lifetime (it needs a __hash__() method), and can be compared
to other objects (it needs an __eq__() method). Hashable objects
which</p>
<p>compare equality must have the same hash value.</p>
<p>Built-in constants</p>
<p>In conjunction with the built-in datatypes there are a small number
of built-in constants in the built-in namespace:</p>
<p>True: The true value of the built-in type bool</p>
<p>False : The false value of the built-in type bool</p>
<p>None: A singleton object used to signal that a value is absent.
Ellipsis or ...: used in core Python3+ anywhere and limited usage in
Python2.7+ as part of array notation.</p>
<p>numpy and related packages use this as a 'include everything'
reference in arrays. NotImplemented: a singleton used to indicate to
Python that a special method doesn't support the specific</p>
<p>arguments, and Python will try alternatives if available.</p>
<p><em>a = None</em> # No value will be assigned. Any valid datatype can
be assigned later</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>None doesn't have any natural ordering. Using ordering comparison
operators (&lt;, &lt;=, &gt;=, &gt;) isn't supported anymore and will
raise a TypeError.</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>None is always less than any number (None &lt; -32 evaluates to
True).</p>
<p>Testing the type of variables</p>
<p>In python, we can check the datatype of an object using the built-in
function type.</p>
<p>a = '123'</p>
<p><strong>print</strong>(type(a))</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 13</p>
<p># Out: &lt;class 'str'&gt;</p>
<p>b = 123</p>
<p><strong>print</strong>(type(b))</p>
<p># Out: &lt;class 'int'&gt;</p>
<p>In conditional statements it is possible to test the datatype with
isinstance. However, it is usually not encouraged</p>
<p>to rely on the type of the variable.</p>
<p>i = 7</p>
<p><strong>if</strong> isinstance(i, int):</p>
<p>i += 1</p>
<p><strong>elif</strong> isinstance(i, str):</p>
<p>i = int(i)</p>
<p>i += 1</p>
<p>For information on the differences between type() and isinstance()
read: <a
href="https://stackoverflow.com/questions/1549801/differences-between-isinstance-and-type-in-python">Differences
between isinstance and</a></p>
<p><a
href="https://stackoverflow.com/questions/1549801/differences-between-isinstance-and-type-in-python">type
in Python</a></p>
<p>To test if something is of NoneType:</p>
<p>x = None</p>
<p><strong>if</strong> x <strong>is</strong> None:</p>
<p><strong>print</strong>('Not a surprise, I just defined x as
None.')</p>
<p>Converting between datatypes</p>
<p>You can perform explicit datatype conversion.</p>
<p>For example, '123' is of str type and it can be converted to integer
using int function.</p>
<p>a = '123'</p>
<p>b = int(a)</p>
<p>Converting from a float string such as '123.456' can be done using
float function.</p>
<p>a = '123.456'</p>
<p>b = float(a)</p>
<p><em>c = int(a)</em> # ValueError: invalid literal for int() with base
10: '123.456' <em>d = int(b)</em> # 123</p>
<p>You can also convert sequence or collection types</p>
<p>a = 'hello'</p>
<p><em>list(a)</em> # ['h', 'e', 'l', 'l', 'o']</p>
<p><em>set(a)</em> # {'o', 'e', 'l', 'h'}</p>
<p><em>tuple(a)</em> # ('h', 'e', 'l', 'l', 'o')</p>
<p>Explicit string type at definition of literals</p>
<p>With one letter labels just in front of the quotes you can tell what
type of string you want to define.</p>
<p>b'foo bar': results bytes in Python 3, str in Python 2</p>
<p>u'foo bar': results str in Python 3, unicode in Python 2</p>
<p>'foo bar' : results str</p>
<p>r'foo bar': results so called raw string, where escaping special
characters is not necessary, everything is taken verbatim as you
typed</p>
<p>normal = 'foo<strong>\n</strong>bar' <em># foo</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 14</p>
<p><span id="__bar" class="anchor"></span># bar</p>
<p>escaped = 'foo<strong>\\</strong>nbar' <em># foo\nbar</em></p>
<p>raw = r'foo<strong>\n</strong>bar' <em># foo\nbar</em></p>
<p>Mutable and Immutable Data Types</p>
<p>An object is called <em>mutable</em> if it can be changed. For
example, when you pass a list to some function, the list can be</p>
<p>changed:</p>
<p><strong>def</strong> f(m):</p>
<p><em>m.append(3)</em> # adds a number to the list. This is a
mutation.</p>
<p>x = [1, 2]</p>
<p>f(x)</p>
<p><em>x == [1, 2]</em> # False now, since an item was added to the
list</p>
<p>An object is called <em>immutable</em> if it cannot be changed in any
way. For example, integers are immutable, since there's no way to change
them:</p>
<p><strong>def</strong> bar():</p>
<p>x = (1, 2)</p>
<p>g(x)</p>
<p><em>x == (1, 2)</em> # Will always be True, since no function can
change the object (1, 2)</p>
<p>Note that <strong>variables</strong> themselves are mutable, so we
can reassign the <em>variable</em> x, but this does not change the
object</p>
<p>that x had previously pointed to. It only made x point to a new
object.</p>
<p>Data types whose instances are mutable are called <em>mutable data
types</em>, and similarly for immutable objects and</p>
<p>datatypes.</p>
<p>Examples of immutable Data Types:</p>
<p>int, long, float, complex</p>
<p>str</p>
<p>bytes</p>
<p>tuple</p>
<p>frozenset</p>
<p>Examples of mutable Data Types:</p>
<p>bytearray</p>
<p>list</p>
<p>set</p>
<p>dict</p>
<p>Section 1.5: Collection Types</p>
<p>There are a number of collection types in Python. While types such as
int and str hold a single value, collection</p>
<p>types hold multiple values.</p>
<p>Lists</p>
<p>The list type is probably the most commonly used collection type in
Python. Despite its name, a list is more like an</p>
<p>array in other languages, mostly JavaScript. In Python, a list is
merely an ordered collection of valid Python values. A</p>
<p>list can be created by enclosing values, separated by commas, in
square brackets:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 15</p>
<p>int_list = [1, 2, 3]</p>
<p>string_list = ['abc', 'defghi']</p>
<p>A list can be empty:</p>
<p>empty_list = []</p>
<p>The elements of a list are not restricted to a single data type,
which makes sense given that Python is a dynamic language:</p>
<p>mixed_list = [1, 'abc', True, 2.34, None]</p>
<p>A list can contain another list as its element:</p>
<p>nested_list = [['a', 'b', 'c'], [1, 2, 3]]</p>
<p>The elements of a list can be accessed via an <em>index</em>, or
numeric representation of their position. Lists in Python are</p>
<p><em>zero-indexed</em> meaning that the first element in the list is
at index 0, the second element is at index 1 and so on:</p>
<p>names = ['Alice', 'Bob', 'Craig', 'Diana', 'Eric']</p>
<p><strong>print</strong>(names[0]) <em># Alice</em></p>
<p><strong>print</strong>(names[2]) <em># Craig</em></p>
<p>Indices can also be negative which means counting from the end of the
list (-1 being the index of the last element).</p>
<p>So, using the list from the above example:</p>
<p><strong>print</strong>(names[-1]) <em># Eric</em></p>
<p><strong>print</strong>(names[-4]) <em># Bob</em></p>
<p>Lists are mutable, so you can change the values in a list:</p>
<p>names[0] = 'Ann'</p>
<p><strong>print</strong>(names)</p>
<p># Outputs ['Ann', 'Bob', 'Craig', 'Diana', 'Eric']</p>
<p>Besides, it is possible to add and/or remove elements from a
list:</p>
<p>Append object to end of list with L.append(object), returns None.</p>
<p>names = ['Alice', 'Bob', 'Craig', 'Diana', 'Eric']</p>
<p>names.append("Sia")</p>
<p><strong>print</strong>(names)</p>
<p># Outputs ['Alice', 'Bob', 'Craig', 'Diana', 'Eric', 'Sia']</p>
<p>Add a new element to list at a specific index. L.insert(index,
object)</p>
<p>names.insert(1, "Nikki")</p>
<p><strong>print</strong>(names)</p>
<p># Outputs ['Alice', 'Nikki', 'Bob', 'Craig', 'Diana', 'Eric',
'Sia']</p>
<p>Remove the first occurrence of a value with L.remove(value), returns
None</p>
<p>names.remove("Bob")</p>
<p><em><strong>print</strong>(names)</em> # Outputs ['Alice', 'Nikki',
'Craig', 'Diana', 'Eric', 'Sia']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 16</p>
<p>Get the index in the list of the first item whose value is x. It will
show an error if there is no such item.</p>
<p>name.index("Alice")</p>
<p>0</p>
<p>Count length of list</p>
<p>len(names)</p>
<p>6</p>
<p>count occurrence of any item in list</p>
<p>a = [1, 1, 1, 2, 3, 4]</p>
<p>a.count(1)</p>
<p>3</p>
<p>Reverse the list</p>
<p>a.reverse()</p>
<p>[4, 3, 2, 1, 1, 1]</p>
<p># or</p>
<p>a[::-1]</p>
<p>[4, 3, 2, 1, 1, 1]</p>
<p>Remove and return item at index (defaults to the last item) with
L.pop([index]), returns the item</p>
<p><em>names.pop()</em> # Outputs 'Sia'</p>
<p>You can iterate over the list elements like below:</p>
<p><strong>for</strong> element <strong>in</strong> my_list:</p>
<p><strong>print</strong> (element)</p>
<p>Tuples</p>
<p>A tuple is similar to a list except that it is fixed-length and
immutable. So the values in the tuple cannot be changed</p>
<p>nor the values be added to or removed from the tuple. Tuples are
commonly used for small collections of values</p>
<p>that will not need to change, such as an IP address and port. Tuples
are represented with parentheses instead of square brackets:</p>
<p>ip_address = ('10.20.30.40', 8080)</p>
<p>The same indexing rules for lists also apply to tuples. Tuples can
also be nested and the values can be any valid</p>
<p>Python valid.</p>
<p>A tuple with only one member must be defined (note the comma) this
way:</p>
<p>one_member_tuple = ('Only member',)</p>
<p>or</p>
<p>one_member_tuple = 'Only member', <em># No brackets</em></p>
<p>or just using tuple syntax</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 17</p>
<p>one_member_tuple = tuple(['Only member'])</p>
<p>Dictionaries</p>
<p>A dictionary in Python is a collection of key-value pairs. The
dictionary is surrounded by curly braces. Each pair is separated by a
comma and the key and value are separated by a colon. Here is an
example:</p>
<p>state_capitals = {</p>
<p>'Arkansas': 'Little Rock',</p>
<p>'Colorado': 'Denver',</p>
<p>'California': 'Sacramento',</p>
<p>'Georgia': 'Atlanta'</p>
<p>}</p>
<p>To get a value, refer to it by its key:</p>
<p>ca_capital = state_capitals['California']</p>
<p>You can also get all of the keys in a dictionary and then iterate
over them:</p>
<p><strong>for</strong> k <strong>in</strong> state_capitals.keys():</p>
<p><strong>print</strong>('{} is the capital of
{}'.format(state_capitals[k], k))</p>
<p>Dictionaries strongly resemble JSON syntax. The native json module in
the Python standard library can be used to</p>
<p>convert between JSON and dictionaries.</p>
<p>set</p>
<p>A set is a collection of elements with no repeats and without
insertion order but sorted order. They are used in</p>
<p>situations where it is only important that some things are grouped
together, and not what order they were</p>
<p>included. For large groups of data, it is much faster to check
whether or not an element is in a set than it is to do the same for a
list.</p>
<p>Defining a set is very similar to defining a dictionary:</p>
<p>first_names = {'Adam', 'Beth', 'Charlie'}</p>
<p>Or you can build a set using an existing list:</p>
<p>my_list = [1,2,3]</p>
<p>my_set = set(my_list)</p>
<p>Check membership of the set using in:</p>
<p><strong>if</strong> name <strong>in</strong> first_names:</p>
<p><strong>print</strong>(name)</p>
<p>You can iterate over a set exactly like a list, but remember: the
values will be in an arbitrary, implementation-</p>
<p>defined order.</p>
<p>defaultdict</p>
<p>A defaultdict is a dictionary with a default value for keys, so that
keys for which no value has been explicitly</p>
<p>defined can be accessed without errors. defaultdict is especially
useful when the values in the dictionary are collections (lists, dicts,
etc) in the sense that it does not need to be initialized every time
when a new key is used.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 18</p>
<p><span id="A_defaultdict_will_never_raise_a" class="anchor"></span>A
defaultdict will never raise a KeyError. Any key that does not exist
gets the default value returned.</p>
<p>For example, consider the following dictionary</p>
<p>&gt;&gt;&gt; state_capitals = {</p>
<p>'Arkansas': 'Little Rock',</p>
<p>'Colorado': 'Denver',</p>
<p>'California': 'Sacramento',</p>
<p>'Georgia': 'Atlanta'</p>
<p>}</p>
<p>If we try to access a non-existent key, python returns us an error as
follows</p>
<p>&gt;&gt;&gt; state_capitals['Alabama']</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>state_capitals['Alabama']</p>
<p>KeyError: 'Alabama'</p>
<p>Let us try with a defaultdict. It can be found in the collections
module.</p>
<p>&gt;&gt;&gt; <strong>from</strong> collections
<strong>import</strong> defaultdict</p>
<p>&gt;&gt;&gt; state_capitals = defaultdict(<strong>lambda</strong>:
'Boston')</p>
<p>What we did here is to set a default value (<strong>Boston</strong>)
in case the give key does not exist. Now populate the dict as</p>
<p>before:</p>
<p>&gt;&gt;&gt; state_capitals['Arkansas'] = 'Little Rock'</p>
<p>&gt;&gt;&gt; state_capitals['California'] = 'Sacramento'</p>
<p>&gt;&gt;&gt; state_capitals['Colorado'] = 'Denver'</p>
<p>&gt;&gt;&gt; state_capitals['Georgia'] = 'Atlanta'</p>
<p>If we try to access the dict with a non-existent key, python will
return us the default value i.e. Boston</p>
<p>&gt;&gt;&gt; state_capitals['Alabama']</p>
<p>'Boston'</p>
<p>and returns the created values for existing key just like a normal
dictionary</p>
<p>&gt;&gt;&gt; state_capitals['Arkansas']</p>
<p>'Little Rock'</p>
<p>Section 1.6: IDLE - Python GUI</p>
<p>IDLE is Python’s Integrated Development and Learning Environment and
is an alternative to the command line. As</p>
<p>the name may imply, IDLE is very useful for developing new code or
learning python. On Windows this comes with the Python interpreter, but
in other operating systems you may need to install it through your
package manager.</p>
<p>The main purposes of IDLE are:</p>
<p>Multi-window text editor with syntax highlighting, autocompletion,
and smart indent Python shell with syntax highlighting</p>
<p>Integrated debugger with stepping, persistent breakpoints, and call
stack visibility</p>
<p>Automatic indentation (useful for beginners learning about Python's
indentation)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 19</p>
<p>Saving the Python program as .py files and run them and edit them
later at any them using IDLE.</p>
<p>In IDLE, hit F5 or run Python Shell to launch an interpreter. Using
IDLE can be a better learning experience for</p>
<p>new users because code is interpreted as the user writes.</p>
<p><a
href="http://stackoverflow.com/questions/81584/what-ide-to-use-for-python">Note
that there are lots of alternatives, see for example this discussion</a>
<a href="https://wiki.python.org/moin/PythonEditors">or this
list.</a></p>
<p>Troubleshooting</p>
<p>Windows</p>
<p>If you're on Windows, the default command is python. If you receive a
"'python' is not recognized" error, the most likely cause is that
Python's location is not in your system's PATH environment variable.
This can be</p>
<p>accessed by right-clicking on 'My Computer' and selecting
'Properties' or by navigating to 'System' through 'Control Panel'. Click
on 'Advanced system settings' and then 'Environment Variables...'. Edit
the PATH variable</p>
<p>to include the directory of your Python installation, as well as the
Script folder (usually C:\Python27;C:\Python27\Scripts). This requires
administrative privileges and may require a restart.</p>
<p>When using multiple versions of Python on the same machine, a
possible solution is to rename one of the python.exe files. For example,
naming one version python27.exe would cause python27 to become the</p>
<p>Python command for that version.</p>
<p>You can also use the Python Launcher for Windows, which is available
through the installer and comes by</p>
<p>default. It allows you to select the version of Python to run by
using py -[x.y] instead of python[x.y]. You can use the latest version
of Python 2 by running scripts with py -2 and the latest version of
Python 3 by</p>
<p>running scripts with py -3.</p>
<p>Debian/Ubuntu/MacOS</p>
<p>This section assumes that the location of the python executable has
been added to the PATH environment</p>
<p>variable.</p>
<p>If you're on Debian/Ubuntu/MacOS, open the terminal and type python
for Python 2.x or python3 for Python</p>
<p>3.x.</p>
<p>Type which python to see which Python interpreter will be used.</p>
<p>Arch Linux</p>
<p>The default Python on Arch Linux (and descendants) is Python 3, so
use python or python3 for Python 3.x and python2 for Python 2.x.</p>
<p>Other systems</p>
<p>Python 3 is sometimes bound to python instead of python3. To use
Python 2 on these systems where it is</p>
<p>installed, you can use python2.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 20</p>
<p><span id="Section_1_7__User_Input" class="anchor"></span>Section 1.7:
User Input</p>
<p>Interactive input</p>
<p>To get input from the user, use the input function
(<strong>note</strong>: in Python 2.x, the function is called raw_input
instead,</p>
<p><a
href="https://docs.python.org/2/library/functions.html#input">although
Python 2.x has its own version of input that is completely
different):</a></p>
<p>Python 2.x Version ≥ 2.3</p>
<p>name = raw_input("What is your name? ")</p>
<p># Out: What is your name? _</p>
<p><strong>Security Remark</strong> Do not use input() in Python2 - the
entered text will be evaluated as if it were a</p>
<p>Python expression (equivalent to eval(input()) in Python3), which
might easily become a vulnerability.</p>
<p><a
href="https://medium.com/@GallegoDor/python-exploitation-1-input-ac10d3f4491f#.cr6w4z7q8">See
this article for further information on the risks of using this
function.</a></p>
<p>Python 3.x Version ≥ 3.0</p>
<p>name = input("What is your name? ")</p>
<p># Out: What is your name? _</p>
<p>The remainder of this example will be using Python 3 syntax.</p>
<p>The function takes a string argument, which displays it as a prompt
and returns a string. The above code provides a</p>
<p>prompt, waiting for the user to input.</p>
<p>name = input("What is your name? ")</p>
<p># Out: What is your name?</p>
<p>If the user types "Bob" and hits enter, the variable name will be
assigned to the string "Bob":</p>
<p>name = input("What is your name? ")</p>
<p># Out: What is your name? Bob</p>
<p><strong>print</strong>(name)</p>
<p># Out: Bob</p>
<p>Note that the input is always of type str, which is important if you
want the user to enter numbers. Therefore, you need to convert the str
before trying to use it as a number:</p>
<p>x = input("Write a number:")</p>
<p># Out: Write a number: 10</p>
<p>x / 2</p>
<p># Out: TypeError: unsupported operand type(s) for /: 'str' and 'int'
<em>float(x) / 2</em></p>
<p># Out: 5.0</p>
<p>NB: It's recommended to use
<strong>try</strong>/<strong>except</strong> blocks to catch exceptions
when dealing with user inputs. For instance, if</p>
<p>your code wants to cast a raw_input into an int, and what the user
writes is uncastable, it raises a ValueError.</p>
<p>Section 1.8: Built in Modules and Functions</p>
<p>A module is a file containing Python definitions and statements.
Function is a piece of code which execute some</p>
<p>logic.</p>
<p>&gt;&gt;&gt; pow(2,3) <em>#8</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 21</p>
<p>To check the built in function in python we can use dir(). If called
without an argument, return the names in the current scope. Else, return
an alphabetized list of names comprising (some of) the attribute of the
given object, and</p>
<p>of attributes reachable from it.</p>
<p>&gt;&gt;&gt; dir(__builtins__)</p>
<p>[</p>
<p>'ArithmeticError',</p>
<p>'AssertionError',</p>
<p>'AttributeError',</p>
<p>'BaseException',</p>
<p>'BufferError',</p>
<p>'BytesWarning',</p>
<p>'DeprecationWarning',</p>
<p>'EOFError',</p>
<p>'Ellipsis',</p>
<p>'EnvironmentError',</p>
<p>'Exception',</p>
<p>'False',</p>
<p>'FloatingPointError',</p>
<p>'FutureWarning',</p>
<p>'GeneratorExit',</p>
<p>'IOError',</p>
<p>'ImportError',</p>
<p>'ImportWarning',</p>
<p>'IndentationError',</p>
<p>'IndexError',</p>
<p>'KeyError',</p>
<p>'KeyboardInterrupt',</p>
<p>'LookupError',</p>
<p>'MemoryError',</p>
<p>'NameError',</p>
<p>'None',</p>
<p>'NotImplemented',</p>
<p>'NotImplementedError',</p>
<p>'OSError',</p>
<p>'OverflowError',</p>
<p>'PendingDeprecationWarning',</p>
<p>'ReferenceError',</p>
<p>'RuntimeError',</p>
<p>'RuntimeWarning',</p>
<p>'StandardError',</p>
<p>'StopIteration',</p>
<p>'SyntaxError',</p>
<p>'SyntaxWarning',</p>
<p>'SystemError',</p>
<p>'SystemExit',</p>
<p>'TabError',</p>
<p>'True',</p>
<p>'TypeError',</p>
<p>'UnboundLocalError',</p>
<p>'UnicodeDecodeError',</p>
<p>'UnicodeEncodeError',</p>
<p>'UnicodeError',</p>
<p>'UnicodeTranslateError',</p>
<p>'UnicodeWarning',</p>
<p>'UserWarning',</p>
<p>'ValueError',</p>
<p>'Warning',</p>
<p>'ZeroDivisionError',</p>
<p>'__debug__',</p>
<p>'__doc__',</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 22</p>
<p>'__import__',</p>
<p>'__name__',</p>
<p>'__package__',</p>
<p>'abs',</p>
<p>'all',</p>
<p>'any',</p>
<p>'apply',</p>
<p>'basestring',</p>
<p>'bin',</p>
<p>'bool',</p>
<p>'buffer',</p>
<p>'bytearray',</p>
<p>'bytes',</p>
<p>'callable',</p>
<p>'chr',</p>
<p>'classmethod',</p>
<p>'cmp',</p>
<p>'coerce',</p>
<p>'compile',</p>
<p>'complex',</p>
<p>'copyright',</p>
<p>'credits',</p>
<p>'delattr',</p>
<p>'dict',</p>
<p>'dir',</p>
<p>'divmod',</p>
<p>'enumerate',</p>
<p>'eval',</p>
<p>'execfile',</p>
<p>'exit',</p>
<p>'file',</p>
<p>'filter',</p>
<p>'float',</p>
<p>'format',</p>
<p>'frozenset',</p>
<p>'getattr',</p>
<p>'globals',</p>
<p>'hasattr',</p>
<p>'hash',</p>
<p>'help',</p>
<p>'hex',</p>
<p>'id',</p>
<p>'input',</p>
<p>'int',</p>
<p>'intern',</p>
<p>'isinstance',</p>
<p>'issubclass',</p>
<p>'iter',</p>
<p>'len',</p>
<p>'license',</p>
<p>'list',</p>
<p>'locals',</p>
<p>'long',</p>
<p>'map',</p>
<p>'max',</p>
<p>'memoryview',</p>
<p>'min',</p>
<p>'next',</p>
<p>'object',</p>
<p>'oct',</p>
<p>'open',</p>
<p>'ord',</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 23</p>
<p>'pow',</p>
<p>'print',</p>
<p>'property',</p>
<p>'quit',</p>
<p>'range',</p>
<p>'raw_input',</p>
<p>'reduce',</p>
<p>'reload',</p>
<p>'repr',</p>
<p>'reversed',</p>
<p>'round',</p>
<p>'set',</p>
<p>'setattr',</p>
<p>'slice',</p>
<p>'sorted',</p>
<p>'staticmethod',</p>
<p>'str',</p>
<p>'sum',</p>
<p>'super',</p>
<p>'tuple',</p>
<p>'type',</p>
<p>'unichr',</p>
<p>'unicode',</p>
<p>'vars',</p>
<p>'xrange',</p>
<p>'zip'</p>
<p>]</p>
<p>To know the functionality of any function, we can use built in
function help .</p>
<p>&gt;&gt;&gt; help(max)</p>
<p>Help on built-<strong>in</strong> function max <strong>in</strong>
module __builtin__: max(...)</p>
<p>max(iterable[, key=func]) -&gt; value</p>
<p>max(a, b, c, ...[, key=func]) -&gt; value</p>
<p>With a single iterable argument, <strong>return</strong> its largest
item.</p>
<p>With two <strong>or</strong> more arguments, <strong>return</strong>
the largest argument.</p>
<p>Built in modules contains extra functionalities. For example to get
square root of a number we need to include math module.</p>
<p>&gt;&gt;&gt; <strong>import</strong> math</p>
<p>&gt;&gt;&gt; math.sqrt(16) <em># 4.0</em></p>
<p>To know all the functions in a module we can assign the functions
list to a variable, and then print the variable.</p>
<p>&gt;&gt;&gt; <strong>import</strong> math</p>
<p>&gt;&gt;&gt; dir(math)</p>
<p>['__doc__', '__name__', '__package__', 'acos', 'acosh',</p>
<p>'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos',
'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs',
'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot',
'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf',
'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh',
'trunc']</p>
<p>it seems __doc__ is useful to provide some documentation in, say,
functions</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 24</p>
<p><span id="____math___doc" class="anchor"></span>&gt;&gt;&gt;
math.__doc__</p>
<p>'This module is always available. It provides access to
the<strong>\n</strong>mathematical functions defined by the C
standard.'</p>
<p>In addition to functions, documentation can also be provided in
modules. So, if you have a file named</p>
<p>helloWorld.py like this:</p>
<p>"""This is the module docstring."""</p>
<p><strong>def</strong> sayHello():</p>
<p>"""This is the function docstring."""</p>
<p><strong>return</strong> 'Hello World'</p>
<p>You can access its docstrings like this:</p>
<p>&gt;&gt;&gt; <strong>import</strong> helloWorld</p>
<p>&gt;&gt;&gt; helloWorld.__doc__</p>
<p>'This is the module docstring.'</p>
<p>&gt;&gt;&gt; helloWorld.sayHello.__doc__</p>
<p>'This is the function docstring.'</p>
<p>For any user defined type, its attributes, its class's attributes,
and recursively the attributes of its class's base</p>
<p>classes can be retrieved using dir()</p>
<p>&gt;&gt;&gt; <strong>class</strong> MyClassObject(object):</p>
<p>... <strong>pass</strong></p>
<p>...</p>
<p>&gt;&gt;&gt; dir(MyClassObject)</p>
<p>['__class__', '__delattr__', '__dict__', '__doc__', '__format__',
'__getattribute__', '__hash__', '__init__', '__module__', '__new__',
'__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__',
'__str__', '__subclasshook__', '__weakref__']</p>
<p>Any data type can be simply converted to string using a builtin
function called str. This function is called by default when a data type
is passed to <strong>print</strong></p>
<p>&gt;&gt;&gt; str(123) <em># "123"</em></p>
<p>Section 1.9: Creating a module</p>
<p>A module is an importable file containing definitions and
statements.</p>
<p>A module can be created by creating a .py file.</p>
<p># hello.py</p>
<p><strong>def</strong> say_hello():</p>
<p><strong>print</strong>("Hello!")</p>
<p>Functions in a module can be used by importing the module.</p>
<p>For modules that you have made, they will need to be in the same
directory as the file that you are importing them into. (However, you
can also put them into the Python lib directory with the pre-included
modules, but should be</p>
<p>avoided if possible.)</p>
<p>$ python</p>
<p>&gt;&gt;&gt; <strong>import</strong> hello</p>
<p>&gt;&gt;&gt; hello.say_hello()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 25</p>
<p><span id="____Hello" class="anchor"></span>=&gt; "Hello!"</p>
<p>Modules can be imported by other modules.</p>
<p># greet.py</p>
<p>import <strong>hello</strong></p>
<p>hello.say_hello()</p>
<p>Specific functions of a module can be imported.</p>
<p># greet.py</p>
<p><strong>from</strong> hello <strong>import</strong> say_hello</p>
<p>say_hello()</p>
<p>Modules can be aliased.</p>
<p># greet.py</p>
<p><strong>import</strong> hello <strong>as</strong> ai</p>
<p>ai.say_hello()</p>
<p>A module can be stand-alone runnable script.</p>
<p># run_hello.py</p>
<p><strong>if</strong> __name__ == '__main__':</p>
<p><strong>from</strong> hello <strong>import</strong> say_hello</p>
<p>say_hello()</p>
<p>Run it!</p>
<p>$ python run_hello.py</p>
<p>=&gt; "Hello!"</p>
<p>If the module is inside a directory and needs to be detected by
python, the directory should contain a file named __init__.py .</p>
<p>Section 1.10: Installation of Python 2.7.x and 3.x</p>
<p><strong>Note</strong>: Following instructions are written for Python
2.7 (unless specified): instructions for Python 3.x are</p>
<p>similar.</p>
<p>Windows</p>
<p>First, download the latest version of Python 2.7 from the official
Website (<a
href="https://www.python.org/downloads/)">https://www.python.org/downloads/).</a></p>
<p>Version is provided as an MSI package. To install it manually, just
double-click the file.</p>
<p>By default, Python installs to a directory:</p>
<p>C:\Python27\</p>
<p>Warning: installation does not automatically modify the PATH
environment variable.</p>
<p>Assuming that your Python installation is in C:\Python27, add this to
your PATH:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 26</p>
<p>C:\Python27\;C:\Python27\Scripts\</p>
<p>Now to check if Python installation is valid write in cmd:</p>
<p>python --version</p>
<p>Python 2.x and 3.x Side-By-Side</p>
<p>To install and use both Python 2.x and 3.x side-by-side on a Windows
machine:</p>
<p>1. Install Python 2.x using the MSI installer.</p>
<p>Ensure Python is installed for all users.</p>
<p>Optional: add Python to PATH to make Python 2.x callable from the
command-line using python.</p>
<p>2. Install Python 3.x using its respective installer.</p>
<p>Again, ensure Python is installed for all users.</p>
<p>Optional: add Python to PATH to make Python 3.x callable from the
command-line using python. This</p>
<p>may override Python 2.x PATH settings, so double-check your PATH and
ensure it's configured to your preferences.</p>
<p>Make sure to install the py launcher for all users.</p>
<p>Python 3 will install the Python launcher which can be used to launch
Python 2.x and Python 3.x interchangeably from the command-line:</p>
<p>P:\&gt;py -3</p>
<p>Python 3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32
bit (Intel)] on win32 Type "help", "copyright", "credits"
<strong>or</strong> "license" <strong>for</strong> more information.
&gt;&gt;&gt;</p>
<p>C:\&gt;py -2</p>
<p>Python 2.7.13 (v2.7.13:a06454b1afa1, Dec 17 2016, 20:42:59) [MSC
v.1500 32 Intel)] on win32 Type "help", "copyright", "credits"
<strong>or</strong> "license" <strong>for</strong> more information.
&gt;&gt;&gt;</p>
<p>To use the corresponding version of pip for a specific Python
version, use:</p>
<p>C:\&gt;py -3 -m pip -V</p>
<p>pip 9.0.1 <strong>from</strong> C:\Python36\lib\site-packages (python
3.6)</p>
<p>C:\&gt;py -2 -m pip -V</p>
<p>pip 9.0.1 <strong>from</strong> C:\Python27\lib\site-packages (python
2.7)</p>
<p>Linux</p>
<p>The latest versions of CentOS, Fedora, Red Hat Enterprise (RHEL) and
Ubuntu come with Python 2.7.</p>
<p>To install Python 2.7 on linux manually, just do the following in
terminal:</p>
<p><strong>wget</strong>--no-check-certificate
https:<strong>//</strong>www.python.org<strong>/</strong>ftp<strong>/</strong>python<strong>/</strong>2.7.X<strong>/</strong>Python-2.7.X.tgz
<strong>tar</strong>-xzf Python-2.7.X.tgz</p>
<p><strong>cd</strong> Python-2.7.X</p>
<p>.<strong>/</strong>configure</p>
<p>make</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 27</p>
<p><span id="sudo_make_install" class="anchor"></span>sudo make
install</p>
<p>Also add the path of new python in PATH environment variable. If new
python is in /root/python-2.7.X then run export PATH =
$PATH:/root/python-2.7.X</p>
<p>Now to check if Python installation is valid write in terminal:</p>
<p>python --version</p>
<p>Ubuntu (From Source)</p>
<p>If you need Python 3.6 you can install it from source as shown below
(Ubuntu 16.10 and 17.04 have 3.6 version in the universal repository).
Below steps have to be followed for Ubuntu 16.04 and lower versions:</p>
<p><strong>sudo</strong> apt <strong>install</strong> build-essential
checkinstall</p>
<p><strong>sudo</strong> apt <strong>install</strong>
libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev
libgdbm-dev libc6-dev libbz2-dev</p>
<p><strong>wget</strong>
https:<strong>//</strong>www.python.org<strong>/</strong>ftp<strong>/</strong>python<strong>/</strong>3.6.1<strong>/</strong>Python-3.6.1.tar.xz
<strong>tar</strong> xvf Python-3.6.1.tar.xz</p>
<p><strong>cd</strong> Python-3.6.1<strong>/</strong></p>
<p>.<strong>/</strong>configure --enable-optimizations</p>
<p><strong>sudo make</strong> altinstall</p>
<p>macOS</p>
<p>As we speak, macOS comes installed with Python 2.7.10, but this
version is outdated and slightly modified from the regular Python.</p>
<p>The version of Python that ships with OS X is great for learning but
it’s not good for development. The version shipped with OS X may be out
of date from the official current Python release, which is</p>
<p>considered the stable production version. (<a
href="http://docs.python-guide.org/en/latest/starting/install/osx/">source)</a></p>
<p><a href="https://brew.sh/">Install Homebrew</a>:</p>
<p><strong>/</strong>usr<strong>/</strong>bin<strong>/</strong>ruby
<strong>-</strong>e "$(curl -fsSL
https://raw.githubusercontent.com/Homebrew/install/master/install)"</p>
<p>Install Python 2.7:</p>
<p>brew install python</p>
<p>For Python 3.x, use the command brew install python3 instead.</p>
<p>Section 1.11: String function - str() and repr()</p>
<p>There are two functions that can be used to obtain a readable
representation of an object.</p>
<p>repr(x) calls x.__repr__(): a representation of x. eval will usually
convert the result of this function back to the</p>
<p>original object.</p>
<p>str(x) calls x.__str__(): a human-readable string that describes the
object. This may elide some technical detail.</p>
<p>repr()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 28</p>
<p><span id="For_many_types__this_function_ma" class="anchor"></span>For
many types, this function makes an attempt to return a string that would
yield an object with the same value when passed to eval(). Otherwise,
the representation is a string enclosed in angle brackets that contains
the name</p>
<p>of the type of the object along with additional information. This
often includes the name and address of the object.</p>
<p>str()</p>
<p>For strings, this returns the string itself. The difference between
this and repr(object) is that str(object) does</p>
<p>not always attempt to return a string that is acceptable to eval().
Rather, its goal is to return a printable or 'human</p>
<p>readable' string. If no argument is given, this returns the empty
string, ''.</p>
<p>Example 1:</p>
<p>s = """w'o"w"""</p>
<p><em>repr(s)</em> # Output: '\'w\\\'o"w\''</p>
<p><em>str(s)</em> # Output: 'w\'o"w'</p>
<p><em>eval(str(s)) == s</em> # Gives a SyntaxError</p>
<p>eval(repr(s)) == s <em># Output: True</em></p>
<p>Example 2:</p>
<p><strong>import</strong> datetime</p>
<p>today = datetime.datetime.now()</p>
<p><em>str(today)</em> # Output: '2016-09-15 06:58:46.915000'</p>
<p><em>repr(today)</em> # Output: 'datetime.datetime(2016, 9, 15, 6, 58,
46, 915000)'</p>
<p>When writing a class, you can override these methods to do whatever
you want:</p>
<p><strong>class</strong> Represent(object):</p>
<p><strong>def</strong> __init__(self, x, y):</p>
<p>self.x, self.y = x, y</p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong>
"Represent(x={},y=<strong>\"</strong>{}<strong>\"</strong>)".format(self.x,
self.y)</p>
<p><strong>def</strong> __str__(self):</p>
<p><strong>return</strong> "Representing x as {} and y as
{}".format(self.x, self.y)</p>
<p>Using the above class we can see the results:</p>
<p>r = Represent(1, "Hopper")</p>
<p><em><strong>print</strong>(r)</em> # prints __str__</p>
<p><em><strong>print</strong>(r.__repr__)</em> # prints __repr__:
'&lt;bound method Represent.__repr__ of
Represent(x=1,y="Hopper")&gt;'</p>
<p><em>rep = r.__repr__()</em> # sets the execution of __repr__ to a new
variable <em><strong>print</strong>(rep)</em> # prints
'Represent(x=1,y="Hopper")'</p>
<p>r2 = eval(rep) <em># evaluates rep</em></p>
<p><em><strong>print</strong>(r2)</em> # prints __str__ from new
object</p>
<p><em><strong>print</strong>(r2 == r)</em> # prints 'False' because
they are different objects</p>
<p>Section 1.12: Installing external modules using pip</p>
<p>pip is your friend when you need to install any package from the
plethora of choices available at the python package index (PyPI). pip is
already installed if you're using Python 2 &gt;= 2.7.9 or Python 3 &gt;=
3.4 downloaded from</p>
<p>python.org. For computers running Linux or another *nix with a native
package manager, pip must often be</p>
<p><a href="https://pip.pypa.io/en/stable/installing/">manually
installed.</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 29</p>
<p>On instances with both Python 2 and Python 3 installed, pip often
refers to Python 2 and pip3 to Python 3. Using pip will only install
packages for Python 2 and pip3 will only install packages for Python
3.</p>
<p>Finding / installing a package</p>
<p>Searching for a package is as simple as typing</p>
<p>$ pip search</p>
<p># Searches for packages whose name or summary contains
&lt;query&gt;</p>
<p><em>Installing a package is as simple as typing</em> (in a terminal /
command-prompt, not in the Python interpreter)</p>
<p><em>$ pip install [package_name]</em> # latest version of the
package</p>
<p>$ pip install [package_name]==x.x.x <em># specific version of the
package</em></p>
<p>$ pip install '[package_name]&gt;=x.x.x' <em># minimum version of the
package</em></p>
<p>where x.x.x is the version number of the package you want to
install.</p>
<p>When your server is behind proxy, you can install package by using
below command:</p>
<p>$ pip --proxy http://: install</p>
<p>Upgrading installed packages</p>
<p>When new versions of installed packages appear they are not
automatically installed to your system. To get an overview of which of
your installed packages have become outdated, run:</p>
<p>$ pip list --outdated</p>
<p>To upgrade a specific package use</p>
<p>$ pip install [package_name] --upgrade</p>
<p>Updating all outdated packages is not a standard functionality of
pip.</p>
<p>Upgrading pip</p>
<p>You can upgrade your existing pip installation by using the following
commands</p>
<p>On Linux or macOS X:</p>
<p>$ pip install -U pip</p>
<p>You may need to use sudo with pip on some Linux Systems</p>
<p>On Windows:</p>
<p>py -m pip install -U pip</p>
<p>or</p>
<p>python -m pip install -U pip</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 30</p>
<p><span id="For_more_information_regarding_p" class="anchor"></span><a
href="https://pip.pypa.io/en/stable/">For more information regarding pip
do read here.</a></p>
<p>Section 1.13: Help Utility</p>
<p>Python has several functions built into the interpreter. If you want
to get information of keywords, built-in</p>
<p>functions, modules or topics open a Python console and enter:</p>
<p>&gt;&gt;&gt; help()</p>
<p>You will receive information by entering keywords directly:</p>
<p>&gt;&gt;&gt; help(help)</p>
<p><strong>or</strong> within the utility:</p>
<p>help&gt; help</p>
<p>which will show an explanation:</p>
<p>Help on _Helper in module _sitebuiltins object:</p>
<p>class _Helper(builtins.object)</p>
<p>| Define the builtin 'help'.</p>
<p>|</p>
<p>| This is a wrapper around pydoc.help that provides a helpful message
| when 'help' is typed at the Python interactive prompt. |</p>
<p>| Calling help() at the Python prompt starts an interactive help
session. | Calling help(thing) prints help for the python object
'thing'. |</p>
<p>| Methods defined here:</p>
<p>|</p>
<p>| __call__(self, *args, **kwds)</p>
<p>|</p>
<p>| __repr__(self)</p>
<p>|</p>
<p>|
----------------------------------------------------------------------|
Data descriptors defined here:</p>
<p>|</p>
<p>| __dict__</p>
<p>| dictionary for instance variables (if defined)</p>
<p>|</p>
<p>| __weakref__</p>
<p>| list of weak references to the object (if defined)</p>
<p>You can also request subclasses of modules:</p>
<p>help(pymysql.connections)</p>
<p>You can use help to access the docstrings of the different modules
you have imported, e.g., try the following:</p>
<p>&gt;&gt;&gt; help(math)</p>
<p>and you'll get an error</p>
<p>&gt;&gt;&gt; <strong>import</strong> math</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 31</p>
<p>&gt;&gt;&gt; help(math)</p>
<p>And now you will get a list of the available methods in the module,
but only AFTER you have imported it.</p>
<p>Close the helper with quit</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 32</p>
<p><span id="Chapter_2__Python_Data_Types" class="anchor"></span>Chapter
2: Python Data Types</p>
<p>Data types are nothing but variables you use to reserve some space in
memory. Python variables do not need an</p>
<p>explicit declaration to reserve memory space. The declaration happens
automatically when you assign a value to a variable.</p>
<p>Section 2.1: String Data Type</p>
<p>String are identified as a contiguous set of characters represented
in the quotation marks. Python allows for either pairs of single or
double quotes. Strings are immutable sequence data type, i.e each time
one makes any changes</p>
<p>to a string, completely new string object is created.</p>
<p>a_str = 'Hello World'</p>
<p><em><strong>print</strong>(a_str)</em> #output will be whole string.
Hello World <em><strong>print</strong>(a_str[0])</em> #output will be
first character. H <em><strong>print</strong>(a_str[0:5])</em> #output
will be first five characters. Hello</p>
<p>Section 2.2: Set Data Types</p>
<p>Sets are unordered collections of unique objects, there are two types
of set:</p>
<p>1. Sets - They are mutable and new elements can be added once sets
are defined</p>
<p>basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
<strong>print</strong>(basket) <em># duplicates will be removed</em>
&gt; {'orange', 'banana', 'pear', 'apple'}</p>
<p>a = set('abracadabra')</p>
<p><em><strong>print</strong>(a)</em> # unique letters in a</p>
<p>&gt; {'a', 'r', 'b', 'c', 'd'}</p>
<p>a.add('z')</p>
<p>print<strong>(a)</strong></p>
<p>&gt; {'a', 'c', 'r', 'b', 'z', 'd'}</p>
<p>2. Frozen Sets - They are immutable and new elements cannot added
after its defined.</p>
<p>b = frozenset('asdfagsa')</p>
<p>print<strong>(b)</strong></p>
<p>&gt; frozenset({'f', 'g', 'd', 'a', 's'})</p>
<p>cities = frozenset(["Frankfurt", "Basel","Freiburg"])
<strong>print</strong>(cities)</p>
<p>&gt; frozenset({'Frankfurt', 'Basel', 'Freiburg'})</p>
<p>Section 2.3: Numbers data type</p>
<p>Numbers have four types in Python. Int, float, complex, and long.</p>
<p>int_num = 10 <em>#int value</em></p>
<p>float_num = 10.2 <em>#float value</em></p>
<p>complex_num = 3.14j <em>#complex value</em></p>
<p>long_num = 1234567L <em>#long value</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 33</p>
<p><span id="Section_2_4__List_Data_Type" class="anchor"></span>Section
2.4: List Data Type</p>
<p>A list contains items separated by commas and enclosed within square
brackets [].lists are almost similar to arrays</p>
<p>in C. One difference is that all the items belonging to a list can be
of different data type.</p>
<p>list = [123,'abcd',10.2,'d'] <em>#can be an array of any data type or
single data type.</em> list1 = ['hello','world']</p>
<p><em><strong>print</strong>(list)</em> #will output whole list.
[123,'abcd',10.2,'d'] <em><strong>print</strong>(list[0:2])</em> #will
output first two element of list. [123,'abcd']
<em><strong>print</strong>(list1 * 2)</em> #will gave list1 two times.
['hello','world','hello','world'] <em><strong>print</strong>(list +
list1)</em> #will gave concatenation of both the lists.
[123,'abcd',10.2,'d','hello','world']</p>
<p>Section 2.5: Dictionary Data Type</p>
<p>Dictionary consists of key-value pairs. It is enclosed by curly
braces {} and values can be assigned and accessed using square
brackets[].</p>
<p>dic={'name':'red','age':10}</p>
<p><em><strong>print</strong>(dic)</em> #will output all the key-value
pairs. {'name':'red','age':10}
<em><strong>print</strong>(dic['name'])</em> #will output only value
with 'name' key. 'red' <em><strong>print</strong>(dic.values())</em>
#will output list of values in dic. ['red',10]
<em><strong>print</strong>(dic.keys())</em> #will output list of keys.
['name','age']</p>
<p>Section 2.6: Tuple Data Type</p>
<p>Lists are enclosed in brackets [ ] and their elements and size can be
changed, while tuples are enclosed in</p>
<p>parentheses ( ) and cannot be updated. Tuples are immutable.</p>
<p>tuple = (123,'hello')</p>
<p>tuple1 = ('world')</p>
<p><em><strong>print</strong>(tuple)</em> #will output whole tuple.
(123,'hello') <em><strong>print</strong>(tuple[0])</em> #will output
first value. (123)</p>
<p><em><strong>print</strong>(tuple + tuple1)</em> #will output
(123,'hello','world') <em>tuple[1]='update'</em> #this will give you
error.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 34</p>
<p><span id="Chapter_3__Indentation" class="anchor"></span>Chapter 3:
Indentation</p>
<p>Section 3.1: Simple example</p>
<p>For Python, Guido van Rossum based the grouping of statements on
indentation. The reasons for this are explained</p>
<p><a href="https://docs.python.org/3/faq/design.html">in the first
section of the "Design and History Python FAQ". Colons,</a> :, are used
to <a
href="https://docs.python.org/3/faq/design.html#why-are-colons-required-for-the-if-while-def-class-statements">declare
an indented code block,</a></p>
<p>such as the following example:</p>
<p><strong>class</strong> ExampleClass:</p>
<p>#Every function belonging to a class must be indented equally
<em><strong>def</strong> __init__(self):</em></p>
<p>name = "example"</p>
<p><strong>def</strong> someFunction(self, a):</p>
<p>#Notice everything belonging to a function must be indented
<em><strong>if</strong> a &gt; 5:</em></p>
<p>return <strong>True</strong></p>
<p>else<strong>:</strong></p>
<p>return <strong>False</strong></p>
<p>#If a function is not indented to the same level it will not be
considers as part of the parent class <em><strong>def</strong>
separateFunction(b):</em></p>
<p><strong>for</strong> i <strong>in</strong> b:</p>
<p>#Loops are also indented and nested conditions start a new
indentation</p>
<p><strong>if</strong> i == 1:</p>
<p>return <strong>True</strong></p>
<p>return <strong>False</strong></p>
<p>separateFunction([2,3,5,6,1])</p>
<p>Spaces or Tabs?</p>
<p><a
href="https://www.python.org/dev/peps/pep-0008/#tabs-or-spaces">The
recommended indentation is 4 spaces but tabs or spaces can be used so
long as they are consistent.</a> <em><strong>Do not</strong></em></p>
<p><em><strong>mix tabs and spaces in Python</strong></em> as this will
cause an error in Python 3 and can causes errors in <a
href="http://stackoverflow.com/questions/2034517/pythons-interpretation-of-tabs-and-spaces-to-indent/25471702#25471702">Python
2</a>.</p>
<p>Section 3.2: How Indentation is Parsed</p>
<p>Whitespace is handled by the lexical analyzer before being
parsed.</p>
<p>The lexical analyzer uses a stack to store indentation levels. At the
beginning, the stack contains just the value 0, which is the leftmost
position. Whenever a nested block begins, the new indentation level is
pushed on the stack,</p>
<p>and an "INDENT" token is inserted into the token stream which is
passed to the parser. There can never be more than one "INDENT" token in
a row (IndentationError).</p>
<p>When a line is encountered with a smaller indentation level, values
are popped from the stack until a value is on top which is equal to the
new indentation level (if none is found, a syntax error occurs). For
each value popped, a</p>
<p>"DEDENT" token is generated. Obviously, there can be multiple
"DEDENT" tokens in a row.</p>
<p>The lexical analyzer skips empty lines (those containing only
whitespace and possibly comments), and will never</p>
<p>generate either "INDENT" or "DEDENT" tokens for them.</p>
<p>At the end of the source code, "DEDENT" tokens are generated for each
indentation level left on the stack, until just</p>
<p>the 0 is left.</p>
<p>For example:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 35</p>
<p><span id="if_foo" class="anchor"></span><strong>if</strong> foo:</p>
<p><strong>if</strong> bar:</p>
<p>x = 42</p>
<p>else<strong>:</strong></p>
<p>print <strong>foo</strong></p>
<p>is analyzed as:</p>
<p>&lt;if&gt; &lt;foo&gt; &lt;:&gt; <strong>[0]</strong></p>
<p>&lt;INDENT&gt; &lt;if&gt; &lt;bar&gt; &lt;:&gt; <strong>[0,
4]</strong></p>
<p><strong>&lt;INDENT&gt; &lt;x&gt;</strong> &lt;=<strong>&gt;</strong>
&lt;42<strong>&gt;</strong> [0, 4, 8]</p>
<p>&lt;DEDENT&gt; &lt;DEDENT&gt; &lt;else&gt; &lt;:&gt;
<strong>[0]</strong></p>
<p>&lt;INDENT&gt; &lt;print&gt; &lt;foo&gt; <strong>[0, 2]</strong></p>
<p>&lt;DEDENT&gt;</p>
<p>The parser than handles the "INDENT" and "DEDENT" tokens as block
delimiters.</p>
<p>Section 3.3: Indentation Errors</p>
<p>The spacing should be even and uniform throughout. Improper
indentation can cause an IndentationError or cause the program to do
something unexpected. The following example raises an
IndentationError:</p>
<p>a = 7</p>
<p><strong>if</strong> a &gt; 5:</p>
<p><strong>print</strong> "foo"</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong> "bar"</p>
<p><strong>print</strong> "done"</p>
<p>Or if the line following a colon is not indented, an IndentationError
will also be raised:</p>
<p><strong>if</strong> True:</p>
<p><strong>print</strong> "true"</p>
<p>If you add indentation where it doesn't belong, an IndentationError
will be raised:</p>
<p><strong>if</strong> True:</p>
<p>a = 6</p>
<p>b = 5</p>
<p>If you forget to un-indent functionality could be lost. In this
example None is returned instead of the expected False:</p>
<p><strong>def</strong> isEven(a):</p>
<p><strong>if</strong> a%2 ==0:</p>
<p>return <strong>True</strong></p>
<p>#this next line should be even with the if</p>
<p>return <strong>False</strong></p>
<p><strong>print</strong> isEven(7)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 36</p>
<p><span id="Chapter_4__Comments_and_Document"
class="anchor"></span>Chapter 4: Comments and Documentation</p>
<p>Section 4.1: Single line, inline and multiline comments</p>
<p>Comments are used to explain code when the basic code itself isn't
clear.</p>
<p>Python ignores comments, and so will not execute code in there, or
raise syntax errors for plain English sentences.</p>
<p>Single-line comments begin with the hash character (#) and are
terminated by the end of line.</p>
<p>Single line comment:</p>
<p># This is a single line comment in Python</p>
<p>Inline comment:</p>
<p><em><strong>print</strong>("Hello World")</em> # This line prints
"Hello World"</p>
<p>Comments spanning multiple lines have """ or ''' on either end. This
is the same as a multiline string, but</p>
<p>they can be used as comments:</p>
<p>"""</p>
<p>This type of comment spans multiple lines.</p>
<p>These are mostly used for documentation of functions, classes and
modules. """</p>
<p>Section 4.2: Programmatically accessing docstrings</p>
<p>Docstrings are - unlike regular comments - stored as an attribute of
the function they document, meaning that you can access them
programmatically.</p>
<p>An example function</p>
<p><strong>def</strong> func():</p>
<p>"""This is a function that does nothing at all"""</p>
<p>return</p>
<p>The docstring can be accessed using the __doc__ attribute:</p>
<p><strong>print</strong>(func.__doc__)</p>
<p>This is a function that does nothing at all</p>
<p>help(func)</p>
<p>Help on function func in module __main__:</p>
<p>func()</p>
<p>This is a function that does nothing at all</p>
<p>Another example function</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 37</p>
<p><span id="function___doc___is_just_the_act"
class="anchor"></span>function.__doc__ is just the actual docstring as a
string, while the help function provides general information about a
function, including the docstring. Here's a more helpful example:</p>
<p><strong>def</strong> greet(name, greeting="Hello"):</p>
<p>"""Print a greeting to the user `name`</p>
<p>Optional parameter `greeting` can change what they're greeted
with."""</p>
<p><strong>print</strong>("{} {}".format(greeting, name))</p>
<p>help(greet)</p>
<p>Help on function greet in module __main__:</p>
<p>greet(name, greeting='Hello')</p>
<p>Print a greeting to the user name</p>
<p>Optional parameter greeting can change what they're greeted with.</p>
<p>Advantages of docstrings over regular comments</p>
<p>Just putting no docstring or a regular comment in a function makes it
a lot less helpful.</p>
<p><strong>def</strong> greet(name, greeting="Hello"):</p>
<p># Print a greeting to the user `name`</p>
<p># Optional parameter `greeting` can change what they're greeted
with.</p>
<p><strong>print</strong>("{} {}".format(greeting, name))</p>
<p><strong>print</strong>(greet.__doc__)</p>
<p>None</p>
<p>help(greet)</p>
<p>Help on function greet in module <strong>main</strong>:</p>
<p>greet(name, greeting='Hello')</p>
<p>Section 4.3: Write documentation using docstrings</p>
<p>A <a href="https://www.python.org/dev/peps/pep-0257/">docstring</a>
is a multi-line comment used to document modules, classes, functions and
methods. It has to be the</p>
<p>first statement of the component it describes.</p>
<p><strong>def</strong> hello(name):</p>
<p>"""Greet someone.</p>
<p>Print a greeting ("Hello") for the person with the given name.</p>
<p>"""</p>
<p><strong>print</strong>("Hello "+name)</p>
<p><strong>class</strong> Greeter:</p>
<p>"""An object used to greet people.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 38</p>
<p>It contains multiple greeting functions for several languages</p>
<p>and times of the day.</p>
<p>"""</p>
<p>The value of the docstring can be accessed within the program and is
- for example - used by the help command.</p>
<p>Syntax conventions</p>
<p>PEP 257</p>
<p><a href="https://www.python.org/dev/peps/pep-0257/">PEP 257 defines a
syntax standard for docstring comments. It basically allows two
types:</a></p>
<p>One-line Docstrings:</p>
<p>According to PEP 257, they should be used with short and simple
functions. Everything is placed in one line, e.g:</p>
<p><strong>def</strong> hello():</p>
<p>"""Say hello to your friends."""</p>
<p><strong>print</strong>("Hello my friends!")</p>
<p>The docstring shall end with a period, the verb should be in the
imperative form.</p>
<p>Multi-line Docstrings:</p>
<p>Multi-line docstring should be used for longer, more complex
functions, modules or classes.</p>
<p><strong>def</strong> hello(name, language="en"):</p>
<p>"""Say hello to a person.</p>
<p>Arguments:</p>
<p>name: the name of the person</p>
<p>language: the language in which the person should be greeted</p>
<p>"""</p>
<p><strong>print</strong>(greeting[language]+" "+name)</p>
<p>They start with a short summary (equivalent to the content of a
one-line docstring) which can be on the same line</p>
<p>as the quotation marks or on the next line, give additional detail
and list parameters and return values.</p>
<p>Note PEP 257 defines <a
href="https://www.python.org/dev/peps/pep-0257/#multi-line-docstrings">what
information should be given</a> within a docstring, it doesn't define in
which format it</p>
<p>should be given. This was the reason for other parties and
documentation parsing tools to specify their own</p>
<p>standards for documentation, some of which are listed below and in <a
href="https://stackoverflow.com/questions/5334531/using-javadoc-for-python-documentation">this
question</a>.</p>
<p>Sphinx</p>
<p><a href="http://www.sphinx-doc.org/en/stable/">Sphinx</a> is a tool
to generate HTML based documentation for Python projects based on
docstrings. Its markup</p>
<p>language used is <a
href="http://docutils.sourceforge.net/rst.html">reStructuredText. They
define their own standards for documentation, pythonhosted.org hosts
a</a></p>
<p><a
href="https://pythonhosted.org/an_example_pypi_project/sphinx.html">very
good description of them. The Sphinx format is for example used by
the</a> <a href="https://www.jetbrains.com/pycharm/">pyCharm
IDE.</a></p>
<p>A function would be documented like this using the
Sphinx/reStructuredText format:</p>
<p><strong>def</strong> hello(name, language="en"):</p>
<p>"""Say hello to a person.</p>
<p>:param name: the name of the person</p>
<p>:type name: str</p>
<p>:param language: the language in which the person should be
greeted</p>
<p>:type language: str</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 39</p>
<p>:return: a number</p>
<p>:rtype: int</p>
<p>"""</p>
<p><strong>print</strong>(greeting[language]+" "+name)</p>
<p>return <strong>4</strong></p>
<p>Google Python Style Guide</p>
<p>Google has published <a
href="https://google.github.io/styleguide/pyguide.html?showone=Comments#Comments">Google
Python Style Guide which defines coding conventions for Python,
including</a></p>
<p>documentation comments. In comparison to the Sphinx/reST many people
say that documentation according to</p>
<p>Google's guidelines is better human-readable.</p>
<p><a
href="https://pythonhosted.org/an_example_pypi_project/sphinx.html">The
pythonhosted.org page mentioned above also provides some examples for
good documentation according to</a> the Google Style Guide.</p>
<p>Using the <a
href="https://sphinxcontrib-napoleon.readthedocs.io/en/latest/">Napoleon
plugin, Sphinx can also parse documentation in the Google Style
Guide-compliant format.</a></p>
<p>A function would be documented like this using the Google Style Guide
format:</p>
<p><strong>def</strong> hello(name, language="en"):</p>
<p>"""Say hello to a person.</p>
<p>Args:</p>
<p>name: the name of the person as string</p>
<p>language: the language code string</p>
<p>Returns:</p>
<p>A number.</p>
<p>"""</p>
<p><strong>print</strong>(greeting[language]+" "+name)</p>
<p>return <strong>4</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 40</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"><strong>VIDEO:</strong>
Complete Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Bootcamp:
Go from zero</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">to
hero in Python 3</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Learn
Python like a Professional! Start from the</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">basics
and go all the way to creating your own</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">applications
and games!</a></p>
<p><img src="media/index-66_1.jpeg" style="width:6.5in;height:3.65278in"
alt="index-66_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Python professionally, learning both Python 2 and Python
3!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Create games with Python, like Tic Tac Toe and Blackjack!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn advanced Python features, like the collections module and how to
work with timestamps!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Object Oriented Programming with classes!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand complex topics, like decorators.</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand how to use both the Jupyter Notebook and create .py
files</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Get an understanding of how to create GUIs in the Jupyter Notebook
system!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Build a complete understanding of Python from the ground up!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Watch
Today →</a></p>
<p><span id="Chapter_5__Date_and_Time" class="anchor"></span>Chapter 5:
Date and Time</p>
<p>Section 5.1: Parsing a string into a timezone aware datetime</p>
<p>object</p>
<p>Python 3.2+ has support for %z format when <a
href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior">parsing
a string into a</a> datetime object.</p>
<p>UTC offset in the form +HHMM or -HHMM (empty string if the object is
naive).</p>
<p>Python 3.x Version ≥ 3.2</p>
<p><strong>import</strong> datetime</p>
<p>dt = datetime.datetime.strptime("2016-04-15T08:27:18-0500",
"%Y-%m-%dT%H:%M:%S%z")</p>
<p><a href="https://dateutil.readthedocs.org/en/latest/">For other
versions of Python, you can use an external library such as
dateutil</a>, which makes parsing a string with timezone into a datetime
object is quick.</p>
<p><strong>import</strong> dateutil.parser</p>
<p>dt = dateutil.parser.parse("2016-04-15T08:27:18-0500")</p>
<p>The dt variable is now a datetime object with the following
value:</p>
<p>datetime.datetime(2016, 4, 15, 8, 27, 18, tzinfo=tzoffset(None,
-18000))</p>
<p>Section 5.2: Constructing timezone-aware datetimes</p>
<p>By default all datetime objects are naive. To make them
timezone-aware, you must attach a tzinfo object, which provides the UTC
offset and timezone abbreviation as a function of date and time.</p>
<p>Fixed Offset Time Zones</p>
<p>For time zones that are a fixed offset from UTC, in Python 3.2+, the
datetime module provides the timezone class, a concrete implementation
of tzinfo, which takes a timedelta and an (optional) name parameter:</p>
<p>Python 3.x Version ≥ 3.2</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime,
timedelta, timezone</p>
<p>JST = timezone(timedelta(hours=+9))</p>
<p>dt = datetime(2015, 1, 1, 12, 0, 0, tzinfo=JST)</p>
<p>print<strong>(dt)</strong></p>
<p># 2015-01-01 12:00:00+09:00</p>
<p><strong>print</strong>(dt.tzname())</p>
<p># UTC+09:00</p>
<p>dt = datetime(2015, 1, 1, 12, 0, 0,
tzinfo=timezone(timedelta(hours=9), 'JST'))
<strong>print</strong>(dt.tzname)</p>
<p># 'JST'</p>
<p>For Python versions before 3.2, it is necessary to use a third party
library, such as <a href="http://dateutil.readthedocs.io">dateutil.</a>
dateutil provides an</p>
<p>equivalent class, tzoffset, which (as of version 2.5.3) takes
arguments of the form dateutil.tz.tzoffset(tzname, offset) , where
offset is specified in seconds:</p>
<p>Python 3.x Version &lt; 3.2</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 42</p>
<p>Python 2.x Version &lt; 2.7</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime,
timedelta</p>
<p><strong>from</strong> dateutil <strong>import</strong> tz</p>
<p>JST = tz.tzoffset('JST', 9 * 3600) <em># 3600 seconds per hour</em>
dt = datetime(2015, 1, 1, 12, 0, tzinfo=JST)</p>
<p>print<strong>(dt)</strong></p>
<p># 2015-01-01 12:00:00+09:00</p>
<p><strong>print</strong>(dt.tzname)</p>
<p># 'JST'</p>
<p>Zones with daylight savings time</p>
<p>For zones with daylight savings time, python standard libraries do
not provide a standard class, so it is necessary to</p>
<p><a href="http://pytz.sourceforge.net/">use a third party library.
pytz and</a> dateutil are popular libraries providing time zone
classes.</p>
<p>In addition to static time zones, dateutil provides time zone classes
that use daylight savings time (see <a
href="http://dateutil.readthedocs.io/en/stable/tz.html">the</a></p>
<p><a
href="http://dateutil.readthedocs.io/en/stable/tz.html">documentation
for the tz module</a>). You can use the tz.gettz() method to get a time
zone object, which can then</p>
<p>be passed directly to the datetime constructor:</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p><strong>from</strong> dateutil <strong>import</strong> tz</p>
<p>local = tz.gettz() <em># Local time</em></p>
<p>PT = tz.gettz('US/Pacific') <em># Pacific time</em></p>
<p>dt_l = datetime(2015, 1, 1, 12, tzinfo=local) <em># I am in EST</em>
dt_pst = datetime(2015, 1, 1, 12, tzinfo=PT)</p>
<p>dt_pdt = datetime(2015, 7, 1, 12, tzinfo=PT) <em># DST is handled
automatically</em> <strong>print</strong>(dt_l)</p>
<p># 2015-01-01 12:00:00-05:00</p>
<p><strong>print</strong>(dt_pst)</p>
<p># 2015-01-01 12:00:00-08:00</p>
<p><strong>print</strong>(dt_pdt)</p>
<p># 2015-07-01 12:00:00-07:00</p>
<p><strong>CAUTION</strong>: As of version 2.5.3, dateutil does not
handle ambiguous datetimes correctly, and will always default to</p>
<p>the <em>later</em> date. There is no way to construct an object with
a dateutil timezone representing, for example</p>
<p>2015-11-01 1:30 EDT-4, since this is <em>during</em> a daylight
savings time transition.</p>
<p>All edge cases are handled properly when using pytz, but pytz time
zones should <em>not</em> be directly attached to time</p>
<p>zones through the constructor. Instead, a pytz time zone should be
attached using the time zone's localize method:</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime,
timedelta</p>
<p>import <strong>pytz</strong></p>
<p>PT = pytz.timezone('US/Pacific')</p>
<p>dt_pst = PT.localize(datetime(2015, 1, 1, 12))</p>
<p>dt_pdt = PT.localize(datetime(2015, 11, 1, 0, 30))</p>
<p><strong>print</strong>(dt_pst)</p>
<p># 2015-01-01 12:00:00-08:00</p>
<p><strong>print</strong>(dt_pdt)</p>
<p># 2015-11-01 00:30:00-07:00</p>
<p>Be aware that if you perform datetime arithmetic on a pytz-aware time
zone, you must either perform the</p>
<p>calculations in UTC (if you want absolute elapsed time), or you must
call normalize() on the result:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 43</p>
<p><span id="dt_new___dt_pdt___timedelta_hour"
class="anchor"></span>dt_new = dt_pdt + timedelta(hours=3) <em># This
should be 2:30 AM PST</em> <strong>print</strong>(dt_new)</p>
<p># 2015-11-01 03:30:00-07:00</p>
<p>dt_corrected = PT.normalize(dt_new)</p>
<p><strong>print</strong>(dt_corrected)</p>
<p># 2015-11-01 02:30:00-08:00</p>
<p>Section 5.3: Computing time dierences</p>
<p>the timedelta module comes in handy to compute differences between
times:</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime,
timedelta</p>
<p>now = datetime.now()</p>
<p><em>then = datetime(2016, 5, 23)</em> # datetime.datetime(2016, 05,
23, 0, 0, 0)</p>
<p>Specifying time is optional when creating a new datetime object</p>
<p>delta = now-then</p>
<p>delta is of type timedelta</p>
<p><strong>print</strong>(delta.days)</p>
<p># 60</p>
<p><strong>print</strong>(delta.seconds)</p>
<p># 40826</p>
<p>To get n day's after and n day's before date we could use:</p>
<p>n day's after date:</p>
<p><strong>def</strong> get_n_days_after_date(date_format="%d %B %Y",
add_days=120):</p>
<p>date_n_days_after = datetime.datetime.now() +
timedelta(days=add_days)</p>
<p><strong>return</strong> date_n_days_after.strftime(date_format)</p>
<p>n day's before date:</p>
<p><strong>def</strong> get_n_days_before_date(self, date_format="%d %B
%Y", days_before=120):</p>
<p>date_n_days_ago = datetime.datetime.now() -
timedelta(days=days_before)</p>
<p><strong>return</strong> date_n_days_ago.strftime(date_format)</p>
<p>Section 5.4: Basic datetime objects usage</p>
<p>The datetime module contains three primary types of objects - date,
time, and datetime.</p>
<p><strong>import</strong> datetime</p>
<p># Date object</p>
<p>today = datetime.date.today()</p>
<p>new_year = datetime.date(2017, 01, 01) <em>#datetime.date(2017, 1,
1)</em></p>
<p># Time object</p>
<p>noon = datetime.time(12, 0, 0) <em>#datetime.time(12, 0)</em></p>
<p># Current datetime</p>
<p>now = datetime.datetime.now()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 44</p>
<p><span id="__Datetime_object" class="anchor"></span># Datetime
object</p>
<p>millenium_turn = datetime.datetime(2000, 1, 1, 0, 0, 0)
<em>#datetime.datetime(2000, 1, 1, 0, 0)</em></p>
<p>Arithmetic operations for these objects are only supported within
same datatype and performing simple arithmetic</p>
<p>with instances of different types will result in a TypeError.</p>
<p># subtraction of noon from today</p>
<p>noon-today</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unsupported operand type(s) <strong>for</strong> -:
'datetime.time' <strong>and</strong> 'datetime.date' However, it
<strong>is</strong> straightforward to convert between types.</p>
<p># Do this instead</p>
<p><strong>print</strong>('Time since the millenium at midnight: ',</p>
<p>datetime.datetime(today.year, today.month, today.day) -
millenium_turn)</p>
<p># Or this</p>
<p><strong>print</strong>('Time since the millenium at noon: ',</p>
<p>datetime.datetime.combine(today, noon) - millenium_turn)</p>
<p>Section 5.5: Switching between time zones</p>
<p>To switch between time zones, you need datetime objects that are
timezone-aware.</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p><strong>from</strong> dateutil <strong>import</strong> tz</p>
<p>utc = tz.tzutc()</p>
<p>local = tz.tzlocal()</p>
<p>utc_now = datetime.utcnow()</p>
<p><em>utc_now</em> # Not timezone-aware.</p>
<p>utc_now = utc_now.replace(tzinfo=utc)</p>
<p><em>utc_now</em> # Timezone-aware.</p>
<p>local_now = utc_now.astimezone(local)</p>
<p><em>local_now</em> # Converted to local time.</p>
<p>Section 5.6: Simple date arithmetic</p>
<p>Dates don't exist in isolation. It is common that you will need to
find the amount of time between dates or</p>
<p>determine what the date will be tomorrow. This can be accomplished
using <a
href="https://docs.python.org/3/library/datetime.html#timedelta-objects">timedelta</a>
objects</p>
<p><strong>import</strong> datetime</p>
<p>today = datetime.date.today()</p>
<p><strong>print</strong>('Today:', today)</p>
<p>yesterday = today - datetime.timedelta(days=1)</p>
<p><strong>print</strong>('Yesterday:', yesterday)</p>
<p>tomorrow = today + datetime.timedelta(days=1)</p>
<p><strong>print</strong>('Tomorrow:', tomorrow)</p>
<p><strong>print</strong>('Time between tomorrow and yesterday:',
tomorrow - yesterday)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 45</p>
<p><span id="This_will_produce_results_simila"
class="anchor"></span>This will produce results similar to:</p>
<p>Today: 2016-04-15</p>
<p>Yesterday: 2016-04-14</p>
<p>Tomorrow: 2016-04-16</p>
<p>Difference between tomorrow and yesterday: 2 days, 0:00:00</p>
<p>Section 5.7: Converting timestamp to datetime</p>
<p>The datetime module can convert a POSIX timestamp to a ITC datetime
object.</p>
<p>The Epoch is January 1st, 1970 midnight.</p>
<p>import <strong>time</strong></p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p>seconds_since_epoch=time.time() <em>#1469182681.709</em></p>
<p>utc_date=datetime.utcfromtimestamp(seconds_since_epoch)
<em>#datetime.datetime(2016, 7, 22, 10, 18, 1, 709000)</em></p>
<p>Section 5.8: Subtracting months from a date accurately</p>
<p>Using the calendar module</p>
<p><strong>import</strong> calendar</p>
<p><strong>from</strong> datetime <strong>import</strong> date</p>
<p><strong>def</strong> monthdelta(date, delta):</p>
<p>m, y = (date.month+delta) % 12, date.year + ((date.month)+delta-1) //
12</p>
<p><strong>if not</strong> m: m = 12</p>
<p>d = min(date.day, calendar.monthrange(y, m)[1])</p>
<p><strong>return</strong> date.replace(day=d,month=m, year=y)</p>
<p>next_month = monthdelta(date.today(), 1) <em>#datetime.date(2016, 10,
23)</em></p>
<p>Using the dateutils module</p>
<p><strong>import</strong> datetime</p>
<p><strong>import</strong> dateutil.relativedelta</p>
<p>d = datetime.datetime.strptime("2013-03-31", "%Y-%m-%d") d2 = d -
dateutil.relativedelta.relativedelta(months=1)
<em>#datetime.datetime(2013, 2, 28, 0, 0)</em></p>
<p>Section 5.9: Parsing an arbitrary ISO 8601 timestamp with</p>
<p>minimal libraries</p>
<p>Python has only limited support for parsing ISO 8601 timestamps. For
strptime you need to know exactly what</p>
<p>format it is in. As a complication the stringification of a datetime
is an ISO 8601 timestamp, with space as a separator and 6 digit
fraction:</p>
<p>str(datetime.datetime(2016, 7, 22, 9, 25, 59, 555555))</p>
<p># '2016-07-22 09:25:59.555555'</p>
<p>but if the fraction is 0, no fractional part is output</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 46</p>
<p><span id="str_datetime_datetime_2016__7__2"
class="anchor"></span>str(datetime.datetime(2016, 7, 22, 9, 25, 59,
0))</p>
<p># '2016-07-22 09:25:59'</p>
<p>But these 2 forms need a <em>different</em> format for strptime.
Furthermore, strptime' does not support at all parsing minute timezones
that have a :<strong>in</strong> it, thus2016-07-22 09:25:59+0300can be
parsed, but the standard format 2016-07-22 09:25:59+03:00` cannot.</p>
<p>There is a <a
href="https://bitbucket.org/micktwomey/pyiso8601/src/43c6749d06c4aac6b1156911e85a0b952ca8a324/iso8601/iso8601.py?at=default&amp;fileviewer=file-view-default">single-file</a>
library called <a
href="https://pypi.python.org/pypi/iso8601">iso8601</a> which properly
parses ISO 8601 timestamps and only them.</p>
<p>It supports fractions and timezones, and the T separator all with a
single function:</p>
<p><strong>import</strong> iso8601</p>
<p>iso8601.parse_date('2016-07-22 09:25:59')</p>
<p># datetime.datetime(2016, 7, 22, 9, 25, 59,
tzinfo=&lt;iso8601.Utc&gt;) <em>iso8601.parse_date('2016-07-22
09:25:59+03:00')</em></p>
<p># datetime.datetime(2016, 7, 22, 9, 25, 59, tzinfo=&lt;FixedOffset
'+03:00' ...&gt;) <em>iso8601.parse_date('2016-07-22
09:25:59Z')</em></p>
<p># datetime.datetime(2016, 7, 22, 9, 25, 59,
tzinfo=&lt;iso8601.Utc&gt;)
<em>iso8601.parse_date('2016-07-22T09:25:59.000111+03:00')</em> #
datetime.datetime(2016, 7, 22, 9, 25, 59, 111, tzinfo=&lt;FixedOffset
'+03:00' ...&gt;)</p>
<p>If no timezone is set, iso8601.parse_date defaults to UTC. The
default zone can be changed with default_zone</p>
<p>keyword argument. Notably, if this is None instead of the default,
then those timestamps that do not have an explicit timezone are returned
as naive datetimes instead:</p>
<p>iso8601.parse_date('2016-07-22T09:25:59', default_timezone=None)
<em># datetime.datetime(2016, 7, 22, 9, 25, 59)</em></p>
<p>iso8601.parse_date('2016-07-22T09:25:59Z', default_timezone=None)
<em># datetime.datetime(2016, 7, 22, 9, 25, 59,
tzinfo=&lt;iso8601.Utc&gt;)</em></p>
<p>Section 5.10: Get an ISO 8601 timestamp</p>
<p>Without timezone, with microseconds</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p>datetime.now().isoformat()</p>
<p># Out: '2016-07-31T23:08:20.886783'</p>
<p>With timezone, with microseconds</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p><strong>from</strong> dateutil.tz <strong>import</strong> tzlocal</p>
<p>datetime.now(tzlocal()).isoformat()</p>
<p># Out: '2016-07-31T23:09:43.535074-07:00'</p>
<p>With timezone, without microseconds</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p><strong>from</strong> dateutil.tz <strong>import</strong> tzlocal</p>
<p>datetime.now(tzlocal()).replace(microsecond=0).isoformat() <em># Out:
'2016-07-31T23:10:30-07:00'</em></p>
<p><a href="https://en.wikipedia.org/wiki/ISO_8601">See ISO 8601 for
more information about the ISO 8601 format.</a></p>
<p>Section 5.11: Parsing a string with a short time zone name into</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 47</p>
<p><span id="a_timezone_aware_datetime_object" class="anchor"></span>a
timezone aware datetime object</p>
<p>Using the <a href="https://dateutil.readthedocs.io">dateutil</a>
library as in the previous example on parsing timezone-aware timestamps,
it is also possible to</p>
<p>parse timestamps with a specified "short" time zone name.</p>
<p>For dates formatted with short time zone names or abbreviations,
which are generally ambiguous (e.g. CST, which</p>
<p><a href="https://www.timeanddate.com/time/zones/">could be Central
Standard Time, China Standard Time, Cuba Standard Time, etc - more can
be found here</a>) or not necessarily available in a standard database,
it is necessary to specify a mapping between time zone abbreviation</p>
<p>and tzinfo object.</p>
<p><strong>from</strong> dateutil <strong>import</strong> tz</p>
<p><strong>from</strong> dateutil.parser <strong>import</strong>
parse</p>
<p>ET = tz.gettz('US/Eastern')</p>
<p>CT = tz.gettz('US/Central')</p>
<p>MT = tz.gettz('US/Mountain')</p>
<p>PT = tz.gettz('US/Pacific')</p>
<p>us_tzinfos = {'CST': CT, 'CDT': CT,</p>
<p>'EST': ET, 'EDT': ET,</p>
<p>'MST': MT, 'MDT': MT,</p>
<p>'PST': PT, 'PDT': PT}</p>
<p>dt_est = parse('2014-01-02 04:00:00 EST', tzinfos=us_tzinfos) dt_pst
= parse('2016-03-11 16:00:00 PST', tzinfos=us_tzinfos)</p>
<p>After running this:</p>
<p>dt_est</p>
<p># datetime.datetime(2014, 1, 2, 4, 0,
tzinfo=tzfile('/usr/share/zoneinfo/US/Eastern')) <em>dt_pst</em></p>
<p># datetime.datetime(2016, 3, 11, 16, 0,
tzinfo=tzfile('/usr/share/zoneinfo/US/Pacific'))</p>
<p>It is worth noting that if using a pytz time zone with this method,
it will <em>not</em> be properly localized:</p>
<p><strong>from</strong> dateutil.parser <strong>import</strong>
parse</p>
<p>import <strong>pytz</strong></p>
<p>EST = pytz.timezone('America/New_York')</p>
<p>dt = parse('2014-02-03 09:17:00 EST', tzinfos={'EST': EST})</p>
<p>This simply attaches the pytz time zone to the datetime:</p>
<p><em>dt.tzinfo</em> # Will be in Local Mean Time!</p>
<p># &lt;DstTzInfo 'America/New_York' LMT-1 day, 19:04:00 STD&gt;</p>
<p>If using this method, you should probably re-localize the naive
portion of the datetime after parsing:</p>
<p>dt_fixed = dt.tzinfo.localize(dt.replace(tzinfo=None))
dt_fixed.tzinfo <em># Now it's EST.</em></p>
<p># &lt;DstTzInfo 'America/New_York' EST-1 day, 19:00:00 STD&gt;)</p>
<p>Section 5.12: Fuzzy datetime parsing (extracting datetime out</p>
<p>of a text)</p>
<p><a
href="https://dateutil.readthedocs.io/en/stable/parser.html#dateutil.parser.parse">It
is possible to extract a date out of a text using the dateutil
parser</a> in a "fuzzy" mode, where components of the</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 48</p>
<p><span id="string_not_recognized_as_being_p"
class="anchor"></span>string not recognized as being part of a date are
ignored.</p>
<p><strong>from</strong> dateutil.parser <strong>import</strong>
parse</p>
<p>dt = parse("Today is January 1, 2047 at 8:21:00AM", fuzzy=True)
<strong>print</strong>(dt)</p>
<p>dt is now a <em>datetime object</em> and you would see
datetime.datetime(2047, 1, 1, 8, 21) printed.</p>
<p>Section 5.13: Iterate over dates</p>
<p>Sometimes you want to iterate over a range of dates from a start date
to some end date. You can do it using datetime library and timedelta
object:</p>
<p><strong>import</strong> datetime</p>
<p># The size of each step in days</p>
<p>day_delta = datetime.timedelta(days=1)</p>
<p>start_date = datetime.date.today()</p>
<p>end_date = start_date + 7*day_delta</p>
<p><strong>for</strong> i <strong>in</strong> range((end_date -
start_date).days):</p>
<p><strong>print</strong>(start_date + i*day_delta)</p>
<p>Which produces:</p>
<p>2016-07-21</p>
<p>2016-07-22</p>
<p>2016-07-23</p>
<p>2016-07-24</p>
<p>2016-07-25</p>
<p>2016-07-26</p>
<p>2016-07-27</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 49</p>
<p><span id="Chapter_6__Date_Formatting" class="anchor"></span>Chapter
6: Date Formatting</p>
<p>Section 6.1: Time between two date-times</p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p>a = datetime(2016,10,06,0,0,0)</p>
<p>b = datetime(2016,10,01,23,59,59)</p>
<p>a-b</p>
<p># datetime.timedelta(4, 1)</p>
<p>(a-b).days</p>
<p># 4</p>
<p>(a-b).total_seconds()</p>
<p># 518399.0</p>
<p>Section 6.2: Outputting datetime object to string</p>
<p><a
href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior">Uses
C standard format codes.</a></p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p>datetime_for_string = datetime(2016,10,1,0,0)</p>
<p>datetime_string_format = '%b %d %Y, %H:%M:%S'</p>
<p>datetime.strftime(datetime_for_string,datetime_string_format) <em>#
Oct 01 2016, 00:00:00</em></p>
<p>Section 6.3: Parsing string to datetime object</p>
<p><a
href="https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior">Uses
C standard format codes.</a></p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p>datetime_string = 'Oct 1 2016, 00:00:00'</p>
<p>datetime_string_format = '%b %d %Y, %H:%M:%S'</p>
<p>datetime.strptime(datetime_string, datetime_string_format) <em>#
datetime.datetime(2016, 10, 1, 0, 0)</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 50</p>
<p><span id="Chapter_7__Enum_1" class="anchor"></span>Chapter 7:
Enum</p>
<p>Section 7.1: Creating an enum (Python 2.4 through 3.3)</p>
<p><a href="https://pypi.python.org/pypi/enum34">Enums have been
backported from Python 3.4 to Python 2.4 through Python 3.3. You can get
this the enum34</a> backport from PyPI.</p>
<p>pip install enum34</p>
<p>Creation of an enum is identical to how it works in Python 3.4+</p>
<p><strong>from</strong> enum <strong>import</strong> Enum</p>
<p><strong>class</strong> Color(Enum):</p>
<p>red = 1</p>
<p>green = 2</p>
<p>blue = 3</p>
<p><strong>print</strong>(Color.red) <em># Color.red</em></p>
<p><em><strong>print</strong>(Color(1))</em> # Color.red</p>
<p><strong>print</strong>(Color['red']) <em># Color.red</em></p>
<p>Section 7.2: Iteration</p>
<p>Enums are iterable:</p>
<p><strong>class</strong> Color(Enum):</p>
<p>red = 1</p>
<p>green = 2</p>
<p>blue = 3</p>
<p><em>[c <strong>for</strong> c <strong>in</strong> Color]</em> #
[&lt;Color.red: 1&gt;, &lt;Color.green: 2&gt;, &lt;Color.blue:
3&gt;]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 51</p>
<p><span id="Chapter_8__Set_1" class="anchor"></span>Chapter 8: Set</p>
<p>Section 8.1: Operations on sets</p>
<p>with other sets</p>
<p># Intersection</p>
<p>{1, 2, 3, 4, 5}.intersection({3, 4, 5, 6}) <em># {3, 4, 5}</em></p>
<p>{1, 2, 3, 4, 5} &amp; {3, 4, 5, 6} <em># {3, 4, 5}</em></p>
<p># Union</p>
<p>{1, 2, 3, 4, 5}.union({3, 4, 5, 6}) <em># {1, 2, 3, 4, 5, 6}</em></p>
<p>{1, 2, 3, 4, 5} | {3, 4, 5, 6} <em># {1, 2, 3, 4, 5, 6}</em></p>
<p># Difference</p>
<p>{1, 2, 3, 4}.difference({2, 3, 5}) <em># {1, 4}</em></p>
<p>{1, 2, 3, 4} - {2, 3, 5} <em># {1, 4}</em></p>
<p># Symmetric difference with</p>
<p>{1, 2, 3, 4}.symmetric_difference({2, 3, 5}) <em># {1, 4, 5}</em> {1,
2, 3, 4} ^ {2, 3, 5} <em># {1, 4, 5}</em></p>
<p># Superset check</p>
<p>{1, 2}.issuperset({1, 2, 3}) <em># False</em></p>
<p>{1, 2} &gt;= {1, 2, 3} <em># False</em></p>
<p># Subset check</p>
<p>{1, 2}.issubset({1, 2, 3}) <em># True</em></p>
<p>{1, 2} &lt;= {1, 2, 3} <em># True</em></p>
<p># Disjoint check</p>
<p>{1, 2}.isdisjoint({3, 4}) <em># True</em></p>
<p>{1, 2}.isdisjoint({1, 4}) <em># False</em></p>
<p>with single elements</p>
<p># Existence check</p>
<p>2 <strong>in</strong> {1,2,3} <em># True</em></p>
<p>4 <strong>in</strong> {1,2,3} <em># False</em></p>
<p>4 <strong>not in</strong> {1,2,3} <em># True</em></p>
<p># Add and Remove</p>
<p>s = {1,2,3}</p>
<p><em>s.add(4)</em> # s == {1,2,3,4}</p>
<p><em>s.discard(3)</em> # s == {1,2,4}</p>
<p><em>s.discard(5)</em> # s == {1,2,4}</p>
<p>s.remove(2) <em># s == {1,4}</em></p>
<p>s.remove(2) <em># KeyError!</em></p>
<p>Set operations return new sets, but have the corresponding in-place
versions:</p>
<p>method in-place operation in-place method</p>
<p>union s |= t update</p>
<p>intersection s &amp;= t intersection_update</p>
<p>difference s -= t difference_update</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 52</p>
<p><span id="symmetric_difference_s____t"
class="anchor"></span>symmetric_difference s ^= t
symmetric_difference_update</p>
<p>For example:</p>
<p>s = {1, 2}</p>
<p><em>s.update({3, 4})</em> # s == {1, 2, 3, 4}</p>
<p>Section 8.2: Get the unique elements of a list</p>
<p>Let's say you've got a list of restaurants -- maybe you read it from
a file. You care about the <em>unique</em> restaurants in</p>
<p>the list. The best way to get the unique elements from a list is to
turn it into a set:</p>
<p>restaurants = ["McDonald's", "Burger King", "McDonald's", "Chicken
Chicken"] unique_restaurants = set(restaurants)</p>
<p><strong>print</strong>(unique_restaurants)</p>
<p># prints {'Chicken Chicken', "McDonald's", 'Burger King'}</p>
<p>Note that the set is not in the same order as the original list; that
is because sets are <em>unordered</em>, just like dicts.</p>
<p>This can easily be transformed back into a List with Python's built
in list function, giving another list that is the</p>
<p>same list as the original but without duplicates:</p>
<p>list(unique_restaurants)</p>
<p># ['Chicken Chicken', "McDonald's", 'Burger King']</p>
<p>It's also common to see this as one line:</p>
<p># Removes all duplicates and returns another list</p>
<p>list(set(restaurants))</p>
<p>Now any operations that could be performed on the original list can
be done again.</p>
<p>Section 8.3: Set of Sets</p>
<p>{{1,2}, {3,4}}</p>
<p>leads to:</p>
<p>TypeError: unhashable type: 'set'</p>
<p>Instead, use frozenset:</p>
<p>{frozenset({1, 2}), frozenset({3, 4})}</p>
<p>Section 8.4: Set Operations using Methods and Builtins</p>
<p>We define two sets a and b</p>
<p>&gt;&gt;&gt; a = {1, 2, 2, 3, 4}</p>
<p>&gt;&gt;&gt; b = {3, 3, 4, 4, 5}</p>
<p>NOTE: {1} creates a set of one element, but {} creates an empty dict.
The correct way to create an</p>
<p>empty set is set().</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 53</p>
<p>Intersection</p>
<p>a.intersection(b) returns a new set with elements present in both a
and b</p>
<p>&gt;&gt;&gt; a.intersection(b)</p>
<p>{3, 4}</p>
<p>Union</p>
<p>a.union(b) returns a new set with elements present in either a and
b</p>
<p>&gt;&gt;&gt; a.union(b)</p>
<p>{1, 2, 3, 4, 5}</p>
<p>Difference</p>
<p>a.difference(b) returns a new set with elements present in a but not
in b</p>
<p>&gt;&gt;&gt; a.difference(b)</p>
<p>{1, 2}</p>
<p>&gt;&gt;&gt; b.difference(a)</p>
<p>{5}</p>
<p>Symmetric Difference</p>
<p>a.symmetric_difference(b) returns a new set with elements present in
either a or b but not in both</p>
<p>&gt;&gt;&gt; a.symmetric_difference(b)</p>
<p>{1, 2, 5}</p>
<p>&gt;&gt;&gt; b.symmetric_difference(a)</p>
<p>{1, 2, 5}</p>
<p><strong>NOTE</strong>: a.symmetric_difference(b) ==
b.symmetric_difference(a)</p>
<p>Subset and superset</p>
<p>c.issubset(a) tests whether each element of c is in a.</p>
<p>a.issuperset(c) tests whether each element of c is in a.</p>
<p>&gt;&gt;&gt; c = {1, 2}</p>
<p>&gt;&gt;&gt; c.issubset(a)</p>
<p>True</p>
<p>&gt;&gt;&gt; a.issuperset(c)</p>
<p>True</p>
<p>The latter operations have equivalent operators as shown below:</p>
<p>Method Operator</p>
<p>a.intersection(b) a &amp; b</p>
<p>a.union(b) a |b</p>
<p>a.difference(b) a - b</p>
<p>a.symmetric_difference(b) a ^ b</p>
<p>a.issubset(b) a &lt;= b</p>
<p>a.issuperset(b) a &gt;= b</p>
<p>Disjoint sets</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 54</p>
<p><span id="Sets_a_and_d_are_disjoint_if_no" class="anchor"></span>Sets
a and d are disjoint if no element in a is also in d and vice versa.</p>
<p>&gt;&gt;&gt; d = {5, 6}</p>
<p><em>&gt;&gt;&gt; a.isdisjoint(b)</em> # {2, 3, 4} are in both
sets</p>
<p>False</p>
<p>&gt;&gt;&gt; a.isdisjoint(d)</p>
<p>True</p>
<p># This is an equivalent check, but less efficient</p>
<p>&gt;&gt;&gt; len(a &amp; d) == 0</p>
<p>True</p>
<p># This is even less efficient</p>
<p>&gt;&gt;&gt; a &amp; d == set()</p>
<p>True</p>
<p>Testing membership</p>
<p>The builtin in keyword searches for occurances</p>
<p>&gt;&gt;&gt; 1 <strong>in</strong> a</p>
<p>True</p>
<p>&gt;&gt;&gt; 6 <strong>in</strong> a</p>
<p>False</p>
<p>Length</p>
<p>The builtin len() function returns the number of elements in the
set</p>
<p>&gt;&gt;&gt; len(a)</p>
<p>4</p>
<p>&gt;&gt;&gt; len(b)</p>
<p>3</p>
<p>Section 8.5: Sets versus multisets</p>
<p>Sets are unordered collections of distinct elements. But sometimes we
want to work with unordered collections of elements that are not
necessarily distinct and keep track of the elements' multiplicities.</p>
<p>Consider this example:</p>
<p>&gt;&gt;&gt; setA = {'a','b','b','c'}</p>
<p>&gt;&gt;&gt; setA</p>
<p>set(['a', 'c', 'b'])</p>
<p>By saving the strings 'a', 'b', 'b', 'c' into a set data structure
we've lost the information on the fact that 'b'</p>
<p>occurs twice. Of course saving the elements to a list would retain
this information</p>
<p>&gt;&gt;&gt; listA = ['a','b','b','c']</p>
<p>&gt;&gt;&gt; listA</p>
<p>['a', 'b', 'b', 'c']</p>
<p>but a list data structure introduces an extra unneeded ordering that
will slow down our computations.</p>
<p>For implementing multisets Python provides the Counter class from the
collections module (starting from version</p>
<p>2.7):</p>
<p>Python 2.x Version ≥ 2.7</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 55</p>
<p>&gt;&gt;&gt; <strong>from</strong> collections
<strong>import</strong> Counter</p>
<p>&gt;&gt;&gt; counterA = Counter(['a','b','b','c'])</p>
<p>&gt;&gt;&gt; counterA</p>
<p>Counter({'b': 2, 'a': 1, 'c': 1})</p>
<p>Counter is a dictionary where where elements are stored as dictionary
keys and their counts are stored as dictionary values. And as all
dictionaries, it is an unordered collection.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 56</p>
<p><span id="Chapter_9__Simple_Mathematical_O_1"
class="anchor"></span>Chapter 9: Simple Mathematical Operators</p>
<p>Numerical types and their metaclasses</p>
<p>The numbers module contains the abstract metaclasses for the
numerical types:</p>
<p>subclasses <a
href="https://docs.python.org/library/numbers.html#numbers.Number">numbers.Number</a>
<a
href="https://docs.python.org/library/numbers.html#numbers.Integral">numbers.Integral</a>
<a
href="https://docs.python.org/library/numbers.html#numbers.Rational">numbers.Rational</a>
<a
href="https://docs.python.org/library/numbers.html#numbers.Real">numbers.Real</a>
<a
href="https://docs.python.org/library/numbers.html#numbers.Complex">numbers.Complex</a></p>
<p><a
href="https://docs.python.org/library/functions.html#bool">bool</a> ✓ ✓
✓ ✓ ✓</p>
<p><a href="https://docs.python.org/library/functions.html#int">int</a>
✓ ✓ ✓ ✓ ✓</p>
<p><a
href="https://docs.python.org/library/fractions.html#fractions.Fraction">fractions.Fraction</a>
✓ ― ✓ ✓ ✓</p>
<p><a
href="https://docs.python.org/library/functions.html#float">float</a> ✓
― ― ✓ ✓</p>
<p><a
href="https://docs.python.org/library/functions.html#complex">complex</a>
✓ ― ― ― ✓</p>
<p><a
href="https://docs.python.org/library/decimal.html#decimal.Decimal">decimal.Decimal</a>
✓ ― ― ― ―</p>
<p>Python does common mathematical operators on its own, including
integer and float division, multiplication,</p>
<p>exponentiation, addition, and subtraction. The math module (included
in all standard Python versions) offers expanded functionality like
trigonometric functions, root operations, logarithms, and many more.</p>
<p>Section 9.1: Division</p>
<p>Python does integer division when both operands are integers. The
behavior of Python's division operators have changed from Python 2.x and
3.x (see also Integer Division ).</p>
<p>a, b, c, d, e = 3, 2, 2.0, -3, 10</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>In Python 2 the result of the ' / ' operator depends on the type of
the numerator and denominator.</p>
<p>a / b <em># = 1</em></p>
<p><em>a / c</em> # = 1.5</p>
<p>d / b <em># = -2</em></p>
<p>b / a <em># = 0</em></p>
<p>d / e <em># = -1</em></p>
<p>Note that because both a and b are ints, the result is an int.</p>
<p>The result is always rounded down (floored).</p>
<p>Because c is a float, the result of a / c is a float.</p>
<p>You can also use the operator module:</p>
<p><em><strong>import</strong> operator</em> # the operator module
provides 2-argument arithmetic functions <em>operator.div(a, b)</em> # =
1</p>
<p>operator.__div__(a, b) <em># = 1</em></p>
<p>Python 2.x Version ≥ 2.2</p>
<p>What if you want float division:</p>
<p>Recommended:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 57</p>
<p><span id="from___future___import_division"
class="anchor"></span><em><strong>from</strong> __future__
<strong>import</strong> division</em> # applies Python 3 style division
to the entire module <em>a / b</em> # = 1.5</p>
<p>a // b <em># = 1</em></p>
<p>Okay (if you don't want to apply to the whole module):</p>
<p>a / (b * 1.0) <em># = 1.5</em></p>
<p>1.0 * a / b <em># = 1.5</em></p>
<p><em>a / b * 1.0</em> # = 1.0 (careful with order of operations)</p>
<p><strong>from</strong> operator <strong>import</strong> truediv</p>
<p>truediv(a, b) <em># = 1.5</em></p>
<p>Not recommended (may raise TypeError, eg if argument is complex):</p>
<p>float(a) / b <em># = 1.5</em></p>
<p>a / float(b) <em># = 1.5</em></p>
<p>Python 2.x Version ≥ 2.2</p>
<p>The ' // ' operator in Python 2 forces floored division regardless of
type.</p>
<p>a // b <em># = 1</em></p>
<p>a // c <em># = 1.0</em></p>
<p>Python 3.x Version ≥ 3.0</p>
<p>In Python 3 the / operator performs 'true' division regardless of
types. The // operator performs floor division and</p>
<p>maintains type.</p>
<p><em>a / b</em> # = 1.5</p>
<p><em>e / b</em> # = 5.0</p>
<p>a // b <em># = 1</em></p>
<p>a // c <em># = 1.0</em></p>
<p><em><strong>import</strong> operator</em> # the operator module
provides 2-argument arithmetic functions <em>operator.truediv(a, b)</em>
# = 1.5</p>
<p>operator.floordiv(a, b) <em># = 1</em></p>
<p>operator.floordiv(a, c) <em># = 1.0</em></p>
<p>Possible combinations (builtin types):</p>
<p>int and int (gives an int in Python 2 and a float in Python 3) int
and float (gives a float)</p>
<p>int and complex (gives a complex)</p>
<p>float and float (gives a float)</p>
<p>float and complex (gives a complex)</p>
<p>complex and complex (gives a complex)</p>
<p><a href="https://www.python.org/dev/peps/pep-0238/">See PEP 238 for
more information.</a></p>
<p>Section 9.2: Addition</p>
<p>a, b = 1, 2</p>
<p># Using the "+" operator:</p>
<p>a + b <em># = 3</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 58</p>
<p><span id="__Using_the__in_place_______oper" class="anchor"></span>#
Using the "in-place" "+=" operator to add and assign: <em>a += b</em> #
a = 3 (equivalent to a = a + b)</p>
<p><em><strong>import</strong> operator</em> # contains 2 argument
arithmetic functions for the examples</p>
<p><em>operator.add(a, b)</em> # = 5 since a is set to 3 right before
this line</p>
<p># The "+=" operator is equivalent to:</p>
<p><em>a = operator.iadd(a, b)</em> # a = 5 since a is set to 3 right
before this line</p>
<p>Possible combinations (builtin types):</p>
<p>int and int (gives an int)</p>
<p>int and float (gives a float)</p>
<p>int and complex (gives a complex)</p>
<p>float and float (gives a float)</p>
<p>float and complex (gives a complex)</p>
<p>complex and complex (gives a complex)</p>
<p>Note: the + operator is also used for concatenating strings, lists
and tuples:</p>
<p>"first string " + "second string" <em># = 'first string second
string'</em></p>
<p>[1, 2, 3] + [4, 5, 6] <em># = [1, 2, 3, 4, 5, 6]</em></p>
<p>Section 9.3: Exponentiation</p>
<p>a, b = 2, 3</p>
<p>(a ** b) <em># = 8</em></p>
<p>pow(a, b) <em># = 8</em></p>
<p>import <strong>math</strong></p>
<p><em>math.pow(a, b)</em> # = 8.0 (always float; does not allow complex
results)</p>
<p><strong>import</strong> operator</p>
<p>operator.pow(a, b) <em># = 8</em></p>
<p>Another difference between the built-in pow and math.pow is that the
built-in pow can accept three arguments:</p>
<p>a, b, c = 2, 3, 2</p>
<p><em>pow(2, 3, 2)</em> # 0, calculates (2 ** 3) % 2, but as per Python
docs,</p>
<p># does so more efficiently</p>
<p>Special functions</p>
<p>The function math.sqrt(x) calculates the square root of x.</p>
<p>import <strong>math</strong></p>
<p>import <strong>cmath</strong></p>
<p>c = 4</p>
<p><em>math.sqrt(c)</em> # = 2.0 (always float; does not allow complex
results) <em>cmath.sqrt(c)</em> # = (2+0j) (always complex)</p>
<p>To compute other roots, such as a cube root, raise the number to the
reciprocal of the degree of the root. This</p>
<p>could be done with any of the exponential functions or operator.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 59</p>
<p><span id="import_math" class="anchor"></span>import
<strong>math</strong></p>
<p>x = 8</p>
<p><em>math.pow(x, 1/3)</em> # evaluates to 2.0</p>
<p><em>x**(1/3)</em> # evaluates to 2.0</p>
<p>The function math.exp(x) computes e ** x.</p>
<p>math.exp(0) <em># 1.0</em></p>
<p><em>math.exp(1)</em> # 2.718281828459045 (e)</p>
<p>The function math.expm1(x) computes e ** x - 1. When x is small, this
gives significantly better precision than</p>
<p>math.exp(x) - 1.</p>
<p>math.expm1(0) <em># 0.0</em></p>
<p><em>math.exp(1e-6) - 1</em> # 1.0000004999621837e-06</p>
<p><em>math.expm1(1e-6)</em> # 1.0000005000001665e-06</p>
<p># exact result # 1.000000500000166666708333341666...</p>
<p>Section 9.4: Trigonometric Functions</p>
<p>a, b = 1, 2</p>
<p>import <strong>math</strong></p>
<p><em>math.sin(a)</em> # returns the sine of 'a' in radians</p>
<p># Out: 0.8414709848078965</p>
<p><em>math.cosh(b)</em> # returns the inverse hyperbolic cosine of 'b'
in radians # Out: 3.7621956910836314</p>
<p><em>math.atan(math.pi)</em> # returns the arc tangent of 'pi' in
radians # Out: 1.2626272556789115</p>
<p><em>math.hypot(a, b)</em> # returns the Euclidean norm, same as
math.sqrt(a*a + b*b) # Out: 2.23606797749979</p>
<p>Note that math.hypot(x, y) is also the length of the vector (or
Euclidean distance) from the origin (0, 0)</p>
<p>to the point (x, y).</p>
<p>To compute the Euclidean distance between two points (x1, y1) &amp;
(x2, y2) you can use math.hypot as</p>
<p>follows</p>
<p>math.hypot(x2-x1, y2-y1)</p>
<p>To convert from radians -&gt; degrees and degrees -&gt; radians
respectively use math.degrees and math.radians</p>
<p>math.degrees(a)</p>
<p># Out: 57.29577951308232</p>
<p>math.radians(57.29577951308232)</p>
<p># Out: 1.0</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 60</p>
<p><span id="Section_9_5__Inplace_Operations"
class="anchor"></span>Section 9.5: Inplace Operations</p>
<p>It is common within applications to need to have code like this:</p>
<p>a = a + 1</p>
<p>or</p>
<p>a = a * 2</p>
<p>There is an effective shortcut for these in place operations:</p>
<p>a += 1</p>
<p># and</p>
<p>a *= 2</p>
<p>Any mathematic operator can be used before the '=' character to make
an inplace operation:</p>
<p>-= decrement the variable in place</p>
<p>+= increment the variable in place</p>
<p>*= multiply the variable in place</p>
<p>/= divide the variable in place</p>
<p>//= floor divide the variable in place # Python 3</p>
<p>%= return the modulus of the variable in place</p>
<p>**= raise to a power in place</p>
<p>Other in place operators exist for the bitwise operators (^, |
etc)</p>
<p>Section 9.6: Subtraction</p>
<p>a, b = 1, 2</p>
<p># Using the "-" operator:</p>
<p>b - a <em># = 1</em></p>
<p><em><strong>import</strong> operator</em> # contains 2 argument
arithmetic functions <em>operator.sub(b, a)</em> # = 1</p>
<p>Possible combinations (builtin types):</p>
<p>int and int (gives an int)</p>
<p>int and float (gives a float)</p>
<p>int and complex (gives a complex)</p>
<p>float and float (gives a float)</p>
<p>float and complex (gives a complex)</p>
<p>complex and complex (gives a complex)</p>
<p>Section 9.7: Multiplication</p>
<p>a, b = 2, 3</p>
<p>a * b <em># = 6</em></p>
<p><strong>import</strong> operator</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 61</p>
<p><span id="operator_mul_a__b__________6"
class="anchor"></span>operator.mul(a, b) <em># = 6</em></p>
<p>Possible combinations (builtin types):</p>
<p>int and int (gives an int)</p>
<p>int and float (gives a float)</p>
<p>int and complex (gives a complex)</p>
<p>float and float (gives a float)</p>
<p>float and complex (gives a complex)</p>
<p>complex and complex (gives a complex)</p>
<p>Note: The * operator is also used for repeated concatenation of
strings, lists, and tuples:</p>
<p><em>3 * 'ab'</em> # = 'ababab'</p>
<p><em>3 * ('a', 'b')</em> # = ('a', 'b', 'a', 'b', 'a', 'b')</p>
<p>Section 9.8: Logarithms</p>
<p>By default, the math.log function calculates the logarithm of a
number, base e. You can optionally specify a base as the second
argument.</p>
<p>import <strong>math</strong></p>
<p>import <strong>cmath</strong></p>
<p><em>math.log(5)</em> # = 1.6094379124341003</p>
<p># optional base argument. Default is math.e</p>
<p><em>math.log(5, math.e)</em> # = 1.6094379124341003</p>
<p><em>cmath.log(5)</em> # = (1.6094379124341003+0j)</p>
<p><em>math.log(1000, 10)</em> # 3.0 (always returns float)</p>
<p>cmath.log(1000, 10) <em># (3+0j)</em></p>
<p>Special variations of the math.log function exist for different
bases.</p>
<p># Logarithm base e - 1 (higher precision for low values)
<em>math.log1p(5)</em> # = 1.791759469228055</p>
<p># Logarithm base 2</p>
<p>math.log2(8) <em># = 3.0</em></p>
<p># Logarithm base 10</p>
<p>math.log10(100) <em># = 2.0</em></p>
<p>cmath.log10(100) <em># = (2+0j)</em></p>
<p>Section 9.9: Modulus</p>
<p>Like in many other languages, Python uses the % operator for
calculating modulus.</p>
<p>3 % 4 <em># 3</em></p>
<p>10 % 2 <em># 0</em></p>
<p>6 % 4 <em># 2</em></p>
<p>Or by using the operator module:</p>
<p><strong>import</strong> operator</p>
<p>operator.mod(3 , 4) <em># 3</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 62</p>
<p>operator.mod(10 , 2) <em># 0</em></p>
<p>operator.mod(6 , 4) <em># 2</em></p>
<p>You can also use negative numbers.</p>
<p>-9 % 7 <em># 5</em></p>
<p>9 % -7 <em># -5</em></p>
<p>-9 % -7 <em># -2</em></p>
<p>If you need to find the result of integer division and modulus, you
can use the divmod function as a shortcut:</p>
<p>quotient, remainder = divmod(9, 4)</p>
<p># quotient = 2, remainder = 1 as 4 * 2 + 1 == 9</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 63</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"><strong>VIDEO:</strong>
Python for Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Science
and Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learning
Bootcamp</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learn
how to use NumPy, Pandas, Seaborn,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Matplotlib
, Plotly, Scikit-Learn , Machine Learning,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Tensorflow,
and more!</a></p>
<p><img src="media/index-89_1.jpeg" style="width:6.5in;height:3.65278in"
alt="index-89_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Python for Data Science and Machine Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Spark for Big Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Implement Machine Learning Algorithms</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use NumPy for Numerical Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Pandas for Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Matplotlib for Python Plotting</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Seaborn for statistical plots</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Plotly for interactive dynamic visualizations</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use SciKit-Learn for Machine Learning Tasks</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
K-Means Clustering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Logistic Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Linear Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Random Forest and Decision Trees</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Neural Networks <strong>Watch Today →</strong></a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Support Vector Machines</a></p>
<p><span id="Chapter_10__Bitwise_Operators_1"
class="anchor"></span>Chapter 10: Bitwise Operators</p>
<p>Bitwise operations alter binary strings at the bit level. These
operations are incredibly basic and are directly</p>
<p>supported by the processor. These few operations are necessary in
working with device drivers, low-level graphics, cryptography, and
network communications. This section provides useful knowledge and
examples of Python's</p>
<p>bitwise operators.</p>
<p>Section 10.1: Bitwise NOT</p>
<p>The ~ <a
href="https://en.wikipedia.org/wiki/Signed_number_representations">operator
will flip all of the bits in the number. Since computers use signed
number representations</a> — most</p>
<p><a href="https://en.wikipedia.org/wiki/Two%27s_complement">notably,
the two's complement notation</a> to encode negative binary numbers
where negative numbers are written</p>
<p>with a leading one (1) instead of a leading zero (0).</p>
<p>This means that if you were using 8 bits to represent your
two's-complement numbers, you would treat patterns</p>
<p>from 0000 0000 to 0111 1111 to represent numbers from 0 to 127 and
reserve 1xxx xxxx to represent negative numbers.</p>
<p>Eight-bit two's-complement numbers</p>
<p>Bits Unsigned Value Two's-complement Value</p>
<p>0000 0000 0 0</p>
<p>0000 0001 1 1</p>
<p>0000 0010 2 2</p>
<p>0111 1110 126 126</p>
<p>0111 1111 127 127</p>
<p>1000 0000 128 -128</p>
<p>1000 0001 129 -127</p>
<p>1000 0010 130 -126</p>
<p>1111 1110 254 -2</p>
<p>1111 1111 255 -1</p>
<p>In essence, this means that whereas 1010 0110 has an unsigned value
of 166 (arrived at by adding (128 * 1) + (64 * 0) + (32 * 1) + (16 * 0)
+ (8 * 0) + (4 * 1) + (2 * 1) + (1 * 0) ), it has a two's-complement
value</p>
<p>of -90 (arrived at by adding (128 * 1) - (64 * 0) - (32 * 1) - (16 *
0) - (8 * 0) - (4 * 1) - (2 * 1) -</p>
<p>(1 * 0), and complementing the value).</p>
<p>In this way, negative numbers range down to -128 (1000 0000). Zero
(0) is represented as 0000 0000, and minus one (-1) as 1111 1111.</p>
<p>In general, though, this means ~n = -n - 1.</p>
<p># 0 = 0b0000 0000</p>
<p>~0</p>
<p># Out: -1</p>
<p># -1 = 0b1111 1111</p>
<p># 1 = 0b0000 0001</p>
<p>~1</p>
<p># Out: -2</p>
<p># -2 = 1111 1110</p>
<p># 2 = 0b0000 0010</p>
<p>~2</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 65</p>
<p><span id="__Out___3" class="anchor"></span># Out: -3</p>
<p># -3 = 0b1111 1101</p>
<p># 123 = 0b0111 1011</p>
<p>~123</p>
<p># Out: -124</p>
<p># -124 = 0b1000 0100</p>
<p><em>Note</em>, the overall effect of this operation when applied to
positive numbers can be summarized:</p>
<p>~n -&gt; -|n+1|</p>
<p>And then, when applied to negative numbers, the corresponding effect
is:</p>
<p>~-n -&gt; |n-1|</p>
<p>The following examples illustrate this last rule...</p>
<p># -0 = 0b0000 0000</p>
<p>~-0</p>
<p># Out: -1</p>
<p># -1 = 0b1111 1111</p>
<p># 0 is the obvious exception to this rule, as -0 == 0 always</p>
<p># -1 = 0b1000 0001</p>
<p>~-1</p>
<p># Out: 0</p>
<p># 0 = 0b0000 0000</p>
<p># -2 = 0b1111 1110</p>
<p>~-2</p>
<p># Out: 1</p>
<p># 1 = 0b0000 0001</p>
<p># -123 = 0b1111 1011</p>
<p>~-123</p>
<p># Out: 122</p>
<p># 122 = 0b0111 1010</p>
<p>Section 10.2: Bitwise XOR (Exclusive OR)</p>
<p>The ^ operator will perform a binary <strong>XOR</strong> in which a
binary 1 is copied if and only if it is the value of exactly
<strong>one</strong></p>
<p>operand. Another way of stating this is that the result is 1 only if
the operands are different. Examples include:</p>
<p># 0 ^ 0 = 0</p>
<p># 0 ^ 1 = 1</p>
<p># 1 ^ 0 = 1</p>
<p># 1 ^ 1 = 0</p>
<p># 60 = 0b111100</p>
<p># 30 = 0b011110</p>
<p>60 ^ 30</p>
<p># Out: 34</p>
<p># 34 = 0b100010</p>
<p>bin(60 ^ 30)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 66</p>
<p><span id="__Out__0b100010" class="anchor"></span># Out: 0b100010</p>
<p>Section 10.3: Bitwise AND</p>
<p>The &amp; operator will perform a binary <strong>AND</strong>, where
a bit is copied if it exists in <strong>both</strong> operands. That
means:</p>
<p># 0 &amp; 0 = 0</p>
<p># 0 &amp; 1 = 0</p>
<p># 1 &amp; 0 = 0</p>
<p># 1 &amp; 1 = 1</p>
<p># 60 = 0b111100</p>
<p># 30 = 0b011110</p>
<p>60 &amp; 30</p>
<p># Out: 28</p>
<p># 28 = 0b11100</p>
<p>bin(60 &amp; 30)</p>
<p># Out: 0b11100</p>
<p>Section 10.4: Bitwise OR</p>
<p>The | operator will perform a binary "or," where a bit is copied if
it exists in either operand. That means:</p>
<p># 0 | 0 = 0</p>
<p># 0 | 1 = 1</p>
<p># 1 | 0 = 1</p>
<p># 1 | 1 = 1</p>
<p># 60 = 0b111100</p>
<p># 30 = 0b011110</p>
<p>60 | 30</p>
<p># Out: 62</p>
<p># 62 = 0b111110</p>
<p>bin(60 | 30)</p>
<p># Out: 0b111110</p>
<p>Section 10.5: Bitwise Left Shift</p>
<p>The &lt;&lt; operator will perform a bitwise "left shift," where the
left operand's value is moved left by the number of bits given by the
right operand.</p>
<p># 2 = 0b10</p>
<p>2 &lt;&lt; 2</p>
<p># Out: 8</p>
<p># 8 = 0b1000</p>
<p>bin(2 &lt;&lt; 2)</p>
<p># Out: 0b1000</p>
<p>Performing a left bit shift of 1 is equivalent to multiplication by
2:</p>
<p>7 &lt;&lt; 1</p>
<p># Out: 14</p>
<p>Performing a left bit shift of n is equivalent to multiplication by
2**n:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 67</p>
<p><span id="3____4" class="anchor"></span>3 &lt;&lt; 4</p>
<p># Out: 48</p>
<p>Section 10.6: Bitwise Right Shift</p>
<p>The &gt;&gt; operator will perform a bitwise "right shift," where the
left operand's value is moved right by the number of bits given by the
right operand.</p>
<p># 8 = 0b1000</p>
<p>8 &gt;&gt; 2</p>
<p># Out: 2</p>
<p># 2 = 0b10</p>
<p>bin(8 &gt;&gt; 2)</p>
<p># Out: 0b10</p>
<p>Performing a right bit shift of 1 is equivalent to integer division
by 2:</p>
<p>36 &gt;&gt; 1</p>
<p># Out: 18</p>
<p>15 &gt;&gt; 1</p>
<p># Out: 7</p>
<p>Performing a right bit shift of n is equivalent to integer division
by 2**n:</p>
<p>48 &gt;&gt; 4</p>
<p># Out: 3</p>
<p>59 &gt;&gt; 3</p>
<p># Out: 7</p>
<p>Section 10.7: Inplace Operations</p>
<p>All of the Bitwise operators (except ~) have their own in place
versions</p>
<p>a = 0b001</p>
<p>a &amp;= 0b010</p>
<p># a = 0b000</p>
<p>a = 0b001</p>
<p>a |= 0b010</p>
<p># a = 0b011</p>
<p>a = 0b001</p>
<p>a &lt;&lt;= 2</p>
<p># a = 0b100</p>
<p>a = 0b100</p>
<p>a &gt;&gt;= 2</p>
<p># a = 0b001</p>
<p>a = 0b101</p>
<p>a ^= 0b011</p>
<p># a = 0b110</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 68</p>
<p><span id="Chapter_11__Boolean_Operators_1"
class="anchor"></span>Chapter 11: Boolean Operators</p>
<p>Section 11.1: `and` and `or` are not guaranteed to return a</p>
<p>boolean</p>
<p>When you use or, it will either return the first value in the
expression if it's true, else it will blindly return the second</p>
<p>value. I.e. or is equivalent to:</p>
<p><strong>def</strong> or_(a, b):</p>
<p><strong>if</strong> a:</p>
<p>return <strong>a</strong></p>
<p>else<strong>:</strong></p>
<p>return <strong>b</strong></p>
<p>For <strong>and</strong>, it will return its first value if it's
false, else it returns the last value:</p>
<p><strong>def</strong> and_(a, b):</p>
<p>if not <strong>a:</strong></p>
<p>return <strong>a</strong></p>
<p>else<strong>:</strong></p>
<p>return <strong>b</strong></p>
<p>Section 11.2: A simple example</p>
<p>In Python you can compare a single element using two binary
operators--one on either side:</p>
<p><strong>if</strong> 3.14 &lt; x &lt; 3.142:</p>
<p><strong>print</strong>("x is near pi")</p>
<p>In many (most?) programming languages, this would be evaluated in a
way contrary to regular math: (3.14 &lt; x) &lt;</p>
<p>3.142, but in Python it is treated like 3.14 &lt; x
<strong>and</strong> x &lt; 3.142, just like most non-programmers would
expect.</p>
<p>Section 11.3: Short-circuit evaluation</p>
<p>Python <a
href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">minimally
evaluates</a> Boolean expressions.</p>
<p>&gt;&gt;&gt; <strong>def</strong> true_func():</p>
<p>... <strong>print</strong>("true_func()")</p>
<p>... <strong>return</strong> True</p>
<p>...</p>
<p>&gt;&gt;&gt; <strong>def</strong> false_func():</p>
<p>... <strong>print</strong>("false_func()")</p>
<p>... <strong>return</strong> False</p>
<p>...</p>
<p>&gt;&gt;&gt; true_func() <strong>or</strong> false_func()</p>
<p>true_func()</p>
<p>True</p>
<p>&gt;&gt;&gt; false_func() <strong>or</strong> true_func()</p>
<p>false_func()</p>
<p>true_func()</p>
<p>True</p>
<p>&gt;&gt;&gt; true_func() <strong>and</strong> false_func()</p>
<p>true_func()</p>
<p>false_func()</p>
<p>False</p>
<p>&gt;&gt;&gt; false_func() <strong>and</strong> false_func()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 69</p>
<p><span id="false_func" class="anchor"></span>false_func()</p>
<p>False</p>
<p>Section 11.4: and</p>
<p>Evaluates to the second argument if and only if both of the arguments
are truthy. Otherwise evaluates to the first</p>
<p>falsey argument.</p>
<p>x = True</p>
<p>y = True</p>
<p><em>z = x <strong>and</strong> y</em> # z = True</p>
<p>x = True</p>
<p>y = False</p>
<p><em>z = x <strong>and</strong> y</em> # z = False</p>
<p>x = False</p>
<p>y = True</p>
<p><em>z = x <strong>and</strong> y</em> # z = False</p>
<p>x = False</p>
<p>y = False</p>
<p><em>z = x <strong>and</strong> y</em> # z = False</p>
<p>x = 1</p>
<p>y = 1</p>
<p><em>z = x <strong>and</strong> y</em> # z = y, so z = 1, see `and`
and `or` are not guaranteed to be a boolean</p>
<p>x = 0</p>
<p>y = 1</p>
<p><em>z = x <strong>and</strong> y</em> # z = x, so z = 0 (see
above)</p>
<p>x = 1</p>
<p>y = 0</p>
<p><em>z = x <strong>and</strong> y</em> # z = y, so z = 0 (see
above)</p>
<p>x = 0</p>
<p>y = 0</p>
<p><em>z = x <strong>and</strong> y</em> # z = x, so z = 0 (see
above)</p>
<p>The 1's in the above example can be changed to any truthy value, and
the 0's can be changed to any falsey value.</p>
<p>Section 11.5: or</p>
<p>Evaluates to the first truthy argument if either one of the arguments
is truthy. If both arguments are falsey,</p>
<p>evaluates to the second argument.</p>
<p>x = True</p>
<p>y = True</p>
<p><em>z = x <strong>or</strong> y</em> # z = True</p>
<p>x = True</p>
<p>y = False</p>
<p><em>z = x <strong>or</strong> y</em> # z = True</p>
<p>x = False</p>
<p>y = True</p>
<p><em>z = x <strong>or</strong> y</em> # z = True</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 70</p>
<p><span id="x___False" class="anchor"></span>x = False</p>
<p>y = False</p>
<p><em>z = x <strong>or</strong> y</em> # z = False</p>
<p>x = 1</p>
<p>y = 1</p>
<p><em>z = x <strong>or</strong> y</em> # z = x, so z = 1, see `and` and
`or` are not guaranteed to be a boolean</p>
<p>x = 1</p>
<p>y = 0</p>
<p><em>z = x <strong>or</strong> y</em> # z = x, so z = 1 (see
above)</p>
<p>x = 0</p>
<p>y = 1</p>
<p><em>z = x <strong>or</strong> y</em> # z = y, so z = 1 (see
above)</p>
<p>x = 0</p>
<p>y = 0</p>
<p><em>z = x <strong>or</strong> y</em> # z = y, so z = 0 (see
above)</p>
<p>The 1's in the above example can be changed to any truthy value, and
the 0's can be changed to any falsey value.</p>
<p>Section 11.6: not</p>
<p>It returns the opposite of the following statement:</p>
<p>x = True</p>
<p><em>y = <strong>not</strong> x</em> # y = False</p>
<p>x = False</p>
<p><em>y = <strong>not</strong> x</em> # y = True</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 71</p>
<p><span id="Chapter_12__Operator_Precedence_1"
class="anchor"></span>Chapter 12: Operator Precedence</p>
<p>Python operators have a set <strong>order of precedence</strong>,
which determines what operators are evaluated first in a</p>
<p>potentially ambiguous expression. For instance, in the expression 3 *
2 + 7, first 3 is multiplied by 2, and then the</p>
<p>result is added to 7, yielding 13. The expression is not evaluated
the other way around, because * has a higher</p>
<p>precedence than +.</p>
<p>Below is a list of operators by precedence, and a brief description
of what they (usually) do.</p>
<p>Section 12.1: Simple Operator Precedence Examples in python</p>
<p>Python follows PEMDAS rule. PEMDAS stands for Parentheses, Exponents,
Multiplication and Division, and Addition</p>
<p>and Subtraction.</p>
<p>Example:</p>
<p>&gt;&gt;&gt; a, b, c, d = 2, 3, 5, 7</p>
<p>&gt;&gt;&gt; a ** (b + c) <em># parentheses</em></p>
<p>256</p>
<p><em>&gt;&gt;&gt; a * b ** c</em> # exponent: same as `a * (b **
c)`</p>
<p>7776</p>
<p><em>&gt;&gt;&gt; a + b * c / d</em> # multiplication / division: same
as `a + (b * c / d)` <em>4.142857142857142</em></p>
<p><a
href="https://docs.python.org/3/tutorial/floatingpoint.html">Extras:
mathematical rules hold, but not always:</a></p>
<p>&gt;&gt;&gt; 300 / 300 * 200</p>
<p>200.0</p>
<p>&gt;&gt;&gt; 300 * 200 / 300</p>
<p>200.0</p>
<p>&gt;&gt;&gt; 1e300 / 1e300 * 1e200</p>
<p>1e+200</p>
<p>&gt;&gt;&gt; 1e300 * 1e200 / 1e300</p>
<p>inf</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 72</p>
<p><span id="Chapter_13__Variable_Scope_and_B_1"
class="anchor"></span>Chapter 13: Variable Scope and Binding</p>
<p>Section 13.1: Nonlocal Variables</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>Python 3 added a new keyword called <strong>nonlocal</strong>. The
nonlocal keyword adds a scope override to the inner scope.</p>
<p><a href="https://www.python.org/dev/peps/pep-3104/">You can read all
about it in PEP 3104. This is best illustrated with a couple of code
examples. One of the most</a></p>
<p>common examples is to create function that can increment:</p>
<p><strong>def</strong> counter():</p>
<p>num = 0</p>
<p><strong>def</strong> incrementer():</p>
<p>num += 1</p>
<p>return <strong>num</strong></p>
<p><strong>return</strong> incrementer</p>
<p>If you try running this code, you will receive an
<strong>UnboundLocalError</strong> because the <strong>num</strong>
variable is referenced before</p>
<p>it is assigned in the innermost function. Let's add nonlocal to the
mix:</p>
<p><strong>def</strong> counter():</p>
<p>num = 0</p>
<p><strong>def</strong> incrementer():</p>
<p>nonlocal <strong>num</strong></p>
<p>num += 1</p>
<p>return <strong>num</strong></p>
<p><strong>return</strong> incrementer</p>
<p>c = counter()</p>
<p><em>c()</em> # = 1</p>
<p><em>c()</em> # = 2</p>
<p><em>c()</em> # = 3</p>
<p>Basically <strong>nonlocal</strong> will allow you to assign to
variables in an outer scope, but not a global scope. So you can't
use</p>
<p><strong>nonlocal</strong> in our counter function because then it
would try to assign to a global scope. Give it a try and you will</p>
<p>quickly get a SyntaxError. Instead you must use
<strong>nonlocal</strong> in a nested function.</p>
<p>(Note that the functionality presented here is better implemented
using generators.)</p>
<p>Section 13.2: Global Variables</p>
<p>In Python, variables inside functions are considered local if and
only if they appear in the left side of an assignment</p>
<p>statement, or some other binding occurrence; otherwise such a binding
is looked up in enclosing functions, up to the global scope. This is
true even if the assignment statement is never executed.</p>
<p>x = 'Hi'</p>
<p><strong>def</strong> read_x():</p>
<p><em><strong>print</strong>(x)</em> # x is just referenced, therefore
assumed global</p>
<p><em>read_x()</em> # prints Hi</p>
<p><strong>def</strong> read_y():</p>
<p><em><strong>print</strong>(y)</em> # here y is just referenced,
therefore assumed global</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 73</p>
<p><span id="read_y___________NameError__glob"
class="anchor"></span><em>read_y()</em> # NameError: global name 'y' is
not defined</p>
<p><strong>def</strong> read_y():</p>
<p><em>y = 'Hey'</em> # y appears in an assignment, therefore it's
local</p>
<p><em><strong>print</strong>(y)</em> # will find the local y</p>
<p><em>read_y()</em> # prints Hey</p>
<p><strong>def</strong> read_x_local_fail():</p>
<p><strong>if</strong> False:</p>
<p><em>x = 'Hey'</em> # x appears in an assignment, therefore it's
local</p>
<p><em><strong>print</strong>(x)</em> # will look for the _local_ z,
which is not assigned, and will not be found</p>
<p><em>read_x_local_fail()</em> # UnboundLocalError: local variable 'x'
referenced before assignment</p>
<p>Normally, an assignment inside a scope will shadow any outer
variables of the same name:</p>
<p>x = 'Hi'</p>
<p><strong>def</strong> change_local_x():</p>
<p>x = 'Bye'</p>
<p>print<strong>(x)</strong></p>
<p>change_local_x() <em># prints Bye</em></p>
<p><em><strong>print</strong>(x)</em> # prints Hi</p>
<p>Declaring a name <strong>global</strong> means that, for the rest of
the scope, any assignments to the name will happen at the module's top
level:</p>
<p>x = 'Hi'</p>
<p><strong>def</strong> change_global_x():</p>
<p>global <strong>x</strong></p>
<p>x = 'Bye'</p>
<p>print<strong>(x)</strong></p>
<p>change_global_x() <em># prints Bye</em></p>
<p><em><strong>print</strong>(x)</em> # prints Bye</p>
<p>The <strong>global</strong> keyword means that assignments will
happen at the module's top level, not at the program's top level. Other
modules will still need the usual dotted access to variables within the
module.</p>
<p>To summarize: in order to know whether a variable x is local to a
function, you should read the <em>entire</em> function:</p>
<p>1. if you've found <strong>global</strong> x, then x is a
<strong>global</strong> variable</p>
<p>2. If you've found <strong>nonlocal</strong> x, then x belongs to an
enclosing function, and is neither local nor global</p>
<p>3. If you've found x = 5 or <strong>for</strong> x
<strong>in</strong> range(3) or some other binding, then x is a
<strong>local</strong> variable</p>
<p>4. Otherwise x belongs to some enclosing scope (function scope,
global scope, or builtins)</p>
<p>Section 13.3: Local Variables</p>
<p>If a name is <em>bound</em> inside a function, it is by default
accessible only within the function:</p>
<p><strong>def</strong> foo():</p>
<p>a = 5</p>
<p>print<strong>(a) <em># ok</em></strong></p>
<p><em><strong>print</strong>(a)</em> # NameError: name 'a' is not
defined</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 74</p>
<p><span id="Control_flow_constructs_have_no"
class="anchor"></span>Control flow constructs have no impact on the
scope (with the exception of <strong>except</strong>), but accessing
variable that was not assigned yet is an error:</p>
<p><strong>def</strong> foo():</p>
<p><strong>if</strong> True:</p>
<p>a = 5</p>
<p>print<strong>(a) <em># ok</em></strong></p>
<p>b = 3</p>
<p><strong>def</strong> bar():</p>
<p><strong>if</strong> False:</p>
<p>b = 5</p>
<p><em><strong>print</strong>(b)</em> # UnboundLocalError: local
variable 'b' referenced before assignment</p>
<p>Common binding operations are assignments, <strong>for</strong>
loops, and augmented assignments such as a += 5</p>
<p>Section 13.4: The del command</p>
<p>This command has several related yet distinct forms.</p>
<p>del v</p>
<p>If v is a variable, the command <strong>del</strong> v removes the
variable from its scope. For example:</p>
<p>x = 5</p>
<p><em><strong>print</strong>(x)</em> # out: 5</p>
<p>del <strong>x</strong></p>
<p><em><strong>print</strong>(x)</em> # NameError: name 'f' is not
defined</p>
<p>Note that <strong>del</strong> is a <em>binding occurrence</em>,
which means that unless explicitly stated otherwise (using
<strong>nonlocal</strong> or <strong>global</strong>),
<strong>del</strong> v will make v local to the current scope. If you
intend to delete v in an outer scope, use</p>
<p><strong>nonlocal</strong> v or <strong>global</strong> v in the same
scope of the <strong>del</strong> v statement.</p>
<p>In all the following, the intention of a command is a default
behavior but is not enforced by the language. A class might be written
in a way that invalidates this intention.</p>
<p>del v.name</p>
<p>This command triggers a call to v.__delattr__(name).</p>
<p>The intention is to make the attribute name unavailable. For
example:</p>
<p>class <strong>A:</strong></p>
<p>pass</p>
<p>a = A()</p>
<p>a.x = 7</p>
<p><em><strong>print</strong>(a.x)</em> # out: 7</p>
<p><strong>del</strong> a.x</p>
<p><em><strong>print</strong>(a.x)</em> # error: AttributeError: 'A'
object has no attribute 'x'</p>
<p>del v[item]</p>
<p>This command triggers a call to v.__delitem__(item).</p>
<p>The intention is that item will not belong in the mapping implemented
by the object v. For example:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 75</p>
<p><span id="x_____a___1___b___2" class="anchor"></span>x = {'a': 1,
'b': 2}</p>
<p><strong>del</strong> x['a']</p>
<p><em><strong>print</strong>(x)</em> # out: {'b': 2}</p>
<p><em><strong>print</strong>(x['a'])</em> # error: KeyError: 'a'</p>
<p>del v[a:b]</p>
<p>This actually calls v.__delslice__(a, b).</p>
<p>The intention is similar to the one described above, but with slices
- ranges of items instead of a single item. For example:</p>
<p>x = [0, 1, 2, 3, 4]</p>
<p><strong>del</strong> x[1:3]</p>
<p><em><strong>print</strong>(x)</em> # out: [0, 3, 4]</p>
<p>See also Garbage Collection#The del command.</p>
<p>Section 13.5: Functions skip class scope when looking up</p>
<p>names</p>
<p>Classes have a local scope during definition, but functions inside
the class do not use that scope when looking up names. Because lambdas
are functions, and comprehensions are implemented using function scope,
this can lead</p>
<p>to some surprising behavior.</p>
<p>a = 'global'</p>
<p><strong>class</strong> Fred:</p>
<p><em>a = 'class'</em> # class scope</p>
<p>b = (a <strong>for</strong> i <strong>in</strong> range(10)) <em>#
function scope</em></p>
<p>c = [a <strong>for</strong> i <strong>in</strong> range(10)] <em>#
function scope</em></p>
<p><em>d = a</em> # class scope</p>
<p><em>e = <strong>lambda</strong>: a</em> # function scope</p>
<p><em>f = <strong>lambda</strong> a=a: a</em> # default argument uses
class scope</p>
<p><em>@staticmethod</em> # or @classmethod, or regular instance method
<em><strong>def</strong> g():</em> # function scope</p>
<p>return <strong>a</strong></p>
<p><strong>print</strong>(Fred.a) <em># class</em></p>
<p><strong>print</strong>(next(Fred.b)) <em># global</em></p>
<p><em><strong>print</strong>(Fred.c[0])</em> # class in Python 2,
global in Python 3 <em><strong>print</strong>(Fred.d)</em> # class</p>
<p><strong>print</strong>(Fred.e()) <em># global</em></p>
<p><strong>print</strong>(Fred.f()) <em># class</em></p>
<p><strong>print</strong>(Fred.g()) <em># global</em></p>
<p>Users unfamiliar with how this scope works might expect b, c, and e
to print <strong>class</strong>.</p>
<p><a href="http://www.python.org/dev/peps/pep-0227/">From PEP
227</a>:</p>
<p>Names in class scope are not accessible. Names are resolved in the
innermost enclosing function scope. If a class definition occurs in a
chain of nested scopes, the resolution process skips class
definitions.</p>
<p><a
href="http://docs.python.org/3/reference/executionmodel.html#naming">From
Python's documentation on naming and binding</a>:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 76</p>
<p><span id="The_scope_of_names_defined_in_a" class="anchor"></span>The
scope of names defined in a class block is limited to the class block;
it does not extend to the code</p>
<p>blocks of methods – this includes comprehensions and generator
expressions since they are implemented using a function scope. This
means that the following will fail:</p>
<p>class <strong>A:</strong></p>
<p>a = 42</p>
<p>b = list(a + i <strong>for</strong> i <strong>in</strong>
range(10))</p>
<p><a
href="http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition/13913933#13913933">This
example uses references from this answer</a> by Martijn Pieters, which
contains more in depth analysis of this</p>
<p>behavior.</p>
<p>Section 13.6: Local vs Global Scope</p>
<p>What are local and global scope?</p>
<p>All Python variables which are accessible at some point in code are
either in <em>local scope</em> or in <em>global scope</em>.</p>
<p>The explanation is that local scope includes all variables defined in
the current function and global scope includes variables defined outside
of the current function.</p>
<p>foo = 1 <em># global</em></p>
<p><strong>def</strong> func():</p>
<p>bar = 2 <em># local</em></p>
<p><em><strong>print</strong>(foo)</em> # prints variable foo from
global scope <em><strong>print</strong>(bar)</em> # prints variable bar
from local scope</p>
<p>One can inspect which variables are in which scope. Built-in
functions locals() and globals() return the whole</p>
<p>scopes as dictionaries.</p>
<p>foo = 1</p>
<p><strong>def</strong> func():</p>
<p>bar = 2</p>
<p><em><strong>print</strong>(globals().keys())</em> # prints all
variable names in global scope
<em><strong>print</strong>(locals().keys())</em> # prints all variable
names in local scope</p>
<p>What happens with name clashes?</p>
<p>foo = 1</p>
<p><strong>def</strong> func():</p>
<p><em>foo = 2</em> # creates a new variable foo in local scope, global
foo is not affected</p>
<p><em><strong>print</strong>(foo)</em> # prints 2</p>
<p># global variable foo still exists, unchanged:</p>
<p><strong>print</strong>(globals()['foo']) <em># prints 1</em></p>
<p><strong>print</strong>(locals()['foo']) <em># prints 2</em></p>
<p>To modify a global variable, use keyword <strong>global</strong>:</p>
<p>foo = 1</p>
<p><strong>def</strong> func():</p>
<p>global <strong>foo</strong></p>
<p><em>foo = 2</em> # this modifies the global foo, rather than creating
a local variable</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 77</p>
<p>The scope is defined for the whole body of the function!</p>
<p>What it means is that a variable will never be global for a half of
the function and local afterwards, or vice-versa.</p>
<p>foo = 1</p>
<p><strong>def</strong> func():</p>
<p># This function has a local variable foo, because it is defined down
below. # So, foo is local from this point. Global foo is hidden.</p>
<p><em><strong>print</strong>(foo)</em> # raises UnboundLocalError,
because local foo is not yet initialized</p>
<p>foo = 7</p>
<p>print<strong>(foo)</strong></p>
<p>Likewise, the opposite:</p>
<p>foo = 1</p>
<p><strong>def</strong> func():</p>
<p># In this function, foo is a global variable from the beginning</p>
<p><em>foo = 7</em> # global foo is modified</p>
<p><strong>print</strong>(foo) <em># 7</em></p>
<p><strong>print</strong>(globals()['foo']) <em># 7</em></p>
<p><em><strong>global</strong> foo</em> # this could be anywhere within
the function <em><strong>print</strong>(foo)</em> # 7</p>
<p>Functions within functions</p>
<p>There may be many levels of functions nested within functions, but
within any one function there is only one local scope for that function
and the global scope. There are no intermediate scopes.</p>
<p>foo = 1</p>
<p><strong>def</strong> f1():</p>
<p>bar = 1</p>
<p><strong>def</strong> f2():</p>
<p>baz = 2</p>
<p># here, foo is a global variable, baz is a local variable # bar is
not in either scope</p>
<p><strong>print</strong>(locals().keys()) <em># ['baz']</em></p>
<p><strong>print</strong>('bar' <strong>in</strong> locals()) <em>#
False</em></p>
<p><strong>print</strong>('bar' <strong>in</strong> globals()) <em>#
False</em></p>
<p><strong>def</strong> f3():</p>
<p>baz = 3</p>
<p><em><strong>print</strong>(bar)</em> # bar from f1 is referenced so
it enters local scope of f3 (closure)
<em><strong>print</strong>(locals().keys())</em> # ['bar', 'baz']</p>
<p><strong>print</strong>('bar' <strong>in</strong> locals()) <em>#
True</em></p>
<p><strong>print</strong>('bar' <strong>in</strong> globals()) <em>#
False</em></p>
<p><strong>def</strong> f4():</p>
<p><em>bar = 4</em> # a new local bar which hides bar from local scope
of f1</p>
<p>baz = 4</p>
<p>print<strong>(bar)</strong></p>
<p><strong>print</strong>(locals().keys()) <em># ['bar', 'baz']</em></p>
<p><strong>print</strong>('bar' <strong>in</strong> locals()) <em>#
True</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 78</p>
<p><span id="print__bar__in_globals_______Fal"
class="anchor"></span><strong>print</strong>('bar' <strong>in</strong>
globals()) <em># False</em></p>
<p>global vs nonlocal (Python 3 only)</p>
<p>Both these keywords are used to gain write access to variables which
are not local to the current functions.</p>
<p>The <strong>global</strong> keyword declares that a name should be
treated as a global variable.</p>
<p><em>foo = 0</em> # global foo</p>
<p><strong>def</strong> f1():</p>
<p><em>foo = 1</em> # a new foo local in f1</p>
<p><strong>def</strong> f2():</p>
<p><em>foo = 2</em> # a new foo local in f2</p>
<p><strong>def</strong> f3():</p>
<p><em>foo = 3</em> # a new foo local in f3</p>
<p><strong>print</strong>(foo) <em># 3</em></p>
<p><em>foo = 30</em> # modifies local foo in f3 only</p>
<p><strong>def</strong> f4():</p>
<p>global <strong>foo</strong></p>
<p><strong>print</strong>(foo) <em># 0</em></p>
<p><em>foo = 100</em> # modifies global foo</p>
<p>On the other hand, <strong>nonlocal</strong> (see Nonlocal Variables
), available in Python 3, takes a <em>local</em> variable from an
enclosing scope into the local scope of current function.</p>
<p><a
href="https://docs.python.org/3/reference/simple_stmts.html#nonlocal">From
the Python documentation on <strong>nonlocal</strong></a>:</p>
<p>The nonlocal statement causes the listed identifiers to refer to
previously bound variables in the nearest enclosing scope excluding
globals.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>def</strong> f1():</p>
<p><strong>def</strong> f2():</p>
<p><em>foo = 2</em> # a new foo local in f2</p>
<p><strong>def</strong> f3():</p>
<p><em><strong>nonlocal</strong> foo</em> # foo from f2, which is the
nearest enclosing scope <em><strong>print</strong>(foo)</em> # 2</p>
<p><em>foo = 20</em> # modifies foo from f2!</p>
<p>Section 13.7: Binding Occurrence</p>
<p>x = 5</p>
<p>x += 7</p>
<p><strong>for</strong> x <strong>in</strong> iterable:
<strong>pass</strong></p>
<p>Each of the above statements is a <em>binding occurrence</em> - x
become bound to the object denoted by 5. If this statement appears
inside a function, then x will be function-local by default. See the
"Syntax" section for a list of binding</p>
<p>statements.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 79</p>
<p><span id="Chapter_14__Conditionals_1" class="anchor"></span>Chapter
14: Conditionals</p>
<p>Conditional expressions, involving keywords such as if, elif, and
else, provide Python programs with the ability to</p>
<p>perform different actions depending on a boolean condition: True or
False. This section covers the use of Python conditionals, boolean
logic, and ternary statements.</p>
<p>Section 14.1: Conditional Expression (or "The Ternary</p>
<p>Operator")</p>
<p>The ternary operator is used for inline conditional expressions. It
is best used in simple, concise operations that are easily read.</p>
<p>The order of the arguments is different from many other languages
(such as C, Ruby, Java, etc.), which may lead to bugs when people
unfamiliar with Python's "surprising" behaviour use it (they may reverse
the order).</p>
<p>Some find it "unwieldy", since it goes contrary to the normal flow of
thought (thinking of the condition first and then the effects).</p>
<p>n = 5</p>
<p>"Greater than 2" <strong>if</strong> n &gt; 2 <strong>else</strong>
"Smaller than or equal to 2" <em># Out: 'Greater than 2'</em></p>
<p>The result of this expression will be as it is read in English - if
the conditional expression is True, then it will evaluate</p>
<p>to the expression on the left side, otherwise, the right side.</p>
<p>Ternary operations can also be nested, as here:</p>
<p>n = 5</p>
<p>"Hello" <strong>if</strong> n &gt; 10 <strong>else</strong> "Goodbye"
<strong>if</strong> n &gt; 5 <strong>else</strong> "Good day"</p>
<p>They also provide a method of including conditionals in lambda
functions.</p>
<p>Section 14.2: if, elif, and else</p>
<p>In Python you can define a series of conditionals using if for the
first one, <strong>elif</strong> for the rest, up until the final</p>
<p>(optional) <strong>else</strong> for anything not caught by the other
conditionals.</p>
<p>number = 5</p>
<p><strong>if</strong> number &gt; 2:</p>
<p><strong>print</strong>("Number is bigger than 2.")</p>
<p><em><strong>elif</strong> number &lt; 2:</em> # Optional clause (you
can have multiple elifs)</p>
<p><strong>print</strong>("Number is smaller than 2.")</p>
<p><em><strong>else</strong>:</em> # Optional clause (you can only have
one else)</p>
<p><strong>print</strong>("Number is 2.")</p>
<p>Outputs Number <strong>is</strong> bigger than 2</p>
<p>Using <strong>else if</strong> instead of <strong>elif</strong> will
trigger a syntax error and is not allowed.</p>
<p>Section 14.3: Truth Values</p>
<p>The following values are considered falsey, in that they evaluate to
False when applied to a boolean operator.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 80</p>
<p><span id="None" class="anchor"></span>None</p>
<p>False</p>
<p>0, or any numerical value equivalent to zero, for example 0L, 0.0,
0j</p>
<p>Empty sequences: '', "", (), []</p>
<p>Empty mappings: {}</p>
<p>User-defined types where the __bool__ or __len__ methods return 0 or
False</p>
<p>All other values in Python evaluate to True.</p>
<p><em><strong>Note:</strong></em> A common mistake is to simply check
for the Falseness of an operation which returns different Falsey
values</p>
<p>where the difference matters. For example, using <strong>if</strong>
foo() rather than the more explicit <strong>if</strong> foo()
<strong>is</strong> None</p>
<p>Section 14.4: Boolean Logic Expressions</p>
<p>Boolean logic expressions, in addition to evaluating to True or
False, return the <em>value</em> that was interpreted as True</p>
<p>or False. It is Pythonic way to represent logic that might otherwise
require an if-else test.</p>
<p>And operator</p>
<p>The <strong>and</strong> operator evaluates all expressions and
returns the last expression if all expressions evaluate to True.
Otherwise it returns the first value that evaluates to False:</p>
<p>&gt;&gt;&gt; 1 <strong>and</strong> 2</p>
<p>2</p>
<p>&gt;&gt;&gt; 1 <strong>and</strong> 0</p>
<p>0</p>
<p>&gt;&gt;&gt; 1 <strong>and</strong> "Hello World"</p>
<p>"Hello World"</p>
<p>&gt;&gt;&gt; "" <strong>and</strong> "Pancakes"</p>
<p>""</p>
<p>Or operator</p>
<p>The or operator evaluates the expressions left to right and returns
the first value that evaluates to True or the last value (if none are
True).</p>
<p>&gt;&gt;&gt; 1 <strong>or</strong> 2</p>
<p>1</p>
<p>&gt;&gt;&gt; None <strong>or</strong> 1</p>
<p>1</p>
<p>&gt;&gt;&gt; 0 <strong>or</strong> []</p>
<p>[]</p>
<p>Lazy evaluation</p>
<p>When you use this approach, remember that the evaluation is lazy.
Expressions that are not required to be</p>
<p>evaluated to determine the result are not evaluated. For example:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 81</p>
<p>&gt;&gt;&gt; <strong>def</strong> print_me():</p>
<p><strong>print</strong>('I am here!')</p>
<p>&gt;&gt;&gt; 0 <strong>and</strong> print_me()</p>
<p>0</p>
<p>In the above example, print_me is never executed because Python can
determine the entire expression is False when it encounters the 0
(False). Keep this in mind if print_me needs to execute to serve your
program logic.</p>
<p>Testing for multiple conditions</p>
<p>A common mistake when checking for multiple conditions is to apply
the logic incorrectly.</p>
<p>This example is trying to check if two variables are each greater
than 2. The statement is evaluated as - <strong>if</strong> (a)
<strong>and</strong> (b &gt; 2). This produces an unexpected result
because bool(a) evaluates as True when a is not zero.</p>
<p>&gt;&gt;&gt; a = 1</p>
<p>&gt;&gt;&gt; b = 6</p>
<p>&gt;&gt;&gt; <strong>if</strong> a <strong>and</strong> b &gt; 2:</p>
<p>... <strong>print</strong>('yes')</p>
<p>... <strong>else</strong>:</p>
<p>... <strong>print</strong>('no')</p>
<p>yes</p>
<p>Each variable needs to be compared separately.</p>
<p>&gt;&gt;&gt; <strong>if</strong> a &gt; 2 <strong>and</strong> b &gt;
2:</p>
<p>... <strong>print</strong>('yes')</p>
<p>... <strong>else</strong>:</p>
<p>... <strong>print</strong>('no')</p>
<p>no</p>
<p>Another, similar, mistake is made when checking if a variable is one
of multiple values. The statement in this example is evaluated as -
<strong>if</strong> (a == 3) <strong>or</strong> (4) <strong>or</strong>
(6). This produces an unexpected result because bool(4) and</p>
<p>bool(6) each evaluate to True</p>
<p>&gt;&gt;&gt; a = 1</p>
<p>&gt;&gt;&gt; <strong>if</strong> a == 3 <strong>or</strong> 4
<strong>or</strong> 6:</p>
<p>... <strong>print</strong>('yes')</p>
<p>... <strong>else</strong>:</p>
<p>... <strong>print</strong>('no')</p>
<p>yes</p>
<p>Again each comparison must be made separately</p>
<p>&gt;&gt;&gt; <strong>if</strong> a == 3 <strong>or</strong> a == 4
<strong>or</strong> a == 6:</p>
<p>... <strong>print</strong>('yes')</p>
<p>... <strong>else</strong>:</p>
<p>... <strong>print</strong>('no')</p>
<p>no</p>
<p>Using the in operator is the canonical way to write this.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 82</p>
<p><span id="____if_a_in__3__4__6" class="anchor"></span>&gt;&gt;&gt;
<strong>if</strong> a <strong>in</strong> (3, 4, 6):</p>
<p>... <strong>print</strong>('yes')</p>
<p>... <strong>else</strong>:</p>
<p>... <strong>print</strong>('no')</p>
<p>no</p>
<p>Section 14.5: Using the cmp function to get the comparison</p>
<p>result of two objects</p>
<p>Python 2 includes a cmp function which allows you to determine if one
object is less than, equal to, or greater than</p>
<p>another object. This function can be used to pick a choice out of a
list based on one of those three options.</p>
<p>Suppose you need to print 'greater than' if x &gt; y, 'less than' if
x &lt; y and 'equal' if x == y.</p>
<p>['equal', 'greater than', 'less than', ][cmp(x,y)]</p>
<p># x,y = 1,1 output: 'equal'</p>
<p># x,y = 1,2 output: 'less than'</p>
<p># x,y = 2,1 output: 'greater than'</p>
<p>cmp(x,y) returns the following values</p>
<p>Comparison Result</p>
<p>x &lt; y -1</p>
<p>x == y 0</p>
<p>x &gt; y 1</p>
<p>This function is removed on Python 3. You can use the <a
href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key">cmp_to_key(func)</a>
helper function located in functools in</p>
<p>Python 3 to convert old comparison functions to key functions.</p>
<p>Section 14.6: Else statement</p>
<p><strong>if</strong> condition:</p>
<p>body</p>
<p>else<strong>:</strong></p>
<p>body</p>
<p>The else statement will execute it's body only if preceding
conditional statements all evaluate to False.</p>
<p><strong>if</strong> True:</p>
<p><strong>print</strong> "It is true!"</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong> "This won't get printed.."</p>
<p># Output: It is true!</p>
<p><strong>if</strong> False:</p>
<p><strong>print</strong> "This won't get printed.."</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong> "It is false!"</p>
<p># Output: It is false!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 83</p>
<p><span id="Section_14_7__Testing_if_an_obje"
class="anchor"></span>Section 14.7: Testing if an object is None and
assigning it</p>
<p>You'll often want to assign something to an object if it is None,
indicating it has not been assigned. We'll use aDate.</p>
<p>The simplest way to do this is to use the <strong>is</strong> None
test.</p>
<p><strong>if</strong> aDate <strong>is</strong> None:</p>
<p>aDate=datetime.date.today()</p>
<p>(Note that it is more Pythonic to say <strong>is</strong> None
instead of == None.)</p>
<p>But this can be optimized slightly by exploiting the notion that
<strong>not</strong> None will evaluate to True in a boolean expression.
The following code is equivalent:</p>
<p><strong>if not</strong> aDate:</p>
<p>aDate=datetime.date.today()</p>
<p>But there is a more Pythonic way. The following code is also
equivalent:</p>
<p>aDate=aDate <strong>or</strong> datetime.date.today()</p>
<p>This does a Short Circuit evaluation. If aDate is initialized and is
<strong>not</strong> None, then it gets assigned to itself with no
net</p>
<p>effect. If it <strong>is</strong> None, then the
datetime.date.today() gets assigned to aDate.</p>
<p>Section 14.8: If statement</p>
<p><strong>if</strong> condition:</p>
<p>body</p>
<p>The if statements checks the condition. If it evaluates to True, it
executes the body of the if statement. If it</p>
<p>evaluates to False, it skips the body.</p>
<p><strong>if</strong> True:</p>
<p><strong>print</strong> "It is true!"</p>
<p>&gt;&gt; It <strong>is</strong> true!</p>
<p><strong>if</strong> False:</p>
<p><strong>print</strong> "This won't get printed.."</p>
<p>The condition can be any valid expression:</p>
<p><strong>if</strong> 2 + 2 == 4:</p>
<p><strong>print</strong> "I know math!"</p>
<p>&gt;&gt; I know math!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 84</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learning
A-Z: Hands-On</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
In Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learn
to create Machine Learning Algorithms in</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
from two Data Science experts. Code</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">templates
included.</a></p>
<p><img src="media/index-110_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-110_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Master Machine Learning on Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Have a great intuition of many Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make accurate predictions</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make powerful analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make robust Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Create strong added value to your business</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Use Machine Learning for personal purpose</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle specific topics like Reinforcement Learning, NLP and Deep
Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle advanced techniques like Dimensionality Reduction</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Know which Machine Learning model to choose for each type of
problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Build an army of powerful Machine Learning models and know how to
combine them to solve any</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Watch
Today →</a></p>
<p><span id="Chapter_15__Comparisons_1" class="anchor"></span>Chapter
15: Comparisons</p>
<p>Parameter Details</p>
<p>x First item to be compared</p>
<p>y Second item to be compared</p>
<p>Section 15.1: Chain Comparisons</p>
<p>You can compare multiple items with multiple comparison operators
with chain comparison. For example</p>
<p>x &gt; y &gt; z</p>
<p>is just a short form of:</p>
<p>x &gt; y <strong>and</strong> y &gt; z</p>
<p>This will evaluate to True only if both comparisons are True.</p>
<p>The general form is</p>
<p>a OP b OP c OP d ...</p>
<p>Where OP represents one of the multiple comparison operations you can
use, and the letters represent arbitrary</p>
<p>valid expressions.</p>
<p>Note that 0 != 1 != 0 evaluates to True, even though 0 != 0 is False.
Unlike the common mathematical notation in which x != y != z means that
x, y and z have different values. Chaining == operations has</p>
<p>the natural meaning in most cases, since equality is generally
transitive.</p>
<p>Style</p>
<p>There is no theoretical limit on how many items and comparison
operations you use as long you have proper</p>
<p>syntax:</p>
<p>1 &gt; -1 &lt; 2 &gt; 0.5 &lt; 100 != 24</p>
<p>The above returns True if each comparison returns True. However,
using convoluted chaining is not a good style. A good chaining will be
"directional", not more complicated than</p>
<p>1 &gt; x &gt; -4 &gt; y != 8</p>
<p>Side effects</p>
<p>As soon as one comparison returns False, the expression evaluates
immediately to False, skipping all remaining comparisons.</p>
<p>Note that the expression exp in a &gt; exp &gt; b will be evaluated
only once, whereas in the case of</p>
<p>a &gt; exp <strong>and</strong> exp &gt; b</p>
<p>exp will be computed twice if a &gt; exp is true.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 86</p>
<p><span id="Section_15_2__Comparison_by__is"
class="anchor"></span>Section 15.2: Comparison by `is` vs `==`</p>
<p>A common pitfall is confusing the equality comparison operators is
and ==.</p>
<p>a == b compares the value of a and b.</p>
<p>a <strong>is</strong> b will compare the <em>identities</em> of a and
b.</p>
<p>To illustrate:</p>
<p>a = 'Python is fun!'</p>
<p>b = 'Python is fun!'</p>
<p><em>a == b</em> # returns True</p>
<p><em>a <strong>is</strong> b</em> # returns False</p>
<p>a = [1, 2, 3, 4, 5]</p>
<p><em>b = a</em> # b references a</p>
<p>a == b <em># True</em></p>
<p><em>a <strong>is</strong> b</em> # True</p>
<p><em>b = a[:]</em> # b now references a copy of a</p>
<p>a == b <em># True</em></p>
<p><em>a <strong>is</strong> b</em> # False [!!]</p>
<p>Basically, is can be thought of as shorthand for id(a) == id(b).</p>
<p>Beyond this, there are quirks of the run-time environment that
further complicate things. Short strings and small integers will return
True when compared with is, due to the Python machine attempting to use
less memory for</p>
<p>identical objects.</p>
<p>a = 'short'</p>
<p>b = 'short'</p>
<p>c = 5</p>
<p>d = 5</p>
<p><em>a <strong>is</strong> b</em> # True</p>
<p><em>c <strong>is</strong> d</em> # True</p>
<p>But longer strings and larger integers will be stored separately.</p>
<p>a = 'not so short'</p>
<p>b = 'not so short'</p>
<p>c = 1000</p>
<p>d = 1000</p>
<p><em>a <strong>is</strong> b</em> # False</p>
<p><em>c <strong>is</strong> d</em> # False</p>
<p>You should use is to test for None:</p>
<p><strong>if</strong> myvar <strong>is not</strong> None:</p>
<p># not None</p>
<p>pass</p>
<p><strong>if</strong> myvar <strong>is</strong> None:</p>
<p># None</p>
<p>pass</p>
<p>A use of is is to test for a “sentinel” (i.e. a unique object).</p>
<p>sentinel = object()</p>
<p><strong>def</strong> myfunc(var=sentinel):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 87</p>
<p><span id="if_var_is_sentinel"
class="anchor"></span><strong>if</strong> var <strong>is</strong>
sentinel:</p>
<p># value wasn<em>’</em>t provided</p>
<p>pass</p>
<p>else<strong>:</strong></p>
<p># value was provided</p>
<p>pass</p>
<p>Section 15.3: Greater than or less than</p>
<p>x &gt; y</p>
<p>x &lt; y</p>
<p>These operators compare two types of values, they're the less than
and greater than operators. For numbers this</p>
<p>simply compares the numerical values to see which is larger:</p>
<p>12 &gt; 4</p>
<p># True</p>
<p>12 &lt; 4</p>
<p># False</p>
<p>1 &lt; 4</p>
<p># True</p>
<p>For strings they will compare lexicographically, which is similar to
alphabetical order but not quite the same.</p>
<p>"alpha" &lt; "beta"</p>
<p># True</p>
<p>"gamma" &gt; "beta"</p>
<p># True</p>
<p>"gamma" &lt; "OMEGA"</p>
<p># False</p>
<p>In these comparisons, lowercase letters are considered 'greater than'
uppercase, which is why "gamma" &lt; "OMEGA"</p>
<p>is false. If they were all uppercase it would return the expected
alphabetical ordering result:</p>
<p>"GAMMA" &lt; "OMEGA"</p>
<p># True</p>
<p>Each type defines it's calculation with the &lt; and &gt; operators
differently, so you should investigate what the</p>
<p>operators mean with a given type before using it.</p>
<p>Section 15.4: Not equal to</p>
<p>x != y</p>
<p>This returns True if x and y are not equal and otherwise returns
False.</p>
<p>12 != 1</p>
<p># True</p>
<p>12 != '12'</p>
<p># True</p>
<p>'12' != '12'</p>
<p># False</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 88</p>
<p><span id="Section_15_5__Equal_To" class="anchor"></span>Section 15.5:
Equal To</p>
<p>x == y</p>
<p>This expression evaluates if x and y are the same value and returns
the result as a boolean value. Generally both</p>
<p>type and value need to match, so the int 12 is not the same as the
string '12'.</p>
<p>12 == 12</p>
<p># True</p>
<p>12 == 1</p>
<p># False</p>
<p>'12' == '12'</p>
<p># True</p>
<p>'spam' == 'spam'</p>
<p># True</p>
<p>'spam' == 'spam '</p>
<p># False</p>
<p>'12' == 12</p>
<p># False</p>
<p>Note that each type has to define a function that will be used to
evaluate if two values are the same. For builtin types these functions
behave as you'd expect, and just evaluate things based on being the same
value. However</p>
<p>custom types could define equality testing as whatever they'd like,
including always returning True or always returning False.</p>
<p>Section 15.6: Comparing Objects</p>
<p>In order to compare the equality of custom classes, you can override
== and != by defining __eq__ and __ne__ methods. You can also override
__lt__ (&lt;), __le__ (&lt;=), __gt__ (&gt;), and __ge__ (&gt;). Note
that you only need to</p>
<p>override two comparison methods, and Python can handle the rest (==
is the same as <strong>not</strong> &lt; and <strong>not</strong> &gt;,
etc.)</p>
<p><strong>class</strong> Foo(object):</p>
<p><strong>def</strong> __init__(self, item):</p>
<p>self.my_item = item</p>
<p><strong>def</strong> __eq__(self, other):</p>
<p><strong>return</strong> self.my_item == other.my_item</p>
<p>a = Foo(5)</p>
<p>b = Foo(5)</p>
<p>a == b <em># True</em></p>
<p>a != b <em># False</em></p>
<p><em>a <strong>is</strong> b</em> # False</p>
<p>Note that this simple comparison assumes that other (the object being
compared to) is the same object type.</p>
<p>Comparing to another type will throw an error:</p>
<p><strong>class</strong> Bar(object):</p>
<p><strong>def</strong> __init__(self, item):</p>
<p>self.other_item = item</p>
<p><strong>def</strong> __eq__(self, other):</p>
<p><strong>return</strong> self.other_item == other.other_item</p>
<p><strong>def</strong> __ne__(self, other):</p>
<p><strong>return</strong> self.other_item != other.other_item</p>
<p>c = Bar(5)</p>
<p><em>a == c</em> # throws AttributeError: 'Foo' object has no
attribute 'other_item'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 89</p>
<p>Checking isinstance() or similar will help prevent this (if
desired).</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 90</p>
<p><span id="Chapter_16__Loops_1" class="anchor"></span>Chapter 16:
Loops</p>
<p>Parameter Details</p>
<p>boolean expression expression that can be evaluated in a boolean
context, e.g. x &lt; 10</p>
<p>variable variable name for the current element from the iterable</p>
<p>iterable anything that implements iterations</p>
<p>As one of the most basic functions in programming, loops are an
important piece to nearly every programming language. Loops enable
developers to set certain portions of their code to repeat through a
number of loops which</p>
<p>are referred to as iterations. This topic covers using multiple types
of loops and applications of loops in Python.</p>
<p>Section 16.1: Break and Continue in Loops</p>
<p>break statement</p>
<p>When a <strong>break</strong> statement executes inside a loop,
control flow "breaks" out of the loop immediately:</p>
<p>i = 0</p>
<p><strong>while</strong> i &lt; 7:</p>
<p>print<strong>(i)</strong></p>
<p><strong>if</strong> i == 4:</p>
<p><strong>print</strong>("Breaking from loop")</p>
<p>break</p>
<p>i += 1</p>
<p>The loop conditional will not be evaluated after the
<strong>break</strong> statement is executed. Note that
<strong>break</strong> statements are</p>
<p>only allowed <em>inside loops</em>, syntactically. A
<strong>break</strong> statement inside a function cannot be used to
terminate loops that called that function.</p>
<p>Executing the following prints every digit until number 4 when the
<strong>break</strong> statement is met and the loop stops:</p>
<p>0</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>Breaking from loop</p>
<p><strong>break</strong> statements can also be used inside
<strong>for</strong> loops, the other looping construct provided by
Python:</p>
<p><strong>for</strong> i <strong>in</strong> (0, 1, 2, 3, 4):</p>
<p>print<strong>(i)</strong></p>
<p><strong>if</strong> i == 2:</p>
<p>break</p>
<p>Executing this loop now prints:</p>
<p>0</p>
<p>1</p>
<p>2</p>
<p>Note that 3 and 4 are not printed since the loop has ended.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 91</p>
<p>If a loop has an <strong>else</strong> clause, it does not execute
when the loop is terminated through a <strong>break</strong>
statement.</p>
<p>continue statement</p>
<p>A <strong>continue</strong> statement will skip to the next iteration
of the loop bypassing the rest of the current block but</p>
<p>continuing the loop. As with <strong>break</strong>,
<strong>continue</strong> can only appear inside loops:</p>
<p><strong>for</strong> i <strong>in</strong> (0, 1, 2, 3, 4, 5):</p>
<p><strong>if</strong> i == 2 <strong>or</strong> i == 4:</p>
<p>continue</p>
<p>print<strong>(i)</strong></p>
<p>0</p>
<p>1</p>
<p>3</p>
<p>5</p>
<p>Note that 2 and 4 aren't printed, this is because
<strong>continue</strong> goes to the next iteration instead of
continuing on to <strong>print</strong>(i) when i == 2 or i == 4.</p>
<p>Nested Loops</p>
<p><strong>break</strong> and <strong>continue</strong> only operate on
a single level of loop. The following example will only break out of the
inner <strong>for</strong> loop, not the outer <strong>while</strong>
loop:</p>
<p><strong>while</strong> True:</p>
<p><strong>for</strong> i <strong>in</strong> range(1,5):</p>
<p><strong>if</strong> i == 2:</p>
<p><em><strong>break</strong></em> # Will only break out of the inner
loop!</p>
<p>Python doesn't have the ability to break out of multiple levels of
loop at once -- if this behavior is desired,</p>
<p>refactoring one or more loops into a function and replacing
<strong>break</strong> with <strong>return</strong> may be the way to
go.</p>
<p>Use return from within a function as a break</p>
<p>The <strong>return</strong> statement exits from a function, without
executing the code that comes after it.</p>
<p>If you have a loop inside a function, using <strong>return</strong>
from inside that loop is equivalent to having a <strong>break</strong>
as the rest of the code of the loop is not executed (<em>note that any
code after the loop is not executed either</em>):</p>
<p><strong>def</strong> break_loop():</p>
<p><strong>for</strong> i <strong>in</strong> range(1, 5):</p>
<p><strong>if</strong> (i == 2):</p>
<p>return<strong>(i)</strong></p>
<p>print<strong>(i)</strong></p>
<p>return<strong>(5)</strong></p>
<p>If you have nested loops, the <strong>return</strong> statement will
break all loops:</p>
<p><strong>def</strong> break_all():</p>
<p><strong>for</strong> j <strong>in</strong> range(1, 5):</p>
<p><strong>for</strong> i <strong>in</strong> range(1,4):</p>
<p><strong>if</strong> i*j == 6:</p>
<p>return<strong>(i)</strong></p>
<p>print<strong>(i*j)</strong></p>
<p>will output:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 92</p>
<p><span id="1___1_1" class="anchor"></span><em>1</em> # 1*1</p>
<p><em>2</em> # 1*2</p>
<p><em>3</em> # 1*3</p>
<p><em>4</em> # 1*4</p>
<p><em>2</em> # 2*1</p>
<p><em>4</em> # 2*2</p>
<p># return because 2*3 = 6, the remaining iterations of both loops are
not executed</p>
<p>Section 16.2: For loops</p>
<p><strong>for</strong> loops iterate over a collection of items, such
as list or dict, and run a block of code with each element from</p>
<p>the collection.</p>
<p><strong>for</strong> i <strong>in</strong> [0, 1, 2, 3, 4]:</p>
<p>print<strong>(i)</strong></p>
<p>The above <strong>for</strong> loop iterates over a list of
numbers.</p>
<p>Each iteration sets the value of i to the next element of the list.
So first it will be 0, then 1, then 2, etc. The output</p>
<p>will be as follow:</p>
<p>0</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>range is a function that returns a series of numbers under an
iterable form, thus it can be used in <strong>for</strong> loops:</p>
<p><strong>for</strong> i <strong>in</strong> range(5):</p>
<p>print<strong>(i)</strong></p>
<p>gives the exact same result as the first <strong>for</strong> loop.
Note that 5 is not printed as the range here is the first five numbers
counting from 0.</p>
<p><a
href="http://stackoverflow.com/questions/9884132/what-exactly-are-pythons-iterator-iterable-and-iteration-protocols">Iterable
objects and iterators</a></p>
<p><strong>for</strong> loop can iterate on any iterable object which is
an object which defines a __getitem__ or a __iter__ function. The
__iter__ function returns an iterator, which is an object with a next
function that is used to access the next</p>
<p>element of the iterable.</p>
<p>Section 16.3: Iterating over lists</p>
<p>To iterate through a list you can use <strong>for</strong>:</p>
<p><strong>for</strong> x <strong>in</strong> ['one', 'two', 'three',
'four']:</p>
<p>print<strong>(x)</strong></p>
<p>This will print out the elements of the list:</p>
<p>one</p>
<p>two</p>
<p>three</p>
<p>four</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 93</p>
<p><span id="The_range_function_generates_num" class="anchor"></span>The
range function generates numbers which are also often used in a for
loop.</p>
<p><strong>for</strong> x <strong>in</strong> range(1, 6):</p>
<p>print<strong>(x)</strong></p>
<p>The result will be a special <a
href="https://docs.python.org/3/library/stdtypes.html#ranges">range
sequence type</a> in python &gt;=3 and a list in python &lt;=2. Both can
be looped through</p>
<p>using the for loop.</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>If you want to loop though both the elements of a list <em>and</em>
have an index for the elements as well, you can use</p>
<p>Python's enumerate function:</p>
<p><strong>for</strong> index, item <strong>in</strong>
enumerate(['one', 'two', 'three', 'four']):</p>
<p><strong>print</strong>(index, '::', item)</p>
<p>enumerate will generate tuples, which are unpacked into index (an
integer) and item (the actual value from the list).</p>
<p>The above loop will print</p>
<p>(0, '::', 'one')</p>
<p>(1, '::', 'two')</p>
<p>(2, '::', 'three')</p>
<p>(3, '::', 'four')</p>
<p>Iterate over a list with value manipulation using map and
<strong>lambda</strong>, i.e. apply lambda function on each element in
the list:</p>
<p>x = map(<strong>lambda</strong> e : e.upper(), ['one', 'two',
'three', 'four']) <strong>print</strong>(x)</p>
<p>Output:</p>
<p>['ONE', 'TWO', 'THREE', 'FOUR'] <em># Python 2.x</em></p>
<p>NB: in Python 3.x map returns an iterator instead of a list so you in
case you need a list you have to cast the result
<strong>print</strong>(list(x))</p>
<p>Section 16.4: Loops with an "else" clause</p>
<p>The <strong>for</strong> and <strong>while</strong> compound
statements (loops) can optionally have an <strong>else</strong> clause
(in practice, this usage is fairly rare).</p>
<p>The <strong>else</strong> clause only executes after a
<strong>for</strong> loop terminates by iterating to completion, or
after a <strong>while</strong> loop</p>
<p>terminates by its conditional expression becoming false.</p>
<p><strong>for</strong> i <strong>in</strong> range(3):</p>
<p>print<strong>(i)</strong></p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>('done')</p>
<p>i = 0</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 94</p>
<p><strong>while</strong> i &lt; 3:</p>
<p>print<strong>(i)</strong></p>
<p>i += 1</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>('done')</p>
<p>output:</p>
<p>0</p>
<p>1</p>
<p>2</p>
<p>done</p>
<p>The <strong>else</strong> clause does <em>not</em> execute if the
loop terminates some other way (through a <strong>break</strong>
statement or by raising</p>
<p>an exception):</p>
<p><strong>for</strong> i <strong>in</strong> range(2):</p>
<p>print<strong>(i)</strong></p>
<p><strong>if</strong> i == 1:</p>
<p>break</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>('done')</p>
<p>output:</p>
<p>0</p>
<p>1</p>
<p>Most other programming languages lack this optional
<strong>else</strong> clause of loops. The use of the keyword
<strong>else</strong> in particular is often considered confusing.</p>
<p>The original concept for such a clause dates back to Donald Knuth and
the meaning of the <strong>else</strong> keyword becomes</p>
<p>clear if we rewrite a loop in terms of if statements and goto
statements from earlier days before structured</p>
<p>programming or from a lower-level assembly language.</p>
<p>For example:</p>
<p><strong>while</strong> loop_condition():</p>
<p>...</p>
<p><strong>if</strong> break_condition():</p>
<p>break</p>
<p>...</p>
<p>is equivalent to:</p>
<p># pseudocode</p>
<p>&lt;&gt;:</p>
<p><strong>if</strong> loop_condition():</p>
<p>...</p>
<p><strong>if</strong> break_condition():</p>
<p>goto &lt;&gt;</p>
<p>...</p>
<p>goto &lt;&gt;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 95</p>
<p><span class="anchor"></span>&lt;&gt;:</p>
<p>These remain equivalent if we attach an <strong>else</strong> clause
to each of them.</p>
<p>For example:</p>
<p><strong>while</strong> loop_condition():</p>
<p>...</p>
<p><strong>if</strong> break_condition():</p>
<p>break</p>
<p>...</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>('done')</p>
<p>is equivalent to:</p>
<p># pseudocode</p>
<p>&lt;&gt;:</p>
<p><strong>if</strong> loop_condition():</p>
<p>...</p>
<p><strong>if</strong> break_condition():</p>
<p>goto &lt;&gt;</p>
<p>...</p>
<p>goto &lt;&gt;</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>('done')</p>
<p>&lt;&gt;:</p>
<p>A <strong>for</strong> loop with an <strong>else</strong> clause can
be understood the same way. Conceptually, there is a loop condition
that</p>
<p>remains True as long as the iterable object or sequence still has
some remaining elements.</p>
<p>Why would one use this strange construct?</p>
<p>The main use case for the
<strong>for</strong>...<strong>else</strong> construct is a concise
implementation of search as for instance:</p>
<p>a = [1, 2, 3, 4]</p>
<p><strong>for</strong> i <strong>in</strong> a:</p>
<p><strong>if</strong> type(i) <strong>is not</strong> int:</p>
<p>print<strong>(i)</strong></p>
<p>break</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>("no exception")</p>
<p>To make the <strong>else</strong> in this construct less confusing
one can think of it as "<em>if not break</em>" or "<em>if not
found</em>".</p>
<p><a
href="https://mail.python.org/pipermail/python-ideas/2009-October/006155.html">Some
discussions on this can be found in [Python-ideas] Summary of for...else
threads</a>, <a
href="https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">Why
does python use 'else'</a></p>
<p><a
href="https://stackoverflow.com/questions/9979970/why-does-python-use-else-after-for-and-while-loops">after
for and while loops? , and</a> <a
href="http://python-notes.curiousefficiency.org/en/latest/python_concepts/break_else.html">Else
Clauses on Loop Statements</a></p>
<p>Section 16.5: The Pass Statement</p>
<p><strong>pass</strong> is a null statement for when a statement is
required by Python syntax (such as within the body of a
<strong>for</strong> or</p>
<p><strong>while</strong> loop), but no action is required or desired by
the programmer. This can be useful as a placeholder for code that is yet
to be written.</p>
<p><strong>for</strong> x <strong>in</strong> range(10):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 96</p>
<p><span id="pass__we_don_t_want_to_do_anythi"
class="anchor"></span><em><strong>pass</strong></em> #we don't want to
do anything, or are not ready to do anything here, so we'll pass</p>
<p>In this example, nothing will happen. The <strong>for</strong> loop
will complete without error, but no commands or code will be actioned.
<strong>pass</strong> allows us to run our code successfully without
having all commands and action fully implemented.</p>
<p>Similarly, <strong>pass</strong> can be used in
<strong>while</strong> loops, as well as in selections and function
definitions etc.</p>
<p><strong>while</strong> x == y:</p>
<p>pass</p>
<p>Section 16.6: Iterating over dictionaries</p>
<p>Considering the following dictionary:</p>
<p>d = {"a": 1, "b": 2, "c": 3}</p>
<p>To iterate through its keys, you can use:</p>
<p><strong>for</strong> key <strong>in</strong> d:</p>
<p>print<strong>(key)</strong></p>
<p>Output:</p>
<p>"a"</p>
<p>"b"</p>
<p>"c"</p>
<p>This is equivalent to:</p>
<p><strong>for</strong> key <strong>in</strong> d.keys():</p>
<p>print<strong>(key)</strong></p>
<p>or in Python 2:</p>
<p><strong>for</strong> key <strong>in</strong> d.iterkeys():</p>
<p>print<strong>(key)</strong></p>
<p>To iterate through its values, use:</p>
<p><strong>for</strong> value <strong>in</strong> d.values():</p>
<p><strong>print</strong>(value)</p>
<p>Output:</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>To iterate through its keys and values, use:</p>
<p><strong>for</strong> key, value <strong>in</strong> d.items():</p>
<p><strong>print</strong>(key, "::", value)</p>
<p>Output:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 97</p>
<p><span id="a____1" class="anchor"></span>a :: 1</p>
<p>b :: 2</p>
<p>c :: 3</p>
<p>Note that in Python 2, .keys(), .values() and .items() return a list
object. If you simply need to iterate through</p>
<p>the result, you can use the equivalent .iterkeys(), .itervalues() and
.iteritems().</p>
<p>The difference between .keys() and .iterkeys(), .values() and
.itervalues(), .items() and .iteritems() is</p>
<p>that the iter* methods are generators. Thus, the elements within the
dictionary are yielded one by one as they are evaluated. When a list
object is returned, all of the elements are packed into a list and then
returned for further</p>
<p>evaluation.</p>
<p>Note also that in Python 3, Order of items printed in the above
manner does not follow any order.</p>
<p>Section 16.7: The "half loop" do-while</p>
<p>Unlike other languages, Python doesn't have a do-until or a do-while
construct (this will allow code to be executed</p>
<p>once before the condition is tested). However, you can combine a
<strong>while</strong> True with a <strong>break</strong> to achieve the
same purpose.</p>
<p>a = 10</p>
<p><strong>while</strong> True:</p>
<p>a = a-1</p>
<p>print<strong>(a)</strong></p>
<p><strong>if</strong> a&lt;7:</p>
<p>break</p>
<p><strong>print</strong>('Done.')</p>
<p>This will print:</p>
<p>9</p>
<p>8</p>
<p>7</p>
<p>6</p>
<p>Done.</p>
<p>Section 16.8: Looping and Unpacking</p>
<p>If you want to loop over a list of tuples for example:</p>
<p>collection = [('a', 'b', 'c'), ('x', 'y', 'z'), ('1', '2', '3')]</p>
<p>instead of doing something like this:</p>
<p><strong>for</strong> item <strong>in</strong> collection:</p>
<p>i1 = item[0]</p>
<p>i2 = item[1]</p>
<p>i3 = item[2]</p>
<p># logic</p>
<p>or something like this:</p>
<p><strong>for</strong> item <strong>in</strong> collection:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 98</p>
<p><span id="i1__i2__i3___item" class="anchor"></span>i1, i2, i3 =
item</p>
<p># logic</p>
<p>You can simply do this:</p>
<p><strong>for</strong> i1, i2, i3 <strong>in</strong> collection:</p>
<p># logic</p>
<p>This will also work for <em>most</em> types of iterables, not just
tuples.</p>
<p>Section 16.9: Iterating dierent portion of a list with dierent</p>
<p>step size</p>
<p>Suppose you have a long list of elements and you are only interested
in every other element of the list. Perhaps you</p>
<p>only want to examine the first or last elements, or a specific range
of entries in your list. Python has strong indexing built-in
capabilities. Here are some examples of how to achieve these
scenarios.</p>
<p>Here's a simple list that will be used throughout the examples:</p>
<p>lst = ['alpha', 'bravo', 'charlie', 'delta', 'echo']</p>
<p>Iteration over the whole list</p>
<p>To iterate over each element in the list, a <strong>for</strong> loop
like below can be used:</p>
<p><strong>for</strong> s <strong>in</strong> lst:</p>
<p><em><strong>print</strong> s[:1]</em> # print the first letter</p>
<p>The <strong>for</strong> loop assigns s for each element of lst. This
will print:</p>
<p>a</p>
<p>b</p>
<p>c</p>
<p>d</p>
<p>e</p>
<p>Often you need both the element and the index of that element. The
enumerate keyword performs that task.</p>
<p><strong>for</strong> idx, s <strong>in</strong> enumerate(lst):</p>
<p><strong>print</strong>("%s has an index of %d" % (s, idx))</p>
<p>The index idx will start with zero and increment for each iteration,
while the s will contain the element being processed. The previous
snippet will output:</p>
<p>alpha has an index of 0</p>
<p>bravo has an index of 1</p>
<p>charlie has an index of 2</p>
<p>delta has an index of 3</p>
<p>echo has an index of 4</p>
<p>Iterate over sub-list</p>
<p>If we want to iterate over a range (remembering that Python uses
zero-based indexing), use the range keyword.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 99</p>
<p><span id="for_i_in_range_2_4"
class="anchor"></span><strong>for</strong> i <strong>in</strong>
range(2,4):</p>
<p><strong>print</strong>("lst at %d contains %s" % (i, lst[i]))</p>
<p>This would output:</p>
<p>lst at 2 contains charlie</p>
<p>lst at 3 contains delta</p>
<p>The list may also be sliced. The following slice notation goes from
element at index 1 to the end with a step of 2. The two
<strong>for</strong> loops give the same result.</p>
<p><strong>for</strong> s <strong>in</strong> lst[1::2]:</p>
<p>print<strong>(s)</strong></p>
<p><strong>for</strong> i <strong>in</strong> range(1, len(lst), 2):</p>
<p><strong>print</strong>(lst[i])</p>
<p>The above snippet outputs:</p>
<p>bravo</p>
<p>delta</p>
<p>Indexing and slicing is a topic of its own.</p>
<p>Section 16.10: While Loop</p>
<p>A <strong>while</strong> loop will cause the loop statements to be
executed until the loop condition is falsey. The following code will
execute the loop statements a total of 4 times.</p>
<p>i = 0</p>
<p><strong>while</strong> i &lt; 4:</p>
<p>#loop statements</p>
<p>i = i + 1</p>
<p>While the above loop can easily be translated into a more elegant
<strong>for</strong> loop, <strong>while</strong> loops are useful for
checking if</p>
<p>some condition has been met. The following loop will continue to
execute until myObject is ready.</p>
<p>myObject = anObject()</p>
<p><strong>while</strong> myObject.isNotReady():</p>
<p>myObject.tryToGetReady()</p>
<p><strong>while</strong> loops can also run without a condition by
using numbers (complex or real) or True:</p>
<p>import <strong>cmath</strong></p>
<p>complex_num = cmath.sqrt(-1)</p>
<p><em><strong>while</strong> complex_num:</em> # You can also replace
complex_num with any number, True or a value of any type</p>
<p><em><strong>print</strong>(complex_num)</em> # Prints 1j forever</p>
<p>If the condition is always true the while loop will run forever
(infinite loop) if it is not terminated by a break or return statement
or an exception.</p>
<p><strong>while</strong> True:</p>
<p><strong>print</strong> "Infinite loop"</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 100</p>
<p># Infinite loop</p>
<p># Infinite loop</p>
<p># Infinite loop</p>
<p># ...</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 101</p>
<p><span id="Chapter_17__Arrays_1" class="anchor"></span>Chapter 17:
Arrays</p>
<p>Parameter Details</p>
<p>b Represents signed integer of size 1 byte</p>
<p>B Represents unsigned integer of size 1 byte</p>
<p>c Represents character of size 1 byte</p>
<p>u Represents unicode character of size 2 bytes</p>
<p>h Represents signed integer of size 2 bytes</p>
<p>H Represents unsigned integer of size 2 bytes</p>
<p>i Represents signed integer of size 2 bytes</p>
<p>I Represents unsigned integer of size 2 bytes</p>
<p>w Represents unicode character of size 4 bytes</p>
<p>l Represents signed integer of size 4 bytes</p>
<p>L Represents unsigned integer of size 4 bytes</p>
<p>f Represents floating point of size 4 bytes</p>
<p>d Represents floating point of size 8 bytes</p>
<p>"Arrays" in Python are not the arrays in conventional programming
languages like C and Java, but closer to lists. A list can be a
collection of either homogeneous or heterogeneous elements, and may
contain ints, strings or other</p>
<p>lists.</p>
<p>Section 17.1: Access individual elements through indexes</p>
<p>Individual elements can be accessed through indexes. Python arrays
are zero-indexed. Here is an example:</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p><strong>print</strong>(my_array[1])</p>
<p># 2</p>
<p><strong>print</strong>(my_array[2])</p>
<p># 3</p>
<p><strong>print</strong>(my_array[0])</p>
<p># 1</p>
<p>Section 17.2: Basic Introduction to Arrays</p>
<p>An array is a data structure that stores values of same data type. In
Python, this is the main difference between arrays and lists.</p>
<p>While python lists can contain values corresponding to different data
types, arrays in python can only contain values corresponding to same
data type. In this tutorial, we will understand the Python arrays with
few examples.</p>
<p>If you are new to Python, get started with the Python Introduction
article.</p>
<p>To use arrays in python language, you need to import the standard
array module. This is because array is not a</p>
<p>fundamental data type like strings, integer etc. Here is how you can
import array module in python :</p>
<p>from <strong>array</strong> import <strong>*</strong></p>
<p>Once you have imported the array module, you can declare an array.
Here is how you do it:</p>
<p>arrayIdentifierName = array(typecode, [Initializers])</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 102</p>
<p><span id="In_the_declaration_above__arrayI" class="anchor"></span>In
the declaration above, arrayIdentifierName is the name of array,
typecode lets python know the type of array and Initializers are the
values with which array is initialized.</p>
<p>Typecodes are the codes that are used to define the type of array
values or the type of array. The table in the parameters section shows
the possible values you can use when declaring an array and it's
type.</p>
<p>Here is a real world example of python array declaration :</p>
<p>my_array = array('i',[1,2,3,4])</p>
<p>In the example above, typecode used is i. This typecode represents
signed integer whose size is 2 bytes.</p>
<p>Here is a simple example of an array containing 5 integers</p>
<p>from <strong>array</strong> import <strong>*</strong></p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p><strong>for</strong> i <strong>in</strong> my_array:</p>
<p>print<strong>(i)</strong></p>
<p># 1</p>
<p># 2</p>
<p># 3</p>
<p># 4</p>
<p># 5</p>
<p>Section 17.3: Append any value to the array using append()</p>
<p>method</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_array.append(6)</p>
<p># array('i', [1, 2, 3, 4, 5, 6])</p>
<p>Note that the value 6 was appended to the existing array values.</p>
<p>Section 17.4: Insert value in an array using insert() method</p>
<p>We can use the insert() method to insert a value at any index of the
array. Here is an example :</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_array.insert(0,0)</p>
<p>#array('i', [0, 1, 2, 3, 4, 5])</p>
<p>In the above example, the value 0 was inserted at index 0. Note that
the first argument is the index while second</p>
<p>argument is the value.</p>
<p>Section 17.5: Extend python array using extend() method</p>
<p>A python array can be extended with more than one value using
extend() method. Here is an example :</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_extnd_array = array('i', [7,8,9,10])</p>
<p>my_array.extend(my_extnd_array)</p>
<p># array('i', [1, 2, 3, 4, 5, 7, 8, 9, 10])</p>
<p>We see that the array my_array was extended with values from
my_extnd_array.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 103</p>
<p><span id="Section_17_6__Add_items_from_lis"
class="anchor"></span>Section 17.6: Add items from list into array using
fromlist()</p>
<p>method</p>
<p>Here is an example:</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>c=[11,12,13]</p>
<p>my_array.fromlist(c)</p>
<p># array('i', [1, 2, 3, 4, 5, 11, 12, 13])</p>
<p>So we see that the values 11,12 and 13 were added from list c to
my_array.</p>
<p>Section 17.7: Remove any array element using remove()</p>
<p>method</p>
<p>Here is an example :</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_array.remove(4)</p>
<p># array('i', [1, 2, 3, 5])</p>
<p>We see that the element 4 was removed from the array.</p>
<p>Section 17.8: Remove last array element using pop() method</p>
<p>pop removes the last element from the array. Here is an example :</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_array.pop()</p>
<p># array('i', [1, 2, 3, 4])</p>
<p>So we see that the last element (5) was popped out of array.</p>
<p>Section 17.9: Fetch any element through its index using index()</p>
<p>method</p>
<p>index() returns first index of the matching value. Remember that
arrays are zero-indexed.</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p><strong>print</strong>(my_array.index(5))</p>
<p># 5</p>
<p>my_array = array('i', [1,2,3,3,5])</p>
<p><strong>print</strong>(my_array.index(3))</p>
<p># 3</p>
<p>Note in that second example that only one index was returned, even
though the value exists twice in the array</p>
<p>Section 17.10: Reverse a python array using reverse() method</p>
<p>The reverse() method does what the name says it will do - reverses
the array. Here is an example :</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_array.reverse()</p>
<p># array('i', [5, 4, 3, 2, 1])</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 104</p>
<p><span id="Section_17_11__Get_array_bu_er_i"
class="anchor"></span>Section 17.11: Get array buer information
through</p>
<p>buer_info() method</p>
<p>This method provides you the array buffer start address in memory and
number of elements in array. Here is an example:</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>my_array.buffer_info()</p>
<p>(33881712, 5)</p>
<p>Section 17.12: Check for number of occurrences of an element</p>
<p>using count() method</p>
<p>count() will return the number of times and element appears in an
array. In the following example we see that the</p>
<p>value 3 occurs twice.</p>
<p>my_array = array('i', [1,2,3,3,5])</p>
<p>my_array.count(3)</p>
<p># 2</p>
<p>Section 17.13: Convert array to string using tostring() method</p>
<p>tostring() converts the array to a string.</p>
<p>my_char_array = array('c', ['g','e','e','k'])</p>
<p># array('c', 'geek')</p>
<p><strong>print</strong>(my_char_array.tostring())</p>
<p># geek</p>
<p>Section 17.14: Convert array to a python list with same</p>
<p>elements using tolist() method</p>
<p>When you need a Python list object, you can utilize the tolist()
method to convert your array to a list.</p>
<p>my_array = array('i', [1,2,3,4,5])</p>
<p>c = my_array.tolist()</p>
<p># [1, 2, 3, 4, 5]</p>
<p>Section 17.15: Append a string to char array using fromstring()</p>
<p>method</p>
<p>You are able to append a string to a character array using
fromstring()</p>
<p>my_char_array = array('c', ['g','e','e','k'])</p>
<p>my_char_array.fromstring("stuff")</p>
<p><strong>print</strong>(my_char_array)</p>
<p>#array('c', 'geekstuff')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 105</p>
<p><span id="Chapter_18__Multidimensional_arr_1"
class="anchor"></span>Chapter 18: Multidimensional arrays</p>
<p>Section 18.1: Lists in lists</p>
<p>A good way to visualize a 2d array is as a list of lists. Something
like this:</p>
<p>lst=[[1,2,3],[4,5,6],[7,8,9]]</p>
<p>here the outer list lst has three things in it. each of those things
is another list: The first one is: [1,2,3], the second one is: [4,5,6]
and the third one is: [7,8,9]. You can access these lists the same way
you would access another</p>
<p>other element of a list, like this:</p>
<p><strong>print</strong> (lst[0])</p>
<p>#output: [1, 2, 3]</p>
<p><strong>print</strong> (lst[1])</p>
<p>#output: [4, 5, 6]</p>
<p><strong>print</strong> (lst[2])</p>
<p>#output: [7, 8, 9]</p>
<p>You can then access the different elements in each of those lists the
same way:</p>
<p><strong>print</strong> (lst[0][0])</p>
<p>#output: 1</p>
<p><strong>print</strong> (lst[0][1])</p>
<p>#output: 2</p>
<p>Here the first number inside the [] brackets means get the list in
that position. In the above example we used the number 0 to mean get the
list in the 0th position which is [1,2,3]. The second set of [] brackets
means get the</p>
<p>item in that position from the inner list. In this case we used both
0 and 1 the 0th position in the list we got is the number 1 and in the
1st position it is 2</p>
<p>You can also set values inside these lists the same way:</p>
<p>lst[0]=[10,11,12]</p>
<p>Now the list is [[10,11,12],[4,5,6],[7,8,9]]. In this example we
changed the whole first list to be a completely</p>
<p>new list.</p>
<p>lst[1][2]=15</p>
<p>Now the list is [[10,11,12],[4,5,15],[7,8,9]]. In this example we
changed a single element inside of one of the inner lists. First we went
into the list at position 1 and changed the element within it at
position 2, which was 6 now</p>
<p>it's 15.</p>
<p>Section 18.2: Lists in lists in lists in..</p>
<p>This behaviour can be extended. Here is a 3-dimensional array:</p>
<p>[[[111,112,113],[121,122,123],[131,132,133]],[[211,212,213],[221,222,223],[231,232,233]],[[311,312,
313],[321,322,323],[331,332,333]]]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 106</p>
<p>As is probably obvious, this gets a bit hard to read. Use backslashes
to break up the different dimensions:</p>
<p>[[[111,112,113],[121,122,123],[131,132,133]],\</p>
<p>[[211,212,213],[221,222,223],[231,232,233]],\</p>
<p>[[311,312,313],[321,322,323],[331,332,333]]]</p>
<p>By nesting the lists like this, you can extend to arbitrarily high
dimensions.</p>
<p>Accessing is similar to 2D arrays:</p>
<p><strong>print</strong>(myarray)</p>
<p><strong>print</strong>(myarray[1])</p>
<p><strong>print</strong>(myarray[2][1])</p>
<p><strong>print</strong>(myarray[1][0][2])</p>
<p>etc.</p>
<p>And editing is also similar:</p>
<p>myarray[1]=new_n-1_d_list</p>
<p>myarray[2][1]=new_n-2_d_list</p>
<p><em>myarray[1][0][2]=new_n-3_d_list</em> #or a single number if
you're dealing with 3D arrays <em>etc.</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 107</p>
<p><span id="Chapter_19__Dictionary_1" class="anchor"></span>Chapter 19:
Dictionary</p>
<p>Parameter Details</p>
<p>key The desired key to lookup</p>
<p>value The value to set or return</p>
<p>Section 19.1: Introduction to Dictionary</p>
<p>A dictionary is an example of a <em>key value store</em> also known
as <em>Mapping</em> in Python. It allows you to store and retrieve</p>
<p>elements by referencing a key. As dictionaries are referenced by key,
they have very fast lookups. As they are primarily used for referencing
items by key, they are not sorted.</p>
<p>creating a dict</p>
<p>Dictionaries can be initiated in many ways:</p>
<p>literal syntax</p>
<p><em>d = {}</em> # empty dict</p>
<p><em>d = {'key': 'value'}</em> # dict with initial values</p>
<p>Python 3.x Version ≥ 3.5</p>
<p># Also unpacking one or multiple dictionaries with the literal syntax
is possible</p>
<p># makes a shallow copy of otherdict</p>
<p>d = {**otherdict}</p>
<p># also updates the shallow copy with the contents of the
yetanotherdict. <em>d = {**otherdict, **yetanotherdict}</em></p>
<p>dict comprehension</p>
<p>d = {k:v <strong>for</strong> k,v <strong>in</strong> [('key',
'value',)]}</p>
<p>see also: Comprehensions</p>
<p>built-in class: dict()</p>
<p><em>d = dict()</em> # empty dict</p>
<p><em>d = dict(key='value')</em> # explicit keyword arguments <em>d =
dict([('key', 'value')])</em> # passing in a list of key/value pairs #
make a shallow copy of another dict (only possible if keys are only
strings!) <em>d = dict(**otherdict)</em></p>
<p>modifying a dict</p>
<p>To add items to a dictionary, simply create a new key with a
value:</p>
<p>d['newkey'] = 42</p>
<p>It also possible to add list and dictionary as value:</p>
<p>d['new_list'] = [1, 2, 3]</p>
<p>d['new_dict'] = {'nested_dict': 1}</p>
<p>To delete an item, delete the key from the dictionary:</p>
<p><strong>del</strong> d['newkey']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 108</p>
<p><span id="Section_19_2__Avoiding_KeyError"
class="anchor"></span>Section 19.2: Avoiding KeyError Exceptions</p>
<p>One common pitfall when using dictionaries is to access a
non-existent key. This typically results in a KeyError</p>
<p>exception</p>
<p>mydict = {}</p>
<p>mydict['not there']</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>KeyError: 'not there'</p>
<p>One way to avoid key errors is to use the dict.get method, which
allows you to specify a default value to return in</p>
<p>the case of an absent key.</p>
<p>value = mydict.get(key, default_value)</p>
<p>Which returns mydict[key] if it exists, but otherwise returns
default_value. Note that this doesn't add key to</p>
<p>mydict . So if you want to retain that key value pair, you should use
mydict.setdefault(key, default_value),</p>
<p>which <em>does</em> store the key value pair.</p>
<p>mydict = {}</p>
<p><strong>print</strong>(mydict)</p>
<p># {}</p>
<p><strong>print</strong>(mydict.get("foo", "bar"))</p>
<p># bar</p>
<p><strong>print</strong>(mydict)</p>
<p># {}</p>
<p><strong>print</strong>(mydict.setdefault("foo", "bar"))</p>
<p># bar</p>
<p><strong>print</strong>(mydict)</p>
<p># {'foo': 'bar'}</p>
<p>An alternative way to deal with the problem is catching the
exception</p>
<p>try<strong>:</strong></p>
<p>value = mydict[key]</p>
<p><strong>except</strong> KeyError:</p>
<p>value = default_value</p>
<p>You could also check if the key is in the dictionary.</p>
<p><strong>if</strong> key <strong>in</strong> mydict:</p>
<p>value = mydict[key]</p>
<p>else<strong>:</strong></p>
<p>value = default_value</p>
<p>Do note, however, that in multi-threaded environments it is possible
for the key to be removed from the dictionary after you check, creating
a race condition where the exception can still be thrown.</p>
<p>Another option is to use a subclass of dict, collections.defaultdict,
that has a default_factory to create new entries in the dict when given
a new_key.</p>
<p>Section 19.3: Iterating Over a Dictionary</p>
<p>If you use a dictionary as an iterator (e.g. in a
<strong>for</strong> statement), it traverses the <strong>keys</strong>
of the dictionary. For example:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 109</p>
<p><span id="d_____a___1___b___2___c__3" class="anchor"></span>d = {'a':
1, 'b': 2, 'c':3}</p>
<p><strong>for</strong> key <strong>in</strong> d:</p>
<p><strong>print</strong>(key, d[key])</p>
<p># c 3</p>
<p># b 2</p>
<p># a 1</p>
<p>The same is true when used in a comprehension</p>
<p><strong>print</strong>([key <strong>for</strong> key
<strong>in</strong> d])</p>
<p># ['c', 'b', 'a']</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>The items() method can be used to loop over both the
<strong>key</strong> and <strong>value</strong> simultaneously:</p>
<p><strong>for</strong> key, value <strong>in</strong> d.items():</p>
<p><strong>print</strong>(key, value)</p>
<p># c 3</p>
<p># b 2</p>
<p># a 1</p>
<p>While the values() method can be used to iterate over only the
values, as would be expected:</p>
<p><strong>for</strong> key, value <strong>in</strong> d.values():</p>
<p><strong>print</strong>(key, value)</p>
<p># 3</p>
<p># 2</p>
<p># 1</p>
<p>Python 2.x Version ≥ 2.2</p>
<p>Here, the methods keys(), values() and items() return lists, and
there are the three extra methods iterkeys()</p>
<p>itervalues() and iteritems() to return iterators.</p>
<p>Section 19.4: Dictionary with default values</p>
<p>Available in the standard library as <a
href="https://docs.python.org/3/library/collections.html#collections.defaultdict">defaultdict</a></p>
<p><strong>from</strong> collections <strong>import</strong>
defaultdict</p>
<p>d = defaultdict(int)</p>
<p>d['key'] <em># 0</em></p>
<p>d['key'] = 5</p>
<p>d['key'] <em># 5</em></p>
<p>d = defaultdict(<strong>lambda</strong>: 'empty')</p>
<p>d['key'] <em># 'empty'</em></p>
<p>d['key'] = 'full'</p>
<p>d['key'] <em># 'full'</em></p>
<p>[*] Alternatively, if you must use the built-in dict class, using
dict.setdefault() will allow you to create a default whenever you access
a key that did not exist before:</p>
<p>&gt;&gt;&gt; d = {}</p>
<p>{}</p>
<p>&gt;&gt;&gt; d.setdefault('Another_key', []).append("This worked!")
&gt;&gt;&gt; d</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 110</p>
<p><span id="__Another_key_____This_worked"
class="anchor"></span>{'Another_key': ['This worked!']}</p>
<p>Keep in mind that if you have many values to add, dict.setdefault()
will create a new instance of the initial value (in this example a [])
every time it's called - which may create unnecessary workloads.</p>
<p><em>[*]</em> Python Cookbook, 3rd edition, by David Beazley and Brian
K. Jones (O<em>’</em>Reilly). Copyright 2013 David Beazley and Brian</p>
<p>Jones, 978-1-449-34037-7.</p>
<p>Section 19.5: Merging dictionaries</p>
<p>Consider the following dictionaries:</p>
<p>&gt;&gt;&gt; fish = {'name': "Nemo", 'hands': "fins", 'special':
"gills"} &gt;&gt;&gt; dog = {'name': "Clifford", 'hands': "paws",
'color': "red"}</p>
<p>Python 3.5+</p>
<p>&gt;&gt;&gt; fishdog = {**fish, **dog}</p>
<p>&gt;&gt;&gt; fishdog</p>
<p>{'hands': 'paws', 'color': 'red', 'name': 'Clifford', 'special':
'gills'}</p>
<p>As this example demonstrates, duplicate keys map to their lattermost
value (for example "Clifford" overrides</p>
<p>"Nemo").</p>
<p>Python 3.3+</p>
<p>&gt;&gt;&gt; <strong>from</strong> collections
<strong>import</strong> ChainMap</p>
<p>&gt;&gt;&gt; dict(ChainMap(fish, dog))</p>
<p>{'hands': 'fins', 'color': 'red', 'special': 'gills', 'name':
'Nemo'}</p>
<p>With this technique the foremost value takes precedence for a given
key rather than the last ("Clifford" is thrown</p>
<p>out in favor of "Nemo").</p>
<p>Python 2.x, 3.x</p>
<p>&gt;&gt;&gt; <strong>from</strong> itertools <strong>import</strong>
chain</p>
<p>&gt;&gt;&gt; dict(chain(fish.items(), dog.items()))</p>
<p>{'hands': 'paws', 'color': 'red', 'name': 'Clifford', 'special':
'gills'}</p>
<p>This uses the lattermost value, as with the **-based technique for
merging ("Clifford" overrides "Nemo").</p>
<p>&gt;&gt;&gt; fish.update(dog)</p>
<p>&gt;&gt;&gt; fish</p>
<p>{'color': 'red', 'hands': 'paws', 'name': 'Clifford', 'special':
'gills'}</p>
<p>dict.update uses the latter dict to overwrite the previous one.</p>
<p>Section 19.6: Accessing keys and values</p>
<p>When working with dictionaries, it's often necessary to access all
the keys and values in the dictionary, either in a <strong>for</strong>
loop, a list comprehension, or just as a plain list.</p>
<p>Given a dictionary like:</p>
<p>mydict = {</p>
<p>'a': '1',</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 111</p>
<p><span id="_b____2" class="anchor"></span>'b': '2'</p>
<p>}</p>
<p>You can get a list of keys using the keys() method:</p>
<p><strong>print</strong>(mydict.keys())</p>
<p># Python2: ['a', 'b']</p>
<p># Python3: dict_keys(['b', 'a'])</p>
<p>If instead you want a list of values, use the values() method:</p>
<p><strong>print</strong>(mydict.values())</p>
<p># Python2: ['1', '2']</p>
<p># Python3: dict_values(['2', '1'])</p>
<p>If you want to work with both the key and its corresponding value,
you can use the items() method:</p>
<p><strong>print</strong>(mydict.items())</p>
<p># Python2: [('a', '1'), ('b', '2')]</p>
<p># Python3: dict_items([('b', '2'), ('a', '1')])</p>
<p><strong>NOTE:</strong> Because a dict is unsorted, keys(), values(),
and items() have no sort order. Use sort(), sorted(), or an</p>
<p>OrderedDict if you care about the order that these methods
return.</p>
<p><strong>Python 2/3 Difference:</strong> In Python 3, these methods
return special iterable objects, not lists, and are the equivalent</p>
<p>of the Python 2 iterkeys(), itervalues(), and iteritems() methods.
These objects can be used like lists for the</p>
<p><a href="https://www.python.org/dev/peps/pep-3106/">most part, though
there are some differences. See PEP 3106 for more details.</a></p>
<p>Section 19.7: Accessing values of a dictionary</p>
<p>dictionary = {"Hello": 1234, "World": 5678}</p>
<p><strong>print</strong>(dictionary["Hello"])</p>
<p>The above code will print 1234.</p>
<p>The string "Hello" in this example is called a <em>key</em>. It is
used to lookup a value in the dict by placing the key in square
brackets.</p>
<p>The number 1234 is seen after the respective colon in the dict
definition. This is called the <em>value</em> that "Hello" <em>maps</em>
<em>to</em> in this dict.</p>
<p>Looking up a value like this with a key that does not exist will
raise a KeyError exception, halting execution if uncaught. If we want to
access a value without risking a KeyError, we can use the dictionary.get
method. By</p>
<p>default if the key does not exist, the method will return None. We
can pass it a second value to return instead of None in the event of a
failed lookup.</p>
<p>w = dictionary.get("whatever")</p>
<p>x = dictionary.get("whatever", "nuh-uh")</p>
<p>In this example w will get the value None and x will get the value
"nuh-uh".</p>
<p>Section 19.8: Creating a dictionary</p>
<p>Rules for creating a dictionary:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 112</p>
<p><span id="Every_key_must_be_unique__otherw"
class="anchor"></span>Every key must be <strong>unique</strong>
(otherwise it will be overridden)</p>
<p>Every key must be <strong>hashable</strong> (can use the hash
function to hash it; otherwise TypeError will be thrown) There is no
particular order for the keys.</p>
<p># Creating and populating it with values</p>
<p>stock = {'eggs': 5, 'milk': 2}</p>
<p># Or creating an empty dictionary</p>
<p>dictionary = {}</p>
<p># And populating it after</p>
<p>dictionary['eggs'] = 5</p>
<p>dictionary['milk'] = 2</p>
<p># Values can also be lists</p>
<p>mydict = {'a': [1, 2, 3], 'b': ['one', 'two', 'three']}</p>
<p># Use list.append() method to add new elements to the values list
<em>mydict['a'].append(4)</em> # =&gt; {'a': [1, 2, 3, 4], 'b': ['one',
'two', 'three']} <em>mydict['b'].append('four')</em> # =&gt; {'a': [1,
2, 3, 4], 'b': ['one', 'two', 'three', 'four']}</p>
<p># We can also create a dictionary using a list of two-items tuples
<em>iterable = [('eggs', 5), ('milk', 2)]</em></p>
<p>dictionary = dict(iterables)</p>
<p># Or using keyword argument:</p>
<p>dictionary = dict(eggs=5, milk=2)</p>
<p># Another way will be to use the dict.fromkeys:</p>
<p>dictionary = dict.fromkeys((milk, eggs)) <em># =&gt; {'milk': None,
'eggs': None}</em> dictionary = dict.fromkeys((milk, eggs), (2, 5))
<em># =&gt; {'milk': 2, 'eggs': 5}</em></p>
<p>Section 19.9: Creating an ordered dictionary</p>
<p>You can create an ordered dictionary which will follow a determined
order when iterating over the keys in the</p>
<p>dictionary.</p>
<p>Use OrderedDict from the collections module. This will always return
the dictionary elements in the original</p>
<p>insertion order when iterated over.</p>
<p><strong>from</strong> collections <strong>import</strong>
OrderedDict</p>
<p>d = OrderedDict()</p>
<p>d['first'] = 1</p>
<p>d['second'] = 2</p>
<p>d['third'] = 3</p>
<p>d['last'] = 4</p>
<p># Outputs "first 1", "second 2", "third 3", "last 4"
<em><strong>for</strong> key <strong>in</strong> d:</em></p>
<p><strong>print</strong>(key, d[key])</p>
<p>Section 19.10: Unpacking dictionaries using the ** operator</p>
<p>You can use the ** keyword argument unpacking operator to deliver the
key-value pairs in a dictionary into a</p>
<p>function's arguments. A simplified example from the <a
href="https://docs.python.org/3/tutorial/controlflow.html#unpacking-argument-lists">official
documentation</a>:</p>
<p>&gt;&gt;&gt;</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 113</p>
<p><span id="____def_parrot_voltage__state__a"
class="anchor"></span>&gt;&gt;&gt; <strong>def</strong> parrot(voltage,
state, action):</p>
<p>... <strong>print</strong>("This parrot wouldn't", action, end=' ')
... <strong>print</strong>("if you put", voltage, "volts through it.",
end=' ') ... <strong>print</strong>("E's", state, "!")</p>
<p>...</p>
<p>&gt;&gt;&gt; d = {"voltage": "four million", "state": "bleedin'
demised", "action": "VOOM"} &gt;&gt;&gt; parrot(**d)</p>
<p>This parrot wouldn't VOOM if you put four million volts through it.
E's bleedin' demised !</p>
<p>As of Python 3.5 you can also use this syntax to merge an arbitrary
number of dict objects.</p>
<p>&gt;&gt;&gt; fish = {'name': "Nemo", 'hands': "fins", 'special':
"gills"} &gt;&gt;&gt; dog = {'name': "Clifford", 'hands': "paws",
'color': "red"} &gt;&gt;&gt; fishdog = {**fish, **dog}</p>
<p>&gt;&gt;&gt; fishdog</p>
<p>{'hands': 'paws', 'color': 'red', 'name': 'Clifford', 'special':
'gills'}</p>
<p>As this example demonstrates, duplicate keys map to their lattermost
value (for example "Clifford" overrides "Nemo").</p>
<p>Section 19.11: The trailing comma</p>
<p>Like lists and tuples, you can include a trailing comma in your
dictionary.</p>
<p>role = {"By day": "A typical programmer",</p>
<p>"By night": "Still a typical programmer", }</p>
<p>PEP 8 dictates that you should leave a space between the trailing
comma and the closing brace.</p>
<p>Section 19.12: The dict() constructor</p>
<p>The dict() constructor can be used to create dictionaries from
keyword arguments, or from a single iterable of</p>
<p>key-value pairs, or from a single dictionary and keyword
arguments.</p>
<p>dict(a=1, b=2, c=3) <em># {'a': 1, 'b': 2, 'c': 3}</em> dict([('d',
4), ('e', 5), ('f', 6)]) <em># {'d': 4, 'e': 5, 'f': 6}</em> dict([('a',
1)], b=2, c=3) <em># {'a': 1, 'b': 2, 'c': 3}</em> dict({'a' : 1, 'b' :
2}, c=3) <em># {'a': 1, 'b': 2, 'c': 3}</em></p>
<p>Section 19.13: Dictionaries Example</p>
<p>Dictionaries map keys to values.</p>
<p>car = {}</p>
<p>car["wheels"] = 4</p>
<p>car["color"] = "Red"</p>
<p>car["model"] = "Corvette"</p>
<p>Dictionary values can be accessed by their keys.</p>
<p><strong>print</strong> "Little " + car["color"] + " " + car["model"]
+ "!" <em># This would print out "Little Red Corvette!"</em></p>
<p>Dictionaries can also be created in a JSON style:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 114</p>
<p><span id="car_____wheels___4___color____Re" class="anchor"></span>car
= {"wheels": 4, "color": "Red", "model": "Corvette"}</p>
<p>Dictionary values can be iterated over:</p>
<p><strong>for</strong> key <strong>in</strong> car:</p>
<p><strong>print</strong> key + ": " + car[key]</p>
<p># wheels: 4</p>
<p># color: Red</p>
<p># model: Corvette</p>
<p>Section 19.14: All combinations of dictionary values</p>
<p>options = {</p>
<p>"x": ["a", "b"],</p>
<p>"y": [10, 20, 30]</p>
<p>}</p>
<p>Given a dictionary such as the one shown above, where there is a list
representing a set of values to explore for the corresponding key.
Suppose you want to explore "x"="a" with "y"=10, then "x"="a"
with"y"=10, and so on until</p>
<p>you have explored all possible combinations.</p>
<p>You can create a list that returns all such combinations of values
using the following code.</p>
<p><strong>import</strong> itertools</p>
<p>options = {</p>
<p>"x": ["a", "b"],</p>
<p>"y": [10, 20, 30]}</p>
<p>keys = options.keys()</p>
<p>values = (options[key] <strong>for</strong> key <strong>in</strong>
keys)</p>
<p>combinations = [dict(zip(keys, combination)) <strong>for</strong>
combination <strong>in</strong> itertools.product(*values)]
<strong>print</strong> combinations</p>
<p>This gives us the following list stored in the variable
combinations:</p>
<p>[{'x': 'a', 'y': 10},</p>
<p>{'x': 'b', 'y': 10},</p>
<p>{'x': 'a', 'y': 20},</p>
<p>{'x': 'b', 'y': 20},</p>
<p>{'x': 'a', 'y': 30},</p>
<p>{'x': 'b', 'y': 30}]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 115</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Learning,
Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
Deep Learning with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Complete
hands-on machine learning tutorial with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">data
science, Tensorflow, artificial intelligence,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
neural networks</a></p>
<p><img src="media/index-141_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-141_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build artificial neural networks with Tensorflow and Keras</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify images, data, and sentiments using deep learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Make predictions using linear regression, polynomial regression, and
multivariate regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Data Visualization with MatPlotLib and Seaborn</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Implement machine learning at massive scale with Apache Spark's
MLLib</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Understand reinforcement learning - and how to build a Pac-Man
bot</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify data using K-Means clustering, Support Vector Machines (SVM),
KNN, Decision Trees,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Naive
Bayes, and PCA</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Use train/test and K-Fold cross validation to choose and tune your
models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build a movie recommender system using item-based and user-based
collaborative filtering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Watch
Today →</a></p>
<p><span id="Chapter_20__List_1" class="anchor"></span>Chapter 20:
List</p>
<p>The Python <strong>List</strong> is a general data structure widely
used in Python programs. They are found in other languages,</p>
<p>often referred to as <em>dynamic arrays</em>. They are both
<em>mutable</em> and a <em>sequence</em> data type that allows them to
be <em>indexed</em></p>
<p>and <em>sliced</em>. The list can contain different types of objects,
including other list objects.</p>
<p>Section 20.1: List methods and supported operators</p>
<p>Starting with a given list a:</p>
<p>a = [1, 2, 3, 4, 5]</p>
<p>1. append(value) – appends a new element to the end of the list.</p>
<p># Append values 6, 7, and 7 to the list</p>
<p>a.append(6)</p>
<p>a.append(7)</p>
<p>a.append(7)</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7]</p>
<p># Append another list</p>
<p>b = [8, 9]</p>
<p>a.append(b)</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9]]</p>
<p># Append an element of a different type, as list elements do not need
to have the same type <em>my_string = "hello world"</em></p>
<p>a.append(my_string)</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9], "hello world"]</p>
<p><strong>Note that</strong> the append() method only appends one new
element to the end of the list. If you append a list to</p>
<p>another list, the list that you append becomes a single element at
the end of the first list.</p>
<p># Appending a list to another list</p>
<p>a = [1, 2, 3, 4, 5, 6, 7, 7]</p>
<p>b = [8, 9]</p>
<p>a.append(b)</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7, [8, 9]]</p>
<p>a[8]</p>
<p># Returns: [8,9]</p>
<p>2. extend(enumerable) – extends the list by appending elements from
another enumerable.</p>
<p>a = [1, 2, 3, 4, 5, 6, 7, 7]</p>
<p>b = [8, 9, 10]</p>
<p># Extend list by appending all elements from b</p>
<p>a.extend(b)</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]</p>
<p># Extend list with elements from a non-list enumerable:
<em>a.extend(range(3))</em></p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10, 0, 1, 2]</p>
<p>Lists can also be concatenated with the + operator. Note that this
does not modify any of the original lists:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 117</p>
<p>a = [1, 2, 3, 4, 5, 6] + [7, 7] + b</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]</p>
<p>3. index(value, [startIndex]) – gets the index of the first
occurrence of the input value. If the input value is</p>
<p>not in the list a ValueError exception is raised. If a second
argument is provided, the search is started at that</p>
<p>specified index.</p>
<p>a.index(7)</p>
<p># Returns: 6</p>
<p><em>a.index(49)</em> # ValueError, because 49 is not in a.</p>
<p>a.index(7, 7)</p>
<p># Returns: 7</p>
<p><em>a.index(7, 8)</em> # ValueError, because there is no 7 starting
at index 8</p>
<p>4. insert(index, value) – inserts value just before the specified
index. Thus after the insertion the new</p>
<p>element occupies position index.</p>
<p><em>a.insert(0, 0)</em> # insert 0 at position 0</p>
<p><em>a.insert(2, 5)</em> # insert 5 at position 2</p>
<p># a: [0, 1, 5, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]</p>
<p>5. pop([index]) – removes and returns the item at index. With no
argument it removes and returns the last</p>
<p>element of the list.</p>
<p>a.pop(2)</p>
<p># Returns: 5</p>
<p># a: [0, 1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]</p>
<p>a.pop(8)</p>
<p># Returns: 7</p>
<p># a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>
<p># With no argument:</p>
<p>a.pop()</p>
<p># Returns: 10</p>
<p># a: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
<p>6. remove(value) – removes the first occurrence of the specified
value. If the provided value cannot be found, a</p>
<p>ValueError is raised.</p>
<p>a.remove(0)</p>
<p>a.remove(9)</p>
<p># a: [1, 2, 3, 4, 5, 6, 7, 8]</p>
<p>a.remove(10)</p>
<p># ValueError, because 10 is not in a</p>
<p>7. reverse() – reverses the list in-place and returns None.</p>
<p>a.reverse()</p>
<p># a: [8, 7, 6, 5, 4, 3, 2, 1]</p>
<p>There are also other ways of reversing a list.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 118</p>
<p>8. count(value) – counts the number of occurrences of some value in
the list.</p>
<p>a.count(7)</p>
<p># Returns: 2</p>
<p>9. sort() – sorts the list in numerical and lexicographical order and
returns None.</p>
<p>a.sort()</p>
<p># a = [1, 2, 3, 4, 5, 6, 7, 8]</p>
<p># Sorts the list in numerical order</p>
<p>Lists can also be reversed when sorted using the reverse=True flag in
the sort() method.</p>
<p>a.sort(reverse=True)</p>
<p># a = [8, 7, 6, 5, 4, 3, 2, 1]</p>
<p>If you want to sort by attributes of items, you can use the key
keyword argument:</p>
<p><strong>import</strong> datetime</p>
<p><strong>class</strong> Person(object):</p>
<p><strong>def</strong> __init__(self, name, birthday, height):</p>
<p>self.name = name</p>
<p>self.birthday = birthday</p>
<p>self.height = height</p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong> self.name</p>
<p>l = [Person("John Cena", datetime.date(1992, 9, 12), 175),</p>
<p>Person("Chuck Norris", datetime.date(1990, 8, 28), 180),</p>
<p>Person("Jon Skeet", datetime.date(1991, 7, 6), 185)]</p>
<p>l.sort(key=<strong>lambda</strong> item: item.name)</p>
<p># l: [Chuck Norris, John Cena, Jon Skeet]</p>
<p>l.sort(key=<strong>lambda</strong> item: item.birthday)</p>
<p># l: [Chuck Norris, Jon Skeet, John Cena]</p>
<p>l.sort(key=<strong>lambda</strong> item: item.height)</p>
<p># l: [John Cena, Chuck Norris, Jon Skeet]</p>
<p>In case of list of dicts the concept is the same:</p>
<p><strong>import</strong> datetime</p>
<p>l = [{'name':'John Cena', 'birthday': datetime.date(1992, 9,
12),'height': 175}, {'name': 'Chuck Norris', 'birthday':
datetime.date(1990, 8, 28),'height': 180}, {'name': 'Jon Skeet',
'birthday': datetime.date(1991, 7, 6), 'height': 185}]</p>
<p>l.sort(key=<strong>lambda</strong> item: item['name'])</p>
<p># l: [Chuck Norris, John Cena, Jon Skeet]</p>
<p>l.sort(key=<strong>lambda</strong> item: item['birthday'])</p>
<p># l: [Chuck Norris, Jon Skeet, John Cena]</p>
<p>l.sort(key=<strong>lambda</strong> item: item['height'])</p>
<p># l: [John Cena, Chuck Norris, Jon Skeet]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 119</p>
<p>Sort by sub dict:</p>
<p><strong>import</strong> datetime</p>
<p>l = [{'name':'John Cena', 'birthday': datetime.date(1992, 9,
12),'size': {'height': 175, 'weight': 100}},</p>
<p>{'name': 'Chuck Norris', 'birthday': datetime.date(1990, 8,
28),'size' : {'height': 180, 'weight': 90}},</p>
<p>{'name': 'Jon Skeet', 'birthday': datetime.date(1991, 7, 6), 'size':
{'height': 185, 'weight': 110}}]</p>
<p>l.sort(key=<strong>lambda</strong> item: item['size']['height'])</p>
<p># l: [John Cena, Chuck Norris, Jon Skeet]</p>
<p>Better way to sort using attrgetter and itemgetter</p>
<p>Lists can also be sorted using attrgetter and itemgetter functions
from the operator module. These can help</p>
<p>improve readability and reusability. Here are some examples,</p>
<p><strong>from</strong> operator <strong>import</strong>
itemgetter,attrgetter</p>
<p>people = [{'name':'chandan','age':20,'salary':2000},</p>
<p>{'name':'chetan','age':18,'salary':5000},</p>
<p>{'name':'guru','age':30,'salary':3000}]</p>
<p>by_age = itemgetter('age')</p>
<p>by_salary = itemgetter('salary')</p>
<p>people.sort(key=by_age) <em>#in-place sorting by age</em></p>
<p>people.sort(key=by_salary) <em>#in-place sorting by salary</em></p>
<p>itemgetter can also be given an index. This is helpful if you want to
sort based on indices of a tuple.</p>
<p>list_of_tuples = [(1,2), (3,4), (5,0)]</p>
<p>list_of_tuples.sort(key=itemgetter(1))</p>
<p><em><strong>print</strong>(list_of_tuples)</em> #[(5, 0), (1, 2), (3,
4)]</p>
<p>Use the attrgetter if you want to sort by attributes of an
object,</p>
<p>persons = [Person("John Cena", datetime.date(1992, 9, 12), 175),</p>
<p>Person("Chuck Norris", datetime.date(1990, 8, 28), 180),</p>
<p>Person("Jon Skeet", datetime.date(1991, 7, 6), 185)] <em>#reusing
Person class from above example</em></p>
<p>person.sort(key=attrgetter('name')) <em>#sort by name</em></p>
<p>by_birthday = attrgetter('birthday')</p>
<p>person.sort(key=by_birthday) <em>#sort by birthday</em></p>
<p>10. clear() – removes all items from the list</p>
<p>a.clear()</p>
<p># a = []</p>
<p>11. <strong>Replication</strong> – multiplying an existing list by an
integer will produce a larger list consisting of that many copies</p>
<p>of the original. This can be useful for example for list
initialization:</p>
<p>b = ["blah"] * 3</p>
<p># b = ["blah", "blah", "blah"]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 120</p>
<p>b = [1, 3, 5] * 5</p>
<p># [1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5, 1, 3, 5]</p>
<p>Take care doing this if your list contains references to objects (eg
a list of lists), see Common Pitfalls - List</p>
<p>multiplication and common references.</p>
<p>12. <strong>Element deletion</strong> – it is possible to delete
multiple elements in the list using the <strong>del</strong> keyword and
slice</p>
<p>notation:</p>
<p>a = list(range(10))</p>
<p><strong>del</strong> a[::2]</p>
<p># a = [1, 3, 5, 7, 9]</p>
<p><strong>del</strong> a[-1]</p>
<p># a = [1, 3, 5, 7]</p>
<p><strong>del</strong> a[:]</p>
<p># a = []</p>
<p><strong>13.</strong> Copying</p>
<p>The default assignment "=" assigns a reference of the original list
to the new name. That is, the original name</p>
<p>and new name are both pointing to the same list object. Changes made
through any of them will be reflected</p>
<p>in another. This is often not what you intended.</p>
<p>b = a</p>
<p>a.append(6)</p>
<p># b: [1, 2, 3, 4, 5, 6]</p>
<p>If you want to create a copy of the list you have below options.</p>
<p>You can slice it:</p>
<p>new_list = old_list[:]</p>
<p>You can use the built in list() function:</p>
<p>new_list = list(old_list)</p>
<p>You can use generic copy.copy():</p>
<p>import <strong>copy</strong></p>
<p><em>new_list = copy.copy(old_list)</em> #inserts references to the
objects found in the original.</p>
<p>This is a little slower than list() because it has to find out the
datatype of old_list first.</p>
<p>If the list contains objects and you want to copy them as well, use
generic copy.deepcopy():</p>
<p>import <strong>copy</strong></p>
<p><em>new_list = copy.deepcopy(old_list)</em> #inserts copies of the
objects found in the original.</p>
<p>Obviously the slowest and most memory-needing method, but sometimes
unavoidable.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 121</p>
<p><span id="copy_____Returns_a_shallow_copy"
class="anchor"></span>copy() – Returns a shallow copy of the list</p>
<p>aa = a.copy()</p>
<p># aa = [1, 2, 3, 4, 5]</p>
<p>Section 20.2: Accessing list values</p>
<p>Python lists are zero-indexed, and act like arrays in other
languages.</p>
<p>lst = [1, 2, 3, 4]</p>
<p>lst[0] <em># 1</em></p>
<p>lst[1] <em># 2</em></p>
<p>Attempting to access an index outside the bounds of the list will
raise an IndexError.</p>
<p><em>lst[4]</em> # IndexError: list index out of range</p>
<p>Negative indices are interpreted as counting from the <em>end</em> of
the list.</p>
<p>lst[-1] <em># 4</em></p>
<p>lst[-2] <em># 3</em></p>
<p><em>lst[-5]</em> # IndexError: list index out of range</p>
<p>This is functionally equivalent to</p>
<p>lst[len(lst)-1] <em># 4</em></p>
<p>Lists allow to use <em>slice notation</em> as lst[start:end:step].
The output of the slice notation is a new list containing</p>
<p>elements from index start to end-1. If options are omitted start
defaults to beginning of list, end to end of list and step to 1:</p>
<p><em>lst[1:]</em> # [2, 3, 4]</p>
<p><em>lst[:3]</em> # [1, 2, 3]</p>
<p>lst[::2] <em># [1, 3]</em></p>
<p><em>lst[::-1]</em> # [4, 3, 2, 1]</p>
<p>lst[-1:0:-1] <em># [4, 3, 2]</em></p>
<p><em>lst[5:8]</em> # [] since starting index is greater than length of
lst, returns empty list <em>lst[1:10]</em> # [2, 3, 4] same as omitting
ending index</p>
<p>With this in mind, you can print a reversed version of the list by
calling</p>
<p><em>lst[::-1]</em> # [4, 3, 2, 1]</p>
<p>When using step lengths of negative amounts, the starting index has
to be greater than the ending index otherwise the result will be an
empty list.</p>
<p>lst[3:1:-1] <em># [4, 3]</em></p>
<p>Using negative step indices are equivalent to the following code:</p>
<p>reversed(lst)[0:2] <em># 0 = 1 -1</em></p>
<p># 2 = 3 -1</p>
<p>The indices used are 1 less than those used in negative indexing and
are reversed.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 122</p>
<p><span id="Advanced_slicing" class="anchor"></span>Advanced
slicing</p>
<p>When lists are sliced the __getitem__() method of the list object is
called, with a slice object. Python has a builtin</p>
<p>slice method to generate slice objects. We can use this to
<em>store</em> a slice and reuse it later like so,</p>
<p>data = 'chandan purohit 22 2000' <em>#assuming data fields of fixed
length</em> name_slice = slice(0,19)</p>
<p>age_slice = slice(19,21)</p>
<p>salary_slice = slice(22,None)</p>
<p>#now we can have more readable slices</p>
<p><strong>print</strong>(data[name_slice]) <em>#chandan
purohit</em></p>
<p><strong>print</strong>(data[age_slice]) <em>#'22'</em></p>
<p><strong>print</strong>(data[salary_slice]) <em>#'2000'</em></p>
<p>This can be of great use by providing slicing functionality to our
objects by overriding __getitem__ in our class.</p>
<p>Section 20.3: Checking if list is empty</p>
<p>The emptiness of a list is associated to the boolean False, so you
don't have to check len(lst) == 0, but just lst or <strong>not</strong>
lst</p>
<p>lst = []</p>
<p>if not <strong>lst:</strong></p>
<p><strong>print</strong>("list is empty")</p>
<p># Output: list is empty</p>
<p>Section 20.4: Iterating over a list</p>
<p>Python supports using a <strong>for</strong> loop directly on a
list:</p>
<p>my_list = ['foo', 'bar', 'baz']</p>
<p><strong>for</strong> item <strong>in</strong> my_list:</p>
<p><strong>print</strong>(item)</p>
<p># Output: foo</p>
<p># Output: bar</p>
<p># Output: baz</p>
<p>You can also get the position of each item at the same time:</p>
<p><strong>for</strong> (index, item) <strong>in</strong>
enumerate(my_list):</p>
<p><strong>print</strong>('The item in position {} is: {}'.format(index,
item))</p>
<p># Output: The item in position 0 is: foo</p>
<p># Output: The item in position 1 is: bar</p>
<p># Output: The item in position 2 is: baz</p>
<p>The other way of iterating a list based on the index value:</p>
<p><strong>for</strong> i <strong>in</strong> range(0,len(my_list)):</p>
<p><strong>print</strong>(my_list[i])</p>
<p>#output:</p>
<p>&gt;&gt;&gt;</p>
<p>foo</p>
<p>bar</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 123</p>
<p><span id="baz" class="anchor"></span>baz</p>
<p>Note that changing items in a list while iterating on it may have
unexpected results:</p>
<p><strong>for</strong> item <strong>in</strong> my_list:</p>
<p><strong>if</strong> item == 'foo':</p>
<p><strong>del</strong> my_list[0]</p>
<p><strong>print</strong>(item)</p>
<p># Output: foo</p>
<p># Output: baz</p>
<p>In this last example, we deleted the first item at the first
iteration, but that caused bar to be skipped.</p>
<p>Section 20.5: Checking whether an item is in a list</p>
<p>Python makes it very simple to check whether an item is in a list.
Simply use the in operator.</p>
<p>lst = ['test', 'twest', 'tweast', 'treast']</p>
<p>'test' <strong>in</strong> lst</p>
<p># Out: True</p>
<p>'toast' <strong>in</strong> lst</p>
<p># Out: False</p>
<p>Note: the in operator on sets is asymptotically faster than on lists.
If you need to use it many times on</p>
<p>potentially large lists, you may want to convert your list to a set,
and test the presence of elements on the set.</p>
<p>slst = set(lst)</p>
<p>'test' <strong>in</strong> slst</p>
<p># Out: True</p>
<p>Section 20.6: Any and All</p>
<p>You can use all() to determine if all the values in an iterable
evaluate to True</p>
<p>nums = [1, 1, 0, 1]</p>
<p>all(nums)</p>
<p># False</p>
<p>chars = ['a', 'b', 'c', 'd']</p>
<p>all(chars)</p>
<p># True</p>
<p>Likewise, any() determines if one or more values in an iterable
evaluate to True</p>
<p>nums = [1, 1, 0, 1]</p>
<p>any(nums)</p>
<p># True</p>
<p>vals = [None, None, None, False]</p>
<p>any(vals)</p>
<p># False</p>
<p>While this example uses a list, it is important to note these
built-ins work with any iterable, including generators.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 124</p>
<p><span id="vals____1__2__3__4" class="anchor"></span>vals = [1, 2, 3,
4]</p>
<p>any(val &gt; 12 <strong>for</strong> val <strong>in</strong>
vals)</p>
<p># False</p>
<p>any((val * 2) &gt; 6 <strong>for</strong> val <strong>in</strong>
vals)</p>
<p># True</p>
<p>Section 20.7: Reversing list elements</p>
<p>You can use the reversed function which returns an iterator to the
reversed list:</p>
<p>In [3]: rev = reversed(numbers)</p>
<p>In [4]: rev</p>
<p>Out[4]: [9, 8, 7, 6, 5, 4, 3, 2, 1]</p>
<p>Note that the list "numbers" remains unchanged by this operation, and
remains in the same order it was originally.</p>
<p>To reverse in place, you can also use the reverse method.</p>
<p>You can also reverse a list (actually obtaining a copy, the original
list is unaffected) by using the slicing syntax,</p>
<p>setting the third argument (the step) as -1:</p>
<p>In [1]: numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
<p>In [2]: numbers[::-1]</p>
<p>Out[2]: [9, 8, 7, 6, 5, 4, 3, 2, 1]</p>
<p>Section 20.8: Concatenate and Merge lists</p>
<p><strong>1.</strong> The simplest way to concatenate <strong>list1 and
list2:</strong></p>
<p>merged = list1 + list2</p>
<p>2. <strong>zip returns a list of tuples</strong>, where the i-th
tuple contains the i-th element from each of the argument</p>
<p>sequences or iterables:</p>
<p>alist = ['a1', 'a2', 'a3']</p>
<p>blist = ['b1', 'b2', 'b3']</p>
<p><strong>for</strong> a, b <strong>in</strong> zip(alist, blist):</p>
<p><strong>print</strong>(a, b)</p>
<p># Output:</p>
<p># a1 b1</p>
<p># a2 b2</p>
<p># a3 b3</p>
<p>If the lists have different lengths then the result will include only
as many elements as the shortest one:</p>
<p>alist = ['a1', 'a2', 'a3']</p>
<p>blist = ['b1', 'b2', 'b3', 'b4']</p>
<p><strong>for</strong> a, b <strong>in</strong> zip(alist, blist):</p>
<p><strong>print</strong>(a, b)</p>
<p># Output:</p>
<p># a1 b1</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 125</p>
<p><span id="__a2_b2" class="anchor"></span># a2 b2</p>
<p># a3 b3</p>
<p>alist = []</p>
<p>len(list(zip(alist, blist)))</p>
<p># Output:</p>
<p># 0</p>
<p>For padding lists of unequal length to the longest one with Nones use
itertools.zip_longest</p>
<p>(itertools.izip_longest in Python 2)</p>
<p>alist = ['a1', 'a2', 'a3']</p>
<p>blist = ['b1']</p>
<p>clist = ['c1', 'c2', 'c3', 'c4']</p>
<p><strong>for</strong> a,b,c <strong>in</strong>
itertools.zip_longest(alist, blist, clist):</p>
<p><strong>print</strong>(a, b, c)</p>
<p># Output:</p>
<p># a1 b1 c1</p>
<p># a2 None c2</p>
<p># a3 None c3</p>
<p># None None c4</p>
<p><strong>3.</strong> Insert to a specific index values:</p>
<p>alist = [123, 'xyz', 'zara', 'abc']</p>
<p>alist.insert(3, [2009])</p>
<p><strong>print</strong>("Final List :", alist)</p>
<p>Output:</p>
<p>Final List : [123, 'xyz', 'zara', 2009, 'abc']</p>
<p>Section 20.9: Length of a list</p>
<p>Use len() to get the one-dimensional length of a list.</p>
<p>len(['one', 'two']) <em># returns 2</em></p>
<p>len(['one', [2, 3], 'four']) <em># returns 3, not 4</em></p>
<p>len() also works on strings, dictionaries, and other data structures
similar to lists.</p>
<p>Note that len() is a built-in function, not a method of a list
object.</p>
<p>Also note that the cost of len() is O(1), meaning it will take the
same amount of time to get the length of a list</p>
<p>regardless of its length.</p>
<p>Section 20.10: Remove duplicate values in list</p>
<p>Removing duplicate values in a list can be done by converting the
list to a set (that is an unordered collection of</p>
<p>distinct objects). If a list data structure is needed, then the set
can be converted back to a list using the function list():</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 126</p>
<p><span id="names_____aixk____duke____edik" class="anchor"></span>names
= ["aixk", "duke", "edik", "tofp", "duke"]</p>
<p>list(set(names))</p>
<p># Out: ['duke', 'tofp', 'aixk', 'edik']</p>
<p>Note that by converting a list to a set the original ordering is
lost.</p>
<p>To preserve the order of the list one can use an OrderedDict</p>
<p><strong>import</strong> collections</p>
<p>&gt;&gt;&gt; collections.OrderedDict.fromkeys(names).keys()</p>
<p># Out: ['aixk', 'duke', 'edik', 'tofp']</p>
<p>Section 20.11: Comparison of lists</p>
<p>It's possible to compare lists and other sequences lexicographically
using comparison operators. Both operands must be of the same type.</p>
<p>[1, 10, 100] &lt; [2, 10, 100]</p>
<p># True, because 1 &lt; 2</p>
<p>[1, 10, 100] &lt; [1, 10, 100]</p>
<p># False, because the lists are equal</p>
<p>[1, 10, 100] &lt;= [1, 10, 100]</p>
<p># True, because the lists are equal</p>
<p>[1, 10, 100] &lt; [1, 10, 101]</p>
<p># True, because 100 &lt; 101</p>
<p>[1, 10, 100] &lt; [0, 10, 100]</p>
<p># False, because 0 &lt; 1</p>
<p>If one of the lists is contained at the start of the other, the
shortest list wins.</p>
<p>[1, 10] &lt; [1, 10, 100]</p>
<p># True</p>
<p>Section 20.12: Accessing values in nested list</p>
<p>Starting with a three-dimensional list:</p>
<p>alist = [[[1,2],[3,4]], [[5,6,7],[8,9,10], [12, 13, 14]]]</p>
<p>Accessing items in the list:</p>
<p><strong>print</strong>(alist[0][0][1])</p>
<p>#2</p>
<p>#Accesses second element in the first list in the first list</p>
<p><strong>print</strong>(alist[1][1][2])</p>
<p>#10</p>
<p>#Accesses the third element in the second list in the second list</p>
<p>Performing support operations:</p>
<p>alist[0][0].append(11)</p>
<p><strong>print</strong>(alist[0][0][2])</p>
<p>#11</p>
<p>#Appends 11 to the end of the first list in the first list</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 127</p>
<p><span id="Using_nested_for_loops_to_print"
class="anchor"></span>Using nested for loops to print the list:</p>
<p><em><strong>for</strong> row <strong>in</strong> alist:</em> #One way
to loop through nested lists</p>
<p><strong>for</strong> col <strong>in</strong> row:</p>
<p>print<strong>(col)</strong></p>
<p>#[1, 2, 11]</p>
<p>#[3, 4]</p>
<p>#[5, 6, 7]</p>
<p>#[8, 9, 10]</p>
<p>#[12, 13, 14]</p>
<p>Note that this operation can be used in a list comprehension or even
as a generator to produce efficiencies, e.g.:</p>
<p>[col <strong>for</strong> row <strong>in</strong> alist
<strong>for</strong> col <strong>in</strong> row]</p>
<p>#[[1, 2, 11], [3, 4], [5, 6, 7], [8, 9, 10], [12, 13, 14]]</p>
<p>Not all items in the outer lists have to be lists themselves:</p>
<p>alist[1].insert(2, 15)</p>
<p>#Inserts 15 into the third position in the second list</p>
<p>Another way to use nested for loops. The other way is better but I've
needed to use this on occasion:</p>
<p><em><strong>for</strong> row <strong>in</strong>
range(len(alist)):</em> #A less Pythonic way to loop through lists</p>
<p><strong>for</strong> col <strong>in</strong>
range(len(alist[row])):</p>
<p><strong>print</strong>(alist[row][col])</p>
<p>#[1, 2, 11]</p>
<p>#[3, 4]</p>
<p>#[5, 6, 7]</p>
<p>#[8, 9, 10]</p>
<p>#15</p>
<p>#[12, 13, 14]</p>
<p>Using slices in nested list:</p>
<p><strong>print</strong>(alist[1][1:])</p>
<p>#[[8, 9, 10], 15, [12, 13, 14]]</p>
<p>#Slices still work</p>
<p>The final list:</p>
<p><strong>print</strong>(alist)</p>
<p>#[[[1, 2, 11], [3, 4]], [[5, 6, 7], [8, 9, 10], 15, [12, 13,
14]]]</p>
<p>Section 20.13: Initializing a List to a Fixed Number of Elements</p>
<p>For <strong>immutable</strong> elements (e.g. None, string literals
etc.):</p>
<p>my_list = [None] * 10</p>
<p>my_list = ['test'] * 10</p>
<p>For <strong>mutable</strong> elements, the same construct will result
in all elements of the list referring to the same object, for</p>
<p>example, for a set:</p>
<p>&gt;&gt;&gt; my_list=[{1}] * 10</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 128</p>
<p>&gt;&gt;&gt; <strong>print</strong>(my_list)</p>
<p>[{1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}, {1}]</p>
<p>&gt;&gt;&gt; my_list[0].add(2)</p>
<p>&gt;&gt;&gt; <strong>print</strong>(my_list)</p>
<p>[{1, 2}, {1, 2}, {1, 2}, {1, 2}, {1, 2}, {1, 2}, {1, 2}, {1, 2}, {1,
2}, {1, 2}]</p>
<p>Instead, to initialize the list with a fixed number of
<strong>different mutable</strong> objects, use:</p>
<p>my_list=[{1} <strong>for</strong> _ <strong>in</strong>
range(10)]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 129</p>
<p><span id="Chapter_21__List_comprehensions_1"
class="anchor"></span>Chapter 21: List comprehensions</p>
<p>List comprehensions in Python are concise, syntactic constructs. They
can be utilized to generate lists from other</p>
<p>lists by applying functions to each element in the list. The
following section explains and demonstrates the use of these
expressions.</p>
<p>Section 21.1: List Comprehensions</p>
<p>A <a
href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list
comprehension creates a new</a> list by applying an expression to each
element of an iterable. The most basic form is:</p>
<p>[ <strong>for</strong> <strong>in</strong> ]</p>
<p>There's also an optional 'if' condition:</p>
<p>[ <strong>for</strong> <strong>in</strong> <strong>if</strong> ]</p>
<p>Each <strong>&lt;element&gt;</strong> in the
<strong>&lt;iterable&gt;</strong> is plugged in to the
<strong>&lt;expression&gt;</strong> if the (optional)
<strong>&lt;condition&gt;</strong> <a
href="https://docs.python.org/3/library/stdtypes.html#truth-value-testing">evaluates
to true</a> . All results are returned at once in the new list.
Generator expressions are evaluated lazily, but list comprehensions</p>
<p>evaluate the entire iterator immediately - consuming memory
proportional to the iterator's length.</p>
<p>To create a list of squared integers:</p>
<p>squares = [x * x <strong>for</strong> x <strong>in</strong> (1, 2, 3,
4)]</p>
<p># squares: [1, 4, 9, 16]</p>
<p>The <strong>for</strong> expression sets x to each value in turn from
(1, 2, 3, 4). The result of the expression x * x is appended to an
internal list. The internal list is assigned to the variable squares
when completed.</p>
<p>Besides a <a
href="https://wiki.python.org/moin/PythonSpeed/PerformanceTips#Loops">speed
increase</a> <a
href="http://stackoverflow.com/questions/39518899/3-array-generators-faster-than-1-for-loop/39519661#39519661">(as
explained here</a>), a list comprehension is roughly equivalent to the
following for-loop:</p>
<p>squares = []</p>
<p><strong>for</strong> x <strong>in</strong> (1, 2, 3, 4):</p>
<p>squares.append(x * x)</p>
<p># squares: [1, 4, 9, 16]</p>
<p>The expression applied to each element can be as complex as
needed:</p>
<p># Get a list of uppercase characters from a string</p>
<p>[s.upper() <strong>for</strong> s <strong>in</strong> "Hello
World"]</p>
<p># ['H', 'E', 'L', 'L', 'O', ' ', 'W', 'O', 'R', 'L', 'D']</p>
<p># Strip off any commas from the end of strings in a list
<em>[w.strip(',') <strong>for</strong> w <strong>in</strong> ['these,',
'words,,', 'mostly', 'have,commas,']]</em> # ['these', 'words',
'mostly', 'have,commas']</p>
<p># Organize letters in words more reasonably - in an alphabetical
order <em>sentence = "Beautiful is better than ugly"</em></p>
<p>["".join(sorted(word, key = <strong>lambda</strong> x: x.lower()))
<strong>for</strong> word <strong>in</strong> sentence.split()] <em>#
['aBefiltuu', 'is', 'beertt', 'ahnt', 'gluy']</em></p>
<p>else</p>
<p><strong>else</strong> can be used in List comprehension constructs,
but be careful regarding the syntax. The if/else clauses should</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 130</p>
<p>be used before <strong>for</strong> loop, not after:</p>
<p># create a list of characters in apple, replacing non vowels with '*'
# Ex - 'apple' --&gt; ['a', '*', '*', '*' ,'e']</p>
<p>[x <strong>for</strong> x <strong>in</strong> 'apple'
<strong>if</strong> x <strong>in</strong> 'aeiou' <strong>else</strong>
'*']</p>
<p>#SyntaxError: invalid syntax</p>
<p># When using if/else together use them before the loop <em>[x
<strong>if</strong> x <strong>in</strong> 'aeiou' <strong>else</strong>
'*' <strong>for</strong> x <strong>in</strong> 'apple']</em></p>
<p>#['a', '*', '*', '*', 'e']</p>
<p>Note this uses a different language construct, a <a
href="http://docs.python.org/3/reference/expressions.html#conditional-expressions">conditional
expression, which itself is not part of the</a></p>
<p><a
href="http://docs.python.org/3/reference/expressions.html#displays-for-lists-sets-and-dictionaries">comprehension
syntax. Whereas the</a> if after the
<strong>for</strong>…<strong>in</strong> <em>is</em> a part of list
comprehensions and used to <em>filter</em></p>
<p>elements from the source iterable.</p>
<p>Double Iteration</p>
<p>Order of double iteration [... <strong>for</strong> x
<strong>in</strong> ... <strong>for</strong> y <strong>in</strong> ...]
is either natural or counter-intuitive. The rule of thumb is to follow
an equivalent <strong>for</strong> loop:</p>
<p><strong>def</strong> foo(i):</p>
<p><strong>return</strong> i, i + 0.5</p>
<p><strong>for</strong> i <strong>in</strong> range(3):</p>
<p><strong>for</strong> x <strong>in</strong> foo(i):</p>
<p><strong>yield</strong> str(x)</p>
<p>This becomes:</p>
<p>[str(x)</p>
<p><strong>for</strong> i <strong>in</strong> range(3)</p>
<p><strong>for</strong> x <strong>in</strong> foo(i)</p>
<p>]</p>
<p>This can be compressed into one line as [str(x) <strong>for</strong>
i <strong>in</strong> range(3) <strong>for</strong> x
<strong>in</strong> foo(i)]</p>
<p>In-place Mutation and Other Side Effects</p>
<p>Before using list comprehension, understand the difference between
functions called for their side effects</p>
<p>(<em>mutating</em>, or <a
href="https://en.wikipedia.org/wiki/In-place_algorithm"><em>in-place</em>
functions) which usually return</a> None, and functions that return an
interesting value.</p>
<p><a href="https://en.wikipedia.org/wiki/Pure_function">Many functions
(especially <em>pure</em> functions) simply take an object and return
some object. An</a> <em>in-place</em> function modifies the existing
object, which is called a <em>side effect</em>. Other examples include
input and output operations such</p>
<p>as printing.</p>
<p><a
href="https://docs.python.org/3/library/stdtypes.html#list.sort">list.sort()
sorts a list</a> <em>in-place</em> (meaning that it modifies the
original list) and returns the value None. Therefore, it</p>
<p>won't work as expected in a list comprehension:</p>
<p>[x.sort() <strong>for</strong> x <strong>in</strong> [[2, 1], [4, 3],
[0, 1]]]</p>
<p># [None, None, None]</p>
<p>Instead, <a
href="https://docs.python.org/3/library/functions.html#sorted">sorted()
returns a sorted</a> list rather than sorting in-place:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 131</p>
<p><span id="_sorted_x__for_x_in___2__1____4"
class="anchor"></span>[sorted(x) <strong>for</strong> x
<strong>in</strong> [[2, 1], [4, 3], [0, 1]]]</p>
<p># [[1, 2], [3, 4], [0, 1]]</p>
<p>Using comprehensions for side-effects is possible, such as I/O or
in-place functions. Yet a for loop is usually more readable. While this
works in Python 3:</p>
<p>[<strong>print</strong>(x) <strong>for</strong> x <strong>in</strong>
(1, 2, 3)]</p>
<p>Instead use:</p>
<p><strong>for</strong> x <strong>in</strong> (1, 2, 3):</p>
<p>print<strong>(x)</strong></p>
<p>In some situations, side effect functions <em>are</em> suitable for
list comprehension. <a
href="https://docs.python.org/3/library/random.html#random.randrange">random.randrange()
has the side</a> effect of changing the state of the random number
generator, but it also returns an interesting value. Additionally,</p>
<p>next() can be called on an iterator.</p>
<p>The following random value generator is not pure, yet makes sense as
the random generator is reset every time the</p>
<p>expression is evaluated:</p>
<p><strong>from</strong> random <strong>import</strong> randrange</p>
<p>[randrange(1, 7) <strong>for</strong> _ <strong>in</strong>
range(10)]</p>
<p># [2, 3, 2, 1, 1, 5, 2, 4, 3, 5]</p>
<p>Whitespace in list comprehensions</p>
<p>More complicated list comprehensions can reach an undesired length,
or become less readable. Although less</p>
<p>common in examples, it is possible to break a list comprehension into
multiple lines like so:</p>
<p>[</p>
<p>x <strong>for</strong> x</p>
<p><strong>in</strong> 'foo'</p>
<p><strong>if</strong> x <strong>not in</strong> 'bar'</p>
<p>]</p>
<p>Section 21.2: Conditional List Comprehensions</p>
<p>Given a <a
href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list
comprehension</a> you can append one or more if conditions to filter
values.</p>
<p>[ <strong>for</strong> <strong>in</strong> <strong>if</strong> ]</p>
<p>For each <strong>&lt;element&gt;</strong> in
<strong>&lt;iterable&gt;</strong>; if <strong>&lt;condition&gt;</strong>
evaluates to True, add <strong>&lt;expression&gt;</strong> (usually a
function of <strong>&lt;element&gt;</strong> ) to the returned list.</p>
<p>For example, this can be used to extract only even numbers from a
sequence of integers:</p>
<p>[x <strong>for</strong> x <strong>in</strong> range(10)
<strong>if</strong> x % 2 == 0]</p>
<p># Out: [0, 2, 4, 6, 8]</p>
<p><a href="http://coliru.stacked-crooked.com/a/8ea85b7b87f57876">Live
demo</a></p>
<p>The above code is equivalent to:</p>
<p>even_numbers = []</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 132</p>
<p><strong>for</strong> x <strong>in</strong> range(10):</p>
<p><strong>if</strong> x % 2 == 0:</p>
<p>even_numbers.append(x)</p>
<p><strong>print</strong>(even_numbers)</p>
<p># Out: [0, 2, 4, 6, 8]</p>
<p>Also, a conditional list comprehension of the form [e
<strong>for</strong> x <strong>in</strong> y <strong>if</strong> c]
(where e and c are expressions in terms of</p>
<p>x) is equivalent to list(filter(<strong>lambda</strong> x: c,
map(<strong>lambda</strong> x: e, y))).</p>
<p>Despite providing the same result, pay attention to the fact that the
former example is almost 2x faster than the</p>
<p>latter one. For those who are curious, <a
href="http://stackoverflow.com/questions/39518899/3-array-generators-faster-than-1-for-loop/39519661#39519661">this</a>
is a nice explanation of the reason why.</p>
<p>Note that this is quite different from the ... <strong>if</strong>
... <strong>else</strong> ... conditional expression (sometimes known as
a</p>
<p>ternary expression) that you can use for the
<strong>&lt;expression&gt;</strong> part of the list comprehension.
Consider the following example:</p>
<p>[x <strong>if</strong> x % 2 == 0 <strong>else</strong> None
<strong>for</strong> x <strong>in</strong> range(10)]</p>
<p># Out: [0, None, 2, None, 4, None, 6, None, 8, None]</p>
<p><a href="http://coliru.stacked-crooked.com/a/38edffb6f855e3fc">Live
demo</a></p>
<p>Here the conditional expression isn't a filter, but rather an
operator determining the value to be used for the list items:</p>
<p>&lt;value-if-condition-is-true&gt; <strong>if</strong>
&lt;condition&gt; <strong>else</strong>
&lt;value-if-condition-is-false&gt;</p>
<p>This becomes more obvious if you combine it with other operators:</p>
<p>[2 * (x <strong>if</strong> x % 2 == 0 <strong>else</strong> -1) + 1
<strong>for</strong> x <strong>in</strong> range(10)]</p>
<p># Out: [1, -1, 5, -1, 9, -1, 13, -1, 17, -1]</p>
<p><a href="http://coliru.stacked-crooked.com/a/59802eec8ad5deb8">Live
demo</a></p>
<p>If you are using Python 2.7, xrange may be better than range <a
href="https://docs.python.org/2/library/functions.html#xrange">for
several reasons as described in the xrange</a></p>
<p><a
href="https://docs.python.org/2/library/functions.html#xrange">documentation.</a></p>
<p>[2 * (x <strong>if</strong> x % 2 == 0 <strong>else</strong> -1) + 1
<strong>for</strong> x <strong>in</strong> xrange(10)] <em># Out: [1,
-1, 5, -1, 9, -1, 13, -1, 17, -1]</em></p>
<p>The above code is equivalent to:</p>
<p>numbers = []</p>
<p><strong>for</strong> x <strong>in</strong> range(10):</p>
<p><strong>if</strong> x % 2 == 0:</p>
<p>temp = x</p>
<p>else<strong>:</strong></p>
<p>temp = -1</p>
<p>numbers.append(2 * temp + 1)</p>
<p><strong>print</strong>(numbers)</p>
<p># Out: [1, -1, 5, -1, 9, -1, 13, -1, 17, -1]</p>
<p>One can combine ternary expressions and if conditions. The ternary
operator works on the filtered result:</p>
<p>[x <strong>if</strong> x &gt; 2 <strong>else</strong> '*'
<strong>for</strong> x <strong>in</strong> range(10) <strong>if</strong>
x % 2 == 0]</p>
<p># Out: ['*', '*', 4, 6, 8]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 133</p>
<p><span id="The_same_couldn_t_have_been_achi" class="anchor"></span>The
same couldn't have been achieved just by ternary operator only:</p>
<p>[x <strong>if</strong> (x &gt; 2 <strong>and</strong> x % 2 == 0)
<strong>else</strong> '*' <strong>for</strong> x <strong>in</strong>
range(10)]</p>
<p># Out:['*', '*', '*', '*', 4, '*', 6, '*', 8, '*']</p>
<p>See also: Filters, which often provide a sufficient alternative to
conditional list comprehensions.</p>
<p>Section 21.3: Avoid repetitive and expensive operations using</p>
<p>conditional clause</p>
<p>Consider the below list comprehension:</p>
<p>&gt;&gt;&gt; <strong>def</strong> f(x):</p>
<p>... <strong>import</strong> time</p>
<p>... time.sleep(.1) <em># Simulate expensive function</em> ...
<strong>return</strong> x**2</p>
<p>&gt;&gt;&gt; [f(x) <strong>for</strong> x <strong>in</strong>
range(1000) <strong>if</strong> f(x) &gt; 10]</p>
<p>[16, 25, 36, ...]</p>
<p>This results in two calls to f(x) for 1,000 values of x: one call for
generating the value and the other for checking the if condition. If
f(x) is a particularly expensive operation, this can have significant
performance implications.</p>
<p>Worse, if calling f() has side effects, it can have surprising
results.</p>
<p>Instead, you should evaluate the expensive operation only once for
each value of x by generating an intermediate</p>
<p>iterable (generator expression) as follows:</p>
<p>&gt;&gt;&gt; [v <strong>for</strong> v <strong>in</strong> (f(x)
<strong>for</strong> x <strong>in</strong> range(1000))
<strong>if</strong> v &gt; 10] [16, 25, 36, ...]</p>
<p><a href="https://docs.python.org/3.5/library/functions.html#map">Or,
using the builtin map equivalent:</a></p>
<p>&gt;&gt;&gt; [v <strong>for</strong> v <strong>in</strong> map(f,
range(1000)) <strong>if</strong> v &gt; 10]</p>
<p>[16, 25, 36, ...]</p>
<p>Another way that could result in a more readable code is to put the
partial result (v in the previous example) in an</p>
<p>iterable (such as a list or a tuple) and then iterate over it. Since
v will be the only element in the iterable, the result is that we now
have a reference to the output of our slow function computed only
once:</p>
<p>&gt;&gt;&gt; [v <strong>for</strong> x <strong>in</strong>
range(1000) <strong>for</strong> v <strong>in</strong> [f(x)]
<strong>if</strong> v &gt; 10] [16, 25, 36, ...]</p>
<p>However, in practice, the logic of code can be more complicated and
it's important to keep it readable. In general, a separate generator
function is recommended over a complex one-liner:</p>
<p>&gt;&gt;&gt; <strong>def</strong>
process_prime_numbers(iterable):</p>
<p>... <strong>for</strong> x <strong>in</strong> iterable:</p>
<p>... <strong>if</strong> is_prime(x):</p>
<p>... <strong>yield</strong> f(x)</p>
<p>...</p>
<p>&gt;&gt;&gt; [x <strong>for</strong> x <strong>in</strong>
process_prime_numbers(range(1000)) <strong>if</strong> x &gt; 10] [11,
13, 17, 19, ...]</p>
<p>Another way to prevent computing f(x) multiple times is to use the <a
href="https://docs.python.org/3/library/functools.html#functools.lru_cache">@functools.lru_cache()(Python
3.2+)</a> decorator on f(x). This way since the output of f for the
input x has already been computed once, the second</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 134</p>
<p><span id="function_invocation_of_the_origi"
class="anchor"></span>function invocation of the original list
comprehension will be as fast as a dictionary lookup. This approach
uses</p>
<p><a href="https://en.wikipedia.org/wiki/Memoization">memoization</a>
to improve efficiency, which is comparable to using generator
expressions.</p>
<p>Say you have to flatten a list</p>
<p>l = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]</p>
<p>Some of the methods could be:</p>
<p>reduce(<strong>lambda</strong> x, y: x+y, l)</p>
<p>sum(l, [])</p>
<p>list(itertools.chain(*l))</p>
<p>However list comprehension would provide the best time
complexity.</p>
<p>[item <strong>for</strong> sublist <strong>in</strong> l
<strong>for</strong> item <strong>in</strong> sublist]</p>
<p>The shortcuts based on + (including the implied use in sum) are, of
necessity, O(L^2) when there are L sublists -- as</p>
<p>the intermediate result list keeps getting longer, at each step a new
intermediate result list object gets allocated, and all the items in the
previous intermediate result must be copied over (as well as a few new
ones added at the</p>
<p>end). So (for simplicity and without actual loss of generality) say
you have L sublists of I items each: the first I items</p>
<p>are copied back and forth L-1 times, the second I items L-2 times,
and so on; total number of copies is I times the sum of x for x from 1
to L excluded, i.e., I * (L**2)/2.</p>
<p>The list comprehension just generates one list, once, and copies each
item over (from its original place of residence</p>
<p>to the result list) also exactly once.</p>
<p>Section 21.4: Dictionary Comprehensions</p>
<p>A <a href="https://www.python.org/dev/peps/pep-0274/">dictionary
comprehension</a> is similar to a list comprehension except that it
produces a dictionary object instead of</p>
<p>a list.</p>
<p>A basic example:</p>
<p>Python 2.x Version ≥ 2.7</p>
<p>{x: x * x <strong>for</strong> x <strong>in</strong> (1, 2, 3,
4)}</p>
<p># Out: {1: 1, 2: 4, 3: 9, 4: 16}</p>
<p>which is just another way of writing:</p>
<p>dict((x, x * x) <strong>for</strong> x <strong>in</strong> (1, 2, 3,
4))</p>
<p># Out: {1: 1, 2: 4, 3: 9, 4: 16}</p>
<p>As with a list comprehension, we can use a conditional statement
inside the dict comprehension to produce only</p>
<p>the dict elements meeting some criterion.</p>
<p>Python 2.x Version ≥ 2.7</p>
<p>{name: len(name) <strong>for</strong> name <strong>in</strong>
('Stack', 'Overflow', 'Exchange') <strong>if</strong> len(name) &gt; 6}
<em># Out: {'Exchange': 8, 'Overflow': 8}</em></p>
<p>Or, rewritten using a generator expression.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 135</p>
<p><span id="dict__name__len_name___for_name"
class="anchor"></span>dict((name, len(name)) <strong>for</strong> name
<strong>in</strong> ('Stack', 'Overflow', 'Exchange')
<strong>if</strong> len(name) &gt; 6) <em># Out: {'Exchange': 8,
'Overflow': 8}</em></p>
<p>Starting with a dictionary and using dictionary comprehension as a
key-value pair filter</p>
<p>Python 2.x Version ≥ 2.7</p>
<p>initial_dict = {'x': 1, 'y': 2}</p>
<p>{key: value <strong>for</strong> key, value <strong>in</strong>
initial_dict.items() <strong>if</strong> key == 'x'} <em># Out: {'x':
1}</em></p>
<p>Switching key and value of dictionary (invert dictionary)</p>
<p>If you have a dict containing simple <em>hashable</em> values
(duplicate values may have unexpected results):</p>
<p>my_dict = {1: 'a', 2: 'b', 3: 'c'}</p>
<p>and you wanted to swap the keys and values you can take several
approaches depending on your coding style:</p>
<p>swapped = {v: k <strong>for</strong> k, v <strong>in</strong>
my_dict.items()}</p>
<p>swapped = dict((v, k) <strong>for</strong> k, v <strong>in</strong>
my_dict.iteritems()) swapped = dict(zip(my_dict.values(), my_dict))</p>
<p>swapped = dict(zip(my_dict.values(), my_dict.keys())) swapped =
dict(map(reversed, my_dict.items()))</p>
<p><strong>print</strong>(swapped)</p>
<p># Out: {a: 1, b: 2, c: 3}</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>If your dictionary is large, consider <em>importing <a
href="https://docs.python.org/2/library/itertools.html">itertools</a></em>
<a href="https://docs.python.org/2/library/itertools.html">and
utilize</a> izip or imap.</p>
<p>Merging Dictionaries</p>
<p>Combine dictionaries and optionally override old values with a nested
dictionary comprehension.</p>
<p>dict1 = {'w': 1, 'x': 1}</p>
<p>dict2 = {'x': 2, 'y': 2, 'z': 2}</p>
<p>{k: v <strong>for</strong> d <strong>in</strong> [dict1, dict2]
<strong>for</strong> k, v <strong>in</strong> d.items()} <em># Out:
{'w': 1, 'x': 2, 'y': 2, 'z': 2}</em></p>
<p><a href="https://www.python.org/dev/peps/pep-0448/">However,
dictionary unpacking (PEP 448</a>) may be a preferred.</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>{**dict1, **dict2}</p>
<p># Out: {'w': 1, 'x': 2, 'y': 2, 'z': 2}</p>
<p><strong>Note</strong><a
href="https://www.python.org/dev/peps/pep-0274/">: dictionary
comprehensions were added in Python 3.0 and backported to 2.7+, unlike
list comprehensions,</a></p>
<p>which were added in 2.0. Versions &lt; 2.7 can use generator
expressions and the dict() builtin to simulate the</p>
<p>behavior of dictionary comprehensions.</p>
<p>Section 21.5: List Comprehensions with Nested Loops</p>
<p><a
href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">List
Comprehensions can use nested</a> <strong>for</strong> loops. You can
code any number of nested for loops within a list</p>
<p>comprehension, and each <strong>for</strong> loop may have an
optional associated if test. When doing so, the order of the
<strong>for</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 136</p>
<p>constructs is the same order as when writing a series of nested
<strong>for</strong> statements. The general structure of list
comprehensions looks like this:</p>
<p>[ expression <strong>for</strong> target1 <strong>in</strong>
iterable1 [<strong>if</strong> condition1]</p>
<p><strong>for</strong> target2 <strong>in</strong> iterable2
[<strong>if</strong> condition2]...</p>
<p><strong>for</strong> targetN <strong>in</strong> iterableN
[<strong>if</strong> conditionN] ]</p>
<p>For example, the following code flattening a list of lists using
multiple <strong>for</strong> statements:</p>
<p>data = [[1, 2], [3, 4], [5, 6]]</p>
<p>output = []</p>
<p><strong>for</strong> each_list <strong>in</strong> data:</p>
<p><strong>for</strong> element <strong>in</strong> each_list:</p>
<p>output.append(element)</p>
<p><strong>print</strong>(output)</p>
<p># Out: [1, 2, 3, 4, 5, 6]</p>
<p>can be equivalently written as a list comprehension with multiple
<strong>for</strong> constructs:</p>
<p>data = [[1, 2], [3, 4], [5, 6]]</p>
<p>output = [element <strong>for</strong> each_list <strong>in</strong>
data <strong>for</strong> element <strong>in</strong> each_list]
<strong>print</strong>(output)</p>
<p># Out: [1, 2, 3, 4, 5, 6]</p>
<p><a href="https://ideone.com/R7uwEP">Live Demo</a></p>
<p>In both the expanded form and the list comprehension, the outer loop
(first for statement) comes first.</p>
<p>In addition to being more compact, the nested comprehension is also
significantly faster.</p>
<p>In [1]: data = [[1,2],[3,4],[5,6]]</p>
<p>In [2]: <strong>def</strong> f():</p>
<p>...: output=[]</p>
<p>...: <strong>for</strong> each_list <strong>in</strong> data:</p>
<p>...: <strong>for</strong> element <strong>in</strong> each_list:</p>
<p>...: output.append(element)</p>
<p>...: <strong>return</strong> output</p>
<p>In [3]: timeit f()</p>
<p>1000000 loops, best of 3: 1.37 µs per loop</p>
<p>In [4]: timeit [inner <strong>for</strong> outer <strong>in</strong>
data <strong>for</strong> inner <strong>in</strong> outer] 1000000
loops, best of 3: 632 ns per loop</p>
<p>The overhead for the function call above is about <em>140ns</em>.</p>
<p>Inline ifs are nested similarly, and may occur in any position after
the first <strong>for</strong>:</p>
<p>data = [[1], [2, 3], [4, 5]]</p>
<p>output = [element <strong>for</strong> each_list <strong>in</strong>
data</p>
<p><strong>if</strong> len(each_list) == 2</p>
<p><strong>for</strong> element <strong>in</strong> each_list</p>
<p><strong>if</strong> element != 5]</p>
<p><strong>print</strong>(output)</p>
<p># Out: [2, 3, 4]</p>
<p><a href="https://ideone.com/kPO2Zy">Live Demo</a></p>
<p>For the sake of readability, however, you should consider using
traditional <em>for-loops</em>. This is especially true when</p>
<p>nesting is more than 2 levels deep, and/or the logic of the
comprehension is too complex. multiple nested loop list</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 137</p>
<p><span id="comprehension_could_be_error_pro"
class="anchor"></span>comprehension could be error prone or it gives
unexpected result.</p>
<p>Section 21.6: Generator Expressions</p>
<p>Generator expressions are very similar to list comprehensions. The
main difference is that it does not create a full</p>
<p>set of results at once; it creates a generator object which can then
be iterated over.</p>
<p>For instance, see the difference in the following code:</p>
<p># list comprehension</p>
<p>[x**2 <strong>for</strong> x <strong>in</strong> range(10)]</p>
<p># Output: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</p>
<p>Python 2.x Version ≥ 2.4</p>
<p># generator comprehension</p>
<p>(x**2 <strong>for</strong> x <strong>in</strong> xrange(10))</p>
<p># Output: &lt;generator object &lt;genexpr&gt; at 0x11b4b7c80&gt;</p>
<p>These are two very different objects:</p>
<p>the list comprehension returns a list object whereas the generator
comprehension returns a generator.</p>
<p>generator objects cannot be indexed and makes use of the next
function to get items in order.</p>
<p><strong>Note</strong>: We use xrange since it too creates a generator
object. If we would use range, a list would be created. Also,</p>
<p>xrange exists only in later version of python 2. In python 3, range
just returns a generator. For more information,</p>
<p><em>see the</em> Differences between range and xrange functions
<em>example.</em></p>
<p>Python 2.x Version ≥ 2.4</p>
<p>g = (x**2 <strong>for</strong> x <strong>in</strong> xrange(10))</p>
<p><strong>print</strong>(g[0])</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: 'generator' object has no attribute '__getitem__'</p>
<p>g.next() <em># 0</em></p>
<p>g.next() <em># 1</em></p>
<p>g.next() <em># 4</em></p>
<p>...</p>
<p>g.next() <em># 81</em></p>
<p><em>g.next()</em> # Throws StopIteration Exception</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>StopIteration</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>NOTE: The function g.next() should be substituted by next(g) and
xrange with range since</p>
<p>Iterator.next() and xrange() do not exist in Python 3.</p>
<p>Although both of these can be iterated in a similar way:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 138</p>
<p><strong>for</strong> i <strong>in</strong> [x**2 <strong>for</strong>
x <strong>in</strong> range(10)]:</p>
<p>print<strong>(i)</strong></p>
<p>"""</p>
<p>Out:</p>
<p>0</p>
<p>1</p>
<p>4</p>
<p>...</p>
<p>81</p>
<p>"""</p>
<p>Python 2.x Version ≥ 2.4</p>
<p><strong>for</strong> i <strong>in</strong> (x**2 <strong>for</strong>
x <strong>in</strong> xrange(10)):</p>
<p>print<strong>(i)</strong></p>
<p>"""</p>
<p>Out:</p>
<p>0</p>
<p>1</p>
<p>4</p>
<p>.</p>
<p>.</p>
<p>.</p>
<p>81</p>
<p>"""</p>
<p>Use cases</p>
<p>Generator expressions are lazily evaluated, which means that they
generate and return each value only when the generator is iterated. This
is often useful when iterating through large datasets, avoiding the need
to create a</p>
<p>duplicate of the dataset in memory:</p>
<p><strong>for</strong> square <strong>in</strong> (x**2
<strong>for</strong> x <strong>in</strong> range(1000000)):</p>
<p>#do something</p>
<p>Another common use case is to avoid iterating over an entire iterable
if doing so is not necessary. In this example,</p>
<p>an item is retrieved from a remote API with each iteration of
get_objects(). Thousands of objects may exist, must be retrieved
one-by-one, and we only need to know if an object matching a pattern
exists. By using a generator</p>
<p>expression, when we encounter an object matching the pattern.</p>
<p><strong>def</strong> get_objects():</p>
<p>"""Gets objects from an API one by one"""</p>
<p><strong>while</strong> True:</p>
<p><strong>yield</strong> get_next_item()</p>
<p><strong>def</strong> object_matches_pattern(obj):</p>
<p># perform potentially complex calculation</p>
<p><strong>return</strong> matches_pattern</p>
<p><strong>def</strong> right_item_exists():</p>
<p>items = (object_matched_pattern(each) <strong>for</strong> each
<strong>in</strong> get_objects())</p>
<p><strong>for</strong> item <strong>in</strong> items:</p>
<p><strong>if</strong> item.is_the_right_one:</p>
<p>return <strong>True</strong></p>
<p>return <strong>False</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 139</p>
<p><span id="Section_21_7__Set_Comprehensions"
class="anchor"></span>Section 21.7: Set Comprehensions</p>
<p>Set comprehension is similar to list and dictionary comprehension,
but it produces a <a
href="https://docs.python.org/2/tutorial/datastructures.html#sets">set,
which is an unordered</a></p>
<p>collection of unique elements.</p>
<p>Python 2.x Version ≥ 2.7</p>
<p># A set containing every value in range(5):</p>
<p>{x <strong>for</strong> x <strong>in</strong> range(5)}</p>
<p># Out: {0, 1, 2, 3, 4}</p>
<p># A set of even numbers between 1 and 10:</p>
<p>{x <strong>for</strong> x <strong>in</strong> range(1, 11)
<strong>if</strong> x % 2 == 0}</p>
<p># Out: {2, 4, 6, 8, 10}</p>
<p><em># Unique alphabetic characters in a string of text:</em> text =
"When in the Course of human events it becomes necessary for one
people..." {ch.lower() <strong>for</strong> ch <strong>in</strong> text
<strong>if</strong> ch.isalpha()}</p>
<p># Out: set(['a', 'c', 'b', 'e', 'f', 'i', 'h', 'm', 'l', 'o', # 'n',
'p', 's', 'r', 'u', 't', 'w', 'v', 'y'])</p>
<p><a href="https://ideone.com/Fd95Zl">Live Demo</a></p>
<p>Keep in mind that sets are unordered. This means that the order of
the results in the set may differ from the one</p>
<p>presented in the above examples.</p>
<p><strong>Note</strong>: Set comprehension is available since python
2.7+, unlike list comprehensions, which were added in 2.0. In</p>
<p>Python 2.2 to Python 2.6, the set() function can be used with a
generator expression to produce the same result:</p>
<p>Python 2.x Version ≥ 2.2</p>
<p>set(x <strong>for</strong> x <strong>in</strong> range(5))</p>
<p># Out: {0, 1, 2, 3, 4}</p>
<p>Section 21.8: Refactoring filter and map to list</p>
<p>comprehensions</p>
<p>The filter or map <a
href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">functions
should often be replaced by list comprehensions</a>. Guido Van Rossum
describes this</p>
<p><a
href="http://www.artima.com/weblogs/viewpost.jsp?thread=98196">well in
an open letter in 2005:</a></p>
<p>filter(P, S) is almost always written clearer as [x
<strong>for</strong> x <strong>in</strong> S <strong>if</strong> P(x)],
and this has the huge advantage that the most common usages involve
predicates that are comparisons, e.g. x==42, and</p>
<p>defining a lambda for that just requires much more effort for the
reader (plus the lambda is slower than the list comprehension). Even
more so for map(F, S) which becomes [F(x) <strong>for</strong> x
<strong>in</strong> S]. Of course, in</p>
<p>many cases you'd be able to use generator expressions instead.</p>
<p>The following lines of code are considered "<em>not pythonic</em>"
and will raise errors in many python linters.</p>
<p>filter(<strong>lambda</strong> x: x % 2 == 0, range(10)) <em># even
numbers &lt; 10</em> map(<strong>lambda</strong> x: 2*x, range(10))
<em># multiply each number by two</em> reduce(<strong>lambda</strong>
x,y: x+y, range(10)) <em># sum of all elements in list</em></p>
<p>Taking what we have learned from the previous quote, we can break
down these filter and map expressions into their equivalent <em>list
comprehensions</em>; also removing the <em>lambda</em> functions from
each - making the code more</p>
<p>readable in the process.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 140</p>
<p><span id="__Filter" class="anchor"></span># Filter:</p>
<p># P(x) = x % 2 == 0</p>
<p># S = range(10)</p>
<p>[x <strong>for</strong> x <strong>in</strong> range(10)
<strong>if</strong> x % 2 == 0]</p>
<p># Map</p>
<p># F(x) = 2*x</p>
<p># S = range(10)</p>
<p>[2*x <strong>for</strong> x <strong>in</strong> range(10)]</p>
<p>Readability becomes even more apparent when dealing with chaining
functions. Where due to readability, the</p>
<p>results of one map or filter function should be passed as a result to
the next; with simple cases, these can be replaced with a single list
comprehension. Further, we can easily tell from the list comprehension
what the outcome</p>
<p>of our process is, where there is more cognitive load when reasoning
about the chained Map &amp; Filter process.</p>
<p># Map &amp; Filter</p>
<p>filtered = filter(<strong>lambda</strong> x: x % 2 == 0,
range(10))</p>
<p>results = map(<strong>lambda</strong> x: 2*x, filtered)</p>
<p># List comprehension</p>
<p>results = [2*x <strong>for</strong> x <strong>in</strong> range(10)
<strong>if</strong> x % 2 == 0]</p>
<p>Refactoring - Quick Reference</p>
<p>Map</p>
<p>map(F, S) == [F(x) <strong>for</strong> x <strong>in</strong> S]</p>
<p>Filter</p>
<p>filter(P, S) == [x <strong>for</strong> x <strong>in</strong> S
<strong>if</strong> P(x)]</p>
<p>where F and P are functions which respectively transform input values
and return a bool</p>
<p>Section 21.9: Comprehensions involving tuples</p>
<p>The <strong>for</strong> clause of a <a
href="https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions">list
comprehension can specify more than one variable:</a></p>
<p>[x + y <strong>for</strong> x, y <strong>in</strong> [(1, 2), (3, 4),
(5, 6)]]</p>
<p># Out: [3, 7, 11]</p>
<p>[x + y <strong>for</strong> x, y <strong>in</strong> zip([1, 3, 5],
[2, 4, 6])]</p>
<p># Out: [3, 7, 11]</p>
<p>This is just like regular <strong>for</strong> loops:</p>
<p><strong>for</strong> x, y <strong>in</strong> [(1,2), (3,4),
(5,6)]:</p>
<p>print<strong>(x+y)</strong></p>
<p># 3</p>
<p># 7</p>
<p># 11</p>
<p>Note however, if the expression that begins the comprehension is a
tuple then it must be parenthesized:</p>
<p>[x, y <strong>for</strong> x, y <strong>in</strong> [(1, 2), (3, 4),
(5, 6)]]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 141</p>
<p><span id="__SyntaxError__invalid_syntax" class="anchor"></span>#
SyntaxError: invalid syntax</p>
<p>[(x, y) <strong>for</strong> x, y <strong>in</strong> [(1, 2), (3,
4), (5, 6)]]</p>
<p># Out: [(1, 2), (3, 4), (5, 6)]</p>
<p>Section 21.10: Counting Occurrences Using Comprehension</p>
<p>When we want to count the number of items in an iterable, that meet
some condition, we can use comprehension</p>
<p>to produce an idiomatic syntax:</p>
<p># Count the numbers in `range(1000)` that are even and contain the
digit `9`: <em><strong>print</strong> (sum(</em></p>
<p>1 <strong>for</strong> x <strong>in</strong> range(1000)</p>
<p><strong>if</strong> x % 2 == 0 <strong>and</strong></p>
<p>'9' <strong>in</strong> str(x)</p>
<p>))</p>
<p># Out: 95</p>
<p>The basic concept can be summarized as:</p>
<p>1. Iterate over the elements in range(1000).</p>
<p>2. Concatenate all the needed if conditions.</p>
<p>3. Use 1 as <em>expression</em> to return a 1 for each item that
meets the conditions. 4. Sum up all the 1s to determine number of items
that meet the conditions.</p>
<p><strong>Note</strong>: Here we are not collecting the 1s in a list
(note the absence of square brackets), but we are passing the ones</p>
<p>directly to the sum function that is summing them up. This is called
a <em>generator expression</em>, which is similar to a</p>
<p>Comprehension.</p>
<p>Section 21.11: Changing Types in a List</p>
<p>Quantitative data is often read in as strings that must be converted
to numeric types before processing. The types</p>
<p>of all list items can be converted with either a List Comprehension
or the map() function.</p>
<p># Convert a list of strings to integers.</p>
<p>items = ["1","2","3","4"]</p>
<p>[int(item) <strong>for</strong> item <strong>in</strong> items]</p>
<p># Out: [1, 2, 3, 4]</p>
<p># Convert a list of strings to float.</p>
<p>items = ["1","2","3","4"]</p>
<p>map(float, items)</p>
<p># Out:[1.0, 2.0, 3.0, 4.0]</p>
<p>Section 21.12: Nested List Comprehensions</p>
<p>Nested list comprehensions, unlike list comprehensions with nested
loops, are List comprehensions within a list</p>
<p>comprehension. The initial expression can be any arbitrary
expression, including another list comprehension.</p>
<p>#List Comprehension with nested loop</p>
<p>[x + y <strong>for</strong> x <strong>in</strong> [1, 2, 3]
<strong>for</strong> y <strong>in</strong> [3, 4, 5]]</p>
<p>#Out: [4, 5, 6, 5, 6, 7, 6, 7, 8]</p>
<p>#Nested List Comprehension</p>
<p>[[x + y <strong>for</strong> x <strong>in</strong> [1, 2, 3]]
<strong>for</strong> y <strong>in</strong> [3, 4, 5]]</p>
<p>#Out: [[4, 5, 6], [5, 6, 7], [6, 7, 8]]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 142</p>
<p><span id="The_Nested_example_is_equivalent" class="anchor"></span>The
Nested example is equivalent to</p>
<p>l = []</p>
<p><strong>for</strong> y <strong>in</strong> [3, 4, 5]:</p>
<p>temp = []</p>
<p><strong>for</strong> x <strong>in</strong> [1, 2, 3]:</p>
<p>temp.append(x + y)</p>
<p>l.append(temp)</p>
<p>One example where a nested comprehension can be used it to transpose
a matrix.</p>
<p>matrix = [[1,2,3],</p>
<p>[4,5,6],</p>
<p>[7,8,9]]</p>
<p>[[row[i] <strong>for</strong> row <strong>in</strong> matrix]
<strong>for</strong> i <strong>in</strong> range(len(matrix))] <em>#
[[1, 4, 7], [2, 5, 8], [3, 6, 9]]</em></p>
<p>Like nested <strong>for</strong> loops, there is no limit to how deep
comprehensions can be nested.</p>
<p><em>[[[i + j + k <strong>for</strong> k <strong>in</strong> 'cd']
<strong>for</strong> j <strong>in</strong> 'ab'] <strong>for</strong> i
<strong>in</strong> '12']</em> # Out: [[['1ac', '1ad'], ['1bc', '1bd']],
[['2ac', '2ad'], ['2bc', '2bd']]]</p>
<p>Section 21.13: Iterate two or more list simultaneously within</p>
<p>list comprehension</p>
<p>For iterating more than two lists simultaneously within <em>list
comprehension</em><a
href="https://docs.python.org/2/library/functions.html#zip">, one may
use zip() as:</a></p>
<p>&gt;&gt;&gt; list_1 = [1, 2, 3 , 4]</p>
<p>&gt;&gt;&gt; list_2 = ['a', 'b', 'c', 'd']</p>
<p>&gt;&gt;&gt; list_3 = ['6', '7', '8', '9']</p>
<p># Two lists</p>
<p>&gt;&gt;&gt; [(i, j) <strong>for</strong> i, j <strong>in</strong>
zip(list_1, list_2)]</p>
<p>[(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd')]</p>
<p># Three lists</p>
<p>&gt;&gt;&gt; [(i, j, k) <strong>for</strong> i, j, k
<strong>in</strong> zip(list_1, list_2, list_3)] [(1, 'a', '6'), (2,
'b', '7'), (3, 'c', '8'), (4, 'd', '9')]</p>
<p># so on ...</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 143</p>
<p><span id="Chapter_22__List_slicing__select_1"
class="anchor"></span>Chapter 22: List slicing (selecting parts of</p>
<p>lists)</p>
<p>Section 22.1: Using the third "step" argument</p>
<p>lst = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']</p>
<p>lst[::2]</p>
<p># Output: ['a', 'c', 'e', 'g']</p>
<p>lst[::3]</p>
<p># Output: ['a', 'd', 'g']</p>
<p>Section 22.2: Selecting a sublist from a list</p>
<p>lst = ['a', 'b', 'c', 'd', 'e']</p>
<p>lst[2:4]</p>
<p># Output: ['c', 'd']</p>
<p>lst[2:]</p>
<p># Output: ['c', 'd', 'e']</p>
<p>lst[:4]</p>
<p># Output: ['a', 'b', 'c', 'd']</p>
<p>Section 22.3: Reversing a list with slicing</p>
<p>a = [1, 2, 3, 4, 5]</p>
<p># steps through the list backwards (step=-1)</p>
<p>b = a[::-1]</p>
<p># built-in list method to reverse 'a'</p>
<p>a.reverse()</p>
<p><strong>if</strong> a = b:</p>
<p><strong>print</strong>(True)</p>
<p>print<strong>(b)</strong></p>
<p># Output:</p>
<p># True</p>
<p># [5, 4, 3, 2, 1]</p>
<p>Section 22.4: Shifting a list using slicing</p>
<p><strong>def</strong> shift_list(array, s):</p>
<p>"""Shifts the elements of a list to the left or right.</p>
<p>Args:</p>
<p>array - the list to shift</p>
<p>s - the amount to shift the list ('+': right-shift, '-':
left-shift)</p>
<p>Returns:</p>
<p>shifted_array - the shifted list</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 144</p>
<p>"""</p>
<p># calculate actual shift amount (e.g., 11 --&gt; 1 if length of the
array is 5)</p>
<p>s %= len(array)</p>
<p># reverse the shift direction to be more intuitive</p>
<p>s *= -1</p>
<p># shift array with list slicing</p>
<p>shifted_array = array[s:] + array[:s]</p>
<p><strong>return</strong> shifted_array</p>
<p>my_array = [1, 2, 3, 4, 5]</p>
<p># negative numbers</p>
<p>shift_list(my_array, -7)</p>
<p>&gt;&gt;&gt; [3, 4, 5, 1, 2]</p>
<p># no shift on numbers equal to the size of the array
<em>shift_list(my_array, 5)</em></p>
<p>&gt;&gt;&gt; [1, 2, 3, 4, 5]</p>
<p># works on positive numbers</p>
<p>shift_list(my_array, 3)</p>
<p>&gt;&gt;&gt; [3, 4, 5, 1, 2]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 145</p>
<p><span id="Chapter_23__groupby_1" class="anchor"></span>Chapter 23:
groupby()</p>
<p>Parameter Details</p>
<p>iterable Any python iterable</p>
<p>key Function(criteria) on which to group the iterable</p>
<p>In Python, the itertools.groupby() method allows developers to group
values of an iterable class based on a</p>
<p>specified property into another iterable set of values.</p>
<p>Section 23.1: Example 4</p>
<p>In this example we see what happens when we use different types of
iterable.</p>
<p>things = [("animal", "bear"), ("animal", "duck"), ("plant",
"cactus"), ("vehicle", "harley"), \</p>
<p>("vehicle", "speed boat"), ("vehicle", "school bus")] dic = {}</p>
<p>f = <strong>lambda</strong> x: x[0]</p>
<p><strong>for</strong> key, group <strong>in</strong>
groupby(sorted(things, key=f), f):</p>
<p>dic[key] = list(group)</p>
<p>dic</p>
<p>Results in</p>
<p>{'animal': [('animal', 'bear'), ('animal', 'duck')],</p>
<p>'plant': [('plant', 'cactus')],</p>
<p>'vehicle': [('vehicle', 'harley'),</p>
<p>('vehicle', 'speed boat'),</p>
<p>('vehicle', 'school bus')]}</p>
<p>This example below is essentially the same as the one above it. The
only difference is that I have changed all the tuples to lists.</p>
<p>things = [["animal", "bear"], ["animal", "duck"], ["vehicle",
"harley"], ["plant", "cactus"], \</p>
<p>["vehicle", "speed boat"], ["vehicle", "school bus"]] dic = {}</p>
<p>f = <strong>lambda</strong> x: x[0]</p>
<p><strong>for</strong> key, group <strong>in</strong>
groupby(sorted(things, key=f), f):</p>
<p>dic[key] = list(group)</p>
<p>dic</p>
<p>Results</p>
<p>{'animal': [['animal', 'bear'], ['animal', 'duck']],</p>
<p>'plant': [['plant', 'cactus']],</p>
<p>'vehicle': [['vehicle', 'harley'],</p>
<p>['vehicle', 'speed boat'],</p>
<p>['vehicle', 'school bus']]}</p>
<p>Section 23.2: Example 2</p>
<p>This example illustrates how the default key is chosen if we do not
specify any</p>
<p>c = groupby(['goat', 'dog', 'cow', 1, 1, 2, 3, 11, 10, ('persons',
'man', 'woman')]) dic = {}</p>
<p><strong>for</strong> k, v <strong>in</strong> c:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 146</p>
<p><span id="dic_k____list_v" class="anchor"></span>dic[k] = list(v)</p>
<p>dic</p>
<p>Results in</p>
<p>{1: [1, 1],</p>
<p>2: [2],</p>
<p>3: [3],</p>
<p>('persons', 'man', 'woman'): [('persons', 'man', 'woman')],</p>
<p>'cow': ['cow'],</p>
<p>'dog': ['dog'],</p>
<p>10: [10],</p>
<p>11: [11],</p>
<p>'goat': ['goat']}</p>
<p>Notice here that the tuple as a whole counts as one key in this
list</p>
<p>Section 23.3: Example 3</p>
<p>Notice in this example that mulato and camel don't show up in our
result. Only the last element with the specified</p>
<p>key shows up. The last result for c actually wipes out two previous
results. But watch the new version where I have the data sorted first on
same key.</p>
<p>list_things = ['goat', 'dog', 'donkey', 'mulato', 'cow', 'cat',
('persons', 'man', 'woman'), \</p>
<p>'wombat', 'mongoose', 'malloo', 'camel']</p>
<p>c = groupby(list_things, key=<strong>lambda</strong> x: x[0])</p>
<p>dic = {}</p>
<p><strong>for</strong> k, v <strong>in</strong> c:</p>
<p>dic[k] = list(v)</p>
<p>dic</p>
<p>Results in</p>
<p>{'c': ['camel'],</p>
<p>'d': ['dog', 'donkey'],</p>
<p>'g': ['goat'],</p>
<p>'m': ['mongoose', 'malloo'],</p>
<p>'persons': [('persons', 'man', 'woman')],</p>
<p>'w': ['wombat']}</p>
<p>Sorted Version</p>
<p>list_things = ['goat', 'dog', 'donkey', 'mulato', 'cow', 'cat',
('persons', 'man', 'woman'), \</p>
<p>'wombat', 'mongoose', 'malloo', 'camel']</p>
<p>sorted_list = sorted(list_things, key = <strong>lambda</strong> x:
x[0]) <strong>print</strong>(sorted_list)</p>
<p>print<strong>()</strong></p>
<p>c = groupby(sorted_list, key=<strong>lambda</strong> x: x[0])</p>
<p>dic = {}</p>
<p><strong>for</strong> k, v <strong>in</strong> c:</p>
<p>dic[k] = list(v)</p>
<p>dic</p>
<p>Results in</p>
<p>['cow', 'cat', 'camel', 'dog', 'donkey', 'goat', 'mulato',
'mongoose', 'malloo', ('persons', 'man', 'woman'), 'wombat']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 147</p>
<p>{'c': ['cow', 'cat', 'camel'],</p>
<p>'d': ['dog', 'donkey'],</p>
<p>'g': ['goat'],</p>
<p>'m': ['mulato', 'mongoose', 'malloo'],</p>
<p>'persons': [('persons', 'man', 'woman')],</p>
<p>'w': ['wombat']}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 148</p>
<p><span id="Chapter_24__Linked_lists_1" class="anchor"></span>Chapter
24: Linked lists</p>
<p>A linked list is a collection of nodes, each made up of a reference
and a value. Nodes are strung together into a</p>
<p>sequence using their references. Linked lists can be used to
implement more complex data structures like lists, stacks, queues, and
associative arrays.</p>
<p>Section 24.1: Single linked list example</p>
<p>This example implements a linked list with many of the same methods
as that of the built-in list object.</p>
<p><strong>class</strong> Node:</p>
<p><strong>def</strong> __init__(self, val):</p>
<p>self.data = val</p>
<p>self.next = None</p>
<p><strong>def</strong> getData(self):</p>
<p><strong>return</strong> self.data</p>
<p><strong>def</strong> getNext(self):</p>
<p><strong>return</strong> self.next</p>
<p><strong>def</strong> setData(self, val):</p>
<p>self.data = val</p>
<p><strong>def</strong> setNext(self, val):</p>
<p>self.next = val</p>
<p><strong>class</strong> LinkedList:</p>
<p><strong>def</strong> __init__(self):</p>
<p>self.head = None</p>
<p><strong>def</strong> isEmpty(self):</p>
<p>"""Check if the list is empty"""</p>
<p><strong>return</strong> self.head <strong>is</strong> None</p>
<p><strong>def</strong> add(self, item):</p>
<p>"""Add the item to the list"""</p>
<p>new_node = Node(item)</p>
<p>new_node.setNext(self.head)</p>
<p>self.head = new_node</p>
<p><strong>def</strong> size(self):</p>
<p>"""Return the length/size of the list"""</p>
<p>count = 0</p>
<p>current = self.head</p>
<p><strong>while</strong> current <strong>is not</strong> None:</p>
<p>count += 1</p>
<p>current = current.getNext()</p>
<p>return <strong>count</strong></p>
<p><strong>def</strong> search(self, item):</p>
<p>"""Search for item in list. If found, return True. If not found,
return False"""</p>
<p>current = self.head</p>
<p>found = False</p>
<p><strong>while</strong> current <strong>is not</strong> None
<strong>and not</strong> found:</p>
<p><strong>if</strong> current.getData() <strong>is</strong> item:</p>
<p>found = True</p>
<p>else<strong>:</strong></p>
<p>current = current.getNext()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 149</p>
<p>return <strong>found</strong></p>
<p><strong>def</strong> remove(self, item):</p>
<p>"""Remove item from list. If item is not found in list, raise
ValueError"""</p>
<p>current = self.head</p>
<p>previous = None</p>
<p>found = False</p>
<p><strong>while</strong> current <strong>is not</strong> None
<strong>and not</strong> found:</p>
<p><strong>if</strong> current.getData() <strong>is</strong> item:</p>
<p>found = True</p>
<p>else<strong>:</strong></p>
<p>previous = current</p>
<p>current = current.getNext()</p>
<p><strong>if</strong> found:</p>
<p><strong>if</strong> previous <strong>is</strong> None:</p>
<p>self.head = current.getNext()</p>
<p>else<strong>:</strong></p>
<p>previous.setNext(current.getNext())</p>
<p>else<strong>:</strong></p>
<p><strong>raise</strong> ValueError</p>
<p><strong>print</strong> 'Value not found.'</p>
<p><strong>def</strong> insert(self, position, item):</p>
<p>"""</p>
<p>Insert item at position specified. If position specified is</p>
<p>out of bounds, raise IndexError</p>
<p>"""</p>
<p><strong>if</strong> position &gt; self.size() - 1:</p>
<p><strong>raise</strong> IndexError</p>
<p><strong>print</strong> "Index out of bounds."</p>
<p>current = self.head</p>
<p>previous = None</p>
<p>pos = 0</p>
<p><strong>if</strong> position <strong>is</strong> 0:</p>
<p>self.add(item)</p>
<p>else<strong>:</strong></p>
<p>new_node = Node(item)</p>
<p><strong>while</strong> pos &lt; position:</p>
<p>pos += 1</p>
<p>previous = current</p>
<p>current = current.getNext()</p>
<p>previous.setNext(new_node)</p>
<p>new_node.setNext(current)</p>
<p><strong>def</strong> index(self, item):</p>
<p>"""</p>
<p>Return the index where item is found.</p>
<p>If item is not found, return None.</p>
<p>"""</p>
<p>current = self.head</p>
<p>pos = 0</p>
<p>found = False</p>
<p><strong>while</strong> current <strong>is not</strong> None
<strong>and not</strong> found:</p>
<p><strong>if</strong> current.getData() <strong>is</strong> item:</p>
<p>found = True</p>
<p>else<strong>:</strong></p>
<p>current = current.getNext()</p>
<p>pos += 1</p>
<p><strong>if</strong> found:</p>
<p>pass</p>
<p>else<strong>:</strong></p>
<p>pos = None</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 150</p>
<p>return <strong>pos</strong></p>
<p><strong>def</strong> pop(self, position = None):</p>
<p>"""</p>
<p>If no argument is provided, return and remove the item at the
head.</p>
<p>If position is provided, return and remove the item at that
position.</p>
<p>If index is out of bounds, raise IndexError</p>
<p>"""</p>
<p><strong>if</strong> position &gt; self.size():</p>
<p><strong>print</strong> 'Index out of bounds'</p>
<p><strong>raise</strong> IndexError</p>
<p>current = self.head</p>
<p><strong>if</strong> position <strong>is</strong> None:</p>
<p>ret = current.getData()</p>
<p>self.head = current.getNext()</p>
<p>else<strong>:</strong></p>
<p>pos = 0</p>
<p>previous = None</p>
<p><strong>while</strong> pos &lt; position:</p>
<p>previous = current</p>
<p>current = current.getNext()</p>
<p>pos += 1</p>
<p>ret = current.getData()</p>
<p>previous.setNext(current.getNext())</p>
<p>print <strong>ret</strong></p>
<p>return <strong>ret</strong></p>
<p><strong>def</strong> append(self, item):</p>
<p>"""Append item to the end of the list"""</p>
<p>current = self.head</p>
<p>previous = None</p>
<p>pos = 0</p>
<p>length = self.size()</p>
<p><strong>while</strong> pos &lt; length:</p>
<p>previous = current</p>
<p>current = current.getNext()</p>
<p>pos += 1</p>
<p>new_node = Node(item)</p>
<p><strong>if</strong> previous <strong>is</strong> None:</p>
<p>new_node.setNext(current)</p>
<p>self.head = new_node</p>
<p>else<strong>:</strong></p>
<p>previous.setNext(new_node)</p>
<p><strong>def</strong> printList(self):</p>
<p>"""Print the list"""</p>
<p>current = self.head</p>
<p><strong>while</strong> current <strong>is not</strong> None:</p>
<p><strong>print</strong> current.getData()</p>
<p>current = current.getNext()</p>
<p>Usage functions much like that of the built-in list.</p>
<p>ll = LinkedList()</p>
<p>ll.add('l')</p>
<p>ll.add('H')</p>
<p>ll.insert(1,'e')</p>
<p>ll.append('l')</p>
<p>ll.append('o')</p>
<p>ll.printList()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 151</p>
<p>H</p>
<p>e</p>
<p>l</p>
<p>l</p>
<p>o</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 152</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"><strong>VIDEO:</strong>
Complete Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Bootcamp:
Go from zero</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">to
hero in Python 3</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Learn
Python like a Professional! Start from the</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">basics
and go all the way to creating your own</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">applications
and games!</a></p>
<p><img src="media/index-178_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-178_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Python professionally, learning both Python 2 and Python
3!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Create games with Python, like Tic Tac Toe and Blackjack!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn advanced Python features, like the collections module and how to
work with timestamps!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Object Oriented Programming with classes!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand complex topics, like decorators.</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand how to use both the Jupyter Notebook and create .py
files</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Get an understanding of how to create GUIs in the Jupyter Notebook
system!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Build a complete understanding of Python from the ground up!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Watch
Today →</a></p>
<p><span id="Chapter_25__Linked_List_Node_1"
class="anchor"></span>Chapter 25: Linked List Node</p>
<p>Section 25.1: Write a simple Linked List Node in python</p>
<p>A linked list is either:</p>
<p>the empty list, represented by None, or</p>
<p>a node that contains a cargo object and a reference to a linked
list.</p>
<p>#! /usr/bin/env python</p>
<p><strong>class</strong> Node:</p>
<p><strong>def</strong> __init__(self, cargo=None, next=None):</p>
<p>self.car = cargo</p>
<p>self.cdr = next</p>
<p><strong>def</strong> __str__(self):</p>
<p><strong>return</strong> str(self.car)</p>
<p><strong>def</strong> display(lst):</p>
<p><strong>if</strong> lst:</p>
<p>w("%s " % lst)</p>
<p>display(lst.cdr)</p>
<p>else<strong>:</strong></p>
<p>w("nil<strong>\n</strong>")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 154</p>
<p><span id="Chapter_26__Filter_1" class="anchor"></span>Chapter 26:
Filter</p>
<p>Parameter Details</p>
<p>function <em>callable</em> that determines the condition or None then
use the identity function for filtering (<em>positional-</em>
<em>only</em> )</p>
<p>iterable iterable that will be filtered
(<em>positional-only</em>)</p>
<p>Section 26.1: Basic use of filter</p>
<p>To filter discards elements of a sequence based on some criteria:</p>
<p>names = ['Fred', 'Wilma', 'Barney']</p>
<p><strong>def</strong> long_name(name):</p>
<p><strong>return</strong> len(name) &gt; 5</p>
<p>Python 2.x Version ≥ 2.0</p>
<p>filter(long_name, names)</p>
<p># Out: ['Barney']</p>
<p><em>[name <strong>for</strong> name <strong>in</strong> names
<strong>if</strong> len(name) &gt; 5]</em> # equivalent list
comprehension # Out: ['Barney']</p>
<p><strong>from</strong> itertools <strong>import</strong> ifilter</p>
<p><em>ifilter(long_name, names)</em> # as generator (similar to python
3.x filter builtin) # Out: &lt;itertools.ifilter at 0x4197e10&gt;</p>
<p><em>list(ifilter(long_name, names))</em> # equivalent to filter with
lists # Out: ['Barney']</p>
<p><em>(name <strong>for</strong> name <strong>in</strong> names
<strong>if</strong> len(name) &gt; 5)</em> # equivalent generator
expression # Out: &lt;generator object &lt;genexpr&gt; at
0x0000000003FD5D38&gt;</p>
<p>Python 2.x Version ≥ 2.6</p>
<p># Besides the options for older python 2.x versions there is a
future_builtin function: <em><strong>from</strong> future_builtins
<strong>import</strong> filter</em></p>
<p><em>filter(long_name, names)</em> # identical to itertools.ifilter #
Out: &lt;itertools.ifilter at 0x3eb0ba8&gt;</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><em>filter(long_name, names)</em> # returns a generator # Out:
&lt;filter at 0x1fc6e443470&gt;</p>
<p>list(filter(long_name, names)) <em># cast to list</em></p>
<p># Out: ['Barney']</p>
<p><em>(name <strong>for</strong> name <strong>in</strong> names
<strong>if</strong> len(name) &gt; 5)</em> # equivalent generator
expression # Out: &lt;generator object &lt;genexpr&gt; at
0x000001C6F49BF4C0&gt;</p>
<p>Section 26.2: Filter without function</p>
<p>If the function parameter is None, then the identity function will be
used:</p>
<p>list(filter(None, [1, 0, 2, [], '', 'a'])) <em># discards 0, [] and
'' # Out: [1, 2, 'a']</em></p>
<p>Python 2.x Version ≥ 2.0.1</p>
<p>[i <strong>for</strong> i <strong>in</strong> [1, 0, 2, [], '', 'a']
<strong>if</strong> i] <em># equivalent list comprehension</em></p>
<p>Python 3.x Version ≥ 3.0.0</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 155</p>
<p><span id="_i_for_i_in__1__0__2___________a" class="anchor"></span>(i
<strong>for</strong> i <strong>in</strong> [1, 0, 2, [], '', 'a']
<strong>if</strong> i) <em># equivalent generator expression</em></p>
<p>Section 26.3: Filter as short-circuit check</p>
<p>filter (python 3.x) and ifilter (python 2.x) return a generator so
they can be very handy when creating a short-</p>
<p>circuit test like or or <strong>and</strong>:</p>
<p>Python 2.x Version ≥ 2.0.1</p>
<p># not recommended in real use but keeps the example short:</p>
<p><strong>from</strong> itertools <strong>import</strong> ifilter
<strong>as</strong> filter</p>
<p>Python 2.x Version ≥ 2.6.1</p>
<p><strong>from</strong> future_builtins <strong>import</strong>
filter</p>
<p>To find the first element that is smaller than 100:</p>
<p>car_shop = [('Toyota', 1000), ('rectangular tire', 80), ('Porsche',
5000)] <strong>def</strong>
find_something_smaller_than(name_value_tuple):</p>
<p><strong>print</strong>('Check {0},
{1}$'.format(*name_value_tuple)</p>
<p><strong>return</strong> name_value_tuple[1] &lt; 100</p>
<p>next(filter(find_something_smaller_than, car_shop)) <em># Print:
Check Toyota, 1000$</em></p>
<p># Check rectangular tire, 80$</p>
<p># Out: ('rectangular tire', 80)</p>
<p>The next-function gives the next (in this case first) element of and
is therefore the reason why it's short-circuit.</p>
<p>Section 26.4: Complementary function: filterfalse, ifilterfalse</p>
<p>There is a complementary function for filter in the
itertools-module:</p>
<p>Python 2.x Version ≥ 2.0.1</p>
<p># not recommended in real use but keeps the example valid for python
2.x and python 3.x</p>
<p><strong>from</strong> itertools <strong>import</strong> ifilterfalse
<strong>as</strong> filterfalse</p>
<p>Python 3.x Version ≥ 3.0.0</p>
<p><strong>from</strong> itertools <strong>import</strong>
filterfalse</p>
<p>which works exactly like the <em>generator</em> filter but keeps only
the elements that are False:</p>
<p># Usage without function (None):</p>
<p>list(filterfalse(None, [1, 0, 2, [], '', 'a'])) <em># discards 1, 2,
'a' # Out: [0, [], '']</em></p>
<p># Usage with function</p>
<p>names = ['Fred', 'Wilma', 'Barney']</p>
<p><strong>def</strong> long_name(name):</p>
<p><strong>return</strong> len(name) &gt; 5</p>
<p>list(filterfalse(long_name, names))</p>
<p># Out: ['Fred', 'Wilma']</p>
<p># Short-circuit usage with next:</p>
<p>car_shop = [('Toyota', 1000), ('rectangular tire', 80), ('Porsche',
5000)] <strong>def</strong>
find_something_smaller_than(name_value_tuple):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 156</p>
<p><strong>print</strong>('Check {0},
{1}$'.format(*name_value_tuple)</p>
<p><strong>return</strong> name_value_tuple[1] &lt; 100</p>
<p>next(filterfalse(find_something_smaller_than, car_shop)) <em># Print:
Check Toyota, 1000$</em></p>
<p># Out: ('Toyota', 1000)</p>
<p># Using an equivalent generator:</p>
<p>car_shop = [('Toyota', 1000), ('rectangular tire', 80), ('Porsche',
5000)] generator = (car <strong>for</strong> car <strong>in</strong>
car_shop <strong>if not</strong> car[1] &lt; 100) next(generator)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 157</p>
<p><span id="Chapter_27__Heapq_1" class="anchor"></span>Chapter 27:
Heapq</p>
<p>Section 27.1: Largest and smallest items in a collection</p>
<p>To find the largest items in a collection, heapq module has a
function called nlargest, we pass it two arguments, the first one is the
number of items that we want to retrieve, the second one is the
collection name:</p>
<p>import <strong>heapq</strong></p>
<p>numbers = [1, 4, 2, 100, 20, 50, 32, 200, 150, 8]</p>
<p><strong>print</strong>(heapq.nlargest(4, numbers)) <em># [200, 150,
100, 50]</em></p>
<p>Similarly, to find the smallest items in a collection, we use
nsmallest function:</p>
<p><strong>print</strong>(heapq.nsmallest(4, numbers)) <em># [1, 2, 4,
8]</em></p>
<p>Both nlargest and nsmallest functions take an optional argument (key
parameter) for complicated data structures. The following example shows
the use of age property to retrieve the oldest and the youngest
people</p>
<p>from people dictionary:</p>
<p>people = [</p>
<p>{'firstname': 'John', 'lastname': 'Doe', 'age': 30},</p>
<p>{'firstname': 'Jane', 'lastname': 'Doe', 'age': 25},</p>
<p>{'firstname': 'Janie', 'lastname': 'Doe', 'age': 10},</p>
<p>{'firstname': 'Jane', 'lastname': 'Roe', 'age': 22},</p>
<p>{'firstname': 'Johnny', 'lastname': 'Doe', 'age': 12},</p>
<p>{'firstname': 'John', 'lastname': 'Roe', 'age': 45} ]</p>
<p>oldest = heapq.nlargest(2, people, key=<strong>lambda</strong> s:
s['age']) <strong>print</strong>(oldest)</p>
<p># Output: [{'firstname': 'John', 'age': 45, 'lastname': 'Roe'},
{'firstname': 'John', 'age': 30, 'lastname': 'Doe'}]</p>
<p>youngest = heapq.nsmallest(2, people, key=<strong>lambda</strong> s:
s['age']) <strong>print</strong>(youngest)</p>
<p># Output: [{'firstname': 'Janie', 'age': 10, 'lastname': 'Doe'},
{'firstname': 'Johnny', 'age': 12, 'lastname': 'Doe'}]</p>
<p>Section 27.2: Smallest item in a collection</p>
<p>The most interesting property of a heap is that its smallest element
is always the first element: heap[0]</p>
<p>import <strong>heapq</strong></p>
<p>numbers = [10, 4, 2, 100, 20, 50, 32, 200, 150, 8]</p>
<p>heapq.heapify(numbers)</p>
<p><strong>print</strong>(numbers)</p>
<p># Output: [2, 4, 10, 100, 8, 50, 32, 200, 150, 20]</p>
<p>heapq.heappop(numbers) <em># 2</em></p>
<p><strong>print</strong>(numbers)</p>
<p># Output: [4, 8, 10, 100, 20, 50, 32, 200, 150]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 158</p>
<p>heapq.heappop(numbers) <em># 4</em></p>
<p><strong>print</strong>(numbers)</p>
<p># Output: [8, 20, 10, 100, 150, 50, 32, 200]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 159</p>
<p><span id="Chapter_28__Tuple_1" class="anchor"></span>Chapter 28:
Tuple</p>
<p>A tuple is an immutable list of values. Tuples are one of Python's
simplest and most common collection types, and</p>
<p>can be created with the comma operator (value = 1, 2, 3).</p>
<p>Section 28.1: Tuple</p>
<p>Syntactically, a tuple is a comma-separated list of values:</p>
<p>t = 'a', 'b', 'c', 'd', 'e'</p>
<p>Although not necessary, it is common to enclose tuples in
parentheses:</p>
<p>t = ('a', 'b', 'c', 'd', 'e')</p>
<p>Create an empty tuple with parentheses:</p>
<p>t0 = ()</p>
<p><em>type(t0)</em> # &lt;type 'tuple'&gt;</p>
<p>To create a tuple with a single element, you have to include a final
comma:</p>
<p>t1 = 'a',</p>
<p><em>type(t1)</em> # &lt;type 'tuple'&gt;</p>
<p>Note that a single value in parentheses is not a tuple:</p>
<p>t2 = ('a')</p>
<p><em>type(t2)</em> # &lt;type 'str'&gt;</p>
<p>To create a singleton tuple it is necessary to have a trailing
comma.</p>
<p>t2 = ('a',)</p>
<p><em>type(t2)</em> # &lt;type 'tuple'&gt;</p>
<p><a
href="https://www.python.org/dev/peps/pep-0008/#when-to-use-trailing-commas">Note
that for singleton tuples it's recommended (see PEP8 on trailing commas)
to use parentheses. Also, no white</a></p>
<p>space after the trailing comma (see <a
href="https://www.python.org/dev/peps/pep-0008/#whitespace-in-expressions-and-statements">PEP8
on whitespaces)</a></p>
<p><em>t2 = ('a',)</em> # PEP8-compliant</p>
<p><em>t2 = 'a',</em> # this notation is not recommended by PEP8</p>
<p><em>t2 = ('a', )</em> # this notation is not recommended by PEP8</p>
<p>Another way to create a tuple is the built-in function tuple.</p>
<p>t = tuple('lupins')</p>
<p><em><strong>print</strong>(t)</em> # ('l', 'u', 'p', 'i', 'n', 's')
<em>t = tuple(range(3))</em></p>
<p><em><strong>print</strong>(t)</em> # (0, 1, 2)</p>
<p><a href="http://greenteapress.com/thinkpython/html/index.html">These
examples are based on material from the book <strong>Think
Python</strong> by Allen B. Downey</a>.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 160</p>
<p><span id="Section_28_2__Tuples_are_immutab"
class="anchor"></span>Section 28.2: Tuples are immutable</p>
<p>One of the main differences between lists and tuples in Python is
that tuples are immutable, that is, one cannot</p>
<p>add or modify items once the tuple is initialized. For example:</p>
<p>&gt;&gt;&gt; t = (1, 4, 9)</p>
<p>&gt;&gt;&gt; t[0] = 2</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: 'tuple' object does <strong>not</strong> support item
assignment</p>
<p>Similarly, tuples don't have .append and .extend methods as list
does. Using += is possible, but it changes the binding of the variable,
and not the tuple itself:</p>
<p>&gt;&gt;&gt; t = (1, 2)</p>
<p>&gt;&gt;&gt; q = t</p>
<p>&gt;&gt;&gt; t += (3, 4)</p>
<p>&gt;&gt;&gt; t</p>
<p>(1, 2, 3, 4)</p>
<p>&gt;&gt;&gt; q</p>
<p>(1, 2)</p>
<p>Be careful when placing mutable objects, such as lists, inside
tuples. This may lead to very confusing outcomes</p>
<p>when changing them. For example:</p>
<p>&gt;&gt;&gt; t = (1, 2, 3, [1, 2, 3])</p>
<p>(1, 2, 3, [1, 2, 3])</p>
<p>&gt;&gt;&gt; t[3] += [4, 5]</p>
<p>Will <em><strong>both</strong></em> raise an error and change the
contents of the list within the tuple:</p>
<p>TypeError: 'tuple' object does <strong>not</strong> support item
assignment &gt;&gt;&gt; t</p>
<p>(1, 2, 3, [1, 2, 3, 4, 5])</p>
<p>You can use the += operator to "append" to a tuple - this works by
creating a new tuple with the new element you "appended" and assign it
to its current variable; the old tuple is not changed, but replaced!</p>
<p>This avoids converting to and from a list, but this is slow and is a
bad practice, especially if you're going to append multiple times.</p>
<p>Section 28.3: Packing and Unpacking Tuples</p>
<p>Tuples in Python are values separated by commas. Enclosing
parentheses for inputting tuples are optional, so the two
assignments</p>
<p><em>a = 1, 2, 3</em> # a is the tuple (1, 2, 3)</p>
<p>and</p>
<p><em>a = (1, 2, 3)</em> # a is the tuple (1, 2, 3)</p>
<p>are equivalent. The assignment a = 1, 2, 3 is also called
<em>packing</em> because it packs values together in a tuple.</p>
<p>Note that a one-value tuple is also a tuple. To tell Python that a
variable is a tuple and not a single value you can use</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 161</p>
<p><span id="a_trailing_comma" class="anchor"></span>a trailing
comma</p>
<p><em>a = 1</em> # a is the value 1</p>
<p><em>a = 1,</em> # a is the tuple (1,)</p>
<p>A comma is needed also if you use parentheses</p>
<p><em>a = (1,)</em> # a is the tuple (1,)</p>
<p><em>a = (1)</em> # a is the value 1 and not a tuple</p>
<p>To unpack values from a tuple and do multiple assignments use</p>
<p># unpacking AKA multiple assignment</p>
<p>x, y, z = (1, 2, 3)</p>
<p># x == 1</p>
<p># y == 2</p>
<p># z == 3</p>
<p>The symbol _ can be used as a disposable variable name if one only
needs some elements of a tuple, acting as a</p>
<p>placeholder:</p>
<p>a = 1, 2, 3, 4</p>
<p>_, x, y, _ = a</p>
<p># x == 2</p>
<p># y == 3</p>
<p>Single element tuples:</p>
<p><em>x, = 1,</em> # x is the value 1</p>
<p><em>x = 1,</em> # x is the tuple (1,)</p>
<p>In Python 3 a target variable with a * prefix can be used as a <a
href="https://www.python.org/dev/peps/pep-3132/"><em>catch-all</em></a>
variable (see Unpacking Iterables ):</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>first, *more, last = (1, 2, 3, 4, 5)</p>
<p># first == 1</p>
<p># more == [2, 3, 4]</p>
<p># last == 5</p>
<p>Section 28.4: Built-in Tuple Functions</p>
<p>Tuples support the following build-in functions</p>
<p>Comparison</p>
<p>If elements are of the same type, python performs the comparison and
returns the result. If elements are different types, it checks whether
they are numbers.</p>
<p>If numbers, perform comparison.</p>
<p>If either element is a number, then the other element is
returned.</p>
<p>Otherwise, types are sorted alphabetically .</p>
<p>If we reached the end of one of the lists, the longer list is
"larger." If both list are same it returns 0.</p>
<p>tuple1 = ('a', 'b', 'c', 'd', 'e')</p>
<p>tuple2 = ('1','2','3')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 162</p>
<p><span id="tuple3_____a____b____c____d____e"
class="anchor"></span>tuple3 = ('a', 'b', 'c', 'd', 'e')</p>
<p>cmp(tuple1, tuple2)</p>
<p>Out: 1</p>
<p>cmp(tuple2, tuple1)</p>
<p>Out: -1</p>
<p>cmp(tuple1, tuple3)</p>
<p>Out: 0</p>
<p>Tuple Length</p>
<p>The function len returns the total length of the tuple</p>
<p>len(tuple1)</p>
<p>Out: 5</p>
<p>Max of a tuple</p>
<p>The function max returns item from the tuple with the max value</p>
<p>max(tuple1)</p>
<p>Out: 'e'</p>
<p>max(tuple2)</p>
<p>Out: '3'</p>
<p>Min of a tuple</p>
<p>The function min returns the item from the tuple with the min
value</p>
<p>min(tuple1)</p>
<p>Out: 'a'</p>
<p>min(tuple2)</p>
<p>Out: '1'</p>
<p>Convert a list into tuple</p>
<p>The built-in function tuple converts a list into a tuple.</p>
<p>list = [1,2,3,4,5]</p>
<p>tuple(list)</p>
<p>Out: (1, 2, 3, 4, 5)</p>
<p>Tuple concatenation</p>
<p>Use + to concatenate two tuples</p>
<p>tuple1 + tuple2</p>
<p>Out: ('a', 'b', 'c', 'd', 'e', '1', '2', '3')</p>
<p>Section 28.5: Tuple Are Element-wise Hashable and Equatable</p>
<p>hash( (1, 2) ) <em># ok</em></p>
<p><em>hash( ([], {"hello"})</em> # not ok, since lists and sets are not
hashabe</p>
<p>Thus a tuple can be put inside a set or as a key in a dict only if
each of its elements can.</p>
<p>{ (1, 2) } <em># ok</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 163</p>
<p><span id="_________hello________not_ok" class="anchor"></span>{ ([],
{"hello"}) ) <em># not ok</em></p>
<p>Section 28.6: Indexing Tuples</p>
<p>x = (1, 2, 3)</p>
<p>x[0] <em># 1</em></p>
<p>x[1] <em># 2</em></p>
<p>x[2] <em># 3</em></p>
<p><em>x[3]</em> # IndexError: tuple index out of range</p>
<p>Indexing with negative numbers will start from the last element as
-1:</p>
<p>x[-1] <em># 3</em></p>
<p>x[-2] <em># 2</em></p>
<p>x[-3] <em># 1</em></p>
<p><em>x[-4]</em> # IndexError: tuple index out of range</p>
<p>Indexing a range of elements</p>
<p><strong>print</strong>(x[:-1]) <em># (1, 2)</em></p>
<p><strong>print</strong>(x[-1:]) <em># (3,)</em></p>
<p><strong>print</strong>(x[1:3]) <em># (2, 3)</em></p>
<p>Section 28.7: Reversing Elements</p>
<p>Reverse elements within a tuple</p>
<p>colors = "red", "green", "blue"</p>
<p>rev = colors[::-1]</p>
<p># rev: ("blue", "green", "red")</p>
<p>colors = rev</p>
<p># colors: ("blue", "green", "red")</p>
<p>Or using reversed (reversed gives an iterable which is converted to a
tuple):</p>
<p>rev = tuple(reversed(colors))</p>
<p># rev: ("blue", "green", "red")</p>
<p>colors = rev</p>
<p># colors: ("blue", "green", "red")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 164</p>
<p><span id="Chapter_29__Basic_Input_and_Outp_1"
class="anchor"></span>Chapter 29: Basic Input and Output</p>
<p>Section 29.1: Using the print function</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>In Python 3, print functionality is in the form of a function:</p>
<p><strong>print</strong>("This string will be displayed in the output")
<em># This string will be displayed in the output</em></p>
<p><strong>print</strong>("You can print <strong>\n</strong> escape
characters too.")</p>
<p># You can print escape characters too.</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>In Python 2, print was originally a statement, as shown below.</p>
<p><strong>print</strong> "This string will be displayed in the output"
<em># This string will be displayed in the output</em></p>
<p><strong>print</strong> "You can print <strong>\n</strong> escape
characters too."</p>
<p># You can print escape characters too.</p>
<p>Note: using <strong>from</strong> __future__ <strong>import</strong>
print_function in Python 2 will allow users to use the
<strong>print</strong>() function the</p>
<p>same as Python 3 code. This is only available in Python 2.6 and
above.</p>
<p>Section 29.2: Input from a File</p>
<p>Input can also be read from files. Files can be opened using the
built-in function open. Using a <strong>with</strong>
<strong>as</strong> syntax (called a 'Context Manager') makes using open
and getting a handle for the file super easy:</p>
<p><strong>with</strong> open('somefile.txt', 'r') <strong>as</strong>
fileobj:</p>
<p># write code here using fileobj</p>
<p>This ensures that when code execution leaves the block the file is
automatically closed.</p>
<p>Files can be opened in different modes. In the above example the file
is opened as read-only. To open an existing</p>
<p>file for reading only use r. If you want to read that file as bytes
use rb. To append data to an existing file use a. Use w to create a file
or overwrite any existing files of the same name. You can use r+ to open
a file for both reading and</p>
<p>writing. The first argument of open() is the filename, the second is
the mode. If mode is left blank, it will default to r.</p>
<p># let's create an example file:</p>
<p><strong>with</strong> open('shoppinglist.txt', 'w')
<strong>as</strong> fileobj:</p>
<p>fileobj.write('tomato<strong>\n</strong>pasta<strong>\n</strong>garlic')</p>
<p><strong>with</strong> open('shoppinglist.txt', 'r')
<strong>as</strong> fileobj:</p>
<p># this method makes a list where each line</p>
<p># of the file is an element in the list</p>
<p>lines = fileobj.readlines()</p>
<p><strong>print</strong>(lines)</p>
<p># ['tomato\n', 'pasta\n', 'garlic']</p>
<p><strong>with</strong> open('shoppinglist.txt', 'r')
<strong>as</strong> fileobj:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 165</p>
<p># here we read the whole content into one string:</p>
<p>content = fileobj.read()</p>
<p># get a list of lines, just like int the previous example:</p>
<p>lines = content.split('<strong>\n</strong>')</p>
<p><strong>print</strong>(lines)</p>
<p># ['tomato', 'pasta', 'garlic']</p>
<p>If the size of the file is tiny, it is safe to read the whole file
contents into memory. If the file is very large it is often better to
read line-by-line or by chunks, and process the input in the same loop.
To do that:</p>
<p><strong>with</strong> open('shoppinglist.txt', 'r')
<strong>as</strong> fileobj:</p>
<p># this method reads line by line:</p>
<p>lines = []</p>
<p><strong>for</strong> line <strong>in</strong> fileobj:</p>
<p>lines.append(line.strip())</p>
<p>When reading files, be aware of the operating system-specific
line-break characters. Although <strong>for</strong> line
<strong>in</strong> fileobj automatically strips them off, it is always
safe to call strip() on the lines read, as it is shown above.</p>
<p>Opened files (fileobj in the above examples) always point to a
specific location in the file. When they are first opened the file
handle points to the very beginning of the file, which is the position
0. The file handle can display its</p>
<p>current position with tell:</p>
<p>fileobj = open('shoppinglist.txt', 'r')</p>
<p>pos = fileobj.tell()</p>
<p><strong>print</strong>('We are at %u.' % pos) <em># We are at
0.</em></p>
<p>Upon reading all the content, the file handler's position will be
pointed at the end of the file:</p>
<p>content = fileobj.read()</p>
<p>end = fileobj.tell()</p>
<p><strong>print</strong>('This file was %u characters long.' % end)</p>
<p># This file was 22 characters long.</p>
<p>fileobj.close()</p>
<p>The file handler position can be set to whatever is needed:</p>
<p>fileobj = open('shoppinglist.txt', 'r')</p>
<p>fileobj.seek(7)</p>
<p>pos = fileobj.tell()</p>
<p><strong>print</strong>('We are at character #%u.' % pos)</p>
<p>You can also read any length from the file content during a given
call. To do this pass an argument for read(). When read() is called with
no argument it will read until the end of the file. If you pass an
argument it will read that</p>
<p>number of bytes or characters, depending on the mode (rb and r
respectively):</p>
<p># reads the next 4 characters</p>
<p># starting at the current position</p>
<p>next4 = fileobj.read(4)</p>
<p># what we got?</p>
<p><strong>print</strong>(next4) <em># 'cucu'</em></p>
<p># where we are now?</p>
<p>pos = fileobj.tell()</p>
<p><em><strong>print</strong>('We are at %u.' % pos)</em> # We are at
11, as we was at 7, and read 4 chars.</p>
<p>fileobj.close()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 166</p>
<p><span id="To_demonstrate_the_difference_be" class="anchor"></span>To
demonstrate the difference between characters and bytes:</p>
<p><strong>with</strong> open('shoppinglist.txt', 'r')
<strong>as</strong> fileobj:</p>
<p><strong>print</strong>(type(fileobj.read())) <em># &lt;class
'str'&gt;</em></p>
<p><strong>with</strong> open('shoppinglist.txt', 'rb')
<strong>as</strong> fileobj:</p>
<p><strong>print</strong>(type(fileobj.read())) <em># &lt;class
'bytes'&gt;</em></p>
<p>Section 29.3: Read from stdin</p>
<p>Python programs can read from <a
href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">unix pipelines</a>.
Here is a simple example how to read from <a
href="https://docs.python.org/2/library/sys.html#sys.stdin">stdin</a>:</p>
<p>import <strong>sys</strong></p>
<p><strong>for</strong> line <strong>in</strong> sys.stdin:</p>
<p><strong>print</strong>(line)</p>
<p>Be aware that sys.stdin is a stream. It means that the for-loop will
only terminate when the stream has ended.</p>
<p>You can now pipe the output of another program into your python
program as follows:</p>
<p>$ cat myfile | python myprogram.py</p>
<p>In this example cat myfile can be any unix command that outputs to
stdout.</p>
<p><a
href="https://docs.python.org/2/library/fileinput.html">Alternatively,
using the fileinput module can come in handy:</a></p>
<p><strong>import</strong> fileinput</p>
<p><strong>for</strong> line <strong>in</strong> fileinput.input():</p>
<p>process(line)</p>
<p>Section 29.4: Using input() and raw_input()</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>raw_input will wait for the user to enter text and then return the
result as a string.</p>
<p>foo = raw_input("Put a message here that asks the user for
input")</p>
<p>In the above example foo will store whatever input the user
provides.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>input will wait for the user to enter text and then return the result
as a string.</p>
<p>foo = input("Put a message here that asks the user for input")</p>
<p>In the above example foo will store whatever input the user
provides.</p>
<p>Section 29.5: Function to prompt user for a number</p>
<p><strong>def</strong> input_number(msg, err_msg=None):</p>
<p><strong>while</strong> True:</p>
<p>try<strong>:</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 167</p>
<p><span id="return_float_raw_input_msg"
class="anchor"></span><strong>return</strong> float(raw_input(msg))</p>
<p><strong>except</strong> ValueError:</p>
<p><strong>if</strong> err_msg <strong>is not</strong> None:</p>
<p><strong>print</strong>(err_msg)</p>
<p><strong>def</strong> input_number(msg, err_msg=None):</p>
<p><strong>while</strong> True:</p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> float(input(msg))</p>
<p><strong>except</strong> ValueError:</p>
<p><strong>if</strong> err_msg <strong>is not</strong> None:</p>
<p><strong>print</strong>(err_msg)</p>
<p>And to use it:</p>
<p>user_number = input_number("input a number: ", "that's not a
number!")</p>
<p>Or, if you do not want an "error message":</p>
<p>user_number = input_number("input a number: ")</p>
<p>Section 29.6: Printing a string without a newline at the end</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>In Python 2.x, to continue a line with <strong>print</strong>, end
the <strong>print</strong> statement with a comma. It will automatically
add a space.</p>
<p><strong>print</strong> "Hello,",</p>
<p><strong>print</strong> "World!"</p>
<p># Hello, World!</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>In Python 3.x, the <strong>print</strong> function has an optional
end parameter that is what it prints at the end of the given string.</p>
<p>By default it's a newline character, so equivalent to this:</p>
<p><strong>print</strong>("Hello, ", end="<strong>\n</strong>")</p>
<p><strong>print</strong>("World!")</p>
<p># Hello,</p>
<p># World!</p>
<p>But you could pass in other strings</p>
<p><strong>print</strong>("Hello, ", end="")</p>
<p><strong>print</strong>("World!")</p>
<p># Hello, World!</p>
<p><strong>print</strong>("Hello, ", end="<br />
")</p>
<p><strong>print</strong>("World!")</p>
<p># Hello, &lt;br&gt;World!</p>
<p><strong>print</strong>("Hello, ", end="BREAK")</p>
<p><strong>print</strong>("World!")</p>
<p># Hello, BREAKWorld!</p>
<p>If you want more control over the output, you can use
sys.stdout.write:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 168</p>
<p>import <strong>sys</strong></p>
<p>sys.stdout.write("Hello, ")</p>
<p>sys.stdout.write("World!")</p>
<p># Hello, World!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 169</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"><strong>VIDEO:</strong>
Python for Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Science
and Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learning
Bootcamp</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learn
how to use NumPy, Pandas, Seaborn,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Matplotlib
, Plotly, Scikit-Learn , Machine Learning,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Tensorflow,
and more!</a></p>
<p><img src="media/index-195_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-195_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Python for Data Science and Machine Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Spark for Big Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Implement Machine Learning Algorithms</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use NumPy for Numerical Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Pandas for Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Matplotlib for Python Plotting</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Seaborn for statistical plots</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Plotly for interactive dynamic visualizations</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use SciKit-Learn for Machine Learning Tasks</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
K-Means Clustering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Logistic Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Linear Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Random Forest and Decision Trees</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Neural Networks <strong>Watch Today →</strong></a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Support Vector Machines</a></p>
<p><span id="Chapter_30__Files___Folders_I_O_1"
class="anchor"></span>Chapter 30: Files &amp; Folders I/O</p>
<p>Parameter Details</p>
<p>filename the path to your file or, if the file is in the working
directory, the filename of your file</p>
<p>access_mode a string value that determines how the file is opened</p>
<p>buffering an integer value used for optional line buffering</p>
<p>When it comes to storing, reading, or communicating data, working
with the files of an operating system is both</p>
<p>necessary and easy with Python. Unlike other languages where file
input and output requires complex reading and writing objects, Python
simplifies the process only needing commands to open, read/write and
close the file. This</p>
<p>topic explains how Python can interface with files on the operating
system.</p>
<p>Section 30.1: File modes</p>
<p>There are different modes you can open a file with, specified by the
mode parameter. These include:</p>
<p>'r' - reading mode. The default. It allows you only to read the file,
not to modify it. When using this mode the file must exist.</p>
<p>'w' - writing mode. It will create a new file if it does not exist,
otherwise will erase the file and allow you to</p>
<p>write to it.</p>
<p>'a' - append mode. It will write data to the end of the file. It does
not erase the file, and the file must exist for</p>
<p>this mode.</p>
<p>'rb' - reading mode in binary. This is similar to r except that the
reading is forced in binary mode. This is also a default choice.</p>
<p>'r+' - reading mode plus writing mode at the same time. This allows
you to read and write into files at the</p>
<p>same time without having to use r and w.</p>
<p>'rb+' - reading and writing mode in binary. The same as r+ except the
data is in binary</p>
<p>'wb' - writing mode in binary. The same as w except the data is in
binary.</p>
<p>'w+' - writing and reading mode. The exact same as r+ but if the file
does not exist, a new one is made.</p>
<p>Otherwise, the file is overwritten.</p>
<p>'wb+' - writing and reading mode in binary mode. The same as w+ but
the data is in binary.</p>
<p>'ab' - appending in binary mode. Similar to a except that the data is
in binary.</p>
<p>'a+' - appending and reading mode. Similar to w+ as it will create a
new file if the file does not exist.</p>
<p>Otherwise, the file pointer is at the end of the file if it
exists.</p>
<p>'ab+' - appending and reading mode in binary. The same as a+ except
that the data is in binary.</p>
<p><strong>with</strong> open(filename, 'r') <strong>as</strong> f:</p>
<p>f.read()</p>
<p><strong>with</strong> open(filename, 'w') <strong>as</strong> f:</p>
<p>f.write(filedata)</p>
<p><strong>with</strong> open(filename, 'a') <strong>as</strong> f:</p>
<p>f.write('<strong>\\</strong>n' + newdata)</p>
<p>r r+ w w+ a a+</p>
<p>Read ✔ ✔ ✘ ✔ ✘ ✔</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 171</p>
<p><span id="Write" class="anchor"></span>Write ✘ ✔ ✔ ✔ ✔ ✔</p>
<p>Creates file ✘ ✘ ✔ ✔ ✔ ✔</p>
<p>Erases file ✘ ✘ ✔ ✔ ✘ ✘</p>
<p>Initial position Start Start Start Start End End</p>
<p>Python 3 added a new mode for exclusive creation so that you will not
accidentally truncate or overwrite and</p>
<p>existing file.</p>
<p>'x' - open for exclusive creation, will raise FileExistsError if the
file already exists</p>
<p>'xb' - open for exclusive creation writing mode in binary. The same
as x except the data is in binary. 'x+' - reading and writing mode.
Similar to w+ as it will create a new file if the file does not exist.
Otherwise,</p>
<p>will raise FileExistsError.</p>
<p>'xb+' - writing and reading mode. The exact same as x+ but the data
is binary</p>
<p>x x+</p>
<p>Read ✘ ✔</p>
<p>Write ✔ ✔</p>
<p>Creates file ✔ ✔</p>
<p>Erases file ✘ ✘</p>
<p>Initial position Start Start</p>
<p>Allow one to write your file open code in a more pythonic manner:</p>
<p>Python 3.x Version ≥ 3.3</p>
<p>try<strong>:</strong></p>
<p><strong>with</strong> open("fname", "r") <strong>as</strong>
fout:</p>
<p># Work with your open file</p>
<p><strong>except</strong> FileExistsError:</p>
<p># Your error handling goes here</p>
<p>In Python 2 you would have done something like</p>
<p>Python 2.x Version ≥ 2.0</p>
<p><strong>import</strong> os.path</p>
<p><strong>if</strong> os.path.isfile(fname):</p>
<p><strong>with</strong> open("fname", "w") <strong>as</strong>
fout:</p>
<p># Work with your open file</p>
<p>else<strong>:</strong></p>
<p># Your error handling goes here</p>
<p>Section 30.2: Reading a file line-by-line</p>
<p>The simplest way to iterate over a file line-by-line:</p>
<p><strong>with</strong> open('myfile.txt', 'r') <strong>as</strong>
fp:</p>
<p><strong>for</strong> line <strong>in</strong> fp:</p>
<p><strong>print</strong>(line)</p>
<p>readline() allows for more granular control over line-by-line
iteration. The example below is equivalent to the one above:</p>
<p><strong>with</strong> open('myfile.txt', 'r') <strong>as</strong>
fp:</p>
<p><strong>while</strong> True:</p>
<p>cur_line = fp.readline()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 172</p>
<p><span id="__If_the_result_is_an_empty_stri" class="anchor"></span>#
If the result is an empty string</p>
<p><strong>if</strong> cur_line == '':</p>
<p># We have reached the end of the file</p>
<p>break</p>
<p><strong>print</strong>(cur_line)</p>
<p>Using the for loop iterator and readline() together is considered bad
practice.</p>
<p>More commonly, the readlines() method is used to store an iterable
collection of the file's lines:</p>
<p><strong>with</strong> open("myfile.txt", "r") <strong>as</strong>
fp:</p>
<p>lines = fp.readlines()</p>
<p><strong>for</strong> i <strong>in</strong> range(len(lines)):</p>
<p><strong>print</strong>("Line " + str(i) + ": " + line)</p>
<p>This would print the following:</p>
<p>Line 0: hello</p>
<p>Line 1: world</p>
<p>Section 30.3: Iterate files (recursively)</p>
<p>To iterate all files, including in sub directories, use os.walk:</p>
<p>import <strong>os</strong></p>
<p><strong>for</strong> root, folders, files <strong>in</strong>
os.walk(root_dir):</p>
<p><strong>for</strong> filename <strong>in</strong> files:</p>
<p><strong>print</strong> root, filename</p>
<p>root_dir can be "." to start from current directory, or any other
path to start from.</p>
<p>Python 3.x Version ≥ 3.5</p>
<p><a href="https://docs.python.org/3/library/os.html#os.scandir">If you
also wish to get information about the file, you may use the more
efficient method os.scandir like so:</a></p>
<p><strong>for</strong> entry <strong>in</strong> os.scandir(path):</p>
<p><strong>if not</strong> entry.name.startswith('.')
<strong>and</strong> entry.is_file():</p>
<p><strong>print</strong>(entry.name)</p>
<p>Section 30.4: Getting the full contents of a file</p>
<p>The preferred method of file i/o is to use the <strong>with</strong>
keyword. This will ensure the file handle is closed once the reading or
writing has been completed.</p>
<p><strong>with</strong> open('myfile.txt') <strong>as</strong>
in_file:</p>
<p>content = in_file.read()</p>
<p><strong>print</strong>(content)</p>
<p>or, to handle closing the file manually, you can forgo
<strong>with</strong> and simply call close yourself:</p>
<p>in_file = open('myfile.txt', 'r')</p>
<p>content = in_file.read()</p>
<p><strong>print</strong>(content)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 173</p>
<p><span id="in_file_close" class="anchor"></span>in_file.close()</p>
<p>Keep in mind that without using a <strong>with</strong> statement,
you might accidentally keep the file open in case an unexpected
exception arises like so:</p>
<p>in_file = open('myfile.txt', 'r')</p>
<p><strong>raise</strong> Exception("oops")</p>
<p><em>in_file.close()</em> # This will never be called</p>
<p>Section 30.5: Writing to a file</p>
<p><strong>with</strong> open('myfile.txt', 'w') <strong>as</strong>
f:</p>
<p>f.write("Line 1")</p>
<p>f.write("Line 2")</p>
<p>f.write("Line 3")</p>
<p>f.write("Line 4")</p>
<p>If you open myfile.txt, you will see that its contents are:</p>
<p>Line 1Line 2Line 3Line 4</p>
<p>Python doesn't automatically add line breaks, you need to do that
manually:</p>
<p><strong>with</strong> open('myfile.txt', 'w') <strong>as</strong>
f:</p>
<p>f.write("Line 1<strong>\n</strong>")</p>
<p>f.write("Line 2<strong>\n</strong>")</p>
<p>f.write("Line 3<strong>\n</strong>")</p>
<p>f.write("Line 4<strong>\n</strong>")</p>
<p>Line 1</p>
<p>Line 2</p>
<p>Line 3</p>
<p>Line 4</p>
<p>Do not use os.linesep as a line terminator when writing files opened
in text mode (the default); use \n instead.</p>
<p>If you want to specify an encoding, you simply add the encoding
parameter to the open function:</p>
<p><strong>with</strong> open('my_file.txt', 'w', encoding='utf-8')
<strong>as</strong> f:</p>
<p>f.write('utf-8 text')</p>
<p>It is also possible to use the print statement to write to a file.
The mechanics are different in Python 2 vs Python 3, but the concept is
the same in that you can take the output that would have gone to the
screen and send it to a file</p>
<p>instead.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>with</strong> open('fred.txt', 'w') <strong>as</strong>
outfile:</p>
<p>s = "I'm Not Dead Yet!"</p>
<p><em><strong>print</strong>(s)</em> # writes to stdout</p>
<p><strong>print</strong>(s, file = outfile) <em># writes to
outfile</em></p>
<p>#Note: it is possible to specify the file parameter AND write to the
screen #by making sure file ends up with a None value either directly or
via a variable</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 174</p>
<p><span id="myfile___None" class="anchor"></span>myfile = None</p>
<p><strong>print</strong>(s, file = myfile) <em># writes to
stdout</em></p>
<p><em><strong>print</strong>(s, file = None)</em> # writes to
stdout</p>
<p>In Python 2 you would have done something like</p>
<p>Python 2.x Version ≥ 2.0</p>
<p>outfile = open('fred.txt', 'w')</p>
<p>s = "I'm Not Dead Yet!"</p>
<p><em><strong>print</strong> s</em> # writes to stdout</p>
<p><em><strong>print</strong> &gt;&gt; outfile, s</em> # writes to
outfile</p>
<p>Unlike using the write function, the print function does
automatically add line breaks.</p>
<p>Section 30.6: Check whether a file or path exists</p>
<p><a href="https://docs.python.org/glossary.html#term-eafp">Employ the
EAFP coding style and</a> <strong>try</strong> to open it.</p>
<p>import <strong>errno</strong></p>
<p>try<strong>:</strong></p>
<p><strong>with</strong> open(path) <strong>as</strong> f:</p>
<p># File exists</p>
<p><strong>except</strong> IOError <strong>as</strong> e:</p>
<p># Raise the exception if it is not ENOENT (No such file or directory)
<em><strong>if</strong> e.errno != errno.ENOENT:</em></p>
<p>raise</p>
<p># No such file or directory</p>
<p>This will also avoid race-conditions if another process deleted the
file between the check and when it is used. This</p>
<p>race condition could happen in the following cases:</p>
<p>Using the os module:</p>
<p>import <strong>os</strong></p>
<p>os.path.isfile('/path/to/some/file.txt')</p>
<p>Python 3.x Version ≥ 3.4</p>
<p>Using pathlib:</p>
<p><strong>import</strong> pathlib</p>
<p>path = pathlib.Path('/path/to/some/file.txt')</p>
<p><strong>if</strong> path.is_file():</p>
<p>...</p>
<p>To check whether a given path exists or not, you can follow the above
EAFP procedure, or explicitly check the path:</p>
<p>import <strong>os</strong></p>
<p>path = "/home/myFiles/directory1"</p>
<p><strong>if</strong> os.path.exists(path):</p>
<p>## Do stuff</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 175</p>
<p><span id="Section_30_7__Random_File_Access"
class="anchor"></span>Section 30.7: Random File Access Using mmap</p>
<p>Using the <a href="https://docs.python.org/2/library/mmap.html">mmap
module allows the user to randomly access locations in a file by mapping
the file into memory. This</a></p>
<p>is an alternative to using normal file operations.</p>
<p>import <strong>mmap</strong></p>
<p><strong>with</strong> open('filename.ext', 'r') <strong>as</strong>
fd:</p>
<p># 0: map the whole file</p>
<p>mm = mmap.mmap(fd.fileno(), 0)</p>
<p># print characters at indices 5 through 10</p>
<p><strong>print</strong> mm[5:10]</p>
<p># print the line starting from mm's current position
<em><strong>print</strong> mm.readline()</em></p>
<p># write a character to the 5th index</p>
<p>mm[5] = 'a'</p>
<p># return mm's position to the beginning of the file</p>
<p>mm.seek(0)</p>
<p># close the mmap object</p>
<p>mm.close()</p>
<p>Section 30.8: Replacing text in a file</p>
<p><strong>import</strong> fileinput</p>
<p>replacements = {'Search1': 'Replace1',</p>
<p>'Search2': 'Replace2'}</p>
<p><strong>for</strong> line <strong>in</strong>
fileinput.input('filename.txt', inplace=True):</p>
<p><strong>for</strong> search_for <strong>in</strong> replacements:</p>
<p>replace_with = replacements[search_for]</p>
<p>line = line.replace(search_for, replace_with)</p>
<p><strong>print</strong>(line, end='')</p>
<p>Section 30.9: Checking if a file is empty</p>
<p>&gt;&gt;&gt; <strong>import</strong> os</p>
<p>&gt;&gt;&gt; os.stat(path_to_file).st_size == 0</p>
<p>or</p>
<p>&gt;&gt;&gt; <strong>import</strong> os</p>
<p>&gt;&gt;&gt; os.path.getsize(path_to_file) &gt; 0</p>
<p>However, both will throw an exception if the file does not exist. To
avoid having to catch such an error, do this:</p>
<p>import <strong>os</strong></p>
<p><strong>def</strong> is_empty_file(fpath):</p>
<p><strong>return</strong> os.path.isfile(fpath) <strong>and</strong>
os.path.getsize(fpath) &gt; 0</p>
<p>which will return a bool value.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 176</p>
<p><span id="Section_30_10__Read_a_file_betwe"
class="anchor"></span>Section 30.10: Read a file between a range of
lines</p>
<p>So let's suppose you want to iterate only between some specific lines
of a file</p>
<p>You can make use of itertools for that</p>
<p><strong>import</strong> itertools</p>
<p><strong>with</strong> open('myfile.txt', 'r') <strong>as</strong>
f:</p>
<p><strong>for</strong> line <strong>in</strong> itertools.islice(f, 12,
30):</p>
<p># do something here</p>
<p>This will read through the lines 13 to 20 as in python indexing
starts from 0. So line number 1 is indexed as 0</p>
<p>As can also read some extra lines by making use of the next() keyword
here.</p>
<p>And when you are using the file object as an iterable, please don't
use the readline() statement here as the two</p>
<p>techniques of traversing a file are not to be mixed together</p>
<p>Section 30.11: Copy a directory tree</p>
<p><strong>import</strong> shutil</p>
<p>source='//192.168.1.2/Daily Reports'</p>
<p>destination='D:<strong>\\</strong>Reports<strong>\\</strong>Today'</p>
<p>shutil.copytree(source, destination)</p>
<p>The destination directory <strong>must not exist</strong>
already.</p>
<p>Section 30.12: Copying contents of one file to a dierent file</p>
<p><strong>with</strong> open(input_file, 'r') <strong>as</strong>
in_file, open(output_file, 'w') <strong>as</strong> out_file:</p>
<p><strong>for</strong> line <strong>in</strong> in_file:</p>
<p>out_file.write(line)</p>
<p>Using the shutil module:</p>
<p><strong>import</strong> shutil</p>
<p>shutil.copyfile(src, dst)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 177</p>
<p><span id="Chapter_31__os_path_1" class="anchor"></span>Chapter 31:
os.path</p>
<p>This module implements some useful functions on pathnames. The path
parameters can be passed as either</p>
<p>strings, or bytes. Applications are encouraged to represent file
names as (Unicode) character strings.</p>
<p>Section 31.1: Join Paths</p>
<p>To join two or more path components together, firstly import os
module of python and then use following:</p>
<p>import <strong>os</strong></p>
<p>os.path.join('a', 'b', 'c')</p>
<p>The advantage of using os.path is that it allows code to remain
compatible over all operating systems, as this uses</p>
<p>the separator appropriate for the platform it's running on.</p>
<p>For example, the result of this command on Windows will be:</p>
<p>&gt;&gt;&gt; os.path.join('a', 'b', 'c')</p>
<p><strong>'a</strong>\b\c<strong>'</strong></p>
<p>In an Unix OS:</p>
<p>&gt;&gt;&gt; os.path.join('a', 'b', 'c')</p>
<p>'a/b/c'</p>
<p>Section 31.2: Path Component Manipulation</p>
<p>To split one component off of the path:</p>
<p>&gt;&gt;&gt; p = os.path.join(os.getcwd(), 'foo.txt')</p>
<p>&gt;&gt;&gt; p</p>
<p>'/Users/csaftoiu/tmp/foo.txt'</p>
<p>&gt;&gt;&gt; os.path.dirname(p)</p>
<p>'/Users/csaftoiu/tmp'</p>
<p>&gt;&gt;&gt; os.path.basename(p)</p>
<p>'foo.txt'</p>
<p>&gt;&gt;&gt; os.path.split(os.getcwd())</p>
<p>('/Users/csaftoiu/tmp', 'foo.txt')</p>
<p>&gt;&gt;&gt; os.path.splitext(os.path.basename(p))</p>
<p>('foo', '.txt')</p>
<p>Section 31.3: Get the parent directory</p>
<p>os.path.abspath(os.path.join(PATH_TO_GET_THE_PARENT, os.pardir))</p>
<p>Section 31.4: If the given path exists</p>
<p>to check if the given path exists</p>
<p>path = '/home/john/temp'</p>
<p>os.path.exists(path)</p>
<p>#this returns false if path doesn't exist or if the path is a broken
symbolic link</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 178</p>
<p><span id="Section_31_5__check_if_the_given"
class="anchor"></span>Section 31.5: check if the given path is a
directory, file,</p>
<p>symbolic link, mount point etc</p>
<p>to check if the given path is a directory</p>
<p>dirname = '/home/john/python'</p>
<p>os.path.isdir(dirname)</p>
<p>to check if the given path is a file</p>
<p>filename = dirname + 'main.py'</p>
<p>os.path.isfile(filename)</p>
<p>to check if the given path is <a
href="https://en.wikipedia.org/wiki/Symbolic_link">symbolic link</a></p>
<p>symlink = dirname + 'some_sym_link'</p>
<p>os.path.islink(symlink)</p>
<p><a
href="http://www.linuxtopia.org/online_books/introduction_to_linux/linux_Mount_points.html">to
check if the given path is a mount point</a></p>
<p>mount_path = '/home'</p>
<p>os.path.ismount(mount_path)</p>
<p>Section 31.6: Absolute Path from Relative Path</p>
<p>Use os.path.abspath:</p>
<p>&gt;&gt;&gt; os.getcwd()</p>
<p>'/Users/csaftoiu/tmp'</p>
<p>&gt;&gt;&gt; os.path.abspath('foo')</p>
<p>'/Users/csaftoiu/tmp/foo'</p>
<p>&gt;&gt;&gt; os.path.abspath('../foo')</p>
<p>'/Users/csaftoiu/foo'</p>
<p>&gt;&gt;&gt; os.path.abspath('/foo')</p>
<p>'/foo'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 179</p>
<p><span id="Chapter_32__Iterables_and_Iterat_1"
class="anchor"></span>Chapter 32: Iterables and Iterators</p>
<p>Section 32.1: Iterator vs Iterable vs Generator</p>
<p>An <strong>iterable</strong> is an object that can return an
<strong>iterator</strong>. Any object with state that has an __iter__
method and returns</p>
<p>an iterator is an iterable. It may also be an object <em>without</em>
state that implements a __getitem__ method. - The</p>
<p>method can take indices (starting from zero) and raise an IndexError
when the indices are no longer valid.</p>
<p>Python's str class is an example of a __getitem__ iterable.</p>
<p>An <strong>Iterator</strong> is an object that produces the next
value in a sequence when you call next(*object*) on some object.</p>
<p>Moreover, any object with a __next__ method is an iterator. An
iterator raises StopIteration after exhausting the iterator and
<em>cannot</em> be re-used at this point.</p>
<p>Iterable classes:</p>
<p>Iterable classes define an __iter__ and a __next__ method. Example of
an iterable class:</p>
<p><strong>class</strong> MyIterable:</p>
<p><strong>def</strong> __iter__(self):</p>
<p>return <strong>self</strong></p>
<p><strong>def</strong> __next__(self):</p>
<p>#code</p>
<p>#Classic iterable object in older versions of python, __getitem__ is
still supported... <em><strong>class</strong> MySequence:</em></p>
<p><strong>def</strong> __getitem__(self, index):</p>
<p><strong>if</strong> (condition):</p>
<p><strong>raise</strong> IndexError</p>
<p><strong>return</strong> (item)</p>
<p>#Can produce a plain `iterator` instance by using
iter(MySequence())</p>
<p>Trying to instantiate the abstract class from the collections module
to better see this.</p>
<p>Example:</p>
<p>Python 2.x Version ≥ 2.3</p>
<p><strong>import</strong> collections</p>
<p>&gt;&gt;&gt; collections.Iterator()</p>
<p>&gt;&gt;&gt; TypeError: Cant instantiate abstract
<strong>class</strong> Iterator <strong>with</strong> abstract methods
next</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>&gt;&gt;&gt; TypeError: Cant instantiate abstract
<strong>class</strong> Iterator <strong>with</strong> abstract methods
__next__</p>
<p>Handle Python 3 compatibility for iterable classes in Python 2 by
doing the following:</p>
<p>Python 2.x Version ≥ 2.3</p>
<p><em><strong>class</strong> MyIterable(object):</em> #or
collections.Iterator, which I'd recommend....</p>
<p>....</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 180</p>
<p><span id="def___iter___self"
class="anchor"></span><strong>def</strong> __iter__(self):</p>
<p>return <strong>self</strong></p>
<p><strong>def</strong> next(self): <em>#code</em></p>
<p>__next__ = next</p>
<p>Both of these are now iterators and can be looped through:</p>
<p>ex1 = MyIterableClass()</p>
<p>ex2 = MySequence()</p>
<p><strong>for</strong> (item) <strong>in</strong> (ex1):
<em>#code</em></p>
<p><strong>for</strong> (item) <strong>in</strong> (ex2):
<em>#code</em></p>
<p><strong>Generators</strong> are simple ways to create iterators. A
generator <em>is</em> an iterator and an iterator is an iterable.</p>
<p>Section 32.2: Extract values one by one</p>
<p>Start with iter() built-in to get <strong>iterator</strong> over
iterable and use next() to get elements one by one until</p>
<p>StopIteration is raised signifying the end:</p>
<p><em>s = {1, 2}</em> # or list or generator or even iterator <em>i =
iter(s)</em> # get iterator</p>
<p>a = next(i) <em># a = 1</em></p>
<p>b = next(i) <em># b = 2</em></p>
<p><em>c = next(i)</em> # raises StopIteration</p>
<p>Section 32.3: Iterating over entire iterable</p>
<p>s = {1, 2, 3}</p>
<p># get every element in s</p>
<p><strong>for</strong> a <strong>in</strong> s:</p>
<p><em><strong>print</strong> a</em> # prints 1, then 2, then 3</p>
<p># copy into list</p>
<p><em>l1 = list(s)</em> # l1 = [1, 2, 3]</p>
<p># use list comprehension</p>
<p>l2 = [a * 2 <strong>for</strong> a <strong>in</strong> s
<strong>if</strong> a &gt; 2] <em># l2 = [6]</em></p>
<p>Section 32.4: Verify only one element in iterable</p>
<p>Use unpacking to extract the first element and ensure it's the only
one:</p>
<p>a, = iterable</p>
<p><strong>def</strong> foo():</p>
<p>yield <strong>1</strong></p>
<p>a, = foo() <em># a = 1</em></p>
<p>nums = [1, 2, 3]</p>
<p><em>a, = nums</em> # ValueError: too many values to unpack</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 181</p>
<p><span id="Section_32_5__What_can_be_iterab"
class="anchor"></span>Section 32.5: What can be iterable</p>
<p><strong>Iterable</strong> can be anything for which items are
received <em>one by one, forward only</em>. Built-in Python collections
are</p>
<p>iterable:</p>
<p><em>[1, 2, 3]</em> # list, iterate over items</p>
<p>(1, 2, 3) <em># tuple</em></p>
<p>{1, 2, 3} <em># set</em></p>
<p><em>{1: 2, 3: 4}</em> # dict, iterate over keys</p>
<p>Generators return iterables:</p>
<p><em><strong>def</strong> foo():</em> # foo isn't iterable yet...</p>
<p>yield <strong>1</strong></p>
<p><em>res = foo()</em> # ...but res already is</p>
<p>Section 32.6: Iterator isn't reentrant!</p>
<p><strong>def</strong> gen():</p>
<p>yield <strong>1</strong></p>
<p>iterable = gen()</p>
<p><strong>for</strong> a <strong>in</strong> iterable:</p>
<p>print <strong>a</strong></p>
<p># What was the first item of iterable? No way to get it now. # Only
to get a new iterator</p>
<p>gen()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 182</p>
<p><span id="Chapter_33__Functions_1" class="anchor"></span>Chapter 33:
Functions</p>
<p>Parameter Details</p>
<p><em>arg1</em>, ..., <em>argN</em> Regular arguments</p>
<p><em>*args</em> Unnamed positional arguments</p>
<p><em>kw1</em>, ..., <em>kwN</em> Keyword-only arguments</p>
<p><em>**kwargs</em> The rest of keyword arguments</p>
<p>Functions in Python provide organized, reusable and modular code to
perform a set of specific actions. Functions</p>
<p>simplify the coding process, prevent redundant logic, and make the
code easier to follow. This topic describes the</p>
<p>declaration and utilization of functions in Python.</p>
<p>Python has many <em>built-in functions</em> like
<strong>print</strong>(), input(), len(). Besides built-ins you can also
create your own</p>
<p>functions to do more specific jobs—these are called <em>user-defined
functions</em>.</p>
<p>Section 33.1: Defining and calling simple functions</p>
<p>Using the <strong>def</strong> statement is the most common way to
define a function in python. This statement is a so called
<em>single</em></p>
<p><em>clause compound statement</em> with the following syntax:</p>
<p><strong>def</strong> function_name(parameters):</p>
<p>statement(s)</p>
<p><em>function_name</em> is known as the <em>identifier</em> of the
function. Since a function definition is an executable statement its</p>
<p>execution <em>binds</em> the function name to the function object
which can be called later on using the identifier.</p>
<p><em>parameters</em> is an optional list of identifiers that get bound
to the values supplied as arguments when the function is</p>
<p>called. A function may have an arbitrary number of arguments which
are separated by commas.</p>
<p><em>statement(s)</em> – also known as the <em>function body</em> –
are a nonempty sequence of statements executed each time the</p>
<p>function is called. This means a function body cannot be empty, just
like any <em>indented block</em>.</p>
<p>Here’s an example of a simple function definition which purpose is to
print Hello each time it’s called:</p>
<p><strong>def</strong> greet():</p>
<p><strong>print</strong>("Hello")</p>
<p>Now let’s call the defined greet() function:</p>
<p>greet()</p>
<p># Out: Hello</p>
<p>That’s another example of a function definition which takes one
single argument and displays the passed in value</p>
<p>each time the function is called:</p>
<p><strong>def</strong> greet_two(greeting):</p>
<p><strong>print</strong>(greeting)</p>
<p>After that the greet_two() function must be called with an
argument:</p>
<p>greet_two("Howdy")</p>
<p># Out: Howdy</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 183</p>
<p><span id="Also_you_can_give_a_default_valu"
class="anchor"></span>Also you can give a default value to that function
argument:</p>
<p><strong>def</strong> greet_two(greeting="Howdy"):</p>
<p><strong>print</strong>(greeting)</p>
<p>Now you can call the function without giving a value:</p>
<p>greet_two()</p>
<p># Out: Howdy</p>
<p>You'll notice that unlike many other languages, you do not need to
explicitly declare a return type of the function. Python functions can
return values of any type via the <strong>return</strong> keyword. One
function can return any number of</p>
<p>different types!</p>
<p><strong>def</strong> many_types(x):</p>
<p><strong>if</strong> x &lt; 0:</p>
<p><strong>return</strong> "Hello!"</p>
<p>else<strong>:</strong></p>
<p>return <strong>0</strong></p>
<p><strong>print</strong>(many_types(1))</p>
<p><strong>print</strong>(many_types(-1))</p>
<p># Output:</p>
<p>0</p>
<p>Hello!</p>
<p>As long as this is handled correctly by the caller, this is perfectly
valid Python code.</p>
<p>A function that reaches the end of execution without a return
statement will always return None:</p>
<p><strong>def</strong> do_nothing():</p>
<p>pass</p>
<p><strong>print</strong>(do_nothing())</p>
<p># Out: None</p>
<p>As mentioned previously a function definition must have a function
body, a nonempty sequence of statements.</p>
<p>Therefore the <strong>pass</strong> statement is used as function
body, which is a null operation – when it is executed, nothing happens.
It does what it means, it skips. It is useful as a placeholder when a
statement is required syntactically, but</p>
<p>no code needs to be executed.</p>
<p>Section 33.2: Defining a function with an arbitrary number of</p>
<p>arguments</p>
<p>Arbitrary number of positional arguments:</p>
<p>Defining a function capable of taking an arbitrary number of
arguments can be done by prefixing one of the arguments with a *</p>
<p><strong>def</strong> func(*args):</p>
<p># args will be a tuple containing all values that are passed in
<em><strong>for</strong> i <strong>in</strong> args:</em></p>
<p>print<strong>(i)</strong></p>
<p><em>func(1, 2, 3)</em> # Calling it with 3 arguments</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 184</p>
<p># Out: 1</p>
<p># 2</p>
<p># 3</p>
<p>list_of_arg_values = [1, 2, 3]</p>
<p><em>func(*list_of_arg_values)</em> # Calling it with list of values,
* expands the list # Out: 1</p>
<p># 2</p>
<p># 3</p>
<p><em>func()</em> # Calling it without arguments</p>
<p># No Output</p>
<p>You <strong>can't</strong> provide a default for args, for example
func(*args=[1, 2, 3]) will raise a syntax error (won't even</p>
<p>compile).</p>
<p>You <strong>can't</strong> provide these by name when calling the
function, for example func(*args=[1, 2, 3]) will raise a</p>
<p>TypeError .</p>
<p>But if you already have your arguments in an array (or any other
Iterable), you <strong>can</strong> invoke your function like this:</p>
<p>func(*my_stuff) .</p>
<p>These arguments (*args) can be accessed by index, for example args[0]
will return the first argument</p>
<p>Arbitrary number of keyword arguments</p>
<p>You can take an arbitrary number of arguments with a name by defining
an argument in the definition with <strong>two</strong> *</p>
<p>in front of it:</p>
<p><strong>def</strong> func(**kwargs):</p>
<p># kwargs will be a dictionary containing the names as keys and the
values as values <em><strong>for</strong> name, value
<strong>in</strong> kwargs.items():</em></p>
<p><strong>print</strong>(name, value)</p>
<p><em>func(value1=1, value2=2, value3=3)</em> # Calling it with 3
arguments # Out: value1 1</p>
<p># value2 2</p>
<p># value3 3</p>
<p><em>func()</em> # Calling it without arguments # No Out put</p>
<p>my_dict = {'foo': 1, 'bar': 2}</p>
<p><em>func(**my_dict)</em> # Calling it with a dictionary # Out: foo
1</p>
<p># bar 2</p>
<p>You <strong>can't</strong> provide these <strong>without</strong>
names, for example func(1, 2, 3) will raise a TypeError.</p>
<p>kwargs is a plain native python dictionary. For example,
args['value1'] will give the value for argument value1. Be</p>
<p>sure to check beforehand that there is such an argument or a KeyError
will be raised.</p>
<p>Warning</p>
<p>You can mix these with other optional and required arguments but the
order inside the definition matters.</p>
<p>The <strong>positional/keyword</strong> arguments come first.
(Required arguments).</p>
<p>Then comes the <strong>arbitrary</strong> *arg arguments.
(Optional).</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 185</p>
<p>Then <strong>keyword-only</strong> arguments come next.
(Required).</p>
<p>Finally the <strong>arbitrary keyword</strong> **kwargs come.
(Optional).</p>
<p><em># |-positional-|-optional-|---keyword-only--|-optional-|</em>
<strong>def</strong> func(arg1, arg2=10 , *args, kwarg1, kwarg2=2,
**kwargs):</p>
<p>pass</p>
<p>arg1 must be given, otherwise a TypeError is raised. It can be given
as positional (func(10)) or keyword</p>
<p>argument (func(arg1=10)).</p>
<p>kwarg1 must also be given, but it can only be provided as
keyword-argument: func(kwarg1=10).</p>
<p>arg2 and kwarg2 are optional. If the value is to be changed the same
rules as for arg1 (either positional or</p>
<p>keyword) and kwarg1 (only keyword) apply.</p>
<p>*args catches additional positional parameters. But note, that arg1
and arg2 must be provided as positional</p>
<p>arguments to pass arguments to *args: func(1, 1, 1, 1).</p>
<p>**kwargs catches all additional keyword parameters. In this case any
parameter that is not arg1, arg2,</p>
<p>kwarg1 or kwarg2. For example: func(kwarg3=10).</p>
<p>In Python 3, you can use * alone to indicate that all subsequent
arguments must be specified as keywords.</p>
<p>For instance the math.isclose function in Python 3.5 and higher is
defined using <strong>def</strong> math.isclose (a, b, *, rel_tol=1e-09,
abs_tol=0.0) , which means the first two arguments can be supplied
positionally but the</p>
<p>optional third and fourth parameters can only be supplied as keyword
arguments.</p>
<p>Python 2.x doesn't support keyword-only parameters. This behavior can
be emulated with kwargs:</p>
<p><strong>def</strong> func(arg1, arg2=10, **kwargs):</p>
<p>try<strong>:</strong></p>
<p>kwarg1 = kwargs.pop("kwarg1")</p>
<p><strong>except</strong> KeyError:</p>
<p><strong>raise</strong> TypeError("missing required keyword-only
argument: 'kwarg1'")</p>
<p>kwarg2 = kwargs.pop("kwarg2", 2)</p>
<p># function body ...</p>
<p>Note on Naming</p>
<p>The convention of naming optional positional arguments args and
optional keyword arguments kwargs is just a</p>
<p>convention you <strong>can</strong> use any names you like
<strong>but</strong> it is useful to follow the convention so that
others know what you</p>
<p>are doing, <em>or even yourself later</em> so please do.</p>
<p>Note on Uniqueness</p>
<p>Any function can be defined with <strong>none or one</strong> *args
and <strong>none or one</strong> **kwargs but not with more than one
of</p>
<p>each. Also *args <strong>must</strong> be the last positional
argument and **kwargs must be the last parameter. Attempting to use</p>
<p>more than one of either <strong>will</strong> result in a Syntax
Error exception.</p>
<p>Note on Nesting Functions with Optional Arguments</p>
<p>It is possible to nest such functions and the usual convention is to
remove the items that the code has already</p>
<p>handled <strong>but</strong> if you are passing down the parameters
you need to pass optional positional args with a * prefix and</p>
<p>optional keyword args with a ** prefix, otherwise args with be passed
as a list or tuple and kwargs as a single</p>
<p>dictionary. e.g.:</p>
<p><strong>def</strong> fn(**kwargs):</p>
<p><strong>print</strong>(kwargs)</p>
<p>f1(**kwargs)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 186</p>
<p><span id="def_f1___kwargs" class="anchor"></span><strong>def</strong>
f1(**kwargs):</p>
<p><strong>print</strong>(len(kwargs))</p>
<p>fn(a=1, b=2)</p>
<p># Out:</p>
<p># {'a': 1, 'b': 2}</p>
<p># 2</p>
<p>Section 33.3: Lambda (Inline/Anonymous) Functions</p>
<p>The <strong>lambda</strong> keyword creates an inline function that
contains a single expression. The value of this expression is what the
function returns when invoked.</p>
<p>Consider the function:</p>
<p><strong>def</strong> greeting():</p>
<p><strong>return</strong> "Hello"</p>
<p>which, when called as:</p>
<p><strong>print</strong>(greeting())</p>
<p>prints:</p>
<p>Hello</p>
<p>This can be written as a lambda function as follows:</p>
<p>greet_me = <strong>lambda</strong>: "Hello"</p>
<p>See note at the bottom of this section regarding the assignment of
lambdas to variables. Generally, don't</p>
<p>do it.</p>
<p>This creates an inline function with the name greet_me that returns
Hello. Note that you don't write <strong>return</strong> when</p>
<p>creating a function with lambda. The value after : is automatically
returned.</p>
<p>Once assigned to a variable, it can be used just like a regular
function:</p>
<p><strong>print</strong>(greet_me())</p>
<p>prints:</p>
<p>Hello</p>
<p><strong>lambda</strong> s can take arguments, too:</p>
<p>strip_and_upper_case = <strong>lambda</strong> s:
s.strip().upper()</p>
<p>strip_and_upper_case(" Hello ")</p>
<p>returns the string:</p>
<p>HELLO</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 187</p>
<p>They can also take arbitrary number of arguments / keyword arguments,
like normal functions.</p>
<p>greeting = <strong>lambda</strong> x, *args, **kwargs:
<strong>print</strong>(x, args, kwargs) greeting('hello', 'world',
world='world')</p>
<p>prints:</p>
<p>hello ('world',) {'world': 'world'}</p>
<p><strong>lambda</strong> s are commonly used for short functions that
are convenient to define at the point where they are called</p>
<p>(typically with sorted, filter and map).</p>
<p>For example, this line sorts a list of strings ignoring their case
and ignoring whitespace at the beginning and at the</p>
<p>end:</p>
<p>sorted( [" foo ", " bAR", "BaZ "], key=<strong>lambda</strong> s:
s.strip().upper()) <em># Out:</em></p>
<p># [' bAR', 'BaZ ', ' foo ']</p>
<p>Sort list just ignoring whitespaces:</p>
<p>sorted( [" foo ", " bAR", "BaZ "], key=<strong>lambda</strong> s:
s.strip()) <em># Out:</em></p>
<p># ['BaZ ', ' bAR', ' foo ']</p>
<p>Examples with map:</p>
<p>sorted( map( <strong>lambda</strong> s: s.strip().upper(), [" foo ",
" bAR", "BaZ "])) <em># Out:</em></p>
<p># ['BAR', 'BAZ', 'FOO']</p>
<p>sorted( map( <strong>lambda</strong> s: s.strip(), [" foo ", " bAR",
"BaZ "])) <em># Out:</em></p>
<p># ['BaZ', 'bAR', 'foo']</p>
<p>Examples with numerical lists:</p>
<p>my_list = [3, -4, -2, 5, 1, 7]</p>
<p>sorted( my_list, key=<strong>lambda</strong> x: abs(x))</p>
<p># Out:</p>
<p># [1, -2, 3, -4, 5, 7]</p>
<p>list( filter( <strong>lambda</strong> x: x&gt;0, my_list))</p>
<p># Out:</p>
<p># [3, 5, 1, 7]</p>
<p>list( map( <strong>lambda</strong> x: abs(x), my_list))</p>
<p># Out:</p>
<p>[3, 4, 2, 5, 1, 7]</p>
<p>One can call other functions (with/without arguments) from inside a
lambda function.</p>
<p><strong>def</strong> foo(msg):</p>
<p>print<strong>(msg)</strong></p>
<p>greet = <strong>lambda</strong> x = "hello world": foo(x)</p>
<p>greet()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 188</p>
<p><span id="prints" class="anchor"></span>prints:</p>
<p>hello world</p>
<p>This is useful because <strong>lambda</strong> may contain only one
expression and by using a subsidiary function one can run multiple
statements.</p>
<p>NOTE</p>
<p><a
href="https://www.python.org/dev/peps/pep-0008/#programming-recommendations">Bear
in mind that PEP-8 (the official Python style guide) does not recommend
assigning lambdas to variables (as we</a> did in the first two
examples):</p>
<p>Always use a def statement instead of an assignment statement that
binds a lambda expression directly</p>
<p>to an identifier.</p>
<p>Yes:</p>
<p><strong>def</strong> f(x): <strong>return</strong> 2*x</p>
<p>No:</p>
<p>f = <strong>lambda</strong> x: 2*x</p>
<p>The first form means that the name of the resulting function object
is specifically f instead of the generic</p>
<p><strong>&lt;lambda&gt;</strong> . This is more useful for tracebacks
and string representations in general. The use of the assignment
statement eliminates the sole benefit a lambda expression can offer over
an explicit <strong>def</strong></p>
<p>statement (i.e. that it can be embedded inside a larger
expression).</p>
<p>Section 33.4: Defining a function with optional arguments</p>
<p>Optional arguments can be defined by assigning (using =) a default
value to the argument-name:</p>
<p><strong>def</strong> make(action='nothing'):</p>
<p><strong>return</strong> action</p>
<p>Calling this function is possible in 3 different ways:</p>
<p>make("fun")</p>
<p># Out: fun</p>
<p>make(action="sleep")</p>
<p># Out: sleep</p>
<p># The argument is optional so the function will use the default value
if the argument is # not passed in.</p>
<p>make()</p>
<p># Out: nothing</p>
<p>Warning</p>
<p>Mutable types (list, dict, set, etc.) should be treated with care
when given as <strong>default</strong> attribute. Any</p>
<p>mutation of the default argument will change it permanently. See
Defining a function with optional mutable arguments.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 189</p>
<p><span id="Section_33_5__Defining_a_functio"
class="anchor"></span>Section 33.5: Defining a function with optional
mutable</p>
<p>arguments</p>
<p>There is a problem when using <strong>optional arguments</strong>
with a <strong>mutable default type</strong> (described in Defining a
function</p>
<p>with optional arguments), which can potentially lead to unexpected
behaviour.</p>
<p>Explanation</p>
<p>This problem arises because a function's default arguments are
initialised <strong>once</strong>, at the point when the function is</p>
<p><em>defined</em>, and <strong>not</strong> (like many other
languages) when the function is <em>called</em>. The default values are
stored inside the</p>
<p>function object's __defaults__ member variable.</p>
<p><strong>def</strong> f(a, b=42, c=[]):</p>
<p>pass</p>
<p><strong>print</strong>(f.__defaults__)</p>
<p># Out: (42, [])</p>
<p>For <strong>immutable</strong> types (see Argument passing and
mutability) this is not a problem because there is no way to</p>
<p>mutate the variable; it can only ever be reassigned, leaving the
original value unchanged. Hence, subsequent are</p>
<p>guaranteed to have the same default value. However, for a
<strong>mutable</strong> type, the original value can mutate, by
making</p>
<p>calls to its various member functions. Therefore, successive calls to
the function are not guaranteed to have the</p>
<p>initial default value.</p>
<p><strong>def</strong> append(elem, to=[]):</p>
<p><em>to.append(elem)</em> # This call to append() mutates the default
variable "to"</p>
<p>return <strong>to</strong></p>
<p>append(1)</p>
<p># Out: [1]</p>
<p><em>append(2)</em> # Appends it to the internally stored list # Out:
[1, 2]</p>
<p><em>append(3, [])</em> # Using a new created list gives the expected
result # Out: [3]</p>
<p># Calling it again without argument will append to the internally
stored list again <em>append(4)</em></p>
<p># Out: [1, 2, 4]</p>
<p><strong>Note:</strong> Some IDEs like PyCharm will issue a warning
when a mutable type is specified as a default attribute.</p>
<p>Solution</p>
<p>If you want to ensure that the default argument is always the one you
specify in the function definition, then the</p>
<p>solution is to <strong>always</strong> use an immutable type as your
default argument.</p>
<p>A common idiom to achieve this when a mutable type is needed as the
default, is to use None (immutable) as the</p>
<p>default argument and then assign the actual default value to the
argument variable if it is equal to None.</p>
<p><strong>def</strong> append(elem, to=None):</p>
<p><strong>if</strong> to <strong>is</strong> None:</p>
<p>to = []</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 190</p>
<p><span id="to_append_elem" class="anchor"></span>to.append(elem)</p>
<p>return <strong>to</strong></p>
<p>Section 33.6: Argument passing and mutability</p>
<p>First, some terminology:</p>
<p><strong>argument (<em>actual</em> parameter):</strong> the actual
variable being passed to a function;</p>
<p><strong>parameter (<em>formal</em> parameter):</strong> the receiving
variable that is used in a function.</p>
<p><strong>In Python, arguments are passed by
<em>assignment</em></strong> (as opposed to other languages, where
arguments can be</p>
<p>passed by value/reference/pointer).</p>
<p>Mutating a parameter will mutate the argument (if the argument's type
is mutable).</p>
<p><em><strong>def</strong> foo(x):</em> # here x is the parameter</p>
<p><em>x[0] = 9</em> # This mutates the list labelled by both x and
y</p>
<p>print<strong>(x)</strong></p>
<p>y = [4, 5, 6]</p>
<p><em>foo(y)</em> # call foo with y as argument</p>
<p># Out: [9, 5, 6] # list labelled by x has been mutated
<em><strong>print</strong>(y)</em></p>
<p># Out: [9, 5, 6] # list labelled by y has been mutated too</p>
<p>Reassigning the parameter won’t reassign the argument.</p>
<p><em><strong>def</strong> foo(x):</em> # here x is the parameter, when
we call foo(y) we assign y to x</p>
<p><em>x[0] = 9</em> # This mutates the list labelled by both x and
y</p>
<p><em>x = [1, 2, 3]</em> # x is now labeling a different list (y is
unaffected)</p>
<p><em>x[2] = 8</em> # This mutates x's list, not y's list</p>
<p><em>y = [4, 5, 6]</em> # y is the argument, x is the parameter
<em>foo(y)</em> # Pretend that we wrote "x = y", then go to line 1
<em>y</em></p>
<p># Out: [9, 5, 6]</p>
<p>In Python, we don<strong>’</strong>t really assign values to
variables, instead we <em>bind</em> (i.e. assign, attach) variables</p>
<p>(considered as <em>names</em>) to objects.</p>
<p><strong>Immutable:</strong> Integers, strings, tuples, and so on. All
operations make copies.</p>
<p><strong>Mutable:</strong> Lists, dictionaries, sets, and so on.
Operations may or may not mutate.</p>
<p>x = [3, 1, 9]</p>
<p>y = x</p>
<p><em>x.append(5)</em> # Mutates the list labelled by x and y, both x
and y are bound to [3, 1, 9] <em>x.sort()</em> # Mutates the list
labelled by x and y (in-place sorting) <em>x = x + [4]</em> # Does not
mutate the list (makes a copy for x only, not y) <em>z = x</em> # z is x
([1, 3, 9, 4]) <em>x += [6]</em> # Mutates the list labelled by both x
and z (uses the extend function). <em>x = sorted(x)</em> # Does not
mutate the list (makes a copy for x only). <em>x</em></p>
<p># Out: [1, 3, 4, 5, 6, 9]</p>
<p>y</p>
<p># Out: [1, 3, 5, 9]</p>
<p>z</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 191</p>
<p><span id="__Out___1__3__5__9__4__6" class="anchor"></span># Out: [1,
3, 5, 9, 4, 6]</p>
<p>Section 33.7: Returning values from functions</p>
<p>Functions can <strong>return</strong> a value that you can use
directly:</p>
<p><strong>def</strong> give_me_five():</p>
<p>return <strong>5</strong></p>
<p><em><strong>print</strong>(give_me_five())</em> # Print the returned
value</p>
<p># Out: 5</p>
<p>or save the value for later use:</p>
<p>num = give_me_five()</p>
<p><em><strong>print</strong>(num)</em> # Print the saved returned value
# Out: 5</p>
<p>or use the value for any operations:</p>
<p><strong>print</strong>(give_me_five() + 10)</p>
<p># Out: 15</p>
<p>If <strong>return</strong> is encountered in the function the
function will be exited immediately and subsequent operations will not
be evaluated:</p>
<p><strong>def</strong> give_me_another_five():</p>
<p>return <strong>5</strong></p>
<p><strong>print</strong>('This statement will not be printed.
Ever.')</p>
<p><strong>print</strong>(give_me_another_five())</p>
<p># Out: 5</p>
<p>You can also <strong>return</strong> multiple values (in the form of
a tuple):</p>
<p><strong>def</strong> give_me_two_fives():</p>
<p><em><strong>return</strong> 5, 5</em> # Returns two 5</p>
<p>first, second = give_me_two_fives()</p>
<p><strong>print</strong>(first)</p>
<p># Out: 5</p>
<p><strong>print</strong>(second)</p>
<p># Out: 5</p>
<p>A function with <em>no</em> <strong>return</strong> statement
implicitly returns None. Similarly a function with a
<strong>return</strong> statement, but no return value or variable
returns None.</p>
<p>Section 33.8: Closure</p>
<p>Closures in Python are created by function calls. Here, the call to
makeInc creates a binding for x that is referenced inside the function
inc. Each call to makeInc creates a new instance of this function, but
each instance has a link to a</p>
<p>different binding of x.</p>
<p><strong>def</strong> makeInc(x):</p>
<p><strong>def</strong> inc(y):</p>
<p># x is "attached" in the definition of inc</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 192</p>
<p><span id="return_y___x" class="anchor"></span>return <strong>y +
x</strong></p>
<p>return <strong>inc</strong></p>
<p>incOne = makeInc(1)</p>
<p>incFive = makeInc(5)</p>
<p><em>incOne(5)</em> # returns 6</p>
<p><em>incFive(5)</em> # returns 10</p>
<p>Notice that while in a regular closure the enclosed function fully
inherits all variables from its enclosing environment, in this construct
the enclosed function has only read access to the inherited variables
but cannot</p>
<p>make assignments to them</p>
<p><strong>def</strong> makeInc(x):</p>
<p><strong>def</strong> inc(y):</p>
<p># incrementing x is not allowed</p>
<p>x += y</p>
<p>return <strong>x</strong></p>
<p>return <strong>inc</strong></p>
<p>incOne = makeInc(1)</p>
<p><em>incOne(5)</em> # UnboundLocalError: local variable 'x' referenced
before assignment</p>
<p>Python 3 offers the <strong>nonlocal</strong> statement (Nonlocal
Variables ) for realizing a full closure with nested functions.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>def</strong> makeInc(x):</p>
<p><strong>def</strong> inc(y):</p>
<p>nonlocal <strong>x</strong></p>
<p># now assigning a value to x is allowed</p>
<p>x += y</p>
<p>return <strong>x</strong></p>
<p>return <strong>inc</strong></p>
<p>incOne = makeInc(1)</p>
<p><em>incOne(5)</em> # returns 6</p>
<p>Section 33.9: Forcing the use of named parameters</p>
<p>All parameters specified after the first asterisk in the function
signature are keyword-only.</p>
<p><strong>def</strong> f(*a, b):</p>
<p>pass</p>
<p>f(1, 2, 3)</p>
<p># TypeError: f() missing 1 required keyword-only argument: 'b'</p>
<p>In Python 3 it's possible to put a single asterisk in the function
signature to ensure that the remaining arguments may only be passed
using keyword arguments.</p>
<p><strong>def</strong> f(a, b, *, c):</p>
<p>pass</p>
<p>f(1, 2, 3)</p>
<p># TypeError: f() takes 2 positional arguments but 3 were given</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 193</p>
<p><span id="f_1__2__c_3" class="anchor"></span>f(1, 2, c=3)</p>
<p># No error</p>
<p>Section 33.10: Nested functions</p>
<p>Functions in python are first-class objects. They can be defined in
any scope</p>
<p><strong>def</strong> fibonacci(n):</p>
<p><strong>def</strong> step(a,b):</p>
<p><strong>return</strong> b, a+b</p>
<p>a, b = 0, 1</p>
<p><strong>for</strong> i <strong>in</strong> range(n):</p>
<p>a, b = step(a, b)</p>
<p>return <strong>a</strong></p>
<p>Functions capture their enclosing scope can be passed around like any
other sort of object</p>
<p><strong>def</strong> make_adder(n):</p>
<p><strong>def</strong> adder(x):</p>
<p>return <strong>n + x</strong></p>
<p>return <strong>adder</strong></p>
<p>add5 = make_adder(5)</p>
<p>add6 = make_adder(6)</p>
<p>add5(10)</p>
<p>#Out: 15</p>
<p>add6(10)</p>
<p>#Out: 16</p>
<p><strong>def</strong> repeatedly_apply(func, n, x):</p>
<p><strong>for</strong> i <strong>in</strong> range(n):</p>
<p>x = func(x)</p>
<p>return <strong>x</strong></p>
<p>repeatedly_apply(add5, 5, 1)</p>
<p>#Out: 26</p>
<p>Section 33.11: Recursion limit</p>
<p>There is a limit to the depth of possible recursion, which depends on
the Python implementation. When the limit is reached, a RuntimeError
exception is raised:</p>
<p><strong>def</strong> cursing(depth):</p>
<p>try<strong>:</strong></p>
<p><em>cursing(depth + 1)</em> # actually, re-cursing</p>
<p><strong>except</strong> RuntimeError <strong>as</strong> RE:</p>
<p><strong>print</strong>('I recursed {} times!'.format(depth))</p>
<p>cursing(0)</p>
<p># Out: I recursed 1083 times!</p>
<p>It is possible to change the recursion depth limit by using
sys.setrecursionlimit(limit) and check this limit by</p>
<p>sys.getrecursionlimit().</p>
<p>sys.setrecursionlimit(2000)</p>
<p>cursing(0)</p>
<p># Out: I recursed 1997 times!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 194</p>
<p><span id="From_Python_3_5__the_exception_i"
class="anchor"></span>From Python 3.5, the exception is a
RecursionError, which is derived from RuntimeError.</p>
<p>Section 33.12: Recursive Lambda using assigned variable</p>
<p>One method for creating recursive lambda functions involves assigning
the function to a variable and then</p>
<p>referencing that variable within the function itself. A common
example of this is the recursive calculation of the factorial of a
number - such as shown in the following code:</p>
<p>lambda_factorial = <strong>lambda</strong> i:1 <strong>if</strong>
i==0 <strong>else</strong> i*lambda_factorial(i-1)
<strong>print</strong>(lambda_factorial(4)) <em># 4 * 3 * 2 * 1 = 12 * 2
= 24</em></p>
<p>Description of code</p>
<p>The lambda function, through its variable assignment, is passed a
value (4) which it evaluates and returns 1 if it is 0 or else it returns
the current value (i) * another calculation by the lambda function of
the value - 1 (i-1). This</p>
<p>continues until the passed value is decremented to 0
(<strong>return</strong> 1). A process which can be visualized as:</p>
<p><img src="media/index-220_1.jpeg"
style="width:6.5in;height:5.70833in" alt="index-220_1.jpg" /></p>
<p>Section 33.13: Recursive functions</p>
<p>A recursive function is a function that calls itself in its
definition. For example the mathematical function, factorial,</p>
<p>defined by factorial(n) = n*(n-1)*(n-2)*...*3*2*1. can be programmed
as</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 195</p>
<p><span id="def_factorial_n" class="anchor"></span><strong>def</strong>
factorial(n):</p>
<p>#n here should be an integer</p>
<p><strong>if</strong> n == 0:</p>
<p>return <strong>1</strong></p>
<p>else<strong>:</strong></p>
<p><strong>return</strong> n*factorial(n-1)</p>
<p>the outputs here are:</p>
<p>factorial(0)</p>
<p>#out 1</p>
<p>factorial(1)</p>
<p>#out 1</p>
<p>factorial(2)</p>
<p>#out 2</p>
<p>factorial(3)</p>
<p>#out 6</p>
<p>as expected. Notice that this function is recursive because the
second <strong>return</strong> factorial(n-1), where the function calls
itself in its definition.</p>
<p>Some recursive functions can be implemented using lambda, the
factorial function using lambda would be something like this:</p>
<p>factorial = <strong>lambda</strong> n: 1 <strong>if</strong> n == 0
<strong>else</strong> n*factorial(n-1)</p>
<p>The function outputs the same as above.</p>
<p>Section 33.14: Defining a function with arguments</p>
<p>Arguments are defined in parentheses after the function name:</p>
<p><em><strong>def</strong> divide(dividend, divisor):</em> # The names
of the function and its arguments</p>
<p># The arguments are available by name in the body of the function
<em><strong>print</strong>(dividend / divisor)</em></p>
<p>The function name and its list of arguments are called the
<em>signature</em> of the function. Each named argument is</p>
<p>effectively a local variable of the function.</p>
<p>When calling the function, give values for the arguments by listing
them in order</p>
<p>divide(10, 2)</p>
<p># output: 5</p>
<p>or specify them in any order using the names from the function
definition:</p>
<p>divide(divisor=2, dividend=10)</p>
<p># output: 5</p>
<p>Section 33.15: Iterable and dictionary unpacking</p>
<p>Functions allow you to specify these types of parameters: positional,
named, variable positional, Keyword args</p>
<p>(kwargs). Here is a clear and concise use of each type.</p>
<p><strong>def</strong> unpacking(a, b, c=45, d=60, *args,
**kwargs):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 196</p>
<p><strong>print</strong>(a, b, c, d, args, kwargs)</p>
<p>&gt;&gt;&gt; unpacking(1, 2)</p>
<p>1 2 45 60 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, 3, 4)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, c=3, d=4)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, d=4, c=3)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; pair = (3,)</p>
<p>&gt;&gt;&gt; unpacking(1, 2, *pair, d=4)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, d=4, *pair)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, *pair, c=3)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'c' &gt;&gt;&gt; unpacking(1, 2, c=3, *pair)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'c'</p>
<p>&gt;&gt;&gt; args_list = [3]</p>
<p>&gt;&gt;&gt; unpacking(1, 2, *args_list, d=4)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, d=4, *args_list)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, c=3, *args_list)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'c' &gt;&gt;&gt; unpacking(1, 2, *args_list, c=3)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'c'</p>
<p>&gt;&gt;&gt; pair = (3, 4)</p>
<p>&gt;&gt;&gt; unpacking(1, 2, *pair)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, 3, 4, *pair)</p>
<p>1 2 3 4 (3, 4) {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, d=4, *pair)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'd' &gt;&gt;&gt; unpacking(1, 2, *pair, d=4)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'd'</p>
<p>&gt;&gt;&gt; args_list = [3, 4]</p>
<p>&gt;&gt;&gt; unpacking(1, 2, *args_list)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, 3, 4, *args_list)</p>
<p>1 2 3 4 (3, 4) {}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 197</p>
<p><span id="____unpacking_1__2__d_4___args_l"
class="anchor"></span>&gt;&gt;&gt; unpacking(1, 2, d=4, *args_list)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'd' &gt;&gt;&gt; unpacking(1, 2, *args_list, d=4)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'd'</p>
<p>&gt;&gt;&gt; arg_dict = {'c':3, 'd':4}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, **arg_dict)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; arg_dict = {'d':4, 'c':3}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, **arg_dict)</p>
<p>1 2 3 4 () {}</p>
<p>&gt;&gt;&gt; arg_dict = {'c':3, 'd':4, 'not_a_parameter': 75}
&gt;&gt;&gt; unpacking(1, 2, **arg_dict)</p>
<p>1 2 3 4 () {'not_a_parameter': 75}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, *pair, **arg_dict)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'd' &gt;&gt;&gt; unpacking(1, 2, 3, 4, **arg_dict)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'd'</p>
<p># Positional arguments take priority over any other form of argument
passing <em>&gt;&gt;&gt; unpacking(1, 2, **arg_dict, c=3)</em></p>
<p>1 2 3 4 () {'not_a_parameter': 75}</p>
<p>&gt;&gt;&gt; unpacking(1, 2, 3, **arg_dict, c=3)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>TypeError: unpacking() got multiple values <strong>for</strong>
argument 'c'</p>
<p>Section 33.16: Defining a function with multiple arguments</p>
<p>One can give a function as many arguments as one wants, the only
fixed rules are that each argument name must be unique and that optional
arguments must be after the not-optional ones:</p>
<p><strong>def</strong> func(value1, value2, optionalvalue=10):</p>
<p><strong>return</strong> '{0} {1} {2}'.format(value1, value2,
optionalvalue1)</p>
<p>When calling the function you can either give each keyword without
the name but then the order matters:</p>
<p><strong>print</strong>(func(1, 'a', 100))</p>
<p># Out: 1 a 100</p>
<p><strong>print</strong>(func('abc', 14))</p>
<p># abc 14 10</p>
<p>Or combine giving the arguments with name and without. Then the ones
with name must follow those without but</p>
<p>the order of the ones with name doesn't matter:</p>
<p><strong>print</strong>(func('This', optionalvalue='StackOverflow
Documentation', value2='is')) <em># Out: This is StackOverflow
Documentation</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 198</p>
<p><span id="Chapter_34__Defining_functions_w_1"
class="anchor"></span>Chapter 34: Defining functions with list</p>
<p>arguments</p>
<p>Section 34.1: Function and Call</p>
<p>Lists as arguments are just another variable:</p>
<p><strong>def</strong> func(myList):</p>
<p><strong>for</strong> item <strong>in</strong> myList:</p>
<p><strong>print</strong>(item)</p>
<p>and can be passed in the function call itself:</p>
<p>func([1,2,3,5,7])</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>5</p>
<p>7</p>
<p>Or as a variable:</p>
<p>aList = ['a','b','c','d']</p>
<p>func(aList)</p>
<p>a</p>
<p>b</p>
<p>c</p>
<p>d</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 199</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learning
A-Z: Hands-On</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
In Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learn
to create Machine Learning Algorithms in</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
from two Data Science experts. Code</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">templates
included.</a></p>
<p><img src="media/index-225_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-225_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Master Machine Learning on Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Have a great intuition of many Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make accurate predictions</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make powerful analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make robust Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Create strong added value to your business</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Use Machine Learning for personal purpose</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle specific topics like Reinforcement Learning, NLP and Deep
Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle advanced techniques like Dimensionality Reduction</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Know which Machine Learning model to choose for each type of
problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Build an army of powerful Machine Learning models and know how to
combine them to solve any</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Watch
Today →</a></p>
<p><span id="Chapter_35__Functional_Programmi_1"
class="anchor"></span>Chapter 35: Functional Programming in</p>
<p>Python</p>
<p>Functional programming decomposes a problem into a set of functions.
Ideally, functions only take inputs and</p>
<p>produce outputs, and don’t have any internal state that affects the
output produced for a given input.below are</p>
<p>functional techniques common to many languages: such as lambda, map,
reduce.</p>
<p>Section 35.1: Lambda Function</p>
<p>An anonymous, inlined function defined with lambda. The parameters of
the lambda are defined to the left of the</p>
<p>colon. The function body is defined to the right of the colon. The
result of running the function body is (implicitly) returned.</p>
<p>s=<strong>lambda</strong> x:x*x</p>
<p>s(2) =&gt;4</p>
<p>Section 35.2: Map Function</p>
<p>Map takes a function and a collection of items. It makes a new, empty
collection, runs the function on each item in the original collection
and inserts each return value into the new collection. It returns the
new collection.</p>
<p>This is a simple map that takes a list of names and returns a list of
the lengths of those names:</p>
<p>name_lengths = map(len, ["Mary", "Isla", "Sam"])</p>
<p><strong>print</strong>(name_lengths) =&gt;[4, 4, 3]</p>
<p>Section 35.3: Reduce Function</p>
<p>Reduce takes a function and a collection of items. It returns a value
that is created by combining the items.</p>
<p>This is a simple reduce. It returns the sum of all the items in the
collection.</p>
<p>total = reduce(<strong>lambda</strong> a, x: a + x, [0, 1, 2, 3,
4])</p>
<p><strong>print</strong>(total) =&gt;10</p>
<p>Section 35.4: Filter Function</p>
<p>Filter takes a function and a collection. It returns a collection of
every item for which the function returned True.</p>
<p>arr=[1,2,3,4,5,6]</p>
<p>[i <strong>for</strong> i <strong>in</strong>
filter(<strong>lambda</strong> x:x&gt;4,arr)] <em>#
outputs[5,6]</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 201</p>
<p><span id="Chapter_36__Partial_functions_1"
class="anchor"></span>Chapter 36: Partial functions</p>
<p>Param details</p>
<p>x the number to be raised</p>
<p>y the exponent</p>
<p>raise the function to be specialized</p>
<p>As you probably know if you came from OOP school, specializing an
abstract class and use it is a practice you</p>
<p>should keep in mind when writing your code.</p>
<p>What if you could define an abstract function and specialize it in
order to create different versions of it? Thinks it as</p>
<p>a sort of <em>function Inheritance</em> where you bind specific
params to make them reliable for a specific scenario.</p>
<p>Section 36.1: Raise the power</p>
<p>Let's suppose we want raise <em>x</em> to a number <em>y</em>.</p>
<p>You'd write this as:</p>
<p><strong>def</strong> raise_power(x, y):</p>
<p>return <strong>x**y</strong></p>
<p>What if your <em>y</em> value can assume a finite set of values?</p>
<p>Let's suppose <em>y</em> can be one of <em>[3,4,5]</em> and let's say
you don't want offer end user the possibility to use such function</p>
<p>since it is very computationally intensive. In fact you would check
if provided <em>y</em> assumes a valid value and rewrite your function
as:</p>
<p>def raise<strong>(x, y):</strong></p>
<p><strong>if</strong> y <strong>in</strong> (3,4,5):</p>
<p>return <strong>x**y</strong></p>
<p><strong>raise</strong> NumberNotInRangeException("You should provide
a valid exponent")</p>
<p>Messy? Let's use the abstract form and specialize it to all three
cases: let's implement them <strong>partially</strong>.</p>
<p><strong>from</strong> functors <strong>import</strong> partial</p>
<p>raise_to_three = partial(<strong>raise</strong>, y=3)</p>
<p>raise_to_four = partial(<strong>raise</strong>, y=4)</p>
<p>raise_to_five = partial(<strong>raise</strong>, y=5)</p>
<p>What happens here? We fixed the <em>y</em> params and we defined
three different functions.</p>
<p>No need to use the abstract function defined above (you could make it
<em>private</em>) but you could use <strong>partial applied</strong></p>
<p>functions to deal with raising a number to a fixed value.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 202</p>
<p><span id="Chapter_37__Decorators_1" class="anchor"></span>Chapter 37:
Decorators</p>
<p>Parameter Details</p>
<p>f The function to be decorated (wrapped)</p>
<p>Decorator functions are software design patterns. They dynamically
alter the functionality of a function, method, or</p>
<p>class without having to directly use subclasses or change the source
code of the decorated function. When used correctly, decorators can
become powerful tools in the development process. This topic covers
implementation and</p>
<p>applications of decorator functions in Python.</p>
<p>Section 37.1: Decorator function</p>
<p>Decorators augment the behavior of other functions or methods. Any
function that takes a function as a parameter</p>
<p>and returns an augmented function can be used as a
<strong>decorator</strong>.</p>
<p># This simplest decorator does nothing to the function being
decorated. Such # minimal decorators can occasionally be used as a kind
of code markers. <em><strong>def</strong>
super_secret_function(f):</em></p>
<p>return <strong>f</strong></p>
<p>@super_secret_function</p>
<p><strong>def</strong> my_function():</p>
<p><strong>print</strong>("This is my secret function.")</p>
<p>The @-notation is syntactic sugar that is equivalent to the
following:</p>
<p>my_function = super_secret_function(my_function)</p>
<p>It is important to bear this in mind in order to understand how the
decorators work. This "unsugared" syntax makes</p>
<p>it clear why the decorator function takes a function as an argument,
and why it should return another function. It</p>
<p>also demonstrates what would happen if you <em>don't</em> return a
function:</p>
<p><strong>def</strong> disabled(f):</p>
<p>"""</p>
<p>This function returns nothing, and hence removes the decorated
function</p>
<p>from the local scope.</p>
<p>"""</p>
<p>pass</p>
<p>@disabled</p>
<p><strong>def</strong> my_function():</p>
<p><strong>print</strong>("This function can no longer be
called...")</p>
<p>my_function()</p>
<p># TypeError: 'NoneType' object is not callable</p>
<p>Thus, we usually define a <em>new function</em> inside the decorator
and return it. This new function would first do</p>
<p>something that it needs to do, then call the original function, and
finally process the return value. Consider this simple decorator
function that prints the arguments that the original function receives,
then calls it.</p>
<p>#This is the decorator</p>
<p><strong>def</strong> print_args(func):</p>
<p><strong>def</strong> inner_func(*args, **kwargs):</p>
<p><strong>print</strong>(args)</p>
<p><strong>print</strong>(kwargs)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 203</p>
<p><span id="return_func__args____kwargs___Ca"
class="anchor"></span><em><strong>return</strong> func(*args,
**kwargs)</em> #Call the original function with its arguments.</p>
<p><strong>return</strong> inner_func</p>
<p>@print_args</p>
<p><strong>def</strong> multiply(num_a, num_b):</p>
<p><strong>return</strong> num_a * num_b</p>
<p><strong>print</strong>(multiply(3, 5))</p>
<p>#Output:</p>
<p># (3,5) - This is actually the 'args' that the function receives. #
{} - This is the 'kwargs', empty because we didn't specify keyword
arguments. # 15 - The result of the function.</p>
<p>Section 37.2: Decorator class</p>
<p>As mentioned in the introduction, a decorator is a function that can
be applied to another function to augment its</p>
<p>behavior. The syntactic sugar is equivalent to the following: my_func
= decorator(my_func). But what if the decorator was instead a class? The
syntax would still work, except that now my_func gets replaced with an
instance</p>
<p>of the decorator class. If this class implements the __call__() magic
method, then it would still be possible to use my_func as if it was a
function:</p>
<p><strong>class</strong> Decorator(object):</p>
<p>"""Simple decorator class."""</p>
<p><strong>def</strong> __init__(self, func):</p>
<p>self.func = func</p>
<p><strong>def</strong> __call__(self, *args, **kwargs):</p>
<p><strong>print</strong>('Before the function call.')</p>
<p>res = self.func(*args, **kwargs)</p>
<p><strong>print</strong>('After the function call.')</p>
<p>return <strong>res</strong></p>
<p>@Decorator</p>
<p><strong>def</strong> testfunc():</p>
<p><strong>print</strong>('Inside the function.')</p>
<p>testfunc()</p>
<p># Before the function call.</p>
<p># Inside the function.</p>
<p># After the function call.</p>
<p>Note that a function decorated with a class decorator will no longer
be considered a "function" from type-checking perspective:</p>
<p>import <strong>types</strong></p>
<p>isinstance(testfunc, types.FunctionType)</p>
<p># False</p>
<p>type(testfunc)</p>
<p># &lt;class '__main__.Decorator'&gt;</p>
<p>Decorating Methods</p>
<p>For decorating methods you need to define an additional
__get__-method:</p>
<p><strong>from</strong> types <strong>import</strong> MethodType</p>
<p><strong>class</strong> Decorator(object):</p>
<p><strong>def</strong> __init__(self, func):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 204</p>
<p><span id="self_func___func" class="anchor"></span>self.func =
func</p>
<p><strong>def</strong> __call__(self, *args, **kwargs):</p>
<p><strong>print</strong>('Inside the decorator.')</p>
<p><strong>return</strong> self.func(*args, **kwargs)</p>
<p><strong>def</strong> __get__(self, instance, cls):</p>
<p># Return a Method if it is called on an instance</p>
<p><strong>return</strong> self <strong>if</strong> instance
<strong>is</strong> None <strong>else</strong> MethodType(self,
instance)</p>
<p><strong>class</strong> Test(object):</p>
<p>@Decorator</p>
<p><strong>def</strong> __init__(self):</p>
<p>pass</p>
<p>a = Test()</p>
<p>Inside the decorator.</p>
<p>Warning!</p>
<p>Class Decorators only produce one instance for a specific function so
decorating a method with a class decorator will share the same decorator
between all instances of that class:</p>
<p><strong>from</strong> types <strong>import</strong> MethodType</p>
<p><strong>class</strong> CountCallsDecorator(object):</p>
<p><strong>def</strong> __init__(self, func):</p>
<p>self.func = func</p>
<p><em>self.ncalls = 0</em> # Number of calls of this method</p>
<p><strong>def</strong> __call__(self, *args, **kwargs):</p>
<p><em>self.ncalls += 1</em> # Increment the calls counter</p>
<p><strong>return</strong> self.func(*args, **kwargs)</p>
<p><strong>def</strong> __get__(self, instance, cls):</p>
<p><strong>return</strong> self <strong>if</strong> instance
<strong>is</strong> None <strong>else</strong> MethodType(self,
instance)</p>
<p><strong>class</strong> Test(object):</p>
<p><strong>def</strong> __init__(self):</p>
<p>pass</p>
<p>@CountCallsDecorator</p>
<p><strong>def</strong> do_something(self):</p>
<p><strong>return</strong> 'something was done'</p>
<p>a = Test()</p>
<p>a.do_something()</p>
<p>a.do_something.ncalls <em># 1</em></p>
<p>b = Test()</p>
<p>b.do_something()</p>
<p>b.do_something.ncalls <em># 2</em></p>
<p>Section 37.3: Decorator with arguments (decorator factory)</p>
<p>A decorator takes just one argument: the function to be decorated.
There is no way to pass other arguments.</p>
<p>But additional arguments are often desired. The trick is then to make
a function which takes arbitrary arguments</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 205</p>
<p>and returns a decorator.</p>
<p>Decorator functions</p>
<p><strong>def</strong> decoratorfactory(message):</p>
<p><strong>def</strong> decorator(func):</p>
<p><strong>def</strong> wrapped_func(*args, **kwargs):</p>
<p><strong>print</strong>('The decorator wants to tell you:
{}'.format(message)) <strong>return</strong> func(*args, **kwargs)</p>
<p><strong>return</strong> wrapped_func</p>
<p><strong>return</strong> decorator</p>
<p>@decoratorfactory('Hello World')</p>
<p><strong>def</strong> test():</p>
<p>pass</p>
<p>test()</p>
<p>The decorator wants to tell you: Hello World</p>
<p>Important Note:</p>
<p>With such decorator factories you <strong>must</strong> call the
decorator with a pair of parentheses:</p>
<p><em>@decoratorfactory</em> # Without parentheses</p>
<p><strong>def</strong> test():</p>
<p>pass</p>
<p>test()</p>
<p>TypeError: decorator() missing 1 required positional argument:
'func'</p>
<p>Decorator classes</p>
<p><strong>def</strong> decoratorfactory(*decorator_args,
**decorator_kwargs):</p>
<p><strong>class</strong> Decorator(object):</p>
<p><strong>def</strong> __init__(self, func):</p>
<p>self.func = func</p>
<p><strong>def</strong> __call__(self, *args, **kwargs):</p>
<p><strong>print</strong>('Inside the decorator with arguments
{}'.format(decorator_args)) <strong>return</strong> self.func(*args,
**kwargs)</p>
<p><strong>return</strong> Decorator</p>
<p>@decoratorfactory(10)</p>
<p><strong>def</strong> test():</p>
<p>pass</p>
<p>test()</p>
<p>Inside the decorator with arguments (10,)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 206</p>
<p><span id="Section_37_4__Making_a_decorator"
class="anchor"></span>Section 37.4: Making a decorator look like the
decorated</p>
<p>function</p>
<p>Decorators normally strip function metadata as they aren't the same.
This can cause problems when using meta-programming to dynamically
access function metadata. Metadata also includes function's docstrings
and its name.</p>
<p><a
href="https://docs.python.org/3.5/library/functools.html#functools.wraps">functools.wraps</a>
makes the decorated function look like the original function by copying
several attributes to the wrapper function.</p>
<p><strong>from</strong> functools <strong>import</strong> wraps</p>
<p>The two methods of wrapping a decorator are achieving the same thing
in hiding that the original function has</p>
<p>been decorated. There is no reason to prefer the function version to
the class version unless you're already using one over the other.</p>
<p>As a function</p>
<p><strong>def</strong> decorator(func):</p>
<p># Copies the docstring, name, annotations and module to the decorator
<em>@wraps(func)</em></p>
<p><strong>def</strong> wrapped_func(*args, **kwargs):</p>
<p><strong>return</strong> func(*args, **kwargs)</p>
<p><strong>return</strong> wrapped_func</p>
<p>@decorator</p>
<p><strong>def</strong> test():</p>
<p>pass</p>
<p>test.__name__</p>
<p>'test'</p>
<p>As a class</p>
<p><strong>class</strong> Decorator(object):</p>
<p><strong>def</strong> __init__(self, func):</p>
<p># Copies name, module, annotations and docstring to the instance.
<em>self._wrapped = wraps(func)(self)</em></p>
<p><strong>def</strong> __call__(self, *args, **kwargs):</p>
<p><strong>return</strong> self._wrapped(*args, **kwargs)</p>
<p>@Decorator</p>
<p><strong>def</strong> test():</p>
<p>"""Docstring of test."""</p>
<p>pass</p>
<p>test.__doc__</p>
<p>'Docstring of test.'</p>
<p>Section 37.5: Using a decorator to time a function</p>
<p>import <strong>time</strong></p>
<p><strong>def</strong> timer(func):</p>
<p><strong>def</strong> inner(*args, **kwargs):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 207</p>
<p><span id="t1___time_time" class="anchor"></span>t1 = time.time()</p>
<p>f = func(*args, **kwargs)</p>
<p>t2 = time.time()</p>
<p><strong>print</strong> 'Runtime took {0} seconds'.format(t2-t1)</p>
<p>return <strong>f</strong></p>
<p>return <strong>inner</strong></p>
<p>@timer</p>
<p><strong>def</strong> example_function():</p>
<p>#do stuff</p>
<p>example_function()</p>
<p>Section 37.6: Create singleton class with a decorator</p>
<p>A singleton is a pattern that restricts the instantiation of a class
to one instance/object. Using a decorator, we can</p>
<p>define a class as a singleton by forcing the class to either return
an existing instance of the class or create a new</p>
<p>instance (if it doesn't exist).</p>
<p><strong>def</strong> singleton(cls):</p>
<p>instance = [None]</p>
<p><strong>def</strong> wrapper(*args, **kwargs):</p>
<p><strong>if</strong> instance[0] <strong>is</strong> None:</p>
<p>instance[0] = cls(*args, **kwargs)</p>
<p><strong>return</strong> instance[0]</p>
<p><strong>return</strong> wrapper</p>
<p>This decorator can be added to any class declaration and will make
sure that at most one instance of the class is created. Any subsequent
calls will return the already existing class instance.</p>
<p>@singleton</p>
<p><strong>class</strong> SomeSingletonClass:</p>
<p>x = 2</p>
<p><strong>def</strong> __init__(self):</p>
<p><strong>print</strong>("Created!")</p>
<p>instance = SomeSingletonClass() <em># prints: Created!</em> instance
= SomeSingletonClass() <em># doesn't print anything</em>
<strong>print</strong>(instance.x) <em># 2</em></p>
<p>instance.x = 3</p>
<p><strong>print</strong>(SomeSingletonClass().x) <em># 3</em></p>
<p>So it doesn't matter whether you refer to the class instance via your
local variable or whether you create another</p>
<p>"instance", you always get the same object.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 208</p>
<p><span id="Chapter_38__Classes_1" class="anchor"></span>Chapter 38:
Classes</p>
<p>Python offers itself not only as a popular scripting language, but
also supports the object-oriented programming</p>
<p>paradigm. Classes describe data and provide methods to manipulate
that data, all encompassed under a single object. Furthermore, classes
allow for abstraction by separating concrete implementation details from
abstract</p>
<p>representations of data.</p>
<p>Code utilizing classes is generally easier to read, understand, and
maintain.</p>
<p>Section 38.1: Introduction to classes</p>
<p>A class, functions as a template that defines the basic
characteristics of a particular object. Here's an example:</p>
<p><strong>class</strong> Person(object):</p>
<p>"""A simple class.""" <em># docstring</em></p>
<p>species = "Homo Sapiens" <em># class attribute</em></p>
<p><strong>def</strong> __init__(self, name): <em># special
method</em></p>
<p>"""This is the initializer. It's a special</p>
<p>method (see below).</p>
<p>"""</p>
<p><em>self.name = name</em> # instance attribute</p>
<p><strong>def</strong> __str__(self): <em># special method</em></p>
<p>"""This method is run when Python tries</p>
<p>to cast the object to a string. Return</p>
<p>this string when using print(), etc.</p>
<p>"""</p>
<p><strong>return</strong> self.name</p>
<p><strong>def</strong> rename(self, renamed): <em># regular
method</em></p>
<p>"""Reassign and print the name attribute."""</p>
<p>self.name = renamed</p>
<p><strong>print</strong>("Now my name is {}".format(self.name))</p>
<p>There are a few things to note when looking at the above example.</p>
<p>1. The class is made up of <em>attributes</em> (data) and
<em>methods</em> (functions).</p>
<p>2. Attributes and methods are simply defined as normal variables and
functions. 3. As noted in the corresponding docstring, the __init__()
method is called the <em>initializer</em>. It's equivalent to the</p>
<p>constructor in other object oriented languages, and is the method
that is first run when you create a new object, or new instance of the
class.</p>
<p>4. Attributes that apply to the whole class are defined first, and
are called <em>class attributes</em>. 5. Attributes that apply to a
specific instance of a class (an object) are called <em>instance
attributes</em>. They are</p>
<p>generally defined inside __init__(); this is not necessary, but it is
recommended (since attributes defined</p>
<p>outside of __init__() run the risk of being accessed before they are
defined).</p>
<p>6. Every method, included in the class definition passes the object
in question as its first parameter. The word</p>
<p>self is used for this parameter (usage of self is actually by
convention, as the word self has no inherent meaning in Python, but this
is one of Python's most respected conventions, and you should always
follow it).</p>
<p>7. Those used to object-oriented programming in other languages may
be surprised by a few things. One is that</p>
<p>Python has no real concept of private elements, so everything, by
default, imitates the behavior of the</p>
<p>C++/Java public keyword. For more information, see the "Private Class
Members" example on this page.</p>
<p>8. Some of the class's methods have the following form:
__functionname__(self, other_stuff). All such</p>
<p>methods are called "magic methods" and are an important part of
classes in Python. For instance, operator</p>
<p>overloading in Python is implemented with magic methods. For more
information, see the relevant</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 209</p>
<p><span id="documentation" class="anchor"></span>documentation.</p>
<p>Now let's make a few instances of our Person class!</p>
<p><em>&gt;&gt;&gt;</em> # Instances</p>
<p>&gt;&gt;&gt; kelly = Person("Kelly")</p>
<p>&gt;&gt;&gt; joseph = Person("Joseph")</p>
<p>&gt;&gt;&gt; john_doe = Person("John Doe")</p>
<p>We currently have three Person objects, kelly, joseph, and
john_doe.</p>
<p>We can access the attributes of the class from each instance using
the dot operator . Note again the difference between class and instance
attributes:</p>
<p><em>&gt;&gt;&gt;</em> # Attributes</p>
<p>&gt;&gt;&gt; kelly.species</p>
<p>'Homo Sapiens'</p>
<p>&gt;&gt;&gt; john_doe.species</p>
<p>'Homo Sapiens'</p>
<p>&gt;&gt;&gt; joseph.species</p>
<p>'Homo Sapiens'</p>
<p>&gt;&gt;&gt; kelly.name</p>
<p>'Kelly'</p>
<p>&gt;&gt;&gt; joseph.name</p>
<p>'Joseph'</p>
<p>We can execute the methods of the class using the same dot operator
.:</p>
<p><em>&gt;&gt;&gt;</em> # Methods</p>
<p>&gt;&gt;&gt; john_doe.__str__()</p>
<p>'John Doe'</p>
<p>&gt;&gt;&gt; <strong>print</strong>(john_doe)</p>
<p>'John Doe'</p>
<p>&gt;&gt;&gt; john_doe.rename("John")</p>
<p>'Now my name is John'</p>
<p>Section 38.2: Bound, unbound, and static methods</p>
<p>The idea of bound and unbound methods was <a
href="https://python-history.blogspot.com/2009/02/first-class-everything.html">removed
in Python 3</a>. In Python 3 when you declare a method within a class,
you are using a <strong>def</strong> keyword, thus creating a function
object. This is a regular function, and the surrounding</p>
<p>class works as its namespace. In the following example we declare
method f within class A, and it becomes a function A.f:</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>class</strong> A(object):</p>
<p><strong>def</strong> f(self, x):</p>
<p>return <strong>2 * x</strong></p>
<p>A.f</p>
<p># &lt;function A.f at ...&gt; (in Python 3.x)</p>
<p>In Python 2 the behavior was different: function objects within the
class were implicitly replaced with objects of type instancemethod,
which were called <em>unbound methods</em> because they were not bound
to any particular class instance.</p>
<p>It was possible to access the underlying function using .__func__
property.</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>A.f</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 210</p>
<p># &lt;unbound method A.f&gt; (in Python 2.x)</p>
<p>A.f.__class__</p>
<p># &lt;type 'instancemethod'&gt;</p>
<p>A.f.__func__</p>
<p># &lt;function f at ...&gt;</p>
<p>The latter behaviors are confirmed by inspection - methods are
recognized as functions in Python 3, while the distinction is upheld in
Python 2.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>import</strong> inspect</p>
<p>inspect.isfunction(A.f)</p>
<p># True</p>
<p>inspect.ismethod(A.f)</p>
<p># False</p>
<p>Python 2.x Version ≥ 2.3</p>
<p><strong>import</strong> inspect</p>
<p>inspect.isfunction(A.f)</p>
<p># False</p>
<p>inspect.ismethod(A.f)</p>
<p># True</p>
<p>In both versions of Python function/method A.f can be called
directly, provided that you pass an instance of class A as the first
argument.</p>
<p>A.f(1, 7)</p>
<p># Python 2: TypeError: unbound method f() must be called with # A
instance as first argument (got int instance instead) # Python 3: 14</p>
<p>a = A()</p>
<p>A.f(a, 20)</p>
<p># Python 2 &amp; 3: 40</p>
<p>Now suppose a is an instance of class A, what is a.f then? Well,
intuitively this should be the same method f of class</p>
<p>A, only it should somehow "know" that it was applied to the object a
– in Python this is called method <em>bound</em> to a.</p>
<p>The nitty-gritty details are as follows: writing a.f invokes the
magic __getattribute__ method of a, which first</p>
<p>checks whether a has an attribute named f (it doesn't), then checks
the class A whether it contains a method with such a name (it does), and
creates a new object m of type method which has the reference to the
original A.f in</p>
<p>m.__func__, and a reference to the object a in m.__self__. When this
object is called as a function, it simply does</p>
<p>the following: m(...) =&gt; m.__func__(m.__self__, ...). Thus this
object is called a <strong>bound method</strong> because when</p>
<p>invoked it knows to supply the object it was bound to as the first
argument. (These things work same way in Python 2 and 3).</p>
<p>a = A()</p>
<p>a.f</p>
<p># &lt;bound method A.f of &lt;__main__.A object at ...&gt;&gt;</p>
<p>a.f(2)</p>
<p># 4</p>
<p># Note: the bound method object a.f is recreated *every time* you
call it: <em>a.f <strong>is</strong> a.f</em> # False</p>
<p># As a performance optimization you can store the bound method in the
object's # __dict__, in which case the method object will remain fixed:
<em>a.f = a.f</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 211</p>
<p><span id="a_f_is_a_f____True" class="anchor"></span>a.f
<strong>is</strong> a.f <em># True</em></p>
<p>Finally, Python has <strong>class methods</strong> and <strong>static
methods</strong> – special kinds of methods. Class methods work the
same</p>
<p>way as regular methods, except that when invoked on an object they
bind to the <em>class</em> of the object instead of to the</p>
<p>object. Thus m.__self__ = type(a). When you call such bound method,
it passes the class of a as the first argument. Static methods are even
simpler: they don't bind anything at all, and simply return the
underlying</p>
<p>function without any transformations.</p>
<p><strong>class</strong> D(object):</p>
<p>multiplier = 2</p>
<p>@classmethod</p>
<p><strong>def</strong> f(cls, x):</p>
<p><strong>return</strong> cls.multiplier * x</p>
<p>@staticmethod</p>
<p><strong>def</strong> g(name):</p>
<p><strong>print</strong>("Hello, %s" % name)</p>
<p>D.f</p>
<p># &lt;bound method type.f of &lt;class '__main__.D'&gt;&gt;</p>
<p>D.f(12)</p>
<p># 24</p>
<p>D.g</p>
<p># &lt;function D.g at ...&gt;</p>
<p>D.g("world")</p>
<p># Hello, world</p>
<p>Note that class methods are bound to the class even when accessed on
the instance:</p>
<p>d = D()</p>
<p>d.multiplier = 1337</p>
<p>(D.multiplier, d.multiplier)</p>
<p># (2, 1337)</p>
<p>d.f</p>
<p># &lt;bound method D.f of &lt;class '__main__.D'&gt;&gt;</p>
<p>d.f(10)</p>
<p># 20</p>
<p>It is worth noting that at the lowest level, functions, methods,
staticmethods, etc. are actually descriptors that</p>
<p>invoke __get__, __set__ and optionally __del__ special methods. For
more details on classmethods and staticmethods:</p>
<p><a
href="http://stackoverflow.com/questions/136097/what-is-the-difference-between-staticmethod-and-classmethod-in-python">What
is the difference between @staticmethod and @classmethod in
Python?</a></p>
<p><a
href="http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner">Meaning
of @classmethod and @staticmethod for beginner?</a></p>
<p>Section 38.3: Basic inheritance</p>
<p>Inheritance in Python is based on similar ideas used in other object
oriented languages like Java, C++ etc. A new class can be derived from
an existing class as follows.</p>
<p><strong>class</strong> BaseClass(object):</p>
<p>pass</p>
<p><strong>class</strong> DerivedClass(BaseClass):</p>
<p>pass</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 212</p>
<p>The BaseClass is the already existing (<em>parent</em>) class, and
the DerivedClass is the new (<em>child</em>) class that inherits (or</p>
<p><em>subclasses</em>) attributes from BaseClass.
<strong>Note</strong><a
href="https://docs.python.org/release/2.2.3/whatsnew/sect-rellinks.html">:
As of Python 2.2, all classes implicitly inherit from the object
class</a>,</p>
<p>which is the base class for all built-in types.</p>
<p>We define a parent Rectangle class in the example below, which
implicitly inherits from object:</p>
<p><strong>class</strong> Rectangle():</p>
<p><strong>def</strong> __init__(self, w, h):</p>
<p>self.w = w</p>
<p>self.h = h</p>
<p><strong>def</strong> area(self):</p>
<p><strong>return</strong> self.w * self.h</p>
<p><strong>def</strong> perimeter(self):</p>
<p><strong>return</strong> 2 * (self.w + self.h)</p>
<p>The Rectangle class can be used as a base class for defining a Square
class, as a square is a special case of</p>
<p>rectangle.</p>
<p><strong>class</strong> Square(Rectangle):</p>
<p><strong>def</strong> __init__(self, s):</p>
<p># call parent constructor, w and h are both s</p>
<p>super(Square, self).__init__(s, s)</p>
<p>self.s = s</p>
<p>The Square class will automatically inherit all attributes of the
Rectangle class as well as the object class. super() is</p>
<p>used to call the __init__() method of Rectangle class, essentially
calling any overridden method of the base class.</p>
<p><strong>Note</strong>: in Python 3, super() does not require
arguments.</p>
<p>Derived class objects can access and modify the attributes of its
base classes:</p>
<p>r.area()</p>
<p># Output: 12</p>
<p>r.perimeter()</p>
<p># Output: 14</p>
<p>s.area()</p>
<p># Output: 4</p>
<p>s.perimeter()</p>
<p># Output: 8</p>
<p>Built-in functions that work with inheritance</p>
<p>issubclass(DerivedClass, BaseClass): returns True if DerivedClass is
a subclass of the BaseClass</p>
<p>isinstance(s, Class): returns True if s is an instance of Class or
any of the derived classes of Class</p>
<p># subclass check</p>
<p>issubclass(Square, Rectangle)</p>
<p># Output: True</p>
<p># instantiate</p>
<p>r = Rectangle(3, 4)</p>
<p>s = Square(2)</p>
<p>isinstance(r, Rectangle)</p>
<p># Output: True</p>
<p>isinstance(r, Square)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 213</p>
<p><span id="__Output__False" class="anchor"></span># Output: False</p>
<p># A rectangle is not a square</p>
<p>isinstance(s, Rectangle)</p>
<p># Output: True</p>
<p># A square is a rectangle</p>
<p>isinstance(s, Square)</p>
<p># Output: True</p>
<p>Section 38.4: Monkey Patching</p>
<p>In this case, "monkey patching" means adding a new variable or method
to a class after it's been defined. For</p>
<p>instance, say we defined class A as</p>
<p><strong>class</strong> A(object):</p>
<p><strong>def</strong> __init__(self, num):</p>
<p>self.num = num</p>
<p><strong>def</strong> __add__(self, other):</p>
<p><strong>return</strong> A(self.num + other.num)</p>
<p>But now we want to add another function later in the code. Suppose
this function is as follows.</p>
<p><strong>def</strong> get_num(self):</p>
<p><strong>return</strong> self.num</p>
<p>But how do we add this as a method in A? That's simple we just
essentially place that function into A with an</p>
<p>assignment statement.</p>
<p>A.get_num = get_num</p>
<p>Why does this work? Because functions are objects just like any other
object, and methods are functions that belong to the class.</p>
<p>The function get_num shall be available to all existing (already
created) as well to the new instances of A</p>
<p>These additions are available on all instances of that class (or its
subclasses) automatically. For example:</p>
<p>foo = A(42)</p>
<p>A.get_num = get_num</p>
<p>bar = A(6);</p>
<p>foo.get_num() <em># 42</em></p>
<p>bar.get_num() <em># 6</em></p>
<p>Note that, unlike some other languages, this technique does not work
for certain built-in types, and it is not</p>
<p>considered good style.</p>
<p>Section 38.5: New-style vs. old-style classes</p>
<p>Python 2.x Version ≥ 2.2.0</p>
<p><em>New-style</em> classes were introduced in Python 2.2 to unify
<em>classes</em> and <em>types</em>. They inherit from the top-level
object</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 214</p>
<p><span id="type__A_new_style_class_is_a_use"
class="anchor"></span>type. <em>A new-style class is a user-defined
type</em>, and is very similar to built-in types.</p>
<p># new-style class</p>
<p><strong>class</strong> New(object):</p>
<p>pass</p>
<p># new-style instance</p>
<p>new = New()</p>
<p>new.__class__</p>
<p># &lt;class '__main__.New'&gt;</p>
<p>type(new)</p>
<p># &lt;class '__main__.New'&gt;</p>
<p>issubclass(New, object)</p>
<p># True</p>
<p><em>Old-style</em> classes do <strong>not</strong> inherit from
object. Old-style instances are always implemented with a built-in
instance</p>
<p>type.</p>
<p># old-style class</p>
<p>class <strong>Old:</strong></p>
<p>pass</p>
<p># old-style instance</p>
<p>old = Old()</p>
<p>old.__class__</p>
<p># &lt;class __main__.Old at ...&gt;</p>
<p>type(old)</p>
<p># &lt;type 'instance'&gt;</p>
<p>issubclass(Old, object)</p>
<p># False</p>
<p>Python 3.x Version ≥ 3.0.0</p>
<p>In Python 3, old-style classes were removed.</p>
<p>New-style classes in Python 3 implicitly inherit from object, so
there is no need to specify MyClass(object)</p>
<p>anymore.</p>
<p><strong>class</strong> MyClass:</p>
<p>pass</p>
<p>my_inst = MyClass()</p>
<p>type(my_inst)</p>
<p># &lt;class '__main__.MyClass'&gt;</p>
<p>my_inst.__class__</p>
<p># &lt;class '__main__.MyClass'&gt;</p>
<p>issubclass(MyClass, object)</p>
<p># True</p>
<p>Section 38.6: Class methods: alternate initializers</p>
<p>Class methods present alternate ways to build instances of classes.
To illustrate, let's look at an example.</p>
<p>Let's suppose we have a relatively simple Person class:</p>
<p><strong>class</strong> Person(object):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 215</p>
<p><strong>def</strong> __init__(self, first_name, last_name, age):</p>
<p>self.first_name = first_name</p>
<p>self.last_name = last_name</p>
<p>self.age = age</p>
<p>self.full_name = first_name + " " + last_name</p>
<p><strong>def</strong> greet(self):</p>
<p><strong>print</strong>("Hello, my name is " + self.full_name +
".")</p>
<p>It might be handy to have a way to build instances of this class
specifying a full name instead of first and last name</p>
<p>separately. One way to do this would be to have last_name be an
optional parameter, and assuming that if it isn't given, we passed the
full name in:</p>
<p><strong>class</strong> Person(object):</p>
<p><strong>def</strong> __init__(self, first_name, age,
last_name=None):</p>
<p><strong>if</strong> last_name <strong>is</strong> None:</p>
<p>self.first_name, self.last_name = first_name.split(" ", 2)</p>
<p>else<strong>:</strong></p>
<p>self.first_name = first_name</p>
<p>self.last_name = last_name</p>
<p>self.full_name = self.first_name + " " + self.last_name self.age =
age</p>
<p><strong>def</strong> greet(self):</p>
<p><strong>print</strong>("Hello, my name is " + self.full_name +
".")</p>
<p>However, there are two main problems with this bit of code:</p>
<p>1. The parameters first_name and last_name are now misleading, since
you can enter a full name for</p>
<p>first_name. Also, if there are more cases and/or more parameters that
have this kind of flexibility, the</p>
<p>if/elif/else branching can get annoying fast.</p>
<p>2. Not quite as important, but still worth pointing out: what if
last_name is None, but first_name doesn't split</p>
<p>into two or more things via spaces? We have yet another layer of
input validation and/or exception</p>
<p>handling...</p>
<p>Enter class methods. Rather than having a single initializer, we will
create a separate initializer, called</p>
<p>from_full_name, and decorate it with the (built-in) classmethod
decorator.</p>
<p><strong>class</strong> Person(object):</p>
<p><strong>def</strong> __init__(self, first_name, last_name, age):</p>
<p>self.first_name = first_name</p>
<p>self.last_name = last_name</p>
<p>self.age = age</p>
<p>self.full_name = first_name + " " + last_name</p>
<p>@classmethod</p>
<p><strong>def</strong> from_full_name(cls, name, age):</p>
<p><strong>if</strong> " " <strong>not in</strong> name:</p>
<p><strong>raise</strong> ValueError</p>
<p>first_name, last_name = name.split(" ", 2)</p>
<p><strong>return</strong> cls(first_name, last_name, age)</p>
<p><strong>def</strong> greet(self):</p>
<p><strong>print</strong>("Hello, my name is " + self.full_name +
".")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 216</p>
<p><span id="Notice_cls_instead_of_self_as_th"
class="anchor"></span>Notice cls instead of self as the first argument
to from_full_name. Class methods are applied to the overall class,
<em>not</em> an instance of a given class (which is what self usually
denotes). So, if cls is our Person class, then the returned</p>
<p>value from the from_full_name class method is Person(first_name,
last_name, age), which uses Person's</p>
<p>__init__ to create an instance of the Person class. In particular, if
we were to make a subclass Employee of Person, then from_full_name would
work in the Employee class as well.</p>
<p>To show that this works as expected, let's create instances of Person
in more than one way without the branching</p>
<p>in __init__:</p>
<p>In [2]: bob = Person("Bob", "Bobberson", 42)</p>
<p>In [3]: alice = Person.from_full_name("Alice Henderson", 31)</p>
<p>In [4]: bob.greet()</p>
<p>Hello, my name <strong>is</strong> Bob Bobberson.</p>
<p>In [5]: alice.greet()</p>
<p>Hello, my name <strong>is</strong> Alice Henderson.</p>
<p>Other references:</p>
<p><a
href="http://stackoverflow.com/questions/12179271/python-classmethod-and-staticmethod-for-beginner">Python
@classmethod and @staticmethod for beginner?</a></p>
<p><a
href="https://docs.python.org/2/library/functions.html#classmethod">https://docs.python.org/2/library/functions.html#classmethod</a></p>
<p><a
href="https://docs.python.org/3.5/library/functions.html#classmethod">https://docs.python.org/3.5/library/functions.html#classmethod</a></p>
<p>Section 38.7: Multiple Inheritance</p>
<p><a href="https://en.wikipedia.org/wiki/C3_linearization">Python uses
the C3 linearization algorithm to determine the order in which to
resolve class attributes, including</a></p>
<p>methods. This is known as the Method Resolution Order (MRO).</p>
<p>Here's a simple example:</p>
<p><strong>class</strong> Foo(object):</p>
<p>foo = 'attr foo of Foo'</p>
<p><strong>class</strong> Bar(object):</p>
<p>foo = 'attr foo of Bar' <em># we won't see this.</em></p>
<p>bar = 'attr bar of Bar'</p>
<p><strong>class</strong> FooBar(Foo, Bar):</p>
<p>foobar = 'attr foobar of FooBar'</p>
<p>Now if we instantiate FooBar, if we look up the foo attribute, we see
that Foo's attribute is found first</p>
<p>fb = FooBar()</p>
<p>and</p>
<p>&gt;&gt;&gt; fb.foo</p>
<p>'attr foo of Foo'</p>
<p>Here's the MRO of FooBar:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 217</p>
<p>&gt;&gt;&gt; FooBar.mro()</p>
<p>[&lt;<strong>class</strong> '__main__.FooBar'&gt;,
&lt;<strong>class</strong> '__main__.Foo'&gt;,
&lt;<strong>class</strong> '__main__.Bar'&gt;, ]</p>
<p>It can be simply stated that Python's MRO algorithm is</p>
<p>1. Depth first (e.g. FooBar then Foo) unless</p>
<p>2. a shared parent (object) is blocked by a child (Bar) and</p>
<p>3. no circular relationships allowed.</p>
<p>That is, for example, Bar cannot inherit from FooBar while FooBar
inherits from Bar.</p>
<p><a href="https://en.wikipedia.org/wiki/C3_linearization">For a
comprehensive example in Python, see the wikipedia entry</a>.</p>
<p>Another powerful feature in inheritance is super. super can fetch
parent classes features.</p>
<p><strong>class</strong> Foo(object):</p>
<p><strong>def</strong> foo_method(self):</p>
<p><strong>print</strong> "foo Method"</p>
<p><strong>class</strong> Bar(object):</p>
<p><strong>def</strong> bar_method(self):</p>
<p><strong>print</strong> "bar Method"</p>
<p><strong>class</strong> FooBar(Foo, Bar):</p>
<p><strong>def</strong> foo_method(self):</p>
<p>super(FooBar, self).foo_method()</p>
<p>Multiple inheritance with init method of class, when every class has
own init method then we try for multiple</p>
<p>inheritance then only init method get called of class which is
inherit first.</p>
<p>for below example only Foo class <strong>init</strong> method getting
called <strong>Bar</strong> class init not getting called</p>
<p><strong>class</strong> Foo(object):</p>
<p><strong>def</strong> __init__(self):</p>
<p><strong>print</strong> "foo init"</p>
<p><strong>class</strong> Bar(object):</p>
<p><strong>def</strong> __init__(self):</p>
<p><strong>print</strong> "bar init"</p>
<p><strong>class</strong> FooBar(Foo, Bar):</p>
<p><strong>def</strong> __init__(self):</p>
<p><strong>print</strong> "foobar init"</p>
<p>super(FooBar, self).__init__()</p>
<p>a = FooBar()</p>
<p>Output:</p>
<p>foobar init</p>
<p>foo init</p>
<p>But it doesn't mean that <strong>Bar</strong> class is not inherit.
Instance of final <strong>FooBar</strong> class is also instance of
<strong>Bar</strong> class and <strong>Foo</strong></p>
<p>class.</p>
<p><strong>print</strong> isinstance(a,FooBar)</p>
<p><strong>print</strong> isinstance(a,Foo)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 218</p>
<p><span id="print_isinstance_a_Bar"
class="anchor"></span><strong>print</strong> isinstance(a,Bar)</p>
<p>Output:</p>
<p>True</p>
<p>True</p>
<p>True</p>
<p>Section 38.8: Properties</p>
<p>Python classes support <strong>properties</strong>, which look like
regular object variables, but with the possibility of attaching</p>
<p>custom behavior and documentation.</p>
<p><strong>class</strong> MyClass(object):</p>
<p><strong>def</strong> __init__(self):</p>
<p>self._my_string = ""</p>
<p>@property</p>
<p><strong>def</strong> string(self):</p>
<p>"""A profoundly important string."""</p>
<p><strong>return</strong> self._my_string</p>
<p>@string.setter</p>
<p><strong>def</strong> string(self, new_value):</p>
<p><strong>assert</strong> isinstance(new_value, str), \</p>
<p>"Give me a string, not a %r!" % type(new_value)</p>
<p>self._my_string = new_value</p>
<p>@string.deleter</p>
<p><strong>def</strong> x(self):</p>
<p>self._my_string = None</p>
<p>The object's of class MyClass will <em>appear</em> to have a property
.string, however it's behavior is now tightly controlled:</p>
<p>mc = MyClass()</p>
<p>mc.string = "String!"</p>
<p><strong>print</strong>(mc.string)</p>
<p><strong>del</strong> mc.string</p>
<p>As well as the useful syntax as above, the property syntax allows for
validation, or other augmentations to be added</p>
<p>to those attributes. This could be especially useful with public APIs
- where a level of help should be given to the user.</p>
<p>Another common use of properties is to enable the class to present
'virtual attributes' - attributes which aren't actually stored but are
computed only when requested.</p>
<p><strong>class</strong> Character(object):</p>
<p><strong>def</strong> __init__(name, max_hp):</p>
<p>self._name = name</p>
<p>self._hp = max_hp</p>
<p>self._max_hp = max_hp</p>
<p># Make hp read only by not providing a set method</p>
<p>@property</p>
<p><strong>def</strong> hp(self):</p>
<p><strong>return</strong> self._hp</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 219</p>
<p><span id="__Make_name_read_only_by_not_pro" class="anchor"></span>#
Make name read only by not providing a set method <em>@property</em></p>
<p><strong>def</strong> name(self):</p>
<p><strong>return</strong> self.name</p>
<p><strong>def</strong> take_damage(self, damage):</p>
<p>self.hp -= damage</p>
<p>self.hp = 0 <strong>if</strong> self.hp &lt;0 <strong>else</strong>
self.hp</p>
<p>@property</p>
<p><strong>def</strong> is_alive(self):</p>
<p><strong>return</strong> self.hp != 0</p>
<p>@property</p>
<p><strong>def</strong> is_wounded(self):</p>
<p><strong>return</strong> self.hp &lt; self.max_hp <strong>if</strong>
self.hp &gt; 0 <strong>else</strong> False</p>
<p>@property</p>
<p><strong>def</strong> is_dead(self):</p>
<p><strong>return not</strong> self.is_alive</p>
<p>bilbo = Character('Bilbo Baggins', 100)</p>
<p>bilbo.hp</p>
<p># out : 100</p>
<p>bilbo.hp = 200</p>
<p># out : AttributeError: can't set attribute</p>
<p># hp attribute is read only.</p>
<p>bilbo.is_alive</p>
<p># out : True</p>
<p>bilbo.is_wounded</p>
<p># out : False</p>
<p>bilbo.is_dead</p>
<p># out : False</p>
<p>bilbo.take_damage( 50 )</p>
<p>bilbo.hp</p>
<p># out : 50</p>
<p>bilbo.is_alive</p>
<p># out : True</p>
<p>bilbo.is_wounded</p>
<p># out : True</p>
<p>bilbo.is_dead</p>
<p># out : False</p>
<p>bilbo.take_damage( 50 )</p>
<p>bilbo.hp</p>
<p># out : 0</p>
<p>bilbo.is_alive</p>
<p># out : False</p>
<p>bilbo.is_wounded</p>
<p># out : False</p>
<p>bilbo.is_dead</p>
<p># out : True</p>
<p>Section 38.9: Default values for instance variables</p>
<p>If the variable contains a value of an immutable type (e.g. a string)
then it is okay to assign a default value like this</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 220</p>
<p><span id="class_Rectangle_object"
class="anchor"></span><strong>class</strong> Rectangle(object):</p>
<p><strong>def</strong> __init__(self, width, height, color='blue'):</p>
<p>self.width = width</p>
<p>self.height = height</p>
<p>self.color = color</p>
<p><strong>def</strong> area(self):</p>
<p><strong>return</strong> self.width * self.height</p>
<p># Create some instances of the class</p>
<p>default_rectangle = Rectangle(2, 3)</p>
<p><strong>print</strong>(default_rectangle.color) <em># blue</em></p>
<p>red_rectangle = Rectangle(2, 3, 'red')</p>
<p><strong>print</strong>(red_rectangle.color) <em># red</em></p>
<p>One needs to be careful when initializing mutable objects such as
lists in the constructor. Consider the following</p>
<p>example:</p>
<p><strong>class</strong> Rectangle2D(object):</p>
<p><strong>def</strong> __init__(self, width, height, pos=[0,0],
color='blue'):</p>
<p>self.width = width</p>
<p>self.height = height</p>
<p>self.pos = pos</p>
<p>self.color = color</p>
<p>r1 = Rectangle2D(5,3)</p>
<p>r2 = Rectangle2D(7,8)</p>
<p>r1.pos[0] = 4</p>
<p><em>r1.pos</em> # [4, 0]</p>
<p><em>r2.pos</em> # [4, 0] r2's pos has changed as well</p>
<p>This behavior is caused by the fact that in Python default parameters
are bound at function execution and not at function declaration. To get
a default instance variable that's not shared among instances, one
should use a</p>
<p>construct like this:</p>
<p><strong>class</strong> Rectangle2D(object):</p>
<p><strong>def</strong> __init__(self, width, height, pos=None,
color='blue'):</p>
<p>self.width = width</p>
<p>self.height = height</p>
<p><em>self.pos = pos <strong>or</strong> [0, 0]</em> # default value is
[0, 0]</p>
<p>self.color = color</p>
<p>r1 = Rectangle2D(5,3)</p>
<p>r2 = Rectangle2D(7,8)</p>
<p>r1.pos[0] = 4</p>
<p><em>r1.pos</em> # [4, 0]</p>
<p><em>r2.pos</em> # [0, 0] r2's pos hasn't changed</p>
<p>See also <a
href="http://docs.python-guide.org/en/latest/writing/gotchas/#mutable-default-arguments">Mutable
Default Arguments</a> <a
href="http://stackoverflow.com/questions/1132941/least-astonishment-and-the-mutable-default-argument">and
“Least Astonishment” and the Mutable Default Argument</a>.</p>
<p>Section 38.10: Class and instance variables</p>
<p>Instance variables are unique for each instance, while class
variables are shared by all instances.</p>
<p>class <strong>C:</strong></p>
<p><em>x = 2</em> # class variable</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 221</p>
<p><span id="def___init___self__y"
class="anchor"></span><strong>def</strong> __init__(self, y):</p>
<p><em>self.y = y</em> # instance variable</p>
<p>C.x</p>
<p># 2</p>
<p>C.y</p>
<p># AttributeError: type object 'C' has no attribute 'y'</p>
<p>c1 = C(3)</p>
<p>c1.x</p>
<p># 2</p>
<p>c1.y</p>
<p># 3</p>
<p>c2 = C(4)</p>
<p>c2.x</p>
<p># 2</p>
<p>c2.y</p>
<p># 4</p>
<p>Class variables can be accessed on instances of this class, but
assigning to the class attribute will create an instance</p>
<p>variable which shadows the class variable</p>
<p>c2.x = 4</p>
<p>c2.x</p>
<p># 4</p>
<p>C.x</p>
<p># 2</p>
<p>Note that <em>mutating</em> class variables from instances can lead
to some unexpected consequences.</p>
<p>class <strong>D:</strong></p>
<p>x = []</p>
<p><strong>def</strong> __init__(self, item):</p>
<p><em>self.x.append(item)</em> # note that this is not an
assignment!</p>
<p>d1 = D(1)</p>
<p>d2 = D(2)</p>
<p>d1.x</p>
<p># [1, 2]</p>
<p>d2.x</p>
<p># [1, 2]</p>
<p>D.x</p>
<p># [1, 2]</p>
<p>Section 38.11: Class composition</p>
<p>Class composition allows explicit relations between objects. In this
example, people live in cities that belong to</p>
<p>countries. Composition allows people to access the number of all
people living in their country:</p>
<p><strong>class</strong> Country(object):</p>
<p><strong>def</strong> __init__(self):</p>
<p>self.cities=[]</p>
<p><strong>def</strong> addCity(self,city):</p>
<p>self.cities.append(city)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 222</p>
<p><span id="class_City_object"
class="anchor"></span><strong>class</strong> City(object):</p>
<p><strong>def</strong> __init__(self, numPeople):</p>
<p>self.people = []</p>
<p>self.numPeople = numPeople</p>
<p><strong>def</strong> addPerson(self, person):</p>
<p>self.people.append(person)</p>
<p><strong>def</strong> join_country(self,country):</p>
<p>self.country = country</p>
<p>country.addCity(self)</p>
<p><strong>for</strong> i <strong>in</strong> range(self.numPeople):</p>
<p>person(i).join_city(self)</p>
<p><strong>class</strong> Person(object):</p>
<p><strong>def</strong> __init__(self, ID):</p>
<p>self.ID=ID</p>
<p><strong>def</strong> join_city(self, city):</p>
<p>self.city = city</p>
<p>city.addPerson(self)</p>
<p><strong>def</strong> people_in_my_country(self):</p>
<p>x= sum([len(c.people) <strong>for</strong> c <strong>in</strong>
self.city.country.cities])</p>
<p>return <strong>x</strong></p>
<p>US=Country()</p>
<p>NYC=City(10).join_country(US)</p>
<p>SF=City(5).join_country(US)</p>
<p><strong>print</strong>(US.cities[0].people[0].people_in_my_country())</p>
<p># 15</p>
<p>Section 38.12: Listing All Class Members</p>
<p>The dir() function can be used to get a list of the members of a
class:</p>
<p>dir(Class)</p>
<p>For example:</p>
<p>&gt;&gt;&gt; dir(list)</p>
<p>['__add__', '__class__', '__contains__', '__delattr__',
'__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__',
'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',
'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',
'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',
'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',
'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy',
'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse',
'sort']</p>
<p>It is common to look only for "non-magic" members. This can be done
using a simple comprehension that lists members with names not starting
with __:</p>
<p>&gt;&gt;&gt; [m <strong>for</strong> m <strong>in</strong> dir(list)
<strong>if not</strong> m.startswith('__')]</p>
<p>['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert',
'pop', 'remove', 'reverse', 'sort']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 223</p>
<p><span id="Caveats" class="anchor"></span>Caveats:</p>
<p>Classes can define a __dir__() method. If that method exists calling
dir() will call __dir__(), otherwise Python</p>
<p>will try to create a list of members of the class. This means that
the dir function can have unexpected results. Two</p>
<p><a
href="https://docs.python.org/3.4/library/functions.html#dir">quotes of
importance from the official python documentation:</a></p>
<p>If the object does not provide <strong>dir</strong>(), the function
tries its best to gather information from the object’s
<strong>dict</strong></p>
<p>attribute, if defined, and from its type object. The resulting list
is not necessarily complete, and may be inaccurate when the object has a
custom <strong>getattr</strong>().</p>
<p><strong>Note:</strong> Because dir() is supplied primarily as a
convenience for use at an interactive prompt, it tries to</p>
<p>supply an interesting set of names more than it tries to supply a
rigorously or consistently defined set of</p>
<p>names, and its detailed behavior may change across releases. For
example, metaclass attributes are not in the result list when the
argument is a class.</p>
<p>Section 38.13: Singleton class</p>
<p>A singleton is a pattern that restricts the instantiation of a class
to one instance/object. For more info on python</p>
<p>singleton design patterns, see <a
href="http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html">here</a>.</p>
<p><strong>class</strong> Singleton:</p>
<p><strong>def</strong> __new__(cls):</p>
<p>try<strong>:</strong></p>
<p>it = cls.__it__</p>
<p><strong>except</strong> AttributeError:</p>
<p>it = cls.__it__ = object.__new__(cls)</p>
<p>return <strong>it</strong></p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong>
'&lt;{}&gt;'.format(self.__class__.__name__.upper())</p>
<p><strong>def</strong> __eq__(self, other):</p>
<p><strong>return</strong> other <strong>is</strong> self</p>
<p>Another method is to decorate your class. Following the example from
this <a href="http://stackoverflow.com/a/7346105/3462319">answer create
a Singleton class:</a></p>
<p><strong>class</strong> Singleton:</p>
<p>"""</p>
<p>A non-thread-safe helper class to ease implementing singletons.</p>
<p>This should be used as a decorator -- not a metaclass -- to the</p>
<p>class that should be a singleton.</p>
<p>The decorated class can define one `__init__` function that</p>
<p>takes only the `self` argument. Other than that, there are</p>
<p>no restrictions that apply to the decorated class.</p>
<p>To get the singleton instance, use the `Instance` method. Trying</p>
<p>to use `__call__` will result in a `TypeError` being raised.</p>
<p>Limitations: The decorated class cannot be inherited from.</p>
<p>"""</p>
<p><strong>def</strong> __init__(self, decorated):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 224</p>
<p><span id="self__decorated___decorated"
class="anchor"></span>self._decorated = decorated</p>
<p><strong>def</strong> Instance(self):</p>
<p>"""</p>
<p>Returns the singleton instance. Upon its first call, it creates a</p>
<p>new instance of the decorated class and calls its `__init__`
method.</p>
<p>On all subsequent calls, the already created instance is
returned.</p>
<p>"""</p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> self._instance</p>
<p><strong>except</strong> AttributeError:</p>
<p>self._instance = self._decorated()</p>
<p><strong>return</strong> self._instance</p>
<p><strong>def</strong> __call__(self):</p>
<p><strong>raise</strong> TypeError('Singletons must be accessed through
`Instance()`.')</p>
<p><strong>def</strong> __instancecheck__(self, inst):</p>
<p><strong>return</strong> isinstance(inst, self._decorated)</p>
<p>To use you can use the Instance method</p>
<p>@Singleton</p>
<p><strong>class</strong> Single:</p>
<p><strong>def</strong> __init__(self):</p>
<p>self.name=None</p>
<p>self.val=0</p>
<p><strong>def</strong> getName(self):</p>
<p><strong>print</strong>(self.name)</p>
<p>x=Single.Instance()</p>
<p>y=Single.Instance()</p>
<p>x.name='I<strong>\'</strong>m single'</p>
<p><em>x.getName()</em> # outputs I'm single</p>
<p><em>y.getName()</em> # outputs I'm single</p>
<p>Section 38.14: Descriptors and Dotted Lookups</p>
<p><strong>Descriptors</strong> are objects that are (usually)
attributes of classes and that have any of __get__, __set__, or
__delete__ special methods.</p>
<p><strong>Data Descriptors</strong> have any of __set__, or
__delete__</p>
<p>These can control the dotted lookup on an instance, and are used to
implement functions, staticmethod, classmethod, and property. A dotted
lookup (e.g. instance foo of class Foo looking up attribute bar - i.e.
foo.bar)</p>
<p>uses the following algorithm:</p>
<p>1. bar is looked up in the class, Foo. If it is there and it is a
<strong>Data Descriptor</strong>, then the data descriptor is used.</p>
<p>That's how property is able to control access to data in an instance,
and instances cannot override this. If a</p>
<p><strong>Data Descriptor</strong> is not there, then</p>
<p>2. bar is looked up in the instance __dict__. This is why we can
override or block methods being called from an</p>
<p>instance with a dotted lookup. If bar exists in the instance, it is
used. If not, we then</p>
<p>3. look in the class Foo for bar. If it is a
<strong>Descriptor</strong>, then the descriptor protocol is used. This
is how functions</p>
<p>(in this context, unbound methods), classmethod, and staticmethod are
implemented. Else it simply returns</p>
<p>the object there, or there is an AttributeError</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 225</p>
<p><span id="Chapter_39__Metaclasses_1" class="anchor"></span>Chapter
39: Metaclasses</p>
<p>Metaclasses allow you to deeply modify the behaviour of Python
classes (in terms of how they're defined,</p>
<p>instantiated, accessed, and more) by replacing the type metaclass
that new classes use by default.</p>
<p>Section 39.1: Basic Metaclasses</p>
<p>When type is called with three arguments it behaves as the
(meta)class it is, and creates a new instance, ie. it</p>
<p>produces a new class/type.</p>
<p>Dummy = type('OtherDummy', (), dict(x=1))</p>
<p>Dummy.__class__ <em># &lt;type 'type'&gt;</em></p>
<p>Dummy().__class__.__class__ <em># &lt;type 'type'&gt;</em></p>
<p>It is possible to subclass type to create an custom metaclass.</p>
<p><strong>class</strong> mytype(type):</p>
<p><strong>def</strong> __init__(cls, name, bases, dict):</p>
<p># call the base initializer</p>
<p>type.__init__(cls, name, bases, dict)</p>
<p># perform custom initialization...</p>
<p>cls.__custom_attribute__ = 2</p>
<p>Now, we have a new custom mytype metaclass which can be used to
create classes in the same manner as type.</p>
<p>MyDummy = mytype('MyDummy', (), dict(x=2))</p>
<p>MyDummy.__class__ <em># &lt;class '__main__.mytype'&gt;</em>
MyDummy().__class__.__class__ <em># &lt;class '__main__.mytype'&gt;</em>
MyDummy.__custom_attribute__ <em># 2</em></p>
<p>When we create a new class using the <strong>class</strong> keyword
the metaclass is by default chosen based on upon the</p>
<p>baseclasses.</p>
<p>&gt;&gt;&gt; <strong>class</strong> Foo(object):</p>
<p>... <strong>pass</strong></p>
<p>&gt;&gt;&gt; type(Foo)</p>
<p>type</p>
<p>In the above example the only baseclass is object so our metaclass
will be the type of object, which is type. It is possible override the
default, however it depends on whether we use Python 2 or Python 3:</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>A special class-level attribute __metaclass__ can be used to specify
the metaclass.</p>
<p><strong>class</strong> MyDummy(object):</p>
<p>__metaclass__ = mytype</p>
<p><em>type(MyDummy)</em> # &lt;class '__main__.mytype'&gt;</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>A special metaclass keyword argument specify the metaclass.</p>
<p><strong>class</strong> MyDummy(metaclass=mytype):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 226</p>
<p><span id="pass" class="anchor"></span>pass</p>
<p><em>type(MyDummy)</em> # &lt;class '__main__.mytype'&gt;</p>
<p>Any keyword arguments (except metaclass) in the class declaration
will be passed to the metaclass. Thus <strong>class</strong></p>
<p>MyDummy(metaclass=mytype, x=2) will pass x=2 as a keyword argument to
the mytype constructor.</p>
<p>Read this <a
href="http://stackoverflow.com/questions/100003/what-is-a-metaclass-in-python/6581949#6581949">in-depth
description of python meta-classes for more details.</a></p>
<p>Section 39.2: Singletons using metaclasses</p>
<p>A singleton is a pattern that restricts the instantiation of a class
to one instance/object. For more info on python</p>
<p>singleton design patterns, see <a
href="http://python-3-patterns-idioms-test.readthedocs.io/en/latest/Singleton.html">here</a>.</p>
<p><strong>class</strong> SingletonType(type):</p>
<p><strong>def</strong> __call__(cls, *args, **kwargs):</p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> cls.__instance</p>
<p><strong>except</strong> AttributeError:</p>
<p>cls.__instance = super(SingletonType, cls).__call__(*args,
**kwargs)</p>
<p><strong>return</strong> cls.__instance</p>
<p>Python 2.x Version ≤ 2.7</p>
<p><strong>class</strong> MySingleton(object):</p>
<p>__metaclass__ = SingletonType</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>class</strong> MySingleton(metaclass=SingletonType):</p>
<p>pass</p>
<p><em>MySingleton() <strong>is</strong> MySingleton()</em> # True, only
one instantiation occurs</p>
<p>Section 39.3: Using a metaclass</p>
<p>Metaclass syntax</p>
<p>Python 2.x Version ≤ 2.7</p>
<p><strong>class</strong> MyClass(object):</p>
<p>__metaclass__ = SomeMetaclass</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>class</strong> MyClass(metaclass=SomeMetaclass):</p>
<p>pass</p>
<p>Python 2 and 3 compatibility with six</p>
<p>import <strong>six</strong></p>
<p><strong>class</strong>
MyClass(six.with_metaclass(SomeMetaclass)):</p>
<p>pass</p>
<p>Section 39.4: Introduction to Metaclasses</p>
<p>What is a metaclass?</p>
<p>In Python, everything is an object: integers, strings, lists, even
functions and classes themselves are objects. And every object is an
instance of a class.</p>
<p>To check the class of an object x, one can call type(x), so:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 227</p>
<p><span id="____type_5" class="anchor"></span>&gt;&gt;&gt; type(5)</p>
<p>&gt;&gt;&gt; type(str)</p>
<p>&gt;&gt;&gt; type([1, 2, 3])</p>
<p>&gt;&gt;&gt; <strong>class</strong> C(object):</p>
<p>... <strong>pass</strong></p>
<p>...</p>
<p>&gt;&gt;&gt; type(C)</p>
<p>Most classes in python are instances of type. type itself is also a
class. Such classes whose instances are also classes are called
metaclasses.</p>
<p>The Simplest Metaclass</p>
<p>OK, so there is already one metaclass in Python: type. Can we create
another one?</p>
<p><strong>class</strong> SimplestMetaclass(type):</p>
<p>pass</p>
<p><strong>class</strong> MyClass(object):</p>
<p>__metaclass__ = SimplestMetaclass</p>
<p>That does not add any functionality, but it is a new metaclass, see
that MyClass is now an instance of</p>
<p>SimplestMetaclass:</p>
<p>&gt;&gt;&gt; type(MyClass)</p>
<p>&lt;<strong>class</strong> '__main__.SimplestMetaclass'&gt;</p>
<p>A Metaclass which does Something</p>
<p>A metaclass which does something usually overrides type's __new__, to
modify some properties of the class to be</p>
<p>created, before calling the original __new__ which creates the
class:</p>
<p><strong>class</strong> AnotherMetaclass(type):</p>
<p><strong>def</strong> __new__(cls, name, parents, dct):</p>
<p># cls is this class</p>
<p># name is the name of the class to be created</p>
<p># parents is the list of the class's parent classes # dct is the list
of class's attributes (methods, static variables)</p>
<p># here all of the attributes can be modified before creating the
class, e.g.</p>
<p><em>dct['x'] = 8</em> # now the class will have a static variable x =
8</p>
<p><em># return value is the new class. super will take care of
that</em> <strong>return</strong> super(AnotherMetaclass,
cls).__new__(cls, name, parents, dct)</p>
<p>Section 39.5: Custom functionality with metaclasses</p>
<p><strong>Functionality in metaclasses</strong> can be changed so that
whenever a class is built, a string is printed to standard</p>
<p>output, or an exception is thrown. This metaclass will print the name
of the class being built.</p>
<p><strong>class</strong> VerboseMetaclass(type):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 228</p>
<p><span id="def___new___cls__class_name__cla"
class="anchor"></span><strong>def</strong> __new__(cls, class_name,
class_parents, class_dict):</p>
<p><strong>print</strong>("Creating class ", class_name)</p>
<p>new_class = super().__new__(cls, class_name, class_parents,
class_dict)</p>
<p><strong>return</strong> new_class</p>
<p>You can use the metaclass like so:</p>
<p><strong>class</strong> Spam(metaclass=VerboseMetaclass):</p>
<p><strong>def</strong> eggs(self):</p>
<p><strong>print</strong>("[insert example string here]")</p>
<p>s = Spam()</p>
<p>s.eggs()</p>
<p>The standard output will be:</p>
<p>Creating <strong>class</strong> Spam</p>
<p>[insert example string here]</p>
<p>Section 39.6: The default metaclass</p>
<p>You may have heard that everything in Python is an object. It is
true, and all objects have a class:</p>
<p>&gt;&gt;&gt; type(1)</p>
<p>int</p>
<p>The literal 1 is an instance of int. Let's declare a class:</p>
<p>&gt;&gt;&gt; <strong>class</strong> Foo(object):</p>
<p>... <strong>pass</strong></p>
<p>...</p>
<p>Now let's instantiate it:</p>
<p>&gt;&gt;&gt; bar = Foo()</p>
<p>What is the class of bar?</p>
<p>&gt;&gt;&gt; type(bar)</p>
<p>Foo</p>
<p>Nice, bar is an instance of Foo. But what is the class of Foo
itself?</p>
<p>&gt;&gt;&gt; type(Foo)</p>
<p>type</p>
<p>Ok, Foo itself is an instance of type. How about type itself?</p>
<p>&gt;&gt;&gt; type(type)</p>
<p>type</p>
<p>So what is a metaclass? For now let's pretend it is just a fancy name
for the class of a class. Takeaways:</p>
<p>Everything is an object in Python, so everything has a class The
class of a class is called a metaclass</p>
<p>The default metaclass is type, and by far it is the most common
metaclass</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 229</p>
<p>But why should you know about metaclasses? Well, Python itself is
quite "hackable", and the concept of metaclass is important if you are
doing advanced stuff like meta-programming or if you want to control how
your classes are</p>
<p>initialized.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 230</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Learning,
Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
Deep Learning with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Complete
hands-on machine learning tutorial with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">data
science, Tensorflow, artificial intelligence,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
neural networks</a></p>
<p><img src="media/index-256_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-256_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build artificial neural networks with Tensorflow and Keras</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify images, data, and sentiments using deep learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Make predictions using linear regression, polynomial regression, and
multivariate regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Data Visualization with MatPlotLib and Seaborn</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Implement machine learning at massive scale with Apache Spark's
MLLib</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Understand reinforcement learning - and how to build a Pac-Man
bot</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify data using K-Means clustering, Support Vector Machines (SVM),
KNN, Decision Trees,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Naive
Bayes, and PCA</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Use train/test and K-Fold cross validation to choose and tune your
models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build a movie recommender system using item-based and user-based
collaborative filtering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Watch
Today →</a></p>
<p><span id="Chapter_40__String_Formatting_1"
class="anchor"></span>Chapter 40: String Formatting</p>
<p>When storing and transforming data for humans to see, string
formatting can become very important. Python</p>
<p>offers a wide variety of string formatting methods which are outlined
in this topic.</p>
<p>Section 40.1: Basics of String Formatting</p>
<p>foo = 1</p>
<p>bar = 'bar'</p>
<p>baz = 3.14</p>
<p>You can use str.format to format output. Bracket pairs are replaced
with arguments in the order in which the</p>
<p>arguments are passed:</p>
<p><strong>print</strong>('{}, {} and {}'.format(foo, bar, baz))</p>
<p># Out: "1, bar and 3.14"</p>
<p>Indexes can also be specified inside the brackets. The numbers
correspond to indexes of the arguments passed to</p>
<p>the str.format function (0-based).</p>
<p><strong>print</strong>('{0}, {1}, {2}, and {1}'.format(foo, bar,
baz)) <em># Out: "1, bar, 3.14, and bar"</em></p>
<p><strong>print</strong>('{0}, {1}, {2}, and {3}'.format(foo, bar,
baz)) <em># Out: index out of range error</em></p>
<p>Named arguments can be also used:</p>
<p><strong>print</strong>("X value is: {x_val}. Y value is:
{y_val}.".format(x_val=2, y_val=3)) <em># Out: "X value is: 2. Y value
is: 3."</em></p>
<p>Object attributes can be referenced when passed into str.format:</p>
<p><strong>class</strong> AssignValue(object):</p>
<p><strong>def</strong> __init__(self, value):</p>
<p>self.value = value</p>
<p>my_value = AssignValue(6)</p>
<p><strong>print</strong>('My value is: {0.value}'.format(my_value))
<em># "0" is optional # Out: "My value is: 6"</em></p>
<p>Dictionary keys can be used as well:</p>
<p>my_dict = {'key': 6, 'other_key': 7}</p>
<p><strong>print</strong>("My other key is:
{0[other_key]}".format(my_dict)) <em># "0" is optional # Out: "My other
key is: 7"</em></p>
<p>Same applies to list and tuple indices:</p>
<p>my_list = ['zero', 'one', 'two']</p>
<p><em><strong>print</strong>("2nd element is:
{0[2]}".format(my_list))</em> # "0" is optional # Out: "2nd element is:
two"</p>
<p>Note: In addition to str.format, Python also provides the modulo
operator %--also known as the <em>string</em></p>
<p><em>formatting</em> or <em>interpolation operator</em> (see <a
href="https://www.python.org/dev/peps/pep-3101/">PEP 3101</a>)--for
formatting strings. str.format is a successor of %</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 232</p>
<p><span id="and_it_offers_greater_flexibilit" class="anchor"></span>and
it offers greater flexibility, for instance by making it easier to carry
out multiple substitutions.</p>
<p>In addition to argument indexes, you can also include a <em>format
specification</em> inside the curly brackets. This is an</p>
<p>expression that follows special rules and must be preceded by a colon
(:<a
href="https://docs.python.org/2/library/string.html#format-specification-mini-language">).
See the docs for a full description of</a> format specification. An
example of format specification is the alignment directive :~^20 (^
stands for center</p>
<p>alignment, total width 20, fill with ~ character):</p>
<p>'{:~^20}'.format('centered')</p>
<p># Out: '~~~~~~centered~~~~~~'</p>
<p>format allows behaviour not possible with %, for example repetition
of arguments:</p>
<p>t = (12, 45, 22222, 103, 6)</p>
<p><strong>print</strong> '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*t)
<em># Out: 12 22222 45 22222 103 22222 6 22222</em></p>
<p>As format is a function, it can be used as an argument in other
functions:</p>
<p>number_list = [12,45,78]</p>
<p><strong>print</strong> map('the number is {}'.format,
number_list)</p>
<p># Out: ['the number is 12', 'the number is 45', 'the number is
78']</p>
<p><strong>from</strong> datetime <strong>import</strong>
datetime,timedelta</p>
<p>once_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)</p>
<p>delta = timedelta(days=13, hours=8, minutes=20)</p>
<p>gen = (once_upon_a_time + x * delta <strong>for</strong> x
<strong>in</strong> xrange(5))</p>
<p><strong>print</strong> '<strong>\n</strong>'.join(map('{:%Y-%m-%d
%H:%M:%S}'.format, gen)) <em>#Out: 2010-07-01 12:00:00</em></p>
<p># 2010-07-14 20:20:00</p>
<p># 2010-07-28 04:40:00</p>
<p># 2010-08-10 13:00:00</p>
<p># 2010-08-23 21:20:00</p>
<p>Section 40.2: Alignment and padding</p>
<p>Python 2.x Version ≥ 2.6</p>
<p>The format() method can be used to change the alignment of the
string. You have to do it with a format expression</p>
<p>of the form :[fill_char][align_operator][width] where align_operator
is one of:</p>
<p>&lt; forces the field to be left-aligned within width.</p>
<p>&gt; forces the field to be right-aligned within width.</p>
<p>^ forces the field to be centered within width.</p>
<p>= forces the padding to be placed after the sign (numeric types
only).</p>
<p>fill_char (if omitted default is whitespace) is the character used
for the padding.</p>
<p>'{:~&lt;9s}, World'.format('Hello')</p>
<p># 'Hello~~~~, World'</p>
<p>'{:~&gt;9s}, World'.format('Hello')</p>
<p># '~~~~Hello, World'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 233</p>
<p><span id="_____9s___format__Hello"
class="anchor"></span>'{:~^9s}'.format('Hello')</p>
<p># '~~Hello~~'</p>
<p>'{:0=6d}'.format(-123)</p>
<p># '-00123'</p>
<p>Note: you could achieve the same results using the string functions
ljust(), rjust(), center(), zfill(), however these functions are
deprecated since version 2.5.</p>
<p>Section 40.3: Format literals (f-string)</p>
<p>Literal format strings were introduced in <a
href="https://www.python.org/dev/peps/pep-0498/">PEP 498 (Python3.6 and
upwards), allowing you to prepend</a> f to the beginning of a string
literal to effectively apply .format to it with all variables in the
current scope.</p>
<p>&gt;&gt;&gt; foo = 'bar'</p>
<p>&gt;&gt;&gt; f'Foo is {foo}'</p>
<p>'Foo is bar'</p>
<p>This works with more advanced format strings too, including alignment
and dot notation.</p>
<p>&gt;&gt;&gt; f'{foo:^7s}'</p>
<p>' bar '</p>
<p><strong>Note:</strong> The f'' does not denote a particular type like
b'' for bytes or u'' for unicode in python2. The formatting is</p>
<p>immediately applied, resulting in a normal string.</p>
<p>The format strings can also be <em>nested</em>:</p>
<p>&gt;&gt;&gt; price = 478.23</p>
<p>&gt;&gt;&gt; f"{f'${price:0.2f}':*&gt;20s}"</p>
<p>'*************$478.23'</p>
<p>The expressions in an f-string are evaluated in left-to-right order.
This is detectable only if the expressions have side effects:</p>
<p>&gt;&gt;&gt; <strong>def</strong> fn(l, incr):</p>
<p>... result = l[0]</p>
<p>... l[0] += incr</p>
<p>... <strong>return</strong> result</p>
<p>...</p>
<p>&gt;&gt;&gt; lst = [0]</p>
<p>&gt;&gt;&gt; f'{fn(lst,2)} {fn(lst,3)}'</p>
<p>'0 2'</p>
<p>&gt;&gt;&gt; f'{fn(lst,2)} {fn(lst,3)}'</p>
<p>'5 7'</p>
<p>&gt;&gt;&gt; lst</p>
<p>[10]</p>
<p>Section 40.4: Float formatting</p>
<p>&gt;&gt;&gt; '{0:.0f}'.format(42.12345)</p>
<p>'42'</p>
<p>&gt;&gt;&gt; '{0:.1f}'.format(42.12345)</p>
<p>'42.1'</p>
<p>&gt;&gt;&gt; '{0:.3f}'.format(42.12345)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 234</p>
<p><span id="_42_123" class="anchor"></span>'42.123'</p>
<p>&gt;&gt;&gt; '{0:.5f}'.format(42.12345)</p>
<p>'42.12345'</p>
<p>&gt;&gt;&gt; '{0:.7f}'.format(42.12345)</p>
<p>'42.1234500'</p>
<p>Same hold for other way of referencing:</p>
<p>&gt;&gt;&gt; '{:.3f}'.format(42.12345)</p>
<p>'42.123'</p>
<p>&gt;&gt;&gt; '{answer:.3f}'.format(answer=42.12345)</p>
<p>'42.123'</p>
<p><a href="https://en.wikipedia.org/wiki/Scientific_notation">Floating
point numbers can also be formatted in scientific notation</a> or as
percentages:</p>
<p>&gt;&gt;&gt; '{0:.3e}'.format(42.12345)</p>
<p>'4.212e+01'</p>
<p>&gt;&gt;&gt; '{0:.0%}'.format(42.12345)</p>
<p>'4212%'</p>
<p>You can also combine the {0} and {name} notations. This is especially
useful when you want to round all variables</p>
<p>to a pre-specified number of decimals <em>with 1
declaration</em>:</p>
<p>&gt;&gt;&gt; s = 'Hello'</p>
<p>&gt;&gt;&gt; a, b, c = 1.12345, 2.34567, 34.5678</p>
<p>&gt;&gt;&gt; digits = 2</p>
<p>&gt;&gt;&gt; '{0}! {1:.{n}f}, {2:.{n}f}, {3:.{n}f}'.format(s, a, b,
c, n=digits) 'Hello! 1.12, 2.35, 34.57'</p>
<p>Section 40.5: Named placeholders</p>
<p>Format strings may contain named placeholders that are interpolated
using keyword arguments to format.</p>
<p>Using a dictionary (Python 2.x)</p>
<p>&gt;&gt;&gt; data = {'first': 'Hodor', 'last': 'Hodor!'}</p>
<p>&gt;&gt;&gt; '{first} {last}'.format(**data)</p>
<p>'Hodor Hodor!'</p>
<p>Using a dictionary (Python 3.2+)</p>
<p>&gt;&gt;&gt; '{first} {last}'.format_map(data)</p>
<p>'Hodor Hodor!'</p>
<p><a
href="https://docs.python.org/3/library/stdtypes.html?highlight=format_map#str.format_map">str.format_map
allows to use dictionaries without having to unpack them first. Also the
class of</a> data (which might</p>
<p>be a custom type) is used instead of a newly filled dict.</p>
<p>Without a dictionary:</p>
<p>&gt;&gt;&gt; '{first} {last}'.format(first='Hodor', last='Hodor!')
'Hodor Hodor!'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 235</p>
<p><span id="Section_40_6__String_formatting"
class="anchor"></span>Section 40.6: String formatting with datetime</p>
<p>Any class can configure its own string formatting syntax through the
__format__ method. A type in the standard</p>
<p>Python library that makes handy use of this is the datetime type,
where one can use strftime-like formatting</p>
<p>codes directly within str.format:</p>
<p>&gt;&gt;&gt; <strong>from</strong> datetime <strong>import</strong>
datetime</p>
<p>&gt;&gt;&gt; 'North America: {dt:%m/%d/%Y}. ISO:
{dt:%Y-%m-%d}.'.format(dt=datetime.now()) 'North America: 07/21/2016.
ISO: 2016-07-21.'</p>
<p><a
href="https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior">A
full list of list of datetime formatters can be found in the official
documentation.</a></p>
<p>Section 40.7: Formatting Numerical Values</p>
<p>The .format() method can interpret a number in different formats,
such as:</p>
<p>&gt;&gt;&gt; '{:c}'.format(65) <em># Unicode character</em></p>
<p>'A'</p>
<p>&gt;&gt;&gt; '{:d}'.format(0x0a) <em># base 10</em></p>
<p>'10'</p>
<p><em>&gt;&gt;&gt; '{:n}'.format(0x0a)</em> # base 10 using current
locale for separators <em>'10'</em></p>
<p>Format integers to different bases (hex, oct, binary)</p>
<p><em>&gt;&gt;&gt; '{0:x}'.format(10)</em> # base 16, lowercase -
Hexadecimal <em>'a'</em></p>
<p><em>&gt;&gt;&gt; '{0:X}'.format(10)</em> # base 16, uppercase -
Hexadecimal <em>'A'</em></p>
<p>&gt;&gt;&gt; '{:o}'.format(10) <em># base 8 - Octal</em></p>
<p>'12'</p>
<p>&gt;&gt;&gt; '{:b}'.format(10) <em># base 2 - Binary</em></p>
<p>'1010'</p>
<p>&gt;&gt;&gt; '{0:#b}, {0:#o}, {0:#x}'.format(42) <em># With
prefix</em> '0b101010, 0o52, 0x2a'</p>
<p>&gt;&gt;&gt; '8 bit: {0:08b}; Three bytes: {0:06x}'.format(42) <em>#
Add zero padding</em> '8 bit: 00101010; Three bytes: 00002a'</p>
<p>Use formatting to convert an RGB float tuple to a color hex
string:</p>
<p>&gt;&gt;&gt; r, g, b = (1.0, 0.4, 0.0)</p>
<p>&gt;&gt;&gt; '#{:02X}{:02X}{:02X}'.format(int(255 * r), int(255 * g),
int(255 * b)) '#FF6600'</p>
<p>Only integers can be converted:</p>
<p>&gt;&gt;&gt; '{:x}'.format(42.0)</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>ValueError: Unknown format code 'x' <strong>for</strong> object of
type 'float'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 236</p>
<p><span id="Section_40_8__Nested_formatting"
class="anchor"></span>Section 40.8: Nested formatting</p>
<p>Some formats can take additional parameters, such as the width of the
formatted string, or the alignment:</p>
<p>&gt;&gt;&gt; '{:.&gt;10}'.format('foo')</p>
<p>'.......foo'</p>
<p>Those can also be provided as parameters to format by nesting more {}
inside the {}:</p>
<p>&gt;&gt;&gt; '{:.&gt;{}}'.format('foo', 10)</p>
<p>'.......foo'</p>
<p>'{:{}{}{}}'.format('foo', '*', '^', 15)</p>
<p>'******foo******'</p>
<p>In the latter example, the format string '{:{}{}{}}' is modified to
'{:*^15}' (i.e. "center and pad with * to total</p>
<p>length of 15") before applying it to the actual string 'foo' to be
formatted that way.</p>
<p>This can be useful in cases when parameters are not known beforehand,
for instances when aligning tabular data:</p>
<p>&gt;&gt;&gt; data = ["a", "bbbbbbb", "ccc"]</p>
<p>&gt;&gt;&gt; m = max(map(len, data))</p>
<p>&gt;&gt;&gt; <strong>for</strong> d <strong>in</strong> data:</p>
<p>... <strong>print</strong>('{:&gt;{}}'.format(d, m))</p>
<p>a</p>
<p>bbbbbbb</p>
<p>ccc</p>
<p>Section 40.9: Format using Getitem and Getattr</p>
<p>Any data structure that supports __getitem__ can have their nested
structure formatted:</p>
<p>person = {'first': 'Arthur', 'last': 'Dent'}</p>
<p>'{p[first]} {p[last]}'.format(p=person)</p>
<p># 'Arthur Dent'</p>
<p>Object attributes can be accessed using getattr():</p>
<p><strong>class</strong> Person(object):</p>
<p>first = 'Zaphod'</p>
<p>last = 'Beeblebrox'</p>
<p>'{p.first} {p.last}'.format(p=Person())</p>
<p># 'Zaphod Beeblebrox'</p>
<p>Section 40.10: Padding and truncating strings, combined</p>
<p>Say you want to print variables in a 3 character column.</p>
<p>Note: doubling { and } escapes them.</p>
<p>s = """</p>
<p>pad</p>
<p>{{:3}} :{a:3}:</p>
<p>truncate</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 237</p>
<p><span id="____3________________e__3" class="anchor"></span>{{:.3}}
:{e:.3}:</p>
<p>combined</p>
<p>{{:&gt;3.3}} :{a:&gt;3.3}:</p>
<p>{{:3.3}} :{a:3.3}:</p>
<p>{{:3.3}} :{c:3.3}:</p>
<p>{{:3.3}} :{e:3.3}:</p>
<p>"""</p>
<p><strong>print</strong> (s.format(a="1"*1, c="3"*3, e="5"*5))</p>
<p>Output:</p>
<p>pad</p>
<p>{:3} :1 :</p>
<p>truncate</p>
<p>{:.3} :555:</p>
<p>combined</p>
<p>{:&gt;3.3} : 1:</p>
<p>{:3.3} :1 :</p>
<p>{:3.3} :333:</p>
<p>{:3.3} :555:</p>
<p>Section 40.11: Custom formatting for a class</p>
<p>Note:</p>
<p>Everything below applies to the str.format method, as well as the
format function. In the text below, the two are interchangeable.</p>
<p>For every value which is passed to the format function, Python looks
for a __format__ method for that argument.</p>
<p>Your own custom class can therefore have their own __format__ method
to determine how the format function will</p>
<p>display and format your class and it's attributes.</p>
<p>This is different than the __str__ method, as in the __format__
method you can take into account the formatting language, including
alignment, field width etc, and even (if you wish) implement your own
format specifiers, and</p>
<p>your own formatting language extensions.<a
href="https://docs.python.org/2.7/library/string.html#formatspec">1</a></p>
<p>object.__format__(self, format_spec)</p>
<p>For example:</p>
<p># Example in Python 2 - but can be easily applied to Python 3</p>
<p><strong>class</strong> Example(object):</p>
<p><strong>def</strong> __init__(self,a,b,c):</p>
<p>self.a, self.b, self.c = a,b,c</p>
<p><strong>def</strong> __format__(self, format_spec):</p>
<p>""" Implement special semantics for the 's' format specifier """
<em># Reject anything that isn't an s</em></p>
<p><strong>if</strong> format_spec[-1] != 's':</p>
<p><strong>raise</strong> ValueError('{} format specifier not understood
for this object',</p>
<p>format_spec[:-1])</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 238</p>
<p># Output in this example will be (&lt;a&gt;,&lt;b&gt;,&lt;c&gt;)</p>
<p>raw = "(" + ",".join([str(self.a), str(self.b), str(self.c)]) +
")"</p>
<p># Honor the format language by using the inbuilt string format #
Since we know the original format_spec ends in an 's' # we can take
advantage of the str.format method with a # string argument we
constructed above</p>
<p><strong>return</strong> "{r:{f}}".format( r=raw, f=format_spec )</p>
<p>inst = Example(1,2,3)</p>
<p><strong>print</strong> "{0:&gt;20s}".format( inst )</p>
<p># out : (1,2,3)</p>
<p># Note how the right align and field width of 20 has been
honored.</p>
<p>Note:</p>
<p>If your custom class does not have a custom __format__ method and an
instance of the class is passed to</p>
<p>the format function, <strong>Python2</strong> will always use the
return value of the __str__ method or __repr__</p>
<p>method to determine what to print (and if neither exist then the
default repr will be used), and you will</p>
<p>need to use the s format specifier to format this. With
<strong>Python3</strong>, to pass your custom class to the format</p>
<p>function, you will need define __format__ method on your custom
class.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 239</p>
<p><span id="Chapter_41__String_Methods_1" class="anchor"></span>Chapter
41: String Methods</p>
<p>Section 41.1: Changing the capitalization of a string</p>
<p>Python's string type provides many functions that act on the
capitalization of a string. These include:</p>
<p>str.casefold</p>
<p>str.upper</p>
<p>str.lower</p>
<p>str.capitalize</p>
<p>str.title</p>
<p>str.swapcase</p>
<p>With unicode strings (the default in Python 3), these operations are
<strong>not</strong> 1:1 mappings or reversible. Most of these
operations are intended for display purposes, rather than
normalization.</p>
<p>Python 3.x Version ≥ 3.3</p>
<p>str.casefold()</p>
<p>str.casefold creates a lowercase string that is suitable for case
insensitive comparisons. This is more aggressive</p>
<p>than str.lower and may modify strings that are already in lowercase
or cause strings to grow in length, and is not intended for display
purposes.</p>
<p>"XßΣ".casefold()</p>
<p># 'xss<em>σ</em>'</p>
<p>"XßΣ".lower()</p>
<p># 'x<em>ßς</em>'</p>
<p>The transformations that take place under casefolding are defined by
the Unicode Consortium in the CaseFolding.txt file on their website.</p>
<p>str.upper()</p>
<p>str.upper takes every character in a string and converts it to its
uppercase equivalent, for example:</p>
<p>"This is a 'string'.".upper()</p>
<p># "THIS IS A 'STRING'."</p>
<p>str.lower()</p>
<p>str.lower does the opposite; it takes every character in a string and
converts it to its lowercase equivalent:</p>
<p>"This IS a 'string'.".lower()</p>
<p># "this is a 'string'."</p>
<p>str.capitalize()</p>
<p>str.capitalize returns a capitalized version of the string, that is,
it makes the first character have upper case and</p>
<p>the rest lower:</p>
<p><em>"this Is A 'String'.".capitalize()</em> # Capitalizes the first
character and lowercases all others</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 240</p>
<p><span id="___This_is_a__string" class="anchor"></span># "This is a
'string'."</p>
<p>str.title()</p>
<p>str.title returns the title cased version of the string, that is,
every letter in the beginning of a word is made upper case and all
others are made lower case:</p>
<p>"this Is a 'String'".title()</p>
<p># "This Is A 'String'"</p>
<p>str.swapcase()</p>
<p>str.swapcase returns a new string object in which all lower case
characters are swapped to upper case and all upper case characters to
lower:</p>
<p><em>"this iS A STRiNG".swapcase()</em> #Swaps case of each character
# "THIS Is a strIng"</p>
<p>Usage as str class methods</p>
<p>It is worth noting that these methods may be called either on string
objects (as shown above) or as a class method</p>
<p>of the str class (with an explicit call to str.upper, etc.)</p>
<p>str.upper("This is a 'string'")</p>
<p># "THIS IS A 'STRING'"</p>
<p>This is most useful when applying one of these methods to many
strings at once in say, a <em>map</em> function.</p>
<p>map(str.upper,["These","are","some","'strings'"])</p>
<p># ['THESE', 'ARE', 'SOME', "'STRINGS'"]</p>
<p>Section 41.2: str.translate: Translating characters in a string</p>
<p>Python supports a translate method on the str type which allows you
to specify the translation table (used for replacements) as well as any
characters which should be deleted in the process.</p>
<p>str.translate(table[, deletechars])</p>
<p>Parameter Description</p>
<p>table It is a lookup table that defines the mapping from one
character to another.</p>
<p>deletechars A list of characters which are to be removed from the
string.</p>
<p>The maketrans method (str.maketrans in Python 3 and string.maketrans
in Python 2) allows you to generate a</p>
<p>translation table.</p>
<p>&gt;&gt;&gt; translation_table = str.maketrans("aeiou", "12345")
&gt;&gt;&gt; my_string = "This is a string!"</p>
<p>&gt;&gt;&gt; translated = my_string.translate(translation_table)
'Th3s 3s 1 str3ng!'</p>
<p>The translate method returns a string which is a translated copy of
the original string.</p>
<p>You can set the table argument to None if you only need to delete
characters.</p>
<p>&gt;&gt;&gt; 'this syntax is very useful'.translate(None,
'aeiou')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 241</p>
<p><span id="_ths_syntx_s_vry_sfl" class="anchor"></span>'ths syntx s
vry sfl'</p>
<p>Section 41.3: str.format and f-strings: Format values into a</p>
<p>string</p>
<p>Python provides string interpolation and formatting functionality
through the str.format function, introduced in</p>
<p>version 2.6 and f-strings introduced in version 3.6.</p>
<p>Given the following variables:</p>
<p>i = 10</p>
<p>f = 1.5</p>
<p>s = "foo"</p>
<p>l = ['a', 1, 2]</p>
<p>d = {'a': 1, 2: 'foo'}</p>
<p>The following statements are all equivalent</p>
<p>"10 1.5 foo ['a', 1, 2] {'a': 1, 2: 'foo'}"</p>
<p>&gt;&gt;&gt; "{} {} {} {} {}".format(i, f, s, l, d)</p>
<p>&gt;&gt;&gt; str.format("{} {} {} {} {}", i, f, s, l, d)</p>
<p>&gt;&gt;&gt; "{0} {1} {2} {3} {4}".format(i, f, s, l, d)</p>
<p>&gt;&gt;&gt; "{0:d} {1:0.1f} {2} {3!r} {4!r}".format(i, f, s, l,
d)</p>
<p>&gt;&gt;&gt; "{i:d} {f:0.1f} {s} {l!r} {d!r}".format(i=i, f=f, s=s,
l=l, d=d)</p>
<p>&gt;&gt;&gt; f"{i} {f} {s} {l} {d}"</p>
<p>&gt;&gt;&gt; f"{i:d} {f:0.1f} {s} {l!r} {d!r}"</p>
<p>For reference, Python also supports C-style qualifiers for string
formatting. The examples below are equivalent to those above, but the
str.format versions are preferred due to benefits in flexibility,
consistency of notation, and</p>
<p>extensibility:</p>
<p>"%d %0.1f %s %r %r" % (i, f, s, l, d)</p>
<p>"%(i)d %(f)0.1f %(s)s %(l)r %(d)r" % dict(i=i, f=f, s=s, l=l,
d=d)</p>
<p>The braces uses for interpolation in str.format can also be numbered
to reduce duplication when formatting strings. For example, the
following are equivalent:</p>
<p>"I am from Australia. I love cupcakes from Australia!"</p>
<p>&gt;&gt;&gt; "I am from {}. I love cupcakes from
{}!".format("Australia", "Australia")</p>
<p>&gt;&gt;&gt; "I am from {0}. I love cupcakes from
{0}!".format("Australia")</p>
<p><a href="http://pyformat.info">While the official python
documentation is, as usual, thorough enough, pyformat.info has a great
set of examples</a> with detailed explanations.</p>
<p>Additionally, the { and } characters can be escaped by using double
brackets:</p>
<p>"{'a': 5, 'b': 6}"</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 242</p>
<p><span id="_____________________________for"
class="anchor"></span>&gt;&gt;&gt; "{{'{}': {}, '{}': {}}}".format("a",
5, "b", 6)</p>
<p>&gt;&gt;&gt; f"{{'{'a'}': {5}, '{'b'}': {6}}"</p>
<p>See String Formatting for additional information. str.format() <a
href="https://www.python.org/dev/peps/pep-3101/">was proposed in PEP
3101</a> <a href="https://www.python.org/dev/peps/pep-0498/">and
f-strings in PEP 498</a>.</p>
<p>Section 41.4: String module's useful constants</p>
<p>Python's string module provides constants for string related
operations. To use them, import the string module:</p>
<p>&gt;&gt;&gt; <strong>import</strong> string</p>
<p>string.ascii_letters :</p>
<p>Concatenation of ascii_lowercase and ascii_uppercase:</p>
<p>&gt;&gt;&gt; string.ascii_letters</p>
<p>'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</p>
<p>string.ascii_lowercase:</p>
<p>Contains all lower case ASCII characters:</p>
<p>&gt;&gt;&gt; string.ascii_lowercase</p>
<p>'abcdefghijklmnopqrstuvwxyz'</p>
<p>string.ascii_uppercase:</p>
<p>Contains all upper case ASCII characters:</p>
<p>&gt;&gt;&gt; string.ascii_uppercase</p>
<p>'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</p>
<p>string.digits:</p>
<p>Contains all decimal digit characters:</p>
<p>&gt;&gt;&gt; string.digits</p>
<p>'0123456789'</p>
<p>string.hexdigits:</p>
<p>Contains all hex digit characters:</p>
<p>&gt;&gt;&gt; string.hexdigits</p>
<p>'0123456789abcdefABCDEF'</p>
<p>string.octaldigits:</p>
<p>Contains all octal digit characters:</p>
<p>&gt;&gt;&gt; string.octaldigits</p>
<p>'01234567'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 243</p>
<p><span id="string_punctuation"
class="anchor"></span>string.punctuation:</p>
<p>Contains all characters which are considered punctuation in the C
locale:</p>
<p>&gt;&gt;&gt; string.punctuation</p>
<p>'!"#$%&amp;<strong>\'</strong>()*+,-./:;&lt;=&gt;?@[<strong>\\</strong>]^_`{|}~'</p>
<p>string.whitespace:</p>
<p>Contains all ASCII characters considered whitespace:</p>
<p>&gt;&gt;&gt; string.whitespace</p>
<p><strong>'</strong>
\t\n\r\x<strong>0b</strong>\x<strong>0c'</strong></p>
<p>In script mode, <strong>print</strong>(string.whitespace) will print
the actual characters, use str to get the string returned above.</p>
<p>string.printable:</p>
<p>Contains all characters which are considered printable; a combination
of string.digits, string.ascii_letters,</p>
<p>string.punctuation, and string.whitespace.</p>
<p>&gt;&gt;&gt; string.printable</p>
<p>'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;<strong>\'</strong>()*+,-./:;&lt;=&gt;?@[<strong>\\</strong>]^_`{|}~
<strong>\t\n\r\x</strong>0b<strong>\x</strong>0c'</p>
<p>Section 41.5: Stripping unwanted leading/trailing characters</p>
<p>from a string</p>
<p>Three methods are provided that offer the ability to strip leading
and trailing characters from a string: str.strip, str.rstrip and
str.lstrip. All three methods have the same signature and all three
return a new string object</p>
<p>with unwanted characters removed.</p>
<p>str.strip([chars])</p>
<p>str.strip acts on a given string and removes (strips) any leading or
trailing characters contained in the argument</p>
<p>chars; if chars is not supplied or is None, all white space
characters are removed by default. For example:</p>
<p>&gt;&gt;&gt; " a line with leading and trailing space ".strip() 'a
line with leading and trailing space'</p>
<p>If chars is supplied, all characters contained in it are removed from
the string, which is returned. For example:</p>
<p>&gt;&gt;&gt; "&gt;&gt;&gt; a Python prompt".strip('&gt; ') <em>#
strips '&gt;' character and space character</em> 'a Python prompt'</p>
<p>str.rstrip([chars]) and str.lstrip([chars])</p>
<p>These methods have similar semantics and arguments with str.strip(),
their difference lies in the direction from</p>
<p>which they start. str.rstrip() starts from the end of the string
while str.lstrip() splits from the start of the string.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 244</p>
<p><span id="For_example__using_str_rstrip" class="anchor"></span>For
example, using str.rstrip:</p>
<p>&gt;&gt;&gt; " spacious string ".rstrip()</p>
<p>' spacious string'</p>
<p>While, using str.lstrip:</p>
<p>&gt;&gt;&gt; " spacious string ".rstrip()</p>
<p>'spacious string '</p>
<p>Section 41.6: Reversing a string</p>
<p>A string can reversed using the built-in reversed() function, which
takes a string and returns an iterator in reverse order.</p>
<p>&gt;&gt;&gt; reversed('hello')</p>
<p>&gt;&gt;&gt; [char <strong>for</strong> char <strong>in</strong>
reversed('hello')]</p>
<p>['o', 'l', 'l', 'e', 'h']</p>
<p>reversed() can be wrapped in a call to ''.join() to make a string
from the iterator.</p>
<p>&gt;&gt;&gt; ''.join(reversed('hello'))</p>
<p>'olleh'</p>
<p>While using reversed() might be more readable to uninitiated Python
users, using extended slicing with a step of-1 is faster and more
concise. Here , try to implement it as function:</p>
<p>&gt;&gt;&gt; <strong>def</strong> reversed_string(main_string):</p>
<p>... <strong>return</strong> main_string[::-1]</p>
<p>...</p>
<p>&gt;&gt;&gt; reversed_string('hello')</p>
<p>'olleh'</p>
<p>Section 41.7: Split a string based on a delimiter into a list of</p>
<p>strings</p>
<p>str.split(sep=None, maxsplit=-1)</p>
<p>str.split takes a string and returns a list of substrings of the
original string. The behavior differs depending on whether the sep
argument is provided or omitted.</p>
<p>If sep isn't provided, or is None, then the splitting takes place
wherever there is whitespace. However, leading and trailing whitespace
is ignored, and multiple consecutive whitespace characters are treated
the same as a single</p>
<p>whitespace character:</p>
<p>&gt;&gt;&gt; "This is a sentence.".split()</p>
<p>['This', 'is', 'a', 'sentence.']</p>
<p>&gt;&gt;&gt; " This is a sentence. ".split()</p>
<p>['This', 'is', 'a', 'sentence.']</p>
<p>&gt;&gt;&gt; " ".split()</p>
<p>[]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 245</p>
<p><span id="The_sep_parameter_can_be_used_to" class="anchor"></span>The
sep parameter can be used to define a delimiter string. The original
string is split where the delimiter string occurs, and the delimiter
itself is discarded. Multiple consecutive delimiters are <em>not</em>
treated the same as a single</p>
<p>occurrence, but rather cause empty strings to be created.</p>
<p>&gt;&gt;&gt; "This is a sentence.".split(' ')</p>
<p>['This', 'is', 'a', 'sentence.']</p>
<p>&gt;&gt;&gt; "Earth,Stars,Sun,Moon".split(',')</p>
<p>['Earth', 'Stars', 'Sun', 'Moon']</p>
<p>&gt;&gt;&gt; " This is a sentence. ".split(' ')</p>
<p>['', 'This', 'is', '', '', '', 'a', 'sentence.', '', '']</p>
<p>&gt;&gt;&gt; "This is a sentence.".split('e')</p>
<p>['This is a s', 'nt', 'nc', '.']</p>
<p>&gt;&gt;&gt; "This is a sentence.".split('en')</p>
<p>['This is a s', 't', 'ce.']</p>
<p>The default is to split on <em>every</em> occurrence of the
delimiter, however the maxsplit parameter limits the number of</p>
<p>splittings that occur. The default value of -1 means no limit:</p>
<p>&gt;&gt;&gt; "This is a sentence.".split('e', maxsplit=0)</p>
<p>['This is a sentence.']</p>
<p>&gt;&gt;&gt; "This is a sentence.".split('e', maxsplit=1)</p>
<p>['This is a s', 'ntence.']</p>
<p>&gt;&gt;&gt; "This is a sentence.".split('e', maxsplit=2)</p>
<p>['This is a s', 'nt', 'nce.']</p>
<p>&gt;&gt;&gt; "This is a sentence.".split('e', maxsplit=-1)</p>
<p>['This is a s', 'nt', 'nc', '.']</p>
<p>str.rsplit(sep=None, maxsplit=-1)</p>
<p>str.rsplit ("right split") differs from str.split ("left split") when
maxsplit is specified. The splitting starts at the</p>
<p>end of the string rather than at the beginning:</p>
<p>&gt;&gt;&gt; "This is a sentence.".rsplit('e', maxsplit=1)</p>
<p>['This is a sentenc', '.']</p>
<p>&gt;&gt;&gt; "This is a sentence.".rsplit('e', maxsplit=2)</p>
<p>['This is a sent', 'nc', '.']</p>
<p><strong>Note</strong>: Python specifies the maximum number of
<em>splits</em> performed, while most other programming languages</p>
<p>specify the maximum number of <em>substrings</em> created. This may
create confusion when porting or comparing code.</p>
<p>Section 41.8: Replace all occurrences of one substring with</p>
<p>another substring</p>
<p>Python's str type also has a method for replacing occurrences of one
sub-string with another sub-string in a given</p>
<p>string. For more demanding cases, one can use re.sub.</p>
<p>str.replace(old, new[, count]):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 246</p>
<p><span id="str_replace_takes_two_arguments"
class="anchor"></span>str.replace takes two arguments old and new
containing the old sub-string which is to be replaced by the new
sub-string. The optional argument count specifies the number of
replacements to be made:</p>
<p>For example, in order to replace 'foo' with 'spam' in the following
string, we can call str.replace with old = 'foo' and new = 'spam':</p>
<p>&gt;&gt;&gt; "Make sure to foo your sentence.".replace('foo', 'spam')
"Make sure to spam your sentence."</p>
<p>If the given string contains multiple examples that match the old
argument, <strong>all</strong> occurrences are replaced with the</p>
<p>value supplied in new:</p>
<p>&gt;&gt;&gt; "It can foo multiple examples of foo if you
want.".replace('foo', 'spam') "It can spam multiple examples of spam if
you want."</p>
<p>unless, of course, we supply a value for count. In this case count
occurrences are going to get replaced:</p>
<p>&gt;&gt;&gt; """It can foo multiple examples of foo if you want,
<strong>\</strong> ... or you can limit the foo with the third
argument.""".replace('foo', 'spam', 1) 'It can spam multiple examples of
foo if you want, or you can limit the foo with the third argument.'</p>
<p>Section 41.9: Testing what a string is composed of</p>
<p>Python's str type also features a number of methods that can be used
to evaluate the contents of a string. These are str.isalpha,
str.isdigit, str.isalnum, str.isspace. Capitalization can be tested with
str.isupper,</p>
<p>str.islower and str.istitle.</p>
<p>str.isalpha</p>
<p>str.isalpha takes no arguments and returns True if the all characters
in a given string are alphabetic, for example:</p>
<p>&gt;&gt;&gt; "Hello World".isalpha() <em># contains a space</em></p>
<p>False</p>
<p>&gt;&gt;&gt; "Hello2World".isalpha() <em># contains a number</em></p>
<p>False</p>
<p>&gt;&gt;&gt; "HelloWorld!".isalpha() <em># contains
punctuation</em></p>
<p>False</p>
<p>&gt;&gt;&gt; "HelloWorld".isalpha()</p>
<p>True</p>
<p>As an edge case, the empty string evaluates to False when used with
"".isalpha().</p>
<p>str.isupper, str.islower, str.istitle</p>
<p>These methods test the capitalization in a given string.</p>
<p>str.isupper is a method that returns True if all characters in a
given string are uppercase and False otherwise.</p>
<p>&gt;&gt;&gt; "HeLLO WORLD".isupper()</p>
<p>False</p>
<p>&gt;&gt;&gt; "HELLO WORLD".isupper()</p>
<p>True</p>
<p>&gt;&gt;&gt; "".isupper()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 247</p>
<p>False</p>
<p>Conversely, str.islower is a method that returns True if all
characters in a given string are lowercase and False otherwise.</p>
<p>&gt;&gt;&gt; "Hello world".islower()</p>
<p>False</p>
<p>&gt;&gt;&gt; "hello world".islower()</p>
<p>True</p>
<p>&gt;&gt;&gt; "".islower()</p>
<p>False</p>
<p>str.istitle returns True if the given string is title cased; that is,
every word begins with an uppercase character followed by lowercase
characters.</p>
<p>&gt;&gt;&gt; "hello world".istitle()</p>
<p>False</p>
<p>&gt;&gt;&gt; "Hello world".istitle()</p>
<p>False</p>
<p>&gt;&gt;&gt; "Hello World".istitle()</p>
<p>True</p>
<p>&gt;&gt;&gt; "".istitle()</p>
<p>False</p>
<p>str.isdecimal, str.isdigit, str.isnumeric</p>
<p>str.isdecimal returns whether the string is a sequence of decimal
digits, suitable for representing a decimal</p>
<p>number.</p>
<p>str.isdigit includes digits not in a form suitable for representing a
decimal number, such as superscript digits.</p>
<p>str.isnumeric includes any number values, even if not digits, such as
values outside the range 0-9.</p>
<p>isdecimal isdigit isnumeric</p>
<p>12345 True True True</p>
<p>?2??5 True True True</p>
<p>?²³????? False True True</p>
<p>?? False False True</p>
<p>Five False False False</p>
<p>Bytestrings (bytes in Python 3, str in Python 2), only support
isdigit, which only checks for basic ASCII digits.</p>
<p>As with str.isalpha, the empty string evaluates to False.</p>
<p>str.isalnum</p>
<p>This is a combination of str.isalpha and str.isnumeric, specifically
it evaluates to True if all characters in the</p>
<p>given string are <strong>alphanumeric</strong>, that is, they consist
of alphabetic <em>or</em> numeric characters:</p>
<p>&gt;&gt;&gt; "Hello2World".isalnum()</p>
<p>True</p>
<p>&gt;&gt;&gt; "HelloWorld".isalnum()</p>
<p>True</p>
<p>&gt;&gt;&gt; "2016".isalnum()</p>
<p>True</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 248</p>
<p><span id="_____Hello_World__isalnum______c"
class="anchor"></span>&gt;&gt;&gt; "Hello World".isalnum() <em>#
contains whitespace</em></p>
<p>False</p>
<p>str.isspace</p>
<p>Evaluates to True if the string contains only whitespace
characters.</p>
<p>&gt;&gt;&gt; "<strong>\t\r\n</strong>".isspace()</p>
<p>True</p>
<p>&gt;&gt;&gt; " ".isspace()</p>
<p>True</p>
<p>Sometimes a string looks “empty” but we don't know whether it's
because it contains just whitespace or no character at all</p>
<p>&gt;&gt;&gt; "".isspace()</p>
<p>False</p>
<p>To cover this case we need an additional test</p>
<p>&gt;&gt;&gt; my_str = ''</p>
<p>&gt;&gt;&gt; my_str.isspace()</p>
<p>False</p>
<p>&gt;&gt;&gt; my_str.isspace() <strong>or not</strong> my_str</p>
<p>True</p>
<p>But the shortest way to test if a string is empty or just contains
whitespace characters is to use strip(with no arguments it removes all
leading and trailing whitespace characters)</p>
<p>&gt;&gt;&gt; <strong>not</strong> my_str.strip()</p>
<p>True</p>
<p>Section 41.10: String Contains</p>
<p>Python makes it extremely intuitive to check if a string contains a
given substring. Just use the in operator:</p>
<p>&gt;&gt;&gt; "foo" <strong>in</strong> "foo.baz.bar"</p>
<p>True</p>
<p>Note: testing an empty string will always result in True:</p>
<p>&gt;&gt;&gt; "" <strong>in</strong> "test"</p>
<p>True</p>
<p>Section 41.11: Join a list of strings into one string</p>
<p>A string can be used as a separator to join a list of strings
together into a single string using the join() method. For</p>
<p>example you can create a string where each element in a list is
separated by a space.</p>
<p>&gt;&gt;&gt; " ".join(["once","upon","a","time"])</p>
<p>"once upon a time"</p>
<p>The following example separates the string elements with three
hyphens.</p>
<p>&gt;&gt;&gt; "---".join(["once", "upon", "a", "time"])</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 249</p>
<p><span id="_once___upon___a___time"
class="anchor"></span>"once---upon---a---time"</p>
<p>Section 41.12: Counting number of times a substring appears</p>
<p>in a string</p>
<p>One method is available for counting the number of occurrences of a
sub-string in another string, str.count.</p>
<p>str.count(sub[, start[, end]])</p>
<p>str.count returns an int indicating the number of non-overlapping
occurrences of the sub-string sub in another</p>
<p>string. The optional arguments start and end indicate the beginning
and the end in which the search will take place. By default start = 0
and end = len(str) meaning the whole string will be searched:</p>
<p>&gt;&gt;&gt; s = "She sells seashells by the seashore."</p>
<p>&gt;&gt;&gt; s.count("sh")</p>
<p>2</p>
<p>&gt;&gt;&gt; s.count("se")</p>
<p>3</p>
<p>&gt;&gt;&gt; s.count("sea")</p>
<p>2</p>
<p>&gt;&gt;&gt; s.count("seashells")</p>
<p>1</p>
<p>By specifying a different value for start, end we can get a more
localized search and count, for example, if start is</p>
<p>equal to 13 the call to:</p>
<p>&gt;&gt;&gt; s.count("sea", start)</p>
<p>1</p>
<p>is equivalent to:</p>
<p>&gt;&gt;&gt; t = s[start:]</p>
<p>&gt;&gt;&gt; t.count("sea")</p>
<p>1</p>
<p>Section 41.13: Case insensitive string comparisons</p>
<p>Comparing string in a case insensitive way seems like something
that's trivial, but it's not. This section only considers unicode
strings (the default in Python 3). Note that Python 2 may have subtle
weaknesses relative to</p>
<p>Python 3 - the later's unicode handling is much more complete.</p>
<p>The first thing to note it that case-removing conversions in unicode
aren't trivial. There is text for which</p>
<p>text.lower() != text.upper().lower(), such as "ß":</p>
<p>&gt;&gt;&gt; "ß".lower()</p>
<p>'ß'</p>
<p>&gt;&gt;&gt; "ß".upper().lower()</p>
<p>'ss'</p>
<p>But let's say you wanted to caselessly compare "BUSSE" and "Buße".
You probably also want to compare "BUSSE" and "BU E" equal - that's the
newer capital form. The recommended way is to use casefold:</p>
<p>Python 3.x Version ≥ 3.3</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 250</p>
<p><span id="____help_str_casefold" class="anchor"></span>&gt;&gt;&gt;
help(str.casefold)</p>
<p>"""</p>
<p>Help on method_descriptor:</p>
<p>casefold(...)</p>
<p>S.casefold() -&gt; str</p>
<p>Return a version of S suitable for caseless comparisons. """</p>
<p>Do not just use lower. If casefold is not available, doing
.upper().lower() helps (but only somewhat).</p>
<p>Then you should consider accents. If your font renderer is good, you
probably think "ê" == "ê" - but it doesn't:</p>
<p>&gt;&gt;&gt; "ê" == "ê"</p>
<p>False</p>
<p>This is because they are actually</p>
<p>&gt;&gt;&gt; <strong>import</strong> unicodedata</p>
<p>&gt;&gt;&gt; [unicodedata.name(char) <strong>for</strong> char
<strong>in</strong> "ê"]</p>
<p>['LATIN SMALL LETTER E WITH CIRCUMFLEX']</p>
<p>&gt;&gt;&gt; [unicodedata.name(char) <strong>for</strong> char
<strong>in</strong> "ê"]</p>
<p>['LATIN SMALL LETTER E', 'COMBINING CIRCUMFLEX ACCENT']</p>
<p>The simplest way to deal with this is unicodedata.normalize. You
probably want to use <strong>NFKD</strong> normalization, but</p>
<p>feel free to check the documentation. Then one does</p>
<p>&gt;&gt;&gt; unicodedata.normalize("NFKD", "ê") ==
unicodedata.normalize("NFKD", "ê") True</p>
<p>To finish up, here this is expressed in functions:</p>
<p><strong>import</strong> unicodedata</p>
<p><strong>def</strong> normalize_caseless(text):</p>
<p><strong>return</strong> unicodedata.normalize("NFKD",
text.casefold())</p>
<p><strong>def</strong> caseless_equal(left, right):</p>
<p><strong>return</strong> normalize_caseless(left) ==
normalize_caseless(right)</p>
<p>Section 41.14: Justify strings</p>
<p>Python provides functions for justifying strings, enabling text
padding to make aligning various strings much easier.</p>
<p>Below is an example of str.ljust and str.rjust:</p>
<p>interstates_lengths = {</p>
<p>5: (1381, 2222),</p>
<p>19: (63, 102),</p>
<p>40: (2555, 4112),</p>
<p>93: (189,305),</p>
<p>}</p>
<p><strong>for</strong> road, length <strong>in</strong>
interstates_lengths.items():</p>
<p>miles,kms = length</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 251</p>
<p><span id="print___________mi______km____fo"
class="anchor"></span><strong>print</strong>('{} -&gt; {} mi. ({}
km.)'.format(str(road).rjust(4), str(miles).ljust(4),</p>
<p>str(kms).ljust(4)))</p>
<p>40 -&gt; 2555 mi. (4112 km.)</p>
<p>19 -&gt; 63 mi. (102 km.)</p>
<p>5 -&gt; 1381 mi. (2222 km.)</p>
<p>93 -&gt; 189 mi. (305 km.)</p>
<p>ljust and rjust are very similar. Both have a width parameter and an
optional fillchar parameter. Any string</p>
<p>created by these functions is at least as long as the width parameter
that was passed into the function. If the string is longer than width
alread, it is not truncated. The fillchar argument, which defaults to
the space character ' '</p>
<p>must be a single character, not a multicharacter string.</p>
<p>The ljust function pads the end of the string it is called on with
the fillchar until it is width characters long. The</p>
<p>rjust function pads the beginning of the string in a similar fashion.
Therefore, the l and r in the names of these</p>
<p>functions refer to the side that the original string, <em>not the
fillchar</em>, is positioned in the output string.</p>
<p>Section 41.15: Test the starting and ending characters of a</p>
<p>string</p>
<p>In order to test the beginning and ending of a given string in
Python, one can use the methods str.startswith()</p>
<p>and str.endswith().</p>
<p>str.startswith(prefix[, start[, end]])</p>
<p>As its name implies, str.startswith is used to test whether a given
string starts with the given characters in prefix .</p>
<p>&gt;&gt;&gt; s = "This is a test string"</p>
<p>&gt;&gt;&gt; s.startswith("T")</p>
<p>True</p>
<p>&gt;&gt;&gt; s.startswith("Thi")</p>
<p>True</p>
<p>&gt;&gt;&gt; s.startswith("thi")</p>
<p>False</p>
<p>The optional arguments start and end specify the start and end points
from which the testing will start and finish.</p>
<p>In the following example, by specifying a start value of 2 our string
will be searched from position 2 and afterwards:</p>
<p>&gt;&gt;&gt; s.startswith("is", 2)</p>
<p>True</p>
<p>This yields True since s[2] == 'i' and s[3] == 's'.</p>
<p>You can also use a tuple to check if it starts with any of a set of
strings</p>
<p>&gt;&gt;&gt; s.startswith(('This', 'That'))</p>
<p>True</p>
<p>&gt;&gt;&gt; s.startswith(('ab', 'bc'))</p>
<p>False</p>
<p>str.endswith(prefix[, start[, end]])</p>
<p>str.endswith is exactly similar to str.startswith with the only
difference being that it searches for ending characters and not starting
characters. For example, to test if a string ends in a full stop, one
could write:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 252</p>
<p><span id="____s____this_ends_in_a_full_sto"
class="anchor"></span>&gt;&gt;&gt; s = "this ends in a full stop."</p>
<p>&gt;&gt;&gt; s.endswith('.')</p>
<p>True</p>
<p>&gt;&gt;&gt; s.endswith('!')</p>
<p>False</p>
<p>as with startswith more than one characters can used as the ending
sequence:</p>
<p>&gt;&gt;&gt; s.endswith('stop.')</p>
<p>True</p>
<p>&gt;&gt;&gt; s.endswith('Stop.')</p>
<p>False</p>
<p>You can also use a tuple to check if it ends with any of a set of
strings</p>
<p>&gt;&gt;&gt; s.endswith(('.', 'something'))</p>
<p>True</p>
<p>&gt;&gt;&gt; s.endswith(('ab', 'bc'))</p>
<p>False</p>
<p>Section 41.16: Conversion between str or bytes data and</p>
<p>unicode characters</p>
<p>The contents of files and network messages may represent encoded
characters. They often need to be converted to</p>
<p>unicode for proper display.</p>
<p>In Python 2, you may need to convert str data to Unicode characters.
The default ('', "", etc.) is an ASCII string, with</p>
<p>any values outside of ASCII range displayed as escaped values.
Unicode strings are u'' (or u"", etc.).</p>
<p>Python 2.x Version ≥ 2.3</p>
<p># You get "<em>©</em> abc" encoded in UTF-8 from a file, network, or
other data source</p>
<p><em>s = '<strong>\x</strong>c2<strong>\x</strong>a9 abc'</em> # s is
a byte array, not a string of characters</p>
<p># Doesn't know the original was UTF-8</p>
<p># Default form of string literals in Python 2</p>
<p><em>s[0]</em> # '\xc2' - meaningless byte (without context such as an
encoding) <em>type(s)</em> # str - even though it's not a useful one w/o
having a known encoding</p>
<p>u = s.decode('utf-8') <em># u'\xa9 abc'</em></p>
<p># Now we have a Unicode string, which can be read as UTF-8 and
printed</p>
<p>properly</p>
<p># In Python 2, Unicode string literals need a leading u # str.decode
converts a string which may contain escaped bytes to a Unicode</p>
<p>string</p>
<p><em>u[0]</em> # u'\xa9' - Unicode Character 'COPYRIGHT SIGN' (U+00A9)
'<em>©</em>' <em>type(u)</em> # unicode</p>
<p>u.encode('utf-8') <em># '\xc2\xa9 abc'</em></p>
<p># unicode.encode produces a string with escaped bytes for non-ASCII
characters</p>
<p>In Python 3 you may need to convert arrays of bytes (referred to as a
'byte literal') to strings of Unicode characters. The default is now a
Unicode string, and bytestring literals must now be entered as b'', b"",
etc. A byte literal will</p>
<p>return True to isinstance(some_val, byte), assuming some_val to be a
string that might be encoded as bytes.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p># You get from file or network "<em>©</em> abc" encoded in UTF-8</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 253</p>
<p><em>s = b'<strong>\x</strong>c2<strong>\x</strong>a9 abc'</em> # s is
a byte array, not characters</p>
<p># In Python 3, the default string literal is Unicode; byte array
literals need a</p>
<p>leading b</p>
<p><em>s[0]</em> # b'\xc2' - meaningless byte (without context such as
an encoding) <em>type(s)</em> # bytes - now that byte arrays are
explicit, Python can show that.</p>
<p><em>u = s.decode('utf-8')</em> # '<em>©</em> abc' on a Unicode
terminal</p>
<p># bytes.decode converts a byte array to a string (which will, in
Python 3, be</p>
<p>Unicode)</p>
<p><em>u[0]</em> # '\u00a9' - Unicode Character 'COPYRIGHT SIGN'
(U+00A9) '<em>©</em>' <em>type(u)</em> # str</p>
<p># The default string literal in Python 3 is UTF-8 Unicode</p>
<p>u.encode('utf-8') <em># b'\xc2\xa9 abc'</em></p>
<p># str.encode produces a byte array, showing ASCII-range bytes as
unescaped</p>
<p>characters.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 254</p>
<p><span id="Chapter_42__Using_loops_within_f_1"
class="anchor"></span>Chapter 42: Using loops within functions</p>
<p>In Python function will be returned as soon as execution hits
"return" statement.</p>
<p>Section 42.1: Return statement inside loop in a function</p>
<p>In this example, function will return as soon as value var has 1</p>
<p><strong>def</strong> func(params):</p>
<p><strong>for</strong> value <strong>in</strong> params:</p>
<p><strong>print</strong> ('Got value {}'.format(value))</p>
<p><strong>if</strong> value == 1:</p>
<p># Returns from function as soon as value is 1</p>
<p><strong>print</strong> ("&gt;&gt;&gt;&gt; Got 1")</p>
<p>return</p>
<p><strong>print</strong> ("Still looping")</p>
<p><strong>return</strong> "Couldn't find 1"</p>
<p>func([5, 3, 1, 2, 8, 9])</p>
<p>output</p>
<p>Got value 5</p>
<p>Still looping</p>
<p>Got value 3</p>
<p>Still looping</p>
<p>Got value 1</p>
<p>&gt;&gt;&gt;&gt; Got 1</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 255</p>
<p><span id="Chapter_43__Importing_modules_1"
class="anchor"></span>Chapter 43: Importing modules</p>
<p>Section 43.1: Importing a module</p>
<p>Use the <strong>import</strong> statement:</p>
<p>&gt;&gt;&gt; <strong>import</strong> random</p>
<p>&gt;&gt;&gt; <strong>print</strong>(random.randint(1, 10))</p>
<p>4</p>
<p><strong>import</strong> module will import a module and then allow
you to reference its objects -- values, functions and classes, for</p>
<p>example -- using the module.name syntax. In the above example, the
random module is imported, which contains the</p>
<p>randint function. So by importing random you can call randint with
random.randint.</p>
<p>You can import a module and assign it to a different name:</p>
<p>&gt;&gt;&gt; <strong>import</strong> random <strong>as</strong>
rn</p>
<p>&gt;&gt;&gt; <strong>print</strong>(rn.randint(1, 10))</p>
<p>4</p>
<p>If your python file main.py is in the same folder as custom.py. You
can import it like this:</p>
<p><strong>import</strong> custom</p>
<p>It is also possible to import a function from a module:</p>
<p>&gt;&gt;&gt; <strong>from</strong> math <strong>import</strong>
sin</p>
<p>&gt;&gt;&gt; sin(1)</p>
<p>0.8414709848078965</p>
<p>To import specific functions deeper down into a module, the dot
operator may be used <strong>only</strong> on the left side of the</p>
<p><strong>import</strong> keyword:</p>
<p><strong>from</strong> urllib.request <strong>import</strong>
urlopen</p>
<p>In python, we have two ways to call function from top level. One is
<strong>import</strong> and another is <strong>from</strong>. We should
use <strong>import</strong> when we have a possibility of name
collision. Suppose we have hello.py file and world.py files having
same</p>
<p>function named function. Then <strong>import</strong> statement will
work good.</p>
<p><strong>from</strong> hello <strong>import</strong> function</p>
<p><strong>from</strong> world <strong>import</strong> function</p>
<p><em>function()</em> #world's function will be invoked. Not
hello's</p>
<p>In general <strong>import</strong> will provide you a namespace.</p>
<p>import <strong>hello</strong></p>
<p>import <strong>world</strong></p>
<p><em>hello.function()</em> # exclusively hello's function will be
invoked <em>world.function()</em> # exclusively world's function will be
invoked</p>
<p>But if you are sure enough, in your whole project there is no way
having same function name you should use <strong>from</strong>
statement</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 256</p>
<p><span id="Multiple_imports_can_be_made_on"
class="anchor"></span>Multiple imports can be made on the same line:</p>
<p><em>&gt;&gt;&gt;</em> # Multiple modules</p>
<p>&gt;&gt;&gt; <strong>import</strong> time, sockets, random</p>
<p><em>&gt;&gt;&gt;</em> # Multiple functions</p>
<p>&gt;&gt;&gt; <strong>from</strong> math <strong>import</strong> sin,
cos, tan</p>
<p><em>&gt;&gt;&gt;</em> # Multiple constants</p>
<p>&gt;&gt;&gt; <strong>from</strong> math <strong>import</strong> pi,
e</p>
<p>&gt;&gt;&gt; <strong>print</strong>(pi)</p>
<p>3.141592653589793</p>
<p>&gt;&gt;&gt; <strong>print</strong>(cos(45))</p>
<p>0.5253219888177297</p>
<p>&gt;&gt;&gt; <strong>print</strong>(time.time())</p>
<p>1482807222.7240417</p>
<p>The keywords and syntax shown above can also be used in
combinations:</p>
<p>&gt;&gt;&gt; <strong>from</strong> urllib.request
<strong>import</strong> urlopen <strong>as</strong> geturl, pathname2url
<strong>as</strong> path2url, getproxies &gt;&gt;&gt;
<strong>from</strong> math <strong>import</strong> factorial
<strong>as</strong> fact, gamma, atan <strong>as</strong> arctan
&gt;&gt;&gt; <strong>import</strong> random.randint, time, sys</p>
<p>&gt;&gt;&gt; <strong>print</strong>(time.time())</p>
<p>1482807222.7240417</p>
<p>&gt;&gt;&gt; <strong>print</strong>(arctan(60))</p>
<p>1.554131203080956</p>
<p>&gt;&gt;&gt; filepath = "/dogs/jumping poodle (december).png"
&gt;&gt;&gt; <strong>print</strong>(path2url(filepath))</p>
<p>/dogs/jumping%20poodle%20%28december%29.png</p>
<p>Section 43.2: The __all__ special variable</p>
<p>Modules can have a special variable named __all__ to restrict what
variables are imported when using <strong>from</strong> mymodule
<strong>import</strong> *.</p>
<p>Given the following module:</p>
<p># mymodule.py</p>
<p>__all__ = ['imported_by_star']</p>
<p>imported_by_star = 42</p>
<p>not_imported_by_star = 21</p>
<p>Only imported_by_star is imported when using <strong>from</strong>
mymodule <strong>import</strong> *:</p>
<p>&gt;&gt;&gt; <strong>from</strong> mymodule <strong>import</strong>
*</p>
<p>&gt;&gt;&gt; imported_by_star</p>
<p>42</p>
<p>&gt;&gt;&gt; not_imported_by_star</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>NameError: name 'not_imported_by_star' <strong>is not</strong>
defined</p>
<p>However, not_imported_by_star can be imported explicitly:</p>
<p>&gt;&gt;&gt; <strong>from</strong> mymodule <strong>import</strong>
not_imported_by_star</p>
<p>&gt;&gt;&gt; not_imported_by_star</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 257</p>
<p><span id="21" class="anchor"></span>21</p>
<p>Section 43.3: Import modules from an arbitrary filesystem</p>
<p>location</p>
<p>If you want to import a module that doesn't already exist as a
built-in module in the <a
href="https://docs.python.org/3/library/">Python Standard Library nor
as</a></p>
<p>a side-package, you can do this by adding the path to the directory
where your module is found to <a
href="https://docs.python.org/3/library/sys.html#sys.path">sys.path.
This</a> may be useful where multiple python environments exist on a
host.</p>
<p>import <strong>sys</strong></p>
<p>sys.path.append("/path/to/directory/containing/your/module")
<strong>import</strong> mymodule</p>
<p>It is important that you append the path to the <em>directory</em> in
which mymodule is found, not the path to the module</p>
<p>itself.</p>
<p>Section 43.4: Importing all names from a module</p>
<p><strong>from</strong> module_name <strong>import</strong> *</p>
<p>for example:</p>
<p>from <strong>math</strong> import <strong>*</strong></p>
<p><em>sqrt(2)</em> # instead of math.sqrt(2)</p>
<p><em>ceil(2.7)</em> # instead of math.ceil(2.7)</p>
<p>This will import all names defined in the math module into the global
namespace, other than names that begin with</p>
<p>an underscore (which indicates that the writer feels that it is for
internal use only).</p>
<p><strong>Warning</strong>: If a function with the same name was
already defined or imported, it will be <strong>overwritten</strong>.
Almost always</p>
<p>importing only specific names <strong>from</strong> math
<strong>import</strong> sqrt, ceil is the <strong>recommended
way</strong>:</p>
<p><strong>def</strong> sqrt(num):</p>
<p><strong>print</strong>("I don't know what's the square root of
{}.".format(num))</p>
<p>sqrt(4)</p>
<p># Output: I don't know what's the square root of 4.</p>
<p>from <strong>math</strong> import <strong>*</strong></p>
<p>sqrt(4)</p>
<p># Output: 2.0</p>
<p>Starred imports are only allowed at the module level. Attempts to
perform them in class or function definitions result in a
SyntaxError.</p>
<p><strong>def</strong> f():</p>
<p>from <strong>math</strong> import <strong>*</strong></p>
<p>and</p>
<p>class <strong>A:</strong></p>
<p>from <strong>math</strong> import <strong>*</strong></p>
<p>both fail with:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 258</p>
<p><span id="SyntaxError__import___only_allow"
class="anchor"></span>SyntaxError: <strong>import</strong> * only
allowed at module level</p>
<p>Section 43.5: Programmatic importing</p>
<p>Python 2.x Version ≥ 2.7</p>
<p>To import a module through a function call, use the importlib module
(included in Python starting in version 2.7):</p>
<p><strong>import</strong> importlib</p>
<p>random = importlib.import_module("random")</p>
<p>The importlib.import_module() function will also import the submodule
of a package directly:</p>
<p>collections_abc = importlib.import_module("collections.abc")</p>
<p>For older versions of Python, use the imp module.</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>Use the functions imp.find_module and imp.load_module to perform a
programmatic import.</p>
<p>Taken from <a
href="https://docs.python.org/2/library/imp.html#examples">standard
library documentation</a></p>
<p><strong>import</strong> imp, sys</p>
<p><strong>def</strong> import_module(name):</p>
<p>fp, pathname, description = imp.find_module(name)</p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> imp.load_module(name, fp, pathname,
description)</p>
<p>finally<strong>:</strong></p>
<p><strong>if</strong> fp:</p>
<p>fp.close()</p>
<p>Do <strong>NOT</strong> use __import__() to programmatically import
modules! There are subtle details involving sys.modules, the fromlist
argument, etc. that are easy to overlook which importlib.import_module()
handles for you.</p>
<p>Section 43.6: PEP8 rules for Imports</p>
<p><a href="https://www.python.org/dev/peps/pep-0008/#imports">Some
recommended PEP8</a> style guidelines for imports:</p>
<p>1. Imports should be on separate lines:</p>
<p><strong>from</strong> math <strong>import</strong> sqrt, ceil <em>#
Not recommended</em></p>
<p><em><strong>from</strong> math <strong>import</strong> sqrt</em> #
Recommended</p>
<p><strong>from</strong> math <strong>import</strong> ceil</p>
<p>2. Order imports as follows at the top of the module:</p>
<p>Standard library imports</p>
<p>Related third party imports</p>
<p>Local application/library specific imports</p>
<p>3. Wildcard imports should be avoided as it leads to confusion in
names in the current namespace. If you do</p>
<p><strong>from</strong> module <strong>import</strong> * , it can be
unclear if a specific name in your code comes from module or not. This
is</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 259</p>
<p><span id="doubly_true_if_you_have_multiple"
class="anchor"></span>doubly true if you have multiple
<strong>from</strong> module <strong>import</strong> *-type
statements.</p>
<p>4. Avoid using relative imports; use explicit imports instead.</p>
<p>Section 43.7: Importing specific names from a module</p>
<p>Instead of importing the complete module you can import only
specified names:</p>
<p><em><strong>from</strong> random <strong>import</strong> randint</em>
# Syntax "from MODULENAME import NAME1[, NAME2[, ...]]"
<em><strong>print</strong>(randint(1, 10))</em> # Out: 5</p>
<p><strong>from</strong> random is needed, because the python
interpreter has to know from which resource it should import a function
or class and <strong>import</strong> randint specifies the function or
class itself.</p>
<p>Another example below (similar to the one above):</p>
<p>from <strong>math</strong> import <strong>pi</strong></p>
<p><em><strong>print</strong>(pi)</em> # Out: 3.14159265359</p>
<p>The following example will raise an error, because we haven't
imported a module:</p>
<p><em>random.randrange(1, 10)</em> # works only if "import random" has
been run before</p>
<p>Outputs:</p>
<p>NameError: name 'random' is not defined</p>
<p>The python interpreter does not understand what you mean with random.
It needs to be declared by adding <strong>import</strong> random to the
example:</p>
<p><strong>import</strong> random</p>
<p>random.randrange(1, 10)</p>
<p>Section 43.8: Importing submodules</p>
<p><strong>from</strong> module.submodule <strong>import</strong>
function</p>
<p>This imports function from module.submodule.</p>
<p>Section 43.9: Re-importing a module</p>
<p>When using the interactive interpreter, you might want to reload a
module. This can be useful if you're editing a</p>
<p>module and want to import the newest version, or if you've
monkey-patched an element of an existing module and want to revert your
changes.</p>
<p>Note that you <strong>can't</strong> just <strong>import</strong> the
module again to revert:</p>
<p>import <strong>math</strong></p>
<p>math.pi = 3</p>
<p><strong>print</strong>(math.pi) <em># 3</em></p>
<p>import <strong>math</strong></p>
<p><strong>print</strong>(math.pi) <em># 3</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 260</p>
<p><span id="This_is_because_the_interpreter" class="anchor"></span>This
is because the interpreter registers every module you import. And when
you try to reimport a module, the interpreter sees it in the register
and does nothing. So the hard way to reimport is to use
<strong>import</strong> after removing the</p>
<p>corresponding item from the register:</p>
<p><strong>print</strong>(math.pi) <em># 3</em></p>
<p>import <strong>sys</strong></p>
<p><em><strong>if</strong> 'math' <strong>in</strong> sys.modules:</em>
# Is the ``math`` module in the register?</p>
<p><strong>del</strong> sys.modules['math'] <em># If so, remove
it.</em></p>
<p>import <strong>math</strong></p>
<p><em><strong>print</strong>(math.pi)</em> # 3.141592653589793</p>
<p>But there is more a straightforward and simple way.</p>
<p>Python 2</p>
<p>Use the reload function:</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>import <strong>math</strong></p>
<p>math.pi = 3</p>
<p><strong>print</strong>(math.pi) <em># 3</em></p>
<p>reload(math)</p>
<p><em><strong>print</strong>(math.pi)</em> # 3.141592653589793</p>
<p>Python 3</p>
<p>The reload function has moved to importlib:</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>import <strong>math</strong></p>
<p>math.pi = 3</p>
<p><strong>print</strong>(math.pi) <em># 3</em></p>
<p><strong>from</strong> importlib <strong>import</strong> reload</p>
<p>reload(math)</p>
<p><em><strong>print</strong>(math.pi)</em> # 3.141592653589793</p>
<p>Section 43.10: __import__() function</p>
<p>The __import__() function can be used to import modules where the
name is only known at runtime</p>
<p><strong>if</strong> user_input == "os":</p>
<p>os = __import__("os")</p>
<p># equivalent to import os</p>
<p>This function can also be used to specify the file path to a
module</p>
<p>mod =
__import__(r"C:/path/to/file/anywhere/on/computer/module.py")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 261</p>
<p><span id="Chapter_44__Di_erence_between_Mo_1"
class="anchor"></span>Chapter 44: Dierence between Module</p>
<p>and Package</p>
<p>Section 44.1: Modules</p>
<p>A module is a single Python file that can be imported. Using a module
looks like this:</p>
<p>module.py</p>
<p><strong>def</strong> hi():</p>
<p><strong>print</strong>("Hello world!")</p>
<p>my_script.py</p>
<p><strong>import</strong> module</p>
<p>module.hi()</p>
<p>in an interpreter</p>
<p>&gt;&gt;&gt; <strong>from</strong> module <strong>import</strong>
hi</p>
<p>&gt;&gt;&gt; hi()</p>
<p># Hello world!</p>
<p>Section 44.2: Packages</p>
<p>A package is made up of multiple Python files (or modules), and can
even include libraries written in C or C++.</p>
<p>Instead of being a single file, it is an entire folder structure
which might look like this:</p>
<p>Folder package</p>
<p>__init__.py</p>
<p>dog.py</p>
<p>hi.py</p>
<p>__init__.py</p>
<p><strong>from</strong> package.dog <strong>import</strong> woof</p>
<p><strong>from</strong> package.hi <strong>import</strong> hi</p>
<p>dog.py</p>
<p><strong>def</strong> woof():</p>
<p><strong>print</strong>("WOOF!!!")</p>
<p>hi.py</p>
<p><strong>def</strong> hi():</p>
<p><strong>print</strong>("Hello world!")</p>
<p>All Python packages must contain an __init__.py file. When you import
a package in your script (<strong>import</strong> package),</p>
<p>the __init__.py script will be run, giving you access to the all of
the functions in the package. In this case, it allows you to use the
package.hi and package.woof functions.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 262</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"><strong>VIDEO:</strong>
Complete Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Bootcamp:
Go from zero</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">to
hero in Python 3</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Learn
Python like a Professional! Start from the</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">basics
and go all the way to creating your own</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">applications
and games!</a></p>
<p><img src="media/index-288_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-288_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Python professionally, learning both Python 2 and Python
3!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Create games with Python, like Tic Tac Toe and Blackjack!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn advanced Python features, like the collections module and how to
work with timestamps!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Object Oriented Programming with classes!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand complex topics, like decorators.</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand how to use both the Jupyter Notebook and create .py
files</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Get an understanding of how to create GUIs in the Jupyter Notebook
system!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Build a complete understanding of Python from the ground up!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Watch
Today →</a></p>
<p><span id="Chapter_45__Math_Module_1" class="anchor"></span>Chapter
45: Math Module</p>
<p>Section 45.1: Rounding: round, floor, ceil, trunc</p>
<p>In addition to the built-in round function, the math module provides
the floor, ceil, and trunc functions.</p>
<p>x = 1.55</p>
<p>y = -1.55</p>
<p># round to the nearest integer</p>
<p>round(x) <em># 2</em></p>
<p>round(y) <em># -2</em></p>
<p># the second argument gives how many decimal places to round to
(defaults to 0) <em>round(x, 1)</em> # 1.6</p>
<p>round(y, 1) <em># -1.6</em></p>
<p># math is a module so import it first, then use it.
<em><strong>import</strong> math</em></p>
<p># get the largest integer less than x</p>
<p>math.floor(x) <em># 1</em></p>
<p>math.floor(y) <em># -2</em></p>
<p># get the smallest integer greater than x</p>
<p>math.ceil(x) <em># 2</em></p>
<p>math.ceil(y) <em># -1</em></p>
<p># drop fractional part of x</p>
<p><em>math.trunc(x)</em> # 1, equivalent to math.floor for positive
numbers <em>math.trunc(y)</em> # -1, equivalent to math.ceil for
negative numbers</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>floor , ceil, trunc, and round always return a float.</p>
<p>round(1.3) <em># 1.0</em></p>
<p>round always breaks ties away from zero.</p>
<p>round(0.5) <em># 1.0</em></p>
<p>round(1.5) <em># 2.0</em></p>
<p>Python 3.x Version ≥ 3.0</p>
<p>floor , ceil, and trunc always return an Integral value, while round
returns an Integral value if called with one</p>
<p>argument.</p>
<p>round(1.3) <em># 1</em></p>
<p>round(1.33, 1) <em># 1.3</em></p>
<p>round breaks ties towards the nearest even number. This corrects the
bias towards larger numbers when</p>
<p>performing a large number of calculations.</p>
<p>round(0.5) <em># 0</em></p>
<p>round(1.5) <em># 2</em></p>
<p>Warning!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 264</p>
<p><span id="As_with_any_floating_point_repre" class="anchor"></span>As
with any floating-point representation, some fractions <em>cannot be
represented exactly</em>. This can lead to some unexpected rounding
behavior.</p>
<p><em>round(2.675, 2)</em> # 2.67, not 2.68!</p>
<p>Warning about the floor, trunc, and integer division of negative
numbers</p>
<p>Python (and C++ and Java) round away from zero for negative numbers.
Consider:</p>
<p>&gt;&gt;&gt; math.floor(-1.7)</p>
<p>-2.0</p>
<p>&gt;&gt;&gt; -5 // 2</p>
<p>-3</p>
<p>Section 45.2: Trigonometry</p>
<p>Calculating the length of the hypotenuse</p>
<p><em>math.hypot(2, 4)</em> # Just a shorthand for SquareRoot(2**2 +
4**2) # Out: 4.47213595499958</p>
<p>Converting degrees to/from radians</p>
<p>All math functions expect <strong>radians</strong> so you need to
convert degrees to radians:</p>
<p><em>math.radians(45)</em> # Convert 45 degrees to radians # Out:
0.7853981633974483</p>
<p>All results of the inverse trigonometric functions return the result
in radians, so you may need to convert it back to degrees:</p>
<p><em>math.degrees(math.asin(1))</em> # Convert the result of asin to
degrees # Out: 90.0</p>
<p>Sine, cosine, tangent and inverse functions</p>
<p># Sine and arc sine</p>
<p>math.sin(math.pi / 2)</p>
<p># Out: 1.0</p>
<p>math.sin(math.radians(90)) <em># Sine of 90 degrees</em></p>
<p># Out: 1.0</p>
<p>math.asin(1)</p>
<p># Out: 1.5707963267948966 # "= pi / 2"</p>
<p>math.asin(1) / math.pi</p>
<p># Out: 0.5</p>
<p># Cosine and arc cosine:</p>
<p>math.cos(math.pi / 2)</p>
<p># Out: 6.123233995736766e-17</p>
<p># Almost zero but not exactly because "pi" is a float with limited
precision!</p>
<p>math.acos(1)</p>
<p># Out: 0.0</p>
<p># Tangent and arc tangent:</p>
<p>math.tan(math.pi/2)</p>
<p># Out: 1.633123935319537e+16</p>
<p># Very large but not exactly "Inf" because "pi" is a float with
limited precision</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>math.atan(math.inf)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 265</p>
<p><span id="__Out__1_5707963267948966___This" class="anchor"></span>#
Out: 1.5707963267948966 # This is just "pi / 2"</p>
<p>math.atan(float('inf'))</p>
<p># Out: 1.5707963267948966 # This is just "pi / 2"</p>
<p>Apart from the math.atan there is also a two-argument math.atan2
function, which computes the correct quadrant</p>
<p>and avoids pitfalls of division by zero:</p>
<p><em>math.atan2(1, 2)</em> # Equivalent to "math.atan(1/2)"</p>
<p># Out: 0.4636476090008061 # <em>≈</em> 26.57 degrees, 1st
quadrant</p>
<p><em>math.atan2(-1, -2)</em> # Not equal to "math.atan(-1/-2)" ==
"math.atan(1/2)" # Out: -2.677945044588987 # <em>≈</em> -153.43 degrees
(or 206.57 degrees), 3rd quadrant</p>
<p><em>math.atan2(1, 0)</em> # math.atan(1/0) would raise
ZeroDivisionError # Out: 1.5707963267948966 # This is just "pi / 2"</p>
<p>Hyperbolic sine, cosine and tangent</p>
<p># Hyperbolic sine function</p>
<p><em>math.sinh(math.pi)</em> # = 11.548739357257746</p>
<p><em>math.asinh(1)</em> # = 0.8813735870195429</p>
<p># Hyperbolic cosine function</p>
<p><em>math.cosh(math.pi)</em> # = 11.591953275521519</p>
<p>math.acosh(1) <em># = 0.0</em></p>
<p># Hyperbolic tangent function</p>
<p><em>math.tanh(math.pi)</em> # = 0.99627207622075</p>
<p><em>math.atanh(0.5)</em> # = 0.5493061443340549</p>
<p>Section 45.3: Pow for faster exponentiation</p>
<p>Using the timeit module from the command line:</p>
<p>&gt; python -m timeit 'for x in xrange(50000): b = x**3' 10 loops,
best of 3: 51.2 msec per loop</p>
<p>&gt; python -m timeit 'from math import pow' 'for x in xrange(50000):
b = pow(x,3)' 100 loops, best of 3: 9.15 msec per loop</p>
<p>The built-in ** operator often comes in handy, but if performance is
of the essence, use math.pow. Be sure to note,</p>
<p>however, that pow returns floats, even if the arguments are
integers:</p>
<p>&gt; <strong>from</strong> math <strong>import</strong> pow</p>
<p>&gt; pow(5,5)</p>
<p>3125.0</p>
<p>Section 45.4: Infinity and NaN ("not a number")</p>
<p>In all versions of Python, we can represent infinity and NaN ("not a
number") as follows:</p>
<p>pos_inf = float('inf') <em># positive infinity</em></p>
<p>neg_inf = float('-inf') <em># negative infinity</em></p>
<p>not_a_num = float('nan') <em># NaN ("not a number")</em></p>
<p>In Python 3.5 and higher, we can also use the defined constants
math.inf and math.nan:</p>
<p>Python 3.x Version ≥ 3.5</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 266</p>
<p>pos_inf = math.inf</p>
<p>neg_inf = -math.inf</p>
<p>not_a_num = math.nan</p>
<p>The string representations display as inf and -inf and nan:</p>
<p>pos_inf, neg_inf, not_a_num</p>
<p># Out: (inf, -inf, nan)</p>
<p>We can test for either positive or negative infinity with the isinf
method:</p>
<p>math.isinf(pos_inf)</p>
<p># Out: True</p>
<p>math.isinf(neg_inf)</p>
<p># Out: True</p>
<p>We can test specifically for positive infinity or for negative
infinity by direct comparison:</p>
<p><em>pos_inf == float('inf')</em> # or == math.inf in Python 3.5+ #
Out: True</p>
<p><em>neg_inf == float('-inf')</em> # or == -math.inf in Python 3.5+ #
Out: True</p>
<p>neg_inf == pos_inf</p>
<p># Out: False</p>
<p>Python 3.2 and higher also allows checking for finiteness:</p>
<p>Python 3.x Version ≥ 3.2</p>
<p>math.isfinite(pos_inf)</p>
<p># Out: False</p>
<p>math.isfinite(0.0)</p>
<p># Out: True</p>
<p>Comparison operators work as expected for positive and negative
infinity:</p>
<p>import <strong>sys</strong></p>
<p>sys.float_info.max</p>
<p># Out: 1.7976931348623157e+308 (this is system-dependent)</p>
<p>pos_inf &gt; sys.float_info.max</p>
<p># Out: True</p>
<p>neg_inf &lt; -sys.float_info.max</p>
<p># Out: True</p>
<p>But if an arithmetic expression produces a value larger than the
maximum that can be represented as a float, it</p>
<p>will become infinity:</p>
<p>pos_inf == sys.float_info.max * 1.0000001</p>
<p># Out: True</p>
<p>neg_inf == -sys.float_info.max * 1.0000001</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 267</p>
<p># Out: True</p>
<p>However division by zero does not give a result of infinity (or
negative infinity where appropriate), rather it raises a
ZeroDivisionError exception.</p>
<p>try<strong>:</strong></p>
<p>x = 1.0 / 0.0</p>
<p>print<strong>(x)</strong></p>
<p><strong>except</strong> ZeroDivisionError:</p>
<p><strong>print</strong>("Division by zero")</p>
<p># Out: Division by zero</p>
<p>Arithmetic operations on infinity just give infinite results, or
sometimes NaN:</p>
<p>-5.0 * pos_inf == neg_inf</p>
<p># Out: True</p>
<p>-5.0 * neg_inf == pos_inf</p>
<p># Out: True</p>
<p>pos_inf * neg_inf == neg_inf</p>
<p># Out: True</p>
<p>0.0 * pos_inf</p>
<p># Out: nan</p>
<p>0.0 * neg_inf</p>
<p># Out: nan</p>
<p>pos_inf / pos_inf</p>
<p># Out: nan</p>
<p>NaN is never equal to anything, not even itself. We can test for it
is with the isnan method:</p>
<p>not_a_num == not_a_num</p>
<p># Out: False</p>
<p>math.isnan(not_a_num)</p>
<p>Out: True</p>
<p>NaN always compares as "not equal", but never less than or greater
than:</p>
<p><em>not_a_num != 5.0</em> # or any random value</p>
<p># Out: True</p>
<p>not_a_num &gt; 5.0 <strong>or</strong> not_a_num &lt; 5.0
<strong>or</strong> not_a_num == 5.0 <em># Out: False</em></p>
<p>Arithmetic operations on NaN always give NaN. This includes
multiplication by -1: there is no "negative NaN".</p>
<p>5.0 * not_a_num</p>
<p># Out: nan</p>
<p>float('-nan')</p>
<p># Out: nan</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>-math.nan</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 268</p>
<p><span id="__Out__nan" class="anchor"></span># Out: nan</p>
<p>There is one subtle difference between the old float versions of NaN
and infinity and the Python 3.5+ math library constants:</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>math.inf <strong>is</strong> math.inf, math.nan <strong>is</strong>
math.nan</p>
<p># Out: (True, True)</p>
<p>float('inf') <strong>is</strong> float('inf'), float('nan')
<strong>is</strong> float('nan') <em># Out: (False, False)</em></p>
<p>Section 45.5: Logarithms</p>
<p>math.log(x) gives the natural (base e) logarithm of x.</p>
<p>math.log(math.e) <em># 1.0</em></p>
<p>math.log(1) <em># 0.0</em></p>
<p><em>math.log(100)</em> # 4.605170185988092</p>
<p>math.log can lose precision with numbers close to 1, due to the
limitations of floating-point numbers. In order to</p>
<p>accurately calculate logs close to 1, use math.log1p, which evaluates
the natural logarithm of 1 plus the argument:</p>
<p>math.log(1 + 1e-20) <em># 0.0</em></p>
<p>math.log1p(1e-20) <em># 1e-20</em></p>
<p>math.log10 can be used for logs base 10:</p>
<p>math.log10(10) <em># 1.0</em></p>
<p>Python 2.x Version ≥ 2.3.0</p>
<p>When used with two arguments, math.log(x, base) gives the logarithm
of x in the given base (i.e. log(x) / log(base) .</p>
<p>math.log(100, 10) <em># 2.0</em></p>
<p>math.log(27, 3) <em># 3.0</em></p>
<p>math.log(1, 10) <em># 0.0</em></p>
<p>Section 45.6: Constants</p>
<p>math modules includes two commonly used mathematical constants.</p>
<p>math.pi - The mathematical constant pi</p>
<p>math.e - The mathematical constant <em>e</em> (base of natural
logarithm)</p>
<p>&gt;&gt;&gt; <strong>from</strong> math <strong>import</strong> pi,
e</p>
<p>&gt;&gt;&gt; pi</p>
<p>3.141592653589793</p>
<p>&gt;&gt;&gt; e</p>
<p>2.718281828459045</p>
<p>&gt;&gt;&gt;</p>
<p>Python 3.5 and higher have constants for infinity and NaN ("not a
number"). The older syntax of passing a string to float() still
works.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 269</p>
<p><span id="Python_3_x_Version_____3_5" class="anchor"></span>Python
3.x Version ≥ 3.5</p>
<p>math.inf == float('inf')</p>
<p># Out: True</p>
<p>-math.inf == float('-inf')</p>
<p># Out: True</p>
<p># NaN never compares equal to anything, even itself <em>math.nan ==
float('nan')</em></p>
<p># Out: False</p>
<p>Section 45.7: Imaginary Numbers</p>
<p>Imaginary numbers in Python are represented by a "j" or "J" trailing
the target number.</p>
<p><em>1j</em> # Equivalent to the square root of -1.</p>
<p><em>1j * 1j</em> # = (-1+0j)</p>
<p>Section 45.8: Copying signs</p>
<p>In Python 2.6 and higher, math.copysign(x, y) returns x with the sign
of y. The returned value is always a float.</p>
<p>Python 2.x Version ≥ 2.6</p>
<p>math.copysign(-2, 3) <em># 2.0</em></p>
<p>math.copysign(3, -3) <em># -3.0</em></p>
<p>math.copysign(4, 14.2) <em># 4.0</em></p>
<p><em>math.copysign(1, -0.0)</em> # -1.0, on a platform which supports
signed zero</p>
<p>Section 45.9: Complex numbers and the cmath module</p>
<p>The cmath module is similar to the math module, but defines functions
appropriately for the complex plane.</p>
<p>First of all, complex numbers are a numeric type that is part of the
Python language itself rather than being</p>
<p>provided by a library class. Thus we don't need to
<strong>import</strong> cmath for ordinary arithmetic expressions.</p>
<p>Note that we use j (or J) and not i.</p>
<p>z = 1 + 3j</p>
<p>We must use 1j since j would be the name of a variable rather than a
numeric literal.</p>
<p>1j * 1j</p>
<p>Out: (-1+0j)</p>
<p>1j ** 1j</p>
<p># Out: (0.20787957635076193+0j) # "i to the i" == math.e **
-(math.pi/2)</p>
<p>We have the real part and the imag (imaginary) part, as well as the
complex conjugate:</p>
<p># real part and imaginary part are both float type</p>
<p>z.real, z.imag</p>
<p># Out: (1.0, 3.0)</p>
<p>z.conjugate()</p>
<p># Out: (1-3j) # z.conjugate() == z.real - z.imag * 1j</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 270</p>
<p>The built-in functions abs and complex are also part of the language
itself and don't require any import:</p>
<p>abs(1 + 1j)</p>
<p># Out: 1.4142135623730951 # square root of 2</p>
<p>complex(1)</p>
<p># Out: (1+0j)</p>
<p>complex(imag=1)</p>
<p># Out: (1j)</p>
<p>complex(1, 1)</p>
<p># Out: (1+1j)</p>
<p>The complex function can take a string, but it can't have spaces:</p>
<p>complex('1+1j')</p>
<p># Out: (1+1j)</p>
<p>complex('1 + 1j')</p>
<p># Exception: ValueError: complex() arg is a malformed string</p>
<p>But for most functions we do need the module, for instance sqrt:</p>
<p>import <strong>cmath</strong></p>
<p>cmath.sqrt(-1)</p>
<p># Out: 1j</p>
<p>Naturally the behavior of sqrt is different for complex numbers and
real numbers. In non-complex math the square</p>
<p>root of a negative number raises an exception:</p>
<p>import <strong>math</strong></p>
<p>math.sqrt(-1)</p>
<p># Exception: ValueError: math domain error</p>
<p>Functions are provided to convert to and from polar coordinates:</p>
<p>cmath.polar(1 + 1j)</p>
<p># Out: (1.4142135623730951, 0.7853981633974483) # == (sqrt(1 + 1),
atan2(1, 1))</p>
<p>abs(1 + 1j), cmath.phase(1 + 1j)</p>
<p># Out: (1.4142135623730951, 0.7853981633974483) # same as previous
calculation</p>
<p>cmath.rect(math.sqrt(2), math.atan(1))</p>
<p># Out: (1.0000000000000002+1.0000000000000002j)</p>
<p>The mathematical field of complex analysis is beyond the scope of
this example, but many functions in the complex</p>
<p>plane have a "branch cut", usually along the real axis or the
imaginary axis. Most modern platforms support "signed</p>
<p>zero" as specified in IEEE 754, which provides continuity of those
functions on both sides of the branch cut. The following example is from
the Python documentation:</p>
<p>cmath.phase(complex(-1.0, 0.0))</p>
<p># Out: 3.141592653589793</p>
<p>cmath.phase(complex(-1.0, -0.0))</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 271</p>
<p># Out: -3.141592653589793</p>
<p>The cmath module also provides many functions with direct
counterparts from the math module.</p>
<p>In addition to sqrt, there are complex versions of exp, log, log10,
the trigonometric functions and their inverses</p>
<p>(sin, cos, tan, asin, acos, atan), and the hyperbolic functions and
their inverses (sinh, cosh, tanh, asinh, acosh, atanh). Note however
there is no complex counterpart of math.atan2, the two-argument form of
arctangent.</p>
<p>cmath.log(1+1j)</p>
<p># Out: (0.34657359027997264+0.7853981633974483j)</p>
<p>cmath.exp(1j * cmath.pi)</p>
<p># Out: (-1+1.2246467991473532e-16j) # e to the i pi == -1, within
rounding error</p>
<p>The constants pi and e are provided. Note these are float and not
complex.</p>
<p>type(cmath.pi)</p>
<p># Out: &lt;class 'float'&gt;</p>
<p>The cmath module also provides complex versions of isinf, and (for
Python 3.2+) isfinite. See "Infinity and NaN".</p>
<p>A complex number is considered infinite if either its real part or
its imaginary part is infinite.</p>
<p>cmath.isinf(complex(float('inf'), 0.0))</p>
<p># Out: True</p>
<p>Likewise, the cmath module provides a complex version of isnan. See
"Infinity and NaN". A complex number is</p>
<p>considered "not a number" if either its real part or its imaginary
part is "not a number".</p>
<p>cmath.isnan(0.0, float('nan'))</p>
<p># Out: True</p>
<p>Note there is no cmath counterpart of the math.inf and math.nan
constants (from Python 3.5 and higher)</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>cmath.isinf(complex(0.0, math.inf))</p>
<p># Out: True</p>
<p>cmath.isnan(complex(math.nan, 0.0))</p>
<p># Out: True</p>
<p>cmath.inf</p>
<p># Exception: AttributeError: module 'cmath' has no attribute
'inf'</p>
<p>In Python 3.5 and higher, there is an isclose method in both cmath
and math modules.</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>z = cmath.rect(*cmath.polar(1+1j))</p>
<p>z</p>
<p># Out: (1.0000000000000002+1.0000000000000002j)</p>
<p>cmath.isclose(z, 1+1j)</p>
<p># True</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 272</p>
<p><span id="Chapter_46__Complex_math_1" class="anchor"></span>Chapter
46: Complex math</p>
<p>Section 46.1: Advanced complex arithmetic</p>
<p>The module cmath includes additional functions to use complex
numbers.</p>
<p>import <strong>cmath</strong></p>
<p>This module can calculate the phase of a complex number, in
radians:</p>
<p><em>z = 2+3j</em> # A complex number</p>
<p><em>cmath.phase(z)</em> # 0.982793723247329</p>
<p>It allows the conversion between the cartesian (rectangular) and
polar representations of complex numbers:</p>
<p><em>cmath.polar(z)</em> # (3.605551275463989, 0.982793723247329)
<em>cmath.rect(2, cmath.pi/2)</em> # (0+2j)</p>
<p>The module contains the complex version of</p>
<p>Exponential and logarithmic functions (as usual, log is the natural
logarithm and log10 the decimal logarithm):</p>
<p><em>cmath.exp(z)</em> # (-7.315110094901103+1.0427436562359045j)
<em>cmath.log(z)</em> # (1.2824746787307684+0.982793723247329j)
<em>cmath.log10(-100)</em> # (2+1.3643763538418412j)</p>
<p>Square roots:</p>
<p><em>cmath.sqrt(z)</em> # (1.6741492280355401+0.8959774761298381j)</p>
<p>Trigonometric functions and their inverses:</p>
<p><em>cmath.sin(z)</em> # (9.15449914691143-4.168906959966565j)
<em>cmath.cos(z)</em> # (-4.189625690968807-9.109227893755337j)
<em>cmath.tan(z)</em> # (-0.003764025641504249+1.00323862735361j)
<em>cmath.asin(z)</em> # (0.5706527843210994+1.9833870299165355j)
<em>cmath.acos(z)</em> # (1.0001435424737972-1.9833870299165355j)
<em>cmath.atan(z)</em> # (1.4099210495965755+0.22907268296853878j)
<em>cmath.sin(z)**2 + cmath.cos(z)**2</em> # (1+0j)</p>
<p>Hyperbolic functions and their inverses:</p>
<p><em>cmath.sinh(z)</em> # (-3.59056458998578+0.5309210862485197j)
<em>cmath.cosh(z)</em> # (-3.7245455049153224+0.5118225699873846j)
<em>cmath.tanh(z)</em> # (0.965385879022133-0.009884375038322495j)
<em>cmath.asinh(z)</em> # (0.5706527843210994+1.9833870299165355j)
<em>cmath.acosh(z)</em> # (1.9833870299165355+1.0001435424737972j)
<em>cmath.atanh(z)</em> # (0.14694666622552977+1.3389725222944935j)
<em>cmath.cosh(z)**2 - cmath.sin(z)**2</em> # (1+0j)</p>
<p>cmath.cosh((0+1j)*z) - cmath.cos(z) <em># 0j</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 273</p>
<p><span id="Section_46_2__Basic_complex_arit"
class="anchor"></span>Section 46.2: Basic complex arithmetic</p>
<p>Python has built-in support for complex arithmetic. The imaginary
unit is denoted by <a
href="http://stackoverflow.com/questions/24812444/why-are-complex-numbers-in-python-denoted-with-j-instead-of-i#24812657">j</a>:</p>
<p><em>z = 2+3j</em> # A complex number</p>
<p><em>w = 1-7j</em> # Another complex number</p>
<p>Complex numbers can be summed, subtracted, multiplied, divided and
exponentiated:</p>
<p><em>z + w</em> # (3-4j)</p>
<p><em>z - w</em> # (1+10j)</p>
<p><em>z * w</em> # (23-11j)</p>
<p><em>z / w</em> # (-0.38+0.34j)</p>
<p><em>z**3</em> # (-46+9j)</p>
<p>Python can also extract the real and imaginary parts of complex
numbers, and calculate their absolute value and conjugate:</p>
<p>z.real <em># 2.0</em></p>
<p>z.imag <em># 3.0</em></p>
<p><em>abs(z)</em> # 3.605551275463989</p>
<p>z.conjugate() <em># (2-3j)</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 274</p>
<p><span id="Chapter_47__Collections_module_1"
class="anchor"></span>Chapter 47: Collections module</p>
<p>The built-in collections package provides several specialized,
flexible collection types that are both high-</p>
<p>performance and provide alternatives to the general collection types
of dict, list, tuple and set. The module also defines abstract base
classes describing different types of collection functionality (such as
MutableSet and</p>
<p>ItemsView ).</p>
<p>Section 47.1: collections.Counter</p>
<p><a
href="https://docs.python.org/2/library/collections.html#collections.Counter">Counter</a>
is a dict sub class that allows you to easily count objects. It has
utility methods for working with the</p>
<p>frequencies of the objects that you are counting.</p>
<p><strong>import</strong> collections</p>
<p>counts = collections.Counter([1,2,3])</p>
<p>the above code creates an object, counts, which has the frequencies
of all the elements passed to the constructor.</p>
<p>This example has the value Counter({1: 1, 2: 1, 3: 1})</p>
<p>Constructor examples</p>
<p>Letter Counter</p>
<p>&gt;&gt;&gt; collections.Counter('Happy Birthday')</p>
<p>Counter({'a': 2, 'p': 2, 'y': 2, 'i': 1, 'r': 1, 'B': 1, ' ': 1, 'H':
1, 'd': 1, 'h': 1, 't': 1})</p>
<p>Word Counter</p>
<p>&gt;&gt;&gt; collections.Counter('I am Sam Sam I am That Sam-I-am
That Sam-I-am! I do not like that Sam-I-am'.split())</p>
<p>Counter({'I': 3, 'Sam': 2, 'Sam-I-am': 2, 'That': 2, 'am': 2, 'do':
1, 'Sam-I-am!': 1, 'that': 1, 'not': 1, 'like': 1})</p>
<p>Recipes</p>
<p>&gt;&gt;&gt; c = collections.Counter({'a': 4, 'b': 2, 'c': -2, 'd':
0})</p>
<p>Get count of individual element</p>
<p>&gt;&gt;&gt; c['a']</p>
<p>4</p>
<p>Set count of individual element</p>
<p>&gt;&gt;&gt; c['c'] = -3</p>
<p>&gt;&gt;&gt; c</p>
<p>Counter({'a': 4, 'b': 2, 'd': 0, 'c': -3})</p>
<p>Get total number of elements in counter (4 + 2 + 0 - 3)</p>
<p><em>&gt;&gt;&gt; sum(c.itervalues())</em> # negative numbers are
counted! <em>3</em></p>
<p>Get elements (only those with positive counter are kept)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 275</p>
<p><span id="____list_c_elements" class="anchor"></span>&gt;&gt;&gt;
list(c.elements())</p>
<p>['a', 'a', 'a', 'a', 'b', 'b']</p>
<p>Remove keys with 0 or negative value</p>
<p>&gt;&gt;&gt; c - collections.Counter()</p>
<p>Counter({'a': 4, 'b': 2})</p>
<p>Remove everything</p>
<p>&gt;&gt;&gt; c.clear()</p>
<p>&gt;&gt;&gt; c</p>
<p>Counter()</p>
<p>Add remove individual elements</p>
<p>&gt;&gt;&gt; c.update({'a': 3, 'b':3})</p>
<p><em>&gt;&gt;&gt; c.update({'a': 2, 'c':2})</em> # adds to existing,
sets if they don't exist <em>&gt;&gt;&gt; c</em></p>
<p>Counter({'a': 5, 'b': 3, 'c': 2})</p>
<p>&gt;&gt;&gt; c.subtract({'a': 3, 'b': 3, 'c': 3}) <em># subtracts
(negative values are allowed)</em> &gt;&gt;&gt; c</p>
<p>Counter({'a': 2, 'b': 0, 'c': -1})</p>
<p>Section 47.2: collections.OrderedDict</p>
<p>The order of keys in Python dictionaries is arbitrary: they are not
governed by the order in which you add them.</p>
<p>For example:</p>
<p>&gt;&gt;&gt; d = {'foo': 5, 'bar': 6}</p>
<p>&gt;&gt;&gt; <strong>print</strong>(d)</p>
<p>{'foo': 5, 'bar': 6}</p>
<p>&gt;&gt;&gt; d['baz'] = 7</p>
<p>&gt;&gt;&gt; <strong>print</strong>(a)</p>
<p>{'baz': 7, 'foo': 5, 'bar': 6}</p>
<p>&gt;&gt;&gt; d['foobar'] = 8</p>
<p>&gt;&gt;&gt; <strong>print</strong>(a)</p>
<p>{'baz': 7, 'foo': 5, 'bar': 6, 'foobar': 8}</p>
<p>```</p>
<p>(The arbitrary ordering implied above means that you may get
different results with the above code to that shown</p>
<p>here.)</p>
<p>The order in which the keys appear is the order which they would be
iterated over, e.g. using a <strong>for</strong> loop.</p>
<p>The collections.OrderedDict class provides dictionary objects that
retain the order of keys. OrderedDicts can be</p>
<p>created as shown below with a series of ordered items (here, a list
of tuple key-value pairs):</p>
<p>&gt;&gt;&gt; <strong>from</strong> collections
<strong>import</strong> OrderedDict</p>
<p>&gt;&gt;&gt; d = OrderedDict([('foo', 5), ('bar', 6)])</p>
<p>&gt;&gt;&gt; <strong>print</strong>(d)</p>
<p>OrderedDict([('foo', 5), ('bar', 6)])</p>
<p>&gt;&gt;&gt; d['baz'] = 7</p>
<p>&gt;&gt;&gt; <strong>print</strong>(d)</p>
<p>OrderedDict([('foo', 5), ('bar', 6), ('baz', 7)])</p>
<p>&gt;&gt;&gt; d['foobar'] = 8</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 276</p>
<p><span id="____print_d" class="anchor"></span>&gt;&gt;&gt;
<strong>print</strong>(d)</p>
<p>OrderedDict([('foo', 5), ('bar', 6), ('baz', 7), ('foobar', 8)])</p>
<p>Or we can create an empty OrderedDict and then add items:</p>
<p>&gt;&gt;&gt; o = OrderedDict()</p>
<p>&gt;&gt;&gt; o['key1'] = "value1"</p>
<p>&gt;&gt;&gt; o['key2'] = "value2"</p>
<p>&gt;&gt;&gt; <strong>print</strong>(o)</p>
<p>OrderedDict([('key1', 'value1'), ('key2', 'value2')])</p>
<p>Iterating through an OrderedDict allows key access in the order they
were added.</p>
<p>What happens if we assign a new value to an existing key?</p>
<p>&gt;&gt;&gt; d['foo'] = 4</p>
<p>&gt;&gt;&gt; <strong>print</strong>(d)</p>
<p>OrderedDict([('foo', 4), ('bar', 6), ('baz', 7), ('foobar', 8)])</p>
<p>The key retains its original place in the OrderedDict.</p>
<p>Section 47.3: collections.defaultdict</p>
<p><a
href="https://docs.python.org/2/library/collections.html#collections.defaultdict">collections.defaultdict</a>(default_factory)
returns a subclass of dict that has a default value for missing keys.
The argument should be a function that returns the default value when
called with no arguments. If there is nothing</p>
<p>passed, it defaults to None.</p>
<p>&gt;&gt;&gt; state_capitals = collections.defaultdict(str)</p>
<p>&gt;&gt;&gt; state_capitals</p>
<p>defaultdict(&lt;<strong>class</strong> 'str'&gt;, {})</p>
<p>returns a reference to a defaultdict that will create a string object
with its default_factory method.</p>
<p>A typical usage of defaultdict is to use one of the builtin types
such as str, int, list or dict as the default_factory, since these
return empty types when called with no arguments:</p>
<p>&gt;&gt;&gt; str()</p>
<p>''</p>
<p>&gt;&gt;&gt; int()</p>
<p>0</p>
<p>&gt;&gt;&gt; list</p>
<p>[]</p>
<p>Calling the defaultdict with a key that does not exist does not
produce an error as it would in a normal dictionary.</p>
<p>&gt;&gt;&gt; state_capitals['Alaska']</p>
<p>''</p>
<p>&gt;&gt;&gt; state_capitals</p>
<p>defaultdict(&lt;<strong>class</strong> 'str'&gt;, {'Alaska': ''})</p>
<p>Another example with int:</p>
<p>&gt;&gt;&gt; fruit_counts = defaultdict(int)</p>
<p>&gt;&gt;&gt; fruit_counts['apple'] += 2 <em># No errors should
occur</em> &gt;&gt;&gt; fruit_counts</p>
<p>default_dict(int, {'apple': 2})</p>
<p>&gt;&gt;&gt; fruit_counts['banana'] <em># No errors should
occur</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 277</p>
<p><span id="0" class="anchor"></span>0</p>
<p><em>&gt;&gt;&gt; fruit_counts</em> # A new key is created</p>
<p>default_dict(int, {'apple': 2, 'banana': 0})</p>
<p>Normal dictionary methods work with the default dictionary</p>
<p>&gt;&gt;&gt; state_capitals['Alabama'] = 'Montgomery'</p>
<p>&gt;&gt;&gt; state_capitals</p>
<p>defaultdict(&lt;<strong>class</strong> 'str'&gt;, {'Alabama':
'Montgomery', 'Alaska': ''})</p>
<p>Using list as the default_factory will create a list for each new
key.</p>
<p>&gt;&gt;&gt; s = [('NC', 'Raleigh'), ('VA', 'Richmond'), ('WA',
'Seattle'), ('NC', 'Asheville')] &gt;&gt;&gt; dd =
collections.defaultdict(list)</p>
<p>&gt;&gt;&gt; <strong>for</strong> k, v <strong>in</strong> s:</p>
<p>... dd[k].append(v)</p>
<p>&gt;&gt;&gt; dd</p>
<p>defaultdict(&lt;<strong>class</strong> 'list'&gt;,</p>
<p>{'VA': ['Richmond'],</p>
<p>'NC': ['Raleigh', 'Asheville'],</p>
<p>'WA': ['Seattle']})</p>
<p>Section 47.4: collections.namedtuple</p>
<p>Define a new type Person <a
href="https://docs.python.org/2/library/collections.html#collections.namedtuple">using
namedtuple</a> like this:</p>
<p>Person = namedtuple('Person', ['age', 'height', 'name'])</p>
<p>The second argument is the list of attributes that the tuple will
have. You can list these attributes also as either</p>
<p>space or comma separated string:</p>
<p>Person = namedtuple('Person', 'age, height, name')</p>
<p>or</p>
<p>Person = namedtuple('Person', 'age height name')</p>
<p>Once defined, a named tuple can be instantiated by calling the object
with the necessary parameters, e.g.:</p>
<p>dave = Person(30, 178, 'Dave')</p>
<p>Named arguments can also be used:</p>
<p>jack = Person(age=30, height=178, name='Jack S.')</p>
<p>Now you can access the attributes of the namedtuple:</p>
<p><strong>print</strong>(jack.age) <em># 30</em></p>
<p><strong>print</strong>(jack.name) <em># 'Jack S.'</em></p>
<p>The first argument to the namedtuple constructor (in our example
'Person') is the typename. It is typical to use the</p>
<p>same word for the constructor and the typename, but they can be
different:</p>
<p>Human = namedtuple('Person', 'age, height, name')</p>
<p>dave = Human(30, 178, 'Dave')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 278</p>
<p><span id="print_dave_____yields__Person_ag"
class="anchor"></span><em><strong>print</strong>(dave)</em> # yields:
Person(age=30, height=178, name='Dave')</p>
<p>Section 47.5: collections.deque</p>
<p>Returns a new deque object initialized left-to-right (using append())
with data from iterable. If iterable is not specified, the new deque is
empty.</p>
<p>Deques are a generalization of stacks and queues (the name is
pronounced “deck” and is short for “double-ended</p>
<p>queue”). Deques support thread-safe, memory efficient appends and
pops from either side of the deque with</p>
<p>approximately the same O(1) performance in either direction.</p>
<p>Though list objects support similar operations, they are optimized
for fast fixed-length operations and incur O(n) memory movement costs
for pop(0) and insert(0, v) operations which change both the size and
position of the</p>
<p>underlying data representation.</p>
<p>New in version 2.4.</p>
<p>If maxlen is not specified or is None, deques may grow to an
arbitrary length. Otherwise, the deque is bounded to the specified
maximum length. Once a bounded length deque is full, when new items are
added, a corresponding</p>
<p>number of items are discarded from the opposite end. Bounded length
deques provide functionality similar to the tail filter in Unix. They
are also useful for tracking transactions and other pools of data where
only the most recent</p>
<p>activity is of interest.</p>
<p>Changed in version 2.6: Added maxlen parameter.</p>
<p>&gt;&gt;&gt; <strong>from</strong> collections
<strong>import</strong> deque</p>
<p><em>&gt;&gt;&gt; d = deque('ghi')</em> # make a new deque with three
items <em>&gt;&gt;&gt; <strong>for</strong> elem <strong>in</strong>
d:</em> # iterate over the deque's elements <em>...
<strong>print</strong> elem.upper() G</em></p>
<p>H</p>
<h2 id="i">I</h2>
<p><em>&gt;&gt;&gt; d.append('j')</em> # add a new entry to the right
side <em>&gt;&gt;&gt; d.appendleft('f')</em> # add a new entry to the
left side <em>&gt;&gt;&gt; d</em> # show the representation of the deque
<em>deque(['f', 'g', 'h', 'i', 'j'])</em></p>
<p><em>&gt;&gt;&gt; d.pop()</em> # return and remove the rightmost item
<em>'j'</em></p>
<p><em>&gt;&gt;&gt; d.popleft()</em> # return and remove the leftmost
item <em>'f'</em></p>
<p><em>&gt;&gt;&gt; list(d)</em> # list the contents of the deque
<em>['g', 'h', 'i']</em></p>
<p><em>&gt;&gt;&gt; d[0]</em> # peek at leftmost item <em>'g'</em></p>
<p><em>&gt;&gt;&gt; d[-1]</em> # peek at rightmost item <em>'i'</em></p>
<p><em>&gt;&gt;&gt; list(reversed(d))</em> # list the contents of a
deque in reverse <em>['i', 'h', 'g']</em></p>
<p><em>&gt;&gt;&gt; 'h' <strong>in</strong> d</em> # search the deque
<em>True</em></p>
<p><em>&gt;&gt;&gt; d.extend('jkl')</em> # add multiple elements at once
<em>&gt;&gt;&gt; d</em></p>
<p>deque(['g', 'h', 'i', 'j', 'k', 'l'])</p>
<p>&gt;&gt;&gt; d.rotate(1) <em># right rotation</em> &gt;&gt;&gt; d</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 279</p>
<p><span id="deque___l____g____h____i____j"
class="anchor"></span>deque(['l', 'g', 'h', 'i', 'j', 'k'])</p>
<p>&gt;&gt;&gt; d.rotate(-1) <em># left rotation</em> &gt;&gt;&gt; d</p>
<p>deque(['g', 'h', 'i', 'j', 'k', 'l'])</p>
<p>&gt;&gt;&gt; deque(reversed(d)) <em># make a new deque in reverse
order</em> deque(['l', 'k', 'j', 'i', 'h', 'g'])</p>
<p>&gt;&gt;&gt; d.clear() <em># empty the deque</em> &gt;&gt;&gt;
d.pop() <em># cannot pop from an empty deque</em> Traceback (most recent
call last):</p>
<p>File "", line 1, <strong>in</strong> -toplevel-</p>
<p>d.pop()</p>
<p>IndexError: pop <strong>from</strong> an empty deque</p>
<p><em>&gt;&gt;&gt; d.extendleft('abc')</em> # extendleft() reverses the
input order <em>&gt;&gt;&gt; d</em></p>
<p>deque(['c', 'b', 'a'])</p>
<p>Source: <a
href="https://docs.python.org/2/library/collections.html">https://docs.python.org/2/library/collections.html</a></p>
<p>Section 47.6: collections.ChainMap</p>
<p>ChainMap is new in <strong>version 3.3</strong></p>
<p>Returns a new ChainMap object given a number of maps. This object
groups multiple dicts or other mappings together to create a single,
updateable view.</p>
<p>ChainMap s are useful managing nested contexts and overlays. An
example in the python world is found in the implementation of the
Context class in Django's template engine. It is useful for quickly
linking a number of</p>
<p>mappings so that the result can be treated as a single unit. It is
often much faster than creating a new dictionary and running multiple
update() calls.</p>
<p>Anytime one has a chain of lookup values there can be a case for
ChainMap. An example includes having both user specified values and a
dictionary of default values. Another example is the POST and GET
parameter maps found in</p>
<p>web use, e.g. Django or Flask. Through the use of ChainMap one
returns a combined view of two distinct dictionaries.</p>
<p>The maps parameter list is ordered from first-searched to
last-searched. Lookups search the underlying mappings successively until
a key is found. In contrast, writes, updates, and deletions only operate
on the first mapping.</p>
<p><strong>import</strong> collections</p>
<p># define two dictionaries with at least some keys overlapping.
<em>dict1 = {'apple': 1, 'banana': 2}</em></p>
<p>dict2 = {'coconut': 1, 'date': 1, 'apple': 3}</p>
<p># create two ChainMaps with different ordering of those dicts.
<em>combined_dict = collections.ChainMap(dict1, dict2)</em></p>
<p>reverse_ordered_dict = collections.ChainMap(dict2, dict1)</p>
<p>Note the impact of order on which value is found first in the
subsequent lookup</p>
<p><strong>for</strong> k, v <strong>in</strong>
combined_dict.items():</p>
<p><strong>print</strong>(k, v)</p>
<p>date 1</p>
<p>apple 1</p>
<p>banana 2</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 280</p>
<p>coconut 1</p>
<p><strong>for</strong> k, v <strong>in</strong>
reverse_ordered_dict.items():</p>
<p><strong>print</strong>(k, v)</p>
<p>date 1</p>
<p>apple 3</p>
<p>banana 2</p>
<p>coconut 1</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 281</p>
<p><span id="Chapter_48__Operator_module_1"
class="anchor"></span>Chapter 48: Operator module</p>
<p>Section 48.1: Itemgetter</p>
<p>Grouping the key-value pairs of a dictionary by the value with
itemgetter:</p>
<p><strong>from</strong> itertools <strong>import</strong> groupby</p>
<p><strong>from</strong> operator <strong>import</strong> itemgetter</p>
<p>adict = {'a': 1, 'b': 5, 'c': 1}</p>
<p>dict((i, dict(v)) <strong>for</strong> i, v <strong>in</strong>
groupby(adict.items(), itemgetter(1))) <em># Output: {1: {'a': 1, 'c':
1}, 5: {'b': 5}}</em></p>
<p>which is equivalent (but faster) to a <strong>lambda</strong>
function like this:</p>
<p>dict((i, dict(v)) <strong>for</strong> i, v <strong>in</strong>
groupby(adict.items(), <strong>lambda</strong> x: x[1]))</p>
<p>Or sorting a list of tuples by the second element first the first
element as secondary:</p>
<p>alist_of_tuples = [(5,2), (1,3), (2,2)]</p>
<p>sorted(alist_of_tuples, key=itemgetter(1,0))</p>
<p># Output: [(2, 2), (5, 2), (1, 3)]</p>
<p>Section 48.2: Operators as alternative to an infix operator</p>
<p>For every infix operator, e.g. + there is an operator-function
(operator.add for +):</p>
<p>1 + 1</p>
<p># Output: 2</p>
<p><strong>from</strong> operator <strong>import</strong> add</p>
<p>add(1, 1)</p>
<p># Output: 2</p>
<p>even though the main documentation states that for the arithmetic
operators only numerical input is allowed it <em>is</em></p>
<p>possible:</p>
<p><strong>from</strong> operator <strong>import</strong> mul</p>
<p>mul('a', 10)</p>
<p># Output: 'aaaaaaaaaa'</p>
<p>mul([3], 3)</p>
<p># Output: [3, 3, 3]</p>
<p>See also: <a
href="https://docs.python.org/3/library/operator.html#mapping-operators-to-functions">mapping
from operation to operator function in the official Python
documentation.</a></p>
<p>Section 48.3: Methodcaller</p>
<p>Instead of this <strong>lambda</strong>-function that calls the
method explicitly:</p>
<p>alist = ['wolf', 'sheep', 'duck']</p>
<p><em>list(filter(<strong>lambda</strong> x: x.startswith('d'),
alist))</em> # Keep only elements that start with 'd' # Output:
['duck']</p>
<p>one could use a operator-function that does the same:</p>
<p><strong>from</strong> operator <strong>import</strong>
methodcaller</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 282</p>
<p>list(filter(methodcaller('startswith', 'd'), alist)) <em># Does the
same but is faster. # Output: ['duck']</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 283</p>
<p><span id="Chapter_49__JSON_Module_1" class="anchor"></span>Chapter
49: JSON Module</p>
<p>Section 49.1: Storing data in a file</p>
<p>The following snippet encodes the data stored in d into JSON and
stores it in a file (replace filename with the actual name of the
file).</p>
<p>import <strong>json</strong></p>
<p>d = {</p>
<p>'foo': 'bar',</p>
<p>'alice': 1,</p>
<p>'wonderland': [1, 2, 3]</p>
<p>}</p>
<p><strong>with</strong> open(filename, 'w') <strong>as</strong> f:</p>
<p>json.dump(d, f)</p>
<p>Section 49.2: Retrieving data from a file</p>
<p>The following snippet opens a JSON encoded file (replace filename
with the actual name of the file) and returns the</p>
<p>object that is stored in the file.</p>
<p>import <strong>json</strong></p>
<p><strong>with</strong> open(filename, 'r') <strong>as</strong> f:</p>
<p>d = json.load(f)</p>
<p>Section 49.3: Formatting JSON output</p>
<p>Let's say we have the following data:</p>
<p>&gt;&gt;&gt; data = {"cats": [{"name": "Tubbs", "color": "white"},
{"name": "Pepper", "color": "black"}]}</p>
<p>Just dumping this as JSON does not do anything special here:</p>
<p>&gt;&gt;&gt; <strong>print</strong>(json.dumps(data))</p>
<p>{"cats": [{"name": "Tubbs", "color": "white"}, {"name": "Pepper",
"color": "black"}]}</p>
<p>Setting indentation to get prettier output</p>
<p>If we want pretty printing, we can set an indent size:</p>
<p>&gt;&gt;&gt; <strong>print</strong>(json.dumps(data, indent=2))</p>
<p>{</p>
<p>"cats": [</p>
<p>{</p>
<p>"name": "Tubbs",</p>
<p>"color": "white"</p>
<p>},</p>
<p>{</p>
<p>"name": "Pepper",</p>
<p>"color": "black"</p>
<p>}</p>
<p>]</p>
<p>}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 284</p>
<p><span id="Sorting_keys_alphabetically_to_g"
class="anchor"></span>Sorting keys alphabetically to get consistent
output</p>
<p>By default the order of keys in the output is undefined. We can get
them in alphabetical order to make sure we</p>
<p>always get the same output:</p>
<p>&gt;&gt;&gt; <strong>print</strong>(json.dumps(data,
sort_keys=True))</p>
<p>{"cats": [{"color": "white", "name": "Tubbs"}, {"color": "black",
"name": "Pepper"}]}</p>
<p>Getting rid of whitespace to get compact output</p>
<p>We might want to get rid of the unnecessary spaces, which is done by
setting separator strings different from the</p>
<p>default ', ' and ': ':</p>
<p>&gt;&gt;&gt;<strong>print</strong>(json.dumps(data, separators=(',',
':')))</p>
<p>{"cats":[{"name":"Tubbs","color":"white"},{"name":"Pepper","color":"black"}]}</p>
<p>Section 49.4: `load` vs `loads`, `dump` vs `dumps`</p>
<p>The json module contains functions for both reading and writing to
and from unicode strings, and reading and</p>
<p>writing to and from files. These are differentiated by a trailing s
in the function name. In these examples we use a StringIO object, but
the same functions would apply for any file-like object.</p>
<p>Here we use the string-based functions:</p>
<p>import <strong>json</strong></p>
<p>data = {u"foo": u"bar", u"baz": []}</p>
<p>json_string = json.dumps(data)</p>
<p># u'{"foo": "bar", "baz": []}'</p>
<p>json.loads(json_string)</p>
<p># {u"foo": u"bar", u"baz": []}</p>
<p>And here we use the file-based functions:</p>
<p>import <strong>json</strong></p>
<p><strong>from</strong> io <strong>import</strong> StringIO</p>
<p>json_file = StringIO()</p>
<p>data = {u"foo": u"bar", u"baz": []}</p>
<p>json.dump(data, json_file)</p>
<p>json_file.seek(0) <em># Seek back to the start of the file before
reading</em> json_file_content = json_file.read()</p>
<p># u'{"foo": "bar", "baz": []}'</p>
<p><em>json_file.seek(0)</em> # Seek back to the start of the file
before reading <em>json.load(json_file)</em></p>
<p># {u"foo": u"bar", u"baz": []}</p>
<p>As you can see the main difference is that when dumping json data you
must pass the file handle to the function, as opposed to capturing the
return value. Also worth noting is that you must seek to the start of
the file before reading</p>
<p>or writing, in order to avoid data corruption. When opening a file
the cursor is placed at position 0, so the below would also work:</p>
<p>import <strong>json</strong></p>
<p>json_file_path = './data.json'</p>
<p>data = {u"foo": u"bar", u"baz": []}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 285</p>
<p><span id="with_open_json_file_path___w___a"
class="anchor"></span><strong>with</strong> open(json_file_path, 'w')
<strong>as</strong> json_file:</p>
<p>json.dump(data, json_file)</p>
<p><strong>with</strong> open(json_file_path) <strong>as</strong>
json_file:</p>
<p>json_file_content = json_file.read()</p>
<p># u'{"foo": "bar", "baz": []}'</p>
<p><strong>with</strong> open(json_file_path) <strong>as</strong>
json_file:</p>
<p>json.load(json_file)</p>
<p># {u"foo": u"bar", u"baz": []}</p>
<p>Having both ways of dealing with json data allows you to
idiomatically and efficiently work with formats which build</p>
<p>upon json, such as pyspark's json-per-line:</p>
<p># loading from a file</p>
<p>data = [json.loads(line) <strong>for</strong> line
<strong>in</strong> open(file_path).splitlines()]</p>
<p># dumping to a file</p>
<p><strong>with</strong> open(file_path, 'w') <strong>as</strong>
json_file:</p>
<p><strong>for</strong> item <strong>in</strong> data:</p>
<p>json.dump(item, json_file)</p>
<p>json_file.write('<strong>\n</strong>')</p>
<p>Section 49.5: Calling `json.tool` from the command line to</p>
<p>pretty-print JSON output</p>
<p>Given some JSON file "foo.json" like:</p>
<p>{"foo": {"bar": {"baz": 1}}}</p>
<p>we can call the module directly from the command line (passing the
filename as an argument) to pretty-print it:</p>
<p>$ python -m json.tool foo.json</p>
<p>{</p>
<p>"foo": {</p>
<p>"bar": {</p>
<p>"baz": 1</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>The module will also take input from STDOUT, so (in Bash) we equally
could do:</p>
<p>$ cat foo.json | python -m json.tool</p>
<p>Section 49.6: JSON encoding custom objects</p>
<p>If we just try the following:</p>
<p>import <strong>json</strong></p>
<p><strong>from</strong> datetime <strong>import</strong> datetime</p>
<p>data = {'datetime': datetime(2016, 9, 26, 4, 44, 0)}</p>
<p><strong>print</strong>(json.dumps(data))</p>
<p>we get an error saying TypeError: datetime.datetime(2016, 9, 26, 4,
44) <strong>is not</strong> JSON serializable.</p>
<p>To be able to serialize the datetime object properly, we need to
write custom code for how to convert it:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 286</p>
<p><span id="class_DatetimeJSONEncoder_json_J"
class="anchor"></span><strong>class</strong>
DatetimeJSONEncoder(json.JSONEncoder):</p>
<p><strong>def</strong> default(self, obj):</p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> obj.isoformat()</p>
<p><strong>except</strong> AttributeError:</p>
<p># obj has no isoformat method; let the builtin JSON encoder handle it
<em><strong>return</strong> super(DatetimeJSONEncoder,
self).default(obj)</em></p>
<p>and then use this encoder class instead of json.dumps:</p>
<p>encoder = DatetimeJSONEncoder()</p>
<p><strong>print</strong>(encoder.encode(data))</p>
<p># prints {"datetime": "2016-09-26T04:44:00"}</p>
<p>Section 49.7: Creating JSON from Python dict</p>
<p>import <strong>json</strong></p>
<p>d = {</p>
<p>'foo': 'bar',</p>
<p>'alice': 1,</p>
<p>'wonderland': [1, 2, 3]</p>
<p>}</p>
<p>json.dumps(d)</p>
<p>The above snippet will return the following:</p>
<p>'{"wonderland": [1, 2, 3], "foo": "bar", "alice": 1}'</p>
<p>Section 49.8: Creating Python dict from JSON</p>
<p>import <strong>json</strong></p>
<p>s = '{"wonderland": [1, 2, 3], "foo": "bar", "alice": 1}'
json.loads(s)</p>
<p>The above snippet will return the following:</p>
<p>{u'alice': 1, u'foo': u'bar', u'wonderland': [1, 2, 3]}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 287</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"><strong>VIDEO:</strong>
Python for Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Science
and Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learning
Bootcamp</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learn
how to use NumPy, Pandas, Seaborn,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Matplotlib
, Plotly, Scikit-Learn , Machine Learning,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Tensorflow,
and more!</a></p>
<p><img src="media/index-313_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-313_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Python for Data Science and Machine Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Spark for Big Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Implement Machine Learning Algorithms</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use NumPy for Numerical Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Pandas for Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Matplotlib for Python Plotting</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Seaborn for statistical plots</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Plotly for interactive dynamic visualizations</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use SciKit-Learn for Machine Learning Tasks</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
K-Means Clustering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Logistic Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Linear Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Random Forest and Decision Trees</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Neural Networks <strong>Watch Today →</strong></a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Support Vector Machines</a></p>
<p><span id="Chapter_50__Sqlite3_Module_1" class="anchor"></span>Chapter
50: Sqlite3 Module</p>
<p>Section 50.1: Sqlite3 - Not require separate server process</p>
<p>The sqlite3 module was written by Gerhard Häring. To use the module,
you must first create a Connection object</p>
<p>that represents the database. Here the data will be stored in the
example.db file:</p>
<p><strong>import</strong> sqlite3</p>
<p>conn = sqlite3.connect('example.db')</p>
<p>You can also supply the special name :memory: to create a database in
RAM. Once you have a Connection, you can create a Cursor object and call
its execute() method to perform SQL commands:</p>
<p>c = conn.cursor()</p>
<p># Create table</p>
<p>c.execute('''CREATE TABLE stocks</p>
<p>(date text, trans text, symbol text, qty real, price real)''')</p>
<p># Insert a row of data</p>
<p>c.execute("INSERT INTO stocks VALUES
('2006-01-05','BUY','RHAT',100,35.14)")</p>
<p># Save (commit) the changes</p>
<p>conn.commit()</p>
<p># We can also close the connection if we are done with it. # Just be
sure any changes have been committed or they will be lost.
<em>conn.close()</em></p>
<p>Section 50.2: Getting the values from the database and Error</p>
<p>handling</p>
<p>Fetching the values from the SQLite3 database.</p>
<p>Print row values returned by select query</p>
<p><strong>import</strong> sqlite3</p>
<p>conn = sqlite3.connect('example.db')</p>
<p>c = conn.cursor()</p>
<p>c.execute("SELECT * from table_name where id=cust_id")
<strong>for</strong> row <strong>in</strong> c:</p>
<p><em><strong>print</strong> row</em> # will be a list</p>
<p>To fetch single matching fetchone() method</p>
<p><strong>print</strong> c.fetchone()</p>
<p>For multiple rows use fetchall() method</p>
<p><em>a=c.fetchall()</em> #which is similar to list(cursor) method used
previously <em><strong>for</strong> row <strong>in</strong> a:</em></p>
<p>print <strong>row</strong></p>
<p>Error handling can be done using sqlite3.Error built in function</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 289</p>
<p>try<strong>:</strong></p>
<p>#SQL Code</p>
<p><strong>except</strong> sqlite3.Error <strong>as</strong> e:</p>
<p><strong>print</strong> "An error occurred:", e.args[0]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 290</p>
<p><span id="Chapter_51__The_os_Module_1" class="anchor"></span>Chapter
51: The os Module</p>
<p>Parameter Details</p>
<p>Path A path to a file. The path separator may be determined by
os.path.sep.</p>
<p>Mode The desired permission, in octal (e.g. 0700)</p>
<p>This module provides a portable way of using operating system
dependent functionality.</p>
<p>Section 51.1: makedirs - recursive directory creation</p>
<p>Given a local directory with the following contents:</p>
<p>└── dir1</p>
<p>├── subdir1</p>
<p>└── subdir2</p>
<p>We want to create the same subdir1, subdir2 under a new directory
dir2, which does not exist yet.</p>
<p>import <strong>os</strong></p>
<p>os.makedirs("./dir2/subdir1")</p>
<p>os.makedirs("./dir2/subdir2")</p>
<p>Running this results in</p>
<p>├── dir1</p>
<p>│ ├── subdir1</p>
<p>│ └── subdir2</p>
<p>└── dir2</p>
<p>├── subdir1</p>
<p>└── subdir2</p>
<p>dir2 is only created the first time it is needed, for subdir1's
creation.</p>
<p>If we had used <strong>os.mkdir</strong> instead, we would have had
an exception because dir2 would not have existed yet.</p>
<p>os.mkdir("./dir2/subdir1")</p>
<p>OSError: [Errno 2] No such file <strong>or</strong> directory:
'./dir2/subdir1'</p>
<p>os.makedirs won't like it if the target directory exists already. If
we re-run it again:</p>
<p>OSError: [Errno 17] File exists: './dir2/subdir1'</p>
<p>However, this could easily be fixed by catching the exception and
checking that the directory has been created.</p>
<p>try<strong>:</strong></p>
<p>os.makedirs("./dir2/subdir1")</p>
<p><strong>except</strong> OSError:</p>
<p><strong>if not</strong> os.path.isdir("./dir2/subdir1"):</p>
<p>raise</p>
<p>try<strong>:</strong></p>
<p>os.makedirs("./dir2/subdir2")</p>
<p><strong>except</strong> OSError:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 291</p>
<p><span id="if_not_os_path_isdir____dir2_sub"
class="anchor"></span><strong>if not</strong>
os.path.isdir("./dir2/subdir2"):</p>
<p>raise</p>
<p>Section 51.2: Create a directory</p>
<p>os.mkdir('newdir')</p>
<p>If you need to specify permissions, you can use the optional mode
argument:</p>
<p>os.mkdir('newdir', mode=0700)</p>
<p>Section 51.3: Get current directory</p>
<p>Use the os.getcwd() function:</p>
<p><strong>print</strong>(os.getcwd())</p>
<p>Section 51.4: Determine the name of the operating system</p>
<p>The os module provides an interface to determine what type of
operating system the code is currently running on.</p>
<p>os.name</p>
<p>This can return one of the following in Python 3:</p>
<p>posix</p>
<p>nt</p>
<p>ce</p>
<p>java</p>
<p><a
href="https://docs.python.org/3/library/sys.html#sys.platform">More
detailed information can be retrieved from sys.platform</a></p>
<p>Section 51.5: Remove a directory</p>
<p>Remove the directory at path:</p>
<p>os.rmdir(path)</p>
<p>You should not use os.remove() to remove a directory. That function
is for <em>files</em> and using it on directories will</p>
<p>result in an OSError</p>
<p>Section 51.6: Follow a symlink (POSIX)</p>
<p>Sometimes you need to determine the target of a symlink. os.readlink
will do this:</p>
<p><strong>print</strong>(os.readlink(path_to_symlink))</p>
<p>Section 51.7: Change permissions on a file</p>
<p>os.chmod(path, mode)</p>
<p>where mode is the desired permission, in octal.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 292</p>
<p><span id="Chapter_52__The_locale_Module_1"
class="anchor"></span>Chapter 52: The locale Module</p>
<p>Section 52.1: Currency Formatting US Dollars Using the locale</p>
<p>Module</p>
<p><strong>import</strong> locale</p>
<p>locale.setlocale(locale.LC_ALL, '')</p>
<p>Out[2]: 'English_United States.1252'</p>
<p>locale.currency(762559748.49)</p>
<p>Out[3]: '$762559748.49'</p>
<p>locale.currency(762559748.49, grouping=True)</p>
<p>Out[4]: '$762,559,748.49'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 293</p>
<p><span id="Chapter_53__Itertools_Module_1"
class="anchor"></span>Chapter 53: Itertools Module</p>
<p>Section 53.1: Combinations method in Itertools Module</p>
<p>itertools.combinations will return a generator of the
<em>k</em>-combination sequence of a list.</p>
<p><strong>In other words:</strong> It will return a generator of tuples
of all the possible k-wise combinations of the input list.</p>
<p>For Example:</p>
<p>If you have a list:</p>
<p>a = [1,2,3,4,5]</p>
<p>b = list(itertools.combinations(a, 2))</p>
<p>print <strong>b</strong></p>
<p>Output:</p>
<p>[(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3,
5), (4, 5)]</p>
<p>The above output is a generator converted to a list of tuples of all
the possible <em>pair</em>-wise combinations of the input list a</p>
<p>You can also find all the 3-combinations:</p>
<p>a = [1,2,3,4,5]</p>
<p>b = list(itertools.combinations(a, 3))</p>
<p>print <strong>b</strong></p>
<p>Output:</p>
<p>[(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4),</p>
<p>(1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5),</p>
<p>(2, 4, 5), (3, 4, 5)]</p>
<p>Section 53.2: itertools.dropwhile</p>
<p>itertools.dropwhile enables you to take items from a sequence after a
condition first becomes False.</p>
<p><strong>def</strong> is_even(x):</p>
<p><strong>return</strong> x % 2 == 0</p>
<p>lst = [0, 2, 4, 12, 18, 13, 14, 22, 23, 44]</p>
<p>result = list(itertools.dropwhile(is_even, lst))</p>
<p><strong>print</strong>(result)</p>
<p>This outputs [13, 14, 22, 23, 44].</p>
<p><em>(</em>This example is same as the example for takewhile but using
dropwhile.<em>)</em></p>
<p>Note that, the first number that violates the predicate (i.e.: the
function returning a Boolean value) is_even is, 13.</p>
<p>All the elements before that, are discarded.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 294</p>
<p><span id="The_output_produced_by_dropwhile" class="anchor"></span>The
<strong>output produced</strong> by dropwhile is similar to the output
generated from the code below.</p>
<p><strong>def</strong> dropwhile(predicate, iterable):</p>
<p>iterable = iter(iterable)</p>
<p><strong>for</strong> x <strong>in</strong> iterable:</p>
<p><strong>if not</strong> predicate(x):</p>
<p>yield <strong>x</strong></p>
<p>break</p>
<p><strong>for</strong> x <strong>in</strong> iterable:</p>
<p>yield <strong>x</strong></p>
<p>The concatenation of results produced by takewhile and dropwhile
produces the original iterable.</p>
<p>result = list(itertools.takewhile(is_even, lst)) +
list(itertools.dropwhile(is_even, lst))</p>
<p>Section 53.3: Zipping two iterators until they are both</p>
<p>exhausted</p>
<p>Similar to the built-in function zip(), itertools.zip_longest will
continue iterating beyond the end of the shorter of two iterables.</p>
<p><strong>from</strong> itertools <strong>import</strong>
zip_longest</p>
<p>a = [i <strong>for</strong> i <strong>in</strong> range(5)] <em>#
Length is 5</em></p>
<p>b = ['a', 'b', 'c', 'd', 'e', 'f', 'g'] <em># Length is 7</em></p>
<p><strong>for</strong> i <strong>in</strong> zip_longest(a, b):</p>
<p><em>x, y = i</em> # Note that zip longest returns the values as a
tuple</p>
<p><strong>print</strong>(x, y)</p>
<p>An optional fillvalue argument can be passed (defaults to '') like
so:</p>
<p><strong>for</strong> i <strong>in</strong> zip_longest(a, b,
fillvalue='Hogwash!'):</p>
<p><em>x, y = i</em> # Note that zip longest returns the values as a
tuple</p>
<p><strong>print</strong>(x, y)</p>
<p>In Python 2.6 and 2.7, this function is called
itertools.izip_longest.</p>
<p>Section 53.4: Take a slice of a generator</p>
<p>Itertools "islice" allows you to slice a generator:</p>
<p><em>results = fetch_paged_results()</em> # returns a generator
<em>limit = 20</em> # Only want the first 20 results</p>
<p><strong>for</strong> data <strong>in</strong>
itertools.islice(results, limit):</p>
<p><strong>print</strong>(data)</p>
<p>Normally you cannot slice a generator:</p>
<p><strong>def</strong> gen():</p>
<p>n = 0</p>
<p><strong>while</strong> n &lt; 20:</p>
<p>n += 1</p>
<p>yield <strong>n</strong></p>
<p><strong>for</strong> part <strong>in</strong> gen()[:3]:</p>
<p><strong>print</strong>(part)</p>
<p>Will give</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 295</p>
<p><span id="Traceback__most_recent_call_last"
class="anchor"></span>Traceback (most recent call last):</p>
<p>File "gen.py", line 6, <strong>in</strong></p>
<p><strong>for</strong> part <strong>in</strong> gen()[:3]:</p>
<p>TypeError: 'generator' object <strong>is not</strong>
subscriptable</p>
<p>However, this works:</p>
<p><strong>import</strong> itertools</p>
<p><strong>def</strong> gen():</p>
<p>n = 0</p>
<p><strong>while</strong> n &lt; 20:</p>
<p>n += 1</p>
<p>yield <strong>n</strong></p>
<p><strong>for</strong> part <strong>in</strong> itertools.islice(gen(),
3):</p>
<p><strong>print</strong>(part)</p>
<p>Note that like a regular slice, you can also use start, stop and step
arguments:</p>
<p>itertools.islice(iterable, 1, 30, 3)</p>
<p>Section 53.5: Grouping items from an iterable object using a</p>
<p>function</p>
<p>Start with an iterable which needs to be grouped</p>
<p>lst = [("a", 5, 6), ("b", 2, 4), ("a", 2, 5), ("c", 2, 6)]</p>
<p>Generate the grouped generator, grouping by the second element in
each tuple:</p>
<p><strong>def</strong> testGroupBy(lst):</p>
<p>groups = itertools.groupby(lst, key=<strong>lambda</strong> x:
x[1])</p>
<p><strong>for</strong> key, group <strong>in</strong> groups:</p>
<p><strong>print</strong>(key, list(group))</p>
<p>testGroupBy(lst)</p>
<p># 5 [('a', 5, 6)]</p>
<p># 2 [('b', 2, 4), ('a', 2, 5), ('c', 2, 6)]</p>
<p>Only groups of consecutive elements are grouped. You may need to sort
by the same key before calling groupby For E.g, (Last element is
changed)</p>
<p>lst = [("a", 5, 6), ("b", 2, 4), ("a", 2, 5), ("c", 5, 6)]</p>
<p>testGroupBy(lst)</p>
<p># 5 [('a', 5, 6)]</p>
<p># 2 [('b', 2, 4), ('a', 2, 5)]</p>
<p># 5 [('c', 5, 6)]</p>
<p>The group returned by groupby is an iterator that will be invalid
before next iteration. E.g the following will not work</p>
<p>if you want the groups to be sorted by key. Group 5 is empty below
because when group 2 is fetched it invalidates 5</p>
<p>lst = [("a", 5, 6), ("b", 2, 4), ("a", 2, 5), ("c", 2, 6)]</p>
<p>groups = itertools.groupby(lst, key=<strong>lambda</strong> x: x[1])
<strong>for</strong> key, group <strong>in</strong> sorted(groups):</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 296</p>
<p><span id="print_key__list_group"
class="anchor"></span><strong>print</strong>(key, list(group))</p>
<p># 2 [('c', 2, 6)]</p>
<p># 5 []</p>
<p>To correctly do sorting, create a list from the iterator before
sorting</p>
<p>groups = itertools.groupby(lst, key=<strong>lambda</strong> x: x[1])
<strong>for</strong> key, group <strong>in</strong> sorted((key,
list(group)) <strong>for</strong> key, group <strong>in</strong>
groups):</p>
<p><strong>print</strong>(key, list(group))</p>
<p># 2 [('b', 2, 4), ('a', 2, 5), ('c', 2, 6)]</p>
<p># 5 [('a', 5, 6)]</p>
<p>Section 53.6: itertools.takewhile</p>
<p>itertools.takewhile enables you to take items from a sequence until a
condition first becomes False.</p>
<p><strong>def</strong> is_even(x):</p>
<p><strong>return</strong> x % 2 == 0</p>
<p>lst = [0, 2, 4, 12, 18, 13, 14, 22, 23, 44]</p>
<p>result = list(itertools.takewhile(is_even, lst))</p>
<p><strong>print</strong>(result)</p>
<p>This outputs [0, 2, 4, 12, 18].</p>
<p>Note that, the first number that violates the predicate (i.e.: the
function returning a Boolean value) is_even is, 13.</p>
<p>Once takewhile encounters a value that produces False for the given
predicate, it breaks out.</p>
<p>The <strong>output produced</strong> by takewhile is similar to the
output generated from the code below.</p>
<p><strong>def</strong> takewhile(predicate, iterable):</p>
<p><strong>for</strong> x <strong>in</strong> iterable:</p>
<p><strong>if</strong> predicate(x):</p>
<p>yield <strong>x</strong></p>
<p>else<strong>:</strong></p>
<p>break</p>
<p><strong>Note:</strong> The concatenation of results produced by
takewhile and dropwhile produces the original iterable.</p>
<p>result = list(itertools.takewhile(is_even, lst)) +
list(itertools.dropwhile(is_even, lst))</p>
<p>Section 53.7: itertools.permutations</p>
<p>itertools.permutations returns a generator with successive r-length
permutations of elements in the iterable.</p>
<p>a = [1,2,3]</p>
<p>list(itertools.permutations(a))</p>
<p># [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2,
1)]</p>
<p>list(itertools.permutations(a, 2))</p>
<p>[(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 297</p>
<p><span id="if_the_list_a_has_duplicate_elem" class="anchor"></span>if
the list a has duplicate elements, the resulting permutations will have
duplicate elements, you can use set to get unique permutations:</p>
<p>a = [1,2,1]</p>
<p>list(itertools.permutations(a))</p>
<p># [(1, 2, 1), (1, 1, 2), (2, 1, 1), (2, 1, 1), (1, 1, 2), (1, 2,
1)]</p>
<p>set(itertools.permutations(a))</p>
<p># {(1, 1, 2), (1, 2, 1), (2, 1, 1)}</p>
<p>Section 53.8: itertools.repeat</p>
<p>Repeat something n times:</p>
<p>&gt;&gt;&gt; <strong>import</strong> itertools</p>
<p>&gt;&gt;&gt; <strong>for</strong> i <strong>in</strong>
itertools.repeat('over-and-over', 3):</p>
<p>... <strong>print</strong>(i)</p>
<p>over-and-over</p>
<p>over-and-over</p>
<p>over-and-over</p>
<p>Section 53.9: Get an accumulated sum of numbers in an</p>
<p>iterable</p>
<p>Python 3.x Version ≥ 3.2</p>
<p>accumulate yields a cumulative sum (or product) of numbers.</p>
<p>&gt;&gt;&gt; <strong>import</strong> itertools <strong>as</strong>
it</p>
<p>&gt;&gt;&gt; <strong>import</strong> operator</p>
<p>&gt;&gt;&gt; list(it.accumulate([1,2,3,4,5]))</p>
<p>[1, 3, 6, 10, 15]</p>
<p>&gt;&gt;&gt; list(it.accumulate([1,2,3,4,5], func=operator.mul)) [1,
2, 6, 24, 120]</p>
<p>Section 53.10: Cycle through elements in an iterator</p>
<p>cycle is an infinite iterator.</p>
<p>&gt;&gt;&gt; <strong>import</strong> itertools <strong>as</strong>
it</p>
<p>&gt;&gt;&gt; it.cycle('ABCD')</p>
<p>A B C D A B C D A B C D ...</p>
<p>Therefore, take care to give boundaries when using this to avoid an
infinite loop. Example:</p>
<p><em>&gt;&gt;&gt;</em> # Iterate over each element in cycle for a
fixed range <em>&gt;&gt;&gt; cycle_iterator =
it.cycle('abc123')</em></p>
<p>&gt;&gt;&gt; [next(cycle_iterator) <strong>for</strong> i
<strong>in</strong> range(0, 10)]</p>
<p>['a', 'b', 'c', '1', '2', '3', 'a', 'b', 'c', '1']</p>
<p>Section 53.11: itertools.product</p>
<p>This function lets you iterate over the Cartesian product of a list
of iterables.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 298</p>
<p><span id="For_example" class="anchor"></span>For example,</p>
<p><strong>for</strong> x, y <strong>in</strong>
itertools.product(xrange(10), xrange(10)):</p>
<p>print <strong>x, y</strong></p>
<p>is equivalent to</p>
<p><strong>for</strong> x <strong>in</strong> xrange(10):</p>
<p><strong>for</strong> y <strong>in</strong> xrange(10):</p>
<p>print <strong>x, y</strong></p>
<p>Like all python functions that accept a variable number of arguments,
we can pass a list to itertools.product for</p>
<p>unpacking, with the * operator.</p>
<p>Thus,</p>
<p>its = [xrange(10)] * 2</p>
<p><strong>for</strong> x,y <strong>in</strong>
itertools.product(*its):</p>
<p>print <strong>x, y</strong></p>
<p>produces the same results as both of the previous examples.</p>
<p>&gt;&gt;&gt; <strong>from</strong> itertools <strong>import</strong>
product</p>
<p>&gt;&gt;&gt; a=[1,2,3,4]</p>
<p>&gt;&gt;&gt; b=['a','b','c']</p>
<p>&gt;&gt;&gt; product(a,b)</p>
<p>&gt;&gt;&gt; <strong>for</strong> i <strong>in</strong>
product(a,b):</p>
<p>... <strong>print</strong> i</p>
<p>...</p>
<p>(1, 'a')</p>
<p>(1, 'b')</p>
<p>(1, 'c')</p>
<p>(2, 'a')</p>
<p>(2, 'b')</p>
<p>(2, 'c')</p>
<p>(3, 'a')</p>
<p>(3, 'b')</p>
<p>(3, 'c')</p>
<p>(4, 'a')</p>
<p>(4, 'b')</p>
<p>(4, 'c')</p>
<p>Section 53.12: itertools.count</p>
<p>Introduction:</p>
<p>This simple function generates infinite series of numbers. For
example...</p>
<p><strong>for</strong> number <strong>in</strong>
itertools.count():</p>
<p><strong>if</strong> number &gt; 20:</p>
<p>break</p>
<p><strong>print</strong>(number)</p>
<p>Note that we must break or it prints forever!</p>
<p>Output:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 299</p>
<p><span id="0_1" class="anchor"></span>0</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<p>7</p>
<p>8</p>
<p>9</p>
<p>10</p>
<p>Arguments:</p>
<p>count() takes two arguments, start and step:</p>
<p><strong>for</strong> number <strong>in</strong>
itertools.count(start=10, step=4):</p>
<p><strong>print</strong>(number)</p>
<p><strong>if</strong> number &gt; 20:</p>
<p>break</p>
<p>Output:</p>
<p>10</p>
<p>14</p>
<p>18</p>
<p>22</p>
<p>Section 53.13: Chaining multiple iterators together</p>
<p>Use <a
href="https://docs.python.org/3.4/library/itertools.html#itertools.chain">itertools.chain</a>
to create a single generator which will yield the values from several
generators in sequence.</p>
<p><strong>from</strong> itertools <strong>import</strong> chain</p>
<p>a = (x <strong>for</strong> x <strong>in</strong> ['1', '2', '3',
'4'])</p>
<p>b = (x <strong>for</strong> x <strong>in</strong> ['x', 'y',
'z'])</p>
<p>' '.join(chain(a, b))</p>
<p>Results in:</p>
<p>'1 2 3 4 x y z'</p>
<p>As an alternate constructor, you can use the classmethod
chain.from_iterable which takes as its single parameter</p>
<p>an iterable of iterables. To get the same result as above:</p>
<p>' '.join(chain.from_iterable([a,b])</p>
<p>While chain can take an arbitrary number of arguments,
chain.from_iterable is the only way to chain an <em>infinite</em> number
of iterables.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 300</p>
<p><span id="Chapter_54__Asyncio_Module_1" class="anchor"></span>Chapter
54: Asyncio Module</p>
<p>Section 54.1: Coroutine and Delegation Syntax</p>
<p>Before Python 3.5+ was released, the asyncio module used generators
to mimic asynchronous calls and thus had a different syntax than the
current Python 3.5 release.</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>Python 3.5 introduced the async and await keywords. Note the lack of
parentheses around the await func() call.</p>
<p><strong>import</strong> asyncio</p>
<p>async <strong>def</strong> main():</p>
<p><strong>print</strong>(await func())</p>
<p>async <strong>def</strong> func():</p>
<p># Do time intensive stuff...</p>
<p><strong>return</strong> "Hello, world!"</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>loop = asyncio.get_event_loop()</p>
<p>loop.run_until_complete(main())</p>
<p>Python 3.x Version ≥ 3.3 Version &lt; 3.5</p>
<p>Before Python 3.5, the @asyncio.coroutine decorator was used to
define a coroutine. The yield from expression was used for generator
delegation. Note the parentheses around the <strong>yield from</strong>
func().</p>
<p><strong>import</strong> asyncio</p>
<p>@asyncio.coroutine</p>
<p><strong>def</strong> main():</p>
<p>print<strong>((</strong>yield from <strong>func()))</strong></p>
<p>@asyncio.coroutine</p>
<p><strong>def</strong> func():</p>
<p># Do time intensive stuff..</p>
<p><strong>return</strong> "Hello, world!"</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>loop = asyncio.get_event_loop()</p>
<p>loop.run_until_complete(main())</p>
<p>Python 3.x Version ≥ 3.5</p>
<p>Here is an example that shows how two functions can be run
asynchronously:</p>
<p><strong>import</strong> asyncio</p>
<p>async <strong>def</strong> cor1():</p>
<p><strong>print</strong>("cor1 start")</p>
<p><strong>for</strong> i <strong>in</strong> range(10):</p>
<p>await asyncio.sleep(1.5)</p>
<p><strong>print</strong>("cor1", i)</p>
<p>async <strong>def</strong> cor2():</p>
<p><strong>print</strong>("cor2 start")</p>
<p><strong>for</strong> i <strong>in</strong> range(15):</p>
<p>await asyncio.sleep(1)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 301</p>
<p><span id="print__cor2___i"
class="anchor"></span><strong>print</strong>("cor2", i)</p>
<p>loop = asyncio.get_event_loop()</p>
<p>cors = asyncio.wait([cor1(), cor2()])</p>
<p>loop.run_until_complete(cors)</p>
<p>Section 54.2: Asynchronous Executors</p>
<p>Note: Uses the Python 3.5+ async/await syntax</p>
<p>asyncio supports the use of Executor objects found in
concurrent.futures for scheduling tasks asynchronously. Event loops have
the function run_in_executor() which takes an Executor object, a
Callable, and the Callable's</p>
<p>parameters.</p>
<p>Scheduling a task for an Executor</p>
<p><strong>import</strong> asyncio</p>
<p><strong>from</strong> concurrent.futures <strong>import</strong>
ThreadPoolExecutor</p>
<p><strong>def</strong> func(a, b):</p>
<p># Do time intensive stuff...</p>
<p>return <strong>a + b</strong></p>
<p>async <strong>def</strong> main(loop):</p>
<p>executor = ThreadPoolExecutor()</p>
<p>result = await loop.run_in_executor(executor, func, "Hello,", "
world!")</p>
<p><strong>print</strong>(result)</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>loop = asyncio.get_event_loop()</p>
<p>loop.run_until_complete(main(loop))</p>
<p>Each event loop also has a "default" Executor slot that can be
assigned to an Executor. To assign an Executor and schedule tasks from
the loop you use the set_default_executor() method.</p>
<p><strong>import</strong> asyncio</p>
<p><strong>from</strong> concurrent.futures <strong>import</strong>
ThreadPoolExecutor</p>
<p><strong>def</strong> func(a, b):</p>
<p># Do time intensive stuff...</p>
<p>return <strong>a + b</strong></p>
<p>async <strong>def</strong> main(loop):</p>
<p># NOTE: Using `None` as the first parameter designates the `default`
Executor.</p>
<p>result = await loop.run_in_executor(None, func, "Hello,", "
world!")</p>
<p><strong>print</strong>(result)</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>loop = asyncio.get_event_loop()</p>
<p>loop.set_default_executor(ThreadPoolExecutor())</p>
<p>loop.run_until_complete(main(loop))</p>
<p>There are two main types of Executor in concurrent.futures, the
ThreadPoolExecutor and the</p>
<p>ProcessPoolExecutor . The ThreadPoolExecutor contains a pool of
threads which can either be manually set to a specific number of threads
through the constructor or defaults to the number of cores on the
machine times 5. The</p>
<p>ThreadPoolExecutor uses the pool of threads to execute tasks assigned
to it and is generally better at CPU-bound operations rather than I/O
bound operations. Contrast that to the ProcessPoolExecutor which spawns
a new</p>
<p>process for each task assigned to it. The ProcessPoolExecutor can
only take tasks and parameters that are</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 302</p>
<p><span id="picklable__The_most_common_non_p"
class="anchor"></span>picklable. The most common non-picklable tasks are
the methods of objects. If you must schedule an object's method as a
task in an Executor you must use a ThreadPoolExecutor.</p>
<p>Section 54.3: Using UVLoop</p>
<p>uvloop is an implementation for the asyncio.AbstractEventLoop based
on libuv (Used by nodejs). It is compliant with 99% of asyncio features
and is much faster than the traditional asyncio.EventLoop. uvloop is
currently not</p>
<p>available on Windows, install it with pip install uvloop.</p>
<p><strong>import</strong> asyncio</p>
<p><strong>import</strong> uvloop</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>asyncio.set_event_loop(uvloop.new_event_loop())</p>
<p># Do your stuff here ...</p>
<p>One can also change the event loop factory by setting the
EventLoopPolicy to the one in uvloop.</p>
<p><strong>import</strong> asyncio</p>
<p><strong>import</strong> uvloop</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())</p>
<p>loop = asyncio.new_event_loop()</p>
<p>Section 54.4: Synchronization Primitive: Event</p>
<p>Concept</p>
<p><strong>Use an Event to</strong> synchronize the scheduling of
multiple coroutines<strong>.</strong></p>
<p>Put simply, an event is like the gun shot at a running race: it lets
the runners off the starting blocks.</p>
<p>Example</p>
<p><strong>import</strong> asyncio</p>
<p># event trigger function</p>
<p><strong>def</strong> trigger(event):</p>
<p><strong>print</strong>('EVENT SET')</p>
<p><em>event.set()</em> # wake up coroutines waiting</p>
<p># event consumers</p>
<p>async <strong>def</strong> consumer_a(event):</p>
<p>consumer_name = 'Consumer A'</p>
<p><strong>print</strong>('{} waiting'.format(consumer_name))</p>
<p>await event.wait()</p>
<p><strong>print</strong>('{} triggered'.format(consumer_name))</p>
<p>async <strong>def</strong> consumer_b(event):</p>
<p>consumer_name = 'Consumer B'</p>
<p><strong>print</strong>('{} waiting'.format(consumer_name))</p>
<p>await event.wait()</p>
<p><strong>print</strong>('{} triggered'.format(consumer_name))</p>
<p># event</p>
<p>event = asyncio.Event()</p>
<p># wrap coroutines in one future</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 303</p>
<p><span id="main_future___asyncio_wait__cons"
class="anchor"></span>main_future = asyncio.wait([consumer_a(event),</p>
<p>consumer_b(event)])</p>
<p># event loop</p>
<p>event_loop = asyncio.get_event_loop()</p>
<p>event_loop.call_later(0.1, functools.partial(trigger, event)) <em>#
trigger event in 0.1 sec</em></p>
<p># complete main_future</p>
<p>done, pending = event_loop.run_until_complete(main_future)</p>
<p>Output:</p>
<p>Consumer B waiting</p>
<p>Consumer A waiting</p>
<p>EVENT SET</p>
<p>Consumer B triggered</p>
<p>Consumer A triggered</p>
<p>Section 54.5: A Simple Websocket</p>
<p>Here we make a simple echo websocket using asyncio. We define
coroutines for connecting to a server and</p>
<p>sending/receiving messages. The communications of the websocket are
run in a main coroutine, which is run by an</p>
<p><a
href="https://stackoverflow.com/questions/37369849/how-can-i-implement-asyncio-websockets-in-a-class">event
loop. This example is modified from a prior post.</a></p>
<p><strong>import</strong> asyncio</p>
<p><strong>import</strong> aiohttp</p>
<p>session = aiohttp.ClientSession() <em># handles the context
manager</em> <strong>class</strong> EchoWebsocket:</p>
<p>async <strong>def</strong> connect(self):</p>
<p>self.websocket = await
session.ws_connect("wss://echo.websocket.org")</p>
<p>async <strong>def</strong> send(self, message):</p>
<p>self.websocket.send_str(message)</p>
<p>async <strong>def</strong> receive(self):</p>
<p>result = (await self.websocket.receive())</p>
<p><strong>return</strong> result.data</p>
<p>async <strong>def</strong> main():</p>
<p>echo = EchoWebsocket()</p>
<p>await echo.connect()</p>
<p>await echo.send("Hello World!")</p>
<p><strong>print</strong>(await echo.receive()) <em># "Hello
World!"</em></p>
<p><strong>if</strong> __name__ == '__main__':</p>
<p># The main loop</p>
<p>loop = asyncio.get_event_loop()</p>
<p>loop.run_until_complete(main())</p>
<p>Section 54.6: Common Misconception about asyncio</p>
<p>probably <em>the</em> most common misconception about asnycio is that
it lets you run any task in parallel - sidestepping</p>
<p>the GIL (global interpreter lock) and therefore execute blocking jobs
in parallel (on separate threads). it does <strong>not</strong>!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 304</p>
<p>asyncio (and libraries that are built to collaborate with asyncio)
build on coroutines: functions that (collaboratively) yield the control
flow back to the calling function. note asyncio.sleep in the examples
above. this is an example of</p>
<p>a non-blocking coroutine that waits 'in the background' and gives the
control flow back to the calling function (when</p>
<p>called with await). time.sleep is an example of a blocking function.
the execution flow of the program will just stop there and only return
after time.sleep has finished.</p>
<p><a href="http://docs.python-requests.org/en/master/">a real-live
example is the requests</a> library which consists (for the time being)
on blocking functions only. there is no</p>
<p>concurrency if you call any of its functions within asyncio. <a
href="https://aiohttp.readthedocs.io/en/stable/">aiohttp on the other
hand was built with</a> asyncio in</p>
<p>mind. its coroutines will run concurrently.</p>
<p>if you have long-running CPU-bound tasks you would like to run in
parallel asyncio is <strong>not</strong> for you. for that</p>
<p><a
href="https://docs.python.org/3/library/threading.html?highlight=threading#module-threading">you
need threads</a> <a
href="https://docs.python.org/3/library/multiprocessing.html?#module-multiprocessing">or
multiprocessing.</a></p>
<p>if you have IO-bound jobs running, you <em>may</em> run them
concurrently using asyncio.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 305</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learning
A-Z: Hands-On</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
In Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learn
to create Machine Learning Algorithms in</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
from two Data Science experts. Code</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">templates
included.</a></p>
<p><img src="media/index-331_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-331_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Master Machine Learning on Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Have a great intuition of many Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make accurate predictions</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make powerful analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make robust Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Create strong added value to your business</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Use Machine Learning for personal purpose</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle specific topics like Reinforcement Learning, NLP and Deep
Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle advanced techniques like Dimensionality Reduction</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Know which Machine Learning model to choose for each type of
problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Build an army of powerful Machine Learning models and know how to
combine them to solve any</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Watch
Today →</a></p>
<p><span id="Chapter_55__Random_module_1" class="anchor"></span>Chapter
55: Random module</p>
<p>Section 55.1: Creating a random user password</p>
<p>In order to create a random user password we can use the symbols
provided in the string module. Specifically punctuation for punctuation
symbols, ascii_letters for letters and digits for digits:</p>
<p><strong>from</strong> string <strong>import</strong> punctuation,
ascii_letters, digits</p>
<p>We can then combine all these symbols in a name named symbols:</p>
<p>symbols = ascii_letters + digits + punctuation</p>
<p>Remove either of these to create a pool of symbols with fewer
elements.</p>
<p>After this, we can use random.SystemRandom to generate a password.
For a 10 length password:</p>
<p>secure_random = random.SystemRandom()</p>
<p>password = "".join(secure_random.choice(symbols) <strong>for</strong>
i <strong>in</strong> range(10)) <strong>print</strong>(password) <em>#
'^@g;J?]M6e'</em></p>
<p>Note that other routines made immediately available by the random
module <strong>—</strong> such as random.choice,</p>
<p>random.randint, etc. <strong>—</strong> are <em>unsuitable</em> for
cryptographic purposes.</p>
<p>Behind the curtains, these routines use the <a
href="https://en.wikipedia.org/wiki/Mersenne_Twister">Mersenne Twister
PRNG</a>, which does not satisfy the requirements of a</p>
<p><a
href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator">CSPRNG.
Thus, in particular, you should not use any of them to generate
passwords you plan to use. Always use an</a></p>
<p>instance of SystemRandom as shown above.</p>
<p>Python 3.x Version ≥ 3.6</p>
<p>Starting from Python 3.6, the secrets module is available, which
exposes cryptographically safe functionality.</p>
<p><em>Quoting the</em> <a
href="https://docs.python.org/3.6/library/secrets.html"><em>official
documentation, to generate</em></a> "a ten-character alphanumeric
password with at least one lowercase character, at least one uppercase
character, and at least three digits," <em>you could:</em></p>
<p><strong>import</strong> string</p>
<p>alphabet = string.ascii_letters + string.digits</p>
<p><strong>while</strong> True:</p>
<p>password = ''.join(choice(alphabet) <strong>for</strong> i
<strong>in</strong> range(10))</p>
<p><strong>if</strong> (any(c.islower() <strong>for</strong> c
<strong>in</strong> password)</p>
<p><strong>and</strong> any(c.isupper() <strong>for</strong> c
<strong>in</strong> password)</p>
<p><strong>and</strong> sum(c.isdigit() <strong>for</strong> c
<strong>in</strong> password) &gt;= 3):</p>
<p>break</p>
<p>Section 55.2: Create cryptographically secure random</p>
<p>numbers</p>
<p>By default the Python random module use the Mersenne Twister <a
href="https://en.wikipedia.org/wiki/Pseudorandom_number_generator">PRNG</a>
to generate random numbers, which, although suitable in domains like
simulations, fails to meet security requirements in more demanding</p>
<p>environments.</p>
<p><a
href="https://docs.python.org/3/library/random.html#random.SystemRandom">In
order to create a cryptographically secure pseudorandom number, one can
use SystemRandom which, by using</a></p>
<p>os.urandom<a
href="https://en.wikipedia.org/wiki/Cryptographically_secure_pseudorandom_number_generator">,
is able to act as a Cryptographically secure pseudorandom number
generator, CPRNG</a>.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 307</p>
<p><span id="The_easiest_way_to_use_it_simply" class="anchor"></span>The
easiest way to use it simply involves initializing the SystemRandom
class. The methods provided are similar to the ones exported by the
random module.</p>
<p><strong>from</strong> random <strong>import</strong> SystemRandom</p>
<p>secure_rand_gen = SystemRandom()</p>
<p>In order to create a random sequence of 10 ints in range [0, 20], one
can simply call randrange():</p>
<p><strong>print</strong>([secure_rand_gen.randrange(10)
<strong>for</strong> i <strong>in</strong> range(10)]) <em># [9, 6, 9,
2, 2, 3, 8, 0, 9, 9]</em></p>
<p>To create a random integer in a given range, one can use randint:</p>
<p><strong>print</strong>(secure_rand_gen.randint(0, 20))</p>
<p># 5</p>
<p>and, accordingly for all other methods. The interface is exactly the
same, the only change is the underlying number</p>
<p>generator.</p>
<p>You can also use <a
href="https://docs.python.org/3/library/os.html#os.urandom">os.urandom
directly to obtain cryptographically secure random bytes.</a></p>
<p>Section 55.3: Random and sequences: shue, choice and</p>
<p>sample</p>
<p><strong>import</strong> random</p>
<p>shuffle()</p>
<p>You can use random.shuffle() to mix up/randomize the items in a
<strong>mutable and indexable</strong> sequence. For</p>
<p>example a list:</p>
<p>laughs = ["Hi", "Ho", "He"]</p>
<p><em>random.shuffle(laughs)</em> # Shuffles in-place! Don't do: laughs
= random.shuffle(laughs)</p>
<p><strong>print</strong>(laughs)</p>
<p># Out: ["He", "Hi", "Ho"] # Output may vary!</p>
<p>choice()</p>
<p>Takes a random element from an arbitrary
<strong>sequence</strong>:</p>
<p><strong>print</strong>(random.choice(laughs))</p>
<p># Out: He # Output may vary!</p>
<p>sample()</p>
<p>Like choice it takes random elements from an arbitrary
<strong>sequence</strong> but you can specify how many:</p>
<p># |--sequence--|--number--|</p>
<p><em><strong>print</strong>(random.sample( laughs , 1 ))</em> # Take
one element # Out: ['Ho'] # Output may vary!</p>
<p>it will not take the same element twice:</p>
<p><em><strong>print</strong>(random.sample(laughs, 3))</em> # Take 3
random element from the sequence. # Out: ['Ho', 'He', 'Hi'] # Output may
vary!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 308</p>
<p><span id="print_random_sample_laughs__4"
class="anchor"></span><em><strong>print</strong>(random.sample(laughs,
4))</em> # Take 4 random element from the 3-item sequence.</p>
<p>ValueError: Sample larger than population</p>
<p>Section 55.4: Creating random integers and floats: randint,</p>
<p>randrange, random, and uniform</p>
<p><strong>import</strong> random</p>
<p>randint()</p>
<p>Returns a random integer between x and y (inclusive):</p>
<p>random.randint(x, y)</p>
<p>For example getting a random number between 1 and 8:</p>
<p>random.randint(1, 8) <em># Out: 8</em></p>
<p>randrange()</p>
<p>random.randrange has the same syntax as range and unlike
random.randint, the last value is <strong>not</strong> inclusive:</p>
<p><em>random.randrange(100)</em> # Random integer between 0 and 99
<em>random.randrange(20, 50)</em> # Random integer between 20 and 49
<em>random.rangrange(10, 20, 3)</em> # Random integer between 10 and 19
with step 3 (10, 13, 16 and 19)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 309</p>
<p><span id="page_335" class="anchor"></span><img
src="media/index-335_1.jpeg" style="width:6.5in;height:4.84722in"
alt="index-335_1.jpg" /></p>
<p>random</p>
<p>Returns a random floating point number between 0 and 1:</p>
<p><em>random.random()</em> # Out: 0.66486093215306317</p>
<p>uniform</p>
<p>Returns a random floating point number between x and y
(inclusive):</p>
<p><em>random.uniform(1, 8)</em> # Out: 3.726062641730108</p>
<p>Section 55.5: Reproducible random numbers: Seed and State</p>
<p>Setting a specific Seed will create a fixed random-number series:</p>
<p><em>random.seed(5)</em> # Create a fixed state
<em><strong>print</strong>(random.randrange(0, 10))</em> # Get a random
integer between 0 and 9 # Out: 9</p>
<p><strong>print</strong>(random.randrange(0, 10))</p>
<p># Out: 4</p>
<p>Resetting the seed will create the same "random" sequence again:</p>
<p><em>random.seed(5)</em> # Reset the random module to the same fixed
state. <em><strong>print</strong>(random.randrange(0, 10))</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 310</p>
<p><span id="__Out__9" class="anchor"></span># Out: 9</p>
<p><strong>print</strong>(random.randrange(0, 10))</p>
<p># Out: 4</p>
<p>Since the seed is fixed these results are always 9 and 4. If having
specific numbers is not required only that the values will be the same
one can also just use getstate and setstate to recover to a previous
state:</p>
<p>save_state = random.getstate() <em># Get the current state</em>
<strong>print</strong>(random.randrange(0, 10))</p>
<p># Out: 5</p>
<p><strong>print</strong>(random.randrange(0, 10))</p>
<p># Out: 8</p>
<p>random.setstate(save_state) <em># Reset to saved state</em>
<strong>print</strong>(random.randrange(0, 10))</p>
<p># Out: 5</p>
<p><strong>print</strong>(random.randrange(0, 10))</p>
<p># Out: 8</p>
<p>To pseudo-randomize the sequence again you seed with None:</p>
<p>random.seed(None)</p>
<p>Or call the seed method with no arguments:</p>
<p>random.seed()</p>
<p>Section 55.6: Random Binary Decision</p>
<p><strong>import</strong> random</p>
<p>probability = 0.3</p>
<p><strong>if</strong> random.random() &lt; probability:</p>
<p><strong>print</strong>("Decision with probability 0.3")</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>("Decision with probability 0.7")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 311</p>
<p><span id="Chapter_56__Functools_Module_1"
class="anchor"></span>Chapter 56: Functools Module</p>
<p>Section 56.1: partial</p>
<p>The partial function creates partial function application from
another function. It is used to <em>bind</em> values to some of the
function's arguments (or keyword arguments) and produce a
<em>callable</em> without the already defined arguments.</p>
<p>&gt;&gt;&gt; <strong>from</strong> functools <strong>import</strong>
partial</p>
<p>&gt;&gt;&gt; unhex = partial(int, base=16)</p>
<p>&gt;&gt;&gt; unhex.__doc__ = 'Convert base16 string to int'</p>
<p>&gt;&gt;&gt; unhex('ca11ab1e')</p>
<p>3390155550</p>
<p>partial() , as the name suggests, allows a partial evaluation of a
function. Let's look at following example:</p>
<p>In [2]: <strong>from</strong> functools <strong>import</strong>
partial</p>
<p>In [3]: <strong>def</strong> f(a, b, c, x):</p>
<p>...: <strong>return</strong> 1000*a + 100*b + 10*c + x</p>
<p>...:</p>
<p>In [4]: g = partial(f, 1, 1, 1)</p>
<p>In [5]: <strong>print</strong> g(2)</p>
<p>1112</p>
<p>When g is created, f, which takes four arguments(a, b, c, x), is also
partially evaluated for the first three</p>
<p>arguments, a, b, c,. Evaluation of f is completed when g is called,
g(2), which passes the fourth argument to f.</p>
<p>One way to think of partial is a shift register; pushing in one
argument at the time into some function. partial</p>
<p>comes handy for cases where data is coming in as stream and we cannot
pass more than one argument.</p>
<p>Section 56.2: cmp_to_key</p>
<p>Python changed its sorting methods to accept a key function. Those
functions take a value and return a key which is used to sort the
arrays.</p>
<p>Old comparison functions used to take two values and return -1, 0 or
+1 if the first argument is small, equal or greater than the second
argument respectively. This is incompatible to the new key-function.</p>
<p>That's where functools.cmp_to_key comes in:</p>
<p>&gt;&gt;&gt; <strong>import</strong> functools</p>
<p>&gt;&gt;&gt; <strong>import</strong> locale</p>
<p>&gt;&gt;&gt; sorted(["A", "S", "F", "D"],
key=functools.cmp_to_key(locale.strcoll)) ['A', 'D', 'F', 'S']</p>
<p>Example taken and adapted from the <a
href="https://docs.python.org/3/library/functools.html#functools.cmp_to_key">Python
Standard Library Documentation.</a></p>
<p>Section 56.3: lru_cache</p>
<p>The @lru_cache decorator can be used wrap an expensive,
computationally-intensive function with a <a
href="https://en.wikipedia.org/wiki/Cache_algorithms#Examples">Least
Recently</a></p>
<p><a
href="https://en.wikipedia.org/wiki/Cache_algorithms#Examples">Used</a>
cache. This allows function calls to be memoized, so that future calls
with the same parameters can return instantly instead of having to be
recomputed.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 312</p>
<p><span id="_lru_cache_maxsize_None_____Boun"
class="anchor"></span>@lru_cache(maxsize=None) <em># Boundless
cache</em></p>
<p><strong>def</strong> fibonacci(n):</p>
<p><strong>if</strong> n &lt; 2:</p>
<p>return <strong>n</strong></p>
<p><strong>return</strong> fibonacci(n-1) + fibonacci(n-2)</p>
<p>&gt;&gt;&gt; fibonacci(15)</p>
<p>In the example above, the value of fibonacci(3) is only calculated
once, whereas if fibonacci didn't have an LRU</p>
<p>cache, fibonacci(3) would have been computed upwards of 230 times.
Hence, @lru_cache is especially great for recursive functions or dynamic
programming, where an expensive function could be called multiple times
with the</p>
<p>same exact parameters.</p>
<p>@lru_cache has two arguments</p>
<p>maxsize : Number of calls to save. When the number of unique calls
exceeds maxsize, the LRU cache will remove the least recently used
calls.</p>
<p>typed (added in 3.3): Flag for determining if equivalent arguments of
different types belong to different cache records (i.e. if 3.0 and 3
count as different arguments)</p>
<p>We can see cache stats too:</p>
<p>&gt;&gt;&gt; fib.cache_info()</p>
<p>CacheInfo(hits=13, misses=16, maxsize=None, currsize=16)</p>
<p><em>NOTE</em>: Since @lru_cache uses dictionaries to cache results,
all parameters for the function must be hashable for the</p>
<p>cache to work.</p>
<p><a
href="https://docs.python.org/3/library/functools.html#functools.lru_cache">Official
Python docs for @lru_cache</a>. @lru_cache was added in 3.2.</p>
<p>Section 56.4: total_ordering</p>
<p>When we want to create an orderable class, normally we need to define
the methods __eq()__, __lt__(),</p>
<p>__le__(), __gt__() and __ge__().</p>
<p>The total_ordering decorator, applied to a class, permits the
definition of __eq__() and only one between</p>
<p>__lt__(), __le__(), __gt__() and __ge__(), and still allow all the
ordering operations on the class.</p>
<p>@total_ordering</p>
<p><strong>class</strong> Employee:</p>
<p>...</p>
<p><strong>def</strong> __eq__(self, other):</p>
<p><strong>return</strong> ((self.surname, self.name) == (other.surname,
other.name))</p>
<p><strong>def</strong> __lt__(self, other):</p>
<p><strong>return</strong> ((self.surname, self.name) &lt;
(other.surname, other.name))</p>
<p>The decorator uses a composition of the provided methods and
algebraic operations to derive the other comparison methods. For example
if we defined __lt__() and __eq()__ and we want to derive __gt__(), we
can</p>
<p>simply check <strong>not</strong> __lt__() <strong>and not</strong>
__eq()__.</p>
<p><strong>Note</strong>: The total_ordering function is only available
since Python 2.7.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 313</p>
<p><span id="Section_56_5__reduce" class="anchor"></span>Section 56.5:
reduce</p>
<p>In Python 3.x, the reduce function already explained here has been
removed from the built-ins and must now be</p>
<p>imported from functools.</p>
<p><strong>from</strong> functools <strong>import</strong> reduce</p>
<p><strong>def</strong> factorial(n):</p>
<p><strong>return</strong> reduce(<strong>lambda</strong> a, b: (a*b),
range(1, n+1))</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 314</p>
<p><span id="Chapter_57__The_dis_module_1" class="anchor"></span>Chapter
57: The dis module</p>
<p>Section 57.1: What is Python bytecode?</p>
<p>Python is a hybrid interpreter. When running a program, it first
assembles it into <em>bytecode</em> which can then be run in the Python
interpreter (also called a <em>Python virtual machine</em>). The dis
module in the standard library can be used to</p>
<p>make the Python bytecode human-readable by disassembling classes,
methods, functions, and code objects.</p>
<p>&gt;&gt;&gt; <strong>def</strong> hello():</p>
<p>... <strong>print</strong> "Hello, World"</p>
<p>...</p>
<p>&gt;&gt;&gt; dis.dis(hello)</p>
<p>2 0 LOAD_CONST 1 ('Hello, World')</p>
<p>3 PRINT_ITEM</p>
<p>4 PRINT_NEWLINE</p>
<p>5 LOAD_CONST 0 (None)</p>
<p>8 RETURN_VALUE</p>
<p>The Python interpreter is stack-based and uses a first-in last-out
system.</p>
<p>Each operation code (opcode) in the Python assembly language (the
bytecode) takes a fixed number of items from the stack and returns a
fixed number of items to the stack. If there aren't enough items on the
stack for an opcode,</p>
<p>the Python interpreter will crash, possibly without an error
message.</p>
<p>Section 57.2: Constants in the dis module</p>
<p><em>EXTENDED_ARG = 145</em> # All opcodes greater than this have 2
operands <em>HAVE_ARGUMENT = 90</em> # All opcodes greater than this
have at least 1 operands</p>
<p>cmp_op = ('&lt;', '&lt;=', '==', '!=', '&gt;', '&gt;=', 'in', 'not
in', 'is', 'is ...</p>
<p># A list of comparator id's. The indices are used <strong>as</strong>
operands <strong>in</strong> some opcodes</p>
<p># All opcodes in these lists have the respective types as there
operands <em>hascompare = [107]</em></p>
<p>hasconst = [100]</p>
<p>hasfree = [135, 136, 137]</p>
<p>hasjabs = [111, 112, 113, 114, 115, 119]</p>
<p>hasjrel = [93, 110, 120, 121, 122, 143]</p>
<p>haslocal = [124, 125, 126]</p>
<p>hasname = [90, 91, 95, 96, 97, 98, 101, 106, 108, 109, 116]</p>
<p># A map of opcodes to ids</p>
<p>opmap = {'BINARY_ADD': 23, 'BINARY_AND': 64, 'BINARY_DIVIDE': 21,
'BIN... # A map of ids to opcodes</p>
<p>opname = ['STOP_CODE', 'POP_TOP', 'ROT_TWO', 'ROT_THREE', 'DUP_TOP',
'...</p>
<p>Section 57.3: Disassembling modules</p>
<p>To disassemble a Python module, first this has to be turned into a
.pyc file (Python compiled). To do this, run</p>
<p>python -m compileall .py</p>
<p>Then in an interpreter, run</p>
<p>import <strong>dis</strong></p>
<p><strong>import</strong> marshal</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 315</p>
<p><strong>with</strong> open(".pyc", "rb") <strong>as</strong>
code_f:</p>
<p><em>code_f.read(8)</em> # Magic number and modification time</p>
<p><em>code = marshal.load(code_f)</em> # Returns a code object which
can be disassembled <em>dis.dis(code)</em> # Output the disassembly</p>
<p>This will compile a Python module and output the bytecode
instructions with dis. The module is never imported so</p>
<p>it is safe to use with untrusted code.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 316</p>
<p><span id="Chapter_58__The_base64_Module_1"
class="anchor"></span>Chapter 58: The base64 Module</p>
<p>Parameter Description</p>
<p>base64.b64encode(s, altchars=None)</p>
<p>s A bytes-like object</p>
<p>A bytes-like object of length 2+ of characters to replace the</p>
<p>altchars '+' and '=' characters when creating the Base64
alphabet.</p>
<p>Extra characters are ignored.</p>
<p>base64.b64decode(s, altchars=None,</p>
<p>validate=False)</p>
<p>s A bytes-like object</p>
<p>A bytes-like object of length 2+ of characters to replace the</p>
<p>altchars '+' and '=' characters when creating the Base64
alphabet.</p>
<p>Extra characters are ignored.</p>
<p>If validate is True, the characters not in the normal Base64</p>
<p>validate alphabet or the alternative alphabet are
<strong>not</strong> discarded</p>
<p>before the padding check</p>
<p>base64.standard_b64encode(s)</p>
<p>s A bytes-like object</p>
<p>base64.standard_b64decode(s)</p>
<p>s A bytes-like object</p>
<p>base64.urlsafe_b64encode(s)</p>
<p>s A bytes-like object</p>
<p>base64.urlsafe_b64decode(s)</p>
<p>s A bytes-like object</p>
<p>b32encode(s)</p>
<p>s A bytes-like object</p>
<p>b32decode(s)</p>
<p>s A bytes-like object</p>
<p>base64.b16encode(s)</p>
<p>s A bytes-like object</p>
<p>base64.b16decode(s)</p>
<p>s A bytes-like object</p>
<p>base64.a85encode(b, foldspaces=False,</p>
<p>wrapcol=0, pad=False, adobe=False)</p>
<p>b A bytes-like object</p>
<p>foldspaces If foldspaces is True, the character 'y' will be used
instead of 4 consecutive spaces.</p>
<p>wrapcol The number characters before a newline (0 implies no
newlines)</p>
<p>pad If pad is True, the bytes are padded to a multiple of 4 before
encoding</p>
<p>adobe If adobe is True, the encoded sequenced with be framed with
'&lt;~' and ''~&gt;' as used with Adobe products</p>
<p>base64.a85decode(b, foldspaces=False,</p>
<p>adobe=False, ignorechars=b'<strong>\t\n\r\v</strong>')</p>
<p>b A bytes-like object</p>
<p>foldspaces If foldspaces is True, the character 'y' will be used
instead of 4 consecutive spaces.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 317</p>
<p><span id="adobe_If_adobe_is_True__the_enco"
class="anchor"></span>adobe If adobe is True, the encoded sequenced with
be framed with '&lt;~' and ''~&gt;' as used with Adobe products</p>
<p>ignorechars A bytes-like object of characters to ignore in the
encoding process</p>
<p>base64.b85encode(b, pad=False)</p>
<p>b A bytes-like object</p>
<p>pad If pad is True, the bytes are padded to a multiple of 4 before
encoding</p>
<p>base64.b85decode(b)</p>
<p>b A bytes-like object</p>
<p>Base 64 encoding represents a common scheme for encoding binary into
ASCII string format using radix 64. The base64 module is part of the
standard library, which means it installs along with Python.
Understanding of bytes</p>
<p><a href="https://goo.gl/N4qIYd">and strings is critical to this topic
and can be reviewed here. This topic explains how to use the various
features and</a> number bases of the base64 module.</p>
<p>Section 58.1: Encoding and Decoding Base64</p>
<p>To include the base64 module in your script, you must import it
first:</p>
<p><strong>import</strong> base64</p>
<p>The base64 encode and decode functions both require a <a
href="https://docs.python.org/3/glossary.html#term-bytes-like-object">bytes-like
object</a>. To get our string into bytes, we must</p>
<p>encode it using Python's built in encode function. Most commonly, the
UTF-8 encoding is used, however a full list of</p>
<p><a
href="https://docs.python.org/3/library/codecs.html#standard-encodings">these
standard encodings (including languages with different characters) can
be found here in the official Python</a> Documentation. Below is an
example of encoding a string into bytes:</p>
<p>s = "Hello World!"</p>
<p>b = s.encode("UTF-8")</p>
<p>The output of the last line would be:</p>
<p>b'Hello World!'</p>
<p>The b prefix is used to denote the value is a bytes object.</p>
<p>To Base64 encode these bytes, we use the base64.b64encode()
function:</p>
<p><strong>import</strong> base64</p>
<p>s = "Hello World!"</p>
<p>b = s.encode("UTF-8")</p>
<p>e = base64.b64encode(b)</p>
<p>print<strong>(e)</strong></p>
<p>That code would output the following:</p>
<p>b'SGVsbG8gV29ybGQh'</p>
<p>which is still in the bytes object. To get a string out of these
bytes, we can use Python's decode() method with the UTF-8 encoding:</p>
<p><strong>import</strong> base64</p>
<p>s = "Hello World!"</p>
<p>b = s.encode("UTF-8")</p>
<p>e = base64.b64encode(b)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 318</p>
<p><span id="s1___e_decode__UTF_8" class="anchor"></span>s1 =
e.decode("UTF-8")</p>
<p>print<strong>(s1)</strong></p>
<p>The output would then be:</p>
<p>SGVsbG8gV29ybGQh</p>
<p>If we wanted to encode the string and then decode we could use the
base64.b64decode() method:</p>
<p><strong>import</strong> base64</p>
<p># Creating a string</p>
<p>s = "Hello World!"</p>
<p># Encoding the string into bytes</p>
<p>b = s.encode("UTF-8")</p>
<p># Base64 Encode the bytes</p>
<p>e = base64.b64encode(b)</p>
<p># Decoding the Base64 bytes to string</p>
<p>s1 = e.decode("UTF-8")</p>
<p># Printing Base64 encoded string</p>
<p><strong>print</strong>("Base64 Encoded:", s1)</p>
<p># Encoding the Base64 encoded string into bytes</p>
<p>b1 = s1.encode("UTF-8")</p>
<p># Decoding the Base64 bytes</p>
<p>d = base64.b64decode(b1)</p>
<p># Decoding the bytes to string</p>
<p>s2 = d.decode("UTF-8")</p>
<p>print<strong>(s2)</strong></p>
<p>As you may have expected, the output would be the original
string:</p>
<p>Base64 Encoded: SGVsbG8gV29ybGQh</p>
<p>Hello World!</p>
<p>Section 58.2: Encoding and Decoding Base32</p>
<p>The base64 module also includes encoding and decoding functions for
Base32. These functions are very similar to</p>
<p>the Base64 functions:</p>
<p><strong>import</strong> base64</p>
<p># Creating a string</p>
<p>s = "Hello World!"</p>
<p># Encoding the string into bytes</p>
<p>b = s.encode("UTF-8")</p>
<p># Base32 Encode the bytes</p>
<p>e = base64.b32encode(b)</p>
<p># Decoding the Base32 bytes to string</p>
<p>s1 = e.decode("UTF-8")</p>
<p># Printing Base32 encoded string</p>
<p><strong>print</strong>("Base32 Encoded:", s1)</p>
<p># Encoding the Base32 encoded string into bytes</p>
<p>b1 = s1.encode("UTF-8")</p>
<p># Decoding the Base32 bytes</p>
<p>d = base64.b32decode(b1)</p>
<p># Decoding the bytes to string</p>
<p>s2 = d.decode("UTF-8")</p>
<p>print<strong>(s2)</strong></p>
<p>This would produce the following output:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 319</p>
<p><span id="Base32_Encoded__JBSWY3DPEBLW64TM"
class="anchor"></span>Base32 Encoded: JBSWY3DPEBLW64TMMQQQ====</p>
<p>Hello World!</p>
<p>Section 58.3: Encoding and Decoding Base16</p>
<p>The base64 module also includes encoding and decoding functions for
Base16. Base 16 is most commonly referred</p>
<p>to as <strong>hexadecimal</strong>. These functions are very similar
to the both the Base64 and Base32 functions:</p>
<p><strong>import</strong> base64</p>
<p># Creating a string</p>
<p>s = "Hello World!"</p>
<p># Encoding the string into bytes</p>
<p>b = s.encode("UTF-8")</p>
<p># Base16 Encode the bytes</p>
<p>e = base64.b16encode(b)</p>
<p># Decoding the Base16 bytes to string</p>
<p>s1 = e.decode("UTF-8")</p>
<p># Printing Base16 encoded string</p>
<p><strong>print</strong>("Base16 Encoded:", s1)</p>
<p># Encoding the Base16 encoded string into bytes</p>
<p>b1 = s1.encode("UTF-8")</p>
<p># Decoding the Base16 bytes</p>
<p>d = base64.b16decode(b1)</p>
<p># Decoding the bytes to string</p>
<p>s2 = d.decode("UTF-8")</p>
<p>print<strong>(s2)</strong></p>
<p>This would produce the following output:</p>
<p>Base16 Encoded: 48656C6C6F20576F726C6421</p>
<p>Hello World!</p>
<p>Section 58.4: Encoding and Decoding ASCII85</p>
<p>Adobe created its own encoding called <strong>ASCII85</strong> which
is similar to Base85, but has its differences. This encoding is</p>
<p>used frequently in Adobe PDF files. These functions were released in
Python version 3.4. Otherwise, the functions</p>
<p>base64.a85encode() and base64.a85encode() are similar to the
previous:</p>
<p><strong>import</strong> base64</p>
<p># Creating a string</p>
<p>s = "Hello World!"</p>
<p># Encoding the string into bytes</p>
<p>b = s.encode("UTF-8")</p>
<p># ASCII85 Encode the bytes</p>
<p>e = base64.a85encode(b)</p>
<p># Decoding the ASCII85 bytes to string</p>
<p>s1 = e.decode("UTF-8")</p>
<p># Printing ASCII85 encoded string</p>
<p><strong>print</strong>("ASCII85 Encoded:", s1)</p>
<p># Encoding the ASCII85 encoded string into bytes</p>
<p>b1 = s1.encode("UTF-8")</p>
<p># Decoding the ASCII85 bytes</p>
<p>d = base64.a85decode(b1)</p>
<p># Decoding the bytes to string</p>
<p>s2 = d.decode("UTF-8")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 320</p>
<p><span id="print_s2"
class="anchor"></span>print<strong>(s2)</strong></p>
<p>This outputs the following:</p>
<p>ASCII85 Encoded: 87cURD]i,"Ebo80</p>
<p>Hello World!</p>
<p>Section 58.5: Encoding and Decoding Base85</p>
<p>Just like the Base64, Base32, and Base16 functions, the Base85
encoding and decoding functions are</p>
<p>base64.b85encode() and base64.b85decode():</p>
<p><strong>import</strong> base64</p>
<p># Creating a string</p>
<p>s = "Hello World!"</p>
<p># Encoding the string into bytes</p>
<p>b = s.encode("UTF-8")</p>
<p># Base85 Encode the bytes</p>
<p>e = base64.b85encode(b)</p>
<p># Decoding the Base85 bytes to string</p>
<p>s1 = e.decode("UTF-8")</p>
<p># Printing Base85 encoded string</p>
<p><strong>print</strong>("Base85 Encoded:", s1)</p>
<p># Encoding the Base85 encoded string into bytes</p>
<p>b1 = s1.encode("UTF-8")</p>
<p># Decoding the Base85 bytes</p>
<p>d = base64.b85decode(b1)</p>
<p># Decoding the bytes to string</p>
<p>s2 = d.decode("UTF-8")</p>
<p>print<strong>(s2)</strong></p>
<p>which outputs the following:</p>
<p>Base85 Encoded: NM&amp;qnZy;B1a%^NF</p>
<p>Hello World!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 321</p>
<p><span id="Chapter_59__Queue_Module_1" class="anchor"></span>Chapter
59: Queue Module</p>
<p>The Queue module implements multi-producer, multi-consumer queues. It
is especially useful in threaded</p>
<p>programming when information must be exchanged safely between
multiple threads. There are three types of queues provides by queue
module,Which are as following : 1. Queue 2. LifoQueue 3. PriorityQueue
Exception which</p>
<p>could be come: 1. Full (queue overflow) 2. Empty (queue
underflow)</p>
<p>Section 59.1: Simple example</p>
<p><strong>from</strong> Queue <strong>import</strong> Queue</p>
<p>question_queue = Queue()</p>
<p><strong>for</strong> x <strong>in</strong> range(1,10):</p>
<p>temp_dict = ('key', x)</p>
<p>question_queue.put(temp_dict)</p>
<p><strong>while</strong>(<strong>not</strong>
question_queue.empty()):</p>
<p>item = question_queue.get()</p>
<p><strong>print</strong>(str(item))</p>
<p>Output:</p>
<p>('key', 1)</p>
<p>('key', 2)</p>
<p>('key', 3)</p>
<p>('key', 4)</p>
<p>('key', 5)</p>
<p>('key', 6)</p>
<p>('key', 7)</p>
<p>('key', 8)</p>
<p>('key', 9)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 322</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Learning,
Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
Deep Learning with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Complete
hands-on machine learning tutorial with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">data
science, Tensorflow, artificial intelligence,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
neural networks</a></p>
<p><img src="media/index-348_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-348_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build artificial neural networks with Tensorflow and Keras</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify images, data, and sentiments using deep learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Make predictions using linear regression, polynomial regression, and
multivariate regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Data Visualization with MatPlotLib and Seaborn</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Implement machine learning at massive scale with Apache Spark's
MLLib</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Understand reinforcement learning - and how to build a Pac-Man
bot</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify data using K-Means clustering, Support Vector Machines (SVM),
KNN, Decision Trees,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Naive
Bayes, and PCA</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Use train/test and K-Fold cross validation to choose and tune your
models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build a movie recommender system using item-based and user-based
collaborative filtering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Watch
Today →</a></p>
<p><span id="Chapter_60__Deque_Module_1" class="anchor"></span>Chapter
60: Deque Module</p>
<p>Parameter Details</p>
<p>iterable Creates the deque with initial elements copied from another
iterable.</p>
<p>maxlen Limits how large the deque can be, pushing out old elements as
new are added.</p>
<p>Section 60.1: Basic deque using</p>
<p>The main methods that are useful with this class are popleft and
appendleft</p>
<p><strong>from</strong> collections <strong>import</strong> deque</p>
<p>d = deque([1, 2, 3])</p>
<p><em>p = d.popleft()</em> # p = 1, d = deque([2, 3])</p>
<p><em>d.appendleft(5)</em> # d = deque([5, 2, 3])</p>
<p>Section 60.2: Available methods in deque</p>
<p>Creating empty deque:</p>
<p><em>dl = deque()</em> # deque([]) creating empty deque</p>
<p>Creating deque with some elements:</p>
<p>dl = deque([1, 2, 3, 4]) <em># deque([1, 2, 3, 4])</em></p>
<p>Adding element to deque:</p>
<p><em>dl.append(5)</em> # deque([1, 2, 3, 4, 5])</p>
<p>Adding element left side of deque:</p>
<p><em>dl.appendleft(0)</em> # deque([0, 1, 2, 3, 4, 5])</p>
<p>Adding list of elements to deque:</p>
<p><em>dl.extend([6, 7])</em> # deque([0, 1, 2, 3, 4, 5, 6, 7])</p>
<p>Adding list of elements to from the left side:</p>
<p><em>dl.extendleft([-2, -1])</em> # deque([-1, -2, 0, 1, 2, 3, 4, 5,
6, 7])</p>
<p>Using .pop() element will naturally remove an item from the right
side:</p>
<p><em>dl.pop()</em> # 7 =&gt; deque([-1, -2, 0, 1, 2, 3, 4, 5, 6])</p>
<p>Using .popleft() element to remove an item from the left side:</p>
<p><em>dl.popleft()</em> # -1 deque([-2, 0, 1, 2, 3, 4, 5, 6])</p>
<p>Remove element by its value:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 324</p>
<p><span id="dl_remove_1_____deque___2__0__2"
class="anchor"></span><em>dl.remove(1)</em> # deque([-2, 0, 2, 3, 4, 5,
6])</p>
<p>Reverse the order of the elements in deque:</p>
<p><em>dl.reverse()</em> # deque([6, 5, 4, 3, 2, 0, -2])</p>
<p>Section 60.3: limit deque size</p>
<p>Use the maxlen parameter while creating a deque to limit the size of
the deque:</p>
<p><strong>from</strong> collections <strong>import</strong> deque</p>
<p>d = deque(maxlen=3) <em># only holds 3 items</em></p>
<p>d.append(1) <em># deque([1])</em></p>
<p><em>d.append(2)</em> # deque([1, 2])</p>
<p><em>d.append(3)</em> # deque([1, 2, 3])</p>
<p><em>d.append(4)</em> # deque([2, 3, 4]) (1 is removed because its
maxlen is 3)</p>
<p>Section 60.4: Breadth First Search</p>
<p><a
href="https://en.wikipedia.org/wiki/Queue_(abstract_data_type)">The
Deque is the only Python data structure with fast Queue operations.
(Note</a> queue.Queue isn't normally suitable,</p>
<p>since it's meant for communication between threads.) A basic use case
of a Queue is the <a
href="https://en.wikipedia.org/wiki/Breadth-first_search">breadth first
search</a>.</p>
<p><strong>from</strong> collections <strong>import</strong> deque</p>
<p><strong>def</strong> bfs(graph, root):</p>
<p>distances = {}</p>
<p>distances[root] = 0</p>
<p>q = deque([root])</p>
<p>while <strong>q:</strong></p>
<p># The oldest seen (but not yet visited) node will be the left most
one.</p>
<p>current = q.popleft()</p>
<p><strong>for</strong> neighbor <strong>in</strong> graph[current]:</p>
<p><strong>if</strong> neighbor <strong>not in</strong> distances:</p>
<p>distances[neighbor] = distances[current] + 1</p>
<p># When we see a new node, we add it to the right side of the
queue.</p>
<p>q.append(neighbor)</p>
<p><strong>return</strong> distances</p>
<p>Say we have a simple directed graph:</p>
<p>graph = {1:[2,3], 2:[4], 3:[4,5], 4:[3,5], 5:[]}</p>
<p>We can now find the distances from some starting position:</p>
<p>&gt;&gt;&gt; bfs(graph, 1)</p>
<p>{1: 0, 2: 1, 3: 1, 4: 2, 5: 2}</p>
<p>&gt;&gt;&gt; bfs(graph, 3)</p>
<p>{3: 0, 4: 1, 5: 1}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 325</p>
<p><span id="Chapter_61__Webbrowser_Module_1"
class="anchor"></span>Chapter 61: Webbrowser Module</p>
<p>Parameter Details</p>
<p>webbrowser.open()</p>
<p>url the URL to open in the web browser</p>
<p>new 0 opens the URL in the existing tab, 1 opens in a new window, 2
opens in new tab</p>
<p>autoraise if set to True, the window will be moved on top of the
other windows</p>
<p>webbrowser.open_new()</p>
<p>url the URL to open in the web browser</p>
<p>webbrowser.open_new_tab()</p>
<p>url the URL to open in the web browser</p>
<p>webbrowser.get()</p>
<p>using the browser to use</p>
<p>webbrowser.register()</p>
<p>url browser name</p>
<p>constructor <a
href="http://stackoverflow.com/questions/24873302/python-generic-webbrowser-get-open-for-chrome-exe-does-not-work">path
to the executable browser (help</a>)</p>
<p>instance An instance of a web browser returned from the
webbrowser.get() method</p>
<p>According to Python's standard documentation, the webbrowser module
provides a high-level interface to allow displaying Web-based documents
to users. This topic explains and demonstrates proper usage of the
webbrowser</p>
<p>module.</p>
<p>Section 61.1: Opening a URL with Default Browser</p>
<p>To simply open a URL, use the webbrowser.open() method:</p>
<p><strong>import</strong> webbrowser</p>
<p>webbrowser.open("http://stackoverflow.com")</p>
<p>If a browser window is currently open, the method will open a new tab
at the specified URL. If no window is open, the method will open the
operating system's default browser and navigate to the URL in the
parameter. The open</p>
<p>method supports the following parameters:</p>
<p>url - the URL to open in the web browser (string)
<strong>[required]</strong></p>
<p>new - 0 opens in existing tab, 1 opens new window, 2 opens new tab
(integer) <strong>[default 0]</strong></p>
<p>autoraise - if set to True, the window will be moved on top of other
applications' windows (Boolean)</p>
<p>[default False]</p>
<p>Note, the new and autoraise arguments rarely work as the majority of
modern browsers refuse these commands.</p>
<p>Webbrowser can also try to open URLs in new windows with the open_new
method:</p>
<p><strong>import</strong> webbrowser</p>
<p>webbrowser.open_new("http://stackoverflow.com")</p>
<p>This method is commonly ignored by modern browsers and the URL is
usually opened in a new tab. Opening a new</p>
<p>tab can be tried by the module using the open_new_tab method:</p>
<p><strong>import</strong> webbrowser</p>
<p>webbrowser.open_new_tab("http://stackoverflow.com")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 326</p>
<p><span id="Section_61_2__Opening_a_URL_with"
class="anchor"></span>Section 61.2: Opening a URL with Dierent
Browsers</p>
<p>The webbrowser module also supports different browsers using the
register() and get() methods. The get</p>
<p>method is used to create a browser controller using a specific
executable's path and the register method is used to</p>
<p>attach these executables to preset browser types for future use,
commonly when multiple browser types are used.</p>
<p><strong>import</strong> webbrowser</p>
<p>ff_path = webbrowser.get("C:/Program Files/Mozilla
Firefox/firefox.exe") ff = webbrowser.get(ff_path)</p>
<p>ff.open("http://stackoverflow.com/")</p>
<p>Registering a browser type:</p>
<p><strong>import</strong> webbrowser</p>
<p>ff_path = webbrowser.get("C:/Program Files/Mozilla
Firefox/firefox.exe") ff = webbrowser.get(ff_path)</p>
<p>webbrowser.register('firefox', None, ff)</p>
<p><em># Now to refer to use Firefox in the future you can use this</em>
webbrowser.get('firefox').open("https://stackoverflow.com/")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 327</p>
<p><span id="Chapter_62__tkinter_1" class="anchor"></span>Chapter 62:
tkinter</p>
<p>Released in Tkinter is Python's most popular GUI (Graphical User
Interface) library. This topic explains proper usage</p>
<p>of this library and its features.</p>
<p>Section 62.1: Geometry Managers</p>
<p>Tkinter has three mechanisms for geometry management: place, pack,
and grid.</p>
<p>The place manager uses absolute pixel coordinates.</p>
<p>The pack manager places widgets into one of 4 sides. New widgets are
placed next to existing widgets.</p>
<p>The grid manager places widgets into a grid similar to a dynamically
resizing spreadsheet.</p>
<p>Place</p>
<p>The most common keyword arguments for widget.place are as
follows:</p>
<p>x, the absolute x-coordinate of the widget</p>
<p>y, the absolute y-coordinate of the widget</p>
<p>height , the absolute height of the widget</p>
<p>width , the absolute width of the widget</p>
<p>A code example using place:</p>
<p><strong>class</strong> PlaceExample(Frame):</p>
<p><strong>def</strong> __init__(self,master):</p>
<p>Frame.__init__(self,master)</p>
<p>self.grid()</p>
<p>top_text=Label(master,text="This is on top at the origin")</p>
<p>#top_text.pack()</p>
<p>top_text.place(x=0,y=0,height=50,width=200)</p>
<p>bottom_right_text=Label(master,text="This is at position
200,400")</p>
<p>#top_text.pack()</p>
<p>bottom_right_text.place(x=200,y=400,height=50,width=200) <em># Spawn
Window</em></p>
<p><strong>if</strong> __name__=="__main__":</p>
<p>root=Tk()</p>
<p>place_frame=PlaceExample(root)</p>
<p>place_frame.mainloop()</p>
<p>Pack</p>
<p>widget.pack can take the following keyword arguments:</p>
<p>expand , whether or not to fill space left by parent</p>
<p>fill, whether to expand to fill all space (NONE (default), X, Y, or
BOTH) side, the side to pack against (TOP (default), BOTTOM, LEFT, or
RIGHT)</p>
<p>Grid</p>
<p>The most commonly used keyword arguments of widget.grid are as
follows:</p>
<p>row, the row of the widget (default smallest unoccupied)</p>
<p>rowspan , the number of columns a widget spans (default 1)</p>
<p>column , the column of the widget (default 0)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 328</p>
<p><span id="columnspan__the_number_of_column"
class="anchor"></span>columnspan, the number of columns a widget spans
(default 1) sticky , where to place widget if the grid cell is larger
than it (combination of N,NE,E,SE,S,SW,W,NW)</p>
<p>The rows and columns are zero indexed. Rows increase going down, and
columns increase going right.</p>
<p>A code example using grid:</p>
<p><strong>from</strong> tkinter <strong>import</strong> *</p>
<p><strong>class</strong> GridExample(Frame):</p>
<p><strong>def</strong> __init__(self,master):</p>
<p>Frame.__init__(self,master)</p>
<p>self.grid()</p>
<p>top_text=Label(self,text="This text appears on top left")</p>
<p><em>top_text.grid()</em> # Default position 0, 0</p>
<p>bottom_text=Label(self,text="This text appears on bottom left")</p>
<p><em>bottom_text.grid()</em> # Default position 1, 0</p>
<p>right_text=Label(self,text="This text appears on the right and spans
both rows",</p>
<p>wraplength=100)</p>
<p># Position is 0,1</p>
<p># Rowspan means actual position is [0-1],1</p>
<p>right_text.grid(row=0,column=1,rowspan=2)</p>
<p># Spawn Window</p>
<p><strong>if</strong> __name__=="__main__":</p>
<p>root=Tk()</p>
<p>grid_frame=GridExample(root)</p>
<p>grid_frame.mainloop()</p>
<p>Never mix pack and grid within the same frame! Doing so will lead to
application deadlock!</p>
<p>Section 62.2: A minimal tkinter Application</p>
<p>tkinter is a GUI toolkit that provides a wrapper around the Tk/Tcl
GUI library and is included with Python. The</p>
<p>following code creates a new window using tkinter and places some
text in the window body.</p>
<p>Note: In Python 2, the capitalization may be slightly different, see
Remarks section below.</p>
<p><strong>import</strong> tkinter <strong>as</strong> tk</p>
<p># GUI window is a subclass of the basic tkinter Frame object
<em><strong>class</strong> HelloWorldFrame(tk.Frame):</em></p>
<p><strong>def</strong> __init__(self, master):</p>
<p># Call superclass constructor</p>
<p>tk.Frame.__init__(self, master)</p>
<p># Place frame into main window</p>
<p>self.grid()</p>
<p># Create text box with "Hello World" text</p>
<p>hello = tk.Label(self, text="Hello World! This label can hold
strings!")</p>
<p># Place text box into frame</p>
<p>hello.grid(row=0, column=0)</p>
<p># Spawn window</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p># Create main window object</p>
<p>root = tk.Tk()</p>
<p># Set title of window</p>
<p>root.title("Hello World!")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 329</p>
<p># Instantiate HelloWorldFrame object</p>
<p>hello_frame = HelloWorldFrame(root)</p>
<p># Start GUI</p>
<p>hello_frame.mainloop()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 330</p>
<p><span id="Chapter_63__pyautogui_module_1"
class="anchor"></span>Chapter 63: pyautogui module</p>
<p>pyautogui is a module used to control mouse and keyboard. This module
is basically used to automate mouse click</p>
<p>and keyboard press tasks. For the mouse, the coordinates of the
screen (0,0) start from the top-left corner. If you are out of control,
then quickly move the mouse cursor to top-left, it will take the control
of mouse and keyboard</p>
<p>from the Python and give it back to you.</p>
<p>Section 63.1: Mouse Functions</p>
<p>These are some of useful mouse functions to control the mouse.</p>
<p><em>size()</em> #gave you the size of the screen</p>
<p><em>position()</em> #return current position of mouse</p>
<p><em>moveTo(200,0,duration=1.5)</em> #move the cursor to (200,0)
position with 1.5 second delay <em>moveRel()</em> #move the cursor
relative to your current position. <em>click(337,46)</em> #it will click
on the position mention there <em>dragRel()</em> #it will drag the mouse
relative to position <em>pyautogui.displayMousePosition()</em> #gave you
the current mouse position but should be done on terminal.</p>
<p>Section 63.2: Keyboard Functions</p>
<p>These are some of useful keyboard functions to automate the key
pressing.</p>
<p><em>typewrite('')</em> #this will type the string on the screen where
current window has focused.
<em>typewrite(['a','b','left','left','X','Y'])</em></p>
<p><em>pyautogui.KEYBOARD_KEYS</em> #get the list of all the
keyboard_keys. <em>pyautogui.hotkey('ctrl','o')</em> #for the
combination of keys to enter.</p>
<p>Section 63.3: Screenshot And Image Recognition</p>
<p>These function will help you to take the screenshot and also match
the image with the part of the screen.</p>
<p><em>.screenshot('c:<strong>\\</strong>path')</em> #get the
screenshot. <em>.locateOnScreen('c:<strong>\\</strong>path')</em>
#search that image on screen and get the coordinates for you.
<em>locateCenterOnScreen('c:<strong>\\</strong>path')</em> #get the
coordinate for the image on screen.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 331</p>
<p><span id="Chapter_64__Indexing_and_Slicing_1"
class="anchor"></span>Chapter 64: Indexing and Slicing</p>
<p>Paramer Description</p>
<p>obj The object that you want to extract a "sub-object" from</p>
<p>start The index of obj that you want the sub-object to start from
(keep in mind that Python is zero-indexed,</p>
<p>meaning that the first item of obj has an index of 0). If omitted,
defaults to 0.</p>
<p>stop The (non-inclusive) index of obj that you want the sub-object to
end at. If omitted, defaults to len(obj).</p>
<p>step Allows you to select only every step item. If omitted, defaults
to 1.</p>
<p>Section 64.1: Basic Slicing</p>
<p>For any iterable (for eg. a string, list, etc), Python allows you to
slice and return a substring or sublist of its data.</p>
<p>Format for slicing:</p>
<p>iterable_name[start:stop:step]</p>
<p>where,</p>
<p>start is the first index of the slice. Defaults to 0 (the index of
the first element) stop one past the last index of the slice. Defaults
to len(iterable)</p>
<p>step is the step size (better explained by the examples below)</p>
<p>Examples:</p>
<p>a = "abcdef"</p>
<p><em>a</em> # "abcdef"</p>
<p># Same as a[:] or a[::] since it uses the defaults for all three
indices</p>
<p>a[-1] <em># "f"</em></p>
<p><em>a[:]</em> # "abcdef"</p>
<p><em>a[::]</em> # "abcdef"</p>
<p><em>a[3:]</em> # "def" (from index 3, to end(defaults to size of
iterable)) <em>a[:4]</em> # "abcd" (from beginning(default 0) to
position 4 (excluded)) <em>a[2:4]</em> # "cd" (from position 2, to
position 4 (excluded))</p>
<p>In addition, any of the above can be used with the step size
defined:</p>
<p><em>a[::2]</em> # "ace" (every 2nd element)</p>
<p><em>a[1:4:2]</em> # "bd" (from index 1, to index 4 (excluded), every
2nd element)</p>
<p>Indices can be negative, in which case they're computed from the end
of the sequence</p>
<p><em>a[:-1]</em> # "abcde" (from index 0 (default), to the second last
element (last element - 1)) <em>a[:-2]</em> # "abcd" (from index 0
(default), to the third last element (last element -2)) <em>a[-1:]</em>
# "f" (from the last element to the end (default len())</p>
<p>Step sizes can also be negative, in which case slice will iterate
through the list in reverse order:</p>
<p><em>a[3:1:-1]</em> # "dc" (from index 2 to None (default), in reverse
order)</p>
<p>This construct is useful for reversing an iterable</p>
<p><em>a[::-1]</em> # "fedcba" (from last element (default len()-1), to
first, in reverse order(-1))</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 332</p>
<p><span id="Notice_that_for_negative_steps_t"
class="anchor"></span>Notice that for negative steps the default
end_index is None <a href="http://stackoverflow.com/a/12521981">(see
http://stackoverflow.com/a/12521981 )</a></p>
<p><em>a[5:None:-1]</em> # "fedcba" (this is equivalent to a[::-1])
<em>a[5:0:-1]</em> # "fedcb" (from the last element (index 5) to second
element (index 1)</p>
<p>Section 64.2: Reversing an object</p>
<p>You can use slices to very easily reverse a str, list, or tuple (or
basically any collection object that implements</p>
<p>slicing with the step parameter). Here is an example of reversing a
string, although this applies equally to the other types listed
above:</p>
<p>s = 'reverse me!'</p>
<p><em>s[::-1]</em> # '!em esrever'</p>
<p>Let's quickly look at the syntax. [::-1] means that the slice should
be from the beginning until the end of the string (because start and end
are omitted) and a step of -1 means that it should move through the
string in reverse.</p>
<p>Section 64.3: Slice assignment</p>
<p>Another neat feature using slices is slice assignment. Python allows
you to assign new slices to replace old slices of a list in a single
operation.</p>
<p>This means that if you have a list, you can replace multiple members
in a single assignment:</p>
<p>lst = [1, 2, 3]</p>
<p>lst[1:3] = [4, 5]</p>
<p><em><strong>print</strong>(lst)</em> # Out: [1, 4, 5]</p>
<p>The assignment shouldn't match in size as well, so if you wanted to
replace an old slice with a new slice that is</p>
<p>different in size, you could:</p>
<p>lst = [1, 2, 3, 4, 5]</p>
<p>lst[1:4] = [6]</p>
<p><em><strong>print</strong>(lst)</em> # Out: [1, 6, 5]</p>
<p>It's also possible to use the known slicing syntax to do things like
replacing the entire list:</p>
<p>lst = [1, 2, 3]</p>
<p>lst[:] = [4, 5, 6]</p>
<p><em><strong>print</strong>(lst)</em> # Out: [4, 5, 6]</p>
<p>Or just the last two members:</p>
<p>lst = [1, 2, 3]</p>
<p>lst[-2:] = [4, 5, 6]</p>
<p><em><strong>print</strong>(lst)</em> # Out: [1, 4, 5, 6]</p>
<p>Section 64.4: Making a shallow copy of an array</p>
<p>A quick way to make a copy of an array (as opposed to assigning a
variable with another reference to the original</p>
<p>array) is:</p>
<p>arr[:]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 333</p>
<p><span id="Let_s_examine_the_syntax______me"
class="anchor"></span>Let's examine the syntax. [:] means that start,
end, and slice are all omitted. They default to 0, len(arr), and 1,
respectively, meaning that subarray that we are requesting will have all
of the elements of arr from the beginning</p>
<p>until the very end.</p>
<p>In practice, this looks something like:</p>
<p>arr = ['a', 'b', 'c']</p>
<p>copy = arr[:]</p>
<p>arr.append('d')</p>
<p><em><strong>print</strong>(arr)</em> # ['a', 'b', 'c', 'd']</p>
<p><em><strong>print</strong>(copy)</em> # ['a', 'b', 'c']</p>
<p>As you can see, arr.append('d') added d to arr, but copy remained
unchanged!</p>
<p>Note that this makes a <em>shallow</em> copy, and is identical to
arr.copy().</p>
<p>Section 64.5: Indexing custom classes: __getitem__,</p>
<p>__setitem__ and __delitem__</p>
<p><strong>class</strong> MultiIndexingList:</p>
<p><strong>def</strong> __init__(self, value):</p>
<p>self.value = value</p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong> repr(self.value)</p>
<p><strong>def</strong> __getitem__(self, item):</p>
<p><strong>if</strong> isinstance(item, (int, slice)):</p>
<p><strong>return</strong> self.__class__(self.value[item])</p>
<p><strong>return</strong> [self.value[i] <strong>for</strong> i
<strong>in</strong> item]</p>
<p><strong>def</strong> __setitem__(self, item, value):</p>
<p><strong>if</strong> isinstance(item, int):</p>
<p>self.value[item] = value</p>
<p><strong>elif</strong> isinstance(item, slice):</p>
<p><strong>raise</strong> ValueError('Cannot interpret slice with
multiindexing')</p>
<p>else<strong>:</strong></p>
<p><strong>for</strong> i <strong>in</strong> item:</p>
<p><strong>if</strong> isinstance(i, slice):</p>
<p><strong>raise</strong> ValueError('Cannot interpret slice with
multiindexing')</p>
<p>self.value[i] = value</p>
<p><strong>def</strong> __delitem__(self, item):</p>
<p><strong>if</strong> isinstance(item, int):</p>
<p><strong>del</strong> self.value[item]</p>
<p><strong>elif</strong> isinstance(item, slice):</p>
<p><strong>del</strong> self.value[item]</p>
<p>else<strong>:</strong></p>
<p><strong>if</strong> any(isinstance(elem, slice) <strong>for</strong>
elem <strong>in</strong> item):</p>
<p><strong>raise</strong> ValueError('Cannot interpret slice with
multiindexing')</p>
<p>item = sorted(item, reverse=True)</p>
<p><strong>for</strong> elem <strong>in</strong> item:</p>
<p><strong>del</strong> self.value[elem]</p>
<p>This allows slicing and indexing for element access:</p>
<p>a = MultiIndexingList([1,2,3,4,5,6,7,8])</p>
<p>a</p>
<p># Out: [1, 2, 3, 4, 5, 6, 7, 8]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 334</p>
<p><span id="a_1_5_2_6_1" class="anchor"></span>a[1,5,2,6,1]</p>
<p># Out: [2, 6, 3, 7, 2]</p>
<p>a[4, 1, 5:, 2, ::2]</p>
<p># Out: [5, 2, [6, 7, 8], 3, [1, 3, 5, 7]]</p>
<p># 4|1-|----50:---|2-|-----::2----- &lt;-- indicated which element
came from which index</p>
<p>While setting and deleting elements only allows for <em>comma
separated</em> integer indexing (no slicing):</p>
<p>a[4] = 1000</p>
<p>a</p>
<p># Out: [1, 2, 3, 4, 1000, 6, 7, 8]</p>
<p>a[2,6,1] = 100</p>
<p>a</p>
<p># Out: [1, 100, 100, 4, 1000, 6, 100, 8]</p>
<p><strong>del</strong> a[5]</p>
<p>a</p>
<p># Out: [1, 100, 100, 4, 1000, 100, 8]</p>
<p><strong>del</strong> a[4,2,5]</p>
<p>a</p>
<p># Out: [1, 100, 4, 8]</p>
<p>Section 64.6: Basic Indexing</p>
<p>Python lists are 0-based <em>i.e.</em> the first element in the list
can be accessed by the index 0</p>
<p>arr = ['a', 'b', 'c', 'd']</p>
<p><strong>print</strong>(arr[0])</p>
<p>&gt;&gt; 'a'</p>
<p>You can access the second element in the list by index 1, third
element by index 2 and so on:</p>
<p><strong>print</strong>(arr[1])</p>
<p>&gt;&gt; 'b'</p>
<p><strong>print</strong>(arr[2])</p>
<p>&gt;&gt; 'c'</p>
<p>You can also use negative indices to access elements from the end of
the list. eg. index -1 will give you the last element of the list and
index -2 will give you the second-to-last element of the list:</p>
<p><strong>print</strong>(arr[-1])</p>
<p>&gt;&gt; 'd'</p>
<p><strong>print</strong>(arr[-2])</p>
<p>&gt;&gt; 'c'</p>
<p>If you try to access an index which is not present in the list, an
IndexError will be raised:</p>
<p><strong>print</strong> arr[6]</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>IndexError: list index out of range</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 335</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"><strong>VIDEO:</strong>
Complete Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Bootcamp:
Go from zero</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">to
hero in Python 3</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Learn
Python like a Professional! Start from the</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">basics
and go all the way to creating your own</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">applications
and games!</a></p>
<p><img src="media/index-361_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-361_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Python professionally, learning both Python 2 and Python
3!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Create games with Python, like Tic Tac Toe and Blackjack!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn advanced Python features, like the collections module and how to
work with timestamps!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Object Oriented Programming with classes!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand complex topics, like decorators.</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand how to use both the Jupyter Notebook and create .py
files</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Get an understanding of how to create GUIs in the Jupyter Notebook
system!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Build a complete understanding of Python from the ground up!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Watch
Today →</a></p>
<p><span id="Chapter_65__Plotting_with_Matplo_1"
class="anchor"></span>Chapter 65: Plotting with Matplotlib</p>
<p><a href="https://matplotlib.org/)">Matplotlib
(https://matplotlib.org/)</a> is a library for 2D plotting based on
NumPy. Here are some basic examples.</p>
<p>More examples can be found in the official documentation (<a
href="https://matplotlib.org/2.0.2/gallery.html">https://matplotlib.org/2.0.2/gallery.html</a>
and</p>
<p><a
href="https://matplotlib.org/2.0.2/examples/index.html)">https://matplotlib.org/2.0.2/examples/index.html)</a></p>
<p>Section 65.1: Plots with Common X-axis but dierent Y-axis :</p>
<p>Using twinx()</p>
<p>In this example, we will plot a sine curve and a hyperbolic sine
curve in the same plot with a common x-axis having</p>
<p>different y-axis. This is accomplished by the use of
<strong>twinx()</strong> command.</p>
<p># Plotting tutorials in Python</p>
<p># Adding Multiple plots by twin x axis</p>
<p># Good for plots having different y axis range</p>
<p># Separate axes and figure objects</p>
<p># replicate axes object and plot curves</p>
<p># use axes to set attributes</p>
<p># Note:</p>
<p># Grid for second curve unsuccessful : let me know if you find it!
:(</p>
<p><strong>import</strong> numpy <strong>as</strong> np</p>
<p><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt</p>
<p>x = np.linspace(0, 2.0*np.pi, 101)</p>
<p>y = np.sin(x)</p>
<p>z = np.sinh(x)</p>
<p># separate the figure object and axes object</p>
<p># from the plotting object</p>
<p>fig, ax1 = plt.subplots()</p>
<p># Duplicate the axes with a different y axis</p>
<p># and the same x axis</p>
<p><em>ax2 = ax1.twinx()</em> # ax2 and ax1 will have common x axis and
different y axis</p>
<p># plot the curves on axes 1, and 2, and get the curve handles
<em>curve1, = ax1.plot(x, y, label="sin", color='r')</em></p>
<p>curve2, = ax2.plot(x, z, label="sinh", color='b')</p>
<p># Make a curves list to access the parameters in the curves
<em>curves = [curve1, curve2]</em></p>
<p># add legend via axes 1 or axes 2 object.</p>
<p># one command is usually sufficient</p>
<p># ax1.legend() # will not display the legend of ax2 # ax2.legend() #
will not display the legend of ax1 <em>ax1.legend(curves,
[curve.get_label() <strong>for</strong> curve <strong>in</strong>
curves])</em> # ax2.legend(curves, [curve.get_label() for curve in
curves]) # also valid</p>
<p># Global figure properties</p>
<p>plt.title("Plot of sine and hyperbolic sine")</p>
<p>plt.show()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 337</p>
<p><span id="page_363" class="anchor"></span><img
src="media/index-363_1.jpeg" style="width:6.5in;height:4.875in"
alt="index-363_1.jpg" /></p>
<p>Section 65.2: Plots with common Y-axis and dierent X-axis</p>
<p>using twiny()</p>
<p>In this example, a plot with curves having common y-axis but
different x-axis is demonstrated using <strong>twiny()</strong></p>
<p>method. Also, some additional features such as the title, legend,
labels, grids, axis ticks and colours are added to</p>
<p>the plot.</p>
<p># Plotting tutorials in Python</p>
<p># Adding Multiple plots by twin y axis</p>
<p># Good for plots having different x axis range</p>
<p># Separate axes and figure objects</p>
<p># replicate axes object and plot curves</p>
<p># use axes to set attributes</p>
<p><strong>import</strong> numpy <strong>as</strong> np</p>
<p><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt</p>
<p>y = np.linspace(0, 2.0*np.pi, 101)</p>
<p>x1 = np.sin(y)</p>
<p>x2 = np.sinh(y)</p>
<p># values for making ticks in x and y axis</p>
<p>ynumbers = np.linspace(0, 7, 15)</p>
<p>xnumbers1 = np.linspace(-1, 1, 11)</p>
<p>xnumbers2 = np.linspace(0, 300, 7)</p>
<p># separate the figure object and axes object</p>
<p># from the plotting object</p>
<p>fig, ax1 = plt.subplots()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 338</p>
<p># Duplicate the axes with a different x axis</p>
<p># and the same y axis</p>
<p><em>ax2 = ax1.twiny()</em> # ax2 and ax1 will have common y axis and
different x axis</p>
<p># plot the curves on axes 1, and 2, and get the axes handles
<em>curve1, = ax1.plot(x1, y, label="sin", color='r')</em></p>
<p>curve2, = ax2.plot(x2, y, label="sinh", color='b')</p>
<p># Make a curves list to access the parameters in the curves
<em>curves = [curve1, curve2]</em></p>
<p># add legend via axes 1 or axes 2 object.</p>
<p># one command is usually sufficient</p>
<p># ax1.legend() # will not display the legend of ax2 # ax2.legend() #
will not display the legend of ax1 # ax1.legend(curves,
[curve.get_label() for curve in curves]) <em>ax2.legend(curves,
[curve.get_label() <strong>for</strong> curve <strong>in</strong>
curves])</em> # also valid</p>
<p># x axis labels via the axes</p>
<p>ax1.set_xlabel("Magnitude", color=curve1.get_color())
ax2.set_xlabel("Magnitude", color=curve2.get_color())</p>
<p># y axis label via the axes</p>
<p><em>ax1.set_ylabel("Angle/Value", color=curve1.get_color())</em> #
ax2.set_ylabel("Magnitude", color=curve2.get_color()) # does not work #
ax2 has no property control over y axis</p>
<p># y ticks - make them coloured as well</p>
<p><em>ax1.tick_params(axis='y', colors=curve1.get_color())</em> #
ax2.tick_params(axis='y', colors=curve2.get_color()) # does not work #
ax2 has no property control over y axis</p>
<p># x axis ticks via the axes</p>
<p>ax1.tick_params(axis='x', colors=curve1.get_color())
ax2.tick_params(axis='x', colors=curve2.get_color())</p>
<p># set x ticks</p>
<p>ax1.set_xticks(xnumbers1)</p>
<p>ax2.set_xticks(xnumbers2)</p>
<p># set y ticks</p>
<p>ax1.set_yticks(ynumbers)</p>
<p># ax2.set_yticks(ynumbers) # also works</p>
<p># Grids via axes 1 # use this if axes 1 is used to</p>
<p># define the properties of common x axis</p>
<p># ax1.grid(color=curve1.get_color())</p>
<p># To make grids using axes 2</p>
<p>ax1.grid(color=curve2.get_color())</p>
<p>ax2.grid(color=curve2.get_color())</p>
<p>ax1.xaxis.grid(False)</p>
<p># Global figure properties</p>
<p>plt.title("Plot of sine and hyperbolic sine")</p>
<p>plt.show()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 339</p>
<p><span id="page_365" class="anchor"></span><img
src="media/index-365_1.jpeg" style="width:6.5in;height:4.875in"
alt="index-365_1.jpg" /></p>
<p>Section 65.3: A Simple Plot in Matplotlib</p>
<p>This example illustrates how to create a simple sine curve using
<strong>Matplotlib</strong></p>
<p># Plotting tutorials in Python</p>
<p># Launching a simple plot</p>
<p><strong>import</strong> numpy <strong>as</strong> np</p>
<p><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt</p>
<p># angle varying between 0 and 2*pi</p>
<p>x = np.linspace(0, 2.0*np.pi, 101)</p>
<p><em>y = np.sin(x)</em> # sine function</p>
<p>plt.plot(x, y)</p>
<p>plt.show()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 340</p>
<p><span id="page_366" class="anchor"></span><img
src="media/index-366_1.jpeg" style="width:6.5in;height:4.875in"
alt="index-366_1.jpg" /></p>
<p>Section 65.4: Adding more features to a simple plot : axis</p>
<p>labels, title, axis ticks, grid, and legend</p>
<p>In this example, we take a sine curve plot and add more features to
it; namely the title, axis labels, title, axis ticks,</p>
<p>grid and legend.</p>
<p># Plotting tutorials in Python</p>
<p># Enhancing a plot</p>
<p><strong>import</strong> numpy <strong>as</strong> np</p>
<p><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt</p>
<p>x = np.linspace(0, 2.0*np.pi, 101)</p>
<p>y = np.sin(x)</p>
<p># values for making ticks in x and y axis</p>
<p>xnumbers = np.linspace(0, 7, 15)</p>
<p>ynumbers = np.linspace(-1, 1, 11)</p>
<p>plt.plot(x, y, color='r', label='sin') <em># r - red colour</em>
plt.xlabel("Angle in Radians")</p>
<p>plt.ylabel("Magnitude")</p>
<p>plt.title("Plot of some trigonometric functions")</p>
<p>plt.xticks(xnumbers)</p>
<p>plt.yticks(ynumbers)</p>
<p>plt.legend()</p>
<p>plt.grid()</p>
<p>plt.axis([0, 6.5, -1.1, 1.1]) <em># [xstart, xend, ystart, yend]</em>
plt.show()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 341</p>
<p><span id="page_367" class="anchor"></span><img
src="media/index-367_1.jpeg" style="width:6.5in;height:4.875in"
alt="index-367_1.jpg" /></p>
<p>Section 65.5: Making multiple plots in the same figure by</p>
<p>superimposition similar to MATLAB</p>
<p>In this example, a sine curve and a cosine curve are plotted in the
same figure by superimposing the plots on top of</p>
<p>each other.</p>
<p># Plotting tutorials in Python</p>
<p># Adding Multiple plots by superimposition</p>
<p># Good for plots sharing similar x, y limits</p>
<p># Using single plot command and legend</p>
<p><strong>import</strong> numpy <strong>as</strong> np</p>
<p><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt</p>
<p>x = np.linspace(0, 2.0*np.pi, 101)</p>
<p>y = np.sin(x)</p>
<p>z = np.cos(x)</p>
<p># values for making ticks in x and y axis</p>
<p>xnumbers = np.linspace(0, 7, 15)</p>
<p>ynumbers = np.linspace(-1, 1, 11)</p>
<p>plt.plot(x, y, 'r', x, z, 'g') <em># r, g - red, green colour</em>
plt.xlabel("Angle in Radians")</p>
<p>plt.ylabel("Magnitude")</p>
<p>plt.title("Plot of some trigonometric functions")</p>
<p>plt.xticks(xnumbers)</p>
<p>plt.yticks(ynumbers)</p>
<p>plt.legend(['sine', 'cosine'])</p>
<p>plt.grid()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 342</p>
<p><span id="plt_axis__0__6_5___1_1__1_1"
class="anchor"></span>plt.axis([0, 6.5, -1.1, 1.1]) <em># [xstart, xend,
ystart, yend]</em> plt.show()</p>
<p><img src="media/index-368_1.jpeg" style="width:6.5in;height:4.875in"
alt="index-368_1.jpg" /></p>
<p>Section 65.6: Making multiple Plots in the same figure using</p>
<p>plot superimposition with separate plot commands</p>
<p>Similar to the previous example, here, a sine and a cosine curve are
plotted on the same figure using separate plot</p>
<p>commands. This is more Pythonic and can be used to get separate
handles for each plot.</p>
<p># Plotting tutorials in Python</p>
<p># Adding Multiple plots by superimposition</p>
<p># Good for plots sharing similar x, y limits</p>
<p># Using multiple plot commands</p>
<p># Much better and preferred than previous</p>
<p><strong>import</strong> numpy <strong>as</strong> np</p>
<p><strong>import</strong> matplotlib.pyplot <strong>as</strong> plt</p>
<p>x = np.linspace(0, 2.0*np.pi, 101)</p>
<p>y = np.sin(x)</p>
<p>z = np.cos(x)</p>
<p># values for making ticks in x and y axis</p>
<p>xnumbers = np.linspace(0, 7, 15)</p>
<p>ynumbers = np.linspace(-1, 1, 11)</p>
<p>plt.plot(x, y, color='r', label='sin') <em># r - red colour</em>
plt.plot(x, z, color='g', label='cos') <em># g - green colour</em>
plt.xlabel("Angle in Radians")</p>
<p>plt.ylabel("Magnitude")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 343</p>
<p>plt.title("Plot of some trigonometric functions")</p>
<p>plt.xticks(xnumbers)</p>
<p>plt.yticks(ynumbers)</p>
<p>plt.legend()</p>
<p>plt.grid()</p>
<p>plt.axis([0, 6.5, -1.1, 1.1]) <em># [xstart, xend, ystart, yend]</em>
plt.show()</p>
<p><img src="media/index-369_1.jpeg" style="width:6.5in;height:4.875in"
alt="index-369_1.jpg" /></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 344</p>
<p><span id="Chapter_66__graph_tool_1" class="anchor"></span>Chapter 66:
graph-tool</p>
<p>The python tools can be used to generate graph</p>
<p>Section 66.1: PyDotPlus</p>
<p>PyDotPlus is an improved version of the old pydot project that
provides a Python Interface to Graphviz’s Dot language.</p>
<p>Installation</p>
<p>For the latest stable version:</p>
<p>pip install pydotplus</p>
<p>For the development version:</p>
<p>pip install
https://github.com/carlos-jenkins/pydotplus/archive/master.zip</p>
<p>Load graph as defined by a DOT file</p>
<p>The file is assumed to be in DOT format. It will be loaded, parsed
and a Dot class will be returned, representing the graph. For example, a
simple demo.dot:</p>
<p>digraph demo1{ a -&gt; b -&gt; c; c -&gt;a; }</p>
<p><strong>import</strong> pydotplus</p>
<p>graph_a = pydotplus.graph_from_dot_file('demo.dot')
graph_a.write_svg('test.svg') <em># generate graph in svg.</em></p>
<p>You will get a svg(Scalable Vector Graphics) like this:</p>
<p><img src="media/index-370_1.jpeg"
style="width:1.33333in;height:2.81944in" alt="index-370_1.jpg" /></p>
<p>Section 66.2: PyGraphviz</p>
<p><a href="http://pypi.python.org/pypi/pygraphviz">Get PyGraphviz from
the Python Package Index at
http://pypi.python.org/pypi/pygraphviz</a></p>
<p>or install it with:</p>
<p>pip install pygraphviz</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 345</p>
<p>and an attempt will be made to find and install an appropriate
version that matches your operating system and Python version.</p>
<p>You can install the development version (at github.com) with:</p>
<p>pip install
git://github.com/pygraphviz/pygraphviz.git<em>#egg=pygraphviz</em></p>
<p><a href="http://pypi.python.org/pypi/pygraphviz">Get PyGraphviz from
the Python Package Index at
http://pypi.python.org/pypi/pygraphviz</a></p>
<p>or install it with:</p>
<p>easy_install pygraphviz</p>
<p>and an attempt will be made to find and install an appropriate
version that matches your operating system and</p>
<p>Python version.</p>
<p>Load graph as defined by a DOT file</p>
<p>The file is assumed to be in DOT format. It will be loaded, parsed
and a Dot class will be returned,</p>
<p>representing the graph. For example,a simple demo.dot:</p>
<p>digraph demo1{ a -&gt; b -&gt; c; c -&gt;a; }</p>
<p>Load it and draw it.</p>
<p><strong>import</strong> pygraphviz <strong>as</strong> pgv</p>
<p>G = pgv.AGraph("demo.dot")</p>
<p>G.draw('test', format='svg', prog='dot')</p>
<p>You will get a svg(Scalable Vector Graphics) like this:</p>
<p><img src="media/index-371_1.jpeg"
style="width:1.33333in;height:2.81944in" alt="index-371_1.jpg" /></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 346</p>
<p><span id="Chapter_67__Generators_1" class="anchor"></span>Chapter 67:
Generators</p>
<p>Generators are lazy iterators created by generator functions (using
<strong>yield</strong>) or generator expressions (using</p>
<p>(an_expression <strong>for</strong> x <strong>in</strong>
an_iterator)).</p>
<p>Section 67.1: Introduction</p>
<p><strong>Generator expressions</strong> are similar to list,
dictionary and set comprehensions, but are enclosed with
parentheses.</p>
<p>The parentheses do not have to be present when they are used as the
sole argument for a function call.</p>
<p>expression = (x**2 <strong>for</strong> x <strong>in</strong>
range(10))</p>
<p>This example generates the 10 first perfect squares, including 0 (in
which x = 0).</p>
<p><strong>Generator functions</strong> <a
href="https://docs.python.org/3/reference/simple_stmts.html#yield">are
similar to regular functions, except that they have one or more
<strong>yield</strong> statements in their</a></p>
<p>body. Such functions cannot <strong>return</strong> any values
(however empty <strong>return</strong>s are allowed if you want to stop
the generator early).</p>
<p><strong>def</strong> function():</p>
<p><strong>for</strong> x <strong>in</strong> range(10):</p>
<p>yield <strong>x**2</strong></p>
<p>This generator function is equivalent to the previous generator
expression, it outputs the same.</p>
<p><strong>Note</strong>: all generator expressions have their own
<em>equivalent</em> functions, but not vice versa.</p>
<p>A generator expression can be used without parentheses if both
parentheses would be repeated otherwise:</p>
<p>sum(i <strong>for</strong> i <strong>in</strong> range(10)
<strong>if</strong> i % 2 == 0) <em>#Output: 20</em></p>
<p><em>any(x = 0 <strong>for</strong> x <strong>in</strong> foo)</em>
#Output: True or False depending on foo <em>type(a &gt; b
<strong>for</strong> a <strong>in</strong> foo <strong>if</strong> a % 2
== 1)</em> #Output: &lt;class 'generator'&gt;</p>
<p>Instead of:</p>
<p>sum((i <strong>for</strong> i <strong>in</strong> range(10)
<strong>if</strong> i % 2 == 0))</p>
<p>any((x = 0 <strong>for</strong> x <strong>in</strong> foo))</p>
<p>type((a &gt; b <strong>for</strong> a <strong>in</strong> foo
<strong>if</strong> a % 2 == 1))</p>
<p>But not:</p>
<p>fooFunction(i <strong>for</strong> i <strong>in</strong> range(10)
<strong>if</strong> i % 2 == 0,foo,bar) <strong>return</strong> x = 0
<strong>for</strong> x <strong>in</strong> foo</p>
<p>barFunction(baz, a &gt; b <strong>for</strong> a <strong>in</strong>
foo <strong>if</strong> a % 2 == 1)</p>
<p>Calling a generator function produces a <strong>generator
object</strong>, which can later be iterated over. Unlike other types
of</p>
<p>iterators, generator objects may only be traversed once.</p>
<p>g1 = function()</p>
<p><em><strong>print</strong>(g1)</em> # Out: &lt;generator object
function at 0x1012e1888&gt;</p>
<p>Notice that a generator's body is <strong>not</strong> immediately
executed: when you call function() in the example above, it</p>
<p>immediately returns a generator object, without executing even the
first print statement. This allows generators to</p>
<p>consume less memory than functions that return a list, and it allows
creating generators that produce infinitely long sequences.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 347</p>
<p>For this reason, generators are often used in data science, and other
contexts involving large amounts of data. Another advantage is that
other code can immediately use the values yielded by a generator,
without waiting for</p>
<p>the complete sequence to be produced.</p>
<p>However, if you need to use the values produced by a generator more
than once, and if generating them costs</p>
<p>more than storing, it may be better to store the yielded values as a
list than to re-generate the sequence. See 'Resetting a generator' below
for more details.</p>
<p>Typically a generator object is used in a loop, or in any function
that requires an iterable:</p>
<p><strong>for</strong> x <strong>in</strong> g1:</p>
<p><strong>print</strong>("Received", x)</p>
<p># Output:</p>
<p># Received 0</p>
<p># Received 1</p>
<p># Received 4</p>
<p># Received 9</p>
<p># Received 16</p>
<p># Received 25</p>
<p># Received 36</p>
<p># Received 49</p>
<p># Received 64</p>
<p># Received 81</p>
<p>arr1 = list(g1)</p>
<p># arr1 = [], because the loop above already consumed all the values.
<em>g2 = function()</em></p>
<p><em>arr2 = list(g2)</em> # arr2 = [0, 1, 4, 9, 16, 25, 36, 49, 64,
81]</p>
<p><a href="https://docs.python.org/3/library/functions.html#next">Since
generator objects are iterators, one can iterate over them manually
using the next() function. Doing so will</a></p>
<p>return the yielded values one by one on each subsequent
invocation.</p>
<p>Under the hood, each time you call next() on a generator, Python
executes statements in the body of the</p>
<p>generator function until it hits the next <strong>yield</strong>
statement. At this point it returns the argument of the
<strong>yield</strong> command, and remembers the point where that
happened. Calling next() once again will resume execution from</p>
<p>that point and continue until the next <strong>yield</strong>
statement.</p>
<p>If Python reaches the end of the generator function without
encountering any more <strong>yield</strong>s, a StopIteration</p>
<p>exception is raised (this is normal, all iterators behave in the same
way).</p>
<p>g3 = function()</p>
<p>a = next(g3) <em># a becomes 0</em></p>
<p>b = next(g3) <em># b becomes 1</em></p>
<p>c = next(g3) <em># c becomes 2</em></p>
<p>...</p>
<p><em>j = next(g3)</em> # Raises StopIteration, j remains undefined</p>
<p>Note that in Python 2 generator objects had .next() methods that
could be used to iterate through the yielded values manually. In Python
3 this method was replaced with the .__next__() standard for all
iterators.</p>
<p>Resetting a generator</p>
<p>Remember that you can only iterate through the objects generated by a
generator <em>once</em>. If you have already iterated through the
objects in a script, any further attempt do so will yield None.</p>
<p>If you need to use the objects generated by a generator more than
once, you can either define the generator</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 348</p>
<p><span id="function_again_and_use_it_a_seco"
class="anchor"></span>function again and use it a second time, or,
alternatively, you can store the output of the generator function in a
list on first use. Re-defining the generator function will be a good
option if you are dealing with large volumes of data,</p>
<p>and storing a list of all data items would take up a lot of disc
space. Conversely, if it is costly to generate the items</p>
<p>initially, you may prefer to store the generated items in a list so
that you can re-use them.</p>
<p>Section 67.2: Infinite sequences</p>
<p>Generators can be used to represent infinite sequences:</p>
<p><strong>def</strong> integers_starting_from(n):</p>
<p><strong>while</strong> True:</p>
<p>yield <strong>n</strong></p>
<p>n += 1</p>
<p>natural_numbers = integers_starting_from(1)</p>
<p>Infinite sequence of numbers as above can also be generated with the
help of <a
href="https://docs.python.org/3/library/itertools.html#itertools.count">itertools.count</a>.
The above code</p>
<p>could be written as below</p>
<p>natural_numbers = itertools.count(1)</p>
<p>You can use generator comprehensions on infinite generators to
produce new generators:</p>
<p>multiples_of_two = (x * 2 <strong>for</strong> x <strong>in</strong>
natural_numbers) multiples_of_three = (x <strong>for</strong> x
<strong>in</strong> natural_numbers <strong>if</strong> x % 3 == 0)</p>
<p>Be aware that an infinite generator does not have an end, so passing
it to any function that will attempt to consume</p>
<p>the generator entirely will have <strong>dire
consequences</strong>:</p>
<p><em>list(multiples_of_two)</em> # will never terminate, or raise an
OS-specific error</p>
<p>Instead, use list/set comprehensions with <a
href="https://docs.python.org/3/library/functions.html#func-range">range</a>
(or xrange for python &lt; 3.0):</p>
<p>first_five_multiples_of_three = [next(multiples_of_three)
<strong>for</strong> _ <strong>in</strong> range(5)] <em># [3, 6, 9, 12,
15]</em></p>
<p><a
href="https://docs.python.org/3/library/itertools.html#itertools.islice">or
use itertools.islice()</a> to slice the iterator to a subset:</p>
<p><strong>from</strong> itertools <strong>import</strong> islice</p>
<p>multiples_of_four = (x * 4 <strong>for</strong> x <strong>in</strong>
integers_starting_from(1)) first_five_multiples_of_four =
list(islice(multiples_of_four, 5)) <em># [4, 8, 12, 16, 20]</em></p>
<p>Note that the original generator is updated too, just like all other
generators coming from the same "root":</p>
<p>next(natural_numbers) <em># yields 16</em></p>
<p>next(multiples_of_two) <em># yields 34</em></p>
<p>next(multiples_of_four) <em># yields 24</em></p>
<p>An infinite sequence can also be iterated with a
<strong>for</strong>-loop. Make sure to include a conditional
<strong>break</strong> statement so</p>
<p>that the loop would terminate eventually:</p>
<p><strong>for</strong> idx, number <strong>in</strong>
enumerate(multiplies_of_two):</p>
<p><strong>print</strong>(number)</p>
<p><strong>if</strong> idx == 9:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 349</p>
<p><span id="break___stop_after_taking_the_fi"
class="anchor"></span><em><strong>break</strong></em> # stop after
taking the first 10 multiplies of two</p>
<p>Classic example - Fibonacci numbers</p>
<p><strong>import</strong> itertools</p>
<p><strong>def</strong> fibonacci():</p>
<p>a, b = 1, 1</p>
<p><strong>while</strong> True:</p>
<p>yield <strong>a</strong></p>
<p>a, b = b, a + b</p>
<p>first_ten_fibs = list(itertools.islice(fibonacci(), 10)) <em># [1, 1,
2, 3, 5, 8, 13, 21, 34, 55]</em></p>
<p><strong>def</strong> nth_fib(n):</p>
<p><strong>return</strong> next(itertools.islice(fibonacci(), n - 1,
n))</p>
<p>ninety_nineth_fib = nth_fib(99) <em># 354224848179261915075</em></p>
<p>Section 67.3: Sending objects to a generator</p>
<p>In addition to receiving values from a generator, it is possible to
<em>send</em> an object to a generator using the send()</p>
<p>method.</p>
<p><strong>def</strong> accumulator():</p>
<p>total = 0</p>
<p>value = None</p>
<p><strong>while</strong> True:</p>
<p># receive sent value</p>
<p>value = <strong>yield</strong> total</p>
<p><strong>if</strong> value <strong>is</strong> None:
<strong>break</strong></p>
<p># aggregate values</p>
<p>total += value</p>
<p>generator = accumulator()</p>
<p># advance until the first "yield"</p>
<p>next(generator) <em># 0</em></p>
<p># from this point on, the generator aggregates values
<em>generator.send(1)</em> # 1</p>
<p>generator.send(10) <em># 11</em></p>
<p>generator.send(100) <em># 111</em></p>
<p># ...</p>
<p># Calling next(generator) is equivalent to calling
generator.send(None) <em>next(generator)</em> # StopIteration</p>
<p>What happens here is the following:</p>
<p>When you first call next(generator), the program advances to the
first <strong>yield</strong> statement, and returns the</p>
<p>value of total at that point, which is 0. The execution of the
generator suspends at this point.</p>
<p>When you then call generator.send(x), the interpreter takes the
argument x and makes it the return value of the last
<strong>yield</strong> statement, which gets assigned to value. The
generator then proceeds as usual, until it</p>
<p>yields the next value.</p>
<p>When you finally call next(generator), the program treats this as if
you're sending None to the generator.</p>
<p>There is nothing special about None, however, this example uses None
as a special value to ask the generator to stop.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 350</p>
<p><span id="Section_67_4__Yielding_all_value"
class="anchor"></span>Section 67.4: Yielding all values from another
iterable</p>
<p>Python 3.x Version ≥ 3.3</p>
<p>Use <strong>yield from</strong> if you want to yield all values from
another iterable:</p>
<p><strong>def</strong> foob(x):</p>
<p><strong>yield from</strong> range(x * 2)</p>
<p>yield from <strong>range(2)</strong></p>
<p><em>list(foob(5))</em> # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]</p>
<p>This works with generators as well.</p>
<p><strong>def</strong> fibto(n):</p>
<p>a, b = 1, 1</p>
<p><strong>while</strong> True:</p>
<p><strong>if</strong> a &gt;= n: <strong>break</strong></p>
<p>yield <strong>a</strong></p>
<p>a, b = b, a + b</p>
<p><strong>def</strong> usefib():</p>
<p>yield from <strong>fibto(10)</strong></p>
<p>yield from <strong>fibto(20)</strong></p>
<p><em>list(usefib())</em> # [1, 1, 2, 3, 5, 8, 1, 1, 2, 3, 5, 8,
13]</p>
<p>Section 67.5: Iteration</p>
<p>A generator object supports the <em>iterator protocol</em>. That is,
it provides a next() method (__next__() in Python 3.x), which is used to
step through its execution, and its __iter__ method returns itself. This
means that a generator can</p>
<p>be used in any language construct which supports generic iterable
objects.</p>
<p># naive partial implementation of the Python 2.x xrange()
<em><strong>def</strong> xrange(n):</em></p>
<p>i = 0</p>
<p><strong>while</strong> i &lt; n:</p>
<p>yield <strong>i</strong></p>
<p>i += 1</p>
<p># looping</p>
<p><strong>for</strong> i <strong>in</strong> xrange(10):</p>
<p><em><strong>print</strong>(i)</em> # prints the values 0, 1, ...,
9</p>
<p># unpacking</p>
<p>a, b, c = xrange(3) <em># 0, 1, 2</em></p>
<p># building a list</p>
<p>l = list(xrange(10)) <em># [0, 1, ..., 9]</em></p>
<p>Section 67.6: The next() function</p>
<p><a href="https://docs.python.org/3/library/functions.html#next">The
next() built-in is a convenient wrapper which can be used to receive a
value from any iterator (including a</a> generator iterator) and to
provide a default value in case the iterator is exhausted.</p>
<p><strong>def</strong> nums():</p>
<p>yield <strong>1</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 351</p>
<p><span id="yield_2" class="anchor"></span>yield <strong>2</strong></p>
<p>yield <strong>3</strong></p>
<p>generator = nums()</p>
<p>next(generator, None) <em># 1</em></p>
<p>next(generator, None) <em># 2</em></p>
<p>next(generator, None) <em># 3</em></p>
<p>next(generator, None) <em># None</em></p>
<p>next(generator, None) <em># None</em></p>
<p># ...</p>
<p>The syntax is next(iterator[, default]). If iterator ends and a
default value was passed, it is returned. If no</p>
<p>default was provided, StopIteration is raised.</p>
<p>Section 67.7: Coroutines</p>
<p>Generators can be used to implement coroutines:</p>
<p># create and advance generator to the first yield</p>
<p><strong>def</strong> coroutine(func):</p>
<p><strong>def</strong> start(*args,**kwargs):</p>
<p>cr = func(*args,**kwargs)</p>
<p>next(cr)</p>
<p>return <strong>cr</strong></p>
<p>return <strong>start</strong></p>
<p># example coroutine</p>
<p>@coroutine</p>
<p><strong>def</strong> adder(sum = 0):</p>
<p><strong>while</strong> True:</p>
<p>x = <strong>yield</strong> sum</p>
<p>sum += x</p>
<p># example use</p>
<p>s = adder()</p>
<p>s.send(1) <em># 1</em></p>
<p>s.send(2) <em># 3</em></p>
<p>Coroutines are commonly used to implement state machines, as they are
primarily useful for creating single-</p>
<p>method procedures that require a state to function properly. They
operate on an existing state and return the value obtained on completion
of the operation.</p>
<p>Section 67.8: Refactoring list-building code</p>
<p>Suppose you have complex code that creates and returns a list by
starting with a blank list and repeatedly appending to it:</p>
<p><strong>def</strong> create():</p>
<p>result = []</p>
<p># logic here...</p>
<p><em>result.append(value)</em> # possibly in several places</p>
<p># more logic...</p>
<p><em><strong>return</strong> result</em> # possibly in several
places</p>
<p>values = create()</p>
<p>When it's not practical to replace the inner logic with a list
comprehension, you can turn the entire function into a</p>
<p>generator in-place, and then collect the results:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 352</p>
<p><span id="def_create_gen" class="anchor"></span><strong>def</strong>
create_gen():</p>
<p># logic...</p>
<p><strong>yield</strong> value</p>
<p># more logic</p>
<p><em><strong>return</strong></em> # not needed if at the end of the
function, of course</p>
<p>values = list(create_gen())</p>
<p>If the logic is recursive, use <strong>yield from</strong> to include
all the values from the recursive call in a "flattened" result:</p>
<p><strong>def</strong> preorder_traversal(node):</p>
<p><strong>yield</strong> node.value</p>
<p><strong>for</strong> child <strong>in</strong> node.children:</p>
<p><strong>yield from</strong> preorder_traversal(child)</p>
<p>Section 67.9: Yield with recursion: recursively listing all files
in</p>
<p>a directory</p>
<p>First, import the libraries that work with files:</p>
<p><strong>from</strong> os <strong>import</strong> listdir</p>
<p><strong>from</strong> os.path <strong>import</strong> isfile, join,
exists</p>
<p>A helper function to read only files from a directory:</p>
<p><strong>def</strong> get_files(path):</p>
<p><strong>for</strong> file <strong>in</strong> listdir(path):</p>
<p>full_path = join(path, file)</p>
<p><strong>if</strong> isfile(full_path):</p>
<p><strong>if</strong> exists(full_path):</p>
<p><strong>yield</strong> full_path</p>
<p>Another helper function to get only the subdirectories:</p>
<p><strong>def</strong> get_directories(path):</p>
<p><strong>for</strong> directory <strong>in</strong> listdir(path):</p>
<p>full_path = join(path, directory)</p>
<p><strong>if not</strong> isfile(full_path):</p>
<p><strong>if</strong> exists(full_path):</p>
<p><strong>yield</strong> full_path</p>
<p>Now use these functions to recursively get all files within a
directory and all its subdirectories (using generators):</p>
<p><strong>def</strong> get_files_recursive(directory):</p>
<p><strong>for</strong> file <strong>in</strong>
get_files(directory):</p>
<p>yield <strong>file</strong></p>
<p><strong>for</strong> subdirectory <strong>in</strong>
get_directories(directory):</p>
<p><strong>for</strong> file <strong>in</strong>
get_files_recursive(subdirectory): <em># here the recursive
call</em></p>
<p>yield <strong>file</strong></p>
<p>This function can be simplified using <strong>yield
from</strong>:</p>
<p><strong>def</strong> get_files_recursive(directory):</p>
<p><strong>yield from</strong> get_files(directory)</p>
<p><strong>for</strong> subdirectory <strong>in</strong>
get_directories(directory):</p>
<p><strong>yield from</strong> get_files_recursive(subdirectory)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 353</p>
<p><span id="Section_67_10__Generator_express"
class="anchor"></span>Section 67.10: Generator expressions</p>
<p>It's possible to create generator iterators using a
comprehension-like syntax.</p>
<p>generator = (i * 2 <strong>for</strong> i <strong>in</strong>
range(3))</p>
<p>next(generator) <em># 0</em></p>
<p>next(generator) <em># 2</em></p>
<p>next(generator) <em># 4</em></p>
<p><em>next(generator)</em> # raises StopIteration</p>
<p>If a function doesn't necessarily need to be passed a list, you can
save on characters (and improve readability) by placing a generator
expression inside a function call. The parenthesis from the function
call implicitly make your</p>
<p>expression a generator expression.</p>
<p><em>sum(i ** 2 <strong>for</strong> i <strong>in</strong>
range(4))</em> # 0^2 + 1^2 + 2^2 + 3^2 = 0 + 1 + 4 + 9 = 14</p>
<p>Additionally, you will save on memory because instead of loading the
entire list you are iterating over ([0, 1, 2, 3] in the above example),
the generator allows Python to use values as needed.</p>
<p>Section 67.11: Using a generator to find Fibonacci Numbers</p>
<p>A practical use case of a generator is to iterate through values of
an infinite series. Here's an example of finding the</p>
<p><a href="https://oeis.org/A000045">first ten terms of the Fibonacci
Sequence.</a></p>
<p><strong>def</strong> fib(a=0, b=1):</p>
<p>"""Generator that yields Fibonacci numbers. `a` and `b` are the seed
values""" <strong>while</strong> True:</p>
<p>yield <strong>a</strong></p>
<p>a, b = b, a + b</p>
<p>f = fib()</p>
<p><strong>print</strong>(', '.join(str(next(f)) <strong>for</strong> _
<strong>in</strong> range(10)))</p>
<p>0, 1, 1, 2, 3, 5, 8, 13, 21, 34</p>
<p>Section 67.12: Searching</p>
<p>The next function is useful even without iterating. Passing a
generator expression to next is a quick way to search</p>
<p>for the first occurrence of an element matching some predicate.
Procedural code like</p>
<p><strong>def</strong> find_and_transform(sequence, predicate,
func):</p>
<p><strong>for</strong> element <strong>in</strong> sequence:</p>
<p><strong>if</strong> predicate(element):</p>
<p><strong>return</strong> func(element)</p>
<p><strong>raise</strong> ValueError</p>
<p>item = find_and_transform(my_sequence, my_predicate, my_func)</p>
<p>can be replaced with:</p>
<p><em>item = next(my_func(x) <strong>for</strong> x <strong>in</strong>
my_sequence <strong>if</strong> my_predicate(x))</em> # StopIteration
will be raised if there are no matches; this exception can # be caught
and transformed, if desired.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 354</p>
<p><span id="For_this_purpose__it_may_be_desi" class="anchor"></span>For
this purpose, it may be desirable to create an alias, such as first =
next, or a wrapper function to convert the exception:</p>
<p><strong>def</strong> first(generator):</p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> next(generator)</p>
<p><strong>except</strong> StopIteration:</p>
<p><strong>raise</strong> ValueError</p>
<p>Section 67.13: Iterating over generators in parallel</p>
<p>To iterate over several generators in parallel, use the zip
builtin:</p>
<p><strong>for</strong> x, y <strong>in</strong> zip(a,b):</p>
<p>print<strong>(x,y)</strong></p>
<p>Results in:</p>
<p>1 x</p>
<p>2 y</p>
<p>3 z</p>
<p>In python 2 you should use itertools.izip instead. Here we can also
see that the all the zip functions yield tuples.</p>
<p>Note that zip will stop iterating as soon as one of the iterables
runs out of items. If you'd like to iterate for as long as the longest
iterable, use itertools.zip_longest().</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 355</p>
<p><span id="Chapter_68__Reduce_1" class="anchor"></span>Chapter 68:
Reduce</p>
<p>Parameter Details</p>
<p>function function that is used for reducing the iterable (must take
two arguments). (<em>positional-only</em>)</p>
<p>iterable iterable that's going to be reduced.
(<em>positional-only</em>)</p>
<p>initializer start-value of the reduction. (<em>optional</em>,
<em>positional-only</em>)</p>
<p>Section 68.1: Overview</p>
<p># No import needed</p>
<p># No import required...</p>
<p><em><strong>from</strong> functools <strong>import</strong>
reduce</em> # ... but it can be loaded from the functools module</p>
<p><strong>from</strong> functools <strong>import</strong> reduce <em>#
mandatory</em></p>
<p>reduce reduces an iterable by applying a function repeatedly on the
next element of an iterable and the</p>
<p>cumulative result so far.</p>
<p><strong>def</strong> add(s1, s2):</p>
<p><strong>return</strong> s1 + s2</p>
<p>asequence = [1, 2, 3]</p>
<p><em>reduce(add, asequence)</em> # equivalent to: add(add(1,2),3) #
Out: 6</p>
<p>In this example, we defined our own add function. However, Python
comes with a standard equivalent function in</p>
<p>the operator module:</p>
<p><strong>import</strong> operator</p>
<p>reduce(operator.add, asequence)</p>
<p># Out: 6</p>
<p>reduce can also be passed a starting value:</p>
<p>reduce(add, asequence, 10)</p>
<p># Out: 16</p>
<p>Section 68.2: Using reduce</p>
<p><strong>def</strong> multiply(s1, s2):</p>
<p><strong>print</strong>('{arg1} * {arg2} = {res}'.format(arg1=s1,</p>
<p>arg2=s2,</p>
<p>res=s1*s2))</p>
<p><strong>return</strong> s1 * s2</p>
<p>asequence = [1, 2, 3]</p>
<p>Given an initializer the function is started by applying it to the
initializer and the first iterable element:</p>
<p>cumprod = reduce(multiply, asequence, 5)</p>
<p># Out: 5 * 1 = 5</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 356</p>
<p><span id="_______5___2___10" class="anchor"></span># 5 * 2 = 10</p>
<p># 10 * 3 = 30</p>
<p><strong>print</strong>(cumprod)</p>
<p># Out: 30</p>
<p>Without initializer parameter the reduce starts by applying the
function to the first two list elements:</p>
<p>cumprod = reduce(multiply, asequence)</p>
<p># Out: 1 * 2 = 2</p>
<p># 2 * 3 = 6</p>
<p><strong>print</strong>(cumprod)</p>
<p># Out: 6</p>
<p>Section 68.3: Cumulative product</p>
<p><strong>import</strong> operator</p>
<p>reduce(operator.mul, [10, 5, -3])</p>
<p># Out: -150</p>
<p>Section 68.4: Non short-circuit variant of any/all</p>
<p>reduce will not terminate the iteration before the iterable has been
completely iterated over so it can be used to</p>
<p>create a non short-circuit any() or all() function:</p>
<p><strong>import</strong> operator</p>
<p># non short-circuit "all"</p>
<p>reduce(operator.and_, [False, True, True, True]) <em># =
False</em></p>
<p># non short-circuit "any"</p>
<p>reduce(operator.or_, [True, False, False, False]) <em># =
True</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 357</p>
<p><span id="Chapter_69__Map_Function_1" class="anchor"></span>Chapter
69: Map Function</p>
<p>Parameter Details</p>
<p>function function for mapping (must take as many parameters as there
are iterables) (<em>positional-only</em>)</p>
<p>iterable the function is applied to each element of the iterable
(<em>positional-only</em>)</p>
<p>*additional_iterables see iterable, but as many as you like
(<em>optional</em>, <em>positional-only</em>)</p>
<p>Section 69.1: Basic use of map, itertools.imap and</p>
<p>future_builtins.map</p>
<p>The map function is the simplest one among Python built-ins used for
functional programming. <a
href="https://docs.python.org/3/library/functions.html#map">map()</a>
applies a specified function to each element in an iterable:</p>
<p>names = ['Fred', 'Wilma', 'Barney']</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><em>map(len, names)</em> # map in Python 3.x is a class; its
instances are iterable # Out: &lt;map object at
0x00000198B32E2CF8&gt;</p>
<p>A Python 3-compatible map is included in the future_builtins
module:</p>
<p>Python 2.x Version ≥ 2.6</p>
<p><em><strong>from</strong> future_builtins <strong>import</strong>
map</em> # contains a Python 3.x compatible map() <em>map(len,
names)</em> # see below</p>
<p># Out: &lt;itertools.imap instance at 0x3eb0a20&gt;</p>
<p>Alternatively, in Python 2 one can use imap from itertools to get a
generator</p>
<p>Python 2.x Version ≥ 2.3</p>
<p><em>map(len, names)</em> # map() returns a list</p>
<p># Out: [4, 5, 6]</p>
<p><strong>from</strong> itertools <strong>import</strong> imap</p>
<p><em>imap(len, names)</em> # itertools.imap() returns a generator #
Out: &lt;itertools.imap at 0x405ea20&gt;</p>
<p>The result can be explicitly converted to a list to remove the
differences between Python 2 and 3:</p>
<p>list(map(len, names))</p>
<p># Out: [4, 5, 6]</p>
<p>map() can be replaced by an equivalent <em>list comprehension</em> or
<em>generator expression</em>:</p>
<p><em>[len(item) <strong>for</strong> item <strong>in</strong>
names]</em> # equivalent to Python 2.x map() # Out: [4, 5, 6]</p>
<p><em>(len(item) <strong>for</strong> item <strong>in</strong>
names)</em> # equivalent to Python 3.x map() # Out: &lt;generator object
&lt;genexpr&gt; at 0x00000195888D5FC0&gt;</p>
<p>Section 69.2: Mapping each value in an iterable</p>
<p>For example, you can take the absolute value of each element:</p>
<p><em>list(map(abs, (1, -1, 2, -2, 3, -3)))</em> # the call to `list`
is unnecessary in 2.x</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 358</p>
<p><span id="__Out___1__1__2__2__3__3" class="anchor"></span># Out: [1,
1, 2, 2, 3, 3]</p>
<p>Anonymous function also support for mapping a list:</p>
<p>map(<strong>lambda</strong> x:x*2, [1, 2, 3, 4, 5])</p>
<p># Out: [2, 4, 6, 8, 10]</p>
<p>or converting decimal values to percentages:</p>
<p><strong>def</strong> to_percent(num):</p>
<p><strong>return</strong> num * 100</p>
<p>list(map(to_percent, [0.95, 0.75, 1.01, 0.1]))</p>
<p># Out: [95.0, 75.0, 101.0, 10.0]</p>
<p>or converting dollars to euros (given an exchange rate):</p>
<p><strong>from</strong> functools <strong>import</strong> partial</p>
<p><strong>from</strong> operator <strong>import</strong> mul</p>
<p><em>rate = 0.9</em> # fictitious exchange rate, 1 dollar = 0.9 euros
<em>dollars = {'under_my_bed': 1000,</em></p>
<p>'jeans': 45,</p>
<p>'bank': 5000}</p>
<p>sum(map(partial(mul, rate), dollars.values()))</p>
<p># Out: 5440.5</p>
<p>functools.partial is a convenient way to fix parameters of functions
so that they can be used with map instead of</p>
<p>using <strong>lambda</strong> or creating customized functions.</p>
<p>Section 69.3: Mapping values of dierent iterables</p>
<p>For example calculating the average of each i-th element of multiple
iterables:</p>
<p><strong>def</strong> average(*args):</p>
<p><em><strong>return</strong> float(sum(args)) / len(args)</em> # cast
to float - only mandatory for python 2.x</p>
<p>measurement1 = [100, 111, 99, 97]</p>
<p>measurement2 = [102, 117, 91, 102]</p>
<p>measurement3 = [104, 102, 95, 101]</p>
<p>list(map(average, measurement1, measurement2, measurement3)) <em>#
Out: [102.0, 110.0, 95.0, 100.0]</em></p>
<p>There are different requirements if more than one iterable is passed
to map depending on the version of python:</p>
<p>The function must take as many parameters as there are iterables:</p>
<p><strong>def</strong> median_of_three(a, b, c):</p>
<p><strong>return</strong> sorted((a, b, c))[1]</p>
<p>list(map(median_of_three, measurement1, measurement2))</p>
<p>TypeError: median_of_three() missing 1 required positional argument:
'c'</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 359</p>
<p>list(map(median_of_three, measurement1, measurement2, measurement3,
measurement3))</p>
<p>TypeError: median_of_three() takes 3 positional arguments but 4 were
given</p>
<p>Python 2.x Version ≥ 2.0.1</p>
<p>map: The mapping iterates as long as one iterable is still not fully
consumed but assumes None from the fully</p>
<p>consumed iterables:</p>
<p><strong>import</strong> operator</p>
<p>measurement1 = [100, 111, 99, 97]</p>
<p>measurement2 = [102, 117]</p>
<p># Calculate difference between elements</p>
<p>list(map(operator.sub, measurement1, measurement2))</p>
<p>TypeError: unsupported operand type(s) for -: 'int' and
'NoneType'</p>
<p>itertools.imap and future_builtins.map: The mapping stops as soon as
one iterable stops:</p>
<p><strong>import</strong> operator</p>
<p><strong>from</strong> itertools <strong>import</strong> imap</p>
<p>measurement1 = [100, 111, 99, 97]</p>
<p>measurement2 = [102, 117]</p>
<p># Calculate difference between elements</p>
<p>list(imap(operator.sub, measurement1, measurement2)) <em># Out: [-2,
-6]</em></p>
<p>list(imap(operator.sub, measurement2, measurement1)) <em># Out: [2,
6]</em></p>
<p>Python 3.x Version ≥ 3.0.0</p>
<p>The mapping stops as soon as one iterable stops:</p>
<p><strong>import</strong> operator</p>
<p>measurement1 = [100, 111, 99, 97]</p>
<p>measurement2 = [102, 117]</p>
<p># Calculate difference between elements</p>
<p>list(map(operator.sub, measurement1, measurement2)) <em># Out: [-2,
-6]</em></p>
<p>list(map(operator.sub, measurement2, measurement1)) <em># Out: [2,
6]</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 360</p>
<p><span id="Section_69_4__Transposing_with_M"
class="anchor"></span>Section 69.4: Transposing with Map: Using "None"
as function</p>
<p>argument (python 2.x only)</p>
<p><strong>from</strong> itertools <strong>import</strong> imap</p>
<p><em><strong>from</strong> future_builtins <strong>import</strong> map
<strong>as</strong> fmap</em> # Different name to highlight
differences</p>
<p>image = [[1, 2, 3],</p>
<p>[4, 5, 6],</p>
<p>[7, 8, 9]]</p>
<p>list(map(None, *image))</p>
<p># Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]</p>
<p>list(fmap(None, *image))</p>
<p># Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]</p>
<p>list(imap(None, *image))</p>
<p># Out: [(1, 4, 7), (2, 5, 8), (3, 6, 9)]</p>
<p>image2 = [[1, 2, 3],</p>
<p>[4, 5],</p>
<p>[7, 8, 9]]</p>
<p>list(map(None, *image2))</p>
<p># Out: [(1, 4, 7), (2, 5, 8), (3, None, 9)] # Fill missing values
with None <em>list(fmap(None, *image2))</em></p>
<p># Out: [(1, 4, 7), (2, 5, 8)] # ignore columns with missing values
<em>list(imap(None, *image2))</em></p>
<p># Out: [(1, 4, 7), (2, 5, 8)] # dito</p>
<p>Python 3.x Version ≥ 3.0.0</p>
<p>list(map(None, *image))</p>
<p>TypeError: 'NoneType' object is not callable</p>
<p>But there is a workaround to have similar results:</p>
<p><strong>def</strong> conv_to_list(*args):</p>
<p><strong>return</strong> list(args)</p>
<p>list(map(conv_to_list, *image))</p>
<p># Out: [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</p>
<p>Section 69.5: Series and Parallel Mapping</p>
<p>map() is a built-in function, which means that it is available
everywhere without the need to use an 'import' statement. It is
available everywhere just like print() If you look at Example 5 you will
see that I had to use an import</p>
<p>statement before I could use pretty print (import pprint). Thus
pprint is not a built-in function</p>
<p>Series mapping</p>
<p>In this case each argument of the iterable is supplied as argument to
the mapping function in ascending order. This</p>
<p>arises when we have just one iterable to map and the mapping function
requires a single argument.</p>
<p>Example 1</p>
<p>insects = ['fly', 'ant', 'beetle', 'cankerworm']</p>
<p>f = <strong>lambda</strong> x: x + ' is an insect'</p>
<p><em><strong>print</strong>(list(map(f, insects)))</em> # the function
defined by f is executed on each item of the iterable</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 361</p>
<p>insects</p>
<p>results in</p>
<p>['fly is an insect', 'ant is an insect', 'beetle is an insect',
'cankerworm is an insect']</p>
<p>Example 2</p>
<p><em><strong>print</strong>(list(map(len, insects)))</em> # the len
function is executed each item in the insect list</p>
<p>results in</p>
<p>[3, 3, 6, 10]</p>
<p>Parallel mapping</p>
<p>In this case each argument of the mapping function is pulled from
across all iterables (one from each iterable) in parallel. Thus the
number of iterables supplied must match the number of arguments required
by the function.</p>
<p>carnivores = ['lion', 'tiger', 'leopard', 'arctic fox'] herbivores =
['african buffalo', 'moose', 'okapi', 'parakeet'] omnivores =
['chicken', 'dove', 'mouse', 'pig']</p>
<p><strong>def</strong> animals(w, x, y, z):</p>
<p><strong>return</strong> '{0}, {1}, {2}, and {3} ARE ALL
ANIMALS'.format(w.title(), x, y, z)</p>
<p>Example 3</p>
<p># Too many arguments</p>
<p># observe here that map is trying to pass one item each from each of
the four iterables to len. This leads len to complain that</p>
<p># it is being fed too many arguments</p>
<p><strong>print</strong>(list(map(len, insects, carnivores, herbivores,
omnivores)))</p>
<p>results in</p>
<p>TypeError: len() takes exactly one argument (4 given)</p>
<p>Example 4</p>
<p># Too few arguments</p>
<p># observe here that map is supposed to execute animal on individual
elements of insects one-by-one. But animals complain when</p>
<p># it only gets one argument, whereas it was expecting four.
<em><strong>print</strong>(list(map(animals, insects)))</em></p>
<p>results in</p>
<p>TypeError: animals() missing 3 required positional arguments: 'x',
'y', <strong>and</strong> 'z'</p>
<p>Example 5</p>
<p># here map supplies w, x, y, z with one value from across the list
<em><strong>import</strong> pprint</em></p>
<p>pprint.pprint(list(map(animals, insects, carnivores, herbivores,
omnivores)))</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 362</p>
<p>results in</p>
<p>['Fly, lion, african buffalo, and chicken ARE ALL ANIMALS',</p>
<p>'Ant, tiger, moose, and dove ARE ALL ANIMALS',</p>
<p>'Beetle, leopard, okapi, and mouse ARE ALL ANIMALS', 'Cankerworm,
arctic fox, parakeet, and pig ARE ALL ANIMALS']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 363</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"><strong>VIDEO:</strong>
Python for Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Science
and Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learning
Bootcamp</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learn
how to use NumPy, Pandas, Seaborn,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Matplotlib
, Plotly, Scikit-Learn , Machine Learning,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Tensorflow,
and more!</a></p>
<p><img src="media/index-389_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-389_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Python for Data Science and Machine Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Spark for Big Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Implement Machine Learning Algorithms</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use NumPy for Numerical Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Pandas for Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Matplotlib for Python Plotting</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Seaborn for statistical plots</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Plotly for interactive dynamic visualizations</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use SciKit-Learn for Machine Learning Tasks</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
K-Means Clustering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Logistic Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Linear Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Random Forest and Decision Trees</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Neural Networks <strong>Watch Today →</strong></a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Support Vector Machines</a></p>
<p><span id="Chapter_70__Exponentiation_1" class="anchor"></span>Chapter
70: Exponentiation</p>
<p>Section 70.1: Exponentiation using builtins: ** and pow()</p>
<p><a href="https://en.wikipedia.org/wiki/Exponentiation">Exponentiation
can be used by using the builtin</a> pow-function or the **
operator:</p>
<p>2 ** 3 <em># 8</em></p>
<p>pow(2, 3) <em># 8</em></p>
<p>For most (all in Python 2.x) arithmetic operations the result's type
will be that of the wider operand. This is not true</p>
<p>for **; the following cases are exceptions from this rule:</p>
<p>Base: int, exponent: int &lt; 0:</p>
<p>2 ** -3</p>
<p># Out: 0.125 (result is a float)</p>
<p>This is also valid for Python 3.x.</p>
<p>Before Python 2.2.0, this raised a ValueError.</p>
<p>Base: int &lt; 0 or float &lt; 0, exponent: float != int</p>
<p><em>(-2) ** (0.5)</em> # also (-2.) ** (0.5)</p>
<p># Out: (8.659560562354934e-17+1.4142135623730951j) (result is
complex)</p>
<p>Before python 3.0.0, this raised a ValueError.</p>
<p>The operator module contains two functions that are equivalent to the
**-operator:</p>
<p><strong>import</strong> operator</p>
<p>operator.pow(4, 2) <em># 16</em></p>
<p>operator.__pow__(4, 3) <em># 64</em></p>
<p>or one could directly call the __pow__ method:</p>
<p>val1, val2 = 4, 2</p>
<p>val1.__pow__(val2) <em># 16</em></p>
<p>val2.__rpow__(val1) <em># 16</em></p>
<p># in-place power operation isn't supported by immutable classes like
int, float, complex: # val1.__ipow__(val2)</p>
<p>Section 70.2: Square root: math.sqrt() and cmath.sqrt</p>
<p>The math module contains the math.sqrt()-function that can compute
the square root of any number (that can be</p>
<p>converted to a float) and the result will always be a float:</p>
<p>import <strong>math</strong></p>
<p>math.sqrt(9) <em># 3.0</em></p>
<p><em>math.sqrt(11.11)</em> # 3.3331666624997918</p>
<p>math.sqrt(Decimal('6.25')) <em># 2.5</em></p>
<p>The math.sqrt() function raises a ValueError if the result would be
complex:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 365</p>
<p><span id="math_sqrt__10" class="anchor"></span>math.sqrt(-10)</p>
<p>ValueError: math domain error</p>
<p>math.sqrt(x) is <em>faster</em> than math.pow(x, 0.5) or x ** 0.5 but
the precision of the results is the same. The cmath</p>
<p>module is extremely similar to the math module, except for the fact
it can compute complex numbers and all of its results are in the form of
a + bi. It can also use .sqrt():</p>
<p>import <strong>cmath</strong></p>
<p>cmath.sqrt(4) <em># 2+0j</em></p>
<p>cmath.sqrt(-4) <em># 2j</em></p>
<p>What's with the j? j is the equivalent to the square root of -1. All
numbers can be put into the form a + bi, or in this case, a + bj. a is
the real part of the number like the 2 in 2+0j. Since it has no
imaginary part, b is 0. b represents</p>
<p>part of the imaginary part of the number like the 2 in 2j. Since
there is no real part in this, 2j can also be written as 0 + 2j.</p>
<p>Section 70.3: Modular exponentiation: pow() with 3 arguments</p>
<p>Supplying pow() with 3 arguments pow(a, b, c) evaluates the <a
href="https://en.wikipedia.org/wiki/Modular_exponentiation">modular
exponentiation</a> <em>ab mod c</em>:</p>
<p>pow(3, 4, 17) <em># 13</em></p>
<p># equivalent unoptimized expression:</p>
<p>3 ** 4 % 17 <em># 13</em></p>
<p># steps:</p>
<p>3 ** 4 <em># 81</em></p>
<p>81 % 17 <em># 13</em></p>
<p>For built-in types using modular exponentiation is only possible
if:</p>
<p>First argument is an int</p>
<p>Second argument is an int &gt;= 0</p>
<p>Third argument is an int != 0</p>
<p>These restrictions are also present in python 3.x</p>
<p>For example one can use the 3-argument form of pow to define a <a
href="https://en.wikipedia.org/wiki/Modular_multiplicative_inverse">modular
inverse</a> function:</p>
<p><strong>def</strong> modular_inverse(x, p):</p>
<p>"""Find a such as a·x ≡ 1 (mod p), assuming p is prime."""
<strong>return</strong> pow(x, p-2, p)</p>
<p>[modular_inverse(x, 13) <strong>for</strong> x <strong>in</strong>
range(1,13)]</p>
<p># Out: [1, 7, 9, 10, 8, 11, 2, 5, 3, 4, 6, 12]</p>
<p>Section 70.4: Computing large integer roots</p>
<p>Even though Python natively supports big integers, taking the nth
root of very large numbers can fail in Python.</p>
<p>x = 2 ** 100</p>
<p>cube = x ** 3</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 366</p>
<p><span id="root___cube_____1_0___3" class="anchor"></span>root = cube
** (1.0 / 3)</p>
<p>OverflowError: long int too large to convert to float</p>
<p>When dealing with such large integers, you will need to use a custom
function to compute the nth root of a number.</p>
<p><strong>def</strong> nth_root(x, n):</p>
<p># Start with some reasonable bounds around the nth root.</p>
<p>upper_bound = 1</p>
<p><strong>while</strong> upper_bound ** n &lt;= x:</p>
<p>upper_bound *= 2</p>
<p>lower_bound = upper_bound // 2</p>
<p># Keep searching for a better result as long as the bounds make
sense. <em><strong>while</strong> lower_bound &lt; upper_bound:</em></p>
<p>mid = (lower_bound + upper_bound) // 2</p>
<p>mid_nth = mid ** n</p>
<p><strong>if</strong> lower_bound &lt; mid <strong>and</strong> mid_nth
&lt; x:</p>
<p>lower_bound = mid</p>
<p><strong>elif</strong> upper_bound &gt; mid <strong>and</strong>
mid_nth &gt; x:</p>
<p>upper_bound = mid</p>
<p>else<strong>:</strong></p>
<p># Found perfect nth root.</p>
<p>return <strong>mid</strong></p>
<p><strong>return</strong> mid + 1</p>
<p>x = 2 ** 100</p>
<p>cube = x ** 3</p>
<p>root = nth_root(cube, 3)</p>
<p>x == root</p>
<p># True</p>
<p>Section 70.5: Exponentiation using the math module:</p>
<p>math.pow()</p>
<p>The math-module contains another math.pow() function. The difference
to the builtin pow()-function or ** operator</p>
<p>is that the result is always a float:</p>
<p>import <strong>math</strong></p>
<p>math.pow(2, 2) <em># 4.0</em></p>
<p>math.pow(-2., 2) <em># 4.0</em></p>
<p>Which excludes computations with complex inputs:</p>
<p>math.pow(2, 2+0j)</p>
<p>TypeError: can't convert complex to float</p>
<p>and computations that would lead to complex results:</p>
<p>math.pow(-2, 0.5)</p>
<p>ValueError: math domain error</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 367</p>
<p><span id="Section_70_6__Exponential_functi"
class="anchor"></span>Section 70.6: Exponential function: math.exp()
and</p>
<p>cmath.exp()</p>
<p>Both the math and cmath<a
href="https://en.wikipedia.org/wiki/E_%28mathematical_constant%29">-module
contain the Euler number: e</a> and using it with the builtin
pow()-function or **-operator works mostly like math.exp():</p>
<p>import <strong>math</strong></p>
<p><em>math.e ** 2</em> # 7.3890560989306495</p>
<p><em>math.exp(2)</em> # 7.38905609893065</p>
<p>import <strong>cmath</strong></p>
<p><em>cmath.e ** 2</em> # 7.3890560989306495</p>
<p><em>cmath.exp(2)</em> # (7.38905609893065+0j)</p>
<p>However the result is different and using the exponential function
directly is more reliable than builtin</p>
<p>exponentiation with base math.e:</p>
<p><em><strong>print</strong>(math.e ** 10)</em> #
22026.465794806703</p>
<p><em><strong>print</strong>(math.exp(10))</em> #
22026.465794806718</p>
<p><strong>print</strong>(cmath.exp(10).real) <em>#
22026.465794806718</em></p>
<p># difference starts here ---------------^</p>
<p>Section 70.7: Exponential function minus 1: math.expm1()</p>
<p>The math module contains the expm1()-function that can compute the
expression math.e ** x - 1 for very small x</p>
<p>with higher precision than math.exp(x) or cmath.exp(x) would
allow:</p>
<p>import <strong>math</strong></p>
<p><em><strong>print</strong>(math.e ** 1e-3 - 1)</em> #
0.0010005001667083846</p>
<p><em><strong>print</strong>(math.exp(1e-3) - 1)</em> #
0.0010005001667083846</p>
<p><em><strong>print</strong>(math.expm1(1e-3))</em> #
0.0010005001667083417</p>
<p># ------------------^</p>
<p>For very small x the difference gets bigger:</p>
<p><em><strong>print</strong>(math.e ** 1e-15 - 1)</em> #
1.1102230246251565e-15 <em><strong>print</strong>(math.exp(1e-15) -
1)</em> # 1.1102230246251565e-15
<em><strong>print</strong>(math.expm1(1e-15))</em> #
1.0000000000000007e-15 # ^-------------------</p>
<p><a href="https://en.wikipedia.org/wiki/Planck%27s_law">The
improvement is significant in scientific computing. For example the
Planck's law contains an exponential</a></p>
<p>function minus 1:</p>
<p><strong>def</strong> planks_law(lambda_, T):</p>
<p><strong>from</strong> scipy.constants <strong>import</strong> h, k, c
<em># If no scipy installed hardcode these!</em> <strong>return</strong>
2 * h * c ** 2 / (lambda_ ** 5 * math.expm1(h * c / (lambda_ * k *
T)))</p>
<p><strong>def</strong> planks_law_naive(lambda_, T):</p>
<p><strong>from</strong> scipy.constants <strong>import</strong> h, k, c
<em># If no scipy installed hardcode these!</em> <strong>return</strong>
2 * h * c ** 2 / (lambda_ ** 5 * (math.e ** (h * c / (lambda_ * k * T))
- 1))</p>
<p><em>planks_law(100, 5000)</em> # 4.139080074896474e-19
<em>planks_law_naive(100, 5000)</em> # 4.139080073488451e-19 #
^----------</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 368</p>
<p><span id="planks_law_1000__5000__________4"
class="anchor"></span><em>planks_law(1000, 5000)</em> #
4.139080128493406e-23 <em>planks_law_naive(1000, 5000)</em> #
4.139080233183142e-23 # ^------------</p>
<p>Section 70.8: Magic methods and exponentiation: builtin,</p>
<p>math and cmath</p>
<p>Supposing you have a class that stores purely integer values:</p>
<p><strong>class</strong> Integer(object):</p>
<p><strong>def</strong> __init__(self, value):</p>
<p>self.value = int(value) <em># Cast to an integer</em></p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong>
'{cls}({val})'.format(cls=self.__class__.__name__,</p>
<p>val=self.value)</p>
<p><strong>def</strong> __pow__(self, other, modulo=None):</p>
<p><strong>if</strong> modulo <strong>is</strong> None:</p>
<p><strong>print</strong>('Using __pow__')</p>
<p><strong>return</strong> self.__class__(self.value ** other)</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>('Using __pow__ with modulo')</p>
<p><strong>return</strong> self.__class__(pow(self.value, other,
modulo))</p>
<p><strong>def</strong> __float__(self):</p>
<p><strong>print</strong>('Using __float__')</p>
<p><strong>return</strong> float(self.value)</p>
<p><strong>def</strong> __complex__(self):</p>
<p><strong>print</strong>('Using __complex__')</p>
<p><strong>return</strong> complex(self.value, 0)</p>
<p>Using the builtin pow function or ** operator always calls
__pow__:</p>
<p>Integer(2) ** 2 <em># Integer(4)</em></p>
<p># Prints: Using __pow__</p>
<p>Integer(2) ** 2.5 <em># Integer(5)</em></p>
<p># Prints: Using __pow__</p>
<p>pow(Integer(2), 0.5) <em># Integer(1)</em></p>
<p># Prints: Using __pow__</p>
<p>operator.pow(Integer(2), 3) <em># Integer(8)</em></p>
<p># Prints: Using __pow__</p>
<p>operator.__pow__(Integer(3), 3) <em># Integer(27)</em></p>
<p># Prints: Using __pow__</p>
<p>The second argument of the __pow__() method can only be supplied by
using the builtin-pow() or by directly calling</p>
<p>the method:</p>
<p>pow(Integer(2), 3, 4) <em># Integer(0)</em></p>
<p># Prints: Using __pow__ with modulo</p>
<p>Integer(2).__pow__(3, 4) <em># Integer(0)</em></p>
<p># Prints: Using __pow__ with modulo</p>
<p>While the math-functions always convert it to a float and use the
float-computation:</p>
<p>import <strong>math</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 369</p>
<p><span id="math_pow_Integer_2___0_5____1_41"
class="anchor"></span>math.pow(Integer(2), 0.5) <em>#
1.4142135623730951</em></p>
<p># Prints: Using __float__</p>
<p>cmath-functions try to convert it to complex but can also fallback to
float if there is no explicit conversion to</p>
<p>complex :</p>
<p>import <strong>cmath</strong></p>
<p><em>cmath.exp(Integer(2))</em> # (7.38905609893065+0j)</p>
<p># Prints: Using __complex__</p>
<p><em><strong>del</strong> Integer.__complex__</em> # Deleting
__complex__ method - instances cannot be cast to complex</p>
<p><em>cmath.exp(Integer(2))</em> # (7.38905609893065+0j)</p>
<p># Prints: Using __float__</p>
<p>Neither math nor cmath will work if also the __float__()-method is
missing:</p>
<p><em><strong>del</strong> Integer.__float__</em> # Deleting
__complex__ method</p>
<p><em>math.sqrt(Integer(2))</em> # also cmath.exp(Integer(2))</p>
<p>TypeError: a float is required</p>
<p>Section 70.9: Roots: nth-root with fractional exponents</p>
<p>While the math.sqrt function is provided for the specific case of
square roots, it's often convenient to use the</p>
<p>exponentiation operator (**) with fractional exponents to perform
nth-root operations, like cube roots.</p>
<p>The inverse of an exponentiation is exponentiation by the exponent's
reciprocal. So, if you can cube a number by</p>
<p>putting it to the exponent of 3, you can find the cube root of a
number by putting it to the exponent of 1/3.</p>
<p>&gt;&gt;&gt; x = 3</p>
<p>&gt;&gt;&gt; y = x ** 3</p>
<p>&gt;&gt;&gt; y</p>
<p>27</p>
<p>&gt;&gt;&gt; z = y ** (1.0 / 3)</p>
<p>&gt;&gt;&gt; z</p>
<p>3.0</p>
<p>&gt;&gt;&gt; z == x</p>
<p>True</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 370</p>
<p><span id="Chapter_71__Searching_1" class="anchor"></span>Chapter 71:
Searching</p>
<p>Section 71.1: Searching for an element</p>
<p>All built-in collections in Python implement a way to check element
membership using in.</p>
<p>List</p>
<p>alist = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</p>
<p>5 <strong>in</strong> alist <em># True</em></p>
<p>10 <strong>in</strong> alist <em># False</em></p>
<p>Tuple</p>
<p>atuple = ('0', '1', '2', '3', '4')</p>
<p>4 <strong>in</strong> atuple <em># False</em></p>
<p>'4' <strong>in</strong> atuple <em># True</em></p>
<p>String</p>
<p>astring = 'i am a string'</p>
<p>'a' <strong>in</strong> astring <em># True</em></p>
<p>'am' <strong>in</strong> astring <em># True</em></p>
<p>'I' <strong>in</strong> astring <em># False</em></p>
<p>Set</p>
<p>aset = {(10, 10), (20, 20), (30, 30)}</p>
<p>(10, 10) <strong>in</strong> aset <em># True</em></p>
<p>10 <strong>in</strong> aset <em># False</em></p>
<p>Dict</p>
<p>dict is a bit special: the normal in only checks the <em>keys</em>.
If you want to search in <em>values</em> you need to specify it. The</p>
<p>same if you want to search for <em>key-value</em> pairs.</p>
<p>adict = {0: 'a', 1: 'b', 2: 'c', 3: 'd'}</p>
<p><em>1 <strong>in</strong> adict</em> # True - implicitly searches in
keys <em>'a' <strong>in</strong> adict</em> # False</p>
<p><em>2 <strong>in</strong> adict.keys()</em> # True - explicitly
searches in keys <em>'a' <strong>in</strong> adict.values()</em> # True
- explicitly searches in values <em>(0, 'a') <strong>in</strong>
adict.items()</em> # True - explicitly searches key/value pairs</p>
<p>Section 71.2: Searching in custom classes: __contains__ and</p>
<p>__iter__</p>
<p>To allow the use of in for custom classes the class must either
provide the magic method __contains__ or, failing</p>
<p>that, an __iter__-method.</p>
<p>Suppose you have a class containing a list of lists:</p>
<p><strong>class</strong> ListList:</p>
<p><strong>def</strong> __init__(self, value):</p>
<p>self.value = value</p>
<p># Create a set of all values for fast access</p>
<p>self.setofvalues = set(item <strong>for</strong> sublist
<strong>in</strong> self.value <strong>for</strong> item
<strong>in</strong> sublist)</p>
<p><strong>def</strong> __iter__(self):</p>
<p><strong>print</strong>('Using __iter__.')</p>
<p># A generator over all sublist elements</p>
<p><strong>return</strong> (item <strong>for</strong> sublist
<strong>in</strong> self.value <strong>for</strong> item
<strong>in</strong> sublist)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 371</p>
<p><span id="def___contains___self__value"
class="anchor"></span><strong>def</strong> __contains__(self,
value):</p>
<p><strong>print</strong>('Using __contains__.')</p>
<p># Just lookup if the value is in the set</p>
<p><strong>return</strong> value <strong>in</strong>
self.setofvalues</p>
<p># Even without the set you could use the iter method for the
contains-check: # return any(item == value for item in iter(self))</p>
<p>Using membership testing is possible using in:</p>
<p>a = ListList([[1,1,1],[0,1,1],[1,5,1]])</p>
<p><em>10 <strong>in</strong> a</em> # False</p>
<p># Prints: Using __contains__.</p>
<p><em>5 <strong>in</strong> a</em> # True</p>
<p># Prints: Using __contains__.</p>
<p>even after deleting the __contains__ method:</p>
<p><strong>del</strong> ListList.__contains__</p>
<p><em>5 <strong>in</strong> a</em> # True</p>
<p># Prints: Using __iter__.</p>
<p><strong>Note:</strong> The looping in (as in <strong>for</strong> i
<strong>in</strong> a) will always use __iter__ even if the class
implements a __contains__ method.</p>
<p>Section 71.3: Getting the index for strings: str.index(),</p>
<p>str.rindex() and str.find(), str.rfind()</p>
<p>String also have an index method but also more advanced options and
the additional str.find. For both of these</p>
<p>there is a complementary <em>reversed</em> method.</p>
<p>astring = 'Hello on StackOverflow'</p>
<p>astring.index('o') <em># 4</em></p>
<p>astring.rindex('o') <em># 20</em></p>
<p>astring.find('o') <em># 4</em></p>
<p>astring.rfind('o') <em># 20</em></p>
<p>The difference between index/rindex and find/rfind is what happens if
the substring is not found in the string:</p>
<p>astring.index('q') <em># ValueError: substring not found</em>
astring.find('q') <em># -1</em></p>
<p>All of these methods allow a start and end index:</p>
<p>astring.index('o', 5) <em># 6</em></p>
<p><em>astring.index('o', 6)</em> # 6 - start is inclusive</p>
<p>astring.index('o', 5, 7) <em># 6</em></p>
<p>astring.index('o', 5, 6) <em># - end is not inclusive</em></p>
<p>ValueError: substring not found</p>
<p>astring.rindex('o', 20) <em># 20</em></p>
<p><em>astring.rindex('o', 19)</em> # 20 - still from left to right</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 372</p>
<p><span id="astring_rindex__o___4__7____6"
class="anchor"></span>astring.rindex('o', 4, 7) <em># 6</em></p>
<p>Section 71.4: Getting the index list and tuples: list.index(),</p>
<p>tuple.index()</p>
<p>list and tuple have an index-method to get the position of the
element:</p>
<p>alist = [10, 16, 26, 5, 2, 19, 105, 26]</p>
<p># search for 16 in the list</p>
<p>alist.index(16) <em># 1</em></p>
<p>alist[1] <em># 16</em></p>
<p>alist.index(15)</p>
<p>ValueError: 15 is not in list</p>
<p>But only returns the position of the first found element:</p>
<p>atuple = (10, 16, 26, 5, 2, 19, 105, 26)</p>
<p>atuple.index(26) <em># 2</em></p>
<p>atuple[2] <em># 26</em></p>
<p><em>atuple[7]</em> # 26 - is also 26!</p>
<p>Section 71.5: Searching key(s) for a value in dict</p>
<p>dict have no builtin method for searching a value or key because
<em>dictionaries</em> are unordered. You can create a function that gets
the key (or keys) for a specified value:</p>
<p><strong>def</strong> getKeysForValue(dictionary, value):</p>
<p>foundkeys = []</p>
<p><strong>for</strong> keys <strong>in</strong> dictionary:</p>
<p><strong>if</strong> dictionary[key] == value:</p>
<p>foundkeys.append(key)</p>
<p><strong>return</strong> foundkeys</p>
<p>This could also be written as an equivalent list comprehension:</p>
<p><strong>def</strong> getKeysForValueComp(dictionary, value):</p>
<p><strong>return</strong> [key <strong>for</strong> key
<strong>in</strong> dictionary <strong>if</strong> dictionary[key] ==
value]</p>
<p>If you only care about one found key:</p>
<p><strong>def</strong> getOneKeyForValue(dictionary, value):</p>
<p><strong>return</strong> next(key <strong>for</strong> key
<strong>in</strong> dictionary <strong>if</strong> dictionary[key] ==
value)</p>
<p>The first two functions will return a list of all keys that have the
specified value:</p>
<p>adict = {'a': 10, 'b': 20, 'c': 10}</p>
<p><em>getKeysForValue(adict, 10)</em> # ['c', 'a'] - order is random
could as well be ['a', 'c'] <em>getKeysForValueComp(adict, 10)</em> #
['c', 'a'] - dito</p>
<p>getKeysForValueComp(adict, 20) <em># ['b']</em></p>
<p>getKeysForValueComp(adict, 25) <em># []</em></p>
<p>The other one will only return one key:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 373</p>
<p><span id="getOneKeyForValue_adict__10"
class="anchor"></span><em>getOneKeyForValue(adict, 10)</em> # 'c' -
depending on the circumstances this could also be 'a'
<em>getOneKeyForValue(adict, 20)</em> # 'b'</p>
<p>and raise a StopIteration-Exception if the value is not in the
dict:</p>
<p>getOneKeyForValue(adict, 25)</p>
<p>StopIteration</p>
<p>Section 71.6: Getting the index for sorted sequences:</p>
<p>bisect.bisect_left()</p>
<p>Sorted sequences allow the use of faster searching algorithms:
bisect.bisect_left()<a
href="http://docs.python.org/library/bisect.html#searching-sorted-lists">1</a>:</p>
<p><strong>import</strong> bisect</p>
<p><strong>def</strong> index_sorted(sorted_seq, value):</p>
<p>"""Locate the leftmost value exactly equal to x or raise a
ValueError"""</p>
<p>i = bisect.bisect_left(sorted_seq, value)</p>
<p><strong>if</strong> i != len(sorted_seq) <strong>and</strong>
sorted_seq[i] == value:</p>
<p>return <strong>i</strong></p>
<p><strong>raise</strong> ValueError</p>
<p>alist = [i <strong>for</strong> i <strong>in</strong> range(1,
100000, 3)] <em># Sorted list from 1 to 100000 with step 3</em>
index_sorted(alist, 97285) <em># 32428</em></p>
<p>index_sorted(alist, 4) <em># 1</em></p>
<p>index_sorted(alist, 97286)</p>
<p>ValueError</p>
<p>For very large <strong>sorted sequences</strong> the speed gain can
be quite high. In case for the first search approximately 500</p>
<p>times as fast:</p>
<p>%timeit index_sorted(alist, 97285)</p>
<p># 100000 loops, best of 3: 3 <em>µ</em>s per loop</p>
<p>%timeit alist.index(97285)</p>
<p># 1000 loops, best of 3: 1.58 ms per loop</p>
<p>While it's a bit slower if the element is one of the very first:</p>
<p>%timeit index_sorted(alist, 4)</p>
<p># 100000 loops, best of 3: 2.98 <em>µ</em>s per loop</p>
<p>%timeit alist.index(4)</p>
<p># 1000000 loops, best of 3: 580 ns per loop</p>
<p>Section 71.7: Searching nested sequences</p>
<p>Searching in nested sequences like a list of tuple requires an
approach like searching the keys for values in dict but needs customized
functions.</p>
<p>The index of the outermost sequence if the value was found in the
sequence:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 374</p>
<p><strong>def</strong> outer_index(nested_sequence, value):</p>
<p><strong>return</strong> next(index <strong>for</strong> index, inner
<strong>in</strong> enumerate(nested_sequence)</p>
<p><strong>for</strong> item <strong>in</strong> inner</p>
<p><strong>if</strong> item == value)</p>
<p>alist_of_tuples = [(4, 5, 6), (3, 1, 'a'), (7, 0, 4.3)]</p>
<p>outer_index(alist_of_tuples, 'a') <em># 1</em></p>
<p>outer_index(alist_of_tuples, 4.3) <em># 2</em></p>
<p>or the index of the outer and inner sequence:</p>
<p><strong>def</strong> outer_inner_index(nested_sequence, value):</p>
<p><strong>return</strong> next((oindex, iindex) <strong>for</strong>
oindex, inner <strong>in</strong> enumerate(nested_sequence)</p>
<p><strong>for</strong> iindex, item <strong>in</strong>
enumerate(inner)</p>
<p><strong>if</strong> item == value)</p>
<p>outer_inner_index(alist_of_tuples, 'a') <em># (1, 2)</em></p>
<p>alist_of_tuples[1][2] <em># 'a'</em></p>
<p>outer_inner_index(alist_of_tuples, 7) <em># (2, 0)</em></p>
<p>alist_of_tuples[2][0] <em># 7</em></p>
<p>In general (<em>not always</em>) using next and a <strong>generator
expression</strong> with conditions to find the first occurrence of
the</p>
<p>searched value is the most efficient approach.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 375</p>
<p><span id="Chapter_72__Sorting__Minimum_and_1"
class="anchor"></span>Chapter 72: Sorting, Minimum and</p>
<p>Maximum</p>
<p>Section 72.1: Make custom classes orderable</p>
<p>min, max, and sorted all need the objects to be orderable. To be
properly orderable, the class needs to define all of the 6 methods
__lt__, __gt__, __ge__, __le__, __ne__ and __eq__:</p>
<p><strong>class</strong> IntegerContainer(object):</p>
<p><strong>def</strong> __init__(self, value):</p>
<p>self.value = value</p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong> "{}({})".format(self.__class__.__name__,
self.value)</p>
<p><strong>def</strong> __lt__(self, other):</p>
<p><strong>print</strong>('{!r} - Test less than {!r}'.format(self,
other)) <strong>return</strong> self.value &lt; other.value</p>
<p><strong>def</strong> __le__(self, other):</p>
<p><strong>print</strong>('{!r} - Test less than or equal to
{!r}'.format(self, other)) <strong>return</strong> self.value &lt;=
other.value</p>
<p><strong>def</strong> __gt__(self, other):</p>
<p><strong>print</strong>('{!r} - Test greater than {!r}'.format(self,
other)) <strong>return</strong> self.value &gt; other.value</p>
<p><strong>def</strong> __ge__(self, other):</p>
<p><strong>print</strong>('{!r} - Test greater than or equal to
{!r}'.format(self, other)) <strong>return</strong> self.value &gt;=
other.value</p>
<p><strong>def</strong> __eq__(self, other):</p>
<p><strong>print</strong>('{!r} - Test equal to {!r}'.format(self,
other)) <strong>return</strong> self.value == other.value</p>
<p><strong>def</strong> __ne__(self, other):</p>
<p><strong>print</strong>('{!r} - Test not equal to {!r}'.format(self,
other)) <strong>return</strong> self.value != other.value</p>
<p><a href="http://stackoverflow.com/a/8796908/918959">Though
implementing all these methods would seem unnecessary, omitting some of
them will make your code</a></p>
<p><a href="http://stackoverflow.com/a/8796908/918959">prone to
bugs</a>.</p>
<p>Examples:</p>
<p>alist = [IntegerContainer(5), IntegerContainer(3),</p>
<p>IntegerContainer(10), IntegerContainer(7)</p>
<p>]</p>
<p>res = max(alist)</p>
<p># Out: IntegerContainer(3) - Test greater than IntegerContainer(5) #
IntegerContainer(10) - Test greater than IntegerContainer(5) #
IntegerContainer(7) - Test greater than IntegerContainer(10)
<em><strong>print</strong>(res)</em></p>
<p># Out: IntegerContainer(10)</p>
<p>res = min(alist)</p>
<p># Out: IntegerContainer(3) - Test less than IntegerContainer(5) #
IntegerContainer(10) - Test less than IntegerContainer(3)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 376</p>
<p># IntegerContainer(7) - Test less than IntegerContainer(3)
<em><strong>print</strong>(res)</em></p>
<p># Out: IntegerContainer(3)</p>
<p>res = sorted(alist)</p>
<p># Out: IntegerContainer(3) - Test less than IntegerContainer(5) #
IntegerContainer(10) - Test less than IntegerContainer(3) #
IntegerContainer(10) - Test less than IntegerContainer(5) #
IntegerContainer(7) - Test less than IntegerContainer(5) #
IntegerContainer(7) - Test less than IntegerContainer(10)
<em><strong>print</strong>(res)</em></p>
<p># Out: [IntegerContainer(3), IntegerContainer(5),
IntegerContainer(7), IntegerContainer(10)]</p>
<p>sorted with reverse=True also uses __lt__:</p>
<p>res = sorted(alist, reverse=True)</p>
<p># Out: IntegerContainer(10) - Test less than IntegerContainer(7) #
IntegerContainer(3) - Test less than IntegerContainer(10) #
IntegerContainer(3) - Test less than IntegerContainer(10) #
IntegerContainer(3) - Test less than IntegerContainer(7) #
IntegerContainer(5) - Test less than IntegerContainer(7) #
IntegerContainer(5) - Test less than IntegerContainer(3)
<em><strong>print</strong>(res)</em></p>
<p># Out: [IntegerContainer(10), IntegerContainer(7),
IntegerContainer(5), IntegerContainer(3)]</p>
<p>But sorted can use __gt__ instead if the default is not
implemented:</p>
<p><em><strong>del</strong> IntegerContainer.__lt__</em> # The
IntegerContainer no longer implements "less than"</p>
<p>res = min(alist)</p>
<p># Out: IntegerContainer(5) - Test greater than IntegerContainer(3) #
IntegerContainer(3) - Test greater than IntegerContainer(10) #
IntegerContainer(3) - Test greater than IntegerContainer(7)
<em><strong>print</strong>(res)</em></p>
<p># Out: IntegerContainer(3)</p>
<p>Sorting methods will raise a TypeError if neither __lt__ nor __gt__
are implemented:</p>
<p><em><strong>del</strong> IntegerContainer.__gt__</em> # The
IntegerContainer no longer implements "greater then"</p>
<p>res = min(alist)</p>
<p>TypeError: unorderable types: IntegerContainer() &lt;
IntegerContainer()</p>
<p><a
href="https://docs.python.org/3.3/library/functools.html#functools.total_ordering">functools.total_ordering
decorator can be used simplifying the effort of writing these rich
comparison methods.</a></p>
<p>If you decorate your class with total_ordering, you need to implement
__eq__, __ne__ and only one of the __lt__,</p>
<p>__le__ , __ge__ or __gt__, and the decorator will fill in the
rest:</p>
<p><strong>import</strong> functools</p>
<p>@functools.total_ordering</p>
<p><strong>class</strong> IntegerContainer(object):</p>
<p><strong>def</strong> __init__(self, value):</p>
<p>self.value = value</p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong> "{}({})".format(self.__class__.__name__,
self.value)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 377</p>
<p><span id="def___lt___self__other"
class="anchor"></span><strong>def</strong> __lt__(self, other):</p>
<p><strong>print</strong>('{!r} - Test less than {!r}'.format(self,
other)) <strong>return</strong> self.value &lt; other.value</p>
<p><strong>def</strong> __eq__(self, other):</p>
<p><strong>print</strong>('{!r} - Test equal to {!r}'.format(self,
other)) <strong>return</strong> self.value == other.value</p>
<p><strong>def</strong> __ne__(self, other):</p>
<p><strong>print</strong>('{!r} - Test not equal to {!r}'.format(self,
other)) <strong>return</strong> self.value != other.value</p>
<p>IntegerContainer(5) &gt; IntegerContainer(6)</p>
<p># Output: IntegerContainer(5) - Test less than IntegerContainer(6) #
Returns: False</p>
<p>IntegerContainer(6) &gt; IntegerContainer(5)</p>
<p># Output: IntegerContainer(6) - Test less than IntegerContainer(5) #
Output: IntegerContainer(6) - Test equal to IntegerContainer(5) #
Returns True</p>
<p>Notice how the &gt; (<em>greater than</em>) now ends up calling the
<em>less than</em> method, and in some cases even the __eq__ method.
This also means that if speed is of great importance, you should
implement each rich comparison method</p>
<p>yourself.</p>
<p>Section 72.2: Special case: dictionaries</p>
<p>Getting the minimum or maximum or using sorted depends on iterations
over the object. In the case of dict, the</p>
<p>iteration is only over the keys:</p>
<p>adict = {'a': 3, 'b': 5, 'c': 1}</p>
<p>min(adict)</p>
<p># Output: 'a'</p>
<p>max(adict)</p>
<p># Output: 'c'</p>
<p>sorted(adict)</p>
<p># Output: ['a', 'b', 'c']</p>
<p>To keep the dictionary structure, you have to iterate over the
.items():</p>
<p>min(adict.items())</p>
<p># Output: ('a', 3)</p>
<p>max(adict.items())</p>
<p># Output: ('c', 1)</p>
<p>sorted(adict.items())</p>
<p># Output: [('a', 3), ('b', 5), ('c', 1)]</p>
<p>For sorted, you could create an OrderedDict to keep the sorting while
having a dict-like structure:</p>
<p><strong>from</strong> collections <strong>import</strong>
OrderedDict</p>
<p>OrderedDict(sorted(adict.items()))</p>
<p># Output: OrderedDict([('a', 3), ('b', 5), ('c', 1)]) <em>res =
OrderedDict(sorted(adict.items()))</em></p>
<p>res['a']</p>
<p># Output: 3</p>
<p>By value</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 378</p>
<p><span id="Again_this_is_possible_using_the"
class="anchor"></span>Again this is possible using the key argument:</p>
<p>min(adict.items(), key=<strong>lambda</strong> x: x[1])</p>
<p># Output: ('c', 1)</p>
<p>max(adict.items(), key=operator.itemgetter(1))</p>
<p># Output: ('b', 5)</p>
<p>sorted(adict.items(), key=operator.itemgetter(1), reverse=True) <em>#
Output: [('b', 5), ('a', 3), ('c', 1)]</em></p>
<p>Section 72.3: Using the key argument</p>
<p>Finding the minimum/maximum of a sequence of sequences is
possible:</p>
<p>list_of_tuples = [(0, 10), (1, 15), (2, 8)]</p>
<p>min(list_of_tuples)</p>
<p># Output: (0, 10)</p>
<p>but if you want to sort by a specific element in each sequence use
the key-argument:</p>
<p><em>min(list_of_tuples, key=<strong>lambda</strong> x: x[0])</em> #
Sorting by first element # Output: (0, 10)</p>
<p><em>min(list_of_tuples, key=<strong>lambda</strong> x: x[1])</em> #
Sorting by second element # Output: (2, 8)</p>
<p><em>sorted(list_of_tuples, key=<strong>lambda</strong> x: x[0])</em>
# Sorting by first element (increasing) # Output: [(0, 10), (1, 15), (2,
8)]</p>
<p><em>sorted(list_of_tuples, key=<strong>lambda</strong> x: x[1])</em>
# Sorting by first element # Output: [(2, 8), (0, 10), (1, 15)]</p>
<p><strong>import</strong> operator</p>
<p># The operator module contains efficient alternatives to the lambda
function <em>max(list_of_tuples, key=operator.itemgetter(0))</em> #
Sorting by first element # Output: (2, 8)</p>
<p>max(list_of_tuples, key=operator.itemgetter(1)) <em># Sorting by
second element # Output: (1, 15)</em></p>
<p>sorted(list_of_tuples, key=operator.itemgetter(0), reverse=True)
<em># Reversed (decreasing) # Output: [(2, 8), (1, 15), (0,
10)]</em></p>
<p>sorted(list_of_tuples, key=operator.itemgetter(1), reverse=True)
<em># Reversed(decreasing) # Output: [(1, 15), (0, 10), (2, 8)]</em></p>
<p>Section 72.4: Default Argument to max, min</p>
<p>You can't pass an empty sequence into max or min:</p>
<p>min([])</p>
<p>ValueError: min() arg is an empty sequence</p>
<p>However, with Python 3, you can pass in the keyword argument default
with a value that will be returned if the sequence is empty, instead of
raising an exception:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 379</p>
<p><span id="max_____default_42" class="anchor"></span>max([],
default=42)</p>
<p># Output: 42</p>
<p>max([], default=0)</p>
<p># Output: 0</p>
<p>Section 72.5: Getting a sorted sequence</p>
<p>Using <strong>one</strong> sequence:</p>
<p>sorted((7, 2, 1, 5)) <em># tuple</em></p>
<p># Output: [1, 2, 5, 7]</p>
<p>sorted(['c', 'A', 'b']) <em># list</em></p>
<p># Output: ['A', 'b', 'c']</p>
<p>sorted({11, 8, 1}) <em># set</em></p>
<p># Output: [1, 8, 11]</p>
<p>sorted({'11': 5, '3': 2, '10': 15}) <em># dict</em></p>
<p># Output: ['10', '11', '3'] # only iterates over the keys</p>
<p>sorted('bdca') <em># string</em></p>
<p># Output: ['a','b','c','d']</p>
<p>The result is always a new list; the original data remains
unchanged.</p>
<p>Section 72.6: Extracting N largest or N smallest items from an</p>
<p>iterable</p>
<p><a
href="https://docs.python.org/3/library/heapq.html#heapq.nlargest">To
find some number (more than one) of largest or smallest values of an
iterable, you can use the nlargest and</a></p>
<p><a
href="https://docs.python.org/3/library/heapq.html#heapq.nlargest">nsmallest</a>
<a href="https://docs.python.org/3/library/heapq.html">of the heapq
module:</a></p>
<p>import <strong>heapq</strong></p>
<p># get 5 largest items from the range</p>
<p>heapq.nlargest(5, range(10))</p>
<p># Output: [9, 8, 7, 6, 5]</p>
<p>heapq.nsmallest(5, range(10))</p>
<p># Output: [0, 1, 2, 3, 4]</p>
<p>This is much more efficient than sorting the whole iterable and then
slicing from the end or beginning. Internally</p>
<p><a href="https://en.wikipedia.org/wiki/Binary_heap">these functions
use the binary heap</a> <a
href="https://en.wikipedia.org/wiki/Priority_queue">priority queue data
structure, which is very efficient for this use case.</a></p>
<p>Like min, max and sorted, these functions accept the optional key
keyword argument, which must be a function</p>
<p>that, given an element, returns its sort key.</p>
<p>Here is a program that extracts 1000 longest lines from a file:</p>
<p>import <strong>heapq</strong></p>
<p><strong>with</strong> open(filename) <strong>as</strong> f:</p>
<p>longest_lines = heapq.nlargest(1000, f, key=len)</p>
<p>Here we open the file, and pass the file handle f to nlargest.
Iterating the file yields each line of the file as a</p>
<p>separate string; nlargest then passes each element (or line) is
passed to the function len to determine its sort key.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 380</p>
<p><span id="len__given_a_string__returns_the"
class="anchor"></span>len, given a string, returns the length of the
line in characters.</p>
<p>This only needs storage for a list of 1000 largest lines so far,
which can be contrasted with</p>
<p>longest_lines = sorted(f, key=len)[1000:]</p>
<p>which will have to hold <em>the entire file in memory</em>.</p>
<p>Section 72.7: Getting the minimum or maximum of several</p>
<p>values</p>
<p>min(7,2,1,5)</p>
<p># Output: 1</p>
<p>max(7,2,1,5)</p>
<p># Output: 7</p>
<p>Section 72.8: Minimum and Maximum of a sequence</p>
<p>Getting the minimum of a sequence (iterable) is equivalent of
accessing the first element of a sorted sequence:</p>
<p>min([2, 7, 5])</p>
<p># Output: 2</p>
<p>sorted([2, 7, 5])[0]</p>
<p># Output: 2</p>
<p>The maximum is a bit more complicated, because sorted keeps order and
max returns the first encountered value.</p>
<p>In case there are no duplicates the maximum is the same as the last
element of the sorted return:</p>
<p>max([2, 7, 5])</p>
<p># Output: 7</p>
<p>sorted([2, 7, 5])[-1]</p>
<p># Output: 7</p>
<p>But not if there are multiple elements that are evaluated as having
the maximum value:</p>
<p><strong>class</strong> MyClass(object):</p>
<p><strong>def</strong> __init__(self, value, name):</p>
<p>self.value = value</p>
<p>self.name = name</p>
<p><strong>def</strong> __lt__(self, other):</p>
<p><strong>return</strong> self.value &lt; other.value</p>
<p><strong>def</strong> __repr__(self):</p>
<p><strong>return</strong> str(self.name)</p>
<p>sorted([MyClass(4, 'first'), MyClass(1, 'second'), MyClass(4,
'third')]) <em># Output: [second, first, third]</em></p>
<p>max([MyClass(4, 'first'), MyClass(1, 'second'), MyClass(4, 'third')])
<em># Output: first</em></p>
<p>Any iterable containing elements that support &lt; or &gt; operations
are allowed.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 381</p>
<p><span id="Chapter_73__Counting_1" class="anchor"></span>Chapter 73:
Counting</p>
<p>Section 73.1: Counting all occurrence of all items in an</p>
<p>iterable: collections.Counter</p>
<p><strong>from</strong> collections <strong>import</strong> Counter</p>
<p>c = Counter(["a", "b", "c", "d", "a", "b", "a", "c", "d"])</p>
<p>c</p>
<p># Out: Counter({'a': 3, 'b': 2, 'c': 2, 'd': 2})</p>
<p>c["a"]</p>
<p># Out: 3</p>
<p><em>c[7]</em> # not in the list (7 occurred 0 times!)</p>
<p># Out: 0</p>
<p>The collections.Counter can be used for any iterable and counts every
occurrence for every element.</p>
<p><strong>Note</strong>: One exception is if a dict or another
collections.Mapping-like class is given, then it will not count
them,</p>
<p>rather it creates a Counter with these values:</p>
<p>Counter({"e": 2})</p>
<p># Out: Counter({"e": 2})</p>
<p><em>Counter({"e": "e"})</em> # warning Counter does not verify the
values are int # Out: Counter({"e": "e"})</p>
<p>Section 73.2: Getting the most common value(-s):</p>
<p>collections.Counter.most_common()</p>
<p>Counting the <em>keys</em> of a Mapping isn't possible with
collections.Counter but we can count the <em>values</em>:</p>
<p><strong>from</strong> collections <strong>import</strong> Counter</p>
<p>adict = {'a': 5, 'b': 3, 'c': 5, 'd': 2, 'e':2, 'q': 5}</p>
<p>Counter(adict.values())</p>
<p># Out: Counter({2: 2, 3: 1, 5: 3})</p>
<p>The most common elements are available by the most_common-method:</p>
<p># Sorting them from most-common to least-common value:
<em>Counter(adict.values()).most_common()</em></p>
<p># Out: [(5, 3), (2, 2), (3, 1)]</p>
<p># Getting the most common value</p>
<p>Counter(adict.values()).most_common(1)</p>
<p># Out: [(5, 3)]</p>
<p># Getting the two most common values</p>
<p>Counter(adict.values()).most_common(2)</p>
<p># Out: [(5, 3), (2, 2)]</p>
<p>Section 73.3: Counting the occurrences of one item in a</p>
<p>sequence: list.count() and tuple.count()</p>
<p>alist = [1, 2, 3, 4, 1, 2, 1, 3, 4]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 382</p>
<p><span id="alist_count_1" class="anchor"></span>alist.count(1)</p>
<p># Out: 3</p>
<p>atuple = ('bear', 'weasel', 'bear', 'frog')</p>
<p>atuple.count('bear')</p>
<p># Out: 2</p>
<p>atuple.count('fox')</p>
<p># Out: 0</p>
<p>Section 73.4: Counting the occurrences of a substring in a</p>
<p>string: str.count()</p>
<p>astring = 'thisisashorttext'</p>
<p>astring.count('t')</p>
<p># Out: 4</p>
<p>This works even for substrings longer than one character:</p>
<p>astring.count('th')</p>
<p># Out: 1</p>
<p>astring.count('is')</p>
<p># Out: 2</p>
<p>astring.count('text')</p>
<p># Out: 1</p>
<p>which would not be possible with collections.Counter which only
counts single characters:</p>
<p><strong>from</strong> collections <strong>import</strong> Counter</p>
<p>Counter(astring)</p>
<p># Out: Counter({'a': 1, 'e': 1, 'h': 2, 'i': 2, 'o': 1, 'r': 1, 's':
3, 't': 4, 'x': 1})</p>
<p>Section 73.5: Counting occurrences in numpy array</p>
<p>To count the occurrences of a value in a numpy array. This will
work:</p>
<p>&gt;&gt;&gt; <strong>import</strong> numpy <strong>as</strong> np</p>
<p>&gt;&gt;&gt; a=np.array([0,3,4,3,5,4,7])</p>
<p>&gt;&gt;&gt; <strong>print</strong> np.sum(a==3)</p>
<p>2</p>
<p>The logic is that the boolean statement produces a array where all
occurrences of the requested values are 1 and</p>
<p>all others are zero. So summing these gives the number of
occurencies. This works for arrays of any shape or dtype.</p>
<p>There are two methods I use to count occurrences of all unique values
in numpy. Unique and bincount. Unique</p>
<p>automatically flattens multidimensional arrays, while bincount only
works with 1d arrays only containing positive integers.</p>
<p>&gt;&gt;&gt; unique,counts=np.unique(a,return_counts=True)</p>
<p><em>&gt;&gt;&gt; <strong>print</strong> unique,counts</em> #
counts[i] is equal to occurrences of unique[i] in a <em>[0 3 4 5 7] [1 2
2 1 1]</em></p>
<p>&gt;&gt;&gt; bin_count=np.bincount(a)</p>
<p><em>&gt;&gt;&gt; <strong>print</strong> bin_count</em> # bin_count[i]
is equal to occurrences of i in a <em>[1 0 0 2 2 1 0 1]</em></p>
<p>If your data are numpy arrays it is generally much faster to use
numpy methods then to convert your data to</p>
<p>generic methods.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 383</p>
<p><span id="Chapter_74__The_Print_Function_1"
class="anchor"></span>Chapter 74: The Print Function</p>
<p>Section 74.1: Print basics</p>
<p>In Python 3 and higher, <strong>print</strong> is a function rather
than a keyword.</p>
<p><strong>print</strong>('hello world!')</p>
<p># out: hello world!</p>
<p>foo = 1</p>
<p>bar = 'bar'</p>
<p>baz = 3.14</p>
<p><strong>print</strong>(foo)</p>
<p># out: 1</p>
<p><strong>print</strong>(bar)</p>
<p># out: bar</p>
<p>print<strong>(baz)</strong></p>
<p># out: 3.14</p>
<p>You can also pass a number of parameters to
<strong>print</strong>:</p>
<p><strong>print</strong>(foo, bar, baz)</p>
<p># out: 1 bar 3.14</p>
<p>Another way to <strong>print</strong> multiple parameters is by using
a +</p>
<p><strong>print</strong>(str(foo) + " " + bar + " " + str(baz))</p>
<p># out: 1 bar 3.14</p>
<p>What you should be careful about when using + to print multiple
parameters, though, is that the type of the parameters should be the
same. Trying to print the above example without the cast to string first
would result in</p>
<p>an error, because it would try to add the number 1 to the string
"bar" and add that to the number 3.14.</p>
<p># Wrong:</p>
<p># type:int str float</p>
<p><strong>print</strong>(foo + bar + baz)</p>
<p># will result in an error</p>
<p>This is because the content of <strong>print</strong> will be
evaluated first:</p>
<p><strong>print</strong>(4 + 5)</p>
<p># out: 9</p>
<p><strong>print</strong>("4" + "5")</p>
<p># out: 45</p>
<p><strong>print</strong>([4] + [5])</p>
<p># out: [4, 5]</p>
<p>Otherwise, using a + can be very helpful for a user to read output of
variables In the example below the output is</p>
<p>very easy to read!</p>
<p>The script below demonstrates this</p>
<p><strong>import</strong> random</p>
<p>#telling python to include a function to create random numbers
<em>randnum = random.randint(0, 12)</em></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 384</p>
<p><span id="_make_a_random_number_between_0"
class="anchor"></span>#make a random number between 0 and 12 and assign
it to a variable <em><strong>print</strong>("The randomly generated
number was - " + str(randnum))</em></p>
<p>You can prevent the <strong>print</strong> function from
automatically printing a newline by using the end parameter:</p>
<p><strong>print</strong>("this has no newline at the end of it... ",
end="") <strong>print</strong>("see?")</p>
<p># out: this has no newline at the end of it... see?</p>
<p>If you want to write to a file, you can pass it as the parameter
file:</p>
<p><strong>with</strong> open('my_file.txt', 'w+') <strong>as</strong>
my_file:</p>
<p><strong>print</strong>("this goes to the file!", file=my_file)</p>
<p>this goes to the file!</p>
<p>Section 74.2: Print parameters</p>
<p>You can do more than just print text. <strong>print</strong> also has
several parameters to help you.</p>
<p>Argument sep: place a string between arguments.</p>
<p>Do you need to print a list of words separated by a comma or some
other string?</p>
<p>&gt;&gt;&gt; <strong>print</strong>('apples','bananas', 'cherries',
sep=', ')</p>
<p>apple, bananas, cherries</p>
<p>&gt;&gt;&gt; <strong>print</strong>('apple','banana', 'cherries',
sep=', ')</p>
<p>apple, banana, cherries</p>
<p>&gt;&gt;&gt;</p>
<p>Argument end: use something other than a newline at the end</p>
<p>Without the end argument, all <strong>print</strong>() functions
write a line and then go to the beginning of the next line. You can</p>
<p>change it to do nothing (use an empty string of ''), or double
spacing between paragraphs by using two newlines.</p>
<p>&gt;&gt;&gt; <strong>print</strong>("print(" class='jidn'"
<strong>if</strong> 1 <strong>else</strong> "", end='');
<strong>print</strong>("/&gt;") class='jidn'/&gt;</p>
<p>&gt;&gt;&gt; <strong>print</strong>("paragraph1",
end="<strong>\n\n</strong>"); <strong>print</strong>("paragraph2")
paragraph1</p>
<p>paragraph2</p>
<p>&gt;&gt;&gt;</p>
<p>Argument file: send output to someplace other than sys.stdout.</p>
<p>Now you can send your text to either stdout, a file, or StringIO and
not care which you are given. If it quacks like a file, it works like a
file.</p>
<p>&gt;&gt;&gt; <strong>def</strong> sendit(out, *values, sep=' ',
end='<strong>\n</strong>'):</p>
<p>... <strong>print</strong>(*values, sep=sep, end=end, file=out)</p>
<p>...</p>
<p>&gt;&gt;&gt; sendit(sys.stdout, 'apples', 'bananas', 'cherries',
sep='<strong>\t</strong>') apples bananas cherries</p>
<p>&gt;&gt;&gt; <strong>with</strong> open("delete-me.txt", "w+")
<strong>as</strong> f:</p>
<p>... sendit(f, 'apples', 'bananas', 'cherries', sep=' ',
end='<strong>\n</strong>')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 385</p>
<p>...</p>
<p>&gt;&gt;&gt; <strong>with</strong> open("delete-me.txt", "rt")
<strong>as</strong> f:</p>
<p>... <strong>print</strong>(f.read())</p>
<p>...</p>
<p>apples bananas cherries</p>
<p>&gt;&gt;&gt;</p>
<p>There is a fourth parameter flush which will forcibly flush the
stream.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 386</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learning
A-Z: Hands-On</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
In Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Learn
to create Machine Learning Algorithms in</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Python
from two Data Science experts. Code</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">templates
included.</a></p>
<p><img src="media/index-412_1.jpeg"
style="width:6.5in;height:3.63889in" alt="index-412_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Master Machine Learning on Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Have a great intuition of many Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make accurate predictions</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make powerful analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Make robust Machine Learning models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Create strong added value to your business</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Use Machine Learning for personal purpose</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle specific topics like Reinforcement Learning, NLP and Deep
Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Handle advanced techniques like Dimensionality Reduction</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Know which Machine Learning model to choose for each type of
problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">✔
Build an army of powerful Machine Learning models and know how to
combine them to solve any</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">problem</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmachinelearning%2F">Watch
Today →</a></p>
<p><span id="Chapter_75__Regular_Expressions_1"
class="anchor"></span>Chapter 75: Regular Expressions (Regex)</p>
<p>Python makes regular expressions available through the re module.</p>
<p>Regular expressions are combinations of characters that are
interpreted as rules for matching substrings. For</p>
<p>instance, the expression
'amount<strong>\D</strong>+<strong>\d</strong>+' will match any string
composed by the word amount plus an integral</p>
<p>number, separated by one or more non-digits, such as:amount=100,
amount <strong>is</strong> 3, amount <strong>is</strong> equal to: 33,
etc.</p>
<p>Section 75.1: Matching the beginning of a string</p>
<p>The first argument of re.match() is the regular expression, the
second is the string to match:</p>
<p>import <strong>re</strong></p>
<p>pattern = r"123"</p>
<p>string = "123zzb"</p>
<p>re.match(pattern, string)</p>
<p># Out: &lt;_sre.SRE_Match object; span=(0, 3), match='123'&gt;</p>
<p>match = re.match(pattern, string)</p>
<p>match.group()</p>
<p># Out: '123'</p>
<p>You may notice that the pattern variable is a string prefixed with r,
which indicates that the string is a <em>raw string</em></p>
<p>literal<em>.</em></p>
<p>A raw string literal has a slightly different syntax than a string
literal, namely a backslash \ in a raw string literal means "just a
backslash" and there's no need for doubling up backlashes to escape
"escape sequences" such as</p>
<p>newlines (\n), tabs (\t), backspaces (\), form-feeds (\r), and so on.
In normal string literals, each backslash must be</p>
<p>doubled up to avoid being taken as the start of an escape
sequence.</p>
<p>Hence, r"<strong>\n</strong>" is a string of 2 characters: \ and n.
Regex patterns also use backslashes, e.g. \d refers to any digit
character. We can avoid having to double escape our strings
("<strong>\\</strong>d") by using raw strings
(r"<strong>\d</strong>").</p>
<p>For instance:</p>
<p><em>string = "<strong>\\</strong>t123zzb"</em> # here the backslash
is escaped, so there's no tab, just '\' and 't' <em>pattern =
"<strong>\\</strong>t123"</em> # this will match \t (escaping the
backslash) followed by 123 <em>re.match(pattern, string).group()</em> #
no match <em>re.match(pattern, "<strong>\t</strong>123zzb").group()</em>
# matches '\t123'</p>
<p>pattern = r"<strong>\\</strong>t123"</p>
<p>re.match(pattern, string).group() <em># matches '\\t123'</em></p>
<p>Matching is done from the start of the string only. If you want to
match anywhere use re.search instead:</p>
<p>match = re.match(r"(123)", "a123zzb")</p>
<p>match <strong>is</strong> None</p>
<p># Out: True</p>
<p>match = re.search(r"(123)", "a123zzb")</p>
<p>match.group()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 388</p>
<p><span id="__Out___123" class="anchor"></span># Out: '123'</p>
<p>Section 75.2: Searching</p>
<p>pattern = r"(your base)"</p>
<p>sentence = "All your base are belong to us."</p>
<p>match = re.search(pattern, sentence)</p>
<p>match.group(1)</p>
<p># Out: 'your base'</p>
<p>match = re.search(r"(belong.*)", sentence)</p>
<p>match.group(1)</p>
<p># Out: 'belong to us.'</p>
<p>Searching is done anywhere in the string unlike re.match. You can
also use re.findall.</p>
<p>You can also search at the beginning of the string (use ^),</p>
<p>match = re.search(r"^123", "123zzb")</p>
<p>match.group(0)</p>
<p># Out: '123'</p>
<p>match = re.search(r"^123", "a123zzb")</p>
<p>match <strong>is</strong> None</p>
<p># Out: True</p>
<p>at the end of the string (use $),</p>
<p>match = re.search(r"123$", "zzb123")</p>
<p>match.group(0)</p>
<p># Out: '123'</p>
<p>match = re.search(r"123$", "123zzb")</p>
<p>match <strong>is</strong> None</p>
<p># Out: True</p>
<p>or both (use both ^ and $):</p>
<p>match = re.search(r"^123$", "123")</p>
<p>match.group(0)</p>
<p># Out: '123'</p>
<p>Section 75.3: Precompiled patterns</p>
<p>import <strong>re</strong></p>
<p>precompiled_pattern = re.compile(r"(<strong>\d</strong>+)")</p>
<p>matches = precompiled_pattern.search("The answer is 41!")
matches.group(1)</p>
<p># Out: 41</p>
<p>matches = precompiled_pattern.search("Or was it 42?")
matches.group(1)</p>
<p># Out: 42</p>
<p>Compiling a pattern allows it to be reused later on in a program.
However, note that Python caches recently-used</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 389</p>
<p><span id="expressions__docs__SO_answer___s" class="anchor"></span><a
href="https://docs.python.org/3/library/re.html#re.compile"><em>expressions
(docs,</em></a> <em><a
href="http://stackoverflow.com/a/452143/1240268">SO answer</a>), so</em>
"programs that use only a few regular expressions at a time
needn<em>’</em>t worry about</p>
<p>compiling regular expressions"<em>.</em></p>
<p>import <strong>re</strong></p>
<p>precompiled_pattern = re.compile(r"(.*<strong>\d</strong>+)")</p>
<p>matches = precompiled_pattern.match("The answer is 41!")
<strong>print</strong>(matches.group(1))</p>
<p># Out: The answer is 41</p>
<p>matches = precompiled_pattern.match("Or was it 42?")
<strong>print</strong>(matches.group(1))</p>
<p># Out: Or was it 42</p>
<p>It can be used with re.match().</p>
<p>Section 75.4: Flags</p>
<p>For some special cases we need to change the behavior of the Regular
Expression, this is done using flags. Flags can</p>
<p>be set in two ways, through the flags keyword or directly in the
expression.</p>
<p>Flags keyword</p>
<p>Below an example for re.search but it works for most functions in the
re module.</p>
<p>m = re.search("b", "ABC")</p>
<p>m <strong>is</strong> None</p>
<p># Out: True</p>
<p>m = re.search("b", "ABC", flags=re.IGNORECASE)</p>
<p>m.group()</p>
<p># Out: 'B'</p>
<p>m = re.search("a.b", "A<strong>\n</strong>BC",
flags=re.IGNORECASE)</p>
<p>m <strong>is</strong> None</p>
<p># Out: True</p>
<p>m = re.search("a.b", "A<strong>\n</strong>BC",
flags=re.IGNORECASE|re.DOTALL) m.group()</p>
<p># Out: 'A\nB'</p>
<p>Common Flags</p>
<p>Flag Short Description</p>
<p>re.IGNORECASE, re.I Makes the pattern ignore the case</p>
<p>re.DOTALL, re.S Makes . match everything including newlines</p>
<p>re.MULTILINE, re.M Makes ^ match the begin of a line and $ the end of
a line</p>
<p>re.DEBUG Turns on debug information</p>
<p>For the complete list of all available flags check the <a
href="https://docs.python.org/2/library/re.html#module-contents">docs</a></p>
<p>Inline flags</p>
<p><a
href="https://docs.python.org/2/library/re.html#regular-expression-syntax">From
the docs:</a></p>
<p>(?iLmsux) (One or more letters from the set 'i', 'L', 'm', 's', 'u',
'x'.)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 390</p>
<p><span id="The_group_matches_the_empty_stri" class="anchor"></span>The
group matches the empty string; the letters set the corresponding flags:
re.I (ignore case), re.L (locale dependent), re.M (multi-line), re.S
(dot matches all), re.U (Unicode dependent), and re.X (verbose), for
the</p>
<p>entire regular expression. This is useful if you wish to include the
flags as part of the regular expression,</p>
<p>instead of passing a flag argument to the re.compile() function.</p>
<p>Note that the (?x) flag changes how the expression is parsed. It
should be used first in the expression string, or after one or more
whitespace characters. If there are non-whitespace characters before the
flag,</p>
<p>the results are undefined.</p>
<p>Section 75.5: Replacing</p>
<p><a
href="https://docs.python.org/2/library/re.html#re.sub">Replacements can
be made on strings using re.sub</a>.</p>
<p>Replacing strings</p>
<p>re.sub(r"t[0-9][0-9]", "foo", "my name t13 is t44 what t99 ever t44")
<em># Out: 'my name foo is foo what foo ever foo'</em></p>
<p>Using group references</p>
<p>Replacements with a small number of groups can be made as
follows:</p>
<p>re.sub(r"t([0-9])([0-9])", r"t<strong>\2\1</strong>", "t13 t19 t81
t25") <em># Out: 't31 t91 t18 t52'</em></p>
<p><a href="https://docs.python.org/2/library/re.html#re.sub">However,
if you make a group ID like '10', this doesn't work</a>: \10 is read as
'ID number 1 followed by 0'. So you have</p>
<p>to be more specific and use the \g <em>notation:</em></p>
<p>re.sub(r"t([0-9])([0-9])",
r"t<strong>\g</strong>&lt;2&gt;<strong>\g</strong>&lt;1&gt;", "t13 t19
t81 t25") # Out: 't31 t91 t18 t52'</p>
<p>Using a replacement function</p>
<p>items = ["zero", "one", "two"]</p>
<p>re.sub(r"a<strong>\[</strong>([0-3])<strong>\]</strong>",
<strong>lambda</strong> match: items[int(match.group(1))], "Items: a[0],
a[1], something, a[2]")</p>
<p># Out: 'Items: zero, one, something, two'</p>
<p>Section 75.6: Find All Non-Overlapping Matches</p>
<p>re.findall(r"[0-9]{2,3}", "some 1 text 12 is 945 here 4445588899") #
Out: ['12', '945', '444', '558', '889']</p>
<p>Note that the r before "[0-9]{2,3}" tells python to interpret the
string as-is; as a "raw" string.</p>
<p>You could also use re.finditer() which works in the same way as
re.findall() but returns an iterator with</p>
<p>SRE_Match objects instead of a list of strings:</p>
<p>results = re.finditer(r"([0-9]{2,3})", "some 1 text 12 is 945 here
4445588899") <strong>print</strong>(results)</p>
<p># Out: &lt;callable-iterator object at 0x105245890&gt;</p>
<p><strong>for</strong> result <strong>in</strong> results:</p>
<p><strong>print</strong>(result.group(0))</p>
<p>''' Out:</p>
<p>12</p>
<p>945</p>
<p>444</p>
<p>558</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 391</p>
<p><span id="889" class="anchor"></span>889</p>
<p>'''</p>
<p>Section 75.7: Checking for allowed characters</p>
<p>If you want to check that a string contains only a certain set of
characters, in this case a-z, A-Z and 0-9, you can do</p>
<p>so like this,</p>
<p>import <strong>re</strong></p>
<p><strong>def</strong> is_allowed(string):</p>
<p>characherRegex = re.compile(r'[^a-zA-Z0-9.]')</p>
<p>string = characherRegex.search(string)</p>
<p><strong>return not</strong> bool(string)</p>
<p><strong>print</strong> (is_allowed("abyzABYZ0099"))</p>
<p># Out: 'True'</p>
<p><strong>print</strong> (is_allowed("#*@#$%^"))</p>
<p># Out: 'False'</p>
<p>You can also adapt the expression line from [^a-zA-Z0-9.] to
[^a-z0-9.], to disallow uppercase letters for example.</p>
<p>Partial credit: <a
href="http://stackoverflow.com/a/1325265/2697955">http://stackoverflow.com/a/1325265/2697955</a></p>
<p>Section 75.8: Splitting a string using regular expressions</p>
<p>You can also use regular expressions to split a string. For
example,</p>
<p>import <strong>re</strong></p>
<p>data = re.split(r'<strong>\s</strong>+', 'James 94 Samantha 417
Scarlett 74') <strong>print</strong>( data )</p>
<p># Output: ['James', '94', 'Samantha', '417', 'Scarlett', '74']</p>
<p>Section 75.9: Grouping</p>
<p>Grouping is done with parentheses. Calling group() returns a string
formed of the matching parenthesized</p>
<p>subgroups.</p>
<p>match.group() # Group without argument returns the entire match found
# Out: '123'</p>
<p>match.group(0) # Specifying 0 gives the same result as specifying no
argument # Out: '123'</p>
<p>Arguments can also be provided to group() to fetch a particular
subgroup.</p>
<p><a
href="https://docs.python.org/2/library/re.html#re.MatchObject.group">From
the docs:</a></p>
<p>If there is a single argument, the result is a single string; if
there are multiple arguments, the result is a tuple with one item per
argument.</p>
<p>Calling groups() on the other hand, returns a list of tuples
containing the subgroups.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 392</p>
<p><span id="sentence____This_is_a_phone_numb"
class="anchor"></span>sentence = "This is a phone number
672-123-456-9910" pattern = r".*(phone).*?([<strong>\d</strong>-]+)"</p>
<p>match = re.match(pattern, sentence)</p>
<p>match.groups() # The entire match as a list of tuples of the
paranthesized subgroups # Out: ('phone', '672-123-456-9910')</p>
<p>m.group() # The entire match as a string</p>
<p># Out: 'This is a phone number 672-123-456-9910'</p>
<p>m.group(0) # The entire match as a string</p>
<p># Out: 'This is a phone number 672-123-456-9910'</p>
<p>m.group(1) # The first parenthesized subgroup. # Out: 'phone'</p>
<p>m.group(2) # The second parenthesized subgroup. # Out:
'672-123-456-9910'</p>
<p>m.group(1, 2) # Multiple arguments give us a tuple. # Out: ('phone',
'672-123-456-9910')</p>
<p>Named groups</p>
<p>match = re.search(r'My name is (?P[A-Za-z ]+)', 'My name is John
Smith') match.group('name')</p>
<p># Out: 'John Smith'</p>
<p>match.group(1)</p>
<p># Out: 'John Smith'</p>
<p>Creates a capture group that can be referenced by name as well as by
index.</p>
<p>Non-capturing groups</p>
<p>Using (?:) creates a group, but the group isn't captured. This means
you can use it as a group, but it won't pollute</p>
<p>your "group space".</p>
<p>re.match(r'(<strong>\d</strong>+)(<strong>\+</strong>(<strong>\d</strong>+))?',
'11+22').groups()</p>
<p># Out: ('11', '+22', '22')</p>
<p>re.match(r'(<strong>\d</strong>+)(?:<strong>\+</strong>(<strong>\d</strong>+))?',
'11+22').groups()</p>
<p># Out: ('11', '22')</p>
<p>This example matches 11+22 or 11, but not 11+. This is since the +
sign and the second term are grouped. On the</p>
<p>other hand, the + sign isn't captured.</p>
<p>Section 75.10: Escaping Special Characters</p>
<p>Special characters (like the character class brackets [ and ] below)
are not matched literally:</p>
<p>match = re.search(r'[b]', 'a[b]c')</p>
<p>match.group()</p>
<p># Out: 'b'</p>
<p>By escaping the special characters, they can be matched
literally:</p>
<p>match = re.search(r'<strong>\[</strong>b<strong>\]</strong>',
'a[b]c')</p>
<p>match.group()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 393</p>
<p><span id="__Out____b" class="anchor"></span># Out: '[b]'</p>
<p>The re.escape() function can be used to do this for you:</p>
<p>re.escape('a[b]c')</p>
<p># Out: 'a\\[b\\]c'</p>
<p>match = re.search(re.escape('a[b]c'), 'a[b]c')</p>
<p>match.group()</p>
<p># Out: 'a[b]c'</p>
<p>The re.escape() function escapes all special characters, so it is
useful if you are composing a regular expression based on user
input:</p>
<p>username = 'A.C.' # suppose this came from the user</p>
<p>re.findall(r'Hi {}!'.format(username), 'Hi A.C.! Hi ABCD!') # Out:
['Hi A.C.!', 'Hi ABCD!']</p>
<p>re.findall(r'Hi {}!'.format(re.escape(username)), 'Hi A.C.! Hi
ABCD!') # Out: ['Hi A.C.!']</p>
<p>Section 75.11: Match an expression only in specific locations</p>
<p>Often you want to match an expression only in specific places
(leaving them untouched in others, that is). Consider the following
sentence:</p>
<p>An apple a day keeps the doctor away (I eat an apple everyday).</p>
<p>Here the "apple" occurs twice which can be solved with so called
backtracking control verbs which are supported by</p>
<p><a href="https://pypi.python.org/pypi/regex">the newer
<strong>regex</strong> module. The idea is:</a></p>
<p>forget_this | <strong>or</strong> this | <strong>and</strong> this
<strong>as</strong> well | (but keep this)</p>
<p>With our apple example, this would be:</p>
<p><strong>import</strong> regex <strong>as</strong> re</p>
<p>string = "An apple a day keeps the doctor away (I eat an apple
everyday)." rx = re.compile(r'''</p>
<p><strong>\(</strong>[^()]*<strong>\)</strong> (*SKIP)(*FAIL) # match
anything in parentheses and "throw it away"</p>
<p>| # or</p>
<p>apple # match an apple</p>
<p>''', re.VERBOSE)</p>
<p>apples = rx.findall(string)</p>
<p><strong>print</strong>(apples)</p>
<p># only one</p>
<p>This matches "apple" only when it can be found outside of the
parentheses.</p>
<p>Here's how it works:</p>
<p>While looking from <strong>left to right</strong>, the regex engine
consumes everything to the left, the (*SKIP) acts as an</p>
<p>"always-true-assertion". Afterwards, it correctly fails on (*FAIL)
and backtracks.</p>
<p>Now it gets to the point of (*SKIP) <strong>from right to
left</strong> (aka while backtracking) where it is forbidden to go
any</p>
<p>further to the left. Instead, the engine is told to throw away
anything to the left and jump to the point where the (*SKIP) was
invoked.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 394</p>
<p><span id="Section_75_12__Iterating_over_ma"
class="anchor"></span>Section 75.12: Iterating over matches using
`re.finditer`</p>
<p>You can use re.finditer to iterate over all matches in a string. This
gives you (in comparison to re.findall extra</p>
<p>information, such as information about the match location in the
string (indexes):</p>
<p>import <strong>re</strong></p>
<p>text = 'You can try to find an ant in this string'</p>
<p>pattern = 'an?<strong>\w</strong>' # find 'an' either with or without
a following word character</p>
<p><strong>for</strong> match <strong>in</strong> re.finditer(pattern,
text):</p>
<p># Start index of match (integer)</p>
<p>sStart = match.start()</p>
<p># Final index of match (integer)</p>
<p>sEnd = match.end()</p>
<p># Complete match (string)</p>
<p>sGroup = match.group()</p>
<p># Print match</p>
<p><strong>print</strong>('Match "{}" found at: [{},{}]'.format(sGroup,
sStart,sEnd))</p>
<p>Result:</p>
<p>Match "an" found at: [5,7]</p>
<p>Match "an" found at: [20,22]</p>
<p>Match "ant" found at: [23,26]</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 395</p>
<p><span id="Chapter_76__Copying_data_1" class="anchor"></span>Chapter
76: Copying data</p>
<p>Section 76.1: Copy a dictionary</p>
<p>A dictionary object has the method copy. It performs a shallow copy
of the dictionary.</p>
<p>&gt;&gt;&gt; d1 = {1:[]}</p>
<p>&gt;&gt;&gt; d2 = d1.copy()</p>
<p>&gt;&gt;&gt; d1 <strong>is</strong> d2</p>
<p>False</p>
<p>&gt;&gt;&gt; d1[1] <strong>is</strong> d2[1]</p>
<p>True</p>
<p>Section 76.2: Performing a shallow copy</p>
<p>A shallow copy is a copy of a collection without performing a copy of
its elements.</p>
<p>&gt;&gt;&gt; <strong>import</strong> copy</p>
<p>&gt;&gt;&gt; c = [[1,2]]</p>
<p>&gt;&gt;&gt; d = copy.copy(c)</p>
<p>&gt;&gt;&gt; c <strong>is</strong> d</p>
<p>False</p>
<p>&gt;&gt;&gt; c[0] <strong>is</strong> d[0]</p>
<p>True</p>
<p>Section 76.3: Performing a deep copy</p>
<p>If you have nested lists, it is desirable to clone the nested lists
as well. This action is called deep copy.</p>
<p>&gt;&gt;&gt; <strong>import</strong> copy</p>
<p>&gt;&gt;&gt; c = [[1,2]]</p>
<p>&gt;&gt;&gt; d = copy.deepcopy(c)</p>
<p>&gt;&gt;&gt; c <strong>is</strong> d</p>
<p>False</p>
<p>&gt;&gt;&gt; c[0] <strong>is</strong> d[0]</p>
<p>False</p>
<p>Section 76.4: Performing a shallow copy of a list</p>
<p>You can create shallow copies of lists using slices.</p>
<p>&gt;&gt;&gt; l1 = [1,2,3]</p>
<p>&gt;&gt;&gt; l2 = l1[:] # Perform the shallow copy.</p>
<p>&gt;&gt;&gt; l2</p>
<p>[1,2,3]</p>
<p>&gt;&gt;&gt; l1 <strong>is</strong> l2</p>
<p>False</p>
<p>Section 76.5: Copy a set</p>
<p>Sets also have a copymethod. You can use this method to perform a
shallow copy.</p>
<p>&gt;&gt;&gt; s1 = {()}</p>
<p>&gt;&gt;&gt; s2 = s1.copy()</p>
<p>&gt;&gt;&gt; s1 <strong>is</strong> s2</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 396</p>
<p>False</p>
<p>&gt;&gt;&gt; s2.add(3)</p>
<p>&gt;&gt;&gt; s1</p>
<p>{[]}</p>
<p>&gt;&gt;&gt; s2</p>
<p>{3,[]}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 397</p>
<p><span id="Chapter_77__Context_Managers___w_1"
class="anchor"></span>Chapter 77: Context Managers (“with”</p>
<p>Statement)</p>
<p>While Python's context managers are widely used, few understand the
purpose behind their use. These statements,</p>
<p>commonly used with reading and writing files, assist the application
in conserving system memory and improve resource management by ensuring
specific resources are only in use for certain processes. This topic
explains and</p>
<p>demonstrates the use of Python's context managers.</p>
<p>Section 77.1: Introduction to context managers and the with</p>
<p>statement</p>
<p>A context manager is an object that is notified when a context (a
block of code) starts and ends. You commonly use one with the
<strong>with</strong> statement. It takes care of the notifying.</p>
<p>For example, file objects are context managers. When a context ends,
the file object is closed automatically:</p>
<p>open_file = open(filename)</p>
<p><strong>with</strong> open_file:</p>
<p>file_contents = open_file.read()</p>
<p># the open_file object has automatically been closed.</p>
<p>The above example is usually simplified by using the as keyword:</p>
<p><strong>with</strong> open(filename) <strong>as</strong>
open_file:</p>
<p>file_contents = open_file.read()</p>
<p># the open_file object has automatically been closed.</p>
<p>Anything that ends execution of the block causes the context
manager's exit method to be called. This includes</p>
<p>exceptions, and can be useful when an error causes you to prematurely
exit from an open file or connection.</p>
<p>Exiting a script without properly closing files/connections is a bad
idea, that may cause data loss or other problems. By using a context
manager you can ensure that precautions are always taken to prevent
damage or loss in this</p>
<p>way. This feature was added in Python 2.5.</p>
<p>Section 77.2: Writing your own context manager</p>
<p>A context manager is any object that implements two magic methods
__enter__() and __exit__() (although it can</p>
<p>implement other methods as well):</p>
<p><strong>class</strong> AContextManager():</p>
<p><strong>def</strong> __enter__(self):</p>
<p><strong>print</strong>("Entered")</p>
<p># optionally return an object</p>
<p><strong>return</strong> "A-instance"</p>
<p><strong>def</strong> __exit__(self, exc_type, exc_value,
traceback):</p>
<p><strong>print</strong>("Exited" + (" (with an exception)"
<strong>if</strong> exc_type <strong>else</strong> "")) # return True if
you want to suppress the exception</p>
<p>If the context exits with an exception, the information about that
exception will be passed as a triple exc_type, exc_value , traceback
(these are the same variables as returned by the sys.exc_info()
function). If the context</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 398</p>
<p><span id="exits_normally__all_three_of_the"
class="anchor"></span>exits normally, all three of these arguments will
be None.</p>
<p>If an exception occurs and is passed to the __exit__ method, the
method can return True in order to suppress the</p>
<p>exception, or the exception will be re-raised at the end of the
__exit__ function.</p>
<p><strong>with</strong> AContextManager() <strong>as</strong> a:</p>
<p><strong>print</strong>("a is %r" % a)</p>
<p># Entered</p>
<p># a is 'A-instance'</p>
<p># Exited</p>
<p><strong>with</strong> AContextManager() <strong>as</strong> a:</p>
<p><strong>print</strong>("a is %d" % a)</p>
<p># Entered</p>
<p># Exited (with an exception)</p>
<p># Traceback (most recent call last):</p>
<p># File "&lt;stdin&gt;", line 2, in &lt;module&gt;</p>
<p># TypeError: %d format: a number is required, not str</p>
<p>Note that in the second example even though an exception occurs in
the middle of the body of the with-statement,</p>
<p>the __exit__ handler still gets executed, before the exception
propagates to the outer scope.</p>
<p>If you only need an __exit__ method, you can return the instance of
the context manager:</p>
<p><strong>class</strong> MyContextManager:</p>
<p><strong>def</strong> __enter__(self):</p>
<p>return <strong>self</strong></p>
<p><strong>def</strong> __exit__(self):</p>
<p><strong>print</strong>('something')</p>
<p>Section 77.3: Writing your own contextmanager using</p>
<p>generator syntax</p>
<p>It is also possible to write a context manager using generator syntax
thanks to the <a
href="https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager">contextlib.contextmanager</a>
decorator:</p>
<p><strong>import</strong> contextlib</p>
<p>@contextlib.contextmanager</p>
<p><strong>def</strong> context_manager(num):</p>
<p><strong>print</strong>('Enter')</p>
<p><strong>yield</strong> num + 1</p>
<p><strong>print</strong>('Exit')</p>
<p><strong>with</strong> context_manager(2) <strong>as</strong> cm:</p>
<p># the following instructions are run when the 'yield' point of the
context # manager is reached.</p>
<p># 'cm' will have the value that was yielded</p>
<p><strong>print</strong>('Right in the middle with cm =
{}'.format(cm))</p>
<p>produces:</p>
<p>Enter</p>
<p>Right in the middle with cm = 3</p>
<p>Exit</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 399</p>
<p><span id="The_decorator_simplifies_the_tas" class="anchor"></span>The
decorator simplifies the task of writing a context manager by converting
a generator into one. Everything before the yield expression becomes the
__enter__ method, the value yielded becomes the value returned by
the</p>
<p>generator (which can be bound to a variable in the with statement),
and everything after the yield expression</p>
<p>becomes the __exit__ method.</p>
<p>If an exception needs to be handled by the context manager, a
<strong>try</strong>..<strong>except</strong>..<strong>finally</strong>-block
can be written in the generator and any exception raised in the
<strong>with</strong>-block will be handled by this exception block.</p>
<p>@contextlib.contextmanager</p>
<p><strong>def</strong> error_handling_context_manager(num):</p>
<p><strong>print</strong>("Enter")</p>
<p>try<strong>:</strong></p>
<p><strong>yield</strong> num + 1</p>
<p><strong>except</strong> ZeroDivisionError:</p>
<p><strong>print</strong>("Caught error")</p>
<p>finally<strong>:</strong></p>
<p><strong>print</strong>("Cleaning up")</p>
<p><strong>print</strong>("Exit")</p>
<p><strong>with</strong> error_handling_context_manager(-1)
<strong>as</strong> cm:</p>
<p><strong>print</strong>("Dividing by cm = {}".format(cm))</p>
<p><strong>print</strong>(2 / cm)</p>
<p>This produces:</p>
<p>Enter</p>
<p>Dividing by cm = 0</p>
<p>Caught error</p>
<p>Cleaning up</p>
<p>Exit</p>
<p>Section 77.4: Multiple context managers</p>
<p>You can open several content managers at the same time:</p>
<p><strong>with</strong> open(input_path) <strong>as</strong>
input_file, open(output_path, 'w') <strong>as</strong> output_file:</p>
<p># do something with both files.</p>
<p># e.g. copy the contents of input_file into output_file
<strong>for</strong> line <strong>in</strong> input_file:</p>
<p>output_file.write(line + '<strong>\n</strong>')</p>
<p>It has the same effect as nesting context managers:</p>
<p><strong>with</strong> open(input_path) <strong>as</strong>
input_file:</p>
<p><strong>with</strong> open(output_path, 'w') <strong>as</strong>
output_file:</p>
<p><strong>for</strong> line <strong>in</strong> input_file:</p>
<p>output_file.write(line + '<strong>\n</strong>')</p>
<p>Section 77.5: Assigning to a target</p>
<p>Many context managers return an object when entered. You can assign
that object to a new name in the <strong>with</strong> statement.</p>
<p>For example, using a database connection in a <strong>with</strong>
statement could give you a cursor object:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 400</p>
<p><span id="with_database_connection_as_curs"
class="anchor"></span><strong>with</strong> database_connection
<strong>as</strong> cursor:</p>
<p>cursor.execute(sql_query)</p>
<p>File objects return themselves, this makes it possible to both open
the file object and use it as a context manager in one expression:</p>
<p><strong>with</strong> open(filename) <strong>as</strong>
open_file:</p>
<p>file_contents = open_file.read()</p>
<p>Section 77.6: Manage Resources</p>
<p><strong>class</strong> File():</p>
<p><strong>def</strong> __init__(self, filename, mode):</p>
<p>self.filename = filename</p>
<p>self.mode = mode</p>
<p><strong>def</strong> __enter__(self):</p>
<p>self.open_file = open(self.filename, self.mode)</p>
<p><strong>return</strong> self.open_file</p>
<p><strong>def</strong> __exit__(self, *args):</p>
<p>self.open_file.close()</p>
<p>__init__() method sets up the object, in this case setting up the
file name and mode to open file. __enter__()</p>
<p>opens and returns the file and __exit__() just closes it.</p>
<p>Using these magic methods (__enter__, __exit__) allows you to
implement objects which can be used easily <strong>with</strong> the
with statement.</p>
<p>Use File class:</p>
<p><strong>for</strong> _ <strong>in</strong> range(10000):</p>
<p><strong>with</strong> File('foo.txt', 'w') <strong>as</strong> f:</p>
<p>f.write('foo')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 401</p>
<p><span id="Chapter_78__The___name___special_1"
class="anchor"></span>Chapter 78: The __name__ special</p>
<p>variable</p>
<p>The __name__ special variable is used to check whether a file has
been imported as a module or not, and to identify</p>
<p>a function, class, module object by their __name__ attribute.</p>
<p>Section 78.1: __name__ == '__main__'</p>
<p>The special variable __name__ is not set by the user. It is mostly
used to check whether or not the module is being</p>
<p>run by itself or run because an <strong>import</strong> was
performed. To avoid your module to run certain parts of its code when it
gets imported, check <strong>if</strong> __name__ == '__main__'.</p>
<p>Let <strong>module_1.py</strong> be just one line long:</p>
<p><strong>import</strong> module2.py</p>
<p>And let's see what happens, depending on
<strong>module2.py</strong></p>
<p>Situation 1</p>
<p>module2.py</p>
<p><strong>print</strong>('hello')</p>
<p>Running <strong>module1.py</strong> will print hello</p>
<p>Running <strong>module2.py</strong> will print hello</p>
<p>Situation 2</p>
<p>module2.py</p>
<p><strong>if</strong> __name__ == '__main__':</p>
<p><strong>print</strong>('hello')</p>
<p>Running <strong>module1.py</strong> will print nothing</p>
<p>Running <strong>module2.py</strong> will print hello</p>
<p>Section 78.2: Use in logging</p>
<p>When configuring the built-in logging functionality, a common pattern
is to create a logger with the __name__ of the current module:</p>
<p>logger = logging.getLogger(__name__)</p>
<p>This means that the fully-qualified name of the module will appear in
the logs, making it easier to see where</p>
<p>messages have come from.</p>
<p>Section 78.3: function_class_or_module.__name__</p>
<p>The special attribute __name__ of a function, class or module is a
string containing its name.</p>
<p>import <strong>os</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 402</p>
<p>class <strong>C:</strong></p>
<p>pass</p>
<p><strong>def</strong> f(x):</p>
<p>x += 2</p>
<p>return <strong>x</strong></p>
<p>print<strong>(f)</strong></p>
<p># &lt;function f at 0x029976B0&gt;</p>
<p><strong>print</strong>(f.__name__)</p>
<p># f</p>
<p>print<strong>(C)</strong></p>
<p># &lt;class '__main__.C'&gt;</p>
<p><strong>print</strong>(C.__name__)</p>
<p># C</p>
<p>print<strong>(os)</strong></p>
<p># &lt;module 'os' from '/spam/eggs/'&gt;</p>
<p><strong>print</strong>(os.__name__)</p>
<p># os</p>
<p>The __name__ attribute is not, however, the name of the variable
which references the class, method or function, rather it is the name
given to it when defined.</p>
<p><strong>def</strong> f():</p>
<p>pass</p>
<p><strong>print</strong>(f.__name__)</p>
<p># f - as expected</p>
<p>g = f</p>
<p><strong>print</strong>(g.__name__)</p>
<p># f - even though the variable is named g, the function is still
named f</p>
<p>This can be used, among others, for debugging:</p>
<p><strong>def</strong> enter_exit_info(func):</p>
<p><strong>def</strong> wrapper(*arg, **kw):</p>
<p><strong>print</strong> '-- entering', func.__name__</p>
<p>res = func(*arg, **kw)</p>
<p><strong>print</strong> '-- exiting', func.__name__</p>
<p>return <strong>res</strong></p>
<p><strong>return</strong> wrapper</p>
<p>@enter_exit_info</p>
<p><strong>def</strong> f(x):</p>
<p><strong>print</strong> 'In:', x</p>
<p>res = x + 2</p>
<p><strong>print</strong> 'Out:', res</p>
<p>return <strong>res</strong></p>
<p>a = f(2)</p>
<p># Outputs:</p>
<p># -- entering f</p>
<p># In: 2</p>
<p># Out: 4</p>
<p># -- exiting f</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 403</p>
<p><span id="Chapter_79__Checking_Path_Existe_1"
class="anchor"></span>Chapter 79: Checking Path Existence and</p>
<p>Permissions</p>
<p>Parameter Details</p>
<p>os.F_OK Value to pass as the mode parameter of access() to test the
existence of path.</p>
<p>os.R_OK Value to include in the mode parameter of access() to test
the readability of path.</p>
<p>os.W_OK Value to include in the mode parameter of access() to test
the writability of path.</p>
<p>os.X_OK Value to include in the mode parameter of access() to
determine if path can be executed.</p>
<p>Section 79.1: Perform checks using os.access</p>
<p>os.access is much better solution to check whether directory exists
and it's accessible for reading and writing.</p>
<p>import <strong>os</strong></p>
<p>path = "/home/myFiles/directory1"</p>
<p>## Check if path exists</p>
<p>os.access(path, os.F_OK)</p>
<p>## Check if path is Readable</p>
<p>os.access(path, os.R_OK)</p>
<p>## Check if path is Writable</p>
<p>os.access(path, os.W_OK)</p>
<p>## Check if path is Executable</p>
<p>os.access(path, os.E_OK)</p>
<p>also it's possible to perform all checks together</p>
<p>os.access(path, os.F_OK &amp; os.R_OK &amp; os.W_OK &amp;
os.E_OK)</p>
<p>All the above returns True if access is allowed and False if not
allowed. These are available on unix and windows.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 404</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F"><strong>VIDEO:</strong>
Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Learning,
Data Science</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
Deep Learning with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Complete
hands-on machine learning tutorial with</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">data
science, Tensorflow, artificial intelligence,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">and
neural networks</a></p>
<p><img src="media/index-430_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-430_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build artificial neural networks with Tensorflow and Keras</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify images, data, and sentiments using deep learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Make predictions using linear regression, polynomial regression, and
multivariate regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Data Visualization with MatPlotLib and Seaborn</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Implement machine learning at massive scale with Apache Spark's
MLLib</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Understand reinforcement learning - and how to build a Pac-Man
bot</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Classify data using K-Means clustering, Support Vector Machines (SVM),
KNN, Decision Trees,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Naive
Bayes, and PCA</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Use train/test and K-Fold cross validation to choose and tune your
models</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">✔
Build a movie recommender system using item-based and user-based
collaborative filtering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdata-science-and-machine-learning-with-python-hands-on%2F">Watch
Today →</a></p>
<p><span id="Chapter_80__Creating_Python_pack_1"
class="anchor"></span>Chapter 80: Creating Python packages</p>
<p>Section 80.1: Introduction</p>
<p><a
href="https://docs.python.org/3/distutils/setupscript.html#writing-the-setup-script">Every
package requires a setup.py</a> file which describes the package.</p>
<p>Consider the following directory structure for a simple package:</p>
<p>+-- package_name</p>
<p>| |</p>
<p>| +-- __init__.py</p>
<p>|</p>
<p>+-- setup.py</p>
<p>The __init__.py contains only the line <strong>def</strong> foo():
<strong>return</strong> 100.</p>
<p>The following setup.py will define the package:</p>
<p><strong>from</strong> setuptools <strong>import</strong> setup</p>
<p>setup(</p>
<p>name='package_name', # package name</p>
<p>version='0.1', # version</p>
<p>description='Package Description', # short description</p>
<p>url='http://example.com', # package URL</p>
<p>install_requires=[], # list of packages this package depends</p>
<p># on.</p>
<p>packages=['package_name'], # List of module names that installing</p>
<p># this package will provide.</p>
<p>)</p>
<p><a href="https://virtualenv.pypa.io/en/stable/">virtualenv is great
to test package installs without modifying your other Python
environments:</a></p>
<p>$ virtualenv .virtualenv</p>
<p>...</p>
<p>$ source .virtualenv/bin/activate</p>
<p>$ python setup.py install</p>
<p>running install</p>
<p>...</p>
<p>Installed .../package_name-0.1-....egg</p>
<p>...</p>
<p>$ python</p>
<p>&gt;&gt;&gt; <strong>import</strong> package_name</p>
<p>&gt;&gt;&gt; package_name.foo()</p>
<p>100</p>
<p>Section 80.2: Uploading to PyPI</p>
<p>Once your setup.py is fully functional (see Introduction), it is very
easy to upload your package to <a
href="https://pypi.python.org/">PyPI.</a></p>
<p>Setup a .pypirc File</p>
<p>This file stores logins and passwords to authenticate your accounts.
It is typically stored in your home directory.</p>
<p># .pypirc file</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 406</p>
<p>[distutils]</p>
<p>index-servers =</p>
<p>pypi</p>
<p>pypitest</p>
<p>[pypi]</p>
<p>repository=https://pypi.python.org/pypi</p>
<p>username=your_username</p>
<p>password=your_password</p>
<p>[pypitest]</p>
<p>repository=https://testpypi.python.org/pypi</p>
<p>username=your_username</p>
<p>password=your_password</p>
<p>It is <a
href="https://packaging.python.org/distributing/#upload-your-distributions">safer
to use</a> twine for uploading packages, so make sure that is
installed.</p>
<p>$ pip install twine</p>
<p>Register and Upload to testpypi (optional)</p>
<p><strong>Note</strong><a
href="https://bitbucket.org/pypa/pypi/issues/206/cannot-overwrite-package-files">:
PyPI does not allow overwriting uploaded packages, so it is prudent to
first test your deployment on a</a></p>
<p><a href="https://caremad.io/2016/02/versioning-software/">dedicated
test server, e.g. testpypi. This option will be discussed. Consider a
versioning scheme for your package</a></p>
<p>prior to uploading such as <a
href="http://sedimental.org/designing_a_version.html#calendar_versioning">calendar
versioning or</a> <a href="http://semver.org/">semantic
versioning.</a></p>
<p><a href="https://testpypi.python.org/pypi">Either log in, or create a
new account at testpypi</a>. Registration is only required the first
time, although registering</p>
<p>more than once is not harmful.</p>
<p>$ python setup.py register -r pypitest</p>
<p>While in the root directory of your package:</p>
<p>$ twine upload dist/* -r pypitest</p>
<p>Your package should now be accessible through your account.</p>
<p>Testing</p>
<p>Make a test virtual environment. Try to pip install your package from
either testpypi or PyPI.</p>
<p># Using virtualenv</p>
<p>$ <strong>mkdir</strong> testenv</p>
<p>$ <strong>cd</strong> testenv</p>
<p>$ virtualenv .virtualenv</p>
<p>...</p>
<p>$ <strong>source</strong>
.virtualenv<strong>/</strong>bin<strong>/</strong>activate</p>
<p># Test from testpypi</p>
<p><strong>(</strong>.virtualenv<strong>)</strong> pip
<strong>install</strong>--verbose--extra-index-url
https:<strong>//</strong>testpypi.python.org<strong>/</strong>pypi
package_name</p>
<p>...</p>
<p># Or test from PyPI</p>
<p><strong>(</strong>.virtualenv<strong>)</strong> $ pip
<strong>install</strong> package_name</p>
<p>...</p>
<p><strong>(</strong>.virtualenv<strong>)</strong> $ python</p>
<p>Python 3.5.1 <strong>(</strong>default, Jan 27 2016,
19:16:39<strong>)</strong></p>
<p><strong>[</strong>GCC 4.2.1 Compatible Apple LLVM 7.0.2
<strong>(</strong>clang-700.1.81<strong>)]</strong> on darwin Type
"help", "copyright", "credits" or "license" <strong>for more</strong>
information. <strong>&gt;&gt;&gt;</strong> import package_name</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 407</p>
<p><span id="____package_name_foo"
class="anchor"></span><strong>&gt;&gt;&gt;</strong>
package_name.foo<strong>()</strong></p>
<p>100</p>
<p>If successful, your package is least importable. You might consider
testing your API as well before your final upload</p>
<p>to PyPI. If you package failed during testing, do not worry. You can
still fix it, re-upload to testpypi and test again.</p>
<p>Register and Upload to PyPI</p>
<p>Make sure twine is installed:</p>
<p>$ pip install twine</p>
<p><a href="https://pypi.python.org/pypi">Either log in, or create a new
account at PyPI.</a></p>
<p>$ python setup.py register -r pypi</p>
<p>$ twine upload dist/*</p>
<p>That's it! Your package is <a
href="https://pypi.python.org/pypi/package_name">now live</a>.</p>
<p>If you discover a bug, simply upload a new version of your
package.</p>
<p>Documentation</p>
<p>Don't forget to include at least some kind of documentation for your
package. PyPi takes as the default formatting</p>
<p>language reStructuredText.</p>
<p>Readme</p>
<p>If your package doesn't have a big documentation, include what can
help other users in README.rst file. When the</p>
<p>file is ready, another one is needed to tell PyPi to show it.</p>
<p>Create setup.cfg file and put these two lines in it:</p>
<p>[metadata]</p>
<p>description-file = README.rst</p>
<p>Note that if you try to put Markdown file into your package, PyPi
will read it as a pure text file without any formatting.</p>
<p>Licensing</p>
<p>It's often more than welcome to put a LICENSE.txt file in your
package with one of the <a
href="https://opensource.org/licenses">OpenSource licenses</a> to tell
users if they can use your package for example in commercial projects or
if your code is usable with their license.</p>
<p><a href="https://tldrlegal.com/">In more readable way some licenses
are explained at TL;DR.</a></p>
<p>Section 80.3: Making package executable</p>
<p>If your package isn't only a library, but has a piece of code that
can be used either as a showcase or a standalone application when your
package is installed, put that piece of code into __main__.py file.</p>
<p>Put the __main__.py in the package_name folder. This way you will be
able to run it directly from console:</p>
<p>python -m package_name</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 408</p>
<p>If there's no __main__.py file available, the package won't run with
this command and this error will be printed:</p>
<p>python: No module named package_name.__main__; 'package_name' is a
package and cannot be directly</p>
<p>executed.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 409</p>
<p><span id="Chapter_81__Usage_of__pip__modul_1"
class="anchor"></span>Chapter 81: Usage of "pip" module: PyPI</p>
<p>Package Manager</p>
<p>Sometimes you may need to use pip package manager inside python eg.
when some imports may raise</p>
<p>ImportError and you want to handle the exception. If you unpack on
Windows Python_root/Scripts/pip.exe inside is stored __main__.py file,
where main class from pip package is imported.</p>
<p>This means pip package is used whenever you use pip executable. For
usage of pip as executable see: pip: PyPI Package Manager</p>
<p>Section 81.1: Example use of commands</p>
<p>import <strong>pip</strong></p>
<p>command = 'install'</p>
<p>parameter = 'selenium'</p>
<p>second_param = 'numpy' # You can give as many package names as needed
switch = '--upgrade'</p>
<p>pip.main([command, parameter, second_param, switch])</p>
<p>Only needed parameters are obligatory, so both pip.main(['freeze'])
and pip.main(['freeze', '', '']) are acceptable.</p>
<p>Batch install</p>
<p>It is possible to pass many package names in one call, but if one
install/upgrade fails, whole installation process stops and ends with
status '1'.</p>
<p>import <strong>pip</strong></p>
<p>installed = pip.get_installed_distributions()</p>
<p>list = []</p>
<p><strong>for</strong> i <strong>in</strong> installed:</p>
<p>list.append(i.key)</p>
<p>pip.main(['install']+list+['--upgrade'])</p>
<p>If you don't want to stop when some installs fail, call installation
in loop.</p>
<p><strong>for</strong> i <strong>in</strong> installed:</p>
<p>pip.main(['install']+i.key+['--upgrade'])</p>
<p>Section 81.2: Handling ImportError Exception</p>
<p>When you use python file as module there is no need always check if
package is installed but it is still useful for scripts.</p>
<p><strong>if</strong> __name__ == '__main__':</p>
<p>try<strong>:</strong></p>
<p><strong>import</strong> requests</p>
<p><strong>except</strong> ImportError:</p>
<p><strong>print</strong>("To use this module you need 'requests'
module")</p>
<p>t = input('Install requests? y/n: ')</p>
<p><strong>if</strong> t == 'y':</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 410</p>
<p><span id="import_pip" class="anchor"></span>import
<strong>pip</strong></p>
<p>pip.main(['install', 'requests'])</p>
<p><strong>import</strong> requests</p>
<p>import <strong>os</strong></p>
<p>import <strong>sys</strong></p>
<p>pass</p>
<p>else<strong>:</strong></p>
<p>import <strong>os</strong></p>
<p>import <strong>sys</strong></p>
<p><strong>print</strong>('Some functionality can be unavailable.')</p>
<p>else<strong>:</strong></p>
<p><strong>import</strong> requests</p>
<p>import <strong>os</strong></p>
<p>import <strong>sys</strong></p>
<p>Section 81.3: Force install</p>
<p>Many packages for example on version 3.4 would run on 3.6 just fine,
but if there are no distributions for specific platform, they can't be
installed, but there is workaround. In .whl files (known as wheels)
naming convention decide</p>
<p>whether you can install package on specified platform. Eg.</p>
<p>scikit_learn‑0.18.1‑cp36‑cp36m‑win_amd64.whl
[package_name]-[version]-[python
interpreter]-[python-interpreter]-[Operating System].whl. If name of
wheel file is changed, so platform does match, pip tries to install</p>
<p>package even if platform or python version does not match. Removing
platform or interpreter from name will rise an error in newest version
of pip module kjhfkjdf.whl <strong>is not</strong> a valid wheel
filename..</p>
<p>Alternatively .whl file can be unpacked using an archiver as 7-zip. -
It usually contains distribution meta folder and folder with source
files. These source files can be simply unpacked to site-packages
directory unless this wheel</p>
<p>contain installation script, if so, it has to be run first.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 411</p>
<p><span id="Chapter_82__pip__PyPI_Package_Ma_1"
class="anchor"></span>Chapter 82: pip: PyPI Package Manager</p>
<p>pip is the most widely-used package manager for the Python Package
Index, installed by default with recent</p>
<p>versions of Python.</p>
<p>Section 82.1: Install Packages</p>
<p>To install the latest version of a package named SomePackage:</p>
<p>$ pip install SomePackage</p>
<p>To install a specific version of a package:</p>
<p>$ pip install SomePackage==1.0.4</p>
<p>To specify a minimum version to install for a package:</p>
<p>$ pip install SomePackage&gt;=1.0.4</p>
<p>If commands shows permission denied error on Linux/Unix then use sudo
with the commands</p>
<p>Install from requirements files</p>
<p>$ pip install -r requirements.txt</p>
<p>Each line of the requirements file indicates something to be
installed, and like arguments to pip install, Details on</p>
<p>the format of the files are here: <a
href="https://pip.pypa.io/en/stable/reference/pip_install/#requirements-file-format">Requirements
File Format</a>.</p>
<p>After install the package you can check it using freeze command:</p>
<p>$ pip freeze</p>
<p>Section 82.2: To list all packages installed using `pip`</p>
<p>To list installed packages:</p>
<p>$ pip list</p>
<p># example output</p>
<p>docutils (0.9.1)</p>
<p>Jinja2 (2.6)</p>
<p>Pygments (1.5)</p>
<p>Sphinx (1.1.2)</p>
<p>To list outdated packages, and show the latest version available:</p>
<p>$ pip list --outdated</p>
<p># example output</p>
<p>docutils (Current: 0.9.1 Latest: 0.10)</p>
<p>Sphinx (Current: 1.1.2 Latest: 1.1.3)</p>
<p>Section 82.3: Upgrade Packages</p>
<p>Running</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 412</p>
<p><span id="__pip_install___upgrade_SomePack" class="anchor"></span>$
pip install --upgrade SomePackage</p>
<p>will upgrade package SomePackage and all its dependencies. Also, pip
automatically removes older version of the</p>
<p>package before upgrade.</p>
<p>To upgrade pip itself, do</p>
<p>$ pip install --upgrade pip</p>
<p>on Unix or</p>
<p>$ python -m pip install --upgrade pip</p>
<p>on Windows machines.</p>
<p>Section 82.4: Uninstall Packages</p>
<p>To uninstall a package:</p>
<p>$ pip uninstall SomePackage</p>
<p>Section 82.5: Updating all outdated packages on Linux</p>
<p>pip doesn't current contain a flag to allow a user to update all
outdated packages in one shot. However, this can be</p>
<p>accomplished by piping commands together in a Linux environment:</p>
<p>pip list --outdated --local | grep -v '^<strong>\-</strong>e' | cut
-d = -f 1 | xargs -n1 pip install -U</p>
<p>This command takes all packages in the local virtualenv and checks if
they are outdated. From that list, it gets the package name and then
pipes that to a pip install -U command. At the end of this process, all
local packages</p>
<p>should be updated.</p>
<p>Section 82.6: Updating all outdated packages on Windows</p>
<p>pip doesn't current contain a flag to allow a user to update all
outdated packages in one shot. However, this can be</p>
<p>accomplished by piping commands together in a Windows
environment:</p>
<p><strong>for</strong> /F "delims= " %i <strong>in</strong> ('pip list
--outdated --local') do pip install -U %i</p>
<p>This command takes all packages in the local virtualenv and checks if
they are outdated. From that list, it gets the package name and then
pipes that to a pip install -U command. At the end of this process, all
local packages</p>
<p>should be updated.</p>
<p>Section 82.7: Create a requirements.txt file of all packages on</p>
<p>the system</p>
<p>pip assists in creating requirements.txt <a
href="https://pip.pypa.io/en/stable/reference/pip_freeze/">files by
providing the freeze option.</a></p>
<p>pip freeze &gt; requirements.txt</p>
<p>This will save a list of all packages and their version installed on
the system to a file named requirements.txt in the</p>
<p>current folder.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 413</p>
<p><span id="Section_82_8__Using_a_certain_Py"
class="anchor"></span>Section 82.8: Using a certain Python version with
pip</p>
<p>If you have both Python 3 and Python 2 installed, you can specify
which version of Python you would like pip to use.</p>
<p>This is useful when packages only support Python 2 or 3 or when you
wish to test with both.</p>
<p>If you want to install packages for Python 2, run either:</p>
<p>pip install [package]</p>
<p>or:</p>
<p>pip2 install [package]</p>
<p>If you would like to install packages for Python 3, do:</p>
<p>pip3 install [package]</p>
<p>You can also invoke installation of a package to a specific python
installation with:</p>
<p>\path\to\that\python.exe -m pip install some_package # on Windows OR
/usr/bin/python25 -m pip install some_package # on OS-X/Linux</p>
<p>On OS-X/Linux/Unix platforms it is important to be aware of the
distinction between the system version of python,</p>
<p>(which upgrading make render your system inoperable), and the user
version(s) of python. You <strong>may</strong>, depending on</p>
<p>which you are trying to upgrade, need to prefix these commands with
sudo and input a password.</p>
<p>Likewise on Windows some python installations, especially those that
are a part of another package, can end up installed in system
directories - those you will have to upgrade from a command window
running in Admin mode -</p>
<p>if you find that it looks like you need to do this it is a
<strong>very</strong> good idea to check which python installation you
are</p>
<p>trying to upgrade with a command such as python -c"import
sys;print(sys.path);" or py -3.5 -c"import sys;print(sys.path);" you can
also check which pip you are trying to run with pip --version</p>
<p>On Windows, if you have both python 2 and python 3 installed, and on
your path and your python 3 is greater than 3.4 then you will probably
also have the python launcher py on your system path. You can then do
tricks like:</p>
<p>py -3 -m pip install -U some_package # Install/Upgrade some_package
to the latest python 3 py -3.3 -m pip install -U some_package #
Install/Upgrade some_package to python 3.3 if present py -2 -m pip
install -U some_package # Install/Upgrade some_package to the latest
python 2 - 64 bit if present py -2.7-32 -m pip install -U some_package #
Install/Upgrade some_package to python 2.7 - 32 bit if present</p>
<p>If you are running &amp; maintaining multiple versions of python I
would strongly recommend reading up about the</p>
<p>python virtualenv or venv <a
href="https://virtualenv.pypa.io/en/stable/">virtual environments which
allow you to isolate both the version of python and which</a></p>
<p>packages are present.</p>
<p>Section 82.9: Create a requirements.txt file of packages only</p>
<p>in the current virtualenv</p>
<p>pip assists in creating requirements.txt <a
href="https://pip.pypa.io/en/stable/reference/pip_freeze/#cmdoption-l">files
by providing the freeze option.</a></p>
<p>pip freeze --local &gt; requirements.txt</p>
<p><a
href="https://pip.pypa.io/en/stable/reference/pip_freeze/#cmdoption-l">The
--local</a> parameter will only output a list of packages and versions
that are installed locally to a virtualenv.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 414</p>
<p><span id="Global_packages_will_not_be_list"
class="anchor"></span>Global packages will not be listed.</p>
<p>Section 82.10: Installing packages not yet on pip as wheels</p>
<p>Many, pure python, packages are not yet available on the Python
Package Index as wheels but still install fine.</p>
<p>However, some packages on Windows give the dreaded vcvarsall.bat not
found error.</p>
<p>The problem is that the package that you are trying to install
contains a C or C++ extension and is not currently</p>
<p>available as a pre-built wheel from the python package index, pypi,
and on windows you do not have the tool chain needed to build such
items.</p>
<p><a href="http://www.lfd.uci.edu/%7Egohlke/pythonlibs/">The simplest
answer is to go to Christoph Gohlke's</a> excellent site and locate the
<strong>appropriate</strong> version of the libraries</p>
<p>that you need. By appropriate in the package name a
<strong>-cpNN-</strong> has to match your version of python, i.e. if you
are</p>
<p>using windows 32 bit python even on win64 the name must include
<strong>-win32-</strong> and if using the 64 bit python it must</p>
<p>include <strong>-win_amd64-</strong> and then the python version must
match, i.e. for Python 34 the filename <strong>must</strong> include
<strong>-cp34-</strong>,</p>
<p>etc. this is basically the magic that pip does for you on the pypi
site.</p>
<p>Alternatively, you need to get the appropriate windows development
kit for the version of python that you are</p>
<p>using, the headers for any library that the package you are trying to
build interfaces to, possibly the python headers for the version of
python, etc.</p>
<p>Python 2.7 used Visual Studio 2008, Python 3.3 and 3.4 used Visual
Studio 2010, and Python 3.5+ uses Visual Studio 2015.</p>
<p>Install <a
href="https://www.microsoft.com/en-gb/download/details.aspx?id=44266">“Visual
C++ Compiler Package for Python 2.7</a>”, which is available from
Microsoft’s website <strong>or</strong></p>
<p>Install <a
href="https://www.microsoft.com/en-gb/download/details.aspx?id=8279">“Windows
SDK for Windows 7 and .NET Framework 4</a>” (v7.1), which is available
from Microsoft’s</p>
<p>website <strong>or</strong></p>
<p><a
href="https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx">Install
Visual Studio 2015 Community Edition</a>, (or any later version, when
these are released), <strong>ensuring you</strong></p>
<p><strong>select the options to install C &amp; C++ support</strong> no
longer the default -I am told that this can take up to <strong>8
hours</strong></p>
<p>to download and install so make <strong>sure</strong> that those
options are set on the first try.</p>
<p><strong>Then</strong> you may need to locate the header files, at the
matching revision for any libraries that your desired package</p>
<p>links to and download those to an appropriate locations.</p>
<p><strong>Finally</strong> you can let pip do your build - of course if
the package has dependencies that you don't yet have you may</p>
<p>also need to find the header files for them as well.</p>
<p><strong>Alternatives:</strong> It is also worth looking out, both on
pypi or Christop's site, for any slightly earlier version of the</p>
<p>package that you are looking for that is either pure python or
pre-built for your platform and python version and</p>
<p>possibly using those, if found, until your package does become
available. Likewise if you are using the very latest version of python
you may find that it takes the package maintainers a little time to
catch up so for projects that</p>
<p>really <strong>need</strong> a specific package you may have to use a
slightly older python for the moment. You can also check the</p>
<p>packages source site to see if there is a forked version that is
available pre-built or as pure python and searching for</p>
<p>alternative packages that provide the functionality that you require
but are available - one example that springs to</p>
<p><a href="https://pypi.python.org/pypi/Pillow/3.4.2">mind is the
Pillow</a>, actively maintained, drop in replacement for <a
href="https://pypi.python.org/pypi/PIL/1.1.6">PIL</a> currently not
updated in 6 years and not available</p>
<p>for python 3.</p>
<p><strong>Afterword</strong>, I would encourage anybody who is having
this problem to go to the bug tracker for the package and</p>
<p>add to, or raise if there isn't one already, a ticket
<strong>politely</strong> requesting that the package maintainers
provide a wheel</p>
<p>on pypi for your specific combination of platform and python, if this
is done then normally things will get better with time, some package
maintainers don't realise that they have missed a given combination that
people may be</p>
<p>using.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 415</p>
<p>Note on Installing Pre-Releases</p>
<p><a href="http://semver.org/">Pip follows the rules of Semantic
Versioning and by default prefers released packages over pre-releases.
So if a</a></p>
<p>given package has been released as V0.98 and there is also a release
candidate V1.0-rc1 the default behaviour of pip install will be to
install V0.98 - if you wish to install the release candidate, you are
advised to test in a virtual</p>
<p>environment first, you can enable do so with --pip install --pre
package-name or --pip install --pre --upgrade package-name. In many
cases pre-releases or release candidates may not have wheels built for
all platform</p>
<p>&amp; version combinations so you are more likely to encounter the
issues above.</p>
<p>Note on Installing Development Versions</p>
<p>You can also use pip to install development versions of packages from
github and other locations, since such code</p>
<p>is in flux it is very unlikely to have wheels built for it, so any
impure packages will require the presence of the build</p>
<p>tools, and they may be broken at any time so the user is
<strong>strongly</strong> encouraged to only install such packages in
a</p>
<p>virtual environment.</p>
<p>Three options exist for such installations:</p>
<p>1. Download compressed snapshot, most online version control systems
have the option to download a</p>
<p>compressed snapshot of the code. This can be downloaded manually and
then installed with pip install path/to/downloaded/file note that for
most compression formats pip will handle unpacking to a cache area,</p>
<p>etc.</p>
<p>2. Let pip handle the download &amp; install for you with: pip
install URL/of/package/repository - you may also</p>
<p>need to use the --trusted-host, --client-cert and/or --proxy flags
for this to work correctly, especially in</p>
<p>a corporate environment. e.g:</p>
<p>&gt; py -3.5-32 -m venv demo-pip</p>
<p>&gt; demo-pip\Scripts\activate.bat</p>
<p>&gt; python -m pip install -U pip</p>
<p>Collecting pip</p>
<p>Using cached pip-9.0.1-py2.py3-none-any.whl</p>
<p>Installing collected packages: pip</p>
<p>Found existing installation: pip 8.1.1</p>
<p>Uninstalling pip-8.1.1:</p>
<p>Successfully uninstalled pip-8.1.1</p>
<p>Successfully installed pip-9.0.1</p>
<p>&gt; pip install git+https://github.com/sphinx-doc/sphinx/ Collecting
git+https://github.com/sphinx-doc/sphinx/ Cloning
https://github.com/sphinx-doc/sphinx/ to
c:\users\steve-~1\appdata\local\temp\pip-04yn9hpp-build Collecting
six&gt;=1.5 (from Sphinx==1.7.dev20170506) Using cached
six-1.10.0-py2.py3-none-any.whl</p>
<p>Collecting Jinja2&gt;=2.3 (from Sphinx==1.7.dev20170506) Using cached
Jinja2-2.9.6-py2.py3-none-any.whl</p>
<p>Collecting Pygments&gt;=2.0 (from Sphinx==1.7.dev20170506) Using
cached Pygments-2.2.0-py2.py3-none-any.whl</p>
<p>Collecting docutils&gt;=0.11 (from Sphinx==1.7.dev20170506) Using
cached docutils-0.13.1-py3-none-any.whl</p>
<p>Collecting snowballstemmer&gt;=1.1 (from Sphinx==1.7.dev20170506)
Using cached snowballstemmer-1.2.1-py2.py3-none-any.whl Collecting
babel!=2.0,&gt;=1.3 (from Sphinx==1.7.dev20170506) Using cached
Babel-2.4.0-py2.py3-none-any.whl Collecting alabaster&lt;0.8,&gt;=0.7
(from Sphinx==1.7.dev20170506) Using cached
alabaster-0.7.10-py2.py3-none-any.whl Collecting imagesize (from
Sphinx==1.7.dev20170506) Using cached
imagesize-0.7.1-py2.py3-none-any.whl Collecting requests&gt;=2.0.0 (from
Sphinx==1.7.dev20170506) Using cached
requests-2.13.0-py2.py3-none-any.whl</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 416</p>
<p>Collecting typing (from Sphinx==1.7.dev20170506)</p>
<p>Using cached typing-3.6.1.tar.gz</p>
<p>Requirement already satisfied: setuptools in
f:\toolbuild\temp\demo-pip\lib\site-packages (from
Sphinx==1.7.dev20170506)</p>
<p>Collecting sphinxcontrib-websupport (from Sphinx==1.7.dev20170506)
Downloading sphinxcontrib_websupport-1.0.0-py2.py3-none-any.whl
Collecting colorama&gt;=0.3.5 (from Sphinx==1.7.dev20170506) Using
cached colorama-0.3.9-py2.py3-none-any.whl Collecting
MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.3-&gt;Sphinx==1.7.dev20170506)
Using cached MarkupSafe-1.0.tar.gz</p>
<p>Collecting pytz&gt;=0a (from
babel!=2.0,&gt;=1.3-&gt;Sphinx==1.7.dev20170506) Using cached
pytz-2017.2-py2.py3-none-any.whl</p>
<p>Collecting sqlalchemy&gt;=0.9 (from
sphinxcontrib-websupport-&gt;Sphinx==1.7.dev20170506) Downloading
SQLAlchemy-1.1.9.tar.gz (5.2MB)</p>
<p>100% |################################| 5.2MB 220kB/s Collecting
whoosh&gt;=2.0 (from
sphinxcontrib-websupport-&gt;Sphinx==1.7.dev20170506) Downloading
Whoosh-2.7.4-py2.py3-none-any.whl (468kB) 100%
|################################| 471kB 1.1MB/s Installing collected
packages: six, MarkupSafe, Jinja2, Pygments, docutils, snowballstemmer,
pytz, babel, alabaster, imagesize, requests, typing, sqlalchemy, whoosh,
sphinxcontrib-websupport, colorama, Sphinx Running setup.py install for
MarkupSafe ... done</p>
<p>Running setup.py install for typing ... done</p>
<p>Running setup.py install for sqlalchemy ... done</p>
<p>Running setup.py install for Sphinx ... done</p>
<p>Successfully installed Jinja2-2.9.6 MarkupSafe-1.0 Pygments-2.2.0
Sphinx-1.7.dev20170506 alabaster-0.7.10 babel-2.4.0 colorama-0.3.9
docutils-0.13.1 imagesize-0.7.1 pytz-2017.2 requests-2.13.0 six-1.10.0
snowballstemmer-1.2.1 sphinxcontrib-websupport-1.0.0 sqlalchemy-1.1.9
typing-3.6.1 whoosh-2.7.4</p>
<p>Note the git+ prefix to the URL.</p>
<p>3. Clone the repository using git, mercurial or other acceptable
tool, preferably a DVCS tool, and use pip</p>
<p>install path/to/cloned/repo - this will <strong>both</strong> process
any requires.text file and perform the build and setup</p>
<p>steps, you can manually change directory to your cloned repository
and run pip install -r requires.txt and</p>
<p>then python setup.py install to get the same effect. The big
advantages of this approach is that while the initial clone operation
may take longer than the snapshot download you can update to the latest
with, in the</p>
<p>case of git: git pull origin master and if the current version
contains errors you can use pip uninstall package-name then use git
checkout commands to move back through the repository history to
earlier</p>
<p>version(s) and re-try.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 417</p>
<p><span id="Chapter_83__Parsing_Command_Line_1"
class="anchor"></span>Chapter 83: Parsing Command Line</p>
<p>arguments</p>
<p>Most command line tools rely on arguments passed to the program upon
its execution. Instead of prompting for</p>
<p>input, these programs expect data or specific flags (which become
booleans) to be set. This allows both the user and other programs to run
the Python file passing it data as it starts. This section explains and
demonstrates the</p>
<p>implementation and usage of command line arguments in Python.</p>
<p>Section 83.1: Hello world in argparse</p>
<p>The following program says hello to the user. It takes one positional
argument, the name of the user, and can also</p>
<p>be told the greeting.</p>
<p><strong>import</strong> argparse</p>
<p>parser = argparse.ArgumentParser()</p>
<p>parser.add_argument('name',</p>
<p>help='name of user'</p>
<p>)</p>
<p>parser.add_argument('-g', '--greeting',</p>
<p>default='Hello',</p>
<p>help='optional alternate greeting'</p>
<p>)</p>
<p>args = parser.parse_args()</p>
<p><strong>print</strong>("{greeting}, {name}!".format(</p>
<p>greeting=args.greeting,</p>
<p>name=args.name)</p>
<p>)</p>
<p>$ python hello.py --help</p>
<p>usage: hello.py [-h] [-g GREETING] name</p>
<p>positional arguments:</p>
<p>name name of user</p>
<p>optional arguments:</p>
<p>-h, --help show this help message <strong>and</strong> exit</p>
<p>-g GREETING, --greeting GREETING</p>
<p>optional alternate greeting</p>
<p>$ python hello.py world</p>
<p>Hello, world!</p>
<p>$ python hello.py John -g Howdy</p>
<p>Howdy, John!</p>
<p>For more details please read the <a
href="https://docs.python.org/3/library/argparse.html">argparse
documentation.</a></p>
<p>Section 83.2: Using command line arguments with argv</p>
<p>Whenever a Python script is invoked from the command line, the user
may supply additional <strong>command line</strong></p>
<p><strong>arguments</strong> which will be passed on to the script.
These arguments will be available to the programmer from the</p>
<p>system variable sys.argv ("argv" is a traditional name used in most
programming languages, and it means</p>
<p>"<strong>arg</strong>ument <strong>v</strong>ector").</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 418</p>
<p><span id="By_convention__the_first_element" class="anchor"></span>By
convention, the first element in the sys.argv list is the name of the
Python script itself, while the rest of the elements are the tokens
passed by the user when invoking the script.</p>
<p># cli.py</p>
<p>import <strong>sys</strong></p>
<p><strong>print</strong>(sys.argv)</p>
<p>$ python cli.py</p>
<p>=&gt; ['cli.py']</p>
<p>$ python cli.py fizz</p>
<p>=&gt; ['cli.py', 'fizz']</p>
<p>$ python cli.py fizz buzz</p>
<p>=&gt; ['cli.py', 'fizz', 'buzz']</p>
<p>Here's another example of how to use argv. We first strip off the
initial element of sys.argv because it contains the</p>
<p>script's name. Then we combine the rest of the arguments into a
single sentence, and finally print that sentence</p>
<p>prepending the name of the currently logged-in user (so that it
emulates a chat program).</p>
<p><strong>import</strong> getpass</p>
<p>import <strong>sys</strong></p>
<p>words = sys.argv[1:]</p>
<p>sentence = " ".join(words)</p>
<p><strong>print</strong>("[%s] %s" % (getpass.getuser(), sentence))</p>
<p>The algorithm commonly used when "manually" parsing a number of
non-positional arguments is to iterate over the sys.argv list. One way
is to go over the list and pop each element of it:</p>
<p># reverse and copy sys.argv</p>
<p>argv = reversed(sys.argv)</p>
<p># extract the first element</p>
<p>arg = argv.pop()</p>
<p># stop iterating when there's no more args to pop()
<strong>while</strong> len(argv) &gt; 0:</p>
<p><strong>if</strong> arg <strong>in</strong> ('-f', '--foo'):</p>
<p><strong>print</strong>('seen foo!')</p>
<p><strong>elif</strong> arg <strong>in</strong> ('-b', '--bar'):</p>
<p><strong>print</strong>('seen bar!')</p>
<p><strong>elif</strong> arg <strong>in</strong> ('-a',
'--with-arg'):</p>
<p>arg = arg.pop()</p>
<p><strong>print</strong>('seen value: {}'.format(arg))</p>
<p># get the next value</p>
<p>arg = argv.pop()</p>
<p>Section 83.3: Setting mutually exclusive arguments with</p>
<p>argparse</p>
<p>If you want two or more arguments to be mutually exclusive. You can
use the function</p>
<p>argparse.ArgumentParser.add_mutually_exclusive_group(). In the
example below, either foo or bar can exist but not both at the same
time.</p>
<p><strong>import</strong> argparse</p>
<p>parser = argparse.ArgumentParser()</p>
<p>group = parser.add_mutually_exclusive_group()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 419</p>
<p><span id="group_add_argument___f______foo"
class="anchor"></span>group.add_argument("-f", "--foo")</p>
<p>group.add_argument("-b", "--bar")</p>
<p>args = parser.parse_args()</p>
<p><strong>print</strong> "foo = ", args.foo</p>
<p><strong>print</strong> "bar = ", args.bar</p>
<p>If you try to run the script specifying both --foo and --bar
arguments, the script will complain with the below message.</p>
<p>error: argument -b/--bar: <strong>not</strong> allowed
<strong>with</strong> argument -f/--foo</p>
<p>Section 83.4: Basic example with docopt</p>
<p><a href="http://docopt.org/">docopt</a> turns command-line argument
parsing on its head. Instead of parsing the arguments, you just
<strong>write the</strong></p>
<p><strong>usage string</strong> for your program, and docopt
<strong>parses the usage string</strong> and uses it to extract the
command line</p>
<p>arguments.</p>
<p>"""</p>
<p>Usage:</p>
<p>script_name.py [-a] [-b]</p>
<p>Options:</p>
<p>-a Print all the things.</p>
<p>-b Get more bees into the path.</p>
<p>"""</p>
<p><strong>from</strong> docopt <strong>import</strong> docopt</p>
<p><strong>if</strong> __name__ == "__main__":</p>
<p>args = docopt(__doc__)</p>
<p><strong>import</strong> pprint; pprint.pprint(args)</p>
<p>Sample runs:</p>
<p>$ python script_name.py</p>
<p>Usage:</p>
<p>script_name.py [-a] [-b]</p>
<p>$ python script_name.py something</p>
<p>{'-a': False,</p>
<p>'-b': False,</p>
<p>'': 'something'}</p>
<p>$ python script_name.py something -a</p>
<p>{'-a': True,</p>
<p>'-b': False,</p>
<p>'': 'something'}</p>
<p>$ python script_name.py -b something -a</p>
<p>{'-a': True,</p>
<p>'-b': True,</p>
<p>'': 'something'}</p>
<p>Section 83.5: Custom parser error message with argparse</p>
<p>You can create parser error messages according to your script needs.
This is through the argparse.ArgumentParser.error function. The below
example shows the script printing a usage and an error</p>
<p>message to stderr when --foo is given but not --bar.</p>
<p><strong>import</strong> argparse</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 420</p>
<p><span id="parser___argparse_ArgumentParser"
class="anchor"></span>parser = argparse.ArgumentParser()</p>
<p>parser.add_argument("-f", "--foo")</p>
<p>parser.add_argument("-b", "--bar")</p>
<p>args = parser.parse_args()</p>
<p><strong>if</strong> args.foo <strong>and</strong> args.bar
<strong>is</strong> None:</p>
<p>parser.error("--foo requires --bar. You did not specify bar.")</p>
<p><strong>print</strong> "foo =", args.foo</p>
<p><strong>print</strong> "bar =", args.bar</p>
<p>Assuming your script name is sample.py, and we run: python sample.py
--foo ds_in_fridge</p>
<p>The script will complain with the following:</p>
<p>usage: sample.py [-h] [-f FOO] [-b BAR]</p>
<p>sample.py: error: --foo requires --bar. You did <strong>not</strong>
specify bar.</p>
<p>Section 83.6: Conceptual grouping of arguments with</p>
<p>argparse.add_argument_group()</p>
<p>When you create an argparse ArgumentParser() and run your program
with '-h' you get an automated usage message explaining what arguments
you can run your software with. By default, positional arguments and</p>
<p>conditional arguments are separated into two categories, for example,
here is a small script (example.py) and the output when you run python
example.py -h.</p>
<p><strong>import</strong> argparse</p>
<p>parser = argparse.ArgumentParser(description='Simple example')
parser.add_argument('name', help='Who to greet', default='World')
parser.add_argument('--bar_this')</p>
<p>parser.add_argument('--bar_that')</p>
<p>parser.add_argument('--foo_this')</p>
<p>parser.add_argument('--foo_that')</p>
<p>args = parser.parse_args()</p>
<p>usage: example.py [-h] [--bar_this BAR_THIS] [--bar_that
BAR_THAT]</p>
<p>[--foo_this FOO_THIS] [--foo_that FOO_THAT]</p>
<p>name</p>
<p>Simple example</p>
<p>positional arguments:</p>
<p>name Who to greet</p>
<p>optional arguments:</p>
<p>-h, --help show this help message <strong>and</strong> exit</p>
<p>--bar_this BAR_THIS</p>
<p>--bar_that BAR_THAT</p>
<p>--foo_this FOO_THIS</p>
<p>--foo_that FOO_THAT</p>
<p>There are some situations where you want to separate your arguments
into further conceptual sections to assist</p>
<p>your user. For example, you may wish to have all the input options in
one group, and all the output formatting options in another. The above
example can be adjusted to separate the --foo_* args from the --bar_*
args like so.</p>
<p><strong>import</strong> argparse</p>
<p>parser = argparse.ArgumentParser(description='Simple example')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 421</p>
<p><span id="parser_add_argument__name___help"
class="anchor"></span>parser.add_argument('name', help='Who to greet',
default='World') # Create two argument groups</p>
<p>foo_group = parser.add_argument_group(title='Foo options') bar_group
= parser.add_argument_group(title='Bar options') # Add arguments to
those groups</p>
<p>foo_group.add_argument('--bar_this')</p>
<p>foo_group.add_argument('--bar_that')</p>
<p>bar_group.add_argument('--foo_this')</p>
<p>bar_group.add_argument('--foo_that')</p>
<p>args = parser.parse_args()</p>
<p>Which produces this output when python example.py -h is run:</p>
<p>usage: example.py [-h] [--bar_this BAR_THIS] [--bar_that
BAR_THAT]</p>
<p>[--foo_this FOO_THIS] [--foo_that FOO_THAT]</p>
<p>name</p>
<p>Simple example</p>
<p>positional arguments:</p>
<p>name Who to greet</p>
<p>optional arguments:</p>
<p>-h, --help show this help message <strong>and</strong> exit</p>
<p>Foo options:</p>
<p>--bar_this BAR_THIS</p>
<p>--bar_that BAR_THAT</p>
<p>Bar options:</p>
<p>--foo_this FOO_THIS</p>
<p>--foo_that FOO_THAT</p>
<p>Section 83.7: Advanced example with docopt and</p>
<p>docopt_dispatch</p>
<p>As with docopt, with [docopt_dispatch] you craft your --help in the
__doc__ variable of your entry-point module. There, you call dispatch
with the doc string as argument, so it can run the parser over it.</p>
<p>That being done, instead of handling manually the arguments (which
usually ends up in a high cyclomatic if/else structure), you leave it to
dispatch giving only how you want to handle the set of arguments.</p>
<p>This is what the dispatch.on decorator is for: you give it the
argument or sequence of arguments that should</p>
<p>trigger the function, and that function will be executed with the
matching values as parameters.</p>
<p>"""Run something in development or production mode.</p>
<p>Usage: run.py --development</p>
<p>run.py --production</p>
<p>run.py items add</p>
<p>run.py items delete</p>
<p>"""</p>
<p><strong>from</strong> docopt_dispatch <strong>import</strong>
dispatch</p>
<p>@dispatch.on('--development')</p>
<p><strong>def</strong> development(host, port, **kwargs):</p>
<p><strong>print</strong>('in *development* mode')</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 422</p>
<p>@dispatch.on('--production')</p>
<p><strong>def</strong> development(host, port, **kwargs):</p>
<p><strong>print</strong>('in *production* mode')</p>
<p>@dispatch.on('items', 'add')</p>
<p><strong>def</strong> items_add(item, **kwargs):</p>
<p><strong>print</strong>('adding item...')</p>
<p>@dispatch.on('items', 'delete')</p>
<p><strong>def</strong> items_delete(item, **kwargs):</p>
<p><strong>print</strong>('deleting item...')</p>
<p><strong>if</strong> __name__ == '__main__':</p>
<p>dispatch(__doc__)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 423</p>
<p><span id="Chapter_84__Subprocess_Library_1"
class="anchor"></span>Chapter 84: Subprocess Library</p>
<p>Parameter Details</p>
<p>args A single executable, or sequence of executable and arguments -
'ls', ['ls', '-la']</p>
<p>shell Run under a shell? The default shell to /bin/sh on POSIX.</p>
<p>cwd Working directory of the child process.</p>
<p>Section 84.1: More flexibility with Popen</p>
<p>Using subprocess.Popen give more fine-grained control over launched
processes than subprocess.call.</p>
<p>Launching a subprocess</p>
<p>process =
subprocess.Popen([r'C:<strong>\p</strong>ath<strong>\t</strong>o<strong>\a</strong>pp.exe',
'arg1', '--flag', 'arg'])</p>
<p>The signature for Popen is very similar to the call function;
however, Popen will return immediately instead of waiting for the
subprocess to complete like call does.</p>
<p>Waiting on a subprocess to complete</p>
<p>process =
subprocess.Popen([r'C:<strong>\p</strong>ath<strong>\t</strong>o<strong>\a</strong>pp.exe',
'arg1', '--flag', 'arg']) process.wait()</p>
<p>Reading output from a subprocess</p>
<p>process =
subprocess.Popen([r'C:<strong>\p</strong>ath<strong>\t</strong>o<strong>\a</strong>pp.exe'],
stdout=subprocess.PIPE, stderr=subprocess.PIPE)</p>
<p># This will block until process completes</p>
<p>stdout, stderr = process.communicate()</p>
<p><strong>print</strong> stdout</p>
<p><strong>print</strong> stderr</p>
<p>Interactive access to running subprocesses</p>
<p>You can read and write on stdin and stdout even while the subprocess
hasn't completed. This could be useful when automating functionality in
another program.</p>
<p>Writing to a subprocess</p>
<p>process =
subprocess.Popen([r'C:<strong>\p</strong>ath<strong>\t</strong>o<strong>\a</strong>pp.exe'],
stdout = subprocess.PIPE, stdin = subprocess.PIPE)</p>
<p>process.stdin.write('line of input<strong>\n</strong>') # Write
input</p>
<p>line = process.stdout.readline() # Read a line from stdout</p>
<p># Do logic on line read.</p>
<p>However, if you only need one set of input and output, rather than
dynamic interaction, you should use</p>
<p>communicate() rather than directly accessing stdin and stdout.</p>
<p>Reading a stream from a subprocess</p>
<p>In case you want to see the output of a subprocess line by line, you
can use the following snippet:</p>
<p>process = subprocess.Popen(, stdout=subprocess.PIPE)
<strong>while</strong> process.poll() <strong>is</strong> None:</p>
<p>output_line = process.stdout.readline()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 424</p>
<p><span id="in_the_case_the_subcommand_outpu" class="anchor"></span>in
the case the subcommand output do not have EOL character, the above
snippet does not work. You can then read the output character by
character as follows:</p>
<p>process = subprocess.Popen(, stdout=subprocess.PIPE)
<strong>while</strong> process.poll() <strong>is</strong> None:</p>
<p>output_line = process.stdout.read(1)</p>
<p>The 1 specified as argument to the read method tells read to read 1
character at time. You can specify to read as</p>
<p>many characters you want using a different number. Negative number or
0 tells to read to read as a single string</p>
<p><a href="https://docs.python.org/2/library/io.html">until the EOF is
encountered (see here</a>).</p>
<p>In both the above snippets, the process.poll() is None until the
subprocess finishes. This is used to exit the loop once there is no more
output to read.</p>
<p>The same procedure could be applied to the stderr of the
subprocess.</p>
<p>Section 84.2: Calling External Commands</p>
<p>The simplest use case is using the subprocess.call function. It
accepts a list as the first argument. The first item in</p>
<p>the list should be the external application you want to call. The
other items in the list are arguments that will be passed to that
application.</p>
<p>subprocess.call([r'C:<strong>\p</strong>ath<strong>\t</strong>o<strong>\a</strong>pp.exe',
'arg1', '--flag', 'arg'])</p>
<p>For shell commands, set shell=True and provide the command as a
string instead of a list.</p>
<p>subprocess.call('echo "Hello, world"', shell=True)</p>
<p>Note that the two command above return only the exit status of the
subprocess. Moreover, pay attention when</p>
<p>using shell=True since it provides security issues (see <a
href="https://docs.python.org/2/library/subprocess.html#frequently-used-arguments">here).</a></p>
<p>If you want to be able to get the standard output of the subprocess,
then substitute the subprocess.call with subprocess.check_output. For
more advanced use, refer to this.</p>
<p>Section 84.3: How to create the command list argument</p>
<p>The subprocess method that allows running commands needs the command
in form of a list (at least using shell_mode=True).</p>
<p>The rules to create the list are not always straightforward to
follow, especially with complex commands. Fortunately, there is a very
helpful tool that allows doing that: shlex. The easiest way of creating
the list to be used</p>
<p>as command is the following:</p>
<p>import <strong>shlex</strong></p>
<p>cmd_to_subprocess = shlex.split(command_used_in_the_shell)</p>
<p>A simple example:</p>
<p>import <strong>shlex</strong></p>
<p>shlex.split('ls --color -l -t -r')</p>
<p>out: ['ls', '--color', '-l', '-t', '-r']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 425</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F"><strong>VIDEO:</strong>
Complete Python</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Bootcamp:
Go from zero</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">to
hero in Python 3</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Learn
Python like a Professional! Start from the</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">basics
and go all the way to creating your own</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">applications
and games!</a></p>
<p><img src="media/index-451_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-451_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Python professionally, learning both Python 2 and Python
3!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Create games with Python, like Tic Tac Toe and Blackjack!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn advanced Python features, like the collections module and how to
work with timestamps!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Learn to use Object Oriented Programming with classes!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand complex topics, like decorators.</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Understand how to use both the Jupyter Notebook and create .py
files</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Get an understanding of how to create GUIs in the Jupyter Notebook
system!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">✔
Build a complete understanding of Python from the ground up!</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fcomplete-python-bootcamp%2F">Watch
Today →</a></p>
<p><span id="Chapter_85__setup_py_1" class="anchor"></span>Chapter 85:
setup.py</p>
<p>Parameter Usage</p>
<p>name Name of your distribution.</p>
<p>version Version string of your distribution.</p>
<p>packages List of Python packages (that is, directories containing
modules) to include. This can be specified</p>
<p>manually, but a call to setuptools.find_packages() is typically used
instead.</p>
<p>py_modules List of top-level Python modules (that is, single .py
files) to include.</p>
<p>Section 85.1: Purpose of setup.py</p>
<p>The setup script is the center of all activity in building,
distributing, and installing modules using the Distutils. Its purpose is
the correct installation of the software.</p>
<p>If all you want to do is distribute a module called foo, contained in
a file foo.py, then your setup script can be as simple as this:</p>
<p><strong>from</strong> distutils.core <strong>import</strong>
setup</p>
<p>setup(name='foo',</p>
<p>version='1.0',</p>
<p>py_modules=['foo'],</p>
<p>)</p>
<p>To create a source distribution for this module, you would create a
setup script, setup.py, containing the above code, and run this command
from a terminal:</p>
<p>python setup.py sdist</p>
<p>sdist will create an archive file (e.g., tarball on Unix, ZIP file on
Windows) containing your setup script setup.py, and</p>
<p>your module foo.py. The archive file will be named foo-1.0.tar.gz (or
.zip), and will unpack into a directory foo-1.0.</p>
<p>If an end-user wishes to install your foo module, all she has to do
is download foo-1.0.tar.gz (or .zip), unpack it,</p>
<p>and—from the foo-1.0 directory—run</p>
<p>python setup.py install</p>
<p>Section 85.2: Using source control metadata in setup.py</p>
<p><a href="https://pypi.python.org/pypi/setuptools_scm">setuptools_scm
is an officially-blessed package that can use Git or Mercurial metadata
to determine the version</a> number of your package, and find Python
packages and package data to include in it.</p>
<p><strong>from</strong> setuptools <strong>import</strong> setup,
find_packages</p>
<p>setup(</p>
<p>setup_requires=['setuptools_scm'],</p>
<p>use_scm_version=True,</p>
<p>packages=find_packages(),</p>
<p>include_package_data=True,</p>
<p>)</p>
<p>This example uses both features; to only use SCM metadata for the
version, replace the call to find_packages()</p>
<p>with your manual package list, or to only use the package finder,
remove use_scm_version=True.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 427</p>
<p><span id="Section_85_3__Adding_command_lin"
class="anchor"></span>Section 85.3: Adding command line scripts to your
python</p>
<p>package</p>
<p>Command line scripts inside python packages are common. You can
organise your package in such a way that when a user installs the
package, the script will be available on their path.</p>
<p>If you had the greetings package which had the command line script
hello_world.py.</p>
<p>greetings/</p>
<p>greetings/</p>
<p>__init__.py</p>
<p>hello_world.py</p>
<p>You could run that script by running:</p>
<p>python greetings/greetings/hello_world.py</p>
<p>However if you would like to run it like so:</p>
<p>hello_world.py</p>
<p>You can achieve this by adding scripts to your setup() in setup.py
like this:</p>
<p><strong>from</strong> setuptools <strong>import</strong> setup</p>
<p>setup(</p>
<p>name='greetings',</p>
<p>scripts=['hello_world.py']</p>
<p>)</p>
<p>When you install the greetings package now, hello_world.py will be
added to your path.</p>
<p>Another possibility would be to add an entry point:</p>
<p>entry_points={'console_scripts':
['greetings=greetings.hello_world:main']}</p>
<p>This way you just have to run it like:</p>
<p>greetings</p>
<p>Section 85.4: Adding installation options</p>
<p>As seen in previous examples, basic use of this script is:</p>
<p>python setup.py install</p>
<p>But there is even more options, like installing the package and have
the possibility to change the code and test it</p>
<p>without having to re-install it. This is done using:</p>
<p>python setup.py develop</p>
<p>If you want to perform specific actions like compiling a Sphinx
documentation or building fortran code, you can create your own option
like this:</p>
<p>cmdclasses = dict()</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 428</p>
<p><strong>class</strong> BuildSphinx(Command):</p>
<p>"""Build Sphinx documentation."""</p>
<p>description = 'Build Sphinx documentation'</p>
<p>user_options = []</p>
<p><strong>def</strong> initialize_options(self):</p>
<p>pass</p>
<p><strong>def</strong> finalize_options(self):</p>
<p>pass</p>
<p><strong>def</strong> run(self):</p>
<p><strong>import</strong> sphinx</p>
<p>sphinx.build_main(['setup.py', '-b', 'html', './doc',
'./doc/_build/html'])</p>
<p>sphinx.build_main(['setup.py', '-b', 'man', './doc',
'./doc/_build/man'])</p>
<p>cmdclasses['build_sphinx'] = BuildSphinx</p>
<p>setup(</p>
<p>...</p>
<p>cmdclass=cmdclasses,</p>
<p>)</p>
<p>initialize_options and finalize_options will be executed before and
after the run function as their names suggests it.</p>
<p>After that, you will be able to call your option:</p>
<p>python setup.py build_sphinx</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 429</p>
<p><span id="Chapter_86__Recursion_1" class="anchor"></span>Chapter 86:
Recursion</p>
<p>Section 86.1: The What, How, and When of Recursion</p>
<p>Recursion occurs when a function call causes that same function to be
called again before the original function call terminates. For example,
consider the well-known mathematical expression x! (i.e. the factorial
operation). The</p>
<p>factorial operation is defined for all nonnegative integers as
follows:</p>
<p>If the number is 0, then the answer is 1.</p>
<p>Otherwise, the answer is that number times the factorial of one less
than that number.</p>
<p>In Python, a naïve implementation of the factorial operation can be
defined as a function as follows:</p>
<p><strong>def</strong> factorial(n):</p>
<p><strong>if</strong> n == 0:</p>
<p>return <strong>1</strong></p>
<p>else<strong>:</strong></p>
<p><strong>return</strong> n * factorial(n - 1)</p>
<p>Recursion functions can be difficult to grasp sometimes, so let's
walk through this step-by-step. Consider the</p>
<p>expression factorial(3). This and all function calls create a new
<strong>environment</strong>. An environment is basically just a</p>
<p>table that maps identifiers (e.g. n, factorial,
<strong>print</strong>, etc.) to their corresponding values. At any
point in time, you</p>
<p>can access the current environment using locals(). In the first
function call, the only local variable that gets defined is n = 3.
Therefore, printing locals() would show {'n': 3}. Since n == 3, the
return value becomes n *</p>
<p>factorial(n - 1).</p>
<p>At this next step is where things might get a little confusing.
Looking at our new expression, we already know what</p>
<p>n is. However, we don't yet know what factorial(n - 1) is. First, n -
1 evaluates to 2. Then, 2 is passed to factorial as the value for n.
Since this is a new function call, a second environment is created to
store this new n.</p>
<p>Let A be the first environment and B be the second environment. A
still exists and equals {'n': 3}, however, B (which equals {'n': 2}) is
the current environment. Looking at the function body, the return value
is, again, n *</p>
<p>factorial(n - 1). Without evaluating this expression, let's
substitute it into the original return expression. By doing this, we're
mentally discarding B, so remember to substitute n accordingly (i.e.
references to B's n are</p>
<p>replaced with n - 1 which uses A's n). Now, the original return
expression becomes n * ((n - 1) * factorial((n- 1) - 1)) . Take a second
to ensure that you understand why this is so.</p>
<p>Now, let's evaluate the factorial((n - 1) - 1)) portion of that.
Since A's n == 3, we're passing 1 into factorial. Therefore, we are
creating a new environment C which equals {'n': 1}. Again, the return
value is n * factorial(n</p>
<p>- 1). So let's replace factorial((n - 1) - 1)) of the “original”
return expression similarly to how we adjusted the</p>
<p>original return expression earlier. The “original” expression is now
n * ((n - 1) * ((n - 2) * factorial((n -</p>
<p>2) - 1))).</p>
<p>Almost done. Now, we need to evaluate factorial((n - 2) - 1). This
time, we're passing in 0. Therefore, this</p>
<p>evaluates to 1. Now, let's perform our last substitution. The
“original” return expression is now n * ((n - 1) * ((n</p>
<p>- 2) * 1)) . Recalling that the original return expression is
evaluated under A, the expression becomes 3 * ((3 -1) * ((3 - 2) * 1)).
This, of course, evaluates to 6. To confirm that this is the correct
answer, recall that 3! == 3</p>
<p>* 2 * 1 == 6. Before reading any further, be sure that you fully
understand the concept of environments and how they apply to
recursion.</p>
<p>The statement <strong>if</strong> n == 0: <strong>return</strong> 1
is called a base case. This is because, it exhibits no recursion. A base
case is absolutely required. Without one, you'll run into infinite
recursion. With that said, as long as you have at least one</p>
<p>base case, you can have as many cases as you want. For example, we
could have equivalently written factorial as</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 430</p>
<p>follows:</p>
<p><strong>def</strong> factorial(n):</p>
<p><strong>if</strong> n == 0:</p>
<p>return <strong>1</strong></p>
<p><strong>elif</strong> n == 1:</p>
<p>return <strong>1</strong></p>
<p>else<strong>:</strong></p>
<p><strong>return</strong> n * factorial(n - 1)</p>
<p>You may also have multiple recursion cases, but we won't get into
that since it's relatively uncommon and is often difficult to mentally
process.</p>
<p>You can also have “parallel” recursive function calls. For example,
consider the <a
href="https://en.wikipedia.org/wiki/Fibonacci_number">Fibonacci
sequence</a> which is defined as follows:</p>
<p>If the number is 0, then the answer is 0.</p>
<p>If the number is 1, then the answer is 1.</p>
<p>Otherwise, the answer is the sum of the previous two Fibonacci
numbers.</p>
<p>We can define this is as follows:</p>
<p><strong>def</strong> fib(n):</p>
<p><strong>if</strong> n == 0 <strong>or</strong> n == 1:</p>
<p>return <strong>n</strong></p>
<p>else<strong>:</strong></p>
<p><strong>return</strong> fib(n - 2) + fib(n - 1)</p>
<p>I won't walk through this function as thoroughly as I did with
factorial(3), but the final return value of fib(5) is</p>
<p>equivalent to the following (syntactically invalid) expression:</p>
<p>(</p>
<p>fib((n - 2) - 2)</p>
<p>+</p>
<p>(</p>
<p>fib(((n - 2) - 1) - 2)</p>
<p>+</p>
<p>fib(((n - 2) - 1) - 1)</p>
<p>)</p>
<p>)</p>
<p>+</p>
<p>(</p>
<p>(</p>
<p>fib(((n - 1) - 2) - 2)</p>
<p>+</p>
<p>fib(((n - 1) - 2) - 1)</p>
<p>)</p>
<p>+</p>
<p>(</p>
<p>fib(((n - 1) - 1) - 2)</p>
<p>+</p>
<p>(</p>
<p>fib((((n - 1) - 1) - 1) - 2)</p>
<p>+</p>
<p>fib((((n - 1) - 1) - 1) - 1)</p>
<p>)</p>
<p>)</p>
<p>)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 431</p>
<p>This becomes (1 + (0 + 1)) + ((0 + 1) + (1 + (0 + 1))) which of
course evaluates to 5.</p>
<p>Now, let's cover a few more vocabulary terms:</p>
<p>A <a href="https://en.wikipedia.org/wiki/Tail_call"><strong>tail
call</strong></a> is simply a recursive function call which is the last
operation to be performed before returning a</p>
<p>value. To be clear, <strong>return</strong> foo(n - 1) is a tail
call, but <strong>return</strong> foo(n - 1) + 1 is not (since the
addition is the last operation).</p>
<p><strong>Tail call optimization</strong> (TCO) is a way to
automatically reduce recursion in recursive functions.</p>
<p><strong>Tail call elimination</strong> (TCE) is the reduction of a
tail call to an expression that can be evaluated without</p>
<p>recursion. TCE is a type of TCO.</p>
<p>Tail call optimization is helpful for a number of reasons:</p>
<p>The interpreter can minimize the amount of memory occupied by
environments. Since no computer has</p>
<p><a href="https://en.wikipedia.org/wiki/Stack_overflow">unlimited
memory, excessive recursive function calls would lead to a <strong>stack
overflow</strong></a>.</p>
<p><a href="https://en.wikipedia.org/wiki/Call_stack">The interpreter
can reduce the number of <strong>stack frame</strong> switches.</a></p>
<p>Python has no form of TCO implemented for <a
href="http://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html">a
number of a reasons. Therefore, other techniques are required to</a></p>
<p>skirt this limitation. The method of choice depends on the use case.
With some intuition, the definitions of factorial and fib can relatively
easily be converted to iterative code as follows:</p>
<p><strong>def</strong> factorial(n):</p>
<p>product = 1</p>
<p><strong>while</strong> n &gt; 1:</p>
<p>product *= n</p>
<p>n -= 1</p>
<p><strong>return</strong> product</p>
<p><strong>def</strong> fib(n):</p>
<p>a, b = 0, 1</p>
<p><strong>while</strong> n &gt; 0:</p>
<p>a, b = b, a + b</p>
<p>n -= 1</p>
<p>return <strong>a</strong></p>
<p>This is usually the most efficient way to manually eliminate
recursion, but it can become rather difficult for more complex
functions.</p>
<p>Another useful tool is Python's lru_cache decorator which can be used
to reduce the number of redundant calculations.</p>
<p>You now have an idea as to how to avoid recursion in Python, but when
should you use recursion? The answer is</p>
<p>“not often”. All recursive functions can be implemented iteratively.
It's simply a matter of figuring out how to do so. However, there are
rare cases in which recursion is okay. Recursion is common in Python
when the expected inputs</p>
<p>wouldn't cause a significant number of a recursive function
calls.</p>
<p>If recursion is a topic that interests you, I implore you to study
functional languages such as Scheme or Haskell. In</p>
<p>such languages, recursion is much more useful.</p>
<p>Please note that the above example for the Fibonacci sequence,
although good at showing how to apply the</p>
<p>definition in python and later use of the lru cache, has an
inefficient running time since it makes 2 recursive calls for each non
base case. The number of calls to the function grows exponentially to
n.</p>
<p>Rather non-intuitively a more efficient implementation would use
linear recursion:</p>
<p><strong>def</strong> fib(n):</p>
<p><strong>if</strong> n &lt;= 1:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 432</p>
<p><span id="return__n_0" class="anchor"></span>return
<strong>(n,0)</strong></p>
<p>else<strong>:</strong></p>
<p>(a, b) = fib(n - 1)</p>
<p><strong>return</strong> (a + b, a)</p>
<p>But that one has the issue of returning a pair of numbers. This
emphasizes that some functions really do not gain</p>
<p>much from recursion.</p>
<p>Section 86.2: Tree exploration with recursion</p>
<p>Say we have the following tree:</p>
<p>root</p>
<p>- A</p>
<p>- AA</p>
<p>- AB</p>
<p>- B</p>
<p>- BA</p>
<p>- BB</p>
<p>- BBA</p>
<p>Now, if we wish to list all the names of the elements, we could do
this with a simple for-loop. We assume there is a</p>
<p>function get_name() to return a string of the name of a node, a
function get_children() to return a list of all the sub-nodes of a given
node in the tree, and a function get_root() to get the root node.</p>
<p>root = get_root(tree)</p>
<p><strong>for</strong> node <strong>in</strong> get_children(root):</p>
<p><strong>print</strong>(get_name(node))</p>
<p><strong>for</strong> child <strong>in</strong>
get_children(node):</p>
<p><strong>print</strong>(get_name(child))</p>
<p><strong>for</strong> grand_child <strong>in</strong>
get_children(child):</p>
<p><strong>print</strong>(get_name(grand_child))</p>
<p># prints: A, AA, AB, B, BA, BB, BBA</p>
<p>This works well and fast, but what if the sub-nodes, got sub-nodes of
its own? And those sub-nodes might have more sub-nodes... What if you
don't know beforehand how many there will be? A method to solve this is
the use of</p>
<p>recursion.</p>
<p><strong>def</strong> list_tree_names(node):</p>
<p><strong>for</strong> child <strong>in</strong>
get_children(node):</p>
<p><strong>print</strong>(get_name(child))</p>
<p>list_tree_names(node=child)</p>
<p>list_tree_names(node=get_root(tree))</p>
<p># prints: A, AA, AB, B, BA, BB, BBA</p>
<p>Perhaps you wish to not print, but return a flat list of all node
names. This can be done by passing a rolling list as a</p>
<p>parameter.</p>
<p><strong>def</strong> list_tree_names(node, lst=[]):</p>
<p><strong>for</strong> child <strong>in</strong>
get_children(node):</p>
<p>lst.append(get_name(child))</p>
<p>list_tree_names(node=child, lst=lst)</p>
<p>return <strong>lst</strong></p>
<p>list_tree_names(node=get_root(tree))</p>
<p># returns ['A', 'AA', 'AB', 'B', 'BA', 'BB', 'BBA']</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 433</p>
<p><span id="Section_86_3__Sum_of_numbers_fro"
class="anchor"></span>Section 86.3: Sum of numbers from 1 to n</p>
<p>If I wanted to find out the sum of numbers from 1 to n where n is a
natural number, I can do 1 + 2 + 3 + 4 + ...</p>
<p>+ (several hours later) + n . Alternatively, I could write a
<strong>for</strong> loop:</p>
<p>n = 0</p>
<p><strong>for</strong> i <strong>in</strong> range (1, n+1):</p>
<p>n += i</p>
<p>Or I could use a technique known as recursion:</p>
<p><strong>def</strong> recursion(n):</p>
<p><strong>if</strong> n == 1:</p>
<p>return <strong>1</strong></p>
<p><strong>return</strong> n + recursion(n - 1)</p>
<p>Recursion has advantages over the above two methods. Recursion takes
less time than writing out 1 + 2 + 3 for a</p>
<p>sum from 1 to 3. For recursion(4), recursion can be used to work
backwards:</p>
<p>Function calls: ( 4 -&gt; 4 + 3 -&gt; 4 + 3 + 2 -&gt; 4 + 3 + 2 + 1
-&gt; 10 )</p>
<p>Whereas the <strong>for</strong> loop is working strictly forwards: (
1 -&gt; 1 + 2 -&gt; 1 + 2 + 3 -&gt; 1 + 2 + 3 + 4 -&gt; 10 ). Sometimes
the</p>
<p>recursive solution is simpler than the iterative solution. This is
evident when implementing a reversal of a linked list.</p>
<p>Section 86.4: Increasing the Maximum Recursion Depth</p>
<p>There is a limit to the depth of possible recursion, which depends on
the Python implementation. When the limit is</p>
<p>reached, a RuntimeError exception is raised:</p>
<p>RuntimeError: Maximum Recursion Depth Exceeded</p>
<p>Here's a sample of a program that would cause this error:</p>
<p><strong>def</strong> cursing(depth):</p>
<p>try<strong>:</strong></p>
<p>cursing(depth + 1) # actually, re-cursing</p>
<p><strong>except</strong> RuntimeError <strong>as</strong> RE:</p>
<p><strong>print</strong>('I recursed {} times!'.format(depth))</p>
<p>cursing(0)</p>
<p># Out: I recursed 1083 times!</p>
<p>It is possible to change the recursion depth limit by using</p>
<p>sys.setrecursionlimit(limit)</p>
<p>You can check what the current parameters of the limit are by
running:</p>
<p>sys.getrecursionlimit()</p>
<p>Running the same method above with our new limit we get</p>
<p>sys.setrecursionlimit(2000)</p>
<p>cursing(0)</p>
<p># Out: I recursed 1997 times!</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 434</p>
<p><span id="From_Python_3_5__the_exception_i_1"
class="anchor"></span>From Python 3.5, the exception is a
RecursionError, which is derived from RuntimeError.</p>
<p>Section 86.5: Tail Recursion - Bad Practice</p>
<p>When the only thing returned from a function is a recursive call, it
is referred to as tail recursion.</p>
<p>Here's an example countdown written using tail recursion:</p>
<p><strong>def</strong> countdown(n):</p>
<p><strong>if</strong> n == 0:</p>
<p><strong>print</strong> "Blastoff!"</p>
<p>else<strong>:</strong></p>
<p>print <strong>n</strong></p>
<p>countdown(n-1)</p>
<p>Any computation that can be made using iteration can also be made
using recursion. Here is a version of find_max written using tail
recursion:</p>
<p><strong>def</strong> find_max(seq, max_so_far):</p>
<p>if not <strong>seq:</strong></p>
<p><strong>return</strong> max_so_far</p>
<p><strong>if</strong> max_so_far &lt; seq[0]:</p>
<p><strong>return</strong> find_max(seq[1:], seq[0])</p>
<p>else<strong>:</strong></p>
<p><strong>return</strong> find_max(seq[1:], max_so_far)</p>
<p>Tail recursion is considered a bad practice in Python, since the
Python compiler does not handle optimization for</p>
<p>tail recursive calls. The recursive solution in cases like this use
more system resources than the equivalent iterative solution.</p>
<p>Section 86.6: Tail Recursion Optimization Through Stack</p>
<p>Introspection</p>
<p>By default Python's recursion stack cannot exceed 1000 frames. This
can be changed by setting the sys.setrecursionlimit(15000) which is
faster however, this method consumes more memory. Instead, we can</p>
<p>also solve the Tail Recursion problem using stack introspection.</p>
<p>#!/usr/bin/env python2.4</p>
<p># This program shows off a python decorator which implements tail
call optimization. It # does this by throwing an exception if it is its
own grandparent, and catching such # exceptions to recall the stack.</p>
<p>import <strong>sys</strong></p>
<p><strong>class</strong> TailRecurseException:</p>
<p><strong>def</strong> __init__(self, args, kwargs):</p>
<p>self.args = args</p>
<p>self.kwargs = kwargs</p>
<p><strong>def</strong> tail_call_optimized(g):</p>
<p>"""</p>
<p>This function decorates a function with tail call</p>
<p>optimization. It does this by throwing an exception if it is its own
grandparent, and catching such</p>
<p>exceptions to fake the tail call optimization.</p>
<p>This function fails if the decorated</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 435</p>
<p>function recurses in a non-tail context.</p>
<p>"""</p>
<p><strong>def</strong> func(*args, **kwargs):</p>
<p>f = sys._getframe()</p>
<p><strong>if</strong> f.f_back <strong>and</strong> f.f_back.f_back
<strong>and</strong> f.f_back.f_back.f_code == f.f_code:</p>
<p><strong>raise</strong> TailRecurseException(args, kwargs)</p>
<p>else<strong>:</strong></p>
<p>while <strong>1:</strong></p>
<p>try<strong>:</strong></p>
<p><strong>return</strong> g(*args, **kwargs)</p>
<p><strong>except</strong> TailRecurseException, e:</p>
<p>args = e.args</p>
<p>kwargs = e.kwargs</p>
<p>func.__doc__ = g.__doc__</p>
<p>return <strong>func</strong></p>
<p>To optimize the recursive functions, we can use the
@tail_call_optimized decorator to call our function. Here's a few of the
common recursion examples using the decorator described above:</p>
<p>Factorial Example:</p>
<p>@tail_call_optimized</p>
<p><strong>def</strong> factorial(n, acc=1):</p>
<p>"calculate a factorial"</p>
<p><strong>if</strong> n == 0:</p>
<p>return <strong>acc</strong></p>
<p><strong>return</strong> factorial(n-1, n*acc)</p>
<p><strong>print</strong> factorial(10000)</p>
<p># prints a big, big number,</p>
<p># but doesn't hit the recursion limit.</p>
<p>Fibonacci Example:</p>
<p>@tail_call_optimized</p>
<p><strong>def</strong> fib(i, current = 0, next = 1):</p>
<p><strong>if</strong> i == 0:</p>
<p><strong>return</strong> current</p>
<p>else<strong>:</strong></p>
<p><strong>return</strong> fib(i - 1, next, current + next)</p>
<p><strong>print</strong> fib(10000)</p>
<p># also prints a big number,</p>
<p># but doesn't hit the recursion limit.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 436</p>
<p><span id="Chapter_87__Type_Hints_1" class="anchor"></span>Chapter 87:
Type Hints</p>
<p>Section 87.1: Adding types to a function</p>
<p>Let's take an example of a function which receives two arguments and
returns a value indicating their sum:</p>
<p><strong>def</strong> two_sum(a, b):</p>
<p>return <strong>a + b</strong></p>
<p>By looking at this code, one can not safely and without doubt
indicate the type of the arguments for function</p>
<p>two_sum . It works both when supplied with int values:</p>
<p><strong>print</strong>(two_sum(2, 1)) # result: 3</p>
<p>and with strings:</p>
<p><strong>print</strong>(two_sum("a", "b")) # result: "ab"</p>
<p>and with other values, such as lists, tuples et cetera.</p>
<p>Due to this dynamic nature of python types, where many are applicable
for a given operation, any type checker would not be able to reasonably
assert whether a call for this function should be allowed or not.</p>
<p>To assist our type checker we can now provide type hints for it in
the Function definition indicating the type that we allow.</p>
<p>To indicate that we only want to allow int types we can change our
function definition to look like:</p>
<p><strong>def</strong> two_sum(a: int, b: int):</p>
<p>return <strong>a + b</strong></p>
<p>Annotations follow the argument name and are separated by a :
character.</p>
<p>Similarly, to indicate only str types are allowed, we'd change our
function to specify it:</p>
<p><strong>def</strong> two_sum(a: str, b: str):</p>
<p>return <strong>a + b</strong></p>
<p>Apart from specifying the type of the arguments, one could also
indicate the return value of a function call. This is done by adding the
-&gt; character followed by the type after the closing parenthesis in
the argument list but before</p>
<p>the : at the end of the function declaration:</p>
<p><strong>def</strong> two_sum(a: int, b: int) -&gt; int:</p>
<p>return <strong>a + b</strong></p>
<p>Now we've indicated that the return value when calling two_sum should
be of type int. Similarly we can define</p>
<p>appropriate values for str, float, list, set and others.</p>
<p>Although type hints are mostly used by type checkers and IDEs,
sometimes you may need to retrieve them. This can be done using the
__annotations__ special attribute:</p>
<p>two_sum.__annotations__</p>
<p># {'a': &lt;class 'int'&gt;, 'b': &lt;class 'int'&gt;, 'return':
&lt;class 'int'&gt;}</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 437</p>
<p><span id="Section_87_2__NamedTuple" class="anchor"></span>Section
87.2: NamedTuple</p>
<p>Creating a namedtuple with type hints is done using the function
NamedTuple from the typing module:</p>
<p><strong>import</strong> typing</p>
<p>Point = typing.NamedTuple('Point', [('x', int), ('y', int)])</p>
<p>Note that the name of the resulting type is the first argument to the
function, but it should be assigned to a variable with the same name to
ease the work of type checkers.</p>
<p>Section 87.3: Generic Types</p>
<p><a
href="https://docs.python.org/3/library/typing.html#typing.TypeVar">The
typing.TypeVar is a generic type factory. It's primary goal is to serve
as a parameter/placeholder for generic</a> function/class/method
annotations:</p>
<p><strong>import</strong> typing</p>
<p>T = typing.TypeVar("T")</p>
<p><strong>def</strong> get_first_element(l: typing.Sequence[T]) -&gt;
T:</p>
<p>"""Gets the first element of a sequence."""</p>
<p>return <strong>l[0]</strong></p>
<p>Section 87.4: Variables and Attributes</p>
<p>Variables are annotated using comments:</p>
<p>x = 3 # type: int</p>
<p>x = negate(x)</p>
<p>x = 'a type-checker might catch this error'</p>
<p>Python 3.x Version ≥ 3.6</p>
<p><a href="https://www.python.org/dev/peps/pep-0526/">Starting from
Python 3.6, there is also new syntax for variable annotations. The code
above might use the form</a></p>
<p>x: int = 3</p>
<p>Unlike with comments, it is also possible to just add a type hint to
a variable that was not previously declared,</p>
<p>without setting a value to it:</p>
<p>y: int</p>
<p>Additionally if these are used in the module or the class level, the
type hints can be retrieved using typing.get_type_hints(class_or_module)
:</p>
<p>class <strong>Foo:</strong></p>
<p>x: int</p>
<p>y: str = 'abc'</p>
<p><strong>print</strong>(typing.get_type_hints(Foo))</p>
<p># ChainMap({'x': &lt;class 'int'&gt;, 'y': &lt;class 'str'&gt;},
{})</p>
<p>Alternatively, they can be accessed by using the __annotations__
special variable or attribute:</p>
<p>x: int</p>
<p><strong>print</strong>(__annotations__)</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 438</p>
<p><span id="____x____class__int" class="anchor"></span># {'x':
&lt;class 'int'&gt;}</p>
<p>class <strong>C:</strong></p>
<p>s: str</p>
<p><strong>print</strong>(C.__annotations__)</p>
<p># {'s': &lt;class 'str'&gt;}</p>
<p>Section 87.5: Class Members and Methods</p>
<p>class <strong>A:</strong></p>
<p>x = None # type: float</p>
<p><strong>def</strong> __init__(self, x: float) -&gt; None:</p>
<p>"""</p>
<p>self should not be annotated</p>
<p>init should be annotated to return None</p>
<p>"""</p>
<p>self.x = x</p>
<p>@classmethod</p>
<p><strong>def</strong> from_int(cls, x: int) -&gt; 'A':</p>
<p>"""</p>
<p>cls should not be annotated</p>
<p>Use forward reference to refer to current class with string literal
'A'</p>
<p>"""</p>
<p><strong>return</strong> cls(float(x))</p>
<p>Forward reference of the current class is needed since annotations
are evaluated when the function is defined. Forward references can also
be used when referring to a class that would cause a circular import if
imported.</p>
<p>Section 87.6: Type hints for keyword arguments</p>
<p><strong>def</strong> hello_world(greeting: str = 'Hello'):</p>
<p><strong>print</strong>(greeting + ' world!')</p>
<p>Note the spaces around the equal sign as opposed to how keyword
arguments are usually styled.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 439</p>
<p><span id="Chapter_88__Exceptions_1" class="anchor"></span>Chapter 88:
Exceptions</p>
<p>Errors detected during execution are called exceptions and are not
unconditionally fatal. Most exceptions are not</p>
<p>handled by programs; it is possible to write programs that handle
selected exceptions. There are specific features in Python to deal with
exceptions and exception logic. Furthermore, exceptions have a rich type
hierarchy, all</p>
<p>inheriting from the BaseException type.</p>
<p>Section 88.1: Catching Exceptions</p>
<p>Use <strong>try</strong>...<strong>except</strong>: to catch
exceptions. You should specify as precise an exception as you can:</p>
<p>try<strong>:</strong></p>
<p>x = 5 / 0</p>
<p><strong>except</strong> ZeroDivisionError <strong>as</strong> e:</p>
<p># `e` is the exception object</p>
<p><strong>print</strong>("Got a divide by zero! The exception was:", e)
# handle exceptional case</p>
<p>x = 0</p>
<p>finally<strong>:</strong></p>
<p><strong>print</strong> "The END"</p>
<p># it runs no matter what execute.</p>
<p>The exception class that is specified - in this case,
ZeroDivisionError - catches any exception that is of that class or</p>
<p>of any subclass of that exception.</p>
<p>For example, ZeroDivisionError is a subclass of ArithmeticError:</p>
<p>&gt;&gt;&gt; ZeroDivisionError.__bases__</p>
<p>(&lt;<strong>class</strong> 'ArithmeticError'&gt;,)</p>
<p>And so, the following will still catch the ZeroDivisionError:</p>
<p>try<strong>:</strong></p>
<p>5 / 0</p>
<p><strong>except</strong> ArithmeticError:</p>
<p><strong>print</strong>("Got arithmetic error")</p>
<p>Section 88.2: Do not catch everything!</p>
<p>While it's often tempting to catch every Exception:</p>
<p>try<strong>:</strong></p>
<p>very_difficult_function()</p>
<p><strong>except</strong> Exception:</p>
<p># log / try to reconnect / exit gratiously</p>
<p>finally<strong>:</strong></p>
<p><strong>print</strong> "The END"</p>
<p># it runs no matter what execute.</p>
<p>Or even everything (that includes BaseException and all its children
including Exception):</p>
<p>try<strong>:</strong></p>
<p>even_more_difficult_function()</p>
<p>except<strong>:</strong></p>
<p><strong>pass</strong> # do whatever needed</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 440</p>
<p><span id="In_most_cases_it_s_bad_practice" class="anchor"></span>In
most cases it's bad practice. It might catch more than intended, such as
SystemExit, KeyboardInterrupt and MemoryError - each of which should
generally be handled differently than usual system or logic errors. It
also</p>
<p>means there's no clear understanding for what the internal code may
do wrong and how to recover properly from</p>
<p>that condition. If you're catching every error, you won't know what
error occurred or how to fix it.</p>
<p>This is more commonly referred to as 'bug masking' and should be
avoided. Let your program crash instead of silently failing or even
worse, failing at deeper level of execution. (Imagine it's a
transactional system)</p>
<p>Usually these constructs are used at the very outer level of the
program, and will log the details of the error so that the bug can be
fixed, or the error can be handled more specifically.</p>
<p>Section 88.3: Re-raising exceptions</p>
<p>Sometimes you want to catch an exception just to inspect it, e.g. for
logging purposes. After the inspection, you want the exception to
continue propagating as it did before.</p>
<p>In this case, simply use the <strong>raise</strong> statement with no
parameters.</p>
<p>try<strong>:</strong></p>
<p>5 / 0</p>
<p><strong>except</strong> ZeroDivisionError:</p>
<p><strong>print</strong>("Got an error")</p>
<p>raise</p>
<p>Keep in mind, though, that someone further up in the caller stack can
still catch the exception and handle it</p>
<p>somehow. The done output could be a nuisance in this case because it
will happen in any case (caught or not</p>
<p>caught). So it might be a better idea to raise a different exception,
containing your comment about the situation as well as the original
exception:</p>
<p>try<strong>:</strong></p>
<p>5 / 0</p>
<p><strong>except</strong> ZeroDivisionError <strong>as</strong> e:</p>
<p><strong>raise</strong> ZeroDivisionError("Got an error", e)</p>
<p>But this has the drawback of reducing the exception trace to exactly
this <strong>raise</strong> while the <strong>raise</strong> without
argument</p>
<p>retains the original exception trace.</p>
<p>In Python 3 you can keep the original stack by using the
<strong>raise</strong>-<strong>from</strong> syntax:</p>
<p><strong>raise</strong> ZeroDivisionError("Got an error")
<strong>from</strong> e</p>
<p>Section 88.4: Catching multiple exceptions</p>
<p>There are a few ways to <a
href="https://docs.python.org/3/tutorial/errors.html#handling-exceptions">catch
multiple exceptions.</a></p>
<p>The first is by creating a tuple of the exception types you wish to
catch and handle in the same manner. This</p>
<p>example will cause the code to ignore KeyError and AttributeError
exceptions.</p>
<p>try<strong>:</strong></p>
<p>d = {}</p>
<p>a = d[1]</p>
<p>b = d.non_existing_field</p>
<p><strong>except</strong> (KeyError, AttributeError)
<strong>as</strong> e:</p>
<p><strong>print</strong>("A KeyError or an AttributeError exception has
been caught.")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 441</p>
<p><span id="If_you_wish_to_handle_different" class="anchor"></span>If
you wish to handle different exceptions in different ways, you can
provide a separate exception block for each type. In this example, we
still catch the KeyError and AttributeError, but handle the exceptions
in different</p>
<p>manners.</p>
<p>try<strong>:</strong></p>
<p>d = {}</p>
<p>a = d[1]</p>
<p>b = d.non_existing_field</p>
<p><strong>except</strong> KeyError <strong>as</strong> e:</p>
<p><strong>print</strong>("A KeyError has occurred. Exception message:",
e)</p>
<p><strong>except</strong> AttributeError <strong>as</strong> e:</p>
<p><strong>print</strong>("An AttributeError has occurred. Exception
message:", e)</p>
<p>Section 88.5: Exception Hierarchy</p>
<p>Exception handling occurs based on an exception hierarchy, determined
by the inheritance structure of the</p>
<p>exception classes.</p>
<p>For example, IOError and OSError are both subclasses of
EnvironmentError. Code that catches an IOError will not</p>
<p>catch an OSError. However, code that catches an EnvironmentError will
catch both IOErrors and OSErrors.</p>
<p>The hierarchy of built-in exceptions:</p>
<p>Python 2.x Version ≥ 2.3</p>
<p>BaseException</p>
<p>+-- SystemExit</p>
<p>+-- KeyboardInterrupt</p>
<p>+-- GeneratorExit</p>
<p>+-- Exception</p>
<p>+-- StopIteration</p>
<p>+-- StandardError</p>
<p>| +-- BufferError</p>
<p>| +-- ArithmeticError</p>
<p>| | +-- FloatingPointError</p>
<p>| | +-- OverflowError</p>
<p>| | +-- ZeroDivisionError</p>
<p>| +-- AssertionError</p>
<p>| +-- AttributeError</p>
<p>| +-- EnvironmentError</p>
<p>| | +-- IOError</p>
<p>| | +-- OSError</p>
<p>| | +-- WindowsError (Windows)</p>
<p>| | +-- VMSError (VMS)</p>
<p>| +-- EOFError</p>
<p>| +-- ImportError</p>
<p>| +-- LookupError</p>
<p>| | +-- IndexError</p>
<p>| | +-- KeyError</p>
<p>| +-- MemoryError</p>
<p>| +-- NameError</p>
<p>| | +-- UnboundLocalError</p>
<p>| +-- ReferenceError</p>
<p>| +-- RuntimeError</p>
<p>| | +-- NotImplementedError</p>
<p>| +-- SyntaxError</p>
<p>| | +-- IndentationError</p>
<p>| | +-- TabError</p>
<p>| +-- SystemError</p>
<p>| +-- TypeError</p>
<p>| +-- ValueError</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 442</p>
<p>| +-- UnicodeError</p>
<p>| +-- UnicodeDecodeError</p>
<p>| +-- UnicodeEncodeError</p>
<p>| +-- UnicodeTranslateError</p>
<p>+-- Warning</p>
<p>+-- DeprecationWarning</p>
<p>+-- PendingDeprecationWarning</p>
<p>+-- RuntimeWarning</p>
<p>+-- SyntaxWarning</p>
<p>+-- UserWarning</p>
<p>+-- FutureWarning</p>
<p>+-- ImportWarning</p>
<p>+-- UnicodeWarning</p>
<p>+-- BytesWarning</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>BaseException</p>
<p>+-- SystemExit</p>
<p>+-- KeyboardInterrupt</p>
<p>+-- GeneratorExit</p>
<p>+-- Exception</p>
<p>+-- StopIteration</p>
<p>+-- StopAsyncIteration</p>
<p>+-- ArithmeticError</p>
<p>| +-- FloatingPointError</p>
<p>| +-- OverflowError</p>
<p>| +-- ZeroDivisionError</p>
<p>+-- AssertionError</p>
<p>+-- AttributeError</p>
<p>+-- BufferError</p>
<p>+-- EOFError</p>
<p>+-- ImportError</p>
<p>+-- LookupError</p>
<p>| +-- IndexError</p>
<p>| +-- KeyError</p>
<p>+-- MemoryError</p>
<p>+-- NameError</p>
<p>| +-- UnboundLocalError</p>
<p>+-- OSError</p>
<p>| +-- BlockingIOError</p>
<p>| +-- ChildProcessError</p>
<p>| +-- ConnectionError</p>
<p>| | +-- BrokenPipeError</p>
<p>| | +-- ConnectionAbortedError</p>
<p>| | +-- ConnectionRefusedError</p>
<p>| | +-- ConnectionResetError</p>
<p>| +-- FileExistsError</p>
<p>| +-- FileNotFoundError</p>
<p>| +-- InterruptedError</p>
<p>| +-- IsADirectoryError</p>
<p>| +-- NotADirectoryError</p>
<p>| +-- PermissionError</p>
<p>| +-- ProcessLookupError</p>
<p>| +-- TimeoutError</p>
<p>+-- ReferenceError</p>
<p>+-- RuntimeError</p>
<p>| +-- NotImplementedError</p>
<p>| +-- RecursionError</p>
<p>+-- SyntaxError</p>
<p>| +-- IndentationError</p>
<p>| +-- TabError</p>
<p>+-- SystemError</p>
<p>+-- TypeError</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 443</p>
<p><span id="____ValueError" class="anchor"></span>+-- ValueError</p>
<p>| +-- UnicodeError</p>
<p>| +-- UnicodeDecodeError</p>
<p>| +-- UnicodeEncodeError</p>
<p>| +-- UnicodeTranslateError</p>
<p>+-- Warning</p>
<p>+-- DeprecationWarning</p>
<p>+-- PendingDeprecationWarning</p>
<p>+-- RuntimeWarning</p>
<p>+-- SyntaxWarning</p>
<p>+-- UserWarning</p>
<p>+-- FutureWarning</p>
<p>+-- ImportWarning</p>
<p>+-- UnicodeWarning</p>
<p>+-- BytesWarning</p>
<p>+-- ResourceWarning</p>
<p>Section 88.6: Else</p>
<p>Code in an else block will only be run if no exceptions were raised
by the code in the <strong>try</strong> block. This is useful if you</p>
<p>have some code you don’t want to run if an exception is thrown, but
you don’t want exceptions thrown by that</p>
<p>code to be caught.</p>
<p>For example:</p>
<p>try<strong>:</strong></p>
<p>data = {1: 'one', 2: 'two'}</p>
<p><strong>print</strong>(data[1])</p>
<p><strong>except</strong> KeyError <strong>as</strong> e:</p>
<p><strong>print</strong>('key not found')</p>
<p>else<strong>:</strong></p>
<p><strong>raise</strong> ValueError()</p>
<p># Output: one</p>
<p># Output: ValueError</p>
<p>Note that this kind of <strong>else</strong>: cannot be combined with
an if starting the else-clause to an <strong>elif</strong>. If you have
a following if it needs to stay indented below that
<strong>else</strong>::</p>
<p>try<strong>:</strong></p>
<p>...</p>
<p>except <strong>...:</strong></p>
<p>...</p>
<p>else<strong>:</strong></p>
<p><strong>if</strong> ...:</p>
<p>...</p>
<p><strong>elif</strong> ...:</p>
<p>...</p>
<p>else<strong>:</strong></p>
<p>...</p>
<p>Section 88.7: Raising Exceptions</p>
<p>If your code encounters a condition it doesn't know how to handle,
such as an incorrect parameter, it should raise the appropriate
exception.</p>
<p><strong>def</strong> even_the_odds(odds):</p>
<p><strong>if</strong> odds % 2 != 1:</p>
<p><strong>raise</strong> ValueError("Did not get an odd number")</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 444</p>
<p><span id="return_odds___1"
class="anchor"></span><strong>return</strong> odds + 1</p>
<p>Section 88.8: Creating custom exception types</p>
<p>Create a class inheriting from Exception:</p>
<p><strong>class</strong> FooException(Exception):</p>
<p>pass</p>
<p>try<strong>:</strong></p>
<p><strong>raise</strong> FooException("insert description here")</p>
<p><strong>except</strong> FooException:</p>
<p><strong>print</strong>("A FooException was raised.")</p>
<p>or another exception type:</p>
<p><strong>class</strong> NegativeError(ValueError):</p>
<p>pass</p>
<p><strong>def</strong> foo(x):</p>
<p># function that only accepts positive values of x</p>
<p><strong>if</strong> x &lt; 0:</p>
<p><strong>raise</strong> NegativeError("Cannot process negative
numbers")</p>
<p>... # rest of function body</p>
<p>try<strong>:</strong></p>
<p>result = foo(int(input("Enter a positive integer: "))) # raw_input in
Python 2.x <strong>except</strong> NegativeError:</p>
<p><strong>print</strong>("You entered a negative number!")</p>
<p>else<strong>:</strong></p>
<p><strong>print</strong>("The result was " + str(result))</p>
<p>Section 88.9: Practical examples of exception handling</p>
<p>User input</p>
<p>Imagine you want a user to enter a number via input. You want to
ensure that the input is a number. You can use
<strong>try</strong>/<strong>except</strong> for this:</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>while</strong> True:</p>
<p>try<strong>:</strong></p>
<p>nb = int(input('Enter a number: '))</p>
<p>break</p>
<p><strong>except</strong> ValueError:</p>
<p><strong>print</strong>('This is not a number, try again.')</p>
<p>Note: Python 2.x would use raw_input instead; the function input
exists in Python 2.x but has different semantics. In the above example,
input would also accept expressions such as 2 + 2 which evaluate to a
number.</p>
<p>If the input could not be converted to an integer, a ValueError is
raised. You can catch it with <strong>except</strong>. If no exception
is raised, <strong>break</strong> jumps out of the loop. After the loop,
nb contains an integer.</p>
<p>Dictionaries</p>
<p>Imagine you are iterating over a list of consecutive integers, like
range(n), and you have a list of dictionaries d that contains
information about things to do when you encounter some particular
integers, say skip the d[i] next ones.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 445</p>
<p><span id="d_____7__3____25__9____38__5" class="anchor"></span>d =
[{7: 3}, {25: 9}, {38: 5}]</p>
<p><strong>for</strong> i <strong>in</strong> range(len(d)):</p>
<p>do_stuff(i)</p>
<p>try<strong>:</strong></p>
<p>dic = d[i]</p>
<p>i += dic[i]</p>
<p><strong>except</strong> KeyError:</p>
<p>i += 1</p>
<p>A KeyError will be raised when you try to get a value from a
dictionary for a key that doesn’t exist.</p>
<p>Section 88.10: Exceptions are Objects too</p>
<p>Exceptions are just regular Python objects that inherit from the
built-in BaseException. A Python script can use the
<strong>raise</strong> statement to interrupt execution, causing Python
to print a stack trace of the call stack at that point and a</p>
<p>representation of the exception instance. For example:</p>
<p>&gt;&gt;&gt; <strong>def</strong> failing_function():</p>
<p>... <strong>raise</strong> ValueError('Example error!')</p>
<p>&gt;&gt;&gt; failing_function()</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 1, <strong>in</strong></p>
<p>File "", line 2, <strong>in</strong> failing_function</p>
<p>ValueError: Example error!</p>
<p>which says that a ValueError with the message 'Example error!' was
raised by our failing_function(), which was executed in the
interpreter.</p>
<p>Calling code can choose to handle any and all types of exception that
a call can raise:</p>
<p>&gt;&gt;&gt; <strong>try</strong>:</p>
<p>... failing_function()</p>
<p>... <strong>except</strong> ValueError:</p>
<p>... <strong>print</strong>('Handled the error')</p>
<p>Handled the error</p>
<p>You can get hold of the exception objects by assigning them in the
<strong>except</strong>... part of the exception handling code:</p>
<p>&gt;&gt;&gt; <strong>try</strong>:</p>
<p>... failing_function()</p>
<p>... <strong>except</strong> ValueError <strong>as</strong> e:</p>
<p>... <strong>print</strong>('Caught exception', repr(e))</p>
<p>Caught exception ValueError('Example error!',)</p>
<p>A complete list of built-in Python exceptions along with their
descriptions can be found in the Python</p>
<p><a
href="https://docs.python.org/3.5/library/exceptions.html">Documentation:
https://docs.python.org/3.5/library/exceptions.html</a>. And here is the
full list arranged hierarchically: Exception Hierarchy.</p>
<p>Section 88.11: Running clean-up code with finally</p>
<p>Sometimes, you may want something to occur regardless of whatever
exception happened, for example, if you have to clean up some
resources.</p>
<p>The <strong>finally</strong> block of a <strong>try</strong> clause
will happen regardless of whether any exceptions were raised.</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 446</p>
<p><span id="resource___allocate_some_expensi"
class="anchor"></span>resource = allocate_some_expensive_resource()</p>
<p>try<strong>:</strong></p>
<p>do_stuff(resource)</p>
<p><strong>except</strong> SomeException <strong>as</strong> e:</p>
<p>log_error(e)</p>
<p><strong>raise</strong> # re-raise the error</p>
<p>finally<strong>:</strong></p>
<p>free_expensive_resource(resource)</p>
<p>This pattern is often better handled with context managers (using the
<strong>with</strong> statement).</p>
<p>Section 88.12: Chain exceptions with raise from</p>
<p>In the process of handling an exception, you may want to raise
another exception. For example, if you get an</p>
<p>IOError while reading from a file, you may want to raise an
application-specific error to present to the users of your library,
instead.</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>You can chain exceptions to show how the handling of exceptions
proceeded:</p>
<p>&gt;&gt;&gt; <strong>try</strong>:</p>
<p>5 / 0</p>
<p><strong>except</strong> ZeroDivisionError <strong>as</strong> e:</p>
<p><strong>raise</strong> ValueError("Division failed")
<strong>from</strong> e</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 2, <strong>in</strong></p>
<p>ZeroDivisionError: division by zero</p>
<p>The above exception was the direct cause of the following
exception:</p>
<p>Traceback (most recent call last):</p>
<p>File "", line 4, <strong>in</strong></p>
<p>ValueError: Division failed</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 447</p>
<p><span id="Chapter_89__Raise_Custom_Errors_1"
class="anchor"></span>Chapter 89: Raise Custom Errors /</p>
<p>Exceptions</p>
<p>Python has many built-in exceptions which force your program to
output an error when something in it goes</p>
<p>wrong.</p>
<p>However, sometimes you may need to create custom exceptions that
serve your purpose.</p>
<p>In Python, users can define such exceptions by creating a new class.
This exception class has to be derived, either directly or indirectly,
from Exception class. Most of the built-in exceptions are also derived
from this class.</p>
<p>Section 89.1: Custom Exception</p>
<p>Here, we have created a user-defined exception called CustomError
which is derived from the Exception class. This</p>
<p>new exception can be raised, like other exceptions, using the raise
statement with an optional error message.</p>
<p><strong>class</strong> CustomError(Exception):</p>
<p>pass</p>
<p>x = 1</p>
<p><strong>if</strong> x == 1:</p>
<p><strong>raise</strong> CustomError('This is custom error')</p>
<p>Output:</p>
<p>Traceback (most recent call last):</p>
<p>File "error_custom.py", line 8, in</p>
<p>raise CustomError('This is custom error')</p>
<p>__main__.CustomError: This is custom error</p>
<p>Section 89.2: Catch custom Exception</p>
<p>This example shows how to catch custom Exception</p>
<p><strong>class</strong> CustomError(Exception):</p>
<p>pass</p>
<p>try<strong>:</strong></p>
<p><strong>raise</strong> CustomError('Can you catch me ?')</p>
<p><strong>except</strong> CustomError <strong>as</strong> e:</p>
<p><strong>print</strong> ('Catched CustomError :{}'.format(e))</p>
<p><strong>except</strong> Exception <strong>as</strong> e:</p>
<p><strong>print</strong> ('Generic exception: {}'.format(e))</p>
<p>Output:</p>
<p>Catched CustomError :Can you catch me ?</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 448</p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F"><strong>VIDEO:</strong>
Python for Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Science
and Machine</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learning
Bootcamp</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Learn
how to use NumPy, Pandas, Seaborn,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Matplotlib
, Plotly, Scikit-Learn , Machine Learning,</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">Tensorflow,
and more!</a></p>
<p><img src="media/index-474_1.jpeg"
style="width:6.5in;height:3.65278in" alt="index-474_1.jpg" /></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Python for Data Science and Machine Learning</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Spark for Big Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Implement Machine Learning Algorithms</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use NumPy for Numerical Data</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Pandas for Data Analysis</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Matplotlib for Python Plotting</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Learn to use Seaborn for statistical plots</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use Plotly for interactive dynamic visualizations</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Use SciKit-Learn for Machine Learning Tasks</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
K-Means Clustering</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Logistic Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Linear Regression</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Random Forest and Decision Trees</a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Neural Networks <strong>Watch Today →</strong></a></p>
<p><a
href="https://click.linksynergy.com/deeplink?id=bqi6Q2255u4&amp;mid=39197&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpython-for-data-science-and-machine-learning-bootcamp%2F">✔
Support Vector Machines</a></p>
<p><span id="Chapter_90__Commonwealth_Excepti_1"
class="anchor"></span>Chapter 90: Commonwealth Exceptions</p>
<p>Here in Stack Overflow we often see duplicates talking about the same
errors: "ImportError: No module named</p>
<p>'??????' , SyntaxError: invalid syntax or NameError: name '???'
<strong>is not</strong> defined. This is an effort to reduce them and to
have some documentation to link to.</p>
<p>Section 90.1: Other Errors</p>
<p>AssertError</p>
<p>The <strong>assert</strong> statement exists in almost every
programming language. When you do:</p>
<p><strong>assert</strong> condition</p>
<p>or:</p>
<p><strong>assert</strong> condition, message</p>
<p>It's equivalent to this:</p>
<p><strong>if</strong> __debug__:</p>
<p><strong>if not</strong> condition: <strong>raise</strong>
AssertionError(message)</p>
<p>Assertions can include an optional message, and you can disable them
when you're done debugging.</p>
<p><strong>Note</strong>: the built-in variable <strong>debug</strong>
is True under normal circumstances, False when optimization is
requested</p>
<p>(command line option -O). Assignments to <strong>debug</strong> are
illegal. The value for the built-in variable is determined when</p>
<p>the interpreter starts.</p>
<p>KeyboardInterrupt</p>
<p>Error raised when the user presses the interrupt key, normally Ctrl +
C or del .</p>
<p>ZeroDivisionError</p>
<p>You tried to calculate 1/0 which is undefined. See this example to
find the divisors of a number:</p>
<p>Python 2.x Version ≥ 2.0 Version ≤ 2.7</p>
<p>div = float(raw_input("Divisors of: "))</p>
<p><strong>for</strong> x <strong>in</strong> xrange(div+1): #includes
the number itself and zero</p>
<p><strong>if</strong> div/x == div//x:</p>
<p><strong>print</strong> x, "is a divisor of", div</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>div = int(input("Divisors of: "))</p>
<p><strong>for</strong> x <strong>in</strong> range(div+1): #includes
the number itself and zero</p>
<p><strong>if</strong> div/x == div//x:</p>
<p><strong>print</strong>(x, "is a divisor of", div)</p>
<p>It raises ZeroDivisionError because the <strong>for</strong> loop
assigns that value to x. Instead it should be:</p>
<p>Python 2.x Version ≥ 2.0 Version ≤ 2.7</p>
<p>div = float(raw_input("Divisors of: "))</p>
<p><strong>for</strong> x <strong>in</strong> xrange(1,div+1): #includes
the number itself but not zero</p>
<p><strong>if</strong> div/x == div//x:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 450</p>
<p><span id="print_x___is_a_divisor_of___div"
class="anchor"></span><strong>print</strong> x, "is a divisor of",
div</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>div = int(input("Divisors of: "))</p>
<p><strong>for</strong> x <strong>in</strong> range(1,div+1): #includes
the number itself but not zero</p>
<p><strong>if</strong> div/x == div//x:</p>
<p><strong>print</strong>(x, "is a divisor of", div)</p>
<p>Section 90.2: NameError: name '???' is not defined</p>
<p>Is raised when you tried to use a variable, method or function that
is not initialized (at least not before). In other</p>
<p>words, it is raised when a requested local or global name is not
found. It's possible that you misspelt the name of</p>
<p>the object or forgot to <strong>import</strong> something. Also maybe
it's in another scope. We'll cover those with separate examples.</p>
<p>It's simply not defined nowhere in the code</p>
<p>It's possible that you forgot to initialize it, especially if it is a
constant</p>
<p>foo # This variable is not defined</p>
<p>bar() # This function is not defined</p>
<p>Maybe it's defined later:</p>
<p>baz()</p>
<p><strong>def</strong> baz():</p>
<p>pass</p>
<p>Or it wasn't imported:</p>
<p>#needs import math</p>
<p><strong>def</strong> sqrt():</p>
<p>x = float(input("Value: "))</p>
<p><strong>return</strong> math.sqrt(x)</p>
<p>Python scopes and the LEGB Rule:</p>
<p>The so-called LEGB Rule talks about the Python scopes. Its name is
based on the different scopes, ordered by the correspondent
priorities:</p>
<p>Local → Enclosed → Global → Built-<strong>in</strong>.</p>
<p><strong>L</strong>ocal: Variables not declared global or assigned in
a function.</p>
<p><strong>E</strong>nclosing: Variables defined in a function that is
wrapped inside another function.</p>
<p><strong>G</strong>lobal: Variables declared global, or assigned at
the top-level of a file.</p>
<p><strong>B</strong>uilt-in: Variables preassigned in the built-in
names module.</p>
<p>As an example:</p>
<p><strong>for</strong> i <strong>in</strong> range(4):</p>
<p>d = i * 2</p>
<p>print<strong>(d)</strong></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 451</p>
<p><span id="d_is_accessible_because_the_for" class="anchor"></span>d is
accessible because the <strong>for</strong> loop does not mark a new
scope, but if it did, we would have an error and its behavior would be
similar to:</p>
<p><strong>def</strong> noaccess():</p>
<p><strong>for</strong> i <strong>in</strong> range(4):</p>
<p>d = i * 2</p>
<p>noaccess()</p>
<p>print<strong>(d)</strong></p>
<p>Python says NameError: name 'd' <strong>is not</strong> defined</p>
<p>Section 90.3: TypeErrors</p>
<p>These exceptions are caused when the type of some object should be
different</p>
<p>TypeError: [definition/method] takes ? positional arguments but ? was
given</p>
<p>A function or method was called with more (or less) arguments than
the ones it can accept.</p>
<p>Example</p>
<p>If more arguments are given:</p>
<p><strong>def</strong> foo(a): <strong>return</strong> a</p>
<p>foo(a,b,c,d) #And a,b,c,d are defined</p>
<p>If less arguments are given:</p>
<p><strong>def</strong> foo(a,b,c,d): <strong>return</strong> a += b + c
+ d</p>
<p>foo(a) #And a is defined</p>
<p><strong>Note</strong>: if you want use an unknown number of
arguments, you can use *args or **kwargs. See *args and **kwargs</p>
<p>TypeError: unsupported operand type(s) for [operand]: '???' and
'???'</p>
<p>Some types cannot be operated together, depending on the operand.</p>
<p>Example</p>
<p>For example: + is used to concatenate and add, but you can't use any
of them for both types. For instance, trying to</p>
<p>make a set by concatenating (+ing) 'set1' and 'tuple1' gives the
error. Code:</p>
<p>set1, tuple1 = {1,2}, (3,4)</p>
<p>a = set1 + tuple1</p>
<p>Some types (eg: int and string) use both + but for different
things:</p>
<p>b = 400 + 'foo'</p>
<p>Or they may not be even used for anything:</p>
<p>c = ["a","b"] - [1,2]</p>
<p>But you can for example add a float to an int:</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 452</p>
<p><span id="d___1___1_0" class="anchor"></span>d = 1 + 1.0</p>
<p>TypeError: '???' object is not iterable/subscriptable:</p>
<p>For an object to be iterable it can take sequential indexes starting
from zero until the indexes are no longer valid</p>
<p>and a IndexError is raised (More technically: it has to have an
__iter__ method which returns an __iterator__, or which defines a
__getitem__ method that does what was previously mentioned).</p>
<p>Example</p>
<p>Here we are saying that bar is the zeroth item of 1. Nonsense:</p>
<p>foo = 1</p>
<p>bar = foo[0]</p>
<p>This is a more discrete version: In this example <strong>for</strong>
tries to set x to amount[0], the first item in an iterable but it</p>
<p>can't because amount is an int:</p>
<p>amount = 10</p>
<p><strong>for</strong> x <strong>in</strong> amount:
<strong>print</strong>(x)</p>
<p>TypeError: '???' object is not callable</p>
<p>You are defining a variable and calling it later (like what you do
with a function or method)</p>
<p>Example</p>
<p>foo = "notAFunction"</p>
<p>foo()</p>
<p>Section 90.4: Syntax Error on good code</p>
<p>The gross majority of the time a SyntaxError which points to an
uninteresting line means there is an issue on the line before it (in
this example, it's a missing parenthesis):</p>
<p><strong>def</strong> my_print():</p>
<p>x = (1 + 1</p>
<p>print<strong>(x)</strong></p>
<p>Returns</p>
<p>File "", line 3</p>
<p>print<strong>(x)</strong></p>
<p>^</p>
<p>SyntaxError: invalid syntax</p>
<p>The most common reason for this issue is mismatched
parentheses/brackets, as the example shows.</p>
<p>There is one major caveat for print statements in Python 3:</p>
<p>Python 3.x Version ≥ 3.0</p>
<p>&gt;&gt;&gt; <strong>print</strong> "hello world"</p>
<p>File "", line 1</p>
<p><strong>print</strong> "hello world"</p>
<p>^</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 453</p>
<p><span id="SyntaxError__invalid_syntax"
class="anchor"></span>SyntaxError: invalid syntax</p>
<p>Because <a
href="https://docs.python.org/3/whatsnew/3.0.html#print-is-a-function">the
<strong>print</strong> statement was replaced with the
<strong>print</strong>() function</a>, so you want:</p>
<p><strong>print</strong>("hello world") # Note this is valid for both
Py2 &amp; Py3</p>
<p>Section 90.5: IndentationErrors (or indentation SyntaxErrors)</p>
<p>In most other languages indentation is not compulsory, but in Python
(and other languages: early versions of FORTRAN, Makefiles, Whitespace
(esoteric language), etc.) that is not the case, what can be confusing
if you come</p>
<p>from another language, if you were copying code from an example to
your own, or simply if you are new.</p>
<p>IndentationError/SyntaxError: unexpected indent</p>
<p>This exception is raised when the indentation level increases with no
reason.</p>
<p>Example</p>
<p>There is no reason to increase the level here:</p>
<p>Python 2.x Version ≥ 2.0 Version ≤ 2.7</p>
<p><strong>print</strong> "This line is ok"</p>
<p><strong>print</strong> "This line isn't ok"</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>print</strong>("This line is ok")</p>
<p><strong>print</strong>("This line isn't ok")</p>
<p>Here there are two errors: the last one and that the indentation does
not match any indentation level. However just</p>
<p>one is shown:</p>
<p>Python 2.x Version ≥ 2.0 Version ≤ 2.7</p>
<p><strong>print</strong> "This line is ok"</p>
<p><strong>print</strong> "This line isn't ok"</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>print</strong>("This line is ok")</p>
<p><strong>print</strong>("This line isn't ok")</p>
<p>IndentationError/SyntaxError: unindent does not match any outer
indentation level</p>
<p>Appears you didn't unindent completely.</p>
<p>Example</p>
<p>Python 2.x Version ≥ 2.0 Version ≤ 2.7</p>
<p><strong>def</strong> foo():</p>
<p><strong>print</strong> "This should be part of foo()"</p>
<p><strong>print</strong> "ERROR!"</p>
<p><strong>print</strong> "This is not a part of foo()"</p>
<p>Python 3.x Version ≥ 3.0</p>
<p><strong>print</strong>("This line is ok")</p>
<p><strong>print</strong>("This line isn't ok")</p>
<p>IndentationError: expected an indented block</p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 454</p>
<p>After a colon (and then a new line) the indentation level has to
increase. This error is raised when that didn't happen.</p>
<p>Example</p>
<p><strong>if</strong> ok:</p>
<p>doStuff()</p>
<p><strong>Note</strong>: Use the keyword <strong>pass</strong> (that
makes absolutely nothing) to just put an if, <strong>else</strong>,
<strong>except</strong>, <strong>class</strong>, method or</p>
<p>definition but not say what will happen if called/condition is true
(but do it later, or in the case of <strong>except</strong>: just do</p>
<p>nothing):</p>
<p><strong>def</strong> foo():</p>
<p>pass</p>
<p>IndentationError: inconsistent use of tabs and spaces in
indentation</p>
<p>Example</p>
<p><strong>def</strong> foo():</p>
<p><strong>if</strong> ok:</p>
<p><strong>return</strong> "Two != Four != Tab"</p>
<p><strong>return</strong> "i don't care i do whatever i want"</p>
<p>How to avoid this error</p>
<p>Don't use tabs. It is discouraged by PEP8, the style guide for
Python.</p>
<p>1. Set your editor to use 4 <strong>spaces</strong> for
indentation.</p>
<p>2. Make a search and replace to replace all tabs with 4 spaces.</p>
<p>3. Make sure your editor is set to <strong>display</strong> tabs as 8
spaces, so that you can realize easily that error and fix it.</p>
<p><a href="http://stackoverflow.com/a/1017404/7237719">See this
question if you want to learn more.</a></p>
<p><a href="https://goalkicker.com/">GoalKicker.com – Python® Notes for
Professionals</a> 455</p>
<p><span id="Chapter_91__urllib_1" class="anchor"></span>Chapter 91:
urllib</p>
<p>Section 91.1: HTTP GET</p>
<p>Python 2.x Version ≤ 2.7</p>
<p>Python 2</p>
<p><strong>import</strong> urllib</p>
<p>response =
urllib.urlopen('http://stackoverflow.com/documentation/')</p>
<p>Using urllib.urlopen() will return a response object, which can be
handled similar to a file.</p>
<p><strong>print</strong> response.code</p>
<p># Prints: 200</p>
<p>The response.code represents the http return value. 200 is OK, 404 is
NotFound, etc.</p>
<p><strong>print</strong> response.read()</p>
<p><strong>'</strong>\r\n\r\n\r\n\r\n</p>
</body>
</html>
