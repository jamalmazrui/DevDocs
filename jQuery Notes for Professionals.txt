

Contents
About	1
Chapter 1: Getting started with jQuery	2
Section 1.1: Getting Started	2
Section 1.2: Avoiding namespace collisions	3
Section 1.3: jQuery Namespace ("jQuery" and "$")	4
Section 1.4: Loading jQuery via console on a page that does not have it	5
Section 1.5: Include script tag in head of HTML page	5
Section 1.6: The jQuery Object	7
Chapter 2: Selectors	8
Section 2.1: Overview	8
Section 2.2: Types of Selectors	8
Section 2.3: Caching Selectors	10
Section 2.4: Combining selectors	11
Section 2.5: DOM Elements as selectors	13
Section 2.6: HTML strings as selectors	13
Chapter 3: Each function	15
Section 3.1: jQuery each function	15
Chapter 4: Attributes	16
Section 4.1: Dierece between attr() and prop()	16
Section 4.2: Get the attribute value of a HTML element	16
Section 4.3: Setting value of HTML attribute	17
Section 4.4: Removing attribute	17
Chapter 5: document-ready event	18
Section 5.1: What is document-ready and how should I use it?	18
Section 5.2: jQuery 2.2.3 and earlier	18
Section 5.3: jQuery 3.0	19
Section 5.4: Attaching events and manipulating the DOM inside ready()	19
Section 5.5: Dierence between $(document).ready() and $(window).load()	20
Section 5.6: Dierence between jQuery(fn) and executing your code before </body>	21
Chapter 6: Events	22
Section 6.1: Delegated Events	22
Section 6.2: Attach and Detach Event Handlers	23
Section 6.3: Switching specific events on and o via jQuery. (Named Listeners)	24
Section 6.4: originalEvent	25
Section 6.5: Events for repeating elements without using ID's	25
Section 6.6: Document Loading Event .load()	26
Chapter 7: DOM Manipulation	27
Section 7.1: Creating DOM elements	27
Section 7.2: Manipulating element classes	27
Section 7.3: Other API Methods	29
Chapter 8: DOM Traversing	31
Section 8.1: Select children of element	31
Section 8.2: Get next element	31
Section 8.3: Get previous element	31
Section 8.4: Filter a selection	32
Section 8.5: find() method	33
Section 8.6: Iterating over list of jQuery elements	34
Section 8.7: Selecting siblings	34
Section 8.8: closest() method	34
Chapter 9: CSS Manipulation	36
Section 9.1: CSS - Getters and Setters	36
Section 9.2: Increment/Decrement Numeric Properties	36
Section 9.3: Set CSS property	37
Section 9.4: Get CSS property	37
Chapter 10: Element Visibility	38
Section 10.1: Overview	38
Section 10.2: Toggle possibilities	38
Chapter 11: Append	40
Section 11.1: Ecient consecutive .append() usage	40
Section 11.2: jQuery append	43
Section 11.3: Appending an element to a container	43
Chapter 12: Prepend	45
Section 12.1: Prepending an element to a container	45
Section 12.2: Prepend method	45
Chapter 13: Getting and setting width and height of an element	47
Section 13.1: Getting and setting width and height (ignoring border)	47
Section 13.2: Getting and setting innerWidth and innerHeight (ignoring padding and border)	47
Section 13.3: Getting and setting outerWidth and outerHeight (including padding and border)	47
Chapter 14: jQuery .animate() Method	48
Section 14.1: Animation with callback	48
Chapter 15: jQuery Deferred objects and Promises	50
Section 15.1: jQuery ajax() success, error VS .done(), .fail()	50
Section 15.2: Basic promise creation	50
Chapter 16: Ajax	52
Section 16.1: Handling HTTP Response Codes with $.ajax()	52
Section 16.2: Using Ajax to Submit a Form	53
Section 16.3: All in one examples	53
Section 16.4: Ajax File Uploads	55
Chapter 17: Checkbox Select all with automatic check/uncheck on other checkbox	
change	58
Section 17.1: 2 select all checkboxes with corresponding group checkboxes	58
Chapter 18: Plugins	59
Section 18.1: Plugins - Getting Started	59
Credits	61
You may also like	64


About
Please feel free to share this PDF with anyone for free, latest version of this book can be downloaded from:
https://goalkicker.com/jQueryBook
This jQuery(r) Notes for Professionals book is compiled from Stack Overflow
Documentation, the content is written by the beautiful people at Stack Overflow.
Text content is released under Creative Commons BY-SA, see credits at the end of this book whom contributed to the various chapters. Images may be copyright of their respective owners unless otherwise specified
This is an unofficial free book created for educational purposes and is not affiliated with official jQuery(r) group(s) or company(s) nor Stack Overflow. All
trademarks and registered trademarks are the property of their respective company owners
The information presented in this book is not guaranteed to be correct nor accurate, use at your own risk
Please send feedback and corrections to web@petercv.com
Chapter 1: Getting started with jQuery
VersionNotesRelease Date1.0 First stable release2006-08-261.12007-01-141.22007-09-101.3 Sizzle introduced into core2009-01-141.42010-01-141.5 Deferred callback management, ajax module rewrite2011-01-31attr() and val	1.6 Significant performance gains in the () methods	2011-05-03
on() and off	1.7 New Event APIs: ().	2011-11-03
html, props	1.8 Sizzle rewritten, improved animations and $() flexibility.	2012-08-09
	1.9 Removal of deprecated interfaces and code cleanup	2013-01-15
1.10 Incorporated bug fixes and differences reported from both the 1.9 and 2.0 beta cycles 2013-05-24
	1.11	2014-01-24
	1.12	2016-01-08
	2.0 Dropped IE 6-8 support for performance improvements and reduction in size	2013-04-18
	2.1	2014-01-24
	2.2	2016-01-08
	3.0 Massive speedups for some jQuery custom selectors	2016-06-09
	3.1 No More Silent Errors	2016-07-07
	3.2 No More Silent Errors	2017-03-16
	3.3 No More Silent Errors	2018-01-19
Section 1.1: Getting Started
hello.htmlCreate a file  with the following content:

Live Demo on JSBin
Hello, WorldOpen this file in a web browser. As a result you will see a page with the text: !
Explanation of code
1. Loads the jQuery library from the jQuery CDN:
<script src="https://code.jquery.com/jquery-2.2.4.min.js"></script>
This introduces the $ global variable, an alias for the jQuery function and namespace.
Be aware that one of the most common mistakes made when including jQuery is failing to load the library BEFORE any other scripts or libraries that may depend on or make use of it.
2. Defers a function to be executed when the DOM (Document Object Model) is detected to be "ready" by jQuery:

3. Once the DOM is ready, jQuery executes the callback function shown above. Inside of our function, there is only one call which does 2 main things:
1. Gets the element with the id attribute equal to hello (our selector #hello). Using a selector as the passed argument is the core of jQuery's functionality and naming; the entire library essentially evolved from extending document.querySelectorAllMDN.
text() inside the selected element to Hello, World2. Set the !.
#    ↓ - Pass a `selector` to `$` jQuery, returns our element
$('#hello').text('Hello, World!');
#             ↑ - Set the Text on the element
For more refer to the jQuery - Documentation page.
Section 1.2: Avoiding namespace collisions
Libraries other than jQuery may also use $ as an alias. This can cause interference between those libraries and jQuery.
To release $ for use with other libraries:

After calling this function, $ is no longer an alias for jQuery. However, you can still use the variable jQuery itself to access jQuery functions:

Optionally, you can assign a different variable as an alias for jQuery:


Conversely, to prevent other libraries from interfering with jQuery, you can wrap your jQuery code in an immediately invoked function expression (IIFE) and pass in jQuery as the argument:

Inside this IIFE, $ is an alias for jQuery only.
Another simple way to secure jQuery's $ alias and make sure DOM is ready:

To summarize,
jQuery.noConflictvar jQuery2 = jQuery.noConflict() : $ no longer refers to jQuery, while the variable jQuery does.
() - $ no longer refers to jQuery, while the variable jQuery does and so
does the variable jQuery2.
Now, there exists a third scenario - What if we want jQuery to be available only in jQuery2? Use,
var jQuery2 = jQuery.noConflict(true)
This results in neither $ nor jQuery referring to jQuery.
This is useful when multiple versions of jQuery are to be loaded onto the same page.

https://learn.jquery.com/using-jquery-core/avoid-conflicts-other-libraries/
Section 1.3: jQuery Namespace ("jQuery" and "$")
jQuery(...jQuery is the starting point for writing any jQuery code. It can be used as a function ) or a variable
jQuery.foo.
jQuery.noConflict$ is an alias for jQuery and the two can usually be interchanged for each other (except where (); has been used - see Avoiding namespace collisions).
Assuming we have this snippet of HTML -

textWe might want to use jQuery to add some text content to this div. To do this we could use the jQuery () function. This could be written using either jQuery or $. i.e. -

Or -

Both will result in the same final HTML -

As $ is more concise than jQuery it is the generally the preferred method of writing jQuery code.
jQuery uses CSS selectors and in the example above an ID selector was used. For more information on selectors in jQuery see types of selectors.
Section 1.4: Loading jQuery via console on a page that does not have it
Sometimes one has to work with pages that are not using jQuery while most developers are used to have jQuery handy.
In such situations one can use Chrome Developer Tools console ( F12 ) to manually add jQuery on a loaded page by running following:
var j = document.createElement('script');
j.onload = function(){ jQuery.noConflict(); };
j.src = "https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"; document.getElementsByTagName('head')[0].appendChild(j);
Version you want might differ from above(1.12.4) you can get the link for one you need here.
Section 1.5: Include script tag in head of HTML page
To load jQuery from the official CDN, go to the jQuery website. You'll see a list of different versions and formats available.

Now, copy the source of the version of jQuery, you want to load. Suppose, you want to load jQuery 2.X, click uncompressed or minified tag which will show you something like this:

<head> or <bodyCopy the full code (or click on the copy icon) and paste it in the > of your html.
The best practice is to load any external JavaScript libraries at the head tag with the async attribute. Here is a demonstration:

When using async attribute be conscious as the javascript libraries are then asynchronously loaded and executed as soon as available. If two libraries are included where second library is dependent on the first library is this case if second library is loaded and executed before first library then it may throw an error and application may break.
Section 1.6: The jQuery Object
jQueryEvery time jQuery is called, by using $() or (), internally it is creating a new instance of jQuery. This is the source code which shows the new instance:

fnInternally jQuery refers to its prototype as ., and the style used here of internally instantiating a jQuery object allows for that prototype to be exposed without the explicit use of new by the caller.
eachIn addition to setting up an instance (which is how the jQuery API, such as ., children,filter, etc. is exposed), internally jQuery will also create an array-like structure to match the result of the selector (provided that something other than nothing, undefined, null, or similar was passed as the argument). In the case of a single item, this arraylike structure will hold only that item.
A simple demonstration would be to find an element with an id, and then access the jQuery object to return the underlying DOM element (this will also work when multiple elements are matched or present).
var $div = $("#myDiv");//populate the jQuery object with the result of the id selector var div = $div[0];//access array-like structure of jQuery object to get the DOM Element
Chapter 2: Selectors
A jQuery selectors selects or finds a DOM (document object model) element in an HTML document. It is used to select HTML elements based on id, name, types, attributes, class and etc. It is based on existing CSS selectors.
Section 2.1: Overview
Elements can be selected by jQuery using jQuery Selectors. The function returns either an element or a list of elements.
Basic selectors
$("*")                       // All elements
$("div")                     // All <div> elements
$(".blue")                   // All elements with class=blue
$(".blue.red")               // All elements with class=blue AND class=red
$(".blue,.red")              // All elements with class=blue OR class=red
$("#headline")               // The (first) element with id=headline
$("[href]")                  // All elements with an href attribute $("[href='example.com']")    // All elements with href=example.com
Relational operators
$("div span")          // All <span>s that are descendants of a <div>
$("div > span")        // All <span>s that are a direct child of a <div>
$("a ~ span")          // All <span>s that are siblings following an <a>
$("a + span")          // All <span>s that are immediately after an <a>
Section 2.2: Types of Selectors
In jQuery you can select elements in a page using many various properties of the element, including:
Type
Class
ID
Possession of Attribute
Attribute Value
Indexed Selector Pseudo-state
If you know CSS selectors you will notice selectors in jQuery are the same (with minor exceptions).
Take the following HTML for example:
<a href="index.html"></a>                  <!-- 1 -->
<a id="second-link"></a>                   <!-- 2 --> <a class="example"></a>                    <!-- 3 --> <a class="example" href="about.html"></a>  <!-- 4 --> <span class="example"></span>              <!-- 5 -->
Selecting by Type:
<aThe following jQuery selector will select all > elements, including 1, 2, 3 and 4.

Selecting by Class
The following jQuery selector will select all elements of class example (including non-a elements), which are 3, 4 and 5.

Selecting by ID
The following jQuery selector will select the element with the given ID, which is 2.

Selecting by Possession of Attribute
The following jQuery selector will select all elements with a defined href attribute, including 1 and 4.

Selecting by Attribute Value
index.htmlThe following jQuery selector will select all elements where the href attribute exists with a value of , which is just 1.

Selecting by Indexed Position (Indexed Selector)
<a> ie. the second-linkThe following jQuery selector will select only 1, the second  because index supplied is 1 like
eq(1) (Note that the index starts at 0 hence the second got selected here!).

Selecting with Indexed Exclusion
not(:eqTo exclude an element by using its index :())
<aThe following selects > elements, except that with the class example, which is 1

Selecting with Exclusion
notTo exclude an element from a selection, use :()
<aThe following selects > elements, except those with the class example, which are 1 and 2.

Selecting by Pseudo-state
first-child, :last-child, :first-of-type, :lastYou can also select in jQuery using pseudo-states, including :-
of-type, etc.
<aThe following jQuery selector will only select the first > element: number 1.

Combining jQuery selectors
You can also increase your specificity by combining multiple jQuery selectors; you can combine any number of them or combine all of them. You can also select multiple classes, attributes and states at the same time.

<aThis would select an > element that:
class1, class2, and class3first-child and first-of-typeHas the following classes: 
Has the following ID: someID
Has the following Attribute: attr1
Has the following Attributes and values: attr2 with value something, attr3 with value something Has the following states: 
You can also separate different selectors with a comma:

This would select:
<aAll > elements
All elements that have the class class1
 An element with the id #someID Child and Sibling selection
jQuery selectors generally conform to the same conventions as CSS, which allows you to select children and siblings in the same way.
To select a non-direct child, use a space
To select a direct child, use a >
To select an adjacent sibling following the first, use a +
To select a non-adjacent sibling following the first, use a ~
Wildcard selection
There might be cases when we want to select all elements but there is not a common property to select upon (class, attribute etc). In that case we can use the * selector that simply selects all the elements:

Section 2.3: Caching Selectors
Each time you use a selector in jQuery the DOM is searched for elements that match your query. Doing this too often or repeatedly will decrease performance. If you refer to a specific selector more than once you should add it to the cache by assigning it to a variable:

This would replace:

Caching this selector could prove helpful if your website needs to show/hide this element often. If there are multiple elements with the same selector the variable will become an array of these elements:

NOTE: The element has to exist in the DOM at the time of its assignment to a variable. If there is no element in the DOM with a class called child you will be storing an empty array in that variable.

Remember to reassign the selector to the variable after adding/removing elements in the DOM with that selector.
Note: When caching selectors, many developers will start the variable name with a $ to denote that the variable is a jQuery object like so:

Section 2.4: Combining selectors
Consider following DOM Structure


Descendant and child selectors
<ul> - parentUl find its descendants (<liGiven a parent >),
'parent child'1. Simple $()
'ul.parentUl li'>> $()
This gets all matching descendants of the specified ancestor all levels down.
'parent > child'2. > - $()
'ul.parentUl > li'>> $()
This finds all matching children (only 1st level down).
'child','parent'3. Context based selector - $()
'li','ul.parentUl'>> $()
This works same as 1. above.
find() - $('parent').find('child'4.)
'ul.parentUl').find('li'>> $()
This works same as 1. above.
children() - $('parent').find('child'5.)
'ul.parentUl').children('li'>> $()
This works same as 2. above.
Other combinators Group Selector : ","
<ul> elements AND all <li> elements AND all <spanSelect all > elements :
$('ul, li, span')
Multiples selector : "" (no character)
<ulSelect all > elements with class parentUl :
$('ul.parentUl')
Adjacent Sibling Selector : "+"
<li> elements that are placed immediately after another <liSelect all > element:
$('li + li')
General Sibling Selector : "~"
<li> elements that are siblings of other <liSelect all > elements:

Section 2.5: DOM Elements as selectors
jQuery accepts a wide variety of parameters, and one of them is an actual DOM element. Passing a DOM element to jQuery will cause the underlying array-like structure of the jQuery object to hold that element. jQuery will detect that the argument is a DOM element by inspecting its nodeType.
The most common use of a DOM element is in callbacks, where the current element is passed to the jQuery constructor in order to gain access to the jQuery API.
Such as in the each callback (note: each is an iterator function).

Section 2.6: HTML strings as selectors
jQuery accepts a wide variety of parameters as "selectors", and one of them is an HTML string. Passing an HTML string to jQuery will cause the underlying array-like structure of the jQuery object to hold the resulting constructed
HTML.
jQuery uses regex to determine if the string being passed to the constructor is an HTMLstring, and also that it must
rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\wstart with <. That regex is defined as -]*))$/ (explanation at regex101.com).
The most common use of an HTML string as a selector is when sets of DOM elements need to be created in code only, often this is used by libraries for things like Modal popouts.
For example, a function which returned an anchor tag wrapped in a div as a template


Would return a jQuery object holding

template("google.com","Google"if called as ).

Chapter 3: Each function
Section 3.1: jQuery each function
HTML:

Script:

A message is thus logged for each item in the list:
0: Mango
1: Book

Chapter 4: Attributes
Section 4.1: Dierece between attr() and prop()
attr() gets/sets the HTML attribute using the DOM functions getAttribute() and setAttribute(). prop         () works by setting the DOM property without changing the attribute. In many cases the two are interchangeable, but occasionally one is needed over the other.
To set a checkbox as checked:
$('#tosAccept').prop('checked', true); // using attr() won't work properly here
removeProp() method. Similarly removeAttrTo remove a property you can use the () removes attributes.
Section 4.2: Get the attribute value of a HTML element
attrWhen a single parameter is passed to the .() function it returns the value of passed attribute on the selected element.
Syntax:
selector]).attr([attribute name$([]);
Example:
HTML:
<a href="/home">Home</a>
jQuery:
'a').attr('href'$();
Fetching data attributes:
data() function in order to deal with data attributes. .datajQuery offers . function returns the value of the data attribute on the selected element.
Syntax:
selector]).data([attribute name$([]);
Example:
Html:
<article data-column="3"></article>
jQuery:
"article").data("column"$()
Note:
jQuery's data() method will give you access to data-* attributes, BUT, it clobbers the case of the attribute name. Reference
Section 4.3: Setting value of HTML attribute
attr(attributeName, attributeValue)If you want to add an attribute to some element you can use the  function.
For example:

This example will add mouseover text "Click me" to all links on the page.
The same function is used to change attributes' values.
Section 4.4: Removing attribute
.removeAttr(attributeName)To remove an attribute from an element you can use the function . For example:

This will remove title attribute from the element with ID home.

Chapter 5: document-ready event
Section 5.1: What is document-ready and how should I use it?

This is important because jQuery (and JavaScript generally) cannot select a DOM element that has not been rendered to the page.

readynoConflictNote that you can alias the jQuery namespace by passing a custom handler into the .() method. This is useful for cases when another JS library is using the same shortened $ alias as jQuery, which create a conflict. To avoid this conflict, you must call $.(); - This forcing you to use only the default jQuery namespace (Instead of the short $ alias).
readyBy passing a custom handler to the .() handler, you will be able to choose the alias name to use jQuery.

document).readyRather than simply putting your jQuery code at the bottom of the page, using the $( function ensures that all HTML elements have been rendered and the entire Document Object Model (DOM) is ready for JavaScript code to execute.
Section 5.2: jQuery 2.2.3 and earlier
These are all equivalent, the code inside the blocks will run when the document is ready:


Because these are equivalent the first is the recommended form, the following is a version of that with the jQuery keyword instead of the $ which produce the same results:

Section 5.3: jQuery 3.0
Notation
As of jQuery 3.0, only this form is recommended:

All other document-ready handlers are deprecated in jQuery 3.0.
Asynchronous
As of jQuery 3.0, the ready handler will always be called asynchronously. This means that in the code below, the log
'outside handler' will always be displayed first, regardless whether the document was ready at the point of execution.

Section 5.4: Attaching events and manipulating the DOM inside ready()
document).readyExample uses of $(():
1. Attaching event handlers Attach jQuery event handlers


2. Run jQuery code after the page structure is created

3. Manipulate the loaded DOM structure
For example: hide a div when the page loads for the first time and show it on the click event of a button

Section 5.5: Dierence between $(document).ready() and $(window).load()
window).load$(() was deprecated in jQuery version 1.8 (and completely removed from jQuery 3.0) and as such should not be used anymore. The reasons for the deprecation are noted on the jQuery page about this event
Caveats of the load event when used with images
loadA common challenge developers attempt to solve using the .() shortcut is to execute a function when an image (or collection of images) have completely loaded. There are several known caveats with this that should be noted. These are:
It doesn't work consistently nor reliably cross-browser
It doesn't fire correctly in WebKit if the image src is set to the same src as before
It doesn't correctly bubble up the DOM tree
Can cease to fire for images that already live in the browser's cache
loadIf you still wish to use () it is documented below:
document).readywindow).load$(() waits until the full DOM is availble -- all the elements in the HTML have been parsed and are in the document. However, resources such as images may not have fully loaded at this point. If it is important to wait until all resources are loaded, $(() and you're aware of the significant limitations of this event then the below can be used instead:

Section 5.6: Dierence between jQuery(fn) and executing your code before </body>
</bodyUsing the document-ready event can have small performance drawbacks, with delayed execution of up to ~300ms. Sometimes the same behavior can be achieved by execution of code just before the closing > tag:

will produce similar behavior but perform sooner than as it does not wait for the document ready event trigger as it does in:

</bodyEmphasis on the fact that first example relies upon your knowledge of your page and placement of the script just prior to the closing > tag and specifically after the span tag.

Chapter 6: Events
Section 6.1: Delegated Events
Let's start with example. Here is a very simple example HTML.
Example HTML

The problem
<a<li'a').clickNow in this example, we want to add an event listener to all > elements. The problem is that the list in this example is dynamic. > elements are added and removed as time passes by. However, the page does not refresh between changes, which would allow us to use simple click event listeners to the link objects (i.e. $(()).
<aThe problem we have is how to add events to the > elements that come and go.
Background information - Event propagation
Delegated events are only possible because of event propagation (often called event bubbling). Any time an event is fired, it will bubble all the way up (to the document root). They delegate the handling of an event to a non-changing ancestor element, hence the name "delegated" events.
<aSo in example above, clicking > element link will trigger 'click' event in these elements in this order:
a
li
ul
body html document root
Solution
Knowing what event bubbling does, we can catch one of the wanted events which are propagating up through our HTML.

<ulA good place for catching it in this example is the > element, as that element does is not dynamic:
$('ul').on('click', 'a', function () {   console.log(this.href); // jQuery binds the event function to the targeted DOM element
                          // this way `this` refers to the anchor and not to the list
  // Whatever you want to do when link is clicked });
In above:
We have 'ul' which is the recipient of this event listener
The first parameter ('click') defines which events we are trying to detect.
The second parameter ('a') is used to declare where the event needs to originate from (of all child elements under this event listener's recipient, ul).
Lastly, the third parameter is the code that is run if first and second parameters' requirements are fulfilled.
In detail how solution works
<a1. User clicks > element
<a2. That triggers click event on > element.
3. The event start bubbling up towards document root.
<li> element and then to the <ul4. The event bubbles first to the > element.
<ul5. The event listener is run as the > element has the event listener attached.
6. The event listener first detects the triggering event. The bubbling event is 'click' and the listener has 'click', it is a pass.
7. The listener checks tries to match the second parameter ('a') to each item in the bubble chain. As the last item in the chain is an 'a' this matches the filter and this is a pass too.
stopPropagation8. The code in third parameter is run using the matched item as it's this. If the function does not include a call to (), the event will continue propagating upwards towards the root (document).
Note: If a suitable non-changing ancestor is not available/convenient, you should use document. As a habit do not use 'body' for the following reasons:
 body has a bug, to do with styling, that can mean mouse events do not bubble to it. This is browser dependant and can happen when the calculated body height is 0 (e.g. when all child elements have absolute positions). Mouse events always bubble to document.
     document always exists to your script, so you can attach delegated handlers to document outside of a DOMready handler and be certain they will still work.
  Section 6.2: Attach and Detach Event Handlers
Attach an Event Handler
onclick(), but .onSince version 1.7 jQuery has the event API .(). This way any standard javascript event or custom event can be bound on the currently selected jQuery element. There are shortcuts such as .() gives you more options.
HTML

jQuery
$( "#foo" ).on( "click", function() {   console.log( $( this ).text() ); //bar

Detach an Event Handler
off( eventsNaturally you have the possibility to detach events from your jQuery objects too. You do so by using .
 selector  handler [,] [,] ).
HTML

jQuery

thisWhen clicking the button $() will refer to the current jQuery object and will remove all attached event handlers from it. You can also specify which event handler should be removed. jQuery

In this case the mouseenter event will still function after clicking.
Section 6.3: Switching specific events on and o via jQuery. (Named Listeners)
Sometimes you want to switch off all previously registered listeners.

An issue with this method is that ALL listeners binded on document by other plugins etc would also be removed.
More often than not, we want to detach all listeners attached only by us.
To achieve this, we can bind named listeners as,
//Add named event listener.

This ensures that any other click listener is not inadvertently modified.
Section 6.4: originalEvent
Sometimes there will be properties that aren't available in jQuery event. To access the underlying properties use
Event.originalEvent
Get Scroll Direction

Section 6.5: Events for repeating elements without using ID's
Problem
There is a series of repeating elements in page that you need to know which one an event occurred on to do something with that specific instance.
Solution
findGive all common elements a common class
Apply event listener to a class. this inside event handler is the matching selector element the event occurred on
Traverse to outer most repeating container for that instance by starting at this
Use () within that container to isolate other elements specific to that instance
HTML

jQuery
$(function() {
  $('.delete').on('click', function() {


Section 6.6: Document Loading Event .load()
.load().on( "load", handler)If you want your script to wait until a certain resource was loaded, such as an image or a PDF you can use , which is a shortcut for shortcut for . HTML

jQuery


Chapter 7: DOM Manipulation
Section 7.1: Creating DOM elements
The jQuery function (usually aliased as $) can be used both to select elements and to create new elements.

You can optionally pass a second argument with element attributes:

'<a>' --> The first argument specifies the type of DOM element you want to create. In this example it's an anchor but could be anything on this list. See the specification for a reference of the a element.
 'href': 'http://stackexchange.com' {} --> the second argument is a JavaScript Object containing attribute name/value pairs.
<a name:value<a href="http://stackexchange.com"></athe 'name':'value' pairs will appear between the < > of the first argument, for example > which for our example would be >
Section 7.2: Manipulating element classes
Assuming the page includes an HTML element like:

hasClass(), addClass(), removeClasstoggleClassjQuery provides useful functions to manipulate DOM classes, most notably () and (). These functions directly modify the class attribute of the matched elements.

Toggle a class
toggleClassGiven the example markup, we can add a class with our first .():

".small-paragraph").hasClass("pretty"Now this would return true: $()
toggleClass provides the same effect with less code as:


toggle Two classes:

Boolean to add/remove classes:

Function for class toggle (see example further down to avoid an issue)

Used in examples:

Examples:
Use the element index to toggle classes odd/even

More complex toggleClass example, given a simple grid markup

Simple functions for our examples:


If the row has a gridfooter class, remove the odd/even classes, keep the rest.

else return oldClassesThe classes that get returned are what is effected. Here, if an element does not have a gridfooter, add a class for even/odd. This example illustrates the return of the OLD class list. If this ; is removed, only the new classes get added, thus the row with a gridfooter class would have all classes removed had we not returned those old ones - they would have been toggled (removed) otherwise.

Section 7.3: Other API Methods
jQuery offers a variety of methods that can be used for DOM manipulation.
The first is the .empty() method.
Imagine the following markup:


'#content').emptyBy calling $(();, the inner div would be removed. This could also be achieved by using
'#content').html(''$();.
Another handy function is the .closest() function:

If you wanted to find the closest row to a button that was clicked within one of the row cells then you could do this:

thisSince there will probably be multiple rows, each with their own delete buttons, we use $() within the .click() function to limit the scope to the button we actually clicked.
If you wanted to get the id of the row containing the Delete button that you clicked, you could so something like this:

It is usually considered good practise to prefix variables containing jQuery objects with a $ (dollar sign) to make it clear what the variable is.

and there is also a .parent() function as well:

parent.() only goes up one level of the DOM tree so it is quite inflexible, if you were to change the delete button to be contained within a span for example, then the jQuery selector would be broken.
Chapter 8: DOM Traversing
Section 8.1: Select children of element
children()To select the children of an element you can use the  method.

.parentChange the color of all the children of the  element:

The method accepts an optional selector argument that can be used to filter the elements that are returned.

Section 8.2: Get next element
.next()To get the next element you can use the  method.

.next()If you are standing on the "Anna" element and you want to get the next element, "Paul", the  method will allow you to do that.

The method takes an optional selector argument, which can be used if the next element must be a certain kind of element.

If the next element is not of the type selector then an empty set is returned, and the modifications will not do anything.
// Next element is not a ".mark", nothing will be done in this case
$(".anna").next(".mark").css("color", "green");
Section 8.3: Get previous element
.prev()To get the previous element you can use the  method.


prevIf you are standing on the "Anna" element and you want to get the previous element, "Mark", the .() method will allow you to do that.

The method takes an optional selector argument, which can be used if the previous element must be a certain kind of element.

If the previous element is not of the type selector then an empty set is returned, and the modifications will not do anything.
// Previous element is not a ".paul", nothing will be done in this case
$(".anna").prev(".paul").css("color", "green");
Section 8.4: Filter a selection
filterTo filter a selection you can use the .() method.
The method is called on a selection and returns a new selection. If the filter matches an element then it is added to the returned selection, otherwise it is ignored. If no element is matched then an empty selection is returned.
The HTML
This is the HTML we will be using.

Selector
Filtering using selectors is one of the simpler ways to filter a selection.
$("li").filter(":even").css("color", "green"); // Color even elements green
$("li").filter(".one").css("font-weight", "bold"); // Make ".one" bold
Function
Filtering a selection using a function is useful if it is not possible to use selectors.
The function is called for each element in the selection. If it returns a true value then the element will be added to the returned selection.

Elements
You can filter by DOM elements. If the DOM elements are in the selection then they will be included in the returned selection.

Selection
You can also filter a selection by another selection. If an element is in both selections then it will be included in the returned selection.

Section 8.5: find() method
.find() method allows us to search through the descendants of these elements in the DOM tree and construct a new jQuery object from the matching elements.
HTML

jQuery
 $('.parent').find('.children[name="second"] ul li').css('font-weight','bold');
Output
A1
A2
A3
B1 B2
 B3
 Section 8.6: Iterating over list of jQuery elements
When you need to iterate over the list of jQuery elements.
Consider this DOM structure:

To print the text present in all the div elements with a class of red:

div.redjQuery(), like so: $(elecss() or hideTip: key is the index of the  element we're currently iterating over, within its parent. ele is the HTML element, so we can create a jQuery object from it using $() or ). After, we can call any jQuery method on the object, like () etc. In this example, we just pull the text of the object.
Section 8.7: Selecting siblings
siblingsTo select siblings of an item you can use the .() method.
A typical example where you want to modify the siblings of an item is in a menu:

When the user clicks on a menu item the selected class should be added to the clicked element and removed from its siblings:

The method takes an optional selector argument, which can be used if you need to narrow down the kinds of siblings you want to select:

Section 8.8: closest() method
Returns the first element that matches the selector starting at the element and traversing up the DOM tree.
HTML

jQuery

Output

first() method : The first method returns the first element from the matched set of elements.
HTML

JQuery

Output:

Chapter 9: CSS Manipulation
Section 9.1: CSS - Getters and Setters
CSS Getter
cssThe .() getter function can be applied to every DOM element on the page like the following:

"selector"This line will return the computed width of the specified element, each CSS property you provide in the parentheses will yield the value of the property for this $() DOM element, if you ask for CSS attribute that doesn't exist you will get undefined as a response. You also can call the CSS getter with an array of attributes:

this will return an object of all the attributes with their values:
Object {animation: "none 0s ease 0s 1 normal none running", width: "529px"}
CSS Setter
cssThe .() setter method can also be applied to every DOM element on the page.

"selector"This statement set the width of the $() to 500px and return the jQuery object so you can chain more methods to the specified selector.
cssThe .() setter can also be used passing an Object of CSS properties and values like:
$("body").css({"height": "100px", width:100, "padding-top":40, paddingBottom:"2em"});
importantAll the changes the setter made are appended to the DOM element style property thus affecting the elements' styles (unless that style property value is already defined as ! somewhere else in styles).
Section 9.2: Increment/Decrement Numeric Properties
Numeric CSS properties can be incremented and decremented with the += and -= syntax, respectively, using the
css.() method:


Section 9.3: Set CSS property
Setting only one style:

Setting multiple styles at the same time:

Section 9.4: Get CSS property
.css(propertyName)To get an element's CSS property you can use the  method:


Chapter 10: Element Visibility
Parameter	Details
.hide(), .show() and .toggle()When passed, the effects of  are animated; the element(s) will
Duration
gradually fade in or out.
Section 10.1: Overview

Section 10.2: Toggle possibilities
toggle()Simple  case

With specific duration

...and callback

...or with easing and callback.
function toggleEasingAndCallback() {
  // You may use jQueryUI as the core only supports linear and swing easings
  $(".target4").toggle("slow","linear",function(){alert('now do something');});  

...or with a variety of options.

slideToggleIt's also possible to use a slide as animation with ()

fadeToggle...or fade in/out by changing opacity with ()

toggleClass...or toggle a class with ()

toggleA common case is to use () in order to show one element while hiding the other (same class)

All the above examples can be found here
Chapter 11: Append
Parameters	Details content	Possible types: Element, HTML string, text, array, object or even a function returning a string.
Section 11.1: Ecient consecutive .append() usage
Starting out:
HTML

JS

Appending inside a loop
You just received a big array of data. Now it's time to loop through and render it on the page.
Your first thought may be to do something like this:

This is perfectly valid and will render exactly what you'd expect, but...
DO NOT do this.
Remember those 300+ rows of data?
<tableEach one will force the browser to re-calculate every element's width, height and positioning values, along with any other styles - unless they are separated by a layout boundary, which unfortunately for this example (as they are descendants of a > element), they cannot.
At small amounts and few columns, this performance penalty will certainly be negligible. But we want every millisecond to count.
Better options
1. Add to a separate array, append after loop completes

Out of these options, this one relies on jQuery the most.
2. Using modern Array.* methods

Functionally equivalent to the one before it, only easier to read.
3. Using strings of HTML (instead of jQuery built-in methods)

Perfectly valid but again, not recommended. This forces jQuery to parse a very large amount of text at once and is not necessary. jQuery is very good at what it does when used correctly.
4. Manually create elements, append to document fragment


My personal favorite. This illustrates a general idea of what jQuery does at a lower level.
Dive deeper
jQuery source viewer Array.prototype.join()
Array.prototype.map()
Array.prototype.reduce() document.createDocumentFragment() document.createTextNode()
 Google Web Fundamentals - Performance
 Section 11.2: jQuery append
HTML

Script

Section 11.3: Appending an element to a container
Solution 1:

Solution 2:

Both solutions are appending the element #child (adding at the end) to the element #parent.
Before:

After:

append() or .appendTocloneNote: When you append content that already exsists in the document, this content will be removed from its original parent container and appended to the new parent container. So you can't use .() to clone an element. If you need a clone use .() -> [http://api.jquery.com/clone/][1]

Chapter 12: Prepend
Section 12.1: Prepending an element to a container
Solution 1:

Solution 2:

Both solutions are prepending the element #child (adding at the beginning) to the element #parent.
Before:

After:

Section 12.2: Prepend method
prepend() - Insert content, specified by the parameter, to the beginning of each element in the set of matched
elements.
prepend( content [, content ] )1. 

prepend(function)2. 
version: 1.4JQuery  onwards you can use callback function as the argument. Where you can get arguments as index position of the element in the set and the old HTML value of the element. Within the function, this refers to the current element in the set.



Chapter 13: Getting and setting width and height of an element
Section 13.1: Getting and setting width and height (ignoring border)
Get width and height:

Set width and height:

Section 13.2: Getting and setting innerWidth and innerHeight (ignoring padding and border)
Get width and height:

Set width and height:

Section 13.3: Getting and setting outerWidth and outerHeight (including padding and border)
Get width and height (excluding margin):

Get width and height (including margin):

Set width and height:

Chapter 14: jQuery .animate() Method
Parameter	Details
propertiesAn object of CSS properties and values that the animation will move towardduration(default: 400) A string or number determining how long the animation will runeasing(default: swing) A string indicating which easing function to use for the transitioncompleteA function to call once the animation is complete, called once per matched element.startspecifies a function to be executed when the animation begins.stepspecifies a function to be executed for each step in the animation.queuea Boolean value specifying whether or not to place the animation in the effects queue.progressspecifies a function to be executed after each step in the animation.donespecifies a function to be executed when the animation ends.failspecifies a function to be executed if the animation fails to complete.             a map of one or more CSS properties from the styles parameter, and their corresponding easing specialEasing functions.
always	specifies a function to be executed if the animation stops without completing.
Section 14.1: Animation with callback
fadeIn(), hide(), slideDownSometimes we need to change words position from one place to another or reduce size of the words and change the color of words automatically to improve the attraction of our website or web apps. JQuery helps a lot with this concept using () but its functionality are limited and it only done the specific task which assign to it.
animatewidth:200Jquery fix this problem by providing an amazing and flexible method called .(). This method allows to set custom animations which is used css properties that give permission to fly over borders. for example if we give css style property as ; and current position of the DOM element is 50, animate method reduce current position value from given css value and animate that element to 150.But we don't need to bother about this part because animation engine will handle it.

animateList of css style properties that allow in .() method.
animate backgroundPositionX, backgroundPositionY, borderWidth, borderBottomWidth, borderLeftWidth, borderRightWidth, borderTopWidth, borderSpacing, margin, marginBottom, marginLeft, marginRight, marginTop, outlineWidth, padding, paddingBottom, paddingLeft, paddingRight, paddingTop, height, width, maxHeight, maxWidth, minHeight, minWidth, fontSize, bottom, left, right, top, letterSpacing,  wordSpacing, lineHeight, textIndent, Speed specified in .() method.


animateEasing specified in .() method.
"swing"
"linear"
Here is some examples with complex animation options.
Eg 1:

Eg 2:

Chapter 15: jQuery Deferred objects and Promises
jQuery promises are a clever way of chaining together asynchronous operations in a building-block manner. This replaces old-school nesting of callbacks, which are not so easily reorganised.
Section 15.1: jQuery ajax() success, error VS .done(), .fail()
success and Error : A success callback that gets invoked upon successful completion of an Ajax request.
A failure callback that gets invoked in case there is any error while making the request.
Example:

.done() and .fail() :
.ajax().done(function(data, textStatus, jqXHR){}); Replaces method .success() which was deprecated in jQuery
1.8.This is an alternative construct for the success callback function above.
.ajax().fail(function(jqXHR, textStatus, errorThrown){}); Replaces method .error() which was deprecated in jQuery
1.8.This is an alternative construct for the complete callback function above.
Example:

Section 15.2: Basic promise creation
Here is a very simple example of a function that "promises to proceed when a given time elapses". It does that by creating a new Deferred object, that is resolved later and returning the Deferred's promise:


And use like this:


Chapter 16: Ajax
Parameter	Details
urlSpecifies the URL to which the request will be sentsettingsan object containing numerous values that affect the behavior of the requesttypeThe HTTP method to be used for the requestdataData to be sent by the requestsuccessA callback function to be called if the request succeedserrorA callback to handle error            An object of numeric HTTP codes and functions to be called when the response has the statusCode corresponding code
dataType	The type of data that you're expecting back from the server
            Content type of the data to sent to the server. Default is "application/x-www-form-urlencoded; contentType charset=UTF-8"
context	Specifies the context to be used inside callbacks, usually this which refers to the current target.
Section 16.1: Handling HTTP Response Codes with $.ajax()
done, .fail and .alwaysIn addition to . promise callbacks, which are triggered based on whether the request was
successful or not, there is the option to trigger a function when a specific HTTP Status Code is returned from the server. This can be done using the statusCode parameter.

As official jQuery documentation states:
If the request is successful, the status code functions take the same parameters as the success callback; if it results in an error (including 3xx redirect), they take the same parameters as the error callback.
Section 16.2: Using Ajax to Submit a Form
Sometimes you may have a form and want to submit it using ajax.
Suppose you have this simple form -

document).readyThe following jQuery code can be used (within a $( call) -

Explanation
thisvar $form = $() - the form, cached for reuse
'#ajax_form').submit(function(event$(){ - When the form with ID "ajax_form" is submitted run this function and pass the event as a parameter.
event.preventDefault(); - Prevent the form from submitting normally (Alternatively we can use return
ajaxfalse after the ({}); statement, which will have the same effect)
urlform.attr('action': $), - Get the value of the form's "action" attribute and use it for the "url" property.
form.serializedata: $(), - Converts the inputs within the form into a string suitable for sending to the server. In this case it will return something like "name=Bob&email=bob@bobsemailaddress.com"
Section 16.3: All in one examples
Ajax Get:
Solution 1:

Solution 2:

Ajax Load: Another ajax get method created for simplcity

.load can also be called with additional data. The data part can be provided as string or object.

If .load is called with a callback method, the request to the server will be a post

Ajax Post:
Solution 1:

Solution 2:

Ajax Post JSON:


Ajax Get JSON:
Solution 1:

Solution 2:

Section 16.4: Ajax File Uploads
1. A Simple Complete Example
We could use this sample code to upload the files selected by the user every time a new file selection is made.

 


Now let's break this down and inspect it part by part.
2. Working With File Inputs
This MDN Document ( Using files from web applications ) is a good read about various methods on how to handle file inputs. Some of these methods will also be used in this example.
Before we get to uploading files, we first need to give the user a way to select the files they want to upload. For this purpose we will use a file input. The multiple property allows for selecting more than one files, you can remove it if you want the user to select one file at a time.

change eventWe will be using input's  to capture the files.

Inside the handler function, we access the files through the files property of our input. This gives us a FileList, which is an array like object.
3. Creating and Filling the FormData
In order to upload files with Ajax we are going to use FormData.

FileList we have obtained in the previous step is an array like object and can be iterated using various methods including for loop, for...of loop and jQuery.each. We will be sticking with the jQuery in this example.

We will be using the append method of FormData to add the files into our formdata object.

We can also add other data we want to send the same way. Let's say we want to send some personal information we have received from the user along with the files. We could add this this information into our formdata object.


4. Sending the Files With Ajax

We set processData and contentType properties to false. This is done so that the files can be send to the server and be processed by the server correctly.

Chapter 17: Checkbox Select all with automatic check/uncheck on other
checkbox change
I've used various Stackoverflow examples and answers to come to this really simple example on how to manage "select all" checkbox coupled with an automatic check/uncheck if any of the group checkbox status changes. Constraint: The "select all" id must match the input names to create the select all group. In the example, the input select all ID is cbGroup1. The input names are also cbGroup1
Code is very short, not plenty of if statement (time and resource consuming).
Section 17.1: 2 select all checkboxes with corresponding group checkboxes
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<p>
<input id="cbGroup1" type="checkbox">Select all
<input name="cbGroup1" type="checkbox" value="value1_1">Group1 value 1
<input name="cbGroup1" type="checkbox" value="value1_2">Group1 value 2 <input name="cbGroup1" type="checkbox" value="value1_3">Group1 value 3
</p>
<p>
<input id="cbGroup2" type="checkbox">Select all
<input name="cbGroup2" type="checkbox" value="value2_1">Group2 value 1
<input name="cbGroup2" type="checkbox" value="value2_2">Group2 value 2 <input name="cbGroup2" type="checkbox" value="value2_3">Group2 value 3
</p>
<script type="text/javascript" language="javascript">
    $("input").change(function() {
      $('input[name=\''+this.id+'\']').not(this).prop('checked', this.checked);
      $('#'+this.name).prop('checked', $('input[name=\''+this.name+'\']').length ===
$('input[name=\''+this.name+'\']').filter(':checked').length);          });
</script>
Chapter 18: Plugins
Section 18.1: Plugins - Getting Started
hide(), .fadeIn(), .hasClassThe jQuery API may be extended by adding to its prototype. For example, the existing API already has many functions available such as .(), etc.
fnThe jQuery prototype is exposed through $., the source code contains the line

Adding functions to this prototype will allow those functions to be available to be called from any constructed jQuery object (which is done implicitly with each call to jQuery, or each call to $ if you prefer).
'.active'A constructed jQuery object will hold an internal array of elements based on the selector passed to it. For example, $() will construct a jQuery object that holds elements with the active class, at the time of calling (as in, this is not a live set of elements).
The this value inside of the plugin function will refer to the constructed jQuery object. As a result, this is used to represent the matched set.
Basic Plugin:

jsFiddle example
Chainability & Reusability
Unlike the example above, jQuery Plugins are expected to be Chainable.
What this means is the possibility to chain multiple Methods to a same Collection of Elements like
".warn").append("WARNING! ").css({color:"red"}) (see how we used the .css() method after the .appendwarn$((), both methods apply on the same . Collection)
Allowing one to use the same plugin on different Collections passing different customization options plays an important role in Customization / Reusability


jsFiddle demo
Freedom
The above examples are in the scope of understanding basic Plugin creation. Keep in mind to not restrict a user to a limited set of customization options.
highlightSay for example you want to build a .() Plugin where you can pass a desired text String that will be highlighted and allow maximal freedom regarding styles:

the user can now pass a desired text and have complete control over the added styles by using a custom CSS class:

jsFiddle example
Credits
Thank you greatly to all the people from Stack Overflow Documentation who helped provide this content, more changes can be sent to web@petercv.com for new content to be published or updated
A.JChapters 1, 4 and 8acdcjuniorChapters 1 and 4AlexChapter 15Alex CharChapter 10Alon EitanChapter 5amflareChapters 1 and 5Andrew BrookeChapter 16AnilChapter 1Arun Prasad E SChapter 16AshiquzzamanChapter 15Ashkan Mobayen Khiabani Chapters 9, 11, 12, 13 and 16
AssimilaterChapter 7AthafoudChapter 16ban17Chapter 4Ben HChapter 16BiponChapters 3 and 11Brandt SolovijChapter 9Brock DavisChapter 7bwegsChapter 1Castro RoyChapter 2charlietflChapter 6csbarnesChapter 16DarshakChapter 11DavidChapter 2DefyGravityChapter 7DelightedD0DChapter 2DeryckChapters 7 and 11devlin carnateChapter 2dlssoChapter 8Dr. J. TestingtonChapter 16Emanuel VintilăChapter 5empiricChapters 11 and 12Flyer53Chapter 11Fueled By CoffeeChapter 1Gone CodingChapters 6 and 15hasanChapters 2 and 18Horst JahnsChapter 6IcemanChapter 2Igor RaushChapter 1J FChapter 5j08691Chapter 9Jatniel PrinslooChapter 6jkdevChapters 1 and 5JLFChapter 2John CChapters 1 and 16John SlegersChapter 2Jonathan MichalikChapter 9
Joram van den BoezemChapter 5kapantzakChapter 2Kevin KatzkeChapter 1KeyslingerChapter 2LacrioqueChapter 16LiamChapter 5Luca PutzuChapters 1 and 6Mark SchultheissChapters 5 and 7mark.hchChapter 8martincarlin87Chapter 7Matas VaitkeviciusChapter 1MelanieChapter 2MottieChapter 1NealChapter 1NhanChapter 5ni8mrChapter 1Nico WesterdaleChapter 5Nirav JoshiChapter 16NotJustinChapter 6NuxChapter 2ochiChapter 4OzanChapter 16Pranav C BalanChapter 12ProtoChapter 11RenierChapter 3rmondesilvaChapter 8Roko C. BuljanChapters 1, 9 and 18Rupali PemareChapter 10ScimonsterChapters 4 and 5seceliteChapter 5SGS VenkateshChapter 8Shaunak DChapters 1, 2 and 16Shekhar PankajChapter 2Shlomi HaverChapter 9SimplansChapter 14Sorangwala AbbasaliChapters 2 and 9ssbChapter 2still_learningChapter 7sucilChapter 8SuganyaChapter 1Sunny R GuptaChapter 6Sverri M. OlsenChapter 8TheDeadMedicChapter 5Theodore K.Chapter 10The_OutsiderChapters 8 and 10Travis JChapters 1, 2 and 18Upal RoyChapter 5user1851673Chapter 17user2314737Chapter 10VJSChapter 14Washington GuedesChapter 6WOUNDEDStevenJonesChapter 2Yosvel QuinteroChapters 1 and 16
Zakaria AcharkiChapter 6ZazChapters 2 and 10
You may also like







GoalKicker.com - jQuery(r) Notes for Professionals	1

GoalKicker.com - jQuery(r) Notes for Professionals	1

GoalKicker.com - jQuery(r) Notes for Professionals	1

GoalKicker.com - jQuery(r) Notes for Professionals	23

GoalKicker.com - jQuery(r) Notes for Professionals	23

GoalKicker.com - jQuery(r) Notes for Professionals	23

GoalKicker.com - jQuery(r) Notes for Professionals	1

GoalKicker.com - jQuery(r) Notes for Professionals	1

GoalKicker.com - jQuery(r) Notes for Professionals	1







