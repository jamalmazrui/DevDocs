<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:18.75pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:132%;
	font-size:13.0pt;
	font-family:"Calibri",sans-serif;
	color:#130F35;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:16.75pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:22.0pt;
	font-family:"Calibri",sans-serif;
	color:black;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:19.05pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:18.0pt;
	font-family:"Calibri",sans-serif;
	color:#130F35;
	font-weight:normal;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:19.05pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:18.0pt;
	font-family:"Calibri",sans-serif;
	color:#130F35;
	font-weight:normal;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:23.35pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Calibri",sans-serif;
	color:#130F35;}
h5
	{mso-style-link:"Heading 5 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:23.35pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Calibri",sans-serif;
	color:#130F35;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:.75pt;
	margin-bottom:8.0pt;
	margin-left:.75pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;
	color:black;}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{margin-top:0in;
	margin-right:.75pt;
	margin-bottom:8.0pt;
	margin-left:.75pt;
	line-height:107%;
	font-size:11.0pt;
	font-family:"Calibri",sans-serif;
	color:black;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Calibri",sans-serif;
	color:#130F35;
	font-weight:bold;}
span.Heading5Char
	{mso-style-name:"Heading 5 Char";
	mso-style-link:"Heading 5";
	font-family:"Calibri",sans-serif;
	color:#130F35;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Calibri",sans-serif;
	color:#130F35;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri",sans-serif;
	color:black;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri",sans-serif;
	color:#130F35;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.0pt 842.0pt;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:8.5in 11.0in;
	margin:77.1pt 65.6pt 62.4pt 1.0in;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:595.0pt 842.0pt;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection3
	{page:WordSection3;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal style='margin-top:0in;margin-right:523.0pt;margin-bottom:
0in;margin-left:-1.0in;text-indent:0in;line-height:107%'><img width=792
height=1123 src="Best%20Web%20Scraping%20Libraries_files/image001.jpg"><br
clear=ALL>
</p>

</div>

<span style='font-size:13.0pt;line-height:132%;font-family:"Calibri",sans-serif;
color:#130F35'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.75pt;
margin-left:-.25pt;line-height:107%'><b><span style='font-size:22.0pt;
line-height:107%;color:black'>Introduction  </span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:.2pt;
margin-left:-.25pt;line-height:132%'><span style='color:black'>Although web
scraping in its totality is a complex and nuanced field of knowledge, building
your own basic web scraper is not all that difficult. And that’s mostly due to
coding languages such as Python. Python is one of the easiest ways to get
started as it is an object-oriented language. Python’s classes and objects are
significantly easier to use than in any other language. Additionally, many
libraries exist that make building a tool for web scraping in Python an
absolute breeze. This </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:3.1pt;
margin-left:-.25pt;line-height:107%'><span style='color:black'>document will go
through four most popular libraries and the basics on </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.75pt;text-indent:0in;line-height:107%'><span style='color:black'>how
to get started in web scraping.                                           </span><br
clear=all style='page-break-before:always'>
</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='color:black'> </span></p>

<p class=MsoToc1><a href="#_Toc36329"><b><span style='font-size:13.0pt;
line-height:107%;color:black;text-decoration:none'>Why Use Python?</span></b><span
style='color:black;text-decoration:none'>                                                                                                                                                                     </span><span style='font-size:13.0pt;line-height:107%;color:black;text-decoration:none'>4 </span></a></p>

<p class=MsoToc2><a href="#_Toc36330"><span style='font-size:13.0pt;line-height:
107%;color:black;text-decoration:none'>Python advantages for web scraping</span><span
style='color:black;text-decoration:none'>                                                                                                                           </span><span style='font-size:13.0pt;line-height:107%;color:black;text-decoration:none'>4 </span></a></p>

<p class=MsoToc2><a href="#_Toc36331"><span style='font-size:13.0pt;line-height:
107%;color:black;text-decoration:none'>Comparing Python to other languages</span><span
style='color:black;text-decoration:none'>                                                                                                                       </span><span style='font-size:13.0pt;line-height:107%;color:black;text-decoration:none'>5 </span></a></p>

<p class=MsoToc1><a href="#_Toc36332"><b><span style='font-size:13.0pt;
line-height:107%;color:black;text-decoration:none'>Web Scraping Libraries:
Where to Start?</span></b><span style='color:black;text-decoration:none'>                                                                                                                </span><span style='font-size:13.0pt;line-height:107%;color:black;text-decoration:none'>7 </span></a></p>

<p class=MsoToc1><a href="#_Toc36333"><b><span style='font-size:13.0pt;
line-height:107%;color:black;text-decoration:none'>Puppeteer: Scraping With a
Headless Browser</span></b><span style='color:black;text-decoration:none'>                                                                                                  </span><span style='font-size:13.0pt;line-height:107%;color:black;text-decoration:none'>8 </span></a></p>

<p class=MsoToc1><a href="#_Toc36334"><b><span style='font-size:13.0pt;
line-height:107%;color:black;text-decoration:none'>Web Scraping With Selenium</span></b><span
style='color:black;text-decoration:none'>                                                                                                                                       </span><span style='font-size:13.0pt;line-height:107%;color:black;text-decoration:none'>25 </span></a></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
margin-left:0in;text-indent:0in;line-height:107%'><b><span style='color:black'>Web
Scraping With lxml                                                                                                               </span></b><span
style='color:black'>34 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
margin-left:0in;text-indent:0in;line-height:107%'><b><span style='color:black'>Using
Beautiful Soup to Parse Data                                                                                            </span></b><span
style='color:black'>48 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.35pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:25.3pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='color:black'> </span></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:13.5pt;line-height:107%;font-family:"Arial",sans-serif'>           </span></p>

<h1 style='margin-left:-.25pt'><a name="_Toc36329">Why Use Python? </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.8pt;
margin-left:-.25pt'>If you need to start writing code for web scraping, it is
definitely worth it to learn Python. The best part is that Python, compared to
other programming languages, is easy to learn, clear to read, and simple to
write in. </p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:19.0pt;margin-left:
-.25pt'><a name="_Toc36330"><span style='color:black'>Python advantages for web
scraping </span></a></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'><b>Diverse libraries. &#8203;</b>Python has a fantastic
collection of libraries such as <i>BeautifulSoup, Selenium, lxml,&#8203;</i>
and much more. These libraries are a perfect fit for web scraping and, also,
for further work with extracted data. You will find more information about
these libraries below. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'><b>Easy to use. &#8203;</b>To put it simply, Python is easy
to code. Of course, it is wrong to believe that you would easily write a code
for web scraping without any programming knowledge. But, compared to other
languages, it is much easier to use as you do not have to add semicolons like
“;” or curly-brackets “{}” everywhere. Many developers agree that this is the
reason why Python is less messy. Furthermore, Python syntax is clear and easy
to read. Developers can simply navigate between different blocks in the code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'><b>Saves time. &#8203;</b>As you probably know, web
scraping was created to simplify time-consuming tasks like collecting vast
amounts of data manually. Using Python for web scraping is similar because you
are able to write a little bit of code that completes a large task. Python
saves a bunch of developers’ time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:20.7pt;
margin-left:-.25pt'><b>Community. &#8203;</b>As Python is one of the most
popular programming languages, it also has a very active community. Developers
are sharing their knowledge on various questions, so if you are struggling
while writing the code, you can always search for help.<sub><span
style='font-size:17.0pt;line-height:132%;font-family:"Arial",sans-serif;
color:black'> </span></sub></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:19.0pt;margin-left:
-.25pt'><a name="_Toc36331"><span style='color:black'>Comparing Python to other
languages </span></a></h2>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Python is the most popular programming language for web
scraping because it can handle almost all processes related to data extraction
smoothly. However, there are other languages that can be used by developers for
web scraping such as &#8203;<i>Ruby, C ++, PHP&#8203;</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>All of these languages have their pros and cons compared to
Python, so let’s compare them in terms of web scraping. <br clear=all
style='page-break-before:always'>
</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:22.6pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'><img width=624 height=545 id="Picture 597"
src="Best%20Web%20Scraping%20Libraries_files/image002.jpg"> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.8pt;
margin-left:-.25pt'>Python is a perfect fit for building web scrapers and
extracting data as it has a large selection of libraries, and an active
community to search for help if you have issues with coding. One of the most
important parts why use Python for web scraping is that Python is easy to
learn, clear to read, and simple to write in. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:18.0pt;line-height:107%;color:black'>           </span></p>

<h1 style='margin-left:-.25pt'><a name="_Toc36332">Web Scraping Libraries:
Where to Start? </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:21.95pt;
margin-left:-.25pt;line-height:132%'><span style='color:black'>Your dev team,
of course, will be working with various libraries, integration tools, etc.
There are many libraries to choose from. However, we list out the most popular,
tried and tested libraries and tools you might need when building your
infrastructure. Here are the top four: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:21.95pt;
margin-left:.5in;text-indent:-.25in;line-height:132%'><span style='font-size:
15.5pt;line-height:132%;font-family:"Arial",sans-serif'>&#9679;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><b><span
style='color:black'>Puppeteer&#8203;</span></b><span style='color:black'> for
JavaScript-heavy websites. If you are scraping hotel listings, e-commerce
product pages, or similar – this will become your main headache. Many modern
sites use JavaScript to load content asynchronously (i.e., hides part of the
content to not be visible during the initial page load). The easiest way to
manage JavaScript-heavy sites is to use a headless browser – a browser, but
without a graphical user interface. This is where Puppeteer comes into the
picture.  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:21.9pt;
margin-left:.5in;text-indent:-.25in;line-height:132%'><span style='font-size:
15.5pt;line-height:132%;font-family:"Arial",sans-serif'>&#9679;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><b><span
style='color:black'>Selenium&#8203;</span></b><span style='color:black'>.
Similarly to Puppeteer, it is a solution that helps control headless browsers.
It is one of the more popular browser automation tools out there, so
experimenting with both is suggested.  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:21.1pt;
margin-left:.5in;text-indent:-.25in;line-height:132%'><span style='font-size:
15.5pt;line-height:132%;font-family:"Arial",sans-serif'>&#9679;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><b><span
style='color:black'>lxml&#8203;</span></b><span style='color:black'>. lxml is
one of the fastest and feature-rich libraries for processing XML and HTML in
Python. By using the lxml library, XML and HTML documents can be created,
parsed, and queried. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:.2pt;
margin-left:.5in;text-indent:-.25in;line-height:132%'><span style='font-size:
15.5pt;line-height:132%;font-family:"Arial",sans-serif'>&#9679;<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><b><span
style='color:black'>Beautiful soup&#8203;</span></b><span style='color:black'>
for parsing. We will cover parsing a little bit later in this article, but to
put it simply, there is no real point to web scraping without being able to
parse your data to make it more </span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:.35pt;
margin-bottom:3.1pt;margin-left:0in;text-align:center;text-indent:0in;
line-height:107%'><span style='color:black'>readable. Beautiful soup is a
Python package used for parsing </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:.2pt;
margin-left:36.5pt;line-height:107%'><span style='color:black'>HTML and XML
documents. </span></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:21.75pt;margin-left:
-.25pt'><a name="_Toc36333">Puppeteer: Scraping With a Headless Browser </a></h1>

<h3 style='margin-left:-.25pt'>Automating web scraping </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Generally, there are two methods of accessing and parsing
web pages. The first method uses packages e.g., Axios. It directly sends a get
request to the web page and receives HTML content. This can then be parsed
using packages like Cheerio.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Though this is a fast method, it has its limitations. The
biggest is that it cannot handle dynamic sites – sites that are rendered using
JavaScript. The easiest way to manage these sites is to open a browser and load
the site.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.0pt;
margin-left:-.25pt'>Unfortunately, loading a browser would take a lot of
resources because it has to load a lot of other things like the toolbar and
buttons. These UI elements are not needed when everything is being controlled
with code. Fortunately, there are better solutions – headless browsers. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:19.05pt;
margin-left:-.25pt;line-height:107%'><span style='font-size:18.0pt;line-height:
107%'>What is a headless browser? </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:0in;
margin-left:-.25pt'>A headless browser is simply a browser but without a
graphical user interface. Think of it as a hidden browser. Headless browsers
have complete functionality offered by a browser while being faster and taking
up a lot less memory because there is no user interface. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt;line-height:107%'>Everything is controlled programmatically.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:0in;
margin-left:-.25pt'>The most commonly used browsers, Chrome and Firefox,
support headless mode. There are few more browsers with headless mode
supported, for example, Splash, Chromium, etc. Splash is aimed at </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Python programmers. In this Puppeteer tutorial, we will be
focusing on Chromium.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Chromium is an open-source web browser made by Google. Note
that Chromium and Chrome are two different browsers. Chromium is an open-source
project. Chrome and is built over Chromium by adding many features. In addition
to Chrome, many other browsers are based on Chromium, for example, Microsoft
Edge, Opera, Brave, etc. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.75pt;
margin-left:-.25pt'>Now that we know what a headless browser is, it’s time to
understand the available options to control the browsers programmatically. </p>

<h3 style='margin-left:-.25pt'>Controlling the browsers programmatically </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:5.45pt;margin-bottom:
19.85pt;margin-left:-.25pt;line-height:129%'><span style='font-size:13.5pt;
line-height:129%'>There are several solutions to control headless browsers.
Perhaps the most widely known solution is Selenium. We will cover selenium
later in this article, but to quickly answer is Puppeteer better than selenium
– if you need a lightweight and fast headless browser for web scraping, Google
Puppeteer would be the better choice.  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.45pt;margin-bottom:
1.0pt;margin-left:-.25pt;line-height:129%'><span style='font-size:13.5pt;
line-height:129%'>This Puppeteer tutorial will cover Puppeteer in much detail. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.45pt;margin-bottom:
19.1pt;margin-left:-.25pt;line-height:129%'><span style='font-size:13.5pt;
line-height:129%'>Puppeteer, however, is a Node.js package, making it exclusive
for JavaScript developers. Python programmers, therefore, have a similar option
– Pyppeteer.  </span></p>

<h4 style='margin-left:-.25pt'>Pyppeteer </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'><a href="https://pypi.org/project/pyppeteer/"><span
style='color:#DC1957'>Pyppeteer</span></a><u><span style='color:#DC1957'>&#8203;</span></u><a
href="https://pypi.org/project/pyppeteer/"><span style='color:#130F35;
text-decoration:none'> </span></a>is an unofficial port of Puppeteer for
Python. This also bundles Chromium and works smoothly with it. Pyppeteer can
work with Chrome as well, similar to Puppeteer.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The syntax is very similar as it uses the asyncio library
for Python, except the syntactical differences between Python and JavaScript.
Here are two scripts in JavaScript and Python that load a page and then take a
screenshot of it. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'><b>Puppeteer example: </b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:107.15pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require('puppeteer'); async function main() {   const browser = await
puppeteer.launch();   const page = await browser.newPage();   await
page.goto('https://oxylabs.io/');   await page.screenshot({'path':
'oxylabs_js.png'})   await browser.close(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:409.6pt;margin-bottom:
22.95pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>} main(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.35pt;
margin-left:0in;text-indent:0in;line-height:107%'><b><span style='font-family:
"Arial",sans-serif'>Pyppeteer Example: </span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:323.2pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>import asyncio import
pyppeteer async def main(): </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:63.95pt;margin-bottom:
4.0pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    browser = await
pyppeteer.launch()     page = await browser.newPage()     await
page.goto('https://oxylabs.io/')     await page.screenshot({'path':
'oxylabs_python.png'}) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
5.95pt;margin-left:-.25pt;line-height:111%'><span style='font-size:11.0pt;
line-height:111%;font-family:"Arial",sans-serif;color:black'>  </span><span
style='font-size:11.0pt;line-height:111%;color:black'>&#8203;</span><span
style='font-size:12.0pt;line-height:111%;font-family:"Courier New";color:black'> 
await browser.close() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>asyncio.get_event_loop().run_until_complete(main())
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The code is very similar. For web scraping dynamic
websites, Pyppeteer can be an excellent alternative to Selenium for Python
developers. But for the sake of making a Puppeteer tutorial, the following
sections, we will cover Puppeteer, starting with the installation. </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:20.5pt;margin-left:
-.25pt'>Installation </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Before moving on with this Puppeteer tutorial, let’s get
the basic tools installed.  </p>

<h4 style='margin-left:-.25pt'>Prerequisite </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.4pt;
margin-left:-.25pt;line-height:107%'>There are only two pieces of software that
will be needed: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:132%;font-family:
"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Node.js (which is bundled with npm—the package manager for
Node.js) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.4pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Any code editor </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The only thing that you need to know about Node.js is that
it is a runtime framework. This means that JavaScript code, which typically
runs in a browser, can run without a browser.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Node.js is available for Windows, Mac OS, and Linux. It can
be downloaded at their<a href="https://nodejs.org/en/download/"><span
style='color:#130F35;text-decoration:none'> </span></a><u>&#8203;</u><a
href="https://nodejs.org/en/download/"><span style='color:#DC1957'>official
download page</span></a><span style='color:#DC1957'>&#8203;</span>. </p>

<h4 style='margin-left:-.25pt'>Create node.js project </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Before writing any code to web scrape using node js, create
a folder where JavaScript files will be stored. All the code for Puppeteer is
written in .js files and is run by Node.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.25pt;
margin-left:-.25pt'>Once the folder is created, navigate to this folder and run
the initialization command: </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:12.0pt;line-height:107%;font-family:"Courier New";color:#4A4A4A'>npm
init -y </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This will create a package.json file in the directory. This
file will contain information about the packages that are installed in this
folder. The next step is to install the Node.js Packages in this folder.  </p>

<h4 style='margin-left:-.25pt'>How do you run Puppeteer </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.25pt;
margin-left:-.25pt'>Installing Puppeteer is very easy. Just run the npm install
command from the terminal. Note that the working directory should be the one
which contains package.json: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:24.55pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-family:
"Courier New";color:#4A4A4A'>npm install puppeteer </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.75pt;
margin-left:-.25pt'>Note that Puppeteer is bundled with a full instance of
Chromium. When it is installed, it downloads a recent version of Chromium that
is guaranteed to work with the version of Puppeteer being installed.  </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:19.0pt;margin-left:
-.25pt'><span style='color:black'>Getting started with Puppeteer </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Puppeteer is a promise-based library, which means it
performs asynchronous calls. This Puppeteer tutorial will have all of the
examples in async-await syntax. </p>

<h4 style='margin-left:-.25pt'>Simple example of using Puppeteer </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>Create a new file in your node project directory (the
directory that contains package.json and node_modules). Save this file as
example1.js and add this code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:150.35pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require('puppeteer'); async function main() { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    // Add code here </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:409.6pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>} main(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The code above can be simplified by making the function
anonymous and calling it on the same line: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require('puppeteer'); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>(async () =&gt; { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    // Add code here </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>})(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.55pt;
margin-left:-.25pt'>The required keyword will ensure that the Puppeteer library
is available in the file. The rest of the lines are the placeholder where an anonymous,
asynchronous function is being created and executed. For the next step, launch
the browser.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
25.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const browser = await
puppeteer.launch(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.3pt;
margin-left:-.25pt'>Note that by default, the browser is launched in the
headless mode. If there is an explicit need for a user interface, the above
line can be modified to include an object as a parameter.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.3pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const browser = await
puppeteer.launch({headless:false}); // default is true </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The next step would be to open a page: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const page = await
browser.newPage(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.5pt;
margin-left:-.25pt'>Now that a page or in other words, a tab, is available, any
website can be loaded by simply calling the goto() function: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
25.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>await
page.goto('https://oxylabs.io/'); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Once the page is loaded, the DOM elements, as well the
rendered page is available. This can be verified by taking a quick screenshot: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>await
page.screenshot({path: 'oxylabs_1080.png'}) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>This, however, will create only an 800×600 pixel image. The
reason is that Puppeteer sets an initial page size to 800×600px. This can be
changed by setting the viewport, before taking the screenshot. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:294.4pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> await
page.setViewport({     width: 1920,     height: 1080,   }); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Finally, remember to close the browser: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>await browser.close(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>Putting it altogether, here is the
complete script.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require('puppeteer'); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:164.75pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>(async () =&gt; {  
const browser = await puppeteer.launch();   const page = await
browser.newPage();   await page.setViewport({     width: 1920,     height:
1080, </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:107.15pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  });   await
page.goto('https://oxylabs.io/');   await page.screenshot({path:
'oxylabs_1080.png'})   await browser.close(); })(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Run this file from the terminal using this command:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>node example1.js </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.1pt;
margin-left:-.25pt;line-height:107%'>This should create a new file
oxylabs_1080.png in the same directory. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt;line-height:107%'><b>Bonus tip:&#8203;</b> If you need a
PDF, you can use the pdf() function: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
30.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>await page.pdf({path:
'oxylabs.pdf', format: 'A4'}); </span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:19.05pt;margin-left:
-.25pt'><span style='font-size:18.0pt;line-height:107%;font-weight:normal'>Scraping
an element from a page </span></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:0in;
margin-left:-.25pt'>Puppeteer loads the complete page in DOM. This means that
we can extract any data from the page. The easiest way to do this is to use the
function evaluate(). This allows JavaScript functions like </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>document.querySelector(). Consequently, it lets us extract
any Element from the DOM. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>To understand this, open this link in your preferred
browser:<a href="https://en.wikipedia.org/wiki/Web_scraping"><span
style='color:#DC1957;text-decoration:none'> </span></a><a
href="https://en.wikipedia.org/wiki/Web_scraping"><span style='color:#DC1957'>https://en.wikipedia.org/wiki/Web_scraping</span></a><a
href="https://en.wikipedia.org/wiki/Web_scraping"><span style='color:#130F35;
text-decoration:none'> </span></a> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Once the page is loaded, right-click the heading of the
page, and select Inspect. This should open developer tools with the Elements
tab activated. Here it is visible that the page’s heading is in h1 element,
with id and class both set to firstHeading. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.85pt;
margin-left:-.25pt;line-height:107%'>Now, go to the Console tab in the
developer toolbox and write in this </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>line: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>document.querySelector('#firstHeading')
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt;line-height:107%'>You will immediately see that our desired
tag is extracted. </p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:22.6pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'><img border=0 width=624 height=352 id="Picture 1389"
src="Best%20Web%20Scraping%20Libraries_files/image003.jpg"> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.35pt;
margin-left:-.25pt'>This returns one element from the page. For this particular
element, all we need is text. Text can be easily extracted with this line of
code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>document.querySelector('#firstHeading').textContent
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>The text can now be returned using the return keyword. The
next step is to surround this in the evaluate method. This will ensure that
this querySelector can be run.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:20.75pt;margin-bottom:
22.7pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:114%'><span style='font-size:12.0pt;line-height:114%;font-family:
"Courier New";color:black'>await page.evaluate(() =&gt; {     return
document.querySelector(&quot;#firstHeading&quot;).textContent; }); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.25pt;
margin-left:-.25pt'>The result of the evaluate() function can be stored in a
variable to complete the functionality. Finally, do not forget to close the
browser. Here is the complete script: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require(&quot;puppeteer&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:164.75pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>(async () =&gt; {  
const browser = await puppeteer.launch();   const page = await
browser.newPage();   await
page.goto(&quot;https://en.wikipedia.org/wiki/Web_scraping&quot;);   title =
await page.evaluate(() =&gt; {     return
document.querySelector(&quot;#firstHeading&quot;).textContent.trim(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:294.4pt;margin-bottom:
28.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  });  
console.log(title);   await browser.close(); })(); </span></p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:19.05pt;margin-left:
-.25pt'><span style='font-size:18.0pt;line-height:107%;font-weight:normal'>Scraping
multiple elements </span></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.35pt;
margin-left:-.25pt;line-height:107%'>Extracting multiple elements would involve
three steps: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:13.55pt;text-indent:-13.55pt'><span style='line-height:132%'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>Use of
querySelectorAll to get all elements matching the selector: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>headings_elements =
document.querySelectorAll(&quot;h2 .mw-headline&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:13.55pt;text-indent:-13.55pt'><span style='line-height:132%'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>create an
array, as heading_elements is of type NodeList.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>headings_array =
Array.from(headings_elements); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.35pt;
margin-left:13.55pt;text-indent:-13.55pt'><span style='line-height:132%'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>Call the map()
function can be called to process each element in the array and return it. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>return
headings_array.map(heading =&gt; heading.textContent); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>This of course needs to be surrounded by page.evaluate()
function. Putting everything together, this is the complete script. You can
save this as wiki_toc.js: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
20.1pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require(&quot;puppeteer&quot;); </span></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:12.0pt;line-height:107%;font-family:"Courier New";color:black'> 
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>(async () =&gt; {  
const browser = await puppeteer.launch();   const page = await
browser.newPage();   await
page.goto(&quot;https://en.wikipedia.org/wiki/Web_scraping&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:92.75pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    headings = await
page.evaluate(() =&gt; {     headings_elements =
document.querySelectorAll(&quot;h2 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.95pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>.mw-headline&quot;);    
headings_array = Array.from(headings_elements);     return
headings_array.map(heading =&gt; heading.textContent); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:272.8pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  });  
console.log(headings);   await browser.close(); })(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This file can now be run from your terminal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>node wiki_toc.js </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.25pt;
margin-left:-.25pt'><b>Bonus tip&#8203;</b>: Array.from() function can be
supplied with a map function directly, without a separate call to map.
Depending on the comfort level, the same code can thus be written as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:107.15pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>headings = await
page.evaluate(() =&gt; {     return
Array.from(document.querySelectorAll(&quot;h2 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:164.75pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>.mw-headline&quot;),      
heading =&gt; heading.innerText.trim());   }); </span></p>

<h5 style='margin-left:-.25pt'>Scraping a hotel listing page </h5>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This section will explain how a typical listing page can be
scraped to get a JSON object with all the required information. The concepts
presented in this section will be applicable for any listing, whether it is an
online store, a directory, or a hotel listing.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.55pt;
margin-left:-.25pt'>The example that we will take is an Airbnb. Apply some
filters so that you reach a page similar to the one in the screenprint. In this
particular example, we will be scraping<a
href="https://www.airbnb.com/s/homes?refinement_paths%5B%5D=%2Fhomes&amp;search_type=section_navigation&amp;property_type_id%5B%5D=8"><span
style='color:#130F35;text-decoration:none'> </span></a><u>&#8203;</u><a
href="https://www.airbnb.com/s/homes?refinement_paths%5B%5D=%2Fhomes&amp;search_type=section_navigation&amp;property_type_id%5B%5D=8"><span
style='color:#DC1957'>this Airbnb page</span></a><u><span style='color:#DC1957'>&#8203;</span></u><a
href="https://www.airbnb.com/s/homes?refinement_paths%5B%5D=%2Fhomes&amp;search_type=section_navigation&amp;property_type_id%5B%5D=8"><span
style='color:#130F35;text-decoration:none'> </span></a>that lists 20 hotels. To
scrape all 20 hotels, the first step is to identify the selector for each hotel
section. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
25.05pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>root =
Array.from(document.querySelectorAll(&quot;#FMP-target
[itemprop='itemListElement']&quot;)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.25pt;
margin-left:-.25pt'>This returns a NodeList of length 20 and stores in the
variable root. Note that so far, text or any attribute has not been extracted.
All we have is an array  of elements. This will be done in the map() function. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>hotels = root.map(hotel
=&gt; ({  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>// code here </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>})); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The URL of the photo of the hotel can be extracted with a
code like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
25.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>hotel.querySelector(&quot;img&quot;).getAttribute(&quot;src&quot;)
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Getting the name of the hotel is a little trickier. The
classes used on this page are some random words like _krjbj and _mvzr1f2. These
class names appear to be generated dynamically and may change later on. It is
better to have selectors which do not rely on these class names.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.35pt;
margin-left:-.25pt'>The hotel name can be extracted by combining parentElement
and nextElementSibling selectors: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
1.8pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>hotel.querySelector('ol').parentElement.nextElementSibling.textC
ontent </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.55pt;
margin-left:-.25pt'>The most important concept to understand here is that we
are concatenating querySelectors. Effectively, the first hotel name is being
extracted with this line of code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
9.4pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>document.querySelectorAll(&quot;#FMP-target
[itemprop='itemListElement']&quot;)[0].querySelector('ol').parentElem
ent.nextElementSibling.textContent </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:24.15pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:11.0pt;
line-height:107%;color:black'><img border=0 width=633 height=359
src="Best%20Web%20Scraping%20Libraries_files/image004.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>Finally, we can create an object containing both of these
values. The syntax to create an object is like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Hotel = { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        Name: 'x', </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        Photo: 'y' </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
23.1pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>      } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:6.85pt;
margin-left:-.25pt;line-height:107%'>Putting everything together, here is the
final script. Save it as bnb.js. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>const puppeteer =
require(&quot;puppeteer&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>(async () =&gt; { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  let url = </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&quot;https://www.airbnb.com/s/homes?refinement_paths%5B%5D=%2Fhomes&amp;
search_type=section_navigation&amp;property_type_id%5B%5D=8&quot;;   const
browser = await puppeteer.launch(url);   const page = await
browser.newPage();   await page.goto(url);   data = await page.evaluate(()
=&gt; {     root = Array.from(document.querySelectorAll(&quot;#FMP-target
[itemprop='itemListElement']&quot;));     hotels = root.map(hotel =&gt; ({ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>      Name:
hotel.querySelector('ol').parentElement.nextElementSibling.textC ontent, </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>      Photo:
hotel.querySelector(&quot;img&quot;).getAttribute(&quot;src&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    }));     return
hotels; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:301.6pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  });  
console.log(data);   await browser.close(); })(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Run this file from the terminal using: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>node bnb.js </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.35pt;
margin-left:-.25pt;line-height:107%'>You should be able to see a JSON object
printed on the console. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.85pt;
margin-left:-.25pt;line-height:107%'>We recommend that you look at the official
&#8203;<a href="https://pptr.dev/"><span style='color:#DC1957'>Puppeteer
documentation</span></a> </p>

<p class=MsoNormal style='margin-left:-.75pt;text-indent:0in;line-height:107%'>for
more detailed information.                                       </p>

<h1 style='margin-left:-.25pt'><a name="_Toc36334">Web Scraping With Selenium </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>How does Selenium work? It automates your written script
processes, as the script needs to interact with a browser to perform repetitive
tasks like clicking, scrolling, etc. As described on Selenium’s official
webpage, it is “primarily for automating web applications for testing purposes,
but is certainly not limited to just that.” </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.75pt;
margin-left:-.25pt'>In this guide, on how to web scrape with Selenium, we will
be using Python 3.x. as our main input language (as it is not only the most
common scraping language but the one we closely work with as well).  </p>

<h3 style='margin-left:-.25pt'>Setting up Selenium  </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.5pt;
margin-left:-.25pt'>Firstly, to download the Selenium package, execute the pip
command in your terminal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
25.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>pip install selenium </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>You will also need to install Selenium drivers, as it
enables python to control the browser on OS-level interactions. This should be
accessible via the PATH variable if doing a manual installation.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:28.6pt;
margin-left:-.25pt;line-height:107%'>You can download the drivers for Firefox,
Chrome, and Edge from &#8203;<a
href="https://pypi.org/project/selenium/#drivers"><span style='color:#DC1957'>here</span></a>.<span
style='color:#DC1957'>&#8203;</span> </p>

<h3 style='margin-left:-.25pt'>Quick starting Selenium </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.2pt;
margin-left:-.25pt;line-height:107%'>Let’s begin the automatization by starting
up your browser: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Open up a new browser window (in this instance, Firefox)  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:6.9pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Load the page of your choice (our provided URL) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:200.75pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from selenium import
webdriver browser = webdriver.Firefox() browser.get('http://oxylabs.io/') </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.85pt;
margin-left:-.25pt'>This will launch it in the headful mode. In order to run
your browser in headless mode and run it on a server, it should look something
like this:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:85.55pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from selenium import
webdriver from selenium.webdriver.firefox.options import Options  options =
Options() options.headless = True
options.add_argument(&quot;--window-size=1920,1200&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:164.75pt;margin-bottom:
28.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> driver =
webdriver.firefox(options=options, executable_path=DRIVER_PATH)
driver.get(&quot;https://www.oxylabs.io/&quot;) print(driver.page_source)
driver.quit() </span></p>

<h3 style='margin-left:-.25pt'>Data extraction with Selenium by locating
elements </h3>

<h4 style='margin-left:-.25pt'>find_element  </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Selenium offers a variety of functions to help locate
elements on a page:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.55pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_id </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.55pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_name </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_xpath </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:22.7pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_link_text (find element by using text value) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:132%;font-family:
"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_partial_link_text (find element by matching some
part of a hyperlink text(anchor tag)) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.5pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_tag_name </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.45pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_class_name </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:132%;font-family:
"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>find_element_by_css_selector (find element by using a CSS
selector for id class) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.85pt;
margin-left:-.25pt'>As an example, let’s try and locate the H1 tag on
oxylabs.io homepage with Selenium:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;html&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;head&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        ... something </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;/head&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;body&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;h1
class=&quot;someclass&quot; id=&quot;greatID&quot;&gt; Partner Up With </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Proxy
Experts&lt;/h1&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;/body&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:107.15pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;/html&gt;  h1 =
driver.find_element_by_name('h1') h1 =
driver.find_element_by_class_name('someclass') h1 =
driver.find_element_by_xpath('//h1') h1 = driver.find_element_by_id('greatID') </span></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:12.0pt;line-height:107%;font-family:"Courier New";color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-.25pt;margin-bottom:
23.9pt;margin-left:0in;text-indent:0in;line-height:107%'><span
style='font-size:11.0pt;line-height:107%;color:black'><img border=0 width=633
height=348 src="Best%20Web%20Scraping%20Libraries_files/image005.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.35pt;
margin-left:-.25pt'>You can also use the find_elements (plural form) to return
a list of elements. E.g.:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>all_links =
driver.find_elements_by_tag_name('a') </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.35pt;
margin-left:-.25pt;line-height:107%'>This way, you’ll get all anchors in the
page.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>However, some elements are not easily accessible with an ID
or a simple class. This is why you will need XPath. </p>

<h4 style='margin-left:-.25pt'>XPath </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>XPath is a syntax language that helps find a specific
object in<a href="https://www.w3schools.com/js/js_htmldom.asp"><span
style='color:#130F35;text-decoration:none'> </span></a><u>&#8203;</u><a
href="https://www.w3schools.com/js/js_htmldom.asp"><span style='color:#DC1957'>DOM</span></a><u><span
style='color:#DC1957'>&#8203;</span></u><a
href="https://www.w3schools.com/js/js_htmldom.asp"><span style='color:#130F35;
text-decoration:none'>.</span></a> XPath syntax finds the node from the root
element either through an absolute path or by using a relative path. e.g.:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:0in;
margin-left:.25in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>/&#8203;</b> : Select node from the root. /html/body/div[1]
will find the first div </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.1pt;
margin-left:.25in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>//&#8203;</b>: Select node from the current node no matter
where they are. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:22.65pt;
margin-left:36.5pt;line-height:107%'>//form[1] will find the first form element
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.25in;text-indent:-.25in'><span style='line-height:132%;font-family:
"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><b>[@attributename=’value’]&#8203;</b>: a predicate. It looks for
a specific node or a node with a specific value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>Example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>//input[@name='email']
will find the first input element with the name &quot;email&quot;. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.3pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
line-height:107%;font-family:"Courier New";color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;html&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> &lt;body&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>   &lt;div class =
&quot;content-login&quot;&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>     &lt;form
id=&quot;loginForm&quot;&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>         &lt;div&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>            &lt;input
type=&quot;text&quot; name=&quot;email&quot; value=&quot;Email </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Address:&quot;&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>            &lt;input
type=&quot;password&quot;
name=&quot;password&quot;value=&quot;Password:&quot;&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>         &lt;/div&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;button
type=&quot;submit&quot;&gt;Submit&lt;/button&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>     &lt;/form&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>   &lt;/div&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> &lt;/body&gt;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;/html&gt; </span></p>

<h4 style='margin-left:-.25pt'>WebElement </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>WebElement in Selenium represents an HTML element. Here are
the most commonly used actions:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.45pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>element.text (accessing text element) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>element.click() (clicking on the element)  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:22.7pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>element.get_attribute(‘class’) (accessing attribute)  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.35pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>element.send_keys(‘mypassword’) (sending text to an input) </p>

<h4 style='margin-left:-.25pt'>Slow website render solutions </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Some websites use a lot of JavaScript to render content,
and they can be tricky to deal with as they use a lot of AJAX calls. There are
a few ways to solve this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.6pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>time.sleep(ARBITRARY_TIME) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.15pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>WebDriverWait() </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:6.85pt;
margin-left:-.25pt;line-height:107%'>Example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>try:  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    element =
WebDriverWait(driver, 10).until(         EC.presence_of_element_located((By.ID,
&quot;mySuperId&quot;)) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.2pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    ) finally:   
driver.quit() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This will allow the located element to be loaded after 10
seconds. To dig deeper into this topic, go ahead and check out the official<a
href="https://selenium-python.readthedocs.io/waits.html"><span
style='color:#130F35;text-decoration:none'> </span></a><u>&#8203;</u><a
href="https://selenium-python.readthedocs.io/waits.html"><span
style='color:#DC1957'>Selenium</span></a><a
href="https://selenium-python.readthedocs.io/waits.html"><span
style='color:#DC1957;text-decoration:none'> </span></a><a
href="https://selenium-python.readthedocs.io/waits.html"><span
style='color:#DC1957'>documentation</span></a>.<span style='color:#DC1957'>&#8203;</span>
</p>

<h4 style='margin-left:-.25pt'>Selenium vs Puppeteer </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The biggest reason for Selenium’s popularity and complexity
is that it supports writing tests in multiple programming languages. This
includes C#, Groovy, Java, Perl, PHP, Python, Ruby, Scala, and even JavaScript.
It supports multiple browsers, including Chrome, Firefox, Edge, Internet
Explorer, Opera, and Safari.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>However, for web scraping tasks, Selenium is perhaps more
complex than it needs to be. Remember that Selenium’s real purpose is
functional testing. For effective functional testing, it mimics what a human
would do in a browser. Selenium thus needs three different components: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.25pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>A driver for each browser </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.45pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='line-height:
107%;font-family:"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>Installation of each browser </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:.5in;text-indent:-.25in'><span style='line-height:132%;font-family:
"Arial",sans-serif'>&#9679;<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span>The package/library depending on the programming language used </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>In the case of Puppeteer, though, the node package
puppeteer includes Chromium. It means no browser or driver is needed. It makes
it simpler. It also supports Chrome if that is what you need. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:0in;
margin-left:-.25pt'>On the other hand, multiple browser support is missing.
Firefox support is limited. Google announced &#8203;<a
href="https://www.npmjs.com/package/puppeteer-firefox"><span style='color:#DC1957'>Puppeteer
for Firefox</span></a><span style='color:#DC1957'>&#8203;</span>, but it was
soon deprecated. As wehn writing this, &#8203;<a
href="https://github.com/puppeteer/puppeteer#q-which-firefox-version-does-puppeteer-use"><span
style='color:#DC1957'>Firefox support is experimental</span></a>. So, to<span
style='color:#DC1957'>&#8203;         </span> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>sum up, if you need a lightweight and fast headless browser
for web scraping, Puppeteer would be the better choice. <b>     </b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:22.8pt;
margin-left:-.25pt;line-height:107%'><b><span style='font-size:22.0pt;
line-height:107%'>Web Scraping With lxml</span></b><b><span style='font-size:
13.5pt;line-height:107%;font-family:"Arial",sans-serif'> </span></b></p>

<h3 style='margin-left:-.25pt'>Prerequisite </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This tutorial is aimed at developers who have at least a
basic understanding of Python. A basic understanding of XML and HTML is also
required. Simply put, if you know what an attribute is in XML, that is enough
to understand this article.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:4.6pt;
margin-left:-.25pt;line-height:107%'>This tutorial uses Python 3 code snippets
but everything works on </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:27.85pt;
margin-left:-.25pt;line-height:107%'>Python 2  with minimal changes as well.<span
style='color:#DC1957'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:19.05pt;
margin-left:-.25pt;line-height:107%'><span style='font-size:18.0pt;line-height:
107%'>What is lxml in Python? </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>lxml is one of the fastest and feature-rich libraries for
processing XML and HTML in Python. This library is essentially a wrapper over C
libraries <i>libxml2&#8203;</i> and &#8203;<i>libxslt&#8203;</i>. This combines
the speed of the native C library and the simplicity of Python. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.75pt;
margin-left:-.25pt'>Using Python lxml library, XML and HTML documents can be
created, parsed, and queried. It is a dependency on many of the other complex
packages like Scrapy. </p>

<h3 style='margin-left:-.25pt'>Installation </h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.85pt;
margin-left:-.25pt;line-height:107%'>The best way to download and install the
lxml library is from<a href="https://pypi.org/project/lxml/"><span
style='color:#130F35;text-decoration:none'> </span></a><u>&#8203;</u><a
href="https://pypi.org/project/lxml/"><span style='color:#DC1957'>Python</span></a><a
href="https://pypi.org/project/lxml/"><span style='color:#DC1957;text-decoration:
none'> </span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'><a href="https://pypi.org/project/lxml/"><span
style='color:#DC1957'>Package Index (PyPI)</span></a><u><span style='color:
#DC1957'>&#8203;</span></u><a href="https://pypi.org/project/lxml/"><span
style='color:#130F35;text-decoration:none'>.</span></a> If you are on Linux
(debian-based), simply run: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>sudo apt-get install
python3-lxml </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.4pt;
margin-left:-.25pt'>Another way is to use the pip package manager. This works
on Windows, Mac, and Linux: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>pip3 install lxml </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.85pt;
margin-left:-.25pt;line-height:107%'>On windows, just use &#8203;<i>pip install
lxml&#8203;</i>, assuming you are running Python </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:22.6pt;
margin-left:-.25pt;line-height:107%'>3. </p>

<h4 style='margin-left:-.25pt'>Creating a simple XML document </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Any XML or any XML compliant HTML can be visualized as a
tree. A tree has a root and branches. Each branch optionally may have further
branches. All these branches and the root are represented as an <i>Element&#8203;</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>A very simple XML document would look like
this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;root&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;branch&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>       
&lt;branch_one&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>       
&lt;/branch_one&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>       
&lt;branch_one&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;/branch_one
&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;/branch&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;/root&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.35pt;
margin-left:-.25pt;line-height:107%'>If an HTML is XML compliant, it will
follow the same concept.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.85pt;
margin-left:-.25pt;line-height:107%'>Note that HTML may or may not be XML
compliant. For example, if an </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>HTML has &lt;br&gt; without a corresponding closing tag, it
is still valid HTML, but it will not be a valid XML. In the later part of this
tutorial, we will see how these cases can be handled.  For now, let’s focus on
XML compliant HTML. </p>

<h4 style='margin-left:-.25pt'>The Element class </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.25pt;
margin-left:-.25pt'>To create an XML document using python lxml, the first step
is to import the &#8203;<i>etree&#8203;</i> module of lxml: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&gt;&gt;&gt; from lxml
import etree </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Every XML document begins with the root element. This can
be created using the &#8203;<i>Element&#8203;</i> type. The Element type is a
flexible container object which can store hierarchical data. This can be
described as a cross between a dictionary and a list. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.5pt;
margin-left:-.25pt'>In this python lxml example, the objective is to create an
HTML, which is XML compliant. It means that the root element will have its name
as html: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
25.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&gt;&gt;&gt; root =
etree.Element(&quot;html&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:6.85pt;
margin-left:-.25pt;line-height:107%'>Similarly, every html will have a head and
a body: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&gt;&gt;&gt; head =
etree.Element(&quot;head&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&gt;&gt;&gt; body =
etree.Element(&quot;body&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.85pt;
margin-left:-.25pt'>To create parent-child relationships, we can simply use the
append() method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&gt;&gt;&gt;
root.append(head) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&gt;&gt;&gt;
root.append(body) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This document can be serialized and printed to the terminal
with the help of &#8203;<i>tostring()&#8203;</i> function. This function
expects one mandatory argument, which is the root of the document. We can
optionally set<i> pretty_print&#8203;</i> to True to make the output more
readable. Note that <i>tostring() &#8203;</i>serializer actually returns bytes.
This can be converted to string by calling &#8203;<i>decode()&#8203;</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:17.15pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:250%'><span style='font-size:12.0pt;
line-height:250%;font-family:"Courier New";color:black'>&gt;&gt;&gt;
print(etree.tostring(root, pretty_print=True).decode()) </span><b>The
SubElement class </b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.3pt;
margin-left:-.25pt'>Creating an &#8203;<i>Element&#8203;</i> object and calling
the &#8203;<i>append()&#8203;</i> function can make the code messy and
unreadable. The easiest way is to use the <i>SubElement&#8203;</i> type. Its
constructor takes two arguments – the parent node and the element name. Using
&#8203;<i>SubElemen&#8203;</i>t, the following two lines of code can be
replaced by just one. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:272.75pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>body =
etree.Element(&quot;body&quot;) root.append(body) # is same as  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>body =
etree.SubElement(root,&quot;body&quot;) </span></p>

<h4 style='margin-left:-.25pt'>Setting text and attributes </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>Setting text is very easy with the lxml library. Every
instance of the <i>Element&#8203;</i> and &#8203;<i>SubElement&#8203;</i>
exposes two methods – text and set, the former is used to specify the text and
later is used to set the attributes. Here are the examples: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:107.15pt;margin-bottom:
23.05pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>para =
etree.SubElement(body, &quot;p&quot;) para.text=&quot;Hello World!&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Similarly, attributes can be set using key-value
convention: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>para.set(&quot;style&quot;,
&quot;font-size:20pt&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>One thing to note here is that the attribute can be passed
in the constructor of SubElement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.75pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>para =
etree.SubElement(body, &quot;p&quot;, style=&quot;font-size:20pt&quot;,
id=&quot;firstPara&quot;) para.text = &quot;Hello World!&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>The benefit of this approach is saving lines of code and
clarity. Here is the complete code. Save it in a python file and run it. It
will print an HTML which is also a well-formed XML. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from lxml import etree </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.95pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  root =
etree.Element(&quot;html&quot;) head = etree.SubElement(root, &quot;head&quot;)
title = etree.SubElement(head, &quot;title&quot;) title.text = &quot;This is
Page Title&quot; body = etree.SubElement(root, &quot;body&quot;) heading =
etree.SubElement(body, &quot;h1&quot;, style=&quot;font-size:20pt&quot;,
id=&quot;head&quot;) heading.text = &quot;Hello World!&quot; para =
etree.SubElement(body, &quot;p&quot;,  id=&quot;firstPara&quot;) para.text =
&quot;This HTML is XML Compliant!&quot; para = etree.SubElement(body,
&quot;p&quot;,  id=&quot;secondPara&quot;) para.text = &quot;This is the second
paragraph.&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:20.75pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> etree.dump(root)  #
prints everything to console. Use for debug only </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Note that here we used &#8203;<i>etree.dump()&#8203;</i>
instead of calling&#8203;<i> etree.tostring()&#8203;</i>. The difference is
that &#8203;<i>dump()&#8203;</i> simply writes everything to the console and
doesn’t return anything, &#8203;<i>tostring() &#8203;</i>is used for
serialization and returns a string which you can store in a variable or write
to a file. <i>dump()&#8203;</i> is good for debug only and should not be used
for any other purpose.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>Add the following lines at the bottom of
the snippet and run it again: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>with open(‘input.html’,
‘wb’) as f: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>   
f.write(etree.tostring(root, pretty_print=True) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>This will save the contents to input.html in the same
folder you were running the script. Again, this is a well-formed XML, which can
be interpreted as XML or HTML. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.35pt;
margin-left:-.25pt;line-height:107%'><b>How do you parse an XML file using LXML
in Python? </b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The previous section was a Python lxml tutorial on creating
XML files. In this section, we will look at traversing and manipulating an
existing XML document using the lxml library. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>Before we move on, save the following
snippet as input.html. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;html&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  &lt;head&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;title&gt;This
is Page Title&lt;/title&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  &lt;/head&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  &lt;body&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;h1
style=&quot;font-size:20pt&quot; id=&quot;head&quot;&gt;Hello World!&lt;/h1&gt;
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;p
id=&quot;firstPara&quot;&gt;This HTML is XML Compliant!&lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;p
id=&quot;secondPara&quot;&gt;This is the second paragraph.&lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  &lt;/body&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;/html&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>When an XML document is parsed, the result is an in-memory
ElementTree object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>The raw XML contents can be in a file system or a string.
If it is in a file system, it can be loaded using the &#8203;<i>parse&#8203;</i>
method. Note that the &#8203;<i>parse</i> method will return an object of type
ElementTree. To get the root element, simply call the &#8203;<i>getroot()&#8203;</i>
method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from lxml import etree </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:121.55pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  tree =
etree.parse('input.html') elem = tree.getroot() etree.dump(elem) #prints file
contents to console </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The lxml.etree module exposes another method that can be
used to parse contents from a valid xml string — &#8203;<i>fromstring() </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:157.55pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>xml =
'&lt;html&gt;&lt;body&gt;Hello&lt;/body&gt;&lt;/html&gt;' root =
etree.fromstring(xml) etree.dump(root) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>One important difference to note here is that&#8203;<i>
fromstring()&#8203;</i> method returns an object of element. There is no need
to call &#8203;<i>getroot()&#8203;</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:.05pt;
margin-left:-.25pt'>If you want to dig deeper into parsing, we have already
written a tutorial on &#8203;<a
href="https://oxylabs.io/blog/beautiful-soup-parsing-tutorial"><span
style='color:#DC1957'>BeautifulSoup</span></a>, a Python package used for
parsing HTML and<span style='color:#DC1957'>&#8203;        </span> XML
documents. But to quickly answer what is lxml in BeautifulSoup, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>lxml can use BeautifulSoup as a parser backend. Similarly,
BeautifulSoup can employ lxml as a parser.  </p>

<h4 style='margin-left:-.25pt'>Finding elements in XML </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Broadly, there are two ways of finding elements using the
Python lxml library. The first is by using the Python lxml querying languages:
XPath and ElementPath. For example, the following code will return the first
paragraph element. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>Note that the selector is very similar to XPath. Also note
that the root element name was not used because elem contains the root of the
XML tree. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:243.95pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>tree =
etree.parse('input.html') elem = tree.getroot() para = elem.find('body/p')
etree.dump(para) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.05pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
line-height:107%;font-family:"Courier New";color:black'>  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># Output  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># &lt;p
id=&quot;firstPara&quot;&gt;This HTML is XML Compliant!&lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Similarly,&#8203;<i> findall()&#8203;</i> will return a
list of all the elements matching the selector. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:265.55pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>elem = tree.getroot()
para = elem.findall('body/p') for e in para:     etree.dump(e) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.05pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
line-height:107%;font-family:"Courier New";color:black'>  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># Outputs </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># &lt;p
id=&quot;firstPara&quot;&gt;This HTML is XML Compliant!&lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># &lt;p
id=&quot;secondPara&quot;&gt;This is the second paragraph.&lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:4.6pt;
margin-left:-.25pt;line-height:107%'>The second way of selecting the elements
is by using XPath directly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.1pt;
margin-left:-.25pt'>This approach is easier to follow by developers who are
familiar with XPath. Furthermore, XPath can be used to return the instance of
the element, the text, or the value of any attribute using standard XPath
syntax. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:251.15pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>para =
elem.xpath('//p/text()') for e in para:     print(e)   </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># Output </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:251.15pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># This HTML is XML
Compliant! # This is the second paragraph. </span></p>

<h4 style='margin-left:-.25pt'>Handling HTML with lxml.html </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Throughout this article, we have been working with a
well-formed HTML which is XML compliant. This will not be the case a lot of the
time. For these scenarios, you can simply use lxml.html instead of &#8203;<i>lxml.etree&#8203;</i>. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>Note that reading directly from a file is not supported.
The file contents should be read in a string first. Here is the code to print
all paragraphs from the same HTML file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from lxml import html </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:222.35pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>with open('input.html')
as f:     html_string = f.read() tree = html.fromstring(html_string) para =
tree.xpath('//p/text()') for e in para:     print(e)   </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># Output </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'># This HTML is XML
Compliant! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:212.15pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:194%'><span style='font-size:12.0pt;
line-height:194%;font-family:"Courier New";color:black'># This is the second
paragraph </span><span style='font-size:18.0pt;line-height:194%'>lxml web
scraping tutorial </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Now that we know how to parse and find elements in XML and
HTML, the only missing piece is getting the HTML of a web page. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.35pt;
margin-left:-.25pt'>For this, the ‘requests’ library is a great choice. It can
be installed using the pip package  manager: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>pip install requests </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.1pt;
margin-left:-.25pt'>Once the requests library is installed, HTML of any web
page can be retrieved using a simple get() method. Here is an example. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>import requests </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:92.75pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  response =
requests.get('http://books.toscrape.com/') print(response.text) # prints source
HTML </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:23.35pt;
margin-left:-.25pt;line-height:107%'>This can be combined with lxml to retrieve
any data that is required. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>Here is a quick example that prints a list
of countries from Wikipedia: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:323.2pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>import requests from
lxml import html   response =
requests.get('https://en.wikipedia.org/wiki/List_of_countries_by</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>_population_in_2010') </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.35pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  tree =
html.fromstring(response.text) countries =
tree.xpath('//span[@class=&quot;flagicon&quot;]') for country in countries:    
print(country.xpath('./following-sibling::a/text()')[0]) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>In this code, the HTML returned by response.text is parsed
into the variable tree. This can be queried using standard XPath syntax. The
XPaths can be concatenated. Note that the &#8203;<i>xpath()&#8203;</i> method
returns a list and thus only the first item is taken in this code snippet. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.25pt;
margin-left:-.25pt'>This can easily be extended to read any attribute from the
HTML. For example, the following modified code prints the country name and
image URL of the flag. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>for country in
countries: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    flag =
country.xpath('./img/@src')[0] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
19.0pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    country =
country.xpath('./following-sibling::a/text()')[0]     print(country, flag)</span>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:.05pt;
margin-left:-.25pt'>Python lxml library is a light-weight, fast, and
feature-rich library. This can be used to create XML documents, read existing
documents, and find specific elements. This makes this library equally powerful
for both XML and HTML documents. Combined with requests library, it can also </p>

<p class=MsoNormal style='margin-left:-.75pt;text-indent:0in;line-height:107%'>be
easily used for web scraping.                                       </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.75pt;
margin-left:-.25pt;line-height:107%'><b><span style='font-size:22.0pt;
line-height:107%'>Using Beautiful Soup to Parse Data </span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:.05pt;
margin-left:-.25pt'>This tutorial is useful for those seeking to quickly grasp
the value that Python and Beautiful Soup v4 offers. After following the
provided examples you should be able to understand the basic principles of how
to parse HTML data. The examples will demonstrate traversing a document for
HTML tags, printing the full content of the tags, finding elements by ID,
extracting text from specified tags and exporting it to a </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:27.85pt;
margin-left:-.25pt;line-height:107%'>.csv file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:19.05pt;
margin-left:-.25pt;line-height:107%'><span style='font-size:18.0pt;line-height:
107%'>What is Beautiful Soup? </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.8pt;
margin-left:-.25pt'>Beautiful Soup is a Python package for parsing HTML and XML
documents. It creates a parse tree for parsed pages based on specific criteria
that can be used to extract, navigate, search and modify data from HTML, which
is mostly used for web scraping. It is available for Python 2.7 and Python 3. A
useful library, it can save programmers loads of time. </p>

<h3 style='margin-top:0in;margin-right:0in;margin-bottom:19.0pt;margin-left:
0in;text-indent:0in'><b>Installing Beautiful Soup </b></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Before working on this tutorial, you should have a Python
programming environment set up on your machine. For this tutorial we will
assume that &#8203;<a href="https://www.jetbrains.com/pycharm/"><span
style='color:#DC1957'>PyCharm</span></a> is used since it’s a convenient choice
even<span style='color:#DC1957'>&#8203;    </span> for the less experienced
with Python and is a great starting point. Otherwise, simply use your go-to
IDE. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>On Windows, when installing Python make sure to tick the
“PATH installation” checkbox. PATH installation adds executables to the default
Windows Command Prompt executable search. Windows will then recognize commands
like “pip” or “python” without having to point to the directory of the
executable which makes things more convenient. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.25pt;
margin-left:-.25pt'>You should also have Beautiful Soup installed on your
system. No matter the OS, you can easily do it by using this command on the
terminal to install the current latest version of Beautiful Soup: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>pip install
BeautifulSoup4 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>If you are using Windows, it is recommended to run terminal
as administrator to ensure that everything works out smoothly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Finally, since we will be working with a sample file
written in HTML, you should be at least somewhat familiar with HTML structure. </p>

<h4 style='margin-left:-.25pt'>Getting started </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.05pt;
margin-left:-.25pt'>A sample HTML file will help demonstrate the main methods
of how Beautiful Soup parses data. This file is much more simple than your
average modern website, however, it will be sufficient for the scope of this
tutorial. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;!DOCTYPE html&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;html&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;head&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>       
&lt;title&gt;What is a Proxy?&lt;/title&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;meta
charset=&quot;utf-8&quot;&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;/head&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.05pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
line-height:107%;font-family:"Courier New";color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;body&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;h2&gt;Proxy
types&lt;/h2&gt; </span></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:12.0pt;line-height:107%;font-family:"Courier New";color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>There are many
different ways to categorize proxies. However, two of the most popular types
are residential and data center proxies. Here is a list of the most common
types. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.05pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
line-height:107%;font-family:"Courier New";color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;ul
id=&quot;proxytypes&quot;&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>           
&lt;li&gt;Residential proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>           
&lt;li&gt;Datacenter proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>           
&lt;li&gt;Shared proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>           
&lt;li&gt;Semi-dedicated proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
4.05pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>           
&lt;li&gt;Private proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
6.1pt;margin-left:-.25pt;line-height:111%'><span style='font-size:11.0pt;
line-height:111%;font-family:"Arial",sans-serif;color:black'>    </span><span
style='font-size:11.0pt;line-height:111%;color:black'>&#8203;</span><span
style='font-size:12.0pt;line-height:111%;font-family:"Courier New";color:black'>   
&lt;/ul&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.3pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:12.0pt;
line-height:107%;font-family:"Courier New";color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    &lt;/body&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;/html&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>For PyCharm to use this file, simply copy it to any text
editor and save it with the .html extension to the directory of your PyCharm
project. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Going further, open PyCharm and after a right click on the
project area navigate to New -&gt; Python File. Congratulations and welcome to
your new playground! </p>

<h4 style='margin-left:-.25pt'>Traversing for HTML tags </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>First, we can use Beautiful Soup to extract a list of all
the tags used in our sample HTML file. For this, we will use the &#8203;<i>soup.descendants</i>
generator. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from bs4 import
BeautifulSoup </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.55pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> with
open('index.html', 'r') as f: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    contents = f.read()
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.0pt;margin-bottom:
21.9pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:114%'><span style='font-size:12.0pt;line-height:114%;font-family:
"Courier New";color:black'>     soup = BeautifulSoup(contents,
features=&quot;html.parser&quot;)     for child in soup.descendants:         
if child.name:             print(child.name) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.0pt;
margin-left:-.25pt'>After running this code (right click on code and click
“Run”) you should get the below output: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:438.4pt;margin-bottom:
24.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>html head title meta
body h2 p ul li li li li li </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.5pt;
margin-left:-.25pt'>What just happened? Beautiful Soup traversed our HTML file
and printed all the HTML tags that it has found sequentially. Let’s take a
quick look at what each line did. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from bs4 import
BeautifulSoup </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>This tells Python to use the Beautiful
Soup library. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:164.75pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>with open('index.html',
'r') as f:     contents = f.read() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:17.25pt;
margin-left:-.25pt'>And this code, as you could probably guess, gives an
instruction to open our sample HTML file and read its contents. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>   soup =
BeautifulSoup(contents, features=&quot;html.parser&quot;) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.1pt;
margin-left:-.25pt'>This line creates a BeautifulSoup object and passes it to
Python’s built in HTML parser. Other parsers, such as lxml, might also be used,
but it is a separate external library and for the purpose of this tutorial the
built-in parser will do just fine. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:215.15pt;margin-bottom:
24.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>   for child in
soup.descendants:         if child.name:             print(child.name) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>The final pieces of code, namely the &#8203;<i>soup.descendants&#8203;</i>
generator, instruct Beautiful Soup to look for HTML tags and print them in the
PyCharm console. The results can also easily be exported to a .csv file but we
will get to this later. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:152.7pt;margin-bottom:
0in;margin-left:-.25pt;line-height:255%'><b>Getting the full content of tags </b>To
get the content of tags, this is what we can do: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from bs4 import
BeautifulSoup </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.55pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'> with
open('index.html', 'r') as f: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>    contents = f.read()
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.75pt;margin-bottom:
22.25pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>     soup =
BeautifulSoup(contents, features=&quot;html.parser&quot;)     
print(soup.h2)     print(soup.p)     print(soup.li) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:2.85pt;
margin-left:-.25pt'>This is a simple instruction that outputs the HTML tag with
its full content in the specified order. Here’s what the output should look
like: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;h2&gt;Proxy
types&lt;/h2&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>          There are
many different ways to categorize proxies. However, two of the most popular
types are residential and data center proxies. Here is a list of the most
common types. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>        &lt;/p&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;li&gt;Residential
proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:16.35pt;
margin-left:-.25pt'>You could also remove the HTML tags and print text only, by
using, for example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>   print(soup.li.text) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Which in our case will give the following output: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Residential proxies </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:24.75pt;
margin-left:-.25pt'>Note that this only prints the first instance of the
specified tag. Let’s continue to see how to find elements by ID or using the
&#8203;<i>find_all</i> method to filter elements by specific criteria. </p>

<h4 style='margin-top:0in;margin-right:0in;margin-bottom:19.05pt;margin-left:
-.25pt'><span style='font-size:18.0pt;line-height:107%;font-weight:normal'>Using
Beautiful Soup to find elements by ID </span></h4>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>We can use two similar ways to find elements by ID: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  
print(soup.find('ul', attrs={'id': 'proxytypes'})) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>or </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
24.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  
print(soup.find('ul', id='proxytypes')) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>Both of these will output the same result
in the Python Console: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;ul
id=&quot;proxytypes&quot;&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;li&gt;Residential
proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;li&gt;Datacenter
proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;li&gt;Shared
proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;li&gt;Semi-dedicated
proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;li&gt;Private
proxies&lt;/li&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>&lt;/ul&gt; </span></p>

<h5 style='margin-left:-.25pt'>Finding all specified tags and extracting text </h5>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:3.05pt;
margin-left:-.25pt'>The &#8203;<i>find_all&#8203;</i> method is a great way to
extract specific data from an HTML file. It accepts many criteria that make it
a flexible tool allowing us to filter data in convenient ways. Yet for this
tutorial we do not need anything more complex. Let’s find all items of our list
and print them as text only: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:121.55pt;margin-bottom:
22.2pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>  for tag in
soup.find_all('li'):         print(tag.text) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:7.6pt;
margin-left:-.25pt;line-height:107%'>This is how the full code should look
like: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.55pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>from bs4 import
BeautifulSoup with open('index.html', 'r') as f: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:56.0pt;margin-bottom:
1.85pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:144%'><span style='font-size:12.0pt;line-height:144%;font-family:
"Courier New";color:black'>    contents = f.read()     soup =
BeautifulSoup(contents, features=&quot;html.parser&quot;)     for tag in
soup.find_all('li'):         print(tag.text) </span>And here’s the output: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Residential proxies </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Datacenter proxies </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Shared proxies </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
.6pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Semi-dedicated proxies </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.8pt;margin-bottom:
22.35pt;margin-left:-.25pt;line-height:111%'><span style='font-size:12.0pt;
line-height:111%;font-family:"Courier New";color:black'>Private proxies </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>Congratulations, you should now have a basic understanding
of how Beautiful Soup might be used to parse data. It should be noted that the
information presented in this article is useful as introductory material yet
real-world web scraping with BeautifulSoup and the consequent parsing of data
is usually much more complicated than this. For a more in-depth look at
Beautiful Soup you will hardly find a better source than its &#8203;<a
href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"><span
style='color:#DC1957'>documentation</span></a><u><span style='color:#DC1957'>&#8203;</span></u><a
href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/"><span
style='color:#130F35;text-decoration:none'>,</span></a> so be sure to check it
out too.<b> </b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.4pt;margin-bottom:18.75pt;
margin-left:-.25pt'>As you can see, Beautiful Soup is a greatly useful HTML
parser. With a relatively low learning curve, you can quickly grasp how to
navigate, search, and modify the parse tree. With the addition of libraries
such as pandas you can further manipulate and analyze the data which offers a
powerful package for a near infinite amount of data collection and analysis use
cases.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.35pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:24.1pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='color:black'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.35pt;
margin-left:0in;text-indent:0in;line-height:107%'><b> </b></p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

</div>

<span style='font-size:13.0pt;line-height:132%;font-family:"Calibri",sans-serif;
color:#130F35'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection3>

<p class=MsoNormal style='margin-top:0in;margin-right:523.0pt;margin-bottom:
0in;margin-left:-1.0in;text-indent:0in;line-height:107%'><img width=792
height=1 src="Best%20Web%20Scraping%20Libraries_files/image006.gif"><br
clear=ALL>
</p>

</div>

</body>

</html>
