

Contents
About	1
Chapter 1: Getting started with PHP	2
Section 1.1: HTML output from web server	2
Section 1.2: Hello, World!	3
Section 1.3: Non-HTML output from web server	3
Section 1.4: PHP built-in server	5
Section 1.5: PHP CLI	5
Section 1.6: Instruction Separation	6
Section 1.7: PHP Tags	7
Chapter 2: Variables	9
Section 2.1: Accessing A Variable Dynamically By Name (Variable variables)	9
Section 2.2: Data Types	10
Section 2.3: Global variable best practices	13
Section 2.4: Default values of uninitialized variables	14
Section 2.5: Variable Value Truthiness and Identical Operator	15
Chapter 3: Variable Scope	18
Section 3.1: Superglobal variables	18
Section 3.2: Static properties and variables	18
Section 3.3: User-defined global variables	19
Chapter 4: Superglobal Variables PHP	21
Section 4.1: Suberglobals explained	21
Section 4.2: PHP5 SuperGlobals	28
Chapter 5: Outputting the Value of a Variable	32
Section 5.1: echo and print	32
Section 5.2: Outputting a structured view of arrays and objects	33
Section 5.3: String concatenation with echo	35
Section 5.4: printf vs sprintf	36
Section 5.5: Outputting large integers	36
Section 5.6: Output a Multidimensional Array with index and value and print into the table	37
Chapter 6: Constants	39
Section 6.1: Defining constants	39
Section 6.2: Class Constants	40
Section 6.3: Checking if constant is defined	40
Section 6.4: Using constants	42
Section 6.5: Constant arrays	42
Chapter 7: Magic Constants	43
Section 7.1: Dierence between __FUNCTION__ and __METHOD__	43
Section 7.2: Dierence between __CLASS__, get_class() and get_called_class()	43
Section 7.3: File & Directory Constants	44
Chapter 8: Comments	45
Section 8.1: Single Line Comments	45
Section 8.2: Multi Line Comments	45
Chapter 9: Types	46
Section 9.1: Type Comparison	46
Section 9.2: Boolean	46
Section 9.3: Float	47
Section 9.4: Strings	48
Section 9.5: Callable	50
Section 9.6: Resources	50
Section 9.7: Type Casting	51
Section 9.8: Type Juggling	51
Section 9.9: Null	52
Section 9.10: Integers	52
Chapter 10: Operators	54
Section 10.1: Null Coalescing Operator (??)	54
Section 10.2: Spaceship Operator (<=>)	55
Section 10.3: Execution Operator (``)	55
Section 10.4: Incrementing (++) and Decrementing Operators (--)	55
Section 10.5: Ternary Operator (?:)	56
Section 10.6: Logical Operators (&&/AND and ||/OR)	57
Section 10.7: String Operators (. and .=)	57
Section 10.8: Object and Class Operators	57
Section 10.9: Combined Assignment (+= etc)	59
Section 10.10: Altering operator precedence (with parentheses)	59
Section 10.11: Basic Assignment (=)	60
Section 10.12: Association	60
Section 10.13: Comparison Operators	60
Section 10.14: Bitwise Operators	62
Section 10.15: instanceof (type operator)	64
Chapter 11: References	67
Section 11.1: Assign by Reference	67
Section 11.2: Return by Reference	67
Section 11.3: Pass by Reference	68
Chapter 12: Arrays	71
Section 12.1: Initializing an Array	71
Section 12.2: Check if key exists	73
Section 12.3: Validating the array type	74
Section 12.4: Creating an array of variables	74
Section 12.5: Checking if a value exists in array	74
Section 12.6: ArrayAccess and Iterator Interfaces	75
Chapter 13: Array iteration	79
Section 13.1: Iterating multiple arrays together	79
Section 13.2: Using an incremental index	80
Section 13.3: Using internal array pointers	80
Section 13.4: Using foreach	81
Section 13.5: Using ArrayObject Iterator	83
Chapter 14: Executing Upon an Array	84
Section 14.1: Applying a function to each element of an array	84
Section 14.2: Split array into chunks	85
Section 14.3: Imploding an array into string	86
Section 14.4: "Destructuring" arrays using list()	86
Section 14.5: array_reduce	86
Section 14.6: Push a Value on an Array	87
Chapter 15: Manipulating an Array	89
Section 15.1: Filtering an array	89
Section 15.2: Removing elements from an array	90
Section 15.3: Sorting an Array	91
Section 15.4: Whitelist only some array keys	96
Section 15.5: Adding element to start of array	96
Section 15.6: Exchange values with keys	97
Section 15.7: Merge two arrays into one array	97
Chapter 16: Processing Multiple Arrays Together	99
Section 16.1: Array intersection	99
Section 16.2: Merge or concatenate arrays	99
Section 16.3: Changing a multidimensional array to associative array	100
Section 16.4: Combining two arrays (keys from one, values from another)	100
Chapter 17: Datetime Class	102
Section 17.1: Create Immutable version of DateTime from Mutable prior PHP 5.6	102
Section 17.2: Add or Subtract Date Intervals	102
Section 17.3: getTimestamp	102
Section 17.4: setDate	103
Section 17.5: Create DateTime from custom format	103
Section 17.6: Printing DateTimes	103
Chapter 18: Working with Dates and Time	105
Section 18.1: Getting the dierence between two dates / times	105
Section 18.2: Convert a date into another format	105
Section 18.3: Parse English date descriptions into a Date format	107
Section 18.4: Using Predefined Constants for Date Format	107
Chapter 19: Control Structures	109
Section 19.1: if else	109
Section 19.2: Alternative syntax for control structures	109
Section 19.3: while	109
Section 19.4: do-while	110
Section 19.5: goto	110
Section 19.6: declare	110
Section 19.7: include & require	111
Section 19.8: return	112
Section 19.9: for	112
Section 19.10: foreach	113
Section 19.11: if elseif else	113
Section 19.12: if	114
Section 19.13: switch	114
Chapter 20: Loops	116
Section 20.1: continue	116
Section 20.2: break	117
Section 20.3: foreach	118
Section 20.4: do...while	118
Section 20.5: for	119
Section 20.6: while	120
Chapter 21: Functions	121
Section 21.1: Variable-length argument lists	121
Section 21.2: Optional Parameters	122
Section 21.3: Passing Arguments by Reference	123
Section 21.4: Basic Function Usage	124
Section 21.5: Function Scope	124
Chapter 22: Functional Programming	125
Section 22.1: Closures	125
Section 22.2: Assignment to variables	126
Section 22.3: Objects as a function	126
Section 22.4: Using outside variables	127
Section 22.5: Anonymous function	127
Section 22.6: Pure functions	128
Section 22.7: Common functional methods in PHP	128
Section 22.8: Using built-in functions as callbacks	129
Section 22.9: Scope	129
Section 22.10: Passing a callback function as a parameter	129
Chapter 23: Alternative Syntax for Control Structures	131
Section 23.1: Alternative if/else statement	131
Section 23.2: Alternative for statement	131
Section 23.3: Alternative while statement	131
Section 23.4: Alternative foreach statement	131
Section 23.5: Alternative switch statement	132
Chapter 24: String formatting	133
Section 24.1: String interpolation	133
Section 24.2: Extracting/replacing substrings	134
Chapter 25: String Parsing	136
Section 25.1: Splitting a string by separators	136
Section 25.2: Substring	136
Section 25.3: Searching a substring with strpos	138
Section 25.4: Parsing string using regular expressions	139
Chapter 26: Classes and Objects	140
Section 26.1: Class Constants	140
Section 26.2: Abstract Classes	142
Section 26.3: Late static binding	144
Section 26.4: Namespacing and Autoloading	145
Section 26.5: Method and Property Visibility	147
Section 26.6: Interfaces	149
Section 26.7: Final Keyword	152
Section 26.8: Autoloading	153
Section 26.9: Calling a parent constructor when instantiating a child	154
Section 26.10: Dynamic Binding	155
Section 26.11: $this, self and static plus the singleton	156
Section 26.12: Defining a Basic Class	159
Section 26.13: Anonymous Classes	160
Chapter 27: Namespaces	162
Section 27.1: Declaring namespaces	162
Section 27.2: Referencing a class or function in a namespace	162
Section 27.3: Declaring sub-namespaces	163
Section 27.4: What are Namespaces?	164
Chapter 28: Sessions	165
Section 28.1: session_start() Options	165
Section 28.2: Session Locking	165
Section 28.3: Manipulating session data	166
Section 28.4: Destroy an entire session	166
Section 28.5: Safe Session Start With no Errors	167
Section 28.6: Session name	167
Chapter 29: Cookies	169
Section 29.1: Modifying a Cookie	169
Section 29.2: Setting a Cookie	169
Section 29.3: Checking if a Cookie is Set	170
Section 29.4: Removing a Cookie	170
Section 29.5: Retrieving a Cookie	170
Chapter 30: Output Buering	171
Section 30.1: Basic usage getting content between buers and clearing	171
Section 30.2: Processing the buer via a callback	171
Section 30.3: Nested output buers	172
Section 30.4: Running output buer before any content	173
Section 30.5: Stream output to client	174
Section 30.6: Using Output buer to store contents in a file, useful for reports, invoices etc	174
Section 30.7: Typical usage and reasons for using ob_start	174
Section 30.8: Capturing the output buer to re-use later	175
Chapter 31: JSON	177
Section 31.1: Decoding a JSON string	177
Section 31.2: Encoding a JSON string	180
Section 31.3: Debugging JSON errors	183
Section 31.4: Using JsonSerializable in an Object	184
Section 31.5: Header json and the returned response	185
Chapter 32: SOAP Client	187
Section 32.1: WSDL Mode	187
Section 32.2: Non-WSDL Mode	187
Section 32.3: Classmaps	187
Section 32.4: Tracing SOAP request and response	188
Chapter 33: Using cURL in PHP	190
Section 33.1: Basic Usage (GET Requests)	190
Section 33.2: POST Requests	190
Section 33.3: Using Cookies	191
Section 33.4: Using multi_curl to make multiple POST requests	192
Section 33.5: Sending multi-dimensional data and multiple files with CurlFile in one request	193
Section 33.6: Creating and sending a request with a custom method	196
Section 33.7: Get and Set custom http headers in php	196
Chapter 34: Reflection	198
Section 34.1: Feature detection of classes or objects	198
Section 34.2: Testing private/protected methods	198
Section 34.3: Accessing private and protected member variables	200
Chapter 35: Dependency Injection	202
Section 35.1: Constructor Injection	202
Section 35.2: Setter Injection	202
Section 35.3: Container Injection	204
Chapter 36: XML	205
Section 36.1: Create a XML using DomDocument	205
Section 36.2: Read a XML document with DOMDocument	206
Section 36.3: Leveraging XML with PHP's SimpleXML Library	207
Section 36.4: Create an XML file using XMLWriter	209
Section 36.5: Read a XML document with SimpleXML	210
Chapter 37: SimpleXML	212
Section 37.1: Loading XML data into simplexml	212
Chapter 38: Parsing HTML	213
Section 38.1: Parsing HTML from a string	213
Section 38.2: Using XPath	213
Section 38.3: SimpleXML	213
Chapter 39: Regular Expressions (regexp/PCRE)	215
Section 39.1: Global RegExp match	215
Section 39.2: String matching with regular expressions	216
Section 39.3: Split string into array by a regular expression	217
Section 39.4: String replacing with regular expression	217
Section 39.5: String replace with callback	217
Chapter 40: Traits	219
Section 40.1: What is a Trait?	219
Section 40.2: Traits to facilitate horizontal code reuse	220
Section 40.3: Conflict Resolution	221
Section 40.4: Implementing a Singleton using Traits	222
Section 40.5: Traits to keep classes clean	223
Section 40.6: Multiple Traits Usage	224
Section 40.7: Changing Method Visibility	224
Chapter 41: Composer Dependency Manager	226
Section 41.1: What is Composer?	226
Section 41.2: Autoloading with Composer	227
Section 41.3: Dierence between 'composer install' and 'composer update'	227
Section 41.4: Composer Available Commands	228
Section 41.5: Benefits of Using Composer	229
Section 41.6: Installation	230
Chapter 42: Magic Methods	231
Section 42.1: __call() and __callStatic()	231
Section 42.2: __get(), __set(), __isset() and __unset()	232
Section 42.3: __construct() and __destruct()	233
Section 42.4: __toString()	234
Section 42.5: __clone()	235
Section 42.6: __invoke()	235
Section 42.7: __sleep() and __wakeup()	236
Section 42.8: __debugInfo()	236
Chapter 43: File handling	238
Section 43.1: Convenience functions	238
Section 43.2: Deleting files and directories	240
Section 43.3: Getting file information	240
Section 43.4: Stream-based file IO	242
Section 43.5: Moving and Copying files and directories	244
Section 43.6: Minimize memory usage when dealing with large files	245
Chapter 44: Streams	246
Section 44.1: Registering a stream wrapper	246
Chapter 45: Type hinting	248
Section 45.1: Type hinting classes and interfaces	248
Section 45.2: Type hinting scalar types, arrays and callables	249
Section 45.3: Nullable type hints	250
Section 45.4: Type hinting generic objects	251
Section 45.5: Type Hinting No Return(Void)	252
Chapter 46: Filters & Filter Functions	253
Section 46.1: Validating Boolean Values	253
Section 46.2: Validating A Number Is A Float	253
Section 46.3: Validate A MAC Address	254
Section 46.4: Sanitze Email Addresses	254
Section 46.5: Sanitize Integers	255
Section 46.6: Sanitize URLs	255
Section 46.7: Validate Email Address	256
Section 46.8: Validating A Value Is An Integer	256
Section 46.9: Validating An Integer Falls In A Range	257
Section 46.10: Validate a URL	257
Section 46.11: Sanitize Floats	259
Section 46.12: Validate IP Addresses	261
Section 46.13: Sanitize filters	262
Chapter 47: Generators	263
Section 47.1: The Yield Keyword	263
Section 47.2: Reading a large file with a generator	264
Section 47.3: Why use a generator?	264
Section 47.4: Using the send()-function to pass values to a generator	265
Chapter 48: UTF-8	267
Section 48.1: Input	267
Section 48.2: Output	267
Section 48.3: Data Storage and Access	267
Chapter 49: Unicode Support in PHP	269
Section 49.1: Converting Unicode characters to "\uxxxx" format using PHP	269
Section 49.2: Converting Unicode characters to their numeric value and/or HTML entities using PHP 	269
Section 49.3: Intl extention for Unicode support	271
Chapter 50: URLs	272
Section 50.1: Parsing a URL	272
Section 50.2: Build an URL-encoded query string from an array	272
Section 50.3: Redirecting to another URL	273
Chapter 51: How to break down an URL	275
Section 51.1: Using parse_url()	275
Section 51.2: Using explode()	276
Section 51.3: Using basename()	276
Chapter 52: Object Serialization	278
Section 52.1: Serialize / Unserialize	278
Section 52.2: The Serializable interface	278
Chapter 53: Serialization	280
Section 53.1: Serialization of dierent types	280
Section 53.2: Security Issues with unserialize	281
Chapter 54: Closure	284
Section 54.1: Basic usage of a closure	284
Section 54.2: Using external variables	284
Section 54.3: Basic closure binding	285
Section 54.4: Closure binding and scope	285
Section 54.5: Binding a closure for one call	287
Section 54.6: Use closures to implement observer pattern	287
Chapter 55: Reading Request Data	290
Section 55.1: Reading raw POST data	290
Section 55.2: Reading POST data	290
Section 55.3: Reading GET data	290
Section 55.4: Handling file upload errors	291
Section 55.5: Passing arrays by POST	291
Section 55.6: Uploading files with HTTP PUT	293
Chapter 56: Type juggling and Non-Strict Comparison Issues	294
Section 56.1: What is Type Juggling?	294
Section 56.2: Reading from a file	294
Section 56.3: Switch surprises	295
Section 56.4: Strict typing	296
Chapter 57: Sockets	298
Section 57.1: TCP client socket	298
Section 57.2: TCP server socket	299
Section 57.3: UDP server socket	299
Section 57.4: Handling socket errors	300
Chapter 58: PDO	301
Section 58.1: Preventing SQL injection with Parameterized Queries	301
Section 58.2: Basic PDO Connection and Retrieval	302
Section 58.3: Database Transactions with PDO	303
Section 58.4: PDO: connecting to MySQL/MariaDB server	305
Section 58.5: PDO: Get number of aected rows by a query	306
Section 58.6: PDO::lastInsertId()	306
Chapter 59: PHP MySQLi	308
Section 59.1: Close connection	308
Section 59.2: MySQLi connect	308
Section 59.3: Loop through MySQLi results	309
Section 59.4: Prepared statements in MySQLi	309
Section 59.5: Escaping Strings	310
Section 59.6: Debugging SQL in MySQLi	311
Section 59.7: MySQLi query	311
Section 59.8: How to get data from a prepared statement	312
Section 59.9: MySQLi Insert ID	314
Chapter 60: SQLite3	316
Section 60.1: SQLite3 Quickstart Tutorial	316
Section 60.2: Querying a database	317
Section 60.3: Retrieving only one result	318
Chapter 61: Using MongoDB	319
Section 61.1: Connect to MongoDB	319
Section 61.2: Get multiple documents - find()	319
Section 61.3: Get one document - findOne()	319
Section 61.4: Insert document	319
Section 61.5: Update a document	319
Section 61.6: Delete a document	320
Chapter 62: mongo-php	321
Section 62.1: Everything in between MongoDB and Php	321
Chapter 63: Using Redis with PHP	324
Section 63.1: Connecting to a Redis instance	324
Section 63.2: Installing PHP Redis on Ubuntu	324
Section 63.3: Executing Redis commands in PHP	324
Chapter 64: Sending Email	325
Section 64.1: Sending Email - The basics, more details, and a full example	325
Section 64.2: Sending HTML Email Using mail()	327
Section 64.3: Sending Email With An Attachment Using mail()	328
Section 64.4: Sending Plain Text Email Using PHPMailer	329
Section 64.5: Sending HTML Email Using PHPMailer	330
Section 64.6: Sending Email With An Attachment Using PHPMailer	331
Section 64.7: Sending Plain Text Email Using Sendgrid	331
Section 64.8: Sending Email With An Attachment Using Sendgrid	332
Chapter 65: Using SQLSRV	333
Section 65.1: Retrieving Error Messages	333
Section 65.2: Fetching Query Results	333
Section 65.3: Creating a Connection	334
Section 65.4: Making a Simple Query	334
Section 65.5: Invoking a Stored Procedure	334
Section 65.6: Making a Parameterised Query	335
Chapter 66: Command Line Interface (CLI)	336
Section 66.1: Handling Program Options	336
Section 66.2: Argument Handling	337
Section 66.3: Input and Output Handling	338
Section 66.4: Return Codes	339
Section 66.5: Restrict script execution to command line	339
Section 66.6: Behavioural dierences on the command line	339
Section 66.7: Running your script	340
Section 66.8: Edge Cases of getopt()	340
Section 66.9: Running built-in web server	341
Chapter 67: Localization	343
Section 67.1: Localizing strings with gettext()	343
Chapter 68: Headers Manipulation	344
Section 68.1: Basic Setting of a Header	344
Chapter 69: Coding Conventions	345
Section 69.1: PHP Tags	345
Chapter 70: Asynchronous programming	346
Section 70.1: Advantages of Generators	346
Section 70.2: Using Icicle event loop	346
Section 70.3: Spawning non-blocking processes with proc_open()	347
Section 70.4: Reading serial port with Event and DIO	348
Section 70.5: HTTP Client Based on Event Extension	350
Section 70.6: HTTP Client Based on Ev Extension	353
Section 70.7: Using Amp event loop	357
Chapter 71: How to Detect Client IP Address	359
Section 71.1: Proper use of HTTP_X_FORWARDED_FOR	359
Chapter 72: Create PDF files in PHP	361
Section 72.1: Getting Started with PDFlib	361
Chapter 73: YAML in PHP	362
Section 73.1: Installing YAML extension	362
Section 73.2: Using YAML to store application configuration	362
Chapter 74: Image Processing with GD	364
Section 74.1: Image output	364
Section 74.2: Creating an image	365
Section 74.3: Image Cropping and Resizing	366
Chapter 75: Imagick	369
Section 75.1: First Steps	369
Section 75.2: Convert Image into base64 String	369
Chapter 76: SOAP Server	371
Section 76.1: Basic SOAP Server	371
Chapter 77: Machine learning	372
Section 77.1: Classification using PHP-ML	372
Section 77.2: Regression	373
Section 77.3: Clustering	375
Chapter 78: Cache	377
Section 78.1: Caching using memcache	377
Section 78.2: Cache Using APC Cache	378
Chapter 79: Autoloading Primer	380
Section 79.1: Autoloading as part of a framework solution	380
Section 79.2: Inline class definition, no loading required	380
Section 79.3: Manual class loading with require	381
Section 79.4: Autoloading replaces manual class definition loading	381
Section 79.5: Autoloading with Composer	382
Chapter 80: SPL data structures	383
Section 80.1: SplFixedArray	383
Chapter 81: IMAP	387
Section 81.1: Connecting to a mailbox	387
Section 81.2: Install IMAP extension	388
Section 81.3: List all folders in the mailbox	388
Section 81.4: Finding messages in the mailbox	389
Chapter 82: HTTP Authentication	391
Section 82.1: Simple authenticate	391
Chapter 83: WebSockets	392
Section 83.1: Simple TCP/IP server	392
Chapter 84: BC Math (Binary Calculator)	394
Section 84.1: Using bcmath to read/write a binary long on 32-bit system	394
Section 84.2: Comparison between BCMath and float arithmetic operations	395
Chapter 85: Docker deployment	397
Section 85.1: Get docker image for php	397
Section 85.2: Writing dockerfile	397
Section 85.3: Building image	397
Section 85.4: Starting application container	398
Chapter 86: APCu	399
Section 86.1: Iterating over Entries	399
Section 86.2: Simple storage and retrieval	399
Section 86.3: Store information	399
Chapter 87: PHP Built in server	400
Section 87.1: Running the built in server	400
Section 87.2: built in server with specific directory and router script	400
Chapter 88: PSR	401
Section 88.1: PSR-4: Autoloader	401
Section 88.2: PSR-1: Basic Coding Standard	402
Chapter 89: PHPDoc	403
Section 89.1: Describing a variable	403
Section 89.2: Adding metadata to functions	403
Section 89.3: Describing parameters	404
Section 89.4: Collections	405
Section 89.5: Adding metadata to files	406
Section 89.6: Inheriting metadata from parent structures	406
Chapter 90: Design Patterns	408
Section 90.1: Method Chaining in PHP	408
Chapter 91: Compile PHP Extensions	410
Section 91.1: Compiling on Linux	410
Chapter 92: Common Errors	411
Section 92.1: Call fetch_assoc on boolean	411
Section 92.2: Unexpected $end	411
Chapter 93: Compilation of Errors and Warnings	413
Section 93.1: Parse error: syntax error, unexpected T_PAAMAYIM_NEKUDOTAYIM	413
Section 93.2: Notice: Undefined index	413
Section 93.3: Warning: Cannot modify header information - headers already sent	413
Chapter 94: Exception Handling and Error Reporting	415
Section 94.1: Setting error reporting and where to display them	415
Section 94.2: Logging fatal errors	415
Chapter 95: Debugging	417
Section 95.1: Dumping variables	417
Section 95.2: Displaying errors	417
Section 95.3: phpinfo()	418
Section 95.4: Xdebug	418
Section 95.5: Error Reporting (use them both)	419
Section 95.6: phpversion()	419
Chapter 96: Unit Testing	420
Section 96.1: Testing class rules	420
Section 96.2: PHPUnit Data Providers	423
Section 96.3: Test exceptions	426
Chapter 97: Performance	428
Section 97.1: Profiling with Xdebug	428
Section 97.2: Memory Usage	429
Section 97.3: Profiling with XHProf	430
Chapter 98: Multiprocessing	432
Section 98.1: Multiprocessing using built-in fork functions	432
Section 98.2: Creating child process using fork	432
Section 98.3: Inter-Process Communication	433
Chapter 99: Multi Threading Extension	434
Section 99.1: Getting Started	434
Section 99.2: Using Pools and Workers	434
Chapter 100: Secure Remeber Me	436
Section 100.1: "Keep Me Logged In" - the best approach	436
Chapter 101: Security	437
Section 101.1: PHP Version Leakage	437
Section 101.2: Cross-Site Scripting (XSS)	437
Section 101.3: Cross-Site Request Forgery	439
Section 101.4: Command Line Injection	440
Section 101.5: Stripping Tags	441
Section 101.6: File Inclusion	442
Section 101.7: Error Reporting	442
Section 101.8: Uploading files	443
Chapter 102: Cryptography	446
Section 102.1: Symmetric Encryption and Decryption of large Files with OpenSSL	446
Section 102.2: Symmetric Cipher	448
Chapter 103: Password Hashing Functions	449
Section 103.1: Creating a password hash	449
Section 103.2: Determine if an existing password hash can be upgraded to a stronger algorithm	450
Section 103.3: Verifying a password against a hash	451
Chapter 104: Contributing to the PHP Manual	452
Section 104.1: Improve the ocial documentation	452
Section 104.2: Tips for contributing to the manual	452
Chapter 105: Contributing to the PHP Core	453
Section 105.1: Setting up a basic development environment	453
Appendix A: Installing a PHP environment on Windows	454
Section A.1: Download, Install and use WAMP	454
Section A.2: Install PHP and use it with IIS	454
Section A.3: Download and Install XAMPP	455
Appendix B: Installing on Linux/Unix Environments	458
Section B.1: Command Line Install Using APT for PHP 7	458
Section B.2: Installing in Enterprise Linux distributions (CentOS, Scientific Linux, etc)	458
Credits	460
You may also like	468


About
Please feel free to share this PDF with anyone for free, latest version of this book can be downloaded from: https://goalkicker.com/PHPBook
This PHP Notes for Professionals book is compiled from Stack Overflow
Documentation, the content is written by the beautiful people at Stack Overflow.
Text content is released under Creative Commons BY-SA, see credits at the end of this book whom contributed to the various chapters. Images may be copyright of their respective owners unless otherwise specified
This is an unofficial free book created for educational purposes and is not affiliated with official PHP group(s) or company(s) nor Stack Overflow. All trademarks and registered trademarks are the property of their respective company owners
The information presented in this book is not guaranteed to be correct nor accurate, use at your own risk
Please send feedback and corrections to web@petercv.com
Chapter 1: Getting started with PHP
PHP 7.x
Version Supported Until Release Date
7.1	2019-12-01	2016-12-01
7.0	2018-12-03	2015-12-03
PHP 5.x
Version Supported Until Release Date
5.6	2018-12-31	2014-08-28
5.5	2016-07-21	2013-06-20
5.4	2015-09-03	2012-03-01
5.3	2014-08-14	2009-06-30
5.2	2011-01-06	2006-11-02
5.1	2006-08-24	2005-11-24
5.0	2005-09-05	2004-07-13
PHP 4.x
Version Supported Until Release Date
4.4	2008-08-07	2005-07-11
4.3	2005-03-31	2002-12-27
4.2	2002-09-06	2002-04-22
4.1	2002-03-12	2001-12-10
4.0	2001-06-23	2000-05-22
Legacy Versions
Version Supported Until Release Date
3.0	2000-10-20	1998-06-06
2.0	1997-11-01
1.0	1995-06-08
Section 1.1: HTML output from web server
PHP can be used to add content to HTML files. While HTML is processed directly by a web browser, PHP scripts are executed by a web server and the resulting HTML is sent to the browser.
Hello World!The following HTML markup contains a PHP statement that will add  to the output:

When this is saved as a PHP script and executed by a web server, the following HTML will be sent to the user's browser:


PHP 5.x Version ≥ 5.4
echo also has a shortcut syntax, which lets you immediately print a value. Prior to PHP 5.4.0, this short syntax only works with the short_open_tag configuration setting enabled.
For example, consider the following code:

Its output is identical to the output of the following:

In real-world applications, all data output by PHP to an HTML page should be properly escaped to prevent XSS (Cross-site scripting) attacks or text corruption.
<?= ... ?>See also: Strings and PSR-1, which describes best practices, including the proper use of short tags ().
Section 1.2: Hello, World!
The most widely used language construct to print output in PHP is echo:

Alternatively, you can also use print:

Both statements perform the same function, with minor differences:
echo has a void return, whereas print returns an int with a value of 1
echo can take multiple arguments (without parentheses only), whereas print only takes one argument echo is slightly faster than print
Both echo and print are language constructs, not functions. That means they do not require parentheses around their arguments. For cosmetic consistency with functions, parentheses can be included. Extensive examples of the use of echo and print are available elsewhere.
C-style printf and related functions are available as well, as in the following example:

See Outputting the value of a variable for a comprehensive introduction of outputting variables in PHP.
Section 1.3: Non-HTML output from web server
In some cases, when working with a web server, overriding the web server's default content type may be required.
There may be cases where you need to send data as plain text, JSON, or XML, for example.
header() function can send a raw HTTP header. You can add the Content-TypeThe  header to notify the browser of the content we are sending.
Content-Type as text/plainConsider the following code, where we set :

This will produce a plain text document with the following content:
		Hello World
application/jsonTo produce JSON content, use the  content type instead:

application/jsonThis will produce a document of type  with the following content:
		{"response":"Hello World"}
headerNote that the () function must be called before PHP produces any output, or the web server will have already sent headers for the response. So, consider the following code:

This will produce a warning:
Warning: Cannot modify header information - headers already sent by (output started at /dir/example.php:2) in /dir/example.php on line 3
headerWhen using (), its output needs to be the first byte that's sent from the server. For this reason it's important to not have empty lines or spaces in the beginning of the file before the PHP opening tag <?php. For the same reason, it is considered best practice (see PSR-2) to omit the PHP closing tag ?> from files that contain only PHP and from blocks of PHP code at the very end of a file.
View the output buffering section to learn how to 'catch' your content into a variable to output later, for example, after outputting headers.
Section 1.4: PHP built-in server
PHP 5.4+ comes with a built-in development server. It can be used to run applications without having to install a production HTTP server such as nginx or Apache. The built-in server is only designed to be used for development and testing purposes.
It can be started by using the -S flag: php -S <host/ip>:<port> Example usage
index.php1. Create an  file containing:

php -S localhost:80802. Run the command  from the command line. Do not include http://
. This will start a web server listening on port 8080 using the current directory that you are in as the document root.
http://localhost:80803. Open the browser and navigate to . You should see your "Hello World" page.
Configuration
To override the default document root (i.e. the current directory), use the -t flag:

public/ directory in your project you can serve your project from that directory using php E.g. if you have a -S
localhost:8080 -t public/.
Logs
Every time a request is made from the development server, a log entry like the one below is written to the command line.

Section 1.5: PHP CLI
PHP can also be run from command line directly using the CLI (Command Line Interface).
CLI is basically the same as PHP from web servers, except some differences in terms of standard input and output. Triggering
The PHP CLI allows four ways to run PHP code:
1. Standard input. Run the php command without any arguments, but pipe PHP code into it: echo '<?php echo "Hello world!";' | php
2. Filename as argument. Run the php command with the name of a PHP source file as the first argument: php hello_world.php
3. Code as argument. Use the -r option in the php command, followed by the code to run. The <?php open tags are not required, as everything in the argument is considered as PHP code: php -r 'echo "Hello world!";'
4. Interactive shell. Use the -a option in the php command to launch an interactive shell. Then, type (or paste) PHP code and hit  return : $ php -a Interactive mode enabled php > echo "Hello world!"; Hello world!
Output
All functions or controls that produce HTML output in web server PHP can be used to produce output in the stdout stream (file descriptor 1), and all actions that produce output in error logs in web server PHP will produce output in the stderr stream (file descriptor 2).

Shell command line

Input
See: Command Line Interface (CLI)
Section 1.6: Instruction Separation
Just like most other C-style languages, each statement is terminated with a semicolon. Also, a closing tag is used to terminate the last line of code of the PHP block.
echo "No error"If the last line of PHP code ends with a semicolon, the closing tag is optional if there is no code following that final line of code. For example, we can leave out the closing tag after ; in the following example:
<?php echo "No error"; // no closing tag is needed as long as there is no code below
However, if there is any other code following your PHP code block, the closing tag is no longer optional:


We can also leave out the semicolon of the last statement in a PHP code block if that code block has a closing tag:

It is generally recommended to always use a semicolon and use a closing tag for every PHP code block except the last PHP code block, if no more code follows that PHP code block.
So, your code should basically look like this:

Section 1.7: PHP Tags
There are three kinds of tags to denote PHP blocks in a file. The PHP parser is looking for the opening and (if present) closing tags to delimit the code to interpret.
Standard Tags
These tags are the standard method to embed PHP code in a file.

PHP 5.x Version ≥ 5.4
Echo Tags
These tags are available in all PHP versions, and since PHP 5.4 are always enabled. In previous versions, echo tags could only be enabled in conjunction with short tags.

Short Tags
You can disable or enable these tags with the option short_open_tag.

Short tags:
are disallowed in all major PHP coding standards are discouraged in the official documentation are disabled by default in most distributions interfere with inline XML's processing instructions
are not accepted in code submissions by most open source projects
PHP 5.x Version ≤ 5.6 ASP Tags
By enabling the asp_tags option, ASP-style tags can be used.

These are an historic quirk and should never be used. They were removed in PHP 7.0.

Chapter 2: Variables
Section 2.1: Accessing A Variable Dynamically By Name (Variable variables)
Variables can be accessed via dynamic variable names. The name of a variable can be stored in another variable, allowing it to be accessed dynamically. Such variables are known as variable variables.
To turn a variable into a variable variable, you put an extra $ put in front of your variable.

Variable variables are useful for mapping function/method calls:

This becomes particularly helpful in PHP classes:

It is possible, but not required to put $variableName between {}:

The following examples are both equivalent and output "baz":


Using {} is only mandatory when the name of the variable is itself an expression, like this:

It is nevertheless recommended to always use {}, because it's more readable.
While it is not recommended to do so, it is possible to chain this behavior:
$$$$$$$$DoNotTryThisAtHomeKids = $value;
It's important to note that the excessive usage of variable variables is considered a bad practice by many developers. Since they're not well-suited for static analysis by modern IDEs, large codebases with many variable variables (or dynamic method invocations) can quickly become difficult to maintain.
Differences between PHP5 and PHP7
Another reason to always use {} or (), is that PHP5 and PHP7 have a slightly different way of dealing with dynamic variables, which results in a different outcome in some cases.
In PHP7, dynamic variables, properties, and methods will now be evaluated strictly in left-to-right order, as opposed to the mix of special cases in PHP5. The examples below show how the order of evaluation has changed.
$$foo['bar']['baz'Case 1 : ]
$foo['bar']['baz'$$foo)['bar']['baz'PHP5 interpretation : ${]}
PHP7 interpretation : (]
$foo->$bar['baz'Case 2 : ]
$foo->{$bar['baz'$foo->$bar)['baz'PHP5 interpretation : ]}
PHP7 interpretation : (]
$foo->$bar['baz'Case 3 : ]()
$foo->{$bar['baz'$foo->$bar)['baz'PHP5 interpretation : ]}()
PHP7 interpretation : (]()
Foo::$bar['baz'Case 4 : ]()
Foo::{$bar['baz'Foo::$bar)['baz'PHP5 interpretation : ]}()
PHP7 interpretation : (]()
Section 2.2: Data Types
There are different data types for different purposes. PHP does not have explicit type definitions, but the type of a variable is determined by the type of the value that is assigned, or by the type that it is casted to. This is a brief overview about the types, for a detailed documentation and examples, see the PHP types topic.
There are following data types in PHP: null, boolean, integer, float, string, object, resource and array.
Null
Null can be assigned to any variable. It represents a variable with no value.

This invalidates the variable and it's value would be undefined or void if called. The variable is cleared from memory and deleted by the garbage collector.
Boolean
This is the simplest type with only two possible values.

Booleans can be used to control the flow of code.

Integer
An integer is a whole number positive or negative. It can be in used with any number base. The size of an integer is platform-dependent. PHP does not support unsigned integers.

Float
Floating point numbers, "doubles" or simply called "floats" are decimal numbers.

Array
An array is like a list of values. The simplest form of an array is indexed by integer, and ordered by the index, with the first element lying at index 0.
$foo = array(1, 2, 3); // An array of integers
$bar = ["A", true, 123 => 5]; // Short array syntax, PHP 5.4+

Arrays can also associate a key other than an integer index to a value. In PHP, all arrays are associative arrays behind the scenes, but when we refer to an 'associative array' distinctly, we usually mean one that contains one or more keys that aren't integers.

String
A string is like an array of characters.

Like an array, a string can be indexed to return its individual characters:

Object
An object is an instance of a class. Its variables and methods can be accessed with the -> operator.

Resource
Resource variables hold special handles to opened files, database connections, streams, image canvas areas and the like (as it is stated in the manual).
$fp = fopen('file.ext', 'r'); // fopen() is the function to open a file on disk as a resource. var_dump($fp); // output: resource(2) of type (stream)
gettypeTo get the type of a variable as a string, use the () function:

Section 2.3: Global variable best practices
We can illustrate this problem with the following pseudo-code

Your first question here is an obvious one
		Where did $bob come from?
Are you confused? Good. You've just learned why globals are confusing and considered a bad practice.
If this were a real program, your next bit of fun is to go track down all instances of $bob and hope you find the right one (this gets worse if $bob is used everywhere). Worse, if someone else goes and defines $bob (or you forgot and reused that variable) your code can break (in the above code example, having the wrong object, or no object at all, would cause a fatal error).
include('file.php'Since virtually all PHP programs make use of code like ); your job maintaining code like this becomes exponentially harder the more files you add.
Also, this makes the task of testing your applications very difficult. Suppose you use a global variable to hold your database connection:

In order to unit test this function, you have to override the global $dbConnector variable, run the tests and then reset it to its original value, which is very bug prone:

How do we avoid Globals?
The best way to avoid globals is a philosophy called Dependency Injection. This is where we pass the tools we need into the function or class.

This is much easier to understand and maintain. There's no guessing where $bob was set up because the caller is responsible for knowing that (it's passing us what we need to know). Better still, we can use type declarations to restrict what's being passed.
So we know that $bob is either an instance of the Bar class, or an instance of a child of Bar, meaning we know we can use the methods of that class. Combined with a standard autoloader (available since PHP 5.3), we can now go track down where Bar is defined. PHP 7.0 or later includes expanded type declarations, where you can also use scalar types (like int or string).
Version = 4.1
Superglobal variables
Super globals in PHP are predefined variables, which are always available, can be accessed from any scope throughout the script.
There is no need to do global $variable; to access them within functions/methods, classes or files.
These PHP superglobal variables are listed below:
$GLOBALS
$_SERVER
$_REQUEST
$_POST
$_GET
$_FILES
$_ENV
$_COOKIE
$_SESSION
Section 2.4: Default values of uninitialized variables
Although not necessary in PHP however it is a very good practice to initialize variables. Uninitialized variables have a default value of their type depending on the context in which they are used:
Unset AND unreferenced

Boolean

String

Integer

Float/double

Array

Object
$unset_obj->foo = 'bar';
var_dump($unset_obj); // Outputs: object(stdClass)#1 (1) {  ["foo"]=>  string(3) "bar" }
Relying on the default value of an uninitialized variable is problematic in the case of including one file into another which uses the same variable name.
Section 2.5: Variable Value Truthiness and Identical Operator
In PHP, variable values have an associated "truthiness" so even non-boolean values will equate to true or false. This allows any variable to be used in a conditional block, e.g.

Here are some fundamental rules for different types of variable values:


floatval('0') == floatval('-0'in its double-precision floating-point, i.e. ) is true.

IDENTICAL OPERATOR
In the PHP Documentation for Comparison Operators, there is an Identical Operator ===. This operator can be used to check whether a variable is identical to a reference value:

It has a corresponding not identical operator !==:

is_nullThe identical operator can be used as an alternative to language functions like ().
strposUSE CASE WITH ()
strpos($haystack, $needleThe ) language function is used to locate the index at which $needle occurs in
strpos$haystack, or whether it occurs at all. The () function is case sensitive; if case-insensitive find is what you
stripos($haystack, $needleneed you can go with )
The strpos & stripos function also contains third parameter offset (int) which if specified, search will start this number of characters counted from the beginning of the string. Unlike strrpos and strripos, the offset cannot be negative
The function can return:
0 if $needle is found at the beginning of $haystack; a non-zero integer specifying the index if $needle is found somewhere other than the beginning in
$haystack; and value false if $needle is not found anywhere in $haystack.
strposBecause both 0 and false have truthiness false in PHP but represent distinct situations for (), it is important to distinguish between them and use the identical operator === to look exactly for false and not just a value that equates to false.

Alternatively, using the not identical operator:

Chapter 3: Variable Scope
Variable scope refers to the regions of code where a variable may be accessed. This is also referred to as visibility. In PHP scope blocks are defined by functions, classes, and a global scope available throughout an application.
Section 3.1: Superglobal variables
Superglobal variables are defined by PHP and can always be used from anywhere without the global keyword.

Section 3.2: Static properties and variables
Static class properties that are defined with the public visibility are functionally the same as global variables. They can be accessed from anywhere the class is defined.

Functions can also define static variables inside their own scope. These static variables persist through multiple function calls, unlike regular variables defined in a function scope. This can be a very easy and simple way to implement the Singleton design pattern:
class Singleton {     public static function getInstance() {
        // Static variable $instance is not deleted when the function ends         static $instance;
        // Second call to this function will not get into the if-statement,
        // Because an instance of Singleton is now stored in the $instance
        // variable and is persisted through multiple calls         if (!$instance) {
            // First call to this function will reach this line,
            // because the $instance has only been declared, not initialized
            $instance = new Singleton();
        }

Section 3.3: User-defined global variables
The scope outside of any function or class is the global scope. When a PHP script includes another (using include or require) the scope remains the same. If a script is included outside of any function or class, it's global variables are included in the same global scope, but if a script is included from within a function, the variables in the included script are in the scope of the function.
Within the scope of a function or class method, the global keyword may be used to create an access user-defined global variables.

A second way to access variables from the global scope is to use the special PHP-defined $GLOBALS array.
The $GLOBALS array is an associative array with the name of the global variable being the key and the contents of that variable being the value of the array element. Notice how $GLOBALS exists in any scope, this is because $GLOBALS is a superglobal.
log_messageThis means that the () function could be rewritten as:
function log_message($message) {
    // Access the global $amount_of_log_calls variable via the
    // $GLOBALS array. No need for 'global $GLOBALS;', since it

One might ask, why use the $GLOBALS array when the global keyword can also be used to get a global variable's value? The main reason is using the global keyword will bring the variable into scope. You then can't reuse the same variable name in the local scope.

Chapter 4: Superglobal Variables PHP
Superglobals are built-in variables that are always available in all scopes.
global $variableSeveral predefined variables in PHP are "superglobals", which means they are available in all scopes throughout a script. There is no need to do ; to access them within functions or methods.
Section 4.1: Suberglobals explained
Introduction
Put simply, these are variables that are available in all scope in your scripts.
This means that there is no need to pass them as parameters in your functions, or store them outside a block of code to have them available in different scopes.
What's a superglobal??
If you're thinking that these are like superheroes - they're not.
As of PHP version 7.1.3 there are 9 superglobal variables. They are as follows:
$GLOBALS - References all variables available in global scope
$_SERVER - Server and execution environment information
$_GET - HTTP GET variables
$_POST - HTTP POST variables
$_FILES - HTTP File Upload variables
$_COOKIE - HTTP Cookies
$_SESSION - Session variables
$_REQUEST - HTTP Request variables
$_ENV - Environment variables
See the documentation.
Tell me more, tell me more
I'm sorry for the Grease reference! Link
Time for some explanation on these superheroesglobals.
$GLOBALS
An associative array containing references to all variables which are currently defined in the global scope of the script. The variable names are the keys of the array.
Code


Output

testIn the above example $myLocal is not displayed the second time because it is declared inside the () function and then destroyed after the function is closed.
Becoming global
To remedy this there are two options.

The global keyword is a prefix on a variable that forces it to be part of the global scope.
Note that you cannot assign a value to a variable in the same statement as the global keyword. Hence, why I had to assign a value underneath. (It is possible if you remove new lines and spaces but I don't think it is neat. global
$myLocal; $myLocal = "local").

$GLOBAL["myLocal"In this example I reassigned $myLocal the value of ] since I find it easier writing a variable name rather than the associative array.
$_SERVER
$_SERVER is an array containing information such as headers, paths, and script locations. The entries in this array are created by the web server. There is no guarantee that every web server will provide any of these; servers may omit some, or provide others not listed here. That said, a large number of these 	variables are accounted for in the CGI/1.1 specification, so you should be able to expect those.
An example output of this might be as follows (run on my Windows PC using WAMP)
C:\wamp64\www\test.php:2:
array (size=36)     'HTTP_HOST' => string 'localhost' (length=9)
    'HTTP_CONNECTION' => string 'keep-alive' (length=10)
    'HTTP_CACHE_CONTROL' => string 'max-age=0' (length=9)
    'HTTP_UPGRADE_INSECURE_REQUESTS' => string '1' (length=1)     'HTTP_USER_AGENT' => string 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36' (length=110)
    'HTTP_ACCEPT' => string
'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' (length=74)
    'HTTP_ACCEPT_ENCODING' => string 'gzip, deflate, sdch, br' (length=23)
    'HTTP_ACCEPT_LANGUAGE' => string 'en-US,en;q=0.8,en-GB;q=0.6' (length=26)
    'HTTP_COOKIE' => string 'PHPSESSID=0gslnvgsci371ete9hg7k9ivc6' (length=36)
    'PATH' => string 'C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files
(x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS
Client\;C:\ProgramData\Oracle\Java\javapath;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem
;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;E:\Program Files\ATI Technologies\ATI.ACE\Core-
Static;E:\Program Files\AMD\ATI.ACE\Core-Static;C:\Program Files (x86)\AMD\ATI.ACE\Core-
Static;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Intel\Intel(R) Managemen'... (length=1169)
    'SystemRoot' => string 'C:\WINDOWS' (length=10)
    'COMSPEC' => string 'C:\WINDOWS\system32\cmd.exe' (length=27)
    'PATHEXT' => string '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PY' (length=57)
    'WINDIR' => string 'C:\WINDOWS' (length=10)
    'SERVER_SIGNATURE' => string '<address>Apache/2.4.23 (Win64) PHP/7.0.10 Server at localhost
Port 80</address>' (length=80)
    'SERVER_SOFTWARE' => string 'Apache/2.4.23 (Win64) PHP/7.0.10' (length=32)
    'SERVER_NAME' => string 'localhost' (length=9)
    'SERVER_ADDR' => string '::1' (length=3)
    'SERVER_PORT' => string '80' (length=2)
    'REMOTE_ADDR' => string '::1' (length=3)
    'DOCUMENT_ROOT' => string 'C:/wamp64/www' (length=13)
    'REQUEST_SCHEME' => string 'http' (length=4)
    'CONTEXT_PREFIX' => string '' (length=0)
    'CONTEXT_DOCUMENT_ROOT' => string 'C:/wamp64/www' (length=13)
    'SERVER_ADMIN' => string 'wampserver@wampserver.invalid' (length=29)
    'SCRIPT_FILENAME' => string 'C:/wamp64/www/test.php' (length=26)
    'REMOTE_PORT' => string '5359' (length=4)
    'GATEWAY_INTERFACE' => string 'CGI/1.1' (length=7)
    'SERVER_PROTOCOL' => string 'HTTP/1.1' (length=8)
    'REQUEST_METHOD' => string 'GET' (length=3)
    'QUERY_STRING' => string '' (length=0)
    'REQUEST_URI' => string '/test.php' (length=13)
    'SCRIPT_NAME' => string '/test.php' (length=13)
    'PHP_SELF' => string '/test.php' (length=13)     'REQUEST_TIME_FLOAT' => float 1491068771.413
    'REQUEST_TIME' => int 1491068771
There is a lot to take in there so I will pick out some important ones below. If you wish to read about them all then consult the indices section of the documentation.
I might add them all below one day. Or someone can edit and add a good explanation of them below? Hint, hint;) For all explanations below, assume the URL is http://www.example.com/index.php
 HTTP_HOST - The host address.
www.example.comThis would return 
93.184.216.34index.phpHTTP_USER_AGENT - Contents of the user agent. This is a string which contains all the information about the client's browser, including operating system.
HTTP_COOKIE - All cookies in a concatenated string, with a semi-colon delimiter.
SERVER_ADDR - The IP address of the server, of which the current script is running.
This would return 
PHP_SELF - The file name of the currently executed script, relative to document root.
This would return /
REQUEST_TIME_FLOAT - The timestamp of the start of the request, with microsecond precision. Available since PHP 5.4.0.
REQUEST_TIME - The timestamp of the start of the request. Available since PHP 5.1.0.
$_GET
		An associative array of variables passed to the current script via the URL parameters.
$_GET is an array that contains all the URL parameters; these are the whatever is after the ? in the URL.
$_GET["myVar"Using http://www.example.com/index.php?myVar=myVal as an example. This information from this URL can be obtained by accessing in this format ] and the result of this will be myVal.
Using some code for those that don't like reading.
// URL = http://www.example.com/index.php?myVar=myVal
echo $_GET["myVar"] == "myVal" ? "true" : "false"; // returns "true"
The above example makes use of the ternary operator.
This shows how you can access the value from the URL using the $_GET superglobal.
Now another example! gasp

It is possible to send multiple variables through the URL by separating them with an ampersand (&) character.
Security risk
It is very important not to send any sensitive information via the URL as it will stay in history of the computer and will be visible to anyone that can access that browser.
$_POST
An associative array of variables passed to the current script via the HTTP POST method when using application/x-www-form-urlencoded or multipart/form-data as the HTTP Content-Type in the request.
Very similar to $_GET in that data is sent from one place to another.
I'll start by going straight into an example. (I have omitted the action attribute as this will send the information to the page that the form is in).

Above is a basic form for which data can be sent. In an real environment the value attribute would not be set meaning the form would be blank. This would then send whatever information is entered by the user.

Security risk
Sending data via POST is also not secure. Using HTTPS will ensure that data is kept more secure.
$_FILES
An associative array of items uploaded to the current script via the HTTP POST method. The structure of this array is outlined in the POST method uploads section.
Let's start with a basic form.

enctype="multipart/form-data"Note that I omitted the action attribute (again!). Also, I added , this is important to any form that will be dealing with file uploads.

This is used to upload one file. Sometimes you may wish to upload more than one file. An attribute exists for that, it's called multiple.
There's an attribute for just about anything. I'm sorry Below is an example of a form submitting multiple files.

Note the changes made here; there are only a few.
 The input name has square brackets. This is because it is now an array of files and so we are telling the form
$_FILES["myVar"to make an array of the files selected. Omitting the square brackets will result in the latter most file being set to ].

This is a very simple example and doesn't handle problems such as file extensions that aren't allowed or files named with PHP code (like a PHP equivalent of an SQL injection). See the documentation.
The first process is checking if there are any files, and if so, set the total number of them to $total.
Using the for loop allows an iteration of the $_FILES array and accessing each item one at a time. If that file doesn't encounter a problem then the if statement is true and the code from the single file upload is run.
If an problem is encountered the switch block is executed and an error is presented in accordance with the error for that particular upload.
$_COOKIE
		An associative array of variables passed to the current script via HTTP Cookies.
Cookies are variables that contain data and are stored on the client's computer.
Unlike the aforementioned superglobals, cookies must be created with a function (and not be assigning a value). The convention is below.

In this example a name is specified for the cookie (in this example it is "myVar"), a value is given (in this example it is "myVal", but a variable can be passed to assign its value to the cookie), and then an expiration time is given (in this example it is one hour since 3600 seconds is a minute).
Despite the convention for creating a cookie being different, it is accessed in the same way as the others.

To destroy a cookie, setcookie must be called again, but the expiration time is set to any time in the past. See below.

This will unset the cookies and remove it from the clients computer.
$_SESSION
An associative array containing session variables available to the current script. See the Session functions documentation for more information on how this is used.
Sessions are much like cookies except they are server side.
session_startTo use sessions you must include () at the top of your scripts to allow sessions to be utilised.
Setting a session variable is the same as setting any other variable. See example below.

session_idWhen starting a session a random ID is set as a cookie and called "PHPSESSID" and will contain the session ID for that current session. This can be accessed by calling the () function.
unset($_SESSION["myVar"It is possible to destroy session variables using the unset function (such that ]) would destroy that variable).
session_destoryThe alternative is to call (). This will destroy the entire session meaning that all session variables will no longer exist.
$_REQUEST
		An associative array that by default contains the contents of $_GET, $_POST and $_COOKIE.
As the PHP documentation states, this is just a collation of $_GET, $_POST, and $_COOKIE all in one variable.
php.iniSince it is possible for all three of those arrays to have an index with the same name, there is a setting in the  file called request_order which can specify which of the three has precedence.
For instance, if it was set to "GPC", then the value of $_COOKIE will be used, as it is read from left to right meaning the $_REQUEST will set its value to $_GET, then $_POST, and then $_COOKIE and since $_COOKIE is last that is the value that is in $_REQUEST. See this question. $_ENV
An associative array of variables passed to the current script via the environment method.
These variables are imported into PHP's global namespace from the environment under which the PHP parser is running. Many are provided by the shell under which PHP is running and different systems are likely running different kinds of shells, a definitive list is impossible. Please see your shell's documentation for a list of defined environment variables.
Other environment variables include the CGI variables, placed there regardless of whether PHP is running as a server module or CGI processor.
Anything stored within $_ENV is from the environment from which PHP is running in.
php.ini$_ENV is only populated if  allows it.
See this answer for more information on why $_ENV is not populated.
Section 4.2: PHP5 SuperGlobals
Below are the PHP5 SuperGlobals
$GLOBALS
$_REQUEST
$_GET
$_POST
$_FILES
$_SERVER
$_ENV
$_COOKIE
$_SESSION
$GLOBALS: This SuperGlobal Variable is used for accessing globals variables.


$_REQUEST: This SuperGlobal Variable is used to collect data submitted by a HTML Form.

$_GET: This SuperGlobal Variable is used to collect data submitted by HTML Form with get method.

$_POST: This SuperGlobal Variable is used to collect data submitted by HTML Form with post method.

$_FILES: This SuperGlobal Variable holds the information of uploaded files via HTTP Post method.


$_SERVER: This SuperGlobal Variable holds information about Scripts, HTTP Headers and Server Paths.

$_ENV: This SuperGlobal Variable Shell Environment Variable details under which the PHP is running. $_COOKIE: This SuperGlobal Variable is used to retrieve Cookie value with given Key.

$_SESSION: This SuperGlobal Variable is used to Set and Retrieve Session Value which is stored on Server.

Chapter 5: Outputting the Value of a Variable
To build a dynamic and interactive PHP program, it is useful to output variables and their values. The PHP language allows for multiple methods of value output. This topic covers the standard methods of printing a value in PHP and where these methods can be used.
Section 5.1: echo and print
echo("test"echo and print are language constructs, not functions. This means that they don't require parentheses around the argument like a function does (although one can always add parentheses around almost any PHP expression and thus ) won't do any harm either). They output the string representation of a variable, constant, or expression. They can't be used to print arrays or objects.

Shorthand notation for echo
When outside of PHP tags, a shorthand notation for echo is available by default, using <?= to begin output and ?> to end it. For example:

Note that there is no terminating ;. This works because the closing PHP tag acts as the terminator for the single statement. So, it is conventional to omit the semicolon in this shorthand notation.
Priority of print
Although the print is language construction it has priority like operator. It places between = += -= *= **= /= .= %= &= and and operators and has left association. Example:

Same example with brackets: echo '1' . print ('2' + 3); //output 511 Differences between echo and print
In short, there are two main differences:
print only takes one parameter, while echo can have multiple parameters. print returns a value, so can be used as an expression.
Section 5.2: Outputting a structured view of arrays and objects
print_r() - Outputting Arrays and Objects for debugging
print_r will output a human readable format of an array or object.
You may have a variable that is an array or object. Trying to output it with an echo will throw the error:
Notice: Array to string conversion. You can instead use the print_r function to dump a human readable
format of this variable.



Further, the output from print_r can be captured as a string, rather than simply echoed. For instance, the following code will dump the formatted version of $myarray into a new variable:

Note that if you are viewing the output of PHP in a browser, and it is interpreted as HTML, then the line breaks will not be shown and the output will be much less legible unless you do something like

Alternatively you can tell the browser that what you're outputting is plain text, and not HTML:

var_dump         () - Output human-readable debugging information about content of the argument(s) including its type and value
The output is more detailed as compared to print_r because it also outputs the type of the variable along with its value and other information like object IDs, array sizes, string lengths, reference markers, etc.
You can use var_dump to output a more detailed version for debugging.

Output is more detailed:

Note: If you are using xDebug in your development environment, the output of var_dump is limited / truncated by default. See the official documentation for more info about the options to change this.
var_export() - Output valid PHP Code
var_export() dumps a PHP parseable representation of the item.


To put the content into a variable, you can do this:

After that, you can output it like this:
 printf('$myarray = %s; %s', $array_export, PHP_EOL); printf('$mystring = %s; %s', $string_export, PHP_EOL); printf('$myint = %s; %s', $int_export, PHP_EOL); This will produce the following output:

Section 5.3: String concatenation with echo
You can use concatenation to join strings "end to end" while outputting them (with echo or print for example).
You can concatenate variables using a . (period/dot).

Similar to concatenation, echo (when used without parentheses) can be used to combine strings and variables together (along with other arbitrary expressions) using a comma (,).


String concatenation vs passing multiple arguments to echo
Passing multiple arguments to the echo command is more advantageous than string concatenation in some circumstances. The arguments are written to the output in the same order as they are passed in.

The problem with the concatenation is that the period . takes precedence in the expression. If concatenated, the above expression needs extra parentheses for the correct behavior. The precedence of the period affects ternary operators too.

Section 5.4: printf vs sprintf
printf will output a formatted string using placeholders

It is also possible to format a number with these 2 functions. This can be used to format a decimal value used to represent money so that it always has 2 decimal digits.

The two functions vprintf and vsprintf operate as printf and sprintf, but accept a format string and an array of values, instead of individual variables.
Section 5.5: Outputting large integers
On 32-bits systems, integers larger than PHP_INT_MAX are automatically converted to float. Outputting these as integer values (i.e. non-scientific notation) can be done with printf, using the float representation, as illustrated below:

    echo "  ", $i, "\n"; }
// outputs:
pow(1024,  1)  integer                 1024                                   1024  1024 pow(1024,  2)  integer              1048576                                1048576  1048576 pow(1024,  3)  integer           1073741824                             1073741824  1073741824 pow(1024,  4)   double        1099511627776                          1099511627776  1099511627776 pow(1024,  5)   double  1.1258999068426E+15                       1125899906842624  1.1258999068426E+15 pow(1024,  6)   double  1.1529215046068E+18                    1152921504606846976  1.1529215046068E+18 pow(1024,  9)   double  1.2379400392854E+27           1237940039285380274899124224  1.2379400392854E+27 pow(1024, 12)   double  1.3292279957849E+36  1329227995784915872903807060280344576  1.3292279957849E+36
Note: watch out for float precision, which is not infinite!
While this looks nice, in this contrived example the numbers can all be represented as a binary number since they are all powers of 1024 (and thus 2). See for example:

Section 5.6: Output a Multidimensional Array with index and value and print into the table


Output Multidimensional Array with index and value in table


Chapter 6: Constants
Section 6.1: Defining constants
Constants are created using the const statement or the define function. The convention is to use UPPERCASE letters for constant names. define("BETTER_APP_LANGUAGES", ["lu", "de"]); // arrays Define constant using another constant if you have one constant you can define another one based on it:
const TAU = PI * 2; define("EARTH_IS_ROUND", !EARTH_IS_FLAT); define("MORE_UNKNOWN", UNKNOWN); define("APP_ENV_UPPERCASE", strtoupper(APP_ENV)); // string manipulation is ok too // the above example (a function call) does not work with const: // const TIME = time(); # fails with a fatal error! Not a constant scalar expression define("MAX_SESSION_TIME_IN_MINUTES", MAX_SESSION_TIME / 60); const APP_FUTURE_LANGUAGES = [-1 => "es"] + APP_LANGUAGES; // array manipulations define("APP_BETTER_FUTURE_LANGUAGES", array_merge(["fr"], APP_BETTER_LANGUAGES));
Reserved constants
Some constant names are reserved by PHP and cannot be redefined. All these examples will fail:
define("true", false); // internal constant define("false", true); // internal constant
 define("CURLOPT_AUTOREFERER", "something"); // will fail if curl extension is loaded And a Notice will be issued:

Conditional defines
If you have several files where you may define the same variable (for example, your main config then your local config) then following syntax may help avoiding conflicts:
 defined("PI") || define("PI", 3.1415); // "define PI if it's not yet defined" const vs define define is a runtime expression while const a compile time one.
Thus define allows for dynamic values (i.e. function calls, variables etc.) and even dynamic names and conditional definition. It however is always defining relative to the root namespace.
const is static (as in allows only operations with other constants, scalars or arrays, and only a restricted set of them, the so called constant scalar expressions, i.e. arithmetic, logical and comparison operators as well as array dereferencing), but are automatically namespace prefixed with the currently active namespace.
const only supports other constants and scalars as values, and no operations.
Section 6.2: Class Constants
Constants can be defined inside classes using a const keyword.

This is useful to store types of items.

Section 6.3: Checking if constant is defined
Simple check
To check if constant is defined use the defined function. Note that this function doesn't care about constant's value, it only cares if the constant exists or not. Even if the value of the constant is null or false the function will still return true.


Note that constant becomes "visible" in your code only after the line where you have defined it:

Getting all defined constants
To get all defined constants including those created by PHP use the get_defined_constants function:

To get only those constants that were defined by your app call the function at the beginning and at the end of your script (normally after the bootstrap process):

It's sometimes useful for debugging
Section 6.4: Using constants
To use the constant simply use its name:

or if you don't know the name of the constant in advance, use the constant function:

Section 6.5: Constant arrays
Arrays can be used as plain constants and class constants from version PHP 5.6 onwards:

const ANSWER = [2,4];
Also from version PHP 7.0 this functionality was ported to the define function for plain constants.

Chapter 7: Magic Constants
Section 7.1: Dierence between __FUNCTION__ and __METHOD__
__FUNCTION__ returns only the name of the function whereas __METHOD__ returns the name of the class along with the name of the function:

Section 7.2: Dierence between __CLASS__, get_class() and get_called_class()
get_class()__CLASS__ magic constant returns the same result as  function called without parameters and they both return the name of the class where it was defined (i.e. where you wrote the function call/constant name ).
get_class($this) and get_called_class()In contrast,  functions call, will both return the name of the actual class which was instantiated:


Section 7.3: File & Directory Constants
Current file
You can get the name of the current PHP file (with the absolute path) using the __FILE__ magic constant. This is most often used as a logging/debugging technique.

Current directory
To get the absolute path to the directory where the current file is located use the __DIR__ magic constant.

dirname(__FILE__To get the absolute path to the directory where the current file is located, use ).

Getting current directory is often used by PHP frameworks to set a base directory:


Besides magic constants PHP also adds some fixed constants for working with paths:
DIRECTORY_SEPARATOR constant for separating directories in a path. Takes value / on *nix, and \ on Windows. The example with views can be rewritten with:
$view = 'page';
$viewFile = BASEDIR . DIRECTORY_SEPARATOR .'views' . DIRECTORY_SEPARATOR . $view;
Rarely used PATH_SEPARATOR constant for separating paths in the $PATH environment variable. It is ; on
Windows, : otherwise
Chapter 8: Comments
Section 8.1: Single Line Comments
The single line comment begins with "//" or "#". When encountered, all text to the right will be ignored by the PHP interpreter.

Section 8.2: Multi Line Comments
The multi-line comment can be used to comment out large blocks of code. It begins with /* and ends with */.


Chapter 9: Types
Section 9.1: Type Comparison
There are two types of comparison: loose comparison with == and strict comparison with ===. Strict comparison ensures both the type and value of both sides of the operator are the same.

You can also use strong comparison to check if type and value don't match using !==.
A typical example where the == operator is not enough, are functions that can return different types, like strpos, which returns false if the searchword is not found, and the match position (int) otherwise:
if(strpos('text', 'searchword') == false)
  // strpos returns false, so == comparison works as expected here, BUT:
if(strpos('text bla', 'text') == false)
  // strpos returns 0 (found match at position 0) and 0==false is true.
  // This is probably not what you expect!
if(strpos('text','text') === false)
  // strpos returns 0, and 0===false is false, so this works as expected.
Section 9.2: Boolean
Boolean is a type, having two values, denoted as true or false.
This code sets the value of $foo as true and $bar as false:

true and false are not case sensitive, so TRUE and FALSE can be used as well, even FaLsE is possible. Using lower case is most common and recommended in most code style guides, e.g. PSR-2.
Booleans can be used in if statements like this:

Due to the fact that PHP is weakly typed, if $foo above is other than true or false, it's automatically coerced to a boolean value.
The following values result in false:
a zero value: 0 (integer), 0.0 (float), or '0' (string) an empty string '' or array []
null (the content of an unset variable, or assigned to a variable)
Any other value results in true.
To avoid this loose comparison, you can enforce strong comparison using ===, which compares value and type. See Type Comparison for details.
bool) or (booleanTo convert a type into boolean, you can use the () cast before the type.

or call the boolval function:

Boolean conversion to a string (note that false yields an empty string):

Boolean conversion to an integer:

Note that the opposite is also possible:

Also all non-zero will return true:

Section 9.3: Float

Floats are floating point numbers, which allow more output precision than plain integers.
Floats and integers can be used together due to PHP's loose casting of variable types:

php does not show float as float number like other languages, for example:

Warning
Floating point precision
(From the PHP manual page)
Floating point numbers have limited precision. Although it depends on the system, PHP typically give a maximum relative error due to rounding in the order of 1.11e-16. Non elementary arithmetic operations may give larger errors, and error propagation must be considered when several operations are compounded.
Additionally, rational numbers that are exactly representable as floating point numbers in base 10, like 0.1 or 0.7, do not have an exact representation as floating point numbers in base 2 (binary), which is used internally, no matter the size of the mantissa. Hence, they cannot be converted into their internal binary counterparts without a small loss of precision. This can lead to confusing results: for example, floor((0.1+0.7)*10) will usually return 7 instead of the expected 8, since the internal representation will be something like 7.9999999999999991118....
So never trust floating number results to the last digit, and do not compare floating point numbers directly for equality. If higher precision is necessary, the arbitrary precision math functions and gmp functions are available.
Section 9.4: Strings
A string in PHP is a series of single-byte characters (i.e. there is no native Unicode support) that can be specified in four ways:
Single Quoted
Displays things almost completely "as is". Variables and most escape sequences will not be interpreted. The exception is that to display a literal single quote, one can escape it with a back slash ', and to display a back slash, one can escape it with another backslash \

Double Quoted
Unlike a single-quoted string, simple variable names and escape sequences in the strings will be evaluated. Curly braces (as in the last example) can be used to isolate complex variable names.

Heredoc
<<<identifierIn a heredoc string, variable names and escape sequences are parsed in a similar manner to double-quoted strings, though braces are not available for complex variable names. The start of the string is delimited by , and the end by identifier, where identifier is any valid PHP name. The ending identifier must appear on a line by itself. No whitespace is allowed before or after the identifier, although like any line in PHP, it must also be terminated by a semicolon.

Nowdoc
A nowdoc string is like the single-quoted version of heredoc, although not even the most basic escape sequences are evaluated. The identifier at the beginning of the string is wrapped in single quotes.
PHP 5.x Version ≥ 5.3
$my_string = <<< 'EOF'
A similar syntax to heredoc but, similar to single quoted strings, nothing is parsed (not even escaped apostrophes \' and backslashes \\.)

Section 9.5: Callable
Callables are anything which can be called as a callback. Things that can be termed a "callback" are as follows:
Anonymous functions
Standard PHP functions (note: not language constructs) Static Classes non-static Classes (using an alternate syntax)
Specific Object/Class Methods
Objects themselves, as long as the object is found in key 0 of an array Example Of referencing an object as an array element:

Callbacks can be denoted by callable type hint as of PHP 5.4.

Section 9.6: Resources
A resource is a special type of variable that references an external resource, such as a file, socket, stream, document, or connection.

get_resource_typeThere are different (sub-)types of resource. You can check the resource type using ():


You can find a complete list of built-in resource types here.
Section 9.7: Type Casting
PHP will generally correctly guess the data type you intend to use from the context it's used in, however sometimes it is useful to manually force a type. This can be accomplished by prefixing the declaration with the name of the required type in parenthesis:

But be careful: not all type casts work as one might expect:
// below 3 statements hold for 32-bits systems (PHP_INT_MAX=2147483647) // an integer value bigger than PHP_INT_MAX is automatically converted to float: var_dump(       999888777666 ); // float(999888777666) // forcing to (int) gives overflow: var_dump((int)  999888777666 ); // int(-838602302) // but in a string it just returns PHP_INT_MAX var_dump((int) "999888777666"); // int(2147483647)
var_dump((bool) []);      // bool(false) (empty array) var_dump((bool) [false]); // bool(true)  (non-empty array)
Section 9.8: Type Juggling
PHP is a weakly-typed language. It does not require explicit declaration of data types. The context in which the variable is used determines its data type; conversion is done automatically:


Section 9.9: Null
PHP represents "no value" with the null keyword. It's somewhat similar to the null pointer in C-language and to the NULL value in SQL.
Setting the variable to null:

Checking if the variable was set to null:

Null vs undefined variable
Notice: Undefined variable: nullvarIf the variable was not defined or was unset then any tests against the null will be successful but they will also generate a :

Therefore undefined values must be checked with isset: if (!isset($nullvar)) {  /* variable is null or is not even defined */  }
Section 9.10: Integers
Integers in PHP can be natively specified in base 2 (binary), base 8 (octal), base 10 (decimal), or base 16 (hexadecimal.)

Integers are 32 or 64 bits long, depending on the platform. The constant PHP_INT_SIZE holds integer size in bytes.
PHP_INT_MAX and (since PHP 7.0) PHP_INT_MIN are also available.
printf("Integers are %d bits long" . PHP_EOL, PHP_INT_SIZE * 8); printf("They go up to %d" . PHP_EOL, PHP_INT_MAX);
Integer values are automatically created as needed from floats, booleans, and strings. If an explicit typecast is

Integer overflow will be handled by conversion to a float:

There is no integer division operator in PHP, but it can be simulated using an implicit cast, which always 'rounds' by just discarding the float-part. As of PHP version 7, an integer division function was added.


Chapter 10: Operators
An operator is something that takes one or more values (or expressions, in programming jargon) and yields another value (so that the construction itself becomes an expression).
Operators can be grouped according to the number of values they take.
Section 10.1: Null Coalescing Operator (??)
Null coalescing is a new operator introduced in PHP 7. This operator returns its first operand if it is set and not NULL. Otherwise it will return its second operand.
The following example:

is equivalent to both:

and:

This operator can also be chained (with right-associative semantics):

which is an equivalent to:

Note:
When using coalescing operator on string concatenation don't forget to use parentheses ()

This will output John only, and if its $firstName is null and $lastName is Doe it will output Unknown Doe. In order to output John Doe, we must use parentheses like this.

echo ($firstName ?? "Unknown") . " " . ($lastName ?? "");
This will output John Doe instead of John only.
Section 10.2: Spaceship Operator (<=>)
PHP 7 introduces a new kind of operator, which can be used to compare expressions. This operator will return -1, 0 or 1 if the first expression is less than, equal to, or greater than the second expression.

Objects are not comparable, and so doing so will result in undefined behaviour.
<=This operator is particularly useful when writing a user-defined comparison function using usort, uasort, or uksort. Given an array of objects to be sorted by their weight property, for example, an anonymous function can use > to return the value expected by the sorting functions. usort($list, function($a, $b) { return $a->weight <=> $b->weight; }); In PHP 5 this would have required a rather more elaborate expression.

Section 10.3: Execution Operator (``)
The PHP execution operator consists of backticks (``) and is used to run shell commands. The output of the command will be returned, and may, therefore, be stored in a variable.

shell_execNote that the execute operator and () will give the same result.
Section 10.4: Incrementing (++) and Decrementing Operators (--)
Variables can be incremented or decremented by 1 with ++ or --, respectively. They can either precede or succeed variables and slightly vary semantically, as shown below.

More information about incrementing and decrementing operators can be found in the official documentation.
Section 10.5: Ternary Operator (?:)
The ternary operator can be thought of as an inline if statement. It consists of three parts. The operator, and two outcomes. The syntax is as follows:

<true value<false valueIf the operator is evaluated as true, the value in the first block will be returned (>), else the value in the second block will be returned (>). Since we are setting $value to the result of our ternary operator it will store the returned value.
Example:

empty($_POST['action'$_POST['action'$action would contain the string 'default' if ]) evaluates to true. Otherwise it would contain the value of ].
expr3expr1) ? (expr2The expression () : () evaluates to expr2 if expr1evaluates to true, and expr3 if expr1 evaluates to false.
expr1 ?: expr3It is possible to leave out the middle part of the ternary operator. Expression  returns expr1 if expr1 evaluates to TRUE, and expr3 otherwise. ?: is often referred to as Elvis operator.
This behaves like the Null Coalescing operator ??, except that ?? requires the left operand to be exactly null while ?: tries to resolve the left operand into a boolean and check if it resolves to boolean false.
Example:

In this example, setWidth accepts a width parameter, or default 0, to change the width session value. If $width is 0
getDefaultWidthgetDefaultWidth(if $width is not provided), which will resolve to boolean false, the value of () is used instead. The () function will not be called if $width did not resolve to boolean false.
Refer to Types for more information about conversion of variables to boolean.
Section 10.6: Logical Operators (&&/AND and ||/OR)
In PHP, there are two versions of logical AND and OR operators.
Operator	True if
$a and $bBoth $a and $b are true
$a && $bBoth $a and $b are true
$a or $bEither $a or $b is true
$a || $bEither $a or $b is true
Note that the && and || opererators have higher precedence than and and or. See table below:
	Evaluation	Result of $e	Evaluated as
$e = (false || true)$e = false || trueTrue
($e = false) or true$e = false or trueFalse
Because of this it's safer to use && and || instead of and and or.
Section 10.7: String Operators (. and .=)

Section 10.8: Object and Class Operators
Members of objects or classes can be accessed using the object operator (->) and the class operator (::).


$object->a instead of $object->$aNote that after the object operator, the $ should not be written (). For the class operator, this is not the case and the $ is necessary. For a constant defined in the class, the $ is never used.
var_dump(MyClass::Also note that d()); is only allowed if the function d() does not reference the object:

This causes a 'PHP Fatal error: Uncaught Error: Using $this when not in object context' These operators have left associativity, which can be used for 'chaining':

These operators have the highest precedence (they are not even mentioned in the manual), even higher that clone. Thus:

The value of $o1 is added to before the object is cloned!
Note that using parentheses to influence precedence did not work in PHP version 5 and older (it does in PHP 7):

Section 10.9: Combined Assignment (+= etc)
The combined assignment operators are a shortcut for an operation on some variable and subsequently assigning this new value to that variable.
Arithmetic:

Processing Multiple Arrays Together

Combined concatenation and assignment of a string:

Combined binary bitwise assignment operators:
$a = 0b00101010;  // $a now is 42
$a &= 0b00001111; // $a now is (00101010 & 00001111) => 00001010 (bitwise and) $a |= 0b00100010; // $a now is (00001010 | 00100010) => 00101010 (bitwise or)
$a ^= 0b10000010; // $a now is (00101010 ^ 10000010) => 10101000 (bitwise xor)
$a >>= 3;         // $a now is (10101000 >> 3) => 00010101 (shift right by 3)
$a <<= 1;         // $a now is (00010101 << 1) => 00101010 (shift left by 1)
Section 10.10: Altering operator precedence (with parentheses)
The order in which operators are evaluated is determined by the operator precedence (see also the Remarks section).

The precedence can be altered using parentheses: in

Section 10.11: Basic Assignment (=)

results in $a having the value some string.
The result of an assignment expression is the value being assigned. Note that a single equal sign = is NOT for comparison!

does the following:
1. Line 1 assigns 3 to $a.
2. Line 2 assigns 5 to $a. This expression yields value 5 as well.
3. Line 2 then assigns the result of the expression in parentheses (5) to $b.
Thus: both $a and $b now have value 5.
Section 10.12: Association
Left association
If the preceedence of two operators is equal, the associativity determines the grouping (see also the Remarks section):

* and % have equal precedence and left associativity. Because the multiplication occurs first (left), it is grouped.

Now, the modulus operator occurs first (left) and is thus grouped.
Right association

$b += Both $a and $b now have value 2 because 1 is grouped and then the result ($b is 2) is assigned to $a.
Section 10.13: Comparison Operators
Equality
For basic equality testing, the equal operator == is used. For more comprehensive checks, use the identical operator ===.
The identical operator works the same as the equal operator, requiring its operands have the same value, but also requires them to have the same data type.
For example, the sample below will display 'a and b are equal', but not 'a and b are identical'.

When using the equal operator, numeric strings are cast to integers.
Comparison of objects
new stdClass() ====== compares two objects by checking if they are exactly the same instance. This means that 
new stdClass() resolves to false, even if they are created in the same way (and have the exactly same values).
$a == $b== compares two objects by recursively checking if they are equal (deep equals). That means, for , if $a and $b are:
   1. of the same class
   2. have the same properties set, including dynamic properties
$a->property == $b->property   3. for each property $property set,  is true (hence recursively checked). Other commonly used operators
They include:
1. Greater Than (>)
2. Lesser Than (<)
3. Greater Than Or Equal To (>=)
4. Lesser Than Or Equal To (<=)
5. Not Equal To (!=)
6. Not Identically Equal To (!==)
$a > $b1. Greater Than: , returns true if $a's value is greater than of $b, otherwise returns false.
Example:

$a < $b2. Lesser Than: , returns true if $a's value is smaller that of $b, otherwise returns false.
Example:

$a >= $b3. Greater Than Or Equal To: , returns true if $a's value is either greater than of $b or equal to $b, otherwise returns false.
Example:

$a <= $b4. Smaller Than Or Equal To: , returns true if $a's value is either smaller than of $b or equal to $b, otherwise returns false.
Example:

5/6. Not Equal/Identical To: To rehash the earlier example on equality, the sample below will display 'a and b are not identical', but not 'a and b are not equal'.

Section 10.14: Bitwise Operators
Prefix bitwise operators
Bitwise operators are like logical operators but executed per bit rather than per boolean value.

Bitmask-bitmask operators
Bitwise AND &: a bit is set only if it is set in both operands

Bitwise OR |: a bit is set if it is set in either or both operands

Bitwise XOR ^: a bit is set if it is set in one operand and not set in another operand, i.e. only if that bit is in different state in the two operands

Example uses of bitmasks
These operators can be used to manipulate bitmasks. For example:

Here, the | operator is used to combine the two bitmasks. Although + has the same effect, | emphasizes that you are combining bitmasks, not adding two normal scalar integers.

This example (assuming $option always only contain one bit) uses:
the ^ operator to conveniently toggle bitmasks.
the | operator to set a bit neglecting its original state or other bits the ~ operator to convert an integer with only one bit set into an integer with only one bit not set the & operator to unset a bit, using these properties of &:
 ===  === Since &= with a set bit will not do anything ((1 & 1)1, (0 & 1)0), doing &= with an integer with only one bit not set will only unset that bit, not affecting other bits.
 ===  === &= with an unset bit will unset that bit ((1 & 0)0, (0 & 0)0)
Using the & operator with another bitmask will filter away all other bits not set in that bitmask.
If the output has any bits set, it means that any one of the options are enabled.
If the output has all bits of the bitmask set, it means that all of the options in the bitmask are enabled.
<=Bear in mind that these comparison operators: (< > <= >= == === != !== <> >) have higher precedence than these bitmask-bitmask operators: (| ^ &). As bitwise results are often compared using these comparison operators, this is a common pitfall to be aware of.
Bit-shifting operators
Bitwise left shift <<: shift all bits to the left (more significant) by the given number of steps and discard the bits exceeding the int size
<< $x is equivalent to unsetting the highest $x bits and multiplying by the $xth power of 2

>> $xBitwise right shift >>: discard the lowest shift and shift the remaining bits to the right (less significant)  is equivalent to dividing by the $xth power of 2 and discard the non-integer part

Example uses of bit shifting:
/= 16Fast division by 16 (better performance than )

On 32-bit systems, this discards all bits in the integer, setting the value to 0. On 64-bit systems, this unsets the most significant 32 bits and keep the least

$x & 0xFFFFFFFFsignificant 32 bits, equivalent to 
printf("%'06bNote: In this example, ") is used. It outputs the value in 6 binary digits.
Section 10.15: instanceof (type operator)
For checking whether some object is of a certain class, the (binary) instanceof operator can be used since PHP version 5.
The first (left) parameter is the object to test. If this variable is not an object, instanceof always returns false. If a constant expression is used, an error is thrown.
The second (right) parameter is the class to compare with. The class can be provided as the class name itself, a string variable containing the class name (not a string constant!) or an object of that class.

instanceof can also be used to check whether an object is of some class which extends another class or implements some interface:

To check whether an object is not of some class, the not operator (!) can be used:

$o instanceof MyClassNote that parentheses around  are not needed because instanceof has higher precedence than !, although it may make the code better readable with parentheses.
Caveats
If a class does not exist, the registered autoload functions are called to try to define the class (this is a topic outside the scope of this part of the Documentation!). In PHP versions before 5.1.0, the instanceof operator would also trigger these calls, thus actually defining the class (and if the class could not be defined, a fatal error would occur). To avoid this, use a string:

As of PHP version 5.1.0, the registered autoloaders are not called anymore in these situations.
Older versions of PHP (before 5.0)
In older versions of PHP (before 5.0), the is_a function can be used to determine wether an object is of some class. This function was deprecated in PHP version 5 and undeprecated in PHP version 5.3.0.

Chapter 11: References
Section 11.1: Assign by Reference
This is the first phase of referencing. Essentially when you assign by reference, you're allowing two variables to share the same value as such.

$foo and $bar are equal here. They do not point to one another. They point to the same place (the "value").
arrayYou can also assign by reference within the () language construct. While not strictly being an assignment by reference.

Assigning by reference is not only limited to variables and arrays, they are also present for functions and all "passby-reference" associations.

barAssignment is key within the function definition as above. You can not pass an expression by reference, only a value/variable. Hence the instantiation of $a in ().
Section 11.2: Return by Reference
Occasionally there comes time for you to implicitly return-by-reference.
Returning by reference is useful when you want to use a function to find to which variable a reference should be bound. Do not use return-by-reference to increase performance. The engine will automatically optimize this on its own. Only return references when you have a valid technical reason to do so.
Taken from the PHP Documentation for Returning By Reference.
There are many different forms return by reference can take, including the following example:

Return by reference is not only limited to function references. You also have the ability to implicitly call the function:

echo &myFunctionYou cannot directly reference a function call, it has to be assigned to a variable before harnessing it. To see how that works, simply try ();.
Notes
 You are required to specify a reference (&) in both places you intend on using it. That means, for your
...function &myFunctionfunction definition (() {) and in the calling reference (function
callFunction(&$variable... or &myFunction) {();).
Notice: Only You can only return a variable by reference. Hence the instantiation of $a in the example above. This means you can not return an expression, otherwise an E_NOTICE PHP error will be generated (
variable references should be returned by reference in ......).
     Return by reference does have legitimate use cases, but I should warn that they should be used sparingly, only after exploring all other potential options of achieving the same goal.
  Section 11.3: Pass by Reference
This allows you to pass a variable by reference to a function or element that allows you to modify the original variable.
Passing-by-reference is not limited to variables only, the following can also be passed by reference:
foo(new SomeClassNew statements, e.g. )
References returned from functions
Arrays
$myElementA common use of "passing-by-reference" is to modify initial values within an array without going to the extent of creating new arrays or littering your namespace. Passing-by-reference is as simple as preceding/prefixing the variable with an & => &.
Below is an example of harnessing an element from an array and simply adding 1 to its initial value.

Now when you harness any element within $arr, the original element will be updated as the reference was increased. You can verify this by:

Functions
Another common usage for passing-by-reference is within functions. Modifying the original variable is as simple as:

Which can be verified by echo'ing the original variable.

There are various restrictions around functions, as noted below from the PHP docs:
Note: There is no reference sign on a function call - only on function definitions. Function definitions alone are enough to correctly pass the argument by reference. As of PHP 5.3.0, you will get a warning saying that "call-time pass-by-reference" is deprecated when you use & in foo(&$a);. And as of PHP 5.4.0, call-time pass-by-reference was removed, so using it will raise a fatal error.

Chapter 12: Arrays
Parameter	Detail
The key is the unique identifier and index of an array. It may be a string or an integer. Therefore,
'foo', '5', 10, 'a2b', ...Key valid keys would be 
For each key there is a corresponding value (null otherwise and a notice is emitted upon access). The
Value value has no restrictions on the input type.
An array is a data structure that stores an arbitrary number of values in a single value. An array in PHP is actually an ordered map, where map is a type that associates values to keys.
Section 12.1: Initializing an Array
An array can be initialized empty:

An array can be initialized and preset with values:

An array can also be initialized with custom indexes (also called an associative array):

If the variable hasn't been used before, PHP will create it automatically. While convenient, this might make the code harder to read:


The index will usually continue where you left off. PHP will try to use numeric strings as integers:
$foo = [2 => 'apple', 'melon'];  // Array( [2] => apple, [3] => melon )
$foo = ['2' => 'apple', 'melon']; // same as above
$foo = [2 => 'apple', 'this is index 3 temporarily', '3' => 'melon']; // same as above! The last entry will overwrite the second!
To initialize an array with fixed size you can use SplFixedArray:

Note: An array created using SplFixedArray has a reduced memory footprint for large sets of data, but the keys must be integers.
To initialize an array with a dynamic size but with n non empty elements (e.g. a placeholder) you can use a loop as follows:

array_fillIf all your placeholders are the same then you can also create it using the function ():
		array array_fill ( int $start_index , int $num , mixed $value )
This creates and returns an array with num entries of value, keys starting at start_index.
Note: If the start_index is negative it will start with the negative index and continue from 0 for the following elements.
$a = array_fill(5, 6, 'banana'); // Array ( [5] => banana, [6] => banana, ..., [10] => banana)
$b = array_fill(-2, 4, 'pear'); // Array ( [-2] => pear, [0] => pear, ..., [2] => pear)
array_fillConclusion: With () you are more limited for what you can actually do. The loop is more flexible and opens you a wider range of opportunities.
rangeWhenever you want an array filled with a range of numbers (e.g. 1-4) you could either append every single element to an array or use the () function:
		array range ( mixed $start , mixed $end [, number $step = 1 ] )
This function creates an array containing a range of elements. The first two parameters are required, where they set the start and end points of the (inclusive) range. The third parameter is optional and defines the size of the steps being taken. Creating a range from 0 to 4 with a stepsize of 1, the resulting array would consist of the following elements: 0, 1, 2, 3, and 4. If the step size is increased to 2 (i.e. (0, 4, 2)) then the resulting array range can work with integers, floats, booleans (which become casted to integers), and strings. Caution should be taken, however, when using floats as arguments due to the floating point precision problem.
Section 12.2: Check if key exists

isset() treats a null valued element as non-existent. Whereas !emptyemptyNote that () does the same for any element that equals false (using a weak comparision; for example, null, '' and 0 are all treated as false by !()).
isset($map['foobar']); is true, !empty($map['foobar'emptyWhile ]) is false. This can lead to mistakes (for example, it is easy to forget that the string '0' is treated as false) so use of !() is often frowned upon.
isset() and !emptyNote also that () will work (and return false) if $map is not defined at all. This makes them somewhat error-prone to use:
// Note "long" vs "lang", a tiny typo in the variable name.
$my_array_with_a_long_name = ['foo' => true]; array_key_exists('foo', $my_array_with_a_lang_name); // shows a warning isset($my_array_with_a_lang_name['foo']); // returns false
You can also check for ordinal arrays:

isset() has better performance than array_key_existsNote that () as the latter is a function and the former a language construct.
key_exists(), which is an alias for array_key_existsYou can also use ().
Section 12.3: Validating the array type
is_arrayThe function () returns true if a variable is an array.

You can type hint the array type in a function to enforce a parameter type; passing anything else will result in a fatal error.


Section 12.4: Creating an array of variables

This method is often used in frameworks to pass an array of variables between two components.
Section 12.5: Checking if a value exists in array
in_arrayThe function () returns true if an item exists in an array.


array_searchYou can also use the function () to get the key of a specific item in an array.

PHP 5.x Version ≥ 5.5
array_column() in conjunction with array_searchIn PHP 5.5 and later you can use ().
This is particularly useful for checking if a value exists in an associative array:

Section 12.6: ArrayAccess and Iterator Interfaces
Another useful feature is accessing your custom object collections as arrays in PHP. There are two interfaces available in PHP (>=5.0.0) core to support this: ArrayAccess and Iterator. The former allows you to access your custom objects as array.
ArrayAccess
Assume we have a user class and a database table storing all the users. We would like to create a UserCollection class that will:
1. allow us to address certain user by their username unique identifier
2. perform basic (not all CRUD, but at least Create, Retrieve and Delete) operations on our users collection
Consider the following source (hereinafter we're using short array creation syntax [] available since version 5.4):


then we can:
$users = new UserCollection();
var_dump(empty($users['testuser']),isset($users['testuser'])); $users['testuser'] = ['username' => 'testuser',
                      'password' => 'testpassword',                       'email'    => 'test@test.com']; var_dump(empty($users['testuser']), isset($users['testuser']), $users['testuser']); unset($users['testuser']); var_dump(empty($users['testuser']), isset($users['testuser']));
which will output the following, assuming there was no testuser before we launched the code:

IMPORTANT: offsetExists is not called when you check existence of a key with array_key_exists function. So the following code will output false twice:
var_dump(array_key_exists('testuser', $users)); $users['testuser'] = ['username' => 'testuser',
                      'password' => 'testpassword',                       'email'    => 'test@test.com']; var_dump(array_key_exists('testuser', $users));
Iterator
Let's extend our class from above with a few functions from Iterator interface to allow iterating over it with foreach and while.
First, we need to add a property holding our current index of iterator, let's add it to the class properties as $_position:

Second, let's add Iterator interface to the list of interfaces being implemented by our class:

then add the required by the interface functions themselves:


So all in all here is complete source of the class implementing both interfaces. Note that this example is not perfect, because the IDs in the database may not be sequential, but this was written just to give you the main idea: you can address your objects collections in any possible way by implementing ArrayAccess and Iterator interfaces:

and a foreach looping through all user objects:

which will output something like

Chapter 13: Array iteration
Section 13.1: Iterating multiple arrays together
Sometimes two arrays of the same length need to be iterated together, for example:

array_map is the simplest way to accomplish this:

which will output:

This can be done through a common index:

array_values($array)[$i] can be used to replace $array[$iIf the two arrays don't have the incremental keys, ].
If both arrays have the same order of keys, you can also use a foreach-with-key loop on one of the arrays:

Separate arrays can only be looped through if they are the same length and also have the same key name. This means if you don't supply a key and they are numbered, you will be fine, or if you name the keys and put them in the same order in each array.
You can also use array_combine.
$combinedArray = array_combine($people, $foods);
// $combinedArray = ['Tim' => 'chicken', 'Tony' => 'beef', 'Turanga' => 'slurm'];
Then you can loop through this by doing the same as before:

Section 13.2: Using an incremental index
This method works by incrementing an integer from 0 to the greatest index in the array.

This also allows iterating an array in reverse order without using array_reverse, which may result in overhead if the array is large.

You can skip or rewind the index easily using this method.

Output:
For arrays that do not have incremental indices (including arrays with indices in reverse order, e.g. [1
=> "bar"], ["foo" => "f", "bar" => "b"]), this cannot be done directly. array_values or array_keys can be
used instead:

Section 13.3: Using internal array pointers
Each array instance contains an internal pointer. By manipulating this pointer, different elements of an array can be retrieved from the same call at different times.
Using each
eachEach call to () returns the key and value of the current array element, and increments the internal array pointer.

Using next

Note that this example assumes no elements in the array are identical to boolean false. To prevent such assumption, use key to check if the internal pointer has reached the end of the array:

This also facilitates iterating an array without a direct loop:

Section 13.4: Using foreach
Direct loop

Loop with keys

Loop by reference
In the foreach loops in the above examples, modifying the value ($color or $food) directly doesn't change its value in the array. The & operator is required so that the value is a reference pointer to the element in the array.


This is similar to:

Concurrency
PHP arrays can be modified in any ways during iteration without concurrency problems (unlike e.g. Java Lists). If the array is iterated by reference, later iterations will be affected by changes to the array. Otherwise, the changes to the array will not affect later iterations (as if you are iterating a copy of the array instead). Compare looping by value:

Output:

But if the array is iterated with reference,

Output:

 => 5 is no longer iterated, and 6 => 7 is changed to 6 => 17The key-value set of 4.
Section 13.5: Using ArrayObject Iterator
Php arrayiterator allows you to modify and unset the values while iterating over arrays and objects.
Example:

Output:


Chapter 14: Executing Upon an Array
Section 14.1: Applying a function to each element of an array
array_mapTo apply a function to every item in an array, use (). This will return a new array.

Instead of using an anonymous function, you could use a named function. The above could be written like:

If the named function is a class method the call of the function has to include a reference to a class object the method belongs to:

array_walk() and array_walk_recursiveAnother way to apply a function to every item in an array is (). The
callback passed into these functions take both the key/index and value of each array item. These functions will not return a new array, instead a boolean for success. For example, to print every element in a simple array:

The value parameter of the callback may be passed by reference, allowing you to change the value directly in the original array:

array$array now is (2,3,4,5,6);
array_walk_recursiveFor nested arrays, () will go deeper into each sub-array:

Note: array_walk and array_walk_recursive let you change the value of array items, but not the keys. Passing the keys by reference into the callback is valid but has no effect.
Section 14.2: Split array into chunks
array_chunk() splits an array into chunks
Let's say we've following single dimensional array,

Now using array_chunk() on above PHP array,

Above code will make chunks of 2 array elements and create a multidimensional array as follow.

If all the elements of the array is not evenly divided by the chunk size, last element of the output array will be remaining elements.
If we pass second argument as less then 1 then E_WARNING will be thrown and output array will be NULL.
ParameterDetails$array (array)Input array, the array to work on$size (int)Size of each chunk ( Integer value)$preserve_keys (boolean) (optional) If you want output array to preserve the keys set it to TRUE otherwise FALSE.
Section 14.3: Imploding an array into string
implode() combines all the array values but looses all the key info:

array_keysImploding keys can be done using () call:

Imploding keys with values is more complex but can be done using functional style:

Section 14.4: "Destructuring" arrays using list()
Use list() to quick assign a list of variable values into an array. See also compact()

With PHP 7.1 (currently in beta) you will be able to use short list syntax:

Section 14.5: array_reduce
array_reduce reduces array into a single value. Basically, The array_reduce will go through every item with the result from last iteration and produce new value to the next iteration.
array_reduce ($array, function($carry, $item){...}, $defaul_value_of_first_carryUsage: )
$carry is the result from the last round of iteration. $item is the value of current position in the array.
Sum of array


result:15
The largest number in array

result:211
Is all item more than 100
$result = array_reduce([101, 230, 210, 341, 251], function($carry, $item){         return $carry && $item > 100;
 }, true); //default value must set true result:true
Is any item less than 100
$result = array_reduce([101, 230, 21, 341, 251], function($carry, $item){         return $carry || $item < 100;
 }, false);//default value must set false result:true
Like implode($array, $piece)

result:"hello-world-PHP-language" if make a implode method, the source code will be:

Section 14.6: Push a Value on an Array
$arrayThere are two ways to push an element to an array: array_push and [] = The array_push is used like this:
$array = [1,2,3];
$newArraySize = array_push($array, 5, 6); // The method returns the new size of the array print_r($array); // Array is passed by reference, therefore the original array is modified to



Chapter 15: Manipulating an Array
Section 15.1: Filtering an array
In order to filter out values from an array and obtain a new array containing all the values that satisfy the filter condition, you can use the array_filter function.
Filtering non-empty values
The simplest case of filtering is to remove all "empty" values:
$my_array = [1,0,2,null,3,'',4,[],5,6,7,8];
$non_empties = array_filter($my_array); // $non_empties will contain [1,2,3,4,5,6,7,8];
Filtering by callback
This time we define our own filtering rule. Suppose we want to get only even numbers:

The array_filter function receives the array to be filtered as its first argument, and a callback defining the filter predicate as its second.
Version ≥ 5.6
Filtering by index
A third parameter can be provided to the array_filter function, which allows to tweak which values are passed to the callback. This parameter can be set to either ARRAY_FILTER_USE_KEY or ARRAY_FILTER_USE_BOTH, which will result in the callback receiving the key instead of the value for each element in the array, or both value and key as its arguments. For example, if you want to deal with indexes istead of values:

Note that array_filter preserves the original array keys. A common mistake would be to try an use for loop over the filtered array:


This happens because the values which were on positions 1 (there was 0), 3 (null), 5 (empty string '') and 7 (empty array []) were removed along with their corresponding index keys.
If you need to loop through the result of a filter on an indexed array, you should first call array_values on the result of array_filter in order to create a new array with the correct indexes:

Section 15.2: Removing elements from an array
To remove an element inside an array, e.g. the element with the index 1.

This will remove the apples from the list, but notice that unset does not change the indexes of the remaining elements. So $fruit now contains the indexes 0 and 2.
For associative array you can remove like this:

Now $fruit is

Note that

unsets the variable and thus removes the whole array, meaning none of its elements are accessible anymore. Removing terminal elements
array_shift() - Shift an element off the beginning of array.
Example:

Output:

array_pop() - Pop the element off the end of array.
Example:

Output:

Section 15.3: Sorting an Array
There are several sort functions for arrays in php: sort()
Sort an array in ascending order by value.

results in

rsort()
Sort an array in descending order by value.

results in

asort()
Sort an array in ascending order by value and preserve the indices.

results in

arsort()
Sort an array in descending order by value and preserve the indices.

results in

ksort()
Sort an array in ascending order by key

results in

krsort()
Sort an array in descending order by key.

results in

natsort()
Sort an array in a way a human being would do (natural order).

results in


natcasesort()
Sort an array in a way a human being would do (natural order), but case intensive

results in

shuffle()
Shuffles an array (sorted randomly).

As written in the description it is random so here only one example in what it can result

usort()
Sort an array with a user defined comparison function.

results in


uasort()
Sort an array with a user defined comparison function and preserve the keys.

results in

uksort()
Sort an array by keys with a user defined comparison function.

results in

Section 15.4: Whitelist only some array keys
When you want to allow only certain keys in your arrays, especially when the array comes from request parameters, you can use array_intersect_key together with array_flip.
$parameters = ['foo' => 'bar', 'bar' => 'baz', 'boo' => 'bam'];
$allowedKeys = ['foo', 'bar'];
$filteredParameters = array_intersect_key($parameters, array_flip($allowedKeys));
// $filteredParameters contains ['foo' => 'bar', 'bar' => 'baz]
If the parameters variable doesn't contain any allowed key, then the filteredParameters variable will consist of an empty array.
Since PHP 5.6 you can use array_filter for this task too, passing the ARRAY_FILTER_USE_KEY flag as the third parameter:

array_intersect_key() combined with array_flipUsing array_filter gives the additional flexibility of performing an arbitrary test against the key, e.g. $allowedKeys could contain regex patterns instead of plain strings. It also more explicitly states the intention of the code than ().
Section 15.5: Adding element to start of array
array_unshiftSometimes you want to add an element to the beginning of an array without modifying any of the current elements (order) within the array. Whenever this is the case, you can use ().
() prepends passed elements to the front of the array. Note that the list of elements is
array_unshiftprepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be touched.
array_unshiftTaken from the PHP documentation for ().
If you'd like to achieve this, all you need to do is the following:

This will now add 4 as the first element in your array. You can verify this by:

n+1Since array_unshift forces the array to reset the key-value pairs as the new element let the following entries have the keys  it is smarter to create a new array and append the existing array to the newly created array.
Example:

Output ($joinedArray):
Array ( [0] => oranges [1] => apples [2] => bananas [3] => pears )
Eaxmple/Demo
Section 15.6: Exchange values with keys
array_flip function will exchange all keys with its elements.

Section 15.7: Merge two arrays into one array

Associative array:

1. Merges the elements of one or more arrays together so that the values of one are appended to the end of
the previous one. It returns the resulting array.
2. If the input arrays have the same string keys, then the later value for that key will overwrite the previous one. If, however, the arrays contain numeric keys, the later value will not overwrite the original value, but will be appended.
3. Values in the input array with numeric keys will be renumbered with incrementing keys starting from zero in the result array.

Chapter 16: Processing Multiple Arrays Together
Section 16.1: Array intersection
The array_intersect function will return an array of values that exist in all arrays that were passed to this function.

Array keys are preserved. Indexes from the original arrays are not.
array_intersect only check the values of the arrays. array_intersect_assoc function will return intersection of arrays with keys.
$array_one = [1 => 'one',2 => 'two',3 => 'three'];
$array_two = [1 => 'one', 2 => 'two', 3 => 'two', 4 => 'three'];
$array_three = [1 => 'one', 2 => 'two'];
 $intersect = array_intersect_assoc($array_one, $array_two, $array_three); // $intersect contains [1 =>'one',2 => 'two'] array_intersect_key function only check the intersection of keys. It will returns keys exist in all arrays.

Section 16.2: Merge or concatenate arrays

Note that array_merge will change numeric indexes, but overwrite string indexes

array_merge overwrites the values of the first array with the values of the second array, if it cannot renumber the index.
You can use the + operator to merge two arrays in a way that the values of the first array never get overwritten, but it does not renumber numeric indexes, so you lose values of arrays that have an index that is also used in the first array.

Section 16.3: Changing a multidimensional array to associative array
If you have a multidimensional array like this:

And you want to change it to an associative array like this:

You can use this code:

Or, you can skip setting $associativeArrayKeys and $associativeArrayValues and use this simple one liner:
$associativeArray = array_combine(array_column($multidimensionalArray, 0), array_column($multidimensionalArray, 1));
Section 16.4: Combining two arrays (keys from one, values from another)
The following example shows how to merge two arrays into one associative array, where the key values will be the items of the first array, and the values will be from the second:



Chapter 17: Datetime Class
Section 17.1: Create Immutable version of DateTime from Mutable prior PHP 5.6
To create \DateTimeImmutable in PHP 5.6+ use:

Prior PHP 5.6 you can use:
\DateTimeImmutable::createFromFormat(\DateTime::ISO8601, $mutable->format(\DateTime::ISO8601), $mutable->getTimezone());
Section 17.2: Add or Subtract Date Intervals
We can use the class DateInterval to add or subtract some interval in a DateTime object.
See the example below, where we are adding an interval of 7 days and printing a message on the screen:
$now = new DateTime();// empty argument returns the current date
$interval = new DateInterval('P7D');//this objet represents a 7 days interval
$lastDay = $now->add($interval); //this will return a DateTime object
$formatedLastDay = $lastDay->format('Y-m-d');//this method format the DateTime object and returns a String
 echo "Samara says: Seven Days. You'll be happy on $formatedLastDay."; This will output (running on Aug 1st, 2016):
		Samara says: Seven Days. You'll be happy on 2016-08-08.
We can use the sub method in a similar way to subtract dates

This will output (running on Aug 1st, 2016):
		Samara says: Seven Days. You were happy last on 2016-07-25.
Section 17.3: getTimestamp
getTimeStemp is a unix representation of a datetime object.

this will out put an integer indication the seconds that have elapsed since 00:00:00 UTC, Thursday, 1 January 1970.
Section 17.4: setDate
setDate sets the date in a DateTime object.

this example sets the date to be the twenty-fifth of July, 2015, it will produce the following result:

Section 17.5: Create DateTime from custom format
PHP is able to parse a number of date formats. If you want to parse a non-standard format, or if you want your
DateTime::createFromFormatcode to explicitly state the format to be used, then you can use the static  method:
Object oriented style

Procedural style

Section 17.6: Printing DateTimes
PHP 4+ supplies a method, format that converts a DateTime object into a string with a desired format. According to PHP Manual, this is the object oriented function:

The function date() takes one parameters - a format, which is a string
Format
The format is a string, and uses single characters to define the format:
Y: four digit representation of the year (eg: 2016) y: two digit representation of the year (eg: 16) m: month, as a number (01 to 12)
M: month, as three letters (Jan, Feb, Mar, etc) j: day of the month, with no leading zeroes (1 to 31) D: day of the week, as three letters (Mon, Tue, Wed, etc) h: hour (12-hour format) (01 to 12)
H: hour (24-hour format) (00 to 23) A: either AM or PM i: minute, with leading zeroes (00 to 59) s: second, with leading zeroes (00 to 59) The complete list can be found here Usage
These characters can be used in various combinations to display times in virtually any format. Here are some examples:

Procedural
The procedural format is similar:


Chapter 18: Working with Dates and Time
Section 18.1: Getting the dierence between two dates / times
The most feasible way is to use, the DateTime class.
An example:

Also, comparing two dates is much easier, just use the Comparison operators , like:
<?php
// Create a date time object, which has the value of ~ two years ago
$twoYearsAgo = new DateTime("2014-01-18 20:05:56");
// Create a date time object, which has the value of ~ now
$now = new DateTime("2016-07-21 02:55:07"); var_dump($now > $twoYearsAgo); // prints bool(true) var_dump($twoYearsAgo > $now); // prints bool(false) var_dump($twoYearsAgo <= $twoYearsAgo); // prints bool(true) var_dump($now == $now); // prints bool(true)
Section 18.2: Convert a date into another format
The Basics
strtotime() with date(). strtotime()The simplist way to convert one date format into another is to use  will
date()convert the date into a Unix Timestamp. That Unix Timestamp can then be passed to  to convert it to the new format.


Or as a one-liner:
$new_date_format = date('Y-m-d H:i:s', strtotime('2008-07-01T22:35:17.02'));
strtotimestrtotimeKeep in mind that () requires the date to be in a valid format. Failure to provide a valid format will result in () returning false which will cause your date to be 1969-12-31.
DateTimeUsing ()
DateTimeDateTimeAs of PHP 5.2, PHP offered the () class which offers us more powerful tools for working with dates (and time). We can rewrite the above code using () as so:

Working with Unix timestamps
date() takes a Unix timestamp as its second parameter and returns a formatted date for you:

DateTime() works with Unix timestamps by adding an @ before the timestamp:

If the timestamp you have is in milliseconds (it may end in 000 and/or the timestamp is thirteen characters long) you will need to convert it to seconds before you can can convert it to another format. There's two ways to do this:
substr	 Trim the last three digits off using 	()
substrTrimming the last three digits can be achieved several ways, but using () is the easiest:

You can also convert the timestamp into seconds by dividing by 1000. Because the timestamp is too large for 32 bit systems to do math on you will need to use the BCMath library to do the math as strings:

strtotimeTo get a Unix Timestamp you can use () which returns a Unix Timestamp:

DateTime::getTimestampWith DateTime() you can use ()

If you're running PHP 5.2 you can use the U formatting option instead:

Working with non-standard and ambiguous date formats
Unfortunately not all dates that a developer has to work with are in a standard format. Fortunately PHP 5.3
DateTime::createFromFormatprovided us with a solution for that. () allows us to tell PHP what format a date string is in so it can be successfully parsed into a DateTime object for further manipulation.
$date = DateTime::createFromFormat('F-d-Y h:i A', 'April-18-1973 9:48 AM');
$new_date_format = $date->format('Y-m-d H:i:s');
DateTimeIn PHP 5.4 we gained the ability to do class member access on instantiation has been added which allows us to turn our () code into a one-liner:
$new_date_format = (new DateTime('2008-07-01T22:35:17.02'))->format('Y-m-d H:i:s');
DateTime::createFromFormatUnfortunately this does not work with () yet.
Section 18.3: Parse English date descriptions into a Date format
strtotime() function combined with dateUsing the () you can parse different English text descriptions to dates:
// Gets the current date echo date("m/d/Y", strtotime("now")), "\n"; // prints the current date echo date("m/d/Y", strtotime("10 September 2000")), "\n"; // prints September 10, 2000 in the m/d/Y format echo date("m/d/Y", strtotime("-1 day")), "\n"; // prints yesterday's date echo date("m/d/Y", strtotime("+1 week")), "\n"; // prints the result of the current date + a week echo date("m/d/Y", strtotime("+1 week 2 days 4 hours 2 seconds")), "\n"; // same as the last example but with extra days, hours, and seconds added to it echo date("m/d/Y", strtotime("next Thursday")), "\n"; // prints next Thursday's date echo date("m/d/Y", strtotime("last Monday")), "\n"; // prints last Monday's date echo date("m/d/Y", strtotime("First day of next month")), "\n"; // prints date of first day of next month echo date("m/d/Y", strtotime("Last day of next month")), "\n"; // prints date of last day of next month echo date("m/d/Y", strtotime("First day of last month")), "\n"; // prints date of first day of last month echo date("m/d/Y", strtotime("Last day of last month")), "\n"; // prints date of last day of last month
Section 18.4: Using Predefined Constants for Date Format
dateWe can use Predefined Constants for Date format in () instead of the conventional date format strings since PHP 5.1.0.
Predefined Date Format Constants Available
DATE_ATOM - Atom (2016-07-22T14:50:01+00:00)
DATE_COOKIE - HTTP Cookies (Friday, 22-Jul-16 14:50:01 UTC)
DATE_RSS - RSS (Fri, 22 Jul 2016 14:50:01 +0000)
DATE_W3C - World Wide Web Consortium (2016-07-22T14:50:01+00:00)
DATE_ISO8601 - ISO-8601 (2016-07-22T14:50:01+0000)
DATE_RFC822 - RFC 822 (Fri, 22 Jul 16 14:50:01 +0000)
DATE_RFC850 - RFC 850 (Friday, 22-Jul-16 14:50:01 UTC)
DATE_RFC1036 - RFC 1036 (Fri, 22 Jul 16 14:50:01 +0000)
DATE_RFC1123 - RFC 1123 (Fri, 22 Jul 2016 14:50:01 +0000)
DATE_RFC2822 - RFC 2822 (Fri, 22 Jul 2016 14:50:01 +0000)
DATE_RFC3339 - Same as DATE_ATOM (2016-07-22T14:50:01+00:00)
Usage Examples


Chapter 19: Control Structures
Section 19.1: if else
The if statement in the example above allows to execute a code fragment, when the condition is met. When you want to execute a code fragment, when the condition is not met you extend the if with an else.

PHP Manual - Control Structures - Else
The ternary operator as shorthand syntax for if-else
The ternary operator evaluates something based on a condition being true or not. It is a comparison operator and often used to express a simple if-else condition in a shorter form. It allows to quickly test a condition and often replaces a multi-line if statement, making your code more compact.
$a=1; $bThis is the example from above using a ternary expression and variable values: =2;
echo ($a > $b) ? "a is greater than b" : "a is NOT greater than b";
Outputs: a is NOT greater than b.
Section 19.2: Alternative syntax for control structures
PHP provides an alternative syntax for some control structures: if, while, for, foreach, and switch.
endif;, endwhile;, endfor;, endforeach;, or endswitchWhen compared to the normal syntax, the difference is, that the opening brace is replaced by a colon (:) and the closing brace is replaced by ;, respectively. For individual examples, see the topic on alternative syntax for control structures.

Multiple elseif statements using short-syntax:

PHP Manual - Control Structures - Alternative Syntax
Section 19.3: while
while loop iterates through a block of code as long as a specified condition is true.

Output:
123456789
For detailed information, see the Loops topic.
Section 19.4: do-while
do-while loop first executes a block of code once, in every case, then iterates through that block of code as long as
a specified condition is true.

For detailed information, see the Loops topic.
Section 19.5: goto
The goto operator allows to jump to another section in the program. It's available since PHP 5.3.
goto MyLabelThe goto instruction is a goto followed by the desired target label: ;.
MyLabelThe target of the jump is specified by a label followed by a colon: :.
Hello WorldThis example will print !:

Section 19.6: declare
declare is used to set an execution directive for a block of code.
The following directives are recognized:
ticks encoding strict_types
For instance, set ticks to 1:

To enable strict type mode, the declare statement is used with the strict_types declaration:

Section 19.7: include & require
require
require is similar to include, except that it will produce a fatal E_COMPILE_ERROR level error on failure. When the require fails, it will halt the script. When the include fails, it will not halt the script and only emit E_WARNING.

PHP Manual - Control Structures - Require include

Be careful with this approach, since it is considered a code smell, because the included file is altering amount and content of the defined variables in the given scope.
You can also include file, which returns a value. This is extremely useful for handling configuration arrays:


This approach will prevent the included file from polluting your current scope with changed or added variables. PHP Manual - Control Structures - Include include & require can also be used to assign values to a variable when returned something by file.
Example : include1.php file :

index.php file :

Section 19.8: return
The return statement returns the program control to the calling function.
When return is called from within a function, the execution of the current function will end.

returnEndsFunctionsWhen you run (); you'll get the output This is executed;
When return is called from within a function with and argument, the execution of the current function will end and the value of the argument will be returned to the calling function.
Section 19.9: for
for loops are typically used when you have a piece of code which you want to repeat a given number of times.

Outputs:
123456789
For detailed information, see the Loops topic.
Section 19.10: foreach
foreach is a construct, which enables you to iterate over arrays and objects easily.

Outputs:
123
.
To use foreach loop with an object, it has to implement Iterator interface.
When you iterate over associative arrays:

Outputs: color: red
For detailed information, see the Loops topic.
Section 19.11: if elseif else
elseif elseif combines if and else. The if statement is extended to execute a different statement in case the original if expression is not met. But, the alternative expression is only executed, when the elseif conditional expression is met.
The following code displays either "a is bigger than b", "a is equal to b" or "a is smaller than b":

Several elseif statements
You can use multiple elseif statements within the same if statement:


Section 19.12: if
The if construct allows for conditional execution of code fragments.

PHP Manual - Control Structures - If
Section 19.13: switch
The switch structure performs the same function as a series of if statements, but can do the job in fewer lines of code. The value to be tested, as defined in the switch statement, is compared for equality with the values in each of the case statements until a match is found and the code in that block is executed. If no matching case statement is found, the code in the default block is executed, if it exists.
Each block of code in a case or default statement should end with the break statement. This stops the execution of the switch structure and continues code execution immediately afterwards. If the break statement is omitted, the next case statement's code is executed, even if there is no match. This can cause unexpected code execution if the break statement is forgotten, but can also be useful where multiple case statements need to share the same code.

In addition to testing fixed values, the construct can also be coerced to test dynamic statements by providing a boolean value to the switch statement and any expression to the case statement. Keep in mind the first matching value is used, so the following code will output "more than 100":


For possible issues with loose typing while using the switch construct, see Switch Surprises

Chapter 20: Loops
Loops are a fundamental aspect of programming. They allow programmers to create code that repeats for some given number of repetitions, or iterations. The number of iterations can be explicit (6 iterations, for example), or continue until some condition is met ('until Hell freezes over').
This topic covers the different types of loops, their associated control statements, and their potential applications in PHP.
Section 20.1: continue
		The continue keyword halts the current iteration of a loop but does not terminate the loop.
Just like the break statement the continue statement is situated inside the loop body. When executed, the continue statement causes execution to immediately jump to the loop conditional.
In the following example loop prints out a message based on the values in an array, but skips a specified value.

The expected output is:

The continue statement may also be used to immediately continue execution to an outer level of a loop by specifying the number of loop levels to jump. For example, consider data such as
Fruit	Color Cost
Apple	Red	1
Banana Yellow 7
Cherry Red	2
Grape	Green 4
In order to only make pies from fruit which cost less than 5


continue 2 statement is executed, execution immediately jumps back to $data as $fruitWhen the  continuing the outer loop and skipping all other code (including the conditional in the inner loop.
Section 20.2: break
		The break keyword immediately terminates the current loop.
Similar to the continue statement, a break halts execution of a loop. Unlike a continue statement, however, break causes the immediate termination of the loop and does not execute the conditional statement again.

This code will produce

but will not execute the case where $i is 0, which would result in a fatal error due to division by 0.
The break statement may also be used to break out of several levels of loops. Such behavior is very useful when executing nested loops. For example, to copy an array of strings into an output string, removing any # symbols, until the output string is exactly 160 characters

break The 2 command immediately terminates execution of both the inner and outer loops.
Section 20.3: foreach
		The foreach statement is used to loop through arrays.
For each iteration the value of the current array element is assigned to $value variable and the array pointer is moved by one and in the next iteration next element will be processed.
The following example displays the items in the array assigned.

The expected output is:

You can also access the key / index of a value using foreach:

By default $value is a copy of the value in $list, so changes made inside the loop will not be reflected in $list afterwards.

To modify the array within the foreach loop, use the & operator to assign $value by reference. It's important to unset the variable afterwards so that reusing $value elsewhere doesn't overwrite the array.

You can also modify the array items within the foreach loop by referencing the array key of the current item.

Section 20.4: do...while

do...whileThe  statement will execute a block of code at least once - it then will repeat the loop as long as a condition is true.
The following example will increment the value of $i at least once, and it will continue incrementing the variable $i as long as it has a value of less than 25;

The expected output is:

Section 20.5: for
The for statement is used when you know how many times you want to execute a statement or a block of statements.
The initializer is used to set the start value for the counter of the number of loop iterations. A variable may be declared here for this purpose and it is traditional to name it $i.
The following example iterates 10 times and displays numbers from 0 to 9.

The expected output is:

Section 20.6: while
		The while statement will execute a block of code if and as long as a test expression is true.
If the test expression is true then the code block will be executed. After the code has executed the test expression will again be evaluated and the loop will continue until the test expression is found to be false.
The following example iterates till the sum reaches 100 before terminating.

The expected output is:


Chapter 21: Functions
Section 21.1: Variable-length argument lists
Version ≥ 5.6
PHP 5.6 introduced variable-length argument lists (a.k.a. varargs, variadic arguments), using the ... token before the argument name to indicate that the parameter is variadic, i.e. it is an array including all supplied parameters from that one onward.

Type names can be added in front of the ...:

The & reference operator can be added before the ..., but after the type name (if any). Consider this example:

Output:

On the other hand, an array (or Traversable) of arguments can be unpacked to be passed to a function in the form of an argument list:

Output:

Compare with this snippet without using ...:

Output:

Therefore, redirect functions for variadic functions can now be easily made, for example:

Apart from arrays, Traversables, such as Iterator (especially many of its subclasses from SPL) can also be used. For example:
$iterator = new LimitIterator(new ArrayIterator([0, 1, 2, 3, 4, 5, 6]), 2, 3); echo bin2hex(pack("c*", ...$it)); // Output: 020304
If the iterator iterates infinitely, for example:

Different versions of PHP behave differently:
From PHP 7.0.0 up to PHP 7.1.0 (beta 1):
A segmentation fault will occur
     The PHP process will exit with code 139 In PHP 5.6:
A fatal error of memory exhaustion ("Allowed memory size of %d bytes exhausted") will be shown. The PHP process will exit with code 255
Note: HHVM (v3.10 - v3.12) does not support unpacking Traversables. A warning message "Only containers may be unpacked" will be shown in this attempt.
Section 21.2: Optional Parameters
Functions can have optional parameters, for example:


Section 21.3: Passing Arguments by Reference
Function arguments can be passed "By Reference", allowing the function to modify the variable used outside the function:

Object arguments are always passed by reference:

To avoid implicit passing an object by reference, you should clone the object.
Passing by reference can also be used as an alternative way to return parameters. For example, the socket_getpeername function: bool socket_getpeername ( resource $socket , string &$address [, int &$port ] )
This method actually aims to return the address and port of the peer, but since there are two values to return, it chooses to use reference parameters instead. It can be called like this:

The variables $address and $port do not need to be defined before. They will:
1. be defined as null first,
2. then passed to the function with the predefined null value
3. then modified in the function
4. end up defined as the address and port in the calling context.
  Section 21.4: Basic Function Usage
A basic function is defined and executed like this:

Section 21.5: Function Scope
Variables inside functions is inside a local scope like this

Chapter 22: Functional Programming
PHP's functional programming relies on functions. Functions in PHP provide organized, reusable code to perform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, return statements and scope in PHP.
Section 22.1: Closures
A closure is an anonymous function that can't access outside scope.
When defining an anonymous function as such, you're creating a "namespace" for that function. It currently only has access to that namespace.

useIt doesn't have access to any external variables. To grant this permission for this namespace to access external variables, you need to introduce it via closures (()).

This is heavily attributed to PHP's tight variable scoping - If a variable isn't defined within the scope, or isn't brought in with global then it does not exist.
Also note:
Inheriting variables from the parent scope is not the same as using global variables. Global variables exist in the global scope, which is the same no matter what function is executing.
The parent scope of a closure is the function in which the closure was declared (not necessarily the function it was called from).
Taken from the PHP Documentation for Anonymous Functions
In PHP, closures use an early-binding approach. This means that variables passed to the closure's namespace using use keyword will have the same values when the closure was defined.
To change this behavior you should pass the variable by-reference.


Default arguments are not implicitly required when defining anonymous functions with/without closures.

Section 22.2: Assignment to variables
Anonymous functions can be assigned to variables for use as parameters where a callback is expected:

These variables can also be used as standalone function calls:

Section 22.3: Objects as a function

An object with an __invoke method can be used exactly as any other function.
The __invoke method will have access to all properties of the object and will be able to call any methods.
Section 22.4: Using outside variables
The use construct is used to import variables into the anonymous function's scope:

Variables can also be imported by reference:

Section 22.5: Anonymous function
An anonymous function is just a function that doesn't have a name.

In PHP, an anonymous function is treated like an expression and for this reason, it should be ended with a semicolon ;.
An anonymous function should be assigned to a variable.

Or it should be passed as parameter of another function.


Or even been returned from another function.
Self-executing anonymous functions:

Passing an argument into self-executing anonymous functions:

Section 22.6: Pure functions
A pure function is a function that, given the same input, will always return the same output and are side-effect free.

Some side-effects are changing the filesystem, interacting with databases, printing to the screen.

Section 22.7: Common functional methods in PHP
Mapping
Applying a function to all elements of an array:

Be aware that this is the only method of the list where the callback comes first.
Reducing (or folding)
Reducing an array to a single value:

Filtering
Returns only the array items for which the callback returns true:

Section 22.8: Using built-in functions as callbacks
In functions taking callable as an argument, you can also put a string with PHP built-in function. It's common to use trim as array_map parameter to remove leading and trailing whitespace from all strings in the array.

Section 22.9: Scope
In PHP, an anonymous function has its own scope like any other PHP function.
In JavaScript, an anonymous function can access a variable in outside scope. But in PHP, this is not permitted.

Section 22.10: Passing a callback function as a parameter
There are several PHP functions that accept user-defined callback functions as a parameter, such as:
call_user_func(), usort() and array_map().
Depending on where the user-defined callback function was defined there are different ways to pass them:
Procedural style:

Object Oriented style:

Object Oriented style using a static method:

Chapter 23: Alternative Syntax for Control Structures
Section 23.1: Alternative if/else statement

Section 23.2: Alternative for statement

Section 23.3: Alternative while statement

Section 23.4: Alternative foreach statement


Section 23.5: Alternative switch statement

Chapter 24: String formatting
Section 24.1: String interpolation
You can also use interpolation to interpolate (insert) a variable within a string. Interpolation works in double quoted strings and the heredoc syntax only.

The complex (curly) syntax format provides another option which requires that you wrap your variable within curly braces {}. This can be useful when embedding variables within textual content and helping to prevent possible ambiguity between textual content and variables.

The {} syntax only interpolates variables starting with a $ into a string. The {} syntax does not evaluate arbitrary PHP expressions.

However, the {} syntax does evaluate any array access, property access and function/method calls on variables, array elements or properties:
// Example accessing a value from an array - multidimensional access is allowed $companions = [0 => ['name' => 'Amy Pond'], 1 => ['name' => 'Dave Random']]; echo "The best companion is: {$companions[0]['name']}";

Notice that the dollar $ sign can appear after the opening curly brace { as the above examples, or, like in Perl or Shell Script, can appear before it:

Section 24.2: Extracting/replacing substrings
Single characters can be extracted using array (square brace) syntax as well as curly brace syntax. These two syntaxes will only return a single character from the string. If more than one character is needed, a function will be required, i.e.- substr

Strings can also be changed one character at a time using the same square brace and curly brace syntax. Replacing more than one character requires a function, i.e.- substr_replace

substr_replace($foo, 'W', 6, 1); // also results in $foo = 'Hello World' substr_replace($foo, 'Whi', 6, 2); // results in 'Hello Whirled'
// note that the replacement string need not be the same length as the substring replaced

Chapter 25: String Parsing
Section 25.1: Splitting a string by separators
explode and strstr are simpler methods to get substrings by separators.
A string containing several parts of text that are separated by a common character can be split into parts with the explode function.
$fruits = "apple,pear,grapefruit,cherry";
 print_r(explode(",",$fruits)); // ['apple', 'pear', 'grapefruit', 'cherry'] The method also supports a limit parameter that can be used as follow:

If the limit parameter is zero, then this is treated as 1. print_r(explode(',',$fruits,0)); // ['apple,pear,grapefruit,cherry']
If limit is set and positive, the returned array will contain a maximum of limit elements with the last element containing the rest of string. print_r(explode(',',$fruits,2)); // ['apple', 'pear,grapefruit,cherry']
If the limit parameter is negative, all components except the last -limit are returned.
print_r(explode(',',$fruits,-1)); // ['apple', 'pear', 'grapefruit']
explode can be combined with list to parse a string into variables in one line:

However, make sure that the result of explode contains enough elements, or an undefined index warning would be triggered. strstr strips away or only returns the substring before the first occurrence of the given needle.

Section 25.2: Substring
Substring returns the portion of string specified by the start and length parameters.

If there is a possibility of meeting multi-byte character strings, then it would be safer to use mb_substr.

Another variant is the substr_replace function, which replaces text within a portion of a string.
 var_dump(substr_replace("Boo", "0", 1, 1)); // string(3) "B0o" var_dump(substr_Replace("Boo", "ts", strlen("Boo"))); // string(5) "Boots" Let's say you want to find a specific word in a string - and don't want to use Regex.
$hi = "Hello World!"; $bye = "Goodbye cruel World!";
var_dump(strpos($hi, " ")); // int(5) var_dump(strpos($bye, " ")); // int(7)
var_dump(substr($hi, 0, strpos($hi, " "))); // string(5) "Hello" var_dump(substr($bye, -1 * (strlen($bye) - strpos($bye, " ")))); // string(13) " cruel World!"
// If the casing in the text is not important, then using strtolower helps to compare strings var_dump(substr($hi, 0, strpos($hi, " ")) == 'hello'); // bool(false) var_dump(strtolower(substr($hi, 0, strpos($hi, " "))) == 'hello'); // bool(true)
Another option is a very basic parsing of an email.

if ($wld == "co.uk") var_dump("$wrong is a UK address"); if ($nld == "co.uk") var_dump("$notld is a UK address");
Or even putting the "Continue reading" or "..." at the end of a blurb

Section 25.3: Searching a substring with strpos
strpos can be understood as the number of bytes in the haystack before the first occurrence of the needle.
var_dump(strpos("haystack", "hay")); // int(0) var_dump(strpos("haystack", "stack")); // int(3) var_dump(strpos("haystack", "stackoverflow"); // bool(false)
Checking if a substring exists
Be careful with checking against TRUE or FALSE because if a index of 0 is returned an if statement will see this as FALSE.

Output of the whole example:

Search starting from an offset



Section 25.4: Parsing string using regular expressions
preg_match can be used to parse string using regular expression. The parts of expression enclosed in parenthesis are called subpatterns and with them you can pick individual parts of the string.

Output

Chapter 26: Classes and Objects
Classes and Objects are used to to make your code more efficient and less repetitive by grouping similar tasks.
A class is used to define the actions and data structure used to build objects. The objects are then built using this predefined structure.
Section 26.1: Class Constants
Class constants provide a mechanism for holding fixed values in a program. That is, they provide a way of giving a name (and associated compile-time checking) to a value like 3.14 or "Apple". Class constants can only be defined with the const keyword - the define function cannot be used in this context.
As an example, it may be convenient to have a shorthand representation for the value of π throughout a program. A class with const values provides a simple way to hold such values.

MathValues::PI Class constants may be accessed by using the double colon operator (so-called the scope resolution operator) on a class, much like static variables. Unlike static variables, however, class constants have their values fixed at compile time and cannot be reassigned to (e.g. = 7 would produce a fatal error).
Class constants are also useful for defining things internal to a class that might need changing later (but do not change frequently enough to warrant storing in, say, a database). We can reference this internally using the self scope resolutor (which works in both instanced and static implementations)

Class constants can only contain scalar values in versions < 5.6
As of PHP 5.6 we can use expressions with constants, meaning math statements and strings with concatenation are acceptable constants

As of PHP 7.0, constants declared with define may now contain arrays.

Class constants are useful for more than just storing mathematical concepts. For example, if preparing a pie, it might be convenient to have a single Pie class capable of taking different kinds of fruit.

We can then use the Pie class like so

The problem that arises here is, when instantiating the Pie class, no guidance is provided as to the acceptable values. For example, when making a "boysenberry" pie, it might be misspelled "boisenberry". Furthermore, we might not support a plum pie. Instead, it would be useful to have a list of acceptable fruit types already defined somewhere it would make sense to look for them. Say a class named Fruit:

new Pie('aple'Pie('apple') are both acceptable to the compiler, new Pie(Fruit::APLEListing the acceptable values as class constants provides a valuable hint as to the acceptable values which a method accepts. It also ensures that misspellings cannot make it past the compiler. While ) and new ) will produce a compiler error.
Finally, using class constants means that the actual value of the constant may be modified in a single place, and any code using the constant automatically has the effects of the modification.
MyClass::CONSTANT_NAMEWhilst the most common method to access a class constant is , it may also be accessed by:

Class constants in PHP are conventionally named all in uppercase with underscores as word separators, although any valid label name may be used as a class constant name.
As of PHP 7.1, class constants may now be defined with different visibilities from the default public scope. This means that both protected and private constants can now be defined to prevent class constants from unnecessarily leaking into the public scope (see Method and Property Visibility ). For example:


define vs class constants
Although this is a valid construction:

If you try to do the same with class constants, you'll get an error:

But you can do:

For more information, see constants in the manual.
Using ::class to retrieve class's name
::classPHP 5.5 introduced the  syntax to retrieve the full class name, taking namespace scope and use statements into account.

The above works even if the classes are not even defined (i.e. this code snippet works alone).
This syntax is useful for functions that require a class name. For example, it can be used with class_exists to check a class exists. No errors will be generated regardless of return value in this snippet:

Section 26.2: Abstract Classes
An abstract class is a class that cannot be instantiated. Abstract classes can define abstract methods, which are methods without any body, only a definition:


Abstract classes should be extended by a child class which can then provide the implementation of these abstract methods.
The main purpose of a class like this is to provide a kind of template that allows children classes to inherit from, "forcing" a structure to adhere to. Lets elaborate on this with an example:
In this example we will be implementing a Worker interface. First we define the interface:

runTo ease the development of further Worker implementations, we will create an abstract worker class that already provides the () method from the interface, but specifies some abstract methods that need to be filled in by any child class:

getMemoryLimitFirst of all, we have provided an abstract method (). Any class extending from AbstractWorker needs to provide this method and return its memory limit. The AbstractWorker then sets the memory limit and logs it.
prepareMain() and mainSecondly the AbstractWorker calls the () methods, after logging that they have been called.
Finally, all of these method calls have been grouped in a try-catch block. So if any of the abstract methods defined by the child class throws an exception, we will catch that exception, log it and rethrow it. This prevents all child classes from having to implement this themselves.
Now lets define a child class that extends from the AbstractWorker:

As you can see, the TransactionProcessorWorker was rather easy to implement, as we only had to specify the memory limit and worry about the actual actions that it needed to perform. No error handling is needed in the TransactionProcessorWorker because that is handled in the AbsractWorker.
Important Note
When inheriting from an abstract class, all methods marked abstract in the parent's class declaration must be defined by the child (or the child itself must also be marked abstract); additionally, these methods must be defined with the same (or a less restricted) visibility. For example, if the abstract method is defined as protected, the function implementation must be defined as either protected or public, but not private.
Taken from the PHP Documentation for Class Abstraction.
If you do not define the parent abstract classes methods within the child class, you will be thrown a Fatal PHP Error like the following.
Fatal error: Class X contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (X::x) in
Section 26.3: Late static binding
self::In PHP 5.3+ and above you can utilize late static binding to control which class a static property or method is called from. It was added to overcome the problem inherent with the  scope resolutor. Take the following code

whatToSayYou would expect that the MrEd class will override the parent () function. But when we run this we get something unexpected

self::whatToSaystatic::The problem is that (); can only refer to the Horse class, meaning it doesn't obey MrEd. If we switch to the  scope resolutor, we don't have this problem. This newer method tells the class to obey the instance calling it. Thus we get the inheritance we're expecting

Section 26.4: Namespacing and Autoloading
Technically, autoloading works by executing a callback when a PHP class is required but not found. Such callbacks usually attempt to load these classes.
Generally, autoloading can be understood as the attempt to load PHP files (especially PHP class files, where a PHP source file is dedicated for a specific class) from appropriate paths according to the class's fully-qualified name (FQN) when a class is needed.
Suppose we have these classes:
Class file for application\controllers\Base:

Class file for application\controllers\Control:

Class file for application\models\Page:

Under the source folder, these classes should be placed at the paths as their FQNs respectively:

This approach makes it possible to programmatically resolve the class file path according to the FQN, using this function:
function getClassPath(string $sourceFolder, string $className, string $extension = ".php") {     return $sourceFolder . "/" . str_replace("\\", "/", $className) . $extension; // note that "/" works as a directory separator even on Windows }
The spl_autoload_register function allows us to load a class when needed using a user-defined function:

This function can be further extended to use fallback methods of loading:


Note that PHP doesn't attempt to load the classes whenever a file that uses this class is loaded. It may be loaded in the middle of a script, or even in shutdown functions . This is one of the reasons why developers, especially those who use autoloading, should avoid replacing executing source files in the runtime, especially in phar files.
Section 26.5: Method and Property Visibility
There are three visibility types that you can apply to methods (class/object functions) and properties (class/object variables) within a class, which provide access control for the method or property to which they are applied.
You can read extensively about these in the PHP Documentation for OOP Visibility.
Public
Declaring a method or a property as public allows the method or property to be accessed by:
The class that declared it.
The classes that extend the declared class.
Any external objects, classes, or code outside the class hierarchy.
An example of this public access would be:

Protected
Declaring a method or a property as protected allows the method or property to be accessed by:
The class that declared it.
The classes that extend the declared class.
This does not allow external objects, classes, or code outside the class hierarchy to access these methods or properties. If something using this method/property does not have access to it, it will not be available, and an error will be thrown. Only instances of the declared self (or subclasses thereof) have access to it.
An example of this protected access would be:


The example above notes that you can only access the protected elements within it's own scope. Essentially: "What's in the house can only be access from inside the house."
Private
Declaring a method or a property as private allows the method or property to be accessed by:
 The class that declared it Only (not subclasses).
A private method or property is only visible and accessible within the class that created it.
Note that objects of the same type will have access to each others private and protected members even though they are not the same instances.


As noted, you can only access the private method/property from within it's defined class.
Section 26.6: Interfaces
Introduction
Interfaces are definitions of the public APIs classes must implement to satisfy the interface. They work as "contracts", specifying what a set of subclasses does, but not how they do it.
Interface definition is much alike class definition, changing the keyword class to interface:

Interfaces can contain methods and/or constants, but no attributes. Interface constants have the same restrictions as class constants. Interface methods are implicitly abstract:

Note: interfaces must not declare constructors or destructors, since these are implementation details on the class level.
Realization
Any class that needs to implement an interface must do so using the implements keyword. To do so, the class needs to provide a implementation for every method declared in the interface, respecting the same signature.
A single class can implement more than one interface at a time.


When abstract classes implement interfaces, they do not need to implement all methods. Any method not implemented in the base class must then be implemented by the concrete class that extends it:

Notice that interface realization is an inherited characteristic. When extending a class that implements an interface, you do not need to redeclare it in the concrete class, because it is implicit.
Note: Prior to PHP 5.3.9, a class could not implement two interfaces that specified a method with the same name, since it would cause ambiguity. More recent versions of PHP allow this as long as the duplicate methods have the same signature[1].
Inheritance
Like classes, it is possible to establish an inheritance relationship between interfaces, using the same keyword extends. The main difference is that multiple inheritance is allowed for interfaces:

Examples
In the example bellow we have a simple example interface for a vehicle. Vehicles can go forwards and backwards.

Then we create two classes that implement the interface: Bike and Car. Bike and Car internally are very different, but both are vehicles, and must implement the same public methods that VehicleInterface provides.
Typehinting allows methods and functions to request Interfaces. Let's assume that we have a parking garage class, which contains vehicles of all kinds.


Because addVehicle requires a $vehicle of type VehicleInterface-not a concrete implementation-we can input both Bikes and Cars, which the ParkingGarage can manipulate and use.
Section 26.7: Final Keyword
Def: Final Keyword prevents child classes from overriding a method by prefixing the definition with final. If the class itself is being defined final then it cannot be extended
Final Method

Final Class:

Final constants: Unlike Java, the final keyword is not used for class constants in PHP. Use the keyword const instead.
Why do I have to use final?
1. Preventing massive inheritance chain of doom
2. Encouraging composition
3. Force the developer to think about user public API
4. Force the developer to shrink an object's public API
5. A final class can always be made extensible
6. extends breaks encapsulation
7. You don't need that flexibility
8. You are free to change the code
When to avoid final: Final classes only work effectively under following assumptions:
1. There is an abstraction (interface) that the final class implements
2. All of the public API of the final class is part of that interface
  Section 26.8: Autoloading
Nobody wants to require or include every time a class or inheritance is used. Because it can be painful and is easy to forget, PHP is offering so called autoloading. If you are already using Composer, read about autoloading using Composer.
What exactly is autoloading?
The name basically says it all. You do not have to get the file where the requested class is stored in, but PHP automatically loads it.
How can I do this in basic PHP without third party code?
There is the function __autoload, but it is considered better practice to use spl_autoload_register. These functions will be considered by PHP every time a class is not defined within the given space. So adding autoload to an existing project is no problem, as defined classes (via require i.e.) will work like before. For the sake of preciseness, the following examples will use anonymous functions, if you use PHP < 5.3, you can define the function and pass it's name as argument to spl_autoload_register.
Examples

FooBar.phpThe code above simply tries to include a filename with the class name and the appended extension ".php" using sprintf. If FooBar needs to be loaded, it looks if  exists and if so includes it.
Of course this can be extended to fit the project's individual need. If _ inside a class name is used to group, e.g.
User_Post and User_Image both refer to User, both classes can be kept in a folder called "User" like so:

The class User_Post will now be loaded from "User/Post.php", etc.
spl_autoload_register can be tailored to various needs. All your files with classes are named
"class.CLASSNAME.php"? No problem. Various nesting (User_Post_Content => "User/Post/Content.php")? No problem either.
If you want a more elaborate autoloading mechanism - and still don't want to include Composer - you can work without adding third party libraries.

Using autoloaders like this, you can happily write code like this:

Using classes:

foo/bar.php, foo.php, hello/world.php and demo/classes.phpThese examples will be include classes from .
Section 26.9: Calling a parent constructor when instantiating a child
__construct__construct() method from it's child. If you need to do that, then you will need to use the parent::A common pitfall of child classes is that, if your parent and child both contain a constructor(()) method, only the child class constructor will run. There may be occasions where you need to run the parent  scope resolutor:

Now harnessing that within a real-world situation would look something like:

__constructThe above will run the parent () resulting in the echo being run.
Section 26.10: Dynamic Binding
Dynamic binding, also referred as method overriding is an example of run time polymorphism that occurs when multiple classes contain different implementations of the same method, but the object that the method will be called on is unknown until run time.
This is useful if a certain condition dictates which class will be used to perform an action, where the action is named the same in both classes.


Dog|CatIn the above example, the Animal class () which will makeNoise is unknown until run time depending on the property within the User class.
Section 26.11: $this, self and static plus the singleton
$this->member for non-static members, use self::$memberUse $this to refer to the current object. Use self to refer to the current class. In other words, use  for static members.
sayHello() and sayGoodbyeIn the example below, () are using self and $this difference can be observed here.


static refers to whatever class in the hierarchy you called the method on. It allows for better reuse of static class properties when classes are inherited.
Consider the following code:

This doesn't produce the result you want:
unknown unknown unknown
brandThat's because self refers to the Car class whenever method () is called.
To refer to the correct class, you need to use static instead:


This does produce the desired output:
unknown
BMW
Mercedes
See also Late static binding
The singleton
If you have an object that's expensive to create or represents a connection to some external resource you want to reuse, i.e. a database connection where there is no connection pooling or a socket to some other system, you can use the static and self keywords in a class to make it a singleton. There are strong opinions about whether the singleton pattern should or should not be used, but it does have its uses.

As you can see in the example code we are defining a private static property $instance to hold the object reference. Since this is static this reference is shared across ALL objects of this type.
getInstanceThe ()method uses a method know as lazy instantiation to delay creating the object to the last possible moment as you do not want to have unused objects lying around in memory never intended to be used. It also saves time and CPU on page load not having to load more objects than necessary. The method is checking if the object is set, creating it if not, and returning it. This ensures that only one object of this kind is ever created.
We are also setting the constructor to be private to ensure that no one creates it with the new keyword from the outside. If you need to inherit from this class just change the private keywords to protected.
To use this object you just write the following:

Now I DO implore you to use dependency injection where you can and aim for loosely coupled objects, but sometimes that is just not reasonable and the singleton pattern can be of use.
Section 26.12: Defining a Basic Class
An object in PHP contains variables and functions. Objects typically belong to a class, which defines the variables and functions that all objects of this class will contain.
The syntax to define a class is:

Once a class is defined, you can create an instance using:

Variables and functions on the object are accessed like this:

Constructor
__constructClasses can define a special () method, which is executed as part of object creation. This is often used to specify the initial values of an object:

Extending Another Class
Class definitions can extend existing class definitions, adding new variables and functions as well as modifying those defined in the parent class.
Here is a class that extends the previous example:


The Square class contains variables and behavior for both the Shape class and the Square class:

Section 26.13: Anonymous Classes
Anonymous classes were introduced into PHP 7 to enable for quick one-off objects to be easily created. They can take constructor arguments, extend other classes, implement interfaces, and use traits just like normal classes can.
In its most basic form, an anonymous class looks like the following:

Nesting an anonymous class inside of another class does not give it access to private or protected methods or properties of that outer class. Access to protected methods and properties of the outer class can be gained by extending the outer class from the anonymous class. Access to private properties of the outer class can be gained by passing them through to the anonymous class's constructor.
For example:



Chapter 27: Namespaces
Section 27.1: Declaring namespaces
A namespace declaration can look as follows:
namespace MyProjectnamespace MyProject\Security\Cryptographynamespace MyProject { ... ; - Declare the namespace MyProject
; - Declare a nested namespace } - Declare a namespace with enclosing brackets.
It is recommended to only declare a single namespace per file, even though you can declare as many as you like in a single file:

Every time you declare a namespace, classes you define after that will belong to that namespace:

namespace MyProject\ShapesA namespace declaration can be used multiple times in different files. The example above defined three classes in the MyProject\Shapes namespace in a single file. Preferably this would be split up into three files, each starting with ;. This is explained in more detail in the PSR-4 standard example.
Section 27.2: Referencing a class or function in a namespace
As shown in Declaring Namespaces, we can define a class in a namespace as follows:

To reference this class the full path (including the namespace) needs to be used:

This can be shortened by importing the class via the use-statement:

As for PHP 7.0 you can group various use-statements in one single statement using brackets:

Sometimes two classes have the same name. This is not a problem if they are in a different namespace, but it could become a problem when attempting to import them with the use-statement:

This can be solved by defining a name for the alias yourself using the as keyword:

To reference a class outside the current namespace, it has to be escaped with a \, otherwise a relative namespace path is assumed from the current namespace:

Section 27.3: Declaring sub-namespaces
To declare a single namespace with hierarchy use following example:


The above example creates:
constant MyProject\Sub\Level\CONNECT_OK class MyProject\Sub\Level\Connection and function MyProject\Sub\Level\connect
Section 27.4: What are Namespaces?
The PHP community has a lot of developers creating lots of code. This means that one library's PHP code may use the same class name as another library. When both libraries are used in the same namespace, they collide and cause trouble.
Namespaces solve this problem. As described in the PHP reference manual, namespaces may be compared to operating system directories that namespace files; two files with the same name may co-exist in separate directories. Likewise, two PHP classes with the same name may co-exist in separate PHP namespaces.
It is important for you to namespace your code so that it may be used by other developers without fear of colliding with other libraries.

Chapter 28: Sessions
Section 28.1: session_start() Options
php.iniStarting with PHP Sessions we can pass an array with session-based  options to the session_start function.
Example

php.ini setting named session.lazy_writeThis feature also introduces a new , which defaults to true and means that session data is only rewritten, if it changes.
Referencing: https://wiki.php.net/rfc/session-lock-ini
Section 28.2: Session Locking
session_startsession_startAs we all are aware that PHP writes session data into a file at server side. When a request is made to php script which starts the session via (), PHP locks this session file resulting to block/wait other incoming requests for same session_id to complete, because of which the other requests will get stuck on ()
until or unless the session file locked is not released
The session file remains locked until the script is completed or session is manually closed. To avoid this situation i.e. to prevent multiple requests getting blocked, we can start the session and close the session which will release the lock from session file and allow to continue the remaining requests.

Now one will think if session is closed how we will read the session values, beautify even after session is closed, session is still available. So, we can still read the session data.

In php >= 7.0, we can have read_only session, read_write session and lazy_write session, so it may not required
session_write_closeto use ()
Section 28.3: Manipulating session data
The $_SESSION variable is an array, and you can retrieve or manipulate it like a normal array.

Also see Manipulating an Array for more reference how to work on an array.
Note that if you store an object in a session, it can be retrieved gracefully only if you have an class autoloader or you have loaded the class already. Otherwise, the object will come out as the type __PHP_Incomplete_Class, which may later lead to crashes. See Namespacing and Autoloading about autoloading.
Warning:
Session data can be hijacked. This is outlined in: Pro PHP Security: From Application Security Principles to the
Implementation of XSS Defense - Chapter 7: Preventing Session Hijacking So it can be strongly recommended to never store any personal information in $_SESSION. This would most critically include credit card numbers, government issued ids, and passwords; but would also extend into less assuming data like names, emails, phone numbers, etc which would allow a hacker to impersonate/compromise a legitimate user. As a general rule, use worthless/nonpersonal values, such as numerical identifiers, in session data.
Section 28.4: Destroy an entire session
session_destroyIf you've got a session which you wish to destroy, you can do this with ()


session_destroy() is different to using something like $_SESSION = arrayUsing (); which will remove all of the values stored in the SESSION superglobal but it will not destroy the actual stored version of the session.
$_SESSION = array(); instead of session_unsetNote: We use () because the manual stipulates:
		Only use session_unset() for older deprecated code that does not use $_SESSION.
Section 28.5: Safe Session Start With no Errors
Many developers have this problem when they work on huge projects, especially if they work on some modular CMS on plugins, addons, components etc. Here is solution for safe session start where if first checked PHP version to cover all versions and on next is checked if session is started. If session not exists then I start session safe. If session exists nothing happen.

Section 28.6: Session name
Checking if session cookies have been created
Session name is the name of the cookie used to store sessions. You can use this to detect if cookies for a session have been created for the user:

Note that this method is generally not useful unless you really don't want to create cookies unnecessarily.
Changing session name
session_nameYou can update the session name by calling ().

session_nameIf no argument is provided into () then the current session name is returned.
It should contain only alphanumeric characters; it should be short and descriptive (i.e. for users with enabled cookie warnings). The session name can't consist of digits only, at least one letter must be present. Otherwise a new session id is generated every time.

Chapter 29: Cookies
parameter	detail
The name of the cookie. This is also the key you can use to retrieve the value from the $_COOKIE super
nameglobal. This is the only required parametervalueThe value to store in the cookie. This data is accessible to the browser so don't store anything sensitive here.expireA Unix timestamp representing when the cookie should expire. If set to zero the cookie will expire at the end of the session. If set to a number less than the current Unix timestamp the cookie will expire immediately.someThe scope of the cookie. If set to / the cookie will be available within the entire domain. If set to /-
pathpath/ then the cookie will only be available in that path and descendants of that path. Defaults to the current path of the file that the cookie is being set in.
stackoverflow.commeta.stackoverflow.com           The domain or subdomain the cookie is available on. If set to the bare domain then the cookie will be available to that domain and all subdomains. If set to a subdomain domain  then the cookie will be available only on that subdomain, and all sub-
subdomains.secureWhen set to TRUE the cookie will only be set if a secure HTTPS connection exists between the client and the server.httponlySpecifies that the cookie should only be made available through the HTTP/S protocol and should notbe available to client side scripting languages like JavaScript. Only available in PHP 5.2 or later.
An HTTP cookie is a small piece of data sent from a website and stored on the user's computer by the user's web browser while the user is browsing.
Section 29.1: Modifying a Cookie
The value of a cookie can be modified by resetting the cookie

Section 29.2: Setting a Cookie
setcookieA cookie is set using the () function. Since cookies are part of the HTTP header, you must set any cookies before sending any output to the browser.
Example: setcookie("user", "Tom", time() + 86400, "/"); // check syntax for function params
Description:
Creates a cookie with name user
(Optional) Value of the cookie is Tom
(Optional) Cookie will expire in 1 day (86400 seconds)
(Optional) Cookie is available throughout the whole website /
(Optional) Cookie is only sent over HTTPS
(Optional) Cookie is not accessible to scripting languages such as JavaScript
A created or modified cookie can only be accessed on subsequent requests (where path and domain matches) as the superglobal $_COOKIEis not populated with the new data immediately.
Section 29.3: Checking if a Cookie is Set
issetUse the () function upon the superglobal $_COOKIE variable to check if a cookie is set.
Example:

Section 29.4: Removing a Cookie
To remove a cookie, set the expiry timestamp to a time in the past. This triggers the browser's removal mechanism:

It is also a good idea to unset the $_COOKIE value in case the current page uses it:

Section 29.5: Retrieving a Cookie
Retrieve and Output a Cookie Named user
The value of a cookie can be retrieved using the global variable $_COOKIE. example if we have a cookie named user we can retrieve it like this

Chapter 30: Output Buering
	Function	Details
ob_startob_start()	Starts the output buffer, any output placed after this will be captured and not displayed ob_get_contents() Returns all content captured by () ob_end_clean()	Empties the output buffer and turns it off for the current nesting level
ob_get_contents() and ob_end_cleanob_get_clean()	Triggers both ()
ob_get_level()	Returns the current nesting level of the output buffer ob_flush()	Flush the content buffer and send it to the browser without ending the buffer ob_implicit_flush() Enables implicit flushing after every output call. ob_end_flush()	Flush the content buffer and send it to the browser also ending the buffer
Section 30.1: Basic usage getting content between buers and clearing
Output buffering allows you to store any textual content (Text, HTML) in a variable and send to the browser as one piece at the end of your script. By default, php sends your content as it interprets it.

ob_start() and ob_get_cleanAny content outputted between () will be captured and placed into the variable
$content.
ob_get_clean() triggers both ob_get_contents() and ob_end_cleanCalling ().
Section 30.2: Processing the buer via a callback
ob_startYou can apply any kind of additional processing to the output by passing a callable to ().


Output:
<h1>LoremIpsum</h1><p><strong>Pellentesquehabitantmorbitristique</strong>senectusetnetusetmalesuada famesacturpisegestas.<ahref="#">Donecnonenim</a>inturpispulvinarfacilisis.</p><h2>HeaderLevel2</h2> <ol><li>Loremipsumdolorsitamet,consectetueradipiscingelit.</li><li>Aliquamtinciduntmauriseurisus.</ li></ol>
Section 30.3: Nested output buers
ob_get_level()You can nest output buffers and fetch the level for them to provide different content using the function.


Outputs:

Section 30.4: Running output buer before any content

In this example we assume $users to be a multidimensional array, and we loop through it to find all users with an access level of 7.
If there are no results, we redirect to an error page.
headerWe are using the output buffer here because we are triggering a () redirect based on the result of the loop
Section 30.5: Stream output to client

Section 30.6: Using Output buer to store contents in a file, useful for reports, invoices etc

echo $html;This example takes the complete document, and writes it to file, it does not output the document into the browser, but do by using 
Section 30.7: Typical usage and reasons for using ob_start
ob_start is especially handy when you have redirections on your page. For example, the following code won't work:

headers already sent by <xxx> on line <xxx>The error that will be given is something like: .
In order to fix this problem, you would write something like this at the start of your page:

And something like this at the end of your page:

This stores all generated content into an output buffer, and displays it in one go. Hence, if you have any redirection calls on your page, those will trigger before any data is sent, removing the possibility of a headers already sent error occurring.
Section 30.8: Capturing the output buer to re-use later
In this example, we have an array containing some data.
We capture the output buffer in $items_li_html and use it twice in the page.

output_buffer.php and run it via php output_buffer.phpSave the above code in a file .
You should see the 2 list items we created above with the same list items we generated in PHP using the output buffer:



Chapter 31: JSON
 Parameter	Details json_encode value	The value being encoded. Can be any type except a resource. All string data must be UTF-8 encoded.
Bitmask consisting of JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS,
             JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT, options
JSON_PRESERVE_ZERO_FRACTION, JSON_UNESCAPED_UNICODE, JSON_PARTIAL_OUTPUT_ON_ERROR. The behaviour of these constants is described on the JSON constants page.
depth	Set the maximum depth. Must be greater than zero.
json_decode json The json string being decoded. This function only works with UTF-8 encoded strings.
assoc	Should function return associative array instead of objects.
             Bitmask of JSON decode options. Currently only JSON_BIGINT_AS_STRING is supported (default is to options cast large integers as floats)
JSON (JavaScript Object Notation) is a platform and language independent way of serializing objects into plaintext. Because it is often used on web and so is PHP, there is a basic extension for working with JSON in PHP.
Section 31.1: Decoding a JSON string
json_decodeThe () function takes a JSON-encoded string as its first parameter and parses it into a PHP variable.
json_decodeNormally, () will return an object of \stdClass if the top level item in the JSON object is a dictionary or an indexed array if the JSON object is an array. It will also return scalar values or NULL for certain scalar values, such as simple strings, "true", "false", and "null". It also returns NULL on any error.
// Returns an object (The top level item in the JSON string is a JSON dictionary)
$json_string = '{"name": "Jeff", "age": 20, "active": true, "colors": ["red", "blue"]}';
$object = json_decode($json_string); printf('Hello %s, You are %s years old.', $object->name, $object->age); #> Hello Jeff, You are 20 years old.
// Returns an array (The top level item in the JSON string is a JSON array)
$json_string = '["Jeff", 20, true, ["red", "blue"]]';
$array = json_decode($json_string);
printf('Hello %s, You are %s years old.', $array[0], $array[1]);
var_dumpUse () to view the types and values of each property on the object we decoded above.

Output (note the variable types):


Note: The variable types in JSON were converted to their PHP equivalent.
json_decodeTo return an associative array for JSON objects instead of returning an object, pass true as the second parameter to ().
$json_string = '{"name": "Jeff", "age": 20, "active": true, "colors": ["red", "blue"]}';
$array = json_decode($json_string, true); // Note the second parameter var_dump($array);
Output (note the array associative structure):

The second parameter ($assoc) has no effect if the variable to be returned is not an object.
json_encodeNote: If you use the $assoc parameter, you will lose the distinction between an empty array and an empty object. This means that running () on your decoded output again, will result in a different JSON structure.
json_decodeIf the JSON string has a "depth" more than 512 elements (20 elements in versions older than 5.2.3, or 128 in version 5.2.3) in recursion, the function () returns NULL. In versions 5.3 or later, this limit can be controlled using the third parameter ($depth), as discussed below.
According to the manual:
PHP implements a superset of JSON as specified in the original " RFC 4627 - it will also encode and decode scalar types and NULL. RFC 4627 only supports these values when they are nested inside an array or an object. Although this superset is consistent with the expanded definition of "JSON text" in the newer " RFC 7159 (which aims to supersede RFC 4627) and " ECMA-404, this may cause interoperability issues with older JSON parsers that adhere strictly to RFC 4627 when encoding a single scalar value.
This means, that, for example, a simple string will be considered to be a valid JSON object in PHP:

Output:

But simple strings, not in an array or object, are not part of the RFC 4627 standard. As a result, such online checkers as JSLint, JSON Formatter & Validator (in RFC 4627 mode) will give you an error.
There is a third $depth parameter for the depth of recursion (the default value is 512), which means the amount of nested objects inside the original object to be decoded.
There is a fourth $options parameter. It currently accepts only one value, JSON_BIGINT_AS_STRING. The default behavior (which leaves off this option) is to cast large integers to floats instead of strings.
		Invalid non-lowercased variants of the true, false and null literals are no longer accepted as valid input.
So this example:
 var_dump(json_decode('tRue'), json_last_error_msg()); var_dump(json_decode('tRUe'), json_last_error_msg()); var_dump(json_decode('tRUE'), json_last_error_msg()); var_dump(json_decode('TRUe'), json_last_error_msg()); var_dump(json_decode('TRUE'), json_last_error_msg()); var_dump(json_decode('true'), json_last_error_msg()); Before PHP 5.6:

And after:

Similar behavior occurs for false and null.
json_decodeNote that () will return NULL if the string cannot be converted.


json_decodeIt is not safe to rely only on the return value being NULL to detect errors. For example, if the JSON string contains nothing but "null", () will return null, even though no error occurred.
Section 31.2: Encoding a JSON string
The json_encode function will convert a PHP array (or, since PHP 5.4, an object which implements the
JsonSerializable interface) to a JSON-encoded string. It returns a JSON-encoded string on success or FALSE on failure.

During encoding, the PHP data types string, integer, and boolean are converted to their JSON equivalent. Associative arrays are encoded as JSON objects, and - when called with default arguments - indexed arrays are encoded as JSON arrays. (Unless the array keys are not a continuous numeric sequence starting from 0, in which case the array will be encoded as a JSON object.)

Output:
{"name":"Jeff","age":20,"active":true,"colors":["red","blue"],"values":{"0":"foo","3":"bar"}}
Arguments
Since PHP 5.3, the second argument to json_encode is a bitmask which can be one or more of the following.
As with any bitmask, they can be combined with the binary OR operator |.
PHP 5.x Version ≥ 5.3 JSON_FORCE_OBJECT
Forces the creation of an object instead of an array

Output:

JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_HEX_QUOT
Ensures the following conversions during encoding:
	Constant	Input Output
JSON_HEX_TAG <\u003CJSON_HEX_TAG >\u003EJSON_HEX_AMP &\u0026JSON_HEX_APOS'\u0027JSON_HEX_QUOT"\u0022$array = ["tag"=>"<>", "amp"=>"&", "apos"=>"'", "quot"=>"\""]; echo json_encode($array);
 echo json_encode($array, JSON_HEX_TAG | JSON_HEX_AMP | JSON_HEX_APOS | JSON_HEX_QUOT); Output:
{"tag":"<>","amp":"&","apos":"'","quot":"\""}
{"tag":"\u003C\u003E","amp":"\u0026","apos":"\u0027","quot":"\u0022"}
PHP 5.x Version ≥ 5.3 JSON_NUMERIC_CHECK
Ensures numeric strings are converted to integers.

Output:
["23452",23452]    
[23452,23452]
PHP 5.x Version ≥ 5.4 JSON_PRETTY_PRINT
Makes the JSON easily readable

Output:

Includes unescaped / forward slashes in the output

Output:
{"filename":"example.txt","path":"\/full\/path\/to\/file"}
{"filename":"example.txt","path":"/full/path/to/file"}
JSON_UNESCAPED_UNICODE
Includes UTF8-encoded characters in the output instead of \u-encoded strings

Output:

PHP 5.x Version ≥ 5.5
JSON_PARTIAL_OUTPUT_ON_ERROR
Allows encoding to continue if some unencodable values are encountered.

Output:
{"file":null,"name":"foo.txt"}
PHP 5.x Version ≥ 5.6
JSON_PRESERVE_ZERO_FRACTION
Ensures that floats are always encoded as floats.

Output:

PHP 7.x Version ≥ 7.1
JSON_UNESCAPED_LINE_TERMINATORS
When used with JSON_UNESCAPED_UNICODE, reverts to the behaviour of older PHP versions, and does not escape the characters U+2028 LINE SEPARATOR and U+2029 PARAGRAPH SEPARATOR. Although valid in JSON, these characters are not valid in JavaScript, so the default behaviour of JSON_UNESCAPED_UNICODE was changed in version 7.1.
$array = ["line"=>"\xe2\x80\xa8", "paragraph"=>"\xe2\x80\xa9"]; echo json_encode($array, JSON_UNESCAPED_UNICODE);
 echo json_encode($array, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_LINE_TERMINATORS); Output:


Section 31.3: Debugging JSON errors
When json_encode or json_decode fails to parse the string provided, it will return false. PHP itself will not raise any errors or warnings when this happens, the onus is on the user to use the json_last_error() and json_last_error_msg() functions to check if an error occurred and act accordingly in your application (debug it, show an error message, etc.).
The following example shows a common error when working with JSON, a failure to decode/encode a JSON string (due to the passing of a bad UTF-8 encoded string, for example).

json_last_error_msg
json_last_error_msg() returns a human readable message of the last error that occurred when trying to
encode/decode a string.
This function will always return a string, even if no error occurred.
The default non-error string is No Error
It will return false if some other (unknown) error occurred
Careful when using this in loops, as json_last_error_msg will be overridden on each iteration.
You should only use this function to get the message for display, not to test against in control statements.

This function doesn't exist before PHP 5.5. Here is a polyfill implementation:
if (!function_exists('json_last_error_msg')) {     function json_last_error_msg() {         static $ERRORS = array(             JSON_ERROR_NONE => 'No error',
            JSON_ERROR_DEPTH => 'Maximum stack depth exceeded',
            JSON_ERROR_STATE_MISMATCH => 'State mismatch (invalid or malformed JSON)',
            JSON_ERROR_CTRL_CHAR => 'Control character error, possibly incorrectly encoded',
            JSON_ERROR_SYNTAX => 'Syntax error',
            JSON_ERROR_UTF8 => 'Malformed UTF-8 characters, possibly incorrectly encoded'         );
        $error = json_last_error();

json_last_error
json_last_error() returns an integer mapped to one of the pre-defined constants provided by PHP.
ConstantMeaningJSON_ERROR_NONENo error has occurredJSON_ERROR_DEPTHThe maximum stack depth has been exceededJSON_ERROR_STATE_MISMATCHInvalid or malformed JSONJSON_ERROR_CTRL_CHARControl character error, possibly incorrectly encodedJSON_ERROR_SYNTAXSyntax error (since PHP 5.3.3)JSON_ERROR_UTF8Malformed UTF-8 characters, possibly incorrectly encoded (since PHP 5.5.0)JSON_ERROR_RECURSIONOne or more recursive references in the value to be encodedJSON_ERROR_INF_OR_NANOne or more NAN or INF values in the value to be encodedJSON_ERROR_UNSUPPORTED_TYPE A value of a type that cannot be encoded was given
Section 31.4: Using JsonSerializable in an Object
PHP 5.x Version ≥ 5.4
When you build REST API's, you may need to reduce the information of an object to be passed to the client application. For this purpose, this example illustrates how to use the JsonSerialiazble interface.
In this example, the class User actually extends a DB model object of a hypotetical ORM.

jsonSerializeAdd JsonSerializable implementation to the class, by providing the () method.

json_encodejsonSerializeNow in your application controller or script, when passing the object User to () you will get the return json encoded array of the () method instead of the entire object.

Will return:

properties values example.
This will both reduce the amount of data returned from a RESTful endpoint, and allow to exclude object properties from a json representation.
json_encodeUsing Private and Protected Properties with ()
json_encodeTo avoid using JsonSerializable, it is also possible to use private or protected properties to hide class information from () output. The Class then does not need to implement \JsonSerializable.


Section 31.5: Header json and the returned response
By adding a header with content type as JSON:


The header is there so your app can detect what data was returned and how it should handle it. Note that: the content header is just information about type of returned data.
If you are using UTF-8, you can use:

Example jQuery:


Chapter 32: SOAP Client
Parameter	Details
$wsdl	URI of WSDL or NULL if using non-WSDL mode
Array of options for SoapClient. Non-WSDL mode requires location and uri to set, all other options
$options
are optional. See table below for possible values.
Section 32.1: WSDL Mode
First, create a new SoapClient object, passing the URL to the WSDL file and optionally, an array of options.


Section 32.2: Non-WSDL Mode
This is similar to WSDL mode, except we pass NULL as the WSDL file and make sure to set the location and uri options.

Section 32.3: Classmaps
When creating a SOAP Client in PHP, you can also set a classmap key in the configuration array. This classmap defines which types defined in the WSDL should be mapped to actual classes, instead of the default StdClass. The reason you would want to do this is because you can get auto-completion of fields and method calls on these classes, instead of having to guess which fields are set on the regular StdClass.


After configuring the classmap, whenever you perform a certain operation that returns a type Address or Book, the SoapClient will instantiate that class, fill the fields with the data and return it from the operation call.

Section 32.4: Tracing SOAP request and response
Sometimes we want to look at what is sent and received in the SOAP request. The following methods will return the XML in the request and response:

For example, suppose we have an ENVIRONMENT constant and when this constant's value is set to DEVELOPMENT we want to echo all information when the call to getAddress throws an error. One solution could be:



Chapter 33: Using cURL in PHP
Parameter	Details
curl_init	-- Initialize a cURL session url	The url to be used in the cURL request curl_setopt -- Set an option for a cURL transfer
chThe cURL handle (return value from curl_init())optionCURLOPT_XXX to be set - see PHP documentation for the list of options and acceptable valuesvalueThe value to be set on the cURL handle for the given optioncurl_exec-- Perform a cURL sessionchThe cURL handle (return value from curl_init())curl_close-- Close a cURL sessionchThe cURL handle (return value from curl_init())Section 33.1: Basic Usage (GET Requests)
cURL is a tool for transferring data with URL syntax. It support HTTP, FTP, SCP and many others(curl >= 7.19.4). Remember, you need to install and enable the cURL extension to use it.

Section 33.2: POST Requests
If you want to mimic HTML form POST action, you can use cURL.


Section 33.3: Using Cookies
cURL can keep cookies received in responses for use with subsequent requests. For simple session cookie handling in memory, this is achieved with a single line of code:

In cases where you are required to keep cookies after the cURL handle is destroyed, you can specify the file to store them in:

Then, when you want to use them again, pass them as the cookie file:

Remember, though, that these two steps are not necessary unless you need to carry cookies between different cURL handles. For most use cases, setting CURLOPT_COOKIEFILE to the empty string is all you need.
Cookie handling can be used, for example, to retrieve resources from a web site that requires a login. This is typically a two-step procedure. First, POST to the login page.

The second step (after standard error checking is done) is usually a simple GET request. The important thing is to reuse the existing cURL handle for the second request. This ensures the cookies from the first response will be automatically included in the second request.

This is only intended as an example of cookie handling. In real life, things are usually more complicated. Often you must perform an initial GET of the login page to pull a login token that needs to be included in your POST. Other sites might block the cURL client based on its User-Agent string, requiring you to change it.
Section 33.4: Using multi_curl to make multiple POST requests
Sometimes we need to make a lot of POST requests to one or many different endpoints. To deal with this scenario, we can use multi_curl.
First of all, we create how many requests as needed exactly in the same way of the simple example and put them in an array.
We use the curl_multi_init and add each handle to it.
In this example, we are using 2 different endpoints:


Then, we use curl_multi_exec to send the requests

A possible return for this example could be:
The request to 'http://www.example.com' returned 'fruits' in 2 seconds.
The request to 'http://www.example2.com' returned 'seafood' in 5 seconds.
Section 33.5: Sending multi-dimensional data and multiple files with CurlFile in one request
Let's say we have a form like the one below. We want to send the data to our webserver via AJAX and from there to a script running on an external server.

So we have normal inputs, a multi-select field and a file dropzone where we can upload multiple files.
Assuming the AJAX POST request was successful we get the following data on PHP site:

and the files should look like this


So far, so good. Now we want to send this data and files to the external server using cURL with the CurlFile Class
Since cURL only accepts a simple but not a multi-dimensional array, we have to flatten the $_POST array first.
To do this, you could use this function for example which gives you the following:

The next step is to create CurlFile Objects for the uploaded files. This is done by the following loop:

curl_file_create is a helper function of the CurlFile Class and creates the CurlFile objects. We save each object in the $files array with keys named "upload[0]" and "upload[1]" for our two files.
We now have to combine the flattened post array and the files array and save it as $data like this:

The last step is to send the cURL request:

Since $data is now a simple (flat) array, cURL automatically sends this POST request with Content Type: multipart/form-data
In upload.php on the external server you can now get the post data and files with $_POST and $_FILES as you would normally do.
Section 33.6: Creating and sending a request with a custom method
By default, PHP Curl supports GET and POST requests. It is possible to also send custom requests, such as DELETE, PUT or PATCH (or even non-standard methods) using the CURLOPT_CUSTOMREQUEST parameter.

Section 33.7: Get and Set custom http headers in php
Sending The Request Header

Reading the custom header

Output:

We can also send the header using below syntax:


Chapter 34: Reflection
Section 34.1: Feature detection of classes or objects
Feature detection of classes can partly be done with the property_exists and method_exists functions.

$r = new ReflectionClass('MyClass');
$check = $r->hasProperty('public_field');  // true
$check = $r->hasMethod('public_function'); // true $check = $r->hasConstant('CONSTANT');      // true
// also works for protected, private and/or static members.
Note: for property_exists and method_exists, also an object of the class of interest can be provided instead of the class name. Using reflection, the ReflectionObject class should be used instead of ReflectionClass.
Section 34.2: Testing private/protected methods
Sometimes it's useful to test private & protected methods as well as public ones.


Easiest way to test drive method is using reflection

If the method is static you pass null in the place of the class instance


Section 34.3: Accessing private and protected member variables
Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects. It's also great for inspecting the state of an object at any given point in time. Here's an example of using Reflection in a unit test to verify a protected class member contains the expected value.
Below is a very basic class for a Car. It has a protected member variable that will contain the value representing the color of the car. Because the member variable is protected we cannot access it directly and must use a getter and setter method to retrieve and set its value respectively.

Car::setColorCar::getColorTo test this many developers will create a Car object, set the car's color using (), retrieve the color using (), and compare that value to the color they set:

Car::getColorCar::$colorOn the surface this seems okay. After all, all () does is return the value of the protected member variable . But this test is flawed in two ways:
Car::getColor1. It exercises () which is out of the scope of this test
Car::getColor2. It depends on () which may have a bug itself which can make the test have a false positive or negative
Car::getColorCar::getColorLet's look at why we shouldn't use () in our unit test and should use Reflection instead. Let's say a developer is assigned a task to add "Metallic" to every car color. So they attempt to modify the () to prepend "Metallic" to the car's color:

Car::getColorCar::setColorCar::setColorDo you see the error? The developer used a semi-colon instead of the concatenation operator in an attempt to prepend "Metallic" to the car's color. As a result, whenever () is called, "Metallic " will be returned regardless of what the car's actual color is. As a result our () unit test will fail even though () works perfectly fine and was not affected by this change.
Car::$color contains the value we are setting via Car::setColorSo how do we verify ()? We can use Refelection to
inspect the protected member variable directly. So how do we do that? We can use Refelection to make the protected member variable accessible to our code so it can retrieve the value.
Let's see the code first and then break it down:

Car::$colorHere is how we are using Reflection to get the value of  in the code above:
1. We create a new ReflectionObject representing our Car object
Car::$color (this "represents" the Car::$color2. We get a ReflectionProperty for  variable)
Car::$color3. We make  accessible
Car::$color4. We get the value of 
Car::$color without having to call Car::getColorAs you can see by using Reflection we could get the value of () or
Car::setColorany other accessor function which could cause invalid test results. Now our unit test for () is safe and accurate.
Chapter 35: Dependency Injection
Dependency Injection (DI) is a fancy term for "passing things in". All it really means is passing the dependencies of an object via the constructor and / or setters instead of creating them upon object creation inside the object. Dependency Injection might also refer to Dependency Injection Containers which automate the construction and injection.
Section 35.1: Constructor Injection
Objects will often depend on other objects. Instead of creating the dependency in the constructor, the dependency should be passed into the constructor as a parameter. This ensures there is not tight coupling between the objects, and enables changing the dependency upon class instantiation. This has a number of benefits, including making code easier to read by making the dependencies explicit, as well as making testing simpler since the dependencies can be switched out and mocked more easily.
In the following example, Component will depend on an instance of Logger, but it doesn't create one. It requires one to be passed as argument to the constructor instead.

Without dependency injection, the code would probably look similar to:

Using new to create new objects in the constructor indicates that dependency injection was not used (or was used incompletely), and that the code is tightly coupled. It is also a sign that the code is incompletely tested or may have brittle tests that make incorrect assumptions about program state.
In the above example, where we are using dependency injection instead, we could easily change to a different Logger if doing so became necessary. For example, we might use a Logger implementation that logs to a different location, or that uses a different logging format, or that logs to the database instead of to a file.
Section 35.2: Setter Injection
Dependencies can also be injected by setters.


This is especially interesting when the core functionality of the class does not rely on the dependency to work.
Here, the only needed dependency is the DatabaseConnection so it's in the constructor. The Logger dependency is optional and thus does not need to be part of the constructor, making the class easier to use.
Note that when using setter injection, it's better to extend the functionality rather than replacing it. When setting a dependency, there's nothing confirming that the dependency won't change at some point, which could lead in unexpected results. For example, a FileLogger could be set at first, and then a MailLogger could be set. This breaks encapsulation and makes logs hard to find, because we're replacing the dependency.
To prevent this, we should add a dependency with setter injection, like so:


Like this, whenever we'll use the core functionality, it won't break even if there is no logger dependency added, and any logger added will be used even though another logger could've been added. We're extending functionality instead of replacing it.
Section 35.3: Container Injection
Dependency Injection (DI) in the context of using a Dependency Injection Container (DIC) can be seen as a superset of constructor injection. A DIC will typically analyze a class constructor's typehints and resolve its needs, effectively injecting the dependencies needed for the instance execution.
The exact implementation goes well beyond the scope of this document but at its very heart, a DIC relies on using the signature of a class...

... to automatically instantiate it, relying most of the time on an autoloading system.

If you are using PHP in version at least 5.5 and want to get a name of a class in a way that's being shown above, the correct way is the second approach. That way you can quickly find usages of the class using modern IDEs, which will greatly help you with potential refactoring. You do not want to rely on regular strings.
In this case, the Documentation\Example knows it needs a Meaning, and a DIC would in turn instantiate a Meaning type. The concrete implementation need not depend on the consuming instance.
Instead, we set rules in the container, prior to object creation, that instructs how specific types should be instantiated if need be.
This has a number of advantages, as a DIC can
Share common instances
Provide a factory to resolve a type signature
Resolve an interface signature
If we define rules about how specific type needs to be managed we can achieve fine control over which types are shared, instantiated, or created from a factory.
Chapter 36: XML
Section 36.1: Create a XML using DomDocument
To create a XML using DOMDocument,basically, we need to create all the tags and attributes using the
createElement() and createAttribute() methods and them create the XML structure with the appendChild().
The example below includes tags, attributes, a CDATA section and a different namespace for the second tag:

This will output the following XML:

Section 36.2: Read a XML document with DOMDocument
Similarly to the SimpleXML, you can use DOMDocument to parse XML from a string or from a XML file
1. From a string

2. From a file

Example of parsing
Considering the following XML:

This is a example code to parse it
$books = $doc->getElementsByTagName('book'); foreach ($books as $book) {
    $title = $book->getElementsByTagName('name')->item(0)->nodeValue;
    $price = $book->getElementsByTagName('price')->item(0)->nodeValue;     $id = $book->getElementsByTagName('id')->item(0)->nodeValue;     print_r ("The title of the book $id is $title and it costs $price." . "\n"); }
This will output:
The title of the book 1 is PHP - An Introduction and it costs $5.95.
The title of the book 2 is PHP - Advanced and it costs $25.00.
Section 36.3: Leveraging XML with PHP's SimpleXML Library
SimpleXML is a powerful library which converts XML strings to an easy to use PHP object.
The following assumes an XML structure as below.

Read our data in to SimpleXML
To get started, we need to read our data into SimpleXML. We can do this in 3 different ways. Firstly, we can load our data from a DOM node.

Our next option is to load our data from an XML file.

Lastly, we can load our data from a variable.

Whether you've picked to load from a DOM Element, from a file or from a string, you are now left with a SimpleXMLElement variable called $xmlElement. Now, we can start to make use of our XML in PHP.
Accessing our SimpleXML Data
The simplest way to access data in our SimpleXMLElement object is to call the properties directly. If we want to access our first bookName, StackOverflow SimpleXML Example, then we can access it as per below.

At this point, SimpleXML will assume that because we have not told it explicitly which book we want, that we want the first one. However, if we decide that we do not want the first one, rather that we want Another SimpleXML Example, then we can access it as per below.

It is worth noting that using [0] works the same as not using it, so

works the same as

Looping through our XML
There are many reasons you may wish to loop through XML, such as that you have a number of items, books in our case, that we would like to display on a webpage. For this, we can use a foreach loop or a standard for loop, taking advantage of SimpleXMLElement's count function..

or

Handling Errors
Now we have come so far, it is important to realise that we are only humans, and will likely encounter an error eventually - especially if we are playing with different XML files all the time. And so, we will want to handle those errors.
Consider we created an XML file. You will notice that while this XML is much alike what we had earlier, the problem with this XML file is that the final closing tag is /doc instead of /document.


Now, say, we load this into our PHP as $file.

We will be greeted with the following

However as soon as we fix this problem, we are presented with "Happy Days".
Section 36.4: Create an XML file using XMLWriter
Instantiate a XMLWriter object:

var/www/example.com/xml/output.xmlNext open the file to which you want to write. For example, to write to /, use:

To start the document (create the XML open tag):

This will output:

Now you can start writing elements:

This will generate the XML:

If you need something a little more complex than simply nodes with plain values, you can also "start" an element and add attributes to it before closing it:

This will output:

Section 36.5: Read a XML document with SimpleXML
You can parse XML from a string or from a XML file
1. From a string

2. From a file

Example of parsing
Considering the following XML:

This is a example code to parse it

This will output:
The title of the book 1 is PHP - An Introduction and it costs $5.95. The title of the book 2 is PHP - Advanced and it costs $25.00.

Chapter 37: SimpleXML
Section 37.1: Loading XML data into simplexml
Loading from string
Use simplexml_load_string to create a SimpleXMLElement from a string:
$xmlString = "<?xml version='1.0' encoding='UTF-8'?>";
$xml = simplexml_load_string($xmlString) or die("Error: Cannot create object");
Note that or not || must be used here because the precedence of or is higher than =. The code after or will only be executed if $xml finally resolves to false.
Loading from file
Use simplexml_load_file to load XML data from a file or a URL:

The URL can be of any schemes that PHP supports, or custom stream wrappers.

Chapter 38: Parsing HTML
Section 38.1: Parsing HTML from a string
PHP implements a DOM Level 2 compliant parser, allowing you to work with HTML using familiar methods like
getElementById() or appendChild().

Outputs:

libxml_use_internal_errors() before importing your HTML. You can then use libxml_get_errors()Note that PHP will emit warnings about any problems with the HTML, especially if you are importing a document fragment. To avoid these warnings, tell the DOM library (libxml) to handle its own errors by calling  to handle errors if needed.
Section 38.2: Using XPath

Outputs:

Section 38.3: SimpleXML
Presentation
 SimpleXML is a PHP library which provides an easy way to work with XML documents (especially reading and iterating through XML data).
 The only restraint is that the XML document must be well-formed.


Parsing XML using OOP approach

Accessing Children and Attributes
When SimpleXML parses an XML document, it converts all its XML elements, or nodes, to properties of the resulting SimpleXMLElement object
In addition, it converts XML attributes to an associative array that may be accessed from the property to which they belong.

attribute in the XML document.
When you don't know their names (or you don't want to know them):

Chapter 39: Regular Expressions (regexp/PCRE)
Parameter	Details
$pattern a string with a regular expression (PCRE pattern)
Section 39.1: Global RegExp match
A global RegExp match can be performed using preg_match_all. preg_match_all returns all matching results in the subject string (in contrast to preg_match, which only returns the first one).
The preg_match_all function returns the number of matches. Third parameter $matches will contain matches in format controlled by flags that can be given in fourth parameter.
If given an array, $matches will contain array in similar format you'd get with preg_match, except that preg_match stops at first match, where preg_match_all iterates over the string until the string is wholly consumed and returns result of each iteration in a multidimensional array, which format can be controlled by the flag in fourth argument.
The fourth argument, $flags, controls structure of $matches array. Default mode is PREG_PATTERN_ORDER and possible flags are PREG_SET_ORDER and PREG_PATTERN_ORDER.

The first var_dump from PREG_SET_ORDER gives this output:


$matches has three nested arrays. Each array represents one match, which has the same format as the return result of preg_match.
The second var_dump (PREG_PATTERN_ORDER) gives this output:

When the same regexp is run through preg_match, following array is returned:

Section 39.2: String matching with regular expressions
preg_match checks whether a string matches the regular expression.

If you pass in a third parameter, it will be populated with the matching data of the regular expression:
preg_match('%^([a-zA-Z]+): ([0-9]+)$%', 'This is a string which contains numbers: 12345', $matches);
// $matches now contains results of the regular expression matches in an array. echo json_encode($matches); // ["numbers: 12345", "numbers", "12345"]
$matches contains an array of the whole match then substrings in the regular expression bounded by parentheses, in the order of open parenthesis's offset. That means, if you have /z(a(b))/ as the regular expression, index 0 contains the whole substring zab, index 1 contains the substring bounded by the outer parentheses ab and index 2
contains the inner parentheses b.
Section 39.3: Split string into array by a regular expression

Output:

preg_splitTo split a string into a array simply pass the string and a regexp for (); to match and search, adding a third parameter (limit) allows you to set the number of "matches" to perform, the remaining string will be added to the end of the array.
The fourth parameter is (flags) here we use the PREG_SPLIT_NO_EMPTY which prevents our array from containing any empty keys / values.
Section 39.4: String replacing with regular expression
$string = "a;b;c\nd;e;f";
// $1, $2 and $3 represent the first, second and third capturing groups echo preg_replace("(^([^;]+);([^;]+);([^;]+)$)m", "$3;$2;$1", $string);
Outputs

Searches for everything between semicolons and reverses the order.
Section 39.5: String replace with callback
preg_replace_callback works by sending every matched capturing group to the defined callback and replaces it with the return value of the callback. This allows us to replace strings based on any kind of logic.



Chapter 40: Traits
Section 40.1: What is a Trait?
PHP only allows single inheritance. In other words, a class can only extend one other class. But what if you need to include something that doesn't belong in the parent class? Prior to PHP 5.4 you would have to get creative, but in 5.4 Traits were introduced. Traits allow you to basically "copy and paste" a portion of a class into your main class

So here we have MrEd, which is already extending Horse. But not all horses Talk, so we have a Trait for that. Let's note what this is doing
First, we define our Trait. We can use it with autoloading and Namespaces (see also Referencing a class or function in a namespace). Then we include it into our MrEd class with the keyword use.
You'll note that MrEd takes to using the Talk functions and variables without defining them. Remember what we said about copy and paste? These functions and variables are all defined within the class now, as if this class had defined them.
new TraitTraits are most closely related to Abstract classes in that you can define variables and functions. You also cannot instantiate a Trait directly (i.e. ()). Traits cannot force a class to implicitly define a function like an
Abstract class or an Interface can. Traits are only for explicit definitions (since you can implement as many Interfaces as you want, see Interfaces).
When should I use a Trait?
The first thing you should do, when considering a Trait, is to ask yourself this important question
		Can I avoid using a Trait by restructuring my code?
More often than not, the answer is going to be Yes. Traits are edge cases caused by single inheritance. The temptation to misuse or overuse Traits can be high. But consider that a Trait introduces another source for your code, which means there's another layer of complexity. In the example here, we're only dealing with 3 classes. But Traits mean you can now be dealing with far more than that. For each Trait, your class becomes that much harder to deal with, since you must now go reference each Trait to find out what it defines (and potentially where a collision happened, see Conflict Resolution). Ideally, you should keep as few Traits in your code as possible.
Section 40.2: Traits to facilitate horizontal code reuse
Let's say we have an interface for logging:

Now say we have two concrete implementations of the Logger interface: the FileLogger and the ConsoleLogger.

Now if you define some other class Foo which you also want to be able to perform logging tasks, you could do something like this:

setLoggerFoo is now also a Logger, but its functionality depends on the Logger implementation passed to it via (). If we now want class Bar to also have this logging mechanism, we would have to duplicate this piece of logic in the Bar class.
Instead of duplicating the code, a trait can be defined:

Now that we have defined the logic in a trait, we can use the trait to add the logic to the Foo and Bar classes:


Section 40.3: Conflict Resolution
Trying to use several traits into one class could result in issues involving conflicting methods. You need to resolve such conflicts manually.
For example, let's create this hierarchy:

Now, let's try to create the following class:

The php interpreter will return a fatal error:

Fatal error: Trait method say has not been applied, because there are collisions with other trait methods on TalkingParrot

Meow
Woof
Section 40.4: Implementing a Singleton using Traits
Disclaimer: In no way does this example advocate the use of singletons. Singletons are to be used with a lot of care.
In PHP there is quite a standard way of implementing a singleton:

To prevent code duplication, it is a good idea to extract this behaviour into a trait.

Now any class that wants to function as a singleton can simply use the trait:

Even though it is now impossible to serialize a singleton, it is still useful to also disallow the deserialize method.
Section 40.5: Traits to keep classes clean
Over time, our classes may implement more and more interfaces. When these interfaces have many methods, the total number of methods in our class will become very large.
For example, let's suppose that we have two interfaces and a class implementing them:

Instead of implementing all the interface methods inside the Article class, we could use separate Traits to implement these interfaces, keeping the class smaller and separating the code of the interface implementation from the class.
From example, to implement the Printable interface we could create this trait:

and make the class use the trait:

The primary benefits would be that our interface-implementation methods will be separated from the rest of the class, and stored in a trait who has the sole responsibility to implement the interface for that particular type of object.
Section 40.6: Multiple Traits Usage

The above example will output:

Section 40.7: Changing Method Visibility


Running this example:

trait HelloWorldSo be aware that in the last example in MyClass2 the original un-aliased method from  stays accessible as-is.

Chapter 41: Composer Dependency Manager
Parameter	Details
licenseDefines the type of license you want to use in the Project.authorsDefines the authors of the project, as well as the author details.supportDefines the support emails, irc channel, and various links.requireDefines the actual dependencies as well as the package versions.require-devDefines the packages necessary for developing the project.suggestDefines the package suggestions, i.e. packages which can help if installed.autoloadDefines the autoloading policies of the project.autoload-dev Defines the autoloading policies for developing the project.
Composer is PHP's most commonly used dependency manager. It's analogous to npm in Node, pip for Python, or NuGet for .NET.
Section 41.1: What is Composer?
Composer is a dependency/package manager for PHP. It can be used to install, keep track of, and update your project dependencies. Composer also takes care of autoloading the dependencies that your application relies on, letting you easily use the dependency inside your project without worrying about including them at the top of any given file.
composer.jsonDependencies for your project are listed within a  file which is typically located in your project root. This file holds information about the required versions of packages for production and also development.
composer.jsonA full outline of the  schema can be found on the Composer Website.
composer require <package> or composer require-dev <packageThis file can be edited manually using any text-editor or automatically through the command line via commands such as >.
composer.jsonlaravel/laravelTo start using composer in your project, you will need to create the  file. You can either create it manually or simply run composer init. After you run composer init in your terminal, it will ask you for some basic information about your project: Package name (vendor/package - e.g. ), Description - optional, Author and some other information like Minimum Stability, License and Required Packages.
composer.jsonThe require key in your  file specifies Composer which packages your project depends on. require takes an object that maps package names (e.g. monolog/monolog) to version constraints (e.g. 1.0.*).

To install the defined dependencies, you will need to run the composer install command and it will then find the defined packages that matches the supplied version constraint and download it into the vendor directory. It's a convention to put third party code into a directory named vendor.
composer.lockYou will notice the install command also created a  file.
composer.lockA  file is automatically generated by Composer. This file is used to track the currently installed versions and state of your dependencies. Running composer install will install packages to exactly the state stored in the lock file.
Section 41.2: Autoloading with Composer
While composer provides a system to manage dependencies for PHP projects (e.g. from Packagist), it can also notably serve as an autoloader, specifying where to look for specific namespaces or include generic function files.
composer.jsonIt starts with the  file:

functions.phpThis configuration code ensures that all classes in the namespace MyVendorName\MyProject are mapped to the src directory and all classes in MyVendorName\MyProject\Tests to the tests directory (relative to your root directory). It will also automatically include the file .
composer.jsonautoload.phpcomposer install --no-dev. The autoload.phpcomposer.jsonAfter putting this in your  file, run composer update in a terminal to have composer update the dependencies, the lock file and generate the  file. When deploying to a production environment you would use  file can be found in the vendor directory which should be generated in the directory where  resides.
You should require this file early at a setup point in the lifecycle of your application using a line similar to that below.

autoload.phpOnce included, the  file takes care of loading all the dependencies that you provided in your
composer.json file.
Some examples of the class path to directory mapping:
src/Shapes/Square.phptests/Shapes/Square.php	 MyVendorName\MyProject\Shapes\Square ➔ 	.
MyVendorName\MyProject\Tests\Shapes\Square ➔ .
Section 41.3: Dierence between 'composer install' and 'composer update'
composer.jsoncomposer update composer update will update our dependencies as they are specified in .
For example, if our project uses this configuration:

Supposing we have actually installed the 2.0.1 version of the package, running composer update will cause an upgrade of this package (for example to 2.0.2, if it has already been released).
In detail composer update will:
composer.jsoncomposer.jsoncomposer.lockRead 
Remove installed packages that are no more required in 
Check the availability of the latest versions of our required packages
 Install the latest versions of our packages Update  to store the installed packages version composer install
composer.lockcomposer install will install all of the dependencies as specified in the  file at the version specified (locked), without updating anything.
In detail:
composer.lockcomposer.lockRead  file Install the packages specified in the  file
When to install and when to update composer update is mostly used in the 'development' phase, to upgrade our project packages.
composer.lockcomposer install is primarily used in the 'deploying phase' to install our application on a production server or on a testing environment, using the same dependencies stored in the  file created by composer update.
Section 41.4: Composer Available Commands
CommandUsageaboutShort information about ComposerarchiveCreate an archive of this composer packagebrowseOpens the package's repository URL or homepage in your browser.clear-cacheClears composer's internal package cache.clearcacheClears composer's internal package cache.configSet config optionscreate-projectCreate new project from a package into given directory.dependsShows which packages cause the given package to be installeddiagnoseDiagnoses the system to identify common errors.dump-autoload Dumps the autoloader dumpautoload Dumps the autoloader exec	Execute a vendored binary/script global	Allows running commands in the global composer dir ($COMPOSER_HOME).
help	Displays help for a command home	Opens the package's repository URL or homepage in your browser.
infoShow information about packagesinitCreates a basic composer.json file in current directory.installInstalls the project dependencies from the composer.lock file if present, or falls back on the composer.json.licensesShow information about licenses of dependencieslistLists commandsoutdatedShows a list of installed packages that have updates available, including their latest version.prohibitsShows which packages prevent the given package from being installedremoveRemoves a package from the require or require-devrequireAdds required packages to your composer.json and installs themrun-scriptRun the scripts defined in composer.json.searchSearch for packagesself-updateUpdates composer.phar to the latest version.selfupdateUpdates composer.phar to the latest version.showShow information about packagesstatusShow a list of locally modified packagessuggestsShow package suggestionsupdateUpdates your dependencies to the latest version according to composer.json, and updates the composer.lock file.validateValidates a composer.json and composer.lockwhyShows which packages cause the given package to be installedwhy-notShows which packages prevent the given package from being installedSection 41.5: Benefits of Using Composer
composer.lockComposer tracks which versions of packages you have installed in a file called , which is intended to be committed to version control, so that when the project is cloned in the future, simply running composer install will download and install all the project's dependencies.
Composer deals with PHP dependencies on a per-project basis. This makes it easy to have several projects on one machine that depend on separate versions of one PHP package.
Composer tracks which dependencies are only intended for dev environments only

Composer provides an autoloader, making it extremely easy to get started with any package. For instance, after
composer require fabpot/goutteinstalling Goutte with , you can immediately start to use Goutte in a new project:

Composer allows you to easily update a project to the latest version that is allowed by your composer.json. EG.
composer update fabpot/goutte, or to update each of your project's dependencies: composer update.
Section 41.6: Installation
You may install Composer locally, as part of your project, or globally as a system wide executable.
Locally
To install, run these commands in your terminal.
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
# to check the validity of the downloaded installer, check here against the SHA-384: # https://composer.github.io/pubkeys.html php composer-setup.php
php -r "unlink('composer-setup.php');"
composer.pharcomposer.pharThis will download  (a PHP Archive file) to the current directory. Now you can run php  to use Composer, e.g.

Globally
To use Composer globally, place the composer.phar file to a directory that is part of your PATH

php composer.pharNow you can use composer anywhere instead of , e.g.


Chapter 42: Magic Methods
Section 42.1: __call() and __callStatic()
__call() and __callStatic() are called when somebody is calling nonexistent object method in object or static
context.


Example:

Section 42.2: __get(), __set(), __isset() and __unset()
Whenever you attempt to retrieve a certain field from a class like so:

__get($namePHP invokes the magic method ), with $name equal to "height" in this case. Writing to a class field like so:

__set($name, $valueWill invoke the magic method ), with $name equal to "height" and $value equal to 10.
isset(), which check if a variable exists, and unsetPHP also has two built-in functions (), which destroys a variable.
Checking whether a objects field is set like so:

__isset($nameWill invoke the ) function on that object. Destroying a variable like so:

__unset($nameWill invoke the ) function on that object.
Normally, when you don't define these methods on your class, PHP just retrieves the field as it is stored in your class. However, you can override these methods to create classes that can hold data like an array, but are usable like an object:


empty() function and magic methods
empty() on a class attribute will invoke __issetNote that calling () because as the PHP manual states:
		empty() is essentially the concise equivalent to !isset($var) || $var == false
Section 42.3: __construct() and __destruct()
__construct() is the most common magic method in PHP, because it is used to set up a class when it is initialized.
__construct() method is the __destructThe opposite of the () method. This method is called when there are no
more references to an object that you created or when you force its deletion. PHP's garbage collection will clean up the object by first calling its destructor and then removing it from memory.


Section 42.4: __toString()
__toStringWhenever an object is treated as a string, the () method is called. This method should return a string representation of the class.

Section 42.5: __clone()
__clone is invoked by use of the clone keyword. It is used to manipulate object state upon cloning, after the object has been actually cloned.

Example:

Section 42.6: __invoke()
This magic method is called when user tries to invoke object as a function. Possible use cases may include some approaches like functional programming or some callbacks.


Section 42.7: __sleep() and __wakeup()
__sleep and __wakeup are methods that are related to the serialization process. serialize function checks if a class has a __sleep method. If so, it will be executed before any serialization. __sleep is supposed to return an array of the names of all variables of an object that should be serialized.
__wakeup in turn will be executed by unserialize if it is present in class. It's intention is to re-establish resources and other things that are needed to be initialized upon unserialization.

Section 42.8: __debugInfo()

Version ≤ 5.6

The above example will output:

Version ≥ 5.6

The above example will output:


Chapter 43: File handling
   Parameter	Description filename	The filename being read.
                 You can use the optional second parameter and set it to TRUE, if you want to search for the file use_include_path
in the include_path, too.
context	A context stream resource.
Section 43.1: Convenience functions
Raw direct IO file_get_contents and file_put_contents provide the ability to read/write from/to a file to/from a PHP string in a single call. file_put_contents can also be used with the FILE_APPEND bitmask flag to append to, instead of truncate and overwrite, the file. It can be used along with LOCK_EX bitmask to acquire an exclusive lock to the file while proceeding to writing. Bitmask flags can be joined with the | bitwise-OR operator.

FILE_APPEND is handy for appending to log files while LOCK_EX helps prevent race condition of file writing from multiple processes. For example, to write to a log file about the current session: file_put_contents("logins.log", "{$_SESSION["username"]} logged in", FILE_APPEND | LOCK_EX);
CSV IO

The fgetcsv parses line from open file checking for csv fields. It returns CSV fields in an array on success or FALSE on failure.
By default, it will read only one line of the CSV file.

contacts.csv
Output:


Reading a file to stdout directly readfile copies a file to the output buffer. readfile() will not present any memory issues, even when sending large files, on its own.

Or from a file pointer
Alternatively, to seek a point in the file to start copying to stdout, use fpassthru instead. In the following example, the last 1024 bytes are copied to stdout:

file returns the lines in the passed file in an array. Each element of the array corresponds to a line in the file, with the newline still attached.

test.txt
Output:

Section 43.2: Deleting files and directories
Deleting files
The unlink function deletes a single file and returns whether the operation was successful.

Deleting directories, with recursive deletion
On the other hand, directories should be deleted with rmdir. However, this function only deletes empty directories. To delete a directory with files, delete the files in the directories first. If the directory contains subdirectories, recursion may be needed.
The following example scans files in a directory, deletes member files/directories recursively, and returns the number of files (not directories) deleted.

Section 43.3: Getting file information
Check if a path is a directory or a file
The is_dir function returns whether the argument is a directory, while is_file returns whether the argument is a file. Use file_exists to check if it is either.

$file = "/this/is/a/file.txt";
echo is_dir($dir) ? "$dir is a directory" : "$dir is not a directory", PHP_EOL,     is_file($dir) ? "$dir is a file" : "$dir is not a file", PHP_EOL,     file_exists($dir) ? "$dir exists" : "$dir doesn't exist", PHP_EOL,     is_dir($file) ? "$file is a directory" : "$file is not a directory", PHP_EOL,     is_file($file) ? "$file is a file" : "$file is not a file", PHP_EOL,     file_exists($file) ? "$file exists" : "$file doesn't exist", PHP_EOL;
This gives:

Checking file type
Use filetype to check the type of a file, which may be:
fifo char dir block link file socket unknown
Passing the filename to the filetype directly:

Note that filetype returns false and triggers an E_WARNING if the file doesn't exist.
Checking readability and writability
Passing the filename to the is_writable and is_readable functions check whether the file is writable or readable respectively.
The functions return false gracefully if the file does not exist.
Checking file access/modify time
Using filemtime and fileatime returns the timestamp of the last modification or access of the file. The return value is a Unix timestamp -- see Working with Dates and Time for details.
echo "File was last modified on " . date("Y-m-d", filemtime("file.txt")); echo "File was last accessed on " . date("Y-m-d", fileatime("file.txt"));


This example will output:


$path	The full path of the file to be parsed
           One of four available options [PATHINFO_DIRNAME, PATHINFO_BASENAME, PATHINFO_EXTENSION or $option
PATHINFO_FILENAME]
image.jpg.png would be .pngIf an option (the second parameter) is not passed, an associative array is returned otherwise a string is returned.
Does not validate that the file exists.
Simply parses the string into parts. No validation is done on the file (no mime-type checking, etc.)
jpg The extension is simply the last extension of $path The path for the file  even if it technically a . file. A file without an extension will not return an extension element in the array.
 Section 43.4: Stream-based file IO
Opening a stream fopen opens a file stream handle, which can be used with various functions for reading, writing, seeking and other functions on top of it. This value is of resource type, and cannot be passed to other threads persisting its functionality.
$f = fopen("errors.log", "a"); // Will try to open errors.log for writing
The second parameter is the mode of the file stream:
Mode Description
r Open in read only mode, starting at the beginning of the file
r+ Open for reading and writing, starting at the beginning of the file open for writing only, starting at the beginning of the file. If the file exists it will empty the file. If it doesn't
w exist it will attempt to create it. open for reading and writing, starting at the beginning of the file. If the file exists it will empty the file. If it
w+ doesn't exist it will attempt to create it.
a open a file for writing only, starting at the end of the file. If the file does not exist, it will try to create it open a file for reading and writing, starting at the end of the file. If the file does not exist, it will try to create
a+
it
x create and open a file for writing only. If the file exists the fopen call will fail
x+ create and open a file for reading and writing. If the file exists the fopen call will fail open the file for writing only. If the file does not exist it will try to create it. It will start writing at the
c
beginning of the file, but will not empty the file ahead of writing open the file for reading and writing. If the file does not exist it will try to create it. It will start writing at the
c+
beginning of the file, but will not empty the file ahead of writing
\n" line endings to "\r\nAdding a t behind the mode (e.g. a+b, wt, etc.) in Windows will translate "" when working with the file. Add b behind the mode if this is not intended, especially if it is a binary file.
The PHP application should close streams using fclose when they are no longer used to prevent the Too many open files error. This is particularly important in CLI programs, since the streams are only closed when the runtime shuts down -- this means that in web servers, it may not be necessary (but still should, as a practice to prevent resource leak) to close the streams if you do not expect the process to run for a long time, and will not open many streams.
Reading
Using fread will read the given number of bytes from the file pointer, or until an EOF is met.
Reading lines
Using fgets will read the file until an EOL is reached, or the given length is read.
Both fread and fgets will move the file pointer while reading.
Reading everything remaining
Using stream_get_contents will all remaining bytes in the stream into a string and return it.
Adjusting file pointer position
Initially after opening the stream, the file pointer is at the beginning of the file (or the end, if the mode a is used). Using the fseek function will move the file pointer to a new position, relative to one of three values:
SEEK_SET: This is the default value; the file position offset will be relative to the beginning of the file.
SEEK_CUR: The file position offset will be relative to the current position.
SEEK_END: The file position offset will be relative to the end of the file. Passing a negative offset is the most common use for this value; it will move the file position to the specified number of bytes before the end of file.
 SEEK_SETfseek($fhrewind is a convenience shortcut of , 0,).
Using ftell will show the absolute position of the file pointer.
For example, the following script reads skips the first 10 bytes, reads the next 10 bytes, skips 10 bytes, reads the next 10 bytes, and then the last 10 bytes in file.txt:


Writing
Using fwrite writes the provided string to the file starting at the current file pointer.

Section 43.5: Moving and Copying files and directories
Copying files copy copies the source file in the first argument to the destination in the second argument. The resolved destination needs to be in a directory that is already created.

Copying directories, with recursion
Copying directories is pretty much similar to deleting directories, except that for files copy instead of unlink is used, while for directories, mkdir instead of rmdir is used, at the beginning instead of being at the end of the function.

Renaming/Moving
Renaming/Moving files and directories is much simpler. Whole directories can be moved or renamed in a single call, using the rename function.
rename("~/file.txt", "~/file.html"		);
rename("~/dir", "~/old_dir"rename("~/dir/file.txt", "~/dir2/file.txt"		);
);
Section 43.6: Minimize memory usage when dealing with large files
If we need to parse a large file, e.g. a CSV more than 10 Mbytes containing millions of rows, some use file or file_get_contents functions and end up with hitting memory_limit setting with
		Allowed memory size of XXXXX bytes exhausted
error. Consider the following source (top-1m.csv has exactly 1 million rows and is about 22 Mbytes of size)

This outputs:

because the interpreter needed to hold all the rows in $arr array, so it consumed ~200 Mbytes of RAM. Note that we haven't even done anything with the contents of the array.
Now consider the following code:

which outputs

so we don't use a single extra byte of memory, but parse the whole CSV and save it to another file reversing the value of the 2nd column. That's because fgetcsv reads only one row and $row is overwritten in every loop.
Chapter 44: Streams
Parameter Name	Description
<scheme>://<target>Stream Resource	The data provider consisting of the  syntax
Section 44.1: Registering a stream wrapper
A stream wrapper provides a handler for one or more specific schemes.
The example below shows a simple stream wrapper that sends PATCH HTTP requests when the stream is closed.


This example only shows some examples of what a generic stream wrapper would contain. These are not all methods available. A full list of methods that can be implemented can be found at http://php.net/streamWrapper.

Chapter 45: Type hinting
Section 45.1: Type hinting classes and interfaces
Type hinting for classes and interfaces was added in PHP 5.
Class type hint

The above script outputs:
		Chris is being enrolled at University of Edinburgh
Interface type hint


The above example outputs the same as before:
		Chris is being enrolled at University of Edinburgh
Self type hints
The self keyword can be used as a type hint to indicate that the value must be an instance of the class that declares the method.
Section 45.2: Type hinting scalar types, arrays and callables
Support for type hinting array parameters (and return values after PHP 7.1) was added in PHP 5.1 with the keyword array. Any arrays of any dimensions and types, as well as empty arrays, are valid values.
is_callablearray(class_name|objectSupport for type hinting callables was added in PHP 5.4. Any value that () is valid for parameters and return values hinted callable, i.e. Closure objects, function name strings and ,
method_name).
is_callableIf a typo occurs in the function name such that it is not (), a less obvious error message would be displayed:

Nonstatic methods can also be passed as callables in static format, resulting in a deprecation warning and level E_STRICT error in PHP 7 and 5 respectively.
Method visibility is taken into account. If the context of the method with the callable parameter does not have access to the callable provided, it will end up as if the method does not exist.


Output:
		Fatal error: Uncaught TypeError: Argument 1 passed to r() must be callable, array given
Support for type hinting scalar types was added in PHP 7. This means that we gain type hinting support for
By default, PHP will attempt to cast any provided argument to match its type hint. Changing the call to gives exactly the same output, since the float 1.5 was cast to int by PHP.
declare(strict_typesTo stop this behavior, one must add =1); to the top of every PHP source file that requires it.

The above script now produces a fatal error:
		Fatal error: Uncaught TypeError: Argument 1 passed to add() must be of the type integer, float given
An Exception: Special Types
Some PHP functions may return a value of type resource. Since this is not a scalar type, but a special type, it is not possible to type hint it.
curl_init() will return a resource, as well as fopenAs an example, (). Of course, those two resources aren't compatible to each other. Because of that, PHP 7 will always throw the following TypeError when type hinting resource explicitly:
		TypeError: Argument 1 passed to sample() must be an instance of resource, resource given
Section 45.3: Nullable type hints
Parameters
Nullable type hint was added in PHP 7.1 using the ? operator before the type hint.

Before PHP 7.1, if a parameter has a type hint, it must declare a default value null to accept null values.

Return values
In PHP 7.0, functions with a return type must not return null.
In PHP 7.1, functions can declare a nullable return type hint. However, the function must still return null, not void (no/empty return statements).

Section 45.4: Type hinting generic objects
Since PHP objects don't inherit from any base class (including stdClass), there is no support for type hinting a generic object type.
For example, the below will not work.

And will throw a fatal error:
Fatal error: Uncaught TypeError: Argument 1 passed to doSomething() must be an instance of object, instance of OperationOne given
A workaround to this is to declare a degenerate interface that defines no methods, and have all of your objects implement this interface.

Section 45.5: Type Hinting No Return(Void)
In PHP 7.1, the void return type was added. While PHP has no actual void value, it is generally understood across programming languages that a function that returns nothing is returning void. This should not be confused with returning null, as null is a value that can be returned.

Note that if you declare a void return, you cannot return any values or you will get a fatal error:

However, using return to exit the function is valid:

Chapter 46: Filters & Filter Functions
Parameter	Details
variableValue to filter. Note that scalar values are converted to string internally before they are filtered.------------filterThe ID of the filter to apply. The Types of filters manual page lists the available filters.If omitted,
FILTER_DEFAULT will be used, which is equivalent to FILTER_UNSAFE_RAW. This will result in no filtering taking place by default.------------optionsAssociative array of options or bitwise disjunction of flags. If filter accepts options, flags can be provided in "flags" field of array. For the "callback" filter, callable type should be passed. The callback must accept one argument, the value to be filtered, and return the value after filtering/sanitizing it.This extension filters data by either validating or sanitizing it. This is especially useful when the data source contains unknown (or foreign) data, like user supplied input. For example, this data may come from an HTML form.
Section 46.1: Validating Boolean Values
var_dump(filter_var(true, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // true var_dump(filter_var(false, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false var_dump(filter_var(1, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // true var_dump(filter_var(0, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false var_dump(filter_var('1', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // true var_dump(filter_var('0', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false var_dump(filter_var('', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false var_dump(filter_var(' ', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false var_dump(filter_var('true', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // true var_dump(filter_var('false', FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false var_dump(filter_var([], FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // NULL var_dump(filter_var(null, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE)); // false
Section 46.2: Validating A Number Is A Float
Validates value as float, and converts to float on success.
var_dump(filter_var(1, FILTER_VALIDATE_FLOAT)); var_dump(filter_var(1.0, FILTER_VALIDATE_FLOAT)); var_dump(filter_var(1.0000, FILTER_VALIDATE_FLOAT)); var_dump(filter_var(1.00001, FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1.0', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1.0000', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1.00001', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1,000', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1,000.0', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1,000.0000', FILTER_VALIDATE_FLOAT)); var_dump(filter_var('1,000.00001', FILTER_VALIDATE_FLOAT));
var_dump(filter_var(1, FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var(1.0, FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var(1.0000, FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var(1.00001, FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.0', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.0000', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.00001', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000.0', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000.0000', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000.00001', FILTER_VALIDATE_FLOAT, FILTER_FLAG_ALLOW_THOUSAND));
Results

Section 46.3: Validate A MAC Address
Validates a value is a valid MAC address
 var_dump(filter_var('FA-F9-DD-B2-5E-0D', FILTER_VALIDATE_MAC)); var_dump(filter_var('DC-BB-17-9A-CE-81', FILTER_VALIDATE_MAC)); var_dump(filter_var('96-D5-9E-67-40-AB', FILTER_VALIDATE_MAC)); var_dump(filter_var('96-D5-9E-67-40', FILTER_VALIDATE_MAC)); var_dump(filter_var('', FILTER_VALIDATE_MAC)); Results:

Section 46.4: Sanitze Email Addresses
Remove all characters except letters, digits and !#$%&'*+-=?^_`{|}~@.[].
var_dump(filter_var('john@example.com', FILTER_SANITIZE_EMAIL)); var_dump(filter_var("!#$%&'*+-=?^_`{|}~.[]@example.com", FILTER_SANITIZE_EMAIL)); var_dump(filter_var('john/@example.com', FILTER_SANITIZE_EMAIL)); var_dump(filter_var('john\@example.com', FILTER_SANITIZE_EMAIL)); var_dump(filter_var('joh n@example.com', FILTER_SANITIZE_EMAIL)); Results:

Section 46.5: Sanitize Integers
Remove all characters except digits, plus and minus sign.
var_dump(filter_var(1, FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var(-1, FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var(+1, FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var(1.00, FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var(+1.00, FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var(-1.00, FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('1', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('-1', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('+1', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('1.00', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('+1.00', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('-1.00', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('1 unicorn', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('-1 unicorn', FILTER_SANITIZE_NUMBER_INT)); var_dump(filter_var('+1 unicorn', FILTER_SANITIZE_NUMBER_INT));
 var_dump(filter_var("!#$%&'*+-=?^_`{|}~@.[]0123456789abcdefghijklmnopqrstuvwxyz", FILTER_SANITIZE_NUMBER_INT)); Results:

Section 46.6: Sanitize URLs
Sanitze URLs
Remove all characters except letters, digits and $-_.+!*'(),{}|\^~[]`<>#%";/?:@&=
var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=y', FILTER_SANITIZE_URL)); var_dump(filter_var("http://www.example.com/path/to/dir/index.php?test=y!#$%&'*+-=?^_`{|}~.[]", FILTER_SANITIZE_URL));
 var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=a b c', FILTER_SANITIZE_URL)); Results:
string(51) "http://www.example.com/path/to/dir/index.php?test=y" string(72) "http://www.example.com/path/to/dir/index.php?test=y!#$%&'*+-=?^_`{|}~.[]" string(53) "http://www.example.com/path/to/dir/index.php?test=abc"
Section 46.7: Validate Email Address
filter_varWhen filtering an email address () will return the filtered data, in this case the email address, or false if a valid email address cannot be found:
 var_dump(filter_var('john@example.com', FILTER_VALIDATE_EMAIL)); var_dump(filter_var('notValidEmail', FILTER_VALIDATE_EMAIL)); Results:

xn--This function doesn't validate not-latin characters. Internationalized domain name can be validated in their form.
Note that you cannot know if the email address is correct before sending an email to it. You may want to do some extra checks such as checking for a MX record, but this is not necessary. If you send a confirmation email, don't forget to remove unused accounts after a short period.
Section 46.8: Validating A Value Is An Integer
filter_varWhen filtering a value that should be an integer () will return the filtered data, in this case the integer, or false if the value is not an integer. Floats are not integers:
var_dump(filter_var('10', FILTER_VALIDATE_INT)); var_dump(filter_var('a10', FILTER_VALIDATE_INT)); var_dump(filter_var('10a', FILTER_VALIDATE_INT)); var_dump(filter_var(' ', FILTER_VALIDATE_INT)); var_dump(filter_var('10.00', FILTER_VALIDATE_INT)); var_dump(filter_var('10,000', FILTER_VALIDATE_INT)); var_dump(filter_var('-5', FILTER_VALIDATE_INT)); var_dump(filter_var('+7', FILTER_VALIDATE_INT));
Results:


If you are expecting only digits, you can use a regular expression:

If you convert this value into an integer, you don't have to do this check and so you can use filter_var.
Section 46.9: Validating An Integer Falls In A Range
When validating that an integer falls in a range the check includes the minimum and maximum bounds:

Results:

Section 46.10: Validate a URL
filter_varWhen filtering a URL () will return the filtered data, in this case the URL, or false if a valid URL cannot be found:
example.comURL: 
 var_dump(filter_var('example.com', FILTER_VALIDATE_URL)); var_dump(filter_var('example.com', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)); var_dump(filter_var('example.com', FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)); var_dump(filter_var('example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED)); var_dump(filter_var('example.com', FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)); Results:

http://example.comURL: 
 var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL)); var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)); var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)); var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED)); var_dump(filter_var('http://example.com', FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)); Results:

http://www.example.comURL: 
 var_dump(filter_var('http://www.example.com', FILTER_VALIDATE_URL)); var_dump(filter_var('http://www.example.com', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)); var_dump(filter_var('http://www.example.com', FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED)); var_dump(filter_var('http://www.example.com', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED)); var_dump(filter_var('http://www.example.com', FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)); Results:

http://www.example.com/path/to/dir/URL: 
var_dump(filter_var('http://www.example.com/path/to/dir/', FILTER_VALIDATE_URL)); var_dump(filter_var('http://www.example.com/path/to/dir/', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED));
var_dump(filter_var('http://www.example.com/path/to/dir/', FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED));
var_dump(filter_var('http://www.example.com/path/to/dir/', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));
 var_dump(filter_var('http://www.example.com/path/to/dir/', FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)); Results:

http://www.example.com/path/to/dir/index.phpURL: 
var_dump(filter_var('http://www.example.com/path/to/dir/index.php', FILTER_VALIDATE_URL)); var_dump(filter_var('http://www.example.com/path/to/dir/index.php', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED)); var_dump(filter_var('http://www.example.com/path/to/dir/index.php', FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED));
var_dump(filter_var('http://www.example.com/path/to/dir/index.php', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));
 var_dump(filter_var('http://www.example.com/path/to/dir/index.php', FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)); Results:
http://www.example.com/path/to/dir/index.php?test=y string(44) "http://www.example.com/path/to/dir/index.php" string(44) "http://www.example.com/path/to/dir/index.php" string(44) "http://www.example.com/path/to/dir/index.php" string(44) "http://www.example.com/path/to/dir/index.php" bool(false) URL: 
var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=y', FILTER_VALIDATE_URL)); var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=y', FILTER_VALIDATE_URL, FILTER_FLAG_SCHEME_REQUIRED));
var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=y', FILTER_VALIDATE_URL, FILTER_FLAG_HOST_REQUIRED));
var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=y', FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED));
 var_dump(filter_var('http://www.example.com/path/to/dir/index.php?test=y', FILTER_VALIDATE_URL, FILTER_FLAG_QUERY_REQUIRED)); Results:
string(51) "http://www.example.com/path/to/dir/index.php?test=y" string(51) "http://www.example.com/path/to/dir/index.php?test=y" string(51) "http://www.example.com/path/to/dir/index.php?test=y" string(51) "http://www.example.com/path/to/dir/index.php?test=y" string(51) "http://www.example.com/path/to/dir/index.php?test=y"
Warning: You must check the protocol to protect you against an XSS attack:
var_dump(filter_var('javascript://comment%0Aalert(1)', FILTER_VALIDATE_URL));
// string(31) "javascript://comment%0Aalert(1)"
Section 46.11: Sanitize Floats
Remove all characters except digits, +- and optionally .,eE.
var_dump(filter_var(1, FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var(1.0, FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var(1.0000, FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var(1.00001, FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1.0', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1.0000', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1.00001', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1,000', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1,000.0', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1,000.0000', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1,000.00001', FILTER_SANITIZE_NUMBER_FLOAT)); var_dump(filter_var('1.8281e-009', FILTER_SANITIZE_NUMBER_FLOAT));
Results:

With the FILTER_FLAG_ALLOW_THOUSAND option:
 var_dump(filter_var(1, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var(1.0, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var(1.0000, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var(1.00001, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.0', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.0000', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.00001', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000.0', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000.0000', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1,000.00001', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); var_dump(filter_var('1.8281e-009', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_THOUSAND)); Results:

With the FILTER_FLAG_ALLOW_SCIENTIFIC option:
var_dump(filter_var(1, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var(1.0, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var(1.0000, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var(1.00001, FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1.0', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1.0000', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1.00001', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1,000', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1,000.0', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1,000.0000', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1,000.00001', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); var_dump(filter_var('1.8281e-009', FILTER_SANITIZE_NUMBER_FLOAT, FILTER_FLAG_ALLOW_SCIENTIFIC)); Results:

Section 46.12: Validate IP Addresses
Validates a value is a valid IP address
 var_dump(filter_var('185.158.24.24', FILTER_VALIDATE_IP)); var_dump(filter_var('2001:0db8:0a0b:12f0:0000:0000:0000:0001', FILTER_VALIDATE_IP)); var_dump(filter_var('192.168.0.1', FILTER_VALIDATE_IP)); var_dump(filter_var('127.0.0.1', FILTER_VALIDATE_IP)); Results:

Validate an valid IPv4 IP address:
 var_dump(filter_var('185.158.24.24', FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)); var_dump(filter_var('2001:0db8:0a0b:12f0:0000:0000:0000:0001', FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)); var_dump(filter_var('192.168.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)); var_dump(filter_var('127.0.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)); Results:

Validate an valid IPv6 IP address:
var_dump(filter_var('185.158.24.24', FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)); var_dump(filter_var('2001:0db8:0a0b:12f0:0000:0000:0000:0001', FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)); var_dump(filter_var('192.168.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)); var_dump(filter_var('127.0.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_IPV6));
Results:

Validate an IP address is not in a private range:
 var_dump(filter_var('185.158.24.24', FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE)); var_dump(filter_var('2001:0db8:0a0b:12f0:0000:0000:0000:0001', FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE)); var_dump(filter_var('192.168.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE)); var_dump(filter_var('127.0.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE));    Results:

Validate an IP address is not in a reserved range:
 var_dump(filter_var('185.158.24.24', FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE)); var_dump(filter_var('2001:0db8:0a0b:12f0:0000:0000:0000:0001', FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE)); var_dump(filter_var('192.168.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE)); var_dump(filter_var('127.0.0.1', FILTER_VALIDATE_IP, FILTER_FLAG_NO_RES_RANGE));    Results:

Section 46.13: Sanitize filters
we can use filters to sanitize our variable according to our need.
Example

above will remove the html tags from $string variable.
Chapter 47: Generators
Section 47.1: The Yield Keyword
A yield statement is similar to a return statement, except that instead of stopping execution of the function and returning, yield instead returns a Generator object and pauses execution of the generator function.
Here is an example of the range function, written as a generator:

You can see that this function returns a Generator object by inspecting the output of var_dump:

Yielding Values
The Generator object can then be iterated over like an array.

The above example will output:

Yielding Values with Keys
In addition to yielding values, you can also yield key/value pairs.

The above example will output:

Section 47.2: Reading a large file with a generator
One common use case for generators is reading a file from disk and iterating over its contents. Below is a class that allows you to iterate over a CSV file. The memory usage for this script is very predictable, and will not fluctuate depending on the size of the CSV file.

Section 47.3: Why use a generator?
Generators are useful when you need to generate a large collection to later iterate over. They're a simpler alternative to creating a class that implements an Iterator, which is often overkill.
For example, consider the below function.

All this function does is generates an array that's filled with random numbers. To use it, we might do
randomNumbers(10), which will give us an array of 10 random numbers. What if we want to generate one million
randomNumbers(1000000random numbers? ) will do that for us, but at a cost of memory. One million integers stored in an array uses approximately 33 megabytes of memory.

This is due to the entire one million random numbers being generated and returned at once, rather than one at a time. Generators are an easy way to solve this issue.
Section 47.4: Using the send()-function to pass values to a generator
sendGenerators are fast coded and in many cases a slim alternative to heavy iterator-implementations. With the fast implementation comes a little lack of control when a generator should stop generating or if it should generate something else. However this can be achieved with the usage of the () function, enabling the requesting function to send parameters to the generator after every loop.

Resulting in this Output:


Chapter 48: UTF-8
Section 48.1: Input
 You should verify every received string as being valid UTF-8 before you try to store it or use it anywhere.
mb_check_encodingPHP's () does the trick, but you have to use it consistently. There's really no way around this, as malicious clients can submit data in whatever encoding they want.

accept-charset attribute to all of your <formin UTF-8. The only reliable way to do this is to add the > tags like so:

Section 48.2: Output
php.ini, or manually issue the Content-Type If your application transmits text to other systems, they will also need to be informed of the character encoding. In PHP, you can use the default_charset option in 
MIME header yourself. This is the preferred method when targeting modern browsers.

HTML metadata.

Section 48.3: Data Storage and Access
This topic specifically talks about UTF-8 and considerations for using it with a database. If you want more information about using databases in PHP then checkout this topic.
Storing Data in a MySQL Database:
 Specify the utf8mb4 character set on all tables and text columns in your database. This makes MySQL physically store and retrieve values encoded natively in UTF-8.
utf8mb4_MySQL will implicitly use utf8mb4 encoding if a * collation is specified (without any explicit character set).
Older versions of MySQL (< 5.5.3) do not support utf8mb4 so you'll be forced to use utf8, which only supports a subset of Unicode characters.
Accessing Data in a MySQL Database:
 In your application code (e.g. PHP), in whatever DB access method you use, you'll need to set the connection charset to utf8mb4. This way, MySQL does no conversion from its native UTF-8 when it hands data off to your application and vice versa.
 Some drivers provide their own mechanism for configuring the connection character set, which both updates its own internal state and informs MySQL of the encoding to be used on the connection. This is usually the preferred approach.
For Example (The same consideration regarding utf8mb4/utf8 applies as above):
If you're using the PDO abstraction layer with PHP ≥ 5.3.6, you can specify charset in the DSN:
set_charset $handle = new PDO('mysql:charset=utf8mb4'); If you're using mysqli, you can call ():
$conn = mysqli_connect('localhost', 'my_user', 'my_password', 'my_db');
$conn->set_charset('utf8mb4');        // object oriented style mysqli_set_charset($conn, 'utf8mb4'); // procedural style
If you're stuck with plain mysql but happen to be running PHP ≥ 5.2.3, you can call mysql_set_charset.
$conn = mysql_connect('localhost', 'my_user', 'my_password');
$conn->set_charset('utf8mb4');       // object oriented style mysql_set_charset($conn, 'utf8mb4'); // procedural style
SET NAMES 'utf8mb4'If the database driver does not provide its own mechanism for setting the connection character set, you may have to issue a query to tell MySQL how your application expects data on the connection to be encoded: .
Chapter 49: Unicode Support in PHP
Section 49.1: Converting Unicode characters to "\uxxxx" format using PHP
You can use the following code for going back and forward.

How to use:

Output:

Section 49.2: Converting Unicode characters to their numeric value and/or HTML entities using PHP
You can use the following code for going back and forward.


How to use :

Output :


Section 49.3: Intl extention for Unicode support
Native string functions are mapped to single byte functions, they do not work well with Unicode. The extentions iconv and mbstring offer some support for Unicode, while the Intl-extention offers full support. Intl is a wrapper for the facto de standard ICU library, see http://site.icu-project.org for detailed information that is not available on http://php.net/manual/en/book.intl.php . If you can not install the extention, have a look at an alternative implementation of Intl from the Symfony framework.
ICU offers full Internationalization of which Unicode is only a smaller part. You can do transcoding easily:
\UConverter::transcode($sString, 'UTF-8', 'UTF-8');  // strip bad bytes against attacks
But, do not dismiss iconv just yet, consider:

Chapter 50: URLs
Section 50.1: Parsing a URL
parse_urlTo separate a URL into its individual components, use ():

After executing the above, the contents of $parts would be:

You can also selectively return just one component of the url. To return just the querystring:

Any of the following constants are accepted: PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY and PHP_URL_FRAGMENT.
parse_strTo further parse a query string into key value pairs use ():

After execution of the above, the $params array would be populated with the following:

Section 50.2: Build an URL-encoded query string from an array
http_build_queryThe () will create a query string from an array or object. These strings can be appended to a URL to create a GET request, or used in a POST request with, for example, cURL.

$queryString will have the following value:



which is the URL-encoded version of

Section 50.3: Redirecting to another URL
headerYou can use the () function to instruct the browser to redirect to a different URL:

You can also redirect to a relative URL (this is not part of the official HTTP specification, but it does work in all browsers):

If headers have been sent, you can alternatively send a meta refresh HTML tag.
WARNING: The meta refresh tag relies on HTML being properly processed by the client, and some will not do this. In general, it only works in web browsers. Also, consider that if headers have been sent, you may have a bug and this should trigger an exception.
You may also print a link for users to click, for clients that ignore the meta refresh tag:

  $saveUrl = htmlspecialchars($url); // protects from browser seeing url as HTML
  // tells browser to redirect page to $saveUrl after 0 seconds
  print '<meta http-equiv="refresh" content="0; url=' . $saveUrl . '">';
  // shows link for user   print '<p>Please continue to <a href="' . $saveUrl . '">' . $saveUrl . '</a></p>';
} exit;

Chapter 51: How to break down an URL
As you code PHP you will most likely get your self in a position where you need to break down an URL into several pieces. There's obviously more than one way of doing it depending on your needs. This article will explain those ways for you so you can find what works best for you.
Section 51.1: Using parse_url()

If you need the path separated you can use explode

If you need the last part of the section you can use end() like this:

If the URL contains GET vars you can retrieve those as well


If you wish to break down the query vars you can use parse_str() like this:

Section 51.2: Using explode()
explode(): Returns an array of strings, each of which is a substring of string formed by splitting it on boundaries formed by the string delimiter.
This function is pretty much straight forward.

You can retrieve the last part of the URL by doing this:

You can also navigate inside the array by using sizeof() in combination with a math operator like this:

Section 51.3: Using basename()
basename(): Given a string containing the path to a file or directory, this function will return the trailing name component.
This function will return only the last part of an URL


If your URL has more stuff to it and what you need is the dir name containing the file you can use it with dirname() like this:


Chapter 52: Object Serialization
Section 52.1: Serialize / Unserialize
serialize() returns a string containing a byte-stream representation of any value that can be stored in PHP.
unserialize() can use this string to recreate the original variable values.
To serialize an object

To Unserialize an object

Example

Section 52.2: The Serializable interface
Introduction
__sleep() and __wakeup__destructunserialize__constructClasses that implement this interface no longer support (). The method serialize is called whenever an instance needs to be serialized. This does not invoke () or has any other side effect unless programmed inside the method. When the data is unserialized the class is known and the appropriate () method is called as a constructor instead of calling
(). If you need to execute the standard constructor you may do so in the method.
Basic usage



Chapter 53: Serialization
Parameter	Details
           The value to be serialized. serialize() handles all types, except the resource-type. You can even serialize() arrays that contain references to itself. Circular references inside the array/object you are serializing will also be stored. Any other reference will be lost. When serializing objects, PHP will attempt to call the member function __sleep() prior to serialization. This is to allow the object to do any value last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the __wakeup() member function is called. Object's private members have the class name prepended to the member name; protected members have a '*' prepended to the member name. These prepended values have null bytes on either side.
Section 53.1: Serialization of dierent types
Generates a storable representation of a value.
This is useful for storing or passing PHP values around without losing their type and structure.
To make the serialized string into a PHP value again, use unserialize(). echo serialize($double);
Serializing a float




You can also serialize Objects.
When serializing objects, PHP will attempt to call the member function __sleep() prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the __wakeup() member function is called.

Note that Closures cannot be serialized:

Section 53.2: Security Issues with unserialize
Using unserialize function to unserialize data from user input can be dangerous.
A Warning from php.net
Warning Do not pass untrusted user input to unserialize(). Unserialization can result in code being loaded and executed due to object instantiation and autoloading, and a malicious user may be able to exploit this. Use a safe, standard data interchange format such as JSON (via json_decode() and json_encode()) if you need to pass serialized data to the user.
Possible Attacks
 PHP Object Injection
PHP Object Injection
PHP Object Injection is an application level vulnerability that could allow an attacker to perform different kinds of malicious attacks, such as Code Injection, SQL Injection, Path Traversal and Application Denial of Service, depending on the context. The vulnerability occurs when user-supplied input is not properly sanitized before being passed to the unserialize() PHP function. Since PHP allows object serialization, attackers could pass ad-hoc serialized strings to a vulnerable unserialize() call, resulting in an arbitrary PHP object(s) injection into the application scope.
In order to successfully exploit a PHP Object Injection vulnerability two conditions must be met:
unserializeThe application must have a class which implements a PHP magic method (such as __wakeup or __destruct) that can be used to carry out malicious attacks, or to start a "POP chain".
All of the classes used during the attack must be declared when the vulnerable () is being called, otherwise object autoloading must be supported for such classes.
Example 1 - Path Traversal Attack
The example below shows a PHP class with an exploitable __destruct method:

In this example an attacker might be able to delete an arbitrary file via a Path Traversal attack, for e.g. requesting the following URL:
http://testsite.com/vuln.php?data=O:8:"Example1":1:{s:10:"cache_file";s:15:"../../index.php";}
Example 2 - Code Injection attack
The example below shows a PHP class with an exploitable __wakeup method:

In this example an attacker might be able to perform a Code Injection attack by sending an HTTP request like this:

Where the cookie parameter "data" has been generated by the following script:

Chapter 54: Closure
Section 54.1: Basic usage of a closure
A closure is the PHP equivalent of an anonymous function, eg. a function that does not have a name. Even if that is technically not correct, the behavior of a closure remains the same as a function's, with a few extra features.
A closure is nothing but an object of the Closure class which is created by declaring a function without a name. For example:

Keep in mind that $myClosure is an instance of Closure so that you are aware of what you can truly do with it (cf.
http://fr2.php.net/manual/en/class.closure.php )
The classic case you would need a Closure is when you have to give a callable to a function, for instance usort.
Here is an example where an array is sorted by the number of siblings of each person:

Section 54.2: Using external variables
It is possible, inside a closure, to use an external variable with the special keyword use. For instance:


You can go further by creating "dynamic" closures. It is possible to create a function that returns a specific calculator, depending on the quantity you want to add. For example:

Section 54.3: Basic closure binding
As seen previously, a closure is nothing but an instance of the Closure class, and different methods can be invoked on them. One of them is bindTo, which, given a closure, will return a new one that is bound to a given object. For example:

Section 54.4: Closure binding and scope
Let's consider this example:


Try to change the property visibility to either protected or private. You get a fatal error indicating that you do not have access to this property. Indeed, even if the closure has been bound to the object, the scope in which the closure is invoked is not the one needed to have that access. That is what the second argument of bindTo is for.
The only way for a property to be accessed if it's private is that it is accessed from a scope that allows it, ie. the class's scope. In the just previous code example, the scope has not been specified, which means that the closure has been invoked in the same scope as the one used where the closure has been created. Let's change that:

As just said, if this second parameter is not used, the closure is invoked in the same context as the one used where the closure has been created. For example, a closure created inside a method's class which is invoked in an object context will have the same scope as the method's:


Section 54.5: Binding a closure for one call
Since PHP7, it is possible to bind a closure just for one call, thanks to the call method. For instance:

As opposed to the bindTo method, there is no scope to worry about. The scope used for this call is the same as the one used when accessing or invoking a property of $myInstance.
Section 54.6: Use closures to implement observer pattern
In general, an observer is a class with a specific method being called when an action on the observed object occurs. In certain situations, closures can be enough to implement the observer design pattern.
Here is a detailed example of such an implementation. Let's first declare a class whose purpose is to notify observers when its property is changed.


Then, let's declare the class that will represent the different observers.

Let's finally test this:


Note that this example works because the observers share the same nature (they are both "named observers.")

Chapter 55: Reading Request Data
Section 55.1: Reading raw POST data
application/x-www-formUsually data sent in a POST request is structured key/value pairs with a MIME type of -
urlencoded. However many applications such as web services require raw data, often in XML or JSON format, to be sent instead. This data can be read using one of two methods.
php://input is a stream that provides access to the raw request body.

Version < 5.6
php.ini$HTTP_RAW_POST_DATA is a global variable that contains the raw POST data. It is only available if the always_populate_raw_post_data directive in  is enabled.

This variable has been deprecated since PHP version 5.6, and was removed in PHP 7.0.
multipart/form-dataNote that neither of these methods are available when the content type is set to , which is used for file uploads.
Section 55.2: Reading POST data
Data from a POST request is stored in the superglobal $_POST in the form of an associative array.
isset() or emptyNote that accessing a non-existent array item generates a notice, so existence should always be checked with the () functions, or the null coalesce operator.
Example:

Version ≥ 7.0

Section 55.3: Reading GET data
Data from a GET request is stored in the superglobal $_GET in the form of an associative array.
isset() or emptyNote that accessing a non-existent array item generates a notice, so existence should always be checked with the () functions, or the null coalesce operator.
topics.php?author=alice&topic=phpExample: (for URL /)

Version ≥ 7.0

Section 55.4: Handling file upload errors
$_FILES["FILE_NAME"]['error'The ] (where "FILE_NAME" is the value of the name attribute of the file input, present in your form) might contain one of the following values:
1. UPLOAD_ERR_OK - There is no error, the file uploaded with success.
php.ini2. UPLOAD_ERR_INI_SIZE - The uploaded file exceeds the upload_max_filesize directive in .
3. UPLOAD_ERR_PARTIAL - The uploaded file exceeds the MAX_FILE_SIZE directive that was specified in the HTML form.
4. UPLOAD_ERR_NO_FILE - No file was uploaded.
5. UPLOAD_ERR_NO_TMP_DIR - Missing a temporary folder. (From PHP 5.0.3).
6. UPLOAD_ERR_CANT_WRITE - Failed to write file to disk. (From PHP 5.1.0).
7. UPLOAD_ERR_EXTENSION - A PHP extension stopped the file upload. (From PHP 5.2.0).
An basic way to check for the errors, is as follows:

Section 55.5: Passing arrays by POST
Usually, an HTML form element submitted to PHP results in a single value. For example:


This results in the following output:

However, there may be cases where you want to pass an array of values. This can be done by adding a PHP-like suffix to the name of the HTML elements:

This results in the following output:

You can also specify the array indices, as either numbers or strings:

Which returns this output:

This technique can be used to avoid post-processing loops over the $_POST array, making your code leaner and more concise.
Section 55.6: Uploading files with HTTP PUT
PHP provides support for the HTTP PUT method used by some clients to store files on a server. PUT requests are much simpler than a file upload using POST requests and they look something like this:

Into your PHP code you would then do something like this:

Also here you can read interesting SO question/answers about receiving file via HTTP PUT.
Chapter 56: Type juggling and Non-Strict Comparison Issues
Section 56.1: What is Type Juggling?
PHP is a loosely typed language. This means that, by default, it doesn't require operands in an expression to be of the same (or compatible) types. For example, you can append a number to a string and expect it to work.

The output will be:
		string(24) "This is example number 1"
PHP accomplishes this by automatically casting incompatible variable types into types that allow the requested operation to take place. In the case above, it will cast the integer literal 1 into a string, meaning that it can be concatenated onto the preceding string literal. This is referred to as type juggling. This is a very powerful feature of PHP, but it is also a feature that can lead you to a lot of hair-pulling if you are not aware of it, and can even lead to security problems.
Consider the following:

The intent appears to be that the programmer is checking that a variable has a value of 1. But what happens if $variable has a value of "1 and a half" instead? The answer might surprise you.

The result is:
		bool(true)
Why has this happened? It's because PHP realised that the string "1 and a half" isn't an integer, but it needs to be in order to compare it to integer 1. Instead of failing, PHP initiates type juggling and, attempts to convert the variable into an integer. It does this by taking all the characters at the start of the string that can be cast to integer and casting them. It stops as soon as it encounters a character that can't be treated as a number. Therefore "1 and a half" gets cast to integer 1.
Granted, this is a very contrived example, but it serves to demonstrate the issue. The next few examples will cover some cases where I've run into errors caused by type juggling that happened in real software.
Section 56.2: Reading from a file
When reading from a file, we want to be able to know when we've reached the end of that file. Knowing that
fgets() returns false at the end of the file, we might use this as the condition for a loop. However, if the data
returned from the last read happens to be something that evaluates as boolean false, it can cause our file read loop to terminate prematurely.

If the file being read contains a blank line, the while loop will be terminated at that point, because the empty string evaluates as boolean false.
Instead, we can check for the boolean false value explicitly, using strict equality operators:

Note this is a contrived example; in real life we would use the following loop:

Or replace the whole thing with:

Section 56.3: Switch surprises
Switch statements use non-strict comparison to determine matches. This can lead to some nasty surprises. For example, consider the following statement:

This is a very simple statement, and works as expected when $name is a string, but can cause problems otherwise.
For example, if $name is integer 0, then type-juggling will happen during the comparison. However, it's the literal value in the case statement that gets juggled, not the condition in the switch statement. The string "input 1" is converted to integer 0 which matches the input value of integer 0. The upshot of this is if you provide a value of integer 0, the first case always executes.
There are a few solutions to this problem:
Explicit casting
The value can be typecast to a string before comparison:

Or a function known to return a string can also be used:

Both of these methods ensure the value is of the same type as the value in the case statements.
Avoid switch
Using an if statement will provide us with control over how the comparison is done, allowing us to use strict comparison operators:

Section 56.4: Strict typing
Since PHP 7.0, some of the harmful effects of type juggling can be mitigated with strict typing. By including this declare statement as the first line of the file, PHP will enforce parameter type declarations and return type declarations by throwing a TypeError exception.

For example, this code, using parameter type definitions, will throw a catchable exception of type TypeError when run:

Likewise, this code uses a return type declaration; it will also throw an exception if it tries to return anything other than an integer:


Chapter 57: Sockets
Section 57.1: TCP client socket
Creating a socket that uses the TCP (Transmission Control Protocol)
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
Make sure the socket is successfully created. The onSocketFailure function comes from Handling socket errors example in this topic. if(!is_resource($socket)) onSocketFailure("Failed to create socket"); Connect the socket to a specified address
The second line fails gracefully if connection failed.
socket_connect($socket, "chat.stackoverflow.com", 6667)
        or onSocketFailure("Failed to connect to chat.stackoverflow.com:6667", $socket);
Sending data to the server
The socket_write function sends bytes through a socket. In PHP, a byte array is represented by a string, which is normally encoding-insensitive.

Receiving data from the server
The following snippet receives some data from the server using the socket_read function.
Passing PHP_NORMAL_READ as the third parameter reads until a \r/\n byte, and this byte is included in the return value.
Passing PHP_BINARY_READ, on the contrary, reads the required amount of data from the stream.
If socket_set_nonblock was called in prior, and PHP_BINARY_READ is used, socket_read will return false immediately. Otherwise, the method blocks until enough data (to reach the length in the second parameter, or to reach a line ending) are received, or the socket is closed.
This example reads data from a supposedly IRC server.

Closing the socket
Closing the socket frees the socket and its associated resources.

Section 57.2: TCP server socket
Socket creation
Create a socket that uses the TCP. It is the same as creating a client socket.

Socket binding
Bind connections from a given network (parameter 2) for a specific port (parameter 3) to the socket.
The second parameter is usually "0.0.0.0", which accepts connection from all networks. It can also
One common cause of errors from socket_bind is that the address specified is already bound to another process. Other processes are usually killed (usually manually to prevent accidentally killing critical processes) so that the sockets would be freed. socket_bind($socket, "0.0.0.0", 6667) or onSocketFailure("Failed to bind to 0.0.0.0:6667");
Set a socket to listening
Make the socket listen to incoming connections using socket_listen. The second parameter is the maximum number of connections to allow queuing before they are accepted. socket_listen($socket, 5); Handling connection
A TCP server is actually a server that handles child connections. socket_accept creates a new child connection.

Data transferring for a connection from socket_accept is the same as that for a TCP client socket.
socket_close($connWhen this connection should be closed, call ); directly. This will not affect the original TCP server socket.
Closing the server
socket_close($socketOn the other hand, ); should be called when the server is no longer used. This will free the TCP address as well, allowing other processes to bind to the address.
Section 57.3: UDP server socket
A UDP (user datagram protocol) server, unlike TCP, is not stream-based. It is packet-based, i.e. a client sends data in units called "packets" to the server, and the client identifies clients by their address. There is no builtin function that relates different packets sent from the same client (unlike TCP, where data from the same client are handled by a specific resource created by socket_accept). It can be thought as a new TCP connection is accepted and closed every time a UDP packet arrives.
Creating a UDP server socket

Binding a socket to an address
The parameters are same as that for a TCP server.
$socket);
Sending a packet
This line sends $data in a UDP packet to $address:$port.

Receiving a packet
The following snippet attempts to manage UDP packets in a client-indexed manner.

Closing the server
socket_close can be used on the UDP server socket resource. This will free the UDP address, allowing other processes to bind to this address.
Section 57.4: Handling socket errors
socket_last_error can be used to get the error ID of the last error from the sockets extension. socket_strerror can be used to convert the ID to human-readable strings.

Chapter 58: PDO
The PDO (PHP Data Objects) extension allows developers to connect to numerous different types of databases and execute queries against them in a uniform, object oriented manner.
Section 58.1: Preventing SQL injection with Parameterized Queries
SQL injection is a kind of attack that allows a malicious user to modify the SQL query, adding unwanted commands to it. For example, the following code is vulnerable:

This allows any user of this script to modify our database basically at will. For example consider the following query string:

This makes our example query look like this
SELECT name, email, user_level FROM users WHERE userID = 0; TRUNCATE TABLE users;
While this is an extreme example (most SQL injection attacks do not aim to delete data, nor do most PHP query execution functions support multi-query), this is an example of how a SQL injection attack can be made possible by the careless assembly of the query. Unfortunately, attacks like this are very common, and are highly effective due to coders who fail to take proper precautions to protect their data.
To prevent SQL injection from occurring, prepared statements are the recommended solution. Instead of concatenating user data directly to the query, a placeholder is used instead. The data is then sent separately, which means there is no chance of the SQL engine confusing user data for a set of instructions.
While the topic here is PDO, please note that the PHP MySQLi extension also supports prepared statements
PDO supports two kinds of placeholders (placeholders cannot be used for column or table names, only values):
user1. Named placeholders. A colon(:), followed by a distinct name (eg. :)
// using named placeholders
$sql = 'SELECT name, email, user_level FROM users WHERE userID = :user';
$prep = $conn->prepare($sql);
$prep->execute(['user' => $_GET['user']]); // associative array $result = $prep->fetchAll();
2. Traditional SQL positional placeholders, represented as ?:
// using question-mark placeholders
$sql = 'SELECT name, user_level FROM users WHERE userID = ? AND user_level = ?';
$prep = $conn->prepare($sql);
$prep->execute([$_GET['user'], $_GET['user_level']]); // indexed array

If ever you need to dynamically change table or column names, know that this is at your own security risks and a bad practice. Though, it can be done by string concatenation. One way to improve security of such queries is to set a table of allowed values and compare the value you want to concatenate to this table.
Be aware that it is important to set connection charset through DSN only, otherwise your application could be prone to an obscure vulnerability if some odd encoding is used. For PDO versions prior to 5.3.6 setting charset
PDO::ATTR_EMULATE_PREPARESthrough DSN is not available and thus the only option is to set  attribute to false on the connection right after it's created.

This causes PDO to use the underlying DBMS's native prepared statements instead of just emulating it.
However, be aware that PDO will silently fallback to emulating statements that MySQL cannot prepare natively: those that it can are listed in the manual (source).
Section 58.2: Basic PDO Connection and Retrieval
Since PHP 5.0, PDO has been available as a database access layer. It is database agnostic, and so the following connection example code should work for any of its supported databases simply by changing the DSN.

The prepare function creates a PDOStatement object from the query string. The execution of the query and retrieval of the results are performed on this returned object. In case of a failure, the function either returns false or throws an exception (depending upon how the PDO connection was configured).
Section 58.3: Database Transactions with PDO
Database transactions ensure that a set of data changes will only be made permanent if every statement is successful. Any query or code failure during a transaction can be caught and you then have the option to roll back the attempted changes.
PDO provides simple methods for beginning, committing, and rollbacking back transactions.

During a transaction any data changes made are only visible to the active connection. SELECT statements will return the altered changes even if they are not yet committed to the database.
Note: See database vendor documentation for details about transaction support. Some systems do not support transactions at all. Some support nested transactions while others do not.
Practical Example Using Transactions with PDO
In the following section is demonstrated a practical real world example where the use of transactions ensures the consistency of database.
Imagine the following scenario, let's say you are building a shopping cart for an e-commerce website and you decided to keep the orders in two database tables. One named orders with the fields order_id, name, address, telephone and created_at. And a second one named orders_products with the fields order_id, product_id and quantity. The first table contains the metadata of the order while the second one the actual products that have been ordered.
Inserting a new order to the database
To insert a new order into the database you need to do two things. First you need to INSERT a new record inside the orders table that will contain the metadata of the order (name, address, etc). And then you need to INSERT one record into the orders_products table, for each one of the products that are included in the order.
You could do this by doing something similar to the following:

This will work great for inserting a new order into the database, until something unexpected happens and for some reason the second INSERT query fails. If that happens you will end up with a new order inside the orders table, which will have no products associated to it. Fortunately, the fix is very simple, all you have to do is to make the queries in the form of a single database transaction.
Inserting a new order into the database with a transaction
To start a transaction using PDO all you have to do is to call the beginTransaction method before you execute any queries to your database. Then you make any changes you want to your data by executing INSERT and / or UPDATE queries. And finally you call the commit method of the PDO object to make the changes permanent. Until you call the commit method every change you have done to your data up to this point is not yet permanent, and can be easily reverted by simply calling the rollback method of the PDO object.
On the following example is demonstrated the use of transactions for inserting a new order into the database, while ensuring the same time the consistency of the data. If one of the two queries fails all the changes will be reverted.

Section 58.4: PDO: connecting to MySQL/MariaDB server
There are two ways to connect to a MySQL/MariaDB server, depending on your infrastructure.
Standard (TCP/IP) connection
$dsn = 'mysql:dbname=demo;host=server;port=3306;charset=utf8';
$connection = new \PDO($dsn, $username, $password);
// throw exceptions, when SQL error is caused
$connection->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
// prevent emulation of prepared statements
$connection->setAttribute(\PDO::ATTR_EMULATE_PREPARES, false);
Since PDO was designed to be compatible with older MySQL server versions (which did not have support for prepared statements), you have to explicitly disable the emulation. Otherwise, you will lose the added injection prevention benefits, that are usually granted by using prepared statements.
Another design compromise, that you have to keep in mind, is the default error handling behavior. If not otherwise configured, PDO will not show any indications of SQL errors.
It is strongly recommended setting it to "exception mode", because that gains you additional functionality, when writing persistence abstractions (for example: having an exception, when violating UNIQUE constraint).
Socket connection
$dsn = 'mysql:unix_socket=/tmp/mysql.sock;dbname=demo;charset=utf8';
$connection = new \PDO($dsn, $username, $password);
// throw exceptions, when SQL error is caused
$connection->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
// prevent emulation of prepared statements
$connection->setAttribute(\PDO::ATTR_EMULATE_PREPARES, false);
On unix-like systems, if host name is 'localhost', then the connection to the server is made through a domain socket.
Section 58.5: PDO: Get number of aected rows by a query
rowCountWe start off with $db, an instance of the PDO class. After executing a query we often want to determine the number of rows that have been affected by it. The () method of the PDOStatement will work nicely:
$query = $db->query("DELETE FROM table WHERE name = 'John'"); $count = $query->rowCount(); echo "Deleted $count rows named John";
NOTE: This method should only be used to determine the number of rows affected by INSERT, DELETE, and UPDATE statements. Although this method may work for SELECT statements as well, it is not consistent across all databases.
Section 58.6: PDO::lastInsertId()
You may often find the need to get the auto incremented ID value for a row that you have just inserted into your database table. You can achieve this with the lastInsertId() method.

$query = "INSERT INTO foo_user(pseudo, email) VALUES ('anonymous', 'anonymous@example.com')"; $query_success = $pdo->query($query);
// 3. Retrieving the last inserted id
$id = $pdo->lastInsertId(); // return value is an integer
In postgresql and oracle, there is the RETURNING Keyword, which returns the specified columns of the currently inserted / modified rows. Here example for inserting one entry:


Chapter 59: PHP MySQLi
The mysqli interface is an improvement (it means "MySQL Improvement extension") of the mysql interface, which was deprecated in version 5.5 and is removed in version 7.0. The mysqli extension, or as it is sometimes known, the MySQL improved extension, was developed to take advantage of new features found in MySQL systems versions
4.1.3 and newer. The mysqli extension is included with PHP versions 5 and later.
Section 59.1: Close connection
When we are finished querying the database, it is recommended to close the connection to free up resources.
Object oriented style

Procedural style

Note: The connection to the server will be closed as soon as the execution of the script ends, unless it's closed earlier by explicitly calling the close connection function.
Use Case: If our script has a fair amount of processing to perform after fetching the result and has retrieved the full result set, we definitely should close the connection. If we were not to, there's a chance the MySQL server will reach its connection limit when the web server is under heavy use.
Section 59.2: MySQLi connect
Object oriented style
Connect to Server

$conn->select_db("my_db"Set the default database: );
Connect to Database

Procedural style
Connect to Server

mysqli_select_db($conn, "my_db"Set the default database: );
Connect to Database
$conn = mysqli_connect("localhost","my_user","my_password","my_db");
Verify Database Connection
Object oriented style

Procedural style

Section 59.3: Loop through MySQLi results
PHP makes it easy to get data from your results and loop over it using a while statement. When it fails to get the next row, it returns false, and your loop ends. These examples work with
mysqli_fetch_assoc - Associative array with column names as keys mysqli_fetch_object - stdClass object with column names as variables mysqli_fetch_array - Associative AND Numeric array (can use arguments to get one or the other) mysqli_fetch_row - Numeric array
Object oriented style

Procedural style

To get exact information from results, we can use:

Section 59.4: Prepared statements in MySQLi
Please read Preventing SQL injection with Parametrized Queries for a complete discussion of why prepared statements help you secure your SQL statements from SQL Injection attacks
The $conn variable here is a MySQLi object. See MySQLi connect example for more details.
For both examples, we assume that $sql is

The ? represents the values we will provide later. Please note that we do not need quotes for the placeholders, regardless of the type. We can also only provide placeholders in the data portions of the query, meaning SET, VALUES and WHERE. You cannot use placeholders in the SELECT or FROM portions.
Object oriented style

Procedural style

$stmt->bind_paramThe first parameter of  or the second parameter of mysqli_stmt_bind_param is determined by the data type of the corresponding parameter in the SQL query:
Parameter Data type of the bound parameter
i	integer d	double s	string b	blob
column_2 = ?) is string and the second parameter (column_3 > ?Your list of parameters needs to be in the order provided in your query. In this example si means the first parameter () is integer.
For retrieving data, see How to get data from a prepared statement
Section 59.5: Escaping Strings
Escaping strings is an older (and less secure) method of securing data for insertion into a query. It works by using MySQL's function mysql_real_escape_string() to process and sanitize the data (in other words, PHP is not doing the escaping). The MySQLi API provides direct access to this function

At this point, you have a string that MySQL considers to be safe for use in a direct query

So why is this not as secure as prepared statements? There are ways to trick MySQL to produce a string it considers safe. Consider the following example

 OR 11=1 does not represent data that MySQL will escape, yet this still represents SQL injection. There are other examples as well that represent places where it returns unsafe data. The problem is that MySQL's escaping function is designed to make data comply with SQL syntax. It's NOT designed to make sure that MySQL can't confuse user data for SQL instructions.
Section 59.6: Debugging SQL in MySQLi
So your query has failed (see MySQLi connect for how we made $conn)
$result = $conn->query('SELECT * FROM non_existent_table'); // This query will fail
How do we find out what happened? $result is false so that's no help. Thankfully the connect $conn can tell us what MySQL told us about the failure

or procedural

You should get an error similar to
		Table 'my_db.non_existent_table' doesn't exist
Section 59.7: MySQLi query
The query function takes a valid SQL string and executes it directly against the database connection $conn Object oriented style


A common problem here is that people will simply execute the query and expect it to work (i.e. return a mysqli_stmt object). Since this function takes only a string, you're building the query first yourself. If there are any mistakes in the SQL at all, the MySQL compiler will fail, at which point this function will return false.
$result = $conn->query('SELECT * FROM non_existent_table'); // This query will fail
$row = $result->fetch_assoc();
The above code will generate a E_FATAL error because $result is false, and not an object.
		PHP Fatal error: Call to a member function fetch_assoc() on a non-object
The procedural error is similar, but not fatal, because we're just violating the expectations of the function.

You will get the following message from PHP
		mysqli_fetch_array() expects parameter 1 to be mysqli_result, boolean given
You can avoid this by doing a test first

Section 59.8: How to get data from a prepared statement
Prepared statements
See Prepared statements in MySQLi for how to prepare and execute a query.
Binding of results
Object-oriented style

Procedural style

The problem with using bind_result is that it requires the statement to specify the columns that will be used. This
SELECT forename FROM usersmeans that for the above to work the query must have looked like this . To include
more columns simply add them as parameters to the bind_result function (and ensure that you add them to the SQL query).
In both cases, we're assigning the forename column to the $forename variable. These functions take as many arguments as columns you want to assign. The assignment is only done once, since the function binds by reference.
We can then loop as follows:
Object-oriented style

Procedural style

The drawback to this is that you have to assign a lot of variables at once. This makes keeping track of large queries difficult. If you have MySQL Native Driver (mysqlnd) installed, all you need to do is use get_result. Object-oriented style

Procedural style

This is much easier to work with because now we're getting a mysqli_result object. This is the same object that mysqli_query returns. This means you can use a regular result loop to get your data.
What if I cannot install mysqlnd?
If that is the case then @Sophivorus has you covered with this amazing answer.
This function can perform the task of get_result without it being installed on the server. It simply loops through the results and builds an associative array

mysqli_fetch_assocWe can then use the function to get results like this, just as if we were using ()

It will have the same output as if you were using the mysqlnd driver, except it does not have to be installed. This is very useful if you are unable to install said driver on your system. Just implement this solution.
Section 59.9: MySQLi Insert ID
Retrieve the last ID generated by an INSERT query on a table with an AUTO_INCREMENT column.
Object-oriented Style


Insert id when updating rows
INSERT ... ONDUPLICATE KEY UPDATENormally an UPDATE statement does not return an insert id, since an AUTO_INCREMENT id is only returned when a new row has been saved (or inserted). One way of making updates to the new id is to use  syntax for updating.
Setup for examples to follow:

LAST_INSERT_IDThe case of IODKU performing an "update" and () retrieving the relevant id:

LAST_INSERT_IDThe case where IODKU performs an "insert" and () retrieves the new id:

Resulting table contents:


Chapter 60: SQLite3
Section 60.1: SQLite3 Quickstart Tutorial
This is a complete example of all the commonly used SQLite related APIs. The aim is to get you up and running really fast. You can also get a runnable PHP file of of this tutorial.
Creating/opening a database
sqliteLet's create a new database first. Create it only if the file doesn't exist and open it for reading/writing. The extension of the file is up to you, but . is pretty common and self-explanatory.
 $db = new SQLite3('analytics.sqlite', SQLITE3_OPEN_CREATE | SQLITE3_OPEN_READWRITE); Creating a table

Inserting sample data.
It's advisable to wrap related queries in a transaction (with keywords BEGIN and COMMIT), even if you don't care about atomicity. If you don't do this, SQLite automatically wraps every single query in a transaction, which slows down everything immensely. If you're new to SQLite, you may be surprised why the INSERTs are so slow .

Insert potentially unsafe data with a prepared statement. You can do this with named parameters:
$statement = $db->prepare('INSERT INTO "visits" ("user_id", "url", "time")
    VALUES (:uid, :url, :time)');
$statement->bindValue(':uid', 1337);
$statement->bindValue(':url', '/test');
$statement->bindValue(':time', date('Y-m-d H:i:s'));
$statement->execute(); you can reuse the statement with different values
Fetching data
Let's fetch today's visits of user #42. We'll use a prepared statement again, but with numbered parameters this time, which are more concise:


Free the memory - this in not done automatically, while your script is running

Shorthands
Here's a useful shorthand for fetching a single row as an associative array. The second parameter means we want all the selected columns.
Watch out, this shorthand doesn't support parameter binding, but you can escape the strings instead. Always put the values in SINGLE quotes! Double quotes are used for table and column names (similar to backticks in MySQL).

Another useful shorthand for retrieving just one value. echo "\n";
Cleaning up
Finally, close the database. This is done automatically when the script finishes, though.

Section 60.2: Querying a database

See also http://stackoverflow.com/documentation/sql/topics
Section 60.3: Retrieving only one result
In addition to using LIMIT SQL statements you can also use the SQLite3 function querySingle to retrieve a single row, or the first column.
<?php
$database = new SQLite3('mysqlitedb.db');
//Without the optional second parameter set to true, this query would return just
//the first column of the first row of results and be of the same type as columnName
$database->querySingle('SELECT column1Name FROM table WHERE column2Name=1');
//With the optional entire_row parameter, this query would return an array of the //entire first row of query results.
$database->querySingle('SELECT column1Name, column2Name FROM user WHERE column3Name=1', true); ?>

Chapter 61: Using MongoDB
Section 61.1: Connect to MongoDB
Create a MongoDB connection, that later you can query:
$manager = new \MongoDB\Driver\Manager('mongodb://localhost:27017');
In the next example, you will learn how to query the connection object.
This extension close the connection automatically, it's not necessary to close manually.
Section 61.2: Get multiple documents - find()
Example for searching multiple users with the name "Mike":

Section 61.3: Get one document - findOne()
Example for searching just one user with a specific id, you should do:

Section 61.4: Insert document
Example for adding a document:

Section 61.5: Update a document
Example for updating all documents where name is equal to "John":

Section 61.6: Delete a document
Example for deleting all documents where name is equal to "Peter":


Chapter 62: mongo-php
Section 62.1: Everything in between MongoDB and Php
Requirements
MongoDB server running on port usually 27017. (type mongod on command prompt to run mongodb server)
Php installed as either cgi or fpm with MongoDB extension installed(MongoDB extension is not bundled with default php)
php composer.phar require Composer library(mongodb/mongodb).(In the project root run 
"mongodb/mongodb=^1.0.0" to install the MongoDB library)
If everything is ok you are ready to move on.
		Check For Php installation
php if not sure check Php installation by running -v on command prompt will return something like this
PHP 7.0.6 (clibuilt: Apr 28 2016 14:12:14 ZTS ) Copyright (c) 1997-2016 The PHP Group Zend) () (
Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies		Check For MongoDB installation
mongo --version will return MongoDB shell version: 3Check MongoDB installation by running .2.6
		Check For Composer installation
php composer.phar --version will return Composer version 1.2-devCheck for Composer installation by running 
3d09c17b489cd29a0c0b3b11e731987e7097797d) 2016-08-30 16:12:39( `
Connecting to MongoDB from php


mongodb/mongodb) included as vendor/autoload.phpThe above code will connect using MongoDB composer library( to
connect to the MongoDB server running on port: 27017. If everything is ok it will connect and list an array, if exception occurs connecting to MongoDB server the message will be printed.
CREATE(Inserting) into MongoDB

$result->getInsertedIdIn the example we are using the $mongo instance previously used in the Connecting to MongoDB from php part. MongoDB uses JSON type data format, so in php we will use array to insert data into MongoDB, this conversion from array to Json and vice versa will be done by mongo library. Every document in MongoDB has a unique id named as _id,during insertion we can get this by using ();
READ(Find) in MongoDB

Drop in MongoDB

There are many methods that can be performed on $collection see Official documentation from MongoDB

Chapter 63: Using Redis with PHP
Section 63.1: Connecting to a Redis instance
Assuming a default server running on localhost with the default port, the command to connect to that Redis server would be:

Section 63.2: Installing PHP Redis on Ubuntu
To install PHP on Ubuntu, first install the Redis server:

then install the PHP module:

And restart the Apache server:

Section 63.3: Executing Redis commands in PHP
The Redis PHP module gives access to the same commands as the Redis CLI client so it is quite straightforward to use.
The syntax is as follow:

Chapter 64: Sending Email
	Parameter	Details
string $toThe recipient email address
string $subjectThe subject line
string $messageThe body of the email
string $additional_headersOptional: headers to add to the email
string $additional_parametersOptional: arguments to pass to the configured mail send application in the command line
Section 64.1: Sending Email - The basics, more details, and a full example
A typical email has three main components:
1. A recipient (represented as an email address)
2. A subject
3. A message body
mail(). mailSending mail in PHP can be as simple as calling the built-in function () takes up to five parameters but the first three are all that is required to send an email (although the four parameters is commonly used as will be demonstrated below). The first three parameters are:
1. The recipient's email address (string)
2. The email's subject (string)
3. The body of the email (string) (e.g. the content of the email)
A minimal example would resemble the following code: mail('recipient@example.com', 'Email Subject', 'This is the email message body');
mailThe simple example above works well in limited circumstances such as hardcoding an email alert for an internal system. However, it is common to place the data passed as the parameters for () in variables to make the code cleaner and easier to manage (for example, dynamically building an email from a form submission).
mailAdditionally, () accepts a fourth parameter which allows you to have additional mail headers sent with your email. These headers can allow you to set:
Reply-Tothe From name and email address the user will see the  email address the user's response will be sent to
Maileradditional non-standards headers like X- which can tell the recipient this email was sent via PHP
$to      = 'recipient@example.com';             // Could also be $to      = $_POST['recipient'];  
$subject = 'Email Subject';                     // Could also be $subject = $_POST['subject'];  $message = 'This is the email message body';    // Could also be $message = $_POST['message'];  $headers = implode("\r\n", [
    'From: John Conde <webmaster@example.com>',
    'Reply-To: webmaster@example.com',
    'X-Mailer: PHP/' . PHP_VERSION
]);
The optional fifth parameter can be used to pass additional flags as command line options to the program configured to be used when sending mail, as defined by the sendmail_path configuration setting. For example, this can be used to set the envelope sender address when using sendmail/postfix with the -f sendmail option.

mail() can be pretty reliable, it is by no means guaranteed that an email will be sent when mailAlthough using () is called. To see if there is a potential error when sending your email, you should capture the return value from
mail(). TRUE will be returned if the mail was successfully accepted for delivery. Otherwise, you will receive FALSE.

mailNOTE: Although () may return TRUE, it does not mean the email was sent or that the email will be received by the recipient. It only indicates the mail was successfully handed over to your system's mail system successfully.
If you wish to send an HTML email, there isn't a lot more work you need to do. You need to:
MIME-Version1. Add the  header
Content-Type2. Add the  header
3. Make sure your email content is HTML



See Also
Official documentation
mailmail()
PHP () configuration
Related Stack Overflow Questions
PHP mail form doesn't complete sending e-mail
How do you make sure email you send programmatically is not automatically marked as spam?
How to use SMTP to send email
Setting envelope from address
Alternative Mailers
PHPMailer
SwiftMailer
PEAR::Mail
Email Servers
 Mercury Mail (Windows)
Related Topics
 Post/Redirect/Get
Section 64.2: Sending HTML Email Using mail()


This is not much different then sending a plain text email. Thet key differences being the content body is structured like an HTML document and there are two additional headers that must be included so the email client knows to trender the email as HTML. They are:
 MIME-Version: 1.0
Content-Type: text/html; charset=UTF-8
Section 64.3: Sending Email With An Attachment Using mail()


Content-Transfer-Encodings
The available encodings are 7bit, 8bit, binary, quoted-printable, base64, ietf-token, and x-token. Of these encodings, when a header has a multipart Content-Type, the Content-Transfer-Encoding must not be any other value other than 7bit, 8bit, or binary as stated in RFC 2045, section 6.4.
Our example chooses the 7bit encoding, which represents US-ASCII characters, for the multipart header because, as noted in RFC 2045 section 6, some protocols support only this encoding. Data within the boundaries can then be encoded on a part-by-part basis (RFC 2046, section 5.1). This example does exactly this. The first part, which contains the text/plain message, is defined to be 8bit since it may be necessary to support additional characters. In this case, the Latin1 (iso-8859-1) character set is being used. The second part is the attachment and so it is defined as a base64-encoded application/octet-stream. Since base64 transforms arbitrary data into the 7bit range, it can be sent over restricted transports (RFC 2045, section 6.2).
Section 64.4: Sending Plain Text Email Using PHPMailer
Basic Text Email


Adding addtional recipients, CC recipients, BCC recipients

Section 64.5: Sending HTML Email Using PHPMailer


Section 64.6: Sending Email With An Attachment Using PHPMailer

Section 64.7: Sending Plain Text Email Using Sendgrid
Basic Text Email

Adding addtional recipients, CC recipients, BCC recipients

Section 64.8: Sending Email With An Attachment Using Sendgrid

Chapter 65: Using SQLSRV
Section 65.1: Retrieving Error Messages
When a query goes wrong, it is important to fetch the error message(s) returned by the driver to identify the cause of the problem. The syntax is:

This returns an array with:
	Key	Description
SQLSTATE The state that the SQL Server / OBDC Driver is in code	The SQL Server error code message	The description of the error
It is common to use the above function like so:

Section 65.2: Fetching Query Results
There are 3 main ways to fetch results from a query: sqlsrv_fetch_array()

sqlsrv_fetch_array() has an optional second parameter to fetch back different types of array:
SQLSRV_FETCH_ASSOC, SQLSRV_FETCH_NUMERIC and SQLSRV_FETCH_BOTH(default) can be used; each returns the associative, numeric, or associative and numeric arrays, respectively.
sqlsrv_fetch_object()
sqlsrv_fetch_object() retrieves the next row as an object.

sqlsrv_fetch()
sqlsrv_fetch() makes the next row available for reading.

Section 65.3: Creating a Connection

SQLSRV also has a PDO Driver. To connect using PDO:
$conn = new PDO("sqlsrv:Server=localhost,1234;Database=db001", $dbUser, $dbPassword);
Section 65.4: Making a Simple Query

Note: the use of square brackets [] is to escape the word table as it is a reserved word. These work in the same way as backticks ` do in MySQL.
Section 65.5: Invoking a Stored Procedure
To call a stored procedure on the server:


Section 65.6: Making a Parameterised Query

sqlsrv_prepare() and sqlsrv_execute()If you plan on using the same query statement more than once, with different parameters, the same can be achieved with the  functions, as shown below:

Chapter 66: Command Line Interface (CLI)
Section 66.1: Handling Program Options
getopt()Program options can be handled with the  function. It operates with a similar syntax to the POSIX getopt command, with additional support for GNU-style long options.

This script can be tested like so:


v Note the last method will not work because -5 is not valid.
		Note: As of PHP 5.3.0, getopt is OS independent, working also on Windows.
Section 66.2: Argument Handling
Arguments are passed to the program in a manner similar to most C-style languages. $argc is an integer containing the number of arguments including the program name, and $argv is an array containing arguments to the program. The first element of $argv is the name of the program.

php example.php foo barCalling the above application with  (where example.php contains the above code) will result in the following output:
You called the program example.php with 2 arguments
Argument 1 is foo
Argument 2 is bar
Note that $argc and $argv are global variables, not superglobal variables. They must be imported into the local scope using the global keyword if they are needed in a function.
This example shows the how arguments are grouped when escapes such as "" or \ are used.
Example script

Command line




Section 66.3: Input and Output Handling
When run from the CLI, the constants STDIN, STDOUT, and STDERR are predefined. These constants are file handles, and can be considered equivalent to the results of running the following commands:

The constants can be used anywhere a standard file handle would be:

php://stdin, php://stdout, and php://stderrThe builtin stream addresses referenced earlier () can be used in place of filenames in most contexts:


As an alternative, you can also use readline() for input, and you can also use echo or print or any other string printing functions for output.

Section 66.4: Return Codes
The exit construct can be used to pass a return code to the executing environment.

exitBy default an exit code of 0 will be returned if none is provided, i.e. exit is the same as (0). As exit is not a function, parentheses are not required if no return code is being passed.
Return codes must be in the range of 0 to 254 (255 is reserved by PHP and should not be used). By convention, exiting with a return code of 0 tells the calling program that the PHP script ran successfully. Use a non-zero return code to tell the calling program that a specific error condition occurred.
Section 66.5: Restrict script execution to command line
php_sapi_nameThe function () and the constant PHP_SAPI both return the type of interface (Server API) that is being used by PHP. They can be used to restrict the execution of a script to the command line, by checking whether the output of the function is equal to cli.

drupal_is_cliThe () function is an example of a function that detects whether a script has been executed from the command line:

Section 66.6: Behavioural dierences on the command line
When running from the CLI, PHP exhibits some different behaviours than when run from a web server. These differences should be kept in mind, especially in the case where the same script might be run from both environments.
require("./stuff.inc" No directory change When running a script from a web server, the current working directory is always that of the script itself. The code ); assumes the file is in the same directory as the script. On the command line, the current working directory is the directory you're in when you call the script. Scripts that are going to be called from the command line should always use absolute paths. (Note the magic constants __DIR__ and __FILE__ continue to work as expected, and return the location of the script.)
php.ini	 No output buffering The 	 directives output_buffering and implicit_flush default to false and
true, respectively. Buffering is still available, but must be explicitly enabled, otherwise output will always be displayed in real time.
php.iniphp.iniphp.ini can be loaded. When you are using php from cli it can use different php.iniNo time limit The  directive max_execution_time is set to zero, so scripts will not time out by default.
No HTML errors In the event you have enabled the  directive html_errors, it will be ignored on the command line.
php --ini Different  than web server do. You can know what file is using by running .
 Section 66.7: Running your script
On either Linux/UNIX or Windows, a script can be passed as an argument to the PHP executable, with that script's options and arguments following:

example.phpThis passes foo and bar as arguments to .
On Linux/UNIX, the preferred method of running scripts is to use a shebang (e.g. #!/usr/bin/env php) as the first line of a file, and set the executable bit on the file. Assuming the script is in your path, you can then call it directly:

usr/bin/env phpusr/bin/php or /usr/local/bin/phpusr/bin/envUsing / makes the PHP executable to be found using the PATH. Following how PHP is installed, it might not be located at the same place (such as /), unlike env which is commonly available from /.
On Windows, you could have the same result by adding the PHP's directory and your script to the PATH and editing
php to be detected using the PATH. Another possibility is to add a file named example.batPATHEXT to allow . or
example.cmd in the same directory as your PHP script and write this line into it:

Or, if you added PHP's directory into the PATH, for convenient use:

Section 66.8: Edge Cases of getopt()
This example shows the behaviour of getopt when the user input is uncommon:

Shell command line

From this example, it can be seen that:
Individual options (no colon) always carry a boolean value of false if enabled.
If an option is repeated, the respective value in the output of getopt will become an array.
Required argument options (one colon) accept one space or no space (like optional argument options) as separator
 After one argument that cannot be mapped into any options, the options behind will not be mapped either.
 Section 66.9: Running built-in web server
As from version 5.4, PHP comes with built-in server. It can be used to run application without need to install other http server like nginx or apache. Built-in server is designed only in controller environment for development and testing purposes.
It can be run with command php -S :
index.phpTo test it create  file containing

php -S localhost:8080and run command 
http://localhost:8080Now yout should be able to see content in browser. To check this, navigate to 
Every access should result in log entry written to terminal


Chapter 67: Localization
Section 67.1: Localizing strings with gettext()
php.iniGNU gettext is an extension within PHP that must be included at the : extension=php_gettext.dll #Windows extension=gettext.so #Linux
The gettext functions implement an NLS (Native Language Support) API which can be used to internationalize your PHP applications.
gettextTranslating strings can be done in PHP by setting the locale, setting up your translation tables and calling () on any string you want to translate.

myPHPApp.po

gettext() loads a given post-complied .po file, a .mo. which maps your to-be translated strings as above.
After this small bit of setup code, translations will now be looked for in the following file:
./locale/fr_FR/LC_MESSAGES/myPHPApp.mo		.
gettext('some string'), if 'some string' has been translated in the .moWhenever you call  file, the translation will be returned. Otherwise, 'some string' will be returned untranslated.

Chapter 68: Headers Manipulation
Section 68.1: Basic Setting of a Header
Here is a basic setting of the Header to change to a new page when a button is clicked.

?>
Chapter 69: Coding Conventions
Section 69.1: PHP Tags
<?php ?> tags or short-echo tags <?= ?>. Other variations (in particular, short tags <? ?>You should always use ) should not be used as they are commonly disabled by system administrators.
When a file is not expected to produce output (the entire file is PHP code) the closing ?> syntax should be omitted to avoid unintentional output, which can cause problems when a client parses the document, in particular some browsers fail to recognise the <!DOCTYPE tag and activate Quirks Mode.
Example of a simple PHP script:

Example class definition file:

Example of PHP embedded in HTML:

Chapter 70: Asynchronous programming
Section 70.1: Advantages of Generators
PHP 5.5 introduces Generators and the yield keyword, which allows us to write asynchronous code that looks more like synchronous code.
Generator::send()The yield expression is responsible for giving control back to the calling code and providing a point of resumption at that place. One can send a value along the yield instruction. The return value of this expression is either null or the value which was passed to .

This mechanism can be used by a coroutine implementation to wait for Awaitables yielded by the Generator (by registering itself as a callback for resolution) and continue execution of the Generator as soon as the Awaitable is resolved.
Section 70.2: Using Icicle event loop
Icicle uses Awaitables and Generators to create Coroutines.


Section 70.3: Spawning non-blocking processes with proc_open()
PHP has no support for running code concurrently unless you install extensions such as pthread. This can be
proc_open() and stream_set_blockingsometimes bypassed by using () and reading their output asynchronously.
stream_set_blockingIf we split code into smaller chunks we can run it as multiple suprocesses. Then using () function we can make each subprocess also non-blocking. This means we can spawn multiple subprocesses and then check for their output in a loop (similarly to an even loop) and wait until all of them finish.
As an example we can have a small subprocess that just runs a loop and in each iteration sleeps randomly for 100 1000ms (note, the delay is always the same for one subprocess).

Then the main process will spawn subprocesses and read their output. We can split it into smaller blocks:


The output then contains mixture from all three subprocesses as they we're read by fread() (note, that in this case proc1 ended much earlier than the other two):

Section 70.4: Reading serial port with Event and DIO
DIO streams are currently not recognized by the Event extension. There is no clean way to obtain the file descriptor encapsulated into the DIO resource. But there is a workaround:
fopenstream_set_blockingEventUtil::getSocketFddio_fdopenopen stream for the port with ();
make the stream non-blocking with (); obtain numeric file descriptor from the stream with ();
pass the numeric file descriptor to () (currently undocumented) and get the DIO resource; add an Event with a callback for listening to the read events on the file descriptor; in the callback drain the available data and process it according to the logic of your application.
dio.php


Testing
Run the following command in terminal A:
$ socat -d -d pty,raw,echo=0 pty,raw,echo=0
2016/12/01 18:04:06 socat[16750] N PTY is /dev/pts/5
2016/12/01 18:04:06 socat[16750] N PTY is /dev/pts/8
2016/12/01 18:04:06 socat[16750] N starting data transfer loop with FDs [5,5] and [7,7]
dev/pts/5 and /dev/ptsThe output may be different. Use the PTYs from the first couple of rows (//8, in particular).
In terminal B run the above-mentioned script. You may need root privileges:

In terminal C send a string to the first PTY:

Output:

Section 70.5: HTTP Client Based on Event Extension
This is a sample HTTP client class based on Event extension.
The class allows to schedule a number of HTTP requests, then run them asynchronously.
http-client.php


* Dispatches all pending requests (events)
   *
* @return void   */   public function run() {
    $this->base->dispatch();
  }
  public function __destruct() {
    // Destroy connection objects explicitly, don't wait for GC.
    // Otherwise, EventBase may be free'd earlier.
    $this->connections = null;
  }
  /**
* @brief Adds a pending HTTP request
   *
* @param string $address Hostname, or IP
* @param int $port Port number
* @param array $headers Extra HTTP headers
* @param int $cmd A EventHttpRequest::CMD_* constant
* @param string $resource HTTP request resource, e.g. '/page?a=b&c=d'
   *
* @return EventHttpRequest|false   */   public function addRequest($address, $port, array $headers,     $cmd = EventHttpRequest::CMD_GET, $resource = '/')
  {
    $conn = new EventHttpConnection($this->base, null, $address, $port);
    $conn->setTimeout(5);
    $req = new EventHttpRequest([$this, '_requestHandler'], $this->base);
    foreach ($headers as $k => $v) {
      $req->addHeader($k, $v, EventHttpRequest::OUTPUT_HEADER);     }
    $req->addHeader('Host', $address, EventHttpRequest::OUTPUT_HEADER);     $req->addHeader('Connection', 'close', EventHttpRequest::OUTPUT_HEADER);     if ($conn->makeRequest($req, $cmd, $resource)) {
      $this->connections []= $conn;       return $req;     }
    return false;   }
  /**
* @brief Handles an HTTP request
   *
* @param EventHttpRequest $req
* @param mixed $unused
   *
* @return void   */   public function _requestHandler($req, $unused) {     if (is_null($req)) {       echo "Timed out\n";     } else {
      $response_code = $req->getResponseCode();       if ($response_code == 0) {
test.php
This is a sample script on the server side.

Usage

Sample Output


(Trimmed.)
Note, the code is designed for long-term processing in the CLI SAPI.
Section 70.6: HTTP Client Based on Ev Extension
This is a sample HTTP client based on Ev extension.
Ev extension implements a simple yet powerful general purpose event loop. It doesn't provide network-specific watchers, but its I/O watcher can be used for asynchronous processing of sockets. The following code shows how HTTP requests can be scheduled for parallel processing.
http-client.php


    $this->http_client = $client;
    $this->host        = $host;
    $this->resource    = $resource;
    $this->method      = $method;
    // Get the port for the WWW service
    $this->service_port = getservbyname('www', 'tcp');
    // Get the IP address for the target host
    $this->address = gethostbyname($this->host);
    // Create a TCP/IP socket
    $this->socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);     if (!$this->socket) {       throw new RuntimeException("socket_create() failed: reason: " .
        socket_strerror(socket_last_error()));     }
    // Set O_NONBLOCK flag     socket_set_nonblock($this->socket);
    $this->conn_watcher = $this->http_client->getLoop()
      ->timer(0, 0., [$this, 'connect']);
  }
  public function __destruct() {
    $this->close();
  }
  private function freeWatcher(&$w) {     if ($w) {       $w->stop();
      $w = null;
    }
  }
  /**
* Deallocates all resources of the request   */   private function close() {     if ($this->socket) {
      socket_close($this->socket);
      $this->socket = null;
    }
    $this->freeWatcher($this->timeout_watcher);
    $this->freeWatcher($this->read_watcher);
    $this->freeWatcher($this->write_watcher);     $this->freeWatcher($this->conn_watcher);
  }
  /**
* Initializes a connection on socket
* @return bool   */   public function connect() {
    $loop = $this->http_client->getLoop();
    $this->timeout_watcher = $loop->timer($this->timeout, 0., [$this, '_onTimeout']);     $this->write_watcher = $loop->io($this->socket, Ev::WRITE, [$this, '_onWritable']);     return socket_connect($this->socket, $this->address, $this->service_port);
  }
  /**
* Callback for timeout (EvTimer) watcher   */   public function _onTimeout(EvTimer $w) {
    $w->stop();
    $this->close();
  }
  /**
* Callback which is called when the socket becomes writable   */   public function _onWritable(EvIo $w) {
    $this->timeout_watcher->stop();
    $w->stop();
    $in = implode("\r\n", [
      "{$this->method} {$this->resource} HTTP/1.1",
      "Host: {$this->host}",
      'Connection: Close',     ]) . "\r\n\r\n";
    if (!socket_write($this->socket, $in, strlen($in))) {       trigger_error("Failed writing $in to socket", E_USER_ERROR);       return;     }
    $loop = $this->http_client->getLoop();
    $this->read_watcher = $loop->io($this->socket,
      Ev::READ, [$this, '_onReadable']);
    // Continue running the loop
    $loop->run();
  }
  /**
   * Callback which is called when the socket becomes readable    */   public function _onReadable(EvIo $w) {
    // recv() 20 bytes in non-blocking mode
    $ret = socket_recv($this->socket, $out, 20, MSG_DONTWAIT);
    if ($ret) {
      // Still have data to read. Append the read chunk to the buffer.
      $this->buffer .= $out;
    } elseif ($ret === 0) {       // All is read       printf("\n<<<<\n%s\n>>>>", rtrim($this->buffer));       fflush(STDOUT);       $w->stop();       $this->close();       return;     }
    // Caught EINPROGRESS, EAGAIN, or EWOULDBLOCK     if (in_array(socket_last_error(), static::$e_nonblocking)) {       return;     }
    $w->stop();
    $this->close();
Testing
http://my-host.local/test.phpSuppose  script is printing the dump of $_GET:

php http-client.phpThen the output of  command will be similar to the following:


(trimmed)
Note, in PHP 5 the sockets extension may log warnings for EINPROGRESS, EAGAIN, and EWOULDBLOCK errno values. It is possible to turn off the logs with

Section 70.7: Using Amp event loop
Amp harnesses Promises [another name for Awaitables] and Generators for coroutine creation.

        // convert to coroutine with Amp\resolve()
        $promise = Amp\resolve(queryStackOverflow(Dns\Record::NS));         list($ns, $type, $ttl) = // we need only one NS result, not all             current(yield Amp\timeout($promise, 2000 /* milliseconds */));         echo "The result of the fastest server to reply to our query was $ns";
    } catch (Amp\TimeoutException $e) {         echo "We've heard no answer for 2 seconds! Bye!";
    } catch (Dns\NoRecordException $e) {         echo "No NS records there? Stupid DNS nameserver!";     }
});

Chapter 71: How to Detect Client IP Address
Section 71.1: Proper use of HTTP_X_FORWARDED_FOR
In the light of the latest httpoxy vulnerabilities, there is another variable, that is widely misused.
HTTP_X_FORWARDED_FOR is often used to detect the client IP address, but without any additional checks, this can lead to security issues, especially when this IP is later used for authentication or in SQL queries without sanitization.
Most of the code samples available ignore the fact that HTTP_X_FORWARDED_FOR can actually be considered as information provided by the client itself and therefore is not a reliable source to detect clients IP address. Some of the samples do add a warning about the possible misuse, but still lack any additional check in the code itself.
So here is an example of function written in PHP, how to detect a client IP address, if you know that client may be behind a proxy and you know this proxy can be trusted. If you don't known any trusted proxies, you can just use



Chapter 72: Create PDF files in PHP
Section 72.1: Getting Started with PDFlib
This code requires that you use the PDFlib library for it to function properly.

Chapter 73: YAML in PHP
Section 73.1: Installing YAML extension
YAML does not come with a standard PHP installation, instead it needs to be installed as a PECL extension. On linux/unix it can be installed with a simple

libyaml-devNote that  package must be installed on the system, as the PECL package is simply a wrapper around libYAML calls.
Installation on Windows machines is different - you can either download a pre-compiled DLL or build from sources.
Section 73.2: Using YAML to store application configuration
YAML provides a way to store structured data. The data can be a simple set of name-value pairs or a complex hierarchical data with values even being arrays.
Consider the following YAML file:

config.yamlLet's say, it's saved as . Then to read this file in PHP the following code can be used:

print_r will produce the following output:

Now config parameters can be used by simply using array elements:


Chapter 74: Image Processing with GD
Section 74.1: Image output
imageAn image can be created using * functions, where * is the file format.
They have this syntax in common:

Saving to a file
If you want to save the image to a file, you can pass the filename, or an opened file stream, as $to. If you pass a stream, you don't need to close it, because GD will automatically close it.
For example, to save a PNG file:

When using fopen, make sure to use the b flag rather than the t flag, because the file is a binary output.
fopen("php://temp", $f) or fopen("php://memory", $fDo not try to pass ) to it. Since the stream is closed by the function after the call, you will be unable to use it further, such as to retrieve its contents.
Output as an HTTP response
If you want to directly return this image as the response of the image (e.g. to create dynamic badges), you don't need to pass anything (or pass null) as the second argument. However, in the HTTP response, you need to specify your content type:

image/png, image/gif$mimeType is the MIME type of the format you are returning. Examples include  and
image/jpeg.
Writing into a variable
There are two ways to write into a variable.
Using OB (Output Buffering)

Using stream wrappers
You may have many reasons that you don't want to use output buffering. For example, you may already have OB on. Therefore, an alternative is needed.
Using the stream_wrapper_register function, a new stream wrapper can be registered. Hence, you can pass a stream to the image output function, and retrieve it later.

In this example, the GlobalStream class writes any input into the reference variable (i.e. indirectly write to the global variable of the given name). The global variable can later be retrieved directly.
There are some special things to note:
A fully implemented stream wrapper class should look like this, but according to tests with the __call magic method, only stream_open, stream_write and stream_close are called from internal functions.
No flags are required in the fopen call, but you should at least pass an empty string. This is because the fopen function expects such parameter, and even if you don't use it in your stream_open implementation, a dummy one is still required.
 According to tests, stream_write is called multiple times. Remember to use .= (concatenation assignment), not = (direct variable assignment).
Example usage
<imgIn the > HTML tag, an image can be directly provided rather than using an external link: echo '<img src="data:image/png;base64,' . base64_encode($binary) . '">';
Section 74.2: Creating an image
To create a blank image, use the imagecreatetruecolor function:

$img is now a resource variable for an image resource with $widthx$height pixels. Note that width counts from left to right, and height counts from top to bottom.
Image resources can also be created from image creation functions, such as:
imagecreatefrompng imagecreatefromjpeg
imagecreatefrom	 other 	* functions.
imagedestroyImage resources may be freed later when there are no more references to them. However, to free the memory immediately (this may be important if you are processing many large images), using () on an image when it is no longer used might be a good practice. imagedestroy($image);
Converting an image
Images created by image conversion does not modify the image until you output it. Therefore, an image converter can be as simple as three lines of code:

Section 74.3: Image Cropping and Resizing
If you have an image and want to create a new image, with new dimensions, you can use imagecopyresampled function: first create a new image with desired dimensions:

createimagefromand store the original image into a variable. To do so, you may use one of the * functions where * stands for:
jpeg
gif
png
string
For example:

Now, copy all (or part of) original image (src_img) into the new image (dst_img) by imagecopyresampled:

src_* and dst_To set * dimensions, use the below image:

Now, if you want to copy entire of source (initial) image, into entire of destination area (no cropping):
$src_x = $src_y = $dst_x = $dst_y = 0;
$dst_width = $width;// width of new image
$dst_height = $height; //height of new image
$src_width = imagesx($src_img); //width of initial image
$src_height = imagesy($src_img); //height of initial image

Chapter 75: Imagick
Section 75.1: First Steps
Installation
Using apt on Debian based systems

Using Homebrew on OSX/macOs

To see the dependencies installed using the brew method, visit brewformulas.org/Imagemagick.
Using binary releases
Instructions on imagemagick website.
Usage

Section 75.2: Convert Image into base64 String
This example is how to turn an image into a Base64 string (i.e. a string you can use directly in a src attribute of an img tag). This example specifically uses the Imagick library (there are others available, such as GD as well).



Chapter 76: SOAP Server
Section 76.1: Basic SOAP Server


Chapter 77: Machine learning
Section 77.1: Classification using PHP-ML
Classification in Machine Learning is the problem that identifies to which set of categories does a new observation belong. Classification falls under the category of Supervised Machine Learning.
		Any algorithm that implements classification is known as classifier
The classifiers supported in PHP-ML are
SVC (Support Vector Classification) k-Nearest Neighbors
Naive Bayes
The train and predict method are same for all classifiers. The only difference would be in the underlying algorithm used.
SVC (Support Vector Classification)
Before we can start with predicting a new observation, we need to train our classifier. Consider the following code

The code is pretty straight forward. $cost used above is a measure of how much we want to avoid misclassifying each training example. For a smaller value of $cost you might get misclassified examples. By default it is set to 1.0
Now that we have the classifier trained we can start making some actual predictions. Consider the following codes that we have for predictions

The classifier in the case above can take unclassified samples and predicts there labels. predict method can take a single sample as well as an array of samples.
k-Nearest Neighbors
The classfier for this algorithm takes in two parameters and can be initialized like
$classifier = new KNearestNeighbors($neighbor_num=4);
$classifier = new KNearestNeighbors($neighbor_num=3, new Minkowski($lambda=4));
$neighbor_num is the number of nearest neighbours to scan in knn algorithm while the second parameter is distance metric which by default in first case would be Euclidean. More on Minkowski can be found here. Following is a short example on how to use this classifier

NaiveBayes Classifier
Bayes' theoremNaiveBayes Classifier is based on  and does not need any parameters in constructor.
The following code demonstrates a simple prediction implementation

Practical case
Till now we only used arrays of integer in all our case but that is not the case in real life. Therefore let me try to describe a practical situation on how to use classifiers.
 mm,10 mm10 mm,20 mmSuppose you have an application that stores characteristics of flowers in nature. For the sake of simplicity we can consider the color and length of petals. So there two characteristics would be used to train our data. color is the simpler one where you can assign an int value to each of them and for length, you can have a range like (0)=1 , ()=2. With the initial data train your classifier. Now one
of your user needs identify the kind of flower that grows in his backyard. What he does is select the color of the flower and adds the length of the petals. You classifier running can detect the type of flower ("Labels in example above")
Section 77.2: Regression
PHP-MLIn classification using  we assigned labels to new observation. Regression is almost the same with difference being that the output value is not a class label but a continuous value. It is widely used for predictions and forecasting. PHP-ML supports the following regression algorithms
Support Vector Regression
LeastSquares Linear Regression
Regression has the same train and predict methods as used in classification.
Support Vector Regression
This is the regression version for SVM(Support Vector Machine).The first step like in classification is to train our model.

In regression $targets are not class labels as opposed to classification. This is one of the differentiating factor for the two. After training our model with the data we can start with the actual predictions

Note that the predictions return a value outside the target.
LeastSquares Linear Regression
This algorithm uses least squares method to approximate solution. The following demonstrates a simple code of training and predicting

PHP-ML also provides with the option of Multiple Linear Regression. A sample code for the same can be as follows
$samples = [[73676, 1996], [77006, 1998], [10565, 2000], [146088, 1995], [15000, 2001], [65940,
2000], [9300, 2000], [93739, 1996], [153260, 1994], [17764, 2002], [57000, 1998], [15000, 2000]];
$targets = [2000, 2750, 15500, 960, 4400, 8800, 7100, 2550, 1025, 5900, 4600, 4400];
$regression = new LeastSquares();
$regression->train($samples, $targets);
$regression->predict([60000, 1996]) // return 4094.82
Multiple Linear Regression is particularly useful when multiple factors or traits identify the outcome.
Practical case
Now let us take an application of regression in real life scenario.
Suppose you run a very popular website, but the traffic keeps on changing. You want a solution that would predict the number of servers you need to deploy at any given instance of time. Lets assume for the sake that your hosting provider gives you an api to spawn out servers and each server takes 15 minutes to boot. Based on previous data of traffic, and regression you can predict the traffic that would hit your application at any instance of time. Using that knowledge you can start a server 15 minutes before the surge thereby preventing your application from going offline.
Section 77.3: Clustering
Clustering is about grouping similar objects together. It is widely used for pattern recognition. Clustering comes under unsupervised machine learning, therefore there is no training needed. PHP-ML has support for the following clustering algorithms
 k-Means dbscan k-Means
k-Means separates the data into n groups of equal variance. This means that we need to pass in a number n which would be the number of clusters we need in our solution. The following code will help bring more clarity

Note that the output contains 3 arrays because because that was the value of n in KMeans constructor. There can also be an optional second parameter in the constructor which would be the initialization method. For example consider

INIT_RANDOM places a completely random centroid while trying to determine the clusters. But just to avoid the centroid being too far away from the data, it is bound by the space boundaries of data.
The default constructor initialization method is kmeans++ which selects centroid in a smart way to speed up the process.
DBSCAN
As opposed to KMeans, DBSCAN is a density based clustering algorithm which means that we would not be passing n which would determine the number of clusters we want in our result. On the other hand this requires two parameters to work
1. $minSamples : The minimum number of objects that should be present in a cluster
2. $epsilon : Which is the maximum distance between two samples for them to be considered as in the same cluster.
A quick sample for the same is as follows

The code is pretty much self explanatory. One major difference is that there is no way of knowing the number of elements in output array as opposed to KMeans.
Practical Case
Let us now have a look on using clustering in real life scenario
Clustering is widely used in pattern recognition and data mining. Consider that you have a content publishing application. Now in order to retain your users they should look at content that they love. Let us assume for the sake of simplicity that if they are on a specific webpage for more that a minute and they scoll to bottom then they love that content. Now each of your content will be having a unique identifier with it and so will the user. Make cluster based on that and you will get to know which segment of users have a similar content taste. This in turn could be used in recommendation system where you can assume that if some users of same cluster love the article then so will others and that can be shown as recommendations on your application.

Chapter 78: Cache
Section 78.1: Caching using memcache
key-valueMemcache is a distributed object caching system and uses  for storing small data. Before you start calling Memcache code into PHP, you need to make sure that it is installed. That can be done using class_exists method in php. Once it is validated that the module is installed, you start with connecting to memcache server instance.

This will validate that Memcache php-drivers are installed and connect to memcache server instance running on localhost.
		Memcache runs as a daemon and is called memcached
In the example above we only connected to a single instance, but you can also connect to multiple servers using

Note that in this case unlike connect , there won't be any active connection until you try to store or fetch a value.
In caching there are three important operations that needs to be implemented
1. Store data : Add new data to memcached server
2. Get data : Fetch data from memcached server
3. Delete data : Delete already existing data from memcached server
Store data
$cache or memcached class object has a set method that takes in a key,value and time to save the value for (ttl).

Here $ttl or time to live is time in seconds that you want memcache to store the pair on server.
Get data
$cache or memcached class object has a get method that takes in a key and returns the corresponding value.

Delete data
Sometimes you might have the need to delete some cache value.$cache or memcache instance has a delete method that can be used for the same.

Small scenario for caching
Let us assume a simple blog. It will be having multiple posts on landing page that get fetched from database with each page load. In order to reduce the sql queries we can use memcached to cache the posts. Here is a very small implementation

Section 78.2: Cache Using APC Cache
The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code. installation

Add Cache:

Delete Cache:

Set Cache Example:


Performance:
APC is nearly 5 times faster than Memcached.

Chapter 79: Autoloading Primer
Section 79.1: Autoloading as part of a framework solution

Thanks to our generic autoloader, we have access to any class that follows our autoloader naming convention. In this example, our convention is simple: the desired class must have a file in the same directory named for the class and ending in ".php". Notice that the class name exactly matches the file name.
Without autoloading, we would have to manually require base classes. If we built an entire zoo of animals, we'd have thousands of require statements that could more easily be replaced with a single autoloader.
In the final analysis, PHP autoloading is a mechanism to help you write less mechanical code so you can focus on solving business problems. All you have to do is define a strategy that maps class name to file name. You can roll your own autoloading strategy, as done here. Or, you can use any of the standard ones the PHP community has adopted: PSR-0 or PSR-4. Or, you can use composer to generically define and manage these dependencies.
Section 79.2: Inline class definition, no loading required


new AnimalPHP knows what Animal is before executing , because PHP reads source files top-to-bottom. But what if we wanted to create new Animals in many places, not just in the source file where it's defined? To do that, we need to load the class definition.
Section 79.3: Manual class loading with require

Here we have three files. One file ("Animal.php") defines the class. This file has no side effects besides defining the class and neatly keeps all the knowledge about an "Animal" in one place. It's easily version controlled. It's easily reused.
new AnimalTwo files consume the "Animal.php" file by manually require-ing the file. Again, PHP reads source files top-tobottom, so the require goes and finds the "Animal.php" file and makes the Animal class definition available before calling .
new AnimalNow imagine we had dozens or hundreds of cases where we wanted to perform . That would require (pun-intended) many, many require statements that are very tedious to code.
Section 79.4: Autoloading replaces manual class definition loading


require "Animal.php"Compare this to the other examples. Notice how  was replaced with require
"autoload.php". We're still including an external file at run-time, but rather than including a specific class definition we're including logic that can include any class. It's a level of indirection that eases our development. Instead of writing one require for every class we need, we write one require for all classes. We can replace N require with 1 require.
The magic happens with spl_autoload_register. This PHP function takes a closure and adds the closure to a queue of closures. When PHP encounters a class for which it has no definition, PHP hands the class name to each closure in the queue. If the class exists after calling a closure, PHP returns to its previous business. If the class fails to exist after trying the entire queue, PHP crashes with "Class 'Whatever' not found."
Section 79.5: Autoloading with Composer
vendor/autoload.phpComposer generates a  file.
You might simply include this file and you will get autoloading for free.
require __DIR__ . '/vendor/autoload.php';
This makes working with third-party dependencies very easy.
composer.jsonYou can also add your own code to the Autoloader by adding an autoload section to your .

In this section you define the autoload mappings. In this example its a PSR-4 mapping of a namespace to a
src directory resides in your projects root folder, on the same level as the /vendorsrc/Foo.phpdirectory: the / directory is. An example filename would be  containing an YourApplicationNamespace\Foo class.
dump-autoloadvendor/autoload.phpImportant: After adding new entries to the autoload section, you have to re-run the command  to re-generate and update the  file with the new information.
PSR-4 autoloading, Composer also supports PSRIn addition to -0, classmap and files autoloading. See the autoload reference for more information.
vendor/autoload.phpWhen you including the / file it will return an instance of the Composer Autoloader. You might store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example.

Chapter 80: SPL data structures
Section 80.1: SplFixedArray
Difference from PHP Array
PHP's default Array type is actually implemented as ordered hash maps, which allow us to create arrays that consist of key/value pairs where values can be of any type and keys can be either numbers or strings. This is not traditionally how arrays are created, however.

So as you can see from this illustration a normal PHP array can be viewed more like an an ordered set of key/value pairs, where each key can map to any value. Notice in this array we have keys that are both numbers and strings, as well as values of different types and the key has no bearing on the order of the elements.


So the above code would give us exactly what we'd expect.
9 => foo 1 => 4.2 bar =>
Regular PHP arrays are also dynamically sized for us. They grow and shrink as we push and pop values to and from the array, automatically.
However, in a traditional array the size is fixed and consists entirely of the same type of value. Also, rather than keys each value is access by its index, which can be deduced by its offset in the array.

type size * nSince we would know the size of a given type and the fixed size of the array an offset is then the 
$arr$arrwere n represents the value's position in the array. So in the example above [0] gives us 1, the first element in the array and [1] gives us 2, and so on.
SplFixedArray, however, doesn't restrict the type of values. It only restricts the keys to number types. It's also of a fixed size.
This makes SplFixedArrays more efficient than normal PHP arrays in one particular way. They are more compact so they require less memory.
Instantiating the array
count($arrforeach($arr as $k => $vSplFixedArray is implemented as an object, but it can be accessed with the same familiar syntax that you access a normal PHP array since they implement the ArrayAccess interface. They also implement Countable and Iterator interfaces so they behave the same way you'd be used to arrays behaving in PHP (i.e. things like ) and ) work the same way for SplFixedArray as they do normal arrays in PHP.
The SplFixedArray constructor takes one argument, which is the size of the array.


This gives you what you would expect.
0 => foo 1 => bar 2 => baz 3 => This also works as expected.

Gives us...
int(4)
Notice in SplFixedArray, unlike a normal PHP Array, the key does depict the order of the element in our array, because it is a true index and not just a map.
Resizing the array
unset($arr[1]) will result in $arr[1] === null, count($arrJust keep in mind that because the array is of a fixed size, count will always return the same value. So while ) still remains 4.
So to resize the array you will need to call on the setSize method.

Now we get... int(3) 0 => foo 1 => 2 => baz Import to SplFixedArray & Export from SplFixedArray
You can also import/export a normal PHP Array into and out of an SplFixedArray with the fromArray and toArray methods.

1 2 3 4 5
Going the other way.


1 2 3 4 5

Chapter 81: IMAP
Section 81.1: Connecting to a mailbox
To do anything with an IMAP account you need to connect to it first. To do this you need to specify some required parameters:
The server name or IP address of the mail server
The port you wish to connect on
IMAP is 143 or 993 (secure)
POP is 110 or 995 (secure)
SMTP is 25 or 465 (secure)
NNTP is 119 or 563 (secure)
Connection flags (see below)
FlagDescription Options imap,Defaultservice=service/Which service to use	pop3,	imap
nntp, smtp
user=user/remote user name for login on the server
authuser=userremote authentication user; if specified this is the user name whose
/
password is used (e.g. administrator)
/anonymous	remote access as anonymous user
/debug	record protocol telemetry in application's debug log	disabled
/secure	do not transmit a plaintext password over the network
/norsh	do not use rsh or ssh to establish a preauthenticated IMAP session
/ssl	use the Secure Socket Layer to encrypt the session
validate-cert/certificates from TLS/SSL server	enabled
novalidate-certdo not validate certificates from TLS/SSL server, needed if server uses self-
/disabled
signed certificates. USE WITH CAUTION force use of start-TLS to encrypt the session, and reject connection to
/tls servers that do not support it do not do start-TLS to encrypt the session, even with servers that support
/notls it
request read-only mailbox open (IMAP only; ignored on NNTP, and an
/readonly error with SMTP and POP3)
Your connection string will look something like this:

Please note that if any of the characters in your connection string is non-ASCII it must be encoded with utf7_encode($string).
To connect to the mailbox, we use the imap_open command which returns a resource value pointing to a stream:

Section 81.2: Install IMAP extension
To use the IMAP functions in PHP you'll need to install the IMAP extension:
Debian/Ubuntu with PHP5

Debian/Ubuntu with PHP7

YUM based distro

Mac OS X with php5.6

Section 81.3: List all folders in the mailbox
Once you've connected to your mailbox, you'll want to take a look inside. The first useful command is imap_list. The first parameter is the resource you acquired from imap_open, the second is your mailbox string and the third is a fuzzy search string (* is used to match any pattern).

The output should look similar to this

You can use the third parameter to filter these results like this:
$folders = imap_list($mailbox, "{imap.example.com:993/imap/tls/secure}", "*.Sent");
SentAnd now the result only contains entries with . in the name:

Note: Using * as a fuzzy search will return all matches recursively. If you use % it will return only matches in the current folder specified.
Section 81.4: Finding messages in the mailbox
You can return a list of all the messages in a mailbox using imap_headers.

The result is an array of strings with the following pattern:
 [FLAG] [MESSAGE-ID])[DD-MM-YYY] [FROM ADDRESS] [SUBJECT TRUNCATED TO 25 CHAR] ([SIZE] chars) Here's a sample of what each line could look like:
A     1)19-Aug-2016 someone@example.com Message Subject (1728 chars)
D     2)19-Aug-2016 someone@example.com RE: Message Subject (22840 chars)
U     3)19-Aug-2016 someone@example.com RE: RE: Message Subject (1876 chars)
N     4)19-Aug-2016 someone@example.com RE: RE: RE: Message Subje (1741 chars)
Symbol	Flag	Meaning
A	Answered Message has been replied to
DDeletedMessage is deleted (but not removed)FFlaggedMessage is flagged/stared for attentionNNewMessage is new and has not been seenRRecentMessage is new and has been seenUUnreadMessage has not been readXDraftMessage is a draftNote that this call could take a fair amount of time to run and may return a very large list.
imap_num_msg($mailboxAn alternative is to load individual messages as you need them. Your emails are each assigned an ID from 1 (the oldest) to the value of ).
There are a number of functions to access an email directly, but the simplest way is to use imap_header which returns structured header information:


Chapter 82: HTTP Authentication
In this topic we gonna make a HTTP-Header authenticate script.
Section 82.1: Simple authenticate
PLEASE NOTE: ONLY PUT THIS CODE IN THE HEADER OF THE PAGE, OTHERWISE IT WILL NOT WORK!


Chapter 83: WebSockets
Usage of socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client.
Section 83.1: Simple TCP/IP server
Minimal example based on PHP manual example found here: http://php.net/manual/en/sockets.examples.php
telnet 127.0.0.1 5000Create a websocket script that listens to Port 5000 Use putty, terminal to run  (localhost).
This script replies with the message you sent (as a ping-back)



Chapter 84: BC Math (Binary Calculator)
    bcadd	Add two arbitrary precision numbers. left_operand The left operand, as a string. right_operand The right operand, as a string. scale	A optional parameter to set the number of digits after the decimal place in the result. bccomp	Compare two arbitrary precision numbers. left_operand The left operand, as a string.
right_operand The right operand, as a string.
A optional parameter to set the number of digits after the decimal place which will be used in the
scale
comparison.
bcdiv	Divide two arbitrary precision numbers. left_operand The left operand, as a string. right_operand The right operand, as a string.
scaleA optional parameter to set the number of digits after the decimal place in the result.bcmodGet modulus of an arbitrary precision number.left_operandThe left operand, as a string.modulusThe modulus, as a string.bcmulMultiply two arbitrary precision numbers.left_operandThe left operand, as a string.right_operand The right operand, as a string. scale	A optional parameter to set the number of digits after the decimal place in the result. bcpow	Raise an arbitrary precision number to another. left_operand The left operand, as a string. right_operand The right operand, as a string. scale	A optional parameter to set the number of digits after the decimal place in the result. bcpowmod	Raise an arbitrary precision number to another, reduced by a specified modulus. left_operand The left operand, as a string. right_operand The right operand, as a string.
modulusThe modulus, as a string.scaleA optional parameter to set the number of digits after the decimal place in the result.bcscaleSet default scale parameter for all bc math functions.scaleThe scale factor.bcsqrtGet the square root of an arbitrary precision number.operandThe operand, as a string.scaleA optional parameter to set the number of digits after the decimal place in the result.bcsubSubtract one arbitrary precision number from another.left_operand The left operand, as a string. right_operand The right operand, as a string. scale	A optional parameter to set the number of digits after the decimal place in the result.
The Binary Calculator can be used to calculate with numbers of any size and precision up to 2147483647-1 decimals, in string format. The Binary Calculator is more precise than the float calculation of PHP.
Section 84.1: Using bcmath to read/write a binary long on 32bit system
On 32-bit systems, integers greater than 0x7FFFFFFF cannot be stored primitively, while integers between
0x0000000080000000 and 0x7FFFFFFFFFFFFFFF can be stored primitively on 64-bit systems but not 32-bit systems (signed long long). However, since 64-bit systems and many other languages support storing signed long long integers, it is sometimes necessary to store this range of integers in exact value. There are several ways to do so, such as creating an array with two numbers, or converting the integer into its decimal human-readable form. This has several advantages, such as the convenience in presenting to the user, and the ability to manipulate it with bcmath directly.
The pack/unpack methods can be used to convert between binary bytes and decimal form of the numbers (both of type string, but one is binary and one is ASCII), but they will always try to cast the ASCII string into a 32-bit int on 32-bit systems. The following snippet provides an alternative:
/** Use pack("J") or pack("p") for 64-bit systems */ function writeLong(string $ascii) : string {     if(bccomp($ascii, "0") === -1) { // if $ascii < 0
        // 18446744073709551616 is equal to (1 << 64)
        // remember to add the quotes, or the number will be parsed as a float literal
        $ascii = bcadd($ascii, "18446744073709551616");
    }
    // "n" is big-endian 16-bit unsigned short. Use "v" for small-endian.     return pack("n", bcmod(bcdiv($ascii, "281474976710656"), "65536")) .         pack("n", bcmod(bcdiv($ascii, "4294967296"), "65536")) .         pack("n", bcdiv($ascii, "65536"), "65536")) .
        pack("n", bcmod($ascii, "65536")); }
function readLong(string $binary) : string {     $result = "0";
    $result = bcadd($result, unpack("n", substr($binary, 0, 2)));
    $result = bcmul($result, "65536");
    $result = bcadd($result, unpack("n", substr($binary, 2, 2)));
    $result = bcmul($result, "65536");
    $result = bcadd($result, unpack("n", substr($binary, 4, 2)));
    $result = bcmul($result, "65536");
    $result = bcadd($result, unpack("n", substr($binary, 6, 2)));
    // if $binary is a signed long long
    // 9223372036854775808 is equal to (1 << 63) (note that this expression actually does not work even on 64-bit systems)     if(bccomp($result, "9223372036854775808") !== -1) { // if $result >= 9223372036854775807
        $result = bcsub($result, "18446744073709551616"); // $result -= (1 << 64)
    }     return $result; }
Section 84.2: Comparison between BCMath and float arithmetic operations
bcadd vs float+float
 var_dump('10' + '-9.99');           // float(0.0099999999999998) var_dump(10 + -9.99);               // float(0.0099999999999998) var_dump(10.00 + -9.99);            // float(0.0099999999999998) var_dump(bcadd('10', '-9.99', 20)); // string(22) "0.01000000000000000000" bcsub vs float-float
var_dump('10' - '9.99');           // float(0.0099999999999998) var_dump(10 - 9.99);               // float(0.0099999999999998) var_dump(10.00 - 9.99);            // float(0.0099999999999998) var_dump(bcsub('10', '9.99', 20)); // string(22) "0.01000000000000000000"
bcmul vs int*int
var_dump('5.00' * '2.00');            // float(10) var_dump(5.00 * 2.00);                // float(10) var_dump(bcmul('5.0', '2', 20));      // string(4) "10.0" var_dump(bcmul('5.000', '2.00', 20)); // string(8) "10.00000" var_dump(bcmul('5', '2', 20));        // string(2) "10"
bcmul vs float*float
var_dump('1.6767676767' * '1.6767676767');           // float(2.8115498416259) var_dump(1.6767676767 * 1.6767676767);               // float(2.8115498416259) var_dump(bcmul('1.6767676767', '1.6767676767', 20)); // string(22) "2.81154984162591572289"
bcdiv vs float/float
var_dump('10' / '3.01');           // float(3.3222591362126) var_dump(10 / 3.01);               // float(3.3222591362126) var_dump(10.00 / 3.01);            // float(3.3222591362126) var_dump(bcdiv('10', '3.01', 20)); // string(22) "3.32225913621262458471"

Chapter 85: Docker deployment
Docker is a very popular container solution being used widely for deploying code in production environments. It makes it easier to Manage and Scale web-applications and microservices.
Section 85.1: Get docker image for php
In order to deploy the application on docker, first we need to get the image from registry.

php:7.0-apacheThis will get you the latest version of image from official php repository. Generally speaking, PHP is usually used to deploy web-applications so we need an http server to go with the image.  image comes preinstalled with apache to make deployment hastle free.
Section 85.2: Writing dockerfile
Dockerfile is used to configure the custom image that we will be building with the web-application codes. Create a new file Dockerfile in the root folder of project and then put the following contents in the same

The first line is pretty straight forward and is used to describe which image should be used to build out new image. The same could be changed to any other specific version of PHP from the registry.
php.iniSecond line is simply to upload  file to our image. You can always change that file to some other custom file location.
var/www/htmlThe third line would copy the codes in current directory to / which is our webroot. Remember
var/www/html/ inside the image.
The last line would simply open up port 80 inside the docker container.
Ignoring files
envIn some instances there might be some files that you don't want on server like environment configuration etc. Let us assume that we have our environment in .. Now in order to ignore this file, we can simply add it to .dockerignore in the root folder of our codebase.
Section 85.3: Building image
Building image is not something specific to php, but in order to build the image that we described above, we can simply use

Once the image is built, you can verify the same using

Which would list out all the images installed in your system.
Section 85.4: Starting application container
Once we have an image ready, we can start and serve the same. In order to create a container from the image, use

p 80:80In the command above - would forward port 80 of your server to port 80 of the container. The flag -d tells that the container should run as background job. The final specifies which image should be used to build the container.
Checking container
In order to check running containers, simply use

This will list out all the containers running on docker daemon.
Application logs
Logs are very important to debug the application. In order to check on them use


Chapter 86: APCu
APCu is a shared memory key-value store for PHP. The memory is shared between PHP-FPM processes of the same pool. Stored data persists between requests.
Section 86.1: Iterating over Entries
The APCUIterator allows to iterate over entries in the cache:

The iterator can be initialized with an optional regular expression to select only entries with matching keys:

Information about a single cache entry can be obtained via:

Section 86.2: Simple storage and retrieval
apcu_store can be used to store, apcu_fetch to retrieve values:

Section 86.3: Store information
apcu_cache_info provides information about the store and its entries:

Chapter 87: PHP Built in server
	Column	Column
-S	Tell the php that we want a webserver
<hostname>:<port> The host name and the por to be used
-t	Public directory
<filename>	The routing script
Learn how to use the built in server to develop and test your application without the need of other tools like xamp, wamp, etc.
Section 87.1: Running the built in server
php -S localhost:80PHP 7.1.7 Development Server started at Fri Jul 14 15:11:05 2017
Listening on http://localhost:80 Document root is C:\projetos\repgeral Press Ctrl-C to quit.
This is the simplest way to start a PHP server that responds to request made to localhost at the port 80.
The -S tells that we are starting a webserver.
The localhost:80 indicates the host that we are answering and the port. You can use other combinations like:
mymachine:80 - will listen on the address mymachine and port 80;
127.0.0.1:8080 - will listen on the address 127.0.0.1 and port 8080;
Section 87.2: built in server with specific directory and router script
php -S localhost:80 -t project/public router.phpPHP 7.1.7 Development Server started at Fri Jul 14 15:22:25 2017
Listening on http://localhost:80 Document root is /home/project/public Press Ctrl-C to quit.
Chapter 88: PSR
The PSR (PHP Standards Recommendation) is a series of recommendations put together by the FIG (Framework Interop Group).
"The idea behind the group is for project representatives to talk about the commonalities between our projects and find ways we can work together" - FIG FAQ
PSRs can be in the following states: Accepted, Review, Draft or Deprecated.
Section 88.1: PSR-4: Autoloader
PSR-4 is an accepted recommendation that outlines the standard for autoloading classes via filenames. This recommendation is recommended as the alternative to the earlier (and now deprecated) PSR-0.
The fully qualified class name should match the following requirement:

path_to_source]/Alphabet/Google/AdWord/KeywordPlanner.phpThus the final class name would be Alphabet\Google\AdWord\KeywordPlanner. The fully qualified class name should also translate into a meaningful file path therefore Alphabet\Google\AdWord\KeywordPlanner would be located in [
Starting with PHP 5.3.0, a custom autoloader function can be defined to load files based on the path and filename pattern that you define.
# Edit your php to include something like: spl_autoload_register(function ($class) { include 'classes/' . $class . '.class.php';});
Replacing the location ('classes/') and filename extension ('.class.php') with values that apply to your structure.
Composer package manager supports PSR-4 which means, if you follow the standard, you can load your classes in your project automatically using Composer's vendor autoloader.

Regenerate the autoloader file

Now in your code you can do the following:

require __DIR__ . '/vendor/autoload.php'; $KeywordPlanner = new Alphabet\Google\AdWord\KeywordPlanner();
Section 88.2: PSR-1: Basic Coding Standard
PSR-1 is an accepted recommendation and outlines a basic standard recommendation for how code should be written.
It outlines naming convetions for classes, methods and constants.
It makes adopting PSR-0 or PSR-4 recommendations a requirement.
It indicates which PHP tags to use: <?php and <?= but not <?.
It specifies what file encoding to use (UTF8).
It also states that files should either declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or execute logic with side effects and not define symbols, but do both.

Chapter 89: PHPDoc
Section 89.1: Describing a variable
@varThe  keyword can be used to describe the type and usage of:

The type can be one of the built-in PHP types, or a user-defined class, including namespaces.
The name of the variable should be included, but can be omitted if the docblock applies to only one item.
Section 89.2: Adding metadata to functions
Function level annotations help IDEs identify return values or potentially dangerous code


Section 89.3: Describing parameters


Section 89.4: Collections
PSR-5 proposes a form of Generics-style notation for collections.
Generics Syntax

Values in a Collection MAY even be another array and even another Collection.

Examples


Section 89.5: Adding metadata to files
File level metadata applies to all the code within the file and should be placed at the top of the file:

Section 89.6: Inheriting metadata from parent structures
@inheritDocIf a class extends another class and would use the same metadata, providing it  is a simple way for use the same documentation. If multiple classes inherit from a base, only the base would need to be changed for the children to be affected.



Chapter 90: Design Patterns
This topic provides examples of well known design patterns implemented in PHP.
Section 90.1: Method Chaining in PHP
Method Chaining is a technique explained in Martin Fowler's book Domain Specific Languages. Method Chaining is summarized as
		Makes modifier methods return the host object, so that multiple modifiers can be invoked in a single expression.
Consider this non-chaining/regular piece of code (ported to PHP from the aforementioned book)

Method Chaining would allow you to write the above statements in a more compact way:

return $thisAll you need to do for this to work is to  in the methods you want to chain from:

When to use it
The primary use cases for utilizing Method Chaining is when building internal Domain Specific Languages. Method Chaining is a building block in Expression Builders and Fluent Interfaces. It is not synonymous with those, though. Method Chaining merely enables those. Quoting Fowler:

I've also noticed a common misconception - many people seem to equate fluent interfaces with Method Chaining. Certainly chaining is a common technique to use with fluent interfaces, but true fluency is much more than that.
With that said, using Method Chaining just for the sake of avoiding writing the host object is considered a code smell by many. It makes for unobvious APIs, especially when mixing with non-chaining APIs.
Additional Notes
Command Query Separation
Command Query Separation is a design principle brought forth by Bertrand Meyer. It states that methods mutating state (commands) should not return anything, whereas methods returning something (queries) should not mutate state. This makes it easier to reason about the system. Method Chaining violates this principle because we are mutating state and returning something.
Getters
When making use of classes which implement method chaining, pay particular attention when calling getter methods (that is, methods which return something other than $this). Since getters must return a value other than $this, chaining an additional method onto a getter makes the call operate on the gotten value, not on the original object. While there are some use cases for chained getters, they may make code less readable.
Law of Demeter and impact on testing
Method Chaining as presented above does not violate Law of Demeter. Nor does it impact testing. That is because we are returning the host instance and not some collaborator. It's a common misconception stemming from people confusing mere Method Chaining with Fluent Interfaces and Expression Builders. It is only when Method Chaining returns other objects than the host object that you violate Law of Demeter and end up with Mock fests in your tests.
Chapter 91: Compile PHP Extensions
Section 91.1: Compiling on Linux
To compile a PHP extension in a typical Linux environment, there are a few pre-requisites:
Basic Unix skills (being able to operate "make" and a C compiler)
An ANSI C compiler
The source code for the PHP extension you want to compile
Generally there are two ways to compile a PHP extension. You can statically compile the extension into the PHP binary, or compile it as a shared module loaded by your PHP binary at startup. Shared modules are more likely since they allow you to add or remove extensions without rebuilding the entire PHP binary. This example focuses on the shared option.
apt-get installphp5-dev or php7-devIf you installed PHP via your package manager (, yum install, etc..) you will need to install the dev package for PHP, which will include the necessary PHP header files and phpize script for the build environment to work. The package might be named something like , but be sure to use your package manager to search for the appropriate name using your distro's repositories. They can differ.
usr/includeIf you built PHP from source the header files most likely already exist on your system (usually in / or
usr/local/include/).
Steps to compile
After you check to make sure you have all the prerequisites, necessary to compile, in place you can head over to pecl.php.net, select an extension you wish to compile, and download the tar ball.
tar xfvz yaml-2.0.0RC8.tgz1. Unpack the tar ball (e.g. )
2. Enter the directory where the archive was unpacked and run phpize
configure script if all went well, run that ./configure3. You should now see a newly created .
4. Now you will need to run make, which will compile the extension
5. Finally, make install will copy the compiled extension binary to your extension directory
usr/lib/, for example it might be something like /usr/lib/php5/20131226/yaml.so--with-prefixThe make install step will typically provide the installation path for you where the extension was copied. This is usually in /. But this depends on your configuration of PHP (i.e. ) and specific API version. The API number is included in the path to keep extensions built for different API versions in separate locations.
Loading the Extension in PHP
extension=yaml.so then restart PHP. Change yaml.soTo load the extension in PHP, find your loaded php.ini file for the appropriate SAPI, and add the line  to the name of the actual extension you installed, of course.
For a Zend extension you do need to provide the full path to the shared object file. However, for normal PHP extensions this path derived from the extension_dir directive in your loaded configuration, or from the $PATH environment during initial setup.
Chapter 92: Common Errors
Section 92.1: Call fetch_assoc on boolean
If you get an error like this:
Fatal error: Call to a member function fetch_assoc() on boolean in C:\xampp\htdocs\stack\index.php on line 7
Other variations include something along the lines of: mysql_fetch_assoc() expects parameter 1 to be resource, boolean given...
These errors mean that there is something wrong with either your query (this is a PHP/MySQL error), or your referencing. The above error was produced by the following code:

In order to "fix" this error, it is recommended to make mysql throw exceptions instead:

This will then throw an exception with this much more helpful message instead:
You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near 'SELCT * FROM db' at line 1
Another example that would produce a similar error, is where you simply just gave the wrong information to the mysql_fetch_assoc function or similar:

Section 92.2: Unexpected $end
Parse error: syntax error, unexpected end of file in C:\xampp\htdocs\stack\index.php on line 4
unexpected $endIf you get an error like this (or sometimes , depending on PHP version), you will need to make sure that you've matched up all inverted commas, all parentheses, all curly braces, all brackets, etc.
The following code produced the above error:

Notice the missing curly brace. Also do note that the line number shown for this error is irrelevant - it always shows the last line of your document.

Chapter 93: Compilation of Errors and Warnings
Section 93.1: Parse error: syntax error, unexpected T_PAAMAYIM_NEKUDOTAYIM
Appearance:
"Paamayim Nekudotayim" means "double colon" in Hebrew; thus this error refers to the inappropriate use of the double colon operator (::). The error is typically caused by an attempt to call a static method that is, in fact, not static.
Possible Solution:

If the above code causes this error, you most likely need to simply change the way you call the method:

doMethod()The latter example assumes that $classname is an instance of a class, and the  is not a static method of that class.
Section 93.2: Notice: Undefined index
Appearance:
Trying to access an array by a key that does not exist in the array
Possible Solution:
Check the availability before accessing it. Use:
isset()array_key_exists()1. 2.
Section 93.3: Warning: Cannot modify header information headers already sent
Appearance:
Happens when your script tries to send a HTTP header to the client but there already was output before, which resulted in headers to be already sent to the client.
Possible Causes:
1. Print, echo: Output from print and echo statements will terminate the opportunity to send HTTP headers. The application flow must be restructured to avoid that.
header()2. Raw HTML areas: Unparsed HTML sections in a .php file are direct output as well. Script conditions that will trigger a  call must be noted before any raw blocks.

3. Whitespace before <?php for "script.php line 1" warnings: If the warning refers to output in line 1, then it's mostly leading whitespace, text or HTML before the opening <?php token.

Reference from SO answer by Mario

Chapter 94: Exception Handling and Error Reporting
Section 94.1: Setting error reporting and where to display them
If it's not already done in php.ini, error reporting can be set dynamically and should be set to allow most errors to be shown:
Syntax

Examples

errors will be logged by default by php, normally in a error.log file at the same level than the running script. in development environment, one can also show them on screen:

in production however, one should

and show a friendly problem message through the use of an Exception or Error handler.
Section 94.2: Logging fatal errors
In PHP, a fatal error is a kind of error that cannot be caught, that is, after experiencing a fatal error a program does not resume. However, to log this error or somehow handle the crash you can use register_shutdown_function to register shutdown handler.


Reference:
http://php.net/manual/en/function.register-shutdown-function.php http://php.net/manual/en/function.error-get-last.php http://php.net/manual/en/errorfunc.constants.php
Chapter 95: Debugging
Section 95.1: Dumping variables
The var_dump function allows you to dump the contents of a variable (type and value) for debugging.
Example:

Output:

Section 95.2: Displaying errors
php.iniIf you want PHP to display runtime errors on the page, you have to enable display_errors, either in the  or using the ini_set function.
E_*You can choose which errors to display, with the error_reporting (or in the ini) function, which accepts constants, combined using bitwise operators.
PHP can display errors in text or HTML format, depending on the html_errors setting.
Example:


Plain text output: (HTML format differs between implementations)

The common way to handle error_reporting is to enable it fully with E_ALL constant during the development, and to disable publicly displaying it with display_errors on production stage to hide the internals of your scripts.
Section 95.3: phpinfo()
Warning
It is imperative that phpinfo is only used in a development environment. Never release code containing phpinfo into a production environment
Introduction
Having said that, it can be a useful tool in understanding the PHP environment (OS, configuration, versions, paths, modules) in which you are working, especially when chasing a bug. It is a simple built in function:

It has one parameter $what that allows the output to be customized. The default is INFO_ALL, causing it to display all information and is commonly used during development to see the current state of PHP.
INFO_You can pass the parameter * constants, combined with bitwise operators to see a customized list.
You can run it in the browser for a nicely formatted detailed look. It also works in PHP CLI, where you can pipe it into less for easier view.
Example

This will display a list of PHP directives (ini_get), environment ($_ENV) and predefined variables.
Section 95.4: Xdebug
Xdebug is a PHP extension which provides debugging and profiling capabilities. It uses the DBGp debugging protocol.
There are some nice features in this tool:
 stack traces on errors
var_dumpmaximum nesting level protection and time tracking helpful replacement of standard () function for displaying variables allows to log all function calls, including parameters and return values to a file in different formats code coverage analysis profiling information
remote debugging (provides interface for debugger clients that interact with running PHP scripts)
++As you can see this extension is perfectly suited for development environment. Especially remote debugging feature can help you to debug your php code without numerous var_dump's and use normal debugging process as in C or Java languages.
Usually installing of this extension is very simple:

And activate it into your php.ini:

In more complicated cases see this instructions
When you use this tool you should remember that:
XDebug is not suitable for production environments
Section 95.5: Error Reporting (use them both)

Section 95.6: phpversion()
Introduction
When working with various libraries and their associated requirements, it is often necessary to know the version of current PHP parser or one of it's packages.
phpversion('extension'This function accepts a single optional parameter in the form of extension name: ). If the
extension in question is installed, the function will return a string containing version value. However, if the extension not installed FALSE will be returned. If the extension name is not provided, the function will return the version of PHP parser itself.
Example

Chapter 96: Unit Testing
Section 96.1: Testing class rules
Let's say, we have a simple LoginForm class with rules() method (used in login page as framework template):

In order to perform tests on this class, we use Unit tests (checking source code to see if it fits our expectations):

How exactly Unit tests can help with (excluding general examples) in here? For example, it fits very well when we get unexpected results. For example, let's take this rule from earlier:

Instead, if we missed one important thing and wrote this:

With dozens of different rules (assuming we are using not just email and password), it's difficult to detect mistakes. This unit test:
// Initialize to valid and test this
$this->loginForm->email = "valid@email.com";
$this->loginForm->password = "password";
$this->loginForm->rememberMe = true;
$this->assertTrue($this->loginForm->validate($rules), "Should be valid as nothing is invalid");
Will pass our first example but not second. Why? Because in 2nd example we wrote a pattern with a typo (missed + sign), meaning it only accepts one letter/number.
phpunit [path_to_fileUnit tests can be run in console with command: ]. If everything is OK, we should be able to see that all tests are in OK state, else we will see either Error (syntax errors) or Fail (at least one line in that method did not pass).
--coverageWith additional parameters like  we can also see visually how many lines in backend code were tested and which passed/failed. This applies to any framework that has installed PHPUnit.
Example how PHPUnit test looks like in console (general look, not according to this example):


Section 96.2: PHPUnit Data Providers
Test methods often need data to be tested with. To test some methods completely you need to provide different data sets for every possible test condition. Of course, you can do it manually using loops, like this:

And someone can find it convenient. But there are some drawbacks of this approach. First, you'll have to perform additional actions to extract data if your test function accepts several parameters. Second, on failure it would be difficult to distinguish the failing data set without additional messages and debugging. Third, PHPUnit provides automatic way to deal with test data sets using data providers.
Data provider is a function, that should return data for your particular test case.
A data provider method must be public and either return an array of arrays or an object that implements the Iterator interface and yields an array for each iteration step. For each array that is part of the collection the test method will be called with the contents of the array as its arguments.
dataProviderTo use a data provider with your test, use @ annotation with the name of data provider function specified:


Each data set can be named for convenience. It will be easier to detect failing data:

Iterators


As you can see, simple iterator also works.
$parametercurrent	Note that even for a single parameter, data provider must return an array [	] Because if we change our () method (which actually return data on every iteration) to this:

Or change actual data:


Generators
It is not explicitly noted and shown in manual, but you can also use a generator as data provider. Note that Generator class actually implements Iterator interface.
So here's an example of using DirectoryIterator combined with generator:

Section 96.3: Test exceptions
Let's say you want to test method which throws an exception


You can do that by enclosing the method call into a try/catch block and making assertions on execption object's properties, but more conveniently you can use exception assertion methods. As of PHPUnit 5.2 you have expectX() methods available for asserting exception type, message & code

If you are using earlier version of PHPUnit, method setExpectedException can be used in stead of expectX() methods, but keep in mind that it's deprecated and will be removed in version 6.

Chapter 97: Performance
Section 97.1: Profiling with Xdebug
An extension to PHP called Xdebug is available to assist in profiling PHP applications, as well as runtime debugging. When running the profiler, the output is written to a file in a binary format called "cachegrind". Applications are available on each platform to analyze these files.
To enable profiling, install the extension and adjust php.ini settings. In our example we will run the profile optionally based on a request parameter. This allows us to keep settings static and turn on the profiler only as needed.
// Set to 1 to turn it on for every request xdebug.profiler_enable = 0
// Let's use a GET/POST parameter to turn on the profiler xdebug.profiler_enable_trigger = 1
// The GET/POST value we will pass; empty for any value xdebug.profiler_enable_trigger_value = ""
// Output cachegrind files to /tmp so our system cleans them up later xdebug.profiler_output_dir = "/tmp"
xdebug.profiler_output_name = "cachegrind.out.%p"
Next use a web client to make a request to your application's URL you wish to profile, e.g.

As the page processes it will write to a file with a name similar to

Note that it will write one file for each PHP request / process that is executed. So, for example, if you wish to analyze a form post, one profile will be written for the GET request to display the HTML form. The XDEBUG_PROFILE parameter will need to be passed into the subsequent POST request to analyze the second request which processes the form. Therefore when profiling it is sometimes easier to run curl to POST a form directly.
Once written the profile cache can be read by an application such as KCachegrind.

This will display information including:
Functions executed
Call time, both itself and inclusive of subsequent function calls
Number of times each function is called
Call graphs
Links to source code
Obviously performance tuning is very specific to each application's use cases. In general it's good to look for:
Repeated calls to the same function you wouldn't expect to see. For functions that process and query data these could be prime opportunities for your application to cache.
Slow-running functions. Where is the application spending most of its time? the best payoff in performance tuning is focusing on those parts of the application which consume the most time.
Note: Xdebug, and in particular its profiling features, are very resource intensive and slow down PHP execution. It is recommended to not run these in a production server environment.
Section 97.2: Memory Usage
php.iniPHP's runtime memory limit is set through the INI directive memory_limit. This setting prevents any single execution of PHP from using up too much memory, exhausting it for other scripts and system software. The memory limit defaults to 128M and can be changed in the  file or at runtime. It can be set to have no limit, but this is generally considered bad practice.
memory_get_usageThe exact memory usage used during runtime can be determined by calling (). It returns the number of bytes of memory allocated to the currently running script. As of PHP 5.2, it has one optional boolean parameter to get the total allocated system memory, as opposed to the memory that's actively being used by PHP.

memory_get_peak_usageNow memory_get_usage gives you memory usage at the moment it is run. Between calls to this function you may allocate and deallocate other things in memory. To get the maximum amount of memory used up to a certain point, call ().

Notice the value will only go up or stay constant.
Section 97.3: Profiling with XHProf
XHProf is a PHP profiler originally written by Facebook, to provide a more lightweight alternative to XDebug.
After installing the xhprof PHP module, profiling can be enabled / disabled from PHP code:

doSlowOperationThe returned array will contain data about the number of calls, CPU time and memory usage of each function that has been accessed inside ().
xhprof_sample_enable()/xhprof_sample_disable() can be used as a more lightweight option that will only log
profiling information for a fraction of requests (and in a different format).
XHProf has some (mostly undocumented) helper functions to display the data (see example), or you can use other tools to visualize it (the platform.sh blog has an example).

Chapter 98: Multiprocessing
Section 98.1: Multiprocessing using built-in fork functions
You can use built-in functions to run PHP processes as forks. This is the most simple way to achieve parallel work if you don't need your threads to talk to each other.
This allows you to put time intensive tasks (like uploading a file to another server or sending an email) to another thread so your script loads faster and can use multiple cores but be aware that this is not real multithreading and your main thread won't know what the children are up to.
Note that under Windows this will make another command prompt pop up for each fork you start.
master.php

worker.php

Section 98.2: Creating child process using fork
PHP has built in function pcntl_fork for creating child process. pcntl_fork is same as fork in unix. It does not take in any parameters and returns integer which can be used to differentiate between parent and child process.
Consider the following code for explanation

As you can see -1 is an error in fork and the child was not created. On creation of child, we have two processes running with separate PID.
pcntl_wait($statusAnother consideration here is a zombie process or defunct process when parent process finishes before child process. To prevent a zombie children process simply add ) at the end of parent process. 	pnctl_wait suspends execution of parent process until the child process has exited.
It is also worth noting that zombie process can't be killed using SIGKILL signal.
Section 98.3: Inter-Process Communication
Interprocess communication allows programmers to communicate between different processes. For example let us consider we need to write an PHP application that can run bash commands and print the output. We will be using proc_open , which will execute the command and return a resource that we can communicate with. The following code shows a basic implementation that runs pwd in bash from php

proc_open runs bash command with $descriptor as descriptor specifications. After that we use is_resource to validate the process. Once done we can start interacting with the child process using $pipes which is generated according to descriptor specifications.
After that we can simply use fwrite to write to stdin of child process. In this case pwd followed by carriage return.
Finally stream_get_contents is used to read stdout of child process.
Always remember to close the child process by using proc_close() which will terminate the child and return the exit status code.
Chapter 99: Multi Threading Extension
Section 99.1: Getting Started
pthreads-extTo start with multi-threading, you would need the  for php, which can be installed by

php.iniand adding the entry to .
A simple example:

Section 99.2: Using Pools and Workers
Pooling provides a higher level abstraction of the Worker functionality, including the management of references in the way required by pthreads. From: http://php.net/manual/en/class.pool.php
Pools and workers provide an higher level of control and ease of creating multi-threaded


Chapter 100: Secure Remeber Me
I have been searching on this topic for sometime till i found this post https://stackoverflow.com/a/17266448/4535386 from ircmaxell, I think it deserves more exposure.
Section 100.1: "Keep Me Logged In" - the best approach
store the cookie with three parts.

Then, to validate:

Chapter 101: Security
As the majority of websites run off PHP, application security is an important topic for PHP developers to protect their website, data, and clients. This topic covers best security practices in PHP as well as common vulnerabilities and weaknesses with example fixes in PHP.
Section 101.1: PHP Version Leakage
By default, PHP will tell the world what version of PHP you are using, e.g.

To fix this you can either change php.ini:

Or change the header:

Or if you'd prefer a htaccess method:

header_removeIf either of the above methods do not work, there is also the () function that provides you the ability to remove the header:

If attackers know that you are using PHP and the version of PHP that you are using, it's easier for them to exploit your server.
Section 101.2: Cross-Site Scripting (XSS)
Problem
Cross-site scripting is the unintended execution of remote code by a web client. Any web application might expose itself to XSS if it takes input from a user and outputs it directly on a web page. If input includes HTML or JavaScript, remote code can be executed when this content is rendered by the web client.
For example, if a 3rd party side contains a JavaScript file:

And a PHP application directly outputs a string passed into it:

<script src="http://example.com/runme.js"></scriptIf an unchecked GET parameter contains > then the output of the PHP script will be:

The 3rd party JavaScript will run and the user will see "I'm running" on the web page.
Solution
As a general rule, never trust input coming from a client. Every GET, POST, and cookie value could be anything at all, and should therefore be validated. When outputting any of these values, escape them so they will not be evaluated in an unexpected way.
Keep in mind that even in the simplest applications data can be moved around and it will be hard to keep track of all sources. Therefore it is a best practice to always escape output.
PHP provides a few ways to escape output depending on the context.
Filter Functions
PHPs Filter Functions allow the input data to the php script to be sanitized or validated in many ways. They are useful when saving or outputting client input. HTML Encoding
htmlspecialchars will convert any "HTML special characters" into their HTML encodings, meaning they will then not be processed as standard HTML. To fix our previous example using this method:

Would output:
<div>&lt;script src=&quot;http://example.com/runme.js&quot;&gt;&lt;/script&gt;</div>
<divEverything inside the > tag will not be interpreted as a JavaScript tag by the browser, but instead as a simple text node. The user will safely see:

URL Encoding
When outputting a dynamically generated URL, PHP provides the urlencode function to safely output valid URLs. So, for example, if a user is able to input data that becomes part of another GET parameter:

Any malicious input will be converted to an encoded URL parameter.
Using specialised external libraries or OWASP AntiSamy lists
Sometimes you will want to send HTML or other kind of code inputs. You will need to maintain a list of authorised words (white list) and un-authorized (blacklist).
You can download standard lists available at the OWASP AntiSamy website. Each list is fit for a specific kind of interaction (ebay api, tinyMCE, etc...). And it is open source.
There are libraries existing to filter HTML and prevent XSS attacks for the general case and performing at least as well as AntiSamy lists with very easy use. For example you have HTML Purifier
Section 101.3: Cross-Site Request Forgery
Problem
delete.php?accnt=12Cross-Site Request Forgery or CSRF can force an end user to unknowingly generate malicious requests to a web server. This attack vector can be exploited in both POST and GET requests. Let's say for example the url endpoint / deletes account as passed from accnt parameter of a GET request. Now if an authenticated
user will encounter the following script in any other application
 <img src="http://domain.com/delete.php?accnt=12" width="0" height="0" border="0"> the account would be deleted.
Solution
A common solution to this problem is the use of CSRF tokens. CSRF tokens are embedded into requests so that a web application can trust that a request came from an expected source as part of the application's normal workflow. First the user performs some action, such as viewing a form, that triggers the creation of a unique token.
A sample form implementing this might look like

The token can then be validated by the server against the user session after form submission to eliminate malicious requests.
Sample code
Here is sample code for a basic implementation:


There are many libraries and frameworks already available which have their own implementation of CSRF validation. Though this is the simple implementation of CSRF, You need to write some code to regenerate your CSRF token dynamically to prevent from CSRF token stealing and fixation.
Section 101.4: Command Line Injection
Problem
In a similar way that SQL injection allows an attacker to execute arbitrary queries on a database, command-line injection allows someone to run untrusted system commands on a web server. With an improperly secured server this would give an attacker complete control over a system.
Let's say, for example, a script allows a user to list directory contents on a web server.

(In a real-world application one would use PHP's built-in functions or objects to get path contents. This example is for a simple security demonstration.)
tmp. But as any input is allowed, path could be ; rm -fr One would hope to get a path parameter similar to //.
The web server would then execute the command

and attempt to delete all files from the root of the server.
Solution
escapeshellarg() or escapeshellcmdAll command arguments must be escaped using (). This makes the arguments non-executable. For each parameter, the input value should also be validated.
In the simplest case, we can secure our example with


Following the previous example with the attempt to remove files, the executed command becomes

And the string is simply passed as a parameter to ls, rather than terminating the ls command and running rm.
It should be noted that the example above is now secure from command injection, but not from directory traversal. To fix this, it should be checked that the normalized path starts with the desired sub-directory.
PHP offers a variety of functions to execute system commands, including exec, passthru, proc_open, shell_exec, and system. All must have their inputs carefully validated and escaped.
Section 101.5: Stripping Tags
strip_tags is a very powerful function if you know how to use it. As a method to prevent cross-site scripting attacks there are better methods, such as character encoding, but stripping tags is useful in some cases. Basic Example

Raw Output

Allowing Tags
<bSay you wanted to allow a certain tag but no other tags, then you'd specify that in the second parameter of the function. This parameter is optional. In my case I only want the > tag to be passed through.

Raw Output

Notice(s)
HTML comments and PHP tags are also stripped. This is hardcoded and can not be changed with allowable_tags.
<br> and <br/>In PHP 5.3.4 and later, self-closing XHTML tags are ignored and only non-self-closing tags should be used in allowable_tags. For example, to allow both , you should use:

Section 101.6: File Inclusion
Remote File Inclusion
Remote File Inclusion (also known as RFI) is a type of vulnerability that allows an attacker to include a remote file.
This example injects a remotely hosted file containing a malicious code:

Local File Inclusion
Local File Inclusion (also known as LFI) is the process of including files on a server through the web browser.

Solution to RFI & LFI:
It is recommended to only allow including files you approved, and limit to those only.

Section 101.7: Error Reporting
By default PHP will output errors, warnings and notice messages directly on the page if something unexpected in a script occurs. This is useful for resolving specific issues with a script but at the same time it outputs information you don't want your users to know.
Therefore it's good practice to avoid displaying those messages which will reveal information about your server, like your directory tree for example, in production environments. In a development or testing environment these messages may still be useful to display for debugging purposes.
A quick solution
You can turn them off so the messages don't show at all, however this makes debugging your script harder.

Or change them directly in the php.ini. display_errors = 0 Handling errors
A better option would be to store those error messages to a place they are more useful, like a database:

This method will log the messages to the database and if that fails to a file instead of echoing it directly into the page. This way you can track what users are experiencing on your website and notify you immediately if something go's wrong.
Section 101.8: Uploading files
If you want users to upload files to your server you need to do a couple of security checks before you actually move the uploaded file to your web directory.
The uploaded data:
This array contains user submitted data and is not information about the file itself. While usually this data is generated by the browser one can easily make a post request to the same form using software.

Exploiting the file name
Normally the operating system does not allow specific characters in a file name, but by spoofing the request you can add them allowing for unexpected things to happen. For example, lets name the file:
../script.php%00.pngTake good look at that filename and you should notice a couple of things.
1. The first to notice is the ../, fully illegal in a file name and at the same time perfectly fine if you are moving a file from 1 directory to another, which we're gonna do right?
00png2. Now you might think you were verifying the file extensions properly in your script but this exploit relies on the url decoding, translating % to a null character, basically saying to the operating system, this string ends here, stripping off . off the filename.
script.phphtaccessSo now I've uploaded  to another directory, by-passing simple validations to file extensions. It also bypasses . files disallowing scripts to be executed from within your upload directory.
Getting the file name and extension safely
pathinfoYou can use () to extrapolate the name and extension in a safe manner but first we need to replace unwanted characters in the file name:

While now we have a filename and extension that can be used for storing, I still prefer storing that information in a
md5(uniqid().microtimedatabase and give that file a generated name of for example, ())
+----+--------+-----------+------------+------+----------------------------------+----------------
-----+
| id | title  | extension | mime       | size | filename                         | time
|
+----+--------+-----------+------------+------+----------------------------------+----------------
-----+
| 1  | myfile | txt       | text/plain | 1020 | 5bcdaeddbfbd2810fa1b6f3118804d66 | 2017-03-11
00:38:54 |
+----+--------+-----------+------------+------+----------------------------------+----------------
-----+
This would resolve the issue of duplicate file names and unforseen exploits in the file name. It would also cause the attacker to guess where that file has been stored as he or she cannot specifically target it for execution.
Mime-type validation
image.pngChecking a file extension to determine what file it is is not enough as a file may named  but may very well contain a php script. By checking the mime-type of the uploaded file against a file extension you can verify if the file contains what its name is referring to.
You can even go 1 step further for validating images, and that is actually opening them:

You can fetch the mime-type using a build-in function or a class.
White listing your uploads
Most importantly, you should whitelist file extensions and mime types depending on each form.

Chapter 102: Cryptography
Section 102.1: Symmetric Encryption and Decryption of large Files with OpenSSL
PHP lacks a build-in function to encrypt and decrypt large files. openssl_encrypt can be used to encrypt strings, but loading a huge file into memory is a bad idea.
So we have to write a userland function doing that. This example uses the symmetric AES-128-CBC algorithm to encrypt smaller chunks of a large file and writes them into another file.
Encrypt Files

Decrypt Files
To decrypt files that have been encrypted with the above function you can use this function.

How to use
If you need a small snippet to see how this works or to test the above functions, look at the following code.

This will create three files:
1. testfile.txt with the plain text
2. testfile.txt.enc with the encrypted file
3. testfile.txt.dec with the decrypted file. This should have the same content as testfile.txt
Section 102.2: Symmetric Cipher
This example illustrates the AES 256 symmetric cipher in CBC mode. An initialization vector is needed, so we generate one using an openssl function. The variable $strong is used to determine whether the IV generated was cryptographically strong.
Encryption
$method = "aes-256-cbc"; // cipher method
$iv_length = openssl_cipher_iv_length($method); // obtain required IV length
$strong = false; // set to false for next line
$iv = openssl_random_pseudo_bytes($iv_length, $strong); // generate initialization vector
/* NOTE: The IV needs to be retrieved later, so store it in a database. However, do not reuse the same IV to encrypt the data again. */
if(!$strong) { // throw exception if the IV is not cryptographically strong     throw new Exception("IV not cryptographically strong!"); }
$data = "This is a message to be secured."; // Our secret message
$pass = "Stack0verfl0w"; // Our password
/* NOTE: Password should be submitted through POST over an HTTPS session.
Here, it's being stored in a variable for demonstration purposes. */
$enc_data = openssl_encrypt($data, $method, $password, true, $iv); // Encrypt
Decryption
/* Retrieve the IV from the database and the password from a POST request */
$dec_data = openssl_decrypt($enc_data, $method, $pass, true, $iv); // Decrypt
Base64 Encode & Decode
base64_encode() and base64_decodeIf the encrypted data needs to be sent or stored in printable text, then the () functions should be used respectively.

Chapter 103: Password Hashing Functions
As more secure web services avoid storing passwords in plain text format, languages such as PHP provide various (undecryptable) hash functions to support the more secure industry standard. This topic provides documentation for proper hashing with PHP.
Section 103.1: Creating a password hash
password_hashCreate password hashes using () to use the current industry best-practice standard hash or key derivation. At time of writing, the standard is bcrypt, which means, that PASSWORD_DEFAULT contains the same value

The third parameter is not mandatory.
The 'cost' value should be chosen based on your production server's hardware. Increasing it will make the password more costly to generate. The costlier it is to generate the longer it will take anyone trying to crack it to generate it also. The cost should ideally be as high as possible, but in practice it should be set so it does not slow down everything too much. Somewhere between 0.1 and 0.4 seconds would be okay. Use the default value if you are in doubt.
Version < 5.5
password_On PHP lower than 5.5.0 the * functions are not available. You should use the compatibility pack to substitute those functions. Notice the compatibility pack requires PHP 5.3.7 or higher or a version that has the $2y fix backported into it (such as RedHat provides).
crypt() As password_hashcryptIf you are not able to use those, you can implement password hashing with () is implemented as a wrapper around the () function, you need not lose any functionality.
// this is a simple implementation of a bcrypt hash otherwise compatible
// with `password_hash()`
// not guaranteed to maintain the same cryptographic strength of the full `password_hash()`
// implementation
// if `CRYPT_BLOWFISH` is 1, that means bcrypt (which uses blowfish) is available // on your system
if (CRYPT_BLOWFISH == 1) {
    $salt = mcrypt_create_iv(16, MCRYPT_DEV_URANDOM);
    $salt = base64_encode($salt);
    // crypt uses a modified base64 variant
    $source = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    $dest = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    $salt = strtr(rtrim($salt, '='), $source, $dest);
    $salt = substr($salt, 0, 22);
    // `crypt()` determines which hashing algorithm to use by the form of the salt string     // that is passed in
    $hashedPassword = crypt($plaintextPassword, '$2y$10$'.$salt.'$');
}
Salt for password hash
Despite of reliability of crypt algorithm there is still vulnerability against rainbow tables. That's the reason, why it's recommended to use salt.
A salt is something that is appended to the password before hashing to make source string unique. Given two identical passwords, the resulting hashes will be also unique, because their salts are unique.
A random salt is one of the most important pieces of your password security. This means that even with a lookup table of known password hashes an attacker can't match up your user's password hash with the database password hashes since a random salt has been used. You should use always random and cryptographically secure salts. Read more
password_hashWith () bcrypt algorithm, plain text salt is stored along with the resulting hash, which means that the hash can be transferred across different systems and platforms and still be matched against the original password.
Version < 7.0
Even when this is discouraged, you can use the salt option to define your own random salt.

Important. If you omit this option, a random salt will be generated by password_hash() for each password hashed. This is the intended mode of operation.
Version ≥ 7.0
The salt option has been deprecated as of PHP 7.0.0. It is now preferred to simply use the salt that is generated by default.
Section 103.2: Determine if an existing password hash can be upgraded to a stronger algorithm
If you are using the PASSWORD_DEFAULT method to let the system choose the best algorithm to hash your passwords with, as the default increases in strength you may wish to rehash old passwords as users log in

If the password_* functions are not available on your system (and you cannot use the compatibility pack linked in the remarks below), you can determine the algorithm and used to create the original hash in a method similar to the following:

Section 103.3: Verifying a password against a hash
password_verify() is the built-in function provided (as of PHP 5.5) to verify the validity of a password against a
known hash.

All supported hashing algorithms store information identifying which hash was used in the hash itself, so there is no need to indicate which algorithm you are using to encode the plaintext password with.
cryptIf the password_* functions are not available on your system (and you cannot use the compatibility pack linked in the remarks below) you can implement password verification with the () function. Please note that specific precautions must be taken to avoid timing attacks.

Chapter 104: Contributing to the PHP Manual
The PHP Manual provides both a functional reference and a language reference along with explanations of PHP's major features. The PHP Manual, unlike most languages' documentation, encourages PHP developers to add their own examples and notes to each page of the documentation. This topic explains contribution to the PHP manual, along with tips, tricks, and guidelines for best practice.
Section 104.1: Improve the ocial documentation
PHP has great official documentation already at http://php.net/manual/. The PHP Manual documents pretty much all language features, the core libraries and most available extensions. There are plenty of examples to learn from.
The PHP Manual is available in multiple languages and formats.
Best of all, the documentation is free for anyone to edit.
The PHP Documentation Team provides an online editor for the PHP Manual at https://edit.php.net. It supports multiple Single-Sign-On services, including logging in with your Stack Overflow account. You can find an introduction to the editor at https://wiki.php.net/doc/editor.
Changes to the PHP Manual need to be approved by people from the PHP Documentation Team having Doc Karma. Doc Karma is somewhat like reputation, but harder to get. This peer review process makes sure only factually correct information gets into the PHP Manual.
The PHP Manual is written in DocBook, which is an easy to learn markup language for authoring books. It might look a little bit complicated at first sight, but there are templates to get you started. You certainly don't need to be a DocBook expert to contribute.
Section 104.2: Tips for contributing to the manual
The following is a list of tips for those who are looking to contribute to the PHP manual:
Follow the manual's style guidelines. Ensure that the manual's style guidelines are always being followed for consistency's sake.
Perform spelling and grammar checks. Ensure proper spelling and grammar is being used - otherwise the information presented may be more difficult to assimilate, and the content will look less professional. Be terse in explanations. Avoid rambling to clearly and concisely present the information to developers who are looking to quickly reference it.
Separate code from its output. This gives cleaner and less convoluted code examples for developers to digest.
Check the page section order. Ensure that all sections of the manual page being edited are in the correct order. Uniformity in the manual makes it easier to quickly read and lookup information.
Remove PHP 4-related content. Specific mentions to PHP 4 are no longer relevant given how old it is now.
Mentions of it should be removed from the manual to prevent convoluting it with unnecessary information. Properly version files. When creating new files in the documentation, ensure that the revision ID of the file is set to nothing, like so: <!-- $Revision$ -->.
Merge useful comments into the manual. Some comments contribute useful information that the manual could benefit from having. These should be merged into the main page's content.
Don't break the documentation build. Always ensure that the PHP manual builds properly before committing the changes.
Chapter 105: Contributing to the PHP Core
Section 105.1: Setting up a basic development environment
PHP's source code is hosted on GitHub. To build from source you will first need to check out a working copy of the code.

If you want to add a feature, it's best to create your own branch.

Finally, configure and build PHP

If configuration fails due to missing dependencies, you will need to use your operating system's package management system to install them (e.g. yum, apt, etc.) or download and compile them from source.

Appendix A: Installing a PHP environment on Windows
Section A.1: Download, Install and use WAMP
WampServer is a Windows web development environment. It allows you to create web applications with Apache2, PHP and a MySQL database. Alongside, PhpMyAdmin allows you to manage easily your databases.
WampServer is available for free (under GPML license) in two distinct versions : 32 and 64 bits. Wampserver 2.5 is not compatible with Windows XP, neither with SP3, nor Windows Server 2003. Older WampServer versions are available on SourceForge.
WampServer versions:
WampServer (64 BITS) 3
WampServer (32 BITS) 3
Providing currently:
Apache: 2.4.18
MySQL: 5.7.11
PHP: 5.6.19 & 7.0.4
Installation is simple, just execute the installer, choose the location and finish it.
Once that is done, you may start WampServer. Then it starts in the system tray (taskbar), initially red in color and then turns green once the server is up.
You may goto a browser and type localhost or 127.0.0.1 to get the index page of WAMP. You may work on PHP
PATH_TO_WAMP>/www/<php_or_html_filelocally from now by storing the files in <> and check the result on
http://localhost/<php_or_html_file_name>Section A.2: Install PHP and use it with IIS
First of all you need to have IIS (Internet Information Services) installed and running on your machine; IIS isn't available by default, you have to add the characteristic from Control Panel -> Programs -> Windows Characteristics.
1. Download the PHP version you like from http://windows.php.net/download/ and make sure you download the Non-Thread Safe (NTS) versions of PHP.
\PHP\2. Extract the files into C:.
3. Open the Internet Information Services Administrator IIS.
4. Select the root item in the left panel.
5. Double click on Handler Mappings.
6. On the right side panel click on Add Module Mapping.
7. Setup the values like this:

vcredist_x64.exe or vcredist_x86.exe8. Install  (Visual C++ 2012 Redistributable) from https://www.microsoft.com/en-US/download/details.aspx?id=30679
\PHP\php.ini, especially set the extension_dir ="C:\PHP\ext"9. Setup your C:.
10. Reset IIS: In a DOS command console type IISRESET.
Optionally you can install the PHP Manager for IIS which is of great help to setup the ini file and track the log of errors (doesn't work on Windows 10).
index.phpRemember to set  as one of the default documents for IIS.
If you followed the installation guide now you are ready to test PHP.
\inetpub\wwwroot\Just like Linux, IIS has a directory structure on the server, the root of this tree is C:, here is the point of entry for all your public files and PHP scripts.
Now use your favorite editor, or just Windows Notepad, and type the following:

\inetpub\wwwroot\index.phpSave the file under C: using the UTF-8 format (without BOM).
Then open your brand new website using your browser on this address: http://localhost/index.php
Section A.3: Download and Install XAMPP
What is XAMPP?
XAMPP is the most popular PHP development environment. XAMPP is a completely free, open-source and easy to install Apache distribution containing MariaDB, PHP, and Perl.
Where should I download it from?
Download appropriate stable XAMPP version from their download page. Choose the download based on the type of OS (32 or 64bit and OS version) and the PHP version it has to support.
Current latest being XAMPP for Windows 7.0.8 / PHP 7.0.8.
Or you can follow this:
XAMPP for Windows exists in three different flavors:
exe formatzip format7zip formatInstaller (Probably . the easiest way to install XAMPP)
ZIP (For purists: XAMPP as ordinary ZIP . archive)
7zip: (For purists with low bandwidth: XAMPP as 7zip . archive)
How to install and where should I place my PHP/html files?
Install with the provided installer
exe1. Execute the XAMPP server installer by double clicking the downloaded ..
Install from the ZIP
1. Unzip the zip archives into the folder of your choice.
\xampp2. XAMPP is extracting to the subdirectory C: below the selected target directory.
setup_xampp.bat3. Now start the file , to adjust the XAMPP configuration to your system.
setup_xampp.bat		Note: If you choose a root directory C:\ as target, you must not start 	.
Post-Install
Use the "XAMPP Control Panel" for additional tasks, like starting/stopping Apache, MySQL, FileZilla and Mercury or installing these as services.
File handling
The installation is a straight forward process and once the installation is complete you may add html/php files to be
XAMPP-root/htdocs/. Then start the server and open http://localhost/file.phphosted on the server in  on a browser to view the page.
:/xampp/htdocs		Note: Default XAMPP root in Windows is C	/
Type in one of the following URLs in your favourite web browser:

Now you should see the XAMPP start page.


Appendix B: Installing on Linux/Unix Environments
Section B.1: Command Line Install Using APT for PHP 7
sudo add-apt-repository ppa:ondrej/phpThis will only install PHP. If you wish to serve a PHP file to the web you will also need to install a webserver such as Apache, Nginx, or use PHP's built in web-server (php version 5.4+).
If you are in a Ubuntu version below 16.04 and want to use PHP 7 anyway, you can add Ondrej's PPA repository by doing: 
Make sure that all of your repositories are up to date:

After updating your system's repositories, install PHP:

Let's test the installation by checking the PHP version:

This should output something like this.
Note: Your output will be slightly different.
PHP 7.0.8-0ubuntu0.16.04.1 (cli) ( NTS )
Copyright (c) 1997-2016 The PHP Group
Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies with Zend OPcache v7.0.8-0ubuntu0.16.04.1, Copyright (c) 1999-2016, by Zend Technologies with Xdebug v2.4.0, Copyright (c) 2002-2016, by Derick Rethans
You now have the capability to run PHP from the command line.
Section B.2: Installing in Enterprise Linux distributions (CentOS, Scientific Linux, etc)
Use the yum command to manage packages in Enterprise Linux-based operating systems:

This installs a minimal install of PHP including some common features. If you need additional modules, you will need to install them separately. Once again, you can use yum to search for these packages:

Example output:
php-bcmath.x86_64 : A module for PHP applications for using the bcmath library php-cli.x86_64 : Command-line interface for PHP php-common.x86_64 : Common files for PHP php-dba.x86_64 : A database abstraction layer module for PHP applications php-devel.x86_64 : Files needed for building PHP extensions php-embedded.x86_64 : PHP library for embedding in applications php-enchant.x86_64 : Human Language and Character Encoding Support php-gd.x86_64 : A module for PHP applications for using the gd graphics library php-imap.x86_64 : A module for PHP applications that use IMAP
To install the gd library:

Enterprise Linux distributions have always been conservative with updates, and typically do not update beyond the point release they shipped with. A number of third party repositories provide current versions of PHP:
IUS
Remi Colette
Webtatic
IUS and Webtatic provide replacement packages with different names (e.g. php56u or php56w to install PHP 5.6) while Remi's repository provides in-place upgrades by using the same names as the system packages.
Following are instructions on installing PHP 7.0 from Remi's repository. This is the simplest example, as uninstalling the system packages is not required.
# download the RPMs; replace 6 with 7 in case of EL 7 wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm wget http://rpms.remirepo.net/enterprise/remi-release-6.rpm
# install the repository information rpm -Uvh remi-release-6.rpm epel-release-latest-6.noarch.rpm
# enable the repository yum-config-manager --enable epel --enable remi --enable remi-safe --enable remi-php70
# install the new version of PHP # NOTE: if you already have the system package installed, this will update it yum install php
Credits
Thank you greatly to all the people from Stack Overflow Documentation who helped provide this content, more changes can be sent to web@petercv.com for new content to be published or updated
54 69 6DChapter 27ochemChapters 1, 2, 5, 12 and 30A.LChapter 50a4arpanChapter 59AbcAeffchenChapters 12, 15 and 16Abhi BeckertChapters 21, 26, 43, 50, 58 and 69Abhishek GurjarChapters 6, 10, 28 and 46AdamChapter 107Adil AbbasiChapters 2, 5 and 26AeJeyChapter 18afeiqueChapter 2AjantChapters 34 and 96Akshay KhaleChapter 4Ala Eddine JEBALIChapter 38AlbziChapter 13Aleks GChapter 73Alex JimenezChapter 62Alexander GuzChapters 2 and 26alexander.polomodovChapters 35, 40 and 95AlexeyChapters 12 and 43Alexey KornilovChapter 31Ali MasudianPourChapter 52Alok PatelChapter 14Alon EitanChapter 90AlphonsusChapter 41Amir Forsati Q.Chapter 9AnatPortChapters 9, 17 and 19AndreasChapters 14 and 33AndrewChapters 1 and 10Anees SabanChapter 16Ani MenonChapter 106AnilChapters 1, 5, 30 and 31AnotherGuyChapter 29Anthony VanoverChapters 64 and 102Antony D'AndreaChapter 14Anwar NairiChapter 58AppleDashChapter 2Arkadiusz KondasChapter 31Artsiom TymchankaChapter 66Arun3x3Chapter 14AsaphChapters 6, 7 and 50AtiqurChapter 15AVProgrammerChapters 31 and 65B001Chapters 2, 13 and 27BacLucChapter 58bakahoeChapter 17baldrsChapters 42 and 94bansiChapter 65BenjamChapter 24bhrachedChapter 37Billy GChapter 5bishChapter 64bishopChapter 79bladeChapter 60bnxioChapter 29Boysenb3rryChapter 72bpoissChapter 12br3ntChapters 5, 26, 58 and 90BramChapter 25BrokenBinaryChapters 29, 31, 47 and 48BSathvikChapter 59bwegsChapter 5bwoebiChapters 2, 5, 6, 9, 11, 12, 15, 19, 31, 70, 92, 95, 96, 103 and 106cale_bChapters 1, 2 and 5Callan HeardChapter 59CalvinChapter 10CanisChapter 26caoglishChapter 14cFreedChapter 9Charlie HChapter 5chhChapter 15Chief WiggumChapter 25Chris ForrenceChapter 66Chris WhiteChapters 41, 45 and 47ChristianChapters 2, 25 and 98Christopher K.Chapter 9Chrys UgwuChapter 39cjsimonChapter 55Code4R7Chapter 49cpalinckxChapter 5CStffChapter 19cyberbitChapter 30C	ʸNChapter 30Daniel WaghornChapter 41DanTheDJ1Chapter 28DarrenChapters 15, 22, 26 and 101DavidChapter 12David PackerChapter 35daviddhontChapter 101DavіdChapters 5 and 16Dennis HaarbrinkChapter 26Devsi OdedraChapter 10dikirillChapter 33Dipen ShahChapter 9Dipesh PoudelChapter 1DJ SipeChapter 41DmytrechkoChapters 5 and 103Dmytro G. SergiienkoChapter 22Dov Benyomin Sohacheski Chapter 41
Dragos Strugar	Chapters 27 and 29

DrewChapter 58Ed CottrellChapters 1, 5, 31, 35, 42, 58 and 90EdwardChapter 35EkinChapter 26EmilChapter 10Enamul HassanChapter 1EpodaxChapter 39Erki AChapter 71Ernestas StankevičiusChapters 50 and 69Exagone313Chapters 46 and 66Félix GagnonChapters 41 and 94F. MüllerChapters 12, 15 and 94F0GChapter 2FathanChapter 16FeedTheWebChapter 31Filip ŠChapter 57FinweChapter 103franga2000Chapters 55 and 95gabe3886Chapter 43Gabriel SolomonChapter 67GauravChapter 1Gaurav SrivastavaChapter 12georootChapters 77, 78, 85, 98 and 101Gerard RocheChapters 42 and 89Gino PaneChapters 2, 9, 31 and 96Gopal SharmaChapter 62GordonChapters 90 and 104GordonMChapter 56gracacsChapter 9GuRuChapter 12Gytis TenovimasChapters 2, 53, 59 and 96H. PauwelynChapter 1Hardik Kanjariya ツChapter 43HaridarshanChapter 28HarikrishnanChapter 15HartmanChapter 33HendersChapters 9 and 28Henrique BarcelosChapters 2, 5, 26, 58, 66 and 90Hirdesh VishwdewaChapters 2 and 5HPierceChapters 9, 45 and 89hspaansChapter 41Ian DrakeChapter 66IkariChapters 10, 18, 41 and 99Ilker MutluChapter 75ImClarkyChapters 20 and 65IvanChapter 58Ivijan Stefan StipićChapter 28Jack hardcastleChapter 26JamesChapters 17, 33 and 36James AldayChapter 33Jared DunhamChapter 59Jari KeinänenChapter 64JasonChapters 26 and 103
jasonlam604Chapter 64JayChapter 58Jaya ParwaniChapter 2jayantSChapter 18Jaydeep PandyaChapter 78JayIsTooCommonChapter 10JC LeeChapter 32jcalonsoChapter 12jcuenodChapter 19JdrupalChapter 21Jees K DennyChapter 59Jens A. KochChapters 1, 19, 28 and 79jesussegadoChapter 75JhollmanChapter 106JimmmyChapter 33jlapoutreChapter 40jmattheisChapters 5, 15 and 53Jo.Chapters 12 and 20JoeChapters 10 and 86John CChapter 29John CondeChapters 18, 34, 46 and 64John SlegersChapters 1, 2, 5, 12, 26, 31, 40, 49 and 90JonasCzChapter 1Jonathan LamChapter 59JonMark PerryChapter 10juandemarcoChapter 15Juha PalomäkiChapter 25JustCartyChapters 4 and 59jwriteclubChapters 20, 26, 66 and 90K48Chapter 5KamehamehaChapter 39Karim GeigerChapters 31 and 45KatieChapter 95kelunikChapters 35, 70 and 103KenyonChapter 75keroChapter 26Kevin CampionChapter 61kisanmeChapter 5Kodos JohnsonChapter 12krtekChapter 22ksealeyChapter 13KuhanChapter 81KzqaiChapter 1Laposhasú AcsaChapter 95leguanoChapter 89LeithChapter 31LigemerChapter 31LinusChapter 35littlethoughtsChapter 44LoopoChapter 33Luca RainoneChapter 26m02ph3u5Chapters 2 and 12Maarten OostingChapter 43MachavityChapters 26, 31, 40, 45, 58 and 59MackieeEChapter 12maiomanChapter 64MajidChapters 26, 27, 29, 40, 47 and 67ManikiranChapter 20Manolis AgkopianChapter 58MansouriChapter 101ManulaikoChapter 27MarcChapter 5Marcel dos SantosChapter 22Mark H.Chapter 5Marten KoetsierChapters 5, 9, 10, 34 and 55MartijnChapter 59Martijn GastkemperChapter 22MartinChapter 9martinChapter 70Matei MihaiChapters 7, 12 and 31matiaslauritiChapter 19Matt ClarkChapter 43Matt RainesChapters 7, 10 and 20Matt SChapters 1, 3, 10, 14, 16, 27, 41, 52, 58, 97, 101 and 103MatzeChapter 47MaximeChapter 14Meisam MullaChapter 12Michael ThompsonChapter 36mickmackusaChapter 28MikeChapter 68miken32Chapters 1, 5, 9, 10, 12, 19, 22, 31, 33, 38, 43, 50, 55, 56, 58, 66, 89, 105 and
107Milan ChhedaChapter 15MimouniChapter 31mjsarfattiChapter 39mlekoChapters 1 and 66Mohamed BelalChapters 52 and 90Mohammad SadeghChapters 5 and 53Mohyaddin AlaoddinChapter 12moopetChapter 9MoppoChapters 40 and 41mpaveyChapter 1mTorresChapter 29Mubashar AbbasChapters 1 and 2Mubashar IqbalChapter 89MuhammadChapter 1Muhammad Sumon Molla
Chapter 41
SelimmulquinChapter 66MushtiChapter 2nChapter 29naitsirchChapter 102NateChapters 2, 5, 10 and 26Nathan ArthurChapters 1 and 5Neil StricklandChapter 5Nguyen ThanhChapter 20
Nic WortelChapter 103nickbChapter 38Nijraj GelaniChapter 28Noah van der AaChapter 82noufalcepChapters 15 and 16Obinna NwakwueChapter 59ojraskChapters 1, 2, 9, 26, 39 and 66OldskoolChapter 36OrmozChapter 74Ortomala LokniChapter 10Oscar DavidChapter 17Pablo MartinezChapter 107PandaChapters 1, 5, 29 and 31ParziphalChapter 2Patrick SimardChapter 51paulmorrissChapter 1Paulo LimaChapter 87PaulproChapter 41Pawel DubielChapter 31Pedro PinheiroChapters 18 and 22Pekka 웃Chapter 64PerryChapters 36 and 103Petr R.Chapters 10, 59 and 64philwcChapter 58Piotr OlaszewskiChapters 31, 32 and 76Praveen KumarChapter 5Proger_CbskChapter 12p_blombergChapter 1QuillChapter 69Rafael DantasChapters 5 and 31rapChapters 1, 9, 10, 12 and 58RaptorChapter 12Ravi HiraniChapter 12Rebecca CloseChapter 8RelicScothChapter 88rfsbsbChapters 6 and 107Richard TurnerChapter 15Rick JamesChapters 31, 59 and 74Rizier123Chapter 12Robbie AverillChapters 2, 22, 26, 41, 64, 66 and 94robertChapter 59Robin PantaChapters 19 and 101Rocket HazmatChapter 32Ruslan BesChapters 6, 7, 9, 14, 15, 22, 42 and 53Ruslan OsmanovChapter 70Ryan KChapter 43ryanmChapter 5RyanNerdChapters 12 and 14ryanyuyuChapter 31S.I.Chapter 33Safoor SafdarChapter 41Sam OnelaChapter 33SaurabhChapter 106
scottevans93Chapter 30Script47Chapter 101Script_CodedChapter 10Sebastian BroschChapters 1 and 84SebastianbChapter 67seceliteChapter 101Serg ChernataChapter 95ShaneChapter 23Shawn Patrick RiceChapter 66SherifChapters 80 and 91shyammakwana.meChapter 53signalChapter 69SirNarshChapter 83SmarChapters 39 and 59SOFeChapters 1, 2, 5, 10, 12, 13, 14, 15, 16, 21, 24, 25, 26, 28, 37, 39, 43, 44, 45, 57, 66, 74 and 84Sourav GhoshChapter 25StasMChapters 5 and 10Steve ChamaillardChapter 35Sumurai8Chapter 41Sunitrams'Chapter 99SuperBearChapter 10Sverri M. OlsenChapters 17 and 103SvishChapter 5SZenCChapters 2, 5 and 62talhaschChapter 66TecBratChapter 1TechnomadChapter 32tereškoChapters 19, 58 and 103TgrChapters 12, 58 and 97TGrifChapter 42ThaillieChapter 5ThamilanChapters 9 and 93TharaChapter 25theomessinChapter 45Thibaud DauceChapter 12Thijs RiezebeekChapters 3, 12, 26, 27, 32, 40, 41, 42, 67 and 89think123Chapters 30 and 92this.lau_Chapters 33 and 63ThlbautChapter 12ThomasChapter 6Thomas GerotChapter 103TimothyChapter 5TimurChapter 5Toby AllenChapter 58toesslab.chChapter 1TomChapters 81, 88 and 103Tom WrightChapters 9 and 27Tomáš FejfarChapter 31Tomasz TybulewiczChapter 22tpuntChapters 5, 10, 12, 26, 35, 58, 104 and 105tristansokolChapter 60TryHarderChapter 19
tyteen4a03Chapter 103UltimaterChapters 5 and 12unaristChapters 12 and 22undefinedChapters 101 and 105Undersc0reChapter 101UnexChapter 2urulokeChapters 39 and 47user128216Chapter 1user2914877Chapter 102user5389107Chapters 5, 12 and 58uzaifChapters 5 and 31u_mulderChapter 45Vadim KokinChapter 36VeerendraChapter 15VenChapter 5Victor T.Chapter 54vijaykumarChapters 12, 26 and 70ViktorChapter 18Vincent TeyssierChapters 58 and 101walidChapters 29 and 81warlockChapter 17webDevChapter 101webNeatChapter 66WillChapters 9 and 26WillardSolutionsChapters 58 and 93Willem StuursmaChapter 31William PerronChapter 5wogslandChapter 10WoliulChapter 106ximsChapter 1XorifelseChapter 101Yehia AwadChapter 43yesitsmeChapter 100Your Common SenseChapters 5 and 58Yuri BlancChapter 31Yury FedorovChapters 16, 31 and 58ZiuminChapter 43
You may also like







GoalKicker.com - PHP Notes for Professionals	1

GoalKicker.com - PHP Notes for Professionals	1

GoalKicker.com - PHP Notes for Professionals	1







