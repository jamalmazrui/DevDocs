Tell us about your PDF experience.
Microsoft Edge Developer documentation
Development using Microsoft Edge DevTools, Microsoft Edge extensions, Progressive Web Apps, WebDriver automation, WebView2, and more.


Alternative ways to distribute an extension
Step-wise publishing process
Register as a Microsoft Edge extension developer
Sample: Picture viewer pop-up webpage

Move users to Microsoft Edge from Internet Explorer
Tracking prevention in Microsoft Edge
Detect Microsoft Edge from your website
Develop experiences for the sidebar in Microsoft Edge
Detect Windows 11 using User-Agent Client Hints
Customize the password reveal button
Display regional versions of your site, based on OS settings
View formatted JSON responses or files
Sign up for the Ad Selection API

WebView2 API Reference

ｃ HOW-TO GUIDE
Accessibility testing
Develop for the web with Microsoft Edge
Article • 06/19/2023
Develop for the web with Microsoft Edge by using Microsoft Edge DevTools, Microsoft
Edge extensions, Progressive Web Apps, WebDriver automation, WebView2, and more.
Microsoft Edge DevTools
The Microsoft Edge browser comes with built-in web development tools, called Microsoft Edge DevTools. DevTools is a set of web development tools that appears next to a rendered webpage in the browser. DevTools provides a powerful way to inspect and debug webpages and web apps. You can even edit source files and create website projects, all within the DevTools environment.
With DevTools, you can do the following:
 Inspect, tweak, and change the styles of elements in the webpage using live tools with a visual interface. Inspect where the browser stored content to construct the webpage, including .html, .css, .js, and .png file formats.
 Emulate how your webpage behaves on different devices and simulate a mobile environment, complete with different network conditions. Inspect the network traffic and see the location of the problems.
 Debug your JavaScript using breakpoint debugging and with the live console. Find memory problems and rendering issues with your web apps.
 Find accessibility, performance, compatibility, and security issues in your products, and use DevTools to fix the accessibility issues that are found.
 Use a development environment to sync changes in DevTools with the file system and from the web.
See Overview of DevTools.
Microsoft Edge extensions
Create an extension for Microsoft Edge, to add to or modify the browser's features. Extensions improve the browser experience, to provide a specialized function that's important to a target audience.
You can create a Microsoft Edge extension if you have an idea or product that is based upon either a specific web browser, or improvements to features of specific webpages.
Examples of companion experiences include ad blockers and password managers.
A Microsoft Edge extension is structured similarly to a regular web app, and usually includes:
An app manifest JSON file that contains basic platform information.
A JavaScript file that defines the behavior of the browser extension.
HTML and CSS files that define the user interface.
See Overview of Microsoft Edge extensions.
Progressive Web Apps
Progressive Web Apps use open web technologies to provide cross-platform interoperability. They work like native apps on supporting platforms, and like regular websites on other browsers.
Progressive Web Apps combine the best of the web and compiled apps, to provide users an app-like experience, customized for their devices. A Progressive Web App is a website that's progressively enhanced to function like installed, native apps on supporting platforms, while functioning like regular websites on other browsers.
Progressive Web Apps have a much lower cross-platform development cost than compiled apps that require a specific codebase for each platform, such as a separate codebase for Android, for iOS, and for each desktop operating system.
See Overview of Progressive Web Apps (PWAs).
WebView2
The WebView2 control is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications. Combine the ubiquity of the web platform, with the full capabilities of native platforms.

The following diagram shows the spectrum of apps, from maximum reach, to maximum power:

Hybrid apps, in the middle of this spectrum, allow you to enjoy the best of both worlds:
the ubiquity and strength of the web platform, combined with the power and full capabilities of the native platform.
See Introduction to Microsoft Edge WebView2.
Test and automation
The following are tools to automate testing in Microsoft Edge:
DevTools Protocol is used to instrument, inspect, debug, and profile browsers.
Use origin trials to try experimental APIs.
Playwright provides cross-browser automation through a single API.
Puppeteer's API controls Microsoft Edge via DevTools Protocol.
WebDriver simulates user interaction with Microsoft Edge. webhint linting checks code for errors and best practices.
See Test and automation in Microsoft Edge.
Development tips for Microsoft Edge
There are many tips and tricks to be aware of when building websites or web apps that work in Microsoft Edge, including:
 Testing for coming changes that could impact compatibility of your website with Microsoft Edge.
Moving users to Microsoft Edge from Internet Explorer.
Configuring tracking prevention in Microsoft Edge.
Detecting Microsoft Edge from your website.
Customizing the Password Reveal button.
Detecting Windows 11 by using User-Agent Client Hints.
See Development tips for Microsoft Edge.
Microsoft Edge IDE integration
Various features of Microsoft tools provide integration of development using Microsoft Edge, Visual Studio Code, and Visual Studio, to develop your products, webpages, and web apps that use and work with full integration in Microsoft Edge.
See Microsoft Edge IDE integration.
Accessibility in Microsoft Edge
Development of your webpages, web apps, and web-enabled products is robustly supported through the extensive Accessibility features in Microsoft Edge and its tooling ecosystem.
See Accessibility in Microsoft Edge.
How to use this documentation
The following sections are tips for using the Microsoft Learn website.
Zoom an image in an article
To see details of a screenshot or diagram:
1. Right-click the image, and then select Open image in new tab.
2. Close the image tab to return to the article.
Look up key words and terms in "Filter by title" text box
The multi-purpose Filter by title text box supports:
Navigating the table of contents (TOC).
Index term lookup of key words.
Full-text search of the documentation.
In the Filter by title box in the upper left, enter a term or key word to find:

If the desired article isn't found, select Search for "search-term" in all Microsoft Edge documentation:

The full-text search page initially searches all Microsoft Edge documentation. Or, click the View all results link for a broader search:

Provide feedback or report issues in the Microsoft Edge Developer documentation
To provide feedback or enter issues:
Contact the Microsoft Edge DevTools team
Contact the Microsoft Edge extensions team Contact the WebView2 team
To submit and view feedback for a specific page of the documentation, at the bottom of the page, click the This page button.

Feedback
Was this page helpful?  Yes  No

Microsoft Edge DevTools documentation
Development using DevTools in Microsoft Edge.

Debugging web projects

Sources tool overview
JavaScript debugging features
Find unused JavaScript and CSS code with the Coverage tool
Fix memory problems
Debug DOM memory leaks by using the Detached Elements tool
Understand security issues using the Security tool
Troubleshooting common performance issues

Opening source files in Visual Studio Code
Visual Studio for web development

Overview of DevTools
Article • 12/07/2023
The Microsoft Edge browser comes with built-in web development tools, called Microsoft Edge DevTools. DevTools is a set of web development tools that appears next to a rendered webpage in the browser. DevTools provides a powerful way to inspect and debug webpages and web apps. You can even edit source files and create website projects, all within the DevTools environment.
With DevTools, you can do the following:
 Inspect, tweak, and change the styles of elements in the webpage using live tools with a visual interface. Inspect where the browser stored content to construct the webpage, including .html, .css, .js, and .png file formats.
 Emulate how your website behaves on different devices and simulate a mobile environment, complete with different network conditions. Inspect the network traffic and see the location of the problems.
 Debug your JavaScript using breakpoint debugging and with the live console. Find memory problems and rendering issues with your web apps.
 Find accessibility, performance, compatibility, and security issues in your products, and use DevTools to fix the accessibility issues that are found.
 Use a development environment to sync changes in DevTools with the file system and from the web.
Video: Understand the DevTools user interface

This slightly older, September 2022 video shows the legacy UI for DevTools:
Instead of the Activity Bar, the video shows the legacy main toolbar. Instead of the Quick View panel (at bottom of DevTools), the video shows the Drawer.
Open DevTools
In Microsoft Edge, you can open DevTools by using the mouse or keyboard, in any of the following ways. Which tool is opened depends on how you open DevTools.
Main ways:
ﾉ Expand table
ActionResulting toolRight-click any item on a webpage, and then select Inspect.The Elements tool, with the DOM tree expanded to show the right-clicked page element.Press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).The previously used tool, or the Welcome tool.Press F12.The previously used tool, or the Welcome tool.Additional ways:
ﾉ Expand table
ActionResulting toolOn the Microsoft Edge toolbar, select Settings and more (	) > More tools > Developer tools.The previously used tool, or the Welcome tool.Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).The Console tool.Press Ctrl+Shift+C (Windows, Linux) or Command+Option+C (macOS).The Elements tool, with the DOM tree expanded to show the <body> element.Press Shift+F10 to open the right-click menu. To select the Inspect command, press Up Arrow and then Enter.The Elements tool, with the DOM tree expanded to show the <html> element.Press Tab or Shift+Tab to put focus on a page element. Then press Shift+F10 to open the right-click menu. To select the Inspect command, press Up Arrow and then Enter.The Elements tool, with the DOM tree expanded to show the focused page element.Open DevTools by right-clicking an item in a webpage
A good way to open DevTools is to right-click an item on a webpage, and then select Inspect:

DevTools opens, with the right-clicked element highlighted in the DOM tree in the Elements tool:

Open DevTools by using the Microsoft Edge toolbar
On the Microsoft Edge toolbar, select Settings and more (...) > More tools > Developer tools:

Have DevTools automatically open when you open a new tab
To have DevTools automatically open whenever you open a new tab in the browser:
1. At the command line, open Microsoft Edge, passing in the --auto-open-devtoolsfor-tabs flag, as follows:
Windows command prompt:
Windows Command Promptstart msedge --auto-open-devtools-for-tabsWindows PowerShell:
PowerShellStart-Process -FilePath "msedge" -ArgumentList "--auto-open-devtoolsfor-tabs"macOS Terminal:

Bash/Applications/Microsoft\ Edge.app/Contents/MacOS/Microsoft\ Edge -auto-open-devtools-for-tabsbash shell on Linux:
Bashmicrosoft-edge --auto-open-devtools-for-tabsDisabling startup boost
Important: There must be no running Microsoft Edge processes when launching via auto-open-devtools-for-tabs, so you may need to disable Startup boost in edge://settings/system.
The startup boost feature keeps a minimal Microsoft Edge process running in the background. This interferes with the auto-open-devtools-for-tabs feature and would need to be disabled to use it. For more information, see Get help with startup boost.
Turning off the F12 keyboard shortcut
To prevent pressing F12 from opening DevTools:
1. In Microsoft Edge, go to edge://settings/system.
2. Scroll down to the Developer Tools section, and then turn off the Use F12 key to open the Developer tools toggle.

Keyboard support
You can interact with DevTools using the mouse or keyboard. Keyboard shortcuts provide a quick way to access functionality, and are needed for accessibility. Various tools are increasingly accessible through the keyboard and assistive technologies such as screen readers.
See Keyboard shortcuts and Navigate DevTools with assistive technology.
Change where DevTools is docked in the browser
You can dock DevTools in the right, left, or bottom of the browser, or undock it into a separate window. See Change DevTools placement (Undock, Dock to bottom, Dock to left).
Zoom DevTools in or out
The DevTools UI is implemented using HTML and CSS, like web pages, so you can zoom in and out by using the standard keyboard shortcuts. The zoom levels for DevTools and the rendered page are independent.
To zoom the DevTools portion of the browser:
1. If focus isn't already on DevTools, click somewhere in DevTools.
2. Press Ctrl++ or Ctrl+- (Windows or Linux). Or, press Command++ or Command+(macOS).

To zoom the rendered page, click the page, and then use the same keyboard shortcuts as above.
To restore zoom to 100%:
1. Make sure focus is on the desired part of the browser, either DevTools or the rendered page.
2. Press Ctrl+0 or Ctrl+NumPad0 (Windows or Linux), or Command+0 (macOS).
To zoom DevTools Settings:
1. In DevTools Settings, click Close (x) in the upper right.
2. Change the zoom level of DevTools, as described above.
3. Click the Settings () button.
To zoom DevTools by using the Command Menu:
1. Click the Customize and control DevTools () menu button, and then select Run command.
2. In the Command Menu, start typing zoom, and then select a zoom command:
Reset zoom level
Zoom in
Zoom out
Overview of the user interface
The DevTools user interface has the following main areas:
 The Activity Bar at the top, or on the left side, which contains icons used to access tools, settings, documentation, and more.
 The current tool area, where the tool that's currently selected in the Activity Bar appears.
The Quick View toolbar, at the bottom, which contains tabs used to access tools. The bottom tool area, where the tool that's currently selected in the Quick View toolbar appears.

By default, the Activity Bar contains the following tools:
Inspect tool () toggle button.
Device Emulation tool () button.
Welcome tool (). Elements tool ().
Console tool ().
Sources tool ().
Network tool ().
Performance tool ().
Memory tool ().
Application tool ().
By default, the Quick View toolbar contains the following tools:
Console tool ().
Issues tool ().
In the Activity Bar, tool tabs either contain the tool name and icon, or just the tool icon, depending on the width of the DevTools window. If the window is wide enough, the tool name and icon appear. If the window is too narrow, only the tool icon appears and the tool name appears when you hover over the tool icon.
If the Activity Bar is located on the left side of the DevTools window, vertically, only the tool icons appear, and the tool names appear when you hover over the tool icons.
Change the location of the Activity Bar
By default, the Activity Bar is displayed horizontally at the top of the DevTools window. To maximize usable screen space in a variety of DevTools window size and locations, you can change the location of the Activity Bar to the left side of the DevTools window or to be automatically set depending on the DevTools window docking location.
The Activity Bar can be in one of the following locations:
Top (default): The Activity Bar will always be horizontal.
Left side: The Activity Bar will always be vertical.
Adapt to dock location: The Activity Bar will be in a horizontal or vertical orientation depending on where DevTools is docked.
 When DevTools is docked to the left or right side of the browser window, the Activity Bar is vertical.
 When DevTools is docked to the bottom side of the browser window, or undocked in its own window, the Activity Bar is horizontal.
When the Activity Bar is horizontal, tool names appear next to tool icons if there is enough space to display them.
If there isn't enough space to display all tool names, the horizontal Activity Bar shows some tabs with tool icons and names, and some tabs with icons that have a tooltip instead:

To change the location of the Activity Bar, do either of the following:
 Click the Customize and control DevTools () button, and then select a location in Activity Bar location:
Use the Command Menu. Press Ctrl+Shift+P (Windows, Linux) or
Command+Shift+P (macOS), enter the words activity bar, and then select Move Activity Bar to left or Move Activity Bar to top. See Power tip: Use the Command Menu.
Change the location of Quick View
By default, the Quick View panel is at the bottom of DevTools. You can also put the Quick View panel on the right side of DevTools.
To display the Quick View panel, press Esc.
To change the location of the Quick View panel, in the Quick View toolbar, click the Dock Quick View to the right () button or the Dock Quick View to the bottom button:

Features of the Activity Bar
DevTools gives you an amazing amount of power to inspect, debug, and change the website currently displayed in the browser. Most of the tools display the changes live. Live updates make the tools useful to refine the appearance and navigation or functionality of a webpage without the need to refresh or build it.
Tabbed tool panels containing tabs and pages
Other than the Inspect tool and Device Emulation, DevTools is divided into a set of tabbed tools, such as the Elements tool, the Console tool, and the Sources tool. Within the Command Menu, tools are referred to as panels. A tool's tab contains a panel which contains the tool's UI.
Higher-level tabs:
Tools are organized into a set of tabs on the Activity Bar and on the Quick View toolbar. Most tools are also called panels. A panel is the inner UI of a tool. A tool has a tab that can be present on the Activity Bar and Quick View toolbar.
Lower-level tabs:
Within the panel of some tools, there are one or more sets of tabs (tabbed panes). For example, the Elements tool contains a set of tabs that includes Styles, Event Listeners, and Accessibility tabs. For other tools, the tool's panel has pages listed along the left side.
The Activity Bar and the Quick View toolbar
There are two toolbars: the Activity Bar at the top of DevTools, and the Quick View toolbar at the bottom when you press Esc.
The Activity Bar contains the following features:

The Activity Bar features are described below.
Pin and rearrange tools in the Activity Bar
Besides the permanent Elements, Console, and Sources tools, you can control which tools appear in the Activity Bar, to customize DevTools to focus on your current activities.
1. Click the More tools () button to list all the available tools:

2. Select a tool to pin it to the Activity Bar. The tool is then present in the Activity Bar whenever DevTools is opened.
If there isn't enough space in the Activity Bar to display all of the pinned tools, tools that are open but not displayed are moved into the More tools menu:

To unpin a tool from the Activity Bar, right-click the tool's tab and then select Remove from Activity Bar:

Inspect tool
When you click the Inspect tool () button, you can select an element on the current webpage. While the Inspect tool is active, you can move your mouse over different parts of the webpage to get detailed information about page elements, along with a multicolor overlay that shows the layout dimensions, padding, and margin of the page element.

Device Emulation
Click the Device Emulation () button to display the current website in an emulated device mode. The Device Emulation tool allows you to run and test how your product reacts when you resize the browser. It also gives you an estimation of the layout and behavior on a mobile device.

See Emulate mobile devices (Device Emulation).
Welcome tool
Includes information about the new features of DevTools, how to contact the team, and provides information about certain features.
Elements tool
Allows you to inspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser.
The Elements tool is always present on the Activity Bar.
Console tool
In the Console tool, you can:
 View and filter logged messages from network requests or from JavaScript log statements.
 Enter JavaScript statements to evaluate in realtime. Expressions are evaluated in the current context, such as when the JavaScript debugger in the Sources tool is paused at a breakpoint.
The Console tool is always present on the Activity Bar and on the Quick View toolbar.
See Console.
Sources tool
The Sources tool is a code editor and JavaScript debugger. You can edit projects, maintain snippets, and debug your current project.
The Sources tool is always present on the Activity Bar.
Network tool
The Network tool allows you to monitor and inspect requests or responses from the network and browser cache. You can filter requests and responses to fit your needs and simulate different network conditions.
See Inspect network activity.
Performance tool
See Introduction to the Performance tool.
Memory tool
See Fix memory problems.
Application tool
See View, edit, and delete cookies.
More Tools button
To add a tool to the Activity Bar, click the More tools () button.
Customize and control DevTools menu
The Customize and control DevTools () button opens a dropdown menu to:
Dock DevTools.
Dock the Activity Bar.
Select a theme.
Show keyboard shortcuts.
Change DevTools settings.
Open Device Emulation.
Toggle the Quick View panel.
Run a command.
Search for code.
Open a file.
Help button
The Help () button opens a dropdown menu that has the following items:
Documentation - Opens Microsoft Edge DevTools documentation.
Release notes - Opens What's New in Microsoft Edge DevTools.
Feedback () - Opens the Send feedback dialog. To connect with the Microsoft Edge DevTools team to report a problem or issue (or to suggest an idea), describe what happened, and include a screenshot. See Contact the Microsoft Edge DevTools team.
Close DevTools button
Click the Close DevTools () button in the upper right corner of DevTools to close DevTools and use the entire window to display the current webpage.
Features of the Quick View toolbar
Use the Quick View panel to open a second tool below or to the right of the tool that's already selected in the Activity Bar:
1. Select a tool from the Activity Bar.
2. In the Quick View toolbar, click More tools (), and then select a different tool from the list.
For example, open the Rendering tool in the Quick View panel, below the Network tool that's open in the Activity Bar:

To hide or expand Quick View, click Collapse Quick View (	) or Expand Quick View ( ), or press the Escape key.
Overview of all tools
For a summary of each tool, see Overview of all tools in About the list of tools.
Tool, tab, or panel
The words "tool", "tab", and "panel" are somewhat interchangeable. In the Command Menu, the tools are called panels; for example, the Elements tool is called the Elements panel. To switch to the Elements tool, you click the Elements tab. There's a More tools ( ) button and list used to select tools. DevTools tools are also called DevTools panels.
You can customize each of the tools, and the content of a tool can change based on the context.
About Activity Bar and Quick View tools
The More tools () button is displayed both in the Activity Bar and in the Quick View toolbar. When you open a tool from the More tools list that's located in the Activity Bar, the tool appears in the Activity Bar. When you open a tool from the More tools list in the Quick View toolbar, the tool is opened in the Quick View panel.
ﾉ Expand table
TaskStepsOpen a tool in the Activity Bar at the top of DevToolsIn the Activity Bar at the top of DevTools, click More tools (	) and then select a tool.Open a tool on the
Quick View toolbarWhen DevTools has focus, press Esc to show the Quick View toolbar if it's not shown yet. In the Quick View toolbar, click the More tools () button, and then select a tool.Move a tool from the Quick View toolbar to the Activity BarWhen DevTools has focus, press Esc to show the Quick View. In the Quick View toolbar, right-click the tool's tab, and then select Move to top Activity Bar or Move to left Activity Bar.Move a tool from the
Activity Bar to the
Quick View toolbarIn the Activity Bar, right-click the tool's tab, and then select Move to bottom Quick View or Move to side Quick View.Open a tool in its default toolbar (Activity
Bar or Quick View)When DevTools has focus, open the Command Menu by pressing Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS). Type the name of the tool, and then select a Show <tool> command.In addition to Activity Bar and Quick View tools, DevTools includes the following tools:
 The Inspect tool. See Use the Inspect tool to detect accessibility issues by hovering over the webpage.
The Device Emulation tool. See Emulate mobile devices (Device Emulation). The Command Menu. See Run commands with the Microsoft Edge DevTools Command Menu.
See also
 About the list of tools
Power tip: Use the Command Menu
DevTools provides lots of features and functionality to use with your website. You can access the different parts of DevTools in many ways, but often a fast way is to use the
Command Menu.

In the Command Menu, the tools are called "panels"; for example, the Elements tool is called the Elements panel. To switch to the Elements tool, you select the Elements tab.
1. To open the Command Menu, do either of the following:
 Click the Customize and control DevTools () button, and then select Run command.
 Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).
The Command Menu allows you to type commands to display, hide, or run features in DevTools.
2. In the Command Menu, start typing the name of a tool, such as changes, and then select a Show command, such as Show Changes. The Command Menu displays the matching commands:

3. Press Enter to select a Show command, such as Show Changes. The selected tool opens in the Quick View panel, at the bottom:

The Changes tool is useful when you edit CSS. In this example, the Command
	Menu provides a fast alternative to selecting More tools (	) and then selecting
Changes. This example also provides an alternative to editing a .js file in the Sources tool, and then right-clicking and selecting Local modifications.
See also Run commands with the Microsoft Edge DevTools Command menu.
Customizing DevTools
You can customize DevTools to meet your needs for the way you work. To change settings, click the Customize and control DevTools () button, and then select Settings (), or press F1.
In the Settings > Preferences page, you can change several parts of DevTools. For example, you can use the Browser UI language setting to use the same language in DevTools that is used in your browser. For another example, use the Theme setting to change the color theme of DevTools.

You can also change the settings of advanced features, such as:
Add local files to a Workspace.
Filter library code by using the Ignore List.
Define the Devices you want to include in the device simulation and test mode. For more information, see Emulate mobile devices (Device Emulation).
Select a network Throttling profile.
Define simulated Locations.
Customize keyboard Shortcuts. For example, to use the same shortcuts in DevTools as in Visual Studio Code, select Match shortcuts from preset > Visual Studio Code.

Trying experimental features
The DevTools team provides new features as experiments in DevTools. You can turn each of the experiments on or off. To see the full list of Experimental features in Microsoft Edge DevTools, in DevTools, select Settings (), and then select Experiments.
To preview the latest features coming to DevTools, download Microsoft Edge Canary, which builds nightly.
See also:
Experimental features
What's New in Microsoft Edge DevTools
See also
About the list of tools
Inspect and change the current webpage
Emulate how your product behaves on different devices
Inspect, tweak, and change the styles of elements
Debug your JavaScript
Live console
Accessibility, performance, compatibility, and security issues
Inspect the network traffic
Inspect where the browser stored content
Evaluate the performance
Memory problems
Rendering issues
Use a development environment
Sync changes in DevTools with the file system
Override files from the web

Feedback
Was this page helpful?  Yes  No

What's New in Microsoft Edge DevTools
Article • 04/22/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
What's New articles correspond to historical releases of Microsoft Edge, and are not updated over time. References to "new features" and "experiments" might become outdated as new versions of Microsoft Edge are released.
See also
What's New in DevTools archive
Experimental features in Microsoft Edge DevTools
What's New in DevTools (Microsoft Edge 132)
Article • 01/17/2025
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
CSS selector costs now include links in the
Insights sidebar
The left sidebar in the Performance tool displays the costs of CSS selectors in the Insights tab when the Enable CSS selector stats (slow) checkbox is enabled. Now, the selectors have links to the stylesheets that contain them.
Some selectors might have more than one link when they are defined in multiple locations in a stylesheet or defined in multiple stylesheets. For example, two links will be shown as [1], [2]. Selectors from user agent stylesheets or dynamically created stylesheets won't have links.

See also:
 View CSS selector costs in the Performance tool sidebar in What's New in DevTools (Microsoft Edge 131).
Move a tab left or right in the Quick View toolbar by right-clicking it
Previously, you could rearrange the tabs in Quick View only by dragging them. This can be difficult for users who are using input devices such as a trackball or head pointer. Now, you can also move a tab left or right by right-clicking the tab and then selecting Move left or Move right:

See also:
 Pin and rearrange tools in the Activity Bar in Overview of DevTools.
Heap snapshot objects are categorized by constructor names and source locations in the Memory tool
Before, when JavaScript objects in the heap snapshot Summary view were grouped by the names of their constructors, it was possible for distinct constructors to have the same name, meaning unrelated objects could end up in the same group.
Now, JS objects are grouped together based on their constructor names and source locations.
See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Announcements from the Chromium project
Microsoft Edge 132 also includes the following updates from the Chromium project:
Manage extension storage in Application > Storage
Performance improvements
Interaction phases in live metrics
Render blocking information in the Summary tab
Support for scheduler.postTask events and their initiator arrows
Animations panel and Elements > Styles tab improvements
Jump from Elements > Styles to Animations
Real-time updates in Computed tab
Compute pressure emulation in Sensors
JS objects with the same name grouped by source in the Memory panel A new look for settings
Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 131)
Article • 12/13/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Visual Studio Code themes are removed
The Visual Studio Code themes feature is now deprecated. These themes will revert to the System preference theme by default. The Light+ and Dark+ themes continue to be supported. To select a theme, select Customize and control DevTools > Preferences > Theme drop-down menu:

See also:
 Check for contrast issues with dark theme and light theme
Edge experiment settings can be disabled
Previously, the following experiments that were enabled by default couldn't be disabled, even after clearing their checkboxes in the Settings > Experiments page and reloading DevTools:
Enable webhint
Show issues in Elements
Open source files in Visual Studio Code
This is now fixed, and you can disable these experiments.
See also:
Enable webhint in Experimental features in Microsoft Edge DevTools.
Show issues in Elements in Experimental features in Microsoft Edge DevTools. Open source files in Visual Studio Code in Experimental features in Microsoft Edge DevTools.
View CSS selector costs in the Performance tool sidebar
The left sidebar in the Performance tool displays the costs of CSS selectors in the Insights tab:

To view CSS selector costs:
1. In the Performance tool, click the Capture settings () button, and then select the Enable CSS selector stats (slow) checkbox.
2. Take a performance recording.
3. If the Insights tab isn't displayed, click the Show sidebar () button, and then click the Insights tab.
4. Click the CSS Selector costs button to expand its section.
See also:
 Analyze CSS selector performance during Recalculate Style events
Fixed edit field to exit after pressing Tab after auto-completion
Pressing the Tab key after auto-completion now exits the edit field and focuses on the next focus point. Before, pressing Tab would just indent the text.
Announcements from the Chromium project
Microsoft Edge 131 also includes the following updates from the Chromium project:
Performance panel improvements
Annotate and share performance findings
Get performance insights right in the Performance panel
Spot excessive layout shifts easier
Spot the non-composited animations
Hardware concurrency moves to Sensors
Ignore anonymous scripts and focus on your code in stack traces
Elements > Styles: Support for sideways-* writing modes for grid overlays and CSS-

Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 130)
Article • 10/21/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Detached Elements profiling type in Memory tool
The Memory tool has a new profiling type called Detached elements, which shows detached objects that are retained by a JavaScript reference:

The Detached elements profiling type shows a view of the detached nodes to help you identify memory leaks on your webpage:

See also:
 Debug DOM memory leaks with the Detached Elements feature
Improved names of JavaScript objects in heap snapshots
To help differentiate plain JavaScript objects in the Object category, they are now named and categorized based on the properties they contain. These names are also searchable if you press Ctrl+F.
See also:
 Record heap snapshots using the Memory tool
Create a collection or environment in Network
Console
Previously, in the Network Console tool, when you tried to create a new collection or environment, it was unresponsive and wouldn't save after pressing Enter. This bug is fixed and functionality has been restored.

See also:
 Compose and send web API requests using the Network Console tool
Fixed icon alignment in vertical Activity Bar
When the Activity Bar was vertical, the icons were left-aligned:

This has been fixed:

See also:
 Overview of the user interface in Overview of DevTools.
Removed circle shadow when hover over toolbar icons
Many icons in the Activity Bar and other toolbars showed an overlapping circle and square shadow when you hovered over them:

The double shadow has been removed, and the icon only shows the square shadow when you hover over it:

See also:
 Overview of the user interface in Overview of DevTools.
Performance tool tab warning icon when throttling
When throttling is enabled in Device Emulation, a warning icon is displayed in the Performance tab of the toolbar to help you know that performance is impacted by throttling:

See also:
 Throttle the network and CPU in Emulate mobile devices (Device Emulation).
Console's Warnings count button has increased contrast
In the Console tool, the Warning count expander button on warning messages in the Console previously didn't meet the standard luminosity ratio of 3:1.

This has now been fixed; the Warning count expander button has a higher luminosity ratio:

See also:
 Inspect and filter information on the current webpage in Console overview.
Announcements from the Chromium project
Microsoft Edge 130 also includes the following updates from the Chromium project:
Network panel improvements
Network filters reimagined
HAR exports now exclude sensitive data by default
Elements panel improvements
Autocomplete values for text-emphasis-* properties
Scroll overflows marked with a badge
Bare declarations after nested rules don't "shift up"
Performance panel improvements

Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 129)
Article • 09/30/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Improvements for breakpoints
The Sources tool has the following improvements related to setting breakpoints for debugging.
Unique icons for logpoint and conditional breakpoints
Logpoint and conditional breakpoints now have unique colors and icons to help you differentiate them from regular breakpoints in the line number column. Previously, all types of breakpoints looked the same, with only the differentiating icon inline with the code.
Before:

After:

Alignment in UI for setting a conditional breakpoint
The UI that's displayed for setting a conditional breakpoint has been fixed to prevent the width of the textbox from growing and causing alignment issues.
Before:

After:

Bug fixes in the Elements tool
Screen readers announce the "Show element in the Elements panel" button
In the Layout tab, screen readers now announce the Show element in the Elements panel () button that's next to each element name:

Context menu opens when right-click a selected text node in the
DOM tree
Previously, the context menu didn't open after double-clicking a text node in the DOM tree to select the text node, and then right-clicking the text node. This issue has been fixed; the context menu opens:

CSS selector stats "Copy table" has same order of columns and values
In the Selector stats tab of the Performance tool, the Copy table menuitem command has been fixed to correctly copy the data in the order that the columns and values appear.

Icons in the Activity Bar are restored
In recent releases, in the Activity Bar tabs, the icons were missing for the following tools:
Changes
Network conditions
Network request blocking
Performance monitor
Quick source Search
The icons have been restored in these Activity Bar tabs.
Fixed buttons and icons in the Security tool
Previously, buttons and icons in the Security tool had a square overlay and were not readable:

Now, buttons and icons in the Security tool are clearly visible:

Device emulation mode is fixed
Device emulation mode had a bug where if it was turned on and then DevTools was closed, DevTools wouldn't reopen the next time you tried to open it. This has been fixed; device emulation mode is working correctly.
Announcements from the Chromium project
Microsoft Edge 129 also includes the following updates from the Chromium project:
Recorder supports export to Puppeteer for Firefox
Performance panel improvements
Live metrics observations
Search requests in the Network track
See stack traces of performance.mark and performance.measure calls
Elements panel improvements
Force more states for specific elements
Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 128)
Article • 08/29/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Updated labels for CSS selector stats
In the Performance tool, the duplicate Selector Stats label has been removed from the Recalculate Style event details.
The Enable advanced rendering instrumentation (slow) checkbox has been renamed to Enable advanced paint instrumentation (slow). Selecting this checkbox now only turns on paint instrumentation, and no longer turns on CSS selector stats as well. To enable gathering CSS selector stats, in the Performance tool, select the Capture settings () button, and then select the Enable CSS selector stats (slow) checkbox.
Before:

After:

See also:
 Analyze CSS selector performance during Recalculate Style events
Fixed whitespace in Activity Bar right-click
menus
In recent versions of Microsoft Edge, some context menus in the Activity Bar displayed empty whitespace in the header area at the top:

The top of each context menu now shows the title again:

Heap snapshot improvements
In the Memory tool, there are several improvements for heap snapshots:
Generating heap snapshots is now faster.
HTML elements are grouped by tag name, such as <body>, <div>, or <img>.
Shallow sizes now match JavaScript semantics better, by showing fewer internal objects (unless you select the Show option to expose internals in heap snapshots experiment checkbox and then, before taking a snapshot, select the Expose internals (includes additional implementation-specific details) checkbox).
 The Include numerical values in capture checkbox (shown before you take a heap snapshot) has been removed, and heap snapshots now always show numeric values.
See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
View WebSocket message activities in the Performance tool
WebSocket activities have been added to the Network track in the Performance tool, to help correlate JavaScript activity with WebSocket messages. This can help identify whether latency issues are coming from the client's parsing of a message, or from the server's response.
See also:
 Introduction to the Performance tool
Announcements from the Chromium project
Microsoft Edge 128 also includes the following updates from the Chromium project:
Performance panel updates
Enhanced Network track
Customized performance data with extensibility API Details in the Timings track
Copy all listed requests in the Network panel
Faster heap snapshots with named HTML tags and less clutter
Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 127)
Article • 08/01/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Use Copilot to explain HTML and CSS in the
Elements tool
You can use Copilot in the Microsoft Edge Sidebar to explain HTML elements and CSS styles to help you better understand a particular element or style rule that's displayed in the Elements tool. When the experiment is enabled, you can ask Copilot about an element or style rule by clicking the Copilot button next to it and then asking follow-up questions.

To enable this experiment, go to DevTools > Customize and control DevTools (...) > Settings > Experiments, and then select the Enable CSS Copilot checkbox. This experiment is not available when the Sidebar is turned off.
See also:
 Enable CSS Copilot in Experimental features in Microsoft Edge DevTools.
Announcements from the Chromium project
Microsoft Edge 127 also includes the following updates from the Chromium project:
Inspect CSS anchor positioning in the Elements panel
Sources panel improvements
Enhanced 'Never Pause Here'
New scroll snap event listeners
Network panel improvements
Updated network throttling presets
Feedback
Was this page helpful? 
What's New in DevTools (Microsoft Edge 126)
Article • 06/14/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Icons for browser extensions are displayed instead of blank squares
In the DevTools Activity Bar in previous versions of Microsoft Edge, there was a bug where the tab for some browser extensions was missing an icon. For example, when the React extension was activated, the icon for the extension in the Activity Bar was displayed as a grey box.
This issue has been fixed; icons for browser extensions are correctly displayed in the Activity Bar.

The DevTools UI in Chinese has changed back to the original font
In recent versions of Microsoft Edge, when the DevTools UI language was set to Chinese, a new default font was displayed. Per user feedback, the default font has been changed back to the familiar font.
Announcements from the Chromium project
Microsoft Edge 126 also includes the following updates from the Chromium project:
Performance panel improvements
Move and hide tracks with updated track configuration mode
Ignore scripts in the flame chart
Throttle down the CPU by 20 times
Paste entire header strings to override them
Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 125)
Article • 05/20/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
New dedicated setting for CSS Selector Stats in
Performance tool
In the Performance tool, the Enable advanced rendering instrumentation (slow) checkbox has been replaced by the Enable CSS selector stats checkbox. This checkbox controls the CSS selector statistics feature.

To record a performance trace with selector stats, select the Enable CSS selector stats checkbox, and then record a performance trace. To view the statistics for a single event, select a Recalculate Style event in your recording, and then open the Selector Stats tab.
The Selector Stats tab has the following changes:
 The Elapsed column is sorted from high to low by default, to help you find the most time-consuming CSS selectors.
 The Fast Reject Count column has been replaced by the % of slow-path nonmatches column.
 The unit of time has been changed from microseconds to milliseconds.
See also:
 Analyze CSS selector performance during Recalculate Style events
The "Edit and Resend" function has been restored in the Network tool
In previous versions of Microsoft Edge, right-clicking on a network request you want to change and resend, and then selecting Edit and Resend was unresponsive and had no effect. This issue has been resolved, and Edit and Resend works as expected.

See also:
 Opening the Network Console tool from within the Network tool in Compose and send web API requests using the Network Console tool.
Announcements from the Chromium project
Microsoft Edge 125 also includes the following updates from the Chromium project:
@position-try rules support in Elements > Styles
Sources panel improvements
Configure automatic pretty-printing and bracket closing
Handled rejected promises are recognized as caught
Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 124)
Article • 11/15/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
postMessage events and handlers are distinguished from other events
The new experiment Timeline: Show postMessage dispatch and handling flows improves the Performance tool's Main section to help you quickly identify postMessage events and handlers, by distinguishing events that are triggered by the postMessage method from other events that are displayed in the Performance tool. This experiment helps you investigate performance issues that are related to posting messages across various threads of an application, to view messages between windows, iframes, and dedicated workers.
Without this experiment, events that are triggered by dispatching and handling messages between threads of an application appear as generic scripting function-call events. With this experiment enabled:
postMessage dispatch events appear as Schedule postMessage. postMessage handler events appear as On Message:
This experiment helps you investigate when a postMessage call occurred, and how long the message was queued before the postMessage handler starts. The dispatch events are linked to handler events by initiator arrows that appear when you click on either type of event:

To use this feature, in DevTools, select Customize and control DevTools () > Settings > Experiments, select the checkbox Timeline: Show postMessage dispatch and handling flows, click the Close (X) button, and then click the Reload DevTools button.
See also:
 View messages between windows, iframes, and dedicated workers in Performance features reference.
postMessage Trace Events demo (rendered) postMessage Trace Events demo (source code)
Move a tab left or right in the Activity bar by right-clicking it
Before Microsoft Edge 124, you could rearrange the tabs in the Activity bar only by dragging them. This can be difficult for users who are using input devices such as a trackball or head pointer. Now, you can also move a tab left or right by right-clicking the tab and then selecting Move left or Move right:

See also:
 Pin and rearrange tools in the Activity Bar in Overview of DevTools.
Network tab shows a warning icon when using overrides or throttling
Recent releases stopped showing a warning icon in the Network tool's tab when using overrides or throttling. This issue has been fixed. When you enable local overrides in the Sources tool, the Network tab now displays a warning icon:

Also, when you turn on throttling in the Network tool, the Network tab now displays a warning icon:

See also:
Override webpage resources with local copies (Overrides tab)
Emulate slow network connections in Network features reference.
Announcements from the Chromium project
Microsoft Edge 124 also includes the following updates from the Chromium project:
Enhanced network throttling for WebRTC
Scroll-driven animations support in the Animations panel
Improved CSS nesting support in Elements > Styles
Enhanced Performance panel
Hide functions and their children in the flame chart
Arrows from selected initiators to events they initiated
Tooltips for special categories in Memory > Heap snapshots
Application > Storage updates
Bytes used for shared storage
Web SQL is fully deprecated
Coverage panel improvements
Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 123)
Article • 03/27/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Memory tool reports backing store sizes as part of an object's shallow size
Microsoft Edge 123 adds a new experiment called In heap snapshots, treat backing store size as part of the containing object. If you enable this experiment, the Memory tool reports shallow sizes in a way that more closely matches JavaScript behavior. By enabling this experiment, containers and their contents can now be represented as a single item, such as:
An Object and its properties.
An Array and its contents.
A Map and its contents.
A Set and its contents.
For example, to find the largest arrays, you can sort Array instances by shallow size, as shown below.
Default behavior for heap snapshots:

Heap snapshots with the new experiment enabled:

This experiment is helpful because heap snapshots in the Memory tool show a complete list of everything allocated in the V8 and Blink heaps. Sometimes that list is a little too fine-grained, breaking out an item as if it is multiple items. For example, the list in the heap snapshot represents each JavaScript Array instance separately from the contents of that Array, which are called (object elements)[]. However, in JavaScript code, an
Array is a single entity, rather than an array instance and separate contents of the array.
See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Crash analyzer tool is available by default
The Crash analyzer tool is now available by default, and is no longer an experiment that needs to be enabled. To open the Crash analyzer tool, in the Activity Bar, click the More tools (+) menu, and then select Crash analyzer.
The Crash analyzer tool helps you create a JavaScript stack trace, and applies your sourcemaps to the stack trace so that you can debug faster:

See also:
 Crash analyzer tool
Command Palette experimental feature has been removed
The Command Palette experimental feature has been removed from Microsoft Edge, starting with version 123.
See also:
Introducing the Command Palette in What's New in DevTools (Microsoft Edge 106).
New keyboard shortcut for the Command Palette experiment in What's New in DevTools (Microsoft Edge 107).
 Improved DevTools navigation via Command Palette in What's New in DevTools (Microsoft Edge 108).
 Navigate directly to the Styles and Computed Styles tabs of the Elements tool in What's New in DevTools (Microsoft Edge 109).
Undocked DevTools window is kept focused as the topmost window while inspecting a page
When DevTools was undocked into its own separate window, and you selected a webpage element to inspect, the DevTools window lost focus and was obscured by the webpage being analyzed. This bug has been resolved, and the DevTools window stays in focus as the topmost window.
See also:
 Change DevTools placement (Undock, Dock to bottom, Dock to left)
Announcements from the Chromium project
Microsoft Edge 123 also includes the following updates from the Chromium project:
Elements panel updates
Emulate a focused page in Elements > Styles
Color picker, Angle Clock, and Easing Editor in var() fallbacks
CSS length tool is deprecated
Popover for the selected search result in the Performance > Main track
Network panel updates
Clear button and search filter in the Network > EventStream tab
   Tooltips with exemption reasons for third-party cookies in Network > Cookies Enable and disable all breakpoints in Sources
Feedback
Was this page helpful? 
What's New in DevTools archive
Article • 04/22/2024
The What's New entries in this section of the table of contents cover older releases.
See also
What's New in Microsoft Edge DevTools
Experimental features in Microsoft Edge DevTools

What's New in DevTools (Microsoft Edge 122)
Article • 02/26/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Copilot's explanation of Console errors includes a suggested fix
When using Copilot to help explain errors that are shown in the Console, a Possible solution section has been added, below the error explanation:

Keyboard shortcut to move through the open tools is working correctly
In previous releases, when pressing the Ctrl+] and Ctrl+[ keyboard shortcuts, the next tool's tab in the Activity Bar wasn't selected and the Activity Bar wouldn't update, so it looked like the previous tool was still selected, even though the content of the panel changed to show the correct content for the next tool. For example, suppose that initially, the Elements tool's tab and panel content are displayed:

After pressing Ctrl+] or Ctrl+[ to move through the tool tabs on the Activity Bar, the Elements tab remained highlighted, incorrectly, although the Network tool's content was correctly displayed:

This issue has been fixed in Microsoft Edge 122; the correct tool tab is highlighted.
Icons are displayed correctly in high-contrast
mode
When using high-contrast mode, icons were missing, had the wrong background color, or didn't work, throughout DevTools. In Microsoft Edge 122, these icons are correctly displayed in high-contrast mode.
Announcements from the Chromium project
Microsoft Edge 122 also includes the following updates from the Chromium project:
The official collection of Recorder extensions is live
Network improvements
Failure reason in the Status column
Improved Copy submenu
Performance improvements
Breadcrumbs in the Timeline
Event initiators in the Main track
Elements improvements
The align-content property support for block containers
New shortcut and command in Sources
Posture support for emulated foldable devices
Dynamic theming
Third-party cookies phaseout warnings in the Network and Application panels
Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 121)
Article • 01/26/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Z-index and DOM tabs in 3D View tool are now working
In recent versions of Microsoft Edge, there was a bug in the 3D View tool that caused the Z-index and DOM tabs to not work correctly. The tabs would crash or freeze and show the content for the Composited Layers tab instead. This issue has been fixed in Microsoft Edge 121:

See also:
 Navigate webpage layers, z-index, and DOM using the 3D View tool
Correct Hide debugger or Show debugger icon is shown in Sources tool
The icon used to collapse or expand the Debugger pane on the right in the Sources tool was incorrect. The Hide debugger icon was displayed instead of the Show debugger icon, and vice versa:

In Microsoft Edge 121, the correct icon is now shown:

See also:
 Sources tool overview
Added source map support in the Coverage tool
Before Microsoft Edge 121, the Coverage tool only displayed information for generated files, and omitted source files even when a source map was attached. The Coverage tool has now been improved so that when a generated file has a source map attached, the Coverage tool displays information for the source file as well as for the generated file.
For example, before Microsoft Edge 121, the coverage report for the Slow Calendar demo page contained only a single, static line, for the bundle.js file. The bundle.js line in the coverage report can now be expanded to show all of the original source files that make up this compiled bundle.js file:
See also:
 Find unused JavaScript and CSS code with the Coverage tool
Advanced filtering capabilities in the Bottom-
Up, Call Tree, and Event Log tabs in the Performance tool
In the Performance tool, the following advanced filtering buttons were added to the Bottom-Up, Call Tree, and Event Log tabs:
 Match Case.

Also, in the Bottom-Up tab, the filter has been updated to now only apply to the toplevel items, instead of matching every node.
See also:
 Introduction to the Performance tool
Tooling for PWA Window Controls Overlay
The Application tool has a new Window Controls Overlay section under Manifest, to help PWA developers see a preview of how their application handles window controls, without having to install the PWA and make the styling changes that are necessary to accommodate window controls:

Use the Window Controls Overlay section to emulate window controls for Windows, Linux, and macOS.
See also:
Simulate the Window Controls Overlay API without installing your PWA
Display content in the title bar area using Window Controls Overlay Application tool, to manage storage
Announcements from the Chromium project
Microsoft Edge 121 also includes the following updates from the Chromium project:
Elements improvements
@font-palette-values support
Supported case: Custom property as a fallback of another custom property
Improved source map support
Performance panel improvements
Enhanced Interactions track
Advanced filtering in Bottom-Up, Call Tree, and Event Log tabs
Indentation markers in the Sources panel
Helpful tooltips for overridden headers and content in the Network panel
New Command Menu options for adding and removing request blocking patterns
The CSP violations experiment is removed
Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 120)
Article • 03/22/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
DevTools has a new user interface
DevTools has a new look, starting with Microsoft Edge 120! The major design updates are:
The new Activity Bar with icons.
The Quick View panel in place of the Drawer at the bottom of DevTools.
The Activity Bar and Quick View can be switched to a vertical orientation.
You can easily open, close, and move tools around.

If you prefer the legacy UI, you can switch back by going to DevTools > Settings > Preferences and selecting the Switch back to the legacy DevTools UI checkbox. After reloading DevTools, the legacy UI appears.
The "Explain with Copilot in DevTools" feature is generally available
You can now ask DevTools to explain any Console error, Console warning, or code snippet by using Copilot in Edge:

This feature is enabled by default, starting with Microsoft Edge 120. See the blog post:
Navigate the unexpected: using Copilot in Edge and DevTools.
If you don't see the feature, you might need to enable Copilot in Edge first. To learn more, see:
Explain Console errors and warnings using Copilot in Edge Explain source code using Copilot in Edge
If you have any questions, comments, or feedback about the feature, please leave a comment in the GitHub Issue: [Feedback][Experiment] Explain errors, warnings, and source code in the Console and Sources tools.
New Recorder tool to record and replay user flows and measure performance
Use the Recorder tool to help you record and replay common user flows and measure performance. You can edit your recordings and share them by importing and exporting.
The initial view in the Recorder tool gives an overview of how to use the tool:

After you click the Create a new recording button, you can name the recording and specify a selector attribute:

During recording, interactions with the webpage are listed:

See also:
 Record and replay user flows and measure performance
Announcements from the Chromium project
Microsoft Edge 120 also includes the following updates from the Chromium project:
Third-party cookie phaseout
Analyze your website's cookies with the Privacy Sandbox Analysis Tool
Enhanced ignore listing
Default exclusion pattern for node_modules
Exceptions now stop execution if caught or passing through non-ignored code x_google_ignoreList renamed to ignoreList in source maps
The Elements panel now shows URLs for #document nodes
Effective Content Security Policy in the Application panel
Improved animation debugging
'Do you trust this code?' dialog in Sources and self-XSS warning in Console
Event listener breakpoints in web workers and worklets
The new media badge for <audio> and <video>
Preloading renamed to Speculative loading
Accessibility improvements

Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 119)
Article • 12/22/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Increased text color contrast for Error pills
(badges) in the Issues tool
Before Microsoft Edge 119, users with low vision might face difficulties with the color contrast ratio for the orange oval Error pills (or badges) in the Issues tool. The contrast ratio between the foreground color and background color has been increased, to meet the Web Content Accessibility Guidelines for minimum contrast:

See also:
Contrast (Minimum)
Find and fix problems using the Issues tool
Increased text color contrast for tree items on the left side of the Application tool
While navigating or hovering over a tree item in the left part of the Application tool, the tree item wasn't clearly visible, which might impact users with low vision, or keyboard users. The text color is now darker, and the tree item is now clearly visible when selected:

See also:
 Application tool, to manage storage
Announcements from the Chromium project
Microsoft Edge 119 also includes the following updates from the Chromium project:
Improved @property section in Elements > Styles Editable @property rule
Issues with invalid @property rules are reported
Updated list of devices to emulate
Pretty-print inline JSON in script tags in Sources
Autocomplete private fields in Console
Accessibility improvements
Web SQL deprecation
Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 118)
Article • 12/21/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Updates to the "Explain Console errors using
Copilot in Sidebar" experiment
A recent experimental feature explains errors or warnings that are listed in the DevTools
Console by using Microsoft Copilot in the Microsoft Edge Sidebar. In Microsoft Edge 118, this feature has the following updates.
Updated icon and tooltip on each error
In Console error entries, the Copilot chat icon has been updated, and the tooltip text has been updated to ask Copilot: "Explain this error":

Consent dialog
The first time you use the "explain Console errors using Copilot" feature, a consent dialog now appears, titled Allow Microsoft to access page content, containing a Confirm and continue chatting button:

Chat includes error message and stack info
The chat prompt now includes the error message and stack information.
Enabling the experimental feature
To enable the "explain Console errors using Copilot" feature, do either of the following:
 In Microsoft Edge, go to edge://flags/, find the Explain DevTools with AI section, select Enabled in the drop-down menu, and then click the Restart button.
Start Microsoft Edge from the command line using the feature flag msEdgeAIExplainConsoleError.
See also:
 Explain DevTools Console errors and source code using Copilot in Edge
Announcements from the Chromium project
Microsoft Edge 118 also includes the following updates from the Chromium project:
More local overrides improvements
Enhanced search
Improved Sources panel
Streamlined workspace in the Sources panel
Reorder panes in Sources
Syntax highlighting and pretty-printing for more script types
Emulate prefers-reduced-transparency media feature Accessibility improvements

Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 117)
Article • 12/20/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
New experiment: Explain console errors/warnings with Copilot in Sidebar
You can use Microsoft Copilot in the Microsoft Edge Sidebar to explain DevTools console errors. If the Sidebar is enabled in Microsoft Edge, you can search for or explain console errors using Microsoft Copilot in the Sidebar, by clicking the Explain this message in sidebar button next to a message in the Console:

This feature is available as an experiment starting in Microsoft Edge 117. This feature is not available when the Sidebar is turned off.
By default, this experiment is turned off. To enable this experiment, specify the feature flag msEdgeAIExplainConsoleError; for example, run Microsoft Edge from the command line using the enable-features command-line option, as follows:
msedge.exe --enable-features=msEdgeAIExplainConsoleErrorOr, go to edge://flags and toggle the flag Explain DevTools with AI.
See also:
Explain Console errors and warnings using Copilot in Edge
Explain source code using Copilot in Edge
Console has content when re-opened in Quick View
Before Microsoft Edge 117, the Console was blank after closing and then re-opening the Console tool in Quick View (the secondary toolbar and panel in Focus Mode). This issue has been resolved; the Console re-opens with the expected content.
Accessibility fixes
In Microsoft Edge 117, the following accessibility issues have been addressed:
 In the High Contrast theme, updated the hover color for the Move Activity Bar button, the Help button, and the Customize and control DevTools (...) button, for consistency with other buttons.
 In the Memory tool, improved the High Contrast theme, so that all heap snapshot information is more visible.
 Fixed the Narrator in the Issues tool, to announce the correct size and position for each level.
 Fixed the keyboard focus for screen readers, so that when you click a source-code link in the Issues tool, the relevant code has focus in the Elements tool.
Announcements from the Chromium project
Microsoft Edge 117 also includes the following updates from the Chromium project:
Network panel improvements
Override web content locally even faster
Override the content of XHR and fetch requests
Hide Chrome extension requests
Human-readable HTTP status codes
Pretty-print responses for JSON subtypes
Performance: See the changes in fetch priority for network events
Sources settings enabled by default: Code folding and automatic file reveal
Improved debugging of third-party cookie issues
Debug preloading in the Application panel
The C/C++ WebAssembly debugging extension for DevTools is now open source New experimental features
Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 116)
Article • 10/23/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
New "Move Activity Bar" button directly on the
Activity Bar
In Focus Mode, you now can quickly move the Activity Bar with a single mouse-click. In the upper left of DevTools, next to the Inspect button and Device Emulation button, there's now a Move Activity Bar to left or Move Activity Bar to top button:


For example, by default, the Activity Bar is horizontal, but you can change it to vertical by simply clicking the new Move Activity Bar to left button in the Activity Bar, instead of having to go into the DevTools Settings (...) menu.
See also:
 What's New entries about Focus Mode
React Developer Tools extension retains state of tools
Prior to Microsoft Edge 116, if you were in Focus Mode while using the React Developer Tools extension, the state of a tool in DevTools wasn't maintained when you switched to another tool and then switched back. This issue has been fixed.
See also:
React Developer Tools - extension at the Edge Add-ons store What's New entries about Focus Mode
"Containment Diff" view in Memory tool when multiple heap snapshots
In the Memory tool, when there's more than one heap snapshot, a Containment Diff view is now available in the Perspective dropdown menu in the upper left of the Memory tool:

The Containment Diff view shows only the new objects, deleted objects, or objects in the retaining chain that will eventually lead to either a new or deleted node. The dot symbol • means that it's a node in the retaining chain. Expanding the view displays the node that's new or deleted.
For example:
1. Open the example webpage Example 9: DOM leaks bigger than expected in a new window or tab.
2. Right-click the webpage and then select Inspect. DevTools opens.
3. In the Activity Bar, select the Memory tool.
4. Click the Take heap snapshot button, in the upper left. Snapshot 1 is listed in the Profiles section.
5. In the rendered example webpage, click the Create tree button.
6. In the Memory tool, click the Take heap snapshot button again. Snapshot 2 is added in the Profiles section.
7. In the Perspective dropdown menu, instead of Summary, select Containment Diff.
8. In the Object column, expand an entry.
See also:
Record heap snapshots using the Memory tool ("Heap snapshot" profiling type) Demo webpage: Example 9: DOM leaks bigger than expected in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
Announcements from the Chromium project
Microsoft Edge 116 also includes the following updates from the Chromium project:
Improved debugging of missing stylesheets
Linear timing support in Elements > Styles > Easing Editor
Storage buckets support and metadata view
Accessibility: Keyboard commands and improved screen reading
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 115)
Article • 08/24/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Improvements for connecting DevTools to
Azure Artifacts symbol server
In Microsoft Edge 115, it's easier and more customizable to connect DevTools to Azure Artifacts symbol server. In previous versions of Microsoft Edge, to authenticate to the symbol server, you had to generate Personal Access Tokens (PATs) in Azure DevOps and then paste them into DevTools. Now, as long as you're logged into Microsoft Edge using a work account, you can connect to the symbol server by using Microsoft Entra ID.
Additionally, you can now connect to multiple symbol servers, in case you need to fetch sourcemaps from different Azure DevOps organizations. You can also filter which sourcemaps you want DevTools to fetch from the symbol server, by specifying the sourcemap URLs in an inclusion or exclusion list.

The message An Azure DevOps organization must be selected means double-click the organization, or click it and then press Enter.
Wildcards
In the Filter behavior text box, the following wildcards are supported:
ﾉ Expand table
WildcardMeaning?Matches a single character.*Matches one or more of any character.If you select Exclusion List, DevTools attempts to look up any source maps for scripts except those that have a URL that matches one of the entries in the list.
If you select Inclusion List, DevTools only attempts to look up source maps for scripts that have URLs that match one of the entries in the list. For example, suppose you select Inclusion List in the Filter behavior dropdown list, and then enter the following in the Filter behavior text box:
HTTPhttps://cdn.contoso.com/* https://packages.contoso.com/*In this example, DevTools only attempts to resolve source maps that match these two URL patterns, and doesn't attempt to load source maps for other scripts.
See also:
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server
 Securely debug original code by using Azure Artifacts symbol server source maps
Memory tool enhancements
In previous versions of Microsoft Edge, in the Memory tool, when using the Allocation instrumentation on timeline profiling type (later re-labelled as the Allocations on timeline option button), the Memory tool takes a sample of the heap every 50 milliseconds. However, taking a sample of the heap scales with the size of the heap, so with a heap size of 200 MB, the sample actually takes 1.5 seconds to generate. As a result, there's little time left on the main thread for your website, outside of generating heap samples. When Allocation instrumentation on timeline is running, it might look like your web content is hanging or blocked.
In Microsoft Edge 115, the sample rate for the heap now scales to the time it takes to generate a sample, freeing up the main thread so that you can interact with your web content while profiling.

Additionally, in previous versions of Microsoft Edge, heap snapshots would sometimes include objects that should have been garbage-collected (GC'd). In Microsoft Edge 115, this issue has been fixed and heap snapshots are now more accurate.
See also:
 Limit proportion of CPU time given to requestHeapStatsUpdate (4469909) · Gerrit
Code Review
 Make heap snapshots more precise (4499405) · Gerrit Code Review
Refreshed DevTools icons and buttons
In Microsoft Edge 115, the DevTools UI has gotten a makeover with new icons and buttons. For example, when debugging in the Sources tool, the current frame in the call stack is indicated by a right-pointing blue arrow. This icon is more consistent with the debugging icons in Microsoft Visual Studio and Microsoft Visual Studio Code:

In previous versions of Microsoft Edge, in the Bottom-Up view in the Performance tool, the triangle buttons for collapsing and expanding the recorded activities rendered incorrectly. In Microsoft Edge 115, this issue has been fixed and you can now expand and collapse individual activities to see which functions are calling them:

See also:
Step through code in JavaScript debugging features.
The Bottom-Up tab in Performance features reference.
Screen readers correctly announce dropdown state in Device Mode
In previous versions of Microsoft Edge, in Device Mode, screen readers incorrectly announced the state of dropdown menus as "expanded" when these menus were actually collapsed. In Microsoft Edge 115, this issue has been fixed and screen readers now correctly announce the state of dropdown menus in Device Mode as "collapsed" or "expanded":

See also:
 Emulate mobile devices (Device Emulation)
Profiling improvements for the Performance tool
When recording a profile in the Performance tool, the V8 JavaScript engine takes periodic samples of all the JavaScript functions that are running, to accurately report CPU time in the flame chart. When profiling a website that has many cross-domain iframes, these samples take a long time to collect. This results in significant overhead, slowing down the main thread, which slows down the performance of the website while profiling. In Microsoft Edge 115 on Windows, V8 collects these samples more efficiently, resulting in better site performance while profiling.
Additionally, in the Performance tool, you can now see a representation of profiler overhead in the flame chart when recording a profile. This block of time represents the CPU time that's needed to sample and parse events when recording a profile, and doesn't represent CPU time that the users of your website are actually encountering. Profiling Overhead events have been added to the flame chart to help focus your performance investigations on Compile Code and Evaluate Script events that affect your actual users, rather than events that only take time while you're profiling in the Performance tool:

See also:
 Avoid busy-waiting in sampler thread if Windows supports precise sleep (4453767)
· Gerrit Code Review
 Show V8.FinalizeDeserialization time as profiler overhead (4504370) · Gerrit Code
Review
 Issue 1428605: V8's code cache deserialization is 2-4× slower than a regular uncached compilation when CPU profiling is enabled
Announcements from the Chromium project
Microsoft Edge 115 also includes the following updates from the Chromium project:
Elements improvements New CSS subgrid badge
Selector specificity in tooltips
Values of custom CSS properties in tooltips
Sources improvements
CSS syntax highlighting
Shortcut to set conditional breakpoints
Application > Bounce Tracking Mitigations
Ignore content scripts by default
Network > Response pretty-printing by default

Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 114)
Article • 06/15/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the

Video: What's New in DevTools 113 and 114

Aggregate Selector Stats in the Performance tool
Microsoft Edge 109 added the Selector Stats feature to the Performance tool. You can use the data from Selector Stats to understand which CSS selectors are taking the most time during Recalculate Style events in the Performance tool and are contributing to slow performance.
In Microsoft Edge 114, you no longer need to select an individual Recalculate Style event to see the selectors that were recalculated during that event. Instead, the Selector Stats tab in the bottom pane of the Performance tool automatically aggregates the data across all of the Recalculate Style events in the recorded profile. As you zoom into specific parts of the profile, the Selector Stats tab updates to only show data from the portion of the profile that you are currently analyzing.
Also, a new Style Sheet column has been added to the Selector Stats tab. The Style Sheet column contains a link for each selector back to the stylesheet where the selector is defined.

Thank you for using the Selector Stats feature and sharing your feedback with us in GitHub Issue #98: [Feedback] Selector Performance Tracing Explainer!
See also:
 Analyze CSS selector performance during Recalculate Style events
GitHub Issue #98: [Feedback] Selector Performance Tracing Explainer
Debug long-running Recalculate Style events with new selector stats in What's New in DevTools (Microsoft Edge 109).
The Issues tool and Styles pane warn about CSS properties that trigger Layout
DevTools now detects and warns about CSS properties that can cause Layout-based performance issues when using CSS animation in the webpage, such as moving text. Layout is the web browser process for recalculating the positions and geometries of elements in the document, to re-render part or all of the document. Because Layout is a user-blocking operation in the browser, we recommend limiting Layout as much as possible, to keep your web content smooth and responsive to interaction.
Some CSS properties don't trigger a Layout operation, because they run on the compositor thread in the browser, such as transform and opacity. However, even CSS properties that don't trigger Layout can trigger a Paint operation which, when used in combination with CSS animations, can lead to a negative performance impact.
In the Styles pane in the Elements tool, a wavy underline and tooltip has been added on CSS properties that trigger Layout or Paint operations. To view the issue in a tooltip, hover over the wavy underline:

In the Issues tool, in the Performance category, a new kind of issue is reported, such as "Changes to this property will trigger: 'Layout', which can impact performance when used inside @Keyframes." When you're using the Styles pane, to open the issue in the Issues tool, Shift+click the wavy underline on such a property, or right-click the wavy underline and then select View issues. The Issues tool opens in the Drawer (now Quick View panel) at the bottom of DevTools:

See also:
 Minimizing browser reflow | PageSpeed Insights - reflow includes Paint, Composite, and Layout operations.
Layout in Troubleshooting common performance issues.
Open issues from the DOM tree in Find and fix problems using the Issues tool.
Using CSS animations, at MDN.
Inspect and modify CSS animation effects
The Memory tool can load enhanced traces larger than 1 GB
In previous versions of Microsoft Edge, loading an enhanced trace larger than 1 GB failed. In Microsoft Edge 114, this issue has been fixed. You can now successfully load enhanced traces of any size.
Enhanced traces is an experimental feature in Microsoft Edge that allows you to export and import entire DevTools instances, saved as .devtools files, with as much state as possible preserved across the Memory, Performance, Elements, Console, and Sources tools. A .devtools file opens in a separate DevTools instance, and loads the following trace information, while retaining references to source code:

See also:
Share enhanced performance and memory traces
GitHub Issue #122: [Feedback] Enhanced Traces experiment
The Memory tool more accurately compares two heap snapshots
In the Memory tool, you can take multiple heap snapshots and compare them to find differences in the objects in the heap. In previous versions of Microsoft Edge, the Memory tool reported too many new and deleted objects when comparing heap snapshots, because object IDs weren't being tracked consistently by the tool. Actually, many of these are likely the same objects.
In Microsoft Edge 114, this issue has been fixed, by ensuring that consistent object IDs are tracked across multiple snapshots.

See also:
 View snapshots in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
Change List 4278992: Produce consistent IDs for Oilpan objects in heap snapshots Issue 1286500: Heap snapshot comparison incorrectly reports large numbers of new and deleted objects
Accessibility improvements for the CSS Overview tool
In Microsoft Edge 112, the CSS Overview tool was updated to display a list of nonsimple selectors when taking an overview snapshot of a webpage's CSS. In Microsoft Edge 114, the Non-simple selectors section of the CSS Overview tool is now easier to use with assistive technology, such as screen readers.
When you click a selector, or navigate to a selector and then press Enter, screen readers now announce "Copied CSS selector":

See also:
 CSS Overview tool displays non-simple selectors for quick performance gains in What's New in DevTools (Microsoft Edge 112).
Non-simple selectors in Optimize CSS styles with the CSS Overview tool. Navigate DevTools with assistive technology
DevTools extension for VS Code has better support for high contrast mode
In previous versions of the Microsoft Edge DevTools extension for Visual Studio Code, in high contrast mode, hovering over icons within the tools didn't render the UI controls with sufficient contrast. This issue has been fixed.
For example, in the Styles pane in the Elements tool, checkboxes for applying styles to elements now render correctly in high contrast mode:

Also, in the Console tool, icons such as Show console sidebar now render correctly in high contrast mode:

See also:
Microsoft Edge DevTools extension for Visual Studio Code
Turn high contrast mode on or off in Windows
Announcements from the Chromium project
Microsoft Edge 114 also includes the following updates from the Chromium project:
Debug Autofill using the Elements panel and Issues tab
Lighthouse 10.1.1
Performance enhancements performance.mark() shows timing on hover in Performance > Timings profile() command populates Performance > Main
Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 113)
Article • 07/12/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the

Video: What's New in DevTools 113 and 114

Debug JavaScript error stack traces by using the Crash Analyzer tool
The new Crash analyzer tool is available as an experiment in Microsoft Edge 113. In the
Crash analyzer tool, you can input a JavaScript stack trace, such as for non-fatal JavaScript exceptions, and then have your sourcemaps applied to the stack trace so that you can debug faster.
To access the Crash analyzer tool, select the Enable Crash Analyzer experiment in Settings > Experiments. See Turning an experiment on or off.
You can report non-fatal JavaScript exceptions or similar data to tools such as Azure Application Insights:
1. First, in order to use the Crash analyzer tool, you need specially-formatted stack traces that include a section called Source modules. This section contains the sourcemap references to the JavaScript functions that were part of the error stack trace. You can produce these stack traces by using the Crash Analyzer Support npm package.
2. Then you need a way to actually receive the stack traces from the browsers that are running your code. One such way is to use Azure Application Insights; see Application Insights overview.
3. Once you have a stack trace, paste it into the left pane of the Crash analyzer tool.
4. In the Crash analyzer tool, click the Analyze button (or press Ctrl+Enter). The right-hand pane shows the original file and function names that make up the stack trace:

5. Click through the individual stack frames to see the lines in your original code that caused the error.
For more information, see Crash analyzer tool.
See also:
throw - JavaScript | MDN Web Docs
Application Insights overview
Crash Analyzer Support | npm
The Memory tool can unminify object names in heap snapshots
In Microsoft Edge 113, the Memory tool now automatically provides the original object names when taking a heap snapshot, as long as source maps are loaded. Source maps can be loaded reliably and securely by hosting them on Azure Artifacts Symbol Server.
In the following image, the minified object name e is shown in a heap snapshot in the Memory tool:

Now in Microsoft Edge 113, the Memory tool automatically unminifies object names in the heap snapshot:

See also:
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps Take a snapshot in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
The Issues tool has better support for keyboard navigation
In the Issues tool, changing the Severity or Browser filters displays an info bar at the top of the Issues tool, containing a Regenerate issues button. In previous versions of Microsoft Edge, navigating this info bar with the keyboard caused the Close button to disappear. In Microsoft Edge 113, this issue has been fixed:

See also:
Filter issues in Find and fix problems using the Issues tool
Navigate DevTools with assistive technology
In Focus Mode, hovering over a tool no longer makes the name of each tool disappear in the Activity Bar
In previous versions of Microsoft Edge, in Focus Mode, hovering over a tool's icon in the Activity Bar in horizontal mode caused the names of the other tools in the Activity Bar to disappear. In Microsoft Edge 113, this issue has been fixed. When you hover over a tool icon to see the name of the tool in a tooltip, the names of the other tools remain displayed in the Activity Bar:

The Customize DevTools menu has better support for VS Code themes
Update: Starting with Microsoft Edge 131, the Visual Studio Code themes feature is removed, and such themes revert to the default themes:
Light+
Dark+
In previous versions of Microsoft Edge, applying themes from Microsoft Visual Studio Code such as Solarized Light or Kimbie Dark caused low-contrast issues when hovering over items in the Customize and control DevTools menu. In Microsoft Edge 113, this issue has been fixed. Items in the Customize and control DevTools menu are now displayed with sufficient color contrast:

See also:
Test text-color contrast using the Color Picker
Check text-color contrast in the default state using the Inspect tool
The Node Types filter in the Memory tool now only displays in the Summary view of a heap snapshot
In Microsoft Edge 100, we added a Node Types filter to the Memory tool so you can focus only on specific types of objects, such as Array or String, when looking at a heap snapshot. This Node Types filter only applies to objects that are displayed in the Summary view of a heap snapshot.
The Node Types filter was also displayed when the Containment or Statistics views of the heap snapshot were selected, even though the filter doesn't apply to those views. This issue has been fixed. In Microsoft Edge 113, the Node Types filter is only displayed when the Summary view is selected:

In the Containment and Statistics views, the Node Types filter is no longer displayed, since it doesn't apply:

See also:
 Filter heap snapshots summary by node type in What's New in DevTools (Microsoft
Edge 100)
 Take a snapshot in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
Announcements from the Chromium project
Microsoft Edge 113 also includes the following updates from the Chromium project:
Override network response headers
Nuxt, Vite, and Rollup debugging improvements
CSS improvements in Elements > Styles
Invalid CSS properties and values
Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 112)
Article • 12/07/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 112

Performance tool unminifies JavaScript running in out-of-process iframes
In previous versions of Microsoft Edge, JavaScript execution in an out-of-process iframe (OOPIF) was isolated from DevTools. As a result, the Performance tool was not able to apply sourcemaps to performance events that are from an OOPIF. When recording a profile in the Performance tool, the tool can only display the minified file and function names in the flame chart, not the unminified names:

In Microsoft Edge 112, the Performance tool now loads sourcemaps and applies them to the performance events that are tracked in OOPIFs. As a result, after recording a profile in the Performance tool, you can now see unminified file and function names for the JavaScript execution that occurs within an OOPIF:

See also:
 Performance tool unminifies file and function names when profiling production code in What's New in DevTools (Microsoft Edge 111).
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps Record performance in Performance features reference.
CSS Overview tool displays non-simple selectors for quick performance gains
The CSS Overview tool has a new Non-simple selectors section, which displays a list of non-simple CSS selectors when you take an overview snapshot of your webpage's CSS. This list of non-simple CSS selectors in the CSS Overview tool provides a quick way to identify common culprits that might be causing long-running Recalculate Styles events:

This is a list of selectors that could possibly reduce performance. To determine whether these selectors are actually reducing performance, use the Selector Stats feature in the Performance tool.
You can try to change these selectors so that they are more specific and match fewer elements, reducing the amount of time the browser takes to calculate styles in the following cases:
When elements are added to or removed from the DOM.
When an element's attributes are changed, such as class or id.
When user input occurs, such as a mouse move or a change of focus, which can affect :hover rules.
To analyze individual CSS selector performance and analyze the impact of your changes, use the Selector Stats feature in the Performance tool.
See also:
Optimize CSS styles with the CSS Overview tool
Analyze CSS selector performance during Recalculate Style events
The JSON Viewer in Microsoft Edge supports code folding
Starting with Microsoft Edge 110, you have access to an experimental feature for viewing JSON directly in the browser: the JSON Viewer. Previously, you may have used browser extensions or text editors for viewing JSON, but now you can inspect JSON payloads directly in Microsoft Edge, whether the JSON is from the network or from disk.
Starting in Microsoft Edge 112, the JSON Viewer now supports code folding. The JSON Viewer is an experimental feature. To turn on the JSON Viewer and access code folding:
1. Go to edge://flags.
2. In the Search flags text field, start typing JSON Viewer.
3. In the JSON Viewer dropdown menu, select Enabled. A Restart button appears in the lower right.
4. Click the Restart button.
5. Go to a JSON file, such as https://microsoftedge.github.io/Demos/json-dummydata/256KB.json	. Line numbers appear on the left.
6. Click the gear () icon in the top right corner, and then select the Code folding checkbox.
With code folding turned on, you can now expand and collapse objects and arrays within the JSON you're inspecting:

Please send us your feedback!
See also:
 View formatted JSON responses or files
Focus Mode improvements
Focus Mode is a new, experimental user interface for DevTools. Focus Mode simplifies and streamlines the DevTools UI, providing maximum customizability without compromising on the robust set of features in the tools. In Microsoft Edge 112, Focus Mode received the following improvements:
Pressing Esc shows or entirely hides Quick View
In previous versions of Microsoft Edge, in Focus Mode, the Quick View panel was always displayed, as either collapsed or expanded. Pressing Esc expanded the Quick View panel if it was collapsed, and vice versa. However, when the Console tool was selected in the Activity Bar, pressing Esc when the Quick View panel was collapsed displayed a blank view. In Microsoft Edge 112, this issue has been fixed.
Pressing Esc now shows or entirely hides the Quick View panel. If the Quick View panel is currently hidden, pressing Esc shows the Quick View panel, expanded:

If the Quick View toolbar is currently displayed (whether the Quick View panel is collapsed or expanded), pressing Esc entirely hides the Quick View toolbar and panel:

The Node icon for dedicated DevTools no longer overlaps the first icon in the Activity Bar
In Focus Mode, when DevTools detects that a Node.js server is running, the Node icon is displayed. Clicking this icon opens the dedicated DevTools for Node.
Before Microsoft Edge 112, the Node icon overlaps the first tool icon when the Activity Bar is in vertical orientation, making it harder to select the first tool. This issue has now been fixed; there's no overlapping of the Node icon and the first tool icon when the Activity Bar is vertical:

With the vertical Activity Bar, only one label is shown for each tool icon when hovering
In Focus Mode, when the Activity Bar is in the vertical orientation, a tool name label is displayed when you hover over an icon or select an icon with the keyboard. These labels help you learn the icon for each tool in the Activity Bar.
Previously, selecting an icon with the keyboard or hovering over an icon with the mouse displayed two labels simultaneously. This issue has now been fixed; only one label is displayed:

Announcements from the Chromium project
Microsoft Edge 112 also includes the following updates from the Chromium project:
Elements > Styles updates
Marking logpoints and conditional breakpoints in the Console
Ignore irrelevant scripts during debugging
JavaScript Profiler deprecation started
Emulate reduced contrast
Lighthouse 10
Was this page helpful? 
What's New in DevTools (Microsoft Edge 111)
Article • 12/07/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 111

Remote debugging of Microsoft Edge, PWAs, and WebView2 controls on HoloLens 2 devices
The Remote Tools for Microsoft Edge app is now available on HoloLens 2 devices. The
Remote Tools for Microsoft Edge app is a plug-in for the Windows Device Portal for
Desktop that enables remote debugging for tabs in Microsoft Edge, Progressive Web Apps (PWAs), and WebView2 controls. By using remote debugging, you can run web content on a remote device and debug it right from your development machine.

With remote debugging enabled, you don't need to open DevTools on HoloLens 2 devices any more. Instead, you can connect to the remote HoloLens 2 device using the
Device portal, open the edge://inspect page, and then select the target (tab, PWA, or WebView2 control) that you want to use with DevTools.
To give us feedback on the remote debugging flow for Microsoft Edge, leave a comment in Issue 136: Remote debugging HoloLens 2 devices is now available with the latest version of the Remote Tools for Microsoft Edge app.
See also:
Remotely debug Windows devices
Windows Device Portal for Desktop
Remote debugging HoloLens 2 WebView2 WinUI 2 (UWP) apps
Device Mode toolbar has emulation controls for themes and vision deficiencies
In previous versions of Microsoft Edge, to emulate different themes or vision deficiencies, you would use the Rendering tool to, for example, emulate Achromatopsia, which is when the user is unable to perceive any color.
In Microsoft Edge 111, you can now access these theme and vision deficiency emulation controls directly from the Device Mode toolbar, in addition to using the Rendering tool.
For example, to emulate high contrast mode and test how your web content responds:
1. In the Device Mode toolbar, to the right of the Throttling dropdown list, click Emulate Media Features (the Eyedropper icon, ).
2. Select forced-colors: active:

You can also emulate vision deficiencies by clicking the Eye icon next to the Eyedropper icon. For example, to emulate blurred vision:
1. Click Emulate Vision Deficiency (the eye icon, ).
2. Select Blurred vision:

See also:
Emulate mobile devices (Device Emulation)
Check for contrast issues with dark theme and light theme Emulate vision deficiencies
Performance tool unminifies file and function names when profiling production code
Microsoft Edge 99 added a new feature to the Performance tool called Unminify. This
Unminify feature applied sourcemaps to a profile that was recorded with the
Performance tool, and then downloaded the unminified profile to your machine. The Unminify feature is described in Use your source maps to display original function names in performance profiles in What's New in DevTools (Microsoft Edge 99).
In Microsoft Edge 111, this feature has been removed, because the Performance tool now automatically provides the original file and function names while profiling production code, as long as source maps are loaded. Source maps can be loaded reliably and securely by hosting them on Azure Artifacts Symbol Server.
In the following image, you see minified function names in the flame chart when profiling production code:

Now in Microsoft Edge 111, the Performance tool automatically unminifies function names in the flame chart when profiling production code:

See also:
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps Record performance in Performance features reference.
The Styles pane is easier to use in Focus Mode
In previous versions of Microsoft Edge, in Focus Mode, the Elements tool didn't provide an easy way to access all of the tabs within the Styles pane. In Microsoft Edge 111, this issue has been fixed. When the Styles pane has a narrow viewport and can't display all of the other available tabs, click the More tabs expander icon ( ):

To display only a few of the tabs within the Styles pane, click the More tabs collapser icon ( ):

See also:
 CSS features reference
Copy Selector Stats table from Performance tool to Excel
Microsoft Edge 109 introduced the Selector Stats feature in the Performance tool. With the Enable advanced rendering instrumentation (slow) setting turned on in the Performance tool, selecting any Recalculate Styles event in the flame chart adds a Selector Stats tab in the bottom pane. See Debug long-running Recalculate Style events with new selector stats in What's New in DevTools (Microsoft Edge 109).
In Microsoft Edge 111, you can now export the Selector Stats table for each Recalculate Styles event to a Microsoft Excel workbook. You can then use Excel to do aggregate selector performance analysis, and identify the most costly selectors over the lifetime of the profile.
To export the Selector Stats table:
1. Click the upper left cell with the mouse, and then drag to select to the bottom right cell.
2. Right-click the table, and then select Copy. Or, press Ctrl+C (Windows, Linux) or Command+C (macOS).
3. Paste the table into Excel.

See also:
 Analyze CSS selector performance during Recalculate Style events
In Focus Mode, assistive technology announces when you move a tool to Quick View
In previous versions of Microsoft Edge, assistive technology, such as screen readers, didn't announce confirmation when moving a tool from the Activity Bar to the Quick View toolbar. In Microsoft Edge 111, this issue has been fixed. Screen readers now announce "Successfully added Network to Quick View" when you move the Network tool from the Activity Bar to the Quick View toolbar:

See also:
 Navigate DevTools with assistive technology
Announcements from the Chromium project
Microsoft Edge 111 also includes the following updates from the Chromium project:
Debugging HD color with the Styles pane
Enhanced breakpoint UX
Better syntax highlight for Angular
 Reorganize caches in the Application panel

Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 110)
Article • 12/07/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 110

Taking heap snapshots in the Memory tool is now faster
In previous versions of Microsoft Edge, generating large heap snapshots (over 1 GB) in the Memory tool could take anywhere from 2 to 15 minutes, depending on the size of your website or app, and how many elements were stored in memory.
In Microsoft Edge 110, the Memory tool is now 70% to 86% faster at taking heap snapshots. For larger heap snapshots, we're seeing the greatest improvement in speed. If you've noticed that taking heap snapshots is much faster, please leave us feedback in [Feedback] Taking heap snapshots in the Memory tool is now faster #131.

See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Move tools between the Activity Bar and Quick View more easily in Focus Mode
Microsoft Edge 110 contains various improvements to Focus Mode in DevTools. The following changes make it easier to customize the Activity Bar and the Quick View panel, to show only the tools that you're currently interested in.
When moving a tool, the right-click menu shows the current placement of the destination toolbar
The right-click menu command for moving a tool between the Quick View panel and the Activity Bar now indicates the placement of the destination toolbar, such as:
Move to bottom Quick View
Move to side Quick View
Move to top Activity Bar Move to left Activity Bar

The right-click menu is no longer displayed over the tool's tab in the toolbar
The right-click menu for moving a tool between the Activity Bar and the Quick View toolbar no longer obscures the tool's name in the toolbar.
For example, the Network Conditions tool name remains visible when you right-click the tool's tab in the Quick View toolbar:

As another example, the Network tool name remains visible when you right-click the tool's tab in the Activity Bar:

Focus is preserved in Activity Bar or Quick View when moving a tool between them
For keyboard shortcut and assistive technology users, focus is preserved in the Activity Bar or Quick View toolbar when moving the currently selected tool from one toolbar to the other, or when removing a tool from the toolbar.
For example, suppose the Network tool has been moved to the Quick View toolbar, and you right-click the Network tab on the Quick View toolbar:

If you then select Remove from Quick View, focus stays in the Quick View toolbar and moves to the Network conditions tool, which is the next tool in the Quick View toolbar:

Accessibility improvements for themes, customizing locations, and the More Tools button
The following accessibility issues have been fixed, and using assistive technology such as screen readers and keyboard shortcuts with DevTools is now easier.
Screen readers correctly report when the More Tools menu is expanded
In previous versions of Microsoft Edge, screen readers reported that the More tools () button was collapsed, when the More tools menu was actually expanded. In Microsoft Edge 110, this issue has been fixed.
Screen readers now correctly report when the More tools () menu is expanded:

Change Dock location and Activity Bar location by using the keyboard
In previous versions of Microsoft Edge, in Focus Mode, it wasn't possible to change the Dock location or the Activity Bar location via the keyboard. In Microsoft Edge 110, this issue has been fixed.
In Focus Mode, you can now change the Dock location and the Activity Bar location from the Customize and control DevTools () menu by using the arrow keys:

Screen readers announce which theme is currently selected when scrolling through themes
In previous versions of Microsoft Edge, when scrolling through the list of themes for
DevTools, screen readers didn't announce whether or not a theme was selected. In Microsoft Edge 110, this issue has been fixed.
Screen readers now announce which theme is currently selected when you are moving among the themes in the Customize and control DevTools () menu:

See also:
 Navigate DevTools with assistive technology
The Network, Console, Issues, and Sources tools have improved support for contrast themes
DevTools in Microsoft Edge 110 now has better support for Windows contrast themes. The Network, Console, Issues, and Sources tools have all been improved so that the tools render correctly with contrast themes.
In the Issues tool, with the Desert contrast theme applied in Windows, when you put focus on a particular issue, the details about the issue were displayed against a solid background, which made the text hard to read. In Microsoft Edge 110, this has been fixed, by using an outline instead of a solid background:

In the Network tool, with the Desert contrast theme applied in Windows, selecting a particular request made the text and icon for the request hard to see. In Microsoft Edge 110, this has been fixed:

See also:
 Check for contrast issues with dark theme and light theme
 Change color contrast in Windows
Announcements from the Chromium project
Microsoft Edge 110 also includes the following updates from the Chromium project:
Clearing Performance Panel on reload
Automatic in-place pretty print
Better syntax highlight and inline preview for Vue, SCSS and more Ergonomic and consistent Autocomplete in the Console
Was this page helpful? 

What's New in DevTools (Microsoft Edge 109)
Article • 10/23/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 109

Import and export your DevTools instances with the new enhanced traces feature
In Microsoft Edge 109, you can turn on new settings to export enhanced traces from the Performance and Memory tools. These enhanced traces include more information, such as:
Messages logged to the Console.
The JavaScript that was running on the page at the time of recording.
Snapshots of the DOM.
When saving performance profiles, heap snapshots, allocation timelines, or allocation sampling, you can now export a new .devtools file format. When you then import the .devtools file, a new instance of DevTools opens, with the state of your Elements,
Console, and Sources tools preserved. These enhanced traces offer a powerful new way to collaborate and share the information in your DevTools.
To try the enhanced traces feature:
1. In DevTools, click the Settings () button.
2. In the Persistence section of the Preferences settings page, select the Export enhanced performance and memory traces checkbox:

3. If you want to preserve Console messages, JavaScript, or DOM snapshots, select the corresponding checkboxes.
4. Click the Close (x) button in DevTools Settings.
5. In the Performance tool, take a recording.
6. Click the Save profile () button.
7. In the Save As dialog, save the new .devtools file.
Importing:

2. A new DevTools window opens, containing a subset of the tools, including the
Performance tool loaded with the profile that you just recorded. The Elements, Console, and Sources tools are also pre-populated with their preserved state:

See also:
 Share enhanced performance and memory traces
Debug long-running Recalculate Style events with new selector stats
In Microsoft Edge 109, in the Performance tool, you can turn on the Enable advanced rendering instrumentation (slow) setting in the Performance tool to access the new selector stats feature.
With this setting turned on:
1. Select Record, and then run the scenario that you want to improve on your website or app.
2. Select Stop.
3. Select a Recalculate Style event. In the bottom section of the Performance tool, select the Selector Stats tab:

The Selector Stats tab provides a list of all the CSS selectors that were calculated by the browser engine during the Recalculate Style event. You can sort selectors by the Elapsed time they took to process, or by the number of elements they matched (the Match Count column). Use this data to:
Find selectors that take a long time for the browser to process, and simplify them.
Make selectors more specific, to improve performance.
See also:
The truth about CSS selector performance - blog post
[Feedback] Selector Performance Tracing Explainer · Issue #98
Analyze CSS selector performance during Recalculate Style events
Track objects discarded by garbage collection when allocation sampling
In Microsoft Edge 109, the Allocation sampling profiling type in the Memory tool now has two new options:
Include objects discarded by major GC.
Include objects discarded by minor GC.
Without selecting these options, the Memory tool will continue to work as it did before, reporting allocations that are still alive at the end of the profiling session. In this mode, objects that are generated and garbage-collected (GC'd) and then disappear aren't tracked by allocation sampling.
Select both options if you want to track garbage that is being generated by your website or app. In the resulting profile, you'll be able to see garbage that was generated by your JavaScript functions that was then GC'd. Use these options if you want to reduce the amount of garbage that your code is generating. To learn more about the differences between major and minor GC, see Trash talk: the Orinoco garbage collector.

See also:
 Investigate memory allocation, with reduced garbage ("Include objects" checkboxes) in Speed up JavaScript runtime ("Allocation sampling" profiling type).
Try the new Heap Snapshot visualizer extension for DevTools
Add the new Heap Snapshot Visualizer extension to Microsoft Edge to get new visualizations of the data that's in your heap snapshot files. Installing this extension adds a new Heap Snapshot Visualizer tool in DevTools. In the Heap Snapshot Visualizer tool, you can load a heap snapshot file to see it represented either as a directed graph or as a tree. These new visualizations enable you to explore the retainers chain from the garbage-collection (GC) root to an individual node.
Graph view:

Tree view:

See also:
 Heap Snapshot Visualizer - Microsoft Edge Add-ons Store.
Improvements to Quick View in Focus Mode
We listened to your feedback and improved the Quick View options in Focus Mode. Instead of offering only a subset of the tools in a Quick View dropdown list, you can now select any DevTools tool by clicking the More tools () button, like in the main toolbar of DevTools. Load any tool in the Quick View panel of DevTools, to show multiple tools at the same time.
The state of your Quick View toolbar persists across DevTools sessions. The Quick View panel automatically collapses if you open the same tool in the upper pane of DevTools.

Navigate directly to the Styles and Computed
Styles tabs of the Elements tool
There was an accessibility issue where voice-command users couldn't navigate to the Styles tab or Computed tab in the Elements tool. You can now access these tabs through two new commands in the Command Menu:
Show Styles
Show Computed Styles

See also:
Run commands in the Command Menu
Navigate DevTools with assistive technology
Announcements from the Chromium project
Microsoft Edge 109 also includes the following updates from the Chromium project:
Show actual function names in performance's recordings
New keyboard shortcuts in the Console & Sources panel
Improved JavaScript debugging
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 108)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 108

Microsoft Edge WebDriver is now available for macOS running on Apple M1
You can now download Microsoft Edge WebDriver for macOS running on Apple M1 devices. Previously, Microsoft Edge WebDriver on macOS was running under emulation with Rosetta. With the Mac M1 version, Microsoft Edge WebDriver has improved performance, because it no longer runs under emulation.
To download Microsoft Edge WebDriver on Apple M1 devices:
1. In Microsoft Edge, go to edge://version, and note the full version number.
2. Go to Microsoft Edge WebDriver.
3. Find the version of Microsoft Edge WebDriver that matches your specific version of Microsoft Edge, and then click the Mac M1 download link:

Thank you for your feedback on this issue!
See also:
Use WebDriver to automate Microsoft Edge
Microsoft Edge WebDriver
Issue #17: Support for Apple silicon
Improved DevTools navigation via Command
Palette
The Command Palette experiment was removed in Microsoft Edge 123.
The Microsoft Edge Command Palette is an experimental feature that allows users to perform common tasks in Microsoft Edge. In previous versions of Microsoft Edge, DevTools-related commands for opening specific parts of a tool didn't navigate correctly, such as the Styles tab in the Elements tool or the Snippets tab in the Sources tool. In Microsoft Edge 108, this issue is fixed, improving the usability of commands such as Sources: Show Snippets:

Now, when you select Sources: Show Snippets, the Sources tool opens with the Snippets tab selected:

See also:
 Run snippets of JavaScript on any webpage
Better support for high contrast mode in DevTools
We've fixed a few issues with Developer Tools in High Contrast mode that makes it easier for you to navigate the UI. High Contrast mode is an accessibility feature of Windows that allows you to differentiate more easily between different sections of the UI.
In previous releases of Microsoft Edge, when using High Contrast mode, sometimes there was low contrast in the DevTools UI, such as right-click menus; icons for more information about issues; hovering over list items; error message text; or links. For example, in the Elements tool, some tabs had dark text on a dark background:

The UI controls now have high contrast:

See also:
Check for contrast issues with dark theme and light theme Change color contrast in Windows
In Focus Mode, disabling JavaScript now produces a warning icon for the Sources tool
In previous versions of Microsoft Edge, in Focus Mode, disabling JavaScript in the DevTools didn't produce a visual indication in the Sources tool. In Microsoft Edge version 107, this issue has been fixed. Disabling JavaScript will now produce a warning icon () next to the Sources tool icon on the Activity Bar.
1. Open the Command Menu by pressing Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).
2. Start typing disable, and then select the Disable JavaScript command to run it:

A yellow warning icon is added to the Sources tool icon on the Activity Bar to indicate that JavaScript is disabled:

See also:
Disable JavaScript
Run commands in the Command Menu
Announcements from the Chromium project
Microsoft Edge 108 also includes the following updates from the Chromium project:
Hints for inactive CSS properties
Step through comma-separated expressions
Improved Ignore list setting
Was this page helpful? 

What's New in DevTools (Microsoft Edge 107)
Article • 03/27/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 107

Automate WebView2 with Playwright
Playwright is a testing library that enables reliable end-to-end testing across different browsers and platforms. Playwright has always supported automating and testing web content in Microsoft Edge, but now Playwright also supports testing the Microsoft Edge WebView2 control.
The Microsoft Edge WebView2 control allows you to embed web technologies (HTML, CSS, and JavaScript) in your native apps. You can now use Playwright to test your web content running in WebView2. To get started, see Playwright's documentation for
WebView2.
See also:
Introduction to Microsoft Edge WebView2
Use Playwright to automate and test in Microsoft Edge
Issue 17617: [Feature] Add Playwright.WebView2.launch()
Focus Mode: Activity Bar icons show text label on mouse hover
Starting in Microsoft Edge 107, in Focus Mode, the Activity Bar now displays tooltips when you hover over tool icons. These tooltips appear immediately and help you quickly identify and switch between tools:

When the Activity Bar is horizontal, a tooltip appears when a tool icon doesn't already have a text label next to it:

New keyboard shortcut for the Command
Palette experiment
The Command Palette experiment was removed in Microsoft Edge 123.
In Microsoft Edge 106, we introduced the Command Palette, an experimental feature for accessing browser management and developer tools commands. In Microsoft Edge 107, the keyboard shortcut for opening the Command Palette has been updated from Shift+Ctrl+Spacebar to Ctrl+Q on Windows, macOS, and Linux.

Thank you for your feedback on this issue! Let us know what commands you'd like to see in future versions of Microsoft Edge, by posting a comment in Issue 73: [feedback] Command Palette experiment in the DevTools repo!
The Memory tool can now load larger heap snapshots
In previous versions of Microsoft Edge, when loading large heap snapshots in the Memory tool, the snapshot would fail to load and a RangeError: Map maximum size exceeded message would be logged to the Console:

In Microsoft Edge 107, this issue has been fixed. The Memory tool can now successfully load large heap snapshots. This issue was caused by a hard-coded limit in V8 (the JavaScript engine of the browser), that limits the number of map elements to 16M. By using a linked list of maps, the Memory tool no longer has a hard-coded map limit.

If you still encounter issues when loading large heap snapshots, please open an issue in the DevTools repo!
See also:
Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Issue 9126: Hardcoded memory limits of Map (backed by FixedArray)
Links in the Application tool render better in high contrast mode
In previous versions of Microsoft Edge, links in the Application tool didn't render correctly in high contrast mode. The links weren't visible, and they weren't the same color as defined in the high contrast setting. In Microsoft Edge 107, this issue has been fixed. Links in the Application tool now match the color that's defined in the high contrast setting:

See also:
Windows high contrast mode
Debug a Progressive Web App (PWA)
Announcements from the Chromium project
Microsoft Edge 107 also includes the following updates from the Chromium project:
Toggle light and dark themes with keyboard shortcut
Support full initiator information for HAR import
Start DOM search after pressing Enter
Display start and end icons for align-content CSS flexbox properties
Was this page helpful? 

What's New in DevTools (Microsoft Edge 106)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 106

Introducing the Command Palette
The Command Palette experiment was removed in Microsoft Edge 123.
In Microsoft Edge 106, you can now enable and use the Command Palette experiment. Command Palette makes it possible to access browser management and developer tools commands with just one keyboard shortcut: Ctrl+Shift+Spacebar.
To enable the Command Palette experiment:
1. Go to edge://flags. Then in the Search flags text field, start typing Command Palette.
2. In the Command Palette dropdown menu, select Enabled:

Note the keyboard shortcut, which is shown in the Command Palette section on the edge://flags page.
3. Click the Restart button, which appears in the lower right when you select Enabled.
To quickly access the available browser management commands and DevTools commands, after you've enabled the experiment:
1. In Microsoft Edge (with or without DevTools open), press Ctrl+Shift+Spacebar.
2. Start typing. The commands are filtered based on your input characters, and are grouped into categories such as Suggestions, History, and DevTools:

3. To narrow the filtering to list DevTools commands only, type the greater-than (>) character:

Let us know what commands you'd like to see in future versions of Microsoft Edge, by posting a comment in Issue 73: [feedback] Command Palette experiment in the MicrosoftEdge/DevTools repo!
Filter and automatically fix code issues in
DevTools for Visual Studio Code
The Microsoft Edge DevTools extension for Visual Studio Code now provides Quick Fix options, allowing you to fix issues automatically.
To access the Quick Fix options:
1. Hover over an issue that's reported by the DevTools extension, indicated by a wavy underline in your code. A lightbulb icon appears next to the issue.
2. Click the lightbulb () icon. The Quick Fix menu appears:

3. Select whichever Quick Fix you want to use to resolve the issue or to stop reporting it as an issue. Selecting to ignore the issue automatically creates a
.hintrc file which tells the extension to ignore this issue type and not report it again.
See also:
 Automated Quick Fixes and issue filtering in Inline and live issue analysis
DevTools now uses less disk space when caching sourcemaps
Starting in Microsoft Edge 101, DevTools began caching sourcemaps in IndexedDB to reduce the amount of network requests fetching your sourcemaps. However, this change could potentially take up a lot of disk space if these sourcemaps are never removed.
In Microsoft Edge 106, this issue has been fixed, by removing any sourcemaps that haven't been accessed in 30 days from IndexedDB storage. Additionally, sourcemaps served from localhost are also no longer cached. Thank you for sending us feedback about this issue!
To understand how DevTools fetches and caches your sourcemaps, watch the Load status column in the Source Maps Monitor tool. When you first load the webpage, the Source Maps Monitor tool shows that the source maps aren't cached yet:

When you refresh the webpage, the Source Maps Monitor tool shows that the cached source maps are used:

To clear the IndexedDB cache and force DevTools to re-load sourcemaps, run the Clear source maps cache command in the Command Menu. See Run commands in the Command Menu.
For history, see Issue 89.
See also:
 Source maps are now cached with IndexedDB in What's New in DevTools (Microsoft Edge 101)
Chromium color themes have been deprecated
To improve reliability, the Chromium Light and Chromium Dark themes have been deprecated. Users who previously had these themes selected will be automatically migrated to the Light+ or Dark+ theme, respectively:
DevTools in Light+ theme:

DevTools in Dark+ theme:

There are many DevTools color themes to choose from, such as Monokai and Solarized.
To change the color theme in DevTools, click the Settings () button, and then in the Preferences page, in the Theme dropdown menu, select a theme:

Accessibility improvements in Focus Mode and high contrast mode
Dock location and Activity Bar location buttons in Focus Mode now work better with screen readers
In Microsoft Edge 105, Focus Mode received several improvements, including new Dock location and Activity Bar location buttons. In Microsoft Edge 106, these new buttons now work better with assistive technologies, such as screen readers.
Screen readers now announce which Dock location button or which Activity Bar location button is currently selected, and the number of buttons, representing the available location options:

See also:
Navigate DevTools with assistive technology
Focus Mode: Improved location controls for DevTools, Activity Bar, and Quick View in What's New in DevTools (Microsoft Edge 105).
Computed styles are easier to see in high contrast mode
In high contrast mode, in previous versions of Microsoft Edge, the expand and collapse buttons for computed styles didn't render correctly, in the Computed tab in the Elements tool. In Microsoft Edge 106, this issue has been fixed. The expand and collapse buttons are now visible in high contrast mode:

See also:
 Windows high contrast mode
Announcements from the Chromium project
Microsoft Edge 106 also includes the following updates from the Chromium project:
Group files by Authored / Deployed in the Sources panel
Improved stack traces
Linked stack traces for asynchronous operations
Automatically ignore known third-party scripts
Improved call stack during debugging
Hiding ignore-listed sources in the Sources panel
Hiding ignore-listed files in the Command Menu
New Interactions track in the Performance panel
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 105)
Article • 12/07/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 105

Test your PWA's protocol handlers from the
Application tool
In Microsoft Edge 105, the Application tool now supports testing protocol handlers. Since Microsoft Edge 96, you've been able to define protocol handlers in the application manifest of your Progressive Web App (PWA). Now you can test those protocols from the Application tool itself in DevTools if you have your PWA installed.
With DevTools open for your PWA:
1. Open the Application tool.
2. On the left, expand and select Application > Manifest > Protocol Handlers.
3. In the Protocol Handlers page, in the Protocol Handlers dropdown list, select the protocol you want to test.
4. In the text box, enter the URL or endpoint to test.
5. Click the Test protocol button.
The Application tool will attempt to launch your PWA with the protocol and URL you specified. The browser asks for permission to open the application, and then prompts you to confirm that you want to handle the protocol and the app you want to launch. If you give permission, your app opens with the specified content.

See also:
Test Progressive Web App (PWA) protocol handling Handle protocols in a PWA
Edit and resend network requests more reliably in the Network Console tool
Previously in Microsoft Edge, selecting Edit and resend for a network request from the Network tool may not have reliably opened the Network Console tool and prepopulated it with the values from the request.
In Microsoft Edge 105, this issue has been fixed in the legacy DevTools UI. This issue will also be fixed in the Focus Mode DevTools UI in a future release. Edit and resend now pre-populates the Network Console tool with the values for the network request that you're looking to resend. You can continue to modify these values before sending the request from the Network Console tool. Thank you for sending us your feedback about this issue!
Right-click the network request that you want to change and resend, and then select Edit and Resend:

In the Network Console, edit the network request information, and then click the Send button:

See also:
 Opening the Network Console tool from within the Network tool in Compose and send web API requests using the Network Console tool.
Focus Mode: Improved location controls for
DevTools, Activity Bar, and Quick View
In Microsoft Edge 105, several improvements to location controls have been made, including a new option for changing the orientation of the Quick View panel.
The Customize and control DevTools (...) menu now directly contains buttons to set the docking location of DevTools, instead of requiring opening a submenu. The Dock location icons now have greater contrast, and the currently selected Dock location button is now highlighted.
This menu also now directly contains buttons to set and indicate where the Activity Bar is displayed, instead of using a submenu.
Selecting the docking location in Focus Mode, in previous versions of Microsoft Edge:

Selecting the docking location in Focus Mode, in Microsoft Edge 105:

You can now change the orientation of the Quick View toolbar and panel as well. To display the Quick View panel vertically instead of horizontally, click the Dock Quick View to right button:

To return the Quick View toolbar and panel to the horizontal orientation, click the Dock Quick View to bottom button:

To minimize the Quick View panel in either orientation, click the Collapse Quick View button, or press Esc:

Fix: Search in the Sources and Network tools now works as expected in Focus Mode
In previous versions of Microsoft Edge, the Focus Mode experiment didn't properly showcase the Search feature in the Network tool or the Search in all files feature in the Sources tool. In Microsoft Edge 105, these issues have been fixed.
You can now search in the Network tool via the Search icon:

To search in all files in the Sources tool, in the Page section, right-click the top window or any domain, and then select Search in all files:

See also:
 Search network headers and responses in Inspect network activity.
 Find source files for a page using the Search tool
Improved reliability in the Issues tool
In previous versions of Microsoft Edge, there was a bug that that caused issues to not appear in the Issues tool. This bug has been fixed in Microsoft Edge 105.
See also:
 Find and fix problems using the Issues tool
Announcements from the Chromium project
Microsoft Edge 105 also includes the following updates from the Chromium project:
Attach Wasm debugging information at runtime
Support live edit during debugging
View and edit @scope at rules in the Styles pane
Sourcemap improvements
Was this page helpful? 
What's New in DevTools (Microsoft Edge 104)
Article • 10/23/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 104

Use Layers in 3D View
The standalone Layers tool has been removed in Microsoft Edge version 104. In previous versions of Microsoft Edge, the Layers tool redirected users to the 3D View tool.
In the 3D View tool, the Composited Layers view has all the features you love from the Layers tool, along with some updates. The Composited Layers view is now complemented by two other visual debugging panes: DOM and Z-index. Combine these additional views with the Composited Layers view for better debugging.

See also:
Debug the web in 3D with the 3D View tool
Navigate webpage layers, z-index, and DOM using the 3D View tool
In Issues tool, long request URLs have been shortened
The Issues tool provides recommendations to improve a web page's accessibility, performance, security, and more. Some of these recommendations include a link to a network request that opens in the Network tool.
Previously, issues related to network requests displayed the entire URL for the network request. When these URLs were lengthy, they took up a lot of space, making the list of issues difficult to browse. In Microsoft Edge 104, these long request URL links have been truncated to take up less space. The links still direct to the relevant part of the Network tool.
In previous versions of Microsoft Edge:

In Microsoft Edge version 104:

See also:
 Find and fix problems using the Issues tool
Improved accessibility for the Detached
Elements tool
In previous versions of Microsoft Edge, when selecting the table of detached elements in the Detached Elements feature, assistive technology only announced "Table" and the number of rows and columns. In Microsoft Edge version 104, this issue has been fixed. When selecting the table of detached elements in the Detached Elements feature, assistive technology now announces "Detached Elements List, Table" and the number of rows and columns.

See also:
Tools for investigating detached elements in Fix memory problems.
Debug DOM memory leaks by using the Detached Elements tool
Navigate DevTools with assistive technology
Fix: Arrows representing web socket traffic now render correctly in the Network tool
In previous versions of Microsoft Edge, when inspecting web socket traffic in the Network tool, the arrows representing whether a message was sent from the client or server were not rendering correctly. In Microsoft Edge 104, this issue has been fixed.
Thank you for sending us your feedback about this issue!
Green up-arrows () represent messages sent by the client.
Red down-arrows () represent messages sent by the server.

See also:
 Network features reference
Announcements from the Chromium project
Microsoft Edge 104 also includes the following updates from the Chromium project:
Restart frame during debugging
Group files by Authored / Deployed in the Sources panel
New User Timings track in the Performance insights panel
Reveal assigned slot of an element
Simulate hardware concurrency for Performance recordings
Preview non-color value when autocompleting CSS variables
Identify blocking frames in the Back/forward cache pane
Improved autocomplete suggestions for JavaScript objects Sourcemaps improvements
Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 103)
Article • 10/23/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: What's new in DevTools 103

New node types in the Memory tool
In Microsoft Edge 103, when taking a heap snapshot in the Memory tool, there are two new node types:
 BigInt - Used to represent and manipulate values that are too large to be represented by the Number node type. See BigInt.
 Object shape - Refers to the hidden classes and descriptor arrays that V8 (the JavaScript engine of Microsoft Edge) uses to understand and index the properties on objects. See HiddenClasses and DescriptorArrays in Fast properties in V8.

See also:
 Constructor entries in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
Launch the browser from an HTML file and use the Application tool within Visual Studio Code
To make it easier to start a new embedded instance of Microsoft Edge from within Visual Studio Code, when you right-click an HTML file in the Explorer, there's now an Open with Edge submenu that has the commands Open Browser and Open Browser with DevTools:

You can now also use the Application tool to gain insights into the storage and service worker information of your project, without leaving Visual Studio Code:

See also:
 Microsoft Edge DevTools extension for Visual Studio Code
Bug fixes for Focus Mode UI
In the new Focus Mode DevTools UI, various bugs affecting controls and keyboard shortcuts for DevTools have been resolved:
 Improved behavior of collapsible panes such as Styles in the Elements tool.
Fixed some instances in which the name of an open tool wasn't visible.
Improved reliability of Quick View controls.
Improved behavior of opening DevTools by using keyboard shortcuts. Fixed an issue with navigating to a specific line of code in the Sources tool by using keyboard shortcuts.
 Restored the keyboard shortcut to open Search in the Quick View panel, which is Ctrl+Shift+F (Windows, Linux) or Command+Option+F (macOS):

The 3D View tool responds better in narrow layouts
In previous versions of Microsoft Edge, the 3D View tool didn't display correctly in narrow layouts. The toolbar options were cut off when DevTools was narrow. In Microsoft Edge 103, this issue has been fixed. The toolbar options in 3D View now stack when the width of the DevTools window is decreased:

See also:
 Navigate webpage layers, z-index, and DOM using the 3D View tool
Fix: The Close button for DevTools is now accessible in high contrast mode
In previous versions of Microsoft Edge, the Close button for DevTools didn't render correctly in high contrast mode. In Microsoft Edge 103, this issue has been fixed. The Close () button for DevTools is displayed correctly in high contrast mode:

See also:
Navigate DevTools with assistive technology
Windows high contrast mode
Redesigned Welcome tool
In Microsoft Edge 103, the Welcome tool has a new, modern design with improved and expanded content. It's easier than ever to find documentation, videos, and information about new features and bug fixes.
 In the Learn section, use the links to quickly jump to documentation for common tasks in DevTools.
 In the What's New section, find out about the latest changes, new features, and bug fixes.
 In both sections, learn about existing and new web development features through our new video series, Videos about web development with Microsoft Edge.

See also:
 Welcome tool
Announcements from the Chromium project
Microsoft Edge 103 also includes the following updates from the Chromium project:
Reorder panes in the Elements panel
Picking a color outside of the browser
Improved inline value preview during debugging
Support large blobs for virtual authenticators
New keyboard shortcuts in the Sources panel
Sourcemaps improvements
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 102)
Article • 10/23/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the

Video: Microsoft Edge | What's New in DevTools 102

DevTools extension: New browser with device and mode emulation and sourcemap support
The Microsoft Edge DevTools extension for Visual Studio Code now has a browser preview that allows you to emulate different devices. Click the new Emulate CSS media features () button, to preview the current project in different modes, such as Dark, Light, Print, and High Contrast:

Click the new Emulate vision deficiencies () button to easily test accessibility, such as showing what the webpage looks like with blurred vision or color vision deficiencies.
Other new features include a simpler way to toggle CSS mirroring, which now also supports sourcemaps. This means that you can debug and modify CSS created by Sass, React, and other abstractions live in the browser and see the changes in the source files.
See also:
Device and state emulation
Map the processed code to your original source code, for debugging
CSS Mirror Editing with Sourcemaps: Known Issues and Feedback
Save all strings from a heap snapshot to JSON
In Microsoft Edge 102, when taking a heap snapshot in the Memory tool, you can now export all string objects from the snapshot to a JSON file. In the Memory tool, in the Constructor section, click the new Save all to file button next to the (string) entry.
The Memory tool exports a JSON file that contains all of the string objects from the heap snapshot:

See also:
 Save and export strings from a heap snapshot to JSON in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
New filters for retainers in the Memory tool
In previous versions of Microsoft Edge, cycles and internal nodes were displayed in the
Retainers section of a heap snapshot. To help simplify the retainer path, in Microsoft Edge 102, the Retainers section in the Memory tool now has new filters to hide cycles and to hide internal nodes in the retainer path.
In the Retainers section, a cycled node is indicated by being grayed out.
In the following image, in the Filter edges dropdown menu, Hide cycled is not selected, so a cycled node (grayed out) is displayed:

In the following image, in the Filter edges dropdown menu, Hide cycled is selected, so the cycled node is not displayed:

Cycles are nodes that appear at least twice in a retainer path. One appearance of a node is earlier in the retainer path, and other appearances of that node are later in the retainer path. To free up memory, it's most important to remove the occurrence of the node which appears first in the retainer path. The second and potentially subsequent appearances of the node are still displayed in the Retainers section.
Internal nodes are objects that are specific to V8 (the JavaScript engine in Microsoft Edge). Internal nodes are also displayed in the Retainers section.
See also:
 Hide cycles in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
The Inspect element tooltip can now be persisted until you dismiss it
Previously, in the Elements tool, the overlay for the node that you selected only displayed on hover when you used the Inspect tool (). The previous design was difficult to use with a screen magnifier or other assistive technologies.
In Microsoft Edge 102, when using the Inspect tool and moving around the rendered webpage, you can keep the current Inspect overlay displayed. Press and hold Ctrl+Alt (Windows, Linux) or Ctrl+Option (macOS) while you move around in the rendered webpage. The existing tooltip and grid color overlay for the Inspect tool remains displayed while you hover over different parts of the rendered webpage:

Also, you can now press Ctrl to hide the Inspect tool's overlay while you move the mouse pointer over the rendered webpage.
For the history of this feature in the Chromium open-source project, see Issue
1316208.
See also:
 Persisting the Inspect tool's tooltip and grid color overlay in Analyze pages using the Inspect tool.
 Persisting the Inspect tool's tooltip and grid color overlay in Navigate DevTools with assistive technology.
Improved rendering of dropdown menus, buttons, and icons in high-contrast mode
In previous versions of Microsoft Edge, the following items didn't render correctly in high-contrast mode:
Dropdown menus in the Issues tool.
Buttons in the Detached Elements tool.
The Activity Bar in Focus Mode.
In Microsoft Edge 102, these issues have been fixed.
The Issues tool's menus are displayed correctly in high-contrast mode:

The Detached Elements tool's UI is displayed correctly in high-contrast mode:

The Activity Bar and Quick View panel (when using Focus Mode) are displayed correctly in high-contrast mode:

See also:
Navigate DevTools with assistive technology
Windows high contrast mode
Learn about experiments in DevTools from
Settings
In the Settings > Experiments page, each experiment now has a Help () button:

To get more information about an experimental feature, click the corresponding Help (
) button. The Help button displays the relevant section of the Experimental features in Microsoft Edge DevTools article.
Better layout of Network settings when narrow
In previous versions of Microsoft Edge, opening Network settings with the gear icon in the Network tool would overlap when the DevTools were very narrow:

In Microsoft Edge 102, this issue has been fixed. The individual settings now display better in narrow layouts:

See also:
 Capture screenshots during page load in Network features reference, about configurable settings of the Network tool.
Announcements from the Chromium project
Microsoft Edge 102 also includes the following updates from the Chromium project:
New shortcuts to emulate light and dark themes
Improved security on the Network Preview tab
Improved reloading at breakpoint
Console updates
Handle script execution errors in the Console
Commit live expression with Enter
Display inherited highlight pseudo-elements in the Styles pane
[Experimental] Copy CSS changes
[Experimental] Picking color outside of browser
Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 101)
Article • 11/15/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 101

The Console tool is now available in Visual Studio Code
The Console is one of the most popular tools in DevTools. You can now access the
Console tool in the Microsoft Edge Developer Tools extension for Visual Studio Code. This integrated DevTools Console allows you to see your log messages right next to your code. Using the Console, you can also:
Try out some JavaScript statements.
Access the window object.
 Call the methods of the Console object, as described in Console object API
Reference.
 Use the Console utilities to access the DOM, as described in Console tool utility functions and selectors.
You can use the Console as the main tool, or use it together with the Elements and Network tools.
The Console tool open in the main toolbar of the Microsoft Edge DevTools extension for Visual Studio Code:

The Console tool open in the Drawer of the Microsoft Edge DevTools extension for Visual Studio Code:

For more information, see Console integration.
Source maps are now cached with IndexedDB
In previous versions of Microsoft Edge, if you were hosting large source map files on your server or in Azure Artifacts symbol server, DevTools would fetch these source maps every time the page refreshed. Fetching these source maps repeatedly created more network requests for DevTools, and slowed down debugging.
In Microsoft Edge 101, DevTools caches source maps by using IndexedDB. When you refresh the page, source maps are now served from the IndexedDB cache, instead of being requested again from your server or the Azure Artifacts symbol server. Use the Load status column in the Source Maps Monitor tool to verify that source maps are being loaded from the cache. To clear the IndexedDB cache and force DevTools to reload source maps, run the Clear source maps cache command in the Command Menu.
When you first load the webpage, the Source Maps Monitor tool shows that the source maps aren't cached yet:

When you reload the webpage, the Source Maps Monitor tool shows that the cached source maps are used:

Tracking pending network requests when exporting HAR files
In Microsoft Edge 101, the new Status text column has been added to the Network tool. The Status text column provides human-readable equivalent messages for the HTTP status codes that are reported in the Status column.
In addition, a new setting has been added to the Network tool: Include pending requests in HAR file. If you need to record Pending network requests when exporting a HAR file in the Network tool, turn on the Include pending requests in HAR file setting. The Status text column will now include the (pending) state for any pending network requests.

To learn more about the available columns in the request log, see Network features reference > Add or remove columns.
Updated UI and camera controls in 3D View
In Microsoft Edge 101, the 3D View tool has two new buttons: Pan view () and
Rotate view (). Use these buttons to switch between panning around the canvas or rotating the canvas. Click the Pan view or Rotate view button, and then drag in the desired direction with your mouse, or use the arrow keys.
The UI now provides a more uniform and intuitive experience. The panes are organized more clearly, and accessibility issues have been fixed.

See Navigate webpage layers, z-index, and DOM using the 3D View tool.
Switching themes no longer requires reloading DevTools
In previous versions of Microsoft Edge, switching themes in DevTools required reloading DevTools to apply the new theme. In Microsoft Edge 101, you can quickly try different themes without having to reload DevTools.

Announcements from the Chromium project
Microsoft Edge 101 also includes the following updates from the Chromium project:

Feedback
Was this page helpful? 
What's New in DevTools (Microsoft Edge 100)
Article • 01/14/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 100

Join the Microsoft Edge DevTools community at GitHub
We're excited to announce the new MicrosoftEdge > DevTools repo at GitHub! This new repo is a place for our community of developers to send us ideas, feedback, suggestions, and tips to improve DevTools. We're eager to discuss with you how DevTools can better serve your needs and meet the challenges you face every day in building great web experiences.

Head to our DevTools repo at GitHub to become a part of the Edge DevTools community.
Filter heap snapshots summary by node type
When looking at all the objects in a heap snapshot in the Memory tool, it can be difficult to focus on specific objects or retaining paths. Now in Microsoft Edge 100, you can use the new Node Types filter when looking at a heap snapshot, to focus on only specific types of nodes. For example, to see only the arrays and string objects that are in the heap, select the Array and String entries in the Node Types filter:

See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type) taking a heap snapshot and analyzing the heap.
Use DevTools in Czech and Vietnamese
Customizing and simplifying the developer experience includes making our tools available to everyone, regardless of their preferred language. We've added two new languages, Czech and Vietnamese, to our list of supported languages, and will keep adding more. If your preferred language isn't supported in DevTools, let us know!

See also:
 Change DevTools language settings
The Network tool now displays how a request was fulfilled
In Microsoft Edge 100, the Network tool supports a new Fulfilled by column in the request log. If the request was fulfilled by your service worker or from the cache, that information is now tracked in the Fulfilled by column. When exporting or importing the request log as a HAR file, the information in the Fulfilled by column is also included.

See also:
Filter requests by properties in Network features reference.
Service worker improvements.
For the history of this feature, see Issue #16.
Filter messages in the Issues tool by severity and browser target
In the Issues tool, the new Severity and Browser dropdown lists allow you to filter messages by severity and browser target, to help you focus on the most relevant feedback. You can select or clear the options in each dropdown list.
To see all relevant messages, you might need to refresh the page. If prompted, in the Issues tool, click the Regenerate issues button.
By default, the Severity filter is set to show only warnings and errors:

The Browser filter only applies to browser compatibility feedback, which is shown in the Compatibility section of the Issues list. By default, the Browser filter shows messages for the top browsers, as defined by Browserslist In the following example, messages about Firefox and Firefox for Android are filtered out:

See also:
 Filter issues in Find and fix problems using the Issues tool.
When importing a performance profile, links now map to your original code
When recording a performance profile, the flame chart in the Performance tool displays links from each event on the main thread to the corresponding JavaScript function in the Sources tool. However, these links are broken when you export and import a performance profile.
In Microsoft Edge 100, the links from an imported performance profile now use source maps from Azure Artifacts symbol server to map back to your familiar, original source code. The performance profile must have been exported in Microsoft Edge 100 (or greater), so that the profile includes the information that's needed to resolve source maps in the exported performance trace.

See also:
Map the processed code to your original source code, for debugging Securely debug original code by publishing source maps to the Azure Artifacts symbol server
 Securely debug original code by using Azure Artifacts symbol server source maps
Fix: The Waterfall view in the Network tool now matches Visual Studio Code themes
Update: Starting with Microsoft Edge 131, the Visual Studio Code themes feature is removed, and such themes revert to the default themes:
Light+
Dark+
In previous versions of Microsoft Edge, the Waterfall view of requests in the Network tool didn't match the themes from Visual Studio Code that apply to the rest of DevTools.
In Microsoft Edge 100, this issue has been fixed.
Before Microsoft Edge 100, the selected theme wasn't applied in the Waterfall view:

Now in Microsoft Edge 100, the selected theme is applied to the Waterfall view of requests in the Network tool:

See also:
 Display the timing relationship of requests in Network features reference - the Waterfall view for requests in the Network tool.
Announcements from the Chromium project
Microsoft Edge version 100 also includes the following updates from the Chromium project:
View and edit @supports at rules in the Styles pane
Preview class/function properties on hover
Partially presented frames in the Performance panel
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 99)
Article • 03/17/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 99

Securely debug your production code with source maps from Azure Artifacts Symbol Server
Azure Artifacts Symbol Server now supports storing the source maps that your build process produces when compiling, minifying, and bundling your code. Instead of hosting source maps on your public server, you can now publish your source maps to the secure Azure Artifacts Symbol Server. Then, connect DevTools to Symbol Server to have DevTools automatically fetch your source maps.
By using source maps, you can see and debug your original source code in DevTools, rather than having to work with the compiled, minified, and bundled production code that's returned by your server. Hosting your source maps on the Azure Artifacts Symbol Server allows you to see and work with your source code securely and privately, instead of placing your source maps on your server and revealing your original code publicly.
To try this feature:
1. Publish your source maps to the Azure Artifacts symbol server.
2. Open DevTools > Settings > Symbol Server and connect DevTools to Azure Artifacts Symbol Server, by entering your Azure DevOps organization and personal access token.

See also:
Map the processed code to your original source code, for debugging Securely debug original code by publishing source maps to the Azure Artifacts symbol server
 Securely debug original code by using Azure Artifacts symbol server source maps
Microsoft Edge DevTools extension for Visual Studio
Following up on the success of the Visual Studio Code integration, you can now also embed the Microsoft Edge Developer Tools in Microsoft Visual Studio to debug your ASP.NET projects live. Download the Microsoft Edge Developer Tools for Visual Studio and try it out.
To try this feature:
1. Make sure Visual Studio 2022 and the ASP.NET workload are installed.
2. Set up Web Live Preview as the default Web Forms Designer, as described at Microsoft Edge Developer Tools for Visual Studio.
3. In an ASP.NET project, open a webpage of the project in the Design window.
4. In the upper left of the Design window, click the Open Edge DevTools () button:

Edge DevTools for Visual Studio opens, with the Elements tool selected:

The Network tool is also available by default:

The Inspect tool (	) and Toggle screencast (	) are available, and the More Tools (	) menu offers the Issues, Network conditions, and Network request blocking tools.
See also:
Edge Developer Tools for Visual Studio (Preview), at Visual Studio DevBlogs.
Edge DevTools extension for Visual Studio.
Layers in 3D View
Since Microsoft Edge 88, the 3D View tool has provided an improved version of the Layers tool. Now, in Microsoft Edge 99, the functionality in the Layers tool has been removed, and the Layers tool instead contains a link that redirects you to the
Composited Layers view within the 3D View tool. You can find all the features that were previously in the Layers tool, and more, in the 3D View tool.
Update: the Layers tool has now been removed.

See also:
 Navigate webpage layers, z-index, and DOM using the 3D View tool
Use your source maps to display original function names in performance profiles
Update: In Microsoft Edge 111, this feature has been removed, because the
Performance tool now automatically provides the original file and function names while profiling production code, as long as sourcemaps are hosted on Azure Artifacts Symbol Server. See Performance tool unminifies file and function names when profiling production code in What's New in DevTools (Microsoft Edge 111).
Deprecated What's New entry
Recording a performance profile in the Performance tool produces a minified flame chart. In previous versions of Microsoft Edge, the flame chart didn't use source maps to display your original function names, even if you hosted the source maps on your server.
Starting in Microsoft Edge version 99, you can display your original function names in a performance profile, as follows:
1. Record a profile, in the Performance tool.
2. Click the new Unminify () button to create and download the unminified performance profile.
3. Load (import) () the unminified performance profile into the Performance tool.
The Unminify button will use source maps, provided that they are hosted side-by-side with your production code, to unminify function names in the flame chart in the Performance tool.
The flame chart in the Performance tool initially shows function names as b, O, Xt, and bn, taken from the minified production code returned by the web server:

After clicking Unminify (	) and then Load profile (	), the flame chart in the Performance tool now shows those functions labeled with meaningful names:
invokeFunc (b), executeAction (O), endBatch (Xt), and runReactions (bn), retrieved from your source maps:

See also:
 Unminifying function names in DevTools performance profiles at the Microsoft Edge Blog.
 Display original function names in performance profiles.
Improved accessibility for Network Console and 3D View
In previous versions of Microsoft Edge, assistive technology announced incorrect information when providing a custom bearer token in the Network Console tool. In Microsoft Edge version 99, this issue has been fixed. When selecting the text box for providing a custom bearer token, assistive technology now announces "Token edit text Request View group".

In previous versions of Microsoft Edge, assistive technology would only announce the radio button text in the 3D View tool, without announcing the group name that the button belongs to. In Microsoft Edge version 99, this has been fixed. For example, when focus is on the Use screen texture radio button, assistive technology will now announce:
"Color type radio group, Use screen texture, radio button, selected".

See also:
 Navigate DevTools with assistive technology
Improved source folder tree in the Sources panel
In the Page tab of the Sources tool, the tree of source folders is now improved, with less clutter in the naming and outline of folders. Unneeded path prefixes such as ../ and ./ have been removed. The tree structure has been simplified by merging equivalent duplicate folders.

For the history of this feature in the Chromium open-source project, see Issue
1284737.
See also:
 Using the Page tab to explore resources that construct the current webpage in Sources tool overview.
Announcements from the Chromium project
Microsoft Edge version 99 also includes the following updates from the Chromium project:
Throttling WebSocket requests
New Reporting API pane in the Application panel
Better console styling, formatting and filtering
Properly style log messages with ANSI escape code
Properly support %s, %d, %i and %f format specifiers
Sourcemaps improvements
Debug extensions with sourcemap files
Display worker source files in the Sources panel
Touch-friendly color-picker and split pane


Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 98)
Article • 06/19/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 98

Catch up on the latest and greatest features in Microsoft Edge
In 2021, developer tooling for Microsoft Edge has taken a massive leap forward. Visual
Studio Code, DevTools, and the browser now provide several integrated workflows for JavaScript debugging, mirroring CSS changes, and screencasting from the browser. Between Focus Mode, support for Visual Studio Code themes, and further customization options, the Microsoft Edge team is working to make the DevTools easier and simpler to use.
Catch up on all of this news and more in our year-in-review blog post, Looking back at

Update: Starting with Microsoft Edge 131, the Visual Studio Code themes feature is removed, and such themes revert to the default themes:
Light+
Dark+
Automate IE mode with Internet Explorer
Driver
Starting June 15, 2022, Internet Explorer 11 will no longer be supported on certain versions of Windows 10. IE mode is a feature of Microsoft Edge for organizations that still need Internet Explorer 11 for compatibility with legacy websites or apps. To support testing of those legacy websites and apps, you can now automate IE mode with Selenium 4 and Internet Explorer Driver.
See also:
 Use Internet Explorer Driver to automate IE mode in Microsoft Edge
Emulate forced-colors mode
In addition to emulating dark, light, and print mode for the current webpage, now you can also see what your webpage looks like for users who have forced-colors mode enabled. Forced-colors mode is an accessibility feature of the operating system. It forces colors on the webpage to be reduced to a limited color palette, such as Windows High Contrast mode. Emulation of forced-colors mode allows you to do a spot check without having to change your own system's settings.
To turn on forced-colors emulation, in DevTools, open the Rendering tool, and then in the Emulate CSS media feature forced-colors dropdown list, select forced-colors: active.
Without forced-colors emulation turned on, the following webpage has several different colors of text against different background colors:

With forced-colors emulation turned on in the Rendering tool, the webpage changes to black text on a white background:

See also:
 Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
Activity icons in the Event Log of the Performance tool now have tooltips
In previous versions of Microsoft Edge, the Event Log tab in the Performance tool displays color-coded icons representing the type of activity for each event. However, the Event Log doesn't display information about what type of activity is represented by each color. In Microsoft Edge 98, tooltips have been added to the activity events in the Event Log tab, indicating Scripting, Rendering, Painting, System, and Idle time, for each event.

See also:
 Record runtime performance
Shallow sizes in the Memory tool are now represented as decimal values
In previous versions of Microsoft Edge, the shallow size in a heap snapshot in the Memory tool is commonly reported as 0%, because the shallow size is so small, relative to the total size of the heap. In Microsoft Edge 98, shallow size is now reported as a decimal value, if the size is between 0% and 1% of the heap.

See also:
 Record heap snapshots
Fix: The Search text box in the Network tool can now be resized
In previous versions of Microsoft Edge, in the Network tool, the Search text box doesn't resize when you change the width of the pane. When the pane is narrow, the Refresh and Clear buttons aren't displayed. In Microsoft Edge 98, this issue has been fixed.

See also:
 Search network headers and responses in Inspect network activity.
Fix: Icons for service workers and script tags in the Elements tool are now aligned
In previous versions of Microsoft Edge, the Expand () icons in the Service Workers section of the Application tool were not aligned. The version number in the Update Cycle table was cutting off the Expand icons. In Microsoft Edge 98, this issue has been fixed:
Also, in the Elements tool, the Expand ( ) icon for <script> tags was misaligned. In Microsoft Edge 98, this issue has been fixed:

See also:
 Service workers in Debug a Progressive Web App (PWA) - debugging service workers in DevTools.
Announcements from the Chromium project
Microsoft Edge version 98 also includes the following updates from the Chromium project:
Preview feature: Full-page accessibility tree
More precise changes in the Changes tab
Ensure your pages are cacheable with the Back/forward cache tab
New Properties pane filter
Show rulers on hover command
Support row-reverse and column-reverse in the Flexbox editor
New keyboard shortcuts to replay XHR and expand all search results
Keyboard shortcuts to replay XHR in the Network panel
Feedback
Was this page helpful? 
What's New in DevTools (Microsoft Edge 97)
Article • 10/23/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 97

Introducing the Detached Elements tool
A DOM node is considered detached when it's no longer attached to any element of the DOM, but is still being retained in memory by Microsoft Edge. The browser cannot garbage-collect the detached element, because some JavaScript object is still referencing the element, even though the element is no longer on the page or is no longer a part of the DOM.
The new Detached Elements feature finds all of the detached elements on your page and displays them. You can expand and collapse a detached element to see the parent and child nodes that are also being retained. You can trigger the browser's garbage collection by clicking the Collect garbage icon, and then confirm that you have a memory leak when a detached element cannot be garbage-collected. To jump into the JavaScript code that's referencing the detached element, click the Analyze button to take a heap snapshot.
The Detached Elements feature was initially available as an experiment in Microsoft Edge version 93. The feature is now available by default in Microsoft Edge version 97.

See also:
Tools for investigating detached elements in Fix memory problems.
Debug DOM memory leaks by using the Detached Elements tool
Debug memory leaks with the Microsoft Edge Detached Elements tool - YouTube
Microsoft Edge DevTools extension for Visual
Studio Code
For general information about this extension, see Microsoft Edge DevTools extension for Visual Studio Code.
Screencast enhancements, deprecation warnings, and new launch options for Microsoft Edge
The current version of the Microsoft Edge DevTools extension for Visual Studio Code fixes several issues that were reported by the community:
 The list of emulated devices in the screencast is now the same as the list of emulated devices in the browser.
 Device emulation now adds the correct user agent string, to trigger the correct display.
 You now get a warning when you use a deprecated launch version of Microsoft Edge, indicating that you'd miss out on features.
 You can now provide arguments for the launched browser instance, in case you need to have a special setup:

Improvements and bug fixes for Focus Mode
Thanks to your early feedback, we've continued to make improvements and bug fixes on the new Focus Mode interface for Microsoft Edge DevTools. Focus Mode is a new UI option that allows you to dock tools at the top or side of the DevTools window, and removes clutter from the toolbar:

When using Focus Mode, all the same tools and custom themes are available as in the existing DevTools UI. Try Focus Mode for yourself by enabling the Focus Mode experiment in DevTools Settings > Experiments.
3D View tool supports changing color themes in DevTools
In previous versions of Microsoft Edge, changing the theme in DevTools and then opening the 3D View tool resulted in a blank panel. This issue has now been fixed, in Microsoft Edge 97:

See also:
 Navigate webpage layers, z-index, and DOM using the 3D View tool
Announcements from the Chromium project
Microsoft Edge version 97 also includes the following updates from the Chromium project:

Feedback
Was this page helpful? 
What's New in DevTools (Microsoft Edge 96)
Article • 07/09/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 96

New DevTools UI available (in preview)
The Microsoft Edge DevTools team is experimenting with a new DevTools UI: Focus Mode. Focus Mode reduces distractions and clutter with a more modern and simplified layout. The new Activity Bar allows you to pin your favorite tools in a horizontal or vertical toolbar to use screen space more efficiently.
To give this new UI a try in Microsoft Edge version 96, select Settings () > Experiments > Focus Mode.
Starting with Microsoft Edge version 96, the experiment's checkbox is labeled Focus Mode rather than Focus Mode and DevTools Tooltips.
This UI is still in development and may change in future versions of Microsoft Edge. We're eager to hear your feedback about this new DevTools UI. Send us your feedback by tweeting @EdgeDevTools. Or, with the Focus Mode experiment turned on, at the bottom of the Activity Bar, select Help () > Feedback, to show the Send feedback window.

See also:
 DevTools: Focus Mode UI in the MSEdgeExplainers repo.
Console can once again appear in the top and bottom panels
Since Microsoft Edge version 87, you've been able to move any tool between the top and bottom panels, including the Console tool. However, we heard from developers that moving the Console tool repeatedly was cumbersome. As of Microsoft Edge version 96, the default experience for the Console tool has been restored, allowing you to quickly switch between a full-screen view of the Console (in the top panel) and a split-screen view (with the Console displayed in the bottom panel), without moving the Console tool.
The Console can be opened in the Drawer (now Quick View) at the bottom of DevTools, alongside another tool:

When Console is selected in the top panel, the bottom panel is automatically minimized, if the bottom panel was displaying the Console:

If you want to only allow the Console tool to open in a single place, you can configure the behavior of the Console:
1. In the main toolbar or the Drawer toolbar, right-click the Console tab, and then select Configure console. The Settings > Preferences page is displayed.
2. In the Console section, clear the checkbox Show Console tab in main panel and drawer, and then click Close (x).
See also:
Activity Bar tools vs. Quick View tools in About the list of tools
Move tools between top and bottom panels in What's New in DevTools (Microsoft Edge 87).
Microsoft Edge DevTools Visual Studio Code extension
For general information about this extension, see Microsoft Edge DevTools extension for Visual Studio Code.
Display your web project inside the editor, and simulate different devices
The Microsoft Edge DevTools for Visual Studio Code extension now features a dockable screencast and device emulation:

You can see your web project in a dedicated tab inside of Visual Studio Code, and also simulate various devices:

For details about device emulation, see Device and state emulation.
Live, inline issue reporting
The extension also now features live, inline issue reporting. Instead of finding out about issues in a separate tool, Visual Studio Code highlights the issues in your source code and reports them live while you enter your code:

For details, see Inline and live issue analysis.
Sources tool now notifies you when sourcemaps can't be loaded
In Microsoft Edge version 96, the Sources tool now provides several indications in the UI when DevTools cannot load your sourcemaps. In the Page tab in the Navigator pane in the Sources tool, files that DevTools can't load sourcemaps for have a warning icon in place of the file icon.
Selecting a file with the warning icon opens the file in the Sources tool with an infobar indicating that DevTools either couldn't fetch the sourcemap correctly from the server or couldn't parse the sourcemap correctly:

From the infobar, you can learn more about the issue by selecting the Open in Issues button. The Issues tool then opens in the Drawer (now Quick View panel) at the bottom of DevTools, and provides information about how to resolve the issue and get your sourcemap loaded correctly in DevTools:

To prevent the infobar about sourcemaps from cluttering the Sources tool, select the Don't show again button. To prevent issues related to sourcemaps from cluttering the Issues tool, clear the Include third-party issues checkbox in the Issues tool.
See also:
 Map the processed code to your original source code, for debugging
Opening source files in Visual Studio Code now integrates better with the Sources tool
In previous versions of Microsoft Edge, turning on the Open source files in Visual Studio Code experiment had unexpected behavior when you had already been using the Sources tool in DevTools. Setting breakpoints would direct you to Visual Studio Code or to documentation to configure the experiment correctly.
In Microsoft Edge version 96, the Open source files in Visual Studio Code experiment now integrates better with the Sources tool.
 If the Sources tool is open and you then turn on the Open source files in Visual
Studio Code experiment, setting breakpoints or opening files now opens the Sources tool, rather than directing you to Visual Studio Code or to documentation to configure the experiment correctly.
As with earlier versions of Microsoft Edge, if the Sources tool isn't open in DevTools and you then turn on the Open source files in Visual Studio Code experiment, setting breakpoints or opening files from tools other than the Sources tool opens the file in Visual Studio Code.
See also:
 Opening source files in Visual Studio Code - how DevTools integrates with Visual Studio Code.
Selecting the dropdown triangle icon in the DevTools UI now opens the menu
In earlier versions of Microsoft Edge DevTools, selecting the triangle icon next to a dropdown menu didn't display the dropdown menu. To open the dropdown menu, you had to click the currently selected menu item to the left of the triangle icon, such as No throttling:

In Microsoft Edge version 96, this issue has been fixed. Selecting the triangle icon for any dropdown menu in DevTools now opens the dropdown menu:



Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 95)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 95

Sync live changes from the Styles tool in the
Visual Studio Code extension
The Microsoft Edge DevTools extension for Visual Studio Code now features an experiment called CSS Mirror Editing. Using this feature, you can use the Styles tool to adjust your CSS, and the changes you apply are automatically added to the CSS source files in the Visual Studio Code editor. You can toggle this functionality on and off.
For more information, see Update .css files from within the Styles tab (CSS mirror editing).
To provide feedback, in Visual Studio Code, in the Activity Bar, click Microsoft Edge
Tools, and then in the CSS Mirror Editing section, click the leaving feedback here link.

All error and warning messages in the Console now have a Search Web icon
The Search for this message on the Web icon is now available for all errors and warnings in the Console. Previously, this icon only appeared for some of the common errors and warnings. Now the icon has been added on the remaining errors and warnings. Click the Search for this message on the Web icon to search the web using the relevant error or warning string.
For more information, see Search for Console errors on the web.

See also:
 Search the web for a Console error message string in Console overview.
Improved keyboard access for defining User-
Agent Client Hints
Starting with Microsoft Edge version 92, you can specify User-Agent Client Hints. You can specify User-Agent Client Hints in either of two places:
When defining the user agent string in the Network conditions tool.
When adding a custom device to emulate in Settings.
In Microsoft Edge prior to version 95, when adding a custom device to emulate from the Devices section of Settings, selecting the User agent client hints button with the keyboard caused the incorrect UI item to be activated. Instead of expanding the User agent client hints section for you to fill it in, it selected the Add button. The device you were starting to define was immediately added, using empty fields in the User agent client hints section.
In Microsoft Edge version 95, this issue has been fixed. Selecting the User agent client hints button by using the keyboard now expands a form, in which you can specify client hints for the custom device.
To learn more about User-Agent Client Hints, see Detecting Microsoft Edge from your website.

To view the history of this feature in the Chromium open-source project, see Issue 1243827: User agent client hints form accessibility.
Console filters now display grouped messages if the filter matches the group title
You can use console.group() to label a group of messages and provide some organization for Console messages. In earlier versions of Microsoft Edge, there were several problems when trying to filter grouped messages in the Console. When filtering to a group label, the Console wouldn't display individual messages inside the group.
Also, filtering wouldn't hide group labels, even if the label didn't match the filter.
In Microsoft Edge version 95, these problems have been fixed. Filtering to a label now displays the group label and the individual messages inside of the group. When the filter doesn't match the group label, the entire group is hidden.
When the filter string matches a group label, the group and its members are displayed:

When the filter string doesn't match a group label, neither the group nor its members are displayed:

See also:
 group in Console object API Reference.
To view the history of this feature in the Chromium open-source project, see Issue 363796: ☂ Console filter inappropriately hides grouped content and doesn't hide group titles.
Announcements from the Chromium project
The following are some of the additional features that are available in Microsoft Edge version 95 that were contributed to the open-source Chromium project.
Improved the display of properties
DevTools improves the display of properties by:
 Always bolding and sorting own properties first, in the Console, in the Sources tool, and in the Properties tab in the Elements tool. (An own property is a property that's defined directly on the object.)
 Flattening the properties display in the Properties pane.
For example, the snippet below creates an URL object link with two own properties: user and access, and then updates the value of an inherited property, search:
JavaScriptconst link = new URL('https://blogs.windows.com/msedgedev/'); link.user = { id: 1, name: 'Amelie Garner' }; link.access = 'admin'; link.search = `?access=${link.access}`;After entering the above code in the Console, try logging link. Own properties are now bold and are first in the sort order. These changes make it easier to spot custom properties, especially for Web APIs (such as URL) that have many inherited properties:

In the Properties pane of the Elements tool, the list of properties is now flattened for a better experience when debugging DOM properties, especially for Web components
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
For the history of this feature, see Chromium issues 1076820 and 1119900.
Snippets are now sorted in the Sources panel
In the Snippets tab of the Sources tool, previously, the snippets weren't sorted. Snippets are now sorted alphabetically:

See also:
Run snippets of JavaScript on any webpage
Chrome 85 - What's New in DevTools - video.
For the history of this feature, see Chromium issue: 1243976.
Improved UI for DevTools command menu
The Command Menu has been enhanced to make it easier to search for a file. When you press Ctrl+P in Windows and Linux or Command+P in macOS, the Command Menu now displays file names in bold, along with an icon indicating the file type:

See also:


Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 94)
Article • 11/15/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 94

Search for Console errors on the web
Search the web for your Console errors, from within DevTools. In the Console, many errors now have a Search for this message on the Web button, shown as a magnifying glass. When you select the Search for this message on the Web button, a new tab opens in the browser and shows search results for the error:

See Search the web for a Console error message string.
DevTools extension for Visual Studio Code includes the latest tools, theme support, and helpful links
In the latest version of the Microsoft Edge DevTools extension for Visual Studio Code, we released the following updates or new features:
Shares the same codebase that's used for the browser-based DevTools.
Supports themes that ship with Visual Studio Code.
Adds a Helpful Links section in the Microsoft Edge Tools sidebar, with buttons for Documentation, Report a Bug, and Request a Feature.
 Adds a Close instance (X) button in the Microsoft Edge Tools > Targets pane, to close the browser that was opened by the extension.
 Adds support for JavaScript Debugger connections to remote workspaces.
The extension running inside Visual Studio Code, matching the dark theme of Visual Studio Code, and a new Helpful Links sidebar:

Light themes from Visual Studio Code are also supported:

See also:
 Microsoft Edge DevTools extension for Visual Studio Code
Breakpoint icons are now displayed when using
Visual Studio Code themes
Update: Starting with Microsoft Edge 131, the Visual Studio Code themes feature is removed, and such themes revert to the default themes:
Light+
Dark+
In Microsoft Edge version 93, you can apply themes used in Visual Studio Code to the DevTools extension.
Previously, when using a theme from Visual Studio Code in DevTools, breakpoint icons on the left margin of the code in the Sources tool weren't displayed. Starting in Microsoft Edge 94, breakpoint icons are now displayed as expected:

See also:
 Pause your code with breakpoints
Navigate to the More Tools button with the keyboard
Previously, you couldn't navigate to the More Tools (+) button in DevTools using the arrow keys on the keyboard when the toolbar had focus. When using the arrow keys, after reaching the last tool in the toolbar, the focus looped back to the first tool, or the More tabs menu was displayed.
Starting with Microsoft Edge version 93, the More tabs (>>) button and the More Tools button can be selected by using the arrow keys, when focus is on the toolbar:

See also:


Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 93)
Article • 11/15/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Video: Microsoft Edge | What's New in DevTools 93

Apply themes from Visual Studio Code to
DevTools
Update: Starting with Microsoft Edge 131, the Visual Studio Code themes feature is removed, and such themes revert to the default themes:
Light+
Dark+
In addition to the existing light and dark themes, Microsoft Edge DevTools now supports some of the most popular color themes from Visual Studio Code. To select a color theme, click the DevTools Settings () button, and then select a theme from the Theme dropdown list.

The supported Visual Studio Code themes are:
Light themes:
Solarized Light Quiet Light
Dark themes:
Abyss
Kimbie Dark
Monokai
Monokai Dimmed
Solarized Dark
Red
Tomorrow Night Blue
Debug DOM node memory leaks with the new Detached Elements tool
October 2024 update: To debug DOM memory leaks, use either:
 The Detached Elements tool. Detached nodes have a link to the associated JavaScript code.
 The Detached elements profiling type in the Memory tool.
A DOM node is considered "detached" when it is no longer attached to any element of the DOM but is still being retained in memory by Microsoft Edge. The browser cannot garbage-collect the element, because some JavaScript is still referencing the element even though it's no longer on the page or a part of the DOM.
The Detached Elements profiling type in the Memory tool finds all of the detached elements on your page and displays them. You can expand and collapse a detached element to see the parent and child nodes that are also being retained. You can trigger the browser's garbage collection by selecting Collect garbage and validate that you have a memory leak when a detached element cannot be garbage-collected. Finally, you can jump into JavaScript that's referencing the detached element by taking a heap snapshot with the Analyze button.

Update: This feature has been released and is no longer experimental. See also:
 Debug DOM memory leaks by using the Detached Elements tool
The Visual Studio Code debugger now integrates with the DevTools extension
If you use JavaScript debugging in Visual Studio Code, you can now launch the Microsoft Edge Developer Tools for Visual Studio Code extension by selecting the Inspect button.

This feature integrates DOM and CSS debugging with JavaScript debugging in Visual
Studio Code. If you don't have the DevTools extension installed, when you select the Inspect button, Visual Studio Code prompts you to install the extension.
Other new features are:
 The tools refresh automatically when you switch between different debugging targets.
Several bug fixes.
More detailed documentation of the extension.
For more details about improvements and fixes, check the changelog file in the

See also:
 Integration with Visual Studio Code debugging.
Get the Microsoft Edge Developer Tools for Visual Studio Code extension. Microsoft Visual Studio Code updates extensions automatically; to update this extension manually instead, see Update an extension manually.
You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
New Fluent UI icons for DevTools
Microsoft Edge DevTools has adopted Fluent UI, giving buttons and menus a more modern look that better aligns with the rest of the Microsoft Edge browser.

Change the DevTools display language directly from Settings
Previously, to change the display language in DevTools, you had to change the browser language. Now you can easily switch the display language in DevTools Settings, without having to change your browser settings. To do this, open Settings, and then in Preferences, select a language from the Language dropdown list.

By default, DevTools matches your browser's display language. See Change DevTools language settings.
For the history of this feature in the Chromium open-source project, see Issue
2882756.
Copy a declaration in the Styles pane for CSSin-JS libraries
Previously, when using CSS-in-JS libraries, you were not able to copy CSS declarations (a CSS property and value) formatted for JavaScript. You would have to edit the copied CSS to match JavaScript's syntax.
Now in Microsoft Edge version 93, you can copy a single CSS declaration or all the declarations in a style rule and paste them directly into a JavaScript file without having syntax issues. To try this feature:
1. In the Styles pane of the Elements tool, right-click a declaration in a style rule.
2. Select Copy declaration as JS or Copy all declarations as JS.
3. Paste the copied CSS into a JavaScript file in your text editor, such as Visual Studio Code. For example: '--more-link': 'lime'.

To learn more about viewing and changing CSS, see CSS features reference.
Easier customization of User-Agent Client Hints
User-Agent Client Hints makes browser information more accessible than a semicolondelimited User-Agent string, and improves site compatibility. Initially, User-Agent Client Hints were time-consuming to test and debug. There was less control over the client hints, and client hints had to be filled in properly for the form to work.
In this release, we redesigned the debugging experience so you can easily modify UserAgent Client Hints through a UI with multiple separate fields and controls. Also, you can now test your custom User-Agent Client Hints and a User-Agent string simultaneously.
You can now define User-Agent Client Hints for a custom device in Settings or in the Network conditions tool.

For more information about defining hints in Settings, see Set user agent client hints.
You can also override User-Agent Client Hints for the current page by using the Network conditions tool.

For more information about defining hints in the Network conditions tool, see Set user agent client hints.
For the history of this feature in the Chromium open-source project, see Issue
1174299.
Screen readers now announce errors, warnings, and issues in toolbar and Console
Previously, users of screen readers would only hear the number of errors, warnings, or issues announced in the DevTools toolbar. The additional information of what type of notification was being announced wasn't included, such as "Error", "Warning", or "Issue".
For example, if the DevTools reported 3 errors, screen readers would just announce "3".
Now in Microsoft Edge version 93, screen readers correctly announce the type and number of notifications; errors, warnings, or issues. For example, if DevTools reports 3 errors and 5 warnings, screen readers now announce "3 errors, 5 warnings". This fix has been applied to both the notifications in the DevTools toolbar and in the Console.

For information about debugging Console errors, see Fixing JavaScript errors that are reported in the Console. For information about issues found by DevTools and improvements you can make to a webpage, see Find and fix problems using the Issues tool.
For the history of this feature in the Chromium open-source project, see Issue
1223208.
Copy as PowerShell in the Network tool now includes cookies
Previously, in the Network tool, the Copy > Copy as PowerShell context menu option didn't include cookies when generating a PowerShell command for a given network request in the Network Activity Log. This meant that the generated PowerShell command couldn't successfully make the same network request if cookies were required.
Now in Microsoft Edge version 93, the Copy as PowerShell context menu option correctly sets the User-Agent string and cookies that were observed by DevTools. The generated PowerShell command can now successfully make the same network request that was observed by DevTools, even to servers that depend on cookies.

For more information about the Network Activity Log, see Network features reference.


Feedback
Was this page helpful? 
What's New in DevTools (Microsoft Edge 92)
Article • 06/14/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Tip
The Microsoft Build 2021 conference was on May 25-27. Here's a video from Build about the updates to DevTools: Microsoft Edge | State of the Platform	 Microsoft Edge brings a compelling and consistent platform with tools for developers. As our legacy browsers phase out of support, Edge will soon be the only supported browser from Microsoft on Windows 10 or later. Join us to learn about the latest across the Edge platform, tools, and web apps.
The Close button is no longer hidden when DevTools is narrow
In Microsoft Edge version 91 or earlier, the Close button to close DevTools isn't displayed when the DevTools viewport is narrow. In Microsoft Edge version 92, the Close button in the DevTools is always present, regardless of the DevTools viewport width.

Add tools quickly with the new More Tools button
There's a new way to open more tools in Microsoft Edge DevTools: the More Tools (+) menu. The More Tools menu appears on the toolbar in the main panel and on the toolbar of the Drawer (now Quick View panel). Selecting a tool from the More Tools menu adds the tool to the toolbar.
To reorder the tabs on either toolbar, select and drag the tabs.
The More Tools menu was available as an experiment in Microsoft Edge version 89, and is now always present.


See also:
 The More Tools menus in About the list of tools
Improvements for hovering, selecting, and
closing tools
Tabs for each tool have been reformatted to reduce the chance of accidentally closing a tool. On each tab in the main toolbar and in the toolbar of the Drawer (now Quick View panel), the following have been added:
Spacing around the tab.
Spacing around the close (x) button in the tab.
A background color when hovering over the tab.
A tooltip for the close (x) button of the tab.
Higher contrast for the close (x) button of the tab.
For example, when you are in the Performance tool and you hover over the Network tool's tab, these improvements help prevent accidentally closing the Network tool.
Tabs before reformatting:

Tabs after reformatting:

These improvements are especially relevant for users of localized DevTools, in which the tabs may be narrower and easier to accidentally close:

It's now easier to re-add a tool that you closed: a More Tools menu has been added to the main toolbar and the Drawer (now Quick View) toolbar.
See also:
 About the list of tools
Better support for screen readers in the Console
Prior to Microsoft Edge version 92, in the Console, assistive technologies such as screen readers didn't announce autocomplete suggestions or the results of evaluated expressions. This has been fixed now.
In the Console, screen readers now announce the currently selected autocomplete suggestion:

In the Console, screen readers now announce the result of an evaluated expression:

See also:
 Navigate DevTools with assistive technology
Source Order Viewer
You can now view the order of source elements overlaid on the rendered webpage, for better accessibility inspection.
The order of content in an HTML document is important for search engine optimization and accessibility. CSS allows developers to create content that looks different in its onscreen order than the order in the HTML source document. This is an accessibility problem, because screen-reader users could get a confusing experience.

See Test keyboard support using the Source Order Viewer.
For the history of this feature in the Chromium open-source project, see Issue
1094406.
User-Agent Client Hints for devices in the
Network conditions tab
User-Agent Client Hints are now applied for devices in the User agent field in the
Network conditions tool. User-Agent Client Hints are a new expansion to the Client Hints API that enables you to access information about a user's browser in an ergonomic way that preserves privacy.

See User-Agent Client Hints.
For the history of this feature in the Chromium open-source project, see Issue
1174299.
Microsoft Edge Developer Tools for Visual
Studio Code version 1.1.8
The Microsoft Edge Developer Tools for Visual Studio Code extension version 1.1.8 for Microsoft Visual Studio Code has the following changes since the previous release. Microsoft Visual Studio Code updates extensions automatically. To manually update to version 1.1.8, see Update an extension manually.
You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
In-context documentation and UI to make it easier to use the DevTools extension
Version 1.1.8 of the Microsoft Edge Developer Tools for Visual Studio Code extension now features a simpler way to start a new instance of Microsoft Edge, by presenting instructions, buttons, links, and a documentation page to guide you.
 When you select the Microsoft Edge Tools button in the Activity Bar of Visual
Studio Code, the Microsoft Edge Tools: Targets panel now presents explanatory
text, buttons, and links to guide you, instead of a blank panel.
 When you open a new instance of Microsoft Edge from within Visual Studio Code,
Microsoft Edge now shows a start page that explains how to use the Developer Tools extension, instead of a blank page.
 The Microsoft Edge Tools: Targets panel now has a Generate launch.json button and instructions, to help launch your project for debugging in Microsoft Edge.
See also:
 Microsoft Edge DevTools extension for Visual Studio Code
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
CSS Grid editor
You can now preview and author CSS Grid layouts, using the new CSS Grid editor.
When an HTML element on your page has display: grid or display: inline-grid applied to it, a grid icon is displayed next to it in the Styles tab. Click the grid icon to display or hide the CSS grid editor. In the CSS grid editor, select any of the icons (such as justify-content: space-around) to preview the layout in the rendered page. Flex layout works similarly.

For the history of this feature in the Chromium open-source project, see Issue
1203241.
See also:
 Inspect CSS Grid
Support for const redeclarations in the Console
The Console now supports redeclaration of const variables across separate REPL scripts
(such as when you run a statement in the Console), in addition to the existing let and class redeclarations. This support allows you to experiment with different declarations
for const variables without refreshing the page. Previously, DevTools threw a syntax error if you redeclared a const binding.
Refer to the example below. const redeclaration is supported across separate REPL scripts (refer to variable a). Note that the following scenarios aren't supported, by design:
const redeclaration of page scripts isn't allowed in REPL scripts. const redeclaration within the same REPL script isn't allowed (refer to variable b).

To learn how to run a single REPL script or a multi-line REPL script, see Run JavaScript in the Console.
For the history of this feature in the Chromium open-source project, see Issue
1076427.
New shortcut to view iframe details
To quickly view iframe details, you can now right-click an iframe element in the Elements tool, and then select Show iframe details.

This displays the details about the iframe in the Application tool. In the Application tool, you can examine document details, security and isolation status, permissions policy, and more, to debug potential issues.

See also:
Application tool, to manage storage
Inspect, edit, and debug HTML and CSS with the Elements tool
For the history of this feature in the Chromium open-source project, see Issue
1192084.
Enhanced CORS debugging support
Cross-origin resource sharing (CORS) errors are now surfaced in the Issues tool. There are various potential causes of CORS errors. Click each issue to expand it and see potential causes and solutions.

See also:
 Report CORS errors in the Network tool in What's New in DevTools (Microsoft Edge 88)
 Find and fix problems using the Issues tool
For the history of this feature in the Chromium open-source project, see Issue
1141824.
Renamed XHR filter to Fetch/XHR
In the Network tool, the XHR filter is now renamed to Fetch/XHR. This change makes it clearer that this filter includes both XMLHttpRequest and Fetch API network requests.

See also:
Inspect network activity
XMLHttpRequest spec
Fetch spec
For the history of this feature in the Chromium open-source project, see Issue
1201398.
Filter Wasm resource type in the Network tool
In the Network tool, you can now select the new Wasm filter to filter the WebAssembly network requests.

See also:
 Filter resources in Inspect network activity
For the history of this feature in the Chromium open-source project, see Issue
1103638.
Compute Intersections are now included in the Performance tool
In the Performance tool, DevTools now displays Compute Intersections in the flame chart. These changes help you identify intersection observers events and debug the potential performance overhead of intersection observers.

See also:
Trust is good, observation is better: Intersection Observer v2 Analyze a performance recording
For the history of this feature in the Chromium open-source project, see Issue


Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 91)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Wavy underlines highlight code issues and improvements in Elements tool
In most modern IDEs, wavy underlines under text indicate syntax errors. In Microsoft
Edge version 91 or later, wavy underlines display under HTML in the DOM view of the Elements tool. The wavy underlines indicate code issues and suggestions related to accessibility, compatibility, performance, and so on.
To open the Issues tool and learn more about the issue and how to fix it:
Press and hold Shift, and then click a wavy underline.
Or, right-click a wavy underline, and then select Show in Issues.
Selecting the underlined error in the Elements tool:

Displaying error details in the Issues tool:

See also:
 Find and fix problems using the Issues tool
Learn about DevTools with informative tooltips
The DevTools Tooltips feature helps you learn about all the different tools and panes.
Hover over each outlined region of DevTools to learn more about how to use the tool.
To turn on Tooltips, do any of the following:
 Select Customize and control DevTools (...) > Help > Toggle the DevTools
Tooltips.
Press Ctrl+Shift+H (Windows, Linux) or Command+Shift+H (macOS).
Open the Command Menu and then type tooltips.
Then hover over each outlined region of DevTools:

To turn off Tooltips, press Esc.
Update: This feature has been released and is no longer experimental.
Note: As of May 2022, tooltips aren't supported from the Activity Bar.
Service worker update timeline
In Microsoft Edge version 91 or later, if you're a Progressive Web App or service worker developer, display the update lifecycle of your service workers as a timeline in the Application tool. This feature helps you understand the time your service worker spends in each of the following stages:
Install
Wait
Activate

For real-time updates on this feature in the Chromium open-source project, see Issue
1066604.
See also:
Updating the service worker in The service worker lifecycle at web.dev. Service worker improvements - DevTools debugging tools for Progressive Web Apps and service workers.
Progressive Web Apps no longer display warnings for non-square icons
In Microsoft Edge version 90 or earlier, if the Web App Manifest of your PWA included a non-square icon, a warning was displayed in the Errors and Warnings section for each non-square icon. In Microsoft Edge version 91 or later, the Manifest section in the Application tool displays no warnings if you provide at least one square icon. If you don't provide any square icons, the following warning message appears:
OutputMost operating systems require square icons.  Please include at least one square icon in the array.In Microsoft Edge version 90 or earlier, an error is displayed for each icon that is nonsquare:

In Microsoft Edge version 91 or later, no error is displayed when you provide at least one square icon:

To view errors and warnings in your Web App Manifest, select Application tool > Application section > Manifest. Errors and warnings are listed under the Errors and Warnings heading.
For real-time updates on this feature in the Chromium open-source project, see Issue
1185945.
See also:
 The web app manifest in Making PWAs installable at MDN > References > Progressive web apps > Guides.
Web app manifests at MDN > References.
PWABuilder: Image Generator - creates app icons for various platforms, to include in your Web App Manifest.
Localized DevTools now supported in Chromium-based browsers
Starting in Microsoft Edge version 81, the Microsoft Edge DevTools UI is displayed in your own language. Many developers use developer tools such as StackOverflow and Visual Studio Code in their native language. To provide similar flexibility of UI language, the Microsoft Edge DevTools team, Chrome DevTools team, and the Google Lighthouse team collaborated to provide the same experience in all Chromium-based browsers.

See Change DevTools language settings.
For more information about the collaboration on this feature in the Chromium opensource project, see Issue 1136655.
Use the keyboard to navigate to CSS variables
Starting in Microsoft Edge version 88, the Styles pane displays CSS variables and provides a link directly to the definition of each variable. In Microsoft Edge version 91 or later, you can use the arrow keys to easily navigate to CSS variables. To open the definition in the Styles pane, hover on a variable, and then press Enter:

For real-time updates on this feature in the Chromium open-source project, see Issue
1187735.
See also:
Using CSS custom properties (variables)
CSS features reference
Issues are automatically sorted by severity
The Issues tool displays recommendations to improve your website, including accessibility, performance, security, and so on. Based on user feedback, issues are now automatically sorted by severity. In each feedback category, each issue that's marked as an Error appears first, followed each issue marked as a Warning, then each issue marked as a Tip:

See also:
 Find and fix problems using the Issues tool
Microsoft Edge Developer Tools for Visual
Studio Code version 1.1.7
The Microsoft Edge Tools for Visual Studio Code extension version 1.1.7 provides the DevTools from Microsoft Edge version 88. This extension now supports ARM devices and no longer depends on the Debugger for Microsoft Edge extension.
Version 1.1.7 includes the following bug fixes and improvements:
Updated the reliability of target closure.
Updated the side panel to automatically refreshes when you debug targets that are created or destroyed.
 Added a new right-click menu that gives you faster access to the extension settings and the latest Changelog.
 Updated and simplified the release of extension documentation including the newest features.
To manually update to version 1.1.7, see Update an extension manually. You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
See also:
 Microsoft Edge DevTools extension for Visual Studio Code
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
Visualize CSS scroll-snap
In the Elements tool, you can now toggle the scroll-snap badge to inspect the CSS scroll-snap alignment. When an HTML element on your webpage has scroll-snap-type applied to it, a scroll-snap badge is displayed next to it in the Elements tool. Click the scroll-snap badge to toggle displaying a scroll-snap overlay on the webpage.
For an example webpage, see Scroll Snap Demo. In the example, dots appear on snap edges. The scroll port has a solid outline, while the snap items have dashed outlines. The scroll padding is filled-in green, while the scroll margin is filled-in orange:

Inspect CSS Grid
CSS features reference
New Memory Inspector tool
Use the new Memory Inspector tool to inspect an ArrayBuffer in JavaScript and Wasm memory:

See:
Inspect a JavaScript ArrayBuffer with the Memory Inspector tool
Using the Debugger pane to debug JavaScript code
For the history of this feature in the Chromium open-source project, see Issue
1166577.
New Badge settings pane in the Elements tool
Now, use the Badge settings in the Elements tool to turn on (or off) individual badges. Use this feature to customize and stay focused on important badges while you inspect webpages.
1. Right-click an element and then click Badge settings. The badge settings pane opens at the top of the Elements tool:

2. To display (or hide) the badges, select (or clear) the checkbox next to the badge name.
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Enhanced image preview with aspect ratio information
In the Elements tool, image previews have been enhanced to display more information, including the following details:
Rendered size
Rendered aspect ratio
Intrinsic size
Intrinsic aspect ratio
File size

This information helps you better understand your images and apply optimization. The image aspect ratio information is also available in the Network tool, when you click a page resource that's an image:

For the history of this feature in the Chromium open-source project, see Issues
1149832 and 1170656.
See also:
Inspect, edit, and debug HTML and CSS with the Elements tool Inspect network activity
New options to configure Content-Encodings in the Network conditions tool
In the Network tool, click the new More network conditions... button next to the Throttling dropdown menu to open the Network conditions tool. To test if server responses are correctly encoded for browsers that don't support gzip, brotli, or another future Content-Encoding:
1. Open the Network conditions tool.

 Network conditions tool
For the history of this feature in the Chromium open-source project, see Issue
1162042.
Styles pane enhancements
New shortcut to display computed value in the Styles pane
Now, to display the computed CSS value in the Styles tab in the Elements tool:
1. Right-click a CSS property, and then select View computed value:

See also:
View only the CSS that is actually applied to an element in CSS features reference.
View the Computed sidebar pane in the Styles pane in What's New in DevTools (Microsoft Edge 87).
 Explore all computed styles in Navigate DevTools with assistive technology.
To view the history of this feature in the Chromium open-source project, see Issue
1076198.
Support for the accent-color keyword
The autocomplete UI of the Styles pane now detects the accent-color CSS keyword, which allows you to specify the accent color for UI controls generated by the element. Examples of UI controls that are generated by an element include checkboxes or radio buttons.

For more information about the status of the Chromium implementation, see Feature:
accent-color CSS property	. To turn on this feature, go to edge://flags#enableexperimental-web-platform-features and set the checkbox to Enabled.
For the history of this feature in the Chromium open-source project, see Issue
1092093.
See also:
 CSS features reference
Display details about blocked features in the Frame details view
Permissions Policy is a web platform API that gives a website the ability to allow or block the use of browser features in an individual frame or in an iframe that it embeds. To display the details on why a feature is blocked:
1. Go to OOPIF Permissions Policy.
2. Open the Application tool.
3. Click a frame.
4. Go to the Permissions Policy section.
5. Locate the Disabled Features property.
6. Click Show details.
7. Click the icon next to each policy to go to the iframe or network request that blocked the feature.

See also:
Permissions Policy Explainer
Application tool, to manage storage
To view the history of this feature in the Chromium open-source project, see Issue
1158827.
Filter experiments in the Experiments setting
Find experiments quicker with the new experiment filter. For example, to turn on new experiments for code issues:
1. In DevTools, select Settings () > Experiments.
2. In the Filter text box, start typing issues:

See also:
 Experimental features in Microsoft Edge DevTools
New Vary Header column in the Cache storage pane
In the Application tool's Cache Storage pane, use the new Vary Header column to display the Vary HTTP response header values:
For the history of this feature in the Chromium open-source project, see Issue
1186049.
See also:
Vary in Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. View Cache data
Sources tool improvements
Support for new JavaScript features
DevTools now supports the new Private brand checks a.k.a. #foo in obj JavaScript language feature. The private brand checks feature extends the in operator to support private (#) class fields on a specific object. Try it in the Console and Sources tools.
To inspect the private fields:
1. In the Sources tool, go to the debugger pane.
2. Expand the Scope section:

See also:
Private brand checks a.k.a. #foo in obj at v8.dev. in operator	 at MDN.
	Private class fields	 at v8.dev.
For the history of this feature in the Chromium open-source project, see Issue 11374.
Enhanced support for breakpoints debugging
In Microsoft Edge version 90 or earlier, DevTools only set breakpoints in a single bundle. In Microsoft Edge version 91 or later, when you debug a shared component, DevTools properly sets breakpoints in multiple bundles.
Modern JavaScript bundlers like Webpack, and Rollup support splitting code into bundles. See Code splitting.
For the history of this feature in the Chromium open-source project, see Issues
1142705, 979000, and 1180794.
See also:
 Pause code with breakpoints
Support hover preview with bracket notation
The Sources tool now supports hover preview on JavaScript member expressions that

For the history of this feature in the Chromium open-source project, see Issue
1178305.
See also:
 JavaScript debugging features
Improved outline of HTML files
DevTools now has better outline support for .html files. In the Sources tool, open the
.html file. To turn on (or off) the code outline, press Ctrl+Shift+O on Windows/Linux or Command+Shift+O on macOS. Previously, DevTools only displayed some of the functions. In the following figure, DevTools now correctly list all functions in the outline:

For the history of this feature in the Chromium open-source project, see Issues
761019 and 1191465.
See also:
Sources tool keyboard shortcuts in Keyboard shortcuts
Using the Editor pane to view or edit files in Sources tool overview
Proper error stack traces for Wasm debugging
In Microsoft Edge version 90 or earlier, DevTools only displayed generic Wasm references in Error stack traces. In Microsoft Edge version 91 or later, DevTools resolves inline function requests and displays the source location in Error stack traces for Wasm debugging. To learn more about Error stack traces in the Console, see error in Console object API Reference.
In Microsoft Edge version 91 or later, DevTools resolves inline function requests and displays proper error stack traces for Wasm debugging.
In Microsoft Edge version 90 and earlier, the source location isn't displayed in the Error stack traces. Source locations include dsquare. Previous error stack traces for Wasm debugging:

In Microsoft Edge version 91 and later, the source location is displayed in the Error stack traces. Proper error stack traces for Wasm debugging:

For the history of this feature in the Chromium open-source project, see Issue


Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 90)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Group tools together in Focus Mode
Focus Mode is an experimental interface that allows you to group different tools together based on your own debugging scenarios. The new Activity Bar displayed on the left includes predefined tool groups such as Layout and Debugging. To customize each tool group, close tools with the Close (X) icon or add new tools with the More tools (+) icon.
To turn on the experiment, see Turning an experiment on or off and select the checkboxes next to Focus Mode and DevTools Tooltips and Enable + button tab menus to open more tools. For more information about this feature or to comment with questions and ideas, see DevTools: Focus Mode UI.

Learn about DevTools with informative tooltips
The DevTools Tooltips feature helps you learn about all the different tools and panes.
Hover over each outlined region of DevTools to learn more about how to use the tool.
To turn on Tooltips, do one of the following:
 Select Customize and control DevTools (...) > Help > Toggle the DevTools
Tooltips.
Press Ctrl+Shift+H (Windows, Linux) or Command+Shift+H (macOS).
Open the Command Menu and then type tooltips.
Then hover over each outlined region of DevTools:

To turn off Tooltips, press Esc.
Update: This feature has been released and is no longer experimental.
Note: As of May 2022, tooltips aren't supported from the Activity Bar.
Customize keyboard shortcuts in Settings
You can now customize the keyboard shortcut for any action in the DevTools.
To edit a keyboard shortcut:
1. Open DevTools, and then select Settings > Shortcuts.
2. Select the action you want to customize.
3. Click the Edit () icon.
4. Press the keys you want to bind to the action.
5. Click the checkmark () icon.
For more information about customizing and editing shortcuts, see Customize keyboard shortcuts in DevTools. For real-time updates on this feature in the Chromium open-

Microsoft Edge DevTools for Visual Studio
Code extension update 1.1.4
The Microsoft Edge Developer Tools for Visual Studio Code extension version 1.1.4 for Microsoft Visual Studio Code now displays a favicon next to each of the DevTools instances. Console messages from Microsoft Edge now display in the DevTools Console under Output of Microsoft Visual Studio Code. Microsoft Visual Studio Code updates extensions automatically. To manually update to version 1.1.4, see Update an extension manually. You can file issues and contribute to the extension on the vscode-edgedevtools GitHub repo.
The following figure displays messages from an example webpage logged in the Console tool in Microsoft Edge:

The following figure displays the same messages from the example webpage logged in the DevTools Console under Output of Microsoft Visual Studio Code:

See also:
 Microsoft Edge DevTools extension for Visual Studio Code
Improved CSS flexbox editing with visual flexbox editor and multiple overlays
DevTools now has dedicated CSS flexbox debugging tools. If the display: flex or display: inline-flex CSS style is applied to an HTML element, a flex icon appears next
to that element in the Elements tool. To display (or hide) a flex overlay on the webpage, click the flex icon.
To open the Flexbox editor, in the Elements tool, go to the Styles tab and then click the new icon next to the display: flex or display: inline-flex style. The Flexbox editor provides a quick way to edit the flexbox properties:

In addition, the Flexbox section in the Layout pane displays all of the flexbox elements on the webpage. You can toggle the overlay of each element:

For the history of this feature in the Chromium open-source project, see Issues
1166710 and 1175699.
See also:
Edit CSS font styles and settings in the Styles pane
Update .css files from within the Styles tab (CSS mirror editing)
Keyboard navigation improvements for network requests
Previously, you were not able to expand or collapse the chain of requests using the arrow keys on the keyboard in the Initiator pane, unlike the DOM in the Elements tool. When a network request is selected in the Network tool, the Initiator pane displays the chain of requests that initiated the currently selected request.
In Microsoft Edge version 90, you can expand or collapse the chain of requests using the arrow keys on the keyboard in the Initiator pane. The focused network request in the chain is also now highlighted.
Click a Network request and then click the Initiator pane:

Expand or collapse the request initiator chain and follow the highlighted row:

To learn more about initiators in the Network tool, see Display initiators and dependencies.
For the history of this feature in the Chromium open-source project, see Issues
1158276 and 1160637.
Filtering in the Console is more consistent
While you filter with the Console Sidebar, the filters in the Log Levels dropdown list aren't available. Previously, the Log Levels dropdown list was highlighted when you hovered over it, even while a filter from the Console Sidebar was selected. In Microsoft Edge version 90, the Log Levels dropdown list is no longer highlighted when you hover over it while a filter from the Console Sidebar is selected.
To learn more about filtering in the Console, see Filter Messages in Console features reference.
Previously, if you open the Console sidebar and hover on Default levels, it was highlighted:

Starting in Microsoft Edge 90, if you click the Console sidebar and hover on Default levels, it doesn't highlight:

Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
The Console now escapes double-quote characters
Previously, the Console didn't output valid double-quote (") characters in JavaScript strings. Starting in Microsoft Edge version 90, the Console outputs JavaScript strings using escaped double-quote (") characters:
For the history of this feature in the Chromium open-source project, see Issue
1178530.
See also:
 Console features reference
Emulate the CSS color-gamut media feature
The color-gamut media query emulates the approximate range of colors that are supported by the browser and device that you're testing. The dropdown list under Emulate CSS media feature color-gamut contains color spaces that DevTools can emulate. For example, to trigger a color-gamut: p3 media query, select color-gamut: p3 from the dropdown list.
To emulate the CSS color-gamut media feature:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Rendering tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button. The Rendering tool opens.
3. In the Emulate CSS media feature color-gamut dropdown list, select a colorgamut option:

gamut' feature.
For the history of this feature in the Chromium open-source project, see Issue
1073887.
See also:
 Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
Improved tooling for Progressive Web Apps
PWA installability warning in the Console
The Console now displays a more detailed installability warning message for Progressive Web Apps (PWAs), with a link to Improving Progressive Web App offline support detection.

See also:
 Overview of Progressive Web Apps (PWAs)
PWA description length warning in the Manifest pane
In the Application tool, the Manifest pane now displays a warning message if the manifest description exceeds 324 characters:

For the history of this feature in the Chromium open-source project, see Issues
965802, 1146450, and 1169689.
See also:
 Application tool, to manage storage
New Remote Address Space column in the Network tool
In the Network tool, the new Remote Address Space column displays the network IP address space of each network resource. To display the new Remote Address Space column:
1. In DevTools, open the Network tool.
2. In the Requests table (the main, lower part of the Network tool), right-click the header row, and then select Remote Address Space:

The Requests table now displays the Remote Address Space column:

To view the history of this feature in the Chromium open-source project, see Issue
1128885.
See also:
 Add or remove columns, in Network features reference.
Display allowed and disallowed features in the Frame details view
In the Application tool, the Frames node in the lower left opens the Frame details view. The Frame details view now includes a Permissions Policy section, which displays a list of allowed and disallowed browser features:

This list is controlled by the Permissions Policy web platform API, which allows a webpage to use, or blocks a webpage from using, specified browser features in an individual frame or in iframes that the frame embeds.
For the history of this feature in the Chromium open-source project, see Issue
1158827.
See also:
Permissions Policy Explainer
Application tool, to manage storage
New SameParty column in the Cookies pane
The Cookies pane in the Application tool now displays the SameParty attribute for each cookie:
The SameParty attribute is a new boolean attribute to indicate whether a cookie is included in requests to origins of the same First-Party Sets.
For the history of this feature in the Chromium open-source project, see Issue
1161427.
See also:
 View, edit, and delete cookies
fn.displayName property in the Console tool is now deprecated
Previously, the fn.displayName property allowed you to control debug names for functions to display in error.stack and in DevTools stack traces. Starting in Microsoft
Edge version 90, the fn.displayName property is now deprecated, and replaced by the fn.name property:

For the history of this feature in the Chromium open-source project, see Issue
1177685.
See also:
Console features reference
Console tool utility functions and selectors
Full accessibility tree view in the Elements tool

This experiment provides a full accessibility tree view in the Elements tool. The Accessibility tab (grouped with the Styles tab) provides a partial accessibility tree view, that displays the direct ancestor chain from the root node to the inspected node. After you turn on this experiment and reload DevTools, click the button area at the top of the Elements panel to switch the display in the Elements tool for all elements on the webpage.
To display the DOM tree view, click the Switch to DOM Tree view button area at the top:

To display the full accessibility tree, click the Switch to Accessibility Tree view button area at the top:

To turn on the experiment, see Turning an experiment on or off and select the checkbox next to Enable full accessibility tree view in the Elements panel.
For the history of this feature in the Chromium open-source project, see Issue 887173.
See also:
Test accessibility using the Accessibility tab
Inspect, edit, and debug HTML and CSS with the Elements tool


Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 89)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
What's New is now Welcome
The What's New tool in the Microsoft Edge DevTools now has a new appearance and a new name: Welcome. The Welcome tool still displays the latest DevTools news and updates. It now also includes links to Microsoft Edge DevTools documentation, ways to submit feedback, and more. To display the Welcome tool after each update to Microsoft Edge, select the checkbox next to Open tab after each update under the title.
To close the Welcome tool, click the X on the right-side of the tab title.

Update: This feature has been released and is no longer experimental.
See also:
 Welcome tool
Visual Font Editor in the Styles pane

When you work with fonts in CSS, use the new visual Font Editor. You can define fallback fonts, and use sliders to define font weight, size, line-height, and spacing:

The Font Editor helps you to:
Switch between units for different font properties.
Switch between keywords for different font properties.
Convert units.
Generate accurate CSS code.
To turn on this experiment, see Settings > Experiments and select the checkbox next to Enable new Font Editor tools within Styles pane.
For the history of this feature in the Chromium open-source project, see Issue
1093229.
See also:
 Enable new font editor within the Styles Pane in Experimental features in Microsoft Edge DevTools.
 Edit CSS font styles and settings in the Styles pane in DevTools.
CSS Flexbox debugging tools
DevTools now support Flexbox layout, as well as Grid layout.
Update: This feature has been released and is no longer experimental.
See also:
 Getting element information from the Inspect overlay in Analyze pages using the Inspect tool.
Use the Inspect tool to detect accessibility issues by hovering over the webpage.
Update .css files from within the Styles tab (CSS mirror editing).
Grid:
CSS grids
Improved CSS Grid tooling in What's New in DevTools (Microsoft Edge 87).
MDN:
CSS Flexible Box Layout CSS Grid Layout
For history, in the Chromium open-source project, see Issues 1136394 and 1139949.
New Flexbox (flex) icon helps identify and display flex containers
In the Elements tool, the new Flexbox (flex) icon helps you identify Flexbox containers in your code. Click the Flexbox (flex) icon to turn on or off the overlay effect that outlines a Flexbox container. You can customize the color of the overlay in the Layout pane, which is located next to Styles and Computed.
To turn on and off the overlay effect that outlines the Flexbox container, click the Flexbox (flex) icon.
You can customize the color of the overlay in the Layout pane next to Styles and Computed.
The Flexbox (flex) icon and webpage highlighted:

The Flexbox overlays highlighted in the Layout pane:

Update: This feature has been released and is no longer experimental.
See also:
 Getting element information from the Inspect overlay in Analyze pages using the Inspect tool.
 Inspect CSS Grid.
Display alignment icons and visual guides when Flexbox layouts change using CSS properties
When you edit CSS for your Flexbox layout, CSS autocompletes in the Styles pane now displays helpful icons next to relevant Flexbox properties. To try this new feature, open the Elements tool and select a flex container. Then add or change a property on that container in the Styles pane.
The autocomplete menu now displays icons that indicate the effect of alignment properties such as align-content and align-items.
Additionally, DevTools now displays a guiding line to help you better see the alignitems CSS property. The gap CSS property is supported as well. In the following figure, the gap CSS property is set to gap: 12px; and the hatching pattern for each gap is displayed.


Update: This feature has been released and is no longer experimental.
See also:
 Getting element information from the Inspect overlay in Analyze pages using the Inspect tool.
 Inspect CSS Grid.
Add tools quickly with new More Tools button
You now have a new way to open more tools in Microsoft Edge DevTools. The More
Tools icon is a plus sign (+) to the right of the main panel. To show a list of other tools that you can add to the main panel, click the More Tools (+) icon:

Update: This feature has been released and is no longer experimental.
See also:
 About the list of tools
Assistive technologies now announce position and count of CSS suggestions
When you edit CSS rules, you get a dropdown list of features. This feature wasn't available to users of assistive technologies, since it is announced in Microsoft Edge version 89. A user of assistive technologies can now navigate CSS suggestions in the Styles pane. In Microsoft Edge version 88 and earlier, assistive technology announced Suggestion as a user navigated through the list of suggestions when editing CSS in the Styles pane.
In Microsoft Edge version 89, a user of assistive technology now hears the position and count of the current suggestion. Each suggestion is announced as the user navigates through the list of suggestions, such as Suggestion 3 of 5. To learn more about writing
CSS in DevTools, see CSS features reference. To view the history of this feature in the Chromium open-source project, see Issue 1157329.
To view a video that displays and reads aloud several suggestions with this experiment turned on, see Voiceover announcing devtools options on YouTube.

See also:
Navigate the Styles pane in Navigate DevTools with assistive technology. CSS features reference
Emulate Surface Duo and Samsung Galaxy Fold
Test the appearance of your website or app on the following devices in Microsoft Edge.
Surface Duo
Samsung Galaxy Fold
To access the new CSS media screen-spanning feature and the getWindowSegments (now visualViewport.segments) JavaScript API, go to edge://flags and toggle the flag next to Experimental Web Platform features:

To help enhance your website or app for the dual-screen and foldable devices, use the following features when emulating the device:

For the history of this feature in the Chromium open-source project, see Issue
1054281.
See also:
 Emulate mobile devices (Device Emulation).
 CSS viewport segments media query for dual-screen detection - CSS media screenspanning feature.
 JavaScript visualViewport.segments API for dual-screen devices.
Microsoft Edge Developer Tools for Visual Studio Code version 1.1.2
The Microsoft Edge Developer Tools for Visual Studio Code extension version 1.1.2 for Microsoft Visual Studio Code has the following changes since the previous release. Microsoft Visual Studio Code updates extensions automatically. To manually update to version 1.1.2, see Update an extension manually.
Added a Close instance button to each item on the target list (#248)
Bumped Microsoft Edge DevTools version from 84.0.522.63 to 85.0.564.40 (#235) Included "Debugger for Microsoft Edge" as a dependency (#233).
Implemented settings option to change extension themes (#229)
You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
See also:
 Microsoft Edge DevTools extension for Visual Studio Code
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
Capture node screenshot beyond viewport
In Microsoft Edge version 89, node screenshots are more accurate, capturing the full node even if content from the node isn't visible in the viewport. In the Elements tool, right-click an element, and then select Capture node screenshot.

For the history of this feature in the Chromium open-source project, see Issue
1003629.
See also:
 Capture node screenshots using the Elements tool context menu in What's New in DevTools (Microsoft Edge 86)
Elements tool updates
Support forcing the :target CSS state
In the Elements tool, you can now force the :target CSS pseudo-class. The :target pseudo-class is triggered when a unique element (the target element) has an id that matches a fragment of the URL. For example, the http://www.example.com/index.html#section1 URL triggers the :target pseudo-class on
an HTML element with id="section1". To try a demo with section 1 highlighted, see CSS :target demo	.
Webpage highlighted with no forced CSS:

For the history of this feature in the Chromium open-source project, see Issue
1156628.
See also:
 Use state simulation to simulate the hover state of an animated menu item in Verify accessibility of all states of elements.
Use Duplicate elements to copy elements
Use the new Duplicate element shortcut to clone an element. In the Elements tool, right-click an element, and then select Duplicate element. A new element is created under the selected element. To duplicate the element by using the keyboard, press Shift+Alt+Down Arrow (Windows, Linux) or Shift+Option+Down Arrow (macOS).

For the history of this feature in the Chromium open-source project, see Issue
1150797.
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Color pickers for custom CSS properties
The Styles pane now displays color pickers for custom CSS properties. To cycle through the RGBA, HSLA, and Hex formats of the color value, press and hold Shift and then click the color picker:

For the history of this feature in the Chromium open-source project, see Issue
1147016.
See also:
 Change colors with the Color Picker in CSS features reference
Copy CSS classes and properties
You can now copy CSS properties quicker with a few new options in the right-click menu. In the Elements tool, select an element. To copy the value, in the Styles pane, right-click a CSS class or a CSS property, and then select a copy option.
Copy options for a CSS class in the right-click menu:
ﾉ Expand table
OptionDetailsCopy selectorCopy the current selector name.Copy ruleCopy the rule of the current selector.Copy all declarationsCopy all declarations under the current rule, including non-valid and prefixed properties.
Copy options for a CSS property in the right-click menu:
ﾉ Expand table
OptionDetailsCopy declarationCopy the declaration of the current line.Copy propertyCopy the property of the current line.Copy valueCopy the value of the current line.
For the history of this feature in the Chromium open-source project, see Issue
1152391.
See also:
 CSS features reference
Cookies updates
New option to display URL-decoded cookies
You can now display the URL-decoded cookies value in the Cookies pane. To display the decoded cookie, select Application > Cookies, click any cookie on the list, and then select the checkbox next to Show URL decoded:

 View, edit, and delete cookies
Filter and clear visible cookies
In Microsoft Edge version 88 or earlier, the Application tool only provided a way to clear all cookies with the Clear all cookies button. In Microsoft Edge version 89, you can now select Clear filtered cookies to delete only the filtered cookies.
To filter cookies, select Application > Cookies, and then type in the Filter text box. To delete the displayed cookies, click the Clear filtered cookies button. To display all other cookies, clear the filter text.

 View, edit, and delete cookies
New option to clear third-party cookies in the Storage pane
DevTools now clears only first-party cookies by default. To clear website data and firstparty cookies only, in the Application tool, in the Application section in the upper left, click Storage, and then click the Clear site data button.
To clear website data and all cookies, select Application > Storage. Select the checkbox next to including third-party cookies, and then click Clear site data:

For the history of this feature in the Chromium open-source project, see Issue
1012337.
See also:
 Application tool, to manage storage
Network tool updates
See also:
 Network features reference
Persist Record network log setting
In Microsoft Edge version 88 or earlier, DevTools reset the Record network log setting when a webpage refreshes. In Microsoft Edge version 89, DevTools now persists the Record network log setting:

For the history of this feature in the Chromium open-source project, see Issue
1122580.
See also:
 Record network requests in Network features reference.
Online option is now No throttling option
The network emulation option Online is now renamed to No Throttling.

For the history of this feature in the Chromium open-source project, see Issue
1028078.
See also:
Simulate a slower network connection in Inspect network activity.
Emulate slow network connections in Network features reference.
New copy options in the Console tool, Sources tool, and Styles pane
Copy object in the Console and Sources tool
You can now copy object values in the Console and Sources tools. The ability to copy object values is useful when working with large objects.
In the Console tool, right-click an object, and then select Copy object.

In the Sources tool, on a breakpoint, hover on an object, in the Object popup window, right-click an object, and then select Copy object.

For the history of this feature in the Chromium open-source project, see Issues
1148353 and 1149859.
See also:
Console overview
Sources tool overview
Copy file name in the Sources tool and Styles pane You can now copy a file name by using the right-click menu.
In the Sources tool, right-click a file name, and then select Copy file name.

In the Elements tool > Styles pane, right-click a file name, and then select Copy file name.

For the history of this feature in the Chromium open-source project, see Issues
1155120.
See also:
 Sources tool overview
 Inspect, edit, and debug HTML and CSS with the Elements tool
Updates to Frame details
In the Application tool, the Frames page has the following updates.
Service workers information in Frame details
The Application tool now lists a dedicated service worker under the parent frame. In the following figure, service worker details are displayed. To display the service worker details, select Application > Frames > top > Service Workers and then click a service worker.

For the history of this feature in the Chromium open-source project, see Issue
1122507.
See also:
 Application tool, to manage storage
Measure Memory information in Frame details
In the Frames page of the Application tool, the performance.measureMemory() API status is now displayed in the API availability section. The new performance.measureMemory() API estimates the memory usage of the entire webpage.

For the history of this feature in the Chromium open-source project, see Issue
1139899.
See also:
 Application tool, to manage storage
Dropped frames in the Performance tool
When you analyze load performance in the Performance tool, the Frames section now marks dropped frames as red. To display the frame rate, hover on a dropped frame:

For the history of this feature in the Chromium open-source project, see Issue
1075865.
See also:
 Record load performance in Performance features reference
New color contrast calculation - Advanced Perceptual Contrast Algorithm (APCA)

The Advanced Perceptual Contrast Algorithm (APCA) replaces the AA/AAA guidelines contrast ratio in the Color Picker. The Color Picker is used in the Styles tab in the Elements tool.
APCA is a new way to compute contrast. It is based on modern research on color perception. Compared to AA/AAA guidelines, APCA is more context-dependent. The contrast is calculated based on the following spatial properties of the text, color, and context.
Spatial properties of text that include font weight and size.
Spatial properties of color that include perceived contrast between text and background.
 Spatial properties of context that include ambient light, surroundings, and intended purpose.
To turn on this experiment, select Settings > Experiments and then select the checkbox next to Enable new Advanced Perceptual Contrast Algorithm (APCA) replacing previous contrast ratio and AA/AAA guidelines. To view the history of this feature in the Chromium open-source project, see Issue 1121900
See also:
 Enable new Advanced Perceptual Contrast Algorithm (APCA) replacing previous contrast ratio and AA/AAA guidelines in Experimental features in Microsoft Edge DevTools. Edge 89)_.


Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 88)
Article • 06/14/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Microsoft Edge and Microsoft Edge WebDriver now available on Linux
Microsoft Edge Dev is now supported on Ubuntu, Debian, Fedora, and openSUSE distributions. Download and install the Microsoft Edge Dev .deb or .rpm package directly from the Microsoft Edge Insider site or use the standard package management tools of your Linux distribution.
If you are using a Linux environment in your continuous integration and delivery (CI/CD) solutions, Microsoft Edge WebDriver is also available on Linux. To get started automating Microsoft Edge with Microsoft Edge WebDriver, see Recent versions at the
Microsoft Edge WebDriver page. For help with automating Microsoft Edge with Microsoft Edge WebDriver, see Use WebDriver for test automation.

See also:
 Use WebDriver to automate Microsoft Edge
Improved webhint and platform tips in the Issues tool
webhint is an open-source tool that provides real-time feedback for websites and local webpages. Starting with Microsoft Edge version 85, see webhint feedback in the Issues tool. Issues that appear in the Issues tool are now easier to see with the addition of the following categories.
PWA
Security
You can now filter out third-party issues using a new checkbox. The filter functionality helps you hide issues related to code from third-party libraries or other sources.
To help you see issues that are found by webhint, the Issues tool now displays the following information:

Find and fix problems using the Issues tool webhint extension for Visual Studio Code
Composited Layers are now in 3D View
You can now visualize Layers content alongside z-index values and the Document Object Model (DOM). This feature helps you debug without switching between the 3D View tool and Layers tools as often.

Update: This feature has been released and is no longer experimental. The Layers tool has been removed and replaced by the 3D View tool.
See also:
 Navigate z-index, DOM, and layers using the 3D View tool
CSS variable definitions in Styles pane
In the Styles pane of the Elements tool, CSS variables	 now link directly to each definition. Click the variable to easily view or change the CSS variable definition. In the example, DevTools displays the CSS attributes for the body element.
For example, to display the variable definition for the --theme-body-background CSS variable:
1. In the Styles pane of the Elements tool, hover over the style --theme-bodybackground of the CSS variable var(--theme-body-background). The tooltip appears, Jump to definition:


See also:
Edit CSS font styles and settings in the Styles pane CSS features reference
Service worker debugging improvements
The following new features in the Network tool, Application tool, and Sources tool help you build your PWA. Use the following features when you have difficulty debugging your service worker.
The routing of a request displays the startup and fetch events based on the network requests that run through service workers. The timelines are accessed from either the Application or Network tool. The timelines help when you are having trouble with service workers and want to see if something is wrong with the startup or fetch event.
See also:
 Service worker improvements
Application tool
In the Application tool, view all service worker request routing information by using the new Network requests link.
To display additional context when debugging a service worker:
1. In the Application tool, on the left, select Service Workers.
2. Click the Network requests link:

The Network tool opens in the Quick View panel at the bottom of DevTools, and displays all service worker-related network requests. The network requests are filtered using is:service-worker-intercepted:

3. To move the Network tool to the top panel, close the Quick View panel:

See also:
Application tool, to manage storage
Service worker improvements
Network tool
In the Network tool, you can debug network requests that are run by service workers.
(You can also open network requests from within the Application tool, instead of the Network tool.) In the Timing pane of the Network tool, for each request, DevTools displays the following information:

See also:
Display the timing breakdown of a request in Network features reference. Service worker improvements
Sources tool
In previous versions of Microsoft Edge, the level of depth in the call stack was limited to the JavaScript code in your service worker. In Microsoft Edge 88, the call stack now displays the initiator of requests that run through your service worker.
To locate the initiator of the request, use the call stack of your JavaScript code in the service worker. The call stack in the following figure starts with the JavaScript code in your service worker (service-worker.js), and displays a reference to the original webpage request as (index):157. The service-worker.js file is shown, and the call stack highlights the request originator, (index):157:

In the following figure, the reference is selected, and has opened the initiator that made the request. The (index) webpage is the request initiator:
See also:
View the call stack in JavaScript debugging features
Service worker improvements
Copy property value of a network request
In the Network tool, copy the property value of a network request using the new Copy value option. The property value is copied as a decoded JSON value. In previous versions of Microsoft Edge, you had to copy a value using one of the following actions:
Highlight the entire text and copy it.
Store the value as global variable, as applicable, and copy it from the DevTools Console.
To copy the property value to your clipboard, see Copy formatted response JSON to the clipboard in Network features reference.
Copying a property value in DevTools:

Pasting a property value in Microsoft Visual Studio Code:

See also:
 Console overview
For history, in the Chromium open-source project, see Issue 1132084.
Customize multi-press keyboard shortcuts
Since Microsoft Edge version 87, you can customize keyboard shortcuts for any action in DevTools. In Microsoft Edge version 88, you can now create multi-press keyboard shortcuts.
For example, the red highlight below shows a custom multi-press keyboard shortcut for the Start recording events action:

Update: This feature has been released and is no longer experimental.
See also:
 Edit the keyboard shortcut for a DevTools action in Customize keyboard shortcuts.
For history, in the Chromium open-source project, see Issue #174309.
The DevTools UI now matches the browser language
In Microsoft Edge version 87, if you turned on the Match browser language setting in
DevTools Settings, the DevTools UI language didn't match the browser UI language. In Microsoft Edge version 88, DevTools now matches the browser language if you turn on the Match browser language setting. See Change DevTools language settings.

Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
New CSS angle visualization tools
DevTools now has better support for CSS angle debugging. When an HTML element on your page has CSS angle applied to it, a clock icon is displayed next to the angle in the Styles tool. To toggle the clock overlay, click the clock icon. To change the angle, click anywhere in the clock, drag the needle, or use mouse and keyboard shortcuts.
The following CSS angle is used for the example:
cssbackground: linear-gradient(100deg, lightblue, pink);
For more information, see Change angle value with the Angle Clock in CSS features reference.
For updates on this feature in the Chromium open-source project, see Issues 1126178 and 1138633.
Simulate storage quota size in the Storage pane
You can now override storage quota size in the Storage pane. This feature allows you to simulate different devices and test the behavior of your website or app in low disk availability scenarios. To simulate the storage quota:
1. Navigate to Application > Storage.
2. Select the Simulate custom storage quota checkbox.
3. Enter a valid number.

For more information, see Emulate mobile devices (Device Emulation). To see updates on this feature in the Chromium open-source project, see Issues 945786 and
1146985.
Report CORS errors in the Network tool
Try out this feature by navigating to CORS error demo. Open the Network tool, refresh the page, and observe the failed CORS network request. The status column displays the CORS error. When you hover on the error, the tooltip now displays the error code. In Microsoft Edge version 87 and earlier, DevTools only displayed generic (failed) status for CORS errors.

For real-time updates on this feature in the Chromium open-source project, see Issue
1141824.
See also:
Enhanced CORS debugging support in What's New in DevTools (Microsoft Edge 92) Network features reference
Frame details view updates
In the Application tool, there's a Frames section that provides a detailed view for each frame.
See also:
 Application tool, to manage storage
Cross-origin isolation information in the Frame details view
In the Application tool, there's a Frames section that provides a detailed view for each frame. When you select a frame, the frame detail page appears, including the Security & Isolation section.
The cross-origin isolated status is now displayed under the Security & Isolation section. The new API availability section displays the availability of SharedArrayBuffers (SAB) and whether the buffers can be shared using postMessage(). A deprecation warning appears if the SAB and postMessage() is currently available, but the context isn't crossorigin isolated.

For more information about cross-origin isolation and why it is required for features like SharedArrayBuffers, see WindowOrWorkerGlobalScope.crossOriginIsolated.
For real-time updates of this feature in the Chromium open-source project, see Issue
1139899.
See also:
 Application tool, to manage storage
New Web Workers information in the Frame details view
DevTools now organizes web workers under the relevant parent frame. For example, if the someName frame creates worker.js, then worker.js appears under someName in the Frames list. To view the details of the web worker:
1. Open the Application tool.
2. In the list on the left, in the Frames section, expand a frame that contains web workers.
3. Expand the Workers tree.
4. Click a worker.
For real-time updates on this feature in the Chromium open-source project, see Issues
1122507 and 1051466.

See also:
 Application tool, to manage storage
Display opener frame details for opened windows
DevTools now organizes opened Windows under the relevant parent frame . For example, if the top frame opens a Window to https://learn.microsoft.com/microsoftedge/devtools-guide-chromium, then the Window appears under top in the Frames list.
To reveal the frame that's responsible for opening another Window, and see that frame in the Elements tool:
1. Open the Application tool.
2. On the left, in the Frames section at the bottom, expand a frame.
3. Expand Opened Windows and click the Window for the parent frame you want to know about.
4. Click the Opener Frame link.
The details are displayed about which frame caused the opening of another Window. To reveal the opener in the Elements tool:
1. Open the Application tool.
2. On the left, in the Frames section at the bottom, expand a frame.
3. Click an opened window to open the Window details.
4. Click the Opener Frame link.
For the history of this feature in the Chromium open-source project, see Issue

 Application tool, to manage storage
Copy stacktrace for network initiator
In the Network tool, to copy the stacktrace to your clipboard, right-click the stacktrace, and then select Copy > Copy stacktrace:

For the history of this feature in the Chromium open-source project, see Issue
1139615.
See also:
 Display the stack trace that caused a request in Network features reference
Preview Wasm variable value on mouseover
In the Sources tool, use this feature to see the value of a WebAssembly (Wasm) variable when your code is paused. To display the current value of a variable, hover on a variable:

For real-time updates on this feature in the Chromium open-source project, see Issues
1058836 and 1071432.
See also:
 Using the Debugger pane to debug JavaScript code in Sources tool overview
Consistent units of measurement for sizes of files and memory
DevTools now consistently uses kB for displaying sizes of files and memory. Previously, DevTools mixed kB and KiB.
kB or kilobyte (10^3 or 1000 bytes)
KiB or kibibyte (2^10 or 1024 bytes)
For example, the Network tool previously used kB in the labels, but used KiB in calculations. Your feedback showed that this inconsistency caused confusion.
For the history of this feature in the Chromium open-source project, see Issue



Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 87)
Article • 06/14/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Improving DevTools localization
To meet your translation needs, the Microsoft Edge DevTools team is focused on improving translation quality. Starting in Microsoft Edge version 87, several strings and terms are locked and don't change, even when the rest of the DevTools are displayed in other languages. The list of affected strings and terms include the following:
The strings in the Lighthouse tool.
The term service worker.
Some of the Network tool filters such as URL, XHR, JS, and CSS.
The $0 Console Utilities API.
$0 is now available in the Console for users on localized versions of the DevTools. Thank you to the global developer community for helping improve localization of the Microsoft Edge DevTools. Continue to send feedback on localization quality to improve support for DevTools in all locales. For real-time updates on this feature in the Chromium open-source project, see Issue #1136655.

See also:
 Change DevTools language settings
Move tools between top and bottom panels
DevTools now supports moving tools between the top and bottom panels. Customize your DevTools and improve your productivity by viewing any combination of two tools at the same time. For example, view the Elements and the Sources tools at the same time (by moving the Sources tool to the bottom).
To move any top tool to the bottom, right-click a tab and then select Move to bottom:

To move any bottom tool to the top, right-click a tab and then select Move to top:

For the history of this feature in the Chromium open-source project, see Issue
#1075732.
See also:
 Activity Bar tools vs. Quick View tools in About the list of tools
Save and export using the Network Console
The Network Console tool now has improved compatibility with the Postman v2.1 and OpenAPI v2 schemas.
The Network Console tool now supports the following actions:
Save and export Collections and Environments.
Edit and export sets of environment variables within the Network Console tool.
Entering a name for the new environment:

Selecting the format for the new environment:

Update: This feature has been released and is no longer experimental.
See also:
 Save and export Collections, Environments, and environment variables in Compose and send web API requests using the Network Console tool.
For history, in the Chromium open-source project, see Issue #1093687.
Improved CSS Grid tooling
The Microsoft Edge DevTools now support the following features for inspecting, viewing, and debugging your CSS grids.
 Display a simplified grid overlay using the Inspect tool, or get more detailed information with persistent overlays.
 To enable persistent grid overlays, click the grid icon next to a grid container element in the Elements tool, or click the grid in the Layout tool.
You can enable persistent overlays for multiple grids.
The new Layout tool allows you to easily toggle grid overlays and configure the appearance and the content for each.
The features are turned on by default.

Update: This feature has been released and is no longer experimental.
See also:
 CSS grids
For history, in the Chromium open-source project, see Issue #1047356.
The Microsoft Edge DevTools team is collaborating with the Chrome DevTools team and Chromium community to add new flexbox tooling features to DevTools. For updates on flexbox tooling in the Chromium open-source project, see Issue #1136394.
Customize keyboard shortcuts in Settings
You can now customize the keyboard shortcut for any action in the DevTools. Since
Microsoft Edge version 84, you can choose between Visual Studio Code and DevTools (default) presets for keyboard shortcuts. Starting in Microsoft Edge version 87, you can further customize keyboard shortcuts.

Update: This feature has been released and is no longer experimental.
See also:
 Edit the keyboard shortcut for a DevTools action in Customize keyboard shortcuts.
For history, in the Chromium open-source project, see Issue #174309.
Introducing the Microsoft Edge Tools for Visual
Studio Code extension
The Elements for Visual Studio Code and Network for Visual Studio Code extensions are now merged into the new Microsoft Edge Developer Tools for Visual Studio Code extension. Use the Microsoft Edge DevTools for the following activities without leaving Microsoft Visual Studio Code.
Debug the DOM
Edit CSS
Inspect network traffic
With the extension, launch Microsoft Edge, connect to an existing instance of the browser, or use a headless browser directly from your editor. To start contributing and filing issues with your feedback about this extension, see the Microsoft Edge Developer Tools for Visual Studio Code repo on GitHub.
Using the extension in full browser mode:

Using the extension in headless mode:

For more information, see Microsoft Edge DevTools extension for Visual Studio Code.
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
New WebAuthn tool
In earlier versions of Microsoft Edge, there was no native WebAuthn debugging support.
You needed physical authenticators to test your web application with the Web Authentication API. With the new WebAuthn tool, you can do the following without the use of any physical authenticators:
Emulate authenticators.
Customize attributes of authenticators.
Inspect states of authenticators.
You can emulate authenticators and debug the Web Authentication API with the new
WebAuthn tool. To open the WebAuthn tool, click the Customize and control DevTools
(...) icon > More tools > WebAuthn. For real-time updates on this feature in the Chromium open-source project, see Issue #1034663.
Opening the WebAuthn tool:

The WebAuthn tool:

For more information, see Emulate authenticators and debug WebAuthn.
Elements tool updates
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
View the Computed sidebar pane in the Styles pane
Toggle the Computed pane in the Styles pane. The Computed pane in the Styles pane is collapsed by default. To display or hide the Computed pane within the Styles pane, click the Show Computed Styles sidebar () button.
Opening the Computed sidebar pane:

The Computed sidebar pane:

For real-time updates on this feature in the Chromium open-source project, see Issue
#1073899.
See also:
 View only the CSS that is actually applied to an element in CSS features reference
Grouping CSS properties in the Computed pane
To view your applied CSS with less scrolling, group the CSS properties by categories in the Computed pane. You can also selectively focus on a set of related properties while you inspect your CSS. From the Elements tool, select an element. To group (or ungroup) the CSS properties, toggle the Group checkbox.

For real-time updates on this feature in the Chromium open-source project, see Issues #1096230, #1084673, and #1106251.
See also:
 View only the CSS that is actually applied to an element in CSS features reference
Lighthouse 6.4 in the Lighthouse tool
The Lighthouse tool is now running Lighthouse 6.4. For a full list of changes, see the Lighthouse release notes. For real-time updates on this feature in the Chromium open-source project, see Issue #772558.
See also:
 Lighthouse tool
performance.mark() events in the Timings section
The Timings section of a recording in the Performance tool now marks performance.mark() events. To try this feature and measure the performance of your JavaScript code, add performance.mark() events to your code.
The following code adds start and end performance markers before and after a for loop:
JavaScriptperformance.mark('start'); for (var i = 0; i < 1000; i+=7;){   console.log(i);
} performance.mark('end');Then, open the Performance tool and see the Timings section to record your JavaScript code. The performance.mark() events you added are now displayed in the recording.
New resource-type and url filters in the Network tool
Use the new resource-type and url keywords in the Network tool to filter network requests. For example, use resource-type:image to focus on the network requests that are images:

properties.
For real-time updates on this feature in the Chromium open-source project, see Issues
#1121141 and #1104188.
Frame details view updates
In the Application tool, in the list of pages on the left, the bottom page is Frames, which often lists a frame named top.
Display COEP and COOP reporting to endpoint
In the Application tool, in the list of pages on the left, the bottom page is Frames, which often lists a frame named top. Select the frame to view the frame detail view, which includes the Security & Isolation section.
In the Security & Isolation section of the frame detail page, view the Cross-Origin Embedder Policy (COEP) and Cross-Origin Opener Policy (COOP) reporting to endpoint. The Reporting API defines Report-To, which is a new HTTP header that gives you a way to specify the server endpoints for the browser to send warnings and errors.

For real-time updates on this feature in the Chromium open-source project, see Issue
#1051466.
See also:
 Display opener frame details for opened windows in What's New in DevTools
(Microsoft Edge 88)
 The Application tool, to manage storage
Display COEP and COOP report-only mode
In the Application tool, in the list of pages on the left, the bottom page is Frames, which often lists a frame named top. Select the frame to view the frame detail view, which includes the Security & Isolation section.
The Security & Isolation section of the frame detail page now displays the report-only label for COEP and COOP that are set to report-only mode.

For real-time updates on this feature in the Chromium open-source project, see Issue
#1051466.
See also:
 Display opener frame details for opened windows in What's New in DevTools
(Microsoft Edge 88)
 The Application tool, to manage storage
View and fix color contrast issues in the CSS Overview tool
The CSS Overview tool now displays a list of elements on your page that have color contrast issues. The CSS Overview Accessible Colors Demo page has an example of a color contrast issue.
To view a list of elements that have a color contrast issue, on Contrast issues, click Text. To open the element in the Elements tool, click an element in the list. To help fix contrast issues, the Microsoft Edge DevTools automatically provide color suggestions.

Update: This feature has been released and is no longer experimental.
See also:


Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 86)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Announcements from the Microsoft Edge
DevTools team
Match keyboard shortcuts in DevTools to Visual Studio Code
In Microsoft Edge 86, you can match keyboard shortcuts in the DevTools to your shortcuts in Microsoft Visual Studio Code.

To activate this feature, see Customize keyboard shortcuts in DevTools.
For example, the keyboard shortcut for pausing or continuing running a script in Visual Studio Code is F5. With the DevTools (Default) preset, that same shortcut in DevTools is F8, but when you select the Visual Studio Code preset, that shortcut is now also F5.
Chromium issue #174309
Emulate Surface Duo and Samsung Galaxy Fold
You can now test the look and feel of your website or app on two new devices: Surface Duo and Samsung Galaxy Fold in Microsoft Edge.
To help enhance your website or app for the dual-screen and foldable devices, use the following features when emulating the device:
Spanning, which is when your website (or app) appears across both screens.
Rendering the seam, which is the space between the two screens.
Enabling experimental Web Platform APIs to access the new CSS media screenspanning feature and JavaScript getWindowSegments API.

Update: This feature has been released and is no longer experimental.
See also:
 Emulate dual-screen and foldable devices in Microsoft Edge DevTools
Chromium issue: #1054281
CSS grid overlay improvements and new experimental grid features
The Microsoft Edge DevTools team and the Chrome DevTools team collaborate on additional features. The new features include multiple overlays that are persistent and configurable from a new Layout pane on the Elements tool:

Update: This feature has been released and is no longer experimental.
See also:
CSS grid debugging features in What's New in DevTools (Microsoft Edge 85).
Inspect CSS Grid in Microsoft Edge DevTools.
Chromium issue: #1047356
Table copied from the Console preserves formatting
In Microsoft Edge 85 or earlier, in the Console, the formatting of a copied console.table was lost. If you copied the output from the table Console API, and pasted
it, only the text of the table was kept. table Console API output in Microsoft Edge 85 or earlier:

Code:

In Microsoft Edge 86 or later, when you copy a table from the Console, the formatting is now preserved. table Console API output in Microsoft Edge 86 or later:


 Console features reference
Source Order Viewer for easier accessibility testing
The new accessibility helper displays the order in which elements reside in the source file:

This feature makes it easier to test the way screen reader and keyboard users experience your website or app. Screen readers and keyboard navigation depend on content being placed in a particular order in the source code of your website or app, so that it matches the rendered page. The Source Order Viewer displays potential differences in order between the rendered page and the source code.
Update: This feature has been released and is no longer experimental.
See also:
 Test keyboard support using the Source Order Viewer
Chromium issue: #1094406
Highlight all search results in Elements tool
In Microsoft Edge 84 and 85, the first search result in the Elements tool did not highlight. The remaining search results were highlighted correctly.
Thank you for sending your feedback and helping improve Chromium. Your feedback uncovered Issue #1103316 in the open-source Chromium project.

The issue is now fixed in all versions of Microsoft Edge.
Chromium issue: #1103316 See also:
 Search for nodes in Get started viewing and changing the DOM
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
New Media tool
DevTools now displays media players information in the Media tool.
To open the new Media tool, select Customize and control DevTools (...) > More tools > Media.

Before the new Media tool in DevTools, the logging and debug information about video players was located under the Recent Players setting. To open the Recent Players setting, go to edge://media-internals and then select the Players tool.
View live content and inspect potential issues more quickly, such as investigating:
Why frames are dropped.
Why JavaScript is interacting with the player in an unexpected way.
Capture node screenshots using the Elements tool context menu
You can now capture node screenshots using the right-click menu in the Elements tool.
For example, to take a screenshot of the table of contents, right-click the element, and then select Capture node screenshot.

See also:
 Capture node screenshot beyond viewport in What's New in DevTools (Microsoft Edge 89)
Issues tool updates
The Issues warning bar on the Console tool is now replaced with a regular message.

See also:
 Find and fix problems using the Issues tool
Third-party issues
Third-party issues are now hidden by default in the Issues tool. Select the new Include third-party issues checkbox to view the issues.

For more information, see Filter issues by origin in Find and fix problems using the Issues tool.
Emulate missing local fonts
In the Rendering tool, use the new Disable local fonts checkbox to emulate missing local() sources in @font-face rules.
For example, when the Rubik font is installed on your device and the @font-face src rule uses it as a local() font, Microsoft Edge uses the local font file from your device.
When Disable local fonts is selected, DevTools ignores the local() fonts and fetches each font from the network:

This feature is useful if you use two different copies of the same font during development, such as:
A local font for your design tools.
A web font for your code.
Use Disable local fonts to make it easier to:
Debug and measure loading performance and optimization of web fonts.
Verify accuracy of your CSS @font-face rules.
Discover differences between local versions installed on your device and a web font.
Chromium issue: #384968
For more information, see Disable local fonts in Performance features reference.
See also Analyze rendering performance with the Rendering tool in Performance features reference.
Emulate inactive users
The Idle Detection API allows developers to detect inactive users and react on idle state changes. You can now use DevTools to emulate idle state changes in the Sensors tool for both the user state and the screen state instead of waiting for the actual idle state to change. You can open the Sensors tool in the Quick View panel at the bottom of DevTools.

 Override geolocation with the Sensors tool
Emulate prefers-reduced-data
In Microsoft Edge 86, to enable this feature, go to edge://flags#enable-experimentalweb-platform-features and turn on the Experimental Web Platform features flag. The emulation option is only displayed if the flag is enabled.
The prefers-reduced-data media query detects user content preferences for reduced data. If selected, the user receives alternate page content that uses less data.
You can now use DevTools to emulate the prefers-reduced-data media query, in the Rendering tool:

See also:
 Emulate dark or light schemes in the rendered page
Support for new JavaScript features
DevTools now has better support for the following JavaScript language features:
ﾉ Expand table
JavaScript language featureDetailsLogical assignment operatorsDevTools now supports logical assignment with the new &&=, ||=, and ??= operators in the Console and Sources tools.Pretty-print numeric separatorsDevTools now properly pretty-prints the numeric separators in the Sources tool.Chromium issues: 1086817, 1080569
See also:
Run JavaScript in the Console
Using the Editor pane to view or edit files in Sources tool overview
Lighthouse 6.2 in the Lighthouse panel
The Lighthouse tool is now running Lighthouse 6.2. For a full list of changes, see the Lighthouse release notes
Chromium issue: #772558
For more information, see Lighthouse tool.
Deprecation of other origins listing in the Service workers pane
The Application tool now provides a link from the Service workers pane to view the full list of service workers from other origins. To access the list of service workers without opening DevTools, go to edge://service-worker-internals/?devtools.
Previously DevTools displayed a list nested under the Application tool > Service Workers pane.

 Service worker improvements
 Application tool, to manage storage
Show coverage summary for filtered items
DevTools now recalculates and displays a summary of coverage information dynamically.
The dynamic display is triggered when filters are applied in the Coverage tool.
Previously, the Coverage tool always displayed a summary of all coverage information.
In the following example, the Coverage summary initially shows 344 kB of 1.7 MB (20%)


New frame details view in Application panel
In the Application tool, there's now a Frames section that provides a detailed view for each frame. To access the detailed view, click a frame under the Frames menu in the Application tool.

 Application tool, to manage storage
Frame details for opened windows
Open windows and pop-up windows now display under the frame tree as well. The detailed view of the opened windows includes additional security information.

 Application tool, to manage storage
Security and isolation information
Secure context, Cross-Origin-Embedder-Policy (COEP), and Cross-Origin-OpenerPolicy (COOP) are now displayed in the frame details.

The Chromium project plans to add more security information to the frame details.
Chromium issue: #1051466 See also:
Application tool, to manage storage
Understand security issues using the Security tool
Elements and Network panel updates
See also:
Inspect, edit, and debug HTML and CSS with the Elements tool Network features reference
Accessible color suggestion in the Styles pane
DevTools now provides color suggestions for low color contrast text.
In the example below, h1 has low-contrast text. To fix the contrast, open the color picker of the color property in the Styles pane. After you expand the Contrast ratio section,
DevTools provides AA and AAA color suggestions. Select the suggested color, to apply the color.

See also:
Change colors with the Color Picker in CSS features reference
Test text-color contrast using the Color Picker
Reinstate Properties pane in the Elements panel
In the Elements tool, the Properties pane is back. The Properties pane was deprecated in Microsoft Edge 84. The Microsoft Edge DevTools team and the Chrome DevTools team are planning improvements for inspecting properties of elements.

Chromium issue: #1116085 See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Autocomplete custom fonts in the Styles pane
Imported font faces are now added to the list of CSS autocompletion when editing the font-family property in the Styles pane.
For example, if monospace is a custom font installed on the local machine, it appears in the CSS completion list. In previous versions of Microsoft Edge, the font was not displayed.

See also:
Edit CSS font styles and settings in the Styles pane CSS features reference
Consistently display resource type in Network panel
In the Network tool, DevTools now consistently displays the same resource type as the original network request. When redirection (HTTP status code 302) happens, DevTools appends / Redirect to the value in the Type column.
Previously, DevTools sometimes changed the value in the Type column to Other.

 Network features reference
Clear buttons in the Elements and Network tools
The following text boxes now have Clear buttons:
The filter text boxes in the Styles pane and Network tool.
The DOM search text box in the Elements tool.
Click the Clear button to remove any inputted text.
Clear buttons in the Elements tools:



Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	 and is authored by Jecelyn Yeen.
              This work is licensed under a Creative Commons Attribution 4.0 International License.

Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 85)
Article • 03/20/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Announcements from the Microsoft Edge
DevTools team
CSS grid debugging features
The Microsoft Edge DevTools team is collaborating with the Chrome DevTools team and Chromium community to add new CSS grid debugging features to DevTools. You can now display grid line numbers, grid gaps, and extended grid lines as an on-page overlay. Plus, more improvements to the grid tools are coming soon.

Update: This feature has been released and is no longer experimental.
To try out the experiment with a sample, see CSS Grid planner example.
Chromium issue #1047356 See also:
 Inspect CSS Grid
Edit and Replay requests with the Network Console
You can now use Edit and Replay on requests in the Network Log using the Network Console. Open the Network Log, right-click, and then select Edit and Replay:

The new Network Console tool opens in the Quick View panel at bottom of DevTools, and automatically populates with information for the HTTP request. To display the response that's returned from the server, edit the request (if needed) and then select Send.
You can also use the Network Console to create and send HTTP requests directly from the DevTools.

Tip: To display Network Console in the main (top) panel instead of in the Quick View panel, see Move tools between panels, below.
Update: This feature has been released and is no longer experimental.
Chromium issue #1093687
Service worker respondWith events in the Timing tab


See also:
Display the timing relationship of requests in Network features reference.
Display the timing breakdown of a request in Network features reference.
webhint feedback in the Issues panel
 is an open-source tool that provides real-time feedback on the accessibility,
cross-browser compatibility, security, performance, PWAs, and other common web development issues of websites. You can view webhint feedback in the Issues panel.

To enable the experiment, see Turning an experiment on or off and select the checkbox next to Enable webhint. Open the Issues panel to display feedback from webhint.
Chromium issue #1070378 See also:
webhint extension for Visual Studio Code
Enable webhint in Experimental features in Microsoft Edge DevTools
Move tools between panels
Previously, tools such as Elements and Network could only be opened in the main (top) panel of DevTools. Similarly, tools such as 3D View and Issues could only be opened in the Drawer (now Quick View panel) at the bottom of DevTools. You can now customize your DevTools layout by moving tools between the top and bottom panels.

Update: This feature has been released and is no longer experimental.
Chromium issue #897944 See also:
 About Activity Bar and Quick View tools in Overview of DevTools.
Improved Initiator tooltip in the Network panel
In Microsoft Edge 83 and 84, tooltips for the Initiator column, which shows the cause of the resource request, in the Network Log displayed with a horizontal scrollbar. You were only able to display the call stack that initiated the request by scrolling horizontally in the tooltip.

Starting with Microsoft Edge 85, you can now display the Initiator call stack in the tooltip without scrolling horizontally.

Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 85 that were contributed to the open source Chromium project.
Style editing for CSS-in-JS frameworks
The Styles pane now has better support for editing styles that were created with the CSS Object Model (CSSOM) APIs. Many CSS-in-JS frameworks and libraries use the CSSOM APIs under the hood to construct styles.
You can now edit styles that were added in JavaScript using the CSSStyleSheet interface, which is a new way to create and distribute reusable styles when using Shadow DOM.
See The CSSStyleSheet Interface in CSS Object Model (CSSOM).
For example, the h1 styles added with CSSStyleSheet (CSSOM APIs) were not editable previously. The styles are editable now in the Styles panel.

Chromium issue #946975
Lighthouse 6 in the Lighthouse panel
The Lighthouse panel is now running Lighthouse 6. For a full list of all changes, see v6.0.0 release notes.
Lighthouse 6.0 introduces three new metrics to the report: Largest Contentful Paint (LCP), Cumulative Layout Shift (CLS), and Total Blocking Time (TBT).
The performance score formula has also been reweighted to better reflect the loading experience of the user. Chromium issue #772558 See also:
 Lighthouse tool
First Meaningful Paint deprecation
First Meaningful Paint (FMP) is deprecated in Lighthouse 6.0. FMP has also been removed from the Performance panel. Largest Contentful Paint is the recommended replacement for FMP. Chromium issue #1096008 See also:
 Lighthouse tool
Support for new JavaScript features
DevTools now has better support for some of the latest JavaScript language features:
 Optional chaining syntax autocompletion. Property auto-completion in the Console now supports optional chaining syntax, for example, name?. now works in addition to name. and name[.
 Syntax highlighting for private fields. Private class fields are now properly syntaxhighlighted and pretty-printed in the Sources panel.
    Syntax highlighting for Nullish coalescing operator. DevTools now properly pretty-prints the nullish coalescing operator in the Sources panel. Chromium issues #1073903, #1083214, #1083797
See also:
Run JavaScript in the Console
JavaScript debugging features
New app shortcut warnings in the Manifest pane
In the Application tool, App shortcuts help users quickly start common or recommended tasks within a web app.
In the Application tool, the Manifest pane now shows warnings for the following conditions:
When the app shortcut icons are smaller than 96x96 pixels.
When the app shortcut icons and manifest icons aren't square (since the icons are ignored).

 The Application tool, to manage storage
Consistent display of the Computed pane
The Computed pane in the Elements tool is now displayed consistently as a pane across all viewport sizes. Previously, the Computed pane merged inside of the Styles pane when DevTools was narrow.

 View only the CSS that is actually applied to an element in CSS features reference
Bytecode offsets for WebAssembly files
DevTools now uses bytecode offsets for displaying line numbers of Wasm disassembly. The line numbers make it clearer that you are looking at binary data, and is more consistent with how the Wasm runtime references locations.
Chromium issue #1071432 See also:
 Inspect a JavaScript ArrayBuffer with the Memory Inspector tool
Line-wise copy and cut in Sources Panel
When performing copy or cut with no selection in the Sources panel editor, DevTools copies or cuts the current line of content.

Console Settings updates
Ungroup same console messages
The Group similar toggle in Console Settings now applies to duplicate messages.
Previously it just applied to similar messages.
For example, previously, DevTools did not ungroup the hello messages even though Group similar is unchecked. Now, the hello messages are ungrouped.
See also:
 Turn off message grouping in Console features reference
Persisting Selected context only settings
The Selected context only settings in Console Settings is now persisted. Previously the settings were reset every time you closed and reopened DevTools. The change makes the setting behavior consistent with other Console Settings options.

See also:
 Filter out messages from different JavaScript contexts - in Console features reference
Performance panel updates
JavaScript compilation cache information in Performance tool
JavaScript compilation cache information is now always displayed in the Summary panel of the Performance tool. Previously, DevTools did not show anything related to code caching if code caching did not happen.

 Performance features reference
Navigation timing alignment in the Performance panel
Previously, the Performance panel showed times in the rulers based on when the recording started. The timing has now changed for recordings where the user navigates. DevTools now shows ruler times relative to the navigation, instead of when the recording started.
The times for DOMContentLoaded, First Paint, First Contentful Paint, and Largest Contentful Paint events are updated to be relative to the start of the navigation, which means the timing matches the timings reported by PerformanceObserver.
Chromium issue #974550 See also:
 Performance features reference
New icons for breakpoints, conditional breakpoints, and logpoints
Update: As of 2022, breakpoints are now indicated by a blue rectangle, instead of a red circle.
The Sources panel has new designs for breakpoints, conditional breakpoints, and logpoints. Breakpoints are represented by a red circle, just like Visual Studio Code and Visual Studio. Icons are added to differentiate conditional breakpoints and logpoints.


 This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 84)
Article • 11/07/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Announcements from the Microsoft Edge
DevTools team
Use the DevTools in Windows high contrast mode
Microsoft Edge DevTools is now displayed in high-contrast mode when Windows is in high-contrast mode.
Follow the instructions to turn on high-contrast mode in Windows in Microsoft Edge, select F12 or Ctrl+Shift+I. DevTools is displayed in high-contrast mode.
Note: DevTools currently supports high-contrast mode on Windows, but not on macOS.
Chromium issue #1048378 See also:
 Check for contrast issues with dark theme and light theme
Match keyboard shortcuts in the DevTools to Visual Studio Code
From your feedback and the Chromium public issue tracker, the Microsoft Edge
DevTools team learned that you wanted to be able to customize keyboard shortcuts in
DevTools. In Microsoft Edge 84, you can now match keyboard shortcuts in DevTools to Visual Studio Code, which is just one of the features the team is working on for shortcut customization.

To try the experiment:
1. In DevTools, open Settings by pressing ? or clicking the Settings () icon in DevTools.
2. In the Experiments section, select the checkbox Enable custom keyboard shortcuts settings tab (requires reload).
3. Reload DevTools.
4. Open Settings again, and select the Shortcuts section.
5. Click the Match shortcuts from preset dropdown list, select DevTools (Default), and then select Visual Studio Code.
The keyboard shortcuts in DevTools now match the shortcuts for equivalent actions in Visual Studio Code.
For example, the keyboard shortcut for pausing or continuing running a script in Visual Studio Code is F5. With the DevTools (Default) preset, that same shortcut in DevTools is F8, but with the Visual Studio Code preset, that shortcut is now also F5.
The feature is currently available in Microsoft Edge 84 as an experiment, so please share your feedback with the team!
Chromium issue #174309 See also:
 Customize keyboard shortcuts
Remote debug Surface Duo emulators
You can now remotely debug your web content that's running in the Surface Duo emulator using the full power of Microsoft Edge DevTools.
With the Surface Duo emulator, you can test how your web content renders on a new class of foldable and dual-screen devices. The emulator runs the Android operating system and provides the Microsoft Edge Android app. Load your web content in the
The edge://inspect page in a desktop instance of Microsoft Edge shows the
SurfaceDuoEmulator with a list of the open tabs or PWAs that are running on the Surface Duo emulator:

Click inspect for the tab or PWA that you want to debug, to open DevTools. Follow the step-by-step guide to remotely debug your web content on the Surface Duo emulator:
Remotely debug Surface Duo emulators.
Resize the DevTools Quick View panel more easily
In Microsoft Edge 83 or earlier, you resized the Drawer (now Quick View panel) by hovering inside the Drawer's toolbar. The Drawer behaved differently than the other resize controls for panes in DevTools where you hover on the border of the pane to resize it. The following image shows how resizing the Drawer worked in Microsoft Edge version 83 or earlier:

Starting with Microsoft Edge 84, you can resize the Drawer by hovering over the border.
This change aligns the behavior for resizing the Drawer with other panes in DevTools.
The following image shows how resizing the Drawer works in Microsoft Edge 84 or later:

Screencasting navigation buttons display focus
When remote debugging an Android device, a Windows 10 or later device, or a Surface
Duo emulator, you can toggle screencasting with the  icon in the top-left corner of DevTools. With screencasting enabled, you can navigate the tab in Microsoft Edge on the remote device from the DevTools window.
In Microsoft Edge 84, these navigation buttons are now also keyboard-accessible. For example, pressing Shift+Tab from the screencasted URL bar puts focus on the Refresh button:

Network panel Details pane is now accessible
In Microsoft Edge 84, the Details pane in the Network tool now takes focus when you open it for a resource in the Network Log. This change allows screen readers to read out and interact with the content of the Details pane.

Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 84 that were contributed to the open source Chromium project.
Fix site issues with the new Issues tool in the DevTools Drawer
The new Issues tool in the Drawer (now Quick View panel) at the bottom of DevTools reduces the notification fatigue and clutter of the Console. Currently, the Console is the central place for website developers, libraries, frameworks, and Microsoft Edge to log messages, warnings, and errors. The Issues tool aggregates warnings from the browser in a structured, aggregated, and actionable way. The Issues tool links to affected resources within DevTools, and provides guidance on how to fix the issues.
Over time, more warnings will be surfaced in the Issues tool rather than in the Console, to streamline the Console messages.
To get started, see Find and fix problems using the Issues tool.

View accessibility information in the Inspect Mode tooltip
The Inspect Mode tooltip now indicates whether the element has an accessible name

 Analyze pages using the Inspect tool
Performance panel updates
See also:
 Performance features reference
View Total Blocking Time information in the footer
After recording your load performance, the Performance panel now shows Total Blocking Time (TBT) information in the footer. TBT is a load performance metric that helps quantify how long a page takes to become usable. TBT essentially measures how long a page only appears to be usable (because the content is rendered to the screen); but the page isn't actually usable, because JavaScript is blocking the main thread and therefore the page doesn't respond to user input. TBT is the main metric for approximating First Input Delay.
To get Total Blocking Time information, don't use the Refresh Page  workflow for recording page load performance.
Instead, select Record , manually reload the page, wait for the page to load, and then stop recording.
If Total Blocking Time: Unavailable is displayed, Microsoft Edge DevTools did not get the required information from the internal profiling data in Microsoft Edge.

 Performance features reference
Layout Shift events in the new Experience section
The new Experience section of the Performance panel helps you detect layout shifts. Cumulative Layout Shift (CLS) is a metric that helps you quantify unwanted visual instability.
Click the Layout Shift event to display the details of the layout shift in the Summary pane. Hover on the Moved from and Moved to fields to visualize where the layout shift occurred.

See also:
 Performance features reference
More accurate promise terminology in the Console
When logging a Promise, the Console incorrectly provided PromiseStatus value set to resolved.


 Console overview
Styles pane updates
See also:
 Edit CSS font styles and settings in the Styles pane
Support for the revert keyword
The autocomplete UI of the Styles pane now detects the revert CSS keyword, which reverts the cascaded value of a property to the previous value applied to the styling of the element.

See also:
 Edit CSS font styles and settings in the Styles pane
Image previews
Hover on a background-image value in the Styles pane to display a preview of the image in a tooltip.

See also:
 Edit CSS font styles and settings in the Styles pane
Color Picker now uses space-separated functional color notation
CSS Color Module Level 4 specifies that color functions, such as rgb(), should support space-separated arguments. For example, rgb(0, 0, 0) is equivalent to rbg(0 0 0).
When you select colors with the Color Picker or alternate between color representations in the Styles pane by holding Shift and selecting the background-color value, the space-separated argument syntax is displayed.

You should also display the syntax in the Computed pane and the Inspect Mode tooltip.
Microsoft Edge DevTools is using the new syntax because upcoming CSS features such as color() don't support the deprecated comma-separated argument syntax.
The space-separated argument syntax has been supported in most browsers for a while.
See Can I use: Space-separated functional color notations?
Chromium issue #1072952
Deprecation of the Properties pane in the Elements panel
The Properties pane in the Elements tool is deprecated. Run console.dir($0) in the Console instead.

Reference
console.dir()
$0
App shortcuts support in the Manifest pane
In the Application tool, the Manifest page now shows app shortcuts. App shortcuts help users quickly start common or recommended tasks within a web app. The app shortcuts menu is shown only for Progressive Web Apps that are installed on the user's desktop or mobile device.



Feedback
Was this page helpful?  Yes  No

What's New in DevTools (Microsoft Edge 83)
Article • 03/28/2023
Following the updated Chromium schedule, we are adjusting our schedule for upcoming Microsoft Edge releases and cancelling the Microsoft Edge 82 release. Check out our blog post for more info.
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Announcements from the Microsoft Edge
DevTools team
Remotely debug Microsoft Edge on Windows 10 or later Devices
The Remote Tools for Microsoft Edge (Beta) app is now available in the Microsoft
Store. This app extends the Windows Device Portal. You can connect from Microsoft Edge running on your development machine to a remote Windows 10 or later device and display a list of targets. This list of targets includes all tabs in Microsoft Edge and PWAs open on the Windows device. Use DevTools on your development machine against a target running on the remote Windows device.

Read our guide for setting up your Windows 10 device and your development machine for remote debugging: Remotely debug Windows devices.
Let us know about your remote debugging experience by tweeting or clicking the Send Feedback icon.
New ways to access Settings
There are tons of settings for DevTools that you can customize to make DevTools look, feel, and work the way you need. In Microsoft Edge 83, accessing Settings in DevTools is now much easier. Open Settings by clicking the gear icon next to Console alerts and the main menu.

You can also open Settings from the Main Menu under More tools.

New and improved infobars
Informational notification bars (infobars) in DevTools now have an improved look and more functionality. In Microsoft Edge 83, infobars are easier to read and provide buttons so you can take the relevant action right away.

Navigate the Color Picker with your keyboard
In previous versions of Microsoft Edge, you couldn't navigate the Shades section of the Color Picker with the keyboard. In Microsoft Edge 83, you can now use the keyboard to move the selector in the Shades section of the Color Picker.
The Color Picker is a GUI in the Elements panel for changing color and background-

See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Properties tab now populates after a page refresh
In Microsoft Edge 81 and earlier, the Properties tab in the Elements panel was broken by page refreshes. When you refreshed the page, the Properties tab didn't populate the properties of the currently selected element:

In Microsoft Edge 83, you can now display the properties of the currently selected element after a page refresh in the Properties tab:

Chromium issue #1050999 See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Use the arrow keys to scroll in the Changes tool
The Changes tool tracks any changes you have made to CSS or JavaScript in DevTools. You can use the Changes tool to quickly display all your changes and take those back to your editor/IDE.
To open the Changes tool, in DevTools, press Ctrl+Shift+P (Windows/Linux) or
Command+Shift+P (macOS) to open the Command Menu, and then type changes. Select the Show Changes command and then press Enter. The Changes tool opens in the Quick View panel at the bottom of DevTools.
When you have made a change to a minified file, the Changes tool enables you to scroll horizontally to display all of your minified code. Starting in Microsoft Edge 83, you can now scroll horizontally using the arrow keys on your keyboard.

If you use screen readers or the keyboard to navigate around DevTools, send us your feedback by tweeting	 at us or clicking the Send Feedback icon.
Chromium issue #963183 See also:
 Track changes to files using the Changes tool
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 83 that were contributed to the open source Chromium project.
Emulate vision deficiencies
In the Rendering tool, use the new Emulate vision deficiencies feature to get a better idea of how people with different types of vision deficiencies experience your site:

DevTools can emulate blurred vision and the following types of color vision deficiencies:
ﾉ Expand table
Color Vision
DeficiencyDetailsProtanopiaThe inability to perceive any red light.DeuteranopiaThe inability to perceive any green light.TritanopiaThe inability to perceive any blue light.AchromatopsiaThe inability to perceive any color, except for shades of grey (extremely rare).Less extreme versions of these color vision deficiencies exist, and are more common. For example, protanomaly is a reduced sensitivity to red light (as opposed to protanopia, which is the complete inability to perceive red light). However, these -omaly vision deficiencies aren't as clearly defined: every person with such a vision deficiency is different, and may see things differently (being able to perceive more or less of the relevant colors).
By designing for the more extreme simulations in DevTools, your web apps are guaranteed to be accessible to people with vision deficiencies as well.
Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1003700 See also:
Emulate vision deficiencies
Analyze rendering performance with the Rendering tool in Performance features reference
 Types of Colour Blindness, at Colourblindawareness.org.
Emulate locales
To emulate locales, in the Sensors tool, select a location from the Location dropdown list. (To access the Sensors tool, open the Command Menu and type Sensors.) After you select a location, DevTools modifies the current default locale, which affects the following code:
Intl.* APIs, for example: new Intl.NumberFormat().resolvedOptions().locale
Other locale-aware JavaScript APIs such as String.prototype.localeCompare and
*.prototype.toLocaleString, for example: 123_456..toLocaleString()
DOM APIs such as navigator.language and navigator.languages
	The Accept-Language	 HTTP request header
７ Note
Updates to navigator.language and navigator.languages aren't visible immediately, but only after the next navigation or page refresh. Changes to the Accept-Language HTTP header are only reflected for subsequent requests.

See also:
 Override geolocation with the Sensors tool
Cross-Origin Embedder Policy (COEP) debugging
The Network panel now provides Cross-Origin Embedder Policy debugging information.
The Status column now provides a quick explanation of why a request was blocked as well as a link to view the headers of that request for further debugging:

The Response Headers section of the Headers tab provides more guidance on how to resolve the issues:

See also:
 Block requests in Inspect network activity.
New icons for breakpoints, conditional breakpoints, and logpoints
Update: As of 2022, breakpoints are now indicated by a blue rectangle, instead of a red circle.
The Sources panel has new icons for breakpoints, conditional breakpoints, and logpoints:
Breakpoints () are represented by red circles.
Conditional Breakpoints () are represented by half-red half-white circles.
Logpoints () are represented by red circles with Console icons.
The motivation for the new icons was to make the UI more consistent with other GUI debugging tools (which usually color breakpoints red) and to make it easier to distinguish between the 3 features at a glance.
Chromium issue #1041830 See also:
 Pause code with breakpoints
View network requests that set a specific cookie path
Use the new cookie-path filter keyword in the Network tool to focus on the network requests that set a specific cookie path	.
To discover more keywords like cookie-path, see Filter requests by properties in Network features reference.
Dock to left from the Command Menu
To move DevTools to the left of the viewport (rendered webpage), open the Command Menu and run the Dock to left command. The Dock to left feature has been available since Microsoft Edge 75, but it was previously only accessible from the main menu. You can now access the Dock to left feature from the Command Menu, as well.

"
Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1011679 See also:
 Change DevTools placement (Undock, Dock to bottom, Dock to left)
The Audits panel is now the Lighthouse panel
The DevTools team frequently got feedback from web developers that while it was possible to run Lighthouse from DevTools, when they tried it out, they couldn't find a "Lighthouse" panel. So, the Audits panel is now called the Lighthouse panel.

Note: The Lighthouse panel provides links to content hosted on third-party websites. Microsoft is not responsible for and has no control over the content of these sites and any data they may collect.
See also:
 Lighthouse tool
Delete all Local Overrides in a folder
After setting up Local Overrides, you can right-click a directory and then select the new Delete all overrides option to delete all Local Overrides in that folder.

See also:
 Override webpage resources with local copies (Overrides tab)
Updated Long tasks UI
A Long Task is JavaScript code that monopolizes the main thread for a long time, causing a web page to freeze.
You've been able to visualize Long Tasks in the Performance panel for a while now, but in Microsoft Edge 83 the Long Task visualization UI in the Performance panel has been updated. The Long Task portion of a task is now colored with a striped red background:

Maskable icon support in the Manifest pane
There's a new checkbox, Show only the minimum safe area for maskable icons, in the Manifest pane of the Application tool.
Android Oreo introduced adaptive icons, which display app icons in a variety of shapes across different device models. Maskable icons are a new icon format that support adaptive icons, which enable you to ensure that your PWA icon looks good on devices that support the maskable icons standard.
To check that your maskable icon looks good on Android Oreo devices, in the Manifest pane of the Application tool, select the new checkbox Show only the minimum safe area for maskable icons:

This feature launched in Microsoft Edge 81. The updates covered here in Microsoft Edge 83 weren't covered in What's New in DevTools (Microsoft Edge 81).
See also:


Feedback
Was this page helpful? 

What's New in DevTools (Microsoft Edge 81)
Article • 11/07/2024
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Announcements from the Microsoft Edge
DevTools team
Accessibility improvements to the DevTools
The DevTools team has contributed 170 changes to Chromium to address high-impact color contrast, keyboard, and screen reader issues in the DevTools. Every developer building the web should be able to use the DevTools.

Want to learn how to make your web page accessible to all of your users? Download the Accessibility Insights and webhint extensions for Microsoft Edge to get started.
If you use screen readers or the keyboard to navigate around the DevTools, send us your feedback by tweeting	 at us or clicking the Send Feedback icon!
Chromium issue #963183 See also:
Accessibility-testing features
Navigate DevTools with assistive technology
Using the DevTools in other languages
Many developers use other developer tools, like StackOverflow and Visual Studio Code, in their native language, not just in English. We're excited to announce localization for the DevTools, which you can now use in one of 10 languages besides English:
Chinese (Simplified) - 中文（简体）
Chinese (Traditional) - 中文（繁體）
French - français
German - deutsch
Italian - italiano
Japanese - 日本語
Korean - 한국어
Portuguese - português
Russian - русский
Spanish - español
The DevTools automatically match the language you use for Microsoft Edge in edge://settings/languages.
If you want Microsoft Edge to be in one language and your DevTools to remain in
English, press F1 in DevTools to open Settings and disable Match browser language.

Console messages aren't localized. Only the strings used in the DevTools UI are displayed in the language you use for Microsoft Edge.
If you want to use the DevTools in a different language than the ones that are available, tweet at us or click the Send Feedback icon.
Chromium issue #941561 See also:
 Change DevTools language settings
webhint Microsoft Edge extension
The webhint Microsoft Edge extension allows you to easily scan your web page and get feedback on accessibility, browser compatibility, security, performance, and more within the DevTools. Read more at https://webhint.io.
Try the webhint browser extension in Microsoft Edge open the DevTools and select the Hints tool. From here, run a customizable site scan.
Head over to webhint.io to learn more.
See also:
 The webhint extension for Visual Studio Code
3D View
Use the 3D View to debug your web application by navigating through the Document Object Model (DOM) or the z-index stacking context.

To open the 3D View tool, press Ctrl+Shift+P (Windows/Linux) or Command+Shift+P (macOS) to open the Command Menu, start typing 3d view, and then select Show 3D View.
The Microsoft Edge team is working with the Chromium team on the UI and adding more functionality to the 3D View, so please use the Send Feedback icon!
Chromium issue #987787 See also:
 Navigate z-index, DOM, and layers using the 3D View tool
Visual Studio Code extensions
The DevTools team has also released some extensions for Visual Studio Code that let you use the power of the DevTools directly from your text editor! Check out the extensions below:
See also:
Visual Studio Code for web development
Microsoft Edge DevTools extension for Visual Studio Code
Elements for Microsoft Edge
Use the Elements tool from within Visual Studio Code by adding the Elements for

Update: As of 2022, the Elements for Microsoft Edge extension is now the Microsoft Edge DevTools extension for Visual Studio Code.
For more information, check out Microsoft Edge DevTools extension for Visual Studio Code.
Debugger for Microsoft Edge
With the Debugger for Microsoft Edge Visual Studio Code extension, debug JavaScript running in Microsoft Edge directly from Visual Studio Code.

Update: As of 2022, the Debugger for Microsoft Edge Visual Studio Code extension has been replaced by a built-in debugger for Microsoft Edge in Visual Studio Code. See Debug Microsoft Edge in Visual Studio Code.
webhint
The webhint Visual Studio Code extension uses webhint to improve your web page while you are writing it. This extension runs and reports diagnostics on your workspace files based on webhint analysis.

Visual Studio Code for web development
The webhint extension for Visual Studio Code
Visual Studio integration
In Visual Studio 2019 version 16.2 or later, use the Visual Studio debugger to debug JavaScript running in Microsoft Edge. Download Visual Studio 2019 to try this feature out!

To learn more about debugging Microsoft Edge from Visual Studio, see Visual Studio for web development.
Tracking prevention Console messages
Tracking prevention is a unique feature in Microsoft Edge that protects you from being tracked by websites you have not visited before. The default tracking prevention setting is Balanced mode, which blocks 3rd party trackers and known malicious trackers for an experience that balances privacy and web compatibility. To give you more insight into the compatibility of your web page when certain trackers are blocked, warning messages were added in the Console when a tracker is blocked.

Read more about tracking prevention and the balance between privacy and web compatibility.
See also:
Tracking prevention in Microsoft Edge
Console overview
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 81 that were contributed to the open source Chromium project.
Moto G4 support in Device Mode
After enabling the Device Toolbar, simulate the dimensions of a Moto G4 viewport from the Device list.

Click Show Device Frame to show the Moto G4 hardware around the viewport.

Related features:
 Open the Command Menu and run the Capture screenshot command to take a screenshot of the viewport that includes the Moto G4 hardware (after enabling Show Device Frame).
 Throttle the network and CPU to more accurately simulate a mobile user's web browsing conditions.
Chromium issue #924693
Cookie-related updates
See also:
View, edit, and delete cookies
Display cookies in Network features reference
Blocked cookies in the Cookies pane
The Cookies pane in the Application panel now displays blocked cookies with a yellow background.

Cookie priority in the Cookie pane
The Cookies tables in the Network and Application tools now include a Priority column.
Caution: Chromium-based browsers, like Microsoft Edge, are the only browsers that support cookie priority.
Chromium issue #1026879
Edit all cookie values
All cells in the Cookie tables are editable now, except cells in the Size column because that column represents the network size of the cookie, in bytes. For an explanation of each column, see Fieldsin View, edit, and delete cookies.

Copy as Node.js fetch to include cookie data
To get a fetch expression that includes cookie data, right-click a network request, and then select Copy > Copy as Node.js fetch.

More accurate web app manifest icons
Previously, the Manifest pane in the Application panel sent its own requests in order to display web app manifest icons. DevTools now shows the exact same manifest icon that Microsoft Edge uses.

See also:
 Open the Cookies pane in View, edit, and delete cookies
Hover on CSS content properties to display unescaped values
In the Styles pane of the Elements tool, to display the unescaped version of a value of a content property, hover on the value.
For example, in this demo when you inspect the p::after pseudo-element an escaped string is displayed in the Styles pane:

 CSS features reference
More detailed source map errors in the Console
The Console now provides more detail on why a source map failed to load or parse.
Previously it just provided an error without explaining what went wrong.

See also:
Console overview
Map the processed code to your original source code, for debugging
Setting for disabling scrolling past the end of a file
To prevent the default UI behavior that allows you to scroll well past the end of a file in the Sources panel, open Settings and then clear the checkbox Preferences > Sources > Allow scrolling past end of file.




Feedback
Was this page helpful?  Yes  No
What's New in DevTools (Microsoft Edge 80)
Article • 03/28/2023
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, side-by-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
Announcements from the Microsoft Edge
DevTools team
Accessibility improvements to the DevTools
The DevTools team has contributed 170 changes to Chromium to address high-impact color contrast, keyboard, and screen reader issues in the DevTools. Every developer building the web should be able to use the DevTools.

Want to learn how to make your web page accessible to all of your users? Download the Accessibility Insights and webhint extensions for Microsoft Edge to get started.
If you use screen readers or the keyboard to navigate around the DevTools, send your feedback by tweeting	 at us or selecting the Send Feedback icon!
Chromium issue #963183 See also:
Accessibility-testing features
Navigate DevTools with assistive technology
Using the DevTools in other languages
Many developers use other developer tools, like StackOverflow and Visual Studio Code, in their native language, not just in English. We're excited to announce localization for the DevTools, which you can now use in one of 10 languages besides English:
Chinese (Simplified) - 中文（简体）
Chinese (Traditional) - 中文（繁體）
French - français
German - deutsch
Italian - italiano
Japanese - 日本語 Korean - 한국어
Portuguese - português
Russian - русский Spanish - español Go to edge://flags and set the Enable localized Developer Tools flag to Enabled. Also set the Developer Tools experiments flag to Enabled. Restart Microsoft Edge and open the DevTools. The DevTools match the language you use for Microsoft Edge in

If you want to use the DevTools in a different language than the ones that are available, tweet at us or click the Send Feedback icon.
Chromium issue #941561 See also:
 Change DevTools language settings
webhint Microsoft Edge extension
The webhint Microsoft Edge extension allows you to easily scan your web page and get feedback on accessibility, browser compatibility, security, performance, and more within the DevTools. Read more at https://webhint.io.
Try the webhint browser extension in Microsoft Edge open DevTools and then select the Hints tool. From here, run a customizable site scan.
Head over to webhint.io to learn more.
See also:
 The webhint extension for Visual Studio Code
3D View
Use the 3D View to debug your web application by navigating through the Document Object Model (DOM) or the z-index stacking context.
To access the 3D View, go to edge://flags and ensure that the Developer Tools experiments flag is set to Enabled. Restart Microsoft Edge and open the DevTools. Press
F1 in DevTools, or open the Settings > Experiments section, and turn on the Enable 3D
View checkbox. Now, press Ctrl+Shift+P (Windows/Linux) or Command+Shift+P (macOS), type in 3D View, and then select Show 3D View.
We're working on the UI and adding more functionality to the 3D View, so please send us your feedback. Chromium issue #987787 See also:
 Navigate z-index, DOM, and layers using the 3D View tool
Visual Studio Code extensions
The DevTools team has also released some extensions for Visual Studio Code that let you use the power of the DevTools directly from your text editor. Check out the following extensions.
Elements for Microsoft Edge
Use the Elements tool from within Visual Studio Code by adding the Elements for Microsoft Edge Visual Studio Code extension.

Update: As of 2022, the Elements for Microsoft Edge extension is now the Microsoft Edge DevTools extension for Visual Studio Code.
For more information, check out Microsoft Edge DevTools extension for Visual Studio Code.
Debugger for Microsoft Edge
With the Debugger for Microsoft Edge Visual Studio Code extension, debug JavaScript running in Microsoft Edge directly from Visual Studio Code.

Update: As of 2022, the Debugger for Microsoft Edge Visual Studio Code extension has been replaced by a built-in debugger for Microsoft Edge in Visual Studio Code. See Debug Microsoft Edge in Visual Studio Code.
webhint
The webhint Visual Studio Code extension uses webhint to improve your web page while you're writing it! This extension runs and reports diagnostics on your workspace files based on webhint analysis.

Visual Studio Code for web development
The webhint extension for Visual Studio Code
Visual Studio integration
In Visual Studio 2019 version 16.2 or later, use the Visual Studio debugger to debug JavaScript running in Microsoft Edge. Download Visual Studio 2019 to try this feature out.

To learn more about debugging Microsoft Edge from Visual Studio, see Visual Studio for web development.
Tracking prevention Console messages
Tracking prevention is a unique feature in Microsoft Edge that blocks you from being tracked by a website before you visited it. The default tracking prevention setting is Balanced mode, which blocks 3rd party trackers and known malicious trackers for an experience that balances privacy and web compatibility. To give you more insight into the compatibility of your web page when certain trackers are blocked, The Microsoft Edge team added warning messages in the Console when a tracker is blocked.

Read more about tracking prevention and the balance between privacy and web compatibility.
See also:
Tracking prevention in Microsoft Edge
Console overview
Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 80 that were contributed to the open source Chromium project.
Support for let and class redeclarations in the Console
The Console now supports redeclarations of let and class statements. The inability to redeclare was a common annoyance for web developers who use the Console to experiment with new JavaScript code.

For example, previously, when re-declaring a local variable with let, the Console threw an error:


Console overview
Run JavaScript in the Console
Improved WebAssembly debugging
DevTools has started to support the DWARF Debugging Standard, which means increased support for stepping over code, setting breakpoints, and resolving stack traces in your source languages within DevTools.
See also:
 Filter Wasm resource type in the Network tool in What's New in DevTools (Microsoft Edge 92).
Network panel updates
Request Initiator Chains in the Initiator panel
You can now view the initiators and dependencies of a network request as a nested list. This may help you understand why a resource was requested, or what network activity a certain resource (such as a script) caused.

After logging network activity in the Network panel, select a resource and then go to the Initiator panel to view the Request Initiator Chain:
 The inspected resource is bold. In the screenshot above, ai.2.min.js is the inspected resource.
 The resources above the inspected resource are the initiators. In the screenshot above, https://www.microsoftedgeinsider.com is the initiator of ai.2.min.js. In other words, https://www.microsoftedgeinsider.com caused the network request for ai.2.min.js. (The screenshot shows an outdated URL. The latest URL is https://www.microsoft.com/edge/download/insider.)
 The resources below the inspected resource are the dependencies. In the screenshot above, https://dc.services.visualstudio.com/v2/track is a dependency of ai.2.min.js. In other words, ai.2.min.js caused the network request for https://dc.services.visualstudio.com/v2/track.
Initiator and dependency information can also be accessed by holding Shift and then hovering over network resources. See Display initiators and dependencies in Network features reference.
Chromium issue #842488
Highlight the selected network request in the Overview
After you select a network resource in order to inspect it, the Network panel now puts a blue border around that resource in the Overview. This can help you detect if the network request is happening earlier or later than expected.

See Hide the Overview pane in Network features reference.
URL and path columns in the Network panel
Use the new Path and URL columns in the Network tool to display the absolute path or full URL of each network resource.

To display the new columns, right-click the Waterfall table header, and then select Path or URL.
Chromium issue #993366 See also:
Network features reference.
Sort requests in Network features reference mentions the Waterfall column.
Updated User-Agent strings
DevTools supports setting a custom User-Agent string through the Network Conditions panel. The User-Agent string affects the User-Agent HTTP header attached to network resources, and also the value of navigator.userAgent.
The predefined User-Agent strings have been updated to reflect modern browser versions.


Network conditions tool Override the user agent string
Audits panel updates
In a later release, the Audits panel was renamed as the Lighthouse panel.
New configuration UI
The configuration UI has a new, responsive design, and the throttling configuration options have been simplified. For more information on the throttling UI changes, see

 Lighthouse tool
Coverage tool updates
Per-function or per-block coverage modes
The Coverage tool has a new dropdown menu that lets you specify whether code coverage data should be collected per function or per block. Per block coverage is more detailed but also far more expensive to collect. DevTools uses per function coverage by default now.
Ｕ Caution
You may notice large code coverage differences in HTML files depending on whether you use per function or per block mode. When using per function mode, inline scripts in HTML files are treated as functions. If the script runs at all, DevTools marks the entire script as used code. If the script doesn't run at all, DevTools marks the script as unused code.

Coverage must now be initiated by a page refresh
Toggling code coverage without a page refresh has been removed because the coverage data was unreliable. For example, a function may be reported as unused if the runtime was a long time ago and the V8 garbage collector has cleaned it up.
Chromium issue #1004203


Feedback
Was this page helpful? 

Experimental features in Microsoft Edge DevTools
Article • 01/16/2025
Microsoft Edge DevTools provide access to experimental features that are still in development. This article lists and describes the experimental features that are in either:
The latest version of the Canary preview channel of Microsoft Edge.
The latest version of the Stable release of Microsoft Edge.
All channels of Microsoft Edge have experimental features. You can get the latest experimental features by using the Microsoft Edge Canary channel. To view the full list of experiments that are available in your version of Microsoft Edge, see the Settings > Experiments page in DevTools.
These experiments could be unstable or unreliable and may require you to restart DevTools.
Experiments which are turned on by default
The following experimental features are turned on by default. You can use these features right away, without changing any settings. You can turn off these default experimental features, if needed.
Turned on by default in Microsoft Edge Canary 134:
Redesign of the filter bar in the Network panel
Autofill panel
Performance panel: enable a switch to an alternative timeline navigation option
Enable webhint
Show issues in Elements
Open source files in Visual Studio Code
Turned on by default in Microsoft Edge Stable 132:
Redesign of the filter bar in the Network panel
Autofill panel
Performance panel: enable annotations
Performance panel: enable performance insights
Performance panel: enable live metrics landing page
Enable webhint
Show issues in Elements
Open source files in Visual Studio Code
Turning an experiment on or off
Experimental features are constantly being updated and might cause performance issues. This is one reason you might want to turn off an experiment.
To turn an experiment on or off in Microsoft Edge:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, click the Customize and control DevTools () button, and then click the Settings () button. Or, press Shift+?.
3. On the left side of the Settings panel, select the Experiments page:

4. Select or clear the checkbox for an experiment. Some experiments are selected by default.
5. Click Close () in the upper right of DevTools Settings.
6. Click the Reload DevTools button.
Restoring defaults for which experiments are selected
To restore the default settings for which experimental features are turned on:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, click the Settings () button. Or, press Shift+?.
The Settings panel opens, with the Preferences page selected.
3. At the bottom of the Preferences page, click the Restore defaults and refresh button, and then click Close ().
Filtering the experiments
You can filter the experimental features by text included in the title.
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, click the Settings () button. Or, press Shift+?.
The Settings panel opens, with the Preferences page selected.
3. On the left side of the Settings panel, select the Experiments page.
4. Click in the Filter text box and enter text, such as timeline. As you type, only the matching checkboxes are shown in the Experiments page.
5. To end filtering, clear the Filter text box.
Providing feedback about the experiments
We're eager to hear your feedback about experimental features. To share feedback with us, Contact the Microsoft Edge DevTools team.
List of experiments
The experiments checkboxes that appear in the latest version of the Canary preview channel of Microsoft Edge are listed below. The Stable release is also noted, following behind the addition or removal of checkboxes in Canary.
Capture node creation stacks
To capture JavaScript stack traces when DOM nodes are added to the DOM at runtime, enable this experiment. This experiment adds the Stack Trace tab in the Elements tool, grouped with the Styles tab:

After you enable the experiment, you can test it as follows:
1. In a new window or tab, open a webpage that creates DOM nodes dynamically via JavaScript, such as the TODO demo app.
2. In the rendered demo page, create a new todo item.
3. In the rendered demo page, right-click the new todo item, and then select Inspect.
DevTools opens, showing the Elements tool.
4. Click the Stack Trace tab, which is grouped with the Styles tab.
See also:
 Get started viewing and changing the DOM
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Protocol Monitor
Makes the Protocol monitor tool available in DevTools:

The Protocol monitor tool displays the messages that are sent and received by DevTools, to debug the inspected page. DevTools communicates with the inspected page by using the Chrome DevTools Protocol (CDP).
To select this checkbox and then open the Protocol monitor tool:
1. Select this Protocol Monitor checkbox as described in Turning an experiment on or off, above.
2. In Quick View at the bottom of DevTools, click the More tools (+) button, and then select Protocol monitor.
Or, open the Command Menu, such as by pressing Ctrl+Shift+P (Windows/Linux) or Command+Shift+P (macOS), and then type protocol in the text box. Then select Show Protocol monitor.
The Protocol monitor tool is displayed in the Quick View panel at the bottom of DevTools.
See also:
Use the Chrome DevTools Protocol (CDP) in WebView2 apps
[Experimental] Protocol monitor in What's New In DevTools (Chrome 92).
Status:
 This checkbox is present in Microsoft Edge Canary 134.
 This checkbox is present in Microsoft Edge Stable 132.
Show option to expose internals in heap snapshots
new as of Microsoft Edge 105
Whether to display a checkbox to expose internals in heap snapshots in the Memory tool.
See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable new Advanced Perceptual Contrast Algorithm (APCA) replacing previous contrast ratio and AA/AAA guidelines
The Advanced Perceptual Contrast Algorithm (APCA) replaces the AA/AAA guidelines contrast ratio in the Color Picker. The Color Picker is used in the Styles tab in the Elements tool.
APCA is a new way to compute contrast. It is based on modern research on color perception. Compared to AA/AAA guidelines, APCA is more context-dependent. The contrast is calculated based on the following spatial properties of the text, color, and context.
Spatial properties of text that include font weight and size.
Spatial properties of color that include perceived contrast between text and background.
 Spatial properties of context that include ambient light, surroundings, and intended purpose.
See also:
 New color contrast calculation - Advanced Perceptual Contrast Algorithm (APCA) in What's New in DevTools (Microsoft Edge 89).
Change colors with the Color Picker in CSS features reference.
Test text-color contrast using the Color Picker
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable full accessibility tree view in the Elements panel
Adds a Switch to Accessibility Tree view button in the Elements tool that toggles between the DOM tree and the accessibility tree. The button label toggles to Switch to DOM Tree view.
If this Experiment checkbox is cleared, the Elements tool lacks the button:

If this Experiment checkbox is selected, the Elements tool has the button:

The Accessibility Tree view in the Elements tool:

See also:
Test accessibility using the Accessibility tab
Full accessibility tree view in the Elements tool in What's New in DevTools (Microsoft Edge 90).
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable new font editor within the Styles Pane
You can use the visual Font Editor to edit fonts. Use it define fonts and font characteristics. The visual Font Editor helps you do the following:
Switch between units for different font properties
Switch between keywords for different font properties
Convert units
Generate accurate CSS code
To use the visual Font Editor:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Elements tab. If the Elements tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. In the Styles tab, select the Font Editor icon.

Some browser channels have the checkbox label Enable new Font Editor tool within the Styles pane.
See also:
 Edit CSS font styles and settings in the Styles pane
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable automatic contrast issue reporting via the Issues panel
Enables automatic contrast issue reporting in the Issues tool.
See also:
 Find and fix problems using the Issues tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable experimental cookie features
Enables experimental cookie features.
See also:
 View, edit, and delete cookies
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Deprecate CSS <length> authoring tool in the Styles tab
Not applicable for Microsoft Edge. Selecting or clearing this checkbox has no effect.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Sync CSS changes in the Styles tab
Whether to sync CSS changes in the Styles tab in the Elements tool.
See also:
 Edit CSS font styles and settings in the Styles pane
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Highlights a violating node or attribute in the Elements panel DOM tree
new as of Microsoft Edge 106
Highlights a violating node or attribute in the Elements tool's DOM tree.
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Group sources into authored and deployed trees
new as of Microsoft Edge 104
Controls whether to group resources into separate Authored and Deployed trees in the Page tab of the Sources tool. This feature in the Sources tool allows you to group source files in two folders depending on whether these are:
 Original source files (authored, that is, files with your local edits).
 Production files (deployed files that are on the web server after compiling and bundling the source files).
See also:
 Using the Page tab to explore resources that construct the current webpage in Sources tool overview.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Hide ignore-listed code in Sources tree view
new as of Microsoft Edge 106
In the Sources tool's tree view, omits code that's included in the Ignore list.
See also:
Add content scripts to the Ignore List
Enhanced ignore listing
Improved Ignore list setting
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Redesign of the filter bar in the Network panel
new as of Microsoft Edge 120
In the Network tool, the filter bar has been redesigned:
The buttons are replaced by a Request types dropdown list.
The checkboxes are replaced by a More filters dropdown list.
Filter bar with this checkbox cleared:

Filter bar with this checkbox selected:

See also:
Filter resources in Inspect network activity.
Filter requests in Network features reference.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Autofill panel
new as of Microsoft Edge 125
Adds an Autofill tool to DevTools, to record various events that the browser triggers when a user is filling in a form by using the browser's autofill feature. For example, when the browser remembers your address and autofills it in an address field.

See also:
Autofill in Microsoft Edge Privacy Whitepaper.
Autofill in Overview of WebView2 APIs.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: show postMessage dispatch and handling flows
new as of Microsoft Edge 124
This experiment improves the Performance tool's Main section to help you quickly identify postMessage events and handlers, by distinguishing events that are triggered by the postMessage method from other events that are displayed in the Performance tool. This experiment helps you investigate performance issues that are related to posting messages across various threads of an application, to view messages between windows, iframes, and dedicated workers.
Without this experiment, events that are triggered by dispatching and handling messages between threads of an application appear as generic scripting function-call events. With this experiment enabled:
This experiment helps you investigate when a postMessage call occurred, and how long the message was queued before the postMessage handler starts. The dispatch events are linked to handler events by initiator arrows that appear when you click on either type of event:

See also:
 View messages between windows, iframes, and dedicated workers in Performance features reference.
Performance recording event reference postMessage Trace Events demo (rendered) postMessage Trace Events demo (source code)
postMessage events and handlers are distinguished from other events in What's New in DevTools (Microsoft Edge 124).
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable annotations
new as of Microsoft Edge Canary 129
Annotations in the Performance tool allow you to double-click any event that's displayed in the main area of a performance recording, and then add a custom label on (above) that event:

See also:
 Introduction to the Performance tool
Status:
This checkbox is not present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable live metrics landing page
new as of Microsoft Edge 127
In the Performance tool, adds a landing page that's displayed when no performance traces have been recorded yet. The landing page displays performance metrics about the rendered page that are updated live, such as:
Largest Contentful Paint (LCP)
Cumulative Layout Shift (CLS)
Interaction to Next Paint (INP)
See also:
 Introduction to the Performance tool
Status:
This checkbox is not present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable server timings in the timeline
new as of Microsoft Edge Stable 129
Shows a Server Timings track in the Main section of the Performance tool, to display server timing events sent by your HTTP server. To learn more, see Server timing at MDN Web Docs.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable performance insights
new as of Microsoft Edge Stable 129
In the Performance tool, adds the Insights sidebar tab, when viewing a recorded performance profile. The Insights sidebar tab provides useful information about the profile, such as the various Largest Contentful Paint phases and the list of Render blocking requests.
See also:
 Introduction to the Performance tool
Status:
This checkbox is not present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable experimental performance insights
new as of Microsoft Edge Canary 133
Enables additional insights within the Insights side panel.
To use this experiment, first select the Performance panel: enable performance insights checkbox, and then, if you want to see even more insights, also select the Performance panel: enable experimental performance insights checkbox.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable dimming unrelated events in performance insights and search results
new as of Microsoft Edge Canary 133
This experiment changes the color of certain events in the main section of the Performance tool to gray. This happens in two cases:
 When you search for an event by using Ctrl+F and then type text, only the search matches retain their coloring; the other events turn gray.
 When you use the Insights side-panel, and expand one of the insights, only the events that are related to that insight retain their coloring; the other events turn gray.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable a switch to an alternative timeline navigation option
new as of Microsoft Edge Canary 133
Adds a Show shortcuts () button in the Performance tool's toolbar that enables you to select Classic or Modern keyboard navigation of the timeline.
1. In Microsoft Edge 133 or later, select this experiment checkbox, close Settings, and then click the Restart DevTools button.
2. In DevTools, in the Performance tool, record a profile.
The Show shortcuts () button is displayed in the upper right of the Performance tool, below the Help () button for DevTools.
3. Click the Show shortcuts () button.
The Keyboard shortcuts popup dialog opens.
With Classic selected:

With Modern selected:

4. Select the Classic or Modern option button.
The list of keyboard shortcuts changes to relect Classic or Modern keyboard navigation of the timeline.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: enable third party dependency features
new as of Microsoft Edge Canary 134
Includes a Dim 3rd Parties checkbox in the Performance tool to "dim" the performance events that come from third-party dependencies. For example, if your code uses the React library, checking the Dim 3rd Parties checkbox greys-out and dims the React events in a profile.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is not present in Microsoft Edge Stable 132.
Log DevTools uncaught exceptions to Console
Controls whether to log DevTools uncaught exceptions in the Console tool.
See also:
 Console overview
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable webhint
webhint is an open-source tool that provides real-time feedback for websites and local webpages. The type of feedback provided by webhint includes:
Accessibility
Cross-browser compatibility
Security
Performance
Progressive Web Apps (PWAs)
Other common web development issues
The webhint experiment displays webhint feedback in the Issues tool. Select an issue to display documentation about the solution and a list of the affected resources on your website. Select a resource link to open the relevant tool, such as Network, Sources, or Elements:

See also:
 Find and fix problems using the Issues tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Show issues in Elements
Displays syntax errors as wavy underlines under DOM nodes in the Elements tool. See also:
 Wavy underlines highlight code issues and improvements in Elements tool in What's New in DevTools (Microsoft Edge 91).
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Open source files in Visual Studio Code
The Open source files in Visual Studio Code experiment replaces the code editor of the Sources tool with Visual Studio Code, for editing local files. When you turn on this experiment, Developer Tools detects when you edit a local file, and prompts you to select a folder to use as your Workspace.
When you select a folder to use as your Workspace, selecting any link to a file in DevTools opens the file in Visual Studio Code. In previous versions of Microsoft Edge, this action opened the file in the code editor of the Sources tool in DevTools.

Any edits that you make in DevTools now change the file on the hard drive and sync live with Visual Studio Code.
See also:
 Opening source files in Visual Studio Code - setting up your workspace.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable Adaptive CPU throttling
new as of Microsoft Edge 114 Enables Adaptive CPU throttling.
See also:
 Throttle the CPU while recording in Performance features reference.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Enable CSS Copilot
Enables using Copilot in the Microsoft Edge Sidebar to explain HTML elements and CSS styles to help you better understand a particular element or style rule that's displayed in the Elements tool. To ask Copilot about an element or style rule, click the Copilot button next to it, and then ask follow-up questions.

This experiment is not available when the Sidebar is turned off.
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Live heap profile
Controls whether to live-update the heap profile.
See also:
 Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Sampling heap profiler timeline
Controls whether to show the sampling heap profiler timeline in the Performance tool.
See also:
Introduction to the Performance tool
Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: invalidation tracking
Adds an Invalidations section for Recalculate Style events in the Summary tab of the Performance tool. The Invalidations section provides information about the root cause for a Recalculate Style event, which might be helpful when investigating long-running Recalculate Style events that are causing performance issues.
The Invalidations section lists the DOM nodes that were invalidated as a result of a change on the webpage, such as a DOM mutation, and which the browser engine had to restyle during the Recalculate Style event. See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: show all events
Controls whether to show all events in the Performance tool.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: V8 runtime call stats
Controls whether to show V8 runtime call statistics in the Performance tool. V8 is the JavaScript engine that's used by Microsoft Edge.
See also:
 Introduction to the Performance tool
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Performance panel: Enable collecting enhanced traces
new as of Microsoft Edge 128
This experiment makes the Performance tool capture newly added traces, to support enhanced traces v2. This feature is being implemented in the upstream Chromium project. This experiment doesn't affect the capabilities of Microsoft Edge to capture enhanced traces and doesn't impact DevTools user's experience.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
See also:
Share enhanced performance and memory traces
Performance features reference
 Performance recording event reference
Performance panel: Enable collecting source text for compiled script
new as of Microsoft Edge 128
In the Performance tool, when exporting the trace file, stores the source code of compiled scripts in the trace file.
This experiment makes the Performance tool record script source text in traces. This feature is being implemented in the upstream Chromium project.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
See also:
Share enhanced performance and memory traces
Performance features reference
Performance recording event reference
Performance panel: Enable debug mode (trace event details, etc)
new as of Microsoft Edge 128
Adds a Trace Event section to the Summary tab of the Performance tool. The Trace
Event section is displayed when you select an event in a recorded performance trace. The Trace Event section displays debugging information about the selected trace event, such as its name and duration.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
See also:
Share enhanced performance and memory traces
Performance features reference
 Performance recording event reference
Enable instrumentation breakpoints
Whether to halt at test breakpoints. This experiment makes breakpoints more reliable.
See also:
Enable synchronization on instrumentation breakpoints
The first time source files are loaded, breakpoints might not trigger
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.
Use scope information from source maps
new as of Microsoft Edge 118
Whether to use scope information from source maps.
See also:
Map the processed code to your original source code, for debugging
Mapping minified code to your source code to show readable code in Sources tool overview.
Status:
This checkbox is present in Microsoft Edge Canary 134.
This checkbox is present in Microsoft Edge Stable 132.

Feedback
Was this page helpful? 
Share enhanced performance and memory traces
Article • 10/23/2024
The Performance and Memory tools record runtime data about your webpage. Exploring the recorded data makes it possible to improve your webpage's memory usage or runtime performance.
Additionally, the recorded data can be exported to files on disk. The exported files are called traces.
Exporting performance and memory traces is useful when you want to share these files with other people to get help with investigating issues. An exported trace is a .json,
.heapsnapshot, .heapprofile, or .heaptimeline file which can be imported in DevTools at any time.
By default, traces contain minimal information about the runtime data from the traced webpage, but traces can also be exported as enhanced traces, as an experimental feature. An enhanced trace is a .devtools file which contains much more runtime data from the traced webpage. Enhanced traces make it easier to resolve performance and memory issues, by recreating the environment in which the trace was recorded, and by providing original source files.
Using enhanced traces makes it possible to reliably resolve source code references found in imported traces to the actual runtime code in the Sources tool. Additionally, if source maps were present when a trace was recorded, or if they are stored on the Azure Artifacts Symbol Server, it will also be possible to resolve code references to their original source code.
Differences between normal and enhanced traces
Normal traces
A normal trace only contains some of the information that's present in a webpage. Much of the original code is lost and only the recorded performance or memory data of the webpage is preserved in the trace. For example, when importing a .heapsnapshot memory trace that was recorded during another DevTools session or on another computer, there's no way to go from an object in the Memory tool to its constructor in the Sources tool.
Similarly, in the Performance tool, when you import a performance trace recorded earlier:
 The trace needs to have been recorded on the same site and same configuration to be able to map from the performance report to the JavaScript that was running in the browser.
 If file or function names have changed since the recording was taken, the mapping is prone to errors.
Enhanced traces
An enhanced trace retains much more information about the webpage where the recording took place. For example, an enhanced trace contains the execution context and the list of parsed scripts, and can optionally contain console messages, script sources, and a snapshot of the DOM tree.
When an enhanced trace is imported in DevTools, a new DevTools window appears. This new window isn't connected to the webpage that's running in your browser, and instead re-creates part of the environment in which the trace was originally recorded.
For example, if a snapshot of the DOM was recorded in the enhanced trace, the Elements tool displays this snapshot. If console messages were recorded, the Console tool prints these messages. The Sources tool displays the scripts that were present during the recording.
Enhanced traces can only be imported in Microsoft Edge, while normal traces are compatible with other browsers based on the Chromium engine.
Set the default trace type
By default, the Performance and Memory tools export data as normal traces, but you can set the default trace type to enhanced.
To change the trace type:
1. Open DevTools by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, in the upper right, click Settings (). Settings opens, with the Preferences page selected.
3. In the Persistence section of the Preferences page, select the Export enhanced performance and memory traces checkbox:

4. Enhanced traces can also optionally include console messages, script sources, and DOM elements. To control what to include in enhanced traces, use these checkboxes:
Include console message in enhanced traces.
Include script sources in enhanced traces.
Include DOM snapshots in enhanced traces (experimental).

Export a trace from the Performance tool
To export a performance recording from the Performance tool:
1. Open the Performance tool.
2. Click Record and run the scenario you want to investigate the performance of by interacting with the webpage, and then click Stop.
3. When the performance profile appears, click Save profile ():

4. Choose a location to save the trace file on your disk:

Export a trace from the Memory tool
To export memory information from the Memory tool:
1. Open the Memory tool.
2. Choose the type of memory recording you're interested in, such as Heap Snapshot. The following instructions are similar if you choose a different memory recording type. To learn more about the different memory recording types, see Fix memory problems.
3. Click Take Snapshot.
4. When the snapshot is recorded, click the Save button in the Memory tool sidebar:

5. Choose a location to save the trace file on your disk:

Choose a trace type when exporting
Traces are exported as normal or enhanced traces, depending on the Export Enhanced Performance and Memory Traces option. To change the default trace type, see Set the default trace type. You can also choose the type of trace you want when exporting.
To choose a different trace type when exporting:
1. Right-click (or hold the Ctrl key and click) the Save profile () in the Performance tool or the Save button in the Memory tool.
2. Click either .devtools (enhanced format for Microsoft Edge) if you want to export an enhanced trace, or click .json (works with Microsoft Edge and Chromium browsers) if you want a normal trace.

Import a trace in the Performance tool
To import a trace in the Performance tool:


4. Open the file.
If the file is an enhanced trace, a new DevTools window appears, showing the performance profile and the extra runtime information that was recorded displayed in the Sources, Console, and Elements tools.
If the file is a normal trace, the performance profile appears in the Performance tool, and the rest of the DevTools tabs continue to show information related to the current webpage.
Import a trace in the Memory tool
To import a trace in the Memory tool:
1. Open the Memory tool.
2. Click the Load profile button:


4. Open the file.
If the file is an enhanced trace, a new DevTools window appears, showing the memory information and the extra runtime information that was recorded displayed in the Sources, Console, and Elements tools.
If the file is a normal trace, the memory information appears in the Memory tool, and the rest of the DevTools tabs continue to show information related to the current webpage.
Share feedback about enhanced traces
Enhanced traces is an experimental feature which hopefully makes it easier to collaborate on resolving performance and memory issues by seeing unminified code.
The Microsoft Edge DevTools team welcomes any feedback you may have about enhanced traces. If you've tried this new feature, please feel free to report any problems or ideas about it on our GitHub repository
Feedback
Was this page helpful? 
About the list of tools
Article • 07/12/2024
DevTools provides more than 30 tools:
Two icons on the Activity Bar, for the Inspect tool () and Device Emulation ().
Three permanent tool tabs on the Activity Bar, for the Elements, Console, and Sources tools.

The following features are additional ways to access the tools:
 The Quick View panel is an additional toolbar and area to hold tools, below or to the right of the Activity Bar panel.
The Command Menu is a way to directly use features of tools.
The Settings pages can turn on additional features of tools.
Overview of all tools
Microsoft Edge DevTools includes the following tools.
ﾉ Expand table

ToolPurposeArticle3D View toolExplore the web page translated into a 3D perspective. Debug your webpage by navigating through the DOM or z-index stacking context.Navigate webpage
layers, z-index, and
DOM using the 3D
View toolAnimations toolInspect and modify CSS animation effects by using the Animation Inspector in the Animations tool.Inspect and modify CSS animation effectsApplication toolUse the Application tool to manage storage for web app pages, including manifest, service workers, local storage, cookies, cache storage, and background services.The Application tool, to manage storageChanges toolTracks any changes you've made to CSS or JavaScript in DevTools. Shows you what changes to make to your actual source files after you use DevTools to modify your webpage files sent from the server.Track changes to files using the Changes toolConsole toolAn intelligent, rich command line within DevTools. A great companion tool to use with others tools. Provides a powerful way to script functionality, inspect the current webpage, and manipulate the current webpage using JavaScript.Console overviewCoverage toolHelp you find unused JavaScript and CSS code, to speed up your page load and save your mobile users cellular data.Find unused JavaScript and CSS code with the
Coverage toolCrash analyzer toolAnalyze crashes of your web app. You can input a JavaScript production stack trace, such as for nonfatal JavaScript exceptions, and then have your source maps applied to the stack trace so that you can debug faster.Crash analyzer toolCSS Overview toolHelp you better understand your page's CSS and identify potential improvements.CSS Overview toolDetached
Elements toolTo increase the performance of your webpage, find detached elements that the browser can't garbagecollect, and then identify the JavaScript object that's still referencing the detached element. Then change your JavaScript to release the element, to reduce the number of detached elements on your page, increasing page performance and responsiveness.Debug DOM memory leaks by using the Detached Elements toolDeveloper
ResourcesShows resource URLs for the webpage.Developer Resources tool
ToolPurposeArticleDevice
EmulationUse the Device Emulation tool, also called Device Simulation Mode or Device Mode, to approximate how your page looks and responds on a mobile device.Emulate mobile devices
(Device Emulation)Elements toolInspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser. Debug your HTML using the DOM tree, and inspect and work on the CSS for your webpage.Inspect, edit, and
debug HTML and CSS with the Elements toolInspect toolUse the Inspect tool to see information about an item within a rendered webpage. When the Inspect tool is active, you hover over items in the webpage, and DevTools adds an information overlay and grid highlighting on the webpage.Analyze pages using the Inspect toolIssues toolThe Issues tool automatically analyzes the current webpage, reports issues grouped by type, and provides documentation to help explain and resolve the issues.Find and fix problems using the Issues toolLighthouse toolUse the Lighthouse tool to identify and fix common problems that affect your site's performance, accessibility, and user experience.Lighthouse toolMedia toolUse this tool to view information and debug the media players per browser tab.View and debug media players informationMemory toolFind memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.Fix memory problemsMemory
Inspector toolInspect JavaScript ArrayBuffer with the Memory Inspector.Inspect a JavaScript
ArrayBuffer with the
Memory Inspector toolNetwork toolUse the Network tool to make sure that resources are being downloaded or uploaded as expected. Inspect the properties of an individual resource, such as the HTTP headers, content, or size.Inspect network activityNetwork conditions toolUse the Network conditions tool to disable the browser cache, set network throttling, set the user agent string, and set Content-Encodings such as deflate, gzip, and br.Network conditions toolNetwork
Console toolUse the Network Console tool to make changes to network requests (network calls) to see why they fail. Change and replay any of the network requests, and make detailed network API calls.Network Console tool
ToolPurposeArticleNetwork request blocking toolUse the Network request blocking tool to test blocking network requests to a specified URL pattern and see how a webpage behaves.Network request blocking toolPerformance toolAnalyze runtime performance, which is how your page performs when it's running, as opposed to loading.Introduction to the
Performance toolPerformance monitor toolProvides a real-time view of the runtime performance of a webpage, to determine where performance problems come from, making a website run slowly.
Finds whether problems are from high memory or CPU usage, too-frequent layout and style calculations, or too many DOM nodes and event listeners.Measure runtime performance of a page using the Performance monitor toolQuick source toolUse the Quick source tool to display or edit source files when using a tool other than the Sources tool.Display or edit source files using the Quick source toolRecorder toolUse the Recorder tool to record user flows manually, and then replay them automatically to speed up testing and performance investigations.Record and replay user flows and measure performanceRendering toolUse the Rendering tool to see what your webpage looks like with different display options or vision deficiencies.Rendering tool, to see what a webpage looks like with different display options or vision deficienciesSearch toolUse the Search tool to find specific source files for a webpage, including HTML, CSS, JavaScript, and image files.Find source files for a page using the Search
toolSecurity toolInspects the security of a page.Understand security issues using the Security toolSensors toolSimulates different device orientations.Simulate device orientation with the
Sensors toolSource Maps
Monitor toolUse the Source Maps Monitor tool to monitor your source maps.Source Maps Monitor toolSources toolUse the Sources tool to view, modify, and debug front-end JavaScript code, and inspect and edit the HTML and CSS files that make up the current webpage.Sources tool overviewToolPurposeArticleWebAudio
toolUse the WebAudio tool to monitor WebAudio traffic.
The WebAudio tool uses the WebAudio API.WebAudio toolWebAuthn
toolUse the WebAuthn tool to create and interact with software-based virtual authenticators.Emulate authenticators and debug WebAuthnWelcome toolThe Welcome tool opens when you first open
DevTools. It displays links to developer docs, latest features, Release Notes, and an option to contact the Microsoft Edge DevTools team.Welcome toolExperimental tools
Microsoft Edge DevTools potentially includes additional tools, if you select the experiment's check box in DevTools Settings > Experiments. For example:
ﾉ Expand table
ToolPurposeArticleProtocol monitor toolDisplays the DevTools protocol messages that are sent and received by DevTools, to debug the inspected page.Protocol Monitor in
Experimental features.The More Tools menus
The More tools (+) menu in the Activity Bar and in the Quick View toolbar is dynamic: it omits any tab tools that are open on that toolbar.
Activity Bar tools vs. Quick View tools
Activity Bar tools are tools that open in the Activity Bar (the upper pane) by default. Quick View tools are tools that open in the Quick View panel (the lower pane) by default. To show or hide the Quick View panel: when focus is on DevTools, press Esc.
The Command Menu first lists the Activity Bar tools (indicated by the Panel label), and then the Quick View tools:

To move a tool to the other toolbar, right-click the tool's tab and then select Move to bottom Quick View, Move to side Quick View, Move to top Activity Bar, or Move to left Activity Bar:

To open the Command Menu, press Ctrl+Shift+P (Windows, Linux) or
Command+Shift+P (macOS). Or, click the Customize and control DevTools () button and then select Run command.
Closing tool tabs
To close a tool tab that's on a toolbar, right-click the tab, and then select Remove from Activity Bar or Remove from Quick View:

The Elements, Console, and Sources tools are permanent tabs and cannot be closed or moved from the Activity Bar to the Quick View panel. You can drag their tabs to reorder them in the Activity Bar.
The Console tool is also a permanent tab on the Quick View toolbar. In contrast, the Issues tool on the Quick View toolbar can be removed.
Restoring the default tool tabs
To restore all of the default tool tabs in the Activity Bar and Quick View:
1. In DevTools, select Customize and control DevTools () > Settings () > Preferences.
2. Click the Restore defaults and refresh button. DevTools restarts, and the default tabs appear in both toolbars.
See also
 Overview of DevTools - Similar to the present article, but broader coverage, with a top-level introduction to DevTools.

Feedback
Was this page helpful?  Yes  No

Analyze pages using the Inspect tool
Article • 12/07/2023
Use the Inspect tool to see information about an item within a rendered webpage.
 When the Inspect tool is active, you hover over items in the webpage, and DevTools adds an information overlay information and grid highlighting on the webpage.
 When you click an item in the webpage, the DOM tree in the Elements tool is automatically updated to show the DOM element that corresponds to the clicked item in the rendered webpage, and its CSS styling in the Styles tab.
Activating the Inspect tool
To try out the Inspect tool:
1. Open the Inspect Demo page in a new window or tab.
2. Right-click anywhere in the demo webpage and then select Inspect, to open DevTools.
3. In the upper left corner of DevTools, click the Inspect tool () button. Or, when DevTools has focus, press Ctrl+Shift+C (Windows, Linux) or Command+Shift+C (macOS).

The button icon turns blue (), indicating that the Inspect tool is active.
4. In the rendered webpage, hover over items and watch the information overlay and grid highlighting.
5. Click an item in the rendered webpage.
The DOM tree in the Elements tool is automatically updated to show the DOM element that corresponds to the clicked item in the rendered webpage, and its CSS styling in the Styles tab. Clicking in the webpage also turns off Inspect mode in the webpage.
Getting element information from the Inspect overlay
When the Inspect tool is active, hovering over any element on the rendered webpage displays the Inspect overlay. The Inspect overlay displays general and accessibility information about that element.

When you hover over a page element on the rendered page, the DOM tree automatically expands to highlight the element that you are hovering over.
The Inspect overlay shows the following information about the element:
The name of the element.
The element's dimensions, in pixels.
The element's color, as a hexadecimal value and a color swatch.
The element's font settings.
The element's margin and padding, in pixels.
Which information is shown depends on the type of element and the styles applied to it. If the element is positioned using CSS grid or CSS flexbox, a different icon appears next to the element's name in the Inspect overlay:

The Accessibility section of the Inspect overlay displays information about:
Text-color contrast.
The name and the role of the element that's reported to assistive technology.
Whether the element is keyboard focusable.
For example, in the Inspect Demo page, for the Bad Contrast button, the Inspect overlay has a warning icon next to the contrast value of 1.77. The Inspect overlay also shows that the button isn't focusable via keyboard. The button can't be navigated to via keyboard, because the button is implemented as a <div> element with a class of button, instead of being implemented as a <button> element.

Inspecting non-accessible elements
To inspect elements that have the CSS property of pointer-events: none, press Shift while hovering over the element. There's also a color overlay on page layout regions, indicating that you are in an advanced selection mode.

Selecting the element and terminating Inspect mode
When you click an element in the rendered page:

Persisting the Inspect tool's tooltip and grid color overlay
When using the Inspect tool and moving around the rendered webpage, you can keep the current Inspect overlay displayed. Press and hold Ctrl+Alt (Windows, Linux) or Ctrl+Option (macOS) while you move around in the rendered webpage. The existing tooltip and grid color overlay for the Inspect tool remains displayed while you hover over different parts of the rendered webpage.
Temporarily hiding the Inspect element tooltip
To hide the Inspect tool's overlay while you move the mouse pointer over the rendered webpage, press and hold Ctrl.
See also
 Use the Inspect tool to detect accessibility issues by hovering over the webpage

Emulate mobile devices (Device Emulation)
Article • 12/07/2023
Use the Device Emulation tool, sometimes called Device Mode, to approximate how your page looks and behaves on a mobile device.
Device Emulation is a first-order approximation of the look and feel of your page on a mobile device. Device Emulation doesn't actually run your code on a mobile device.
Instead, you simulate the mobile user experience from your laptop or desktop.
Some aspects of mobile devices aren't emulated in DevTools. For example, the architecture of mobile CPUs is different than the architecture of laptop or desktop CPUs.
For the most robust testing, run your page on a mobile device.
Use Remote Debugging to interact with the code of a page from your machine while your page actually runs on a mobile device. You can view, change, debug, profile, or all four while you interact with the code. Your machine can be a notebook or desktop computer.
Detailed contents:
Simulate a mobile viewport
Responsive Viewport Mode
Show media queries
Set the device type
Mobile Device Viewport Mode
Rotate the viewport to landscape orientation
Show device frame
Add a custom mobile device
Show rulers
Zoom the viewport
Throttle the network and CPU
Throttle the CPU only
Throttle the network only
Emulate sensors
Override geolocation
Set orientation
Set the user agent string
Set user-agent client hints
Simulate a mobile viewport
To open the UI that enables you to simulate a mobile viewport:
1. Open DevTools. For example, right-click in a webpage and then select Inspect.
2. In the Activity Bar, click the Toggle device emulation () button. Or, in DevTools, select Customize and control DevTools (...) > Device Emulation:
The webpage is rendered within the Device Emulation pane. The Device Toolbar opens in Responsive Viewport Mode.
Responsive Viewport Mode
To quickly test the look and feel of your page across multiple screen sizes, drag the handles to resize the viewport to your required dimensions. You can enter any numeric values in the width and height boxes. If you select a size larger than available in the browser window, the viewport will be automatically scaled to accommodate for the larger viewport.
In the following example, the viewport width is set to 400 and the height is set to 736:

If you need more space on your screen, you can change where DevTools is docked in the browser window. See Change DevTools placement (Undock, Dock to bottom, Dock to left).
Show media queries
If you have defined media queries on your page, jump to the viewport dimensions where those media queries take effect by showing media query breakpoints above your viewport. Select More options () > Show media queries.
A CSS media query defines a breakpoint, which is a browser viewport width. A webpage can define a responsive layout for each breakpoint (viewport width) that the webpage's CSS defines.
Media queries can be used to change the layout of a page when the viewport of the device that the webpage is viewed on is over or under a certain width. Media queries allow you to write code to use for page layout either when the screen width is under a certain size, or over a certain size, or within a mininum and maximum size.
To show media query breakpoints above the viewport:
1. Click the More options () button, and then select Show media queries:
If max-width or min-width breakpoints are defined by the webpage, DevTools displays additional bars above the viewport:

2. To change the width of the viewport so that the media query for that breakpoint is used, click a breakpoint rectangle in the breakpoints bar. The viewport's width changes so that the breakpoint gets triggered, and the webpage layout is updated.
3. To go to the corresponding @media declaration in the code for the webpage, rightclick between breakpoint vertical bars, and then select Reveal in source code.
DevTools opens the Sources tool and displays the corresponding @media line in the Editor.
See also:
 Debug media queries in Get started viewing and changing CSS.
Set device pixel ratio
Device pixel ratio (DPR) is the ratio between physical pixels on the hardware screen and logical (CSS) pixels. In other words, DPR tells the browser how many screen pixels to use to draw a CSS pixel. Microsoft Edge uses the DPR value when drawing on HiDPI (High Dots Per Inch) displays.
To set a device pixel ratio:
1. Select More options () > Add device pixel ratio:

A DPR dropdown list is added at the top of the viewport.
2. In the DPR dropdown list, select a DPR value (1, 2, or 3). The default value is 2.
To remove the device pixel ratio:
 Select More options () > Remove device pixel ratio.
Set the device type
To simulate a mobile device or desktop device, use the Device Type list:

If the Device Type list isn't displayed, select More options > Add device type.
The Device Type list contains the following device types:
ﾉ Expand table
Device typeRendering methodCursor iconEvents triggeredMobileMobileCircletouchMobile (no touch)MobileNormalclickDesktopDesktopNormalclickDesktop (touch)DesktopCircletouchKey for columns in the above table:
ﾉ Expand table
ColumnDescriptionRendering methodWhether Microsoft Edge renders the page as a mobile or desktop viewport.Cursor iconWhat type of cursor is displayed when you hover on the page.Events triggeredWhether the page triggers touch or click events when you interact with the page.Mobile Device Viewport Mode
To simulate the dimensions of a specific mobile device, select the device from the Device list:

Rotate the viewport to landscape orientation
Test your webpage in landscape orientation.
1. To rotate the viewport to landscape orientation, select Rotate ():

The Rotate button disappears if your Device Toolbar is narrow.
See also Set orientation, below.
Show device frame
To simulate the dimensions of a specific mobile device, click More options (), and then select Show device frame to show the physical device frame around the viewport:

If a device frame isn't shown for a particular device, it means that DevTools doesn't have art for that device.
The device frame for the iPhone 6/7/8:

Add a custom mobile device
If the mobile device option that you need isn't included on the default list, you can add a custom device.
To add a custom device:
1. In DevTools, click the Toggle device emulation () button to turn on device emulation.
2. In the device dropdown list on the left, select the Edit menuitem:
3. Select the Device list > Edit:

The DevTools Settings > Devices (Emulated Devices) page opens.
4. Click the Add custom device button. The Emulated Devices page in settings adds a Device section at the top:
The device pixel ratio, user agent string, and device type fields are optional.
The device type defaults to Mobile:

5. In the Device section, in the text boxes, enter a device name, screen width, and screen height for the custom device.
6. Optionally, fill in the following fields:
 Device pixel ratio. See Set device pixel ratio, above; and Window: devicePixelRatio property, at MDN.
 User agent string. See Set the user agent string, below; and User agent, at
MDN.
 User agent type (device type). See Set the device type, above. Defaults to Mobile.
7. Click the Add button. The new device is now available in the device dropdown list in the upper left of the device emulator.
To remove a custom device:
 In DevTools > Settings > Devices (Emulated Devices), hover over the custom device name, and then click the trashcan icon.
Show rulers
If you need to measure screen dimensions, you can use rulers to measure the screen size in pixels.
To display rulers above and to the left of your viewport:

Rulers appear above and to the left of the viewport, indicating dimensions in pixels:

Zoom the viewport
To test the look and feel of your page at multiple zoom levels, use the Zoom list to zoom in or out.

Capture a screenshot
To capture a screenshot of what you currently see in the viewport, click More options () > Capture screenshot:

To capture a screenshot of the whole page including the content that isn't currently visible in the viewport, select Capture a full size screenshot from the same menu.
Throttle the network and CPU
Mobile devices often have network and CPU constraints.
To test how quickly your page loads and how it responds at different internet and CPU speeds:
 In the Throttle list, change the preset to Mid-tier mobile or Low-end mobile:

If the Throttle list is hidden, widen the Device Toolbar.
 Mid-tier mobile simulates fast 3G and throttles your CPU. It is four times slower than normal.
 Low-end mobile simulates slow 3G and throttles your CPU. It is six times slower than normal.
All of the throttling is based upon the normal capability of your laptop or desktop.
Throttle the CPU only
To throttle the CPU only, and not the network:
1. In DevTools, select the Performance tool.
2. Click the Capture settings () button in the upper right.
3. In the CPU dropdown list, select 4x slowdown or 6x slowdown:

Throttle the network only
To throttle the network only and not the CPU:
1. Select the Network tool, then select Online > Fast 3G or Slow 3G.

Or, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu, start typing 3g, and then select Enable fast 3G throttling or Enable slow 3G throttling.

You can also set network throttling from within the Performance tool:
1. Select Capture Settings () and select the Network list and change the preset to Fast 3G or Slow 3G.

Emulate sensors
Use the Sensors tab to override geolocation, simulate device orientation, force touch, and emulate idle state.
The sections below provide a quick look on how to override geolocation and set device orientation.
Override geolocation
Use the Sensors tool to override geolocation and simulate device orientation.
Override geolocation
If your page depends on geolocation information from a mobile device to render properly, provide different geolocations using the geolocation-overriding UI.
1. In the Activity Bar, click the More tools () button, and then click Sensors:

Or, open the Command Menu by selecting Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS). Type Sensors and then select Show Sensors:

2. Select the Location dropdown menu, and then select one of the preset locations:

To enter a custom location, select Other and enter the coordinates of your custom location.
To test how your page behaves when location information is unavailable, select Location unavailable.
See also:
 Override geolocation with the Sensors tool
Set orientation
If your page depends on orientation information from a mobile device to render properly, open the orientation UI.
To set the device orientation:
1. In the Activity Bar, click the More tools () button, and then click Sensors:

Or, open the Command Menu by pressing Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS). Type Sensors, and then select Show Sensors:
2. In the Orientation dropdown menu, select a preset orientation.
Or, to enter your own orientation, select Custom orientation, and enter your own

See also:
 Simulate device orientation with the Sensors tool
Set the user agent string
If your page depends on the user agent string from a mobile device to render properly, use the Network conditions tool to specify a different user agent string.
To set the user agent string:
1. Select More tools (+) > Network conditions:

Or, open the Command Menu by pressing Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).Type Network conditions, and select Show Network conditions:

2. In the User agent section of the Network conditions tool, clear the Use browser default checkbox.
3. To select from a list of predefined user agent strings, click the menu that initially reads Custom.
Or, to enter your own user agent string, enter the string in the Enter a custom user agent text box:

See also:
 Override the user agent string
Set user-agent client hints
If your site employs user-agent client hints, use the Emulated Devices tool to add devices and set user-agent client hints:
1. Right-click in a webpage and then select Inspect.
2. Select Settings > Devices. The Emulated Devices page of Settings opens.
3. Click the Add custom device button, and then expand user-agent client hints:

5. Accept the default values or change Width, Height, and Device pixel ratio as needed.
6. Set user-agent client hints as follows:
 Brand and Version, such as Edge and 92. Select + Add Brand to add multiple brand and version pairs.
Full Browser Version such as 92.0.1111.0.
Platform and Version such as Windows and 10.0.
Architecture such as x86.
Device model such as Galaxy Nexus.
You can set or change any of the user-agent client hints. There are no required values.
7. Click Add. The new device is displayed in the selected state at the top of the Emulated Devices list.
You can also set user-agent client hints in the Network tool; see Network features reference.



Feedback
Was this page helpful?  Yes  No

Emulate dual-screen and foldable devices
Article • 07/21/2023
You can emulate the following dual-screen and foldable devices in Microsoft Edge DevTools, using the Device Emulation feature of DevTools:
Surface Duo
Samsung Galaxy Fold
Emulate the devices and toggle between the following postures:

Test on foldable and dual-screen devices
When you emulate the Surface Duo in a dual-screen posture in Microsoft Edge, the seam (the space between the two screens) is drawn over your website or app.
The emulated display matches the way your website (or app) renders in the Microsoft Edge Android app while running on Surface Duo. You may have to update your website (or app) to display better along the seam. For more information about adapting your website (or app) to the seam, see How to work with the seam.
The Device Toolbar has additional features to help you test your website or app in multiple postures and orientations. Click Rotate (	) to rotate the viewport to
landscape orientation. Combine the feature with Span (	) to toggle between single-screen or folded and dual-screen or unfolded postures. Together, the features allow you to test your website or app in all four possible postures and orientations.

The Experimental Web Platform features () icon displays the state of the Experimental Web Platform features flag. If the flag is turned on, the icon is highlighted. If the flag is turned off, the icon isn't highlighted. To turn on (or off) the flag, either click the icon or go to edge://flags and toggle the flag.
Known issues
Pointer shaking or stuttering
When you use a Microsoft Remote Desktop client to connect to a remote PC and emulate the Surface Duo or Samsung Galaxy Fold, the pointer may shake or stutter.
If you run into the issue, contact the Microsoft Edge DevTools team.
Additional Resources
Here are additional resources that may help you enhance your website (or app) for dualscreen devices.
 For more information about web development on dual-screen devices, see Dualscreen web experiences.
 Install the Surface Duo emulator. The Surface Duo emulator is different from the emulator in Microsoft Edge, runs Android, and integrates with Android Studio.
See Get the Surface Duo SDK.

Feedback
Was this page helpful? 
Emulate and test other browsers
Article • 07/18/2024
To make sure your website works for all your users, test your website on other browsers and devices. Not all of your users will be using the browser and device that you used when developing. We encourage you to check out solutions for emulation provided by other browsers, in addition to using the Device Emulation tool in Microsoft Edge DevTools.
Summary
There are several different levels of testing that you can do to test your website under different conditions:
 Browser emulators help you to quickly test how your website looks and behaves at different screen sizes and resolutions, with touch event emulation, and by overriding the User-Agent string that the browser sends. You use browser emulators from the browser that you're developing on. See Browser emulators, below.
 Device emulators and simulators enable you to run other devices from your development machine and test your website as if you were using these other devices. See Device emulators and simulators, below.
 Cloud-based emulators enable you to run automated tests for your website across different platforms. See Cloud-based emulators and simulators, below.
Browser emulators
Browser emulators are great for testing the way your website looks and behaves at different screen sizes and resolutions, or when touch events are enabled, or when the User-Agent string is set to another browser's User-Agent string.
You use browser emulators from the browser you're developing on. For example, in Microsoft Edge, you can use the Device Emulation tool in DevTools to get an approximation of how your website looks and behaves on different devices. For more information on how to use the Device Emulation tool in Microsoft Edge DevTools, see Emulate mobile devices (Device Emulation).
Browser emulators don't emulate differences in web API support or CSS support. For example, the Device Emulation tool in Microsoft Edge doesn't emulate how the different web APIs or CSS features that your site might be using are supported in Firefox or Safari. To be certain everything behaves as expected, test your site on browsers running on real devices.
Here are some browser emulators you can use to test your website on other browsers:
Firefox Responsive Design Mode.
Chrome Device Mode.
Safari Responsive Design Mode.
Device emulators and simulators
Device simulators and emulators simulate the entire device, rather than just simulating the browser environment. Each simulator is useful to test aspects that require integration with the particular operating system, such as form input by using mobile device keyboards.
You install device emulators and simulators on your development machine, so that you can continue to test your website on the same machine on which you're developing, while simulating the experience of using a different device.
Android emulator
At the moment, there is no way to install Microsoft Edge on an Android emulator.
However, you can use the Android Browser, the Chromium Content Shell, and Firefox for
Android, which are covered later in this article. Chromium Content Shell runs the same Chromium rendering engine as Microsoft Edge, but comes without browser-specific features.
To use the Android emulator:
1. Download the Android emulator, which is packaged as part of the Android SDK, by downloading Android Studio.
2. Set up a virtual device, by following the steps in Create and manage virtual devices.
3. Start the emulator, by following the steps in Run apps on the Android Emulator.
4. After your emulator is booted, select the Browser icon, and test your website on the old Stock Browser for Android.
Chromium content shell on Android
To install the Chromium Content Shell for Android, keep your emulator running and run the following command:
shellgit clone https://github.com/PaulKinlan/chromium-android-installer.git chmod u+x ./chromium-android-installer/*.sh
./chromium-android-installer/install-chromeandroid.shNow you can test your website with the Chromium Content Shell.
Firefox on Android
Similar to the Chromium Content Shell, you can get an APK to install Firefox onto the emulator.
Download the correct .apk file.
To install the file onto an open emulator or connected Android device, run the following command:
shelladb install <path_to_APK>/fennec-XX.X.XX.android-arm.apkiOS simulator
The iOS simulator for Mac OS X comes with Xcode, which you install from the App Store.
When you are done, learn how to work with the simulator through Apple Developer documentation.
To avoid having to open Xcode every time you want to use the iOS Simulator, open the iOS Simulator, right-click the iOS Simulator icon in your dock, and then select Keep in Dock. Now you can just click the icon whenever you need it.
Virtual machines
To test your website on other operating systems, you can run virtual machines on your development device. For example, Hyper-V is a virtualization tool that lets you run various versions of Windows and Linux. To learn more, see Introduction to Hyper-V on Windows 10.
For other virtual machines, see Virtual machines in Strategies for carrying out testing at
MDN.
Cloud-based emulators and simulators
Cloud-based emulators and simulators are commercial solutions to test your website on different devices and browsers without installing anything on your development machine. They are useful when you don't have access to real devices or when you can't use local emulators. Cloud-based solutions are also useful for automating tests across different platforms.
See Emulators in Strategies for carrying out testing at MDN.
See also
Emulate mobile devices (Device Emulation) Introduction to Hyper-V on Windows 10
Responsive design:
Responsive Design Mode - Firefox.
Simulate mobile devices with device mode - Chrome.
Responsive Design Mode - Safari.
Android:
Android Studio
Create and manage virtual devices - to set up a virtual device.
Run apps on the Android Emulator - to start the emulator.
Choose which Firefox Browser to download in your language: Firefox Android Beta - to download the correct .apk file.
Apple:
Xcode
Simulator Help
MDN:
Strategies for carrying out testing at MDN.
Emulators
Virtual machines


Feedback
Was this page helpful? 

Inspect, edit, and debug HTML and CSS with the Elements tool
Article • 06/19/2023
Use the Elements tool to inspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser.
Debug your HTML using the DOM tree, and inspect and work on the CSS for your webpage.

See also
CSS features reference
Get started viewing and changing CSS
Inspect CSS Grid
Edit CSS font styles and settings in the Styles pane
Style editing for CSS-in-JS frameworks
Get started viewing and changing the DOM

CSS features reference
Article • 08/29/2023
Discover new workflows in the following comprehensive reference of Microsoft Edge DevTools features related to viewing and changing CSS.
To learn the basics, see Get started viewing and changing CSS.
Select an element
The Elements tool in DevTools lets you view or change the CSS of one element at a time. The selected element is highlighted in the DOM Tree. The styles of the element are shown in the Styles pane. For a tutorial, see View the CSS for an element.
In the following figure, the h1 element that is highlighted in the DOM Tree is the selected element. On the right, the styles of the element are shown in the Styles pane. On the left, the element is highlighted in the viewport, but only because the mouse is currently hovering over it in the DOM Tree:

There are many ways to select an element:
 In a rendered webpage, right-click a page element, and then click Inspect.
 In DevTools, click Select an element () or press Ctrl+Shift+C (Windows, Linux) or Command+Shift+C (macOS), and then click the element in the viewport.
 In DevTools, click the element in the DOM Tree.
 In DevTools, run a query such as document.querySelector('p') in the Console, right-click the result, and then select Reveal in Elements panel.
View the external stylesheet where a rule is defined
In the Styles pane, click the link next to a CSS rule to open the external stylesheet that defines the rule. The stylesheet opens in the Editor pane of the Sources tool.
If the stylesheet is minified, click the Format () button, at the bottom of the Editor pane. For more information, see Reformat a minified JavaScript file with pretty-print.

View only the CSS that is actually applied to an element
The Styles pane shows you all of the rules that apply to an element, including declarations that have been overridden. When you aren't interested in overridden declarations, use the Computed pane to view only the CSS that is actually being applied to an element.
1. Select an element.
2. Go to the Computed pane in the Elements tool.
On a wide DevTools window, the Computed pane doesn't exist. The contents of the Computed pane are shown on the Styles pane.
Inherited properties are opaque.
3. To display all inherited values, select the Show All checkbox.
In the following figure, the Computed pane shows the CSS properties being applied to the currently selected h1 element:
View CSS properties in alphabetical order
Use the Computed pane. See View only the CSS that is actually applied to an element.
View inherited CSS properties
Check the Show All checkbox in the Computed pane. See View only the CSS that is actually applied to an element.
View an element's box model
To view the box model of an element, go to the Styles pane. If your DevTools window is narrow, the Box Model diagram is at the bottom of the panel.
To change a value, double-click it.
In the following figure, the Box Model diagram in the Styles pane shows the box model

Search and filter the CSS of an element
Use the Filter text box on the Styles and Computed panes to search for specific CSS properties or values.
To also search inherited properties in the Computed pane, check the Show All checkbox.
In the following figure, the Styles pane is filtered to only show rules that include the search query color.

In the following figure, the Computed pane is filtered to only show declarations that

Toggle a pseudo-class
To toggle a pseudo-class, such as :active, :focus, :hover, or :visited:
1. Select an element.
2. On the Elements tool, go to the Styles pane.
3. Click :hov.
4. Select the pseudo-class that you want to enable.
The following figure shows toggling the :hover pseudo-class. In the viewport, the background-color: cornflowerblue declaration is applied to the element, even
though the element isn't actually being hovered over.

For an interactive tutorial, see Add a pseudo-state to a class.
View a page in print mode
To view a page in print mode:
1. Open the Command Menu.
2. Start typing rendering, and then select Show Rendering.
3. Click the Emulate CSS Media dropdown list, and then select print.
View used and unused CSS with the Coverage tool
The Coverage tool shows you what CSS a page actually uses.
1. Open the Command Menu by pressing Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS), while DevTools has focus.
2. Start typing coverage, and then select Show Coverage:

The Coverage tool appears:

3. Click Start instrumenting coverage and refresh the page (). The page refreshes and the Coverage tool provides an overview of how much CSS (and JavaScript) is used from each file that the browser loads. Green represents used CSS. Red represents unused CSS.
An overview of how much CSS (and JavaScript) is used and unused:

4. To display a line-by-line breakdown of what CSS is used, click a CSS file.
In the following figure, lines 145 to 147 and 149 to 151 of b66bc881.site-ltr.css are unused, whereas lines 163 to 166 are used:

Force print preview mode
See Force DevTools into Print Preview mode.
Two ways to add a CSS declaration to an element
The order of declarations affects how an element is styled. You can add declarations either by adding an inline declaration, or by adding a declaration to a style rule. These two approaches are described in the following sections.
Adding an inline CSS declaration to an element
Adding a inline declaration is equivalent to adding a style attribute to the HTML of an element. For most scenarios, you probably want to use inline declarations.
Inline declarations have higher specificity than external declarations, so using inline declarations ensures that the changes take effect in your specific, expected element. For more information about specificity, see Selector Types.
To add an inline declaration:
1. Select an element.
2. In the Styles pane, click between the brackets of the element.style section. The cursor focuses, allowing you to enter text.
3. Enter a property name and press Enter.
4. Enter a valid value for that property and press Enter. In the DOM Tree, a style attribute has been added to the element.
Alternatively, enter the value in the property field, and DevTools will then suggest a list of matching property: value pairs to select from. For example, if you enter bold in the property field, DevTools suggests font-weight: bold and font-weight: bolder as the possible rules. Press Enter to apply the rule.
In the following figure, the margin-top and background-color properties have been applied to the selected element. In the DOM Tree, the declarations are reflected in the element's style attribute.

Adding a CSS declaration to an existing style rule
If you're debugging an element's styles and you need to specifically test what happens when a declaration is defined in different places, add a declaration to an existing style rule.
To add a declaration to an existing style rule:
1. Select an element.
2. In the Styles pane, click between the brackets of the style rule to which you want to add the declaration. The cursor focuses, allowing you to enter text.
3. Enter a property name and press Enter.
4. Enter a valid value for that property and press Enter.

Change a declaration name or value
To change the name of a CSS declaration, double-click the declaration's name.
To change the value of a CSS declaration, double-click the declaration's value. The following screenshot shows selecting a value from a list:

To change a numerical value, type in the value, or use the arrow keys, per the next section.
Increment numerical declaration values
To change a numerical value of a CSS declaration, type in the value, or use the arrow keys to increment the value by a specific amount:
ﾉ Expand table
Keyboard shortcutIncrements byAlt+Up Arrow (Windows, Linux) or Option+Up Arrow
(macOS)0.1Up Arrow1 (or 0.1, if the current value is between -1 and 1)Shift+Up Arrow10Shift+Page Up (Windows, Linux) or Shift+Command+Up
Arrow (macOS)100To decrement, press the Down Arrow (or Page Down) key instead of the Up Arrow (or Page Up) key.
Add a class to an element
To add a class to an element:
1. Select the element in the DOM Tree.
2. Click .cls.
3. Enter the name of the class in the Add new class text box.
4. Press Enter.

Toggle a class
To enable or disable a class on an element:
1. Select the element in the DOM Tree.
2. Open the Element Classes pane. See Add a class to an element. Below the Add New Class text boxes are all of the classes that are being applied to this element.
3. Toggle the checkbox next to the class that you want to enable or disable.
Add a style rule
To add a new style rule:
1. Select an element.
2. Click New Style Rule (). DevTools inserts a new rule beneath the element.style rule.
In the following figure, DevTools adds the h1.devsite-page-title style rule after you click New Style Rule.

Select a stylesheet to add a rule to
By default, when adding a style rule, DevTools creates a new stylesheet named inspector-stylesheet in the document and then adds the new style rule in this
stylesheet.
To instead add the rule in an existing stylesheet:
 Click and hold New Style Rule () and then select a stylesheet from the list to add the style rule to.

Add a style rule to a specific location
By default, adding a style rule by clicking on New Style Rule inserts the new rule beneath the element.style rule in the inspector-stylesheet stylesheet.
To add a style rule in a specific location of the Styles pane instead:
1. Hover on the style rule that is directly above where you want to add your new style rule.
2. Click Insert Style Rule Below ().

Toggle a declaration
To toggle a single declaration on or off:
1. Select an element.
2. In the Styles pane, hover on the rule that defines the declaration. A checkbox appears next to each declaration.
3. Select or clear the checkbox next to the declaration. When you clear a declaration, DevTools crosses it out, to indicate that it is no longer active.
In the following figure, the margin-top property for the currently selected element has been toggled off.

Change colors with the Color Picker
The Color Picker provides a user interface for changing color and background-color declarations.
To open the Color Picker:
1. Select an element.
2. In the Styles pane, find the color, background-color, or similar declaration that you want to change. To the left of the color, background-color, or similar value, there is a small square, which is a preview of the color.
In the following figure, the small square to the left of rgba(0, 0, 0, 0.7) is a preview of that color.

3. Click the preview to open the Color Picker.

The following figure and list describes of each of the UI elements of the Color Picker.

ﾉ Expand table
CalloutComponentDescription1Shades2EyedropperSample a color off the page with the Eyedropper3Copy To
ClipboardCopy the Display Value to your clipboard.4Display ValueThe RGBA, HSLA, or Hex representation of the color.5Color PaletteClick a square to change the color.6Hue7Opacity8Display Value
SwitcherToggle between the RGBA, HSLA, and Hex representations of the current color.9Color Palette
SwitcherToggle between the Material Design palette, a custom palette, or a page colors palette. DevTools generates the page color palette based on the colors that it finds in your stylesheets.Sample a color off the page with the Eyedropper
To change the selected color to some other color on the page:
1. Click the Eyedropper icon (). Your cursor changes to a magnifying glass.
2. Hover on the pixel that has the color you want to sample, anywhere on your screen.
3. Click to confirm.
In the following figure, the Color Picker shows a current color value of rgba(0,0,0,0.7), which is close to black. The specific color changes to the version
of black that is currently highlighted in the viewport after you clicked it.

See also:
 Test text-color contrast using the Color Picker
Change angle value with the Angle Clock
The Angle Clock provides a user interface for changing the angle amounts in CSS property values.
To open the Angle Clock:
1. Select an element which includes an angle declaration.
2. In the Styles pane, find the transform or background declaration that you want to change. Click the Angle Preview box next to the angle value.
In the following figure, the small clock to the left of 100deg is a preview of the angle.
3. Click the preview to open the Angle Clock:

4. Change the angle value by clicking on the Angle Clock circle, or scroll your mouse to increase or decrease the angle value by 1.
There are more keyboard shortcuts to change the angle value. Find out more in the Styles pane keyboard shortcuts.
Change box and text shadows with the Shadow Editor
Use the Shadow Editor to change the value of the box-shadow or text-shadow CSS property on an HTML element:
1. Select an element with a box-shadow or text-shadow declaration.
For example, open the 1DIV demo page in a new tab or window, right-click the page and select Inspect to open DevTools, and then in the Elements tool, select the <div class="demos"> element.
2. In the Styles pane, in the .demos CSS rule, find the box-shadow declaration, and then click its Open shadow editor (	) button.
The Shadow Editor opens:

3. Change the shadow properties, as follows:
ﾉ Expand table
PropertyHow to changeTypeSelect Outset or Inset. Only for box-shadow.X offsetSpecify a value in the text box, or drag the blue dot.Y offsetSpecify a value in the text box, or drag the blue dot.BlurSpecify a value in the text box, or drag the slider.SpreadSpecify a value in the text box, or drag the slider. Only for box-shadow.The changes are applied to the element in the rendered webpage in real time:

Edit animation and transition timings with the Easing Editor
Use the Easing Editor to change the value of the animation-timing-function or transition-timing-function property on an HTML element:
1. Select an element that has a CSS animation or transition applied.
For example, open the animated property demo page	 in a new tab or window, right-click the page and select Inspect to open DevTools, and then in the Elements tool, press Ctrl+F and find "spinner", and then select the <div class="spinner"> element.
The red and green boxes on this demo page are two different CSS animations.
Both animations run with CSS by using the animation CSS property, and define an ease-in-out timing function.
2. In the Styles pane, find the animation declaration in the .bad .spinner CSS rule, and click the Open cubic bezier editor (	) button.
The Easing Editor opens:

3. Change the properties of the animation timing function:
Choose one of the pre-defined timing functions from the list.
Create your own timing function by dragging the cubic-bezier curve handles.
The changes are applied to the element in the rendered webpage in real time:

Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	 and is authored by Kayce Basques.
              This work is licensed under a Creative Commons Attribution 4.0 International License.

Feedback
Was this page helpful?  Yes  No

Get started viewing and changing CSS
Article • 12/07/2023
To learn the basics of using DevTools to view and change the CSS for a page, follow the interactive tutorial sections in this article.
View the CSS for an element
1. Open the CSS Examples demo page in a new window or tab. (To open a link in a new window or tab, right-click the link. Or, press and hold Ctrl (for Windows, Linux) or Command (for macOS) and then click the link.)
2. Right-click the Inspect Me! text, and then select Inspect.
In the DOM Tree panel under the Elements tool, the Inspect Me! element is highlighted:

it.
4. On the page view, enter the data-message value that you copied in the Value of data-message text box.
5. Right-click the Inspect Me! text, and then select Inspect.
6. In DevTools, on the Elements tool, select the Styles panel. The Inspect Me! element is highlighted in the Styles panel.
Add a CSS declaration to an element
Use the Styles panel when you want to change or add CSS declarations to an element.
1. First, we recommend doing the preceding View the CSS for an element tutorial.
2. Open the CSS Examples	 demo page in a new window or tab.
3. Right-click the Add A Background Color To Me! text, and then select Inspect.
4. Click element.style near the top of the Styles panel.
5. Type background-color or select it from the dropdown list and then press Enter.
6. Type honeydew or select it from the dropdown list of colors, and then press Enter.
After you pick a color, an inline style declaration that's applied to the element is displayed in the DOM Tree.

Add a CSS class to an element
To display how an element looks when a CSS class is applied to or removed from an element, see the Styles panel.
1. First, we recommend doing the preceding View the CSS for an element tutorial.
2. Open the CSS Examples	 demo page in a new window or tab.
3. Right-click the Add A Class To Me! text, and then select Inspect.
4. Click the Element Classes (.cls) button. DevTools shows a text box where you can add CSS classes to the page element that you're inspecting.
5. Type color_me in the Add new class text box, and then press Enter. A checkbox appears below the Add new class text box, where you can toggle the class on and off. If the Add A Class To Me! element has any other classes applied to it, you can also toggle each class from here.
The color_me class is applied to the element using the .cls section of the Styles panel:

Add a pseudostate to a class
Use the Styles panel to permanently apply a CSS pseudostate to an element. DevTools supports :active, :focus, :hover, and :visited.
1. First, we recommend doing the preceding View the CSS for an element tutorial.
2. Open the CSS Examples	 demo page in a new window or tab.
3. Hover over the Hover Over Me! text. The background color changes.
4. Right-click the Hover Over Me! text, and then select Inspect.
5. In the Styles panel, click the Toggle Element State (:hov) button.
6. Select the :hover checkbox. The background color changes like it did in the first step, even though you aren't actually hovering over the element.
The next screenshot shows the result of toggling the :hover pseudostate on an element.

Change the dimensions of an element
Use the Box Model interactive diagram in the Styles panel to change the width, height, padding, margin, or border length of an element.
1. First, we recommend doing the preceding View the CSS for an element tutorial.
2. Open the CSS Examples	 demo page in a new window or tab.
3. Right-click the Change My Margin! text, and then select Inspect.
4. In the Box Model diagram in the Styles panel, hover over padding. The element's padding is highlighted in the viewport.
Depending on the size of your DevTools window, you may need to scroll to the bottom of the Styles panel to display the Box Model.
5. Double-click the left margin in the Box Model, which currently has a value of -.
The - means that the element doesn't have a value for margin-left.
6. Type 100px and press Enter. The Box Model defaults to pixels, but it also accepts other values, such as 25%, or 10vw.
Hovering over the element's padding:

Changing the element's left margin:

Debug media queries
CSS media queries are a way to make your website react to changes in the configuration settings for each user. The most common use case is to give your page a different CSS layout depending on the dimensions of the viewport.
Using separate layouts allows for a one-column layout for mobile devices and multicolumn layouts when there's more screen real estate available.
To debug or test the media queries that you defined in your CSS:
1. Open the CSS Examples demo page in a new window or tab.
2. To open DevTools, right-click in the webpage and then select Inspect.
3. Click the Toggle device emulation () button. Or, when DevTools has focus, press Ctrl+Shift+M (Windows, Linux) or Command+Shift+M (macOS).
The device toolbar opens in the webpage, and the webpage is now rendered within the Device Emulation pane:

4. With the device toolbar open, click the More options () button on the top-right, and then select Show media queries:

The colored bars above the webpage represent the different media queries.
5. Hover over the boundaries in the bars to display the values of the different media queries. Click each media query value to resize the web page to match.

6. To open the CSS file that contains your media queries and edit their source code, right-click one of the colored bars and then select Reveal in source code. The Sources tool appears, and the corresponding media query is highlighted in the CSS file:


 This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

Inspect CSS Grid
Article • 08/19/2024
This article walks you through identifying CSS grids on a website and debugging grid layout issues using customizable grid overlays.
This article uses the Inspect CSS Grid demo webpage.
Before you begin
CSS Grid is a powerful layout paradigm for the web. A good webpage to learn about CSS Grid and its features is CSS grid layout at MDN.
Discover CSS grids
When an HTML element in your webpage has display: grid or display: inline-grid applied to it, a grid badge is displayed next to the element in the DOM tree in the Elements tool:

Click the grid badge next to an element to display a grid overlay over that element in the rendered webpage. The overlay appears over the element, and shows the position of the grid lines and tracks:

When grids are included on a webpage, the Layout pane in the Elements tool includes a Grid section that lists the grid containers:

Use the Grid section to configure which information to display in grid overlays on the rendered webpage. The Grid section in the Layout pane contains the following subsections:
ﾉ Expand table
SubsectionPurposeOverlay display settingsConfigures which information is displayed in the grid overlay.Grid overlaysShows or hides the grid overlay for each grid container that's present on the webpage, and temporarily highlights a grid in the webpage.Overlay display settings
In the Layout pane, in the expandable Grid section, the Overlay display settings section contains the following UI.
Dropdown list
Select one of the following options from the dropdown list:
ﾉ Expand table
List itemDescriptionHide line labelsHides the labels of the lines for each grid overlay.Show line numbersDisplays the numbers of the lines for each grid overlay. Selected by default.Show line namesDisplays the names of the lines for each grid overlay when names are provided.The following sections explain the Overlay display settings dropdown list commands.
Hide line labels
In the dropdown list, select Hide line labels to hide the labels of the lines for each grid overlay:

Show line numbers
In the dropdown list, select Show line numbers to display the numbers of the lines for each grid overlay (selected by default):

By default, the positive and negative line numbers are displayed on the grid overlay. For information about negative numbers in the grid overlay, see Counting backwards in Grid layout using line-based placement at MDN.
Show line names
In the dropdown list, select Show line names to view the line names instead of numbers; this displays the names of the lines for each grid overlay when names are provided:

For more information about line names in the grid overlay, see Layout using named grid lines at MDN.
Checkboxes
The Overlay display settings section within the Grid section in the Layout pane contains the following checkboxes:
ﾉ Expand table
CheckboxDescriptionShow track sizesDisplays or hides the sizes of the tracks.Show area namesDisplays or hides the names of the area, when names are provided.CheckboxDescriptionExtend grid linesDisplays or hides the extensions of the grid dimensions along each axis. By default, grid lines are only shown inside the element with display: grid or display: inline-grid CSS set on it.The following sections explain these checkboxes.
Show track sizes
To view the track sizes of the grid, select the Show track sizes checkbox:

ﾉ Expand table
SizeDetailsauthored sizeThe size defined in stylesheet (omitted if not defined).computed sizeThe actual size on screen.In the demo, the snack-box column sizes are defined in the grid-template-columns:1fr 2fr; CSS. Therefore, the column line labels display both authored and computed sizes:
ﾉ Expand table
Track sizeAuthored sizeComputed size1fr • 48.33px1fr48.33px2fr • 96.67px2fr96.67pxThe line labels on the rows display only computed sizes, since there are no row sizes defined in the stylesheet:
ﾉ Expand table
Track sizeAuthored sizeComputed size40px 40px40px 40pxShow area names
To view the area names, select the Show area names checkbox:

In the above example, there are 3 areas in the grid: top, bottom1 and bottom2.
Extend grid lines
To extend the grid lines to the edge of the viewport along each axis, select the Extend grid lines checkbox:

Grid overlays
The Grid overlays section contains a list of grids that are present on the webpage, each with a checkbox, along with various options.
Enable overlay views of multiple grids
To display the overlay grid for multiple grids, select the checkbox next to each name of the grid:

In the above example, there are three grid overlays enabled, each grid represented with a different color in the rendered webpage: body - the gold grid overlay. div.fruit-box - the pink grid overlay. div.snack-box - the blue grid overlay.
Customize the grid overlay color
To open the color picker and customize the grid overlay color, click the box next to the name of the grid overlay:

Highlight the grid element in the webpage and DOM tree
To scroll to a grid layout in the rendered webpage and select the element that has the grid layout in the DOM tree:
 In the Grid overlays section, click the Show element in the Elements panel () button next to the element name:

This works regardless of whether the element's checkbox is selected or cleared.
See also
Demo webpages:
 Inspect CSS Grid


Feedback
Was this page helpful? 
Edit CSS font styles and settings in the Styles pane
Article • 06/14/2023

To make it easier when working with typography, a visual Font Editor is now available in the Styles pane. Using the Font Editor, you can change your font settings, and the changes are rendered immediately in the browser - all without in-depth knowledge of CSS. The Elements tool > Styles tab > Font Editor icon opens the Font Editor, which consists of two parts:
The Font Family selector.
The CSS Properties editor.
Typography on the web is an important part of the user experience. You want to ensure that fonts follow corporate brand guidelines, and that your content is displayed as expected on various devices. Text must be easy to read using size and line-height. Users can resize fonts to meet individual needs.
For situations when specific fonts aren't available on a user device, you should provide fallback font options.
CSS provides better support for typography in recent years. Dozens of different CSS units are available to define the size of text. Several CSS properties are available to control the font size, spacing, line height, and other typographical features.
Currently the Enable new font editor within the Styles Pane feature is experimental, and you need to turn it on for Microsoft Edge Developer Tools.
Any CSS in the Styles pane, either font definitions or inline styles, has a Font Editor icon.
To open the visual Font Editor, click the Font Editor icon.

The Font Editor opens on top of the Styles pane:

All fields in the visual Font Editor are populated from the values in the CSS in the Styles pane. For example, the line-height definition is set to 160% in the Styles pane, so the line height text field displays 160, and the unit dropdown list displays %. Also, the slider is automatically set to match the values of the text field.
The Font Family selector
The Font Family selector is the upper part of the visual Font Editor. To select the fonts of the CSS rule, in the CSS editor, use the Font Family selector. You can select main and fallback fonts for each CSS rule.
The Font Editor open on top of the Styles pane with the Font Family selector highlighted:

Use the Font Family dropdown list to select a font. Fonts are organized into four groups:
Computed fonts, which are the fonts available in the stylesheet in the Styles pane. System fonts, which are the fonts that are available on the current operating system.
Generic font families, such as serif or sans-serif.
Global values, such as inherit, initial, and unset.
The Font Editor open on top of the Styles pane with the Font Family selector highlighted:

After you select a font, another dropdown menu is displayed for you to select fallback fonts. You can select up to eight fallback fonts. To remove a font, click the Delete Font

The CSS Properties editor
You can change CSS font properties in the lower part of the visual Font Editor. You can change the font size, line height, font weight, and letter spacing using any of the UI controls. Your changes are applied immediately in the browser.
The Font Editor opens on top of the Styles pane, with the CSS properties highlighted:

You can also convert CSS units using the visual Font Editor. For example, you can use the tool on a CSS rule where the Font Size slider is initially set to 16 pixels. Now, use the unit dropdown list and select the value em. The 1 em displayed is equal to 16 pixels.
Changing the font size to 16 pixels:

The unit dropdown list provides all the numeric CSS units that are available. Font size, line height, font weight, and spacing all use different units. When the text boxes have focus, you can press the arrow up and arrow down keys to fine-tune your settings. To use the sliders with a keyboard, press the arrow left and arrow down keys.
The CSS Properties editor also includes preset keywords. To use the preset keywords, on the right-hand side, click the Toggle Input Type icon. The UI changes, and a dropdown list of preset keywords are displayed. To return to the UI with the slider and other UI controls, click the Toggle Input Type icon again.
Opening the preset keyword interface:



Style editing for CSS-in-JS frameworks
Article • 03/20/2023
In the Styles tab, you can copy declarations for a style rule in a way that's formatted for JavaScript and ready to paste into a JavaScript file. This includes style rules that were defined by CSS-in-JS function calls. You can also edit style rules that were initially defined by a CSS-in-JS function call.
Copying style rule declarations to paste them with JavaScript syntax
From the Styles pane, you can copy declarations for a style rule in a way that's formatted for JavaScript and ready to paste into a JavaScript file.
When using CSS-in-JS libraries, you can copy CSS declarations (a CSS property and value) so that they are automatically formatted for JavaScript. You don't have to manually edit the copied CSS to match JavaScript's syntax. You can copy a single CSS declaration or all the declarations in a style rule, and then paste them directly into a JavaScript file without having syntax issues.
To copy a style rule as JavaScript:
1. In DevTools, open the Elements tool, and then click the Styles tab.
2. Right-click a declaration in a style rule, and then select Copy declaration as JS or Copy all declarations as JS.
3. Paste the copied CSS into a JavaScript file in your text editor, such as Visual Studio Code. For example: '--more-link': 'lime'.

To learn more about viewing and changing CSS, see CSS features reference.
Editing style rules that were initially defined by a CSSOM function
The Styles pane supports editing styles that were created with the CSS Object Model (CSSOM) APIs. Many CSS-in-JS frameworks and libraries use the CSS Object Model APIs under the hood to construct styles.
You can edit styles that were added in JavaScript using the CSSStyleSheet interface, which is a way to create and distribute reusable styles when using Shadow DOM. See The CSSStyleSheet Interface in CSS Object Model (CSSOM).
Example
In this sample code, style rules are initially defined by calling a CSS Object Model
(CSSOM) function, and then the style rules are edited using the Styles pane. The
CSSStyleSheet object contains the CSSOM APIs, such as insertRule(). The h1 styles that were initially added by a CSSStyleSheet function are then editable in the Styles pane.
JavaScript//Add CSS-in-JS button function addStyle() {  const sheet = new CSSStyleSheet();   sheet.insertRule(`h1 {     background: pink;
    text-transform: uppercase;
  }`);   document.adoptedStyleSheets = [sheet];
}This sample demonstrates changing the background property of the h1 styles that are added by the CSS Object Model function insertRule(). The background color is initially set by calling a CSS Object Model function, and then can be changed from pink to lightblue by using the Styles pane.
What is CSS-in-JS?
This section is an excerpt from the blog post CSS-in-JS support in DevTools.
Here's what we mean by CSS-in-JS, and how it's different from regular CSS. The definition of CSS-in-JS is somewhat vague. In a broad sense, it's an approach for managing CSS code using JavaScript. For example, it could mean that the CSS content is defined using JavaScript and the final CSS output is generated on-the-fly by the app.
In the context of DevTools, CSS-in-JS means that the CSS content is injected into the page by the CSS Object Model APIs. Regular CSS is injected using <style> or <link> elements, and it has a static source (such as a DOM node or a network resource). In contrast, CSS-in-JS often doesn't have a static source.
A special case here is that the content of a <style> element can be updated by using the CSS Object Model API, causing the source to become out of sync with the actual CSS stylesheet.
If you use any CSS-in-JS library (such as styled-component, Emotion, or JSS), the library might inject styles using CSS Object Model APIs under the hood, depending on the mode of development and the browser.
Let's look at some examples of how you can inject a stylesheet by using the CSS Object Model API, similar to the approach used by some CSS-in-JS libraries.
JavaScript// Insert new rule to an existing CSS stylesheet const element = document.querySelector('style'); const stylesheet = element.sheet; stylesheet.replaceSync('.some { color: blue; }'); stylesheet.insertRule('.some { color: green; }');You can create a completely new stylesheet as well:
JavaScript// Create a completely new stylesheet const sheet = new CSSStyleSheet(); stylesheet.replaceSync('.some { color: blue; }'); stylesheet.insertRule('.some { color: green; }');JavaScript// Apply constructed stylesheet to the document
document.adoptedStyleSheets = [...document.adoptedStyleSheets, sheet];CSS support in DevTools
In DevTools, the most commonly used feature when dealing with CSS is the Styles pane. In the Styles pane, you can view what CSS-in-JS rules apply to a particular element. You can also edit the CSS-in-JS rules and see the changes on the page in real time.
The Styles pane supports CSS rules that you can modify by using the CSS Object Model
APIs. CSS-in-JS styles are sometimes described as constructed, to indicate that these


Feedback
Was this page helpful? 

Get started viewing and changing the
DOM
Article • 10/20/2023
To learn the basics of viewing and changing the Document Object Model (DOM) of a page using Microsoft Edge DevTools, follow these interactive tutorial sections.
To understand the difference between the DOM and HTML, see Appendix: HTML versus the DOM, below.
View DOM nodes
The DOM Tree of the Elements tool is where you do all DOM-related activities in DevTools.
Inspect a node
When you are interested in a particular DOM node, Inspect is a fast way to open DevTools and investigate that node.
1. Open the DOM Examples demo page in a new window or tab. (To open a link in a new window or tab, right-click the link. Or, press and hold Ctrl (Windows, Linux) or Command (macOS) and then click the link.)
1. In the rendered webpage, under Inspect a Node, right-click Michelangelo and then select Inspect:

highlighted in the DOM Tree:

2. Click the Inspect () icon in the top-left corner of DevTools:

in the DOM Tree.
Inspecting a node is also the first step towards viewing and changing the styles of a node. See Get started viewing and changing CSS.
Navigate the DOM Tree with a keyboard
Once you have selected a node in the DOM Tree, you can navigate the DOM Tree with your keyboard.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Navigate the DOM Tree with a Keyboard, rightclick Ringo and then select Inspect. <p>Ringo</p> is selected in the DOM Tree:

5. Press the Left Arrow key again. The parent of the <div> node is selected. In this case, it's the <section> that has the ID navigate-the-dom-tree-with-a-keyboard-1.
6. Press the Down Arrow key two times, so that you have re-selected the <div> list that you just collapsed.
It should look like this: <div>... </div>.
7. Press the Right Arrow key. The list expands.
Scroll into view
When viewing the DOM Tree, you may find yourself interested in a DOM node that isn't currently visible in the rendered webpage. For example, suppose that you scrolled to the bottom of the page, and you're interested in the <h1> node at the top of the page.
Scroll into view lets you quickly reposition the viewport so that you can see the node.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Scroll into View, right-click Magritte and then select Inspect.
3. Scroll to the bottom of the DOM Examples page.
4. The <p>Magritte</p> node should still be selected in your DOM Tree. If not, go back to Scroll into view and start over.

Your viewport scrolls back up to display the Magritte node. See Appendix: Missing options if the Scroll into view option isn't displayed.
Search for nodes
You can search the DOM Tree by string, CSS selector, or XPath selector.
1. Focus your cursor on the Elements tool, such as by clicking the Elements tab.
2. Press Ctrl+F (Windows, Linux) or Command+F (macOS). The Search bar opens at the bottom of the DOM Tree.
3. Type The Moon is a Harsh Mistress. The last sentence is highlighted in the DOM Tree:

The Search bar also supports CSS and XPath selectors.
Edit the DOM
You can edit the DOM in DevTools and view how the changes affect the page in real time.
Edit text content
To edit the text content of a node, double-click the content in the DOM Tree, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Edit Content, right-click Michelle and then select Inspect.
3. In the DOM Tree, double-click the text Michelle, between the <p> and </p> tags.
The text is highlighted to indicate that it's selected:

the DOM changes from Michelle to Leela.
Edit or add attributes
To edit an existing attribute, double-click the attribute name or value.
To add a new attribute, double-click the element for which to add an attribute, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Edit Attributes, right-click Howard and then select Inspect.
3. Double-click <p>. The text is highlighted to indicate that the node is selected:

then press Enter. The background color of the node changes to gold:

Edit node tag name
To edit the tag name of a node, double-click the tag name and then type in the new tag name.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Edit Node Tag Name, right-click Hank and then select Inspect.
3. Double-click <p>. The text p is highlighted.
4. Delete p, type button, then press Enter. The <p> node changes to a <button> node:

Edit multiple nodes, text, and attributes
To change the tag name, text content, or attributes of multiple nodes at once, you can edit part of the DOM by using the DOM tree's HTML text editor, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, right-click in the Edit Content, Tag Name, and Attributes section, and then select Inspect.
3. In the DOM Tree, right-click the <section id="edit-as-html-1"> node, and then select Edit as HTML. The HTML editor appears within the DOM tree, with a box around the section that's being edited:

4. Type the changes you want to make in the HTML editor, such as:
Adding, deleting, or editing attributes.
Adding or deleting nodes.
Editing nodes' text content or tag names.
For example, add <p>Dijon</p> after the <p>Marseille</p> line.
5. Click the DOM tree outside the HTML editor, or press Ctrl+Enter. Your edits are applied to the DOM tree and the rendered webpage, and the HTML editor closes:

Reorder DOM nodes
To reorder nodes in the DOM tree, drag the nodes, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Reorder DOM Nodes, right-click Elvis Presley and then select Inspect.

Force state
You can force nodes to remain in states including :active, :hover, :focus, :visited, and :focus-within, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Force state, hover on The Lord of the Flies. The background color becomes orange.
3. Right-click The Lord of the Flies, and then select Inspect.
4. Right-click <p class="demo--hover">The Lord of the Flies</p>, and then select Force State > :hover. If that option isn't displayed, see Appendix: Missing options, below. The background color remains orange, even though you aren't actually hovering over the node.
Hide a node
Press H to hide a node, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Hide a node, right-click The Stars My Destination and then select Inspect.
3. Press the H key. The node is hidden from the rendered webpage:

4. Press the H key again. The node is shown again.
Delete a node
Press Delete to delete a node, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Delete a Node, right-click Foundation and then select Inspect.
3. Press Delete. The node is deleted.
4. Press Ctrl+Z (Windows, Linux) or Command+Z (macOS). The last action is undone and the node reappears.
Access nodes in the Console
DevTools provides a few shortcuts for accessing DOM nodes from the Console tool, or getting JavaScript references to each one.
Reference the currently-selected node with $0
When you inspect a node, the == $0 text next to the node means that you can reference this node in the Console with the variable $0.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Reference the currently-selected node with $0, right-click The Left Hand of Darkness and then select Inspect.
3. Press the Esc key to open the Console tool in the Quick View panel.

5. Hover over the result. The node is highlighted in the viewport.
6. Click <p>Dune</p> in the DOM Tree, type $0 in the Console again, and then press Enter again. Now, $0 evaluates to <p>Dune</p>:

Store as global variable
If you need to refer back to a node many times, store it as a global variable.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Store as global variable, right-click The Big Sleep, and then select Inspect.
3. Right-click <p>The Big Sleep</p> in the DOM Tree, and then select Store as global variable. If that option isn't displayed, seeAppendix: Missing options, below.
4. Type temp1 in the Console and then press Enter. The result of the expression shows that the variable evaluates to the node:

Copy JS path
Copy the JavaScript path to a node when you need to reference it in an automated test.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Copy JS path, right-click The Brothers Karamazov, and then select Inspect.
3. Right-click <p>The Brothers Karamazov</p> in the DOM Tree, and then select Copy > Copy JS Path. A document.querySelector() expression that resolves to the node has been copied to your clipboard.
4. Press Ctrl+V (Windows, Linux) or Command+V (macOS) to paste the expression into the Console tool.
5. Press Enter to evaluate the expression. The Copy JS Path expression evaluates to the node:

Break on DOM changes
DevTools enables you to pause the JavaScript of a page when the JavaScript modifies the DOM.
Break on attribute modifications
Use attribute modification breakpoints when you want to pause the JavaScript that causes any attribute of a node to change.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Break on attribute modifications, right-click Sauerkraut and then select Inspect.
3. In the DOM Tree, right-click <p id="botm_target">Sauerkraut</p>, and then select Break On > Attribute Modifications:

See Appendix: Missing options if the option isn't displayed.
4. Click the Set Background button. This sets the style attribute of the node to background-color:thistle. DevTools pauses the page and highlights the code that
caused the attribute to change in the Sources tool:

5. Click Resume Script () to resume the JavaScript execution.
Break on node removal
If you want to pause when a particular node is removed, use node removal breakpoints.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Break on Node Removal, right-click Neuromancer and then select Inspect.
3. In the DOM Tree, right-click <p id="target">Neuromancer</p>, and then select Break On > Node Removal. See Appendix: Missing options if the option isn't displayed.
4. Click the Delete button above. DevTools pauses the page and highlights the code that caused the node to be removed.
5. Select Resume Script ().
Break on subtree modifications
After you put a subtree modification breakpoint on a node, DevTools pauses the page when any of the descendants of the node are added or removed.
1. Open the DOM Examples demo page in a new window or tab.
2. In the rendered webpage, under Break on Subtree Modifications, right-click A Fire Upon The Deep and then select Inspect.
3. In the DOM Tree, right-click <div id="ul_target">, which is the node above <p>A
Fire Upon the Deep</p>, and then select Break On > Subtree Modifications. If the Subtree Modifications command doesn't appear, see Appendix: Missing options.
4. Click Add Child. The code pauses because a <p> node was added to the list.
5. Select Resume Script ().
Next steps
That covers most of the DOM-related features in DevTools. You can discover the rest of the features by right-clicking nodes in the DOM Tree, and experimenting with the other options that were not covered in this tutorial. See also Elements tool keyboard shortcuts.
Check out Overview of DevTools to discover everything else you can do with DevTools.
Appendix: HTML versus the DOM
This section explains the difference between HTML and the DOM.
When you use a web browser to request a page, the server returns HTML code like this:
HTML<!doctype html>
<html>
    <head>
        <title>Hello, world!</title>
    </head>
    <body>
        <h1>Hello, world!</h1>
        <p>This is a hypertext document on the World Wide Web.</p>
        <script src="/script.js" async></script>
    </body>
</html>The browser then parses the HTML and creates a tree of objects based on the HTML like this:
DOMhtml     head         title     body         h1         p         scriptThis tree of objects, or nodes, representing the content of the page is called the Document Object Model (DOM). Right now the DOM tree looks the same as the HTML, but suppose that the script referenced at the bottom of the HTML runs the following code:
JavaScriptconst h1 = document.querySelector('h1'); h1.parentElement.removeChild(h1); const p = document.createElement('p');
p.textContent = 'Wildcard!'; document.body.appendChild(p);That code removes the h1 node and adds another p node to the DOM. The complete DOM now looks like this:

DOMhtml     head         title     body         p         script         pThe page's HTML is now different than its DOM. In other words, HTML represents the initial page content, and the DOM represents the current page content. When JavaScript adds, removes, or edits nodes, the DOM becomes different than the HTML.
See Introduction to the DOM to learn more.
Appendix: Missing options
Many of the instructions in this tutorial instruct you to right-click a node in the DOM Tree and then select an option from the context menu that pops up. If the specified option isn't listed in the context menu, right-click away from the node text, or click the ... button to the left of the node:

Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	 and is authored by Kayce Basques.
              This work is licensed under a Creative Commons Attribution 4.0 International License.

Feedback
Was this page helpful?  Yes  No

Console overview
Article • 07/12/2023
The Console is like an intelligent, rich command line within DevTools, and is great companion tool to use with others tools. The Console provides a powerful way to script functionality, inspect the current webpage, and manipulate the current webpage using JavaScript.
The Console tool helps with several tasks, which are covered in more detail in the following articles:
 Track down problems to find out why something isn't working in the current project. See Fix JavaScript errors that are reported in the Console.
 Get information about the web project in the browser as log messages. See Filter Console messages.
 Log information in scripts for debugging purposes. See Log messages in the Console tool.
 Try JavaScript expressions live in a REPL environment. See Run JavaScript in the Console.
 Interact with the web project in the browser using JavaScript. See Interact with the DOM using the Console.
You can open the Console tool in the top or bottom of DevTools; it's shown here in upper part, on the Activity Bar:

The Console is shown here in the lower part of DevTools (the Quick View panel), with the Elements tool open above it:

The fastest way to directly open the Console is to press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
Error reports and the Console
The Console is the default place where JavaScript and connectivity errors are reported.
For more information, see Fixing JavaScript errors that are reported in the Console.
DevTools gives detailed information about the error in the Console:

Search the web for a Console error message string
Search the web for your Console error messages, right from within DevTools. In the Console, many error messages have a Search for this message on the Web button, shown as a magnifying glass:

When you click the Search for this message on the Web button, a new tab opens in the browser and shows search results for the error message:

Inspect and filter information on the current webpage
When you open DevTools on a webpage, there may be an overwhelming amount of information in the Console. The amount of information becomes a problem when you need to identify important information. To view the important information that needs action, use the Issues tool in DevTools.
Issues are gradually being moved from the Console to the Issues tool. However, there's still a lot of information in the Console, which is why it's a good idea to know about the automated log and filter options in the Console. For more information, see Filter Console messages.
DevTools with a Console full of messages:

Log information to display in the Console
The most popular use case for the Console is logging information from your scripts using the console.log() method or other similar methods.
Example code
JavaScript// prints the text to the console as  a log message console.log('This is a log message');
// prints the text to the console as an informational message console.info('This is some information'); 
// prints the text to the console as an error messageconsole.error('This is an error');
// prints the text to the console as a warning console.warn('This is a warning');
// prints the geometry of the document body as an object console.log(document.body.getBoundingClientRect());
// prints the geometry of the document body as a table console.table(document.body.getBoundingClientRect());
// shows a list of techologies as a collapsed group let technologies = ["HTML", "CSS", "SVG", "ECMAScript"]; console.groupCollapsed('Technolgies'); technologies.forEach(tech => {console.info(tech);}) console.groupEnd('Technolgies');
To log information to display in the Console:
1. Open the demo webpage Console messages examples: log, info, error and warn in a new window or tab.
2. To open the Console, press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
The Console displays the resulting messages that are caused by the demo code:

3. Paste the above code into the Console, and then press Enter.
If you get a message: Uncaught SyntaxError: Identifier 'technologies' has already been declared:
4. Open a new tab or window.
5. To open the Console, press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
6. Paste the above code into the Console, and then press Enter.
Many useful methods are available when you work with the Console. For more information, see Log messages in the Console tool.
Try your JavaScript live in the Console
The Console isn't only a place to log information. The Console is a REPL environment. When you write any JavaScript in the Console, the code runs immediately. You may find it useful to test some new JavaScript features or to do some quick calculations. Also, you get all of the features you expect from a modern editing environment, such as autocompletion, syntax highlighting, and history.
To try running JavaScript in the Console:
1. Open the Console.
2. Type 2+2.
The Console displays the result of 2+2 live as you type it, displaying the result 4 on the following line:

This Eager evaluation feature is useful to debug and verify that you aren't making mistakes in your code.
To run the JavaScript expression in the Console and optionally display a result, press Enter. Then, you can write the next JavaScript code to run in the Console.
Running several lines of JavaScript code in succession:

By default, you run JavaScript code on a single line. To run a line, type your JavaScript and then press Enter. To work around the single-line limitation, press Shift+Enter instead of Enter.
Similar to other command-line experiences, to access your previous JavaScript commands, press Up Arrow. The autocompletion feature of the Console is a great way to learn about unfamiliar methods.
To try autocompletion:
1. Open the Console.
2. Type doc.
3. Select document from the dropdown menu.
4. Press Tab to select document.
5. Type .bo.
6. Press Tab to select document.body.
7. Type another . to display the complete list of properties and methods available on the body of the current webpage.
For more information about all the ways to work with Console, see Console as a JavaScript environment.
Autocompletion of JavaScript expressions in the Console:

Interact with the current webpage in the browser
The Console has access to the Window object of the browser. You can write scripts that interact with the current webpage, by reading data from the DOM and assigning data to DOM elements.
Reading from the DOM tree in the Console
To use a JavaScript expression to read from the current page by reading a selected element from the DOM tree:
1. Open the Console.
2. Paste the following code into the Console, and then press Enter:
JavaScriptdocument.querySelector('h1').innerHTMLThis expression selects the first heading-level 1 from the DOM and then selects the HTML content that's contained between the <h1> start and end tags. The Console displays the output of the expression, which is the text of the heading:

You have read from the DOM representation of the webpage, by entering a JavaScript expression in the Console and displaying the output in the Console.
Writing to the DOM tree and webpage from the Console
You can also change the rendered webpage, by changing the DOM (or writing to the DOM), from within the Console.
To change the rendered webpage:
1. Open the Console.
2. Paste the following code into the Console, and then press Enter:
JavaScriptdocument.querySelector('h1').innerHTML = 'Rocking the Console';The above JavaScript expression uses the = sign to assign a value to the selected
DOM item. The evaluated value of the expression is a string for a heading, in this example. The expression's value (the heading string) is shown both in the Console and in the rendered webpage:

You changed the main heading of the webpage to Rocking the Console.
Using the $$ Console utility method to
The Console Utility methods make it easy to access and manipulate the current webpage.
For example, to add a green border around all the links in the current webpage:
1. Open the Console.
2. Paste the following code into the Console, and then press Enter:
JavaScript$$('a').forEach(a => a.style.border='1px solid lime');The $$(selector) console utility function is "Query selector all". This DOM query selector function returns an array of all the elements that match the specified CSS selector, like the JavaScript function document.querySelectorAll(). In this example, we select all the <a> hyperlink elements and then apply a green box around them:

For more information, see Console tool utility functions and selectors.
See also
Interact with the DOM using the Console.
Console features reference
Console object API Reference
Console tool utility functions and selectors

Feedback
Was this page helpful?  Yes  No
Console features reference
Article • 03/22/2024
This article is an outline of the features of the Console.
Contents:
Open the Console
Open the Console tool in the Activity Bar
Open the Console tool in the Quick View toolbar
Open the Console from the Command Menu
Open Console settings
Open the sidebar to filter messages
View messages
Turn off message grouping
Log XHR and Fetch requests
Persist messages across page loads
Hide network errors
Explain Console errors and warnings using Copilot in Edge
Filter messages
Filter out browser messages
Filter by log level
Filter messages by script URL
Reverse the filter with a negative URL filter
Display messages from a single script by using the sidebar
Filter out messages from different JavaScript contexts
Filter messages by using a regular expression pattern
Run JavaScript
Run expressions again by using the Console history
Watch the value of an expression in real time by using a live expression
Disable evaluating JavaScript expressions as you type
Turn off autocomplete from history
   Select a context to run JavaScript expressions Clear the Console
Open the Console
You can open the Console tool either in the Activity Bar or in the Quick View toolbar.
Open the Console tool in the Activity Bar
Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). DevTools opens, with the tab for the Console tool selected in the Activity Bar:

Open the Console tool in the Quick View toolbar
To open the Console tool in the Quick View toolbar, at the bottom of the DevTools window, press Esc. If the Quick View toolbar was previously hidden, it appears:

Or, click Customize and control DevTools (...) > Toggle Quick View panel.
Open the Console from the Command Menu
To open the Console tool from the Command Menu:
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).
The Command Menu initially opens with a > character prepended to its text box.
2. Type Show Console and then select either of the Show Console options:
 To open the Console in the Activity Bar, select the option with the Panel badge next to it.
 To open the Console in the Quick View toolbar, select the option with the Quick View badge next to it.

To learn more about the Command Menu, see Run commands in the Command Menu.
Open Console settings
To change settings of the Console tool, click the Console settings () button. The settings section appears:

Open the sidebar to filter messages
To display the sidebar in the Console, to filter messages, click Show console sidebar ( ). The sidebar appears:

To learn more about filtering messages in the Console tool, see Filter messages.
View messages
This following sections describe features that change how messages are presented in the Console tool. For a hands-on walkthrough, see Inspect and filter information on the current webpage in Console overview.
Turn off message grouping
By default, the Console groups similar messages together. For example, if multiple subsequent messages are logged, only one message is displayed in the Console. The message includes a count of how many times the message was logged, and you can expand the message to see all the instances.
To turn off the default message grouping behavior of the Console, click the Console settings () button and then select the Group similar messages in console checkbox.
Log XHR and Fetch requests
To log all the network requests that are triggered by the XMLHttpRequest and Fetch JavaScript APIs:
1. Open the demo webpage Inspect Network Activity Demo in a new window or tab.
2. In the Console tool, click the Console Settings () button, and then elect the Log XMLHttpRequests checkbox.
3. In the rendered webpage, click the Get Data button. This triggers a Fetch API request, and the Console then logs the request and response details:

Persist messages across page loads
When you load a new webpage, the messages in the Console are cleared. To persist messages across page loads, click the Console Settings () button and then select the Preserve log checkbox.
Hide network errors
By default, the Console tool logs network errors:

To hide network errors, click the Console Settings () button, and then select the Hide network checkbox.
Explain Console errors and warnings using Copilot in Edge
When inspecting a webpage with DevTools, you often see errors and warnings in the Console tool. These errors and warnings can sometimes be difficult to understand and fix. By using the Explain this error feature, you get more information about the error or warning in Copilot in Edge:

To learn more about this feature, see Explain Console errors and warnings using Copilot in Edge.
Filter messages
There are multiple ways to filter out messages in the Console.
Filter out browser messages
To only display messages that came from the JavaScript of the webpage:
1. Open the demo webpage PWAmp in a new window or tab, and then click the Play button.
The demo webpage logs messages to the Console and several browser messages are also logged:

2. In the Console tool, to display the sidebar, click Show console sidebar ().
3. In the sidebar, click 3 user messages. The number of user messages might vary depending on the number of messages that the webpage logs.
The Console tool only displays the messages that the webpage logs, and the browser messages are hidden:

Filter by log level
DevTools assigns each message logged to the Console tool one of the four severity levels:
Error
Info
Verbose
Warning
The four severity levels apply to:
Messages that you log from your webpage by using console methods such as console.log(), console.error(), and console.warn().
Messages that the browser logs.
You can hide any level of messages that you're not interested in. For example, if you're only interested in Error messages, you can hide the other three levels.
To filter messages by level:
1. In the toolbar of the Console tool, click the Log level dropdown list.
If the dropdown list isn't available, first hide the sidebar by clicking Hide console sidebar ().
2. In the dropdown list, enable or disable any of the Verbose, Info, Warnings, or

Filter messages by script URL
To filter messages by the URL of the script that logged the messages, use the Filter text box:
1. Open the demo webpage PWAmp in a new window or tab. Messages from various scripts are logged to the Console.
2. In the toolbar of the Console tool, click the Filter text box, and then type url:. A dropdown list containing the URLs of the scripts that logged messages appears:

3. Select the URL of the script that you want to focus on. The Console tool only displays messages from that script:

You don't have to choose from the list of URLs that the Console tool provides in the
Filter dropdown list. You can type the URL, or part of the URL, that you want to filter by. For example, if https://example.com/a.js and https://example.com/b.js are logging messages, url:example.com allows you to focus on the messages from these two scripts.
Reverse the filter with a negative URL filter
To hide messages logged from a script, in the Filter text box, type -url: followed by the
URL, or part of the URL, of the script. For example, to hide messages from https://example.com/a.js, type -url:example.com/a.js.
Display messages from a single script by using the sidebar
To display messages from a single script, by using the sidebar:
1. To display the sidebar in the Console, click Show console sidebar (). The sidebar appears.
2. Expand the 3 user messages section. The number might vary depending on the number of messages that the webpage logs. The list of scripts that logged messages appears.
3. Select the script script that contains the messages that you want to focus on. The Console only displays messages from that script:

Filter out messages from different JavaScript contexts
By default, the Console tool displays messages from all the JavaScript contexts that are running on the webpage. This might include messages from cross-domain <iframe> elements that are embedded in the webpage, or service workers that are running in the background.
To only display messages from one JavaScript context:
1. Click the Console Settings () button. The settings section appears.
2. Select the Selected context only checkbox. Only the messages that are logged by the top JavaScript context are displayed in the Console.
3. To choose a difference context, in the toolbar of the Console tool, click the JavaScript context dropdown list, and then select the context that you want to focus on:

To learn more about selecting other JavaScript context, see Select a context to run JavaScript expressions.
Filter messages by using a regular expression pattern
To only display the messages that match a regular expression pattern:
1. In the toolbar of the Console tool, click the Filter text box.
2. Type a regular expression pattern, such as /.*\.mp3$/ to match messages that end with .mp3.
The Console only shows the message that match the regular expression pattern:

Run JavaScript
This section contains features related to running JavaScript in the Console. For a handson walkthrough, see Run JavaScript in the Console.
Run expressions again by using the Console history
To run an JavaScript expression that you ran earlier in the Console:
1. Press Up Arrow to cycle through the history of the JavaScript expressions that you ran earlier.
2. Press Enter to run the expression again.
Watch the value of an expression in real time by using a live expression
To watch the value of a JavaScript expression in real-time, instead of running the expression repeatedly, create a live expression:
1. In the toolbar of the Console tool, click the Create live expression button (). The Expression text box appears below the toolbar.
2. Enter a JavaScript expression, and then click outside of the Expression text box.
The new expression and its value appear at the top of the Console tool.
For more information, see Monitor changes in JavaScript using Live Expressions.
Disable evaluating JavaScript expressions as you type
By default, the Console tool displays a preview of the value of an expression, as you type the JavaScript expression in the Console.
To turn off the live preview as you type:
1. Click the Console Settings () button.
2. Clear the Eager evaluation checkbox.
Turn off autocomplete from history
When you type a JavaScript expression in the Console tool, an autocomplete popup window appears. The autocomplete popup window contains:
 Suggestions for global JavaScript objects and functions that match the characters that you've typed.
 Suggestions for JavaScript expressions that you ran earlier.
The suggestions for JavaScript expressions that you ran earlier are prefixed with the > character and appear at the bottom of the autocomplete window:

To stop displaying suggestions from your previously ran expressions:
1. Click the Console Settings () button.
2. Clear the Autocomplete from history checkbox.
Select a context to run JavaScript expressions
Webpages have a main browsing context where the webpage's JavaScript runs.
However, webpages can have additional JavaScript contexts, such as cross-domain
<iframe> elements that are embedded in the webpage, or service workers that are running in the background.
By default, the JavaScript context dropdown list that's located in the toolbar of the Console tool is set to top, which represents the main webpage's browsing context:

Any JavaScript expression that you run in the Console tool is evaluated in the context that's selected in the JavaScript context dropdown list.
To run JavaScript expressions in a different context, such as within a cross-domain
<iframe> element, click the JavaScript context dropdown list, and then select another browsing context.
Clear the Console
To clear the Console, use any of the following approaches:
Click the Clear console () button.
Right-click a message and then select Clear console.
Type clear() in the Console tool and then press Enter.
Call console.clear() from your webpage's JavaScript.
Press Ctrl+L while the Console tool is in focus.
See also
 Log messages in the Console tool - How to filter log messages such as Info, Warnings, and Errors in the Console.
 Get started with running JavaScript in the Console - Steps to walk you through issuing JavaScript statements and expressions in the Console.
 Console object API Reference - Functions and expressions that you can enter in the Console to write messages to the Console, such as console.log().
Console tool utility functions and selectors - Convenience functions that you can enter in the Console tool, such asmonitorEvents().

Feedback
Was this page helpful?  Yes  No

Log messages in the Console tool
Article • 12/07/2023
Ever since browsers started to offer developer tools, the Console is a favorite, because in most programming courses, you learn to output some kind of print or log command, to gain insights about what happens in your code.
Before DevTools, for JavaScript, you were limited to an alert() or document.write() statement to debug in the browser. With DevTools, to log information in the Console, many methods of the Console object are available in the Console, listed in Console object API Reference.
Levels of Console log messages: console.log, .info, .error, and .warn
The console object has methods to log various levels of messages:
console.log - Prints the text to the Console as a log message. console.info - Prints the text to the Console as an informational message. console.error - Prints the text to the Console as an error message. console.warn - Prints the text to the Console as a warning.
Example code for levels of Console log messages
JavaScript// prints the text to the console as  a log message console.log('This is a log message')
// prints the text to the console as an informational message console.info('This is some information') 
// prints the text to the console as an error message console.error('This is an error')
// prints the text to the console as a warning console.warn('This is a warning') Demo webpage for levels of Console log messages
To try using the logging functions in the Console:
1. Open the demo webpage Console messages examples: log, info, error, and warn in a new window or tab.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
DevTools opens, with the Console open in the Activity Bar. The demo page has already sent the above log messages to the Console:

The error() and warn() methods display an icon next to the message and a way to inspect the stack trace	 of the message.
3. Copy and paste any of the examples into the Console, and then press Enter.
Output is displayed in the Console, below the code that you entered.
Logging various types of values
Instead of logging text values, you can send any valid JavaScript or DOM references to the Console. The Console appropriately displays the various types of JavaScript values that you send to it from console log messages. The Console displays a filtered and formatted representation of the results.
Example code for logging various types of values
JavaScriptlet x = 2;
// logs the value of x console.log(x);
// logs the name x and value of x console.log({x})   
// logs a DOM reference  console.log(document.querySelector('body'));
// logs an Object console.log({"type":"life", "meaning": 42}); let w3techs = ['HTML', 'CSS', 'SVG', 'MathML'];
// logs an Array console.log(w3techs);Demo webpage for logging various types of values
To use the log function to display different variable types:
1. Open the demo webpage Console messages examples: Logging different types in a new window or tab.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
DevTools opens, with the Console open in the Activity Bar, displaying several types of values. Each type of result is displayed in a different way.
3. Expand each output entry to analyze each result in more detail.
The second log message in the example code uses curly braces {} around the x variable, to output the name of the variable in addition to the value of the variable. This syntax logs an object that contains a single property named x, instead of logging the value of x only.
Logging variables of different types in the Console:

Logging variables of different types in the Console with expanded, extra information:

4. Copy and paste any of the examples from the rendered webpage into the Console, such as console.log({x}), and then press Enter.
Formatted output is displayed in the Console, below the code that you entered.
Logging values using format specifiers
A feature of all the log methods is that you can use format specifiers in your log statement's message. Format specifiers are part of a log message, and start with a percentage sign (%) character.
Use format specifiers to log certain values in different formats, and to convert between formats:
%s logs output as Strings.
%i or %d logs output as Integers.
%f logs output as a floating-point value.
%o logs output as an expandable DOM element.
%O logs output as an expandable JavaScript object.
%c allows you to style a message by using CSS properties.
Example code for logging values using format specifiers
JavaScript// logs "10x console developer" console.log('%ix %s developer', 10, 'console');
// logs PI => 3.141592653589793 console.log(Math.PI); 
// logs PI as an integer = 3 console.log('%i', Math.PI); 
// logs the document body as a DOM node console.log('%o', document.body); 
// logs the body of the document as a JavaScript object with all properties console.log('%O', document.body); 
// shows the message as red and big console.log('%cImportant message follows','color:red;font-size:40px')Demo webpage for logging values using format specifiers
1. Open the demo page Console messages examples: Logging with specifiers in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
DevTools opens, with the Console open in the Activity Bar. The webpage has already populated the Console with output.
The first example demonstrates that the order of replacement of format specifiers is the parameter order following the string:
JavaScriptconsole.log('%ix %s developer', 10, 'console'); // logs "10x console developer"3. Click the expander triangles in the output results, to expand the data that's output by the above log statements that are in the webpage.
4. If necessary, press F5 to reload the page and re-populate the Console output.
Format specifiers are used to log, format, and convert values:

results, to see the difference between the %o and %O format specifiers.
The body element of the webpage is either displayed as an expandable DOM node (console.log('%o', document.body);), or as a full list of all JavaScript properties on the body element (console.log('%O', document.body);):

Grouping log messages
If you log a lot of information, you can use the group and groupCollapsed methods to display log messages as expandable and collapsible groups in the Console. Groups can be nested and named, to make the data easier to understand.
Example code for grouping log messages
JavaScript// Example 1: Nested groups, with the inner group hidden (collapsed): console.group("Passengers: Heart of Gold"); console.log('Zaphod'); console.log('Trillian'); console.log('Ford'); console.log('Arthur'); console.log('Marvin'); console.groupCollapsed("Hidden"); console.log('(Frankie & Benjy)'); console.groupEnd("Hidden"); console.groupEnd("Passengers: Heart of Gold");
// Example 2:
let technologies = {
  "Standards": ["HTML", "CSS", "SVG", "ECMAScript"],
  "Others": ["jQuery", "Markdown", "Textile", "Sass", "Pug"] }for (tech in technologies) {   console.groupCollapsed(tech);   technologies[tech].forEach(t => console.log(t));   console.groupEnd(tech);
}
Demo webpage for grouping log messages
1. Open the demo page Console messages examples: Grouping logs in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
DevTools opens, with the Console open in the Activity Bar. The webpage has already populated the Console with output, logging many values as groups:

3. In the Console output, expand or collapse the sections:

Displaying data as tables
As an alternative to outputting expandable objects, the console.table() method logs data as a table that you can sort by using the table headers, to make it easier to view the information.
Example code for displaying complex data as tables
JavaScriptlet technologies = {
  "Standards": ["HTML", "CSS", "SVG", "ECMAScript"],
  "Others": ["jQuery", "Markdown", "Textile", "Sass", "Pug"] } // log technologies as an object console.log(technologies); // show technologies as a table console.table(technologies);
// get the dimensions of the document body let bodyDimensions = document.body.getBoundingClientRect();
// show dimensions as an object console.log(bodyDimensions); // show dimensions as a table console.table(bodyDimensions);This code in the demo webpage produces the first four console outputs, with four line numbers shown on the right side of the Console.
Demo webpage for displaying complex data as tables
To show complex data as tables:
1. Open the demo page Console messages examples: Using table in a new window or tab.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
DevTools opens, with the Console open in the Activity Bar. The webpage has already populated the Console with output.
3. In the Console, click the expander triangles.

Console into an app that supports tabular data, such as Microsoft Excel or Microsoft Word, the structuring of the output as rows and columns is preserved.
Specifying an array of properties to display as columns
If the data has named parameters, the console.table() method also allows you to specify an Array of columns for each property to display as a second parameter. The following example shows how to specify an array of columns that is more readable:
The remaining code in the demo webpage shows:
1. How to output all the properties as columns, for the selected elements.
2. How to specify an array only of specified properties as columns, for the selected elements.
JavaScript// get all the h1, p and script elements let contentElements = document.querySelectorAll(':is(h1,p,script)');
// show the elements as an unfiltered table console.table(contentElements) // show only relevant columns console.table(contentElements, ['nodeName', 'innerText', 'offsetHeight'])This code produces the final two console outputs, with two line numbers shown on the right side of the Console:
The final call to console.table filters the information that the console.table() method displays, by specifying an array of properties to display, as a second parameter.
Log statements vs. breakpoint debugging and Live Expressions
You might be tempted to use the log methods as your main means to debug webpages, because log methods are simple to use. However, consider the result of any console.log() request: released products shouldn't use any log statement that was
used for debugging, because it could reveal inside information to people. And excess noise is created in the Console.
So, instead of log statements, try using Breakpoint Debugging or Live Expressions. You may find that your workflows are more effective and you get better results.
See also
 Console object API Reference

Run JavaScript in the Console
Article • 07/12/2023
You can enter any JavaScript expression, statement, or code snippet in the Console, and it runs immediately and interactively as you type. This is possible because the Console tool in DevTools is a REPL environment. REPL stands for Read, Evaluate, Print, and Loop.
The Console:
1. Reads the JavaScript that you type into it.
2. Evaluates your code.
3. Prints out the result of your expression.
4. Loops back to the first step.
To enter JavaScript statements and expressions interactively in the Console:
1. Right-click in a webpage and then select Inspect. DevTools opens. Or, press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS), to directly open the DevTools console.
2. If necessary, click in DevTools to give it focus, and then press Esc to open the Console.
3. Click in the Console, and then type 2+2, without pressing Enter.
The Console immediately displays the result 4 on the next line while you type. The
Eager evaluation feature helps you write valid JavaScript. The Console displays the result while you type, regardless of whether your JavaScript is correct, and regardless of whether a valid result exists.

4. When you press Enter, the Console runs the JavaScript command (expression or statement), displays the result, and then moves the cursor down to allow you to enter the next JavaScript command.

Autocompletion to write complex expressions
The Console helps you write complex JavaScript using autocompletion. This feature is a great way to learn about JavaScript methods that you didn't know of before.
To try autocompletion while writing multi-part expressions:
1. Type doc.
2. Press the arrow keys to highlight document on the dropdown menu.
3. Press Tab to select document.
4. Type .bo.
5. Press Tab to select document.body.
6. Type another . to get a large list of possible properties and methods available on the body of the current webpage.

Console history
As with many other command-line environments, a history of the commands that you entered is available for reuse. Press Up Arrow to display the commands that you entered previously.
Similarly, autocompletion keeps a history of the commands you previously typed. You can type the first few letters of earlier commands, and your previous choices appear in a text box.
Also, the Console also offers quite a few utility methods that make your life easier. For example, $_ always contains the result of the last expression you ran in the Console.

Multiline edits
By default, the Console only gives you one line to write your JavaScript expression. You code runs when you press Enter. The one line limitation may frustrate you. To work around the 1-line limitation, press Shift+Enter instead of Enter. In the following example, the value displayed is the result of all the lines (statements) run in order:

If you start a multi-line statement in the Console, the code block is automatically recognized and indented. For example, if you start a block statement, by entering a curly brace, the next line is automatically indented:

Network requests using top-level await()
Other than in your own scripts, Console supports top level await to run arbitrary asynchronous JavaScript in it. For example, use the fetch API without wrapping the
await statement with an async function.
To get the last 50 issues that were filed on the Microsoft Edge Developer Tools for Visual Studio Code GitHub repo:
1. In DevTools, open the Console.
2. Copy and paste the following code snippet to get an object that contains 10 entries:
JavaScriptawait ( await fetch(
'https://api.github.com/repos/microsoft/vscode-edge-devtools/issues? state=all&per_page=50&page=1'
)).json();
The 10 entries are hard to recognize, since a lot of information is displayed.
3. Optionally, use the console.table() log method to only receive the information in which you're interested:

the Console.
4. Paste the following code. It sends the request and copies the data from the response to the clipboard:
JavaScriptcopy(await (await fetch(
'https://api.github.com/repos/microsoft/vscode-edge-devtools/issues?
state=all&per_page=50&page=1'
)).json())The Console is a great way to practice JavaScript and to do some quick calculations. The real power is the fact that you have access to the window object. See Interact with the DOM using the Console.

Explain Console errors and warnings using Copilot in Edge
Article • 06/20/2024
To help you understand errors and warnings, the Console tool in Microsoft Edge DevTools integrates Copilot in Microsoft Edge.
When inspecting a webpage with DevTools, you often see errors and warnings in the Console tool. These errors and warnings can sometimes be difficult to understand and fix. By using the Explain this error feature, you get more information about the error or warning in Copilot in Edge:

Video: Explain DevTools Console errors using Copilot in Edge

Supported scenarios
This feature is for use in standard browser windows, and is not available in the following scenarios:
ﾉ Expand table
ScenarioArticleBrowsing in an InPrivate windowBrowse InPrivate in Microsoft EdgeBrowsing with Kids Mode in Microsoft EdgeLearn more about Kids Mode in Microsoft
EdgeUsing DevTools with a Microsoft Edge WebView2 controlDebug WebView2 apps with Microsoft Edge
DevToolsUsing DevTools in a standalone Progressive Web
App windowUse a standalone app window in Best practices for PWAsEnable Copilot in Edge
To use this explanation feature, enable Copilot in Edge:
1. Sign into Microsoft Edge. See Sign in to sync Microsoft Edge across devices.
2. Make sure the Copilot icon () is visible in the top-right corner of the browser toolbar. If the Copilot icon isn't displayed, in Microsoft Edge, select Settings and more (...) > Settings > Sidebar > Copilot, and then turn on the Show Copilot toggle.
Explain errors and warnings in the Console tool
To use Copilot to explain an error or warning in the Console tool:
1. If not done already, enable Copilot in Edge, as described above.
2. Open a web page that contains the errors you want to explain. For example, open the Console error explainer test page in a new window or tab.
3. To open DevTools, right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
4. In DevTools, on the Activity Bar, select the Console tab.
5. In the rendered web page, click the Run button next to one or more error descriptions.
The demo page then generates errors, which are shown in the Console:

6. In the Console tool, click the ask Copilot: "Explain this error" () button next to one of the error messages.
Copilot opens in the Microsoft Edge sidebar, showing the error message, an Explain the error message from DevTools console request message, and then a response explaining the error:

7. To get more information about the error, in Copilot, enter additional questions.
Provide feedback
The responses that Copilot in Edge provides when you use the above feature are automatically generated, so surprises and mistakes are possible. We're constantly improving the level of quality and accuracy of the responses, but if you see an incorrect response, let us know by adding a comment at: Feedback for the Explain errors and source code in Copilot in Edge experiment.
See also
 Explain source code using Copilot in Edge
Console object API Reference
Article • 06/14/2023
Use the console object's methods to write messages to the Console from your JavaScript.
You can also enter these methods into the Console. For example, in the Console, to enter a console method that takes a variable:
1. In the Sources tool, in the Debugger, set a breakpoint in your JavaScript code.
2. In the Debugger, step through your code.
3. When you are in a valid context so that the desired variable is in-scope, enter a method of the console object into the Console tool. The result is displayed in the Console.

assert
Writes an error to the Console when expression evaluates to false.
JavaScriptconsole.assert(expression, object)Log level: Error
Example
JavaScriptconst x = 5; const y = 3; const reason = 'x is expected to be less than y'; console.assert(x < y, {x, y, reason});Output


clear
Clears the Console.
If Preserve Log is turned on, the clear method is turned off.
JavaScriptconsole.clear()See also
 Clear the Console

count
Writes the number of times that the count method has been invoked at the same line and with the same label. Use the countReset method to reset the count.
JavaScriptconsole.count([label])Log level: Info
Example
JavaScriptconsole.count(); console.count('coffee'); console.count(); console.count();Output


countReset
Resets a count.
JavaScriptconsole.countReset([label])Example
JavaScriptconsole.countReset(); console.countReset('coffee');
debug
Identical to the log method, except different log level.
JavaScriptconsole.debug(object [, object, ...])Log level: Verbose
Example
JavaScriptconsole.debug('debug');Output

dir
JavaScriptconsole.dir(document.head);Prints a JSON representation of the specified object.
JavaScriptconsole.dir(object)Log level: Info
Example
dirxml
JavaScriptconsole.dirxml(document);Prints an XML representation of the descendants of node.
JavaScriptconsole.dirxml(node)Log level: Info
Example
error
JavaScriptconsole.error("I'm sorry, Dave.  I'm afraid I can't do that.");Prints the object to the Console, formats it as an error, and includes a stack trace.
JavaScriptconsole.error(object [, object, ...])Log level: Error
Example



group
Visually groups messages together until the groupEnd method is used. Use the groupCollapsed method to collapse the group when it initially logs to the Console.
JavaScriptconsole.group(label)Example
JavaScriptconst label = 'Adolescent Irradiated Espionage Tortoises'; console.group(label); console.info('Leo'); console.info('Mike'); console.info('Don'); console.info('Raph'); console.groupEnd(label);Output


groupCollapsed
Identical to the log method, except the group is initially collapsed when it logs to the Console.
JavaScriptconsole.groupCollapsed(label)
groupEnd
Stops visually grouping messages. See the group method.
JavaScriptconsole.groupEnd(label)
info
Identical to the log method.
JavaScriptconsole.info(object [, object, ...])Log level: Info
Example
JavaScriptconsole.info('info');Output


log
Prints a message to the Console.
JavaScriptconsole.log(object [, object, ...])Log level: Info
Example
JavaScriptconsole.log('log');Output


table
Logs an array of objects as a table.
JavaScriptconsole.table(array)Log level: Info
Example
JavaScriptconsole.table([
      {          first: 'René',          last: 'Magritte',
      },       {          first: 'Chaim',          last: 'Soutine',          birthday: '18930113',
      },       {          first: 'Henri',          last: 'Matisse',
      }
]);Output


time
Starts a new timer. Use the timeEnd method to stop the timer and print the elapsed time to the Console.
JavaScriptconsole.time([label])Example
JavaScriptconsole.time(); for (var i = 0; i < 100000; i++) {       let square = i ** 2;
} console.timeEnd();Output


timeEnd
Stops a timer. For more information, see the time method.
JavaScriptconsole.timeEnd([label])Log level: Info

trace
Prints a stack trace to the Console.
JavaScriptconsole.trace()Log level: Info
Example
JavaScriptconst first = () => { second(); }; const second = () => { third(); }; const third = () => { fourth(); }; const fourth = () => { console.trace(); }; first();Output


warn
Prints a warning to the Console.
JavaScriptconsole.warn(object [, object, ...])Log level: Warning
Example
JavaScriptconsole.warn('warn');Output


See also
 MDN Web Docs > console object Reference - Has a summary overview of the methods, and has one page per method, with additional syntax details.
Log messages in the Console tool - An interactive introduction.
Console tool utility functions and selectors - Console-only utility methods, such as

Feedback
Was this page helpful?  Yes  No

Console tool utility functions and selectors
Article • 12/07/2023
The Console Utilities API contains a collection of convenience variables and functions for performing common tasks, such as:
Selecting and inspecting DOM elements.
Displaying data in a readable format.
Stopping and starting the profiler.
Monitoring DOM events.
These variables and functions only work by entering them directly into the DevTools Console; you can't use the variables and call the functions from scripts.
Summary
ﾉ Expand table
Variable or functionDescriptionRecently evaluated expression: $_Returns the value of the most recently evaluated expression.Recently selected element or
JavaScript object: $0-$4Returns a recently selected element or JavaScript object.Query selector: $(selector)Query selector; returns the reference to the first DOM element with the specified CSS selector, like document.querySelector().Query selector all: $$(selector,
[startNode])Query selector all; returns an array of elements that match the specified CSS selector, like document.querySelectorAll().XPath: $x(path, [startNode])Returns an array of DOM elements that match the specified XPath expression.clear()Clears the console of its history.copy(object)Copies a string representation of the specified object to the clipboard.debug(function)When the specified function is called, the debugger is invoked and breaks inside the function on the Sources panel.Variable or functionDescriptiondir(object)Displays an object-style listing of all of the properties for the specified object, like console.dir().dirxml(object)Prints an XML representation of the specified object, as displayed in the Elements tool, like console.dirxml().inspect(object/function)Opens and selects the specified DOM element in the
Elements tool, or the specified JavaScript heap object in the Memory tool.getEventListeners(object)Returns the event listeners that are registered on the specified object.keys(object)Returns an array containing the names of the properties belonging to the specified object.monitor(function)Logs a message to the console that indicates the function name, along with the arguments passed to the function as part of a request.monitorEvents(object[, events])When one of the specified events occurs on the specified object, the event object is logged to the console.profile([name])Starts a JavaScript CPU profiling session with an optional name.profileEnd([name])Completes a JavaScript CPU profiling session and displays the results in the Performance tool.queryObjects(constructor)Returns an array of the objects that were created by the specified constructor.table(data[, columns])Logs object data, formatted as a table with column headings, for the specified data object.undebug(function)Stops the debug of the specified function, so that when the function is requested, the debugger is no longer invoked.unmonitor(function)Stops the monitoring of the specified function.unmonitorEvents(object[, events])Stops monitoring events for the specified object and events.values(object)Returns an array containing the values of all properties belonging to the specified object.Recently evaluated expression: $_
$_ returns the value of the most recently evaluated expression.
Syntax:
JavaScript$_Example 1
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, type the expression 2+2, and then press Enter.
The expression is evaluated, and the result is shown. The $_ variable is also set to the result of the expression.

Example 2
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. Paste the following code into the Console, and then press Enter:
JavaScript["john", "paul", "george", "ringo"]The evaluated expression is an array of names.
3. Type the following code into the Console, and then press Enter:
JavaScript$_.lengthThe expression $_.length is evaluated and 4 is shown in the Console because $_ refers to the previously evaluated expression, which is the array of names.
$_.length is the length of the array of names.
4. Type the following code into the Console, and then press Enter:
JavaScript$_$_ always refers to the previously evaluated expression, which is now the number 4.

Recently selected element or JavaScript object:
$0-$4
$0, $1, $2, $3, and $4 return recently selected elements or JavaScript objects.
$0 returns the most recently selected element or JavaScript object, $1 returns the second most recently selected one, and so on. The $0, $1, $2, $3, and $4 variables work as a historical reference to the last five DOM elements that were inspected within the Elements tool, or the last five JavaScript heap objects that were selected in the Memory tool.
Syntax
JavaScript$0Example
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In the Elements tool, select an element, for example an <input> element.
3. Open the Console tool in the Quick View panel, at the bottom of DevTools.

6. In the Console tool, type $0, and then press Enter.

Query selector: $(selector)
$(selector) returns the reference to the first DOM element that matches the specified CSS selector selector.
This function is similar to the document.querySelector() function.
If you are using a library such as jQuery that uses $, the functionality is overwritten, and $ corresponds to the implementation from that library.
Syntax
JavaScript$(selector, [parentElement])Example 1
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, type $('input'). The first element that matches the input CSS selector is displayed:

3. Right-click the returned result and then select Reveal in Elements Panel to find it in the DOM, or Scroll in to View to show it on the page.
Example 2
The $() function accepts a second parameter, parentElement, that specifies a parent element which to search in. The default value of the parameter is document, which means that the entire webpage is searched by default. By specifying a parent element, you can search for elements within a specific part of the webpage.
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, type $('input', $('ul'))
The first element that matches the input CSS selector found within the first ul element is retruned:

Query selector all: $$(selector, [startNode])
$$() returns a list of elements that match the specified CSS selector, like document.querySelectorAll().
This function is similar to document.querySelectorAll() but returns an array of element, instead of a NodeList.
Syntax
JavaScript$$(selector, [parentElement])Example 1
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, type $$('button'). All the <button> elements in the webpage are displayed:

Example 2
This $$() function also supports a second parameter, parentElement, that specifies a parent element which to search in. The default value of the parameter is document, which means that the entire webpage is searched by default. By specifying a parent element, you can search for elements within a specific part of the webpage.
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.

XPath: $x(path, [startNode])
$x(path) returns an array of DOM elements that match the specified XPath expression path.
Syntax
JavaScript$x(path, [parentElement])Example 1
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, type $x("//li"). All the <li> elements in the webpage are displayed:

Example 2
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, type $x("//li[button]"). All the <li> elements that contain
<button> elements are displayed:

parentElement, that specifies an element or node in which to search for elements.
clear()
clear() clears the console of its history.
Syntax
JavaScriptclear()Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. To create history in the Console tool, enter multiple JavaScript expressions. For example:
JavaScriptfor (let i = 0; i < 10; i++) {     console.log(i);
}3. To clear the history, type clear() in the Console tool, and then press Enter:

copy(object)
copy(object) copies a string representation of the specified object to the clipboard.
Syntax
JavaScriptcopy(object)Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. Enter the following code in the Console tool, and then press Enter:
JavaScriptcopy($$('*').map(element => element.tagName));The code snippet selects all elements in the webpage by using the $$(selector) function, and then maps the tagName property of each element to an array. The array is then copied to the clipboard by using the copy() function.
3. Paste the contents of the clipboard into a text editor. The contents of the clipboard is a list of all the HTML tags in the webpage, for example:

JavaScript["HTML", "HEAD", "META", "TITLE", "LINK", "BODY", "H1", "FORM", "DIV", 
"LABEL", ...]debug(function)
debug(function) pauses inside the specified function function in the Sources tool,
when that function is called.
After the debugger is paused, you can then step through the code and debug it.
Syntax
JavaScriptdebug(function)Example
1. Open a new tab or window, and then go to a page that contains a JavaScript function you want to debug. For example, go to the TODO app demo page.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. In the Console tool, type debug(updateList).
4. In the rendered webpage, add a new TODO item to the list by typing test in the Add a task text field and then pressing Enter.
The debugger pauses inside the updateList() function in the Sources tool:

breakpoints.
For more information on breakpoints, see Pause your code with breakpoints.
dir(object)
dir(object) displays an object-style listing of all of the properties for the specified
object, like console.dir().
This function is an alias for console.dir().
Syntax
JavaScriptdir(object)Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, enter document.head and then press Enter.
An HTML representation of the <head> element is displayed.
3. Enter dir(document.head) and then press Enter.

For more information, see console.dir() in the Console API.
dirxml(object)
dirxml(object) prints an XML representation of the specified object, as displayed in the Elements tool, like console.dirxml().
This function is equivalent to console.dirxml().
Syntax
JavaScriptdirxml(object)inspect(object/function)
inspect(element/function) opens and selects the specified DOM element in the Elements tool, or the specified JavaScript function in the Sources tool.
 For a DOM element, this function opens and selects the specified DOM element in the Elements tool.
 For a JavaScript function, this function opens the specified JavaScript function in the Sources tool.
Syntax
JavaScriptinspect(element/function)Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.

When passing a function to inspect, the function opens the webpage in the Sources tool for you to inspect.
getEventListeners(object)
getEventListeners(object) returns the event listeners that are registered on the
specified object.
The return value is an object that contains an array for each registered event type (such as click or keydown). The items in each array are objects that describe the listener registered for each type.
Syntax
JavaScriptgetEventListeners(object)Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.

If more than one listener is registered on the specified object, then the array contains a member for each listener. In the following figure, two event listeners are registered on the document element for the click event:

keys(object)
keys(object) returns an array containing the names of the properties belonging to the
specified object.
To get the associated values of the same properties, see values(object), below.
Syntax
JavaScriptkeys(object)Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, enter the following code, and then press Enter:
JavaScriptvar player1 = {"name": "Ted", "level": 42}The above code snippet defines an object in the global namespace named player1, which contains two properties.
3. To get the names of the properties belonging to the player1 object, enter keys(player1) in the Console tool, and then press Enter: values(player1) in the Console tool, and then press Enter:
monitor(function)
monitor(function) logs a message to the console everytime the specified function is
called. The message indicates the function name and the arguments passed to the function.
Syntax
JavaScript
monitor(function)
Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, enter the following code and then press Enter:
JavaScriptfunction sum(x, y) {   return x + y;
}The above code snippet defines a function named sum, which accepts two arguments.
3. To start monitoring the sum function, enter monitor(sum) in the Console tool, and then press Enter:
4. To call the function, enter sum(1, 2) and press Enter. A message appears, indicating that the sum function was called, and the arguments passed to the function:

monitorEvents(object[, events])
monitorEvents(object[, events]) logs an event object to the console every time the
specified events occur on the specified object.
You can specify a single event to monitor, an array of events, or one of the generic events types that are mapped to a predefined collection of events.
Syntax
JavaScriptmonitorEvents(object[, events])Example 1
To monitor a single event:
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, enter the following code and then press Enter:
JavaScriptmonitorEvents(window, "resize");The previous code snippet monitors all resize events on the window object.
3. Resize the window, for example by making DevTools larger or smaller. Resize events appear in the Console tool:

Example 2
To monitor multiple events:
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, enter the following code and then press Enter:
JavaScriptmonitorEvents(window, ["resize", "scroll"]);The previous code snippet defines an array of event names to monitor both resize and scroll eevents on the window object.
3. Resize the window, for example by making it shorter, and then scroll in the rendered webpage. Resize and scroll events appear in the Console tool:

Example 3
You can also specify a collection of events by using one of the predefined sets of events.
The following table shows the available event types and the associated event mappings:
ﾉ Expand table
Event typeCorresponding mapped eventsmouse"click", "dblclick", "mousedown", "mousemove", "mouseout", "mouseover",
"mouseup", "mousewheel"key"keydown", "keypress", "keyup", "textInput"Event typeCorresponding mapped eventstouch"touchcancel", "touchend", "touchmove", "touchstart"control"blur", "change", "focus", "reset", "resize", "scroll", "select", "submit", "zoom"1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. In the Console tool, enter the following code and then press Enter:
JavaScriptmonitorEvents(window, "key");The previous code snippet monitors all keyboard events on the window object.
3. In the rendered webpage, press any keys. Keyboard events appear in the Console tool:

profile([name])
profile([name]) starts a JavaScript CPU profiling session with an optional name.
To complete the profile and display the results in the Performance tool, call profileEnd([name]).
Syntax
JavaScript
profile([name])
Example
1. Open the page that you want to profile in a new tab or window. For example, go to the Sluggish Animation demo page.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. To start profiling, in the Console tool, type profile("My profile), and then press Enter.
4. To stop profiling, after some time has passed, type profileEnd("My profile"), and then press Enter.
The profile results appear in the Performance tool:

You can create multiple profiles at the same time, and you aren't required to end each profile in creation order. For example, the following code creates two profiles, and then ends them in the opposite order:
JavaScript
profile('A'); profile('B'); profileEnd('B'); profileEnd('A');
profileEnd([name])
profileEnd([name]) completes a JavaScript CPU profiling session and displays the
results in the Performance tool.
To call this function, you must be running the profile([name]) function.
Syntax
JavaScriptprofileEnd([name])For more information, see profile([name]), above.
queryObjects(constructor)
queryObjects(constructor) returns an array of the objects that were created by the
specified constructor.
The scope of queryObjects() is the currently selected runtime context in the Console.
Syntax
JavaScriptqueryObjects(constructor)Example
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. To return all instances of HTML elements, enter queryObjects(HTMLElement) in the Console tool, and then press Enter:

Other examples:
 Use queryObjects(Promise) to return all instances of Promise objects if your webpage uses Promise objects.
 Use queryObjects(ClassName) to return all instances of the ClassName class if your webpage uses JavaScript classes.
table(data[, columns])
table(data[, columns]) logs object data, formatted as a table with column headings,
for the specified data object.
This function is an alias for console.table().
Syntax
JavaScripttable(data[, columns])Example
To display a list of people's names as a table, in the Console:
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
2. Enter the following code in the Console, and then press Enter:

JavaScriptvar names = {   0: {     firstName: "John",     lastName: "Smith"
  },   1:  {     firstName: "Jane",     lastName: "Doe"
  }
};The above code snippet defines an object in the global namespace named names, which contains two properties.
3. To display the names object as a table, enter table(names) in the Console, and then press Enter:

undebug(function)
undebug(function) stops the debug of the specified function, so that when the function
runs, the debugger no longer pauses in the function.
For more information, see debug(function), above.
Syntax

JavaScriptundebug(function)unmonitor(function)
unmonitor(function) stops the monitoring of the specified function.
For more information, see monitor(function), above.
Syntax
JavaScriptunmonitor(function)unmonitorEvents(object[, events])
unmonitorEvents(object[, events]) stops monitoring events for the specified object
and events.
For more information, see monitorEvents(object[, events]), above.
Syntax
JavaScriptunmonitorEvents(object[, events])values(object)
values(object) returns an array containing the values of all properties belonging to the
specified object.
To get the associated keys of the same properties, see keys(object), above.
Syntax
JavaScript
values(object)
Example
See the example in keys(object), above.
See also


Feedback
Was this page helpful?  Yes  No
Monitor changes in JavaScript using Live Expressions
Article • 08/29/2023
Live Expressions are a great way to monitor the value of JavaScript expressions that change a lot over time. Instead of generating many distinct Console messages that you have to read and scroll through, you can pin JavaScript expressions to the top of the Console tool.
With Live Expressions, you see the value of your JavaScript expressions at the top of the Console tool, always in the same place, and you can keep using Console logs for values that don't change as often.
Live Expressions run exclusively on your computer, and you don't need to change anything in your code to display their values.
Add a new live expression
To add a live expression:
1. Open the live expression demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. In DevTools, open the Console tool.
4. In the Console, click the Create live expression () icon next to the Filter text box.
A text box appears:

Expression can be any valid JavaScript expression.
6. To save the expression, press Ctrl+Enter (Windows, Linux) or Command+Enter (macOS). Or, click outside of the Live Expression text box.

7. Click different parts of the webpage, or press Tab or Shift+Tab to move the focus around in the webpage.
The document.activeElement Live Expression value changes to reflect the currently focused element in real time:

Add more live expressions
You can add multiple Live Expressions to the Console tool. Each Live Expression is evaluated independently, and the results are displayed in the order that you add them.
To add a second Live Expression:
1. In the Console tool, click the Create live expression () icon next to the Filter text box.
A new text box appears below the first Live Expression:

to display the width of the browser window.
3. Repeat the steps to add another Live Expression for window.innerHeight.
The Console tool now displays three Live Expressions:

Remove Live Expressions
To get rid of a Live Expression, click the Close () icon next to the expression:

Replace Console logging with Live Expressions
You can create as many Live Expressions as you want, and persist each Live Expression across browser sessions and windows. Live Expressions are a way to cut down on noise in your debugging workflow.
Use Console logging to display mouse coordinates
To monitor the mouse movement in the current webpage:
1. Open the demo webpage Logging Mouse Movement demo in a new window or tab.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the demo webpage.
3. Move your mouse around over the rendered demo webpage.
Many log messages appear in the Console:

The large amount of information slows down your debugging process, and makes it hard to see the changes that you're trying to monitor. As the Console displays more messages when you move your mouse, the values that you want to see scroll off the screen.
Use Live Expressions to display mouse coordinates
Use Live Expressions to monitor the mouse movement in the current webpage, without relying on verbose log messages.
To use Live Expressions to avoid excessive Console log messages:
1. Open the demo webpage Mouse movement without logging demo in a new window or tab.
This demo webpage uses JavaScript to track the current position of the mouse and stores the coordinates in the x and y global variables.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the demo webpage.
3. Move your mouse around.
The values of the x and y variables are updated, but no log messages are displayed.
4. In the Console tool, click the Create live expression (	) icon next to the Filter text box, and then enter the JavaScript expression x.
5. Repeat the above step to add a second Live Expression for y.
6. Move your mouse around in the rendered webpage.
Now in the Console, the values of the x and y Live Expressions are updated in real time:

Logging Mouse Movement demo
Mouse movement without logging demo
Was this page helpful? 
Fix JavaScript errors that are reported in the Console
Article • 07/12/2023
This article walks you through six demo pages to demonstrate resolving JavaScript errors that are reported in the Console.
Fix JavaScript errors
A major role of the Console is to display any JavaScript errors that are found in the webpage.
Demo page: JavaScript error reported in the Console tool
1. Open the demo webpage JavaScript error reported in the Console tool in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. Click the Console button in the Activity Bar. In DevTools, the Console gives you more information about the error:

Many error messages in the Console have a Search for this message on the Web button, shown as a magnifying glass. For more information, see Search the web for a Console error message string.
The information in this error message suggests that the error is on line 16 of the error.html file.
4. Click the error.html:16 link on the right of the error message in the Console. The Sources tool opens and highlights the line of code with the error:
The script tries to get the first h2 element in the document and paint a red border around it. But no h2 element exists, so the script fails.
Find and debug network issues
The Console reports network errors.
Demo page: Network error reported in Console
1. Open the demo webpage Network error reported in Console in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
The table displays loading, but nothing changes on the webpage, because the data is never retrieved. In the Console, the following two errors occurred:
A network error that starts with GET HTTP method followed by a URI.
An Uncaught (in promise) TypeError: data.forEach is not a function error.
3. Click the link to the webpage and line of code where the error occurs, to open the Sources tool. That is, click the network-error.html:40 link in the Console:
The Sources tool opens. The problematic line of code is highlighted and followed

This error informs you that the requested URL isn't found.
5. Open the Network tool, as follows: open the Console, and then click the URI that's associated with the error.
The Console displays an HTTP status code of the error after a resource isn't loaded:

The Network tool displays more information about the failed request:

6. Inspect the headers in the Network tool to get more insight:

the word repos.
7. Open the Sources tool and inspect line 26. A trailing slash character (/) occurs at the end of the base URI. The Sources tool displays the line of code with the error:

Viewing the resulting page when there are no errors in the Console
Next, we'll look at the resulting page when there are no errors in the Console.
Demo page: Fixed network error reported in Console
1. Open the demo webpage Fixed network error reported in Console in a new window or tab.
The example without any errors loads information from GitHub and displays it:

Demo page: Network error reporting in Console and UI
Use defensive coding techniques to avoid the previous user experiences. Make sure your code catches errors and displays each error in the Console, as follows:
1. Open the demo webpage Network error reporting in Console and UI in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
The example webpage demonstrates these practices:
Provide a UI to the user to indicate that something went wrong.
In the Console, provide helpful information about the Network error from your code.
The example catches and reports errors:
The following code in the demo catches and reports errors using the handleErrors method, specifically the throw Error line:
JavaScriptconst handleErrors = (response) => {    if (!response.ok) {       let message = 'Could not load the information'       document.querySelector('tbody').innerHTML = `
      <tr><td colspan=3>Error ${message}</td></tr>
      `;       throw Error(response.status + ' ' + response.statusText);
   }
   return response;
};Create errors and traces in the Console
Besides the throw Error example in the previous section, you can also create different errors and trace problems in the Console.
Demo page: Creating error reports and assertions in Console
To display two created error messages in the Console:
1. Open the demo page Creating error reports and assertions in Console in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
Error messages appear in the Console:

The demo page uses the following code:
JavaScriptfunction first(name) { second(name); } function second(name) { third(name); } function third(name) {     if (!name) {         console.error(`Name isn't defined :(`)
    } else {         console.assert(             name.length <= 8,
            `"${name} is not less than eight letters"`
        );
    } } first(); first('Console'); first('Microsoft Edge Canary');There are three functions that request each other in succession:
first() second() third()
Each function sends a name argument to the other. In the third() function, you check if the name argument exists and if it doesn't, you log an error that name isn't defined. If name is defined, you use the assert() method to check if the name argument is fewer than eight letters long.
You request the first() function three times, with the following parameters:
 No argument that triggers the console.error() method in the third() function.
 The term Console as a parameter to the first() function doesn't cause an error because name argument exists and is shorter than eight letters.
 The phrase Microsoft Edge Canary as a parameter to first() function causes the console.assert() method to report an error, because the parameter is longer than eight letters.
The demo uses the console.assert() method to create conditional error reports. The following two examples have the same result, but one needs an extra if{} statement:
JavaScriptlet x = 20; if (x < 40) { console.error(`${x} is too small`) }; console.assert(x >= 40, `${x} is too small`)The second and third lines of the code perform the same test. Because the assertion needs to record a negative result:
You test for x < 40 in the if case.
You test for x >= 40 for the assertion.
Demo page: Creating traces in Console
If you aren't sure which function requests another function, use the console.trace() method to track which functions are requested in order to get to the current function.
To display the trace in the Console:
1. Open the demo page Creating traces in Console in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
The page uses this code:
JavaScriptfunction here() {there()} function there() {everywhere()} function everywhere() {    console.trace();
} here(); there();The result is a trace to display that here() is named there() and then everywhere(), and in the second example to display that it's named everywhere().
Here's the trace that's produced, in the Console:

See also
 Console overview - General use of the Console to display and resolve error messages.

Feedback
Was this page helpful? 

Interact with the DOM using the Console
Article • 12/07/2023
The Console tool is a great way to interact with the webpage in the browser. In DevTools, you usually interact with the DOM by using the Inspect tool to select elements, and by using the Elements tool to modify the DOM, for example to add or change element attributes or styles.
The Console tool can also be used to interact with the DOM by using JavaScript code. For example, you can find elements in the DOM tree and manipulate them by using DOM APIs.
To learn more about the Inspect tool, see Analyze pages using the Inspect tool. To learn more about the Elements tool, see Inspect, edit, and debug HTML and CSS with the Elements tool.
Find an element in the DOM tree
To find an element in the DOM tree from the Console tool:
1. Go to the webpage that you want to inspect. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. Type or paste the following code into the Console, and then press Enter.
JavaScriptdocument.querySelector('main');The <main> element from the DOM tree is displayed in the Console:

In the rendered webpage, DevTools highlights the corresponding <main> element:
Change the DOM of the webpage
You can make changes to the DOM tree of the webpage from the Console tool. In this example, you set the value of a DOM element attribute by using the Console, to affect the element's styling: you add a grey background to the <h1> title of the page.
1. Go to the webpage that you want to change. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. Paste the following code into the Console:
JavaScriptdocument.querySelector("h1").style.backgroundColor = "lightgrey";A grey background appears behind the page title:

Get a reference to an element
In a complex webpage, it can be hard to find the right element to change. But you can use the Inspect tool to help you. Suppose you want to change the text of the first link within the Section 1 element of the rendered page:

To get a reference to the link element that you want to change:
1. Go to the webpage that you want to inspect. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. Click the Inspect () tool, and then in the rendered webpage, hover over a link, such as Link 1:

4. Click the hovered link on the rendered webpage. DevTools opens the Elements tool, with the corresponding element selected:


Here's the JS path you copied:
JavaScript
document.querySelector("body > main > section:nth-child(1) > ul > li:nth-child(1) > a")
The above path is a CSS selector that points to the link element you selected by using the Inspect tool.
6. In the Console, paste the JavaScript path that you copied, but don't press Enter yet.
7. Change the text of the link to Updated link. To do that, add .textContent = "Updated link" to the JavaScript path that you previously pasted:
Use any DOM APIs you want to change the DOM tree in the Console. To make it more convenient, the Console comes with a few helper utility methods.
Helpful console utility functions
Many convenience methods and shortcuts are available to you as utility functions in the
Console tool. Some of these utility functions are very useful for interacting with the DOM tree of a webpage, and are described below. To learn more, see Console tool utility functions and selectors.
Get elements with the $ functions and shortcuts
The $ character has a special meaning in the Console tool:
 The $() and $$() functions are shorter versions of the document.querySelector() and document.querySelectorAll() functions.
$0, $1, $2, $3, and $4 are shortcuts to elements that you recently selected in the Elements tool. $0 is always the most recently selected element. So, in the earlier example Get a reference to an element, once you've selected the element by using the Inspect tool, you can change its text by using $0.textContent = "Updated link" to get the same effect.
$x() allows you to select DOM elements using XPath.
Get all links from the page
In this example, you use the $$() utility function to list all links on the webpage. You then use that function along with the filter() array method to get rid of the links that don't start with https (such as the anchor links in the present webpage), in order to filter the list to only include external links.
1. Go to the webpage that you want to get the links from. For example, open the
DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. To get the list of all links in the page, enter the following code in the Console, and then press Enter:
JavaScript$$('a');
4. Expand the list of links that's logged in the Console, and then expand the first link object. The link's properties are displayed:

JavaScript
$$('a').map(a => {   return {url: a.getAttribute("href"), text: a.innerText} });
The above code returns an array of all the links, where each link object is mapped to a JavaScript objects with the url and text properties.
6. Expand a few of the returned link objects to see their properties:
JavaScript$$('a').map(a => {    return {url: a.getAttribute("href"), text: a.innerText}
}).filter(a => {
   return a.url.startsWith("https");
});
Display DOM elements in a table
In the previous example, you displayed a list of elements from the page in the Console. The elements are displayed as a JavaScript array. To make it easier to use the list of elements in the Console, you can display them in a sortable table instead, by using the
console.table() utility function:
1. Go to the webpage that you want to inspect. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. Paste the following code into the Console, and then press Enter:
JavaScriptconsole.table($$('img'), ['src','alt'])The list of <img> elements on the webpage is displayed in the Console, formatted as a table, with each image's src and alt attributes as columns:

Get all page headings and anchor URLs
In this example, you get all the headings on the webpage that have an id attribute, and you generate a URL that points to each heading.
1. Go to the webpage that you want to inspect. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. Copy and paste the following code into the Console, and then press Enter:
JavaScriptlet headings = $$('main [id]').filter(el => {   return el.nodeName.startsWith('H');
}).map(el => {
  return `${el.innerText}: ${document.location.href}#${el.id}\n`;
}); console.log(headings.join("\n"));The result is text that contains content for each section heading, followed by the full URL for the section heading:

Copy information from the Console
In the previous examples, you generated lists of elements and strings of information. It can be useful to copy the generated information from the Console and paste it somewhere else.
To copy the return value from an expression that you run in the Console, use the copy() utility function:
1. Go to the webpage that you want to extract some information from. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. To copy the list of all image URLs on the page, enter the following code in the Console, and then press Enter:
JavaScriptcopy($$('img').map(img => img.src).join("\n"));The copy() utility function can take any argument that can be converted into a string and copies it to the clipboard. In this example, the argument is a string that contains all the image URLs on the page, separated by a new line.
4. Open a text editor, such as Visual Studio Code, and then paste the copied image URLs into the editor:

Clear the Console
When running code in the Console, you often end up with many input statements and output results that you no longer need to display. You can clear the Console by using the clear() utility function.
List the event listeners that are assigned to an element
To list all event listeners that are assigned to an element, use the getEventListeners() utility function:
1. Go to the webpage that you want to inspect. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. Click the Inspect tool, and then in the rendered webpage, click one of the images to select it. The Elements tool is displayed, and the image element you selected is highlighted in the DOM tree:

4. Open the Console tool, enter the following code, and then press Enter:
JavaScriptgetEventListeners($0);In the above code snippet, $0 is a shortcut to the currently selected <img> element in the Elements tool. The getEventListeners() utility function returns an object that contains all the event listeners that are assigned to the image.
5. Expand the object, and then expand the only event listener in the list to see the listener's properties. The listener property shows the name of the function that's called when the event is triggered (in this example, showImage):

Monitor events triggered on the page
Websites that use JavaScript often react to user events that happen in the browser. It can be difficult to keep track of all the events that are triggered by the browser. The monitorEvents() utility function allows you to monitor events that are triggered on the
webpage.
Monitor all events on an element
To start monitoring events:
1. Go to the webpage that you want to monitor. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. To start monitoring the events triggered on an element, for example on one of the <img> elements, enter the following code in the Console, and then press Enter:
JavaScriptmonitorEvents(document.querySelector('img'));The above code monitors all events that are triggered on the first <img> element on the page.
4. In the rendered webpage, hover over the image, and move your mouse, or tab to the image with the keyboard. Events such as mouseover, mousemove, and focus get logged to the Console:

When you monitor events, you get logs in the Console every time an event is triggered by the browser. This can lead to a lot of noise in the Console. You can also monitor specific events on an element.
Monitor specific events on an element
To start monitoring specific events on an element:
1. Go to the webpage that you want to monitor. For example, open the DevTools Console tool DOM interactions demo page in a new tab or window.
2. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). The Console tool opens in DevTools, next to the webpage.
3. To start monitoring only the mousedown, mouseup, and click events that are triggered on a the first <img> element on the page, enter the following code in the Console, and then press Enter:
JavaScriptmonitorEvents(document.querySelector('img'), ['mousedown', 'mouseup', 
'click']);4. In the rendered webpage, click the first image. mousedown, mouseup, and click events get logged to the Console:

Monitor events on the Window
To get a notification in the Console every time you scroll or resize the window:
1. Paste the following code into the Console:
JavaScriptmonitorEvents(window, ['resize', 'scroll']);2. Scroll the page and resize the browser window. The Console logs the events that are triggered:

Stop monitoring events
While monitoring events in the DOM, the Console can get noisy. To stop monitoring events, use the unmonitorEvents() utility function:
JavaScriptunmonitorEvents(document.querySelector('img'));
unmonitorEvents(document.querySelector('img'), ['mousedown', 'mouseup', 
'click']); unmonitorEvents(window, ['resize', 'scroll']);Save DOM interaction scripts as snippets
If you enter the same DOM interaction code repeatedly in the Console, consider instead saving the code as a snippet and then running the snippet. Snippets are saved in the Sources tool, and you can run them from there or from the Command menu. To learn more, see Run snippets of JavaScript on any webpage.
See also
Log messages in the Console tool
Run JavaScript in the Console
Filter Console messages
Article • 06/14/2023
Use the filter options of the DevTools Console to reduce the noise from excessive console log messages, to better see the type of log messages that you're looking for.
When you go to various webpages, you may find that the Console is flooded with all kinds of information. Often the information isn't relevant to you, such as information about the page that another developer logged. Or you might see logged information about violations and warnings about the performance of the current site, that you aren't able to change.
You can filter console log messages in various ways:
Filter by log level.
Filter by text.
Filter by regular expression.
Filter by message source.
Filter by log level
Each method of the console object has a severity level attached to it. The severity levels are Verbose, Info, Warning, or Error. Display the severity levels in the API documentation. For example, console.log() is an Info-level message, but
console.error() is an Error-level message.
To filter messages in the Console, use the Log Level dropdown menu. You may toggle the state of each level. To turn off each level, remove the checkmark next to each.

Since no filter is applied, the following figure displays dozens of messages. Next, reduce and manage the number of messages.

To hide all the Warning-level messages to cut down on the noise, click the Log Levels dropdown list, and then clear the Warnings level.

Filter by text
To see more detail, to filter messages using text, type a string into the Filter text box. For example, type block into the box to only display your messages about the browser blocking resources from loading.

Filter by regular expression
Regular expressions are a powerful way to filter messages. For example, type
/^Tracking/ into the Filter text box to only display messages that start with the term
Tracking. If you're unfamiliar with regular expressions, RegExr.com is a great resource to learn about using regular expressions.

Filter by message source
You can define what kind of messages you want to display, and where each message originated, by using the Sidebar of the Console.
1. Click the Show console sidebar button:

When the Sidebar is open, you can display the overall number of messages and where each originated. The options are All messages, User Messages, Errors, Warnings, Info, and Verbose.

2. Select any of the options to display only the messages of that type. For example, to display user messages, click the user messages option to display less noise.

3. To filter more and expand the message category, click the triangle icon next to the message category.

4. Individual sources are revealed and listed. Select a source, to display only messages that originate from that source:


Sources tool overview
Article • 12/07/2023
Use the Sources tool to view, modify, and debug front-end JavaScript code, and to inspect the resources that make up the current webpage.
Detailed contents:
The Navigator, Editor, and Debugger panes
Using the Navigator pane to select files
Using the Page tab to explore resources that construct the current webpage
Using the Filesystem tab to define a local Workspace
Using the Overrides tab to override server files with local files
Using the Content scripts tab for Microsoft Edge extensions
Using the Snippets tab to run JavaScript code snippets on any webpage
Using the Command Menu to open files
Using the Editor pane to view or edit files
Editing a JavaScript file
Reformatting a minified JavaScript file with pretty-print
Mapping minified code to your source code to show readable code
Transformations from source code to compiled front-end code
Editing a CSS file
Editing an HTML file
Going to a line number or function
Displaying source files when using a different tool
Using the Debugger pane to debug JavaScript code
The basic approach to using a debugger
Advantages of the debugger's Watch and Scope over console.log
Debug from Visual Studio Code directly
Articles about debugging
The Navigator, Editor, and Debugger panes
The Sources tool has three panes:
ﾉ Expand table
PaneActionsNavigator paneNavigate among the resources that are returned from the server to construct the current webpage. Select files, images, and other resources, and view their paths.PaneActionsOptionally, set up a local Workspace to save changes directly to source files.Editor paneView JavaScript, HTML, CSS, and other files that are returned from the server. Make experimental edits to JavaScript or CSS. Your changes are preserved until you refresh the page, or are preserved after page refresh if you save to a local file with Workspaces. When you use Workspaces or Overrides, you can edit HTML files as well.Debugger paneUse the JavaScript Debugger to set breakpoints, pause running JavaScript, and step through the code, including any edits you have made, while watching any JavaScript expressions you specify. Watch and manually change the values of variables that are in-scope for the current line of code.The following figure shows the Navigator pane highlighted with a red box in the upper left corner of DevTools, the Editor pane highlighted in the upper right, and the Debugger pane highlighted on the bottom. On the far left side is the main part of the browser window, showing the rendered webpage grayed-out because the debugger is paused on a breakpoint:

When DevTools is wide, the Debugger pane is placed on the right, and includes Scope and Watch:

To maximize the size of the Sources tool, undock DevTools into a separate window, and optionally move the DevTools window to a separate monitor. See Change DevTools placement (Undock, Dock to bottom, Dock to left).
To load the debugging demo webpage that's shown above, see The basic approach to using a debugger, below.
Using the Navigator pane to select files
Use the Navigator pane (on the left) to navigate among the resources that are returned from the server to construct the current webpage. Select files, images, and other resources, and view their paths.

To access any hidden tabs of the Navigator pane, click the More tabs () button. The following subsections cover the Navigator pane:
Using the Page tab to explore resources that construct the current webpage
Using the Filesystem tab to define a local Workspace
Using the Overrides tab to override server files with local files
Using the Content scripts tab for Microsoft Edge extensions
Using the Snippets tab to run JavaScript code snippets on any page Using the Command Menu to open files
Using the Page tab to explore resources that construct the current webpage
Use the Page tab of the Navigator pane to explore the file system that's returned from the server to construct the current webpage. Select a JavaScript file to view, edit, and debug it. The Page tab lists all of the resources that the page has loaded.

To display a file in the Editor pane, select a file in the Page tab. For an image, a preview of the image is displayed.
To display the URL or path for a resource, hover over the resource.
To load a file into a new tab of the browser, or to display other actions, right-click on the file name.
Icons in the Page tab
The Page tab uses the following icons:
 The window icon, along with the label top, represents the main document frame, which is an HTML frame
The cloud icon represents an origin The folder icon represents a directory: The page icon represents a resource: 
Group files by folder or as a flat list
The Page tab displays files or resources grouped by server and directory, or as a flat list.
To change how resources are grouped:
1. Next to the tabs on the Navigator pane (on the left), select the ... (More options) button. A menu appears.
2. Select or clear the Group by folder option.
Using the Filesystem tab to define a local Workspace
Use the Filesystem tab of the Navigator pane to add files to a Workspace, so that changes you make in DevTools get saved to your local file system.

By default, when you edit a file in the Sources tool, your changes are discarded when you refresh the webpage. The Sources tool works with a copy of the front-end resources that are returned by the web server. When you modify these front-end files that are returned by the server, the changes don't persist, because you didn't change the source files. You need to also apply your edits in your actual source code, and then re-deploy to the server.
In contrast, when you use a Workspace, changes that you make to your front-end code are preserved when you refresh the webpage. With a Workspace, when you edit the front-end code that's returned by the server, the Sources tool also applies your edits to your local source code. Then for other users to see your changes, you only need to redeploy your changed source files to the server.
Workspaces work well when the JavaScript code that's returned by the server is the same as your local JavaScript source code. Workspaces don't work as well when your workflow involves transformations on your source code, such as minification or TypeScript compilation.
See also:
Edit files with Workspaces (Filesystem tab)
Open a demo folder in the Sources tool and edit a file in Sample code for DevTools.
Using the Overrides tab to override server files with local files
Use the Overrides tab of the Navigator pane to override page assets (such as images) with files from a local folder.
Items in this tab override what the server sends to the browser, even after the server has sent the assets.

The Overrides feature is similar to Workspaces. Use Overrides when you want to experiment with changes to a webpage, and you need to keep the changes after you refresh the webpage, but you don't care about mapping your changes to the source code of the webpage.
A file that overrides a file that is returned by the server is indicated by a purple dot next to the file name, throughout DevTools.
See also:
Override webpage resources with local copies (Overrides tab)
Map the processed code to your original source code, for debugging
Sources tool keyboard shortcuts in Keyboard shortcuts
Using the Content scripts tab for Microsoft Edge extensions
Use the Content scripts tab of the Navigator pane to view any content scripts that were loaded by a Microsoft Edge extension that you installed.

When the debugger steps into code that you don't recognize, you might want to add that code to the Ignore List, to avoid stepping into that code. See Add content scripts to the Ignore List.
See also:
Content scripts
Sample: Picture inserter using content script
Using the Snippets tab to run JavaScript code snippets on any webpage
Use the Snippets tab of the Navigator pane to create and save JavaScript code snippets, so that you can easily run these snippets on any webpage.

For example, suppose you frequently enter the following code in the Console, to insert the jQuery library into a page so that you can run jQuery commands from the Console:
JavaScriptlet script = document.createElement('script'); script.src = 'https://code.jquery.com/jquery-3.2.1.min.js'; script.crossOrigin = 'anonymous'; script.integrity = 'sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4='; document.head.appendChild(script);Instead, you can save this code in a Snippet and then easily run it whenever you need to. When you press Ctrl+S (Windows, Linux) or Command+S (macOS), DevTools saves the Snippet to your file system.
There are multiple ways to run a Snippet:
 In the Navigator pane, select the Snippets tab, and then select the snippets file to open it. Then at the bottom of the Editor pane, select Run ().
 When DevTools has focus, press Ctrl+P (Windows, Linux) or Command+P (macOS) to open the Command Menu, and then type !.
Snippets are similar to bookmarklets.
See also:
 Run snippets of JavaScript on any webpage
Using the Command Menu to open files
To open a file, in addition to using the Navigator pane within the Sources tool, you can use the Command Menu from anywhere within DevTools.
 From anywhere in DevTools, press Ctrl+P on Windows/Linux or Command+P on macOS. The Command Menu appears, and lists all the resources that are in the tabs of the Navigator pane of the Sources tool.
 Or, next to the tabs of the Navigator pane in the Sources tool, select the ... (More options) button, and then select Open File.
To display and pick from a list of all .js files, type .js.

If you type ?, the Command Menu shows several commands, including ... Open file. If you press Backspace to clear the Command Menu, a list of files is shown.
For more information, see Run commands with the Microsoft Edge DevTools Command Menu.
Using the Editor pane to view or edit files
Use the Editor pane to view the front-end files that are returned from the server to compose the current webpage, including JavaScript, HTML, CSS, and image files. When you edit the front-end files in the Editor pane, DevTools updates the webpage to run the modified code.

The Editor pane has the following level of support for various file types:
ﾉ Expand table
File TypeSupported ActionsJavaScriptView, edit, and debug.CSSView and edit.HTMLView and edit.ImagesView.By default, edits are discarded when you refresh the webpage. For information about how to save the changes to your file system, see Using the Filesystem tab to define a local Workspace, above.
The following subsections cover the Editor pane:
Editing a JavaScript file
Reformatting a minified JavaScript file with pretty-print
Mapping minified code to your source code to show readable code
Transformations from source code to compiled front-end code
Editing a CSS file
Editing an HTML file
Going to a line number or function
 Displaying source files when using a different tool
See also:
 Open a demo folder in the Sources tool and edit a file in Sample code for DevTools.
Editing a JavaScript file
To edit a JavaScript file in DevTools, use the Editor pane, within the Sources tool.

To load a file into the Editor pane, use the Page tab in the Navigator pane (on the left). Or use the Command Menu, as follows: in the upper right of DevTools, select Customize and control DevTools (...) and then select Open File.
See also:
 Open a demo folder in the Sources tool and edit a file in Sample code for DevTools.
Save and Undo
For JavaScript changes to take effect, press Ctrl+S (Windows, Linux) or Command+S (macOS).
If you change a file, an asterisk appears next to the file name.
To save changes, press Ctrl+S on Windows/Linux or Command+S on macOS.
To undo a change, press Ctrl+Z on Windows/Linux or Command+Z on macOS.
By default, your edits are discarded when you refresh the webpage. For more information about how to save the changes in your local file system, see Edit files with Workspaces (Filesystem tab).
Find and Replace
To find text in the current file, select the Editor pane to give it focus, and then press Ctrl+F on Windows/Linux, or Command+F on macOS.

To find and replace text, select the Replace (A->B) button to the left of the Find text box. The Replace (A->B) button appears when viewing an editable file.
Reformatting a minified JavaScript file with pretty-print
Minified files are automatically reformatted when you open them in the Editor pane.
To revert the file to its original minified state, click the Pretty print button (), which is shown as braces, at the bottom of the Editor pane.

For more information, see Reformat a minified JavaScript file with pretty-print.
Mapping minified code to your source code to show readable code
Source maps from pre-processors cause DevTools to load your original JavaScript source files in addition to your minified, transformed JavaScript files that are returned by the server. You then view your original source files while you set breakpoints and step through code. Meanwhile, Microsoft Edge is actually running your minified code.
In the Editor pane, if you right-click a JavaScript file and then select Add source map, a popup box appears, with a Source map URL text box and an Add button.
The source-mapping approach keeps your front-end code human-readable and debuggable even after you combine, minify, or compile it. For more information, see Map the processed code to your original source code, for debugging.
Transformations from source code to compiled front-end code
If you use a framework that transforms your JavaScript files, such as React, your local source JavaScript might be different than the front-end JavaScript that's returned by the server. Workspaces aren't supported in this scenario, but source code mapping is supported in this scenario.
In a development environment, your server might include your source maps and your original .ts or .jsx files for React. The Sources tool displays these files, but doesn't allow you to edit these files. When you set breakpoints and use the debugger, DevTools displays your original .ts or .jsx files, but actually steps-through the minified version of your JavaScript files.
In this scenario, the Sources tool is useful for inspecting and stepping-through the transformed, front-end JavaScript that's returned from the server. Use the debugger to define Watch expressions, and use the Console to enter JavaScript expressions to manipulate data that's in-scope.
Editing a CSS file
There are two ways to edit CSS in DevTools:
 In the Elements tool, you work with one CSS property at a time, through user interface controls. This approach is recommended in most cases. For more information, see Get started viewing and changing CSS.  In the Sources tool, you use a text editor to edit CSS files.
The Sources tool supports directly editing a CSS file. For example, if you edit the CSS file from the tutorial Edit files with Workspaces (Filesystem tab) to match the style rule below, the H1 element in the upper left of the rendered webpage changes to green:
cssh1 {
  color: green;
}
CSS changes take effect immediately; you don't need to manually save the changes.
See also:
Edit CSS font styles and settings in the Styles pane
Sources tool keyboard shortcuts in Keyboard shortcuts
Open a demo folder in the Sources tool and edit a file in Sample code for DevTools.
Editing an HTML file
There are two ways to edit HTML in DevTools:
 In the Elements tool, you work with one HTML element at a time, through user interface controls.
 In the Sources tool, you use a text editor.

Unlike a JavaScript or CSS file, an HTML file that is returned by the web server cannot be directly edited in the Sources tool. To edit an HTML file using the Editor of the Sources tool, the HTML file must be in a Workspace or on the Overrides tab. See these subsections of the current article:
Using the Filesystem tab to define a local Workspace
Using the Overrides tab to override server files with local files
To save changes, press Ctrl+S on Windows/Linux or Command+S on macOS. An edited file is marked by an asterisk.
To find text, press Ctrl+F on Windows/Linux or Command+F on macOS.
To undo an edit, press Ctrl+Z on Windows/Linux or Command+Z on macOS.
To view other commands while editing an HTML file, in the Editor pane, right-click the HTML file.
See also:
 Open a demo folder in the Sources tool and edit a file in Sample code for DevTools.
Going to a line number or function
To go to a line number or symbol (such as a function name) in the file which is open in the Editor pane, you can use the Command Menu, rather than scrolling through the file.
1. In the Navigator pane, select the ellipses (...) (More options), and then select Open File. The Command Menu appears. 2. Type one of the following characters:
ﾉ Expand table
CharacterCommand namePurpose:Go to lineGo to a line number.@Go to symbolGo to a function. When you type @, the Command Menu lists the functions that are found in the JavaScript file which is open in the Editor pane.For more information, see Run commands with the Microsoft Edge DevTools Command Menu.
Displaying source files when using a different tool
The main place to view source files in the DevTools is within the Sources tool. But sometimes you need to access other tools, such as Elements or Console, while viewing or editing your source files. You use the Quick source tool in the Quick View panel at the bottom of DevTools.
To use the Quick source tool:
1. Select a tool other than the Sources tool, such as the Elements tool.
2. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS). The Command Menu opens.
3. Type quick, and then select Show Quick source.
The Quick View panel opens at the bottom of DevTools, with the Quick source tool selected. The Quick source tool contains the last file you edited in the Sources tool, within a compact version of the DevTools code editor.
4. Press Ctrl+P (Windows, Linux) or Command+P (macOS) to open the Open File dialog.
Using the Debugger pane to debug JavaScript code
Use the JavaScript debugger to step through the JavaScript code that's returned by the server. The debugger includes the Debugger pane, along with breakpoints that you set on lines of code in the Editor pane.
With the debugger, you step through the code, while watching any JavaScript expressions you specify. Watch and manually change variable values, and automatically show which variables are in-scope for the current statement.

The debugger supports standard debugging actions, such as:
Setting breakpoints, to pause code.
Stepping through code.
Viewing and editing properties and variables.
Watching the values of JavaScript expressions.
Viewing the call stack (the sequence of function calls so far).
The debugger in DevTools is designed to look, feel, and work like the debugger in Visual Studio Code and the debugger in Visual Studio.
The following subsections cover debugging:
The basic approach to using a debugger
Advantages of the debugger's Watch and Scope over console.log
Debug from Visual Studio Code directly
 Articles about debugging
The basic approach to using a debugger
To troubleshoot JavaScript code, you can insert console.log() statements in your code.
Another, more powerful approach is to use the debugger of Microsoft Edge DevTools. Using a debugger can actually be simpler than console.log(), once you're familiar with the debugger approach.
To use a debugger on a webpage, you typically set a breakpoint and then send a form from the webpage, as follows:
1. Open the Demo: Get Started Debugging JavaScript with Microsoft Edge DevTools webpage in a new window or tab.
2. Right-click anywhere in the webpage, and then select Inspect. Or, press F12. The DevTools window opens, next to the demo webpage.
3. In DevTools, select the Sources tab.
4. In the Navigator pane (on the left), select the Page tab, and then select the JavaScript file, such as get-started.js.
5. In the Editor pane, select a line number near a suspect line of code, to set a breakpoint on that line. In the figure below, a breakpoint is set on the line var sum = addend1 + addend2;.
6. In the webpage, enter values and submit the form. For example, enter numbers, such as 5 and 1, then select the button Add Number 1 and Number 2.
The debugger runs the JavaScript code and then pauses at the breakpoint. The debugger is now in Paused mode, so you can inspect the values of the properties that are in-scope, and step through the code.

stepped two lines past the breakpoint.
7. Examine the values in the Scope pane, which shows all variables or properties that are in-scope for the current breakpoint, and their values.
At this point, you could add expressions in the Watch pane. These expressions are the same expressions that you would write within a console.log statement to debug your code.
To run JavaScript commands to manipulate data in the current context, you use the Console. If you want to open the Console in the Quick View panel at the bottom of DevTools, press Esc.
8. Step through the code by using the controls at the top of the Debugger pane, such as Step (F9).
The bug in this demo is that you need to first convert the input data from strings to numbers.
9. To fix the bug, refresh the page to reset the webpage form, and then change the line:
JavaScriptvar sum = addend1 + addend2;to:
JavaScript
var sum = parseInt(addend1) + parseInt(addend2);
10. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save the change in the local cached file.
11. Enter 5 and 1 into the webpage and then click the Add button. Now Scope > Local > sum: is the number 6, instead of the string "51".
See also:
Sources tool keyboard shortcuts in Keyboard shortcuts
Get started debugging JavaScript - a tutorial using an existing, simple webpage that contains a few form controls.
Advantages of the debugger's Watch and Scope over console.log
These three approaches are equivalent:
Temporarily adding the statements console.log(sum) and console.log(typeof sum) in the code, where sum is in-scope.
Issuing the statements sum and console.log(typeof sum) in the Console pane of the DevTools, when the debugger is paused where sum is in-scope.
 Setting the Watch expressions sum and typeof sum in the Debugger pane.
When the variable sum is in-scope, sum and its value are automatically shown in the
Scope section of the Debugger pane, and are also overlaid in the Editor pane where sum is calculated. So you probably wouldn't need to define a Watch expression for sum.
The debugger gives a richer, more flexible display and environment than a console.log statement. For example, in the debugger, as you step through the code, you can display and change the values of all currently defined properties and variables. You can also issue JavaScript statements in the Console, such as to change values in an array that's in-scope. (To show the Console, press Esc.)
Breakpoints and Watch expressions are preserved when you refresh the webpage.
Debug from Visual Studio Code directly
To use the more full-featured debugger of Visual Studio Code instead of the DevTools debugger, use the Microsoft Edge DevTools extension for Visual Studio Code.

This extension provides access to the Elements and Network tools of Microsoft Edge DevTools, from within Microsoft Visual Studio Code.
For more information, see Visual Studio Code for web development and the GitHub Readme page, Microsoft Edge Developer Tools for Visual Studio Code.
Articles about debugging
The following articles cover the Debugger pane and breakpoints:
 Get started debugging JavaScript - A tutorial (with screen captures), using an existing, simple project.
 JavaScript debugging features - How to use the debugger to set breakpoints, step through code, view and modify variable values, watch JavaScript expressions, and view the call stack.
 Pause your code with breakpoints - How to set basic and specialized breakpoints in the debugger.
See also


Feedback
Was this page helpful? 

Get started debugging JavaScript
Article • 12/07/2023
This article teaches you the basic workflow for debugging any JavaScript issue using DevTools.
Step 1: Reproduce the bug
The first step in debugging is to find a sequence of actions that consistently reproduce a bug.
1. Open the demo webpage Get Started Debugging JavaScript in a new window or tab. To open the webpage, right-click the link and select "Open link in new tab" or "Open link in new Window" on the popup window. Alternatively you can press and hold Ctrl (for Windows, Linux) or Command (for macOS), and then click the link.
Tip: Open Microsoft Edge in InPrivate Mode, to ensure that Microsoft Edge runs in a clean state. For more information, see Browse InPrivate in Microsoft Edge
2. Enter 5 in the Number 1 text box.
3. Enter 1 in the Number 2 text box.
4. Click Add Number 1 and Number 2. The label below the button says 5 + 1 = 51, instead of the expected result of 6:

Step 2: Get familiar with the Sources tool UI
DevTools provides several tools for different tasks. These tasks include changing CSS, profiling page-load performance, and monitoring network requests. The Sources tool is where you debug JavaScript.
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens:

2. Select the Sources tool. Select the Page tab, and then select the JavaScript file,


is listed here.
 The Editor pane (in the upper right corner). After you select a file in the Navigator pane, this pane displays the contents of the file.
 The Debugger pane (at the bottom). This pane provides tools for inspecting the JavaScript for the webpage. If your DevTools window is wide, this pane is displayed to the right of the Editor pane.
Step 3: Pause the code with a breakpoint
A common method for debugging this type of problem is to insert several console.log() statements into the code and then to inspect values as the script runs.
For example:
JavaScriptfunction updateLabel() {     var addend1 = getNumber1();     console.log('addend1:', addend1);     var addend2 = getNumber2();     console.log('addend2:', addend2);     var sum = addend1 + addend2;     console.log('sum:', sum);    label.textContent = addend1 + ' + ' + addend2 + ' = ' + sum; }
The console.log() method might get the job done, but breakpoints get it done faster.
A breakpoint allows you to pause your code in the middle of the runtime, and examine all values at that moment in time. Breakpoints have the following advantages over the console.log() method.
With console.log(), you need to manually open the source code, find the relevant code, insert the console.log() statements, and then refresh the webpage to display the messages in the Console. With breakpoints, you can pause on the relevant code without having to know how the code is structured.
 In your console.log() statements, you need to explicitly specify each value that you want to inspect. With breakpoints, DevTools shows you the values of all variables at that moment in time. Sometimes variables that affect your code are hidden and obfuscated.
In short, breakpoints can help you find and fix bugs faster than the console.log() method.
Event listener breakpoints
If you step back and think about how the app works, you might make an educated guess that the incorrect sum (5 + 1 = 51) is computed in the click event listener associated with the Add Number 1 and Number 2 button. So, you probably want to pause the code around the time that the click listener runs. Event Listener Breakpoints let you do that:
1. In the Navigator pane, (index) is selected by default. Click get-started.js.
2. In the Debugger pane, click Event Listener Breakpoints to expand the section.
DevTools reveals a list of event categories, such as Animation and Clipboard.
3. Click Expand () by the Mouse event open that category. DevTools reveals a list of mouse events, such as click and mousedown. Each event has a checkbox next to it.
4. Select the checkbox next to click:

5. In the rendered demo webpage, click the Add Number 1 and Number 2 button again. DevTools pauses the demo and highlights a line of code in the Sources tool.
DevTools pauses on line 16 in get-started.js, shown in the next code snippet:
JavaScriptif (inputsAreEmpty()) {If you pause on a different line of code, click Resume Script Execution () until you pause on the correct line.
７ Note
If you paused on a different line, you have a browser extension that registers a click event listener on every webpage that you visit. You are paused in the click listener of the extension. If you use InPrivate Mode to browse in
private, which disables all extensions, you might see that you pause on the desired line of code every time.
Event Listener Breakpoints are just one of many types of breakpoints available in
DevTools. Memorize all the different types to help you debug different scenarios as quickly as possible. To learn when and how to use each type, see Pause your code with breakpoints.
Step 4: Step through the code
One common cause of bugs is when a script runs in the wrong order. Stepping through your code allows you to walk through the runtime of your code. You walk through one line at a time to help you figure out exactly where your code is running in a different order than you expect. Try it now:
1. Click Step over next function call (). DevTools runs the following code without stepping into it:
JavaScriptif (inputsAreEmpty()) {DevTools skips a few lines of code, because inputsAreEmpty() evaluates as false, so the block of code for the if statement doesn't run.
2. On the Sources tool of DevTools, click Step into next function call () to step through the runtime of the updateLabel() function, one line at a time.
That's the basic idea of stepping through code. If you look at the code in getstarted.js, you can see that the bug is probably somewhere in the updateLabel() function. Rather than stepping through every line of code, you can use another type of breakpoint (a line-of-code breakpoint) to pause the code closer to the probable location of the bug.
Step 5: Set a line-of-code breakpoint
Line-of-code breakpoints are the most common type of breakpoint. When you get to the specific line of code you want to pause, use a line-of-code breakpoint.
1. Look at the last line of code in updateLabel():
JavaScriptlabel.textContent = addend1 + ' + ' + addend2 + ' = ' + sum;2. The line number for label.textContent = addend1 + ' + ' + addend2 + ' = ' + sum; is 34. Click line 34. DevTools displays a red circle to the left of 34. The red circle indicates that a line-of-code breakpoint is on this line. DevTools always pauses before this line of code is run.
3. Click the Resume script execution () button:

The script continues to run until it reaches line 34. On lines 31, 32, and 33, DevTools prints the values of each variable to the right of the semi-colon on each line. These values are: addend1 = "5" addend2 = "1" sum = "51"
Step 6: Check variable values
The values of addend1, addend2, and sum look suspicious. These values are wrapped in quotes, which means each value is a string. This is a good clue to the cause of the bug. The next step is to gather more information about these variable values. DevTools provides various ways to examine variable values.
Examining variable values in the Scope pane
If you pause on a line of code, the Scope pane displays the local and global variables that are currently defined, along with the value of each variable:

The Scope pane also displays closure variables, as applicable. If you want to edit a variable value, double-click the value in the Scope pane. If you don't pause on a line of code, the Scope pane is empty.
Examining variable values via Watch expressions
The Watch pane allows you to monitor the values of variables (such as sum) or expressions (such as typeof sum). You can store any valid JavaScript expression in a watch expression.
1. Select the Watch tab.
2. Click Add watch expression (
3. Type the watch expression typeof sum, and then press Enter:

If your DevTools window is wide, the Watch pane is displayed within the Debugger pane, which then appears on the right.
Examining variable values via the Console
The Console allows you to view console.log() output. You can also use the Console to evaluate arbitrary JavaScript statements while the debugger is paused at a code statement. For debugging, you can use the Console to test potential fixes for bugs.
1. If the Console tool is closed, press Esc to open it. The Console tool opens in the lower pane of the DevTools window.
2. In the Console, type the expression parseInt(addend1) + parseInt(addend2). The expression is evaluated for the current scope, given that the debugger is paused on a line of code where addend1 and addend2 are in scope.
3. Press Enter. DevTools evaluates the statement and prints 6 in the Console, which is the correct result you expect the demo to produce:

Step 7: Apply a fix to the returned code and then to your actual source code
We've identified a possible fix for the bug. Next, edit the JavaScript code directly within the DevTools UI and then rerun the demo to test the fix, as follows:

3. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save your change.
4. Click Deactivate breakpoints (). The breakpoint's icon changes to gray to indicate that the breakpoint is inactive. While Deactivate breakpoints is set, DevTools ignores any breakpoints you set. The demo webpage now displays the correct value:

5. Try out the demo with different values. The demo now calculates correctly.
6. When debugging your own project, after you identify the fix, you then fix your actual source code on the server, such as by editing your local source code and then re-deploying your fixed code to the server. The previous steps only apply a fix to a temporary local copy of the code that's sent from the server.
Next steps
Congratulations! You now know how to make the most of Microsoft Edge DevTools when debugging JavaScript. The tools and methods you learned in this article may save you countless hours.
This article showed two ways to set breakpoints. DevTools also provides ways to set breakpoints to pause your code when certain conditions are met, such as:
 Conditional breakpoints that are only triggered when the condition that you provide is true.
Breakpoints on caught or uncaught exceptions.
XHR breakpoints that are triggered when the requested URL matches a substring that you provide.
For more information about when and how to use each type of breakpoint, see Pause your code with breakpoints.
For more information about the debugger buttons for stepping through code, see Step over line of code in "JavaScript debugging features".
See also


Feedback
Was this page helpful? 
Pause code with breakpoints
Article • 12/07/2023
Use breakpoints to pause your JavaScript code. This article explains each type of breakpoint available in DevTools, as well as when to use and how to set each type.
For an introductory tutorial using an existing webpage, see Get started debugging JavaScript.
Overview of when to use each breakpoint type
The most well-known type of breakpoint is line-of-code. But line-of-code breakpoints may be inefficient to set, especially if you don't know exactly where to look, or if you are working with a large codebase. You can save yourself time when debugging by knowing how and when to use the other types of breakpoints.
ﾉ Expand table
Breakpoint typeUse this when you want to pause...Line-of-codeOn an exact region of code.Conditional line-ofcodeOn an exact region of code, but only when some other condition is true.DOMOn the code that changes or removes a specific DOM node, or the children.XHRWhen an XHR URL contains a string pattern.Event listenerOn the code that runs after an event, such as click, runs.ExceptionOn the line of code that is throwing a caught or uncaught exception.FunctionWhenever a specific command, function, or method is run.LogpointsA variant that does not "break" into the debugger but instead logs a message to the console.Line-of-code breakpoints
Use a line-of-code breakpoint when you know the exact region of code that you need to investigate. DevTools always pauses before this line of code is run.
To set a line-of-code breakpoint in DevTools:
1. Select the Sources tool.
2. Open the file that contains the line of code that you want to break on.
3. Go to the line of code.
4. To the left of the line of code is the line number column. Click it. A red icon appears next to the line number column:

Line-of-code breakpoints in your code
Use the debugger statement from your code to pause on that line. This is equivalent to a line-of-code breakpoint, except that the breakpoint is set in your code, not in the DevTools UI.
JavaScriptconsole.log('a'); console.log('b'); debugger; console.log('c');When the above code snippet runs in Microsoft Edge, DevTools pauses on the line that contains the debugger statement, just before running the console.log('c'); line.
Conditional line-of-code breakpoints
Use a conditional line-of-code breakpoint when you know the exact region of code that you need to investigate, but you want to pause only when some other condition is true.
To set a conditional line-of-code breakpoint:
1. Select the Sources tool.
2. Open the file that contains the line of code you want to break on.
3. Go to the line of code.
4. To the left of the line of code is the line number column. Right-click it.
5. Select Add conditional breakpoint. A dialog is displayed underneath the line of code.

6. Enter your condition in the dialog.
7. Press Enter to activate the breakpoint. A red icon appears next to the line number column:

Manage line-of-code breakpoints
Use the Breakpoints pane to disable or remove line-of-code breakpoints from a single location.

To disable all breakpoints, click the Deactive breakpoints () button:

DOM change breakpoints
Use a DOM change breakpoint when you want to pause on the code that changes a DOM node or the children.
To set a DOM change breakpoint:
1. Select the Elements tool.
2. Go the element on which you want to set the breakpoint.
3. Right-click the element, click Break on, and then click subtree modifications, attribute modifications, or node removal:

Types of DOM change breakpoints
 Subtree modifications. Triggered when a child of the currently selected node is removed or added, or the contents of a child are changed. Not triggered on child node attribute changes, or on any changes to the currently selected node.
 Attributes modifications: Triggered when an attribute is added or removed on the currently selected node, or when an attribute value changes.
 Node Removal: Triggered when the currently selected node is removed.
XHR/fetch breakpoints
Use an XHR/fetch breakpoint when you want to break when an XmlHttpRequest (XHR) or Fetch request occurs. DevTools pauses on the line of code where the XHR or Fetch request occurs.
One example of when this is helpful is when your webpage is requesting an incorrect URL, and you want to quickly find the XHR or Fetch source code that is causing the incorrect request.
To set an XHR breakpoint:
1. Select the Sources tool.
2. Expand the XHR/fetch Breakpoints panel.
3. Click Add breakpoint.
4. Enter all or part of the URL that you want to break on. DevTools pauses when the value you enter is present anywhere in an XHR or Fetch request URL.
5. Press Enter to confirm.

Event listener breakpoints
Use event listener breakpoints when you want to pause on the event listener code that runs after an event is fired. You can select specific events, such as click, or categories of events, such as all mouse events.
1. Select the Sources tool.
2. Expand the Event Listener Breakpoints panel. DevTools shows a list of event categories, such as Animation.
3. Select a category, to pause whenever any event from that category is fired. Or, expand the category, and then select a specific event:

Exception breakpoints
Use exception breakpoints when you want to pause on the line of code that is throwing a caught or uncaught exception.
1. Select the Sources tool.
2. To pause when the code throws a JavaScript exception, in the Breakpoints pane, select the Pause on uncaught exceptions checkbox.
3. To pause on caught exceptions, such as when an exception is caught by a try/catch block, select the Pause on caught exceptions checkbox:

Function breakpoints
Run the debug(function) method, where function is the JavaScript function that you want to debug, when you want to pause whenever a specific function is run. You can insert debug() into your code (such as when using a console.log() statement), or run the method from the DevTools Console tool.
debug() is equivalent to setting a line-of-code breakpoint on the first line of the
function.
JavaScriptfunction sum(a, b) {   let result = a + b; // DevTools will pause before running this line.
  return result;
}
// Call the debug method by passing a reference to the function object, // not its name as a string. debug(sum); sum();Make sure the target function is in scope
DevTools throws a ReferenceError if the function you want to debug isn't in scope.
JavaScript
(function () {   function foo() {     console.log('foo');
  }
  function bar() {     console.log('bar');   }
  // Here, calling debug(bar) works because   // bar is defined in the current scope.   debug(bar);
  bar();
})();
// Here, calling debug(foo) won't work, because foo // isn't defined in the current scope.
debug(foo);When you're calling debug() from the Console tool, here's a technique to ensure that the target function is in scope:
1. Set a line-of-code breakpoint somewhere where the function is in scope.
2. Trigger the breakpoint. Your code is paused at the breakpoint, and the variables for the current function are in scope.
3. Call debug() in the DevTools Console, while the code is still paused on your lineof-code breakpoint.
Logpoints
A Logpoint is a breakpoint variant that doesn't "break" in the debugger, but instead logs a message directly to the console. You insert a logpoint via DevTools the same way you would any other breakpoint.
To set a logpoint:
1. Select the Sources tool.
2. Open the file that contains the line of code where you want to insert a logpoint.
3. Right-click on the left of the line of code, in the line number column.
4. Select Add logpoint. A dialog is displayed underneath the line of code.
5. Enter a message or a JavaScript expression that will get evaluated when the logpoint is hit.
6. Press Enter to activate the logpoint. A red icon appears next to the line number.
For more information, see Log messages in the Console tool.
See also
JavaScript debugging features - Using the UI of the debugger in the Sources tool. Get started debugging JavaScript - An introductory tutorial using an existing webpage.
 Sources tool overview - The debugger is part of the Sources tool, which includes a JavaScript editor.


Feedback
Was this page helpful? 
JavaScript debugging features
Article • 03/20/2024
This article covers how to use the debugger features in Microsoft Edge DevTools, including how to set a line-of-code breakpoint.
See also:
Get started debugging JavaScript - tutorial walkthrough.
Pause your code with breakpoints - setting various types of breakpoints.
View and edit JavaScript code
When fixing a bug, you often want to try out some changes to your JavaScript code. You don't need to make the changes in an external editor or IDE, re-upload the file to the server, and then refresh the page; instead, to test changes, you can edit your JavaScript code directly in DevTools and see the result immediately.
To view and edit a JavaScript file:
1. Open the webpage you want to debug in a new window or tab. You can use the Get Started Debugging JavaScript demo page.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.
4. In the Navigator pane, select the file you want to change, to open it in the Editor pane. If you're using the demo page, select get-started.js.
5. In the Editor pane, edit the file. For example, add alert("The add button was clicked"); in the onClick function of the demo page.
6. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save. DevTools then loads the JavaScript file into the JavaScript engine of Microsoft Edge, and the changes take effect immediately.

7. Test the change. For example, click the Add Number 1 and Number 2 button on the demo page. The alert appears.
The change you made in DevTools is useful to quickly test a bug fix, but is temporary. To make the change permanent, you need to make the change in your source code and then re-upload the file to the server.
Explain source code using Copilot in Edge
When inspecting a webpage, you might want more information about the source code that's displayed in the Sources tool. By using the Explain these lines of code feature, you get more information about the source code in Copilot in Edge:

To learn more about this feature, see Explain source code using Copilot in Edge.
Reformat a minified JavaScript file with prettyprint
To make a minified file human-readable, click the Format () button at the bottom of the Editor pane.

Set a breakpoint, to pause code
To pause your code in the middle of the runtime, set a breakpoint. The most basic and well-known type of breakpoint is a line-of-code breakpoint.
Use a line-of-code breakpoint when you know the exact region of code that you need to investigate. DevTools always pauses at the specified line of code, before running it.
To set a line-of-code breakpoint:
1. Open the webpage you want to debug in a new window or tab. You can use the Get Started Debugging JavaScript demo page.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.
4. In the Navigator pane, select the file that contains the line of code you want to debug. If you're using the demo page, select get-started.js.
5. Click the area to the left of the line number for the line of code. Or, right-click the line number and then select Add breakpoint.
A red circle then appears next to the line number, indicating a breakpoint:

Line-of-code breakpoints can sometimes be inefficient to set, especially if you don't know exactly where to look, or if your codebase is large. To save time when debugging, learn how and when to use the other types of breakpoints. See Pause code with breakpoints.
Step through code
After your code is paused at a breakpoint, step through the code, one line at a time, investigating control flow and property values along the way. To learn how to pause at a breakpoint, see Set a breakpoint, to pause code, above.
Step over a line of code
When paused on a line of code containing a function that isn't relevant to the problem you are debugging, click the Step over () button to run the function without stepping into it.

For example, suppose you are debugging the following code snippet:
JavaScriptfunction updateLabel() {     var addend1 = getNumber1(); // A     var addend2 = getNumber2(); // B     var sum = addend1 + addend2; // C     label.textContent = addend1 + " + " + addend2 + " = " + sum;
} function getNumber1() {     return inputs[0].value;
} function getNumber2() {     return inputs[1].value;
}You are paused on A. After you click Step over, DevTools runs all the code in the getNumber1() function and then pauses on B. If you click Step over again, DevTools run
all the code in the getNumber2() function and then pauses on C.
Step into a line of code
When paused on a line of code containing a function call that is related to the problem you are debugging, click the Step into () button to investigate that function further:

For example, suppose you're debugging the following code:
JavaScriptfunction updateLabel() {     var addend1 = getNumber1(); // A     var addend2 = getNumber2();     var sum = addend1 + addend2;     label.textContent = addend1 + " + " + addend2 + " = " + sum;
} function getNumber1() {
    return inputs[0].value; // B
} function getNumber2() {     return inputs[1].value;
}You are paused on A. After you click Step into, DevTools runs this line of code, then pauses on B.
Step out from a line of code
When paused inside of a function that isn't related to the problem you are debugging, click the Step out () button to run the rest of the code of the function.

For example, suppose you're debugging the following code:
JavaScriptfunction onClick() {   if (inputsAreEmpty()) {     label.textContent = "Error: one or both inputs are empty."; // B     return;
  }
  updateLabel(); // C
} function inputsAreEmpty() {   if (getNumber1() === "" || getNumber2() === "") { // A     return true;   } else {     return false;
  }
}You are paused on A. After you click Step out, DevTools runs the rest of the code in inputsAreEmpty(), and then pauses on B if inputsAreEmpty returned true, or pauses on C otherwise.
Run all code up to a specific line
When debugging a long function, there may be a lot of code that isn't related to the problem you are debugging.
 You can step through all the lines of the function, one by one, by clicking the Step over () button many times.
 Slightly better, you can set a line-of-code breakpoint on the line in which you are interested and then click the Resume script execution () button.
 But there's a faster way: Right-click the line of code, and then select Continue to here:

DevTools runs all of the code up to that point, and then pauses on that line.
Restart the top function of the call stack
To pause on the first line of the top function in your call stack, while paused on a line of code, right-click the Call Stack pane, and then select Restart frame. The top function is the last function that was run.
The following code is an example for you to step through:
JavaScriptfunction updateLabel() {   var addend1 = getNumber1(); // B   var addend2 = getNumber2();   var sum = addend1 + addend2;   label.textContent = addend1 + " + " + addend2 + " = " + sum; // A }You are paused on A. After selecting Restart frame, you're be paused on B, without having to set a breakpoint on that line and choosing Resume script execution.

Resume script execution
To continue the runtime after a pause of your script, click the Resume script execution ( ) button. DevTools runs the script up until the next breakpoint, if any.

Force script execution
To ignore all breakpoints and force your script to continue to run, click and hold the Resume script execution () button and then click the Force script execution () button.

Change the thread context
When working with web workers or service workers, click on a context listed in the Threads pane to switch to that context. The blue arrow icon represents which context is currently selected:

For example, suppose that you are paused on a breakpoint in both your main script and your service worker script. You want to view the local and global properties for the service worker context, but the Sources tool is showing the main script context. To switch to the service worker context, in the Threads pane, click the service worker entry.
View and edit properties and variables
While paused on a line of code, use the Scope pane to view and edit the values of properties and variables in the local, closure, and global scopes.
Double-click a property value to change it.
Non-enumerable properties are greyed out.

Watch the values of JavaScript expressions
Use the Watch pane to watch the values of custom expressions. You can watch any valid JavaScript expression.

To create a new watch expression, click the Add watch expression () button.
To refresh the values of all existing expressions, click the Refresh () button.
Values automatically refresh while stepping through code.
 To delete a watch expression, right-click the expression and then select Delete watch expression.
View the call stack
While paused on a line of code, use the Call Stack pane to view the call stack that got you to this point.
Click an entry to jump to the line of code where that function was called. The blue arrow icon represents which function DevTools is currently highlighting:


Copy a stack trace
To copy the current call stack to the clipboard, right-click the Call Stack pane, and then select Copy stack trace:

The following code is an example of the output:
JavaScriptgetNumber2 (get-started.js:40) inputsAreEmpty (get-started.js:24) onClick (get-started.js:16)Ignore a script or pattern of scripts
To ignore a script while debugging, add the script to the Ignore List. When a script is included in the Ignore List, the script is obscured in the Call Stack pane, and you never step into the functions of the script when you step through your code.
For example, in the following code snippet, line A uses lib, which is a third-party library. If you are confident that the problem you are debugging isn't related to that third-party library, then it makes sense to add the script to the Ignore List:
JavaScriptfunction animate() {     prepare();    lib.doFancyStuff(); // A     render();
}
Add a script to the Ignore List from the Editor pane
To add a script to the Ignore List from the Editor pane:
1. Open the file.
2. Right-click anywhere in the file and then select Add script to ignore list:

Add a script to the Ignore List from the Call Stack pane
To add a script to the Ignore List from the Call Stack pane:
Pause code at a breakpoint.
Right-click a function in the Call Stack pane and then select Add script to ignore list:

Add a script to the Ignore List from Settings
To add a single script or a pattern of scripts to the Ignore List from Settings:
1. To open Settings, in DevTools, click the Customize and control DevTools icon (), and then click Settings (). Or, while DevTools has focus, press F1.
2. Navigate to the Ignore List page of Settings.

4. Enter the script name or a regex pattern of script names to add to the Ignore List.
5. Click the Add button.
Run snippets of debug code from any page
If you find yourself running the same debug code in the Console tool over and over, consider using snippets. Snippets are runtime scripts that you author, store, and run within DevTools.
See Run snippets of JavaScript on any webpage.
Use # sourceURL to name evaluated and inline code in DevTools
To make a code block that isn't a file have a file name throughout DevTools, including in the Sources tool, use the # sourceURL pragma in a comment.
Code blocks that aren't files include:
JavaScript code that's run by using the eval() function.
JavaScript code that's in a <script> tag.
 CSS code that's in a <style> tag.
When the browser runs the above kinds of code, DevTools doesn't have a file name to display these blocks of code, and the blocks of code are given generic names or don't appear at all.
File names are displayed throughout the DevTools UI, such as in the following locations:
The Navigator pane of the Sources tool.
The Call Stack in the Debugger pane of the Sources tool.
The file's tab in the Editor pane of the Sources tool.
Log, warning, and error messages in the Console tool.
The flame chart in the Performance tool.
The # sourceURL pragma, with syntax //# sourceURL=my-assigned-file-name.js or /*# sourceURL=my-assigned-file-name.css*/, is a special comment that gives evaluated and inline code a virtual file name throughout DevTools.
Use the # sourceURL pragma to give a virtual file name to code blocks that aren't files, to display that file name in the Sources tool and throughout DevTools. For example:
 For JavaScript:
JavaScriptfunction sum(a, b) {   return a + b;
} console.log(sum(1, 2));
//# sourceURL=math-utilities.js For CSS:
css.card {   padding: 1rem;
  border-radius: 0.5rem;
}
/*# sourceURL=card-styles.css*/As a result, DevTools displays these code blocks, along with your specified virtual file names for them (math-utilities.js and card-styles.css):

See also
 Get started debugging JavaScript - A simple, short tutorial using existing code, with screen captures.
 Sources tool overview - The Sources tool includes the JavaScript debugger and editor.


Feedback
Was this page helpful?  Yes  No

Explain source code using Copilot in Edge
Article • 03/22/2024
The Sources tool in Microsoft Edge DevTools integrate with Copilot in Microsoft Edge to help you understand source code.
When inspecting a webpage, you might want more information about the source code that's displayed in the Sources tool. By using the Explain these lines of code feature, you get more information about the source code in Copilot in Edge:

Supported scenarios
This feature is for use in standard browser window, and is not available in the following scenarios:
 Browsing in an InPrivate window. For information about InPrivate, see Browse InPrivate in Microsoft Edge.
 Browsing with Kids Mode in Microsoft Edge. For information about Kids Mode, see Learn more about Kids Mode in Microsoft Edge.
 Using DevTools with a Microsoft Edge WebView2 control. For information about
DevTools with WebView2 apps, see Debug WebView2 apps with Microsoft Edge DevTools.
 Using DevTools in a standalone Progressive Web App window.
Enable Copilot in Edge
To use this explanation feature, enable Copilot in Edge:
1. Sign into Microsoft Edge. See Sign in to sync Microsoft Edge across devices.
2. Make sure the Copilot icon () is visible in the top-right corner of the browser toolbar. If it's not, in Microsoft Edge, select Settings and more (...) > Settings > Sidebar > Copilot, and then turn on the Show Copilot toggle.
Explain source code
To use Copilot to explain code in the Sources tool:
1. Open a web page that contains the source code you want to explain. For example, open the TODO app demo page in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.
4. In the Page tab in the Sources tool, select the to-do.js file. The source code of that file appears in the Editor pane.
5. Select a few lines of code in the to-do.js file. For example, select the content of the changeTask function:

6. Right-click the code, and then select Copilot: Explain these lines of code.
Copilot opens in the Microsoft Edge sidebar, showing the source code, an Explain these lines of code from the Sources tool in DevTools request message, and then a response explaining the source code:

7. To get more information about the source code, in Copilot, enter additional questions.
Provide feedback
The responses that Copilot in Edge provides when you use the above feature are automatically generated, so surprises and mistakes are possible. We're constantly improving the level of quality and accuracy of the responses, but if you see an incorrect response, let us know by adding a comment at: Feedback for the Explain errors and source code in Copilot in Edge experiment.
See also
 Explain Console errors and warnings using Copilot in Edge

Run snippets of JavaScript on any webpage
Article • 12/07/2023
If you're entering the same code into the Console tool repeatedly, consider saving the code as a snippet instead, and then running the snippet. Snippets are scripts that you author in the Sources tool. Snippets have access to the JavaScript context of the webpage, and you can run snippets on any webpage. Snippets can be used to alter a webpage, such as to change its content or appearance, or to extract data.
The following screenshot shows Microsoft Edge with a webpage on the left and DevTools on the right. The Sources tool is open, displaying the source code of the snippet that's selected in the Snippets tab. The snippet code was run, making changes to the webpage:

The snippet source code is shown below:
JavaScript// Change the background color to "dimgrey". document.body.style.backgroundColor = "dimgrey";
// Add a paragraph at the bottom of the document.
const p = document.createElement("p");
p.textContent = "Hello world";
p.style.color = "white";p.style.fontSize = "2rem"; document.body.appendChild(p);
// Log a message to the console. console.log("Hello world");
The code changes the background color of the webpage to dimgrey, adds a new line of text at the bottom of the webpage, and logs a message to the Console tool.
When you run a snippet on a webpage, the snippet's source code is added to the current webpage. For more information about changing the existing code of a webpage instead of adding new code, see Override webpage resources with local copies (Overrides tab).
Include all your code in one file
The security settings of most webpages block from loading other scripts in snippets. For this reason, you must include all your code in one file.
Open the Snippets tab
The Snippets tab is grouped with the Page tab in the Navigator pane, on the left of the Sources tool.
To open the Snippets tab:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.

3. In the Navigator pane (on the left), select the Snippets tab. To access the Snippets option, you might need to click the More tabs () button.
Open the Snippets tab from the Command Menu
You can also open the Snippets tab by using the Command Menu:
1. Select anything in DevTools, so that DevTools has focus.
2. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
3. Start typing "snippets", select Show Snippets, and then press Enter to run the command:

Create a new snippet
To create a new snippet from the Snippets tab:
1. Open the Snippets tab.
2. Click New snippet (+).
3. Enter a name for your snippet, and then press Enter:

Create a new snippet from the Command Menu
1. Focus your cursor somewhere in DevTools.
2. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
3. Start typing "snippet", select Create new snippet, and then press Enter:

To rename your new snippet, see Rename a snippet, below.
Edit a snippet
To edit the source code of a snippet:
1. Open the Snippets tab.
2. In the Snippets tab, click the name of the snippet that you want to edit. The snippet opens in the Code Editor:

3. Use the Code Editor to add JavaScript to your snippet.
4. When an asterisk appears next to the name of your snippet, it means you have unsaved code. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save:

Run a snippet
Run a snippet from the Sources tool
1. Open the Snippets tab.
2. Click the name of the snippet that you want to run. The snippet opens in the Code Editor:
3. Click the Run snippet () button, or press Ctrl+Enter (Windows, Linux) or Command+Enter (macOS):

Run a snippet from the Command Menu
1. Focus your cursor somewhere in DevTools.
2. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
3. Delete the > character and type the ! character followed by the name of the snippet that you want to run:

4. Press Enter to run the snippet.
Rename a snippet
1. Open the Snippets tab.
2. Right-click the snippet name, and then select Rename.
Delete a snippet
1. Open the Snippets tab.
2. Right-click the snippet name, and then select Remove.
Save a snippet
By default, snippets are only available within DevTools, but you can also save them to disk.
1. Open the Snippets tab.
2. Right-click the snippet name, and then select Save as.
3. When prompted, enter a file name and location.

Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	 and is authored by Kayce Basques.
              This work is licensed under a Creative Commons Attribution 4.0 International License.

Feedback
Was this page helpful?  Yes  No

Edit files with Workspaces (Filesystem tab)
Article • 12/07/2023
Use the Filesystem tab in the Sources tool to define a workspace, to save DevTools changes in your source code files rather than only in a transient copy of the files that are returned by the web server.
This tutorial provides hands-on practice in setting up and using a workspace in DevTools. After you add files to a workspace, changes that you make in your source code by using DevTools are saved on your local computer. These changes are preserved across page refreshes.
To refresh your knowledge of the technologies used, see the following articles:
 Use HTML, CSS, and JavaScript to build a web page. See Getting started with the web
 Use DevTools to make basic changes to CSS. See Get started viewing and changing CSS
Run a local HTTP web server. See:
Using Node.js (used for this tutorial): Set up a localhost server in Installing the DevTools extension for Visual Studio Code.
 Using Python: Running a simple local HTTP server in How do you set up a local testing server?
Introduction
A DevTools workspace lets you save changes that you make to a local copy of the source code to the same file on your computer, so that changes are retained across refreshes of the page. Here's a typical scenario for using a workspace:
You have the source code for the demo website on your desktop.
You are running a local web server from the source code directory, so that the site is accessible at localhost:8080. Note: If you use the Python server option, the default port number is 8000.
 You opened localhost:8080 in Microsoft Edge, and you are using DevTools to change the website source code which includes the CSS, HTML, and JavaScript files.
The tutorial steps below walk you through this environment setup.
Limitations
If you're using a modern framework, it probably transforms your source code from a format that's easy to maintain into a format that's optimized to run as quickly as possible. A workspace is usually able to map the optimized code back to the original source code, by using source maps for JavaScript and CSS. However, there's a lot of variation in how each framework uses source maps.
DevTools doesn't support every framework variation; for example, the Workspaces feature (Filesystem tab) doesn't work with the Create React App framework.
If you run into issues while using workspaces with your framework of choice, or you identify framework-specific steps that are needed, start a thread in the Chrome DevTools mailing list or ask a question on Stack Overflow to exchange information with the rest of the DevTools community.
Related feature: Overrides
Overrides is a DevTools feature that's similar to a workspace. You can use an override when you want to experiment with changes to a webpage, and you need to display the changes across webpage loads, but you don't care about mapping your changes to the source code of the webpage. However, your changes aren't saved when you refresh the webpage.
The Overrides feature lets you store a local copy of the webpage files on the server. When you refresh the page, Microsoft Edge loads the local copy of files instead of the files on the server. To learn more about overrides, see Override webpage resources with local copies (Overrides tab).
Create the directory of source files
We'll set up the demo files, and then set up DevTools.
1. In another window or tab, go to the Workspaces demo source code.
2. Create an app directory, such as ~/Desktop/app or C:\Users\myusername\app\.
Copy index.html, ../shared/img/logo.png, README.md, script.js, and styles.css from the demo source code to your app directory. For the rest of the tutorial, this directory is referred to as ~/Desktop/app or C:\Users\myusername\app\, though you can use a different path.
3. If you haven't already, install Node.js and npm. For more information, see Install Node.js and Node Package Manager (npm) in Installing the DevTools extension for Visual Studio Code.
4. Go to a command prompt, such as the git bash shell, or the Terminal pane in Microsoft Visual Studio Code.
5. Go to the app directory that you created, such as ~/Desktop/app or
C:/Users/myusername/app. If you use the git bash shell, it's a UNIX shell, so even on Windows, you need to wrap a directory path that has backslashes in quotes, or else use forward slashes rather than backslashes.
6. Run one of the following commands, to start up the web server:
Node.js option:
Bash# Node.js option
cd ~/Desktop/app  # or:  cd C:/Users/myusername/app npx http-server  # Node.jsFor more information and options, see Start the server (npx http-server) in Installing the DevTools extension for Visual Studio Code.
Bash# Python 2 option cd ~/Desktop/app  # or:  cd C:/Users/myusername/app python -m SimpleHTTPServer  # Python 2Bash# Python 3 option cd ~/Desktop/app  # or:  cd C:/Users/myusername/app python -m http.server  # Python 37. Open a tab in Microsoft Edge, and go to the locally hosted version of the site. You should be able to access it by using localhost:8080:

Define a workspace in DevTools
1. Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS) to open the DevTools Console:

2. Click the Sources () tab.
3. In the Navigator pane (on the left), click the Filesystem tab (which is grouped with the Page tab):

4. Click Add folder to workspace. File Explorer or Finder opens.
5. Go to the /app/ directory that you created. For example, in the Folder: text box, enter the path, such as ~/Desktop/app or C:\Users\myusername\app\. Then click the Select Folder button.
DevTools prompts you whether to grant DevTools full access to your app directory.
6. Click the Allow button, to give DevTools permission to read and write to the directory.
In the Filesystem tab are page icons that have a green dot, for index.html, script.js, and styles.css. The green dot indicates that DevTools has established
a mapping between a network resource of the page that's received from the web server, and the local source file in your app directory:

Edit CSS and save changes to the source file
To make a change in the CSS file and save it to disk:
1. In the Sources tool, in the Filesystem tab (grouped with the Page tab), select styles.css to open it in the editor pane. The color property of the h1 element is set to fuchsia:

element, and then select the <h1> element.
The Styles pane displays the CSS rules that are applied to the <h1> element. The mapped file () icon next to styles.css:1 is a page with a green dot. The green dot means that any changes that you make to this CSS rule are mapped to styles.css in your app directory:

select the <h1> element in the DOM Tree. In the CSS rule for h1, click fuchsia, start typing orange, and then select orange from the color list:

4. Open the copy of styles.css that's in your app directory in a text editor, such as Visual Studio Code. The color property is now set to the new color, which is orange in this example. The change was not only made in the copy of the file returned from the web server; the change was also made in your mapped file in your app workspace directory.
5. Refresh the page.
The color of the <h1> element is still set to the new color. The change remains across a refresh, because when you made the change, DevTools saved the change to disk. When you refreshed the page, your local server served the modified copy of the file from disk.
Tip: You can also change the color by clicking the fucshia-colored swatch to open the color picker to pick a new color. The HEX value for the color you pick is the color name.
Edit HTML and save changes to the source file
In the Elements tool, it's possible to change HTML tagging in a copy of the file that's returned by the server. However, to save your edits to a local source file, you need to use the Sources tool instead of the Elements tool.
Changing the DOM tree in the Elements tool doesn't save changes
You can make changes to the HTML content using the DOM tree in the Elements tool, but your changes to the DOM tree aren't saved to disk, and only affect the current browser session.
The following steps demonstrate that edits in the DOM tree aren't preserved across page refreshes:
1. Continuing from above, select the Elements tool.
2. In the DOM tree, in the <h1> element, select the text string DevTools Workspaces Demo, delete it, type the text string I Love Cake, and then press Enter. The rendered webpage shows the new heading text:

Studio Code. The change that you just made doesn't appear; the heading still reads "DevTools Workspaces Demo".
4. In the browser, refresh the demo page. The page reverts to the original heading, "DevTools Workspaces Demo", because the DOM tree with your edit was discarded, and the DOM was re-created from the unchanged index.html file in your app workspace directory.
Changing HTML from the Sources tool saves changes
If you want to save a change to the webpage HTML, edit the HTML in the Sources tool with a workspace defined (in the Filesystem tab), rather than changing the HTML in the DOM tree in the Elements tool.
1. Continuing from above, click the Sources (	) tab.
2. In the Navigator pane on the left, select index.html. The HTML for the page opens.
3. Replace <h1>DevTools Workspaces Demo</h1> with <h1>I Love Cake</h1>, in the file listing (as opposed to the DOM tree in the Elements tool).
4. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save the change.
5. Refresh the page. The heading in the rendered page changes to "I Love Cake", because that string was saved in index.html in your mapped app directory:
Visual Studio Code.
The <h1> element contains the new text, because you made the change using the Sources tool's editor to edit index.html and then saved the change, and that file was mapped in a workspace (the Filesystem tab), indicated by a green dot on the file's icon.
Edit JavaScript and save changes to the source file
The main place to use the code editor of DevTools is the Sources tool. But sometimes you need to access other tools, such as the Elements tool or the Console, while editing files. The Quick source tool gives you just the editor from the Sources tool, while any tool is open.
To open the DevTools code editor alongside other tools:
1. Continuing from above, select the Elements () tool.
2. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
3. At the Run prompt, start typing quick, and then select Show Quick source:

At the bottom of the DevTools window, the Quick source tool opens, displaying the contents of index.html, because that's the last file you edited in the Sources tool. If needed, click Expand Quick View, and make sure the Elements tool is selected.
4. Press Ctrl+P (Windows, Linux) or Command+P (macOS) to display the Open File prompt of the Command Menu:

5. Start typing script, and then select script.js that's in the app/ directory.
The file listing is displayed in the Quick source tool. In the rendered demo webpage, the Edit files with Workspaces hyperlink is not styled with italic.
6. Use the Quick source tool to add the following code to the bottom of script.js:
JavaScriptdocument.querySelector('a').style = 'font-style:italic';7. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save the change.
8. Refresh the page. If needed, click and hold the Refresh button and then select Hard Refresh. The Edit files with Workspaces hyperlink on the page is now italicized:

See also


Feedback
Was this page helpful? 

Override webpage resources with local copies (Overrides tab)
Article • 12/07/2023
Sometimes you need to try out some possible fixes for a webpage, but you don't have access to the source files, or changing the page requires a slow and complex build process. You can debug and fix all kind of problems in DevTools. But the changes don't persist; after you refresh the local file, all your work is gone. The Overrides feature in the Sources tool helps you solve this problem.
You can now take a resource of the current webpage and store it locally. When you refresh the webpage, the browser doesn't load the resource from the server; instead, the browser replaces the server resource with your local copy of the resource.
Setting up your local folder to store Overrides
1. Right-click a webpage, such as https://microsoftedge.github.io/Demos/demo-todo/, and then select Inspect. DevTools opens.
2. Select the Sources () tool.
3. In the Navigator pane (on the left), click the Overrides tab (grouped with the Page tab); if needed, click the More tabs (v) button:

4. Select the Overrides tab and then click the More tabs button again to collapse the tabs:

5. Click + Select folder for overrides:

6. In the file navigation dialog, select a folder on your local computer to store the resource files that you want to replace, such as C:\Users\myusername\overrides, and then click the Select Folder button.
DevTools warns you that must have full access to the folder and that you should not reveal any sensitive information:

7. Click the Allow button.
In the Overrides tab, a checkbox is shown next to Enable Local Overrides. To the right of Enable Local Overrides is a Clear configuration icon that allows you to delete your local overrides settings. You are now done setting up your folder, and are ready to replace live resources with local resources:

Adding files to your Overrides folder
Next, add files to your Overrides folder, as follows. This example will add a CSS file.
1. Select the Elements tool, and then in the Styles tab, click the name of a CSS file,

The Sources tool opens, with the selected file opened in a tab in the editor pane.
2. In the editor pane, right-click the file's tab, such as to-do-styles.css, and then select Override content:

In the file's tab, a page icon with a purple dot is added, and in the Overrides tab, the file is added:

The file is stored in a new directory that's in your overrides folder (such as in C:\Users\myusername\overrides).
3. In File Explorer or Finder, verify that DevTools created a subfolder that is named using the URL of the file (such as microsoftedge.github.io) and contains the correct directory structure, such as
C:\Users\myusername\overrides\microsoftedge.github.io\Demos\demo-to-do\styles.
The overriding file is stored in this directory.
In the editor pane of the Sources tool, a page icon with a purple dot is added to the file's tab. The purple dot indicates that the file is a local file that overrides the file that's returned from the web server:

Changing the style by using the override file
Continuing from above, you can now change the styles of the webpage by using your local override CSS file (in this example, to-do-styles.css). Add a thick red border around the rendered webpage body, as follows:
1. In DevTools, select the Elements () tool, and then make sure the Styles tab is selected.
2. Copy the following CSS style property, and then paste it into the existing body element CSS rule that's in your CSS override file, such as to-do-styles.css:
cssborder: 10px solid firebrick
A thick red ("firebrick") border is added around the body of the rendered webpage, and the modified CSS file is automatically saved on your computer, in your Overrides directory.
3. Refresh the webpage.
The thick red border remains displayed, and none of your work is lost, as it would have been if rendering the CSS file that's returned by the web server instead of using the local override file.
Adding files to Overrides from within other tabs or tools
1. Continuing from above, select the Sources () tool, and then on the left, select the Page tab (grouped with the Overrides tab).
2. In the tree of resource files for the page, expand the styles folder. Files that are already placed in your overrides folder (by using the Overrides tab), such as to-dostyles.css, have a purple dot on the icon.
3. Right-click a different file, such as (index) (which is index.html), and then select Override content:

In the Page tab and Overrides tab in the Sources tool, the file's icon changes to a page icon with a purple dot (such as for index.html), and the file is added to your local drive's Overrides directory.
4. Select the Network () tool, right-click a resource file for the webpage, such as to-do.js, and then select Override content:

Throughout the DevTools UI, the file's icon changes to a page icon with a purple dot (such as for to-do.js), and the file is added to your local drive's Overrides directory.
When overrides are in effect, resource files that are located on your computer in your Overrides folder are used, rather than resource files that are returned by the web server.
Two-way interaction of overrides
Use the editor provided with the Sources tool of DevTools or any editor you want to change the files. Changes are synced across all the products that access the files in the overrides folder.

Add content scripts to the Ignore List
Article • 11/07/2024
When you use the Sources tool to step through code, sometimes you pause on code that you don't recognize and don't want to step through, such as code for a Microsoft Edge extension that's installed.
To avoid pausing on extension code:
1. In DevTools, in the upper right, click the Settings () button.
2. In the Settings > Ignore List page, select the Add content scripts to ignore list checkbox:

3. Click the Close DevTools () button.
See also

Portions of this page are modifications based on work created and shared by
	Google	 and used according to terms described in the Creative Commons
Attribution 4.0 International License	. The original page was found at https://developer.chrome.com/docs/devtools/javascript/ignore-chrome-extension-
scripts/ and was authored by Kayce Basques.
 This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

Disable JavaScript
Article • 12/07/2023
To see how your webpage renders and behaves when a browser doesn't have JavaScript support, temporarily turn off JavaScript.
To turn off JavaScript:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu:


The yellow triangular warning icon in the Sources tab indicates that JavaScript is disabled:

JavaScript remains disabled in the tab for as long as you have DevTools open.
To check how the page behaves without JavaScript, refresh the page.
To re-enable JavaScript:
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
2. Select the Enable JavaScript [Debugger] command, and then press Enter.


Feedback
Was this page helpful? 

Map the processed code to your original source code, for debugging
Article • 11/07/2024
To see and work with your original source code when you're debugging JavaScript in DevTools, rather than having to work with the compiled and minified version of your code that's returned by the web server, use source maps.
Source mapping keeps your client-side code readable and debuggable, even after your build process compiles and minifies your code and combines it into a single file. Source maps map your compiled, minified code to your original source code files. In DevTools, you can then read and debug your familiar, original source code, instead of the unrecognizable transformed and compiled code.
To use source maps, you must use a tool when you build your code that can produce source maps. There are many tools available, such as:
	Sass or PostCSS	, which can produce source maps for CSS.
The TypeScript	 compiler, which compiles TypeScript to JavaScript and can produce source maps to debug the original TypeScript code.
The Babel transpiler which can produce both CSS and JavaScript source maps. Build tools like Webpack, Rollup	, Vite	, and Parcel, which can also produce source maps.
This article explains how to enable source maps in DevTools, and how to use them to debug your code. It doesn't explain how to produce source maps in your build process. To learn more about publishing source maps to the Azure Artifacts symbol server, see Securely debug original code by publishing source maps to the Azure Artifacts symbol server.
Source maps in DevTools
Source maps from build tools cause DevTools to load your original files in addition to your minified files, and replace the minified code with the original code. For example:
In the Sources tool, you can see the original files and set breakpoints in them. In the Performance tool, you can see your original function names in the flame chart.
 In the Console tool, you can see your original file names and line numbers in stack traces.
Meanwhile, Microsoft Edge actually runs your minified code to render the webpage. Source maps are only used by DevTools, and only for displaying source code to developers.
DevTools knows how to load a source map when a //# sourceMappingURL= comment is found in a compiled file. For example, the following comment tells DevTools to load the source map from http://example.com/path/to/your/sourcemap.map:
JavaScript//# sourceMappingURL=http://example.com/path/to/your/sourcemap.mapEnable source maps in DevTools
Source maps are enabled by default.
To make sure that source maps are enabled:
1. To open DevTools, in Microsoft Edge, right-click a webpage, and then select
Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, click Customize and control DevTools () > Settings () > Preferences.
3. In the Preferences page, in the Sources section, make sure the Enable JavaScript source maps checkbox and the Enable CSS source maps checkbox are selected:

4. In the upper right of Settings, click the Close () button.
Enable loading source maps from remote file paths
By default, DevTools doesn't load source maps when the source map URL is a remote file path, such as when the source map URL starts with file:// and targets a file that's not on the current device.
To enable loading source maps from file paths:
1. In DevTools, click Customize and control DevTools () > Settings () > Preferences.
2. In the Preferences page, in the Sources section, select the checkbox Allow DevTools to load resources, such as source maps, from remote file paths.
Disabled by default for security reasons.
Debug with source maps
When debugging your code and when source maps are enabled, source maps are used in several places:
 In the Console tool, links from log messages to source files go to the original files, not the compiled files.
 When stepping through code in the Sources tool, the original files are displayed in the Navigator pane on the left. When you open an original file, its original code is displayed and you can set breakpoints in it. To learn more about debugging with breakpoints in the Sources tool, see Pause code with breakpoints.
 In the Sources tool, the links to source files that appear in the Call Stack of the Debugger pane open the original source files.
 In the Performance tool, the flame chart displays the original function names, not the compiled function names.
See also
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server


Feedback
Was this page helpful? 
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Article • 06/25/2024
To securely see and work with your original development source code in DevTools rather than the compiled, minified, and bundled production code that's returned by the web server, use source maps served by the Azure Artifacts symbol server.
Publishing your source maps directly to your web server would make your original source code publicly visible. To avoid making your original source code publicly visible, publish your source maps to the Azure Artifacts symbol server. This approach makes it possible to use your source maps in DevTools, when debugging your production website, without publishing the source maps to your web server.
Source maps map your compiled production code to your original development source files. In DevTools, you can then see and work with your familiar development source files, instead of the compiled code. To learn more about source mapping and using source maps in DevTools, see Map the processed code to your original source code, for debugging.
Concepts
You must index your source maps on the Azure Artifacts symbol server, so that your source maps are available to DevTools when you debug your production website.
To do this, add the x_microsoft_symbol_client_key string property to your source maps at compilation time. This property contains the lowercase hexadecimal value of the 256bit SHA-2 hash	 of your corresponding original source file.
DevTools is then able to compute this hash for each of your compiled files, and use the hash to retrieve the correct source map from the Azure Artifacts symbol server. In order to securely retrieve your source maps, DevTools uses a Personal Access Token that you provide, to connect to the Azure Artifacts symbol server.
Step 1: Generate a Personal Access Token for
Azure DevOps
Publishing source maps to the Azure Artifacts symbol server requires a Personal Access Token (or PAT). This PAT will be used by your build system when compiling code and publishing source maps.
To generate a PAT in Azure DevOps:
1. Sign in to your Azure DevOps organization by going to https://dev.azure.com/{yourorganization}.
2. In Azure DevOps, go to User settings > Personal access tokens:

The Personal Access Tokens page appears:

3. Click New Token. The Create a new personal access token dialog opens:

4. In the Name text box, enter a name for the PAT, such as "publish source maps".
5. In the Expiration section, enter an expiration date for the PAT.
6. In the Scopes section, click Show all scopes to expand the section.
7. Scroll down to the Symbols section, and then select the Read & write checkbox.
8. Click the Create button. The Success! dialog appears:

9. Click the Copy to clipboard button to copy the PAT. Make sure to copy the token and store it in a secure location. For your security, it won't be shown again.
To learn more about PAT, see Use personal access tokens.
Step 2: Compute the SHA-256 hash of your script and append it to your source maps
At the final step of your application's build process, for every source map you want to publish, you should compute the SHA-256 hash of the JavaScript file to which the
Source Map corresponds, and append it to the source map via the x_microsoft_symbol_client_key string property.
Build systems vary from application to application, so there isn't a clear single way to apply this. But here is a sample Webpack 5 plugin, which can be added to your Webpack configuration if you're using it:
JavaScript// file: webpack.plugin-symbols.js // Copyright (C) Microsoft Corporation. All rights reserved.
// Licensed under the BSD 3-clause license.
const crypto = require('crypto');
module.exports = class PrepareSourceMapsForSymbolServerPlugin {   /**
* @param {import('webpack').Compiler} compiler
* @returns {void}
   */   apply(compiler) {     compiler.hooks.emit.tap('PrepareSourceMapsForSymbolServerPlugin', 
(compilation) => {       const files = Object.keys(compilation.assets);       const sourceMaps = files.filter(v => v.endsWith('.map'));       const sourceFilesAndMapsNames = sourceMaps.map(mapFileName => {
        const sourceFileName = mapFileName.substring(0, mapFileName.length - 
4);         return {           sourceFileName,           mapFileName,
        };       });       const sourceFiles = sourceFilesAndMapsNames.map(({ sourceFileName, mapFileName }) => {         const sourceFile = compilation.assets[sourceFileName];         const sourceFileBuffer = sourceFile.buffer();         const hasher = crypto.createHash('sha256');         hasher.write(sourceFileBuffer);         const digest = hasher.digest();         const sourceFileHash = digest.toString('hex');
        const sourceMapAsset = compilation.assets[mapFileName];         const sourceMapSource = sourceMapAsset.source();         const sourceMapContents = JSON.parse(sourceMapSource);         sourceMapContents['x_microsoft_symbol_client_key'] = sourceFileHash;         const rewrittenSourceMapContents = JSON.stringify(sourceMapContents);         if (!sourceMapAsset.isBuffer()) {
          // Not a buffer -- write to the _value property           sourceMapAsset._value = rewrittenSourceMapContents;
        } else {
          sourceMapAsset._valueAsBuffer = 
Buffer.from(rewrittenSourceMapContents, 'utf-8');
        }
        return {           sourceFileName,           mapFileName,           sourceFileHash,           sourceMapAsset,
        };
      });
    });
  }
};You can then add the plugin to the plugins section in your webpack.config.js configuration file:
JavaScriptconst PrepareSourceMapsForSymbolServerPlugin = require('./webpack.pluginsymbols.js'); // ...
module.exports = (env, args) => {   const mode = process.env.NODE_ENV || (env && env.NODE_ENV) || 
'production';   return {     devtool: mode === 'production' ? 'hidden-source-map' : 'inline-sourcemap',     resolve: {       modules: [
        path.resolve('./node_modules'),
      ],     },     output: {       publicPath: '/',       filename: '[name].bundle.js',       chunkFilename: '[name].chunk.js',
    },
    plugins: [
        // ... other plugins         new PrepareSourceMapsForSymbolServerPlugin(),
    ]
  };
};Step 3: Publish source maps to the Azure Artifacts symbol server
To publish source maps to the Azure Artifacts symbol server, use either of the following approaches:
Publish source maps using Azure DevOps Pipelines.
Publish source maps using symbol.exe.
These approaches are described below.
Publish source maps using Azure DevOps Pipelines
Azure DevOps comes with the PublishSymbols@2 pipeline build task. This task can be used to publish your source maps to the Azure Artifacts symbol server.
When configuring this task, set the indexableFileFormats parameter to either All or SourceMap.
Publish source maps using symbol.exe
The Symbol Server team publishes a .NET Core application, symbol.exe, which can be downloaded automatically. To programmatically download symbol.exe, use the GET method of the Client endpoint in the Symbol Service REST API, as described in Client -
Get. Then run the following command to publish your source maps to the Azure Artifacts symbol server:
Windows Command Promptsymbol publish         -d {root directory containing your source maps}
        -n {a unique name for this job}
        -s {service URL, such as https://artifacts.dev.azure.com/contoso}
        --patAuthEnvVar {name of environment variable containing a PAT}
        --indexableFileFormats SourceMapThe -n parameter must be unique. Job names that are repeated will be rejected, including names of jobs that failed.
See also
Securely debug original code by using Azure Artifacts symbol server source maps
Map the processed code to your original source code, for debugging
Improvements for connecting DevTools to Azure Artifacts symbol server in What's New in DevTools (Microsoft Edge 115).

Securely debug original code by using Azure Artifacts symbol server source maps
Article • 11/13/2023
To securely see and work with your original development source code in DevTools rather than the compiled, minified, and bundled production code that's returned by the web server, you can use source maps published on the Azure Artifacts symbol server.
Source maps map your compiled production code to your original development source files. In DevTools, you can then see and work with your familiar development source files, instead of the compiled code. To learn more about source mapping and using source maps in DevTools, see Map the processed code to your original source code, for debugging.
Downloading your source maps from the Azure Artifacts symbol server makes it possible to debug your production website by retrieving your original development source code securely.
Prerequisite: Publish source maps to the Azure Artifacts symbol server
To use source maps from the Azure Artifacts symbol server in DevTools, they need to be published to the server first.
To learn about how to publish source maps, see Securely debug original code by publishing source maps to the Azure Artifacts symbol server.
Step 1: Enable source maps in DevTools
To make sure that source maps are enabled in DevTools:
1. To open DevTools, in Microsoft Edge, right-click a webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, click Settings () > Preferences.
3. Make sure the Enable JavaScript source maps checkbox and the Enable CSS source maps checkbox are selected:

Step 2: Connect DevTools to the Azure Artifacts symbol server
DevTools needs to be configured to successfully retrieve the published source maps for your website.
To configure DevTools, you create an Azure Artifacts symbol server connection. There are two types of connections: Microsoft Entra ID, which is the easiest to use, and Personal Access Token.
Connect to the symbol server by using Microsoft Entra ID
1. In DevTools, click Settings () > Symbol Server.
2. Click Add Symbol Server connection to start creating a new connection.
3. In the Authorization mode dropdown list, select Microsoft Entra ID.
If the Microsoft Entra ID option is disabled, sign in to Microsoft Edge. To learn more, see Sign in to sync Microsoft Edge across devices.
4. Under Azure DevOps organization, click Select.

The list of DevOps organizations that you're a member of appears.
5. Double-click the organization that you want to connect to, or click it and then press Enter.
6. Click Add to create the connection.

7. Click the Close () button in the upper right to close the Settings panel, and then click the Reload DevTools button.
Connect to the symbol server by using a Personal Access Token
To connect to the symbol server by using a Personal Access Token (PAT), first generate a new PAT in Azure DevOps, and then configure DevTools.
Generate a new PAT in Azure DevOps
1. Sign in to your Azure DevOps organization by going to https://dev.azure.com/{yourorganization}.
2. In Azure DevOps, go to User settings > Personal access tokens:

The Personal Access Tokens page appears:

3. Click New Token. The Create a new personal access token dialog opens:

4. In the Name text box, enter a name for the PAT, such as "devtool source maps".
5. In the Expiration section, enter an expiration date for the PAT.
6. In the Scopes section, click Show all scopes to expand the section.
7. Scroll down to Symbols, and then select the Read checkbox.
8. Click the Create button. The Success! dialog appears:

9. Click the Copy to clipboard button to copy the PAT. Make sure to copy the token and store it in a secure location. For your security, it won't be shown again.
To learn more about PAT, see Use personal access tokens.
Your new PAT has now been generated. Next, configure DevTools.
Configure DevTools
1. In DevTools, click Settings () > Symbol Server.
2. Click Add Symbol Server connection to start creating a new connection.
3. In the Authorization mode dropdown list, select Personal Access Token.
4. In the Azure DevOps organization text box, enter the Azure DevOps organization where you created the PAT.
5. In the Personal access token text box, paste your personal access token (PAT):

6. Click the Add button. The connection is created.
7. Click the Close () button in the upper right to close the Settings panel, and then click the Reload DevTools button.
Step 3: Retrieve original code in DevTools
After doing the above setup steps, when you use DevTools to work on a build of your website for which symbols have been published, you can now see your original source code, instead of the transformed code.
 In the Console tool, links from log messages to source files go to the original files, not the compiled files.
 When stepping through code in the Sources tool, the original files are listed in the Navigator pane on the left.
 In the Sources tool, the links to source files that appear in the Call Stack of the Debugger pane open the original source files.
Connect to multiple Azure Artifacts symbol servers
To fetch sourcemaps from multiple Azure DevOps organizations, configure DevTools to connect to multiple Azure Artifacts symbol servers, as follows:
1. In DevTools, click Settings () > Symbol Server.
2. Click Add Symbol Server connection to create an additional connection.
3. Configure the new connection. See Connect to the symbol server by using
Microsoft Entra ID or Connect to the symbol server with a Personal Access Token.
To edit or remove an existing connection, hover over the connection, and then click the Edit () or Remove () button next to the connection on the Symbol Server settings page:

Filter source maps by URL
To decide which source maps to download via the Azure Artifacts symbol server connection, use the Filter behavior feature.
1. In DevTools, click Settings () > Symbol Server.
2. Create a new connection or edit an existing connection.
3. In the Filter behavior dropdown list, select either Exclusion List to exclude specific source maps, or Inclusion List to only include specific source maps.
4. In the text box below the dropdown list, enter one URL per line for the source maps that you want to exclude or include:

5. Click the Save button.
The following wildcards are supported:
ﾉ Expand table
WildcardMeaning?Matches a single character.*Matches one or more of any character.If you select Exclusion List, DevTools attempts to look up any source maps for scripts except those that have a URL that matches one of the entries in the list.
If you select Inclusion List, DevTools only attempts to look up source maps for scripts that have URLs that match one of the entries in the list. For example, suppose you select Inclusion List in the Filter behavior dropdown list, and then enter the following in the Filter behavior text box:

https://cdn.contoso.com/* https://packages.contoso.com/*In this example, DevTools only attempts to resolve source maps that match these two URL patterns, and doesn't attempt to load source maps for other scripts.
Check the status of downloaded source maps
You can check the status of your source maps by using the Source Maps Monitor tool.
To learn more about the Source Maps Monitor tool and how it can help monitor which source files requested source maps, and whether those source maps were loaded, see Source Maps Monitor tool.
See also
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Map the processed code to your original source code, for debugging
Source Maps Monitor tool
Improvements for connecting DevTools to Azure Artifacts symbol server in What's New in DevTools (Microsoft Edge 115).

Navigate webpage layers, z-index, and DOM using the 3D View tool
Article • 12/07/2023
Use the 3D View tool to debug DOM, z-index, and composited layer problems in a webpage by rotating the page in 3D space. The 3D visualization helps you understand the DOM tree hierarchy, the z-index stacking context tree hierarchy, and the composited layers created on the page.

On the left, the 3D View tool has 3 tabs:
 The Composited Layers tab shows the composited layers that are created by the browser for your webpage. Each layer includes a realistic rendering of the content in the layer, for a comprehensive experience as you move the page around in 3D space.
 The Z-index tab shows a 3D representation of the stacking context tree. Use this tab to debug z-index stacking issues on your webpage.
 The DOM tab shows a 3D representation of the DOM tree. Use this tab to explore the DOM as a whole, with all of the elements easily accessible.
On the right, the 3D canvas represents the webpage according to which tab and options you select.
Video: Debug the web in 3D

Open the 3D View tool
You can open the 3D View tool either in the Activity Bar or in the Quick View panel.
To get maximum canvas space, open the 3D View tool in the Activity Bar.
To use the Elements tool and 3D View tool at the same time, open the 3D View tool in the Quick View panel. This enables you to view the DOM tree elements represented in the 3D canvas. This is the default; in the Command Menu, Show 3D View is indicated as opening in the Quick View panel.
Open the 3D View tool in the Activity Bar
1. Open the webpage you want to visualize in 3D. For example, use the Animal shelter demo page.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the 3D View tab. If that tab isn't visible, click the More tools () button. The 3D View tab opens in the Activity Bar:

Open the 3D View tool in the Quick View panel
1. Open the webpage you want to visualize in 3D. For example, use the Animal shelter demo page.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. If the Quick View panel isn't displayed, select Customize and control DevTools (...), and then select Toggle Quick View panel. Or, when focus is on DevTools, press Esc.
4. In the Quick View toolbar, select the 3D View tab. If that tab isn't visible, click the More tools () button. The 3D View tab opens in the Quick View panel:

Zoom, pan, and rotate the 3D canvas
To view the webpage from different angles, you can zoom, pan, and rotate the 3D canvas that's displayed on the right side of the 3D View tool.
Zoom the page in or out
To zoom the webpage in or out on the 3D canvas, use the mouse scroll wheel, or use the slider in the lower right.
Pan view (button)
To shift the page left, right, up, or down, click the Pan view () button and then drag the page on the 3D canvas in the desired direction with your mouse.
Rotate view (button)
To rotate the page by using the mouse, click the Rotate view () button and then drag the page on the 3D canvas in the desired angle with your mouse.
To rotate the page by using the keyboard, click in the 3D canvas to put focus on it so that a black border appears, and then press the arrow keys.
 To rotate the page horizontally, press the Left Arrow or Right Arrow key.
 To rotate the page vertically, press the Up Arrow or Down Arrow key.
The keys rotate the page, regardless of whether the Pan view or Rotate view button is selected in the toolbar.
For more information, see these other sections in this page:
Toolbar above the 3D canvas
Movement controls in lower right
The Composited Layers tab
In the Composited Layers view, the 3D canvas displays the list of layers created by the browser rendering engine for the webpage.
Use the Composited Layers view to analyze how many layers are created by your CSS code, how big they are, and how often they change.
On the 3D canvas on the right, select an element of the webpage. In the Composited Layers tab, the layers tree expands automatically, and the Details tab below the layers tree shows information about the selected layer:

Slow scroll rects (checkbox)
The Slow scroll rects checkbox highlights sections of the page that cause slow scrolling.
This checkbox is helpful to investigate performance problems. Certain webpages use JavaScript to detect scroll (or touch) on certain page elements in a way that may make scrolling through the webpage slower than it normally could be.
This checkbox highlights (in pink) the boxes of the rendered webpage that may cause these performance issues.
This checkbox is similar to the Scrolling performance issues checkbox in the Rendering tool, which highlights the slow rects on the page directly (in yellow). See Find scroll performance issues in realtime in Performance features reference. Both checkboxes are based on the same debugging info, but these two tools present this information differently.
Paints (checkbox)
Renders the content from the webpage (color or image file) onto the elements.
Layers expander tree
Expand this tree to display the list of composited layers. Click on a layer to display detailed information about it in the Details info pane.
Details (info pane)
The Details info pane below the Composited Layers pane contains the following fields.
Size
The width and then the height of the selected composited layer, along with the location of the upper left of the layer relative to the upper left of the page viewport. For example, "1034 x 28055 (at 0, 0)".
Compositing Reasons
Reasons why the browser rendering engine created the layer. For example: "Secondary layer, to house contents that can be scrolled."
Memory estimate
The memory consumed for the selected layer. For example: "116 MB".
Paint count
How many times the selected layer was painted by the rendering engine.
The Z-index tab
The Z-index tab shows only the elements of the webpage that are stacking contexts or that are positioned along the z-axis:

Show Elements type (section)
The Show Elements type section in the Z-index tab controls which elements of the page are shown in the 3D canvas.
 The Show all radio button shows both the stacking context elements and the elements which are positioned on the z-axis. This view is useful to debug issues with elements that are incorrectly positioned on the z-axis.
 The Show only stacking contexts radio button only shows the page elements which are stacking contexts. This view is useful to quickly find out which elements are stacking contexts on the webpage.
The Show z-index labels checkbox shows or hides the z-index labels in the 3D canvas.
By default, this checkbox is selected.
Color type (section)
In the Z-index tab, you can choose from the following color schemes to visualize the DOM in the 3D canvas:
 Purple to White radio button - The 3D canvas shows elements ranging from purple to white.
 Use background color radio button - The 3D canvas shows elements rendered using the background color that's defined for each element.
These radio buttons allow you to toggle through the options and pick the color type.
The color type is either most appropriate for your project or one that you like the most. The z-index labels add visual information on the 3D canvas, so per user feedback, there are fewer color options in the Z-index tab than in the DOM tab.
The DOM tab
The DOM tab provides a general debugging view of the DOM tree. The DOM tab shows all the elements of the webpage in the 3D canvas:

An element's X and Y coordinates in the 3D canvas match the element's coordinates in the webpage. An element's Z coordinate is based on how deeply nested the element is in the DOM tree.
Nesting level for page (slider)
The slider controls how many levels of the DOM tree are displayed in the 3D canvas. The value displayed next to the slider indicates the maximum depth of the elements that are displayed in the 3D canvas. Dragging the slider to the left causes the outermost layers to peel away until you are left with a nesting level set to 1, which displays only the furthest-back element in the DOM. To remove some of the clutter, drag the slider, to get a closer look at what's happening in the lower levels.
Reset button
Resets the Nesting level for page slider to the default value for the page.
Color type (section)
In the DOM tab, you can choose from the following color schemes visualize the DOM in the 3D canvas:
 Purple to White radio button - The 3D canvas shows elements ranging from purple to white.
 Blue to Yellow radio button - The 3D canvas shows elements ranging from blue to yellow.
 Rainbow radio button - The 3D canvas shows elements as purple, blue, green, yellow, orange, and red.
 Use screen texture radio button - Renders the content from the webpage (color or image file) onto the elements.
 Use background color radio button - The 3D canvas shows elements rendered using the background color that's defined for each element.
Toolbar above the 3D canvas
Retake snapshot (button)
Click the Retake snapshot () button in the DOM tab or Z-index tab to refresh the 3D representation of the DOM tree or stacking context tree to match the latest webpage viewport. For example, after you make the viewport narrower or when you switch to a Device Emulation view, per Emulate mobile devices (Device Emulation).
When the Composited Layers tab is selected, this button is omitted, because retaking the snapshot happens automatically when you resize the viewport.
Reset view (button)
Click the Reset view button () to reset the panning and rotation of the page.
Pan view (button)
To shift the page left, right, up, or down, click the Pan view () button and then drag the page on the 3D canvas in the desired direction with your mouse.
Rotate view (button)
To rotate the page by using the mouse, click the Rotate view () button and then drag the page on the 3D canvas in the desired angle with your mouse.
To rotate the page by using the keyboard, click in the 3D canvas to put focus on it so that a black border appears, and then press the arrow keys.
To rotate the page horizontally, press the Left Arrow or Right Arrow key.
To rotate the page vertically, press the Up Arrow or Down Arrow key.
The keys rotate the page, regardless of whether the Pan view or Rotate view button is selected in the toolbar.
Isolate selected element (button and section)
Instead of showing all the page's DOM elements in the 3D canvas, you can focus on just displaying a portion of the DOM.
Select an element of the webpage in the 3D canvas, and then click the Isolate selected element button. The 3D canvas displays the selected element and the element's parents or children, without displaying the rest of the page elements.
Use this button to display the element that you selected on the 3D canvas, while reducing the clutter that complex webpages can create in the 3D canvas.
Include parents (checkbox)
The Include parents checkbox controls whether the parent elements of a selected page element are displayed in the 3D canvas. The Include parents checkbox is turned on by default. When this checkbox is selected, to display an element and any of its parent elements on the 3D canvas, select an element in the 3D canvas or in the Elements tool, and then click the Isolate selected element button.
This checkbox is shown when the Z-index or DOM tab is selected.
Include children (checkbox)
The Include children checkbox is only shown when the DOM tab is selected.
To display only the DOM element that you selected, along with and parents and children of the element:
 Select the Include parents and Include children checkboxes, and then click the Isolate selected element button. This is the default.
To display only the DOM element that you selected, along with the element's parent elements, but not the element's child elements:
 Select the Include parents checkbox, clear the Include children checkbox, and then click the Isolate selected element button.
To display only the DOM element that you selected, along with the element's child elements, but not the element's parent elements:
 Clear the Include parents checkbox, select the Include children checkbox, and then click the Isolate selected element button.
To display only the DOM element that you selected, without its parent or child elements:
 Clear the Include parents and the Include children checkbox, and then click the Isolate selected element button.
Movement controls in lower right

The controls in the lower right of the 3D canvas work the same, regardless of which tab you select.
 Zoom slider - This zooms the page in or out, same as the mouse scroll wheel, or dragging two fingers across the touchpad.
Up button - Moves the page up, relative to the page's coordinate system.
Down button - Moves the page down, relative to the page's coordinate system.
Left button - Moves the page right, relative to the page's coordinate system. Right button - Moves the page left, relative to the page's coordinate system.
See also
MDN > Web APIs > Document Object Model (DOM)
MDN > CSS Reference > z-index
Inspect and modify CSS animation effects
Article • 07/09/2024
Inspect and modify CSS animation effects by using the Animation Inspector in the Animations tool:

Capture animations by opening the Animations tool. The Animations tool automatically detects and sorts animations into groups.
Inspect animations by slowing down each one, replaying each one, or viewing the source code.
Modify animations by changing the timing, delay, duration, or keyframe offsets.
Overview
The Animations tool has two main purposes:
 Inspecting animations. You can slow down, replay, or inspect the source code for an Animation Group.
 Modifying animations. You want to modify the timing, delay, duration, or keyframe offsets of an Animation Group. Bezier editing and keyframe editing are currently not supported.
The Animation Inspector supports CSS animations, CSS transitions, and web animations. requestAnimationFrame animations are currently not supported.
Animation Groups
An Animation Group is a group of animations that may be related to each other. The web has no real concept of a group animation, so motion designers and developers have to compose and time individual animations so that the animations render as one coherent visual effect. The Animation Inspector predicts which animations are related based on start time (excluding delays, and so on). The Animation Inspector also groups the animations side-by-side.
In other words, a set of animations that are all triggered in the same script block are grouped together. If an animation is asynchronous, it is placed in a separate group.
Get started
To open the Animation Inspector, use any of these approaches, in DevTools:
 From the toolbar of the Activity Bar or Quick View: Click the More Tools () button, and then select Animations.
From the Customize menu: Click the Customize and control DevTools ( button, point to the More tools sub-menu, and then select Animations.
 From the Command Menu: When DevTools has focus, press Ctrl+Shift+P
(Windows/Linux) or Command+Shift+P (macOS) to open the Command Menu,
start typing animations, and then select Show Animations [Quick View].
By default, the Animations tool opens in the Quick View panel at the bottom of DevTools. By using the Animations tool on the Quick View panel, you can use the
Animations tool side-by-side with another tool that's open in the Activity Bar panel.

The Animation Inspector is grouped into four main sections (or panes). This guide refers to each pane as follows:
ﾉ Expand table
IndexPaneDescription1ControlsFrom here you can clear all currently captured Animation Groups, or change the speed of the currently selected Animation Group.2OverviewSelect an Animation Group here to inspect and modify it in the Details pane.3TimelinePause and start an animation from here, or jump to a specific point in the animation.4DetailsInspect and modify the currently selected Animation Group.
To capture an animation, perform the interaction that triggers the animation while the Animation Inspector is open. If an animation is triggered on page load, refresh the page with the Animation Inspector open to detect the animation.
Inspect animations
After you capture an animation, there are a few ways to replay it:
Hover on the thumbnail in the Overview pane to view a preview of it.
Select the Animation Group from the Overview pane (so that it is displayed in the Details pane), and then click the replay (
	the viewport. Click the animation speed (	)
  icons to change the preview speed of the currently selected Animation Group. You can use the red vertical bar to change your current position.  Click and drag the red vertical bar to scrub the viewport animation.
View animation details
After you capture an Animation Group, click on it from the Overview pane to view the details. In the Details pane, each individual animation is assigned to a row:

Hover on an animation to highlight it in the viewport. Click on the animation to select it in the Elements tool:

The leftmost, darker section of an animation is its definition. The right, more faded section represents iterations. For example, in the following figure, sections two and three represent iterations of section one:


Modify animations
There are three ways you can modify an animation with the Animation Inspector:
Animation duration.
Keyframe timings.
Start time delay.
For this section, suppose that the screenshot below represents the original animation:

To change the duration of an animation, click and drag the first or last circle.

If the animation defines any keyframe rules, then these are represented as white-filled inner circles. Click and drag a white-filled inner circle to change the timing of the keyframe:

To add a delay to an animation, click the animation anywhere except the circles, and drag it:


 This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

Application tool, to manage storage
Article • 12/07/2023
Use the Application tool to manage storage for web app pages, including manifest, service workers, local storage, cookies, cache storage, and background services.

The Application tool has the following pages, listed on the left:
Application
Manifest
Service workers Storage
Storage
Local storage
Session storage
IndexedDB
Web SQL
Cookies
Private state tokens
Interest groups
Shared storage Cache storage
Background services
Back/forward cache
Background fetch
Background sync
Bounce tracking mitigations
Notifications
Payment handler
Periodic background sync
Push messaging Reporting API
Preloading
Speculation rules
Preloads
This page
Frames top
To interpret the Storage > Usage section in the Application tool, see Quota usage in Debug a Progressive Web App (PWA).

Feedback
Was this page helpful?  Yes  No
View, edit, and delete cookies
Article • 12/07/2023
HTTP cookies are used to manage user sessions, store user personalization preferences, and track user behavior. Use the Cookies pane of the Application tool to view, edit, and delete the HTTP cookies for a webpage.
See Using HTTP cookies.
Open the Cookies pane
1. Open DevTools by pressing F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the Activity Bar, select the Application tab. If that tab isn't visible, click the More tools () button, and then click Application. The Manifest pane usually opens by default:

3. Under Storage, expand Cookies, then select an origin:

Fields
The Cookies table contains the following fields:
Name. The name of the cookie.
Value. The value of the cookie.
	Domain. The hosts that are allowed to receive the cookie. See Scope of cookies	.
Path. The URL that must exist in the requested URL in order to send the Cookie header. See Scope of cookies.
 Expires / Max-Age. The expiration date or maximum age of the cookie. See Permanent cookies. For session cookies this value is always Session.
Size. The size, in bytes, of the cookie.
HttpOnly. If true, this field indicates that the cookie should only be used over HTTP, and JavaScript modification isn't allowed. See HttpOnly cookies.
 Secure. If true, this field indicates that the cookie must be sent to the server only over a secure, HTTPS connection. See Secure cookies.
 SameSite. Contains strict or lax if the cookie is using the experimental Samesite attribute.
 SameParty. This attribute provides web developers a means to annotate cookies that are allowed to be set or sent in same-party, cross-site contexts.
 Partition Key. The partition key of a cookie only exists when the cookie is set in partitioned storage and corresponds to the top-level site where the cookie was initially created. See Cookies Having Independent Partitioned State (CHIPS) origin trial.
 Priority. Contains low, medium (default), or high if the cookie is using the deprecated Cookie Priority	 attribute.
Filter cookies
To filter cookies by Name or Value, use the Filter text box:

Note: Filtering by other fields isn't supported.
Edit a cookie
The Name, Value, Domain, Path, and Expires / Max-Age fields are editable. Double-click a field to edit it:

Delete cookies
To delete a specific cookie, click a cookie and then click Delete Selected ():

To delete all cookies, click Clear all cookies ():



Feedback
Was this page helpful? 

View and edit local storage
Article • 06/14/2023
To view, edit, and delete localStorage key-value pairs, use the Application tool.
View localStorage keys and values
1. Click the Application tab to open the Application tool. The Manifest pane is shown by default.

2. Expand the Local Storage menu.

3. Click a domain to view the key-value pairs.

4. Click a row of the table to view the value in the viewer below the table.

Create a new localStorage key-value pair
1. View the localStorage key-value pairs of a domain.
2. Double-click the empty part of the table. DevTools creates a new row and focuses your cursor in the Key column.

Edit localStorage keys or values
1. View the localStorage key-value pairs of a domain.
2. Double-click a cell in the Key or Value column to edit that key or value.

Delete localStorage key-value pairs
1. View the localStorage key-value pairs of a domain.
2. Click the key-value pair that you want to delete. DevTools highlights it blue to indicate that it is selected.
3. Press Delete, or click Delete Selected ().
Delete all localStorage key-value pairs for a domain
1. View the localStorage key-value pairs of a domain.
2. Click Clear All ().
Interact with localStorage from the Console
Since you can run JavaScript in the Console, and since the Console has access to the JavaScript contexts of the page, it is possible to interact with localStorage from the Console.
1. Use the JavaScript contexts menu to change the JavaScript context of the Console if you want to access the localStorage key-value pairs of a domain other than the page that is displayed.




Feedback
Was this page helpful? 
View and change IndexedDB data
Article • 12/07/2023
To view and change IndexedDB data, use the Application tool.
View IndexedDB data
1. Open a webpage that uses IndexedDB in a new window or tab. You can use the PWAmp demo application.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Application tab. If that tab isn't visible, click the More tools () button.
The Manifest pane usually opens by default:

4. In the sidebar, under Storage, expand the IndexedDB menu to see which databases are available:



Note: IndexedDB data doesn't update in real-time. If you see outdated data displayed in an object store, refresh the object store view. See Refresh IndexedDB data.
7. Click a cell in the Value column to expand the value:

Refresh IndexedDB data
IndexedDB values in the Application tool don't update in real-time.
To refresh the data, view an object store and then click the Refresh () button.
To refresh all data in an IndexedDB database, view a database and then click Refresh database:

Edit IndexedDB data
IndexedDB keys and values aren't editable from the Application tool. However, since DevTools has access to the page context, you can run JavaScript code within DevTools to edit the data stored in an IndexedDB database.
Edit IndexedDB data by using the Console tool
1. In DevTools, on the Activity Bar, select the Console tab.
2. In the Console tool, run JavaScript code to edit the IndexedDB data. For example, to add a new value to the keyval object store, run the following code:
JavaScriptlet connection = indexedDB.open("keyval-store", 1);
connection.onsuccess = e => {   const database = e.target.result;   const transaction = database.transaction("keyval", "readwrite");   const objectStore = transaction.objectStore("keyval");   const request = objectStore.add({foo: "bar"}, "new-key");   request.onsuccess = e => {    console.log(e.target.result);
  }
}
Edit IndexedDB data by using snippets
Snippets are a way to store and run JavaScript code repeatedly, within DevTools. If you need to edit IndexedDB data often, store it in a new snippet, and then run the snippet.
To learn more, see Run snippets of JavaScript on any webpage.

Delete IndexedDB data
You can delete any of the following:
An IndexedDB key-value pair.
All key-value pairs in an object store.
An IndexedDB database.
All IndexedDB storage.
These options are described below.
Delete an IndexedDB key-value pair
1. View an IndexedDB object store.
2. Click the key-value pair that you want to delete. DevTools highlights the key-value pair to indicate that it's selected:

Delete all key-value pairs in an object store
1. View an IndexedDB object store.
2. Click the Clear object store () button.

Delete an IndexedDB database
1. View the IndexedDB database that you want to delete.
2. Click Delete database.

Delete all IndexedDB storage
1. In the sidebar of the Application tool, click Storage.
2. Scroll down to the Storage checkboxes and make sure that the IndexedDB checkbox is selected.
3. Click the Clear site data button.



Feedback
Was this page helpful? 
View and edit session storage
Article • 12/07/2023
To view, edit, and delete sessionStorage key-value pairs, use the Application tool.
View sessionStorage keys and values
To view the sessionStorage key-value pairs of a domain:
1. In DevTools, click the Application tab to open the Application tool. The Manifest panel is shown by default:

2. In the Storage section on the left, expand Session storage:

3. In the Session storage on the left, select a domain. The domain's key-value pairs are listed in the upper right:

4. Select a row of the key-value table. The value for the selected key is displayed below the key-value table:

Create a new sessionStorage key-value pair
To add a new key/value pair for session storage:
1. In DevTools, in the Application tool, in the Storage section on the left, expand Session storage, and then select a domain. For details, see View sessionStorage keys and values, above.
2. In the Key/Value table on the right, double-click an empty key/value row, to enter editing mode.
3. In the Key field of the row, enter a key.
4. In the Value field of the row, enter a value for the key.
5. Press Enter, or click an empty area. The value is then also displayed below the key/value table:

Edit sessionStorage keys or values
To edit a key/value pair for session storage:
1. In DevTools, in the Application tool, in the Storage section on the left, expand Session storage, and then select a domain. For details, see View sessionStorage keys and values, above.
2. In the Key/Value table on the right, double-click a cell in the Key or Value column to edit that key or value:

Delete sessionStorage key-value pairs
To delete a key/value pair for session storage:
1. In DevTools, in the Application tool, in the Storage section on the left, expand Session storage, and then select a domain. For details, see View sessionStorage keys and values, above.
2. In the Key/Value table on the right, select a key-value pair to highlight it.
3. Press Delete, or click the Delete Selected () button, or right-click the row and then select Delete.
Delete all sessionStorage key-value pairs for a domain
To delete all key/value pairs for session storage for a domain:
1. In DevTools, in the Application tool, in the Storage section on the left, expand Session storage, and then select a domain. For details, see View sessionStorage keys and values, above.
2. Click the Clear All () button.
Interact with sessionStorage from the Console
You can run JavaScript expressions and statements in the Console, and the Console has access to the JavaScript contexts of the page, including for sessionStorage.
To interact with sessionStorage by using the Console:
1. In DevTools, select the Console tool. For example, press Esc to display the Quick View panel, which always includes a Console tab.
2. If you want to access the sessionStorage key-value pairs of a domain other than the page you're on, use the JavaScript contexts menu to change the JavaScript context of the Console:

In this scenario, there would be multiple domains listed below top.

The above screenshot shows the following JavaScript expressions, and the resulting output:
JavaScript> sessionStorage.key(0) <· 'my-key-01'
> sessionStorage.key(1)
<· 'my-key-02'
> sessionStorage.setItem("my-key-01", "efgh-5678")
<· undefined
> sessionStorage.getItem("my-key-01")
<· 'efgh-5678'When you enter JavaScript assignment expressions by using the Console, the Key/Value pair table is updated.


Feedback
Was this page helpful?  Yes  No
View Web SQL data
Article • 11/07/2024
This article shows how to use DevTools to inspect Web SQL data.

View Web SQL Data
1. In DevTools, open the Application tool. The Manifest pane usually opens by default.

2. Expand the Web SQL section to view databases and tables. In the following figure, below html5meetup is a database and rooms is a table.

3. Click a table to view the data for that table.

Edit Web SQL data
You can't edit Web SQL data when viewing a Web SQL table, such as in the previous figure. But you can run statements from the Web SQL Console that edit or delete tables.
See Run Web SQL queries.
Run Web SQL queries
1. Click a database to open a console for that database.
2. Type a Web SQL statement, then press Enter to run it.

Refresh a Web SQL table
DevTools doesn't update tables in real-time. To update the data in a table:
1. View the data in a Web SQL table.
2. Click Refresh ().
Filter out columns in a Web SQL table
1. View the data in a Web SQL table.
2. Use the Visible columns text box to specify what columns you want to show.
Provide the column names as a CSV list.

Delete all Web SQL data
1. Open the Clear Storage pane.
2. Make sure that the Web SQL checkbox is turned on.

3. Click Clear site data.



Feedback
Was this page helpful? 
View Cache data
Article • 12/11/2024
This guide shows you how to use DevTools to inspect Cache data.
To inspect HTTP cache data, in the Network tool, use the Size column of the Network Log. See Log network activity in Inspect network activity.
View cache data
1. Open DevTools by pressing F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the Activity Bar, select the Application tab. If that tab isn't visible, click the More tools () button, and then click Application. The Manifest pane usually opens by default:

3. Expand the Cache Storage section to view available caches:

4. Click a cache to view the contents:

5. Click a resource to view the HTTP headers in the section below the table:

6. Click Preview to view the content of a resource:

To learn more about cache data storage quota, see Quota usage in Debug a Progressive Web App (PWA).
Refresh a resource
1. View the data for a cache.
2. Click the resource that you want to refresh. DevTools highlights it to indicate that it is selected.
3. Click Refresh ():

Filter resources
1. View the data for a cache.
2. Use the Filter by Path text box to filter out any resources that don't match the path that you provide:

Delete a resource
1. View the data for a cache.
2. Click the resource that you want to delete. DevTools highlights it to indicate that it is selected.
3. Click Delete Selected ():

Delete all cache data
1. In the Application tool, click Storage.
2. Make sure that the Cache storage checkbox is selected.
3. Click the Clear site data button:



Feedback
Was this page helpful?  Yes  No
Debug a Progressive Web App (PWA)
Article • 12/11/2024
Use the Application tool to inspect, modify, and debug a PWA's web app manifests, service workers, and service worker caches. The Application tool includes the following panes for PWA features:
 Use the Manifest pane to inspect your web app manifest and trigger "Add to Homescreen" events.
Use the Service workers pane for service-worker-related tasks, such as:
Unregistering or updating a service.
Emulating push events.
Going offline.
Stopping a service worker.
Use the Cache Storage pane to view your service worker cache.
Use the Storage pane to unregister a service worker and clear all storage and caches.
The features that are discussed below are features of the Application tool are relevant for PWAs. For help on the other features and panes in the Application tool, see:
View the resource files that make up a webpage View and edit local storage
See also:
 Overview of Progressive Web Apps (PWAs)
Web app manifest
If you want your users to be able to add your app to their mobile homescreens, you need a web app manifest. The manifest defines how the app appears on the homescreen, where to direct the user when launching from homescreen, and what the app looks like on launch.
After you have your manifest set up, you can use the App Manifest pane of the Application tool to inspect your manifest:

The App Manifest pane contains the following sections:

more user-friendly display.
 The Icons section displays every icon that's been specified in the manifest.
Service workers
Service workers are a fundamental technology in the web platform. Service workers are scripts that the browser runs in the background, separate from a web page. These scripts enable you to access features that don't need a webpage or user interaction, such as push notifications, background sync, and offline experiences.
The Service workers pane in the Application tool is the main place in DevTools to inspect and debug service workers:
If a service worker is installed to the currently open page, then it is listed on this pane. For example, in the previous figure, there is a service worker installed for the scope of https://weather-pwa-sample.firebaseapp.com.
 The Offline checkbox puts DevTools into offline mode. This is equivalent to the offline mode available from the Network tool, or the Go offline option in the Command Menu.
 The Update on reload checkbox forces the service worker to update on every page load.
 The Bypass for network checkbox bypasses the service worker and forces the browser to go to the network for requested resources.
The Update button performs a one-time update of the specified service worker.
The Push button emulates a push notification without a payload (also known as a tickle).
The Sync button emulates a background sync event.
The Unregister button unregisters the specified service worker. Check out Storage for a way to unregister a service worker and wipe storage and caches with a single button click.
 The Source line tells you when the currently running service worker was installed. The link is the name of the source file of the service worker. Choosing on the link sends you to the source of the service worker.
 The Status line tells you the status of the service worker. The ID number next to the green status indicator (#36 in previous figure) is for the currently active service worker. Next to the status, a start button (if the service worker is stopped) or a stop button (if the service worker is running) is displayed. Service workers are designed to be stopped and started by the browser at any time. Explicitly stopping your service worker using the stop button may simulate that. Stopping your service worker is a great way to test how your code behaves when the service worker starts back up again. It frequently reveals bugs due to faulty assumptions about persistent global state.
 The Clients line tells you the origin that the service worker is scoped to. The focus button is mostly useful when you've enabled the show all checkbox. When that checkbox is enabled, all registered service workers are listed. If you click the focus button next to a service worker that is running in a different tab, Microsoft Edge focuses on that tab.
If the service worker causes any errors, a new label called Errors shows up.
Service worker caches
The Cache Storage pane provides a read-only list of resources that have been cached using the (service worker) Cache API:

The first time you open a cache and add a resource to it, DevTools might not detect the change. Refresh the page to display the cache.
All open caches are listed under the Cache Storage expander.
Quota usage
Some responses within the Cache Storage pane may be flagged as being "opaque". This refers to a response retrieved from a different origin, like from a CDN or remote API, when CORS isn't enabled.
In order to avoid leakage of cross-domain information, significant padding is added to the size of an opaque response used for calculating storage quota limits (for example whether a QuotaExceeded exception is thrown) and reported by the navigator.storage API.
The details of this padding vary from browser to browser, but for Microsoft Edge, this means that the minimum size that any single cached opaque response contributes to the overall storage usage is approximately 7 megabytes. Remember the padding when determining how many opaque responses you want to cache, since you may easily exceed storage quota limitations much sooner than you otherwise expect based on the actual size of the opaque resources.
Related Guides:
 Stack Overflow: What limitations apply to opaque responses?
Storage
The Storage pane is a very useful feature when developing progressive web apps. This pane lets you unregister service workers and clear all caches and storage with a single button click.


Feedback
Was this page helpful? 
Test Progressive Web App (PWA) protocol handling
Article • 03/28/2023
This article assumes that you have already defined protocol handlers in your PWA web app manifest and are debugging your app with the DevTools. To learn about how to define and register protocols in your PWA, see Handle protocols in a PWA.
Use the Application tool to verify and test that Microsoft Edge has successfully registered your app as a handler for protocols defined in your web app manifest.
Verify that protocol handlers are defined correctly
If you haven't already defined handlers for protocols in your PWA web app manifest, the Application tool will note that protocols haven't been defined and will provide additional information on how to update your web app manifest.
If you have defined protocols correctly in your web app manifest, the Application tool will report that Microsoft Edge has found valid protocol handler registrations and that you can test these protocol handlers with your installed PWA.
To verify that you have correctly defined protocol handlers:
1. Navigate to your PWA in Microsoft Edge. You can use the PWAmp demo application.
2. Open DevTools (F12).
3. Open the Application tool.
4. Click Manifest to expand the dropdown list.
5. Click Protocol Handlers.
If protocol handlers haven't been defined in the web app manifest, or have been defined incorrectly, the following message will be displayed:

If protocol handlers have been defined successfully in the web app manifest, the following message will be displayed:

The Protocol Handlers section also makes it possible to test the protocol handlers you've defined.
Test protocols from the Application tool
To test your protocol handlers from the Application tool, you must have already installed your PWA. To learn how to install your PWA, see Installing a PWA.
The Application tool detects all the protocol handlers from your web app manifest. To test a handler:
1. Navigate to your PWA in Microsoft Edge and open DevTools (F12). You can use the PWAmp demo application.
2. Open the Application tool and click Manifest > Protocol Handlers.
3. Select the protocol you want to test by choosing from the dropdown list.
4. Enter the rest of the URI in the text and click Test protocol. This will launch your
PWA. Depending on your operating system (OS), you may need to allow Microsoft Edge to open your PWA and accept any OS-level permissions for registering your app as a handler for your protocol.
In the following screenshot, the web+amp://files.freemusicarchive.org/storagefreemusicarchive-org/music/no_curator/Kevin_MacLeod/Jazz_Sampler/Kevin_MacLeod_-

Handle protocols in a PWA
Getting started with Protocol Handlers for your web app
URL protocol handler registration for PWAs
Was this page helpful?  Yes  No
Simulate the Window Controls Overlay API without installing your PWA
Article • 05/22/2024
In DevTools, in the Application tool, you can simulate the Window Controls Overlay
(WCO) feature that Progressive Web Apps (PWAs) have, without having to install the
PWA first and enable the WCO feature. By simulating the WCO feature from within DevTools, you can test CSS code changes for your title bar area more quickly than by reinstalling the revised PWA.

Using the WCO feature in your PWA
In your Progressive Web App (PWA), use the Window Controls Overlay (WCO) to have control over the title bar area that's currently displayed in standalone display mode. Window Controls Overlay is a set of features that work together to provide just the essential controls needed for the app window. This layout frees up more space for the web content layer. See Display content in the title bar area using Window Controls Overlay.
To simulate the WCO feature for Windows, Linux, and macOS in your PWA without having to install the PWA first, use the Window Controls Overlay section of the Application tool in DevTools.
Simulate the Window Controls Overlay in DevTools
1. Open a Progressive Web App (PWA) that uses the Window Controls Overlay (WCO) feature. For example, open the 1DIV demo app
The Window Controls Overlay is not yet displayed in the upper right of the webpage.
2. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. On the Activity Bar, select the Application tab. If that tab isn't visible, click the More tools () button, and then select Application.
4. In the Application tool, expand Manifest in the upper left, and then select Window Controls Overlay.
5. In the Window Controls Overlay section on the right, select the checkbox Emulate the Window Controls Overlay on <platform>, and then select a platform, such as Windows, macOS, or Linux.
The simulated Window Controls Overlay is added to the rendered web page:

The simulated overlay is a static image. The values of the CSS variables env(titlebar-area-left), env(titlebar-area-top), env(titlebar-area-width), and env(titlebar-area-height) are set to match the platform that you selected.
See also
 Display content in the title bar area using Window Controls Overlay - the Window Controls Overlay feature for PWAs.
 Tooling for PWA Window Controls Overlay in What's New in DevTools (Microsoft Edge 121).

Debug background services
Article • 03/28/2023
The Background Services section of Microsoft Edge DevTools is a collection of tools for the Web APIs that enable your website to send and receive data even when a user doesn't use your website, and enable the browser to report production problems to your server.
Microsoft Edge DevTools considers each of the following APIs to be a background service:
Background Fetch
Background Sync Notifications
Payment Handler
Periodic Background Sync
Push Messages
Reporting API
The Background Services section logs API events, even when you're not using DevTools, to help you make sure that events are being sent and received as expected.
Background Fetch
The Background Fetch API enables the service worker of a Progressive Web App to reliably download large resources, like movies or podcasts, as a background service. To log Background Fetch events for 3 days, even when DevTools isn't open:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. On the left, in the Background Services section, select Background Fetch. The Background Fetch page opens.

4. Click Record (). After triggering some Background Fetch activity, DevTools logs the events to the table.

Click an event to view its details in the space below the table.
Background Sync
The Background Sync API enables the offline service worker of a Progressive Web App to send data to a server once it has re-established a reliable internet connection. To log Background Sync events for 3 days, even when DevTools isn't open:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
In DevTools, on the main toolbar, select the  tab. If that tab isn't visible,click the More tabs () button.On the left, in the Background Sync. TheBackground Sync page opens.
4. Click Record (). After triggering some Background Sync activity, DevTools logs the events to the table.

Select an event to view its details in the space below the table.
Notifications
After a service worker has received a Push Message from a server, the service worker uses the Notifications API to display the data to a user. To log Notifications for 3 days, even when DevTools isn't open:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
In DevTools, on the main toolbar, select the  tab. If that tab isn't visible,click the More tabs () button.On the left, in the Notifications. TheNotifications page opens.
4. Click Record (). After triggering some Notifications activity, DevTools logs the events to the table.

Click an event to view its details in the space below the table.
Payment Handler
The Payment Handler API allows web applications to handle payment requests on behalf of users. To log the payment request and response events for 3 days, even when DevTools isn't open:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
In DevTools, on the main toolbar, select the  tab. If that tab isn't visible,click the More tabs () button.On the left, in the Payment Handler. ThePayment Handler page opens.
4. Click Record (). After triggering some payment requests, DevTools logs the events to the table.

Click an event to view its details in the space below the table.


Periodic Background Sync
The Periodic Background Sync API enables the service worker of a Progressive Web App to retrieve data from a server, periodically, even when the website isn't opened. To learn more about the Periodic Background Sync API, see Use the Periodic Background Sync API to regularly get fresh content.
To log Periodic Background Sync events for 3 days, even when DevTools isn't open:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. On the left, in the Background Services section, select Periodic Background Sync.
The Periodic Background Sync page opens.

4. Click Record (). After triggering some Periodic Background Sync activity, DevTools logs the events to the table.

Push Messages
To display a push notification to a user, the service worker of a Progressive Web App must first use the Push Message API to receive data from a server. When the service worker is ready to display the notification, it uses the Notifications API. To log Push Messages for 3 days, even when DevTools isn't open:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. On the left, in the Background Services section, select Push Messaging. The Push Messaging page opens.

4. Click Record (). After triggering some Push Message activity, DevTools logs the events to the table.

5. Click an event to view the details in the space below the table.

Reporting API
The Reporting API enables web developers to receive reports of security violations, deprecated API calls, and others, from their production websites.
To see reports that have been sent by the browser using the Reporting API:
1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. On the left, in the Background Services section, select Reporting API. The Reporting API page opens.

4. The Reporting API page displays the reports sent in the table at the top.

5. Click a report to view the details in the space below the table.

6. The Reporting API page also displays the list of reporting endpoints configured via the Reporting-Endpoints HTTP header in the table at the bottom.


Feedback
Was this page helpful? 

Track changes to files using the Changes tool
Article • 12/07/2023
The Changes tool tracks any changes that you've made to CSS or JavaScript in DevTools. It shows you what changes to make to your actual source files after you've successfully used DevTools to modify a copy of your webpage files that are sent from the server:

Use the Changes tool to quickly display all your changes in order to re-apply those changes to the actual source files in your source code editor.
Open the Changes tool by clicking the More
Tools icon
On the Activity Bar or Quick View toolbar, click the More tools () button, and then select Changes:

The Changes tool opens in the Activity Bar or in the Quick View, depending on which toolbar you used.
Open the Changes tool by using the Command Menu
To open the Changes tool using the Command Menu:
1. To open the Command Menu, press Ctrl+Shift+P on Windows/Linux or Command+Shift+P on Mac.
2. Start typing changes. The Show Changes command is highlighted:

3. Press Enter. The Changes tool opens in the Quick View panel:

See also:
 Run commands in the Command Menu
Interpret added lines, removed lines, and differences in a line
Each modified file is listed in the side pane. Selecting a file shows the modifications as a diff view. You won't see the entire file, but only the lines that have changed, along with a few lines above and below the changed lines, for context.
The following diff view shows that there were two modifications in different parts of a file. One change is an insertion, and one change is several deleted lines:

ﾉ Expand table
Type of changeIndicatorRemoved lineEach line that was removed from the code is preceded by a - and is colored red.Added lineEach new line has a + in front of it and is colored green.Changed lineAn adjacent pair of lines, with a - line and then a + line.Changes are represented as insertion or deletion of individual lines of code, in the two columns of line numbers. The left column represents line numbers in the old file, and the right column represents lines numbers in the new file.
Open a changed file in the Sources tool
Clicking a modified line in the Changes tool opens the file in the Sources tool, scrolled to the modified line.
Undo all changes
To undo all changes, at the bottom of the Changes tool, click the Revert all changes to current file () button:

Horizontally scroll entries
When you've made a change to a minified file, the Changes tool enables you to scroll horizontally, to display all of your minified code:

To scroll horizontally, click the horizontal scrollbar, or press the left or right arrow keys.

Find unused JavaScript and CSS code with the Coverage tool
Article • 12/07/2023
The Coverage tool helps you find unused JavaScript and CSS code. Removing unused code can speed up your page load and save your mobile users cellular data.
This guide covers how to find unused code by using the Coverage tool. This guide doesn't cover how to refactor a codebase to avoid unused code, because refactoring code depends on your technology stack.
Overview
Shipping unused JavaScript or CSS is a common problem in web development. For example, suppose that you want to use the Bootstrap button component on your page. To use the button component, you need to add a link to the Bootstrap stylesheet in your HTML, like this:
HTML<html>
  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.cs s">   </head>
  <body>
    <button class="btn btn-primary">Button</button>
  </body>
</html>This stylesheet doesn't just include the code for the Bootstrap button component; it contains the CSS for all of the Bootstrap components. Because your page only uses the button component, you're making users download extra code that they don't need. The Coverage tool helps you find unused code such as this.
Open the Coverage tool
To find unused code in your page, use the Coverage tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, open the Command Menu. To open the Command Menu, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).
3. Start typing coverage, press the Down Arrow key to highlight the Show Coverage command, and then press Enter:

The Coverage tool opens in the Quick View panel at the bottom of DevTools:

Record code coverage
1. Click one of the following buttons in the Coverage tool:
 To see what code is needed to load the page, click the Start instrumenting coverage and refresh the page () button.
 To see what code is used after interacting with the page, click the Instrument coverage () button.
2. To stop recording code coverage, click the Stop instrumenting coverage and show results () button.
Analyze code coverage
The table in the Coverage tool displays the resources that were analyzed, and how much code is used within each resource. Click a row to open that resource in the Sources tool and display a code coverage report that gives a line-by-line breakdown of used code and unused code:

Columns in the code coverage report:
ﾉ Expand table
ColumnDescriptionURLThe URL of the resource that was analyzed.TypeWhether the resource contains CSS, JavaScript, or both.Total BytesThe total size of the resource in bytes.Unused BytesThe number of bytes that weren't used.ColumnDescriptionUsage
VisualizationA visualization of the Total Bytes and Unused Bytes columns. The green section of the bar is used bytes. The red section of the bar is unused bytes.

Feedback
Was this page helpful? 

Crash analyzer tool
Article • 07/12/2024
Use the Crash analyzer tool to analyze and quickly diagnose crashes of your web app in production. In the Crash analyzer tool, you can input a JavaScript stack trace that you collected in production and then have your source maps applied to unminify the stack trace so that you can debug faster. The Crash analyzer tool enables you to take a minified JavaScript stack trace and rapidly work backwards to determine what lines of code caused the error.

When a web app crashes or hangs unexpectedly, this can result in data loss and a poor experience for your users. Collecting information about the crashes that your users experience is helpful to diagnose and fix the root cause of the crashes. However, code that's running in production is often minified, which causes the JavaScript stack traces that are logged on crashes to also be minified. The Crash analyzer tool helps you map minified stack traces collected in production back to the original source code, so that you can quickly identify the root cause of the crashes.
Here is an example of a minified stack trace that you might collect from your web app in production:
Uncaught Error: test error     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:1344     at t.render (https://microsoftedge.github.io/Demos/devtools-crash-analyzer/app/prod.bundle.js:1:1368)     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2278     at Array.map (<anonymous>)     at t.render (https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2252)     at new t (https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2063)     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2857     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2896
Variable and function names are often shortened, like the variable t above. Script URLs often point to a built single-line bundle file, like the prod.bundle.js file above.
By comparison, here is an example of an unminified stack trace, with original variable and function names, and original source file names and line numbers:
Uncaught Error: test error     at shorten (util.ts:9:9)     at processUIString (util.ts:2:10)     at todoMarkupBuilder (todo.ts:35:41)     at Todo.render (todo.ts:24:12)     at app.ts:36:39     at Array.map (<anonymous>)     at App.render (app.ts:36:22)     at new App (app.ts:29:10)     at index.ts:9:13     at index.ts:9:33There are two steps to analyze minified production stack traces in the Crash analyzer tool:
1. First, you collect specially formatted stack traces from your web app in production.
There are many ways to collect stack traces from the browsers your users are using. The section Collect stack traces in production, below, provides examples and recommendations. It also explains how to format the stack traces so that they can be analyzed in the Crash analyzer tool.
2. Next, you analyze the stack traces in the Crash analyzer tool.
The section Analyze stack traces in the Crash analyzer tool, below, explains how to first make source maps accessible in DevTools, and then how to use the Crash analyzer tool to analyze the stack traces.
Collect stack traces in production
The Crash analyzer tool doesn't collect stack traces for you. You must first collect stack traces from your web app by using the tools and services that are available to you. Here are some ways to collect stack traces in production:
 We recommend using a telemetry system such as Azure Monitor Application Insights that can capture information about unhandled errors from your JavaScript code.
 You can also write JavaScript code to capture unhandled errors in your web app. The following example shows how to use the window.onerror event handler to capture unhandled errors in a web app:
JavaScriptwindow.onerror = function (message, source, line, column, error) {
  // Get the stack trace from the error object.   const stackTrace = error.stack;
  // Send the stack trace to your telemetry system.
  // Code not shown.
};Format the stack traces for the Crash analyzer tool
Collecting stack traces in production is not enough. The Crash analyzer tool needs stack traces to include a section called Source modules.
Here's an example of a stack trace that includes the Source modules section:
Uncaught Error: test error     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:1344     at t.render (https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:1368)     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2278     at Array.map (<anonymous>)     at t.render (https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2252)     at new t (https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2063)     at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2857    at https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js:1:2896
Source modules:     https://microsoftedge.github.io/Demos/devtools-crashanalyzer/app/prod.bundle.js 
8b544e37b35d920a39d0e10f70fddc29b25d0db362741f3071eff86cef8613e9
The Source modules section includes the URLs of the JavaScript files that are involved in the stack trace, and a hash of the content of each file. The hash is a 64-character string of hexadecimal characters that corresponds to the SHA-256 hash of the script being executed. This is a byte-for-byte hash of the content for each JavaScript file. The URLs and hashes make it possible for the Crash analyzer tool to later retrieve the source maps that were used to unminify the stack trace.
To add the Source modules section to your error stack traces, use the Edge DevTools Crash Analyzer Support library in your web app, as follows:
1. Add the Edge DevTools Crash Analyzer Support library in your project by using npm:
Bashnpm install @microsoft/edge-devtools-crash-analyzer-support2. Import the library in your JavaScript code, and then call the installErrorStackModuleAnnotations function:
JavaScriptimport { installErrorStackModuleAnnotations } from '@microsoft/edgedevtools-crash-analyzer-support'; installErrorStackModuleAnnotations(Error);Analyze stack traces in the Crash analyzer tool
The Crash analyzer tool in DevTools unminifies the specially formatted stack traces that you collected from users in production. If your source maps also contain the original source code, the Crash analyzer tool will show you the original file names and function names that make up the stack trace.
Make source maps accessible in DevTools
The Crash analyzer tool uses the Source module information that's in the stack trace to retrieve the source maps that correspond to the script files in the stack trace. This means that you first need to make your source maps accessible in DevTools.
The Crash analyzer tool works best if your source maps are securely stored using Azure
Artifacts Symbol Server. This is because DevTools can retrieve source maps from Azure Artifacts Symbol Server on demand when analyzing your error. See Securely debug original code by publishing source maps to the Azure Artifacts symbol server.
If you're not using Azure Artifacts Symbol Server, you can still use the Crash analyzer tool, by making sure that the source maps that correspond to the stack trace are accessible to DevTools. For example, if you've loaded source maps before by using the
//# sourceMappingURL= comment, DevTools caches the source maps for later reuse. To learn more, see Source maps in DevTools in Map the processed code to your original source code, for debugging.
DevTools doesn't cache source maps when the domain name is localhost. This means that if you're not using Azure Artifacts Symbol Server, the Crash analyzer tool will only work for stack traces that are collected from production environments, not from local development environments that use the localhost domain.
Open the Crash analyzer tool
The Crash analyzer tool is a Quick View tool; by default, it opens in the Quick View panel, so that you can use it alongside the other tools that are open in the Activity bar.
From the More tools menu
To open the Crash analyzer tool by using the DevTools More tools menu:
1. In Microsoft Edge, select Settings and more () > More tools > Open Developer tools (Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS)). DevTools opens.
2. In DevTools, press Esc to open the Quick View toolbar at the bottom (if not open already). In the Quick View toolbar, click the More tools () button, and then select Crash analyzer.
From the Command Menu
To open the Crash analyzer tool by using the Command Menu:
1. In Microsoft Edge, select Settings and more () > More tools > Open Developer tools (Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS)). DevTools opens.
2. In DevTools, click the Customize and control DevTools () button, and then select Run command. Or, when DevTools has focus, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS). The Command Menu opens.
3. Start typing crash analyzer, and then select the Show Crash analyzer [Quick View] command. The Crash analyzer tool opens in the Quick View panel.
Enter a stack trace in the Crash analyzer tool
If you want to test the Crash analyzer tool but you don't have a stack trace to analyze, follow these steps to collect a sample stack trace:
1. In Microsoft Edge, open the DevTools Crash analyzer demo in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity bar, click Console (). The Console tool opens.
4. Select the error stack trace that's displayed in the Console tool and copy it.
To use the Crash analyzer tool in DevTools:
1. Open the Crash analyzer tool of DevTools, as described in Open the Crash analyzer tool, above.
2. Enter your specially formatted stack trace into the left pane of the Crash analyzer tool:

3. In the Crash analyzer tool, click the Analyze () button (or press Ctrl+Enter).
The right-hand pane shows the original file names and function names that make up the stack trace:

This loads the source maps that correspond to the source modules, and attempts to unminify any stack frames for which JavaScript or TypeScript source content was contained in the source map.
4. If the source code is available in your source maps for a frame, click the frame to display the source code.
The original source code appears in the Sources tool, and the line in question is highlighted:

5. To copy the unminified stack trace, in the Crash analyzer tab's toolbar, click the Copy unminified stack trace () button. That produces and copies to the clipboard the full, unminified stack trace, as a stack trace in the conventional stack trace format, except with information that matches your original code, including function names, source file names, and line and column numbers:
Uncaught Error: test error     at shorten (webpack://devtools-crash-analyzer/src/util.ts:9:9)     at processUIString (webpack://devtools-crash-analyzer/src/util.ts:2:10)     at anonymous callback to [computed property].todos.map (webpack://devtools-crash-analyzer/src/app.ts:36:39)     at Array.map (<anonymous>)
    at anonymous callback to [computed property].todos.map (webpack://devtools-crash-analyzer/src/app.ts:36:22)     at constructor for App (webpack://devtools-crashanalyzer/src/app.ts:29:10)
    at [Global code: "webpack://devtools-crash-analyzer/src/index.ts"] 
(webpack://devtools-crash-analyzer/src/index.ts:9:13)     at (anonymous function) (https://microsoftedge.github.io/Demos/devtoolscrash-analyzer/app/prod.bundle.js:2:2897)UI features
The Crash analyzer tool has the following UI features:
ﾉ Expand table
UI item	DescriptionLeft pane	The stack trace to analyze.Right pane	Displays the original file names and function names that make up the stack trace.The New analysis (	Creates a new blank left pane, to paste a new stack trace.
) buttonThe Analyze (	)	Creates a new analysis in the right-hand pane, based on the stack trace in button	the left pane.The Analyses (	Shows the list of analyses.
)
dropdown listThe Remove this	Removes the present analysis. analysis (	) buttonThe Copy	Produces and copies to the clipboard the full, unminified stack trace, as a unminified stack	stack trace in the conventional stack trace format, except with information trace (	) button	that matches your original code, including function names, source file names, and line and column numbers.The Open Symbol	Display or modify the Azure Artifacts Symbol Server settings.
Server settings (	) buttonThe How to use (	Opens the present article.
) buttonProvide feedback
Leave feedback in the MicrosoftEdge / DevTools feedback repo and let us know what works well, what doesn't, and what you'd like for such features.
See also
 Securely debug original code by publishing source maps to the Azure Artifacts symbol server
 Source maps in DevTools in Map the processed code to your original source code, for debugging.
External links:
DevTools Crash analyzer demo
	MicrosoftEdge / DevTools	 - feedback repo.
Azure Monitor Application Insights in Azure Monitor docs.
Edge DevTools Crash Analyzer Support - npm package.

Optimize CSS styles with the CSS Overview tool
Article • 04/13/2023
The CSS Overview tool captures an overview of the CSS code used on a webpage and displays a report about the colors, fonts, and media-queries used. The tool also identifies potential color contrast issues and unused CSS declarations issues.
Open the CSS Overview tool
To open the CSS Overview tool:
1. Navigate to the TODO list demo app in Microsoft Edge, or to your own webpage.
2. Open DevTools by pressing F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
3. In the main toolbar, click More Tools and select CSS Overview from the list.

4. The CSS Overview tool opens and shows a welcome screen.

Capture a CSS overview report
Start using the tool by capturing a new report. Click Capture overview, the overview report appears.

If you make changes to your webpage and want to view a new report, click Clear overview and then capture a new overview.

Understand the report
The CSS overview report contains information organized into several sections:
 Overview summary: Statistics about key CSS rules, selectors, and media queries on the page.
Colors: Colors used on the page.
Font info: List of fonts on the page.
Unused declarations: List of unused CSS declarations.
Media queries: List of media queries.
To view the sections of the report, use the scrollbar or click the sections in the sidebar:

Overview summary
The Overview summary section of the CSS overview report is useful to get a quick overview of your CSS code. It provides the number of external and inline stylesheets, the number of CSS rules, the number of selectors and their various types, and the number of media queries.
This can be used to assess the volume and consistency of your CSS codebase on a given webpage. For example, if you decided to only use class selectors, the Summary section will make it quick to detect other types of selectors like ID or attribute.
Colors section
The Colors section of the CSS overview report lists all the colors used on the webpage, and groups them by background, text, fill, and border categories.
This can be useful to discover cases when several similar colors are used instead of one common color. CSS custom properties (also known as CSS variables) can be used to avoid repeating colors throughout a CSS file and therefore avoid this problem. Learn more about CSS variables on MDN.
The Colors section also contains a list of color contrast issues on the page. See View elements with color contrast issues, below.
Font info section
The Font info section of the CSS overview report lists all the font families used on the webpage and provides details about which sizes, weights, and line heights are used for each.
When designing a webpage, using consistent typography settings can help reach a more aesthetically-pleasing result. The Font info section can be useful to detect when too many different fonts or font styles are used.
Each font in the Font info section contains links to the DOM elements they apply to. To reveal the elements a given font applies to:
1. On the overview report, click Font info in the sidebar to scroll to the relevant section of the report.
2. Find the font family and the size, weight, or line-height you are interested in.
3. Click the X occurrences link next to it to reveal the list of elements.
4. Move your mouse over the elements in the list to highlight them in the rendered page.

5. Click an element to automatically open the Elements tool with that element selected.

Unused declarations
The Unused declarations section of the CSS overview report lists some of the CSS declarations that don't have an effect on their target elements.
CSS declarations are key/value pairs such as top: 42px. CSS declarations are contained in CSS rules, and rules target specific elements on the webpage. Depending on other styles applied to an element, a CSS declaration may not have any effect.
As an example, the top: 42px declaration will not have any effect if the element it targets is not positioned with position: absolute or position: relative for example.
These cases may be hard to find and the Unused declarations section helps by listing some of them. Note that not all possible cases are listed. For now, the following cases are reported:
 When the top, right, bottom, or left properties are used on statically positioned elements.
When the width or height properties are used on inline elements.
When the vertical-align property is used on elements that are not inline or table cells.
Media queries
The Media queries section of the CSS overview report lists the CSS media queries found on the webpage.
CSS media queries can be used to apply specific styles depending on the media type (for example print or screen) or depending on the viewport size. This is often used to make webpages respond to the available space.
When a CSS codebase becomes complex, keeping track of all the CSS media queries can be hard. The Media queries section makes this easier. Each media query in the section also contains a link to the CSS file it's defined in. To reveal that file:
1. On the overview report, click Media queries in the sidebar to scroll to the relevant section of the report.
2. In the report, find the media query you are interested in.
3. Click the X occurrences link next to it to reveal the corresponding files.

4. Click one of the files to automatically open the Sources tool with that file opened.

Non-simple selectors
The Non-simple selectors section of the CSS overview report lists the CSS non-simple selectors found on the webpage.
In CSS, simple selectors are selectors with only a single component (for example, a single id selector or type selector). These selectors are not combined with other selector components or combinators. All basic selectors, attributes, and single pseudoclasses and pseudo-elements are simple selectors.
Non-simple selectors are more complicated and tend to match more elements, potentially resulting in long-running Recalculate Styles events in the Performance tool. You can try to change these selectors so that they are more specific and match fewer elements, reducing the amount of time the browser takes to calculate styles in the following cases:
When elements are added to or removed from the DOM.
When an element's attributes are changed, such as class or id.
When user input occurs, such as a mouse move or a change of focus, which can affect :hover rules.
To see the list of non-simple selectors, on the overview report, click Non-simple selectors in the sidebar to scroll to the relevant section of the report:

From here, you can further analyze the impact of your changes and individual selector performance by using the Selector Stats feature in the Performance tool.
See also
Structure of a selector in CSS selectors.
Analyze CSS selector performance during Recalculate Style events
View elements with color contrast issues
The Colors section of the overview report can also be used to find color contrast issues on a webpage. If the current webpage contains elements where the contrast between the font color and the background color is insufficient, the Contrast issues sub-section will be displayed.
To find color contrast issues:
1. Navigate to the Animal Shelter demo website, which has color contrast issues, in Microsoft Edge. Or navigate to your own website.
2. Open DevTools by pressing Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
3. In the main toolbar, click More Tools and select CSS Overview from the list.
4. In the CSS Overview tool, click Capture overview and then click Colors in the overview report sidebar.
5. Scroll down to the Contrast issues sub-section to view all issues.

6. To view the elements that have a particular color contrast issue, choose the issue you want to fix and click Text. The corresponding elements are listed.

7. To open the corresponding element in the Elements tool, click an element in the list.

To help fix contrast issues, check out the Text contrast section of the accessibility-testing DevTools features.
See also
Structure of a selector in CSS selectors.
Analyze CSS selector performance during Recalculate Style events
Debug DOM memory leaks by using the Detached Elements tool
Article • 10/23/2024
The Detached Elements tool is one way to find and display all of the detached elements on a webpage. For additional ways to assess memory leaks, see, see Tools for investigating detached elements in Fix memory problems.
） Important
The Detached Elements tool is being deprecated. Starting with Microsoft Edge 130, the Detached Elements tool has a message stating that the tool is deprecated; instead, in the Memory tool, in the initial Select profiling type screen, select the Detached elements option button. The Edge-only Chrome DevTools Protocol (CDP) function EdgeDOMMemory.getDetachedNodesIds continues to work, but use DOM.getDetachedDomNodes instead.
In Microsoft Edge 133, the Detached Elements tool will be removed; instead, in the Memory tool, in the initial Select profiling type screen, select the Detached elements option button. The CDP function EdgeDOMMemory.getDetachedNodesIds will be removed; use DOM.getDetachedDomNodes instead.
To increase the performance of your webpage, find the elements that are detached from the DOM tree and which you didn't expect to still be referenced by JavaScript code. Find the detached elements that the browser can't garbage-collect because your code still references them, and then release the JavaScript code references to the detached elements.

The Detached Elements tool, showing retainers in the Memory tool, with links to open the JavaScript code in the Sources tool:

Video: Debug memory leaks with the Microsoft Edge Detached Elements tool

Strategy to fix memory leaks by using the Detached Elements tool
1. Open a webpage to analyze.
2. Open the Detached Elements tool.
3. Run garbage collection, removing all nodes that are no longer referenced by a JavaScript object.
4. Get all detached elements, which couldn't be garbage-collected.
5. Analyze a particular detached element and its JavaScript, to identify the culprit node in a detached tree that is causing the entire tree to be retained.
Get detached elements and analyze a detached element's JavaScript
To analyze a detached element by using the Detached Elements demo webpage:
1. Open the Detached Elements demo webpage in a new window or tab.
The Room 1 button is initially selected. In the JavaScript code of the demo webpage, an instance of the Room class is used to manage the messages in Room 1.
2. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
DevTools opens.
3. In DevTools, in the Activity Bar, select the Detached Elements () tab. If that tab isn't visible, click the More Tools () button, or make DevTools wider. The Detached Elements tool opens:

Generate messages, which will be stored by the JavaScript instance of the Room class:
4. In the demo webpage, click the Fast traffic button.
The demo webpage begins generating messages and displaying them in the webpage:

5. After some messages are displayed, click the Stop button in the demo webpage.
Each message is a <div class="message"> element that's referenced by the Room 1 instance of the Room class. There are no detached elements in the webpage DOM tree, because all of the message elements are attached to the present, Room 1 instance of the Room class.
Change to a different instance of the Room class, so elements become detached:
6. In the demo webpage, click the Room 2 button, which corresponds to another instance of the Room class.
In the webpage, the messages disappear:

The messages that were generated for the Room 1 instance of the Room class (<div class="message"> elements) are no longer attached to the DOM, but they're still referenced by the Room 1 instance of the Room class. They are detached elements, which can cause memory leaks, unless they are going to be used again by the webpage.
Get the list of detached elements:
7. In DevTools, in the Detached Elements tool, click the Collect garbage () icon.
The browser runs garbage collection, removing any nodes that are no longer referenced by a JavaScript object.
8. In the Detached Elements tool, click the Get Detached Elements () button.
The detached DOM elements that can't be garbage-collected are displayed:

These detached elements are memory leaks, if they aren't going to be reused by the application.
  Identify the JavaScript code that references a particular detached element: 9. In the Detached Elements tool, click the Analyze () button.
A message is briefly displayed at the bottom of the Detached Elements tool, Taking a memory heap snapshot..., and then the message All done. The Memory tool opens in the Quick View panel at the bottom of DevTools:

If Profiling type option buttons are displayed in the Memory tool instead of a Summary and Retainers UI, click the Analyze () button again.
10. In the Detached Elements tool, in the Id column, double-click an ID, such as @21299 or @21783.
This is the unique identifier of one of the <div class="message"> elements in the memory heap snapshot. The Memory tool displays retainers in the Retainers tab:

The Memory tool automatically selects the object in the heap that is referencing the detached element. Such an object is called a retainer.
11. In the Retainers tab, in a retainer sub-entry about the unmounted member, such as unmounted in Room @54011, click the link room.js:13.
The Sources tool opens in the Activity Bar and shows line 13 of the file room.js (the Room constructor):


The code adds each message in the room to the unmounted array. The unmounted array is the object that is referencing the detached element.
In the JavaScript code, you have now identified the retainer object (the unmounted array) that's preventing the detached element from being garbage-collected by the browser.
You've found detached elements that the browser can't garbage-collect, and located the
JavaScript object that's still referencing the detached element. You can then change the JavaScript code to release the element, to reduce the number of detached elements on the webpage, increasing webpage performance and responsiveness.
Identify the DOM node that's causing other DOM nodes to be retained
Because the DOM is a fully connected graph, when one DOM node is retained in memory by JavaScript it can cause other DOM nodes to be retained with it.
To identify the culprit node in a detached tree that is causing the entire tree to be retained:
1. Click the Detach Elements () icon to destroy the parent-child links inside the detached tree.
2. Click the Collect garbage () icon.
Parent-child links are removed inside the detached tree, and the remaining item is the DOM node that caused other DOM nodes to be retained:

Change the selected target to a different origin
To check for detached elements from different origins or frames by using the Selected target dropdown list:
1. Click the Selected target dropdown list:

2. Select a different origin.
The new origin is displayed in the Detached Elements tool.
About detached elements and memory leaks
Detached elements aren't always an indication of a memory leak, and memory leaks aren't always caused by detached elements. Memory leaks depend on the context of your application.
A memory leak can occur in your application when an element is no longer attached to the Document Object Model (DOM) tree, but is still referenced by some JavaScript running on the webpage. These elements are called detached elements. For the browser to garbage-collect (GC) the detached element, the element must not be referenced from the DOM tree or from JavaScript code.
Memory issues affect webpage performance, including memory leaks, memory bloat, and frequent garbage collections. Symptoms for your users include:
The performance of a webpage gets progressively worse over time.
The performance of a webpage is consistently bad.
The performance of a webpage is delayed or appears to pause frequently.
Run GC before getting detached elements, to show only elements that can't be GC'd
To only show the elements that are detached from the DOM tree and that can't be garbage-collected, always click Collect Garbage first, and then click Get Detached Elements.
Even though some elements might appear as detached at one point in time, you won't know whether they are actually still referenced by JavaScript code in the webpage until you run GC. When switching between chat rooms in the demo app, the web page removes the elements that are used to display messages from the DOM. But switching to a different instance of the Room class doesn't delete these elements entirely and references to these elements still exist, so, these elements stay in memory.
Re-attaching elements
For the Detached Elements demo webpage, it makes sense to retain the list of chat messages, so that if a user switches back to Room 1, the message log is preserved. Similarly, a feed in social media might detach elements as users scroll past them, and reattach them to the DOM when users scroll back up.
When the Detached elements tool reports detached elements, it's not necessarily a memory leak. It's up to you to decide what's a memory leak and what's not. Maybe your app will re-attach those elements later (instead of having to re-create them, which could be slower).
Detaching DOM nodes is a useful approach, as long as you eventually reuse those detached elements (or delete them). The value of the Detached elements tool is, when you suspect a memory leak, you can check whether there's an increasing number of unexpected detached DOM elements being reported by the tool.
Long-running apps and unmounting components
Be sure to unmount components. For long-running apps, small memory leaks of only a few kilobytes can noticeably degrade performance over time. For webpages that use the React framework, React maintains a virtualized copy of the DOM. Failing to properly unmount components can potentially lead to an application leaking large parts of the virtual DOM.
Reporting issues
If you find issues with how the Detached Elements feature works, contact the Microsoft Edge DevTools team to send feedback about the Detached Elements feature and memory leak debugging.
See also
 Tools for investigating detached elements in Fix memory problems - comparison of tools to view detached elements.
Demo:
Detached Elements demo webpage
MicrosoftEdge/Demos > detached-elements
Feedback
Was this page helpful?  Yes  No

Developer Resources tool
Article • 06/19/2023
Use the Developer Resources tool to view resource URLs for the webpage.


Find and fix problems using the Issues tool
Article • 12/07/2023
The Issues tool automatically analyzes the current webpage, reports issues grouped by type, and provides documentation to help explain and resolve the issues.
The Issues tool provides feedback in the following categories:
Accessibility.
Compatibility across browsers.
Performance.
Progressive Web Apps.
Security.
Other.
Feedback in the Issues tool is provided by several sources, including the Chromium platform, Deque axe, MDN browser compatibility data, and webhint. For information about these sources of feedback that populate the Issues tool, see:
axe Tools Overview browser-compat-data repo webhint
Video: Advanced issues filtering in Edge DevTools and VSCode

Opening the Issues tool
1. Go to a webpage that contains issues to fix. For example, open the accessibilitytesting demo page in a new tab or window.
2. Right-click the webpage and then select Inspect. DevTools opens.
3. In the Quick View toolbar at the bottom of DevTools, select the Issues tab, which is present by default.
If the Quick View panel isn't displayed, select Customize and control DevTools (...), and then select Toggle Quick View panel (Esc). If the Quick View toolbar doesn't have the Issues tab, in the Quick View toolbar, click the More tools (+) button, and then select Issues.
The Issues tool groups issues into categories, such as Accessibility, Performance, Security, and Other:

Other ways to open the Issues tool
 In the Activity Bar or in the Quick View toolbar, click the More tools (+) button, and then select Issues.
 In the Elements tool, in the DOM tree, find a wavy-underlined element name, and then press and hold Shift and then click the element. Or, right-click a wavyunderlined element, and then select View issues. See Open issues from the DOM tree, below.
Placement of Issues tool: Quick View or Activity Bar
By default, such as from the Command Menu, the Issues tool opens in the Quick View panel. You can instead open it in the Activity Bar, or move it to the Activity Bar:
 In the Quick View toolbar, right-click the Inspect tab and then select Move to top Activity Bar or Move to left Activity Bar.
Issues are automatically ordered by severity
Within each category of issues, first the errors are listed, then warnings, and then tips:

The Severity dropdown list controls whether Warnings, Errors, Tips, and Info items are listed. See Filter issues by severity below.
Expand entries in the Issues tool
The Issues tool presents additional documentation and recommended fixes to apply to each issue. To expand an issue to get this additional information:
1. Open a webpage and the Issues tool, as described above.
2. Select an issue. The issue expands to show details:

Each displayed issue has the following components:
A headline describing the issue.
A description providing more context and proposed solutions.
An AFFECTED RESOURCES section that links to resources in DevTools, such as the Elements, Sources, or Network tool.
 Links to further documentation.
View issues in context of an associated tool
An issue in the Issues tool may include one or more links that open different tools, such as the Elements, Sources, or Network tool. You can open one of these tools to perform additional troubleshooting steps.
To open a linked tool from an entry in the Issues tool:
1. As described above, open a webpage, open DevTools, select the Issues tool, and then expand an issue.
2. In the AFFECTED RESOURCES section, in an Open in link, click the tool name, such as Network:

The affected resource is displayed in the indicated tool.
Open issues from the DOM tree
If an element has an associated issue, the DOM tree in the Elements tool shows a wavy underline under the element name. Right-click the element and then select View issues.
Or, press and hold Shift and then click the element with the wavy underline.
To display an issue for elements with wavy underlines in the DOM tree:
1. Open a webpage. For example, open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. In DevTools, select the Elements (
4. In the DOM tree, expand <body> > <section> > <main> > <article id="cats"> >
<img>. The <img> element start-tag has a wavy underline:

issue.
6. Right-click the <img> element, and then select View issues. Or, press and hold
Shift and then click the element. The Issues tool opens and displays the issues that are associated with that element:

Filter issues
To reduce the number of issues that are displayed in the Issues tool, you can filter the list by severity, browser, and origin.
Filter issues by severity
By default, only errors and warnings are displayed. To display issues that have other severity levels:
 From the Severity dropdown list, select any number of severity levels: Tips, Info, Warnings, or Errors:

To revert back to showing only warnings and errors, select Default levels.
Filter issues by browser
Issues that belong to the Compatibility category can also be filtered by browser. By default, the following browsers are tested:
Edge
Chrome
Firefox
Safari
Safari iOS
Chrome for Android Firefox for Android
To change the list of browsers that are tested for compatibility issues:
Click Top browsers.
Select any of the browser category sets: Top browsers, Desktop browsers, Mobile browsers.
Or select any number of individual browsers from the list.
Click Regenerate issues to update the compatibility issues based on the selected browsers.

Filter issues by origin
By default, the Issues tool only lists issues that pertain to the current web page's code. To include issues that are caused by third-party libraries or frameworks loaded by the web page too, select the Include third-party issues checkbox:

See also


Feedback
Was this page helpful?  Yes  No

Lighthouse tool
Article • 02/23/2023
Use the Lighthouse tool to identify and fix common problems that affect your site's performance, accessibility, and user experience.
The Lighthouse tool was previously called the Audits tool.
See:
Optimize website speed using Lighthouse
Test accessibility using Lighthouse

View and debug media players information
Article • 03/28/2023
Use the Media tool to view information and debug the media players per browser tab.
Open the Media tool
The Media tool is the main place in DevTools for inspecting the media player of a webpage.
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Media tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools (	) button.

View media players information
1. Navigate to a webpage with a media player, such as the following webpage.
Maximizing productivity with the Edge Developer Tools
2. Under the Players menu, a media player is displayed.
3. Click the player. The Properties panel displays the properties of the media player.

4. To view all the media player events, click the Events panel.

5. To view the media player message logs, click the Messages panel. You can filter the messages by log level or string.

6. On the Timeline panel, the media playback and buffer status is displayed live.

Remote debugging
View the media players information on an Android device from your Windows or macOS computer.
1. To set up remote debugging, see Get started with remote debugging Android devices.
2. View the media players information remotely.
Hide and show media players
Sometimes you run more than one media player on a webpage, or use the same browser tab to browse different webpages, each with media players.
You can hide (or show) each media player, for an easier debugging experience:
1. Browse to several different video webpages using the same browser tab.
2. To hide media players:
 To hide a single media player, right-click a media player, and then select Hide player.
 To hide all of the other media players, right-click a media player, and then select Hide all others.

Export media player information
 To download the media player info as a JSON file, right-click a media player, and then select Save player info.



Feedback
Was this page helpful? 
Fix memory problems
Article • 10/23/2024
To find memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections, use the following tools:
Microsoft Edge Browser Task Manager.
The Performance tool's Memory checkbox.
The Memory tool's various profiling types.
Tools for investigating memory usage
ﾉ Expand table
Use caseToolArticleMonitor how much memory a webpage uses, in realtime.Microsoft Edge
Browser Task ManagerMonitor memory use in realtime (Microsoft Edge Browser Task Manager)Visualize the memory usage of a webpage over a period of time.Performance tool >
Memory checkboxVisualize memory leaks (Performance tool: Memory checkbox) in Performance features reference.Spot frequent garbage collections.Microsoft Edge Browser Task Manager, or Performance tool > Memory checkboxSpot frequent garbage collections (Microsoft Edge Browser Task Manager, Performance tool's Memory checkbox), below.Inspect the contents of the memory used by a webpage.Memory tool > Heap snapshotRecord heap snapshots using the Memory tool ("Heap snapshot" profiling type)Find out which JavaScript objects get created over a period of time, to isolate memory leaks.Memory tool > Allocations on timelineUse Allocation instrumentation on timeline ("Allocations on timeline" profiling type)Find out which JavaScript functions allocate memory over a period of time. This profile type has minimal performance overhead and can be used for long-running operations.Memory tool >
Allocation samplingSpeed up JavaScript runtime ("Allocation sampling" profiling type)Use caseToolArticleFind DOM tree memory leaks.Memory tool >
Detached elementsDebug DOM memory leaks
("Detached elements" profiling type)The Memory tool
The main tool for investigating memory issues is the Memory tool:

A Detached Elements profile in the Memory tool:

To return to the list of option buttons for profiling types, in the upper left of the
Memory tool, click Profiles ().
Overview of fixing memory problems
In the spirit of the RAIL performance model, the focus of your performance efforts should be your users.
Memory issues are important because they are often perceivable by users. Users may perceive memory issues in the following ways:
 The performance of a page gets progressively worse over time. This is possibly a symptom of a memory leak. A memory leak is when a bug in the page causes the page to progressively use more and more memory over time.
 The performance of a page is consistently bad. This is possibly a symptom of memory bloat. Memory bloat is when a page uses more memory than is necessary for optimal page speed.
 The performance of a page is delayed or appears to pause frequently. This is possibly a symptom of frequent garbage collections. Garbage collection is when the browser reclaims memory. The browser decides when this happens. During collections, all script running is paused. So if the browser is garbage collecting a lot, script runtime is going to get paused a lot.
Memory bloat: How much is "too much"?
A memory leak is easy to define. If a site is progressively using more and more memory, then you have a leak. But memory bloat is a bit harder to pin down. What qualifies as "using too much memory"?
There are no hard numbers here, because different devices and browsers have different capabilities. The same page that runs smoothly on a high-end smartphone may crash on a low-end smartphone.
The key here is to use the RAIL model and focus on your users. Find out what devices are popular with your users, and then test out your page on those devices. If the experience is consistently bad, the page may be exceeding the memory capabilities of those devices.
Spot frequent garbage collections (Microsoft Edge Browser Task Manager, Performance tool's Memory checkbox)
If your page appears to pause frequently, then you may have garbage collection issues.
To spot frequent garbage collection, you can use either:
 Microsoft Edge Browser Task Manager. Frequently rising and falling Memory or JavaScript Memory values represent frequent garbage collection. See Monitor memory use in realtime (Microsoft Edge Browser Task Manager).
 The Performance tool's Memory checkbox. In Performance memory recordings, frequent changes (rising and falling) to the JS heap or node count graphs indicate frequent garbage collection. See View memory metrics in Performance features reference.
After you have identified the problem by using either of those tool, you can then use the Memory tool's Allocations on timeline profiling type to find out where memory is being allocated, and which functions are causing the allocations. See Use Allocation instrumentation on timeline ("Allocations on timeline" profiling type).
Find DOM tree memory leaks from detached elements
A DOM node is only garbage-collected by the browser when there are no references to the node from either the DOM tree or JavaScript code running on the page. A node is said to be "detached" when it is removed from the DOM tree but some JavaScript still references it. Detached DOM nodes are a common cause of memory leaks.
Tools for investigating detached elements
ﾉ Expand table
Use caseToolArticleShow detached elements only, as DOM tree nodes.Memory tool > Detached elements profiling typeDebug DOM memory leaks ("Detached elements" profiling type)Show all objects in memory, filtered to display detached elements, with links to the JavaScript source code.Memory tool > Heap snapshot profiling type >
DetachedFind DOM tree memory leaks ("Heap snapshot" profiling type > Detached) in Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).Show detached elements only, as DOM tree nodes, with links to the JavaScript source code.Detached Elements toolDebug DOM memory leaks by using the
Detached Elements toolSee also
 Use Allocation instrumentation on timeline ("Allocations on timeline" profiling type)
Debug DOM memory leaks by using the Detached Elements tool
Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
External:
 Finding and debugging memory leaks in JavaScript with Chrome DevTools - slide deck (by Gonzalo Ruiz de Villa), which also applies to Microsoft Edge DevTools.


Feedback
Was this page helpful? 

Memory terminology
Article • 09/19/2024
The following terms are used in the Memory tool, which is for investigating memory issues. These memory terms are applicable to memory analysis in general, as well as memory profiling tools for languages such as Java or .NET.
To learn more about using the Memory tool, see Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
The memory graph
Think of the memory that's used by a webpage as a graph: a structure that contains nodes that are connected together by edges:

The nodes in the memory graph represent the objects used by the page, including primitive types such as JavaScript numbers or strings, and objects such as associative arrays. Nodes and edges in the memory graph are given the following labels:
 Nodes (or objects) are labelled using the name of the constructor function that was used to build them.
 Edges are labelled using the names of properties.
A node in the graph can hold memory in two ways:
Directly; the memory is held by the object itself.
Implicitly, by holding references to other objects. An object that's holding references to other objects prevents those objects from being automatically disposed of by garbage collection (GC).
JavaScript heap and renderer memory
The JavaScript heap is a memory region in the browser process where all the JavaScript and WebAssembly objects live. The JavaScript heap is also called the V8 memory (after the V8 JavaScript engine that powers Microsoft Edge).
The JavaScript heap is part of the renderer memory. The renderer memory is the memory used by the browser process where the webpage is rendered. The renderer memory is comprised of the following:
 Native memory, such as the memory that's used by C++ objects that represent the DOM nodes.
JavaScript heap memory of the page.
JavaScript heap memory of all dedicated workers that are started by the page.
The Memory tool shows both:
The V8 memory.
The objects allocated in the native memory that are relevant to the rendered webpage.
Garbage-collection roots
Garbage-collection roots (GC roots) are created by the browser when a reference is made from the browser's native code to a JavaScript object that's outside of the V8 virtual machine. These references are called handles.
There are many internal GC roots, most of which aren't interesting for web developers.
From the webpage's standpoint, the following types of GC roots exist:
Window global objects (one in each iframe).
Sometimes objects are retained by the debugging context that's set by the Sources or the Console tool, such as when evaluating a JavaScript expression in the Console tool. To remove these objects from the Memory tool, before recording a heap snapshot, clear the Console tool and deactivate breakpoints in the Sources tool.
The memory graph starts with a GC root, which may be the window object of the browser or the Global object of a Node.js module. You don't control how the root object is garbage-collected:

Nodes that aren't reachable from the root can get garbage-collected.
Object sizes and distances
The Memory tool displays the following columns of information:

Distance
The distance of an object in the JavaScript heap is the number of nodes on the shortest path between the object and the GC root. The shorter the distance, the more likely it is that this object plays an important role in the memory usage of the webpage.
Shallow size
The shallow size is the size of the JavaScript heap that's directly held by an object. The shallow size of an object is usually small, because a JavaScript object often only stores its description of the object, not the values, in the object's directly held memory. Most JavaScript objects store their values in a backing store that's elsewhere in the JavaScript heap, and only expose a small wrapper object on the portion of the JavaScript heap that's directly owned by the object.
Nevertheless, even a small object can hold a large amount of memory indirectly, by preventing other objects from being disposed of by the garbage collection process.
The numbers in the Shallow size column are the number of bytes.
Retained size
The retained size is the size of the memory that's implicitly held by an object and that could be freed once the object and other existing retainers are deleted along with all the dependent objects that were made unreachable from GC roots.
That is, the retained size of an object is the amount of memory that would be regained if the object and all of its dependent objects were removed from the memory graph.
The retained size can't be smaller than the shallow size.
When an object is retained by multiple nodes, the object's size appears in the retained size of the retainer node that has the shortest path to the GC root.
The numbers in the Retained size column are the number of bytes.
Retainers
An object's retainers are the other objects that hold references to the object. The Retainers section of the Memory tool shows the objects that hold references to the object selected in the Summary view.
The Retainers section of the Memory tool is sorted by distance by default, which means that the simplest retaining paths for an object are shown first.
Any object with no retainers can be discarded by the browser's garbage collector, which reduces memory usage.
V8 specifics
When profiling memory, it's helpful to understand why heap snapshots look a certain way. This section describes how some objects are stored in memory by the V8 JavaScript virtual machine (abbreviated here as V8 VM, or just VM), which can help you when analyzing heap snapshots in the Memory tool.
JavaScript primitives
In JavaScript, there are several primitive types, such as:
Numbers (such as 3.14159).
Booleans (true or false).
Strings (such as "Werner Heisenberg").
Primitives cannot reference other values, and are always leaf nodes (also called terminating nodes) in the memory graph.
Numbers can be stored as either:
Immediate 31-bit integer values that are called small integers (SMIs).
Heap objects, which are referred to as heap numbers. Heap numbers are used for storing values that don't fit into the small-integer (SMI) form, such as values of type double, or when a value needs to be boxed, such as setting properties on it.
Strings can be stored in either:
The VM heap.
Externally in the renderer's memory. A wrapper object is created and used for accessing external storage where, for example, script sources and other content that's received from the Web is stored, rather than copied onto the VM heap.
JavaScript objects
Memory for new JavaScript objects is allocated from a dedicated JavaScript heap (or VM heap). These objects are managed by V8 VM's garbage collector, and therefore, these objects stay alive as long as there is at least one reference to them.
Other objects
 Native objects: Anything that's not stored in the JavaScript heap is called a native object. A native object, in contrast to a heap object, isn't managed by the V8 garbage collector throughout its lifetime, and can only be accessed from JavaScript by using its JavaScript wrapper object.
 Concatenated strings: Strings that are stored and then joined together, as a result of a string concatenation in JavaScript, are stored as concatenated strings in V8. The joining of the string contents occurs only as needed, such as when a substring of a joined string needs to be constructed.
For example, if you concatenate a and b, you get a concatenated string (a, b) which represents the result of concatenation. If you later concatenate c with that result, you get another concatenated string: ((a, b), c).
 Arrays: An array is an object that has numeric keys. Arrays are used extensively in the V8 VM for storing large amounts of data. Sets of key-value pairs that are used like dictionaries are implemented as arrays.
A typical JavaScript object is stored as only one of two array types:
An array for storing named properties. An array for storing numeric elements.
When there are a small number of properties, the properties are stored internally in the JavaScript object.
    system / Map: an object that describes both the kind of object it is and the layout. For example, system / Map objects are used to describe implicit object hierarchies for fast property access. See Fast properties in V8  This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

Monitor memory use in realtime
(Microsoft Edge Browser Task Manager)
Article • 10/23/2024
Use the Microsoft Edge Browser Task Manager as a starting point to your memory issue investigation. The Microsoft Edge Browser Task Manager is a realtime monitor that tells you how much memory a page is currently using.
1. In Microsoft Edge, press Shift+Esc. Or, select Settings and more (...) > More tools > Browser Task Manager:

Microsoft Edge Browser Task Manager opens.
2. Right-click the table header, and then enable JavaScript memory:

The JavaScript memory column is displayed:

The Memory column represents native memory. DOM nodes are stored in native memory. If this value is increasing, DOM nodes are getting created.
 The JavaScript memory column represents the JS heap. This column contains two values. The value you are interested in is the live number (the number in parentheses). The live number represents how much memory the reachable objects on your page are using. If this number is increasing, either new objects are being created, or the existing objects are growing.
See also
 Fix memory problems

Feedback
Was this page helpful?  Yes  No
Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)
Article • 10/23/2024
Use the heap profiler in the Memory tool to do the following:
Record JavaScript heap (JS heap) snapshots.
Analyze memory graphs.
Compare snapshots.
Find memory leaks.
The DevTools heap profiler shows the memory distribution used by the JavaScript objects and by related DOM nodes on the rendered webpage.
Take a snapshot
1. Open the webpage you want to analyze. For example, open the Scattered objects demo page in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Memory tab. If that tab isn't visible, click the More tools () button.
4. In the Select profiling type section, select the Heap snapshot option button.
5. Under Select JavaScript VM instance, select the JavaScript VM that you want to profile.
6. Click the Take snapshot button:

After the newly recorded heap snapshot has been loaded into DevTools and has been parsed, the snapshot is displayed and a new entry appears in the Profiles sidebar under Heap snapshots:

The number below the new sidebar item shows the total size of the reachable JavaScript objects. To learn more about object sizes in the heap snapshot, see Object sizes and distances in Memory terminology.
The snapshot only displays the objects from the memory graph that are reachable from the global object. Taking a snapshot always starts with a garbage collection.
Take another snapshot
To take another snapshot when one is already displayed in the Memory tool, in the sidebar, click Profiles above the existing snapshot:

Clear snapshots
To clear all snapshots from the Memory tool, click the Clear all profiles () icon:

View snapshots
Heap snapshots can be viewed in multiple different ways in the Memory tool. Each way of viewing a heap snapshot in the UI corresponds to a different task:
ﾉ Expand table
ViewContentUse forSummaryShows objects grouped by their constructor name.Finding objects, and the memory they use, based on types that are grouped by constructor name. Helpful for tracking down DOM leaks.ComparisonDisplays the differences between two snapshots.Comparing two (or more) memory snapshots from before and after an operation. Inspecting the delta in freed memory and inspecting the reference count helps you confirm the presence and cause of a memory leak, and helps determine its cause.ContainmentAllows exploration of heap contents.Provides a better view of object structure, helping analyze objects referenced in the global namespace (window) to find out what is keeping objects around. Use it to analyze closures and dive into your objects at a low level.To switch between views, use the dropdown list at the top of the Memory tool:

Items omitted from heap snapshots
Properties that are implemented using getters that run native code aren't captured in the heap snapshot, because such properties are not stored on the JavaScript heap.
Non-string values, such as numbers, aren't captured.
Summary view
The Summary view in the Memory tool lists:
Object constructor groups.
Special category names, such as (array), (compiled code), or a list of properties such as {foo, bar, baz}.
Initially, a heap snapshot opens in the Summary view, which displays a list of constructors:

Each constructor in the list can be expanded to show the objects that were instantiated using that constructor.
For each constructor in the list, the Summary view also shows a number such as ×123, indicating the total number of objects created with the constructor. The Summary view also shows the following columns:
ﾉ Expand table
Column nameDescriptionDistanceDisplays the distance to the root using the shortest simple path of nodes. See Distance in Memory terminology.Shallow sizeDisplays the sum of shallow sizes of all objects created by a certain constructor function. The shallow size is the size of the JavaScript heap that's directly held by an object. The shallow size of an object is usually small, because a JavaScript object often only stores its description of the object, not the values, in the object's directly held memory. Most JavaScript objects store their values in a backing store that's elsewhere in the JavaScript heap, and only expose a small wrapper object on the portion of the JavaScript heap that's directly owned by the object. See Shallow size in Memory terminology.Retained sizeDisplays the maximum retained size among the same set of objects. The size of memory that you can free after an object is deleted (and the dependents are made no longer reachable) is called the retained size. See Retained size in Memory terminology.After expanding a constructor in the Summary view, all of the constructor's instances are displayed. For each instance, the shallow and retained sizes are displayed in the corresponding columns. The number after the @ character is the unique ID of the object, allowing you to compare heap snapshots on per-object basis.
Constructor entries
The Summary view in the Memory tool lists object constructor groups:
The constructor groups in the Summary view might be built-in functions such as Array or Object, or they might be functions that are defined in your own code.
To reveal the list of objects that were instantiated by a given constructor, expand the constructor group.
Special category names
The Summary view in the Memory tool includes the following special category names, which aren't based on constructors. Most of these category names are displayed in parentheses.
ﾉ Expand table
Category nameDescription(array)Various internal array-like objects that don't directly correspond to objects visible from JavaScript, such as the contents of JavaScript arrays, or the named properties of JavaScript objects.(compiled code)Internal data that V8 (Microsoft Edge's JavaScript engine) needs to run functions defined by JavaScript or WebAssembly. V8 automatically manages memory usage in this category: if a function runs many times, V8 uses more memory for that function so that the function runs faster. If a function hasn't run in a while, V8 might delete the internal data for that function.(concatenated string)When two strings are concatenated together, such as when using the JavaScript
+ operator, V8 might choose to represent the result internally as a concatenated string. Rather than copying all of the characters of the two strings into a new string, V8 creates a small object which points to the two strings.(object shape)Information about objects, such as the number of properties they have and a reference to their prototypes, which V8 maintains internally when objects are created and updated. This allows V8 to efficiently represent objects with the same properties.(sliced string)When creating a substring, such as when using the JavaScript substring method, V8 might choose to create a sliced string object rather than copying all of the relevant characters from the original string. This new object contains a pointer to the original string and describes which range of characters from the original string to use.(system)Various internal objects that haven't yet been categorized in any more meaningful way.{foo, bar, baz}Plain JavaScript objects categorized by interface (property list), in curly braces. Plain JavaScript objects are not listed in a category named Object, but are instead represented by names and categories that are based on the properties that the object contains, such as {foo, bar, baz}.InternalNodeObjects allocated outside of V8, such as C++ objects defined by Blink, Microsoft Edge's rendering engine.system /
ContextLocal variables from a JavaScript scope which can be accessed by some nested function. Every function instance contains an internal pointer to the context in which it executes, so that it can access those variables.Comparison view
To find leaked objects, compare multiple snapshots to each other. In a web application, usually, doing an action and then the reverse action shouldn't lead to more objects in memory. For example, when opening a document and then closing it, the number of objects in memory should be the same as before opening the document.
To verify that certain operations don't create leaks:
1. Take a heap snapshot before performing an operation.
2. Perform the operation. That is, interact with the page in some way that might be causing a leak.
3. Perform the reverse operation. That is, do the opposite interaction and repeat it a few times.
4. Take a second heap snapshot.
5. In the second heap snapshot, change the view to Comparison, comparing it to Snapshot 1.
In the Comparison view, the difference between two snapshots is displayed:

When expanding a constructor in the list, added and deleted object instances are shown.
Containment view
The Containment view allows you to peek inside function closures, to observe virtual machine (VM) internal objects that make up your JavaScript objects, and to understand how much memory your application uses at a very low level:

The Containment view shows the following types of objects:
ﾉ Expand table
Containment view entry pointsDescriptionDOMWindow
objectsGlobal objects for JavaScript code.GC rootsThe GC roots used by the garbage collector of the JavaScript virtual machine. GC roots are comprised of built-in object maps, symbol tables,
VM thread stacks, compilation caches, handle scopes, and global handles.Native objectsObjects created by the browser such as DOM nodes and CSS rules, which are shown in the JavaScript virtual machine to allow automation.The Retainers section
The Retainers section is displayed at the bottom of the Memory tool and shows all the objects which point to the selected object. The Retainers section is updated when you select a different object in the Summary, Containment, or Comparison view.
In the following screenshot, a string object was selected in the Summary view, and the Retainers section shows that the string is retained by the x property of an instance of the Item class, found in the example-03.js file:

Hide cycles
In the Retainers section, when you analyze the objects which retain the selected object, you might encounter cycles. Cycles occur when the same object appears more than once in the retainer path of the selected object. In the Retainers section, a cycled object is indicated by being grayed out.
To help simplify the retainer path, hide cycles in the Retainers section by clicking the Filter edges dropdown menu and then selecting Hide cycled:

Hide internal nodes
Internal nodes are objects that are specific to V8 (the JavaScript engine in Microsoft Edge).
To hide internal nodes from the Retainers section, in the Filter edges dropdown menu, select Hide internal.
Filter heap snapshots by node types
Use filters to focus on specific parts of a heap snapshot. When looking at all the objects in a heap snapshot in the Memory tool, it can be difficult to focus on specific objects or retaining paths.
To focus only on specific types of nodes, use the Node Types filter, in the upper right.
For example, to see only the arrays and string objects in the heap snapshot:
1. To open the Node Types filter, click Default in the upper right.
2. Select the Array and String entries.
The heap snapshot is updated to show only the array and string objects:

Find a specific object
To find an object in the collected heap, you can search using Ctrl+F and give the object ID.
Uncover DOM leaks
The Memory tool has the ability to show the bidirectional dependencies that sometimes exist between browser native objects (DOM nodes, CSS rules) and JavaScript objects.
This helps to discover memory leaks that happen because of forgotten, detached DOM nodes that remain in memory.
For detached elements, see also Find DOM tree memory leaks ("Heap snapshot" profiling type > Detached), below.
Consider the following DOM tree:

The following code sample creates the JavaScript variables treeRef and leafRef, which reference two of the DOM nodes in the tree:
JavaScript// Get a reference to the #tree element. const treeRef = document.querySelector("#tree");
// Get a reference to the #leaf element, // which is a descendant of the #tree element. const leafRef = document.querySelector("#leaf");In the following code sample, the <div id="tree"> element is removed from the DOM tree:
JavaScript// Remove the #tree element from the DOM.
document.body.removeChild(treeRef);The <div id="tree"> element can't be garbage-collected because the JavaScript variable treeRef still exists. The treeRef variable directly references the <div id="tree"> element. In the following code sample, the treeRef variable is nullified:
JavaScript// Remove the treeRef variable.
treeRef = null;The <div id="tree"> element still can't be garbage-collected because the JavaScript variable leafRef still exists. The leafRef.parentNode property references the <div id="tree"> element. In the following code sample, the leafRef variable is nullified:
JavaScript// Remove the leafRef variable.
leafRef = null;At this point, the <div id="tree"> element can be garbage-collected. Both treeRef and leafRef must first be nullified, for the whole DOM tree under the <div id="tree">
element to be garbage-collected.
Demo webpage: Example 6: Leaking DOM nodes
To understand where DOM nodes might leak, and how to detect such leakage, open the example webpage Example 6: Leaking DOM nodes in a new window or tab.
Demo webpage: Example 9: DOM leaks bigger than expected
To see why a DOM leak might be bigger than expected, open the example webpage Example 9: DOM leaks bigger than expected in a new window or tab.
Analyze the impact of closures on memory
To analyze the impact of closures on memory, try out this example:
1. Open the Eval is evil demo webpage in a new window or tab.
2. Record a heap snapshot.
3. In the rendered webpage, click the Closures with eval button.
4. Record a second heap snapshot.
In the sidebar, the number below the second snapshot should be larger than the number below the first snapshot. This indicates that more memory is being used by the webpage after clicking the Closures with eval button.
5. In the second heap snapshot, change the view to Comparison, and then compare the second heap snapshot to the first heap snapshot.
The Comparison view shows that new strings were created in the second heap snapshot:

6. In the Comparison view, expand the (string) constructor.
7. Click the first (string) entry.
The Retainers section is updated and shows that the largeStr variable retains the string selected in the Comparison view.

Tip: Name functions to differentiate between closures in a snapshot
To easily distinguish between JavaScript closures in a heap snapshot, give your functions names.
The following example uses an unnamed function to return the largeStr variable:
JavaScriptfunction createLargeClosure() {     const largeStr = 'x'.repeat(1000000).toLowerCase();
    // This function is unnamed.
    const lC = function() {         return largeStr;
    };
    return lC;
}The following example names the function, which makes it easier to distinguish between closures in the heap snapshot:
JavaScriptfunction createLargeClosure() {     const largeStr = 'x'.repeat(1000000).toLowerCase();
    // This function is named.     const lC = function lC() {         return largeStr;
    };
    return lC;
}Save and export strings from a heap snapshot to JSON
When taking a heap snapshot in the Memory tool, you can export all string objects from the snapshot to a JSON file. In the Memory tool, in the Constructor section, click the Save all to file button next to the (string) entry:

The Memory tool exports a JSON file that contains all of the string objects from the heap snapshot:

Find DOM tree memory leaks ("Heap snapshot" profiling type > Detached)
One way to find and display all of the detached elements on a webpage is to use the Memory tool's Heap snapshot profiling type, then type Detached in the Filter by class text box, as follows. See also Tools for investigating detached elements in Fix memory problems.
The following code produces detached DOM nodes:
JavaScriptvar detachedTree;
function create() {     var ul = document.createElement('ul');     for (var i = 0; i < 10; i++) {         var li = document.createElement('li');         ul.appendChild(li);
    }     detachedTree = ul;
} document.getElementById('create').addEventListener('click', create);This code creates a ul node with ten li children. The nodes are referenced by the code, but they don't exist in the DOM tree, so each node is detached.
Heap snapshots are one way to identify detached nodes. A heap snapshot shows how memory is distributed among the JS objects and DOM nodes for your page at the point of time of the snapshot.
Use the "Heap snapshot" profiling type to find detached elements
To use the Heap snapshot profiling type to find detached elements:
1. Open a webpage, such as the Detached Elements demo webpage, in a new window or tab.
2. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
DevTools opens.
3. In DevTools, in the Activity Bar, select the Memory () tool.
If that tab isn't visible, click the More Tools () button, and then select Memory.
The Memory tool opens:

If the Heap snapshot option button isn't shown, because a profile is already displayed, in the upper left, click Profiles ().
You don't need to select the Heap snapshot option button at this point, because the webpage hasn't generated any detached elements yet.
Generate messages, which will be stored by the JavaScript instance of the Room class:
4. In the demo webpage, click the Fast traffic button.
The demo webpage begins generating messages and displaying them in the webpage:

5. After some messages are displayed, click the Stop button in the demo webpage.
Each message is a <div class="message"> element that's referenced by the Room 1 instance of the Room class. There are no detached elements in the webpage DOM tree, because all of the message elements are attached to the present, Room 1 instance of the Room class.
Change to a different instance of the Room class, so elements become detached:
6. In the demo webpage, click the Room 2 button, which corresponds to another instance of the Room class.
In the webpage, the messages disappear:

The messages that were generated for the Room 1 instance of the Room class (<div class="message"> elements) are no longer attached to the DOM, but they're still referenced by the Room 1 instance of the Room class. They are detached elements, which can cause memory leaks, unless they are going to be used again by the webpage.
Get the list of detached elements:
7. In DevTools, in the Memory tool, click the Collect garbage () icon:

The browser runs garbage collection, removing any nodes that are no longer referenced by a JavaScript object.
8. In the Memory tool, select the Heap snapshot option button.
9. Click the Take snapshot button at the bottom of the Memory tool.
The snapshot is processed, loaded, and then listed in the Profiles sidebar, in the Heap snapshots section.
10. In the Filter by class text box, type detached:

The detached DOM elements that can't be garbage-collected are displayed.
Identify the JavaScript code that references a particular detached element:
11. In the heap snapshot, expand a Detached object, such as Detached <div>, and then select a Detached <div class="message"> node.
Information is displayed in the Retainers pane at the bottom of the Memory tool.
12. In the Retainers pane, click the room.js:13 link for an unmounted in Room item under Array. The Sources tool opens, displaying room.js, scrolled to line 13:

and make sure that the reference to the node is removed when it is no longer needed.
14. To return to the Memory tool, in the Address Bar, select the Memory tool.
For additional ways to see detached elements, see Tools for investigating detached elements in Fix memory problems.
See also
Tools for investigating detached elements in Fix memory problems. Memory terminology
External:
 Finding and debugging memory leaks in JavaScript with Chrome DevTools - slide deck (by Gonzalo Ruiz de Villa), which also applies to Microsoft Edge DevTools.



Feedback
Was this page helpful?  Yes  No

Use Allocation instrumentation on timeline ("Allocations on timeline" profiling type)
Article • 10/23/2024
In the Memory tool, use the Allocations on timeline profiling type to find objects that aren't being properly garbage-collected, and continue to retain memory.
How Allocation instrumentation on timeline works
The Memory tool's Allocations on timeline profiling type combines the detailed snapshot information of the heap profiler with the incremental updating and tracking of the Performance tool. Similarly, tracking heap allocation for objects involves starting a recording, performing a sequence of actions, and stopping the recording for analysis.
Allocations on timeline takes heap snapshots periodically throughout the recording (as frequently as every 50 ms) and one final snapshot at the end of the recording.

The number after the @ is an object ID that persists across the multiple snapshots taken during the recording session. The persistent object ID enables precise comparison between heap states. Objects are moved during garbage collections, so displaying the address of an object makes no sense.
Enable Allocation Instrumentation on Timeline
To begin using Allocations on timeline:
1. Open a webpage, such as the Detached Elements demo webpage, in a new window or tab.
2. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
DevTools opens.
3. In DevTools, in the Activity Bar, select the Memory () tool.
If that tab isn't visible, click the More Tools () button, and then select Memory.
The Memory tool opens:

4. Select the Allocations on timeline option button.
If the Allocations on timeline option button isn't shown, because a profile is already displayed, in the upper left, click Profiles ().
5. At the bottom of the Memory tool, click the Start button.
6. Interact with the webpage; for example, click the Fast traffic button and then the Stop button in the demo webpage. Depending on what you are trying to analyze, you can either refresh the page, interact with the page, or just let the page run.
7. In the upper left of the Memory tool, click the Stop recording heap profile () button.
A new Snapshot is created in the Allocation timelines section of the Profiles list:

Record allocations on the timeline
In the Memory tool, use the Allocations on timeline profiling type. This is one of the DevTools features to track down memory leaks in your JS heap.
Given the following code:
JavaScriptvar x = []; function grow() {
    x.push(new Array(1000000).join('x')); } document.getElementById('grow').addEventListener('click', grow);Every time that the button that's referenced in the code is clicked, a string of one million characters is added to the x array.
To record allocations on the timeline:
1. Open a webpage, such as a demo webpage.
2. Open DevTools, and select the Memory tool.
3. Click the Allocations on timeline option button, then click the Start button.
4. Perform the action that you suspect is causing the memory leak.
5. When you are done, click the Stop recording heap profile  button.
6. As you are recording, notice whether any blue bars show up on the Allocation instrumentation on the timeline:

Those blue bars represent new memory allocations. Those new memory allocations are your candidates for memory leaks.
7. Zoom on a bar to filter the Constructor pane to only show objects that were allocated during the specified timeframe.

8. Expand the object and select the value to view more details in the Object pane.
For example, in the details of the newly allocated object indicates that it was allocated to the x variable in the Window scope:
Read a heap allocation timeline
The heap allocation timeline shows where objects are being created and identifies the retaining path. In the following figure, the bars at the top indicate when new objects are found in the heap.
The height of each bar corresponds to the size of the recently allocated objects, and the color of the bars indicate whether or not those objects are still live in the final heap snapshot. Blue bars indicate objects that are still live at the end of the timeline, Gray bars indicate objects that were allocated during the timeline, but have since been garbage collected.

You can use the sliders in the timeline above to zoom into that particular snapshot and review the objects that were recently allocated at that point:

Clicking on a specific object in the heap shows the retaining tree in the bottom portion of the heap snapshot. Examining the retaining path to the object should give you enough information to understand why the object was not collected, and you should make the necessary code changes to remove the unnecessary reference.
View memory allocation by function
You can view memory allocation by JavaScript function. See Speed up JavaScript runtime ("Allocation sampling" profiling type).


Feedback
Was this page helpful? 

Speed up JavaScript runtime
("Allocation sampling" profiling type)
Article • 10/23/2024
To identify expensive functions, use the Memory tool:

Record exactly which functions were called and how much memory each requires with Allocation Sampling in the Memory tool.
Visualize your profiles as a flame chart.
Use the "Allocation sampling" profiling type to view memory allocation by JavaScript function
If you notice jank (interruptions of rendering) in your JavaScript, collect a memory allocation sampling profile, by using the Allocation sampling profiling type. A sampling profile shows which functions allocated the most memory.
To use the Allocation sampling profiling type to view memory allocation by JavaScript function:
1. Open a webpage, such as the Detached Elements demo webpage, in a new window or tab.
2. Right-click the webpage, and then select Inspect.
Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
DevTools opens.
3. In DevTools, in the Activity Bar, select the Memory () tool:

If the Memory tool isn't visible, click the More tools () button, and then select
Memory.
4. Select the Allocation sampling option button.
If the Allocation sampling option button isn't shown, because a profile is already displayed, in the upper left, click Profiles ().
5. In the Select JavaScript VM instance section, if there is a worker on the page, you can select that as the profiling target.
6. At the bottom of the Memory tool, click the Start button.
7. Interact with the webpage. For example, click the Fast traffic button and then the Stop button in the demo webpage.
Depending on what you are trying to analyze, you can either refresh the page, interact with the page, or just let the page run.
8. In the upper left of the Memory tool, click the Stop heap profiling () button.
Or, at the bottom of the Memory tool, click the Stop button. A new Profile is added in the Sampling profiles section in the Profiles sidebar:

The sampling profile shows a breakdown of memory allocation by function. The default view is Heavy (Bottom Up). You can switch to the Chart or Tree (Top Down) view, per the section below.
You can also use the Console Utilities API to record and group profiles from the command line.
Change the view of a sampling profile
To change the sort order in a memory allocation sampling profile, use the Profile view mode dropdown list, which initially says Heavy (Bottom Up):

Menuitems:
Chart - Chronological chart of the recording.
Heavy (Bottom Up) - Lists the app's called functions in order of memory allocation, and shows the call path for each function. The default view.
 Tree (Top Down) - Shows the calling structure, starting at the top of the call stack.
Chart
The Chart view mode displays a chronological chart of the recording:

Heavy (Bottom Up)
The Heavy (Bottom Up) view mode lists functions by impact on performance and enables you to examine the calling paths to the functions. This is the default view:

Tree (Top Down)
The Tree (Top Down) view mode shows an overall picture of the calling structure, starting at the top of the call stack:

Exclude functions
When Heavy (Bottom Up) or Tree (Top Down) is selected (not Chart), there are several buttons, that are available (not dimmed) when you select a row:
Focus selected function ()
Exclude selected function () Restore all functions ()
To exclude a function from a memory allocation sampling profile, select the sampling profile and then click the Exclude selected function () button. The requesting function (parent) of the excluded function (child) is charged with the allocated memory assigned to the excluded function (child).
Click the Restore all functions () button to restore all excluded functions back into the recording.
View a memory allocation sampling profile as a
Chart
The Chart view provides a visual representation of the Sampling Profile over time.
After you record a memory allocation sampling profile, view the recording as a flame chart. Select Chart in the the Profile view mode dropdown list (which initially says Heavy (Bottom Up)):

The flame chart is split into two parts:
ﾉ Expand table
indexPartDescription1OverviewA birds-eye view of the entire recording. The height of the bars correspond to the depth of the call stack. So, the higher the bar, the deeper the call stack.2Call
StacksThis is an in-depth view of the functions that were called during the recording. The horizontal axis is time and vertical axis is the call stack. The stacks are organized top-down. So, the function on top called the one below it, and so on.Functions are colored randomly. There is no correlation to the colors used in the other panels. However, functions are always colored the same across invocations, so that you can observe patterns in each runtime.

A tall call stack isn't necessarily significant; it might just mean that a lot of functions were called. But a wide bar means that a function took a long time to complete, so these are candidates for optimization.
Zoom in on specific parts of recording
To zoom in on particular parts of the call stack, click and drag left and right across the overview. After you zoom, the call stack automatically displays the portion of the recording that you selected.

View function details
Click a function, to view it in the Sources tool.
Hover on a function to display the name and timing data:
ﾉ Expand table
DetailDescriptionNameThe name of the function.Self sizeThe size of the current invocation of the function, including only the statements in the function.Total sizeThe size of the current invocation of this function and any functions that it called.URLThe location of the function definition in the form of base.js:261 where base.js is the name of the file where the function is defined and 261 is the line number of the definition.
Investigate memory allocation, with reduced garbage ("Include objects" checkboxes)
By default, the Allocation sampling profiling type only reports allocations that are still alive at the end of the recording session. Objects that are created, removed, and then garbage collected (GC'd) aren't displayed in the Memory tool when profiling using the Allocation sampling or Allocations on timeline profiling types.
You can trust the browser to clean up garbage from your code. However, it is important to consider that GC itself is an expensive operation and multiple GCs can slow down your user's experience of your website or app. When recording in the Performance tool with the Memory checkbox turned on, you can see the GC operation happen at the steep cliffs (sudden decreases) in the heap chart:

By reducing the amount of garbage your code is creating, you can reduce the cost of each individual GC and the number of GC operations.
Track objects that are discarded by GC
To track objects that are discarded by garbage collection:
1. In the Memory tool, select the Allocation sampling option button.
2. Click the Include objects discarded by major GC and Include objects discarded by minor GC settings.

3. Click the Start button.
4. On the webpage, perform actions that you want to investigate.
5. Click the Stop button when you have finished all of your actions.
DevTools now tracks all of the objects that were GC'd during the recording. Use these settings to understand how much garbage your website or app is generating. The data reported by Allocation sampling will help you identify the functions that are generating the most garbage.
If you are investigating objects that were only GC'd during specific major or minor GC operations, configure the settings appropriately to track the operation you care about. To learn more about the differences between major and minor GC, see Trash talk: the

 This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

Debug DOM memory leaks ("Detached elements" profiling type)
Article • 10/23/2024
Use the Memory tool's Detached elements profiling type to find and display all of the detached elements on a webpage. For a comparison of tools to view detached elements, see Tools for investigating detached elements in Fix memory problems.
The Detached elements profiling type helps you fix memory leaks due to detached DOM elements. The resulting profile lists the detached objects that are retained by references in your JavaScript code. This profiling type shows a view of the detached nodes to help you identify possible memory leaks on your webpage.
Analyze a webpage's detached elements
To use the Detached elements profiling type to analyze a webpage's detached elements:
1. Open a webpage, such as the Detached Elements demo webpage, in a new window or tab.
2. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
DevTools opens.
3. In DevTools, in the Activity Bar, select the Memory () tool.
If that tab isn't visible, click the More Tools () button, and then select Memory.
The Memory tool opens:

If the Detached elements option button isn't shown, because a profile is already displayed, in the upper left, click Profiles ().
You don't need to select the Detached elements option button at this point, because the webpage hasn't generated any detached elements yet.
Generate messages, which will be stored by the JavaScript instance of the Room class:
The Room 1 button is initially selected. In the JavaScript code of the demo webpage, an instance of the Room class is used to manage the messages in Room 1.
4. In the demo webpage, click the Fast traffic button.
The demo webpage begins generating messages and displaying them in the webpage:

5. After some messages are displayed, click the Stop button in the demo webpage.
Each message is a <div class="message"> element that's referenced by the Room 1 instance of the Room class. There are no detached elements in the webpage DOM tree, because all of the message elements are attached to the present, Room 1 instance of the Room class.
Change to a different instance of the Room class, so elements become detached:
6. In the demo webpage, click the Room 2 button, which corresponds to another instance of the Room class.
In the webpage, the messages disappear:

The messages that were generated for the Room 1 instance of the Room class
(<div class="message"> elements) are no longer attached to the DOM, but they're still referenced by the Room 1 instance of the Room class. They are detached elements, which can cause memory leaks, unless they are going to be used again by the webpage.
Get the list of detached elements:
7. In DevTools, in the Memory tool, select the Detached elements option button, and then click the Start button.
The list of detached nodes is displayed in the Detached nodes column of the generated Detached elements profile:

The detached elements are displayed, as DOM nodes like in the DOM tree in the Elements tool. In the Profiles list, in the Detached elements section, the profile is listed.
8. Expand a DOM node to display its child elements (DOM nodes):

These detached elements (DOM nodes) are memory leaks, if they aren't going to be reused by the application.
If you want to return to the list of option buttons for profiling types, in the upper left of the Memory tool, click Profiles ().
For additional ways to assess memory leaks, see Tools for investigating detached elements in Fix memory problems.
About detached elements and memory leaks
Detached elements aren't always an indication of a memory leak, and memory leaks aren't always caused by detached elements. Memory leaks depend on the context of your application.
A memory leak can occur in your application when an element is no longer attached to the Document Object Model (DOM) tree, but is still referenced by some JavaScript running on the webpage. These elements are called detached elements. For the browser to garbage-collect (GC) the detached element, the element must not be referenced from the DOM tree or from JavaScript code.
Memory issues affect webpage performance, including memory leaks, memory bloat, and frequent garbage collections. Symptoms for your users include:
The performance of a webpage gets progressively worse over time.
The performance of a webpage is consistently bad.
The performance of a webpage is delayed or appears to pause frequently.
To increase the performance of your webpage, find the elements that are detached from the DOM tree and which you didn't expect to still be referenced by JavaScript code. Find the detached elements that the browser can't garbage-collect because your code still references them, and then release the JavaScript code references to the detached elements.
Re-attaching elements
For the Detached Elements demo webpage, it makes sense to retain the list of chat messages, so that if a user switches back to Room 1, the message log is preserved. Similarly, a feed in social media might detach elements as users scroll past them, and reattach them to the DOM when users scroll back up.
When the Detached elements tool reports detached elements, it's not necessarily a memory leak. It's up to you to decide what's a memory leak and what's not. Maybe your app will re-attach those elements later (instead of having to re-create them, which could be slower).
Detaching DOM nodes is a useful approach, as long as you eventually reuse those detached elements (or delete them). The value of the Detached elements tool is, when you suspect a memory leak, you can check whether there's an increasing number of unexpected detached DOM elements being reported by the tool.
Long-running apps and unmounting components
Be sure to unmount components. For long-running apps, small memory leaks of only a few kilobytes can noticeably degrade performance over time. For webpages that use the React framework, React maintains a virtualized copy of the DOM. Failing to properly unmount components can potentially lead to an application leaking large parts of the virtual DOM.
See also
Tools for investigating detached elements in Fix memory problems. Detached Elements demo webpage
Feedback
Was this page helpful? 
The heap snapshot file format
Article • 04/03/2023
Investigating memory usage in web applications can be difficult. The DevTools Memory tool allows you to explore all of the objects that are allocated in memory, by your web application by taking a heap snapshot. This information is useful for performance investigations because you can find out which objects are consuming the most memory.
However, sometimes you may need to focus on specific parts of the memory data that the Memory tool doesn't show. In this case, use DevTools to export the entire set of memory data as a .heapsnapshot JSON file.
This article describes the structure and content of .heapsnapshot JSON files so you can build your own visualization and analysis tools.
Record a heap snapshot
To export a .heapsnapshot file, first you need to record a heap snapshot in the Memory tool, as follows:
1. In Microsoft Edge, navigate to the website you want to export the data from.
2. Press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS) to open Devtools.
3. Open the Memory tool.
4. Select Heap snapshot and then click Take snapshot.
For more information, see Record heap snapshots using the Memory tool ("Heap snapshot" profiling type).
Export and view a .heapsnapshot file
Once you have recorded a heap snapshot, you can export it.
1. In the Memory tool left sidebar, click Save next to the heap snapshot item you just recorded.
2. Change the file extension from .heapsnapshot to .json, to make it easier to open the file in a text editor.
3. Open the saved file in a text editor, such as Visual Studio Code.
4. To make the JSON easier to read, in Visual Studio Code, right-click anywhere in the code and then select Format document.
Generally, the resulting .heapsnapshot file is different every time you record and export a heap snapshot. Heap snapshots are dynamically generated, based on the content of the web application that's currently being inspected in DevTools.
Overview of the .heapsnapshot file format
The memory used by a web application is organized as a graph by V8, which is the JavaScript engine used by Microsoft Edge. A graph is a data type that is composed of nodes (points on the graph) and edges (links between the points).
The data in the .heapsnapshot file represents the web app's memory that graph efficiently, and makes it easier to transfer groups of data between the browser process and DevTools. The .heapsnapshot file contains a flattened representation of the relations between nodes and edges, as a JSON object that contains arrays of numbers and strings. The file has a .heapsnapshot file name extension, and contains JSON-formatted data.
The data has two main parts:
 The metadata, which contains all of the information you need to parse the arrays of data that represent the memory graph.
 The arrays data, which contain the actual data that's needed to re-create the graph.
Updating this data format documentation
The format of the .heapsnapshot file, as documented below, may change as V8 and
DevTools evolve. If you find a discrepancy in the documentation, please provide feedback in the MicrosoftDocs/edge-developer repo.
Schema of the .heapsnapshot data
Top-level structure

JSON{
    "snapshot": {},
    "nodes": [],
    "edges": [],
    "trace_function_infos": [],
    "trace_tree": [],
    "samples": [],
    "locations": [],
    "strings": []
}ﾉ Expand table
PropertyDescriptionFormatsnapshotContains all of the information about the format of the memory graph data and its size.ObjectnodesAll the information that's needed to re-create the nodes of the graph. To parse this data, use snapshot.meta.node_types and snapshot.meta.node_fields.ArrayedgesAll the information that's needed to re-create the edges of the graph. To parse this data, use snapshot.meta.edge_types and snapshot.meta.edge_fields.Arraytrace_function_infosNot documented yetArraytrace_treeNot documented yetArraysamplesNot documented yetArraylocationsContains information about the script location of nodes. To parse this data, use snapshot.meta.location_fields with the nodes array.ArraystringsAn array of all of the strings that are held in memory. These can be any strings, such as user-defined strings or code.ArraySnapshot
JSON{
    "snapshot": {     
        "meta": {},
        "node_count": 123,        "edge_count": 456,
        "trace_function_count": 0
    }     ...
}ﾉ Expand table
PropertyDescriptionFormatmetaProperties that contain information about the shape and size of every object that's contained in the memory graph data.Objectnode_countThe total number of nodes in the memory graph.Numberedge_countThe total number of edges in the memory graph.Numbertrace_function_countThe total number of trace functions in the memory graph.NumberSnapshot metadata
JSON{
    "snapshot": {         "meta": {
            "node_fields": [],             "node_types": [],
            "edge_fields": [],
            "edge_types": []
        }
    }     ...
}ﾉ Expand table
PropertyDescriptionFormatnode_fieldsThe list of all the properties that are required to re-create a node.Arraynode_typesThe types of all the properties that are required to re-create a node. The number of types is the same as the number of properties defined in node_fields.Arrayedge_fieldsThe list of all the properties that are required to re-create an edge.ArrayPropertyDescriptionFormatedge_typesThe types of all the properties that are required to re-create an edge.
The number of types is the same the number of properties in edge_fields.ArrayThe following is an example of a metadata object:
JSON{
    "snapshot": {         "meta": {
            "node_fields": [
                "type",
                "name",
                "id",
                "self_size",
                "edge_count",
                "trace_node_id",
                "detachedness"
            ],             "node_types": [
                [
                    "hidden",                     "array",
                    "string",
                    "object",
                    "code",
                    "closure",
                    "regexp",
                    "number",
                    "native",
                    "synthetic",
                    "concatenated string",
                    "sliced string",
                    "symbol",
                    "bigint",
                    "object shape"
                ],
                "string",
                "number",
                "number",
                "number",
                "number",
                "number"
            ],
            "edge_fields": [
                "type",
                "name_or_index",
                "to_node"
            ],
            "edge_types": [                [
                    "context",
                    "element",
                    "property",
                    "internal",                     "hidden",
                    "shortcut",
                    "weak"
                ],
                "string_or_number",
                "node"
            ]
        }
    }
}
Nodes
The nodes array, which is at the top level of the .heapsnapshot data, contains all of the information that's needed to re-create the nodes of the memory graph.
To parse this array, the following information is needed:
snapshot.node_count, to know how many nodes there are. snapshot.meta.node_fields, to know how many fields each node has.
Each node in the array is represented by a series of snapshot.meta.node_fields.length numbers. So the total number of elements in the nodes array is snapshot.node_count multiplied by snapshot.meta.node_fields.length.
To re-create a node, read the numbers from the nodes array by groups of size snapshot.meta.node_fields.length.
The following code snippet shows the node_fields metadata and the data for the first two nodes in the graph:
JSON{
    "snapshot": {         "meta": {
            "node_fields": [
                "type",
                "name",
                "id",
                "self_size",
                "edge_count",
                "trace_node_id",                "detachedness"
            ]             ...
        }         ...
    },
    "nodes": [
        9,1,1,0,10,0,0,
        2,1,79,12,1,0,0,
        ...
    ]     ...
}ﾉ Expand table
Index in node groupNameDescription0typeThe type of node. See Node types, below.1nameThe name of the node. This is a number that's the index in the toplevel strings array. To find the actual name, use the index number to look up the string in the top-level strings array.2idThe node's unique ID.3self_sizeThe node's size in bytes.4edge_countThe number of edges connected to this node.5trace_node_idThe ID of the trace node6detachednessWhether this node can be reached from the window global object. 0 means the node is not detached; the node can be reached from the window global object. 1 means the node is detached; the node can't be reached from the window global object.Node types
The first number in the group of numbers for a node in the nodes array corresponds to its type. This number is an index that can be used to lookup the type name in the
snapshot.meta.node_types[0] array.
ﾉ Expand table
Node typeDescriptionHiddenA V8 internal element that doesn't correspond directly to a user-controllable
JavaScript object. In DevTools, these all show up under the category name (system). Even though these objects are internal, they can be an important part of retainer paths.ObjectAny user-defined object, such as { x: 2 } or new Foo(4). Contexts, which show up in DevTools as system / Context, hold variables that had to be allocated on the heap because they're used by a nested function.NativeThings that are allocated by the Blink rendering engine, rather than by V8. These are mostly DOM items such as HTMLDivElement or CSSStyleRule.Concatenated stringThe result of concatenating two strings with the + operator. Rather than making a new string that contains a copy of all the data from the two source strings, V8 creates a ConsString object that contains pointers to the two source strings. From a JavaScript perspective, it acts just like any other string, but from a memory profiling perspective, it is different.Sliced stringThe result of a substring operation, such as using String.prototype.substr or
String.prototype.substring. V8 avoids copying string data by instead creating a
SlicedString, which points to the original string and specifies the start index and length. From a JavaScript perspective, a sliced string acts like any other string, but from a memory profiling perspective, it is different.ArrayVarious internal lists, which are displayed in DevTools with the category name (array). Like Hidden, this category groups together a variety of things. Many of the objects here are named (object properties) or (object elements), indicating that they contain the string-keyed or numeric-keyed properties of a JavaScript object.CodeThings that grow proportionally to the amount of script, and/or the number of times that functions run.SyntheticSynthetic nodes don't correspond to anything actually allocated in memory. These are used to distinguish the different kinds of garbage-collection (GC) roots.Edges
Similar to the nodes array, the edges top-level array contains all of the elements that are needed to re-create the edges of the memory graph.
Also similar to nodes, the total number of edges can be calculated by multiplying snapshot.edge_count by snapshot.meta.edge_fields.length. Edges are also stored as a
sequence of numbers, which you will need to iterate on by groups of size snapshot.meta.edge_fields.length.
However, to read the edges array correctly, you first need to read the nodes array, because each node knows how many edges it has.
To re-create an edge, you need three pieces of information:
The edge type.
The edge name or index.
The node that the edge is connected to.
For example, if you read the first node in the nodes array and its edge_count property is set to 4, then the first four groups of snapshot.meta.edge_fields.length numbers in the edges array correspond to the four edges of this node.
ﾉ Expand table
Index in edge groupNameDescription0typeThe type of edge. See Edge types to find out what are the possible types.1name_or_indexThis can be a number or a string. If it's a number, it corresponds to the index in the top-level strings array, where the name of the edge can be found.2to_nodeThe index within the nodes array that this edge is connected to.Edge types
The first number in the group of numbers for an edge in the edges array corresponds to its type. This number is an index that can be used to lookup the type name in the
snapshot.meta.edge_types[0] array.
ﾉ Expand table
Edge typeDescriptionInternalEdges that don't correspond to JavaScript-visible names, but are still important. As an example, Function instances have a "context" representing the state of variables that were in scope where the function was defined. There is no way for JavaScript code to directly read the "context" of a function, but these edges are needed when investigating retainers.WeakWeak edges don't keep the node they are connected to alive, and thus are omitted from the Retainers view. Any object with only weak edges pointing to it can beEdge typeDescriptiondiscarded by the garbage collection (GC).HiddenSimilar to Internal, except these edges don't have unique names, and instead are numbered in increasing order.ShortcutAn easier-to-read representation of some other path. This type is rarely used. For example, if you use Function.prototype.bind to create a bound function with some bound arguments, V8 creates a JSBoundFunction, which points to a FixedArray (an internal type), which points to each bound argument. When producing a snapshot, V8 adds a shortcut edge from the bound function directly to each bound argument, bypassing the FixedArray.ElementObject properties where the key is a number.locations
The locations array, which is at the top level of the .heapsnapshot data, contains information about where some of the nodes in the snapshot were created. This array consists of a series of numbers meant to be read by groups of size
snapshot.meta.location_fields.length. Therefore, we would go to snapshot.meta.location_fields to know how many fields each location in the locations
array has, and what those fields are. For example, if location_fields contains 4 items, then the locations array should be read by groups of 4. snapshot.meta.location_fields contains the information for each location:
ﾉ Expand table
Index in location_fieldsNameDescription0object_indexThe index of the node in the snapshot.nodes array that's associated with this location.1script_idThe ID of the script that creates the associated node.2lineThe line number where the node was created, within the script that created the node.3columnThe column number where the node was created, within the script that created the node.The following code example shows how to link the snapshot.locations array to the snapshot.nodes array:
JSON{
    "snapshot": {         "meta": {
            "location_fields": [
                "object_index",
                "script_id",
                "line",
                "column"
            ]             ...
        }         ...
    },
    "nodes": [
        9,1,1,0,10,0,0,
        2,1,79,12,1,0,0,
        ...
    ],
    "locations":[
        7,9,0,0,
        113792,3,25,21,
        ...
    ],     ...
}The first location in the locations array is 7,9,0,0,. This location is associated with the node info group that starts at index 7 in the nodes array. Therefore, the node contains the following key/value pairs:
"type": 2,
"name": 1,
"id": 79,
"self_size": 12,
"edge_count": 1,
"trace_node_id": 0,
"detachedness": 0,
"script_id": 9,
"line" 0,
"column": 0,See also
To learn more about the .heapsnapshot file format, see the code that generates the file, which is the HeapSnapshotGenerator class in heap-snapshot-generator.h.
HeapSnapshot class (line 142)
HeapSnapshotGenerator class (line 522)
Feedback
Was this page helpful? 

Inspect a JavaScript ArrayBuffer using Memory Inspector
Article • 03/28/2023
Use Memory Inspector to view and interact with the following types of objects:
ArrayBuffer
TypedArray
DataView
WebAssembly (Wasm) memory
Using Memory Inspector you can view the different types of memory objects, navigate, and select the types to be used to interpret the values. It shows the ASCII values directly next to the bytes, and lets you select different endianness.

The Memory Inspector tool provides greater ability than the Sources tool to inspect
ArrayBuffers when debugging. The Scope view in the Sources tool displays a list of single values within the array buffer, which makes it difficult to see all the data. Additionally, navigating to a certain range within the buffer requires you to scroll to a specific index and the values are always displayed as a single byte, even if you wanted to see them in another format, such as 32-bit integers.

Open Memory Inspector while debugging
1. Start Microsoft Edge.
2. Open the test site Inspect ArrayBuffers in JS (Memory in JS).
3. Open DevTools by pressing F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
4. Click Sources and open the demo-js.js file.
5. Set a breakpoint at line 18 as shown in the following image.

6. Refresh the webpage. It fails to display because the JavaScript pauses at the breakpoint.
7. In the right Debugger pane under Scope, find the buffer line.
8. From the buffer line you can open Memory Inspector using one of the following methods:
Click on the Reveal in Memory Inspector panel icon () at the end of the buffer property line, or
From the context menu. Right click the buffer property and select Reveal in Memory Inspector panel.

The JavaScript ArrayBuffer opens in Memory Inspector.

Inspect multiple objects
You can inspect multiple objects at the same time such as DataView and TypedArray.
With the demo webpage paused at the breakpoint, object b2 in the Scope view is a
TypedArray. Right click the b2 object and select Reveal in Memory Inspector panel
A new tab for the b2 object opens next to the first tab, which represents the buffer object in Memory Inspector.

Navigating in Memory Inspector
The Memory Inspector panel includes three types of content:
Navigation bar
Memory buffer Value inspector
Navigation bar

The Enter address text box shows the current byte address in hex format. You can change the value to jump to a new location in the memory buffer. Click in the text box and change the value to 0x00000008. The Memory buffer immediately jumps to that byte address.
Memory buffers may be longer than one page. Use the left and right arrow buttons to navigate Previous page (<) and Next page (>), respectively. If there is only one page of memory buffer data, the arrows take you to the beginning and ending of the page.
Use the far-left history arrows to Go back in address history () and Go forward in address history ().
If the Memory buffer does not automatically update when stepping through values, click Refresh ().
Memory buffer

Reading from the left side of the panel, the address is displayed in hex format. The currently selected address is bold.
The memory is also shown in hex format, each byte separated by a space. The currently selected byte is highlighted. You can click on any byte or navigate using the arrow keys (left, right, up, and down).
The ASCII representation of the memory is shown on the right side of the panel. The highlighted character corresponds to the selected byte. You can click on any character or navigate using the arrow keys (left, right, up, and down).
Value inspector

Click the current Endian type to switch between Big endian and Little endian.
The main area shows each value and interpretation based on the settings. By default, all values are shown.
Click Toggle value type settings () to select which value types to see in the inspector.
This becomes the new default value type setting.

You can change the encoding view using the dropdown list. For integers you can choose from decimal dec, hexadecimal hex, and octal oct. For floats you can choose between decimal notation dec and scientific notation sci.
Inspecting memory
Complete the following steps to debug a webpage in Memory Inspector.
1. In the Navigation bar change the address to 0x00000027.
2. View the ASCII representation and the value interpretations. All values should be zero or empty.

3. Click Resume script execution () or press F8 or Ctrl +\ to step through the code.
The ASCII representation and the value interpretations are updated.

4. Click the Jump to address button () for Pointer 32-bit or Pointer 64-bit as needed to jump to the next active memory address. If next memory address is not available, the button is turned off () with the tooltip Address out of memory range.
5. Customize the Value inspector to show only floating point values. Click Toggle value type settings () and clear all checkboxes except the two Floating point values.

6. Click Toggle value type settings () to close the value type settings.
7. Use the dropdown lists to change the encoding from dec to sci. The value representations are updated.

8. Explore the memory buffer using the keyboard or navigation bar.
9. Repeat steps 3 and 4 to observe value changes.
WebAssembly memory inspection
For WebAssembly (Wasm) memory inspection, the process is similar to inspecting JavaScript memory.
1. Open the Wasm test site Inspect Wasm memories (Memory in Wasm).
2. Open DevTools by pressing F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
3. Click Sources and open the memory-write.wasm file.
4. Set a breakpoint at the first line in the loop, hexadecimal value 0x03c.
5. Refresh the page.
6. In the debugger pane under Scope, expand the Module.

7. Click on the Reveal in Memory Inspector panel icon () at the end of the $imports.memory property line.
The Wasm ArrayBuffer opens in Memory Inspector.



Feedback
Was this page helpful?  Yes  No
Inspect network activity
Article • 07/11/2023
Use the Network tool to make sure the resources your webpage needs to run are downloaded as expected and that the requests to server-side APIs are sent correctly. Inspect the properties of individual HTTP requests and responses, such as the HTTP headers, content, or size.
This is a step-by-step tutorial walkthrough of the Network tool, for inspecting network activity for a page.
For an overview of the network-related DevTools features, see Network features reference.
Video: Learn to Use the Network Tool
For a video version of this tutorial, view the following video:

When to use the Network tool
In general, use the Network tool when you need to make sure that resources are being downloaded correctly and requests to server-side APIs are being sent as expected. The most common use cases for the Network tool are:
Making sure that resources are actually being downloaded at all.
Verifying the request parameters and responses of server-side API calls.
If you're looking for ways to improve page load performance, the Network tool can help understand how much data is being downloaded and how long it takes to download it, but there are many other types of load performance issues that aren't related to network activity. To further investigate page load performance issues, you can use the
Performance tool, the Issues tool, and the Lighthouse tool, because it gives you targeted suggestions on how to improve your page. For example, see Optimize website speed using Lighthouse.
Open the Network tool
To get the most out of this tutorial, open the demo and try out the features on the demo page.

2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Network tab. If that tab isn't visible, click the More tools () button:
You might prefer to dock DevTools to the bottom of your window:

The Network tool is initially empty. DevTools only logs network activity after you open it, and no network activity has occurred since you opened DevTools.
Understand the Network tool user interface
The Network tool is divided in three main parts:
The top toolbar contains options to customize the tool and filter network requests. Below the top toolbar, the Overview graph provides a high-level overview of the network traffic over time and allows to filter network requests.
 Below the Overview graph, the Network Log section shows the network activity and allows to inspect individual requests.

Log network activity
To view the network activity that a page causes:
1. Refresh the webpage. The Network tool logs all network activity in the Network Log:

Each row of the Network Log represents a resource. By default the resources are listed chronologically. The top resource is usually the main HTML document. The bottom resource is whatever was requested last.
Each column represents information about a resource. In the previous figure, the default columns are displayed.
Status. The HTTP status code for response.
Type. The resource type.
Initiator. The cause of the resource request. Clicking a link in the Initiator column takes you to the source code that caused the request.
Time. The duration of the request.
Waterfall. A graphical representation of the different stages of the request. To display a breakdown, hover over a Waterfall.
Note that the Overview graph also shows network activity. You won't use the Overview graph in this tutorial, so you can hide it. See Hide the Overview pane.
After you open DevTools, it records network activity in the Network Log.
2. To demonstrate this, first look at the bottom of the Network Log and make a mental note of the last activity.
3. Now, click the Get Data button in the demo.
4. Look at the bottom of the Network Log again. A new resource named getstarted.json is displayed:

Show more information
The columns of the Network Log are configurable. You can hide columns that you aren't using. There are also many columns that are hidden by default which you might find useful.
1. Right-click the header of the Network Log table, and then select Domain. The domain of each resource is now shown:

2. To see the full URL of a resource, hover over its cell in the Name column.
Simulate a slower network connection
The network connection of the computer that you use to build sites is probably faster than the network connections of the mobile devices of your users. By throttling the page, you get a better idea of how long a page takes to load on a mobile device.
1. Select the Throttling dropdown list in the top toolbar. It is set to No throttling by default.
2. Select Slow 3G:

3. Long-press Reload () (or right-click Refresh) and then select Empty cache and hard refresh:

up the page load. Empty cache and hard refresh forces the browser to go the network for all resources. Use it to display how a first-time visitor experiences a page load.
The Empty cache and hard refresh workflow is only available when DevTools is open.
See also Emulate slow network connections in Network features reference.
Capture screenshots
Screenshots display how a webpage looks over time while it loads.
1. Click the () button and then select the Capture screenshots checkbox:

2. Refresh the page again using the Empty cache and hard refresh workflow. See Simulate a slower connection above if you need a reminder on how to do this.
The Screenshots panel provides thumbnails of how the page looked at various points during the loading process:

3. Click the first thumbnail. DevTools shows you what network activity was occurring at that moment in time:

4. Click () again and turn off the Capture screenshots checkbox to close the Screenshots pane.
5. Refresh the page again.
Inspect the details of the resource
Select a resource to learn more information about it.
1. Select network-tutorial/. The Headers panel is shown. Use this panel to inspect HTTP headers:

2. Select the Preview panel. A basic rendering of the HTML is shown:

The panel is helpful when an API returns an error code in HTML. You might find it easier to read the rendered HTML than the HTML source code, or when you inspect images.
3. Select the Response panel. The HTML source code is shown:

Tip: When a file is minified, select the Format () button at the bottom of the Response panel to re-format the contents of the file for readability.
For example, if the response contains minified JSON data, click the Format button to re-format the JSON syntax so that each object property is on its own line. You can also use the JSON viewer to view formatted and highlighted JSON responses in a browser tab. See View formatted JSON responses or files.
4. Select the Timing panel. A breakdown of the network activity for the resource is displayed:

5. Click Close () to view the Network Log again:

Search network headers and responses
Use the Search pane when you need to search the HTTP headers and responses of all resources for a certain string or regular expression.
For example, suppose you want to verify that your resources are using reasonable cache policies.


3. Click a result to view the resource in which the result was found. If you are looking at the details of the resource, select a result to go directly to it. For example, if the query was found in a header, the Headers panel opens. If the query was found in content, the Response panel opens:

4. Close the Search pane and the Headers panel.
Filter resources
DevTools provides numerous workflows for filtering out resources that aren't relevant to the task at hand.
The Filters toolbar should be turned on by default. If the Filters toolbar isn't on, click Filter () to show it:

Filter by string, regular expression, or property
The Filter text box supports many different types of filtering.
1. Type png into the Filter text box. Only the files that contain the text png are shown. In this case the only files that match the filter are the PNG images.
2. Type /.*\.[cj]s+$/, which is a JavaScript regular expression. DevTools filters out any resource with a file name that doesn't end with a j or a c followed by 1 or more s characters.
3. Type -main.css. DevTools filters out main.css. If any file matches that pattern, it's also filtered out.
4. Type larger-than:1000 into the Filter text box. DevTools filters out any resource with responses that are smaller than 1000 bytes.
For the full list of filterable properties, see Filter requests by properties.
5. Clear the Filter text box of any text.
Filter by resource type
To focus in on a certain type of file, such as stylesheets:
1. Select CSS. All other file types are filtered out:

2. To also display scripts, press and hold Ctrl (Windows, Linux) or Command (macOS), and then click JS.
3. To remove the filters and display all resources again, select All.
For other filtering workflows, see Filter requests.
Block requests
How does a page look and behave when some of the page resources aren't available?
Does it fail completely, or is it still somewhat functional? Block requests to find out:
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
2. Type block, select Show Network request blocking, and then press Enter:

4. Refresh the page. As expected, the styling of the page is slightly messed up, because the main stylesheet has been blocked.
In the main.css row in the Network Log, the red text means that the resource was blocked:

5. Clear the Enable network request blocking checkbox.
See also:
 Block a network request in Network request blocking tool.
Conclusion
Congratulations, you have completed the tutorial! You now know how to use the Network tool in Microsoft Edge DevTools.
To discover more DevTools features related to inspecting network activity, see Network features reference.


Feedback
Was this page helpful? 

Network features reference
Article • 12/07/2023
This article is a feature-driven inventory of the Network tool. Use the Network tool to inspect network activity for a webpage. For a step-by-step walkthrough and introduction to the Network tool, see Inspect network activity.
Detailed contents:
Record network requests
Stop recording network requests
Clear requests
Save requests across page loads
Capture screenshots during page load
Change loading behavior
Emulate a first-time visitor by disabling the browser cache
Manually clear the browser cache
Emulate offline
Emulate slow network connections
Manually clear browser cookies
Override the user agent
Set user agent client hints
Filter requests
Filter requests by properties
Filter requests by type
Filter requests by time
  Hide data URLs Sort requests
Sort by column
Sort by activity phase
Analyze requests
Display the timing relationship of requests
Display a preview of a response body
Display a response body
Display HTTP headers
Display query string parameters
Display cookies
Display the timing breakdown of a request
Display initiators and dependencies
Display load events
Display the total number of requests
Display the total download size
Display the stack trace that caused a request
Display the uncompressed size of a resource
Export requests data
Save all network requests to a HAR file
Copy one or more requests to the clipboard
Copy formatted response JSON to the clipboard
Copy property values from network requests to your clipboard
Change the layout of the Network panel
Hide the Filters pane
Big request rows
Hide the Overview pane
Record network requests
By default, DevTools records all network requests in the Network tool, so long as DevTools is open.

Stop recording network requests
To stop recording requests:
1. On the Network tool, click Stop recording network log (). It turns grey to indicate that DevTools is no longer recording requests.
2. Press Ctrl+E (Windows, Linux) or Command+E (macOS) while the Network tool is in focus.
Clear requests
To clear all requests from the Requests table, in the Network tool, click the Clear network log () button:

Or, press Ctrl+L (Windows, Linux, macOS) or Command+K (macOS) while the Network tool has focus.
Save requests across page loads
To save requests across page loads, on the Network tool, select the Preserve log checkbox:

DevTools saves all requests until you disable Preserve log.
Capture screenshots during page load
You can capture screenshots to analyze what's displayed for users while waiting for your page to load.
To enable screenshots:
1. In DevTools, open the Network tool.
2. In the upper right within the Network tool, click the Network settings (gear) icon.
A row of checkboxes appears.
3. Select the Capture screenshots checkbox:

To capture a screenshot:
1. While the Network tool has focus, press Ctrl+F5 to refresh the page. Screenshots are captured during the page load and thumbnails are shown below the row of checkboxes.
You can interact with the screenshots as follows.
2. Hover over a screenshot to display the point at which that screenshot was captured. A yellow vertical line is displayed on the Overview chart pane.

3. Click the thumbnail of a screenshot to filter out any requests that occurred after the screenshot was captured.
4. Double-click a screenshot thumbnail to zoom-in and view the screenshot.
5. Press Esc to close the screenshot viewer.
Change loading behavior
Emulate a first-time visitor by disabling the browser cache
To emulate how a first-time user experiences your site, turn on the Disable cache checkbox. DevTools disables the browser cache. This feature more accurately emulates a first-time user's experience, because requests are served from the browser cache on repeat visits.
The Disable Cache checkbox:

Disable the browser cache from the Network conditions tool
From the Network tool, you can open the Network conditions tool in the Quick View panel and then disable the browser cache from there:
1. In the Network tool, click the More network conditions ( button. The Network conditions tool opens in the Quick View panel.
2. In the Network conditions tool, select the Disable cache checkbox:

See also:
 Network conditions tool
Manually clear the browser cache
To manually clear the browser cache at any time, right-click anywhere in the Requests table, and then select Clear browser cache:

Emulate offline
A class of web apps, named Progressive Web Apps (PWA), are able to function offline with the help of service workers. You may find it useful to quickly simulate a device that has no data connection, when you are building this type of app.
To simulate an offline network experience, select the No throttling dropdown menu > Presets > Offline.
The Offline dropdown menu:

Emulate slow network connections
Emulate Slow 3G, Fast 3G, and other connection speeds from the No throttling dropdown menu.
The Throttling dropdown menu:

You can choose from different presets, such as Slow 3G or Fast 3G. To add your own custom presets, open the Throttling menu, and select Custom > Add.
DevTools displays a warning icon next to the Network tool to remind you that throttling is enabled.
See also Simulate a slower network connection in Inspect network activity.
Emulate slow network connections from the Network Conditions tool
From the Network tool, you can open the Network conditions tool in the Quick View panel and then throttle the network connection from there:
1. In the Network tool, click the More network conditions ( button. The Network conditions tool opens in the Quick View panel.
2. In the Network conditions tool, in the Network throttling menu, select a connection speed.
See also:
 Network conditions tool
Manually clear browser cookies
To manually clear browser cookies at any time, right-click anywhere in the Requests table, and then select Clear browser cookies.

Override the user agent
To manually override the user agent:
1. In the Network tool, click the More network conditions ( button. The Network conditions tool opens in the Quick View panel.
2. In the Network conditions tool, clear the Use browser default checkbox. The other controls become available.
3. Select a user agent option from the menu, or enter a custom user agent in the text box.
Set user agent client hints
If your site employs user agent client hints and you want to test them, you can set them either in the Network conditions tool or in Emulate mobile devices (Device Emulation). To set user agent client hints in the Network conditions tool:
1. In the Network tool, click the More network conditions ( button. The Network conditions tool opens in the Quick View panel.
2. In the User agent section, clear the Use browser default checkbox, and then expand User agent client hints:

3. In the User agent dropdown list, select a predefined browser and device. Or, accept the default value of Custom..., and enter information in the Enter a custom user agent text box.
4. For either choice (predefined or custom), specify user agent client hints as follows:
 Brand and Version such as Edge and 92. To add multiple brand/version pairs, click + Add Brand.
Full Browser Version such as 92.0.1111.0.
Platform and Version such as Windows and 10.0.
Architecture such as x86.
Device model such as Galaxy Nexus.
You can set or change any of the user agent client hints; there are no required values.
5. Select Update.
6. To verify changes, click Console and type navigator.userAgentData. Expand the results as needed to view changes to user agent data.
See also:
 User-Agent Client Hints in Detecting Microsoft Edge from your website.
Filter requests
You can filter requests by properties, by type, or by time, and you can hide data URLs.
Filter requests by properties
Use the Filter text box to filter requests by properties, such as the domain or size of the request.
If the text box isn't displayed, the Filters pane is probably hidden. For more information, see Hide the Filters pane.
The Filter text box:

You can use multiple properties simultaneously by separating each property with a space. For example, mime-type:image/png larger-than:1K displays all PNGs that are larger than 1 kilobyte. The multi-property filters are equivalent to AND operations. OR operations are currently not supported. The complete list of supported properties:
ﾉ Expand table
Property	Detailsdomain	Only display resources from the specified domain. You can use a wildcard character
(*) to include multiple domains. For example, *.com displays resources from allPropertyDetailsdomain names ending in .com. DevTools populates the autocomplete dropdown menu with all of the domains that are found.hasresponseheaderDisplays the resources that contain the specified HTTP response header. DevTools populates the autocomplete dropdown menu with all of the response headers that are found.isUse is:running to find WebSocket resources.larger-thanDisplays resources that are larger than the specified size, in bytes. Setting a value of 1000 is equivalent to setting a value of 1k.methodDisplays resources that were retrieved over a specified HTTP method type. DevTools populates the dropdown menu with all of the HTTP methods that are found.mime-typeDisplays resources of a specified MIME type. DevTools populates the dropdown menu with all MIME types that are found.mixedcontentShow all mixed content resources (mixed-content:all) or just the ones that are currently displayed (mixed-content:displayed).schemeDisplays resources retrieved over unprotected HTTP (scheme:http) or protected HTTPS (scheme:https).set-cookiedomainDisplays resources that have a Set-Cookie header with a Domain attribute that matches the specified value. DevTools populate the autocomplete with all of the cookie domains that are found.set-cookienameDisplays resources that have a Set-Cookie header with a name that matches the specified value. DevTools populate the autocomplete with all of the cookie names that are found.set-cookievalueDisplays resources that have a Set-Cookie header with a value that matches the specified value. DevTools populate the autocomplete with all of the cookie values that are found.status-codeDisplays resources that match the specific HTTP status code. DevTools populates the autocomplete dropdown menu with all of the status codes that are found.Filter requests by type
To filter requests by request type, click the buttons on the Network panel:
XHR
JS
CSS
Img
Media
Font
Doc
WS - WebSocket.
Manifest
Other - Any other type not listed here.
If the buttons don't appear, the Filters pane might be hidden. See Hide the Filters pane.
To enable multiple type filters simultaneously, press and hold Ctrl (Windows, Linux) or Command (macOS) and then click the filters.
Use the Type filters to display JS, CSS, and Document resources:

Filter requests by time
Click and drag left or right on the Overview pane to only display requests that were active during that time frame. The filter is inclusive. Any request that was active during the highlighted time is shown.
Filtering out any requests that were inactive around 300 ms:

Hide data URLs
Data URLs are small files embedded into other documents. Any request that displays in the Requests table that starts with data: is a data URL.
To hide the requests, turn off the Hide data URLs checkbox:

Sort requests
By default, the requests in the Requests table are sorted by initiation time, but you can sort the table using other criteria.
Sort by column
Click the header of any column in the Requests to sort requests by that column.
Sort by activity phase
To change how the Waterfall sorts requests:
 Right-click the header of the Requests table, click Waterfall, and then select one of the following options:
Start Time - The first request that was initiated is placed at the top.
Response Time - The first request that started downloading is placed at the top.
End Time - The first request that finished is placed at the top.
Total Duration - The request with the shortest connection settings and request or response is placed at the top.
 Latency - The request that waited the shortest time for a response is placed at the top.
These descriptions assume that each respective option is ranked from shortest to longest. Click the header of the Waterfall column to reverse the order.
The following shows sorting the Waterfall by total duration. The lighter portion of each bar is time spent waiting and the darker portion is time spent downloading bytes:

Analyze requests
So long as DevTools is open, it logs all requests in the Network tool. Use the Network tool to analyze requests.
Display a log of requests
Use the Requests table to display a log of all requests made while DevTools has been open. To reveal more information about each item, click or hover on requests.

The Requests table displays the following columns by default:
Name. The file name of the resource, or an identifier for the resource.
Status. The HTTP status code.
Type. The MIME type of the requested resource.
Initiator. The following objects or processes can initiate requests:
Parser. The HTML parser.
Redirect. An HTTP redirect.
Script. A JavaScript function.
Other. Some other process or action, such as navigating to a page via a link or entering a URL in the address bar.
 Size. The combined size of the response headers plus the response body, as delivered by the server.
 Time. The total duration, from the start of the request to the receipt of the final byte in the response.
 Fulfilled by. Whether the request was fulfilled by the HTTP cache or the app's service worker.
 Waterfall. A visual breakdown of each request's activity.
Add or remove columns
Right-click the header of the Requests table and select a column name to hide or show it. The currently displayed columns have checkmarks next to them.

Add columns for response headers
To add a custom column to the Requests table, right-click the header of the Requests table and then select Response Headers > Manage Header Columns. The Manage Header Columns popup window opens. Click the Add custom header button, enter the custom header name, and then click Add.

Display the timing relationship of requests
Use the Waterfall to display the timing relationships of requests. The default organization of the Waterfall uses the start time of the requests. So, requests that are farther to the left started earlier than the requests that are farther to the right.
To see the different ways that you can sort the Waterfall, go to Sort by activity phase.
The Waterfall column of the Requests pane:

Display a preview of a response body
To preview the contents of an HTTP response body:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Preview tab:

Display a response body
To display the response body to a request:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Response tab:

Display HTTP headers
To display HTTP header data about a request:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Headers tab:

Display query string parameters
To display the query string parameters of an HTTP request in a human-readable format:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Payload tab:

To display the source of the query string parameters instead, click view source.
Display URL-encoded query string parameters
To display query string parameters in a human-readable format, but with encodings preserved:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Payload tab.
3. Click view URL-encoded.
Display cookies
To display the cookies sent in the HTTP header of a request:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Cookies tab:

Display the timing breakdown of a request
To display the timing breakdown of a request:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Timing tab.

For a faster way to access the data, see Preview a timing breakdown.
For more information about each of the phases that may be displayed in the Timing panel, see Timing breakdown phases explained.
Preview a timing breakdown
To display a preview of the timing breakdown of a request, in the Waterfall column of the Requests table, hover on the entry for the request.
Previewing the timing breakdown of a request:

To view the data without hovering, see the top of the present section, Display the timing breakdown of a request.
Timing breakdown phases explained
Each of these phases may appear in the Timing tab:
Queueing. The browser queues requests when any of the following are true There are higher priority requests.
There are already six TCP connections open for this origin, which is the limit.
Applies to HTTP/1.0 and HTTP/1.1 only.
The browser is briefly allocating space in the disk cache.
Stalled. The request could be stalled for any of the reasons described in Queueing.
DNS Lookup. The browser is resolving the IP address for the request.
Initial connection. The browser is establishing a connection, including TCP handshakes and retries and negotiating a Secure Socket Layer (SSL).
Proxy negotiation. The browser is negotiating the request with a proxy server.
Request sent. The request is being sent.
ServiceWorker Preparation. The browser is starting up the service worker.
Request to ServiceWorker. The request is being sent to the service worker.
Waiting (TTFB). The browser is waiting for the first byte of a response. TTFB stands for Time To First Byte. This timing includes one round trip of latency and the time the server took to prepare the response.
Content Download. The browser is receiving the response.
Receiving Push. The browser is receiving data for this response via HTTP/2 Server Push.
 Reading Push. The browser is reading the local data that was previously received.
Display initiators and dependencies
To display the initiators and dependencies of a request, hold Shift and hover on the request in the Requests table.

When the Requests table is ordered chronologically, if you hover on a line, the line preceding it displays a green request. The green request is the initiator of the dependency. If another green request is displayed on the line before that, that higher request is the initiator of the initiator. And so on.
Display load events
DevTools displays the timing of the DOMContentLoaded and load events in multiple places on the Network tool:

Display the total number of requests
The total number of requests is listed in the Summary pane, at the bottom of the Network tool.


Display the total download size
The total download size of requests is listed in the Summary pane, at the bottom of the Network tool.


To verify how large resources are after the browser uncompresses each item, see display the uncompressed size of a resource.
Display the stack trace that caused a request
After a JavaScript statement requests a resource, hover on the Initiator column to display the stack trace leading up to the request.

Display the uncompressed size of a resource
To see both the transferred size and the uncompressed size of a resource at the same time:
1. In the upper right within the Network tool, click the Network settings (gear) icon.
A row of checkboxes appears.
2. Turn on the Big request rows checkbox.
3. Examine the Size column in the Request table. The top value is the transferred size, and the bottom value is the size of the resource after the browser uncompresses it:

Export requests data
Save all network requests to a HAR file
To save all network requests to a HAR file:
1. In the Requests table, right-click a request and then select Save all as HAR with Content.

2. DevTools saves all requests that have occurred since you opened DevTools to the HAR file. You can't filter requests, and you can't save a single request.
Once you save a HAR file, you can import it back into DevTools for analysis by drag-anddropping the HAR file into the Requests table.
Copy one or more requests to the clipboard
Under the Name column of the Requests table, right-click a request, click Copy, and then select one of the following options:
ﾉ Expand table
NameDetailsCopy Link AddressCopy the URL of the request to the clipboard.Copy ResponseCopy the response body to the clipboard.Copy as Fetch Copy as cURLCopy the request as a cURL command.Copy All as Fetch Copy All as cURLCopy all requests as a chain of cURL commands.Copy All as HARCopy all requests as HAR data.
Copy formatted response JSON to the clipboard
To copy the formatted JSON data of a JSON response:
1. In the Request table, click the name of the request that led to a JSON response.
2. In the sidebar, select the Preview tab.
3. Right-click the first line of the formatted JSON response preview and then select Copy value.

You can now paste the value into any editor to review it.
Copy property values from network requests to your clipboard
To copy property values from network requests to your clipboard:
1. In the Request table, click the name of the request.
2. In the sidebar, select the Payload tab:
3. Expand one of the following sections.
Request payload (JSON)
Form Data
Query String Parameters
Request Headers
Response Headers
4. Right-click a value and then select Copy value. You can now paste the value into any editor to review it.
Change the layout of the Network panel
You can expand or collapse sections of the Network tool UI to focus important information.
Hide the Filters pane
By default, DevTools shows the Filters pane. To hide the Filters pane, select Filter ().

Big request rows
Use big request rows when you want more whitespace in your network requests table. Some columns also provide a little more information when using large rows. For example, the bottom value of the Size column is the uncompressed size of a request.
To enable large rows, select the Big request rows checkbox. An example of large request rows in the Requests pane:

Hide the Overview pane
By default, DevTools displays the Overview pane. To hide the Overview pane, clear the Show Overview checkbox.

See also
 Inspect network activity - step-by-step walkthrough and introduction to the Network tool.


Feedback
Was this page helpful? 

Network issues guide
Article • 11/07/2024
This guide shows you how to detect network issues or optimization opportunities in the Network panel of Microsoft Edge DevTools.
To learn the basics of the Network tool, see Inspect network activity.
Queued or stalled requests
Symptoms
Six requests are downloading simultaneously. After that, a series of requests are queued or stalled. Once one of the first six requests finishes, one of the requests in the queue starts.
In the Waterfall in the following figure, the first six requests for the edge-
iconx1024.msft.png asset start simultaneously. The subsequent requests are stalled until one of the original six finishes.

Causes
Too many requests are being made on a single domain. On HTTP/1.0 or HTTP/1.1 connections, Microsoft Edge allows a maximum of six simultaneous TCP connections per host.
Fixes
Implement domain sharding if you must use HTTP/1.0 or HTTP/1.1.
Use HTTP/2. Don't use domain sharding with HTTP/2.
Remove or defer unnecessary requests so that critical requests download earlier.
Slow Time To First Byte (TTFB)
Symptoms
A request spends a long time waiting to receive the first byte from the server.
In the following figure, the long, green bar in the Waterfall indicates that the request was waiting a long time. This was simulated using a profile to restrict network speed and add a delay.

Causes
The connection between the client and server is slow.
The server is slow to respond. Host the server locally to determine if it is the connection or server that is slow. If you still get a slow Time To First Byte (TTFB) when accessing a local server, then the server is slow.
Fixes
 If the connection is slow, consider hosting your content on a CDN or changing hosting providers.
 If the server is slow, consider optimizing database queries, implementing a cache, or modifying your server configuration.
Slow content download
Symptoms
A request takes a long time to download.
In the following figure, the long, blue bar in the Waterfall next to the png means it took a long time to download.

Causes
The connection between the client and server is slow.
A lot of content is being downloaded.

Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	 and is authored by Kayce Basques and Jonathan Garbee.
              This work is licensed under a Creative Commons Attribution 4.0 International License.

Feedback
Was this page helpful?  Yes  No

View the resource files that make up a webpage
Article • 12/07/2023
You can view the resources that make up a web page from within several tools (or panels) in Microsoft Edge DevTools, including:
Network tool
Sources tool
Application tool
Resources are the files that make up a webpage. Examples of resources include:
CSS files
JavaScript files
HTML files
Image files
See also:
Learn web development at Mozilla.org
Overview of DevTools
Open resource files from the Command Menu
When you know the name of a webpage's resource file that you want to inspect, the
Command Menu in DevTools provides a fast way of finding and opening that resource.
1. In a new window or tab, go to a webpage, such as the Accessibility-testing features demo. (The source files for that webpage are at MicrosoftEdge / Demos > devtools-a11y-testing.)
2. To open DevTools, right-click the webpage, and then select Inspect. Or press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
3. When DevTools has focus, press Ctrl+P (Windows, Linux) or Command+P (macOS). Or, click the Customize and control DevTools () button in DevTools and then select Open file. The Command Menu opens, displaying the Open File list:

4. If there's a greater-than (>) prompt, press Backspace to get to the Open File prompt.
5. Start typing the file name, and then press Enter when the correct file is highlighted in the autocomplete box, or select the file from the dropdown list:

Browse resource files in the Network tool
In the Network tool, you can inspect the resource files that make up the current webpage, such as .html, .css, .js, and image files. To learn how to get the details for a specific resource, see Inspect the details of the resource in Inspect network activity.
1. In a new window or tab, go to a webpage, such as the Inspect Network Activity Demo. (The source files for that webpage are at MicrosoftEdge / Demos > network-tutorial.)
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Network tab. If that tab isn't visible, click the More Tools () button.
4. Make sure the Record network log button in the upper left is selected (red).
5. Refresh the page. By default, the All filter button is selected, so all the webpage's resource files are listed in the Network tool, one row per resource file:


To learn more about how to show the network activity that's generated by the page resources, see Log network activity in the article Inspect network activity.
Browse resource files by file type by filtering in the Network tool
In the Network tool, when you view the list of resource files that make up the current webpage, you can filter which type of resources to list, such as only showing .css or .js files.
For example, to only display CSS files:
1. In a new window or tab, go to a webpage, such as the Inspect Network Activity Demo. (The source files for that webpage are at MicrosoftEdge / Demos > network-tutorial.)
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Network tab. If that tab isn't visible, click the More Tools () button.
4. Refresh the page. By default, the All filter button is selected, so all the webpage's resource files are listed in the Network tool.
5. Click CSS to filter and only display CSS files. Only the main.css file is listed:

For more information, see Filter by resource type in Inspect network activity.
Show resource files in the Network tool from other tools
In various tools that list resource files for the webpage, to inspect a resource file in the Network tool, right-click the resource file and then select Reveal in Network panel. You may need to first refresh the webpage while the Network tool is open.
For example, to go from the Page tab's resource list in the Sources tool to the Network tool:
1. In a new window or tab, go to a webpage, such as the Inspect Network Activity Demo. (The source files for that webpage are at MicrosoftEdge / Demos > network-tutorial.)
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Network tab. If that tab isn't visible, click the More Tools () button.
4. Press Ctrl+R to refresh the page. The received resource files that make up the webpage are now added as rows in the Network tab. The network-tutorial/ folder row represents the HTML page - in this case, index.html.
5. In DevTools, on the Activity Bar, click the Sources tab.
6. In the Page tab in the upper left, right-click a resource file, and then select Reveal in Network panel:

If the Reveal in Network panel menuitem isn't listed, go to the Network tool, make sure the Record network log button in the upper left is selected (red), and then refresh the page.
Browse resource files by folder in the Page tab of the Sources tool
You can use the Sources tool to view the webpage's resource files organized by directory, as follows:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.
3. In the Navigator pane in the upper left, select the Page tab.
4. By default, resource files are grouped by folder. If the resources are all listed alphabetically by file name instead, click the More options () button to the right of the Page tab, and then select Group by folder:

The Page tab contains various node types, including:
ﾉ Expand table
Page itemDescriptiontopThe main document browsing context, such as a browser tab, a browser window, or a frame. See Browsing context or <iframe>: The Inline Frame element.microsoftedge.github.ioThe domain. All resources nested under it come from that domain. For example, the full URL of the buttons.js file is https://microsoftedge.github.io/Demos/devtools-a11ytesting/buttons.js.Demos/devtools-a11ytesting, css, photosDirectories.devtools-a11y-testing/The main HTML document.buttons.jsA script to handle button presses on the page.5. Select a resource file to view it in the Editor of the Sources tool:

Browse resource files sorted by file name in the
Page tab of the Sources tool
By default, the Page tab in the Sources tool groups resource files by folder. To instead display all the resource files for each domain grouped together in a single alphabetized list:
1. In a new window or tab, go to a webpage, such as the Accessibility-testing features demo. (The source files for that webpage are at MicrosoftEdge / Demos > devtools-a11y-testing.)
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.
4. In the Navigator pane in the upper left, select the Page tab.
5. Click More options () and then clear the Group by folder option:

All the resource files for each domain (such as Top) are grouped together in a single alphabetized list:

Browse resource files by file type in the Frames tree in the Application tool
One way to view webpage resources grouped by file type is by using the Frames tree in the Application tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Application tab. If that tab isn't visible, click the More Tools () button.
The Application tool opens and by default shows the Manifest pane first:

3. Scroll down to the Frames pane and then expand the folder that you're interested in:

4. Select a resource to view it in the Application tool:



Feedback
Was this page helpful?  Yes  No
Service worker improvements
Article • 07/10/2024
The Network, Application, and Sources tools have been improved to help you work with service workers and the network requests that pass through each service worker.
The improvements simplify the following tasks:
Debug based on service worker timelines.
The start of a request and duration of the bootstrap.
Update to service worker registration.
The runtime of a request using the fetch event handler.
The runtime of all fetch events for loading a client.
Explore the runtime details of fetch event handlers, install event handlers, and activate event handlers.
 Step into and out of fetch event handler with page script information.
The improvements span the following tools:
 The Network tool. Select a network request that runs through a service worker and access the corresponding timeline of the service worker in the Timing tool.
The Application tool. To debug service workers, use the Service workers page.
The Sources tool. Access page script information when stepping into fetch event handlers.
Network

You can access the service worker debugging features in the Network tool in either of the following ways:
Directly in the Network tool.
Started in the Application tool.
Request routing
To make request routing easier to visualize, timelines now display the service worker start-up and the respondWith fetch events. To debug and visualize a network request that passed through a service worker:
1. Select the network request that went through a service worker.
2. Open the Timing tool.
Fetch events
To learn more about the respondWith fetch events, click the dropdown arrow to the left of the respondWith. To see more details about the Original Request and Response Received, click the corresponding dropdown arrows.
Application

Service worker update timeline
The Microsoft Edge DevTools team added a timeline in the Application tool to reflect the update lifecycle of the service worker. This timeline displays the installation and activation events. Each of the events have a corresponding dropdown arrow to give you more details.
Request routing and fetch events
You can now access the service worker timelines through the Network tool. This feature benefits performance, minimizes UI duplication, and creates a more comprehensive debugging experience.
1. Open the service worker that you're debugging.
2. Click the Network button to open the request routing experience.
3. Use the respondWith dropdown arrows for fetch event request and response information.
The Network tool displays the network requests that went through the service worker you are debugging. The automatic filter is a way to narrow down your exploration.
See also Application tool, to manage storage.
Sources

To find more stack information, set a break point in the fetch handler. The details lead to where the resource is requested in the page script.
When the debugger pauses inside a fetch handler, a combined stack information is displayed in the panel to the right. After that, you can move around in the stack frames.
Future work
The Microsoft Edge DevTools team plans to further develop the cache detail, and are investigating more ways to improve the service worker debugging experience for Progressive Web Application (PWA) developers.

Network conditions tool
Article • 12/07/2023
Use the Network conditions tool to do the following:

Disable the browser cache
See Disable the browser cache from the Network Conditions tool in Network features reference.
Set network throttling
See Emulate slow network connections from the Network Conditions tool in Network features reference.
Simulate other user agents
See:
Set the user agent string in Emulate mobile devices (Device Emulation).
Override the user agent string.
Set user agent client hints in Network features reference.
Set Content-Encodings, such as deflate, gzip, and br
Use the Accepted Content-Encodings option to configure which content-encoding HTTP header values are supported by the browser.
The content-encoding header informs the browser whether and how a given HTTP response was compressed. This content-encoding header is usually set to gzip, deflate, or br. Web servers usually set content-encoding headers when sending HTTP responses to a browser. To learn more about these values, see Content-Encoding	 at MDN.
See also
 Easier customization of User-Agent Client Hints in What's New in DevTools (Microsoft Edge 93).
 User-Agent Client Hints for devices in the Network conditions tab in What's New in DevTools (Microsoft Edge 92).
 New options to configure Content-Encodings in the Network conditions tool in What's New in DevTools (Microsoft Edge 91).
 Updated User-Agent strings in What's New in DevTools (Microsoft Edge 80).

Override the user agent string
Article • 11/07/2024
To override the user agent string from Microsoft Edge DevTools:
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.


3. In the User agent section, clear the Use browser default checkbox.

4. Select a user agent from the dropdown list, or enter a custom user agent.
5. Click User agent client hints to view and change these values as described in Network features reference.
See also


Feedback
Was this page helpful?  Yes  No

Compose and send web API requests using the Network Console tool
Article • 10/08/2024
Use the Network Console tool to send web API requests. For example, use the Network Console tool when you're developing and testing web APIs.
To test a URL:
1. To open DevTools, right-click a webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. On the main toolbar, click the More tools () button, and then select Network Console.
The Network Console tool opens:

3. Click Create a request.
4. Click the Hide Network Console navigator () button, to get more space.
5. In the Untitled Request text box, enter a URL to test, such as:
https://microsoftedge.github.io/Demos/devtools-a11y-testing/
6. In the GET dropdown list, select a REST method, such as GET, which is the default.
The REST methods include:
GET
HEAD
POST
PUT
PATCH
DELETE
OPTIONS
7. Optionally, in the Query section, enter key/value pairs in the Key and Value text boxes, such as ID and 123:

The Computed URL is updated as you enter key/value pairs.
8. Click the Send button. The bottom part of the Network Console tool displays the following tabs:
Preview
Body
Headers Cookies
Opening the Network Console tool from within the Network tool
To get to the Network Console tool by starting from the Network tool:
1. To open DevTools, right-click a webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. On the main toolbar, select the Network () tab. If that tab isn't visible, click the More tools () button, and then select Network.
3. Refresh the webpage. The Network tool displays the resources that are used to construct the webpage.
4. Right-click the network request that you want to change and resend, and then select Edit and Resend:

The Network Console tool opens in the Quick View panel at the bottom of DevTools.
5. Click the Hide Network Console navigator () button, to get more space.
6. Edit the network request information, and then click the Send button:

Save and export Collections, Environments, and environment variables
You can:
Save and export Collections.
Save and export Environments.
Edit and export sets of environment variables.
To define and save a new environment:
1. In DevTools, in the Network Console tool, make sure the left, navigator part of the tool is displayed. If needed, click the Show Network Console navigator () button.
2. In the Environments section, click the New () button.
3. In the text box that appears, enter a name for the new environment:

4. Select the format for the new environment:

See also:
 Save and export using the Network Console in What's New in DevTools (Microsoft
Edge 87)
 Postman.com - A platform for building and testing APIs.
See also
 View formatted JSON responses or files

Feedback
Was this page helpful? 

Network request blocking tool
Article • 12/07/2023
Use the Network request blocking tool to check how a webpage looks and behaves when some resources are unavailable, such as image files, JavaScript files, fonts, or CSS stylesheets. Use this tool to test blocking network requests to a specified URL pattern and see how a webpage behaves.
When a webpage depends on external resources that are hosted on other servers than the HTML webpage, sometimes those servers might be unresponsive or unavailable to some users. When this happens, some resources that your webpage depends on might not be retrieved by the web browser. It's important to check how your webpage behaves when external resources fail to load. Test whether the webpage handles missing resources gracefully, or appears broken to your users.
After you create blocked network requests and test the webpage, you can then edit or delete the blocked network requests.
Block a network request
To block a network request:
1. Go to the webpage for which you want to block network requests. For example, open the accessibility-testing demo page in a new tab or window. This webpage contains images that you'll block using the Network request blocking tool.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
3. In DevTools, on the Activity Bar, click the Network request blocking tab. If that tab isn't visible, click the More Tools () button.
4. Click the Add pattern () button. The Enable network request blocking checkbox is automatically selected.
5. In the Text pattern to block matching requests text box, type *.jpg. This blocks all requests for JPEG images.
You can do any of the following:
Type the full URL.
Type only the domain name, to block all requests from this domain.
Replace parts of the URL with *, for wildcard pattern matching.

6. Click the Add button:

7. Refresh the page. All JPEG images are blocked, so in the rendered webpage, each image is indicated as missing, by a "broken image" icon. The number of blocked network requests is indicated in the Network request blocking tool:

See also:
 Block requests in Inspect network activity.
Delete a blocked network request
To delete a specific network blocking request pattern:
 In the Network request blocking table, hover over a network blocking request pattern, and then click the Remove () button:

To delete all network blocking requests at once:
 In the toolbar, click the Remove all patterns () button.
Modify a blocked network request
To change an existing blocked network request:
 In the Network request blocking table, hover over a blocked network request, and then click Edit ():

Toggle network request blocking
To toggle network request blocking without having to delete and re-create all of the blocked network requests:
 In the toolbar, select or clear the Enable network request blocking checkbox:

Block a network request by using the Network tool
You can block network requests that are made by your webpage either by using the Network request blocking tool or by using the Network tool.
To block network requests by using the Network tool:
1. Go to the webpage for which you want to block network requests. For example, open the accessibility-testing demo page in a new tab or window.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, click the Network tab. If that tab isn't visible, click the More Tools () button.
4. In the table of network requests in the bottom pane, find the network request that you want to block.
5. Right-click the network request, and then click Block request URL to block this specific resource, or Block request domain to block all resources from the same domain:



Introduction to the Performance tool
Article • 09/06/2023
Runtime performance is how your page performs when it's running, as opposed to loading. The following tutorial teaches you how to use the DevTools Performance tool to analyze runtime performance.
The skills you learn in this tutorial are useful for analyzing loading, interactivity, and visual stability of your web content, which are also key indicators for Core Web Vitals. Each of the Core Web Vitals represents a distinct facet of the user experience, is measurable in the field, and reflects the real-world experience of a critical user-centric outcome. You can see these Core Web Vitals in the Performance tool.
See also:
 Optimize website speed using Lighthouse
Get started
In the following tutorial, you open DevTools on a "Sluggish Animation" demo page and use the Performance tool to find a performance bottleneck on the page.
1. Open the Sluggish Animation demo page in your InPrivate tab or window. To do that, right-click the link and then select Open link in InPrivate window. You'll profile this page, which shows a variable number of icons moving up and down. For more information about InPrivate, see Browse InPrivate in Microsoft Edge
Source code: MicrosoftEdge / Demos > devtools-performance-get-started
2. Press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS) to open DevTools:

For the rest of the screenshots, DevTools is shown undocked to a separate window.
Simulate a mobile CPU
Mobile devices have much less CPU power than desktops and laptops. Whenever you profile a page, use CPU Throttling to simulate how your page performs on mobile devices.
1. In DevTools, open the Performance tool.
2. Click Capture settings (). DevTools reveals settings related to how it captures performance metrics.
3. For CPU, select 4x slowdown. DevTools throttles your CPU so that it's 4 times slower than usual.

If you want to ensure that pages work well on low-end mobile devices, set CPU to 6x slowdown.
Set up the demo
The following section lets you customize the demo to make sure that your experience is relatively consistent with the screenshots and descriptions.
1. Click the Add elements button until the blue icons move noticeably slower than before. On a high-end machine, you can click it about 20 times.
2. Click Optimized. The blue icons should move faster and more smoothly.
3. To better display a difference between the optimized and unoptimized versions, click the Remove elements button a few times and try again. If you add too many blue icons, you could max out the CPU, and then you might not observe a major difference in the results for the two versions.
4. Click Slow. The blue icons move slower and with more sluggishness again.
Record runtime performance
When you ran the optimized version of the page, the blue icons move faster. Why is that? Both versions are supposed to move the icons the same amount of space in the same amount of time. Take a recording in the Performance tool to learn how to detect the performance bottleneck in the unoptimized version.
1. In DevTools, click Record (). DevTools captures performance metrics as the page runs.

2. Wait a few seconds.
3. Click Stop. DevTools stops recording, processes the data, then displays the results in the Performance tool.

These performance results show an overwhelming amount of data, but it will all make more sense shortly.
Analyze the results
Once you have a recording of the page's performance, you can assess the page's performance and find the cause of any performance issues.
1. The CPU chart is displayed along the top. The colors in the CPU chart correspond to the colors in the Summary panel, at the bottom of the Performance tool. The CPU chart shows that these regions make up a large area, meaning that the CPU was maxed out during the recording. Whenever the CPU is maxed out for long periods, that's an indicator that the page is not performing well.

2. Hover over the CPU or NET charts. DevTools shows a screenshot of the page at that point in time. Move your mouse left and right to replay the recording. The action is called scrubbing, and it's useful for manually analyzing the progression of the performance recording.

Bonus: Open the Frame Rendering Stats overlay
Another handy tool is the Frame Rendering Stats overlay, which provides real-time estimates for FPS as the page runs. The Frame Rendering Stats overlay is not required for this tutorial but may provide helpful insight.
1. In DevTools, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
2. Start typing Rendering in the Command Menu and click Show Rendering.
3. In the Rendering tool, turn on Frame Rendering Stats. A new overlay appears in the top-left of your webpage.

4. When you are done reviewing the FPS data, clear the Frame Rendering Stats checkbox to hide the overlay.
Find the bottleneck
After you verified that the animation isn't performing well, the next step is to answer the question "why?"
1. When no events are selected, the Summary panel shows you a breakdown of activity. The page spent most of the time rendering. Since performance is the art of doing less work, your goal is to reduce the amount of time spent doing rendering work.

2. Expand the Main section. DevTools shows you a flame chart of activity on the main thread, over time. The x-axis represents the recording, over time. Each bar represents an event. A wider bar means that event took longer. The y-axis represents the call stack. When events are stacked on top of each other, it means the upper events caused the lower events.

3. There is a lot of data in the recording. To zoom into a portion of the recording, click and drag in the Overview area toward the top of the Performance tool. The Overview area includes the CPU and NET charts (indicated on the right). The Main section and Summary panel only display information for the selected portion of the recording.

Another way to change the selected area is to put focus on the Main section, click the background or an event, and then press:
W to zoom in, S to zoom out.
A to move selection left, D to move selection right.
4. Click an Animation Frame Fired event.
When a red triangle is displayed at the top right of an event, it's a warning that there might be an issue related to the event. The Animation Frame Fired event occurs whenever a requestAnimationFrame() callback is run.
The Summary panel displays information about that event:

5. Click the Reveal link. DevTools highlights the event that initiated the Animation Frame Fired event.
6. Click the app.js:125 link. The relevant line of source code is displayed in the Sources tool.
7. Zoom in on the Animation Frame Fired event and its child events, by using the mouse wheel or trackpad. Or, press W.
You can now see the events that occur when a single frame of the animation is rendered. The update function is called, which, in turn, calls the updateSlow function, which triggers many Recalculate Style and Layout events:

8. Click one of the purple Layout events. DevTools provides more information about the event in the Summary panel. There's a warning about "forced reflows" (relayout).
9. In the Summary panel, click the app.js:104 link under Layout Forced. DevTools takes you to the line of code that forced the layout in the Sources tool:

The problem with the unoptimized code is that, in each animation frame, it changes the style for each icon, and then queries the position of each icon on the page. Because the styles changed, the browser doesn't know if each icon position changed, so it has to re-layout the icon in order to compute the new position.
Analyze the optimized version
Using the workflows and tools that you just learned, click Optimized on the demo webpage to turn on the optimized code, take another performance recording, and then analyze the results. From the improved framerate to the reduction in events in the flame chart in the Main section, the optimized version of the app does much less work, resulting in better performance.
Unoptimized version
Compare this snippet of JavaScript from the unoptimized version of the app:
JavaScript// Read the current position.
const currentPos = element.offsetTop;
// Read the direction. const direction = element.dataset.dir;
// Calculate the next position. let nextPos = direction === 'up' ? currentPos - SPEED : currentPos + SPEED;
// If the new position is out of bounds, reset it.
if (nextPos < 0) {   nextPos = 0;
} else if (nextPos > canvas.offsetHeight) {   nextPos = canvas.offsetHeight;
}
// Set the new position on the element. element.style.top = `${nextPos}px`;
// Switch the direction if needed.
if (element.offsetTop === 0) {   element.dataset.dir = 'down';
} else if (element.offsetTop === canvas.offsetHeight) {   element.dataset.dir = 'up';
}The above code snippet runs on every frame of the browser rendering loop, for each blue icon on the page. The element variable references a single blue icon.
In this unoptimized version, we create a nextPos variable that's set to the current position of the icon, to which we add some distance. The current position of the icon is read by using element.offsetTop.
After making sure that the icon is still within the bounds of the page, we set its new position by using element.style.top, which sets inline styles on the element.
Finally, we read element.offsetTop again, to adjust the direction of the icon.
Optimized version
The optimized code uses a different sequence of actions to do less work. Here is the same snippet of JavaScript from the optimized version of the app:
JavaScript// Read the current position. const currentPos = parseFloat(element.style.transform.match(/[0-9.]+/)[0]);
// Read the direction. const direction = element.dataset.dir;
// Calculate the next position.
let nextPos = direction === 'up' ? currentPos - (SPEED * 100 / canvasHeight) 
: currentPos + (SPEED * 100 / canvasHeight);
// If the new position is out of bounds, reset it, and switch the direction.
if (nextPos < 0) {   nextPos = 0;
  element.dataset.dir = 'down'; } else if (nextPos > 100) {   nextPos = 100;   element.dataset.dir = 'up';
}
// Set the new position on the element.
element.style.transform = `translateY(${nextPos}vh)`;In the optimized version, we first set the value of the nextPos variable by reading element.style.transform instead of using element.offsetTop. Using the element's inline
style is faster, because reading element.offsetTop forces the browser engine to know where all the elements are on the page, which requires the engine to recalculate the styles and the layout.
We then adjust the direction of the icon, but this time we don't read element.offsetTop again like done in the unoptimized version.
Finally, we set the new position of the icon, but this time we use element.style.transform instead of element.style.top. Using element.style.transform
is faster, because the CSS transform property can be applied by the browser rendering engine without having to recalculate the layout of the page. When using the transform property, the browser considers each icon as an individual layer, and then displays these layers in the correct positions by re-compositing the final image.
To learn more, see Use transform and opacity changes for animations.
Next steps
To get more comfortable with the Performance tool, practice profiling your pages and analyzing the results.
If you have any questions about your results, in the Activity Bar, select Help () > Feedback. Or, press Alt+Shift+I (Windows, Linux) or Option+Shift+I (macOS).
Or, file an issue on the MicrosoftEdge / DevTools repo.
In your feedback, include screenshots or links to reproducible pages, if possible.
There are many ways to improve runtime performance. This article focused on one particular animation bottleneck to give you a focused tour of the Performance tool, but it's only one of many bottlenecks you may encounter.


Feedback
Was this page helpful? 
Troubleshooting common performance issues
Article • 12/11/2024
Users expect interactive and smooth pages. Each stage in the pixel pipeline represents an opportunity to introduce jank (interruptions of rendering). Learn about tools and strategies to identify and fix common problems that slow down runtime performance.
Summary
 Don't write JavaScript that forces the browser to recalculate layout. Separate read and write functions, and perform reads first.
Don't over-complicate your CSS. Use less CSS and keep your CSS selectors simple.
Avoid layout as much as possible. Choose CSS that doesn't trigger layout at all.
Painting may take up more time than any other rendering activity. Watch out for paint bottlenecks.
JavaScript
JavaScript calculations, especially ones that trigger extensive visual changes, may stall application performance. Don't let badly timed or long-running JavaScript interfere with user interactions.
JavaScript: Tools
Take a recording in the Performance tool and look for suspiciously long Evaluate Script events.
If you notice quite a bit of jank (interruptions of rendering) in your JavaScript, you may need to take your analysis to the next level and collect a JavaScript CPU profile. CPU profiles show where runtime is spent within the functions of your page. Learn how to create CPU profiles in Speed up JavaScript runtime ("Allocation sampling" profiling type).
JavaScript: Problems
The following are common JavaScript problems and potential solutions.
ﾉ Expand table
ProblemExampleSolutionExpensive input handlers affecting response or animation.Touch, parallax scrolling.Let the browser handle touch and scrolls, or bind the listener as late as possible. See Expensive Input Handlers in The Runtime Performance Checklist by Paul Lewis.Badly timed JavaScript affecting response, animation, load.User scrolls right after page load, setTimeout / setInterval.Optimize JavaScript runtime: use requestAnimationFrame, spread DOM
manipulation over frames, use Web Workers; see Using Web Workers	.Long-running JavaScript affecting response.The DOMContentLoaded
event stalls, because it's swamped with JavaScript work.Move pure computational work to Web Workers; see Using Web Workers. If you need DOM access, use requestAnimationFrame.Garbage-y scripts affecting response or animation.Garbage collection may happen anywhere.Write less garbage-y scripts. See Garbage Collection in Animations in The Runtime Performance Checklist by Paul Lewis.Style
Style changes are costly, especially if those changes affect more than one element in the DOM. Any time you apply styles to an element, the browser figures out the impact on all related elements, recalculates the layout, and repaints.
Style: Tools
Take a recording in the Performance tool. Check the recording for large Recalculate Style events (displayed in purple).
Select a Recalculate Style event to view more information about it in the Details pane. If the style changes are taking a long time, that is a performance hit. If the style calculations are affecting a large number of elements, that is another area with room for improvement.
To reduce the impact of Recalculate Style events, minimize use of CSS properties that trigger layout, paint, and composite. These properties have the greatest impact on rendering performance. For more information, see Stick to Compositor-Only Properties and Manage Layer Count
Style: Problems
The following table describes some common style problems and potential solutions.
ﾉ Expand table
ProblemExampleSolutionExpensive style calculations affecting response or animation.Any CSS property that changes the geometry of an element, like the width, height, or position; the browser checks all other elements and recalculates the layout.Avoid CSS that triggers layoutsComplex selectors affecting response or animation.Nested selectors force the browser to know everything about all the other elements, including parents and children.Reference an element in your CSS with just a class.Layout
Layout (or reflow in Firefox) is the process by which the browser calculates the positions and sizes of all the elements on a page. The layout model of the web means that one element may affect others; for example, the width of the <body> element typically affects the widths of any child elements, and so on, all the way up and down the tree.
The process may be quite involved for the browser.
As a general rule of thumb, if you ask for a geometric value back from the DOM before a frame is complete, you are going to find yourself with "forced synchronous layouts", which may be a big performance bottleneck if repeated frequently or performed for a large DOM tree.
Layout: Tools
The Performance pane identifies when a page causes forced synchronous layouts. These

"Layout thrashing" is a repetition of forced synchronous layout conditions. This occurs when JavaScript writes and reads from the DOM repeatedly, which forces the browser to recalculate the layout over and over. To identify layout thrashing, look for a pattern of multiple forced synchronous layout warnings. See the previous figure.
Layout: Problems
The following table describes some common layout problems and potential solutions.
ﾉ Expand table
ProblemExampleSolutionForced synchronous layout affecting response or animation.Forcing the browser to perform layout earlier in the pixel pipeline, resulting in repeating steps in the rendering process.Batch your style reads first, then do any writes.Layout thrashing affecting response or animation.A loop that puts the browser into a read-write-read-write cycle, forcing the browser to recalculate layout over and over again.Automatically batch readwrite operations using FastDom library.Paint and composite
Paint is the process of filling in pixels. It is often the most costly part of the rendering process. If you noticed that your page isn't working as designed in any way, it is likely that you have paint problems.
Compositing is where the painted parts of the page are put together for displaying on screen. For the most part, if you stick to compositor-only properties and avoid paint altogether, you should notice a major improvement in performance, but you need to watch out for excessive layer counts.
Paint and composite: Tools
To find out how long painting takes, or how often painting occurs:
1. In DevTools, in the Performance tool, click the Capture settings () button, and then select the Enable advanced rendering instrumentation checkbox.
2. Take a recording.
If most of your rendering time is spent painting, you have paint problems. For more information, see Turn on advanced rendering instrumentation in Performance features reference.
Paint and composite: Problems
The following table describes some common paint and composite problems and potential solutions.
ﾉ Expand table
ProblemExampleSolutionPaint storms affecting response or animation.Big paint areas or expensive paints affecting response or animation.Avoid paint, promote elements that are moving to their own layer, use transforms and opacity.Layer explosions affecting animations.Overpromotion of too many elements with translateZ(0) greatly affects animation performance.Promote to layers sparingly, and only when you know it offers tangible improvements.

Feedback
Was this page helpful? 
Optimize website speed using Lighthouse
Article • 03/28/2023
This tutorial teaches you how to use Lighthouse and other tools in DevTools to find ways to make your websites load faster.
The Lighthouse tool provides links to content that's hosted on third-party websites. Microsoft isn't responsible for and has no control over the content of these sites and any data that may be collected.
Prerequisites
Install Visual Studio Code to edit source code.
Install Node.js to use it as a local web server.
Introduction
In this tutorial, you improve the performance of Margie's travel, a fictitious travel website that contains travel images, text descriptions, a few JavaScript-based user interactions, and an interactive map.
The source files for the website are at MicrosoftEdge / Demos > travel-site.
Step 1: Set up the website locally
First, set up the website locally, so that you can make changes to it later:
1. Get the website's source code locally: Download or clone the Demos repo.
2. Open the folder you just downloaded or cloned in Visual Studio Code.
3. In Visual Studio Code, select View > Terminal. Or, press Ctrl+`.
Visual Studio Code displays the source files in the Explorer sidebar, and displays the Terminal:

This local web server will be stopped when you close Visual Studio Code.

Step 2: Audit the site
Whenever you set out to improve the load performance of a site, always start with an audit.
The audit has two important functions:
It creates a baseline for you to measure subsequent changes against.
It gives you actionable tips on what changes improve performance the most.
Establish a baseline
The baseline is a record of how the site performed before you made any performance improvements.
1. In Microsoft Edge, open DevTools by right-clicking the webpage, and then selecting Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
2. In DevTools, on the main toolbar, select the Lighthouse tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. Select the Performance category, and clear all the other categories. For now, keep the other default options. The options are:
 Mode: To run tests during the load of the webpage, set this option to
Navigation (default). To run tests during a period of time, set the option to Timespan. To run tests on the webpage as it appears now, set the option to Snapshot.
 Device: To simulate a mobile user agent string and a mobile viewport, set this option to Mobile. To test the webpage without any simulation, set this option to Desktop.
 Categories: this option allows you to run only a subset of the tests available in Lighthouse.
4. Click Analyze page load:

5. After 10 to 30 seconds, a report of the performance of the site appears:

Handling report errors
If the Lighthouse report shows errors, try running Lighthouse again from an InPrivate window, with no other tabs open. Running Lighthouse from an InPrivate window ensures that the auditing process runs without interference.

To open an InPrivate window:
1. Click the Settings and more (...) button in the Microsoft Edge toolbar (above the DevTools toolbar).
2. Click New InPrivate window.
3. Establish a new baseline in Lighthouse:

Understand your report
Overall performance score
The number at the top of your report is the overall performance score for the webpage. Later, as you make changes to the code, the number displayed should increase. A higher score means better performance.

Metrics
The Metrics section provides quantitative measurements of the performance of the webpage:

Each metric provides insight into a different aspect of the performance. For example:
 First Contentful Paint indicates when content first appears on the screen. This is an important milestone in the user's perception of the page load.
 Time To Interactive marks the point at which the rendered page is ready to handle user interactions.
Click Expand view to display a description for each metric. Then click Learn More to read documentation about it:

Screenshots
Below the Metrics section is a collection of screenshots that show you how the page looked while it was loading:

Opportunities
The Opportunities section provides specific tips on how to improve the load performance of this particular webpage:

Click an opportunity to display more information about it, and then click Learn more to read about why an opportunity is important, and specific recommendations on how to fix it:

Diagnostics
The Diagnostics section provides more information about factors that contribute to the load time of the page:

Passed audits
The Passed audits section shows you what the site is doing correctly. Click Show to expand the section:

Step 3: Experiment
The Opportunities section of your report gives you tips on how to improve the performance of the webpage. In this section, you implement the recommended changes to the code base, auditing the site again after each change to measure how that change affects site speed.
Resize images
Your report indicates that serving appropriately sized images is one of the top opportunities for improving the performance of the page. Resizing images helps reduce the size of the network payload. If your user is viewing your images on a mobile device screen that is 500 pixels wide, there's really no point in sending a 1500-pixel-wide image. Ideally, you send a 500-pixel-wide image, at most.
In the Opportunities section of your report, click Properly size images to display which images to resize. Lighthouse lists four .jpg files that you can resize to improve load time:

Before resizing these images, verify the amount of data the server must send to the browser to display these images:
1. Open the Network tool.
If the tool is empty, refresh the page.
2. In the Filter text box, type .jpg to filter the list of requests and only show the four images.
To learn more about filtering requests in the Network tool, see Filter requests in Network features reference.
3. Check the bottom toolbar in the Network tool to verify the amount of data transferred because of the images:

The bottom toolbar shows that the four images contribute 16.4 MB of the total
17.3 MB of data transferred for this webpage.
Next, resize the images and run a new audit:
1. In Visual Studio Code, open the /travel-site/assets/img/optimized/ folder in the
Explorer, which contains a copy of the four images that are displayed on the webpage, but already optimized for you. These images are 1000 pixels wide, and they use the more optimized .webp format.
Resizing images depends on your operating system. For example, to resize images on Windows, you can use PowerToys. To learn more, see Image Resizer utility.
2. Open the /travel-site/index.html file and replace the four image paths as follows:
Replace the four instances of assets/img/ in the file with assets/img/optimized.
Replace the four instances of .jpg in the file with .webp.
3. In Lighthouse, click Run an audit (	) to go back to the main Lighthouse page without losing your baseline report.
4. Click Analyze page load again to see how the change affects load performance:

Your score increased from 18 to 26. To verify how much data you saved, use the Network tool like you did before:

Now, the images on the webpage only require transferring 360 KB of data, instead of
16.4 MB.
Automatically resize images
For a small app, doing a one-off resize like this might be good enough. But for a large app, consider these strategies for managing images:
Automatically resize images during your build process.
Create multiple sizes of each image during the build process and then use srcset in your code. At runtime, the browser takes care of choosing which size is best for the device. To learn more, see Responsive images at web.dev.
Use an image CDN that lets you dynamically resize an image when you request it.
At least, optimize each image. This can often create huge savings.
Optimization means running an image through a program that reduces the size of the image file. For more tips, see Optimize your images in Fast load times at web.dev.
Reduce unused JavaScript
Your latest Lighthouse report says that the webpage contains unused JavaScript code and that loading this code only when required would decrease the amount of data transferred when the page loads.
Click Reduce unused JavaScript to reveal the JavaScript files that contain the most unused code:
The reported JavaScript files are from the www.bing.com domain, which means the unused code comes from the Bing Map component used on the webpage. Scroll down on the Margie's travel demo website to see the map:

To confirm the amount of unused code and possibly find other resources that are unused, use the Coverage tool:
1. In DevTools, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu, start typing Coverage, and then select Show Coverage in the list.

2. In the Coverage tool, click Start instrumenting coverage and refresh the page (
). The Coverage tool provides an overview of how much of the JavaScript and CSS code that's loaded on the page was actually run.

The coverage report confirms that the Bing Map dependencies contain code that's unused when the page loads. The map on the demo website isn't visible when the page first loads. There's a good opportunity to improve performance by loading the Bing Map only when that section of the page becomes visible to users.
Use the Intersection Observer API to detect when the map becomes visible to the user. The Intersection Observer API provides a way to observe changes in the intersection of a target element (the map, in this case) with the webpage's viewport. To learn more, see Intersection Observer API at MDN.

Below this line is another line that's responsible for configuring and loading the map in the right place: <script src="assets/map.js"></script>
2. Delete these two lines and add this new line instead: <script src="assets/map-on-

read through the code to understand how it loads and initializes the Bing Map component. Here is a snippet from that code along with a description of how it works:
JavaScriptconst MAP_CONTAINER_EL = document.querySelector('.place-discover-map');
const mapElIntersectionObserver = new IntersectionObserver(loadMapOnDemand); mapElIntersectionObserver.observe(MAP_CONTAINER_EL); let map = null;
function loadMapOnDemand(entries) {    if (map) {      return;
   }
   if (!entries.some(entry => entry.isIntersecting)) {      return;
   }
   const script = document.createElement('script');    script.type = 'text/javascript';    script.src = 'https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=Ap_eazGgpq5468v9MXr7Wu0zh30LQActgaT-tI_QxZQSmBd5qJxVKs_2B7NsqR4';    document.body.appendChild(script);
} function GetMap() { /* ... */ }The code initializes the mapElIntersectionObserver variable to a new IntersectionObserver object. This observer then starts observing the
MAP_CONTAINER_EL element, which is the element on the page that's meant to contain the map.
As the user scrolls, the observer's loadMapOnDemand callback function runs. This function doesn't do anything when the map already exists, or if the map container element doesn't intersect the current viewport.
If the user scrolls to a point where the map container element becomes visible in the viewport, and if the map isn't initialized yet, the code creates a new script element, sets its src attribute to the Bing Map API, and inserts the script into the page.
The rest of the map-on-demand.js file is the same as the map.js file. As soon as the Bing Map API loads, the GetMap function runs. GetMap configures and displays the map in the container element.
4. Save your changes in Visual Studio Code, then refresh the webpage in Microsoft Edge, and run a new audit in the Lighthouse tool to see how your changes affect the load performance:

Your Lighthouse score is now at 31, which is an improvement from before, but there are more things to optimize.
Eliminate render-blocking resources
The next opportunity displayed in the Opportunities section of the Lighthouse tool is related to eliminating render-blocking resources.
A render-blocking resource is an external JavaScript or CSS file that the browser must download, parse, and run before it displays the page. The more render-blocking resources need to be processed when a webpage loads, the longer the webpage needs, to start appearing in the browser. Try to only run the core CSS and JavaScript code that's required to display the initial state of the page properly.
The first task, then, is to find code that you don't need to run on page load.
1. Click Eliminate render-blocking resources to display the resources that are blocking:

Lighthouse displays a list of the stylesheets that the demo webpage uses, such as:
base.css, home.css, and map.css.
2. Open the Coverage tool again: press Ctrl+Shift+P (Windows, Linux) or
Command+Shift+P (macOS), type Coverage, and then select Show Coverage.
3. Click Start instrumenting coverage and refresh the page () to display the coverage report, and then type css in the URL filter field to only display the CSS files:

The report shows that the contact-form.css and gallery.css files aren't used at all. They both have 100% unused bytes.
4. Click the contact-form.css file in the report. DevTools opens the file in the Sources tool. If a line of code ran, a blue bar appears next to it. A red bar means the line of code didn't run, and is definitely not needed on load of the webpage.

Only red bars are displayed in this source file, which means that the webpage doesn't need this file at all.
Now, remove the references to these files from the code:
1. In Visual Studio Code, open the /travel-site/index.html file.
2. Near the top of the file, find the list of <link> tags that load the stylesheets on the page.
3. Delete the two lines of code that load the contact-form.css and gallery.css files:

4. Save your changes in Visual Studio Code, then refresh the webpage in Microsoft Edge, and run a new audit in the Lighthouse tool again to see how your changes affect the load performance.
Automatically remove non-critical CSS
In the previous step, your score improved slightly, but Lighthouse still flags other CSS files as blocking the initial render of the page.
The webpage uses the remaining CSS files so you can't remove them. However, it's possible to split them in two groups:
 Critical CSS code that needs to block the rendering of the webpage because it visually impacts the style and layout of the part of the webpage that users see when it loads.
For example, the title on the webpage uses the header h1 CSS rule in the /travelsite/assets/base.css file.
Non-critical CSS code that's used to render parts of the page that aren't visible when the page loads.
For example, the /travel-site/assets/desktop.css file is only needed when the viewport is larger than 665px.
To automatically split your CSS code this way, you can use the Critical tool. To learn more, see the Critical project repo.
You can then load your non-critical CSS code in a way that doesn't block the initial render of the page. To learn more, see Defer non-critical CSS at web.dev.
It's also good to minify your CSS code and remove unneeded whitespace characters and comments. To learn more, see Minify CSS at web.dev.
Reduce layout shift by setting explicit width and height on images
In your Lighthouse report, the Diagnostics section suggests defining explicit width and height for image elements. Click on Image elements do not have explicit width and
height to display more information:
The report says that the image at the top of the webpage doesn't have explicit width and height attributes, which can cause layout shifts.
Layout shifts occur when portions of a webpage initially appear in one place but then move to another position during the load of the page. For example, when an image loads, the browser doesn't know how much space to reserve for it until the image is fully loaded.
To prevent layout shifts caused by loading images on a webpage, do either of the following:
Define each image's width and height attributes in the HTML code.
Reserve the space in CSS by using the aspect-ratio CSS property.
To learn more, see Images without dimensions in Optimize Cumulative Layout Shift at web.dev.
In the following steps, you use the aspect-ratio CSS property to avoid layout shifts:
1. In Visual Studio Code, open the /travel-site/assets/home.css file, and then search for the CSS rule that has the .hero-image img selector.
2. Modify the CSS rule so it looks like this:
css.hero-image img {
  width: calc(100% + 2 * var(--main-margin));   position: relative;
  left: calc(-1 * var(--main-margin));   aspect-ratio: 1.5;   object-fit: cover;
}Before this change, the CSS rule already contained a width property, so the browser knew how much horizontal space to reserve for the image. By adding the aspect-ratio property, you also tell the browser how much vertical space to
reserve. By adding the object-fit property, you avoid distorting the image if its CSS dimensions don't match the actual image file's dimensions.
3. Open the /travel-site/assets/desktop.css file, and then search for the CSS rule that has the same .hero-image img selector.
The desktop.css file is used only when the viewport is larger than 665px, for when the webpage is displayed on a large screen, for example when used on a laptop computer.
4. Modify the CSS rule so it looks like this:
css.hero-image img {     width: 100%;     position: static;     aspect-ratio: 2.5;     object-fit: cover;
}This time, the CSS rule already had a width and object-fit defined. But instead of defining a max-height for the image, you use the aspect-ratio property to make sure the browser knows exactly how much space to reserve for the image on desktop devices.
5. Save your changes in Visual Studio Code, then refresh the webpage in Microsoft Edge, and run a new audit in the Lighthouse tool to see how your changes affect the load performance:
Your score is now up to 37, but more importantly the Cumulative Layout Shift score is down to 0, indicating that there are no more shifts in the layout as the page loads.

Do less work in the main thread
Your latest report shows high Time to Interactive and Total Blocking Time metric values, which means that there's still something on the webpage that takes a long time to run and prevents the page from being usable for several seconds.
Scroll down to the Diagnostics section which says to Minimize main-thread work and Reduce JavaScript execution time. The main thread is where the browser does most of the work that's needed to display a page, such as:
 Parsing and running HTML.
Parsing and applying CSS to DOM elements.
Running JavaScript.
In this case, it looks like the biggest bottleneck is that the page runs too much JavaScript code on page load.
Use the Performance tool to analyze what work the main thread is doing while the page loads, and find ways to defer or remove unnecessary work:
1. Open the Performance tool.
2. In the Performance tool, click Start profiling and reload the page (), and then click Stop once the page has fully loaded.
DevTools displays a visualization of all the work that the browser performed in order to load the page. This visualization is referred to as the trace:

The trace shows activity chronologically, from left to right. The CPU and NET charts at the top give you an overview of CPU and network activity. The light brown area in the CPU chart corresponds to a period of time when the browser was busy with scripting activity. This area is a clue that you may be able to speed up page load by doing less JavaScript work.

Investigate the trace to find ways to do less JavaScript work.
The Main section shows a chronological log of main thread activity, from left to right.
The y-axis (top to bottom) shows why events occurred.
For example, in the following figure, the browser spends most of the time in a Parse HTML event. As long as this event runs, the webpage isn't entirely displayed. This event caused a long Evaluate Script event, which corresponds to when the browser executes JavaScript code. The Evaluate Script event caused an (anonymous) function to run, which caused the initRatings function to run:

1. In Visual Studio Code, open the /travel-site/assets/rating.js file and read through the code.
The code in this file is responsible for displaying five customer reviews on the webpage. Each review has a rating consisting of several stars, a quote, and an author. These reviews come from a server-side API used in the getRatings function. The initRatings function creates DOM elements in the page for each review.
2. In the initRatings function, find a way to make the JavaScript code faster.
This webpage is just a demo, and a for loop was introduced to slow down the code. In practice, there are many ways for a JavaScript file like this one to cause slow page loads, such as:
Accessing the DOM too frequently.
Running heavy computation tasks.
Using large JavaScript libraries or frameworks.
3. Delete the for loop at the beginning of the initRatings function, save your changes, and reload the page in Microsoft Edge.
4. Run a new audit in the Lighthouse tool to see how your changes affect the load performance:

To learn more about how to analyze page performance, see Performance features reference).
Doing less work in the main thread, in the real world
The Performance tool is the most common way to understand what activity your webpage does as it loads, and to find ways to remove unnecessary activity.
If you prefer an approach that feels more like console.log(), the User Timing API enables you to arbitrarily mark up certain phases of your app lifecycle, in order to track how long each of those phases takes.
Webpages often load slowly when they use JavaScript for generating most of their user interfaces. To improve your webpage's performance, consider moving the code that creates your webpage's user interface to the server side, and delivering that code to the browser as HTML and CSS.
Summary
 Whenever you set out to optimize the load performance of a site, always start with an audit. The audit establishes a baseline, and gives you tips on how to improve.  Make one change at a time, and audit the webpage after each change in order to display how that isolated change affects performance.


Feedback
Was this page helpful? 
Performance features reference
Article • 10/23/2024
This page is a comprehensive reference of DevTools features that are related to analyzing performance.
For a step-by-step tutorial on how to analyze the performance of a page using the Performance tool, see Introduction to the Performance tool.
The images in this page show DevTools undocked into its own, dedicated window. To learn more about undocking DevTools, see Undock DevTools into a separate window in Change DevTools placement (Undock, Dock to bottom, Dock to left).
Open the Performance tool
To use the sections in this page, open the Performance tool in DevTools:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Performance tab. If that tab isn't visible, click the More tools () button.
Record performance
The sections below describe how to record the performance of a webpage in DevTools.
Record runtime performance
To analyze the performance of a webpage while it's running (rather than while it's loading):
1. Go to the webpage that you want to analyze, such as the Photo Gallery demo.
2. In DevTools, open the Performance tool.
3. Click the Record () button.

4. Interact with the page for a while. DevTools records all page activity that occurs as a result of your interactions.
5. Click Record again. Or, click Stop to stop recording.
The Performance tool displays the recording.
Record load performance
To analyze the performance of a webpage while it's loading (rather than while it's running):
1. Go to the webpage that you want to analyze, such as the Photo Gallery demo.
2. In DevTools, open the Performance tool.
3. Click the Refresh page () button:

DevTools records performance metrics while the page refreshes and then automatically stops the recording a couple seconds after the load finishes. Then, DevTools displays the recording and automatically zooms in on the portion of the recording where most of the activity occurred:

Capture screenshots while recording
To capture a screenshot of every frame while recording, select the Screenshots checkbox:

To learn how to interact with screenshots, see View a screenshot, below.
Force garbage collection while recording
To force garbage collection while you are recording a page, click the Collect garbage ( ) button:

Show recording settings
To expose more settings related to how DevTools captures performance recordings, in the Performance tool, click the Capture settings () button. Checkboxes and dropdown lists are displayed at the top of the Performance tool:

Disable JavaScript samples
By default, the Main section of a recording displays detailed call stacks of JavaScript functions that were called during the recording. To disable the JavaScript call stacks:
1. In the Performance tool, click the Capture settings () button.
2. Select the Disable JavaScript samples checkbox.
3. Take a recording of the page.
The following two figures show the difference between disabling and enabling JavaScript samples. The Main section of the recording is much shorter when JavaScript sampling is disabled, because the recording omits the JavaScript call stacks.
An example of a recording when JS samples are disabled:

An example of a recording when JS samples are enabled:

Throttle the network while recording
To throttle the network while recording:
1. In the Performance tool, click the Capture settings () button.
2. Set Network to the desired level of throttling.
Throttle the CPU while recording
To throttle the CPU while recording:
1. In the Performance tool, click the Capture settings () button.
2. Set CPU to the desired level of throttling.
Throttling is relative to the capabilities of your computer. For example, the 2x slowdown option makes your CPU operate twice as slow than normal. DevTools don't truly simulate the CPUs of mobile devices, because the architecture of mobile devices is very different from that of desktops and laptops.
Turn on advanced rendering instrumentation
To record more rendering information, enable advanced rendering instrumentation:
1. In the Performance tool, click the Capture settings () button.
2. Select the Enable advanced rendering instrumentation (slow) checkbox.
With advanced rendering instrumentation enabled, DevTools records more information about the rendering of the page, such as layer information, and CSS selector statistics.
The performance of the page may be affected.
For example, see View layers information, and View CSS selector statistics, below.
Save a recording
To save a recording as a file on your device, right-click the recording and then select Save profile:

Load a recording
To load a recording from a file, right-click in the Performance tool and then select Load profile:

You can right-click in an existing recording, or on the screen that's displayed in the Performance tool when there are no recordings.
Clear the previous recording
After making a recording, to remove that recording from the Performance tool, click the Clear recording () button:

Analyze a performance recording
After you record runtime performance or record load performance, the Performance tool displays a lot of data about the recording. Use the recorded data to analyze the performance of your webpage.
Select a portion of a recording
You can select a portion of a recording by using a mouse, keyboard, or trackpad.
Mouse
To select a portion of a recording by using the mouse:
 Drag your mouse left or right across the Overview. The Overview is the section that contains the CPU and NET charts:

To scroll a long flame chart in the Main section or in any of the neighboring sections, click and hold while dragging up and down. Drag left or right to move which portion of the recording is selected.
Keyboard
To select a portion of a recording by using the keyboard:
1. Select the background of the Main section, or select the background of a section that's next to the Main section, such as Interactions, Network, or GPU. This keyboard workflow only works when one of these sections is in focus.
2. Press W or S to zoom in or out. Press A or D to move left or right.
Trackpad
To select a portion of a recording by using a trackpad:
1. Hover over the Overview section or the Details section. The Overview section is the area containing the FPS, CPU, and NET charts. The Details section is the area containing the Main section and the Interactions section.
2. Using two fingers, swipe up to zoom out, or down to zoom in. Using two fingers, swipe left to move left, or right to move right.
Search activities
To open the search box at the bottom of the Performance tool:
1. Press Ctrl+F (Windows, Linux) or Command+F (macOS).
The search box appears at the bottom of the Performance tool:

2. Enter a query in the search box, such as "recalculate style", to find all activities that match that query.
The matching activities are highlighted in the Main section as you type, and the total number of matches appears in the search box. The first matching activity is selected, outlined in blue:

To navigate among the activities that match your query:
To select the next activity, press Enter or click the Next () button.
To select the previous activity, press Shift+Enter or click the Previous () button.
To modify the query settings:
To make the query case-sensitive, click the Case sensitive () button.
To use a regular expression in your query, click the Regex () button.
To hide the search box, click the Cancel button.
View main thread activity
Use the Main section to view the activity that occurred on the main thread of the page:

Select an event to view more information about it in the Summary tab. DevTools outlines the selected event:

DevTools represents main thread activity with a flame chart:

The x-axis represents the recording over time. The y-axis represents the call stack. An event that's near the top causes the events that are below it; for example, in the previous figure, an input event caused a Function Call, which ran an anonymous function that called filterByCamera and then populateGallery. The populateGallery function then made DOM changes by calling set innerHTML.
DevTools assigns scripts random colors. In the previous figure, function requests from a script are colored fuchsia (purple-pink). The darker yellow represents scripting activity, and the purple event represents rendering activity. These darker yellow and purple events are consistent across all recordings.
If you want to hide the detailed flame chart of JavaScript requests, see Disable JavaScript samples, above. When JavaScript samples are disabled, only high-level events are displayed, such as Event: input and Function Call from the previous figure.
View activities in a table
After recording a page, in addition to the Main section to analyze activities, DevTools also provides three tabular views for analyzing activities. Each view gives you a different perspective on the activities:
 To view the activities where the most time was directly spent, use the Bottom-Up tab.
 To view the root activities that cause the most work, use the Call Tree tab.
 To view the activities in the order in which they occurred during the recording, use the Event Log tab.
Root activities
Open the Activity Tabs Demo webpage in a new window or tab. The activity tabs are the Bottom-Up, Call Tree, and Event Log tabs at the bottom of the Performance tool.
These tabs display root activities.
Root activities are activities that cause the browser to do some work. For example, when you click a webpage, the browser runs an Event activity as the root activity. That Event activity may cause other activities to run, such as a handler.
In the flame chart of the Main section, root activities are at the top of the chart. In the Call Tree and Event Log tabs, root activities are the top-level items.
For an example of root activities, see The Call Tree tab, below.
The Bottom-Up tab
Open the Activity Tabs Demo webpage in a new window or tab.
Use the Bottom-Up tab to view which activities directly took up the most time in aggregate.
The Bottom-Up tab only displays activities during the selected portion of the recording:

To learn how to select a portion of a recording, see Select a portion of a recording, above.
In the Main section flame chart of the previous figure, almost all of the time was spent running the a, b, and c functions. The top activities in the Bottom-Up tab of the previous figure are also a, b, and c. In the Bottom-Up tab, the next most expensive activity is Minor GC.
The Self Time column represents the aggregated time spent directly in that activity, across all of the occurrences.
The Total Time column represents aggregated time spent in that activity or any of the children.
The Call Tree tab
Open the Activity Tabs Demo webpage in a new window or tab.
Use the Call Tree tab to view which root activities cause the most work.
The Call Tree tab only displays activities during the selected portion of the recording:

To learn how to select a portion of a recording, see Select a portion of a recording, above.
In the previous figure, the top-level items in the Activity column, such as Event Timing, are root activities. The nesting represents the call stack. For example, in the previous figure, Event Timing caused Event: mouseup, which caused Function Call, which cause (anonymous), and so on.
Self Time represents the time directly spent in that activity. Total Time represents the time spent in that activity or any of the children.
Click Self Time, Total Time, or Activity to sort the table by that column.
Use the Filter text box to filter events by activity name.
By default the Grouping menu is set to No Grouping. Use the Grouping menu to sort the activity table based on various criteria.
Click Show Heaviest Stack () to reveal another table to the right of the Activity table. Click on an activity to populate the Heaviest Stack table. The Heaviest Stack table displays which children of the selected activity took the longest time to run.
The Event Log tab
Use the Event Log tab to view activities in the order in which they occurred during the recording.
The Event Log tab only displays activities during the selected portion of the recording:

To learn how to select a portion of a recording, see Select a portion of a recording, above.
The Start Time column represents the point at which that activity started, relative to the start of the recording. For example, the start time of 175.7 ms for the selected item in the previous figure means that activity started 175.7 ms after the recording started.
The Self Time column represents the time spent directly in that activity.
The Total Time column represents time spent directly in that activity or in any of the children.
Click the Start Time, Self Time, or Total Time column heading, to sort the table by that column.
Use the Filter text box to filter activities by name.
Use the Duration menu to filter out any activities that took less than 1 ms or 15 ms. By default, the Duration menu is set to All, meaning that all activities are shown.
Clear the Loading, Scripting, Rendering, or Painting checkboxes to filter out all activities from those categories.
View GPU activity
View GPU activity in the GPU section of the Performance tool:

View interactions
Use the Interactions section to find and analyze user interactions that happened during the recording:

A red line at the bottom of an interaction represents time spent waiting for the main thread.
Click an interaction to view more information about it in the Summary tab.
Analyze frames per second (FPS)
DevTools provides two ways to analyze frames per second:
Use the Frames section to view how long a particular frame took.
Use the FPS meter for a realtime estimate of FPS as the page runs. See View frames per second in realtime with the FPS meter, below.
The Frames section
The Frames section tells you exactly how long a particular frame took.
Hover over a frame to view a tooltip with more information about it:

Select a frame to view more information about the frame in the Summary tab at the bottom of the Performance tool. DevTools outlines the selected frame in blue:

View network requests
Expand the Network section to view a waterfall of network requests that occurred during the recording:

Click on a request to view more information about it in the Summary tab:

Requests in the Network section are color-coded as follows:
Blue background: HTML request. Purple background: CSS request.
Dark yellow background: JS request.
Green background: image request.
Requests have squares in the top-left corner:
 A darker-blue square in the top-left of a request means it's a higher-priority request.
 A lighter-blue square means lower-priority.
For example, in the previous figure, the photo-gallery request, in the top left corner of the Network section is higher-priority.
Requests might have lines on the left and right sides, and their bars might be split into two colors. Here's what these lines and colors represent:
 The left line is everything up to the Connection Start group of events, inclusive. In other words, it's everything before Request Sent, exclusive.
The light portion of the bar is Request Sent and Waiting (TTFB).
The dark portion of the bar is Content Download.
The right line is essentially time spent waiting for the main thread. This isn't represented in the Timing tab.
View memory metrics
Select the Memory checkbox to view memory metrics in a performance recording:

DevTools displays a new Memory chart, above the Summary tab. There is also a new chart below the NET chart, called HEAP. The HEAP chart provides the same information as the JS Heap line in the Memory chart:

The colored lines on the chart map to the colored checkboxes above the chart. Clear a checkbox to hide that category from the chart.
The chart only displays the region of the recording that is currently selected. For example, in the previous figure, the Memory chart is only showing memory usage from around the 3600 ms mark to the 6200 ms mark.
See also:
 Visualize memory leaks (Performance tool: Memory checkbox), below.
View the duration of a portion of a recording
When analyzing a section like Network or Main, sometimes you need a more precise estimate of how long certain events took. Hold Shift, click and hold, and drag left or right to select a portion of the recording. At the bottom of your selection, DevTools shows how long that portion took:

View a screenshot
To learn how to turn on screenshots, see Capture screenshots while recording, above.
To view a screenshot of how the page looked during that moment of the recording, hover over the Overview. The Overview is the section that contains the CPU and NET charts:

You can also view screenshots by selecting a frame in the Frames section. DevTools displays a small version of the screenshot in the Summary tab:

To zoom in on the screenshot, click the thumbnail in the Summary tab.
View layers information
To view advanced layers information about a frame:
1. In the Performance tool, click the Capture settings () button, and then select the Enable advanced rendering instrumentation (slow) checkbox.
2. In the Frames section, select a frame. DevTools displays information about the layers in the Layers tab at the bottom of the Performance tool:

The Layers tab works like the Composited Layers tab in the 3D View tool. To learn how to interact with the Layers tab, see Navigate webpage layers, z-index, and DOM using the 3D View tool.
View CSS selector statistics
To view statistics about the selectors of the CSS rules that got recalculated during a performance recording:
 In the Performance tool, click the Capture settings () button, and then select the Enable advanced rendering instrumentation (slow) checkbox.
DevTools displays aggregate information about the selectors of the CSS rules that were recalculated during the recording in the Selector Stats tab:

1. In the Main section, select a Recalculate Style event. In the Selector Stats tab, DevTools displays information about the selectors of the CSS rules that were recalculated during that event.
View messages between windows, iframes, and dedicated workers
The DevTools experiment Timeline: Show postMessage dispatch and handling flows improves the Performance tool's Main section to help you quickly identify postMessage events and handlers, by distinguishing events that are triggered by the postMessage method from other events that are displayed in the Performance tool. This experiment helps you investigate performance issues that are related to posting messages across various threads of an application.
Without this experiment, events that are triggered by dispatching and handling messages between threads of an application appear as generic scripting function-call events. With this experiment enabled:
postMessage dispatch events appear as Schedule postMessage. postMessage handler events appear as On Message:
This experiment helps you investigate when a postMessage call occurred, and how long the message was queued before the postMessage handler starts. The dispatch events are linked to handler events by initiator arrows that appear when you click on either type of event:

To use this feature, in DevTools, select Customize and control DevTools () > Settings > Experiments, select the checkbox Timeline: Show postMessage dispatch and handling flows, click the Close (X) button, and then click the Reload DevTools button.
See also:
Performance recording event reference postMessage Trace Events demo (rendered) postMessage Trace Events demo (source code)
Analyze rendering performance with the
Rendering tool
Use the Rendering tool to help visualize the rendering performance of your page.
To open the Rendering tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, click the More tools () button.
3. Click Rendering in the dropdown menu. The Rendering tool appears:

View frames per second in realtime with the FPS meter
The FPS meter is an overlay that appears in the top-left corner of the rendered webpage. It provides a realtime estimate of FPS as the page runs. To open the FPS meter:
1. Open the Rendering tool. See Analyze rendering performance with the Rendering tool, above.
2. Select the Frame Rendering Stats checkbox. The FPS meter overlay appears in the rendered webpage:

View painting events in realtime with Paint Flashing
Use Paint Flashing to get a realtime view of all paint events on the page. Whenever a part of the page gets re-painted, DevTools outlines that section in green.
To turn on Paint Flashing:
1. Open the Rendering tool. See Analyze rendering performance with the Rendering tool, above.
2. Select the Paint Flashing checkbox. Green outlines appear in the rendered webpage:

View an overlay of layers with Layer Borders
To view an overlay of layer borders and tiles on top of the page:
1. Open the Rendering tool, as described in Analyze rendering performance with the Rendering tool, above.
2. Select the Layer Borders checkbox. Layer borders appear in the rendered webpage:

Find scroll performance issues in realtime
Use the Scrolling Performance Issues checkbox to identify elements of the page that have event listeners related to scrolling that may harm the performance of the page.
DevTools outlines the potentially problematic elements in teal.
To view scroll performance issues:
1. Open the Rendering tool, as described in Analyze rendering performance with the Rendering tool, above.
2. Select the Scrolling Performance Issues checkbox. Potentially problematic elements are outlined:

See also:
 Slow scroll rects (checkbox) in Navigate webpage layers, z-index, and DOM using the 3D View tool.
Disable local fonts
In the Rendering tool, use the Disable local fonts checkbox to emulate missing local() sources in @font-face rules.
For example, when the Rubik font is installed on your device and the @font-face src rule uses it as a local() font, Microsoft Edge uses the local font file from your device.
When Disable local fonts is selected, DevTools ignores the local() fonts and fetches each font from the network:

This feature is useful if you use two different copies of the same font during development, such as:
A local font for your design tools.
A web font for your code.
Use Disable local fonts to make it easier to:
Debug and measure loading performance and optimization of web fonts.
Verify accuracy of your CSS @font-face rules.
Discover differences between local versions installed on your device and a web font.
Visualize memory leaks (Performance tool: Memory checkbox)
As a starting point to investigate webpage memory usage, use the Performance tool's
Memory checkbox. (Or, Monitor memory use in realtime (Microsoft Edge Browser Task Manager).)
The Performance tool helps you visualize the memory use of a page over time.
1. In DevTools, open the Performance tool.
2. Select the Memory checkbox.
3. Make a recording, per Record performance, above.
It's a good practice to start and end your recording with a forced garbage collection. To force garbage collection, click the collect garbage  button while recording.
To demonstrate memory recordings, consider the following code:
JavaScriptvar x = []; function grow() {     for (var i = 0; i < 10000; i++) {         document.body.appendChild(document.createElement('div'));
    }
    x.push(new Array(1000000).join('x')); } document.getElementById('grow').addEventListener('click', grow);Every time that the button referenced in the code is clicked, 10,000 div nodes are appended to the document body, and a string of 1,000,000 x characters is pushed onto the x array. Running the previous code produces a recording in the Performance tool:
First, an explanation of the user interface. The HEAP graph in the Overview pane (below NET) represents the JS heap. Below the Overview pane is the Counter pane. The memory usage is broken down by JS heap (same as HEAP graph in the Overview pane), documents, DOM nodes, listeners, and GPU memory. Clear a checkbox to hide it from the graph.
Now, an analysis of the code compared with the previous figure. If you review the node counter (the green graph), it matches up cleanly with the code. The node count increases in discrete steps. You can presume that each increase in the node count is a call to grow().
The JS heap graph (the blue graph) is not as straightforward. In keeping with best practices, the first dip is actually a forced garbage collection (click the collect garbage button).
As the recording progresses, the JS heap size spikes are displayed. This is natural and expected: the JavaScript code is creating the DOM nodes on every button you click, and is doing a lot of work when it creates the string of one million characters.
The key thing here is the fact that the JS heap ends higher than it began (the
"beginning" here being the point after the forced garbage collection). In the real world, if you saw this pattern of increasing JS heap size or node size, it would potentially indicate a memory leak.


Feedback
Was this page helpful?  Yes  No
Performance recording event reference
Article • 04/22/2024
In the Performance tool, the Main section displays all events that are triggered while making a recording. Each event type is described below:
Loading events
Scripting events
Rendering events
Painting events
Properties common to all events
The following properties are common to all event types in the Performance tool's Main section. Additional properties that are specific to certain event types are listed in the subsequent sections below.
ﾉ Expand table
PropertyWhen is it shownAggregated timeFor events with nested events, the time taken by each category of events.Call StackFor events with child events, the time taken by each category of events.CPU timeHow much CPU time the recorded event took.DetailsOther details about the event.Duration (at timestamp)How long it took the event with all of its children to complete; timestamp is the time at which the event occurred, relative to when the recording started.Self timeHow long the event took without any of its children.Used Heap SizeAmount of memory being used by the application when the event was recorded, and the delta (+/-) change in used heap size since the last sampling.Loading events
The following events are in the Loading category.
ﾉ Expand table
EventDescriptionParse HTMLMicrosoft Edge ran the HTML parsing algorithm.Finish LoadingA network request completed.Receive DataData for a request was received. There are one or more Receive Data events.Receive ResponseThe initial HTTP response from a request.Send RequestA network request has been sent.Additional properties for Loading events
ﾉ Expand table
PropertyDescriptionResourceThe URL of the requested resource.PreviewPreview of the requested resource (images only).Request MethodHTTP method used for the request (GET or POST, for example).Status CodeHTTP response code.MIME TypeMIME type of the requested resource.Encoded Data LengthLength of requested resource in bytes.See also Properties common to all events, above.
Scripting events
The following events are in the Scripting category.
ﾉ Expand table
EventDescriptionAnimation Frame FiredA scheduled animation frame fired, and its callback handler invoked.Cancel Animation
FrameA scheduled animation frame was canceled.GC EventGarbage collection occurred.EventDescriptionDOMContentLoadedThe DOMContentLoaded event was fired by the browser. This event is fired when all of the DOM content of the page is loaded and parsed.Evaluate ScriptA script was evaluated.EventA JavaScript event (for example, mousedown, or key).Function CallA top-level JavaScript function call was made (only appears when browser enters JavaScript engine).Install TimerA timer was created with setInterval() or setTimeout().Request Animation
FrameA requestAnimationFrame() call scheduled a new frame.Remove TimerA previously created timer was cleared.TimeA script called console.time().Time EndA script called console.timeEnd().Timer FiredA timer fired that was scheduled with setInterval() or setTimeout().XHR Ready State
ChangeThe ready state of an XMLHTTPRequest changed.XHR LoadAn XMLHTTPRequest finished loading.Additional properties for Scripting events
ﾉ Expand table
PropertyDescriptionTimer IDThe timer ID.TimeoutThe timeout specified by the timer.RepeatsBoolean that specifies if the timer repeats.Function CallA function that was invoked.See also Properties common to all events, above.
Rendering events
The following events are in the Rendering category.
ﾉ Expand table
EventDescriptionInvalidate layoutThe page layout was invalidated by a DOM change.LayoutA page layout was completed.Recalculate styleMicrosoft Edge recalculated element styles.ScrollThe content of nested view was scrolled.Additional properties for Rendering events
ﾉ Expand table
PropertyDescriptionLayout invalidatedFor Layout records, the stack trace of the code that caused the layout to be invalidated.Nodes that need layoutFor Layout records, the number of nodes that were marked as needing layout before the relayout started. These are normally those nodes that were invalidated by developer code, plus a path upward to relayout root.Layout tree sizeFor Layout records, the total number of nodes under the relayout root (the node that Microsoft Edge starts the relayout).Layout scopePossible values are Partial (the re-layout boundary is a portion of the DOM) or Whole document.Elements affectedFor Recalculate style records, the number of elements affected by a style recalculation.Styles invalidatedFor Recalculate style records, provides the stack trace of the code that caused the style invalidation.See also Properties common to all events, above.
Painting events
The following events are in the Painting category.
ﾉ Expand table
EventDescriptionComposite
LayersThe composited image layers for the Microsoft Edge rendering engine.Image
DecodeAn image resource was decoded.Image ResizeAn image was resized from its native dimensions.PaintComposited layers were painted to a region of the display. Hovering over a Paint record highlights the region of the display that was updated.Additional properties for Painting events
ﾉ Expand table
PropertyDescriptionLocationFor Paint events, the x and y coordinates of the paint rectangle.DimensionsFor Paint events, the height and width of the painted region.See also Properties common to all events, above.


Feedback
Was this page helpful? 

Display original function names in performance profiles
Article • 06/14/2023
If your build process compiles and minifies your code and combines it into a single file, the names of the functions displayed in a performance profile might be hard to understand. Source maps map your compiled, minified code to your original source code files. The Performance tool can use source maps to map minified function names after a recording has been made, back to their original names found in your original code.
To learn more about how DevTools uses source maps, see Map the processed code to your original source code, for debugging.
To see your original function names in the flame chart in the Performance tool, use the Unminify () button.
Source mapping is used in DevTools to keep your client-side code readable and debuggable. By clicking the Unminify button in the Performance tool, you can use source maps to create an unminified version of the performance profile you recorded.
An example of a performance profile flame chart, with hard-to-read function names:

An example of a performance profile flame chart, with some more meaningful function names restored:

When recording a performance profile in the Performance tool, the Main section of the profile displays detailed flame charts of JavaScript functions that were called during the recording.
Ideally, in this flame chart view, you want to see the meaningful function names that are shown in your original source code. However, if your production code is compiled, minified, or bundled, the Performance tool initially displays the function names that are extracted from your transformed, production code. These production function names might be obscure and might not easily map to function names in your original source code.
To unminify a performance profile, so that some more meaningful function names are shown in addition to the minified identifiers, follow the steps below.
Step 1 - Set up source maps
Host your source maps side-by-side with your production code. When unminifying, the Performance tool expects to find your source maps along with your production code.
For details, see Map the processed code to your original source code, for debugging.
Step 2 - Record a performance profile
1. In the Performance tool, click the Record button, to record a performance profile for the page you want to analyze. For details, see Record runtime performance.

A performance profile is recorded, in the Performance tool.
2. In the Performance tool, click in the main area (the flame chart), and use the mouse wheel to zoom in. Click and drag left and right. Look at the function names in the flame chart.
The flame chart in the Performance tool shows minified function names, such as XI, Gi, d, o, an, c, co, and a from your production code:

Step 3 - Unminify the code
1. Click the Unminify () button:

In DevTools, a popup briefly appears, reading: Status: creating unminfied file. Then the Save As dialog opens. The default file name is a pattern starting with date and time like yymmddThhmmss, such as: Profile-20220307T164948-unminified.json. The default directory is the Downloads directory.
2. Select a file name and directory and then click the Save button.
The Performance tool creates a new version of the recorded performance profile, with some function names from the flame chart replaced by more meaningful function names by using your source maps. Some of the minified production names might still appear, because source maps don't always provide the necessary information for the Performance tool to map all function names.
Step 4 - Load the unminified profile
1. In the Performance tool, click the Load profile () icon button. Or, right-click a blank area of the Performance tool, and then select Load profile.

just downloaded. If needed, for details, see Load a recording in Performance features reference, and then continue below.
Some function names are now unminified. The unminified flame chart in the Performance tool now shows those functions labeled with more meaningful names taken from your source maps, such as useObserver (d), useQueuedForceUpdateBlock (o), trackDerivedFunction (an), initializeIconColorMap (c), getExtraToolControls (co), and isToggleEnabled (a).

See also
 Introduction to the Performance tool - An introduction to analyzing runtime performance in DevTools.
 Performance features reference, - A reference for many of the features offered in the Performance tool.

Analyze CSS selector performance during Recalculate Style events
Article • 05/15/2024
When your webpage has long-running Recalculate Style events, to identify which of your CSS selectors are taking up the most time and resulting in slow performance, use the Selector Stats tab in the Performance tool. The Selector Stats tab provides statistics about the CSS rule selectors that were involved in one or more Recalculate Style events within a performance recording.
The Performance tool highlights each long-running task with a red triangle in the upper right corner, to indicate work on the main thread that takes a long time to run and has slow performance:

In your performance recordings, some of these long-running tasks may be Recalculate Style events. A Recalculate Style event tracks the time it takes for the browser to do the following:
 Iterate through the DOM elements on a page, to find all of the CSS style rules that match a given element.
 Compute each element's actual style, based on the matching CSS style rules.
CSS styles need to be recalculated whenever the applicability of CSS rules may have changed, such as:
When elements are added to or removed from the DOM.
When an element's attributes are changed, such as the value of a class or id attribute.
 When user input occurs, such as a mouse move or a change of which element in a webpage has focus, which can affect :hover rules.
Record a performance trace with Selector Stats enabled
To view the statistics of your CSS rule selectors during long-running Recalculate Style events, first record a performance trace with the Selector Stats feature enabled. You enable the Selector Stats feature by selecting the Enable CSS selector stats checkbox, which displays the Selector Stats tab.
The Selector Stats feature isn't always enabled, because it adds more overhead to your performance recordings. You should only leave it turned on when you need to investigate the performance of Recalculate Style events and other rendering information.
To record a performance trace with selector statistics:
1. Open a webpage in a new window or tab, such as the Photo Gallery demo page.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Performance () tab. If that tab isn't visible, select More tools () > Performance.
4. In the Performance tool, click the Capture settings () button.
5. Select the Enable CSS selector stats checkbox:

6. Click the Record () button, and then run the scenario that you want to improve for your website or app.
7. Click the Stop button.
Next, view CSS selector statistics, as described in the sections below.
View CSS rule selector statistics for a single event
To view the statistics of the CSS rule selectors that are involved in a single Recalculate Style event:
1. Do the steps in Record a performance trace with Selector Stats enabled, above.
2. Find a Recalculate Style event in your performance recording and click it.
3. In the bottom section of the Performance tool, click the Selector Stats tab:

Table of CSS selectors in the Selector Stats tab
The Selector Stats tab in the Performance tool contains a table of CSS selectors. The table displays the following information for each CSS selector:
ﾉ Expand table
ColumnDescriptionElapsed (ms)The amount of time the browser spent matching this CSS selector. This time is given in milliseconds (ms), where 1 ms is 1/1000 of a second.Match AttemptsThe number of elements the browser engine attempted to match with this CSS selector.Match CountThe number of elements the browser engine matched with this CSS selector.% of slow-path non-matchesThe ratio of elements that didn't match with this CSS selector, to the elements that the browser engine attempted to match, and which required the browser engine to use less optimized code to match.SelectorThe CSS selector that was matched.Style SheetThe CSS style sheet that contains the CSS selector.When finished, in the Performance tool, click the Capture settings () button, and then clear the Enable CSS selector stats checkbox.
View CSS rule selector statistics for multiple events
To view aggregate statistics of the CSS rule selectors that are involved in multiple Recalculate Style events, copy multiple Selector Stats tables into a spreadsheet, as follows:
1. Do the steps in Record a performance trace with Selector Stats enabled, above.
2. Find the first Recalculate Style event you're interested in, and then click it.
3. In the bottom section of the Performance tool, click the Selector Stats tab.
4. Right-click the selector stats table, and then select Copy Table:

5. Paste the table into a spreadsheet, such as Microsoft Excel.
6. Repeat the previous steps with the other Recalculate Style events you're interested in.
When finished, in the Performance tool, click the Capture settings () button, and then clear the Enable CSS selector stats checkbox.
View aggregate CSS rule selector statistics for the full recording
To view aggregate statistics of the CSS rule selectors that are involved in the entire performance recording:
1. Do the steps in Record a performance trace with Selector Stats enabled, above.
2. Deselect any event that's selected in the performance recording, by clicking an empty area of the flame chart.
3. Select the entire recording range. To do this, double-click in the CPU chart at the top of the Performance tool or, using your mouse, hover over the flame chart and scroll up until the entire chart is displayed.
4. In the bottom section of the Performance tool, click the Selector Stats tab:

When finished, in the Performance tool, click the Capture settings () button, and then clear the Enable CSS selector stats checkbox.
Analyze CSS selector stats
To sort the data that's displayed in the Selector Stats table in ascending or descending order, click a column header. For example, to see which CSS selectors take up the most time, click the Elapsed (ms) column header:

To try to improve the performance of your web page, focus on the CSS selectors that:
took a long time to calculate (high Elapsed (ms) value), and which the browser attempted to match many times (high Match Attempts value),
 and which the browser didn't actually match many elements with (low Match Count value compared to the Match Attempts value),  and with a high percentage of slow-path non-matches.
For example, in the screenshot above:
The first CSS selector (.gallery .photo .meta ::selection) required the most time. The browser engine attempted to match this CSS selector 6017 times, but only matched 3234 elements.
 Out of the 2783 elements that didn't match, 78% of them required less optimized code to match.
Therefore, this CSS selector is a good candidate to try to improve.
Try to change your CSS selectors so they require less time to calculate, and match fewer elements on the page. How to improve your CSS selectors depends on your particular use case. Repeat the steps in the above "Record" and "View" sections, to confirm that your changes helped decrease the Recalculate Style event duration, in the Elapsed (ms) column.
See also
 View CSS selector costs in the Performance tool sidebar in What's New in DevTools (Microsoft Edge 131).
 Introduction to the Performance tool - An introduction to analyzing runtime performance in DevTools.
 Performance features reference - Covers many of the features in the Performance tool.

Feedback
Was this page helpful?  Yes  No

Measure runtime performance of a page using the Performance monitor tool
Article • 12/07/2023
Use the Performance monitor tool to get a real-time view of the runtime performance of a webpage.
The Performance monitor tool helps determine where performance problems come from. There are various reasons why a website might run slowly. This tool provides clues to understand whether the problems are related to causes such as the following:
High memory or CPU usage.
Too frequent layout and style calculations.
Too many DOM nodes and event listeners.
Open the Performance monitor tool
To open the Performance monitor tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Performance monitor tab. If that tab isn't visible, click the More Tools () button:

The Performance monitor shows graphs of various performance metrics that update in real time:

Select performance metrics to monitor
The Performance monitor tool shows three performance metrics by default, and additional metrics are available.
ﾉ Expand table
Performance metricDescriptionCPU usageThe percentage of CPU used by the web page. Shown by default.JS heap sizeThe amount of memory used by the JavaScript program on the page.
Shown by default.DOM NodesThe number of DOM nodes in the browser (across tabs). Shown by default.JS event listenersThe number of JavaScript event listeners in the browser (across tabs).DocumentsThe number of document objects in the browser (across tabs).Document FramesThe number of document frames in the browser (across tabs).Layouts / secThe number of times per second the browser engine constructs the layout of the page.Style recalcs / secThe number of times per second the browser engine calculates the CSS style of the page.To enable or disable any of the available performance metrics, click the labels in the sidebar:


Display or edit source files using the Quick source tool
Article • 07/09/2024
Use the Quick source tool to display or edit source files when using a tool other than the Sources tool.
The main place to view source files in the DevTools is within the Sources tool. But sometimes you need to access other tools, such as Elements or Console, while viewing or editing your source files. Use the Quick source tool, which by default opens in the Quick View panel at the bottom of DevTools.
See:
Displaying source files when using a different tool in Sources tool overview Step 4: Save a JavaScript change to disk in Edit files with Workspaces (Filesystem tab)

Record and replay user flows and measure performance
Article • 02/22/2024
Use the Recorder tool to record a series of steps in the browser window or tab where DevTools is opened, and then replay the steps automatically, while optionally also measuring performance.
When to use the Recorder tool
Use the Recorder tool when you want to speed up repetitive tasks by automatically replaying a series of user interactions in the browser.
The Recorder tool records user interactions, such as mouse clicks, keyboard input, and page navigation events, and lets you replay the interactions automatically. You can also use the Recorder tool to measure the runtime performance while replaying the recorded user interactions. The Recorder tool lets you record as many user flows as you want, and replay them as many times as you want.
For the rest of this article, we'll use the Recorder tool to automate adding tasks to the demo TODO app.
Open the Recorder tool
1. Open the TODO app in a new tab or window.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Recorder tab. If that tab isn't visible, click the More tools () button, and then select Recorder. The Recorder tool opens:

Record a user flow
To start recording a new user flow:
1. Click Create a new recording.
2. Under Recording name, enter a name for the recording, such as "Adding TODO tasks".
3. Click Start recording at the bottom of the Recorder tool:

4. In the rendered webpage, interact with the page. For example, enter "task 1" in the Add a task input box, and then press Enter. Repeat these steps multiple times.
A red circle appears next to the recording name, indicating that the recording is in progress. The Recorder tool records your interactions and displays them as a list of steps:

5. To stop the recording, at the bottom of the list of recorded interactions, click the End recording button.
The recording stops, and the circle next to the recording name turns blue, indicating that the recording is complete:

Record other user flows
To record a new user flow, after you've stopped the recording of the previous user flow:
1. Click the Create a new recording () button in the top-left corner of the Recorder tool:

2. Repeat the steps from Record a user flow, above.
Replay a user flow
You can replay user flows either from the list of recorded user flows, or when viewing the details of a given user flow.
 To view the list of recorded user flows, click the dropdown menu that's in the Recorder tool toolbar, at the top, and then select 2 recording(s). The label might show a different number of recordings, depending on how many recordings you've made.
 To view the details of a given user flow, click the dropdown list that's in the Recorder tool toolbar, at the top, and then click the name of a user flow.
Replay a user flow from the list of recordings
1. Click the Play recording button next to a recording:

2. Wait while the Recorder tool replays the previously recorded user interactions. An animation of the steps that are being replayed appears in the Recorder tool:

When the replay is complete, the animation stops, and the Recorder tool displays the recording's steps.
Replay a user flow from a recording
1. Click the Replay button in the top-right corner of the Recorder tool:

2. Wait while the Recorder tool replays the previously recorded user interactions. An animation of the steps that are being replayed appears in the Recorder tool:

When the replay is complete, the animation stops, and the Recorder tool displays the recording's steps.
Slowly replay a user flow to investigate issues
To see what's happening in the rendered page while the user interactions are being replayed, slow down the replay speed. By default, the Recorder tool replays user flows as fast as it can.
To slow down the replay speed:
 Click the dropdown arrow next to Replay in the top-right corner of the Recorder tool, and then select a speed from the dropdown menu, such as Slow, Very slow, or Extremely slow:

Pause while replaying a user flow, by using breakpoints
To inspect the rendered webpage at a specific point of the user flow, pause the replay by using a breakpoint.
To add a breakpoint to a user flow:
1. Next to the flow step at which to pause, click the Open step actions () button , and then select Add breakpoint:

2. To start the user flow, click Replay in the top-right corner of the Recorder tool.
The replay pauses when it reaches the step that has a breakpoint. The Continue and Execute one step buttons also become available in the toolbar:

3. Click the Execute one step button to execute the next step and pause again, or click the Continue button to continue the replay until the next breakpoint (or the end of the user flow) is reached.
Measure performance
To measure how fast a website runs while replaying a series of user interactions, use the Recorder tool. By recording a user flow once, you can replay the recording many times, while working on improving the runtime performance of the website.
1. To record a new user flow, follow the steps from Record a user flow.
2. To replay the user flow while measuring performance, click Performance panel in the top-right corner of the Recorder tool:

3. Wait while the Recorder tool replays the previously recorded user interactions.
The Performance tool opens, and displays a recording of the performance of the website while the user interactions were being replayed:

Edit the steps of a user flow
After you've recorded a user flow, you can edit the steps of the user flow. For example, you can add new steps, remove existing steps, or edit the details of a step.
Add a new step
To add a new step to an existing user flow:
1. Click the Open step actions () button next to the step before or after which you want to add a new step, and then select Add step before or Add step after:

2. Follow the instructions in Edit a step below, to edit the details of the new step that you added. The new step is temporarily named Wait for element.
Edit a step
To edit the details of an existing step:
1. To open the details section of the step you want to edit, click the triangle () button next to the step. The details section of the step opens:

2. Edit the details of the step, such as the type of step, the selectors of the DOM element the step applies to, or the properties of the step. The various types of steps and their properties are listed in the section below. Your changes are saved automatically.
Change the type of step
To change the type of step when editing the details of a step:
1. Click the input box next to type. For example, if the step you're editing has the type waitForElement, click the input box that contains the value waitForElement.
2. Delete the contents of the input box, and then select the new type of step you want to use from the dropdown menu that appears:

You can use the following types of steps when editing a step in a user flow. Each step type has a list of properties that apply to the step.
ﾉ Expand table
Step typeDescriptionPropertieschangeChange the value of a form input field.selectors: Ways to find the element that this step applies to.
value: The value to set the form input field to.clickClick an element.selectors: Ways to find the element this step applies to.
offsetX/offsetY: How far from the top left corner of the element to click.closeClose the browser window.None.doubleClickDouble-click an element.selectors: Ways to find the element that this step applies to.
offsetX/offsetY: How far from the top left corner of the element to doubleclick.emulateNetworkConditionsEmulate different network conditions.download/upload: The download and upload speeds, in bytes per second.Step typeDescriptionPropertieslatency: The minimum latency from a request being sent to the response being received, in milliseconds.hoverEmulate the pointer hovering over an element.selectors: Ways to find the element that this step applies to.keyDownPress a key down.selectors: Ways to find the element that this step applies to. key: Which key to press.keyUpRelease a pressed key.selectors: Ways to find the element that this step applies to. key: Which key to release.navigateNavigate to a different webpage.url: The URL of the page to navigate to.scrollScroll to a position in the webpage.x/y: The optional horizontal and vertical coordinates of the position to scroll to in the page.setViewportChange the viewport size, device pixel ratio, and capabilities.width/height: The size of the viewport.
deviceScaleFactor: The device pixel ratio.
isMobile: Whether the viewport is a mobile device viewport.
hasTouch: Whether the viewport supports touch events.
isLandscape: Whether the viewport is in a landscape orientation.waitForElementWait for an element, or for multiple elements, to be present in the webpage.selectors: Ways to find the element that this step applies to.waitForExpressionWait until a JavaScript expression evaluates to true.expression: The JavaScript expression to evaluate.Edit the selectors of a step
Many step types have a selectors property, which specifies the DOM element that the step applies to. For example, a click step has a selectors property to define which element in the page is clicked when that step of the user flow runs.
The selectors property is a list of one or more selectors. Each selector in the list can be a different way to find the element in the page. The Recorder tool tries each selector in the list, in order, until it finds an element in the page that matches the selector.
A selector can be any of the following types:
A CSS selector, such as #my-element-with-id or .my-class.
A XPath selector, prefixed with xpath/, such as xpath//html/body/form/div/label.
The text content of the element, prefixed with text/, such as text/Add a task.
You can edit the selectors of a step by either approach:
Selecting an element in the rendered webpage.
Manually add, remove, or modify a selector.
To edit the selectors by selecting an element in the rendered webpage, click Select an element in the page to update selectors, and then click the element in the rendered webpage that you want to select. The Recorder tool updates the list of selectors to match the selected element:

 To add or remove a selector, under Selectors, hover over a selector, and then click Add a selector or Remove a selector:
To modify the value of a selector, under Selectors, click the input box that contains the value of the selector, and then enter the new value for the selector:

Delete a step
To delete a step from an existing user flow:
1. Click the Open step actions () button next to the step you want to delete, and then select Remove step:

Delete a user flow
To delete a previously recorded user flow, when viewing the list of recordings, click Delete recording () next to the recording you want to delete:

Export and import user flows as files
To share a user flow with other people, export your recorded user flow as a JSON file. For example, sharing a user flow can help other people reproduce a bug by running the same set of steps as you.
Export a user flow as a file
To share a user flow with another person, export the user flow as a JSON file:
1. When viewing the steps of a user flow, click the Export () button in the Recorder tool toolbar, and then select JSON:

2. Select a location at which to save the file. The file is saved with the name of the user flow, and the extension .json.
Import a user flow from a file
To import a user flow from a JSON file:
1. In the Recorder tool toolbar, click the Import recording () button:

2. In the file chooser dialog that opens, select a user flow JSON file, and then click the Open button. The user flow is imported, and appears in the list of recordings in the Recorder tool.
Export a user flow for test automation
To generate a test script and run it automatically with a test automation framework, export a user flow as a .js test script file, as follows:
1. When viewing the steps of a user flow, in the Recorder tool toolbar, click the Export () button, and then select an export format:

ﾉ Expand table
Export formatTest automation framework@puppeteer/replayExports the user flow as a test script for the Replay library. See the puppeteer / replay repo.PuppeteerExports the user flow as a test script for the Puppeteer test automation framework. See Puppeteer.Puppeteer (including
Lighthouse analysis)Exports the user flow as a test script for the Puppeteer test automation framework, and includes a Lighthouse analysis of the performance of the website.The Save As dialog opens.
2. Select a location in which to save the file. The file is saved with the name of the user flow, and the extension .js.

Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
Article • 12/07/2023
Use the Rendering tool to see what your webpage looks like with different display options or vision deficiencies:

The Rendering tool is used for tasks such as the following:
Check for contrast issues with dark theme and light theme
Verify that a page is usable by people with color blindness
Verify that a page is usable with blurred vision
Verify that a page is usable with UI animation turned off
Emulate vision deficiencies
Emulate dark or light schemes in the rendered page
Simulate reduced motion
Analyze rendering performance - see Analyze rendering performance with the Rendering tool in Performance features reference.

Emulate dark or light schemes in the rendered page
Article • 12/07/2023
Use the Rendering tool to see what your webpage looks like with different display options or vision deficiencies.
Many operating systems have a way to display any application in darker or lighter colors. Having a website that has a light scheme in a dark-mode operating system can be hard to read and can be an accessibility issue for some users.
To test how a webpage will render when the user has selected dark or light mode, instead of changing your own machine's dark-mode or light-mode setting, you can select Emulate CSS prefers-color-scheme: dark or light in Microsoft Edge DevTools. Or, you can make your webpage automatically select dark or light mode based on your own preferred settings on your machine, by selecting No emulation, which is the default.
You can select these settings from the Rendering tool or from the Command Menu, as described below.
To specify the CSS to use for both light and dark schemes, use the prefers-colorscheme CSS media query to detect whether the user prefers to display your product in a dark or light color scheme, and then automatically select your own custom light- or dark-mode CSS. Example CSS code is shown in Check for contrast issues with dark theme and light theme.
Emulating dark or light mode using the Rendering tool
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar or on the Quick View, select the Rendering tab. If that tab isn't visible, click the More tools () button.
3. In the Emulate CSS media feature prefers-color-scheme dropdown list, select prefers-color-scheme: dark or prefers-color-scheme: light:

The rendered webpage renders as if the user had selected dark or light mode in their operating system. The webpage uses the CSS that you have specified for that mode.
4. Modify your CSS and view the rendered result the same way as for any other webpage. See Get started viewing and changing CSS.
5. To restore the setting, in the Rendering tool, in the Emulate CSS media feature prefers-color-scheme dropdown list, select No emulation. Your own operating system's setting for light or dark mode is applied.
Emulating dark or light mode using the Command Menu
1. When DevTools has focus, open the Command Menu by selecting Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).
2. Type dark, light, or emulate, select Emulate CSS prefers-color-scheme: dark or Emulate CSS prefers-color-scheme: light, and then press Enter:

The rendered webpage renders as if the user had selected dark or light mode in their operating system. The webpage uses the CSS that you have specified for that mode.
Select a Rendering command rather than an Appearance command. The
Rendering commands affect the rendered webpage under development. The Appearance commands instead affect the DevTools part of the window.
3. Modify your CSS and view the rendered result the same way as for any other webpage. See Get started viewing and changing CSS.
4. To restore the setting, in the Command Menu, type emulate or scheme and then select Do not emulate CSS prefers-color-scheme. Your own operating system's setting for light or dark mode is applied.
See also
 Analyze rendering performance with the Rendering tool in Performance features reference.
The Rendering tool is also used for the following tasks:
Check for contrast issues with dark theme and light theme
Verify that a page is usable by people with color blindness
Verify that a page is usable with blurred vision
Verify that a page is usable with UI animation turned off
Emulate vision deficiencies
Simulate reduced motion

Feedback
Was this page helpful? 

Force print preview mode
Article • 11/07/2024
The CSS print media query allows you to define CSS styles that only apply when a page is printed.
Use the Rendering tool to force a webpage into print preview mode in order to debug your print styles.
To force a page into print preview mode:
1. Go to a webpage, such as the Todo demo app.
2. Right-click the webpage, and then select Inspect. DevTools opens.
3. If the Quick View panel or toolbar isn't shown at bottom of DevTools, press Esc when focus is on DevTools. The Quick View panel opens.
4. In the Quick View toolbar, click the More tools (+) button, and then select the Rendering tool.
The Rendering tool opens in the Quick View panel:

5. Scroll down to the Emulate CSS media type section, and then in the dropdown list, select print rather than No emulation:

The webpage is rendered with its print media CSS styles applied.
6. In the Elements tool, edit the print media CSS styles:

To learn more about changing CSS, see Get started viewing and changing CSS.
Exiting print preview mode
 In the Rendering tool, in the Emulate CSS media type section, select No emulation in the dropdown menu.
The webpage is rendered with its screen styles applied.
See also
 Rendering tool, to see what a webpage looks like with different display options or vision deficiencies


Feedback
Was this page helpful? 

Find source files for a page using the Search tool
Article • 07/09/2024
Use the Search tool to find specific source files for a webpage, including HTML, CSS, JavaScript, and image files.
A webpage is mainly an HTML file that's used by the browser to display content. But webpages commonly require other resources in addition to the HTML file, such as CSS, JavaScript, or image files, to provide richer content.
In the Sources tool, the Page tab of the Navigator pane shows all the resources that are downloaded by a webpage. But when there are many resources, it can become useful to search through them. To do text and regular expression searches across all the resources of a webpage, use the Search tool.
Open the Search tool by using a keyboard shortcut
To quickly open the Search tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. Press Esc to open the Quick View panel at the bottom of DevTools, and then on the Quick View toolbar, select the Search tab. If that tab isn't visible, click the More Tools () button.
Or, press Ctrl+Shift+F (Windows, Linux) or Command+Option+F (macOS).
The Search tool opens in the Quick View panel:

See also Global keyboard shortcuts.
Open the Search tool by using the Command Menu
To open the Search tool from the Command Menu:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. Open the Command Menu, by pressing Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).
3. Start typing search, and then select Show Search:

Search for text
To search for text in the current webpage and its resource files:
1. Put focus the search input field.
2. Enter the text that you want to search for, and then press Enter.
The Search tool shows the list of matching resources, and highlights the corresponding lines of text. The number of matching files and lines is also indicated at the bottom of the tool.

Match case (lowercase or uppercase characters)
By default, the Search tool isn't case-sensitive. A search for a term matches occurrences of that term, regardless of lowercase or uppercase characters.
To only find results that match a particular case (lowercase or uppercase characters), click the Match Case (Aa) button in the search toolbar.
Search for regular expressions
You can use regular expressions to find matching results. To use a regular expression, click the Use Regular Expression (.*) button in the toolbar and enter a valid JavaScript regular expression in the Search text box:

JavaScript aren't needed.
Similarly, flags that optionally appear after the closing forward slash (/) in JavaScript regular expressions can't be used here. The Search tool matches results as if the g, i, and m regular expression flags had been provided:
ﾉ Expand table
FlagNameDescriptiongGlobalThe search is global: the tool will continue searching files even after a first match has been found, as if the regular expression g flag had been provided.iIgnore caseThe search ignores casing by default, as if the i flag had been provided. To disable this flag and only find results that match a particular case, click the Match Case (Aa) button in the search toolbar.mMultilineThe search is multiline: the tool treats each line in the source files independently and the ^ and $ symbols match the start and end of any line, respectively, as if the m flag had been provided.See also:
 Regular expressions at MDN.
Open a found file in the Sources tool
After doing a search, click a result line to open the corresponding file. The Sources tool opens in the main panel and loads the resource file, scrolled to the matching line:

Update search results
A webpage can continue to request resources after it has finished loading, so the results displayed in the Search panel might become outdated after a while.
To update the search results, do either of the following:
Click the Refresh () button in the toolbar.
Search again by typing a term in the search input field.
Clear a search
To clear the search results, click the Clear () button in the toolbar.
Understand security issues using the Security tool
Article • 12/07/2023
Use the Security tool to inspect the security of a page.
Open the Security tool
To open the Security tool:
1. To open DevTools, right-click a webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, click the Security tab. If that tab isn't visible, click the More Tools () button.
The Security tool opens:

Debug common security problems
The Security tool is useful for debugging a variety of security issues. The sections below describe some common problems that you might use the Security tool for.
Non-secure main origins
When the main origin of a page isn't secure, the Security Overview says This page is not secure.

This problem occurs when the URL that you visited was requested over HTTP. To make it secure you need to request it over HTTPS. For example, if you look at the URL in your address bar, it probably looks similar to http://example.com. To make it secure the URL should be https://example.com.
If you already set up HTTPS on your server, all you need to do to fix this problem is configure your server to redirect all HTTP requests to HTTPS.
If you haven't set up HTTPS on your server, Let's Encrypt provides a free and relatively easy way to start the process. Or, you might consider hosting your site on a CDN. Most major CDNs host sites on HTTPS by default now.

Mixed content
Mixed content means that the main origin of a page is secure, but the page requested resources from non-secure origins. Mixed content pages are only partially protected because the HTTP content is accessible to sniffers and vulnerable to man-in-the-middle attacks.

In Microsoft Edge, mixed content requests are automatically upgraded to HTTPS when possible. If the resource is not available over HTTPS, the request is blocked.
View more details
The Security tool provides more details about the origins which a webpage requested resources from, and the security of those origins. The sections below describe how to view more details.
View main origin certificate
To quickly inspect the certificate for the main origin, in the Security Overview, click View certificate. The Certificate Viewer opens:

View origin details
To view the details of an origin, in the left navigation panel, click one of the origins.
Detailed information about the origin appears:

From the details page you can view:


Feedback
Was this page helpful? 

Override geolocation with the Sensors tool
Article • 11/07/2024
Many websites take advantage of user location in order to provide a more relevant experience for the users. For example, a weather website may show the local forecast in a user's area, after the user has granted the website permission to access the current user location.
If you are building a UI that changes depending on where the user is located, you probably want to make sure that the site behaves correctly in different places around the world. To override your geolocation in Microsoft Edge DevTools:
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.


3. Click the Location dropdown list, and then:
Select a city, such as Tokyo.
Click Other to enter custom longitude and latitude coordinates.
Click Location unavailable to see how your site behaves when the user's location isn't available.



Feedback
Was this page helpful? 

Simulate device orientation with the Sensors tool
Article • 11/07/2024
Simulate different device orientations from within DevTools.
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.

2. Type sensors, select Show Sensors, and then press Enter. The Sensors tool opens in the bottom of the DevTools window.

3. From the Orientation list, select one of the preset orientations, such as Portrait upside down, or select Custom orientation to provide your own exact orientation.

If you select Custom orientation, the alpha, beta, and gamma rotational axis fields are enabled.
You can also set a custom orientation by dragging the Orientation Model. For example, to rotate along the alpha axis, press and hold Shift before dragging:



Feedback
Was this page helpful? 

Source Maps Monitor tool
Article • 09/13/2023
Use the Source Maps Monitor tool to monitor which source files on your webpage requested loading of source maps, and whether the source maps were loaded. This tool is useful if your webpage uses source maps to map your reprocessed code to your original source code. Source mapping enables you to see and debug your original source code, rather than having to work with the reprocessed version of your code that's returned by the server.
To try this feature:
1. In a new tab or window, follow the instructions in Map the processed code to your original source code, for debugging, and then continue below.
2. Close the popup dialog that the demo opens.
3. In the Sources tool, in the Page tab, select the file that the demo created for you, such as Coffee2.js.
4. In DevTools, on the main toolbar, click the More Tools () button, and then select the Source Maps Monitor tool.

Exclusions and inclusions
The Source Maps Monitor tool shows which URL lookups have or haven't been attempted, as configured in filter settings in DevTools Settings > Symbol Server > Filter behavior. For example:
1. Right-click a webpage and then select Inspect. DevTools opens.
2. Click the Settings () button, and then select Symbol Server.
3. In the Filter behavior dropdown list, select Exclusion List (or, select Inclusion List). If the Filter behavior dropdown list isn't displayed, set the Symbol Server settings, as described in the following articles:
 Securely debug original code by publishing source maps to the Azure
Artifacts symbol server
 Securely debug original code by using Azure Artifacts symbol server source maps
 Improvements for connecting DevTools to Azure Artifacts symbol server in What's New in DevTools (Microsoft Edge 115).
4. In the Filter behavior text box, enter a domain with wildcard to exclude (or, to include), such as: https://ryanseddon.com/*
5. Close DevTools Settings.
6. In DevTools, select the Source Maps Monitor tool.
The Source Maps Monitor tool now indicates excluded (or, included) source map URL lookup attempts:

See also
Map the processed code to your original source code, for debugging Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps Sources tool now notifies you when sourcemaps can't be loaded in What's New in DevTools (Microsoft Edge 96).

WebAudio tool
Article • 03/28/2023
Use the WebAudio tool to monitor the graph of WebAudio nodes that get created when a webpage uses the WebAudio API.
To open the WebAudio tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the main toolbar, click the More Tools () button, and then select WebAudio.
3. Go to a webpage that uses the WebAudio API, such as https://bpmtech.no.
Data about the page is displayed:


Emulate authenticators and debug WebAuthn
Article • 03/28/2023
Instead of debugging Web Authentication in your website or app with physical authenticators, use the WebAuthn tool to create and interact with software-based virtual authenticators.
By using the WebAuthn tool, you can do the following without relying on physical authenticators:
Emulate authenticators.
Customize attributes of authenticators.
Inspect states of authenticators.
You can emulate authenticators and debug the Web Authentication API by using the WebAuthn tool.
Set up the WebAuthn tool
1. Go to a webpage that uses WebAuthn. For example, open the following demo website in a new browser window or tab: try-webauthn.appspot.com.
2. Sign into the website.
3. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
4. In DevTools, on the main toolbar, select the WebAuthn tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
The WebAuthn tool opens:

5. In the WebAuthn tool, select the Enable virtual authenticator environment checkbox. A new section named New authenticator is displayed:

6. In the New authenticator section, configure the following options:
ﾉ Expand table
OptionValueDetailsProtocolctap2 or u2fThe protocol the virtual authenticator uses for encoding and decodingTransportusb, nfc, ble, or internalThe virtual authenticator simulates the selected transport for communicating with clients in order toOptionValueDetailsobtain an assertion for a specific credential. See
Authenticator Transport EnumerationSupports resident keysTurn on (or off) using the checkboxTurn on if your web app relies on resident keys (also known as client-side discoverable credentials). See Resident Key Requirement Enumeration.Supports user verificationTurn on (or off) using the checkboxTurn on if your web app relies on local authorization using gesture modalities like touch plus pin code, password entry, or biometric recognition. See User
Verification7. Click the Add button.
8. A new section of your newly created authenticator is displayed:

The Authenticator section includes a Credentials table. The table is empty until a credential is registered to the authenticator:

Register a new credential
To register a new credential:
1. On the demo website, click Register new credential.
2. A new credential is now added to the Credentials table in the WebAuthn tool:

credential in the Credentials table increased by 1, which marks a successful authenticatorGetAssertion operation.
For more information about what the Web Authentication API	 is doing when registering a new credential, see Create a New Credential	.
Export and remove credentials
To export or remove a credential, click the Export or Remove button.

Rename an authenticator
To rename an authenticator:
1. Next to the authenticator name, click the Edit button.
2. Edit the name, then press Enter to save the changes.

Set the active authenticator
A newly created authenticator is automatically activated. To use another virtual authenticator, click the Active radio button next to the authenticator.
DevTools supports only one active virtual authenticator at any point of time. If you remove the active authenticator, another authenticator isn't automatically activated.

Remove a virtual authenticator
To remove a virtual authenticator, next to the authenticator, click the Remove button.



Feedback
Was this page helpful? 

Welcome tool
Article • 06/19/2023
The Welcome tool opens when you first open DevTools. It displays:
Links to developer docs.
Latest features.
Release notes.
Option to contact the Microsoft Edge DevTools team.
The Welcome tool opens automatically after each update to Microsoft Edge.
To prevent the display of the Welcome tool after each update, clear the checkbox next to Open tab after each update under the Welcome tool title.


Run commands in the Command Menu
Article • 11/07/2024
The Command Menu provides a fast way to navigate the Microsoft Edge DevTools UI and accomplish common tasks. The Command Menu is similar to the Command Palette

Video: Customizing Microsoft Edge Developer Tools and quick feature access

Open the Command Menu
To open the Command Menu:
1. To open DevTools, right-click a webpage and then select Inspect.
2. Click the Customize and control DevTools () button, and then select Run command:

Or, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS).

3. Start typing a keyword, and then select a command from the filtered list.
Display other available actions
To show other kinds of Command Menu actions besides Run Command, delete the > character and then type ?:

Available actions include:
Open File
Run Command
Go to Symbol
Go to Line
Run Snippet
The actions other than Run Command require input, such as a file name or line number.
See also

Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	 and is authored by Kayce Basques.
              This work is licensed under a Creative Commons Attribution 4.0 International License.

Feedback
Was this page helpful?  Yes  No

Keyboard shortcuts
Article • 03/28/2023
These are the default keyboard shortcuts for Microsoft Edge DevTools.
In DevTools, when you hover over an icon, often the tooltip shows a keyboard shortcut.
See also Navigate DevTools with assistive technology and Customize keyboard shortcuts.
Keyboard shortcuts for opening DevTools
To open DevTools, press the following keyboard shortcuts while your cursor is focused on the browser viewport:
ﾉ Expand table
ActionWindows/LinuxmacOSOpen whatever panel you used lastF12 or
Ctrl+Shift+ICommand+Option+IOpen the Console toolCtrl+Shift+JCommand+Option+JOpen the Elements toolCtrl+Shift+CCommand+Shift+C or
Command+Option+CGlobal keyboard shortcuts
The following keyboard shortcuts are available in most DevTools panels.
ﾉ Expand table
ActionWindows/LinuxmacOSShow SettingsShift+? or F1Shift+? or Function+F1Focus the next panelCtrl+]Command+]Focus the previous panelCtrl+[Command+[Switch back to whatever docking position you last used. If
DevTools has been in the defaultCtrl+Shift+DCommand+Shift+DActionWindows/LinuxmacOSposition for the entire session, then this shortcut undocks DevTools into a separate window.Toggle Device emulationCtrl+Shift+MCommand+Shift+MToggle Inspect Element ModeCtrl+Shift+CCommand+Shift+COpen the Command MenuCtrl+Shift+PCommand+Shift+PToggle the Quick View panelEscEscNormal refreshF5 or Ctrl+RCommand+RHard refreshCtrl+F5 or Ctrl+Shift+RCommand+Shift+RSearch for text within the current panel. Not supported in the
Audits, Application, and
Security toolsCtrl+FCommand+FOpens the Search tool in the Quick View, which lets you search for text across all loaded resourcesCtrl+Shift+FCommand+Option+FOpen a file in the Sources toolCtrl+O or Ctrl+PCommand+O or Command+PZoom inCtrl++Command++Zoom outCtrl+-Command+-Restore default zoom levelCtrl+0Command+0Run snippetPress Ctrl+O to open the Command Menu, type ! followed by the name of the script, then press EnterPress Command+O to open the Command Menu, type !
followed by the name of the script, then press EnterElements tool keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSUndo changeCtrl+ZCommand+ZActionWindows/LinuxmacOSRedo changeCtrl+YCommand+Shift+ZSelect the element above / below the currently selected elementUp Arrow / Down ArrowUp Arrow / Down ArrowExpand the currently selected node. If the node is already expanded, this shortcut selects the element below itRight ArrowRight ArrowCollapse the currently selected node. If the node is already collapsed, this shortcut selects the element above itLeft ArrowLeft ArrowExpand or collapse the currently selected node and all of the childrenHold Ctrl+Alt, then click the arrow icon next to the name of the elementHold Option, then click the arrow icon next to the name of the elementToggle Edit Attributes mode on the currently selected elementEnterEnterSelect the next / previous attribute after entering Edit
Attributes modeTab / Shift+TabTab / Shift+TabHide the currently selected elementHHToggle Edit as HTML mode on the currently selected elementFunction+F2F2Styles pane keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSGo to the line where a property value is declaredHold Ctrl, then click the property valueHold Command, then click the property valueCycle through the RBGA, HSLA, and Hex representations of a color
valueHold Shift, then click the Color Preview box next to the valueHold Shift, then click the Color
Preview box next to the valueActionWindows/LinuxmacOSSelect the next / previous property or valueClick a property name or value, then press Tab /
Shift+TabClick a property name or value, then press Tab / Shift+TabIncrement / decrement a property value by 0.1Click a value, then press
Alt+Up Arrow / Alt+Down
ArrowClick a value, then press
Option+Up Arrow /
Option+Down ArrowIncrement / decrement a property value by 1Click a value, then press Up
Arrow / Down ArrowClick a value, then press Up
Arrow / Down ArrowIncrement / decrement a property value by 10Click a value, then press
Shift+Up Arrow / Shift+Down
ArrowClick a value, then press
Shift+Up Arrow / Shift+Down
ArrowIncrement / decrement a property value by 100Click a value, then press
Ctrl+Up Arrow / Ctrl+Down
ArrowClick a value, then press
Command+Up Arrow /
Command+Down ArrowCycle through the degrees
(deg), gradians (grad), radians
(rad) and turns (turn) representations of an angle valueHold Shift then click the Angle Preview box next to the valueHold Shift then click the Angle
Preview box next to the valueIncrement / decrement an angle value by 1Click the Angle Preview box next to the value then press
Up Arrow / Down ArrowClick the Angle Preview box next to the value then press Up
Arrow / Down ArrowIncrement / decrement an angle value by 10Click the Angle Preview box next to the value then press
Shift+Up Arrow / Shift+Down
ArrowClick the Angle Preview box next to the value then press
Shift+Up Arrow / Shift+Down
ArrowIncrement / decrement an angle value by 15Click the Angle Preview box next to the value then press Shift, click / mouse slide on the Angle Clock OverlayClick the Angle Preview box next to the value then press Shift, click / mouse slide on the
Angle Clock OverlaySources tool keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSPause script runtime
(if currently running)F8 or Ctrl+\F8 or Command+\
ActionWindows/LinuxmacOSor resume (if currently paused)Step over next function callF10 or Ctrl+'F10 or Command+'Step into next function callF11 or Ctrl+;F11 or Command+;Step out of current functionShift+F11 or Ctrl+Shift+;Shift+F11 or Command+Shift+;Continue to a specific line of code while
pausedHold Ctrl, then click the line of codeHold Command, then click the line of codeSelect the call frame below / above the currently selected frameCtrl+. / Ctrl+,Ctrl+. / Ctrl+,Save changes to local modificationsCtrl+SCommand+SSave all changesCtrl+Alt+SCommand+Option+SNavigate to lineCtrl+GCtrl+GJump to a line number of the currently open filePress Ctrl+O to open the Command Menu, type :
followed by the line number, then press EnterPress Command+O to open the Command Menu, type : followed by the line number, then press EnterJump to a column of the currently open file (for example line
5, column 9)Press Ctrl+O to open the
Command Menu, type :, then the line number, then another :, then the column number, then press EnterPress Command+O to open the Command Menu, type :, then the line number, then another :, then the column number, then press EnterNavigate to a function declaration, if the current file is HTML or a script. Navigate to a rule set, if the current file is a stylesheet.Press Ctrl+Shift+O, then type in the name of the declaration / rule set, or select it from the list of optionspress Command+Shift+O, then type in the name of the declaration / rule set, or select it from the list of optionsClose the active tabAlt+WOption+WCode Editor keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSDelete all characters in the last word, up to the cursorCtrl+DeleteOption+DeleteAdd or remove a line-of-code breakpointFocus your cursor on the line, then press Ctrl+BFocus your cursor on the line, then press
Command+BNavigate to matching bracketCtrl+MCtrl+MToggle single-line comment. If multiple lines are selected, DevTools add a comment to the start of each lineCtrl+/Command+/Turn on or off the next occurrence of whatever word the cursor is on. Each occurrence is highlighted simultaneouslyCtrl+D / Ctrl+UCommand+D /
Command+UPerformance tool keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSStart / stop recordingCtrl+ECommand+ESave recordingCtrl+SCommand+SLoad recordingCtrl+OCommand+OMemory tool keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSStart / stop recordingCtrl+ECommand+EConsole tool keyboard shortcuts
ﾉ Expand table
ActionWindows/LinuxmacOSAccept autocomplete suggestionRight Arrow or TabRight Arrow or TabReject autocomplete suggestionEscEscGet previous statementUp ArrowUp ArrowGet next statementDown ArrowDown ArrowFocus the ConsoleCtrl+`Ctrl+`Clear the ConsoleCtrl+LCommand+K or
Option+LForce a multi-line entry. This shortcut is mostly unnecessary, because DevTools should detect multi-line scenarios by defaultShift+EnterCommand+ReturnRunEnterReturnExpand all subproperties of an object that are logged to the ConsoleHold Alt, then click
Expand (	)Hold Alt, then click
Expand (	).See also


Feedback
Was this page helpful?  Yes  No

Customize DevTools
Article • 11/15/2024
This page lists the ways to customize Microsoft Edge DevTools.
Settings
Settings > Preferences contains many options for customizing DevTools.
To open Settings, in DevTools, click the Customize and control DevTools icon (), and then click Settings (). Or, while DevTools has focus, press F1.

Quick View
In the Quick View toolbar in the bottom of DevTools, you can select which tools to display.
To open (or close) the Quick View panel, press Esc when focus is on DevTools.

You can move tools between the Activity Bar (at the top) and the Quick View toolbar (at the bottom).
 To move a tool from the Quick View toolbar to the Activity Bar, right-click a tool, and then select Move to top Activity Bar:
To move a tool from the Activity Bar to the Quick View toolbar, right-click a tool, and then select Move to bottom Quick View:

Reorder tools
To change the ordering of tabs on a toolbar, drag a tool's tab to the desired location. Your custom tool order persists across DevTools sessions.
For example, by default, the Network tool is the fifth tab on the Activity Bar. You can drag the Network tab to become the first tab:

Tabs that are added by DevTools extensions are always added to the end of the Activity Bar. You can reorder them during a DevTools session, but they will always be at the end of the Activity Bar again when DevTools is opened.
Open and close tools
To keep the DevTools interface streamlined, many of the tools aren't opened by default. To open a tool in the Activity Bar or the Quick View toolbar, click the More Tools () button to the right of the tabs, and then select a tool from the list:

To close a tool, right-click a tool's tab and then select Remove from Activity Bar or Remove from Quick View:

Change where DevTools is docked in the browser
To change where DevTools is docked in the browser, click the Customize and control DevTools icon () and choose one of the options in the Dock location submenu:

To learn more, see Change DevTools placement (Undock, Dock to bottom, Dock to left).
Zoom DevTools in or out
See Zoom DevTools in or out in Overview of DevTools.
Restore default settings
To restore the default theme, placement, tools order, and any other customized settings, select Settings > Preferences, scroll down, and then click Restore defaults and refresh:

Customize keyboard shortcuts
See Customize keyboard shortcuts.
Videos about Customizing the DevTools UI
Customizing Microsoft Edge Developer Tools and quick feature access

Learn how to customize DevTools to fit your needs.
This video covers how to dock or undock DevTools, open new tools, and close those you don't need. It describes how to move tools in the Drawer (now Quick View panel) at the bottom of DevTools, and how to customize the text size and theme. The video also explains how you can use the Command Menu keyboard shortcuts to quickly customize DevTools.
Understand the DevTools user interface

Understand how the Microsoft Edge DevTools UI is organized. If you are confused about what tools are available, and what the main parts of the DevTools interface do, this video will help get more comfortable.
In this video, we go over the UI structure, with its main toolbar and panel, and the Drawer (now Quick View panel). We also go over how to find, open, and close tools, restore the default settings, and go over the list of available tools.
Check out this video to learn about the main parts of the DevTools UI, how to customize it to meet your needs, learn about the different tools that are available, and where to go for help.
See also


Feedback
Was this page helpful? 

Change DevTools placement (Undock, Dock to bottom, Dock to left)
Article • 12/07/2023
You can change where DevTools is docked in the browser. By default, Microsoft Edge DevTools is docked to the right of the browser window. You can also dock DevTools to the bottom or left of the window, or undock DevTools to a separate window.
To change where DevTools is placed within the browser window:
 Click the Customize and control DevTools () menu button, and then in the Dock location section, select a layout option:

Dock to left or Dock to right keeps DevTools side-by-side with your webpage, and is excellent when you Emulate mobile devices (Device Emulation). The Dock to left and Dock to right options work best with high-resolution displays.
Undock DevTools into a separate window
Undock DevTools into its own, separate window, when you want to work with several monitors, or if you need to work on a full-screen app and want a lot of space for the DevTools UI. The following image shows DevTools undocked into its own, dedicated window:

Since DevTools now has its own dedicated window, the page that's being designed now occupies an entire browser window:

Dock DevTools in the left side of the browser
The following image shows DevTools docked in the left side of the browser window:

Dock DevTools in the bottom of the browser
Dock to bottom helps you when you don't have enough horizontal display space, or you want to debug long text in the DOM or Console. The following image shows DevTools in the bottom of the browser window:

Dock DevTools in the right side of the browser
The following image shows DevTools in the right side the browser window, which is the default location:

Change where DevTools is docked by using the Command Menu
1. Open the Command Menu. To do this, click the Customize and control DevTools (
) menu button, and then click Run command. Or, press Ctrl+Shift+P (Windows/Linux) or Command+Shift+P (macOS).
2. Type dock, and then select a dock command:
Dock to bottom
Dock to left
Dock to right
Restore last dock position
Undock into separate window

Change DevTools language settings
Article • 12/07/2023
Your Developer Tools matches your browser language by default, if it is one of the supported languages:
Czech - Čeština
German - Deutsch
English - English
Spanish - español
French - français
Italian - italiano
Japanese - 日本語
Korean - 한국어
Portuguese - português
Russian - русский
Vietnamese - Tiếng Việt
Chinese (Simplified) - 中文（简体）
Chinese (Traditional) - 中文（繁體）
The DevTools UI in Chinese:

Video: Use your preferred language in Microsoft Edge DevTools

Reverting the DevTools UI to English
To revert the UI text of DevTools to English:
1. In DevTools, click the Customize and control DevTools () button, and then click Settings (). Or, while DevTools has focus, press F1.
2. On the left, make sure the Preferences page is selected.
3. In the Preferences page, in the Appearance section, locate the Language dropdown list, which is the first item at the top of the page.
4. In the Language dropdown list, select Browser UI language, which is the first menuitem in the dropdown list. Or, select English.
What the dropdown list looks like if your DevTools UI is currently English:

What the dropdown list looks like if your DevTools UI is currently Japanese:

5. Click the Close (x) button in the upper right of the Settings panel, and then click the Reload DevTools button that temporarily appears at the top of DevTools.
What the Reload DevTools button looks like when changing the DevTools UI from Japanese to English:

Reverting all DevTools settings to the defaults
Caution: This removes all of your customizations of DevTools.
To revert all DevTools settings to the defaults, including the UI language:
1. In DevTools, click the Customize and control DevTools () button, and then click Settings (). Or, while DevTools has focus, press F1.
2. On the left, make sure the Preferences page is selected.
3. At the bottom of the Preferences page, click the Restore defaults and refresh button.
4. Re-apply any custom settings and layout of DevTools that you want to restore.

Customize keyboard shortcuts
Article • 12/07/2023
In the Shortcuts page of Settings, you can view the defined shortcuts for Microsoft Edge DevTools, define your own shortcut for a specific action, or use a preset to match the default shortcuts from Microsoft Visual Studio Code.
For the default keyboard shortcuts, see Keyboard shortcuts.
Match keyboard shortcuts from Visual Studio Code
To match the keyboard shortcuts in Microsoft Edge DevTools to their equivalent actions in Visual Studio Code:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, in the Activity Bar, click the Customize and control DevTools () button, and then click the Settings () button. Or, press F1.
3. In the Settings panel, select the Shortcuts page.
4. In the upper right, in the Match shortcuts from preset dropdown list, select Visual Studio Code instead of DevTools (Default):

For example, to pause or continue running a script in Visual Studio Code, you press F5.
But with the DevTools (Default) preset, to pause or continue running a script, you press
F8. When you change the preset to Visual Studio Code, you now also press F5 in DevTools, just like in Visual Studio Code.
See also:
Microsoft Visual Studio Code
Visual Studio Code Keyboard shortcuts for Windows (PDF file)
Edit the keyboard shortcut for a DevTools action
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, in the Activity Bar, click the Customize and control DevTools () button, and then click the Settings () button. Or, press F1.
3. In the Settings panel, select the Shortcuts page.
4. Select the action you want to customize. For example, in the Debugger section, click anywhere in the Pause script execution row. The row becomes highlighted.
5. Click the Edit shortcut () icon:

6. To bind the shortcut keys to the action, make sure the text box next to the action has focus, and then use the keyboard to press the shortcut key combination.
7. To bind more than one shortcut combination to an action, click the Add a shortcut link, make sure the text box next to the action has focus, and then use the keyboard to press the additional shortcut key combination:

8. Click the Confirm changes () button:

Icons and buttons
ﾉ Expand table
Tooltip and button iconDescriptionEdit shortcut (	)Modifies an existing shortcut.Remove shortcut (	)Removes a keyboard shortcut for an action while you are editing the keyboard shortcuts for an action.The Add a shortcut linkAdds an additional keyboard shortcut for an action while you are editing the keyboard shortcuts for an action.Reset shortcuts for action (	)This icon displayed next to a checkbox indicates that you have customized the keyboard shortcut.Confirm changes (	)Saves a modified or added keyboard shortcut while you are editing the keyboard shortcuts for an action.Discard changes (	)Discards your changes while you are editing the keyboard shortcuts for an action.The Restore default shortcuts buttonResets all shortcuts.Assign a shortcut key combination that's already in use
If a keyboard shortcut is currently assigned to one action, it can't be assigned to another action.
To assign a shortcut key combination that's already in use:
1. Try to assign the shortcut key combination to the new action. An error message says which action the shortcut is already assigned to.
2. Click the row for the action that already has the keyboard shortcut assigned to it.
3. Delete its keyboard shortcut.
4. Click the row for the action that you want to assign the shortcut key combination to.
5. Add that keyboard shortcut to the new action, as described above.
See also
Keyboard shortcuts
Navigate DevTools with assistive technology
Run commands in the Command Menu
Customize DevTools
Add custom UI to DevTools using extensions
Article • 12/07/2023
In addition to the tools available in Microsoft Edge DevTools, you can add new tools by installing Microsoft Edge extensions, or build your own extensions for your specific use cases. Edge Add-ons extensions often extend the Microsoft Edge user interface with new buttons and panels, but can also extend DevTools, within Microsoft Edge, by adding new tool tabs in the Activity Bar.
Find an extension that extends DevTools
The Edge Add-ons website has a Developer tools category that contains extensions that typically extend DevTools. See the Developer tools category on the Edge Add-ons website.
There is no way to know if an extension extends the DevTools Activity Bar, without running it or looking at its source code, but the Developer tools category of the Edge Add-ons website is a good place to look.
Install an extension in DevTools
To install an Edge Add-ons extension that extends DevTools:
1. Go to the Edge Add-ons website, such as the Developer tools category, and go to the extension you want to install. For example, go to the React Developer Tools extension:

2. Click the Get button. An installation dialog opens, Add <extension name> to Microsoft Edge?
3. Click the Add extension button. A dialog indicates that the extension has been installed, and the Extensions () button now lists the extension.
4. Open a new tab or window, and then go to a page that contains content that's relevant for the DevTools extension. For example, use the TodoMVC React example page, or go to a live Microsoft Edge Demos repo page, such as demo-to-do.
5. Open DevTools, such as by pressing F12. In the case of this React extension, two new tabs are opened in the Activity Bar: Components and Profiler:

6. If the new tabs aren't displayed on the Activity Bar, make DevTools wider, or click the More tools () button, and then select the tool:

Create a DevTools extension
You can create your own DevTools extension to add new tabs in the DevTools Activity Bar, and to interact with the inspected page.
See Create a DevTools extension.

Remotely debug Android devices
Article • 03/28/2023
Remote debug live content on an Android device from your Windows or macOS computer. The following tutorial page teaches you how to:
 Set up your Android device for remote debugging, and discover it from your development machine.
 Inspect and debug live content on your Android device from your development machine.
 Screencast content from your Android device onto a DevTools instance on your development machine.
７ Note
Remote debugging the Microsoft Edge app on iOS devices isn't currently supported. The following guide is specifically focused on remote debugging Microsoft Edge on Android devices. If you have a macOS device, follow the
Brightcove Debugging guide	 to remotely debug Microsoft Edge on an iOS device using Safari. For more information about the Web Inspector tool in Safari, see Safari Web Development Tools	.
Step 1: Discover your Android device
The workflow below works for most users. For more help, see Troubleshooting: DevTools isn't detecting the Android device, below.
1. Open the Developer Options screen on your Android. See Configure On-Device Developer Options.
2. Select Enable USB Debugging.
3. On your development machine, open Microsoft Edge.
4. In the Address bar, go to edge://inspect.

5. Connect your Android device directly to your development machine using a USB cable. The first time you try to connect, a prompt should be displayed about DevTools detecting an unknown device. Accept the Allow USB Debugging permission prompt on your Android device.




6. If the model name of your Android device is displayed, then Microsoft Edge has successfully established the connection to your device. Continue to the Step 2 section.
Troubleshooting: DevTools isn't detecting the Android device
Use the following tips to help you troubleshoot the correct settings for your hardware.
 If you are using a USB hub, try connecting your Android device directly to your development machine.
 Try unplugging the USB cable between your Android device and development machine, and then re-plugging your USB cable. Complete the task while your Android and development machine screens are unlocked.
 Make sure that your USB cable works. You should be able to inspect files on your Android device from your development machine.
Use the following tips to help you verify that your software is set up correctly.
 If your development machine is running Windows, try manually installing the USB drivers for your Android device. For more information, see Install OEM USB Drivers.
 Some combinations of Windows and Android devices (especially Samsung) require additional settings. For more information, see DevTools Devices does not detect device when plugged in.
If the Allow USB Debugging prompt isn't displayed on your Android device, try:
 Disconnecting and then re-connecting the USB cable while DevTools is in focus on your development machine and your Android homescreen is showing. Sometimes the prompt isn't displayed when your Android or development machine screens are locked.
 Updating the display settings for your Android device and development machine so that they never go to sleep.
 Setting the USB mode for Android to PTP. See Galaxy S4 does not show Authorize USB debugging dialog.
 Select Revoke USB Debugging Authorizations from the Developer Options screen on your Android device to reset it to a fresh state.
If you find a solution that isn't mentioned on this page or in DevTools Devices does not detect device when plugged in on Stack Overflow, please add your solution to that Stack Overflow question.
Step 2: Debug content on your Android device from your development machine
1. Open Microsoft Edge on your Android device.
2. Go to edge://inspect. The model name of your Android device is displayed, followed by the device serial number. Below that, the version of Microsoft Edge running on the device should be displayed, with the version number in parentheses. Each open Microsoft Edge tab gets a unique section. You can interact with that tab from a section.

1. In the Open tab with url text box, enter a URL and then click Open. The page opens in a new tab on your Android device.
2. Click inspect next to the URL that you just opened. A new DevTools instance opens.
More actions: focus, refresh, or close a tab
Select focus tab, reload, or close next to the tab that you want to focus, refresh, or close.

Inspect elements
Go to the Elements tool of your DevTools instance, and hover over an element to highlight it in the viewport of your Android device.
You can also tap an element on your Android device screen to select it in the Elements
tool. Click Select Element () icon on your DevTools instance, and then select the element on your Android device screen.
Select Element is disabled after the first selection, so you need to re-enable it every time you want to use this feature.
Screencast your Android screen to your development machine
Click the Toggle Screencast () icon to view the content of your Android device in your DevTools instance.
You can interact with the screencast in multiple ways:
 Clicks are translated into taps, firing proper touch events on the device.
Keystrokes on your computer are sent to the device.
To simulate a pinch gesture, hold Shift while dragging.
  To scroll, use your trackpad or mouse wheel, or fling with your mouse pointer. Use the following tips to help you screencast:
 Screencasts only display page content. Transparent portions of the screencast represent device interfaces, such as the Microsoft Edge Address bar, the Android status bar, or the Android keyboard.
 Screencasts negatively affect frame rates. Disable screencasting while measuring scrolls or animations to get a more accurate picture of the performance of your page.
 If your Android device screen locks, the content of your screencast disappears.
Unlock your Android device screen to automatically resume the screencast.


Feedback
Was this page helpful?  Yes  No
Access local servers
Article • 06/14/2023
Host a site on a development machine web server, then access the content from an Android device.
Port forwarding enables you to view content hosted by the web server running in your development machine on your Android device.
If your web server is using a custom domain, set up your Android device to access the content at that domain with custom domain mapping.
With a USB cable and Microsoft Edge DevTools, run a site from a development machine and then view the site on an Android device.
Set up port forwarding
Port forwarding enables your Android device to access content that is being hosted on the web server running in your development machine. Port forwarding works by creating a listening TCP port on your Android device that maps to a TCP port on your development machine.
Traffic between the ports travel through the USB connection between your Android device and development machine, so the connection doesn't depend on your network configuration.
To enable port forwarding:
1. Set up remote debugging between your development machine and your Android device. When you are finished, your Android device should be displayed in the lefthand menu of the Inspect Devices dialog and a Connected status indicator.
2. In the Inspect Devices dialog in DevTools, enable Port forwarding.
3. Click Add rule.

5. In the Local address text box on the right, enter the IP address or hostname on which your site is hosted on the web server running in your development machine, followed by the port number. For example, if your site is running on localhost:7331 enter localhost:7331.
6. Click Add.
Port forwarding is now set up.
You can see the status indicator for the port forward at the top, as well as beside the device name. The indicator for the port forward is on the tab on your device within the Inspect Devices dialog.

To view the content, open up Microsoft Edge on your Android device and go to the localhost port that you specified in the Device port field. For example, if you entered 5000 in the field, visit localhost:5000.
Map to custom local domains
Custom domain mapping enables you to view content on an Android device from a web server on your development machine that is using a custom domain.
For example, suppose that your site uses a third-party JavaScript library that only works on the domain microsoft-edge.devtools. So, you create an entry in your hosts file on your development machine to map this domain to localhost (for example, 127.0.0.1 microsoft-edge.devtools). After setting up custom domain mapping and port forwarding, view the site on your Android device at the URL microsoft-edge.devtools.
Set up port forwarding to proxy server
To map a custom domain you must run a proxy server on your development machine.
Examples of proxy servers are Charles, Squid, and Fiddler.
To set up port forwarding to a proxy:
1. Run the proxy server and record the port that it is using.


2. Set up port forwarding to your Android device. For the local address field, enter localhost: followed by the port that your proxy server is running on. For example,
if it is running on port 8000, go to localhost:8000. In the device port field enter the number that you want your Android device to listen on, such as 3333.
Configure proxy settings on your device
Next, you need to configure your Android device to communicate with the proxy server.
1. On your Android device, navigate to Settings > Wi-Fi.
2. Long-press the name of the network to which you are currently connected.

3. Click Modify network.
4. Click Advanced options. The proxy settings display.
5. Click the Proxy menu and then select Manual.
6. For the Proxy hostname field, enter localhost.
7. For the Proxy port field, enter the port number that you entered for device port in the previous section.
8. Click Save.
With these settings, your device forwards all of its requests to the proxy on your development machine. The proxy makes requests on behalf of your device, so requests to your customized local domain are properly resolved.
Now access custom domains on your Android device just like on the development machine.
If your web server is running off of a non-standard port, remember to specify the port when requesting the content from your Android device. For example, if your web server is using the custom domain microsoft-edge.devtools on port 7331, when you view the site from your Android device you should be using the URL microsoft-



Feedback
Was this page helpful? 
Remotely debug Android WebViews
Article • 11/07/2024
Debug Android WebViews in your native Android apps using Microsoft Edge Developer Tools, as follows:
 Turn on Android WebView debugging in your native Android app; debug Android WebViews in Microsoft Edge DevTools.
To display the list of the Android WebViews with debugging turned on, go to edge://inspect.
Debug Android WebViews in the same way you debug a webpage through remote debugging.
Details are below.
On Android 4.4 (KitKat) or later, use DevTools to debug WebView content in native Android apps.
Android WebView is not related to Microsoft Edge WebView2.
Configure Android WebViews to debug
Android WebView debugging must be turned on within your app. To turn on Android WebView debugging, run the setWebContentsDebuggingEnabled static method on the WebView class.
Javaif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    WebView.setWebContentsDebuggingEnabled(true);
}The setting applies to all of the Android WebViews of the app.


Open an Android WebView in DevTools
To display a list of the Android WebViews with debugging turned on that run on your device, go to edge://inspect.
To start debugging, under the Android WebView you want to debug, click inspect. Use DevTools in the same way that you use a remote browser tab.
Troubleshoot
If your Android WebViews aren't displayed on the edge://inspect page: Verify that Android WebView debugging is turned on for your app.
On your device, open the app with the Android WebView you want to debug.


Feedback
Was this page helpful? 
Remotely debug Surface Duo emulators
Article • 06/14/2023
In this article, you walk through the process of remotely debugging your web content in the Microsoft Edge app on a Surface Duo emulator from a desktop instance of Microsoft Edge. For information on debugging on a Surface Duo device, follow our guide for remote debugging Android devices.
Before you begin
 Install the Surface Duo SDK before running the Surface Duo emulator. See Get the Surface Duo SDK.
Step 1: Go to edge://inspect

Step 2: Launch the Surface Duo emulator
 Launch the Surface Duo emulator. The emulator displays two different screens running on the emulator:

Step 3: Load your web content in Microsoft Edge on the Surface Duo emulator
1. On either screen, swipe up on the Favorites Tray of the Surface Duo emulator to display the Apps Drawer.
2. Click Edge to launch the Microsoft Edge app:

3. In the Microsoft Edge app, go to the website or app that you want to debug.
Step 4: Debug your web content from the Surface Duo emulator
1. Switch back to the desktop instance of Microsoft Edge.
The edge://inspect page now shows the SurfaceDuoEmulator with a list of the open tabs or PWAs that are running on the Surface Duo emulator:

2. From the list of open tabs running on the emulator, click inspect on the tab that has the web content to be debugged. DevTools opens in a new window.
3. Click Toggle Screencast () to view the web content from your Surface Duo emulator in the DevTools window.
You can now use the Microsoft Edge DevTools to debug your web content on the Surface Duo emulator:

Troubleshooting
If SurfaceDuoEmulator isn't displayed on the edge://inspect page, try opening or closing tabs in the Microsoft Edge app	 on the Surface Duo Emulator.
For additional troubleshooting steps, see troubleshooting section for Android devices.
How the hinge impacts the layout of your web content
If you span the Microsoft Edge app across both screens in the emulator, the screencast will reflect the new size of the app but not the hinge.
To understand how the hinge impacts the layout of your web content, use the Surface Duo emulator instead of the screencast.
Additional Resources
The web is a great platform for the new class of foldable and dual-screen devices, because you can write your HTML, CSS, and JavaScript once, and have it look great across single-screen, dual-screen, and foldable devices. See the following additional resources to get started building web content for these new devices.
 Surface Duo developer documentation - Documentation for creating apps on dualscreen devices.
 Web Platform Primitives for Enlightened Experiences on Foldable Devices Microsoft Edge web platform explainer for new APIs, to build web experiences on foldable and dual-screen devices.
 How to build dual-screen experiences for the website and web apps - Recording of Microsoft 365 Developer Day session.

Feedback
Was this page helpful? 
Remotely debug Windows devices
Article • 03/28/2023
Remote debug live content on a Windows 10 or later device from your Windows or macOS computer.
This tutorial teaches you the following tasks:
 Set up your Windows device for remote debugging and connect to it from your development machine.
 Inspect and debug live content on your Windows device from your development machine.
 Screencast content from your Windows device onto a DevTools instance on your development machine.
Step 1: Set up the host (debuggee machine)
The host or debuggee machine is the Windows 10 or later device that you want to debug. It may be a remote device that is hard for you to physically access or it may not have keyboard and mouse peripherals, making it difficult to interact with the Microsoft Edge DevTools on that device.
To set up the host (debuggee) machine:
1. Install and configure Microsoft Edge
2. Install the Remote Tools for Microsoft Edge (Beta) from the Microsoft Store
3. Activate Developer Mode and enable Device Portal
Install and configure Microsoft Edge
1. If you haven't already, on the Windows 10 or later device that you want to debug, install Microsoft Edge from this page.
2. If you're using a pre-installed version of Microsoft Edge on the host (debuggee) machine, verify that you have Microsoft Edge (Chromium) and not Microsoft Edge (EdgeHTML). A quick way to check is to load edge://settings/help in the browser and confirm that the version number is 75 or higher.
3. Go to edge://flags in Microsoft Edge.
4. In Search flags, type in Enable remote debugging through Windows Device Portal. Set that flag to Enabled. Then, click the Restart button to restart Microsoft Edge.

Install the Remote Tools for Microsoft Edge (Beta)
Install the Remote Tools for Microsoft Edge (Beta) from the Microsoft Store.
The Get button for the Remote Tools for Microsoft Edge (Beta) may be disabled if you are on Windows 10 or later version 1809 or earlier. To set up the host (debuggee) machine, it must be running Windows 10 version 1903 or later. Update the host (debuggee) machine to acquire the Remote Tools for Microsoft Edge (Beta).
Launch the Remote Tools for Microsoft Edge (Beta) permissions dialog in the app. You can now close the Remote Tools for Microsoft Edge (Beta) and you don't need to have it open for future remote debugging sessions.
Activate Developer Mode and enable Device Portal
If you are on a WiFi network, make sure the network is marked as either Domain or
Private. You can verify the state by opening the Windows Security app, selecting Firewall & network protection and checking if your network is listed as a Domain network or Private network.
If your network is listed as Public, go to Settings > Network & Internet > Wi-Fi, click on your network, and toggle the Network profile button to Private.
Now, open the Settings app. In Find a setting, enter Developer settings and select it.
Toggle on Developer Mode. You can now turn on the Device Portal by setting Turn on remote diagnostics over local area network connections to On. You can then optionally turn Authentication on so that the client (debugger) device must provide the correct credentials to connect to this device.
If Turn on remote diagnostics over local area network connections. was previously turned on, you must turn it off and turn it on again for Device Portal to work with the Remote Tools for Microsoft Edge (Beta). If a For developers section isn't displayed in Settings, Device Portal may already be turned on, so try restarting the Windows 10 or later device instead.

Note the machine IP address and connection port that are displayed under Connect using:. The IP address in the image below is 192.168.86.78 and the connection port is

You enter the information on the client (debugger) device in the next section. Open tabs in Microsoft Edge and Progressive Web Apps (PWAs) on the host (debuggee) machine that you want to debug from the client (debugger) machine.
Step 2: Set up the client (debugger machine)
The client or debugger machine is the device you want to debug from. This device may be your daily development machine, or it may just be your PC or MacBook when working from home.
1. To set up the client (debugger) machine, install Microsoft Edge from this page if you haven't already.
2. If you're using a pre-installed version of Microsoft Edge on the host (debuggee) machine, verify that you have Microsoft Edge (Chromium) and not Microsoft Edge (EdgeHTML). A quick way to check is to load edge://settings/help in the browser and confirm that the version number is 75 or higher.
3. Go to the edge://inspect page in Microsoft Edge. By default, you should be on the Devices section.
4. Under Connect to a remote Windows device, enter the IP address and the connection port of the host (debuggee) machine in the text box following this pattern: http://IP address:connection port.
5. Click Connect to Device.

6. If you set up authentication for the host (debuggee) machine, you are prompted to enter the Username and Password for the client (debugger) machine to connect successfully.
Using https instead of http
If you want to connect to the host (debuggee) machine using https instead of http:
1. Go to http://IP address:50080/config/rootcertificate in Microsoft Edge on the client (debugger) machine. This automatically downloads a security certificate named rootcertificate.cer.
2. Select rootcertificate.cer. This opens the Windows Certificate Manager tool.
3. Click Install certificate..., make sure Current User is turned on, and then click Next.
4. Click Place all certificates in the following store and click Browse....
5. Select the Trusted Root Certification Authorities store and then click OK.
6. Click Next and then click Finish.
7. If prompted, confirm that you want to install this certificate to the Trusted Root Certification Authorities store.
8. Now, when connecting to the host (debuggee) machine from the client (debugger) machine using the edge://inspect page, you must use a different connection port value. By default, for desktop Windows, the Device Portal uses 50080 as the
connection port for http. For https, the Device Portal uses 50043 so follow this
pattern: https://IP address:50043 on the edge://inspect page. Read more about the default ports used by Device Portal.
Default ports
The default port for http is 50080 and the default port for https is 50043, but this isn't always the case, because Device Portal on desktop claims ports in the ephemeral range (>50,000) to prevent collisions with existing port claims on the device. To learn more, see the Port Settings section for Device Portal on Windows desktop.
Step 3: Debug content on the host from the client
If the client (debugger) machine successfully connects to the host (debuggee) machine, the edge://inspect page on the client now displays a list of the tabs in Microsoft Edge and any open PWAs on the host.

Determine the content you want to debug, and then click inspect. The Microsoft Edge DevTools opens in a new tab and screencast the content from the host (debuggee) machine to the client (debugger) machine. You can now use the full power of Microsoft Edge DevTools on the client for content running on the host. Learn more about how to use the Microsoft Edge DevTools here.

Inspect elements
For example, try inspecting an element. Go to the Elements tool of your DevTools instance on the client, and hover on an element to highlight it in the viewport of the host device.
You can also tap an element on your host device screen to select it in the Elements tool. Select Select Element on your DevTools instance on the client, and then tap the element on your host device screen.
Select Element is disabled after the first touch, so you need to turn it on again every time you want to use this feature.

Step 4: Screencast your host screen to your client device
By default, the DevTools instance on the client have screencasting turned on, which allows you to view the content on the host device in your DevTools instance on your client device. Click Toggle Screencast to turn this feature on or off.

You can interact with the screencast in multiple ways:
Clicks are translated into taps, firing proper touch events on the device.
Keystrokes on your computer are sent to the device.
To simulate a pinch gesture, hold Shift while dragging.
  To scroll, use your trackpad or mouse wheel, or fling with your mouse pointer. Notes about screencasts:
 Screencasts only display page content. Transparent portions of the screencast represent device interfaces, such as the Microsoft Edge Address bar, the Windows 10 or later taskbar, and the Windows 10 or later keyboard.
 Screencasts negatively affect frame rates. Disable screencasting while measuring scrolls or animations to get a more accurate picture of the performance of your page.
 If your host device screen locks, the content of your screencast disappears. Unlock your host device screen to automatically resume the screencast.
Known issues
 The Event Listeners pane in the Elements tool is blank on Windows 10 version
1903. The team plans to fix the Event Listeners pane in a servicing update to Windows 10 version 1903.
 The Cookies pane in the Application panel is blank on Windows 10 version 1903. The team plans to fix the Cookies pane in a service update to Windows 10 version 1903.
 The Audits tool, the 3D View tool, the Emulated Devices section in Settings, and the Accessibility tree pane in the Elements tool aren't currently working as expected.
 The file explorer doesn't launch from the DevTools in the Sources tool or in the Security panel when you remote debug.

Feedback
Was this page helpful?  Yes  No

Accessibility-testing features
Article • 02/07/2024
This article lists typical accessibility aspects to test for webpages, and the corresponding features in Microsoft DevTools.
Alt-text for images
ﾉ Expand table
Accessibility aspect to checkFeature of DevToolsArticleVerify that images have alt textIssues tool > Accessibility section of reportVerify that images have alt text in
Automatically test a webpage for accessibility issuesVerify that images have alt textLighthouse tool > Issues about alt-textTest accessibility using LighthouseKeyboard support
ﾉ Expand table
Accessibility aspect to checkFeature of DevToolsArticleVerify keyboard supportInspect tool >
Accessibility section of overlayUse the Inspect tool to detect accessibility issues by hovering over the webpage and Analyze HTML pages using the Inspect toolVerify keyboard supportTab, Shift+Tab, and Enter keysCheck for keyboard support by using the Tab and Enter keysVerify keyboard support:
verify that focus is indicatedInspect tool, Styles tab, and Sources toolAnalyze the lack of indication of keyboard focusVerify keyboard support: verify that form buttons can be used with the keyboardInspect tool, DOM tree in the Elements tool, and
Event Listeners tabAnalyze the lack of keyboard support in a formVerify keyboard support:
verify Tab key orderElements tool >
Accessibility tab >Test keyboard support using the
Source Order ViewerAccessibility aspect to checkFeature of DevToolsArticleSource Order ViewerVerify keyboard supportLighthouse tool > Issues about keyboard supportTest accessibility using LighthouseText contrast
ﾉ Expand table
Accessibility aspect to checkFeature of DevToolsArticleVerify that text has enough contrast (automatically, for the entire page)Issues tool > Accessibility section of reportVerify that text colors have enough contrast in Automatically test a webpage for accessibility issuesVerify that text has enough contrastElements tool > Styles tab
> Color PickerTest text-color contrast using the
Color PickerVerify that text has enough contrastInspect tool > Accessibility section of overlay >
Contrast rowUse the Inspect tool to detect accessibility issues by hovering over the webpage and Analyze HTML pages using the Inspect toolVerify that text has enough contrast: in the hover stateElements tool > Styles tab
> Toggle Element State (shows Force element state checkboxes)Verify accessibility of all states of elementsVerify that text has enough contrast: with dark theme
(dark mode) and light
themeRendering tool > Emulate CSS media feature preferscolor-schemeCheck for contrast issues with dark theme and light themeVerify that text has enough contrast (automatically, for the entire page)Lighthouse tool > Issues about text contrastTest accessibility using LighthouseScreen reader support
ﾉ Expand table
Accessibility aspect to checkFeature of DevToolsArticleVerify screen reader support: Verify that input fields have labelsIssues tool >
Accessibility section of reportVerify that input fields have labels in Automatically test a webpage for accessibility issuesVerify screen reader supportInspect tool >
Accessibility section of overlay > Name and
RoleUse the Inspect tool to detect accessibility issues by hovering over the webpage and Analyze HTML pages using the Inspect toolVerify screen reader supportElements tool >
Accessibility tab >
Accessibility TreeCheck the Accessibility Tree for keyboard and screen reader support, and Test accessibility using the Accessibility tabVerify screen reader supportLighthouse tool > Issues about screen reader supportTest accessibility using LighthouseVision deficiencies
ﾉ Expand table
Accessibility aspect to checkFeature of DevToolsArticleVerify that the webpage is usable by people with color blindnessRendering tool > Emulate vision deficiencies dropdown listVerify that a page is usable by people with color blindnessVerify that the webpage is usable with blurred visionRendering tool > Emulate vision deficiencies dropdown listVerify that a page is usable with blurred visionVerify that the webpage is usable with UI animation turned off
(reduced motion)Rendering tool > Emulate CSS media feature prefersreduced-motionVerify that a page is usable with UI animation turned offVerify that the webpage is usable by people with vision deficienciesLighthouse tool > Issues about vision deficienciesTest accessibility using
LighthouseUsable when narrow
ﾉ Expand table
Accessibility aspect to checkFeature of
DevToolsArticleVerify that the webpage layout is usable when narrowDevice
Emulation toolVerify that the webpage layout is usable when narrow, and Emulate mobile devices (Device
Emulation)See also
Navigate DevTools with assistive technology
Resources for accessibility testing
Accessibility principles and best practices at MDN
Screen reader at MDN

Use the Inspect tool to detect accessibility issues by hovering over the webpage
Article • 12/07/2023
The Inspect tool displays information about individual elements as you hover over the rendered webpage, including accessibility information. In contrast, the Issues tool automatically reports issues for the entire webpage.
The Inspect tool button () is in the upper-left corner of DevTools. When you click the Inspect tool button, the button turns blue, indicating that the Inspect tool is active.
When the Inspect tool is active, hovering over any element on the rendered webpage displays the Inspect overlay. This overlay displays general information and accessibility information about that element. The Accessibility section of the Inspect overlay displays information about text-color contrast, screen reader text, and keyboard support:

The main article about the Inspect tool is Analyze HTML pages using the Inspect tool.
The present article focuses on the accessibility features of the Inspect tool.
Check individual elements for text contrast, screen reader text, and keyboard support
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue):

4. Hover over any element in the rendered demo webpage. The Inspect tool shows an information overlay next to the element within the rendered webpage. The information overlay contains an Accessibility section:

The Accessibility section contains the following information:
 Contrast defines whether an element can be understood by people with low vision. The contrast ratio as defined by the WCAG Guidelines indicates whether there is enough contrast or not.
A green check mark icon indicates enough contrast.
An orange exclamation-point icon indicates that the contrast is insufficient.
Name and Role are what assistive technology such as screen readers will report about the element.
The Name is the text content of the hovered element. For the element <a href="/">About Us</a>, the Name that's shown in the Inspect tool is About Us. The Role of the element. This is usually the element name, such as article, img , link, or heading. The div and span elements are referred to as generic.
 Keyboard-focusable indicates whether users can reach the element regardless of input device.
A green check mark icon indicates that the element is keyboard-focusable. A gray circle with diagonal line indicates that the element isn't keyboardfocusable.
Additional information in the Inspect overlay
The top part of the Inspect overlay, which is above the Accessibility section, lists the following details of the element.
 Layout type. If the element is positioned using a flexbox or grid, an icon () is displayed.
Name of the element, such as h1, h2, or div.
The dimensions of the element in pixels.
The color as a color swatch (or a small, colored square) and as a string (such as
#336699).
Font information, such as size and font families.
Margin and padding in pixels.
See also
Analyze HTML pages using the Inspect tool
Inspect a node
Check text-color contrast in the default state using the Inspect tool

Test accessibility using Lighthouse
Article • 11/07/2024
You can use Lighthouse from within DevTools to audit the accessibility of a page and generate a report. You can use the Lighthouse tool to determine:
Whether a page is properly marked up for screen readers.
Whether the text elements on a page have sufficient contrast ratios using the Color Picker. See Test text-color contrast using the Color Picker.
The Lighthouse tool provides links to content hosted on third-party websites. Microsoft is not responsible for and has no control over the content of these sites and any data that may be collected.
To audit a page using the Lighthouse tool:
1. Go to the URL that you want to audit.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Lighthouse tab. If that tab isn't visible, click the More tools () button.
The Lighthouse tool configuration options are displayed:

4. Set the following configuration options:
For Mode, select Navigation.
For Device, select Mobile if you want to simulate a mobile device. This option changes your user agent string and resizes the viewport. This option can affect the audit results.

5. Click the Analyze page load button.
Lighthouse analyzes the page, and then DevTools displays a report. The report shows a score for the page's accessibility, out of 100. The report also gives tips on how to improve the accessibility of the page:

6. Select an item in the report. The item is expanded to show more information:

7. Click the Learn ... link. Documentation about the issue is displayed:


Feedback
Was this page helpful?  Yes  No
Navigate DevTools with assistive technology
Article • 03/28/2023
This article helps you use DevTools through the keyboard and through assistive technology such as screen readers. This guide walks you through the tools and tabs which are the most accessible, and highlights issues you may encounter.
For DevTools features related to improving the accessibility of a webpage, see Accessibility-testing features.
Tabbed tool panels containing tabs and pages
For the terminology of tabs, tools, and panels, see Tabbed tool panels containing tabs and pages in Overview of DevTools.
Technically, the tabs are an ARIA tablist.
Keyboard shortcuts
For the default keyboard shortcuts for DevTools, see Keyboard shortcuts. Be sure to bookmark it and refer back to it as you explore the different tools.
Open DevTools
In Microsoft Edge, you can open DevTools by using the mouse or keyboard, in any of the following ways. Which tool is opened depends on how you open DevTools.
Main ways:
ﾉ Expand table
ActionResulting toolRight-click any item on a webpage, and then select Inspect.The Elements tool, with the DOM tree expanded to show the right-clicked page element.Press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).The previously used tool, or the Welcome tool.Press F12.The previously used tool, or the Welcome tool.Additional ways:
ﾉ Expand table
ActionResulting toolOn the Microsoft Edge toolbar, select Settings and more (	) > More tools > Developer tools.The previously used tool, or the Welcome tool.Press Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).The Console tool.Press Ctrl+Shift+C (Windows, Linux) or Command+Option+C (macOS).The Elements tool, with the DOM tree expanded to show the <body> element.Press Shift+F10 to open the right-click menu. To select the Inspect command, press Up Arrow and then Enter.The Elements tool, with the DOM tree expanded to show the <html> element.Press Tab or Shift+Tab to put focus on a page element. Then press Shift+F10 to open the right-click menu. To select the Inspect command, press Up Arrow and then Enter.The Elements tool, with the DOM tree expanded to show the focused page element.Navigate between tools
You can move among the tools by using the keyboard navigation keys or by using the Command Menu.
Navigate by keyboard
 With DevTools open, press Ctrl+] (Windows, Linux) or Command+] (macOS) to move focus to the next tool on the Activity Bar.
 Press Ctrl+[ (Windows, Linux) or Command+[ (macOS) to move focus to the previous tool on the Activity Bar.
 Press Tab or Shift+Tab repeatedly until focus moves to the tabs of the Activity Bar or Quick View toolbar, and then use the arrow keys to move among the tools.
Known issues:
 Some tools, such as the Console and Performance tools, may move focus into the tool's content area as soon as the tool is selected. This may make navigating by arrow keys difficult.
 The name of the selected tool is announced, but only after announcing the focused content in the tool. This sequence of announcements may make it easy to miss the name of the tool.
Navigate by Command Menu
To select a specific tool, use the Command Menu. In the Command Menu, a tool is indicated as either a Panel or Quick View item.
1. With DevTools open, press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
The Command Menu is a fuzzy-search autocomplete combobox.
2. Type the name of a tool, and then use the Down Arrow on the keyboard to navigate to the correct option.
3. Press Enter to run a command.
To open the Elements tool:
1. Open the Command Menu.
2. Start typing elements, select the Show Elements command, and then press Enter.
Opening a tool this way puts focus in the content area of the tool. In the case of the Elements tool, focus moves into the DOM Tree.
The Elements tool
Inspect an element on the page
1. Go to the element you want to inspect, using the cursor in the screen reader.
2. Right-click the element and then select the Inspect option. This opens the Elements tool and focuses the element in the DOM Tree.
The DOM Tree is laid out as an ARIA tree. For an example, see Navigate the DOM Tree with a keyboard.
Copy the code for an element in the DOM Tree
1. Right-click a node in the DOM Tree.
2. Expand the Copy option.
3. Select Copy outerHTML.
Known issues:
 Copy outerHTML often doesn't select the current node, but instead selects the parent node. However, the contents of the element should still be in the copied
outerHTML.
Modify the attributes of an element in the DOM Tree
When focus is on a node of the DOM Tree, press Enter to edit the node.
Press Tab to move between attribute values. When you hear "space", you're inside of an empty text input, and can type a new attribute value.
 Press Ctrl+Enter (Windows, Linux) or Command+Enter (macOS) to accept the change and hear the entire contents of the element.
Known issues:
 When you type into the text input, you get no feedback. If you make a typo and use the arrow keys to explore your input, you also get no feedback. The easiest way to check your work is to accept the change, then listen for the entire element to be announced.
Edit the HTML of an element in the DOM Tree
When focus is on a node of the DOM Tree, press Enter to edit the node.
Press Tab to move between attribute values. When you hear the name of the element, for instance, h2, you're inside of a text input, and you can change the type of the element.
 Press Ctrl+Enter (Windows, Linux) or Command+Enter (macOS) to accept the change.
For example, when you type h3 and then press Ctrl+Enter (Windows, Linux) or Command+Enter (macOS), the start and end tags of the h3 element change.
Tabs in the Elements tool
The Elements tool contains additional tabs for inspecting things like the CSS applied to an element, or the relevant place in the accessibility tree.
 When focus is on the DOM Tree, press Tab until you hear that the Styles pane is selected.
 Press Right Arrow to explore other available tabs.
The DOM Tree turns elements with href attributes into focusable links, so you may need to press Tab more than once to reach the Styles pane.
Known issues:
The DOM Breakpoints and Properties tabs aren't keyboard-accessible.
Styles pane
The Styles pane has controls to filter styles, toggle element states (such as :active and :focus), toggle classes, and add new classes. There's also a powerful style inspection tool to explore and modify styles currently applied to the element that has focus in the DOM Tree.
The key concept to understand about the Styles pane is that it only shows styles for the currently selected node in the DOM Tree. For example, suppose you're done inspecting the styles of a <header> node, and now you want to look at the styles for a <footer> node. To do that, you first need to select the <footer> node in the DOM Tree.
You might find it faster to use the Inspect workflow to inspect a node that is in the general vicinity of the footer node (such as a link within the footer), which focuses the
DOM Tree, and then use your keyboard to navigate to the exact node in which you're interested.
Navigate the Styles pane
Because all of the style tools connect in one way or another back to the Styles pane, it makes sense to become an expert in this tool first.
 With focus on the Styles pane, press Tab to move focus inside and explore the contents.
 Press Tab until the first style becomes active. If you're using a screen reader, this first style is announced as element.style {}.
 Press Down Arrow to navigate the list of styles in order of specificity. A screen reader announces each style starting with the name of the CSS file, the line number on which the style appears, and the name of the style. For example, main.css:233 .card__img {}.
Press Enter to inspect a style in more detail. Focus begins on an editable version of the style name.
 Press Tab to move between editable versions of each CSS property and the corresponding values. At the end of each style block is a blank editable text field which you can use to add additional CSS properties.
 You can continue to press Tab to move through the list of styles, or press Escape to exit the mode and go back to navigating by arrow keys.
For additional shortcuts, see Styles pane keyboard reference.
Known issues:
 If you use the Filter editable text field, you can't navigate the list of styles.
Toggle element state
To toggle the state of an element, such as :active or :focus:
1. Go to the Styles pane, and then press Tab until the Toggle Element State button has focus.
2. Press Enter to display the Force element state section, which contains checkboxes.
3. Press Tab until the first state, :active, has focus.
4. Press Spacebar to select (enable) the checkbox. If the currently selected element in the DOM Tree has an :active style, it is now applied.
5. Press Tab to explore all of the available states.
Add an existing class
The Element Classes button is next to the Toggle Element State button. To move the focus to the Element Classes button, press Tab, and then press Enter. Focus moves into an edit text field labeled Add new class.
The Element Classes button is primarily used for adding existing classes to an element.
For example, if your stylesheet contained a helper class named .clearfix, you can press . inside of the edit text field to display a suggestion list of classes and use the Down Arrow to find the .clearfix suggestion. Or type the class name out yourself and press Enter to apply it.
Add a new style rule
Adjacent to the Element Classes button is the New Style Rule button. To move the focus to it, press Tab and then press Enter. Focus moves into an editable text field inside of the style inspector. The initial text content of the field is the tag name of the element that is selected in the DOM Tree. You can type any class name you want into this field and then press Tab to assign CSS properties to it.
Computed tab
With focus on the Computed tab, press Tab to move focus inside and explore the contents. Within the Computed tab there are controls for exploring which CSS properties are actually applied to an element in order of specificity.
Explore all computed styles
Press Tab until you reach the collection of computed styles. Computed styles are presented as an ARIA tree. Expanding a listbox reveals which CSS selectors are applying the computed style. These selectors are organized by specificity. A screen reader announces the computed value, which CSS selector is currently matching, the file name of the stylesheet that contains the selector, and the line number for the selector.
Known issues:
 If you use the Filter text field, you're no longer able to inspect styles.
Event Listeners tab
To inspect the event listeners that are applied to an element, select the Elements tool and then select the Event Listeners tab (grouped with the Styles tab).
When focus is on the Styles tab, press Right Arrow to navigate to the Event Listeners tab.
Explore event listeners
Event listeners are presented as an ARIA tree. You can use the arrow keys to navigate them. A screen reader announces the name of the DOM object that the event listener is attached to, as well as the file name where the event listener is defined and the line number.
Accessibility tab
Select the Tab key to move around within the Accessibility tab in the Elements tool.
The Accessibility tab is near the Styles tab. On the Accessibility tab, there are controls for exploring the accessibility tree, the ARIA attributes applied to an element, and the computed accessibility properties. See Test accessibility using the Accessibility tab.
Accessibility Tree
The Accessibility Tree is presented as an ARIA tree where each treeitem corresponds to an element in the DOM. The tree announces the computed role for the selected node. Generic elements like div and span are announced as "GenericContainer" in the tree. Use the arrow keys to traverse the tree and explore parent-child relationships.
Known issues:
 The type of ARIA tree used by the Accessibility tab may not be properly exposed in Microsoft Edge for macOS screen readers like VoiceOver. Subscribe to Chromium issue #868480 to be informed about progress on this issue.  Each of the ARIA Attributes and Computed Properties sections are marked up as an ARIA tree, but each section doesn't currently have focus management, and isn't keyboard-operable.
Persisting the Inspect tool's tooltip and grid color overlay
When you click the Inspect tool button and move around in the rendered webpage, the Inspect tooltip changes. To keep the current tooltip and grid color overlay displayed, press and hold Ctrl+Alt (Windows, Linux) or Ctrl+Option (macOS) while you move around in the rendered webpage.
This technique can be helpful when using a screen magnifier or other assistive technologies. If you don't make the Inspect tool's tooltip persist, the hover overlay constantly changes when you use the Inspect tool ().
See Analyze pages using the Inspect tool.
The Lighthouse tool
Lighthouse runs a series of tests against a site to check for common issues related to performance, accessibility, SEO, and a number of other categories.
Configure and generate a report
1. When the Lighthouse tool is first opened in DevTools, focus is placed on the Generate report button. By default, the form is configured to run reports for every category using mobile emulation on a simulated 3G connection.
2. To change the report settings, use Shift+Tab to put focus on Lighthouse settings, or navigate back in Browse mode.
3. When you're ready to run the report, navigate back to the Generate report button and press Enter.
4. Focus moves into a modal window with a Cancel button which allows you to exit the audit. You may hear a series of earcons as the audit runs and refreshes the page multiple times.
Known issues:
The different sections of the configuration form aren't currently marked up with a fieldset element. It may be easier to navigate them in Browse mode to figure out
which controls are associated with each section.
 There is no earcon or live region announcement when the audit is finished running. Generally the audit takes about 30 seconds, after which you should be able to navigate to the results. Using Browse mode may be the easiest way to reach the results.
Navigate the Lighthouse report
The Lighthouse report is organized into sections that correspond with each of the audit categories. The report opens with a list of scores for each category. These scores are also links which you can use to skip to the relevant sections. Within each section are expandable details elements, which contain information relating to passed or failed audits. By default, only failing audits are shown. Each section ends with a final details element which contains all of the passed audits.
To run a new audit, use Shift+Tab to exit the report and select the Generate report button.
See also


Feedback
Was this page helpful?  Yes  No
Track which element has focus
Article • 12/07/2023
To indicate at all times which element has focus, use a Live Expression in the Console tool. This is helpful because when you're testing the keyboard navigation accessibility of a page, when you navigate the rendered webpage by pressing Tab or Shift+Tab, the focus ring indicator in the webpage sometimes disappears, because the element that has focus is hidden or out of view.
Use a Live Expression to determine which element has focus
To track the Tab-focused element in the Console in DevTools by using a Live Expression:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. If the Quick View toolbar isn't visible in DevTools, press Esc to show the Quick View panel.
4. On the Quick View toolbar, select the Console tab:

5. Click the Create live expression () button. The Live Expression section appears:

6. In the Expression text box, type the following: document.activeElement
7. Click outside of the Expression text box to save the Live Expression. The Live
Expression is evaluated, and the result is displayed below the Expression text box:

8. Click in the rendered webpage to put focus on it, and then press Tab or Shift+Tab to move focus around in the rendered webpage.
The value that's displayed below document.activeElement is the result of the expression. As you press Tab to move among elements of the webpage, the document.activeElement value changes:

The JavaScript code in a Live Expression is evaluated in realtime and the result displayed below the code always represents the current expression value.
The Live Expression value is displayed in the Console as a text preview only. DOM nodes are rendered by using their tag names and optional class or ID attributes. For example:
 An anchor element <a href="#alpacas">Alpacas</a> is displayed a#alpacas in the Live Expression result.
 A text box <input> is displayed input in the Live Expression result.
To indicate which element has focus in the rendered webpage, use the Elements tool as described in the next section.
Open the element with focus in the Elements tool
The result of the document.activeElement Live Expression is only a preview of the DOM element that has focus. To know exactly which element has focus in the rendered webpage, use the Elements tool:
1. In the Console tool, hover over the result of the Live Expression (below the document.activeElement Live Expression).
The focused element is highlighted in the rendered webpage:

2. Right-click the result of the Live Expression, and then select Reveal in Elements panel.
In the Elements tool, the DOM tree automatically expands and selects the DOM node that's currently focused:

The active element is the DOM tree representation of the webpage item that you navigated to by pressing Tab or Shift+Tab.
Create a reference to the focused element in the Console tool
To manipulate the focused element in the Console tool, create a reference to it:
1. In the Console tool, hover over the result of the Live Expression (below the document.activeElement Live Expression).
2. Right-click the result of the Live Expression, and then select Store outerHTML as global variable.
A new variable name such as temp1 appears in the Console tool, and its value is rendered below:

example, run temp1.value = "cat" to change the value of the focused element to "cat":

See also


Feedback
Was this page helpful?  Yes  No
Automatically test a webpage for accessibility issues
Article • 07/09/2024
The Issues tool includes an Accessibility section that automatically reports issues such as missing alternative text on images, missing labels on form fields, and insufficient contrast of text colors. By default, the Issues tool is open in the Quick View panel at the bottom of DevTools. This article uses the accessibility-testing demo webpage to step through using the Accessibility section of the Issues tool.
There are several ways to open the Issues tool, such as:
Click the Issues counter () in the upper right of DevTools.
In the Elements tool, in the DOM tree, press Shift while clicking a wavy underline on an element.
 In the Command Menu, type issues, select Show Issues, and then press Enter.
View the Accessibility section of the Issues tool
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
In the upper right, the Issues counter () appears. The Issues counter is a speech-bubble icon along with the number of automatically detected issues.

3. Refresh the page, because some issues are reported based on network requests.
Notice the updated count in the Issues counter.
4. Click the Issues counter. The Issues tool opens in the Quick View panel at the bottom of DevTools:

5. On the Issues tab, expand the Accessibility section.
Verify that input fields have labels
To check whether input fields have labels connected to them, use the Issues tool, which automatically checks the entire webpage and reports this issue in the Accessibility section.
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. In the upper right, click the Issues counter (). The Issues tool opens in the Quick View panel at the bottom of DevTools.
4. On the Issues tab, expand the Accessibility section.
5. Expand the Warning Form elements must have labels: Element has no title attribute Element has no placeholder attribute.
6. Click the Open in Elements link.

The Elements tool opens, with the element highlighted in the DOM tree. The Styles pane displays the applied CSS rules for the element.
The following code is now displayed:
HTML<label>Search</label> <input type="search">
<input type="submit" value="go">In the above code, the label element is used incorrectly, because there is no connection between the label element and a particular input element. To connect the label element to a specific input element, use any of the following options:
Nest the input element within the label element.
In the label element, add a for attribute that matches an id attribute of the input element.
There's also another way to test for lack of connections between elements:
1. In the Elements tool, select the <label>Search</label> element in the DOM tree.
On the webpage, notice that focus only appears on the Search label, and not the input text box. The correct implementation would put focus on the search input text box and the Search label.
2. As an example of a correct connection, select the Other label on the donation form.
A focus-indicator box correctly appears on the input text box next to the Other label, because there are matching for and id attribute values.
3. In the Issues tool, click the Further reading to learn more about the issue. To open the link in a new tab, press Ctrl (Windows, Linux) or Command (macOS) while clicking the link:

Verify that images have alt text
Basic accessibility testing requires making sure alternative text (also called alt text) is provided for images.
To automatically check whether alt text is provided for images, use the Issues tool, which has an Accessibility section. By default, the Issues tool is open in the Quick View panel at the bottom of DevTools.
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. In the upper right of DevTools, click the Issues counter. The Issues tool opens.
4. On the Issues tab, expand the warning Images must have alternate text: Element has no title attribute. There are four instances of images that lack alt text:

Verify that text colors have enough contrast
To automatically check whether text colors have enough contrast, use the Issues tool, which has an Accessibility section. By default, the Issues tool is open in the Quick View panel at the bottom of DevTools.
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. In the upper right of DevTools, click the Issues counter. The Issues tool opens.
There might be warnings that two elements on the demo webpage don't have enough contrast.

4. Depending on your settings, the Issues tab might have a warning like Users may have difficulties reading text content due to insufficient color contrast. You can expand that warning, and then expand Affected resources. A list of elements appears with a list of elements that don't have enough contrast.
5. Click the li.high element. In the rendered webpage, the Dogs link in the Donate section is highlighted, displaying a small information overlay. This is the same overlay that appears when you hover over an element in the DOM tree in the Elements tool.

Wavy underlines in the DOM tree indicate automatically detected issues
The DOM tree in the Elements tool flags issues directly in the HTML with wavy underlines. These issues are reported by the Issues tool. When you press Shift while clicking any element with a wavy underline, the Issues tool opens.
1. In the Elements tool, in the DOM tree, press Shift while clicking the element
<input type="search">, which has a wavy line under input. The Issues tool is displayed, and shows the issue for that element.

See also
 Find and fix problems using the Issues tool

Feedback
Was this page helpful? 

Check for keyboard support by using the Tab and Enter keys
Article • 12/07/2023
It's important that the user interface of a webpage works when using just a keyboard, because not all users have a pointer or touch device, and not all users can see webpages. Make sure that you can use the Tab key to move the focus to each form control on a webpage, and make sure that you can use the Enter key to submit forms.
Ways to test keyboard support
You can test the usability of a webpage for keyboard users in several ways:
 By using the keyboard, particularly the Tab, Shift+Tab, and Enter keys. This approach is described in this article.
 Check for keyboard support for an individual element by using the Inspect tool. The Inspect tool's information overlay includes an Accessibility section that includes a Keyboard-focusable row. See Use the Inspect tool to detect accessibility issues by hovering over the webpage.
 Check the Issues report's Accessibility section for keyboard support issues. See Automatically test a webpage for accessibility issues.
Checking a webpage for keyboard accessibility issues
To check the accessibility-testing demo webpage for accessibility issues by using a keyboard rather than a mouse:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Use a keyboard to navigate the demo document, using the Tab or Shift+Tab keys to jump from element to element. On the demo webpage, the Tab key first moves focus to the search form in the header section.
3. Press Tab to put focus on a button, and then press Enter to click the focused button. For example, in the demo page, press Tab to put focus on the Search field, and then press Enter to submit the search. This approach produces the same result
as selecting the go button. Selecting Enter to send the Search form works correctly.
4. Press Tab again. The next element you put focus on is the first More link in the content section of the webpage, as indicated by an outline:
5. Press Tab several more times until you pass the last More link. The page scrolls up and you seem to be on an element of the page, but there's no way to tell which element it is.
6. Notice the URL in the bottom left. If you look to the bottom left of the screen (or if you use a screen reader), you realize that you are on the sidebar navigation menu with blue links, because the browser shows the URL that the Cats link points to (#cats).

7. Press Tab again, to get to the entry field in the donation form. However, you can't reach the buttons above the text box by selecting Tab. You can't use the keyboard to put focus on the 50, 100, or 200 buttons and then select them. Also, selecting Enter doesn't submit the donation form.

8. Selecting Tab again puts focus on the top navigation bar of the page, with menu buttons for Home, Adopt a Pet, Donate, Jobs, and About Us. Press Tab or Shift+Tab to put focus on a menu button, as indicated by a focus outline. Then press Enter to access that section of the webpage.

Issues found that need to be fixed
Based on the above walkthrough, we found the following issues that need to be fixed:
 When using a keyboard, the blue links of the sidebar navigation menu don't visually indicate which link has focus. See Analyze the lack of indication of keyboard focus.
 In the donation form, the amount buttons and the Donate button don't work with a keyboard. See Analyze the lack of keyboard support in a form.
 The order of the keyboard access through sections of the page isn't correct. You navigate through all the More links in the document before you reach the sidebar navigation menu. By the time the Tab key puts focus on the sidebar navigation menu, you've already traversed all the page content. The sidebar navigation menu was intended to provide easy access to the page content.
For more information on how to solve this issue, see Test keyboard support using the Source Order Viewer.
Analyze the lack of indication of keyboard focus
Article • 12/07/2023
Keyboard users need to know where they are on a webpage. When a keyboard user tabs to a link or a button, the link or button should have a visual indication that it has focus.
This visual indication is usually an outline around the focused element.
In the accessibility-testing demo webpage, the sidebar navigation menu with blue links doesn't visually indicate which link has focus, when using a keyboard. To find out why the lack of visual keyboard focus indication is confusing, try to tab to the blue links on the demo page. The blue Cats button has focus, as evidenced by the target link information that's displayed in the bottom left corner of the browser window, but there's no visual indication that focus is on that button:

Analyze the lack of focus indication by using the Sources tool
To see what CSS styles are applied to a link, such as a linked button, use the Sources tool:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage, and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
4. Hover over the blue Cats button in the page's sidebar navigation menu. The
Inspect overlay appears, and indicates that the a element is Keyboard-focusable:
But the Inspect overlay doesn't show that the element lacks a visual indication when the link has focus.
5. In the rendered webpage, click the Cats button.
The Inspect tool turns off, and the Elements tool opens, highlighting the a node in the DOM tree. The CSS rule #sidebar nav li a appears in the Styles tab, along with a link to a line number in styles.css:
Notice that the #sidebar nav li a CSS rule has a CSS property setting of outline: none, which removes the outline that browsers automatically add when you focus links using a keyboard.
The CSS file contains a CSS rule that uses the :hover pseudo-class, which is used to indicate which menu item you're on when you use a mouse: #sidebar nav li a:hover. However, the CSS file doesn't contain a CSS rule that uses the :focus pseudo-class, such as #sidebar nav li a:focus. This means that there is no CSS styles used to visually indicate which menu item you're on when you use a keyboard.

Simulate the focus state by using the Styles pane
Instead of focusing the link by using a keyboard, you can simulate the focus state by using the Styles pane:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage, and then select Inspect.
3. Click the Inspect () button in the top-left corner of DevTools, and then click the Cats link in the rendered webpage. The <a href="#cats">Cats</a> node is highlighted in the Elements tool.
4. In the Styles pane, click the Toggle element state (:hov) button. The Force element state section appears.
5. Select the :focus checkbox. The focus state is applied to the link, but the link doesn't have a visual indication of focus:

See also
 Track which element has focus
Analyze keyboard support on forms
Article • 12/07/2023
This article uses the Inspect tool and Event Listeners tab to analyze the lack of keyboard support on a demo page which has buttons that use the <div> element.
In the accessibility-testing demo webpage, in the Donate form, the amount buttons and Donate button are not accessible with a keyboard. To test this:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. In the Help us with a donation section, click in the Other text box to put focus on it.
3. Try to press Tab or Shift-Tab to move focus onto the Donate, 50, 100, or 200 buttons. The buttons are not keyboard-accessible.
Debugging the donation form requires understanding why the lack of focus styling isn't flagged as a problem with automatic testing tools like the Issues tool. In this example, the buttons are implemented using <div> HTML elements, which aren't recognized by these tools as form controls.
Analyze the lack of keyboard support by using the Inspect tool
To use the Inspect tool to analyze the lack of keyboard support on the demo page:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect.
3. Click the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
4. Hover over the 50, 100, and 200 donation button. The Inspect tool appears on the webpage, as an overlay. The keyboard-focusable row of the Inspect overlay shows that none of the donation amount buttons are keyboard-accessible, as indicated by a gray crossed-out circle:
The buttons have no name, and have a role of generic because they are <div> elements, which means that the buttons aren't accessible to assistive technology.
5. When the Inspect tool is active, on the webpage, select the Other input text box, above the Donate button. The Elements tool opens, showing the DOM tree for the webpage. The element <input id="freedonation" class="smallinput"> is selected.
HTML<div class="donationrow">
    <div class="donationbutton">50</div>
    <div class="donationbutton">100</div>
    <div class="donationbutton">200</div>
</div>
<div class="donationrow">
    <label for="freedonation">Other</label>
    <input id="freedonation" class="smallinput">
</div>
<div class="donationrow">
    <div class="submitbutton">Donate</div>
</div>The use of the <label> and <input> elements on the Other text box is valid, which means that the Other label is correctly linked with the input text box. The <input> text box is also keyboard-accessible. The rest of the form's markup uses <div> elements, which are easy to style with CSS, but have no meaning for assistive technology and aren't keyboard-accessible.
Analyze the lack of keyboard support by using the Event Listeners tab
The form's functionality is created by using JavaScript, and you can test this by checking the Event Listeners tab, as follows:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click the Other text box in the webpage, and then select Inspect. The Elements tool opens, and the <input id="freedonation" class="smallinput">


Here's a code listing of the applied JavaScript:
JavaScriptdonations.addEventListener('click', e => {   let t = e.target;   if (t.classList.contains('donationbutton')) {     if (currentbutton) { currentbutton.classList.remove('current'); }
    t.classList.add('current');     currentbutton = t;
    e.preventDefault();   }   if (t.classList.contains('submitbutton')) {     alert('Thanks for your donation!')
  }
})Using a click event listener to run code when a button is used is a good practice, because a click event fires both on mouse pointer and keyboard interaction. However, the Donate button is implemented by using a <div> HTML element, which can't be focused with the keyboard. The click event only runs when you use a mouse or another source of a click event, such as a special button that's available on some keyboards.
This is a classic example where JavaScript was added to recreate the functionality that
<button> elements provide natively. Simulating the functionality of buttons by using <div> elements ended up producing an inaccessible experience.

Test keyboard support using the Source Order Viewer
Article • 12/07/2023
The source order of a document is important for assistive technology, and can be different than the order in which elements appear on the rendered page. The source order is the order in which the elements of the webpage appear in the HTML source code. Using CSS, you can re-order page elements in a visual way, which means that it's possible for the visual and source order of a webpage to be different.
Assistive technology, such as screen readers, usually follow the source order and ignore the visual order of the elements in the webpage.
To ensure that the document has a logical order, whether it's being access with assistive technology or not, use the Source Order Viewer to label different page elements with numbers that specify the order in the source code of the document. The Source Order Viewer is in the Accessibility tab (near the Styles tab).
Analyzing the order of keyboard access through sections of the page
The accessibility-testing demo webpage has a counterintuitive tabbing order, where keyboard users access the sidebar navigation menu only after tabbing through all the More links. The sidebar navigation menu is meant to be a shortcut to reach deep into the page content. But because you need to go through the entire page before you reach the sidebar navigation menu, that navigation menu is ineffective for keyboard users.
The Tab key order on the demo page is:
1. The Search field, then the go button for the Search field.
2. The More button in the Cats section, to go to a "Cats" webpage. Then the other More buttons, for Dogs, Sheep, Horses, and then Alpacas.
3. The blue links of the sidebar navigation menu: Cats, Dogs, Sheep, Horses, and then Alpacas.
4. The donation text box in the donation form.
5. The buttons in the top navigation bar: Home, Adopt a pet, Donate, Jobs, and then About Us.
6. The browser's top-of-window interface.
The reason for the confusing Tab key order is that the order experienced when using a keyboard is determined by the source order of the document. The order experienced using a keyboard can be modified using the tabindex attribute on elements, which takes that element out of the source order.
In the source code of the document, the sidebar navigation menu appears after the main content of the webpage. CSS was used to position the sidebar navigation menu above most of the main content of the webpage.
You can test the order of page elements by using the Source Order Viewer in the Accessibility tab.
Activating and using the Source Order Viewer
To activate and use the Source Order Viewer, with the demo page:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, select the Elements tab. If that tab isn't visible, click the More tools () button.
4. In the Elements tool, to the right of the Styles tab, select the Accessibility tab.
5. In the Source Order Viewer section, select the Show source order checkbox.
In the rendered webpage, numbers appear, indicating the Tab order as controlled by the order of lines of code in the source file:

6. In the DOM tree in the Elements tool, select a major layout element, such as the section element.
The tab order numbers are now displayed on children of the section element, indicating the source order of the different children:

7. Scroll the page to see all of the numbers and check how the source order of the different elements differs from the visual order of the elements.
See also

Feedback
Was this page helpful? 

Test text-color contrast using the Color Picker
Article • 12/07/2023
People with low vision might not see areas that are very bright or very dark. Everything tends to appear at about the same level of brightness, which makes it hard to distinguish outlines and edges.
Contrast ratio measures the difference in brightness between the foreground and background of text. If your text has a low contrast ratio, then people with low vision might experience your site as a blank screen.
In DevTools, one way to view the contrast ratio of a text element is to use the Color Picker, from the Styles tab of the Elements tool. The Color Picker helps you verify that your text meets recommended contrast ratio levels.
To check the text-color contrast using the Color Picker:
1. In DevTools, open the Elements tool.
2. In the DOM Tree, select the text element that you want to inspect.
3. On the Styles tab, locate the color property that's applied to the element, and then click the color square next to the color property.
The Color Picker opens:

4. Examine the Contrast ratio section of the Color Picker:

The Contrast ratio section shows a score for the contrast ratio between the text and the background and an icon that indicates whether the contrast ratio meets recommendations:
 A red crossed-out circle means that the element doesn't meet the minimum recommendation.
 One check mark means that the element meets the minimum recommendation.
 Two check marks means that the element meets the enhanced recommendation.
5. For more information, click the Contrast ratio section to expand it:

In the visual picker at the top of the Color Picker, two lines appear, running across the visual picker, along with a circle for the current color. If the current color meets recommendations, then anything on the same side of the line also meets recommendations. If the current color doesn't meet recommendations, then anything on the same side also doesn't meet recommendations.
6. To try different colors, click within the visual picker, or select a color swatch at the bottom of the Color Picker.
See also


Feedback
Was this page helpful? 

Check text-color contrast in the default state using the Inspect tool
Article • 12/07/2023
Check text color contrast in the default state by using the Inspect tool. The Inspect tool's information overlay on the webpage has an Accessibility section that includes Contrast information.
For elements that have text, the Inspect tool's information overlay shows the following:
The contrast ratio of text versus background colors.
A green check mark icon for elements with enough contrast.
A yellow alert icon for elements that don't have enough contrast.
In some cases, contrast is affected by setting the browser to light theme or dark theme.
As an example, on the accessibility-testing demo webpage, the blue links of the sidebar navigation menu have enough contrast, but the green Dogs link in the Donation status section doesn't have enough contrast. Examine those elements by using the Inspect tool, as follows:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage, and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).
4. In the rendered webpage, hover over the blue Cats link of the sidebar navigation menu. The Inspect tool's information overlay appears. In the Accessibility section of the information overlay, a green checkmark appears on the Contrast row, indicating that this element has enough contrast of text color versus background color:

5. In the rendered webpage, in the Donation Status section, hover over the Dogs link. The Inspect tool's information overlay shows an orange exclamation point on the Contrast row, indicating that this element doesn't have enough contrast of text versus background colors:

Different options to inspect text-color contrast in DevTools
Use the following DevTools features to inspect text-color contrast:
 Use the Inspect tool (as an information overlay on the webpage) to check whether an individual page element has enough text-color contrast. The Inspect tool's information overlay includes an Accessibility section that has a Contrast information row. The Inspect tool only shows text-contrast information for the current state. This approach is described in the current article.
 The Issues tool automatically reports any color-contrast issues for the entire webpage, when text and background color don't contrast enough. This approach is described in Verify that text colors have enough contrast.
 Emulate a non-default state, such as the hover state. To do this, click the Toggle Element State (:hov) button in the Styles pane, which displays the Force element state checkboxes section. This feature is described in Verify accessibility of all states of elements.
See also
Verify accessibility of all states of elements
Use the Inspect tool to detect accessibility issues by hovering over the webpage

Verify accessibility of all states of elements
Article • 12/07/2023
Check the accessibility of all states of elements, such as text color contrast during the hover state. The Inspect tool reports accessibility issues for one state at a time. To check
accessibility of the various states of elements, in the Styles tab, use the :hov (Toggle Element State) section of the Styles pane, as described in this article.
We first show why state simulation is necessary when using the Inspect tool, and then we show how to use state simulation.
Checking text color contrast in the default state
To check the text color contrast of individual elements on a webpage, use the page overlay of the Inspect tool:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. Click the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
4. Hover over elements in the rendered webpage. The Inspect tool's information overlay appears, showing information about the element under the mouse pointer.
If contrast information is available, the Inspect overlay shows the contrast ratio and a checkbox item. A green check mark icon indicates there's enough contrast, and a yellow alert icon indicates that there's not enough contrast.
For example, the links in the sidebar navigation menu have enough contrast, as shown in the Inspect overlay:

The green Dogs list item in the Donation status section doesn't have enough contrast, and so is flagged by a warning in the Inspect overlay:

Hovering when the Inspect tool is active doesn't show the text-color contrast for the hover state
The Inspect tool's information overlay only represents a single state. Elements on the page can have different states, all of which need to be tested. For example, when you hover the mouse pointer over the menu of the accessibility-testing demo page, the menu items change color.
First, confirm that your animations run when not using the Inspect tool:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Hover over the blue menu items in the sidebar navigation menu. The color of the menu item is animated on hover:

Next, confirm that your animations don't run when using the Inspect tool:
1. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
2. Click the Inspect tool () button in the top-left corner of DevTools.
3. In the rendered webpage, hover over the blue links on the sidebar navigation menu. The animations for the menu items don't run. Instead, the menu items are displayed using color highlighting for the flexbox overlay.
When using the Inspect tool, you can't reach the hover state on elements to test the text contrast ratio, because the hover state in your styles isn't triggered.
Checking for sufficient text contrast this way isn't enough, because the elements on the page could have different states.
Use state simulation to simulate the hover state of an animated menu item
When the Inspect tool is active, instead of hovering over an animated element, you need to simulate the state of the menu item. To simulate the state of a menu item, use the state simulation in the Styles pane. The Styles pane has a :hov (Toggle Element State) button, which displays a group of checkboxes labeled Force element state.
To turn on the hover state while using the Inspect tool:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).
4. In the rendered webpage, click the blue Cats link in the sidebar navigation menu.
The Elements tool opens, with the element <a href="#cats">Cats</a> selected:
5. In the Styles panel, click Toggle Element State (:hov) button. The Force element state checkboxes section appears:

href="#cats">Cats</a>, a yellow dot appears, indicating that the element has a simulated state. The Cats menu item now appears in the webpage as if the pointer were hovering over it, and any animation that's on the menu item might run:

Check contrast of the element when hovering over it
After the simulated state is applied, you can use the Inspect tool again to check the contrast of the element when the user hovers over it, as follows:
1. Continuing from above, click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).
2. Hover over the blue Cats link in the sidebar navigation menu. The link is now light blue, because of the simulated hover state. The Inspect tool's information overlay appears, showing an orange exclamation point in the Contrast row, indicating that the contrast isn't high enough:

State simulation is also a good way to check whether you considered different user needs, such as the needs of keyboard users. By using the Force element state checkboxes, you can simulate the :focus state and check if focusable elements change to indicate that they have focus. The lack of an indicator when an element has focus is an accessibility problem. To learn more, see Analyze the lack of indication of keyboard focus.
Check for contrast issues with dark theme and light theme
Article • 12/07/2023
When testing color accessibility, there could be different display color themes that you need to test for contrast issues.
Most operating systems come with a dark mode and a light mode. Your webpage can react to this operating system setting, by using a CSS media query. You can test these themes and test your CSS media query without having to change your operating system setting, by using the Emulate CSS media feature prefers-color-scheme section in the Rendering tool.
As an example, the accessibility-testing demo webpage includes a light theme and a dark theme. The demo page inherits the dark or light theme setting from the operating system. If we use DevTools to simulate the operating system being set to a light scheme and then refresh the demo webpage, the Issues tool shows six color-contrast problems instead of two. (You might see different numbers.)
To emulate a user's selection of preferred color theme:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. Press Esc to open the Quick View panel at the bottom of DevTools.
4. In the Quick View toolbar, click the More tools () button, and then select Rendering. The Rendering tool opens in the Quick View panel.
5. Scroll down to the Emulate CSS media feature prefers-color-scheme dropdown list, and then select prefers-color-scheme: light. The webpage is re-rendered using light-theme.css:

6. In the Quick View panel, select the Issues tool, and then expand the Accessibility section. Depending on various factors, you might get Insufficient color contrast warnings. In the AFFECTED RESOURCES section of the issue, there are 6 elements that have insufficient color contrast:

On the demo webpage, the Donation status section of the page is unreadable in light mode, and needs to change:

7. In DevTools, open the Elements tool, and then press Ctrl+F on Windows/Linux or
Command+F on macOS. The Find text box appears, to search within the HTML DOM tree:

8. Enter scheme. The following CSS media queries are found, and the corresponding CSS files can now be updated:
HTML<link rel="stylesheet" href="css/light-theme.css" media="(preferscolor-scheme: light), (prefers-color-scheme: no-preference)">
<link rel="stylesheet" href="css/dark-theme.css" media="(prefers-colorscheme: dark)">See also
 Emulate dark or light schemes in the rendered page

Test accessibility using the Accessibility tab
Article • 11/07/2024
The Accessibility tab is where you view the accessibility tree, ARIA attributes, and computed accessibility properties of DOM nodes.
To open the Accessibility tab:
1. In a rendered webpage, right-click an element and then select Inspect.
DevTools opens, with the Elements tool selected. The DOM tree opens to show the element that you right-clicked.
2. In the DOM Tree, click the element that you want to inspect. You can use the arrow keys to move through the DOM tree.
3. Click the Accessibility tab, to the right of the Styles tab. You might need to first click the More tabs () button to the right of the Styles tab.

View the position of an element in the accessibility tree
The accessibility tree is a subset of the DOM tree. The accessibility tree only contains elements from the DOM tree that are relevant and useful for displaying the contents of a page through assistive technologies such as screen readers.
Inspect the position of an element in the accessibility tree from the Accessibility tab.

View the ARIA attributes of an element
ARIA attributes ensure that assistive technologies such as screen readers have all of the information that they need in order to properly represent the contents of a page.
View the ARIA attributes of an element in the Accessibility tab.

View the computed accessibility properties of an element
Some accessibility properties are dynamically calculated by the browser. These properties are displayed in the Computed Properties section of the Accessibility tab.
View the computed accessibility properties of an element in the Accessibility tab.

Computed accessibility properties are different than computed CSS properties. To learn more about how to view computed CSS properties, see View only the CSS that is actually applied to an element in CSS features reference.


Feedback
Was this page helpful?  Yes  No

Check the Accessibility Tree for keyboard and screen reader support
Article • 12/07/2023
Several DevTools features check for keyboard and screen reader support. Using the Inspect tool to check the accessibility of each page element individually can become pretty time-consuming. An alternative way to check a webpage is to use the
Accessibility Tree. The Accessibility Tree indicates what information the page provides to assistive technology such as screen readers.
The Accessibility Tree is a subset of the DOM tree, which contains elements from the DOM tree that are relevant and useful for displaying the contents of a page in a screen reader. The Accessibility Tree is in the Accessibility tab of the Elements tool (near the Styles tab).
To explore using the Accessibility Tree:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. Select the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
4. In the rendered webpage, in the Donation section, hover over the 100 button. The Inspect tool overlay appears.
5. In the rendered webpage, click the 100 button. In DevTools, the Elements tool is displayed. The DOM tree shows the <div class="donationbutton">100</div> element for the 100 button. The Styles pane shows the CSS rules that apply to the element.

6. To the right of the Styles tab, select the Accessibility tab. The Accessibility Tree for the element is displayed, and is expanded:

<div class="donationbutton">100</div> element) is a problem, because that element won't be available to keyboard users, or to users who are using assistive technology.
See also
 View the position of an element in the Accessibility Tree
Emulate vision deficiencies
Article • 12/07/2023
To better meet the needs of users with color vision deficiency (color blindness) or blurred vision, Microsoft Edge DevTools allows you to simulate blurred vision and specific color vision deficiencies. The Emulate vision deficiencies tool simulates the following categories:
ﾉ Expand table
Color vision deficiencyDetailsBlurred visionThe user has difficulty focusing on fine details.ProtanopiaThe user is unable to perceive any red light.DeuteranopiaThe user is unable to perceive any green light.TritanopiaThe user is unable to perceive any blue light.AchromatopsiaThe user is unable to perceive any color, which reduces all color to a shade of grey.The Emulate vision deficiencies tools simulate approximations of how a person with each deficiency may see your product. Each person is different, therefore vision deficiencies vary in severity from person to person. To better meet the needs of your users, avoid any color combination that may be an issue. The Emulate vision deficiencies tools don't provide a full accessibility assessment of your product, but provide a good first step to avoid problems.
Open the Rendering tool
To simulate how a person with a vision deficiency would see your webpage, use the Rendering tool:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Rendering tab. If that tab isn't visible, click the More tools () button. The Rendering tool opens.
3. Scroll down to the Emulate vision deficiencies section:

4. Click the No emulation dropdown list, and then select an option. The browser window simulates the selected vision deficiency in the rendered webpage:

Use the Command Menu
As an alternative approach, you can use the Command Menu to access the different simulations:
1. Press Ctrl+Shift+P (Windows, Linux) or Command+Shift+P (macOS) to open the Command Menu.
2. Type emulate, select the type of vision deficiency you want to simulate, and then press Enter.

See also
 Verify that a page is usable with blurred vision
Verify that a page is usable by people with color blindness
Article • 12/07/2023
To check that a webpage is usable by people with color blindness, in the Rendering tool, use the Emulate vision deficiencies dropdown list.
On the accessibility-testing demo webpage, the different donation states use color as the only means of differentiation:
Green means a high amount of donations have been received.
Yellow means a medium amount of donations have been received.
Red means a low amount of donations have been received.
But you can't expect all of your users to experience these colors as intended. By using the Emulate vision deficiencies feature of the Rendering tool, you can find out that this design isn't good enough, by simulating how people with different vision would perceive your design.
To check whether a webpage is usable by people with color blindness:
1. Open the webpage in a new window or tab, such as the accessibility-testing demo webpage.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12. DevTools opens next to the webpage. By default, the Quick View panel is open at the bottom of DevTools.
3. If the Quick View panel isn't open already, press Esc to open the Quick View panel (when focus is on DevTools). In the Quick View panel, click the More tools (+) button, and then select the Rendering tool.
4. Scroll down to the Emulate vision deficiencies dropdown list, and then select Protanopia (no red). Protanopia is reduced sensitivity to red light, making it hard to differentiate green, red, and yellow:

5. To remove the simulation, in the Emulate vision deficiencies dropdown list, select No emulation.
See also
 Emulate vision deficiencies - Defines the items in the Emulate vision deficiencies dropdown list, including Protanopia, Deuteranopia, Tritanopia, and Achromatopsia.
Verify that a page is usable with blurred vision
Article • 12/07/2023
To simulate blurred vision, in the Rendering tool, use the Emulate vision deficiencies menu. When you use this feature with the accessibility-testing demo webpage, you can see that the drop shadow on the text in the upper menu makes it hard to read the menu items.
To check whether a webpage is usable with blurred vision:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the Activity Bar, click the More tools () button, and then select Rendering.
4. In the Rendering tool, scroll to the Emulate vision deficiencies section.
5. In the Emulate vision deficiencies section, select Blurred vision:
Blurred-vision simulation reveals that on the upper menu, the text-shadow CSS property makes the text of the menu items (such as Home and Adopt a Pet) difficult to read.
6. To remove the blurred-vision simulation, in the Rendering tool, in Emulate vision deficiencies, select No emulation.
See also
 Emulate vision deficiencies

Simulate reduced motion
Article • 01/26/2024
CSS animation can be an accessibility problem. Operating systems deal with this problem by including an option to turn off animations to avoid user confusion and potential health-related problems, such as triggering seizures.
On a webpage, you can use the prefers-reduced-motion CSS media query to detect the user's preference for animations. Then wrap your animation code in a test, to conditionally run animations. For example:
cssheader {
  /* The header element is animated */   animation: slidein 1s ease-in-out; }
@media (prefers-reduced-motion: reduce) {
  /* The user prefers reduced motion */
  .header {
    /* Turn off the animation for the header element */     animation: none;
  }
}To test that your code works as expected, without having to change your operating system setting, simulate the operating system's reduced motion setting in DevTools:
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, press Ctrl+Shift+P (Windows/Linux) or Command+Shift+P (macOS) to open the Command Menu.
3. Start typing reduced, select the Emulate CSS prefers-reduced-motion option, and then press Enter:

4. Refresh the webpage and check whether your animations run.
See also
 Verify that the page is usable with UI animation turned off - A walkthrough using a demo page.
Verify that a page is usable with UI animation turned off
Article • 12/07/2023
A webpage should not show animations to a user who turned off animations in the operating system. Animations can help the usability of a product, but they can also cause distraction, confusion, or nausea.
To check that a webpage is usable with UI animation turned off (reduced motion), in the Rendering tool, use the Emulate CSS media feature prefers-reduced-motion dropdown list.
In the accessibility-testing demo webpage, when you turn off animations in the operating system, or emulate that settings by using DevTools, the webpage doesn't use smooth scrolling when you select the links of the sidebar navigation menu. This is achieved by wrapping the smooth-scrolling setting in CSS in a media query, and then using the Rendering tool to emulate the operating system setting for reduced animation.
To check whether the page is usable with animations turned off:
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage.
3. In DevTools, on the Activity Bar, select the Sources tab. If that tab isn't visible, click the More tools () button.
4. In the Sources tool's Navigation pane on the left, select styles.css. The CSS file appears in the Editor pane.
5. Press Ctrl+F on Windows/Linux or Command+F on macOS, and then enter
@media. The following CSS media query is displayed, which confirms that it is used on the webpage:
css@media (prefers-reduced-motion: no-preference) {   html {     scroll-behavior: smooth;
  }
}Emulate the operating system setting to reduce animation
To emulate the operating system setting to reduce animation:
1. Press Esc to open the Quick View panel at the bottom of DevTools. Click the More tools () button on the Quick View toolbar to see the list of tools, and then select Rendering.
2. In the Emulate CSS media feature prefers-reduced-motion dropdown list, select prefers-reduced-motion: reduced.

3. In the webpage, click the blue menu items, such as Horses or Alpacas. Now the webpage instantly scrolls to the selected section, rather than using the smoothscrolling animation.
4. In the Rendering tool, below Emulate CSS media feature prefers-reduced-motion, select No emulation to remove this setting.
Notice that the demo webpage still runs the following animations, even with the above media query and emulation settings. When building your website, make sure you fix all similar animations:
Animation of the blue menu items when you hover over them.
Animation of the circles on the More links when you hover over them.
See also
 Reduced motion simulation

Verify that the webpage layout is usable when narrow
Article • 12/07/2023
An important part of accessibility is to make sure that your website works well on a narrow viewport. Many users need to zoom the page to be able to use it, and this means that there isn't much space left.
When there isn't enough space, your multi-column layout should turn into a singlecolumn layout, with content placed in an understandable order. This means placing the most important content at the top of the page, and placing additional content further down the page.
Test narrow viewports by resizing the browser window
1. Open the accessibility-testing demo webpage in a new window or tab.
2. Right-click anywhere in the webpage and then select Inspect. Or, press F12.
DevTools opens next to the webpage:

3. Make the browser window narrower by dragging the separator between the webpage and DevTools to the left.
The rendered webpage rearranges its layout to fit the narrow viewport:

4. Use the arrow keys to scroll down the page and assess the accessibility of the content.
The two-column layout is now a single-column layout. But the top navigation bar occupies a lot of vertical space, which makes it harder to read the content. The search form is also hard to use, because it's too narrow:

Device Emulation tool to test narrow viewports
You can simulate a narrow viewport by resizing the browser window, but a better way to test the responsiveness of your design is to use the Device Emulation tool. Here are some features of the Device Emulation tool that help you find accessibility issues of any website:
 Without resizing the browser window, resize the page and test whether your CSS media queries trigger a change in layout.
 Check for dependencies that use a mouse. By default, Device Emulation assumes a touch device. This means that any functionality of your product that relies on hover interaction will not work.
Do visual testing by simulating different devices, zoom levels, and pixel ratios.
Test how your product behaves on unreliable connections or when the user is offline. Showing the most important interactions to a user on a slow connection is also an accessibility consideration.
To learn more about the Device Emulation tool, see Emulate mobile devices (Device Emulation).

Sample code for DevTools
Article • 04/16/2024
Use the Demos repo to learn how to use Microsoft Edge to develop webpages and web apps. There are various ways to view, download, and modify these demo webpages, including:
DevTools in Microsoft Edge.
Visual Studio Code, with optional DevTools.
Visual Studio, with optional DevTools.
To view the source code for a rendered demo webpage in DevTools in Microsoft Edge:
1. In a Readme page, click the Demo link. The live page opens in Microsoft Edge.
2. Right-click the demo webpage, and then select Inspect to open DevTools.
List of DevTools samples
The following demos demonstrate DevTools features.
ﾉ Expand table
Demo nameDescriptionRepo directoryLive demo pageCSS mirroring sourcemapsUsed for Update .css files from within the Styles tab (CSS mirror editing) for the DevTools extension for Visual Studio Code./css-mirroringsourcemapsdemo/n/aTODO appSimple To Do app with vanilla JavaScript. Used for screenshots in the Microsoft Edge DevTools documentation, and for Opening DevTools and the DevTools browser for the DevTools extension for Visual Studio Code./demo-to-do/My tasksDetached elementsChat-like demo. Used for Debug DOM memory leaks by using the Detached Elements tool./detachedelements/Simulate traffic3D ViewUsed for Navigate webpage layers, z-index, and DOM using the 3D View tool./devtools-3d/Microsoft Edge DevTools 3D View tool demo
Demo nameDescriptionRepo directoryLive demo pageAccessibility testingUsed for Accessibility-testing features./devtools-a11ytesting/Animal shelterDevTools issue: animating a CSS property that requires layoutIllustrates the Issues and Elements tools warning when CSS properties that require layout are animated./devtoolsanimatedproperty-issue/Animated CSS property demoConsole panel demo pagesUsed for Console overview, Log messages in the Console tool, and Fix JavaScript errors that are reported in the Console./devtoolsconsole/DevTools Console panel demo pagesDOM interaction from the Console demo pageUsed for Interact with the DOM using the Console./devtoolsconsole-dominteractions/DevTools Console tool DOM interactions demoContrast bug fixUsed for Improving contrast in Microsoft Edge DevTools: A bugfix case study./devtoolscontrast-bugfix/Testing all badges in DevTools for contrast issuesCSS ExamplesUsed for Get started viewing and changing CSS./devtools-cssget-started/CSS ExamplesDOM ExamplesUsed for Get started viewing and changing the DOM./devtools-domget-started/DOM ExamplesExplain Console errors and warnings in Copilot in EdgeGenerates errors in the Console that can then be explained by using Copilot in Edge./devtoolsexplain-error/Explaining console errors
demoInspect toolUsed for Analyze pages using the Inspect tool./devtoolsinspect/Inspect DemoDebugging
JavaScript that adds two numbersUsed for Get started debugging JavaScript./devtools-js-getstarted/Demo:
Debugging
JavaScript with
Microsoft Edge
DevToolsMemory heap snapshotUsed for Record heap snapshots using the Memory tool ("Heap snapshot" profiling type)./devtoolsmemory-heapsnapshot/n/aPerformance
Activity TabsUsed for View activities in a table, about the Performance tool's Bottom-Up, Call Tree, and Event Log tabs./devtoolsperformanceactivitytabs/Activity Tabs
DemoDemo nameDescriptionRepo directoryLive demo pageSluggish
AnimationUsed for Introduction to the Performance tool./devtoolsperformance-getstarted/Sluggish
AnimationpostMessage
Trace EventsTests postMessage trace events in the Performance tool. Used for View messages between windows, iframes, and dedicated workers in Performance features reference./devtoolspostmessageperf-timeline/postMessage Trace Events
demoCSS :target pseudo-classUsed for Support forcing the :target CSS state./devtools-targetpseudo/CSS :target pseudo-class demoHeap Snapshot
VisualizerSource code for the Heap Snapshot
Visualizer extension for DevTools./heap-snapshotvisualizer/n/aJSON dummy dataSimple JSON files. Used for View formatted JSON responses or files./json-dummydata/JSON dummy dataInspect Network
ActivityUsed for Inspect network activity./network-tutorial/Inspect Network
Activity DemoPhoto galleryUsed for The truth about CSS selector performance./photo-gallery/Photo GallerySlow CalendarSimple calendar demo app to test various DevTools features such as the Performance tool and source map support./slow-calendar/Slow CalendarWorkspacesUse for Edit files with Workspaces (Filesystem tab), in the Sources tool./workspaces/DevTools
Workspaces
DemoA few of these samples are shown below.
To Do demo
This simple To Do list webpage is used to demonstrate various DevTools features. It has an .html file, a .js file, and .css files:

Demo webpage with accessibility issues
This Animal Shelter demo webpage is useful for exploring various DevTools features, including accessibility testing features.
1. Open the Demo webpage with accessibility issues in a new window or tab.
2. Right-click anywhere in the rendered webpage and then select Inspect. DevTools opens next to the demo webpage.

Articles
These articles walk you through using this demo webpage:
 Use the Inspect tool to detect accessibility issues by hovering over the webpage One of several short articles that are derived from sections of the above article.
 Accessibility-testing features - A list of accessibility testing features of DevTools, with links to several articles that use the "Demo webpage with accessibility issues".
Source code repo
This is the source code repo and its directory which stores the files for this demo webpage:
MicrosoftEdge/Demos > devtools-a11y-testing - Contains files including:
index.html - The demo webpage, including page sections and input forms that
send data to the buttons.js JavaScript file. To view the rendered webpage, use the demo webpage link above. buttons.js - Contains the JavaScript code that's used by the demo webpage.
styles.css, light-theme.css, and dark-theme.css - CSS files that control the presentation of the demo webpage.
 Image files that are used in the demo webpage.
Demo webpage: Debugging JavaScript with DevTools
This demo webpage is useful for exploring the Sources tool, especially the JavaScript debugger.
1. Open the demo webpage Get started Debugging JavaScript with DevTools in a new window or tab.
2. Right-click anywhere in the rendered webpage and then select Inspect. DevTools opens next to the demo webpage.

Articles
These articles or article sections walk you through using this demo webpage:
 The basic approach to using a debugger in Sources tool overview. This article section briefly walks you through the steps to use the JavaScript debugger in the Sources tool, to find the bug in the demo webpage. To fix the bug, you convert the input strings to numbers before adding them.
 Get started debugging JavaScript - A more in-depth walkthrough of using the demo webpage along with the debugger, demonstrating various features of the debugger, and setting different kinds of breakpoints.
Source code repo
This is the source code repo and its directory which stores the files for this demo webpage:
MicrosoftEdge/Demos > devtools-js-get-started - Contains the files:
README.md - Contains links to the rendered demo webpage and the in-depth tutorial article about using the demo webpage.
index.html - The webpage with an input form that sends data to the JavaScript
file, and that displays the result of the JavaScript.
get-started.js - The JavaScript file that's used by the form in the demo
webpage.
Download or clone the Demos repo
The Demos repo is useful for following the various DevTools documentation.
Download the Demos repo
To download the Demos repo:
1. In a new window or tab, go to the MicrosoftEdge / Demos repo.
2. Click the Code dropdown button, and then click Download ZIP.
The .zip file is placed in your download directory. Unzip these webpage source files into a suitable location.
To download a single directory of the Demos repo:
1. Go to https://download-directory.github.io/ and then paste the URL https://github.com/MicrosoftEdge/Demos/tree/main/demo-to-do.
The .zip file is placed in your download directory. Unzip these webpage source files into a suitable location.
See also:
 Download the WebView2Samples repo in Set up your Dev environment for WebView2.
Clone the Demos repo
Cloning a repo enables updating your local copy when the repo is updated. The GitHub UI and various tools support cloning. We'll show cloning by using Visual Studio Code, but you can use many other coding tools, such as GitHub Desktop, Visual Studio, or git bash shell.
To clone the repo:
1. In a new window or tab, go to the MicrosoftEdge / Demos repo.
2. If the green Code button isn't shown, click Demos in the path Microsoft Edge / Demos in the upper left to go to the main page of the repo.
3. Click the Code dropdown button, and then click the Copy button next to the URL https://github.com/MicrosoftEdge/Demos.git. You can then paste the URL into git bash or a Visual Studio Code dialog, for example.
Or, click the Code dropdown button, and then click Open with Visual Studio if it appears. A list of Handler Selector items is offered, one per Visual Studio instance installed. This option appears only if you're logged in.

4. In Visual Studio Code, in the Activity Bar, click the Source Control () button, and then click the Clone Repository button.
5. In the Provide repository URL text box, paste the copied URL: https://github.com/MicrosoftEdge/Demos.git and then press Enter. A folder selection dialog opens.

Users/username/GitHub, and then click the Select Repository Location button.
7. The message Cloning git repository appears, then you're prompted to open the cloned repository. Click the Open button:

8. If prompted Do you trust..., click the Yes button. Or, click the No button and continue with most parts of this walkthrough.
The Explorer tree lists many demos, including demo-to-do.
See also:
Cloning a repository - GitHub docs.
Clone the WebView2Samples repo in Set up your Dev environment for WebView2.
Open a demo folder in the Sources tool and edit a file
To use this section, first Download or clone the Demos repo.
To edit local files in the Sources tool, you might need to first click the Allow button to grant read/write access. To do that, follow the steps in Opening a folder from the Filesystem (Workspace) tab in the Sources tool below.
See also:
 Approaches compared in Microsoft Edge DevTools extension for Visual Studio Code.
Summarizes and compares several options for editing webpage files.
Opening a folder from the Filesystem (Workspace) tab in the Sources tool
After downloading or cloning the Demos repo:
1. In Microsoft Edge, open a new tab.
2. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Sources tab. If that tab isn't visible, click the More tabs () button.
4. In the Sources tab, on the left, select the Filesystem tab, which is grouped with the Page tab. If the Filesystem tab isn't displayed, click the More tabs () button. 5. Click + Add folder to workspace. A folder selection dialog opens.
6. Select a specific folder, such as demo-to-do, or select the Demos root folder:

7. Above DevTools, your're prompted "DevTools requests full access to (directory)".
Click the Allow button:

To edit the files, see the editing steps in the next section.
See also:
 Edit files with Workspaces (Filesystem tab) - to open a local folder in the Sources tool of DevTools in the browser.
 Using the Filesystem tab to define a local Workspace in Sources tool overview.
Opening a local HTML file from the browser's File Open dialog and editing it from the Page tab of the Sources tool
To edit files in the Sources tool, before doing the steps in this section, you might need to click the Allow button to grant read/write access by following the steps in Opening a folder from the Filesystem (Workspace) tab in the Sources tool above.
To open an .html file and edit it:
1. In Microsoft Edge, open a new tab, and then press Ctrl+O (Windows/Linux) or Command+O (macOS). A file selection dialog opens.
2. Select an HTML file from the local copy of the Demos repo, such as
C:\Users\username\Documents\GitHub\Demos\demo-to-do\index.html. The .html file is opened and rendered in Microsoft Edge.
3. Right-click the webpage, and then select Inspect. Or, press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
4. In DevTools, on the main toolbar, select the Sources tab. If that tab isn't visible, click the More tabs () button.
5. In DevTools, on the left, select the Page tab, and then select the HTML file, such as index.html or (index).
6. Press Esc to open the Quick View panel at the bottom of DevTools.
7. In the Quick View toolbar, click the More Tools () button, and then select the Changes tool.
8. In the middle, editor pane of the Sources tool, edit the .html file. For example, in demo-to-do/index.html folder, in the <h1> heading line, change My tasks to My
modified tasks:
HTML<h1>📋 My modified tasks</h1>If editing isn't enabled, click the Allow button to grant read/write access to the folder by doing the steps in Opening a folder from the Filesystem (Workspace) tab in the Sources tool above.
The change is displayed in the Changes tool in the Quick View panel, and an asterisk is added to the file name in the index.html tab in the Sources tool:

9. Press Ctrl+S (Windows, Linux) or Command+S (macOS) to save the change. The asterisk is removed from the index.html tab in the Sources tool.
10. Refresh the page. The change is displayed in the rendered webpage; for example, the word modified is added to the title:

Opening a local HTML file from File Explorer and editing it in the browser
1. In File Explorer on Windows, or Finder on macOS, select an HTML file from the local copy of the Demos repo, such as
C:\Users\username\Documents\GitHub\Demos\demo-to-do\index.html. The .html file is opened and rendered in Microsoft Edge.
2. Follow the steps in the sections above.
Open a demo folder in Visual Studio Code
After downloading or cloning the Demos repo:
1. In Visual Studio Code, in the Activity Bar, click the Explorer () button. The Explorer pane opens.
2. In the Explorer pane, click the Open Folder button. The Open Folder dialog opens. Navigate to the demo-to-do folder in the Demo repo that you cloned, select the folder or go into it, and then click the Select Folder button:

An example of a repo location where the Demos repo has been cloned is shown above. The demo-to-do folder of the cloned Demos repo opens in the Explorer of Visual Studio Code:

Or, you can open the root folder of the Demos repo, to explore all of the demo folders in the Explorer pane.
See also:
 Microsoft Edge DevTools extension for Visual Studio Code - to open a local folder in Visual Studio Code and use DevTools within Visual Studio Code.
URL patterns for rendered demo webpages and source code
Most of the Readme files in the Demos repo have a link that opens the rendered .html file from the GitHub.io server. Sometimes you have a URL for an HTML source file at GitHub.com, but instead you need to derive the github.io server URL to display the rendered file, rather than displaying the code listing of the .html source code in the GitHub directory.
To convert from the URL for the source code directory at GitHub.com to the URL for a rendered demo webpage at GitHub.io, the pattern is as follows.
Suppose the URL for the webpage's source code at GitHub.com is:
https://github.com/MicrosoftEdge/Demos/tree/main/demo-to-do/
The key components of that GitHub.com URL are:
https://github.com/[org]/[repo]/tree/main/[path]
In contrast, the desired GitHub.io URL pattern is:
      https://[org].github.io/[repo]/[path] To fill in that GitHub.io URL pattern, in this example:
[org] is MicrosoftEdge.
[repo] is Demos.
[path] is demo-to-do.
Therefore, the resulting GitHub.io server URL for the rendered demo webpage is:
https://MicrosoftEdge.github.io/Demos/demo-to-do/
These URLs aren't case-sensitive.
See also
Opening and editing files:
 Edit files with Workspaces (Filesystem tab) - to open a local folder in the Sources tool of DevTools in the browser.
 Using the Filesystem tab to define a local Workspace in Sources tool overview.
 Approaches compared in Microsoft Edge DevTools extension for Visual Studio Code.
Summarizes and compares several options for editing webpage files.
 Microsoft Edge IDE integration - Webpage app development using Visual Studio Code or Visual Studio, including Microsoft Edge DevTools.
Downloading and cloning:
 Step 5: Clone the Demos repo in Installing the DevTools extension for Visual Studio Code.
 Cloning a repository - GitHub docs.
Running a local web server:
 Step 6: Set up a localhost server in Installing the DevTools extension for Visual Studio Code.

Feedback
Was this page helpful?  Yes  No

Use DevTools in Internet Explorer mode (IE mode)
Article • 03/28/2023
Internet Explorer mode (IE mode) integrates with Microsoft Edge DevTools. IE mode allows enterprises to specify a list of websites that only work in Internet Explorer 11. When you navigate to these websites in Microsoft Edge, an instance of Internet Explorer 11 runs and renders the site in a tab.
IE mode allows enterprises to manage compatibility with technologies that are currently not compatible with any modern web browsers.
Support for the following technologies is included in IE mode:
IE document modes.
ActiveX controls.
Other legacy components.
In IE mode, the rendering process is based on Internet Explorer 11. The Microsoft Edge process manager handles the lifetime of the rendering process. The rendering process is constrained to the lifetime of the tab for a specific site (or app). When a tab renders in IE mode, the IE mode indicator icon appears in the address bar for the specific tab.

IE mode is available on Windows 10 Version 1903 (May 2019 Update), and is coming to all supported Windows platforms.
Open DevTools on a tab in IE mode
The IE mode indicator icon appears in the address bar if the Enterprise admin has configured the website to appear in IE mode. To view the compatibility mode of a website in IE mode, click the IE mode indicator icon in the address bar:

If a tab uses IE mode, the tab has the following limitations:
Inspect Element isn't visible on the right-click menu.
Right-clicking and then selecting View Source launches Notepad.
Pressing F12 or Ctrl+Shift+I opens a blank instance of the Microsoft Edge
DevTools and displays the following message: Developer Tools are not available in Internet Explorer mode. To debug the page, open the page in IEChoose.

To debug the content of an IE mode tab, use IEChooser to open Internet Explorer DevTools, as follows:
1. In Windows, open the Run dialog. For example, press Windows logo key + R.
2. Enter %systemroot%\system32\f12\IEChooser.exe, and then click OK.
3. In IEChooser, select the entry for the IE mode tab.
Remote debugging in IE mode
Launch Microsoft Edge with remote debugging turned on from the command-line interface. Microsoft Visual Studio, Microsoft Visual Studio Code, and other development tools typically run a command to launch Microsoft Edge. The following command launches Microsoft Edge with the remote debugging port set to 9222.
shellstart msedge --remote-debugging-port=9222After you launch Microsoft Edge using a command-line argument, IE mode is unavailable. You can still navigate to websites (or apps) that are otherwise displayed in IE mode. The website (or app) content renders using Chromium, not Internet Explorer 11. Parts of the webpages that rely on Internet Explorer 11, such as ActiveX controls, might not render correctly. The IE mode indicator icon doesn't appear in the address bar.
IE mode remains unavailable until you close and restart Microsoft Edge.
Replace Internet Explorer automation
If you have an existing application that uses the InternetExplorer object to automate Internet Explorer 11, but the Internet Explorer 11 desktop application isn't available, your application won't work. Internet Explorer 11 will be retired on June 15, 2022. See The future of Internet Explorer on Windows 10 is in Microsoft Edge
Microsoft Edge doesn't support automating IE mode through the InternetExplorer object, so applications that rely on this object will need to be updated, by using one of the recommended alternatives below. Applications that use the WebBrowser control will continue to work, and won't be affected by the removal of Internet Explorer 11.
If your automation application doesn't require IE mode for the website (or app) content to function correctly, we recommend updating your application to use Microsoft Edge instead of Internet Explorer 11. Many available automation tools support Microsoft Edge, including WebDriver and Playwright.
 To learn more about automating Microsoft Edge using WebDriver, see Use WebDriver to automate Microsoft Edge.
 To learn more about using Playwright, see Use Playwright to automate and test in Microsoft Edge.
Applications that require IE mode for the website (or app) content to function correctly should use the WebBrowser control. The WebBrowser control uses the Internet Explorer platform (MSHTML/Trident) to render web content, and will work even if the Internet Explorer 11 desktop application isn't available.
See also
What is Internet Explorer (IE) mode?
Configure IE mode policies
Fix web compatibility issues using document modes and the Enterprise Mode site list

Microsoft Edge DevTools Protocol
Article • 05/19/2023
Use the DevTools Protocol to instrument, inspect, debug, and profile browsers including
Microsoft Edge. The Microsoft Edge DevTools Protocol matches the APIs of the Chrome
DevTools Protocol. For reference documentation, go to Chrome DevTools Protocol

Using the DevTools Protocol
To attach a custom tooling client to the DevTools Server in Microsoft Edge:
1. Close all instances of Microsoft Edge.
2. Launch Microsoft Edge with the remote debugging port.
shellmsedge.exe --remote-debugging-port=92223. Optionally, you can start a separate instance of Microsoft Edge using a distinct user profile.
shellmsedge.exe --user-data-dir=<some directory>4. Next, use the HTTP list endpoint to get a list of attachable page targets.
HTTP
http://localhost:9222/json/list
5. Finally, connect to the webSocketDebuggerUrl of the desired target and issue commands/subscribe to event messages through the DevTools web socket server.
DevTools Protocol HTTP endpoints
The Microsoft Edge DevTools Protocol supports the following HTTP endpoints.
/json/version
Provides information on the browser of the host machine and which version of the DevTools Protocol it supports.
Parameters None.
Return object
JSON{
   "Browser": "Edg/75.0.115.0",
   "Protocol-Version": "1.3",
   "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) 
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.115.0",
   "V8-Version": "7.5.98",
   "WebKit-Version": "537.36 (@68a98f73c7d0f766fb5a013ea7f8dbb41089bc1b)",    "webSocketDebuggerUrl": "ws://localhost:9222/devtools/browser/a9d0e8cf-
476a-4a89-bba9-0fc27ce691cd"
}/json/protocol
Provides the entire protocol API surface serialized as JSON.
Parameters None.
Return object
JSON object which represents the available API surface for current version of the protocol.
/json/list
Provides a candidate list of page targets for debugging.
Parameters None.
Return object
JSON[{
   "description": "",
   "devtoolsFrontendUrl": "/devtools/inspector.html? ws=localhost:9222/devtools/page/AB07C11A262D1EC8634EB12E2DCA4989",
   "id": "AB07C11A262D1EC8634EB12E2DCA4989",
   "title": "localhost:9222/json/protocol",
   "type": "page",
   "url": "http://localhost:9222/json/list",
   "webSocketDebuggerUrl": 
"ws://localhost:9222/devtools/page/AB07C11A262D1EC8634EB12E2DCA4989"
}, ...  ]/json/close
Closes down the target process. For example, in Microsoft Edge, closes the page tab.
Parameters
Target ID
Return object
String("Target is closing")Remote Tools for Microsoft Edge (Beta)
You can install the Remote Tools for Microsoft Edge (Beta) from the Microsoft Store. This app enables you to remotely debug Microsoft Edge running on a Windows 10 or later device from your development machine.
To learn how to set up your Windows device and connect to it from your development machine, see Get started with remote debugging Windows devices.
The Remote Tools for Microsoft Edge (Beta) uses the same Microsoft Edge DevTools Protocol as DevTools to communicate with Microsoft Edge running on the Windows 10 or later device you want to debug. This app just prepends /msedge/ and a process ID (pid) before each call to the protocol. It supports the following HTTP endpoints.
The following Reference sections are for Remote Tools for Microsoft Edge.
/msedge/json/deviceinfo
Provides information about the Windows PC or HoloLens 2 device connected for remote debugging. Parameters None.
Return object
JSON{
  "deviceName": "WINDOWS-10-DEV"
}/msedge/json/list
Provides a candidate list of all Microsoft Edge and WebView2 Runtime processes running on the connected device (including PWAs) and all tabs or targets in each process available for debugging.
Parameters None.
Return object
JSON
[
  {
    "version": {
      "Browser": "Edg/110.0.1548.0",
      "Protocol-Version": "1.3",
      "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) 
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 
Edg/110.0.1548.0",
      "V8-Version": "11.0.6",
      "WebKit-Version": "537.36 
(@d6d5aea402510697e05382293a4c6d3da0183736)",
      "webSocketDebuggerUrl": 
"wss://172.17.75.195:50443/msedge/23416/devtools/browser/f02cc852-644a-48ce-
932b-481aa43d8121"
    },
    "info": {       "browserProcessId": 23416
    },
    "targets": [
      {
        "description": "",
        "devtoolsFrontendUrl": 
"https://devtools.azureedge.net/serve_file/@d6d5aea402510697e05382293a4c6d3d a0183736/inspector.html?
wss=172.17.75.195:50443/msedge/23416/devtools/page/2AE2506D9FDB1C541FB36DD90 8ED51DE",
        "faviconUrl": "https://learn.microsoft.com/favicon.ico",
        "id": "2AE2506D9FDB1C541FB36DD908ED51DE",
        "title": "Remotely debug Windows devices - Microsoft Edge Developer documentation | Microsoft Learn",
        "type": "page",
        "url": "https://learn.microsoft.com/microsoft-edge/devtools-guidechromium/remote-debugging/windows",
        "webSocketDebuggerUrl": 
"wss://172.17.75.195:50443/msedge/23416/devtools/page/2AE2506D9FDB1C541FB36D
D908ED51DE"
      },       ...
    ]   },   ...
]/msedge/
Functionally equivalent to /msedge/json/list.
/msedge/[pid]/json/list
Provides a candidate list of page targets for the Microsoft Edge instance that matches the provided [pid] for debugging.
Parameters None.
Return object
JSON[
  {
    "description": "",
    "devtoolsFrontendUrl": "/msedge/23416/devtools/inspector.html?
wss=localhost:50443/msedge/23416/devtools/page/2AE2506D9FDB1C541FB36DD908ED5 1DE",
    "faviconUrl": "https://learn.microsoft.com/favicon.ico",
    "id": "2AE2506D9FDB1C541FB36DD908ED51DE",
    "title": "Remotely debug Windows devices - Microsoft Edge Developer documentation | Microsoft Learn",
    "type": "page",
    "url": "https://learn.microsoft.com/microsoft-edge/devtools-guidechromium/remote-debugging/windows",
    "webSocketDebuggerUrl": 
"wss://localhost:50443/msedge/23416/devtools/page/2AE2506D9FDB1C541FB36DD908
ED51DE"
  },   ...
]/msedge/[pid]/json/version
Provides information about the Microsoft Edge instance that matches the provided [pid] and which version of the DevTools Protocol it supports.
Parameters None.
Return object
JSON{
  "Browser": "Edg/110.0.1548.0",
  "Protocol-Version": "1.3",
  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) 
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1548.0",
  "V8-Version": "11.0.6",
  "WebKit-Version": "537.36 (@d6d5aea402510697e05382293a4c6d3da0183736)",
  "webSocketDebuggerUrl": 
"wss://localhost:50443/msedge/23416/devtools/browser/f02cc852-644a-48ce-
932b-481aa43d8121"
}
/msedge/[pid]/json/protocol/
Provides the entire protocol API surface serialized as JSON for the Microsoft Edge instance that matches the provided [pid].
Parameters None.
Return object
JSON object which represents the available API surface for the version of the protocol that the Microsoft Edge instance that matches the provided [pid] is using.
See also
Chrome DevTools Protocol
Chrome DevTools Protocol (CDP) in Overview of WebView2 APIs
Use the Chrome DevTools Protocol (CDP) in WebView2 apps

Feedback
Was this page helpful? 

Contact the Microsoft Edge DevTools team
Article • 03/28/2023
Send your feedback to help improve Microsoft Edge DevTools. Contact the Microsoft Edge DevTools team to submit feature requests or bug reports, or ask questions about Microsoft Edge DevTools.
There are several ways to get in touch with the Microsoft Edge DevTools team:
To quickly report bugs from DevTools, use the Send feedback window. To submit feature requests, questions, and have longer conversations with the team, use the DevTools repo.
To submit cross-browser suggestions, use the Web Web Want initiative.
To submit documentation issues, use the edge-developer repo.
Use the Send feedback window
To report a bug or request a feature while you are using DevTools:
1. Click the Help () icon, and then click Send Feedback () (or press Alt+Shift+I on Windows and Linux or Option+Shift+I on macOS) to open the Send feedback window.
2. In the Send feedback window, describe your bug or feature request. You can also attach a screenshot to help the team understand the problem better and add your email address so we can follow-up with you.
3. Press Send to create a tracked issue for the Microsoft Edge development team.

Use the DevTools repo
To have longer discussions with the DevTools team and community about bugs or features, use the DevTools repository on GitHub.
You can create a new issue on the repo or search for existing issues and join conversations.
Use the DevTools repo to have longer conversations, especially when you need to do more than report a bug. In the repo, you can share ideas and tips with others, explain your workflows and use cases in detail with the team, and generally have more meaningful interactions with the community.
Submit a cross-browser suggestion to the Web We Want
To make a feature request across browser teams or standards bodies, submit a request at The Web We Want initiative.
The Web We Want is a cross-browser initiative to identify missing features for web standards or browsers. Use this communication channel to let browser vendors and standards groups know your request.
Submit web platform or developer tool features.
View the list of submitted Wants, and vote on them.
Participate in discussions.
Use the links to resources.
You can follow the Web We Want initiative on Twitter or LinkedIn, and participate in surveys to prioritize submitted Wants.
File a documentation issue
To enter a GitHub issue from within a documentation article, in the Feedback section at the bottom of an article, select the This page button.
Or you can file an issue against the Microsoft Edge Developer documentation, directly in the edge-developer repo.

Microsoft Edge DevTools extension for Visual Studio Code
Article • 03/28/2023
The Microsoft Edge DevTools extension for Visual Studio Code lets you use Microsoft
Edge DevTools and an embedded version of the Microsoft Edge Browser including Device Emulation, right from within Visual Studio Code. The DevTools extension provides many of the same tools that are in the DevTools that's in the Microsoft Edge browser, from within Visual Studio Code.

Visual Studio Code is a lightweight but powerful source code editor for Windows, Linux, and macOS. Visual Studio Code is a full IDE (integrated development environment) that has powerful features for web development. Visual Studio Code includes built-in support for JavaScript, TypeScript, and Node.js, so it's a great tool for web developers, especially with this DevTools extension.
The DevTools extension for Visual Studio Code enables you to:
 Develop webpages and use DevTools without leaving Visual Studio Code. This extension gives you an alternative to using DevTools for webpage development within the browser window.
 Emulate devices, such as displaying your webpage in various viewport sizes during development.
Test the accessibility of your webpages from within Visual Studio Code.
Live-edit CSS and SASS and see your changes reflected immediately in a browser instance while editing your actual source files. CSS mirror editing allows you to control whether to save changes to your .css file. DevTools opens and edits your
.css files, but without automatically saving the files, so that you can decide and control whether to save the changes that you made within the Styles tab of the Elements tool.
Approaches compared
The DevTools extension for Visual Studio Code is one of several different ways to use DevTools to change your local files.
ﾉ Expand table
ApproachPros and ConsArticleBrowser > DevTools >
Elements toolYou have to manually copy changes from DevTools into your source files.Inspect, edit, and debug
HTML and CSS with the
Elements toolBrowser > DevTools > Sources tool > Filesystem tab to define a WorkspaceAlways saves the changes, which could discourage experimentingUsing the Filesystem tab to define a local Workspace in Sources tool overviewBrowser > DevTools >
Settings > Experiments >
Open source files in Visual
Studio CodeAlways saves the changes, which could discourage experimentingExperiments > Opening source files in Visual Studio Code.Microsoft Edge DevTools extension for Visual Studio
CodeAutomatically opens and edits the CSS source file but doesn't automatically save the file, so you get to choose whether to save the edits.The present article.2-way editing
Changes are reflected among the source files in the opened folder, the Edge DevTools tab, and the Edge DevTools: Browser tab, as follows.
CSS
Through CSS mirror editing, you can change CSS in the Edge DevTools tab, and it automatically changes in the .html or .css source file, as well as being reflected in the Edge DevTools: Browser tab. DevTools lets you decide whether to save the change, allowing you to experiment.
You can change CSS in the .css or .html source file, save the change, and then reload the webpage in the Edge DevTools: Browser tab, which also updates the Edge DevTools tab.
HTML
You can edit the DOM tree in the Edge DevTools tab (such as changing <h2>Success!
</h2> to <h2>CSS Success!</h2>), then press Enter, then refresh the Edge DevTools:
Browser tab to see the change. (This doesn't automatically edit the .html source file.)
You can change HTML in the .html source file, save the change, and then reload the webpage in the Edge DevTools: Browser tab, which also updates the Edge DevTools tab.
Tasks supported by the developer tools
The DevTools extension for Visual Studio Code allows you to:
ﾉ Expand table
TaskArticleGet live analysis of problems in your source code.Inline and live issue analysisStart a new browser instance with DevTools for your project.Opening DevTools and the
DevTools browserEmulate different devices and see your project in different display modes.Device emulationView the runtime DOM structure and layout of your page using the Elements tool.Opening source files from the
Elements toolAnalyze and change CSS styles of your project with live preview and live changes to your project's source files.Update .css files from within the
Styles tool (CSS mirror editing)Analyze site traffic using the Network tool.Network tool integrationLog information, try out JavaScript, and access the Window/DOM using the Console tool.Console integrationTaskArticleInspect storage and service workers using the Application tool.Application tool integrationUse the extension in the Visual Studio Code debugging workflow.Integration with Visual Studio Code debuggingOverview of the tools in the DevTools extension
The following tools are included in the DevTools extension for Visual Studio Code. The following articles are not specifically focused on the DevTools extension for Visual Studio Code, but are for the Microsoft Edge browser DevTools.
ﾉ Expand table
ToolPurposeArticleElements toolInspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser. Debug your HTML using the DOM tree, and inspect and work on the CSS for your webpage.Inspect, edit, and
debug HTML and
CSS with the
Elements toolConsole toolAn intelligent, rich command line within DevTools. A great companion tool to use with others tools. Provides a powerful way to script functionality, inspect the current webpage, and manipulate the current webpage using JavaScript.Console overviewNetwork toolUse the Network tool to make sure that resources are being downloaded or uploaded as expected. Inspect the properties of an individual resource, such as the HTTP headers, content, or size.Inspect network activityApplication toolUse the Application tool to manage storage for web app pages, including manifest, service workers, local storage, cookies, cache storage, and background services.The Application tool, to manage storageIssues toolThe Issues tool automatically analyzes the current webpage, reports issues grouped by type, and provides documentation to help explain and resolve the issues.Find and fix problems using the
Issues toolNetwork
conditions toolUse the Network conditions tool to disable the browser cache, set network throttling, set the user agent string, and set Content-Encodings such as deflate, gzip, and br.Network conditions toolToolPurposeArticleNetwork request blocking toolUse the Network request blocking tool to test blocking network requests to a specified URL pattern and see how a webpage behaves.Network request blocking toolInspect toolUse the Inspect tool to see information about an item within a rendered webpage. When the Inspect tool is active, you hover over items in the webpage, and DevTools adds an information overlay and grid highlighting on the webpage.Analyze pages using the Inspect toolDevice
EmulationUse the Device Emulation tool, also called Device Simulation Mode or Device Mode, to approximate how your page looks and responds on a mobile device.Emulate mobile devices (Device
Emulation)For the list of all tools that are in the Microsoft Edge browser version of DevTools, see Overview of all tools in About the list of tools.
See also
Get started using the DevTools extension for Visual Studio Code Opening DevTools and the DevTools browser
External pages:
 Supercharging VS Code Live Server - If you use the Live Server extension in Visual Studio Code to see the changes in your web products live, you can improve the experience even more by getting a browser and DevTools embedded in Visual Studio Code using the Microsoft Edge DevTools extension for Visual Studio Code.
Getting Started - Documentation for Visual Studio Code. vscode-edge-devtools repo - source code for the Microsoft Edge Developer Tools extension for Visual Studio Code.
Changelog file.
Microsoft Edge DevTools extension for Visual Studio Code in the Visual Studio Marketplace.

Installing the DevTools extension for Visual Studio Code
Article • 03/28/2023
This article walks you through the initial setup of the DevTools extension. After installing DevTools, you'll be ready to follow the steps in Get started using the DevTools extension for Visual Studio Code.
This article helps you:
Install the DevTools extension.
Clone the Demos repo, which includes the demo-to-do web app.
Start a web server so you can use localhost URLs in the DevTools extension in Visual Studio Code.
Step 1: Install Visual Studio Code
1. If not done already, in a separate window or tab, go to Download Visual Studio Code and download and install Visual Studio Code.
Step 2: Install Microsoft Edge
Microsoft Edge is required, for the DevTools extension for Visual Studio Code.
On Windows, Microsoft Edge is installed. On macOS or Linux, install Microsoft Edge as follows:
1. Go to the Edge page at Microsoft.com.
Step 3: Install the Microsoft Edge DevTools extension
Install the Microsoft Edge DevTools extension for Visual Studio Code, as follows:
1. Open Visual Studio Code.
2. In the Activity Bar on the left, click the Extensions () button. Or, press Ctrl+Shift+X on Windows/Linux or Command+Shift+X on macOS. The Extensions Marketplace pane opens.
3. In the Search Extensions in Marketplace text box, enter Microsoft Edge Tools for VS Code.
4. Select the Microsoft Edge Tools for VS Code, and then click the Install button:

As an alternative approach, you can use the browser to download the Microsoft Edge DevTools extension from the Visual Studio Marketplace website. Go to Microsoft Edge Developer Tools for Visual Studio Code.
Step 4: Install Node.js and Node Package Manager (npm)
To get live (realtime) analysis of your code to indicate issues, such as with wavy underlines, and to offer Quick Fixes, you must install Node.js and Node Package Manager (npm).
The DevTools extension shows a popup suggestion to install Node.js and npm. The suggestion text is similar to: "Install Node.js & npm? (suggested because you installed this extension)".
1. Click the link in the popup, if it opens.
2. Install Node.js and npm from Node.js > Downloads > LTS (long-term stable) (or, Current).
On Windows, a .msi file is downloaded, such as: node-v18.17.1-x64.msi
3. In the browser's Downloads pane, click Show in folder, and then run the downloaded file. The Node.js Setup Wizard opens. Click the Next button, and then follow the prompts. You can use the default options.
4. Confirm that Node.js and npm are installed, as follows: in Visual Studio Code, select View > Terminal. Or, run the git bash app.
5. At the command prompt, enter npm version. Version numbers are displayed for npm and for node, indicating that Node Package Manager and Node.js are
installed, to support inline and live issue analysis. For example:
$ npm version {    npm: '9.6.7',    node: '18.17.1',
   ...
}See also:
 Inline and live issue analysis
Step 5: Clone the Demos repo
Cloning the Demos repo is optional. The Demos repo is useful for following the various DevTools documentation. If you want, instead of cloning the repo, you can open an existing project directory if you have one.
As another alternative, instead of cloning the entire directory, you can download only the demo-to-do directory. For example, go to https://download-directory.github.io/ and then paste the URL https://github.com/MicrosoftEdge/Demos/tree/main/demo-todo. The .zip file is placed in your download directory. Unzip these webpage source files into a suitable location. The tutorial Get started using the DevTools extension for Visual Studio Code uses the example location:
C:\Users\username\Documents\GitHub\Demos\demo-to-do\
To clone the Demos repo to use the demo-to-do sample for this tutorial:
1. Go to MicrosoftEdge/Demos repo.
2. If the green Code button isn't shown, click Demos in the path Microsoft Edge / Demos in the upper left to go to the main page of the repo.
3. Click the green Code button, and then select the Copy button. This article assumes you're using the Source Control features within Visual Studio Code. Or, you can use one of the other methods that are provided, if you know that you want to use that approach instead:

then click the Clone Repository button.
5. In the Provide repository URL text box, paste the copied URL: https://github.com/MicrosoftEdge/Demos.git and then press Enter. A folder selection dialog opens.

Users/username/GitHub, and then click the Select Repository Location button.
7. The message Cloning git repository appears, then you're prompted to open the cloned repository. Click the Open button:

8. If prompted Do you trust..., click the Yes button. Or, click the No button and continue with most parts of this walkthrough.
The Explorer tree lists many demos, including demo-to-do.
9. In Visual Studio Code, select File > Close Folder.
10. In the Activity Bar, click the Microsoft Edge Tools () button. The Microsoft Edge Tools pane opens.
11. In the Microsoft Edge Tools > Targets pane, click the Open Folder button. The Open Folder dialog opens. Navigate to the demo-to-do folder in the Demo repo that you cloned, select the folder or go into it, and then click the Select Folder button:


Step 6: Set up a localhost server
If you installed Node.js and npm, as described above, npx http-server is a simple way to start a local web server. You can skip to the steps below, or read this background information first.
In many cases, you don't need to enter a URL or run a localhost server. For example, you can:
 Open a folder that contains webpage source files, and then right-click an .html file.
Enter a local file path in the address bar, such as
C:/Users/username/.vscode/extensions/ms-edgedevtools.vscode-edge-devtools-
2.1.1/out/startpage/index.html (the default, Success page).
Enter a remote server URL in the address bar of the Edge DevTools: Browser tab, such as https://microsoftedge.github.io/Demos/demo-to-do/.
If your webpage uses certain APIs that require the webpage to be running on a web server, to use DevTools, you must start a local web server for testing. If you don't serve out your project on a webserver, but only instead, you use local files, you can still use DevTools, with debugging ability, by right-clicking a local .html file. Functionality of your app which specifically requires your app to be on a server won't work, and DevTools will have limited utility.
For information about http-server, see http-server: a simple static HTTP server.
Set up http-server
1. In Visual Studio Code, select File > Open Folder > open the directory that contains the .html, .css, and .js files for a webpage, such as C:\Users\username\Documents\GitHub\Demos\demo-to-do\.
In the above example path:
\Documents\GitHub\ is where the Demos repo was cloned to.
\Demos\ is the GitHub repo that's used for examples in the Microsoft Edge
Developer documentation.
\demo-to-do\ is one of the sample directories in the repo.
2. In Visual Studio Code, select View > Terminal. Or, to keep the web server running regardless of Visual Studio's state, open a command prompt outside of Visual Studio Code, such as git bash.
3. cd into the the folder you want to serve via http.
In the git bash shell, use forward slashes, such as:

cd C:/Users/username/Documents/GitHub/Demos/demo-to-do/
Or, if you are using a different command prompt on Windows, use backslashes, such as:
cd C:\Users\username\Documents\GitHub\Demos\demo-to-do\Continue below.
Start the server (npx http-server)
These steps start the server for the first time.
1. Enter the command npx http-server:
npx http-serverA local webserver starts on port 8080.
You might receive a message like:
Need to install the following packages:
  http-server@14.1.1 Ok to proceed? (y)Or, if you get no such file or directory, you can run: npm install --global httpserver and then run: http-server
2. Enter y.
Windows prompts whether to allow Node to communicate on the network:

3. Select the Private networks checkbox, and then click the Allow access button.
Information about the server and localhost URL is displayed, such as:
Starting up http-server, serving ./
Available on:
http://10.0.1.8:8080 http://127.0.0.1:8080
Hit CTRL-C to stop the serverThe displayed URLs are usually equivalent to the common standard URL, http://localhost:8080.

Next, see Get started using the DevTools extension for Visual Studio Code.
See also
Get started using the DevTools extension for Visual Studio Code
Opening DevTools and the DevTools browser
Microsoft Edge DevTools extension for Visual Studio Code
Sample code for DevTools
Cloning a repository - GitHub docs.
Get started using the DevTools extension for Visual Studio Code
Article • 12/09/2022
These tutorials walk you through several ways of opening and closing DevTools, and also get you started with modifying CSS and debugging JavaScript.
 Right-click an .html file for Demo To Do in the Explorer of Visual Studio Code, without needing to run a web server. See Get started by right-clicking an HTML file.
 Click the Launch Instance button, to experiment with the demo Success webpage.
See Get started by clicking the Launch Instance button.
 Click the Launch Project button, to run Demo To Do on a localhost web server and store the URL for the webpage in launch.json. See Get started by clicking the Launch Project button.
See also
Opening DevTools and the DevTools browser
Microsoft Edge DevTools extension for Visual Studio Code
GitHub:
demo-to-do - the demo web app running on the github.io server.
Source code for demo-to-do
MicrosoftEdge/Demos repo
Get started by right-clicking an HTML file
Article • 03/28/2023
Use this tutorial to learn how to open and close DevTools by right-clicking an .html file for Demo To Do in the Explorer of Visual Studio Code, without needing to run a web server.
Step 1: Install DevTools and prerequisites
1. If you haven't already, do the steps in Installing the DevTools extension for Visual Studio Code, and then continue below. You don't need to install and start a web server for the present tutorial, but it's recommended.
Step 2: Start DevTools by right-clicking an HTML file
Right-clicking an .html file in Visual Studio Code's Explorer is the main way to open DevTools when your webpage doesn't require running on a web server.
Unlike the Launch Instance button, this approach opens DevTools in Debug mode.
Unlike the Launch Project button that we'll use later, this approach doesn't require you to generate a launch.json file.
We'll demonstrate by opening the demo-to-do web app:
1. In Visual Studio Code, select File > Open Folder.
2. Go to the directory where you cloned the Demos repo, open the specific directory for the demo-to-do app, such as C:\Users\username\Documents\GitHub\Demos\demoto-do\, and then click the Select Folder button:

with Edge > Open Browser with DevTools:

 The Debug toolbar of Visual Studio Code opens, the Debug Console opens at the bottom, and the Run pane opens. These features indicate that Visual Studio Code is in Debug mode:

Step 3: Arrange tabs
To save space, use the Close DevTools or Open DevTools button and the Toggle screencast button to toggle (open or close) the DevTools tabs.
1. Toward the upper left corner of the Edge DevTools tab, click the Toggle screencast button:

The Edge DevTools: Browser tab closes.
2. In the Edge DevTools tab, click the Toggle screencast button again.
The Edge DevTools: Browser tab opens.
3. In the top right of the Edge DevTools: Browser tab, click the Close DevTools button:

4. In the top right of the Edge DevTools: Browser tab, click the Open DevTools button.
5. Drag the Edge DevTools: Browser tab to dock it anywhere in Visual Studio Code, such as grouping it with the source code editor.
Step 4: Edit CSS in DevTools, updating the .css file automatically
In the Edge DevTools tab, in the Elements tool > Styles tab, you can edit CSS selectors, rules, and values. The CSS mirror editing checkbox is selected by default, so the .css file is automatically edited, but the edits are not saved, so that you can decide whether to save the changes.
1. In the Elements tool, in the Styles tab, click a CSS value, such as the body font size.
2. Change the CSS value, such as using mouse wheel or pressing Up Arrow and Down Arrow. The associated .css file opens, such as to-do-styles.css and scrolls
to the line that defines the CSS value, and automatically edits the .css file but doesn't save changes:

Step 5: Step through JavaScript code in the Debugger
1. Select Activity Bar > Explorer ().
2. In the demo-to-do directory, click to-do.js to open it. Scroll down to the changeTask function and then click to the left of a line number to set a breakpoint:

3. If the Run and Debug Side Bar isn't displayed, select View > Run. The Run and Debug Side Bar includes the Watch pane and other debugger panes.
4. In the demo app rendered in the Edge DevTools: Browser tab, enter a task, such as test. The debugger of Visual Studio Code pauses at the breakpoint in the to-do.js file:

5. In the Debug toolbar, or using the Run menu or by pressing keys, step through a couple lines of code in to-do.js.
6. In the demo app rendered in the Edge DevTools: Browser tab, click the "done" circle next to the test task. The debugger of Visual Studio Code pauses at the breakpoint in the to-do.js file.
Step 6: Close DevTools
To end debugging and close the Edge DevTools tabs:
1. In the Debug toolbar, click the Stop (Shift+F5) button. Or, on the Run menu, select Stop Debugging:

The Edge DevTools tab closes, and the Edge DevTools: Browser tab closes.
See also:
 Closing DevTools in Opening DevTools and the DevTools browser.
You've finished the tutorial "Get started by right-clicking an HTML file". It's recommended that you also do the other tutorials; see Get started using the DevTools extension for Visual Studio Code.
See also
Opening DevTools and the DevTools browser
Microsoft Edge DevTools extension for Visual Studio Code
GitHub:
demo-to-do - the demo web app running on the github.io server.
Source code for demo-to-do
MicrosoftEdge/Demos repo

Get started by clicking the Launch Instance button
Article • 03/28/2023
Use this tutorial to learn how to open and close DevTools by clicking the Launch Instance button, to experiment with the demo Success webpage. This approach opens the default, Success webpage for editing, so you can practice and get started using DevTools. This approach is prominent in the UI, and it opens the DevTools tabs in nondebug mode.
This way of opening DevTools is useful for these simple scenarios:
 If you want to experiment with editing the default, Success page by using DevTools.
 If you want to inspect a page that's specified by using a URL, and don't need Debug mode. To open a different webpage, you can paste a URL or file path, in the address bar.
 If you don't have a folder open and you want to experiment with changing CSS on a page that's specified by using a URL, without editing a local source file.
Step 1: Install DevTools and prerequisites
1. If you haven't already, do the steps in Installing the DevTools extension for Visual Studio Code, and then continue below. You don't need to install and start a web server for the present tutorial, but it's recommended.
Step 2: Click the Launch Instance button
1. In Visual Studio Code, select File > New Window. Initially, no folder is opened.
2. In Activity Bar, click Microsoft Edge Tools (). The Microsoft Edge Tools Side Bar opens:

3. Click the Launch Instance button. The Edge DevTools tab opens, and the Edge DevTools: Browser tab opens, displaying the default, Success page:

In the address bar of the DevTools browser, there is a file:/// path (rather than a URL), such as file:///C:/Users/username/.vscode/extensions/msedgedevtools.vscode-edge-devtools-2.1.1/out/startpage/index.html.
The Debug toolbar doesn't open, Debug Console doesn't open at bottom, and the
Run and Debug Side Bar with Watch pane doesn't open. This indicates that Visual Studio Code is not in Debug mode.
You can modify CSS of the local files, and you can enter local file paths or localhost URLs in the address bar and interact with local web app pages.
Step 3: Open a folder, to ensure editing is allowed
Note that no folder is open in Visual Studio Code. In many cases, to use DevTools to edit rather than merely inspect a webpage, you must open a folder that contains source files that match the displayed webpage. Opening a folder gives the most flexibility so you can open either a URL or a file path in the address bar of the Edge DevTools: Browser tab and have full DevTools functionality.
Opening a folder gives you the opportunity to grant trust to the folder, so that you don't get an error message when you try to change the source files. Otherwise you might get an error message because the folder that contains the Success page is not trusted, and CSS mirror editing is trying to edit the CSS in the index.html source file in that folder.
1. In the Edge DevTools: Browser tab, in the address bar, select and copy the file path, but not the file name, such as C:/Users/username/.vscode/extensions/msedgedevtools.vscode-edge-devtools-2.1.1/out/startpage/.
2. In Activity Bar > Explorer, click the Open Folder button. In the Open Folder dialog, paste or select the path you copied above. To paste, on Windows, you might need to change / to \ throughout the path. Then click the Select Folder button.
The first time you open a folder, you must confirm that you trust the authors of files in this folder:

3. Click the Yes, I trust the authors button.
You might need to launch DevTools again, as follows:
1. In Activity Bar, click Microsoft Edge Tools (). The Microsoft Edge Tools Side Bar opens.
2. Click the Launch Instance button. The Edge DevTools tab opens, and the Edge DevTools: Browser tab opens, displaying the default, Success page.
Step 4: Edit CSS
1. In the Edge DevTools tab, click the Select an element in the page to inspect it () button, sometimes called the Inspect button.
2. In the Edge DevTools: Browser tab, hover over different parts of the page, while you watch the Elements tool's DOM tree expand and update.
3. Click the Success! heading, which is an <h2> element.
4. In the Styles tab of the Elements tool in the Edge DevTools tab, in the non-italic h2 declaration section, click to the right of the margin-bottom rule.
5. Enter a new CSS rule, font-size: 5em, and then press Enter. The spelling is similar to the rule shown in the italic h2 section from the user agent stylesheet below it. index.html opens, automatically edited by CSS mirror editing to add the line font-
size: 5em;. Scroll to that line, in the h2 section.
Step 5: Arrange tabs
1. In the Edge DevTools tab, in the non-italic h2 section, click the font-size CSS rule that you entered, and then press Up Arrow and Down Arrow. The value in
index.html is automatically edited, by CSS mirror editing.
2. In the Edge DevTools tab, click the Toggle screencast button a couple times. The Edge DevTools: Browser tab opens and closes, saving space.
3. In the Edge DevTools: Browser tab, click the Close DevTools or Open DevTools button a couple times. The other DevTools tab opens and closes, saving space.
4. Along the top of Visual Studio Code, right-click the tabs and arrange them to show the various tabs at the same time:

Step 6: View JavaScript
1. In the Edge DevTools tab, click the Console tool's tab. index.html contains a
<script> element that contains a JavaScript statement console.info('Hello from the startpage!'), which outputs "Hello from the startpage!"
Step 7: Open a different .html file by using the address bar
By entering a file path in the address bar of the Edge DevTools: Browser tab, the Launch Instance button can also be used to open a different .html file instead of the Success page. We'll demonstrate that below. However, right-clicking an .html file in the Explorer is the main way to open an .html file other than the Success webpage, and the tools open in Debug mode.
1. In Visual Studio Code, select File > Open Folder (or Open Recent). Open the \Demos\demo-to-do\ folder of the Demos repo that you cloned, such as C:\Users\username\Documents\GitHub\Demos\demo-to-do\.
2. If prompted, click the Yes, I trust the authors button. Aside from granting trust, the Launch Instance approach doesn't actually require opening a folder, if you specify a file path rather than a URL in the DevTools browser.
3. If the Edge DevTools tabs aren't open already, in the Activity Bar, click Microsoft
Edge Tools (), and then click the Launch Instance button:

4. In the Activity Bar, select Explorer, and then right-click \demo-to-do\index.html > Copy Path.
5. In Visual Studio Code, in the Edge DevTools: Browser tab, in the address bar, paste the local filepath that you obtained above, such as
C:\Users\username\Documents\GitHub\Demos\demo-to-do\index.html. The demo-todo app opens. In the address bar, the file:/// prefix is added and (on Windows) backslashes are changed to forward slashes; for example: file:///C:/Users/username/Documents/GitHub/Demos/demo-to-do/index.html.
6. In the demo app, enter a task, such as test.
7. In the Elements tool, in the Styles tab, change a CSS value, such as: click the point size in body { font-size: 11pt;} and then change the value. The corresponding
.css file in the folder that you opened opens and it is automatically edited to match your changes made in the Styles tab (but is not saved).
Step 8: Open a URL by using the address bar
The address bar that results from the Launch Instance button can be used to open a
URL on a server. However, the Launch Project button, along with a URL stored in launch.json, is the main way to open a webpage by specifying a URL, and the tools
then open in Debug mode.
1. If your localhost server is running, paste a localhost URL, such as http://localhost:8080. Or, paste the github.io server URL,
https://microsoftedge.github.io/Demos/demo-to-do/.
If you want to use CSS mirror editing to edit your source files, you'll need to open a folder in Visual Studio Code; otherwise, clear the CSS mirror editing checkbox in the Styles tab in the Elements tool in the Edge DevTools tab. Clearing the checkbox prevents error messages about mapping and mirror editing when you experiment with changing CSS in DevTools and haven't provided a CSS source file for DevTools.
2. In the demo app, enter a task, such as test.
3. In the Elements tool, in the Styles tab, change a CSS value, such as: click the point size in body { font-size: 11pt;} and then change the value. The corresponding
.css file in the folder that you opened opens and it is automatically edited to match your changes made in the Styles tab (but is not saved).
Step 9: Close DevTools
1. Click Close (x) in the Edge DevTools tab and in the Edge DevTools: Browser tab, if these tabs are open.
2. Select Activity Bar > Microsoft Edge Tools. If the Targets section lists any targets, hover on the right side of the target instance and then click Close instance (x). The Launch Instance button appears, indicating that all DevTools instances are closed.

Note that in the above screenshot, Visual Studio Code isn't in Debug mode; for example, there's no Debug toolbar. If there were a Debug toolbar, you could close DevTools by clicking the Stop button.
3. Close index.html without saving changes.
4. Select File > Close Folder.
See also:
 Closing DevTools in Opening DevTools and the DevTools browser.
You've finished the tutorial "Get started by clicking the Launch Instance button". It's recommended that you also do the other tutorials; see Get started using the DevTools extension for Visual Studio Code.
See also
Opening DevTools and the DevTools browser
Microsoft Edge DevTools extension for Visual Studio Code
GitHub:
demo-to-do - the demo web app running on the github.io server.
Source code for demo-to-do
MicrosoftEdge/Demos repo

Get started by clicking the Launch Project button
Article • 03/28/2023
Use this tutorial to learn how to open and close DevTools by clicking the Launch Project button, to run Demo To Do on a localhost web server and store the URL for the webpage in launch.json.
We'll use the demo-to-do app to demonstrate the Launch Project button after pointing that button to a localhost URL, such as http://localhost:8080. The Launch Project button starts DevTools in debug mode. This is the main way to open DevTools when your webpage requires running on a web server. As a preliminary step, we'll creating a launch.json file and edit the URL in it to point to localhost serving out the demo-to-do
example app.
You don't always need to use this approach, because in many cases, right-clicking an HTML file works. However, many webpages use APIs which require the webpage to be running on a web server, so here are specific steps you can follow.
Step 1: Install DevTools and prerequisites
1. If you haven't already, do the steps in Installing the DevTools extension for Visual Studio Code, and then continue below.
Step 2: Start the web server
This section is in support of clicking the Launch Project button.
These steps explain how to start http-server by using the cross-platform git bash shell, which is part of git. Although you could use Visual Studio Code > View > Terminal to start the server, it's better to start the server from a command prompt that's outside of
Visual Studio Code, so that the server remains running even if you close and reopen Visual Studio Code or the folder.
1. If you haven't already, set up and start a web server for the first time, serving out the demo-to-do app from the Demos repo. To do this, see Step 6: Set up a localhost server in Installing the DevTools extension for Visual Studio Code.
2. Open git bash. For example, on Windows, press Start and then enter git bash.
3. cd into the the specific folder you want to serve via http, Demos\demo-to-do\:
In git bash, use forward slashes for file paths. For example:
cd C:/Users/username/Documents/GitHub/Demos/demo-to-do4. Enter the command npx http-server. A local webserver starts on port 8080.
npx http-server
Information about the server and localhost URL is displayed, such as:
Starting up http-server, serving ./
Available on:
http://10.0.1.8:8080 http://127.0.0.1:8080
Hit CTRL-C to stop the serverThe displayed URLs are usually equivalent to the common standard URL, http://localhost:8080.
Step 3: Set up launch.json
This section is in support of clicking the Launch Project button.

no launch.json file in that folder.
2. In the Activity Bar, click Microsoft Edge Tools (). The Microsoft Edge Tools pane opens.
3. Click the Generate launch.json button:
right , and note the comment, "Provide your project's url":
JavaScript"url": "c:\\Users\\username\\.vscode\\extensions\\msedgedevtools.vscode-edge-devtools-2.1.1\\out\\startpage\\index.html", 
// Provide your project's url to finish configuring5. In a web browser, go to the http://localhost/ URL where the demo-to-do .html file is on the server, such as the common standard URL, http://localhost:8080.
6. Copy the URL from the address bar.
7. In launch.json, in each URL string, paste the URL for your cloned copy of the demo-to-do app, such as: http://localhost:8080. Paste the path inside the quoted path string in one of the "url" strings. For example:
JavaScript"url": "http://localhost:8080", // Provide your project's url to finish configuring8. Copy and paste the modified URL line to the other places in the launch.json file.
Tip: To modify all instances at the same time, you can copy an updated URL string, then select an instance of the initial URL string, press Ctrl+Shift+L to select all instances, and then paste the updated string.
9. Save the launch.json file.
Step 4: Click the Launch Project button
1. In Visual Studio Code, in the Activity Bar, click the Microsoft Edge Tools () button. The Microsoft Edge Tools pane opens, now containing a Launch Project button but not a Generate launch.json file button:

2. Click the Launch Project button.
The Edge DevTools tab and the Edge DevTools: Browser tab open in separate panes, showing the demo-to-do web app:

At this point, you could work with CSS edits or step through code in the debugger. See these sections of the tutorial Get started by right-clicking an HTML file:
Step 4: Edit CSS in DevTools, updating the .css file automatically
Step 5: Step through JavaScript code in the Debugger
Step 5: Close DevTools
To end debugging and close the Edge DevTools tabs:
1. In the Debug toolbar, click the Stop (Shift+F5) button:

Or, on the Run menu, select Stop Debugging. Or, close the two DevTools tabs. The Debug toolbar closes.
See also:
 Closing DevTools in Opening DevTools and the DevTools browser.
You've finished the tutorial "Get started by clicking the Launch Project button". It's recommended that you also do the other tutorials; see Get started using the DevTools extension for Visual Studio Code.
See also
Opening DevTools and the DevTools browser
Microsoft Edge DevTools extension for Visual Studio Code
GitHub:
demo-to-do - the demo web app running on the github.io server.
Source code for demo-to-do
MicrosoftEdge/Demos repo

Opening DevTools and the DevTools browser
Article • 03/28/2023
There are several ways to open the DevTools tab and the Edge DevTools: Browser tab:
ﾉ Expand table
ApproachDescriptionRight-click an .html file.No launch.json file is used. Opens DevTools in Debug mode. Use this approach if you want to debug, and your web app can run from the file system instead of a web server.Click the Launch Instance button.No launch.json file is used. Opens DevTools in non-debug mode. Use this approach if you don't want to debug.Click the Launch Project button.A launch.json file is used. Opens DevTools in Debug mode. Use this approach if you want to debug, and your web app uses APIs that require running it on a web server.These approaches are described below. For detailed steps using the Demos repo, see Get started using the DevTools extension for Visual Studio Code.
Opening DevTools by right-clicking an HTML file
This approach opens the DevTools tabs in debug mode and is recommended, unless the webpage requires running on a web server, as with certain APIs.
To open DevTools and the embedded browser, along with the Debug toolbar for an HTML file on your hard drive:
1. In Visual Studio Code, do any of the following:
Select Activity Bar > Explorer () > click the Open Folder button.
Select File > Open Folder.
Select File > Open Recent.
2. Open a folder that contains web app source files.
3. In Visual Studio Code, in Explorer, right-click an .html file, select Open with Edge, and then select Open Browser with DevTools:

DevTools opens, with Visual Studio Code in debug mode:

The following components open in Visual Studio Code:
The Edge DevTools tab, including the Elements tab and other tool tabs. The Edge DevTools: Browser tab, including the Device Emulation toolbar on the bottom.
 The Debug toolbar at top, including buttons such as Pause, Step Over, Step Into, Reset, and Stop.
The Debug Console at bottom.
The Run and Debug side bar (same as selecting View > Run).
In this approach, an instance is not listed in Activity Bar > Microsoft Edge Tools > Targets.
Use the Explorer Side Bar, from the Activity Bar, to open a .js file during debugging a webpage.
The Edge DevTools: Browser tab includes a Device Emulation toolbar. This tab contains an embedded web browser with DevTools features. This browser is sometimes called a screencast or a headless browser for DevTools.
See also:
 Get started by right-clicking an HTML file
Opening DevTools by clicking the Launch
Instance button
This approach opens the DevTools tabs in non-debug mode and is useful when you don't want the Debug toolbar.
These steps assume that initially, no folder is open in Visual Studio Code, and the folder you are opening doesn't have a launch.json file.
1. In Visual Studio Code, do any of the following:
Select Activity Bar > Explorer () > click the Open Folder button.
Select File > Open Folder.
Select File > Open Recent.
To use all the DevTools features, including CSS mirror editing of your local source file when you edit CSS in DevTools, open a folder that contains source files that match the webpage that you want to display in DevTools.
2. In the Activity Bar, click the Microsoft Edge Tools () button, and then click the Launch Instance button:

If there's a Launch Project button rather than a Launch Instance button, that indicates that the folder contains a launch.json file. Inspect what URL is specified in the launch.json file and consider clicking Launch Project, as described in Opening DevTools by clicking the Launch Project button. Or, if you want to explore how the Launch Instance button works, you can delete the launch.json file and generate a new launch.json file later.
 The Edge DevTools tab opens, initially containing information about the Success page, such as C:\Users\username\.vscode\extensions\msedgedevtools.vscode-edge-devtools-2.1.1\out\startpage\index.html. The Edge DevTools: Browser tab (the embedded browser) opens, initially showing the Success page.
The Debug toolbar and debug UI of Visual Studio Code doesn't open. In the Microsoft Edge Tools pane, the Targets section opens, listing a target, and the Launch Instance button is removed.
3. In the Edge DevTools: Browser tab, in the address bar, paste a file path or a URL, that matches the folder that's open in Visual Studio Code.
If you want to obtain a file path: in Visual Studio Code > Activity Bar > Explorer (
) > right-click an .html file > Copy Path.
If you want to paste a URL, examples are:
http://localhost:8080 http://127.0.0.1:8080 http://10.0.1.8:8080
Similar URLs are shown on the command line when you enter (for example) npx http-server to run a web server locally.
The webpage you specified is displayed in the Edge DevTools: Browser tab (the embedded browser). The Edge DevTools tab displays information about the webpage.
See also:
 Get started by clicking the Launch Instance button
Opening DevTools by clicking the Launch Project button
This approach opens the DevTools tabs in debug mode, and is recommended if the webpage requires running on a web server as with certain APIs.
Summary:
1. Open a local folder containing web app source files.
2. Click the Generate launch.json button.
3. Add a localhost URL in the .json file.
4. Click the Launch Project button.
These steps assume you are running a localhost web server, as described in Step 6: Set up a localhost server in Installing the DevTools extension for Visual Studio Code.
To open DevTools by clicking the Launch Project button, do the following steps.
Open a local folder containing web app source files
1. In Visual Studio Code, do any of the following:
Select Activity Bar > Explorer () > click the Open Folder button.
Select File > Open Folder.
Select File > Open Recent.
Select a directory that contains webpage source files. For example, C:\Users\username\Documents\GitHub\Demos\demo-to-do\.
2. In the Activity Bar, click Microsoft Edge Tools (	). The Microsoft Edge Tools pane opens.
If the folder doesn't already contain a .vscode directory that contains a launch.json file, the Microsoft Edge Tools Side Bar contains a Launch Instance button and a Generate launch.json button.
 If the folder already contains a .vscode directory that contains a launch.json file, the Microsoft Edge Tools Side Bar contains a Launch Project button and not a Generate launch.json button. In this case, you may want to inspect or change the url string in the existing launch.json file, as described below.
Continue below.
Click the "Generate launch.json" button
1. Click the Generate launch.json button:

Add a localhost URL in the .json file
1. In several places in the launch.json file, on each of the "url" lines, scroll to the right, and note the comment, "Provide your project's url to finish configuring":
JavaScript"url": "c:\\Users\\username\\.vscode\\extensions\\msedgedevtools.vscode-edge-devtools-2.1.1\\out\\startpage\\index.html", 
// Provide your project's url to finish configuringTypical examples:
http://localhost:8080 http://127.0.0.1:8080 http://10.0.1.8:8080
Similar URLs are shown on the command line when you start a server by entering npx http-server.
2. Paste the path inside the quoted path string in one of the "url" strings. For example:

JavaScript"url": "http://localhost:8080", // Provide your project's url to finish configuringThe URL string can be a local file path, although in that case, you don't need a launch.json file; to start DevTools, you can simply right-click an .html file in Visual Studio Code's Explorer instead.
(If you keep the URL as-is, the default, Success page is displayed, and you can paste a localhost URL or a file path into the address bar of the Edge DevTools: Browser tab.)
3. Copy and paste the modified URL line to the other places in the launch.json file.
To modify all instances at the same time, you can copy an updated URL string, then select an instance of the initial URL string, press Ctrl+Shift+L to select all instances, and then paste the updated string.
4. Save the launch.json file.
Continue below.
Click the Launch Project button
1. In Visual Studio Code, in the Activity Bar, click the Microsoft Edge Tools () button. The Microsoft Edge Tools pane opens, now containing a Launch Project button (instead of a Launch Instance button), and no longer contains a Generate launch.json file button:

2. Click the Launch Project button.
The Edge DevTools tab and the Edge DevTools: Browser tab open in separate panes, showing the web app URL that's specified in launch.json:
See also:
 Get started by clicking the Launch Project button
Mapping URL files to the opened folder
If DevTools is able to correlate and establish the workspace mapping between the files downloaded from the server and the files in the folder that you opened, DevTools provides its full functionality, including CSS mirror editing of your local source files when you change CSS in DevTools.
If DevTools can't map the files in the Edge DevTools: Browser tab to the files in the folder that you opened in Visual Studio Code's Explorer, you can inspect webpages, and you can change them, such as changing CSS values in the Sources tab of the Elements tool in the Edge DevTools tab. In this case, though, you can't use CSS mirror editing though, to have DevTools automatically edit your source files. Options include:
 Clear the CSS mirror editing checkbox in Styles tab and continue experimenting with CSS changes.
Open a folder that contains source files that match the web page.
Grant trust to a folder by opening it in Visual Studio Code.
For example:
1. Open a folder that's in your local copy of the Demos repo, such as
C:\Users\username\Documents\GitHub\Demos\demo-to-do\, as described in Get started using the DevTools extension for Visual Studio Code.
2. Open DevTools, as described above.
3. In the Edge DevTools: Browser tab, in the address bar, paste a remote github.io URL, such as https://microsoftedge.github.io/Demos/demo-to-do/	.
The files at that address actually reside as source files at GitHub at https://github.com/MicrosoftEdge/Demos/tree/main/demo-to-do, not on your drive.
You are now able to change CSS values in the Elements tool, because in Visual Studio Code's Explorer, a folder is open that contains source files that DevTools is able to map to the downloaded resource files constituting the webpage:

The above image shows using the Styles tab with CSS mirror editing checkbox selected, used to enlarge the body text to 24pt. The Edge DevTools: Browser tab renders the page as you change the value. The tab's address bar contains a URL rather than a file path. Because CSS mirror editing checkbox selected and the corresponding .css file is found in a writeable local folder, the .css file on the local drive is automatically edited to 24pt;.
Avoiding error messages about mirroring or mapping
Next, try changing CSS without a matching folder opened:
1. Select File > Close Folder.
2. Start DevTools by clicking the Launch Instance button, as described above.
3. In the Edge DevTools: Browser tab, in the address bar, paste a remote github.io URL, such as https://microsoftedge.github.io/Demos/demo-to-do/	.
Now that the folder containing source files is closed, if you try to change CSS values in the Elements tool, you get a DevTools error message. You can inspect webpages, but not edit them. You can interact with the page and see it in different devices and rendering states by using the Device Emulation toolbar at the bottom of the Edge DevTools: Browser tab.
You can also inspect the CSS and HTML. But if you try to change the page, you get an error, such as Error while mirroring:

As another perspective on that scenario, here is the Microsoft Edge Tools Side Bar when the Launch Instance button was clicked, when viewing a URL and a folder isn't open that contains source files that match the URL's webpage resources:

Options in this case include:
 Clear the CSS mirror editing checkbox in Styles tab and continue experimenting with CSS changes (without automatic editing of CSS in source files). This prevents further error messages about mapping to source files for CSS mirror editing.
 Open a folder that contains source files that match the web page, to have automatic editing of CSS in source files.
 Grant trust to a folder by opening it in Visual Studio Code, in case DevTools is attempting to edit a source file but Visual Studio Code hasn't granted trust to the containing folder.
See also:
 Troubleshooting the DevTools extension
URLs, file paths, and opening a matching folder
In some cases, behavior of DevTools is different for file paths than for URLs.
 If you enter a file path in the address bar of the DevTools browser, and you edit the CSS in DevTools, the browser knows where to find the source files. You might need to open that folder to grant trust to it, to be able to use CSS mirror editing. Or, clear the CSS mirror editing checkbox.
 If you enter a URL in the address bar of the DevTools browser, the browser knows where to find the downloaded copy of the source files, if you are only inspecting webpages and experimenting with CSS. If you want to use CSS mirror editing (to have DevTools edit CSS in source files), the CSS mirror editing checkbox must be selected and you must open a folder in Visual Studio Code containing source files that match the webpage.
Closing DevTools
Close instances of DevTools by using any of the following approaches:
 If Visual Studio Code is in Debug mode, click the Stop button in the Debug toolbar, or select Run > Stop Debugging:

The Edge DevTools and Edge DevTools: Browser tabs close.
If the Edge DevTools tab is open, click Close (x) on the tab.
If the Edge DevTools: Browser tab is open, click Close (x) on the tab.
Select Activity Bar > Microsoft Edge Tools. If the Targets section lists any targets, hover on the right side of the target instance and then click Close instance (x):

The Launch Instance or Launch Project button is then displayed.
Select File > Close Folder.
Close the Visual Studio Code window.
If an external, automation-controlled browser was opened by the DevTools extension, close the external browser window.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
Limitations of the embedded DevTools browser in Using an external browser window.

Integration with Visual Studio Code debugging
Article • 03/28/2023
To open DevTools in Visual Studio Code in Debug mode by using the DevTools UI, rightclick an .html file or click the Launch Project button, as described in Opening DevTools and the DevTools browser. You can also use the Visual Studio Code UI for launching the Debugger, such as F5, to open the DevTools tabs as well, if you define a DevToolscompatible launch.json file by clicking the Generate launch.json button in the Microsoft Edge Tools Side Bar.

When you open DevTools in Visual Studio Code in Debug mode, the following UI components are opened:
The Edge DevTools tab.
The Edge DevTools: Browser tab.
The Debug toolbar.
The Run (Debugger) Side Bar, including the Watch pane.
The Debug Console at bottom of window.
See also Step 5: Step through JavaScript code in the Debugger in Get started by rightclicking an HTML file.
Ways to start the debugger along with the
DevTools tabs
Most of these approaches require a DevTools-generated launch.json file that contains your URL.
DevTools UI features to open DevTools in Debug mode
 Right-click an .html file in Explorer > Open with Edge. This approach essentially uses a file path rather than a URL, and doesn't require you to generate a launch.json file.
Activity Bar > Microsoft Edge Tools > click the Launch Project button.
Visual Studio Code UI features to open DevTools in Debug mode
 Press F5.
 On the Activity Bar, click the Run and Debug icon (), and then in the Run and Debug Side Bar, click the Run and Debug button.
 Open the Visual Studio Code command palette, start typing the word debug after >, and then select Debug: Open Link. See Open Link command in Browser debugging in VS Code.
Opening the browser as part of a debugging session
You can open the Edge DevTools: Browser tab (the embedded DevTools browser) as part of a debugging session. The DevTools extension opens a new browser as an embedded browser in Visual Studio Code. This Devtools: Browser tab can be moved anywhere within the editor. You can use this tab side by side with your source code, or split the panes and have the browser preview below your code:

You can use the DevTools extension with the usual Visual Studio Code debugging
UI/workflow, as follows. In this approach, to enter Debug mode, we are not using the DevTools UI; we are not right-clicking an .html file to select Open with Edge, and we are not clicking the Activity Bar > Microsoft Edge Tools > Launch Project button.
JavaScript debugging is built in to Visual Studio Code; you can debug in Chrome,
Microsoft Edge, or Node.js without installing extensions. If you debug by using the Microsoft Edge option with the Visual Studio Code debugging features and UI, you can start Microsoft Edge DevTools from the JavaScript debugger. If the DevTools extension isn't installed, you're prompted to optionally install it.
The DevTools extension gives additional functionality, such as the embedded DevTools browser which has a Device Emulation toolbar, and provides additional ways to enter Debug mode in Visual Studio Code.
See also:
 Limitations of the embedded DevTools browser in Using an external browser window.
Start the debugger
To start the Visual Studio Code debugger along with DevTools, by using the usual UI that's part of Visual Studio Code:
1. Open a new Visual Studio Code window. No folder (workspace) is open, and the DevTools tabs aren't open.
2. Open a folder (workspace). For example, select File > Open Recent >
C:\Users\username\Documents\GitHub\Demos\demo-to-do. The DevTools tabs aren't open.
3. Open an .html file.
4. Click in the .html file in the editor, and then do any of the following UI actions that start the Visual Studio Code debugger the usual ways:
 Press F5.
 On the Activity Bar, click the Run and Debug icon (), and then in the Run and Debug Side Bar, click the Run and Debug button, as shown below.
 Open the Visual Studio Code command palette, start typing the word debug, and then select Debug: Open Link.

Microsoft Edge Tools doesn't appear in the above screenshot, because for this screenshot, DevTools was uninstalled.
5. Select Web App (Edge).
6. On the Debug toolbar, click the Inspect button, which has a tooltip of Open browser DevTools:

The first time you click the Inspect button on the Debug toolbar, the Extensions:
Marketplace Side Bar opens, containing Microsoft Edge Tools for VS Code:

7. Click Microsoft Edge Tools for VS Code > Install.
8. Close DevTools per Closing DevTools.
9. Open a folder and an .html file.
Continue below.
Generating a DevTools-oriented launch.json
Assuming that the opened folder doesn't contain a .vscode folder that contains a launch.json file already:
1. Select Activity Bar > Microsoft Edge Tools > click the Generate launch.json button, and then press F5. Or, see Opening DevTools and the DevTools browser.
After the DevTools extension is installed, when you open an .html file and then click the Inspect button on the Debug toolbar, the Edge DevTools tabs open inside of Visual Studio Code:
In the above screenshot, there's a launch.json file in Explorer in the .vscode folder, and a string from that file, Launch Edge Headless and attach DevTools, at the bottom of the window, because DevTools was opened by a Visual Studio Code feature such as F5, which used the DevTools-generated launch.json file.
2. If needed, in the upper left of the Edge DevTools tab, click the Toggle screencast button:

The Edge DevTools: Browser tab opens.
In the above screenshot, there's no launch.json file in Explorer in the .vscode folder, and no string such as Launch Edge Headless and attach DevTools at the bottom of the window, because DevTools was opened by right-clicking the .html file in Explorer.
For additional UI steps and screenshots, see Where the name strings appear in the UI. In most cases, the only thing you need to know about the content of the DevToolsgenerated launch.json file is that you need to enter your desired URL in the "url" string in several places.
Automatically opening the browser and
DevTools when debugging in Visual Studio Code
To debug your project, you might want to change the default page that opens in Microsoft Edge in Visual Studio Code. To change the default page to your project's website:
1. In Visual Studio Code, select File > New Window. Notice that no folder is open.
2. On the Activity Bar, select Microsoft Edge Tools.
3. In the Microsoft Edge Tools: Targets panel, click the open a folder link.
4. Select your project folder with the new default page to display when you begin debugging in Visual Studio Code.
The first time you open a folder, you must confirm that you trust the authors of files in this folder:

5. Optionally select the checkbox Trust the authors of all files in the parent folder, and then click the Yes, I trust the authors button:
The first time you do this process, you must also select Activity Bar > Microsoft Edge Tools again.
The Microsoft Edge Tools: Targets panel now displays two buttons: Launch Instance and Generate launch.json:

Generating a DevTools-oriented launch.json
1. Select Generate launch.json to create a launch.json in your project. This must be a longer file that's created by DevTools, as shown in The launch.json file for the DevTools extension, not a short, more generic file created by Visual Studio Code. See also Deleting or re-creating launch.json in Troubleshooting the DevTools extension.
2. In launch.json, add the URL of your project. If you leave URL empty, the default page is displayed.
3. Save launch.json.
When you choose to debug your project in Visual Studio Code, whether you use DevTools UI features or the usual Visual Studio Code UI features, it will automatically launch the browser and open the Developer Tools, showing the URL you specified in your launch.json file.
If you see the Success page but want your own webpage instead
Which webpage opens is in DevTools is set by launch.json if that file exists in your workspace (your open folder). Thus you might press F5 while your own .html file is open, and yet see the default, Success page in the DevTools tabs. Options in that case are:
 Edit launch.json in your open folder to point to a URL (normally), or possibly a file path. Then you can use the Visual Studio Code debugger workflow/UI, such as F5.
 Or, delete launch.json, then Activity Bar > Explorer > right-click your .html file > select Open with Edge. This approach doesn't use the Visual Studio Code Debugger workflow/UI, such as F5.
See also
The launch.json file for the DevTools extension
Debug Microsoft Edge in Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
The Visual Studio Code debugger now integrates with the DevTools extension in What's New in DevTools (Microsoft Edge 93).
External pages:
Launch configurations in the Debugging article for Visual Studio Code.
Browser debugging in VS Code

Opening source files from the Elements tool
Article • 10/19/2022
In the Elements tool:
 The Styles tab indicates which source file is used to apply styles to the selected node in the DOM tree.
 The Event Listeners tab indicates which source file is used to define event handlers for the selected node in the DOM tree.
The source file name and line number are shown as a clickable link. Clicking a file name link opens that file in the Visual Studio Code editor:

For more information about the Elements tool, see Inspect, edit, and debug HTML and CSS with the Elements tool.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code

Inline and live issue analysis
Article • 06/20/2024
Issues in your source code (.html, .css, or .js files) are highlighted with wavy underlines. You can inspect the issue and get detailed information about what the problem is, how to fix it, and where to find more information. To inspect the issue, click the code that has the wavy underline:

This feature requires Node.js and npm (Node Package Manager). See Step 4: Install Node.js and Node Package Manager (npm) in Installing the DevTools extension for Visual Studio Code.
This feature is on by default; the Webhint checkbox is selected in Settings. To turn this feature on or off, select Activity Bar > Microsoft Edge Tools > hover to the right of
Targets > More Actions (...) > Open Settings > select or clear the Webhint checkbox:

To see all the issues in the file, click View Problem:

The Problems tab in the lower panel lists all the issues that DevTools found in the currently open files:

Video: Advanced issues filtering in Edge DevTools and VSCode

Live updating of issues reporting
Issues are evaluated live while you edit your code. As you type, you get feedback about any issues that are found, and how to fix them:

Automated Quick Fixes and issue filtering
The Microsoft Edge DevTools extension for Visual Studio Code includes a Quick Fix feature. By using Quick Fixes, you can customize the error reporting of the extension to meet the needs of the current project.
When you hover over an element that has an issue, you get a light bulb () icon indicating that there are Quick Fixes available:

Clicking the light bulb icon shows a list of options. For example, if you added a link that has a protocol-relative URL, you get the following Quick Fix list to choose from:

You can select whichever Quick Fix you want to use to resolve the issue or to stop reporting it as an issue:
 Fix "no-protocol-relative-urls" issue - Adds the missing URL prefix https:// to the link.
 Disable "no-protocol-relative-urls" hints in this project - Creates a .hintrc configuration file in the project folder (if one doesn't exist already), and tells the extension to not report this issue for this project.
 Edit .hintrc for this project - Opens the .hintrc configuration file so you can edit it to customize the extension's error reporting.
See also
Find and fix problems using the Issues tool
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code

Device emulation
Article • 05/15/2024
In the Edge DevTools: Browser tab, the Device Emulation toolbar on the bottom enables you to simulate different environments:

To reproduce the UI shown here, see Opening DevTools by right-clicking an HTML file in Opening DevTools and the DevTools browser.
See also:
 Limitations of the embedded DevTools browser in Using an external browser window.
Emulate Devices dropdown menu
In the Emulate devices dropdown menu, you can select from a number of different devices, or the default option of Responsive. When you select a device, the viewport resizes to the correct measurements and simulates the touch interface. For example, there are several emulated iPhone layouts:

Width and Height dropdown menus
To change the viewport dimensions, click the Width and Height dropdown menus:

Rotate button
Click the Rotate button () to rotate the viewport between portrait and landscape orientation:

Emulate CSS Media Features button
Use the Emulate CSS media features button () to:
Emulate CSS media queries.
Test how your product looks in print mode.
Switch between dark and light mode.
Emulate forced colors.

Emulate Vision Deficiencies button
Click the Emulate vision deficiencies () button to test the user experience of the current webpage with different visual deficiencies. This button lets you test your product in a blurred mode, or in different color deficiencies:

See also
 Emulate mobile devices (Device Emulation)
Microsoft Edge DevTools extension for Visual Studio Code

Update .css files from within the Styles tab (CSS mirror editing)
Article • 03/28/2023
CSS mirror editing provides two-way interaction so that you can change the CSS either way:
 In the code editor, edit the .css file, your changes are mirrored in the Elements tool in the Edge DevTools tab.
In the Elements tool in the Edge DevTools tab, your changes are mirrored in the .css file in the code editor.
CSS mirror editing is enabled by default in the extension. As a result, in the DevTools extension, in the Styles tab in the Elements tool, when you change CSS selectors, rules, or values, the local .css file is automatically edited as you change values.
For example, when you select a point size value for the body element and then press Up Arrow or Down Arrow, if you have the .css file opened, you can see the value automatically change in the .css file in realtime while you change the value in the Styles tab:

Without CSS mirror editing, the Styles tab in Microsoft Edge DevTools is excellent for debugging and tweaking your CSS selectors and CSS rules. However, although these changes are immediately rendered in the web browser, they aren't reflected in your
.css file. This means that after you change CSS in the Styles tab, you need to copy and paste your changes back into your .css file.
CSS mirror editing is a feature of the Microsoft Edge DevTools extension that works around that problem. Any change that you make in the Styles tab also automatically changes the .css file in your open folder in Visual Studio Code. You can edit any CSS selector or create new CSS selectors in the Styles tab, and all changes are automatically mirrored in the correct .css file.
CSS mirror editing also works for an .html file that contains a <style> element, such as the Success page. This is demonstrated in Get started by clicking the Launch Instance button.
The CSS Mirror Editing checkbox
If you use a URL (instead of a file path), CSS mirror editing requires opening a folder of webpage source files in Visual Studio Code that the extension can map to the webpage resources of the URL that's entered into the address bar or a launch.json file. If you don't have the local source files, but want to change CSS in DevTools, clear the CSS mirror editing checkbox, to prevent error messages about mapping and mirror editing.
See Enabling CSS mirror editing, below.
Saving the changes to the .css file
The extension doesn't automatically save the changes that it makes in the editor. A white circle appears on the .css file's tab in the editor; you need to manually save the changes if you want to keep them.
If you close Visual Studio or the current folder or the .css file, Visual Studio prompts you to save the changes.
Example of mirroring changes from the Styles tab to a .css file
In the following example, index.html is open in Visual Studio Code, and the Microsoft Edge DevTools extension is open. We select the flexbox icon in the .searchbar CSS selector, and then change the flex-direction to column.
The change is reflected in the Edge DevTools tab and in the Edge DevTools: Browser tab:

As a result of CSS mirror editing, Visual Studio Code also automatically navigates to the correct .css file and the appropriate line number, and inserts the flex-direction:
Enabling CSS mirror editing
If you have writable, trusted source files, and you want your CSS changes in DevTools to be automatically edited in the source files, select the CSS mirror editing checkbox. It is selected by default.
Clear the CSS mirror editing check box if you're experimenting only, and there's a URL rather than a file path in the address bar in the Edge DevTools: Browser tab, and don't have source files locally via Activity Bar > Explorer > the Open Folder button, and don't want error messages about mapping and mirror editing.
To enable or disable CSS mirror editing:
1. In the Edge DevTools tab, in the Elements tab, go to the Styles tab.
2. Select or clear the CSS mirror editing checkbox:

Or, open the Command Menu, start typing the word mirror, and then select
Microsoft Edge Tools: Toggle mirror editing on|off for CSS files in workspace:

Sourcemap support
CSS Mirroring also supports abstractions like Sass or CSS-in-JS when you have set up your project to produce sourcemaps. We have a tracking issue on GitHub and welcome any feedback on how this could be improved: CSS Mirror Editing with Sourcemaps:
Known Issues and Feedback.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
Network tool integration
Article • 10/19/2022
The DevTools Network tool allows you to monitor network traffic and change network conditions of your application, from within Visual Studio Code:

Use the Network tool to:
Analyze the network traffic and find out why some resources aren't loaded.
Simulate different network conditions, such as being offline or having a slow connection.
Disable any caching that might make it hard to debug your application.
Simulate different user agents to see how your product appears to a search engine bot or a browser that you can't test in.
For more information about the Network tool in DevTools, see Inspect network activity.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
Console integration
Article • 03/20/2023
In the Edge DevTools tab's Console tool in Visual Studio Code with this extension, you can do everything that you can do when using Microsoft Edge DevTools inside the browser.

You can:
View log messages.
Access the window object and use the DOM interaction convenience methods.
Filter the Console and set live expressions.
Console side-by-side with other tools
You can use the Console alongside the Elements tool, by opening the Console in the lower panel of the Edge DevTools tab:

Console during Run and Debug
If you launch the DevTools extension from the Run and Debug workflow, the Debug Console of Visual Studio Code gives you most of the functions of the Edge DevTools tab's Console tool, but without filtering options, and with a more basic results display than the Edge DevTools tab's Console tool:

See also
Console overview
Debugging - the Debug Console of Visual Studio Code.
Get started using the DevTools extension for Visual Studio Code
 Microsoft Edge DevTools extension for Visual Studio Code

Application tool integration
Article • 10/19/2022
In the Edge DevTools tab, the Application tool allows you to inspect the various parts of your application:

Use the Application tool to:
 Check different storage options, such as Cookies, LocalStorage, SessionStorage and IndexedDB.
Analyze the cache of your application.
Analyze services such as Notification, Payment handler, or background sync.
For more information, see Application tool, to manage storage.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
Changing the extension settings
Article • 10/19/2022
You can customize the Visual Studio Code extension to your needs.
1. In Visual Studio Code, on the Activity Bar, click Microsoft Edge Tools.
2. In Microsoft Edge Tools > Targets, click More Actions (...) to the right of the word TARGETS, and then select the Open Settings menuitem.

The Settings page appears, filtered to show vscode-edge-devtools settings only.
3. Scroll through the available settings.
List of Settings
The Settings page of DevTools v2.1.1 contains these settings. For more information, see the Settings page.
Browser Args
Browser Flavor
Default Entrypoint
Default Url
Headless
Hostname
Path Mapping
Port
Show Workers
Source Map Path Overrides
Source Maps
Timeout
Use Https
User Data Dir
Webhint
Web Root
Bottom
Top
Split On Drag and Drop
Ignored Extensions
HTML: Custom Data
Reloading the extension after changing settings
Some settings have a note that reads (reload required after changing). For such a setting to take effect, close any instances of DevTools. See Closing DevTools in Opening DevTools and the DevTools browser.
Then open DevTools again to use the new settings. See Opening DevTools and the DevTools browser.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
The launch.json file for the DevTools extension
Article • 03/28/2023
Visual Studio Code uses a launch.json file to define debug configurations. To use the DevTools extension, a launch.json file is only needed if you want to use the debugger and your webpage requires running on a web server, not just a local file system. In most cases, the only thing you need to know about the content of the DevTools-generated
launch.json file (if you choose to use it) is that you need to enter your desired URL in
the "url" string in several places. Read this article if you want to use custom, advanced debug configurations.
If you want to use Visual Studio Code's UI such as F5 to start the DevTools tabs along with Debug mode, your opened folder (workspace) must contain a DevTools-generated (DevTools-compatible) launch.json file in the .vscode directory.
Details about the launch.json file format are below. You normally don't need to change anything in the file except to replace several instances of the URL string, as explained in
Opening DevTools by clicking the Launch Project button in Opening DevTools and the DevTools browser.
Where the name strings appear in the UI
The "name" string of each debug configuration populates dropdown lists in several places.
1. Select File > Close Folder.
2. Select File > Open Recent > C:\Users\username\Documents\GitHub\Demos\demo-todo\index.html, cloned per Step 5: Clone the Demos repo in Installing the DevTools extension for Visual Studio Code.
Suppose no launch.json file exists in the .vscode directory.
3. Select Activity Bar > Microsoft Edge Tools > click the Generate launch.json button.
4. In Activity Bar > Explorer, double-click index.html to open it.
5. Select Activity Bar > Run and Debug > click the Run and Debug button.
In the Run and Debug Side Bar in the upper left, the strings are Launch Edge Headless and attach DevTools and Launch Edge and attach DevTools. In the bottom of the Visual Studio Code window, the string is Launch Edge Headless and attach DevTools. These are names of compound configurations in the .json file, telling the Visual Studio Code debugger to open the two DevTools tabs, or else the DevTools tab and an external browser:
JSON "compounds": [
     {
         "name": "Launch Edge Headless and attach DevTools",
         "configurations": [
             "Launch Microsoft Edge in headless mode",
             "Open Edge DevTools"
         ]
     },
     {
         "name": "Launch Edge and attach DevTools",
         "configurations": [
             "Launch Microsoft Edge",
             "Open Edge DevTools"
         ]
     }
 ]
In the Debug Console in the lower right, the string is Launch Microsoft Edge in headless mode. This is a string not about the Edge DevTools tab, but about the Edge DevTools: Browser tab. It's the name of an individual configuration, not of a compound configuration:
JSON    "configurations": [
     ...
     {
         "type": "pwa-msedge",
         "name": "Launch Microsoft Edge in headless mode",
         "request": "launch",
         "runtimeArgs": [
             "--headless",
             "--remote-debugging-port=9222"
         ],
         "url": 
"file://c:\\Users\\collabera\\Documents\\GitHub\\Demos\\demo-todo\\index.html",
         "presentation": {
             "hidden": true
         }
     },
6. In the Run and Debug Side Bar, click Start Debugging. The two DevTools tabs open, and Visual Studio Code enters Debug mode. This approach is the built-in Visual Studio Code UI for starting the debugger, rather than the DevTools UI that's described in Opening DevTools and the DevTools browser.
Where the launch.json file is placed
1. In Visual Studio Code's Explorer pane, the launch.json file is placed in a .vscode folder at the root of the folder that you opened.
 For a repo, such as the Demos repo, if you open the entire repo folder, the Generate launch.json button creates a \.vscode\launch.json file near the root, for the entire repo directory.
 If you open a particular, smaller folder, such as \Demos\demo-to-do\, the Generate launch.json button puts a launch.json file in that folder only.
Visual Studio Code uses a launch.json file to configure and customize the debugger. launch.json is a debugger configuration file. This file also controls which web browser
to use in conjunction with the debugger. For example, when you test your webpage by clicking a button in the webpage to cause your JavaScript code to run, the Visual Studio Code debugger listens to the browser and steps through the JavaScript code of the webpage.
The following is a copy of the launch.json after clicking the Create launch.json button in the extension.
There are three configurations and two compounds initially defined by default:
configurations - in the Visual Studio Code UI, these configuration names appear
in Debugger UI:
Launch Microsoft Edge - this is a "launch"-type configuration.
Launch Microsoft Edge in headless mode - this is a "launch"-type configuration.
  Open Edge DevTools - this is a "debug"-type (or "attach"-type) configuration. compounds - in the Visual Studio Code UI, these appear in the Debug toolbar:
Launch Edge Headless and attach DevTools
Launch Edge and attach DevTools
Intellisense and autocomplete
Hover over a JSON name or value to show a tooltip:

Start typing double-quotes, to see the autocompletion list of available JSON properties and descriptions:

When saving the file, be sure to provide well-formed JSON, including commas.
Configuration types: launch vs. debug
These two distinct types of configurations are both defined in this .json file for the Visual Studio Code debugger.
Configurations
The following sections of launch.json file are from v2.1.1 of the extension, in a default installation location for Visual Studio Code on Windows.
Configuration 1: Launch Microsoft Edge
This is a "launch browser"-type configuration. This configuration controls the browser component, such as which .html file to display, when headless is not selected in the UI.
This configuration name doesn't appear directly in the UI. This configuration is used by a compound configuration, below.
JSON        {
            "type": "pwa-msedge",
            "name": "Launch Microsoft Edge",
            "request": "launch",
            "runtimeArgs": [
                "--remote-debugging-port=9222"
            ],
            "url": "c:\\Users\\username\\.vscode\\extensions\\ms-
edgedevtools.vscode-edge-devtools-2.1.1\\out\\startpage\\index.html", // 
Provide your project's url to finish configuring
            "presentation": {                 "hidden": true
            }
        },Configuration 2: Launch Microsoft Edge in headless mode
This is a "launch browser"-type configuration. This configuration controls the browser component, such as which .html file to display, when Headless is selected in the the Edge DevTools > Settings page, as it is by default.
This configuration name Launch Microsoft Edge in headless mode appears in the UI, such as in the Debug toolbar and in the Debug Console. If you launch multiple instances, a number is appended to the additional instances in the UI, such as Launch Microsoft Edge in headless mode 2. This configuration is used by a compound configuration, below.
JSON
        {
            "type": "pwa-msedge",
            "name": "Launch Microsoft Edge in headless mode",
            "request": "launch",
            "runtimeArgs": [
                "--headless",
                "--remote-debugging-port=9222"
            ],
            "url": "c:\\Users\\username\\.vscode\\extensions\\ms-
edgedevtools.vscode-edge-devtools-2.1.1\\out\\startpage\\index.html", // 
Provide your project's url to finish configuring
            "presentation": {                 "hidden": true
            }
        },Configuration 3: Open Edge DevTools
This is a "attach debugger"-type configuration. This configuration controls the Edge DevTools tab (pane), such as which .html file populates the Elements tool.
This configuration name doesn't appear directly in the UI. This configuration is used by a compound configuration, below.
JSON        {
            "type": "vscode-edge-devtools.debug",
            "name": "Open Edge DevTools",
            "request": "attach",
            "url": "c:\\Users\\username\\.vscode\\extensions\\ms-
edgedevtools.vscode-edge-devtools-2.1.1\\out\\startpage\\index.html", // 
Provide your project's url to finish configuring
            "presentation": {                 "hidden": true
            }
        }Compound configurations
The compounds section of launch.json defines compound configurations.
Each compound configuration refers to two configurations: one configuration to open the Edge DevTools tab in Visual Studio Code, and the other configuration to open either the Edge DevTools: Browser tab (sometimes called the screencast or headless browser), or both the Edge DevTools: Browser tab and the entire Microsoft Edge browser window.
In the Microsoft Edge Tools pane, in the Targets section, on the right side of a target, click the Toggle screencast button. The headless embedded Edge DevTools: Browser tab (pane) closes or opens.
In the Microsoft Edge Tools pane, in the Targets section, on the right side of a target, click the Attach and open Microsoft Edge Tools button.
Compound configuration 1: Launch Edge Headless and attach DevTools
This compound configuration launches the following components:
 The Edge DevTools: Browser tab (pane) in Visual Studio Code. This is defined by the configuration that has the name "Launch Microsoft Edge in headless mode", above.
 The Edge DevTools tab (pane) in Visual Studio Code. This is defined by the configuration that has the name "Open Edge DevTools", above.
JSON        {
            "name": "Launch Edge Headless and attach DevTools",
            "configurations": [
                "Launch Microsoft Edge in headless mode",
                "Open Edge DevTools"
            ]
        },The name of this compound configuration, Launch Edge Headless and attach DevTools, appears in the Debug toolbar of Visual Studio Code.
Compound configuration 2: Launch Edge and attach DevTools
This compound configuration launches the following components:
 The Edge DevTools: Browser tab (pane) in Visual Studio Code. This is defined by the configuration that has the name "Launch Microsoft Edge", above.
 The Microsoft Edge browser window. This is defined by the configuration that has the name "Launch Microsoft Edge", above.
 The Edge DevTools tab (pane) in Visual Studio Code. This is defined by the configuration that has the name "Open Edge DevTools", above.
JSON        {
            "name": "Launch Edge and attach DevTools",
            "configurations": [
                "Launch Microsoft Edge",
                "Open Edge DevTools"
            ]
        }The name of this compound configuration, Launch Edge and attach DevTools, appears in the UI in the Debug toolbar of Visual Studio Code.
Adding configurations
You can define your own, additional debugging configurations. Click the Add configuration button.
See also
Opening DevTools and the DevTools browser.
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
launch.json for other platforms
	Configure C/C++ debugging	 in the Visual Studio Code docs.
Configure the debugger	 in Using React in Visual Studio Code in the Visual Studio Code docs.

Using an external browser window
Article • 05/15/2024
By default, DevTools opens the Edge DevTools: Browser tab in Visual Studio Code. The alternative approach is to have DevTools open an external, automation-controlled Microsoft Edge window.
External browser window
External browser window means that when you launch an instance of the browser by using the Edge DevTools extension, an entire Microsoft Edge window with full UI opens, controlled by DevTools test automation:

When the external browser window is open, the Edge DevTools: Browser tab doesn't open when you start DevTools:

If you then click the Toggle screencast button in the Edge DevTools tab, the Edge DevTools: Browser tab opens, displaying The tab is inactive:

The embedded DevTools browser
By default, DevTools opens the Edge DevTools: Browser tab in Visual Studio Code, rather than opening an external browser window. The Edge DevTools: Browser tab includes a device emulation toolbar at the bottom:

This tab is also called:
The headless browser, in Settings.
The screencast, in tooltips.
The embedded browser.
The DevTools browser.
The embedded DevTools browser.
Limitations of the embedded DevTools browser
The embedded Edge DevTools Browser in the Visual Studio Code DevTools extension provides a simple preview with many restrictions, and doesn't support all the features of a real web browser. When you need a full-featured browser, use an external browser window instead of the embedded browser. The embedded DevTools browser is a browser instance that runs without a user interface, and from which screen captures are being streamed. Therefore, not all user interactions are implemented.
The embedded DevTools browser has limitations including the following:
Drag-and-drop isn't supported.
onPasteCapture and onPaste events don't trigger.
The CSS cursor property isn't respected.
 There might be visual performance issues.
Changing the setting
To change or check the setting for which type of browser window to use:
1. In Visual Studio Code, select Activity Bar > Microsoft Edge Tools. The Microsoft Edge Tools Side Bar opens.
2. Hover to the right of Targets, and then click More Actions (...) > Open Settings.

3. If you want to use the Edge DevTools: Browser tab in Visual Studio Code, select the Headless checkbox.
Or, if you want to use the external, automation-controlled browser window, clear the Headless checkbox.
4. Close DevTools. See Closing DevTools in Opening DevTools and the DevTools browser.
5. Open DevTools. See Opening DevTools and the DevTools browser.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code Debug Microsoft Edge in Visual Studio Code
External articles:
 Browser debugging in VS Code

Troubleshooting the DevTools extension
Article • 12/09/2022
 Make sure to open DevTools in one of the supported ways or scenarios. See Opening DevTools and the DevTools browser.
Controlling CSS mirror editing
By default, the CSS mirror editing checkbox is selected, in the Styles tab in the Elements tool in the Edge DevTools tab. If you change CSS values using DevTools, but DevTools doesn't find a matching file in a workspace (folder) that's open in Visual Studio Code, error messages about mapping to source files for CSS mirror editing appear.
If you are changing CSS in DevTools, either:
 Select the CSS mirror editing checkbox and open a folder that contains source files that match the webpage that you are inspecting with DevTools.
 Or, clear the CSS mirror editing checkbox, to prevent such error messages.
See also:
 The CSS Mirror Editing checkbox in Update .css files from within the Styles tab (CSS mirror editing)
 Mapping URL files to the opened folder in Opening DevTools and the DevTools browser.
Restarting DevTools
A powerful way of restarting DevTools is to close and reopen the folder:
1. In Visual Studio Code, select File > Close Folder.
2. If you started a web server by using Terminal in Visual Studio Code, restart the web server, such as by running npx http-server. Or instead, you can start the web server from a command prompt outside of Visual Studio Code, so it keeps running.
For more information, see Step 6: Set up a localhost server in Installing the DevTools extension for Visual Studio Code.
3. In Visual Studio Code, select File > Open Recent, and open a folder that contains web page source files.
Closing all instances of DevTools
Normally, closing the two DevTools tabs closes any instances of DevTools and the DevTools browser. If the Debug toolbar is open, click the Stop button.
To reset the state of DevTools, close all instances of DevTools. Make sure the Launch Instance button is shown in Visual Studio Code > Activity Bar > Microsoft Edge Tools Side Bar. That indicates that no instance of DevTools is running.
If necessary, close all Visual Studio Code instances, then open Visual Studio Code, and make sure the Launch Instance button is shown in Activity Bar > Microsoft Edge Tools Side Bar.
Error messages
The solution for most error messages is to open DevTools in one of the recommended ways. Make sure a folder is open that contains webpage source files that DevTools can map to the file path or URL that the DevTools browser is using.
The DevTools browser uses the URL or file path that you specify any of the various ways:
ﾉ Expand table
Way of opening DevToolsWhere the file path or URL is specifiedClick the Launch Instance button.The URL or file path that you specify in the DevTools browser's address bar.Right-click an .html file.The path of the .html file that you right-click.Click the Launch Project button.The URL or file path that you specify in launch.json.If you enter a different URL or file path in the address bar of the DevTools browser, for DevTools to provide automatic CSS mirror editing of local source files, you must also open a folder that contains files that match the webpage (file path or URL) that you specify in the DevTools browser.
Suppose you click the Launch Instance button, then paste a localhost URL into the address bar, such as http://localhost:8080, but you don't have the local source files folder open. Then in the Styles tab of the Elements tool, try to change a CSS value. Error messages might appear, such as:
 Error while mirroring css content to document. Could not mirror css changes to document. No workspace mapping was found.


See Opening DevTools and the DevTools browser.
Deleting or re-creating launch.json
In addition to closing a reopening a folder, if you want to reset a project to use with DevTools, you can delete and optionally re-create launch.json. launch.json defines debug configurations.
The following launch.json file is too short for the DevTools extension. It was created by
Visual Studio Code without using the DevTools extension. The Demos repo doesn't have launch.json in demo-to-do	, so you might want to remove the file:

2. In Visual Studio Code > Activity Bar > Explorer, right-click launch.json > Delete.
Activity Bar > Microsoft Edge Tools now shows a Launch Instance button and a Generate launch.json button.
3. If you want use a launch.json file for DevTools, make sure you have the desired folder open in Visual Studio Code > Activity Bar > Explorer, and then click the Generate launch.json button. See Opening DevTools by clicking the Launch Project button in Opening DevTools and the DevTools browser.
launch.json requires well-formed JSON
If Activity Bar > Microsoft Edge Tools contains a Configure launch.json button instead of the expected Launch Project button when a DevTools-generated launch.json file exists in the opened folder, this may be caused by adding a line with a missing comma or empty quotes. Be sure launch.json contains well-formed JSON.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code
Opening DevTools and the DevTools browser

Getting in touch with the Microsoft Edge DevTools Extension team
Article • 10/19/2022
Send your feedback by filing an issue in the vscode-edge-devtools repo.
Your contributions are welcome, to help make the Microsoft Edge DevTools extension better. Find everything you need to get started in the vscode-edge-devtools repo.
See also
Get started using the DevTools extension for Visual Studio Code
Microsoft Edge DevTools extension for Visual Studio Code

Microsoft Edge extensions documentation
Develop an extension (add-on) for Microsoft Edge.


Using Content Security Policy (CSP) to control which resources can be run


Samples for Microsoft Edge extensions

Overview of Microsoft Edge extensions
Article • 08/21/2024
A Microsoft Edge extension, also called an add-on, is a small app that developers use to add or modify features of Microsoft Edge to improve a user's browsing experience. An extension provides a niche experience or function that is important to a target audience.
You publish a Microsoft Edge extension at the Microsoft Edge Add-ons website.
You can create a Microsoft Edge extension if you have an idea or product that is based upon either a specific web browser, or improvements to features of specific webpages.
Examples of companion experiences include ad blockers and password managers.
An extension should include at least the following features:
An app manifest JSON file that contains basic platform information.
A JavaScript file that defines the function.
HTML and CSS files that define the user interface.
To work directly with a specific part of the browser, such as a window or tab, you must send API requests, and must often reference the browser by name.

See also:
Everything to know about browser extensions - introduction for users.
Add, turn off, or remove extensions in Microsoft Edge - support steps for users.
Basic guidance
Great places to begin your extension development tutorials and documentation research are sites hosted by the browser organizations. Some of the popular browsers to build extensions for include Microsoft Edge, Safari, Firefox, Chrome, Opera, and Brave.
The following table isn't exhaustive or definitive; it's just a starting point for your research.
ﾉ Expand table
Web browserChromium-based?Extension development webpageSafariNoSafari App ExtensionsFirefoxNoBrowser ExtensionsChromeYesAPI ReferenceOperaYesExtensions DocumentationBraveYesUses Chrome Web StoreMicrosoft EdgeYesMicrosoft Edge Add-ons Developer） Important
Many of the tutorials on these sites use browser-specific APIs that might not match the browser for the app you are developing. In most cases, a Chromium extension works as-is in different Chromium browsers and the APIs work as expected. Some less-common APIs might be browser-specific. Links to the tutorials are in the See also section, below.
Why Chromium?
If your goal is to publish your extension in the extensions store for each browser, your extension must be modified for each version to target and run in each distinct browser environment. For example, Safari extensions can use both web and native code to communicate with counterpart native applications. The last four browsers in the previous table use the same code package and minimize the need to maintain parallel versions. These browsers are based on the Chromium open-source project.
Benefits of creating a Chromium extension include writing the fewest lines of code. It also targets the maximum number of extension stores and ultimately the maximum number of users who can find and acquire your extension.
The following content focuses mostly on Chromium extensions.
Browser compatibility and extension testing
Occasionally, API parity doesn't exist between Chromium browsers. For example, there are differences in the identity and payment APIs. To make sure your extension meets customer expectations, review API status through the following official browser documentation:
Chrome APIs
Extension APIs supported in Opera
Port Chrome extension to Microsoft Edge
The APIs that you require define the changes that you must make to address the differences between each browser. You might need to create slightly different code packages with small differences for each store.
To test your extension in different environments before you submit the extension to a browser store, side-load the extension into your browser while you develop it.
Publish your extension to browser stores
You can submit and seek browser extensions in the following browser stores.
Firefox Browser Add-ons
Chrome Web Store
Opera addons
Microsoft Edge Add-ons
Some stores allow you to download listed extensions from other browsers. However, cross-browser access isn't guaranteed by browser stores. To make sure your users find your extension in different browsers, you should maintain a listing on each browser extension store.
Users might need to install your extension in different browsers. In this scenario, you can migrate existing Chromium extensions from one browser to another.
Migrate an existing extension to Microsoft Edge
If you've already developed an extension for another Chromium-based browser, you can submit it to the Microsoft Edge Add-ons website. You don't need to rewrite your extension or verify that it works in Microsoft Edge. However, when you migrate an existing Chromium extension to other Chromium browsers, make certain the same APIs or alternatives are available for your target browser.
For more information on porting your Chrome extension to Microsoft Edge, see Port Chrome extensions to Microsoft Edge. After you port your extension to the target browser, the next step is to publish it.
Publish to the Microsoft Edge Add-ons website
You publish a Microsoft Edge extension at the Microsoft Edge Add-ons website.
To start publishing a Microsoft Edge extension, you must register for a developer account with a Microsoft account (MSA) email account to submit your extension listing to the Microsoft Edge Add-ons website. The email address of a Microsoft account (MSA) includes @outlook.com, @live.com, or @hotmail.com. When you choose an email address to register, consider whether you must transfer or share ownership of the Microsoft Edge extension with other people in your organization. After registration is complete, you can submit an extension listing.
To submit an extension at the Microsoft Edge Add-ons website, you need to provide the following items:
An archive (.zip) file that contains your code files.
All required visual assets, which include a logo and small promotional tile. Optional promotional media, such as screenshots, promotional tiles, and a video URL.
 Information that describes your extension such as the name, short description, and a privacy policy link.
Different stores might have different submission requirements. The above list summarizes the requirements for publishing an extension for Microsoft Edge; for details, see Publish a Microsoft Edge extension.
After you've successfully submitted your extension, your extension undergoes a review process and either passes or fails the certification process. Owners are notified of the outcome and given next steps as required. If you submit an extension update at the Microsoft Edge Add-ons website, that begins a new review process.
The Featured badge
A Featured badge in the Microsoft Edge Add-ons website indicates that the extension has been determined to follow Microsoft's recommended best practices related to security, privacy, transparency, and user experience.

When you hover on a Featured badge, the tooltip reads: This extension follows all of Microsoft's recommended practices and has been verified.
For example, the Microsoft Editor: Spelling & Grammar Checker extension has a Featured badge at the Microsoft Edge Add-ons website.
The Microsoft Edge Add-ons team reviews each extension for adherence to Best practices for extensions before granting the extension a Featured badge. Badged extensions are curated solely for the purpose of providing Microsoft Edge users with secure browsing tools and high-quality experiences. Developers cannot pay to receive a Featured badge for an extension.
To help protect your browser settings, extensions that don't comply with the Best Practices for extensions are not badged.
Just because an extension doesn't have a Featured badge, doesn't mean the extension is unsafe. It simply means that the extension doesn't meet Microsoft's security and quality standards to be badged as Featured.
See also
Everything to know about browser extensions - introduction for users.
Add, turn off, or remove extensions in Microsoft Edge - support steps for users.
Extension concepts and architecture
Manage Microsoft Edge extensions in the enterprise
External links:
Build a Safari App extension
Your first extension (Firefox)
Extensions > Get started
Get started (Opera)
Port a Google Chrome extension
Extensions for Visual Studio Code rather than for Microsoft Edge:
Microsoft Edge DevTools extension for Visual Studio Code webhint extension for Visual Studio Code

Feedback
Was this page helpful?  Yes  No

Released features for Microsoft Edge Add-ons
Article • 09/24/2024
The following features or updates have been launched on Partner Center for Microsoft Edge extensions.
Sidebar
The sidebar feature of Microsoft Edge extensions enables an extension to display custom UI content in the browser sidebar. See Develop an extension for the Microsoft Edge sidebar.
Released June 2023
Retirement of submitting new Microsoft Edge Add-ons with Manifest V2
Microsoft Partner Center only accepts new Manifest V3 Microsoft Edge extension submissions, with visibility set as 'Hidden' or 'Public'. To share your feedback and comments, see Update your extensions from Manifest V2 to V3 in Discussions in the MicrosoftEdge-Extensions repo.
Released July 2022
You can respond to user reviews about your Microsoft Edge Add-on
You can reply via Partner Center to reviews and feedback received about your extension on the Microsoft Edge Add-ons product page.
To share your feedback and comments about this feature, see You can now respond to user reviews on your Microsoft Edge Add-ons page in Discussions in the MicrosoftEdge-Extensions repo.
Released May 2022
Publish updates of extensions using the
Microsoft Edge Add-ons API
You can integrate REST API endpoints directly into your continuous integration/continuous delivery (CI/CD) pipeline, to publish extension package updates to the Microsoft Edge Add-ons website without using Partner Center. For more information, see Using the REST API for updating Microsoft Edge Add-ons.
Released March 2022
Update September 2024: v1.1 of this REST API provides increased security.
See also:
 Deprecation of the Update REST API v1 in Roadmap for Microsoft Edge Add-ons.
Addition of breadcrumbs to Microsoft Partner Center
Developers can view the navigation bar / tree path while using Partner Center to track the exact Partner Center path users are visiting. Developers can maintain awareness of their location within Microsoft Partner Center.
Released March 2022
Microsoft Edge extensions developer portal
The new edition of the developer portal contains relevant resources and documentation for Microsoft Edge extensions. For more information, see Microsoft Edge Add-ons Developer.
Released January 2022
Extension Analytics Dashboard on Microsoft
Partner Center
The Extensions Analytics Dashboard enables you to view your extension's usage, adoption, and in-market performance. You can also track active user installs, weekly users, total downloads, and usage distribution over a period from Partner Center.
Released September 2021
Add team members to your Partner Center account
You can add members from your organization and manage the settings on your Partner Center Account. See Add users to the Microsoft Edge program.
Released August 2021
Sign into Microsoft Partner Center using your GitHub account
You can use your personal GitHub account credentials to sign into Microsoft Partner
Center to submit your Microsoft Edge Extension. See Register and sign in to Partner Center using a GitHub account.
Released August 2021
Manage your extension submissions on Partner
Center
This feature allows you to view your extension submission from the Partner Center dashboard and overview pages. You can easily track your extension submission review status, view past updates, view the status of submissions, and manage extensions on Partner Center.
Released May 2021
Support for Manifest V3 extensions
Microsoft Edge Add-ons now support extensions with Manifest V3. For more information, see the blog Manifest V3 changes are now available in Microsoft Edge for more details.
Released April 2021
Request to get your extension featured
You can request the Collection where your extension should be featured on the
Microsoft Edge Add-ons store. You can submit your request at the Submit a request to add an extension to the collections on the Microsoft Edge Add-ons home page.
Released April 2021
Extension store listing localization
You can choose a subset of languages instead of manually entering each language in the listing details on Microsoft Partner Center. You can also elect to use the same marketing assets across all marketplaces. See Partner Center improvements related to Microsoft Edge extensions store listing and certification.
Released February 2021
Extension certification report link
By clicking the extension certification report link, you can view and download the extension certification report from your Partner Center dashboard. The link to the extension certification report is displayed after the extension submission review is complete. The certification report contains the result of the extension review and relevant details.
Released January 2021
See also
 Roadmap for Microsoft Edge Add-ons - upcoming Partner Center features or updates.

Feedback
Was this page helpful?  Yes  No
Roadmap for Microsoft Edge Add-ons
Article • 11/18/2024
These are the next planned Partner Center features or updates for Microsoft Edge extensions.
Deprecation of the Update REST API v1
As of September 6, 2024, both v1.1 and v1 of the Update REST API are supported.
Support for v1 will end on December 31, 2024.
See Using the REST API for updating Microsoft Edge Add-ons.
Sidebar extensions
Use the Sidebar API to make your new or existing Microsoft Edge extension appear in the sidebar. Any extension can use the sidebar, in addition to its other UI.
Sidebar extensions are not yet in a stable release of Microsoft Edge.
See Develop an extension for the Microsoft Edge sidebar.
Developers can add their contact information
Users of your extension will be able to report issues through the extension's webpage on the Microsoft Edge Add-ons website. Developer support information will be shown on the product page of an extension. This information will allow users to directly reach out to the extension developer for extension-specific support.
Manifest V2 Microsoft Edge Add-ons deprecation
When this change is released, Microsoft Partner Center will not accept updates to existing Manifest V2 Microsoft Edge Add-ons. Microsoft Edge will no longer support or run Manifest V2 Microsoft Edge Add-ons.
Note that by using Microsoft Edge Enterprise Policies, Enterprise Accounts can allow Manifest V2 Microsoft Edge Add-ons to run and operate on Microsoft Edge.
Manifest V2 Microsoft Edge Enterprise Add-ons cease to function
When this change is released, Microsoft Edge Enterprise Add-ons with Manifest V2 will not be functional on Microsoft Edge.
See also
Released features for Microsoft Edge Add-ons - Partner Center features or updates.
Microsoft Edge release schedule
Microsoft 365 roadmap > Microsoft Edge

Feedback
Was this page helpful?  Yes  No

Extension concepts and architecture
Article • 01/29/2025
This article introduces concepts about building a Microsoft Edge extension. Follow along to understand how multi-tab browsers work.
A Microsoft Edge extension is a small app that users can opt into that adds or modifies features of Microsoft Edge to provide a specialized experience or function that is important to a target audience. For an introduction, see Overview of Microsoft Edge extensions.
Understand how browsers work
The following list outlines helpful information to understand before building your extension.
Browser tabs are isolated threads
Each browser tab is isolated from every other tab. Each tab runs in a separate thread that is isolated from other browser tabs and threads.

Each tab handles one GET request
Each tab handles one GET request. Each tab uses a URL to get a single stream of data, which is normally an HTML document. That single stream or page, includes instructions like JavaScript include tags, image references, CSS references, and more. All resources are downloaded to that one tab page, and then the page is rendered in the tab.
Communication occurs between each tab and a remote server
Communication occurs between each tab and a remote server. Each tab runs in an isolated environment. Each tab is still connected to the internet, but each is isolated from other tabs. A tab can run JavaScript to communicate with a server. The server is the originating server for the first GET request that was entered into the URL bar of the tab.
Communication model
The extension model uses a different communication model. Similar to a tab page, an extension runs in an individual thread that is isolated from other tab page threads. A tab sends single GET requests to remote servers, and then renders the page. However, an extension works similar to a remote server. Installing an extension in a browser creates a standalone web server in the browser. The extension is isolated from all tab pages.

Extension architecture
The following list outlines helpful information as it relates to the architecture of an extension.
Extension web server bundle
An extension is a bundle of web resources. The web resources are similar to other resources that you (the web developer) publish to web servers. You bundle the web resources into a zip file when building an extension.
The zip file includes HTML, CSS, JavaScript, and image files. One more file is required in the root of the zip file. The other file is the manifest file that is named manifest.json.
The manifest file is the blueprint of your extension and includes the version of your extension, the title, permissions needed for the extension to run, and so on.
Launching the extension server
Web servers contain your web bundle. A browser navigates to URLs on the server, and downloads the file to render in the browser. A browser navigates using certificates, configuration files, and so on. If an index.html file is specified, the file is stored at a special location on the web server.
When you use an extension, the tab page of your browser gets to the web bundle of your extension using the extension runtime. The extension runtime serves the files from the URL extension://{some-long-unique-identifier}/index.html, where {some-longunique-identifier} is a unique identifier assigned to the extension during installation. Each extension uses a different unique identifier. Each identifier points to the web bundle that is installed in your browser.
Communication with tabs and browser toolbar
An extension can communicate with tabs and the browser toolbar. An extension can interact with the toolbar of your browser. Each extension manages running tab pages in separate threads, and DOM manipulation on each tab page is isolated. An extension uses the extensions API to communicate between the extension and tab pages. The extensions API provides extra capabilities that include notification management, storage management, and so on.
Just like web servers, an extension waits for notifications when the browser is open. An extension and tab pages run in threads that are isolated from each other. To allow an extension to work with any tab page, use the extensions API and set the permissions in the manifest file.
Opt-in permissions at install time
An extension provides opt-in permissions at install time. You specify the extension permissions in the manifest.json file. When a user installs an extension, information about the permissions that the extension requires is displayed. Based on the type of permission required, the extension can extract and use information from the browser.
Next steps
Next, install, run, and study Sample: Picture viewer pop-up webpage.

Feedback
Was this page helpful?  Yes  No

Sample: Picture viewer pop-up webpage
Article • 01/29/2025
This sample is a browser extension, without JavaScript, that displays the stars.jpeg image in a small webpage in a pop-up in any Microsoft Edge tab:

Clone the MicrosoftEdge-Extensions repo
You can use various tools to clone a GitHub repo. You can download a selected directory, or clone the entire repo.
Clone the MicrosoftEdge-Extensions repo to your local drive, and then switch to a working branch, as follows.



Install the sample locally
Instead of installing the sample from the Store, you'll install the sample locally, so that you can possibly modify it and quickly test the changes. Installing locally is sometimes called sideloading an extension.
1. In Microsoft Edge, click the Extensions () button, next to the Address bar, if this icon is displayed. Or, select Settings and more () > Extensions. The Extensions pop-up opens:

2. Click Manage extensions. The Extensions management page opens in a new tab:

3. Turn on the Developer mode toggle.
4. When installing your extension for the first time, click the Load unpacked () button. The Select the extension directory dialog opens.
5. Select the directory that contains the extension's source files, such as manifest.json.
Example path:
C:\Users\localAccount\GitHub\MicrosoftEdge-Extensions\Extensionsamples\picture-viewer-popup-webpage
6. Click the Select Folder button.
The Select the extension directory dialog closes.
The extension is installed in the browser, similar to an extension that's installed from the store:

Run the sample
1. Go to a webpage, such as TODO app, in a new window or tab. For this sample, this step is optional and is just to match the screenshots; this sample doesn't require a webpage to be open.
2. Refresh the webpage. This is sometimes required after reloading an extension.
3. In Microsoft Edge to the right of the Address bar, if this icon is displayed, click the Extensions () button. Or, select Settings and more () > Extensions.
The Extensions pop-up opens:

4. Click the extension's icon or name (Picture viewer pop-up webpage).
The extension opens, and the extension's icon is added next to the Address bar ) icon. The extension displays popup.html, containing
5. Click the extension's button next to the Address bar. The pop-up window closes.
See also:
 Sideload an extension to install and test it locally
Study the sample
In the following sections, you study the sample. After that, to develop your own Microsoft Edge extension, you can copy and modify the sample's directory, and install and test the resulting extension.
Files and directories
The sample has the following directory structure:
Example path for the sample:
C:\Users\localAccount\GitHub\MicrosoftEdge-Extensions\Extension-samples\pictureviewer-popup-webpage
Directories and files in the /picture-viewer-popup-webpage/ directory:
shell
/icons/
   extension-icon16x16.png    extension-icon32x32.png    extension-icon48x48.png    extension-icon128x128.png
/images/    stars.jpeg /popup/    popup.html manifest.json The /icons/ directory contains versions of a .png file that's used to represent the extension near the browser's Address bar.
 The /images/ directory contains stars.jpeg, which is displayed in the extension's pop-up.
 The /popup/ directory contains popup.html, which defines the webpage content that's displayed in the extension's pop-up. manifest.json contains basic information about the extension.
The manifest file (manifest.json)
Every extension package must have a manifest.json file at the root. The manifest provides details of your extension, the extension package version, and the extension name and description. manifest.json contains the following lines:
JSON{
  "name": "Picture viewer pop-up webpage",
  "version": "0.0.0.1",
  "manifest_version": 3,
  "description": "A browser extension that displays an image in a pop-up webpage.",
  "icons": {
      "16": "icons/extension-icon16x16.png",
      "32": "icons/extension-icon32x32.png",
      "48": "icons/extension-icon48x48.png",
      "128": "icons/extension-icon128x128.png"
  },
  "action": {
      "default_popup": "popup/popup.html"
  }
}Icons for launching the extension
The /icons/ directory contains the icon image files. The icons are used as the background image for the button that you click to launch the extension:

When the extension is running, one of the icons is displayed on the toolbar, next to the Address bar:

To close the extension, click the extension's icon on the toolbar, or click the Extensions ( ) button.
Recommendations for icons:
Use PNG format, but you can also use BMP, GIF, ICO or JPEG formats. If you provide a single icon file, use 128 x 128 px, which can be resized by the browser if necessary.
The pop-up dialog (popup.html)
popup.html in the /popup/ directory runs when you launch the extension. When you
click the icon to launch the extension, this file is displayed as a modal dialog. popup.html contains the following code, to display a title and the stars image:
HTML<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>Picture viewer pop-up webpage</title>
    </head>
    <body>
        <div>
            <img src="/images/stars.jpeg" alt="Stars" />
        </div>
    </body>
</html>The pop-up webpage (popup.html) is registered as the "default_popup" in manifest.json, in the action key section: manifest.json (portion)
JSON{
    "action": {         "default_popup": "popup/popup.html"
    }
}Next steps
To develop your own Microsoft Edge extension, you can copy and modify the sample's directory, and install and test the resulting extension.
After running and testing this extension sample, you can continue on to Sample: Picture inserter using content script, which dynamically inserts JavaScript running as content in the browser tab.
See also
  Sideload an extension to install and test it locally Sample: Picture inserter using content script GitHub:
	MicrosoftEdge-Extensions	 repo.
/picture-viewer-popup-webpage/
Feedback
Was this page helpful? 

Sample: Picture inserter using content script
Article • 01/29/2025
This sample uses JavaScript code to insert the stars.jpeg image at the top of the current webpage, inside the <body> element. The extension's pop-up contains a title and an HTML button that's labelled Insert picture. When you click the Insert picture button, the extension's JavaScript code sends a message from the extension icon's popup, and dynamically inserts JavaScript that runs in the browser tab.
This sample demonstrates the following extension features:
Injecting JavaScript libraries into an extension.
Exposing extension assets to browser tabs.
Including content webpages in existing browser tabs.
Having content webpages listen for messages from pop-ups and respond.
Preview of the sample
You'll install the extension sample by using the browser's Manage Extensions tab, click the Extensions () button to show the list of installed extensions, and then click this sample extension:

The extension displays a small HTML webpage in a pop-up, containing a title, an Insert picture button, and instructions:

When you click the Insert picture button, JavaScript code temporarily inserts stars.jpeg at the top of the current webpage, pushing down the content of the
webpage to below the image. The injected content sets the image element to display the static image stars.jpeg in the top of the current webpage:


When you click the image, the injected JavaScript removes the image from the DOM tree and webpage.
Obtain, install, and run the sample as follows.
Clone the MicrosoftEdge-Extensions repo
You can use various tools to clone a GitHub repo. You can download a selected directory, or clone the entire repo.
Clone the MicrosoftEdge-Extensions repo to your local drive, and then switch to a working branch, as follows.

2. Switch to the new directory:
cd MicrosoftEdge-Extensions3. Create a working branch:
git branch test4. Switch to the working branch:
git switch testReturns: Switched to branch 'test'
You are now free to modify the code in your working branch, without altering the code that's in the "main" branch of the repo. Later you might want to switch back to the "main" branch, or create a different branch based off the "main" branch.Install the sample locally
Instead of installing the sample from the Store, you'll install the sample locally, so that you can possibly modify it and quickly test the changes. Installing locally is sometimes called sideloading an extension.
1. In Microsoft Edge, click the Extensions () button, next to the Address bar, if this icon is displayed. Or, select Settings and more (	) > 	 Extensions. The Extensions pop-up opens:

2. Click Manage extensions. The Extensions management page opens in a new tab:

3. Turn on the Developer mode toggle.
4. When installing the sample extension for the first time, click the Load unpacked ( ) button. The Select the extension directory dialog opens.
5. Select the directory that contains the extension's source files, such as manifest.json.
Example path:
C:\Users\localAccount\GitHub\MicrosoftEdge-Extensions\Extensionsamples\picture-inserter-content-script
6. Click the Select Folder button.
The Select the extension directory dialog closes.
The extension is installed in the browser, similar to an extension that's installed from the store:

Run the sample
1. Go to a webpage, such as TODO app, in a new window or tab. The tab must not be empty, and must not be the Manage Extensions page, because this sample inserts content into the current webpage.
2. Refresh the webpage. This is sometimes required after reloading an extension.
3. In Microsoft Edge to the right of the Address bar, if this icon is displayed, click the Extensions () button. Or, select Settings and more () > Extensions.
The Extensions pop-up opens:

4. Click the extension's icon or name (Picture inserter using content script).
The extension opens, and the extension's icon is added next to the Address bar and Extensions () icon.
A pop-up opens, containing a small HTML webpage with a title, an Insert picture button, and instructions:

webpage in the current tab, pushing the webpage's content down below the image:

element is removed from the DOM tree and webpage, and the current webpage is restored, shifting its content back up to the top of the tab.
The extension sends a message from the extension icon's pop-up, and dynamically inserts JavaScript running as content in the browser tab. The injected content sets the image element to display stars.jpeg in the top of the current webpage, and then removes the image when you click the image.
See also:
 Sideload an extension to install and test it locally
Study the sample
In the following sections, you study the sample. After that, to develop your own Microsoft Edge extension, you can copy and modify the sample's directory, and install and test the resulting extension.
Files and directories
The sample has the following directory structure and files.
Example path for the sample:
C:\Users\localAccount\GitHub\MicrosoftEdge-Extensions\Extension-samples\pictureinserter-content-script
Directories and files in the /picture-inserter-content-script/ directory:
shell/content-scripts/    content.js /icons/    extension-icon16x16.png    extension-icon32x32.png    extension-icon48x48.png    extension-icon128x128.png
/images/    stars.jpeg /popup/    popup.html    popup.js manifest.json The /content-scripts/ directory contains content.js, which is the script that's injected into the current webpage.
 The /icons/ directory contains versions of a .png file that's used to represent the extension near the browser's Address bar, in the Extensions pop-up, and in the Extensions management page.
 The /images/ directory contains stars.jpeg, which is displayed in the extension's pop-up.
The /popup/ directory contains the files: popup.html defines the content in the extension's initial pop-up webpage (a title, button, and instructions).
   popup.js for the initial pop-up webpage sends a message to the content script (content.js) that's running on the tab page, specifying which image file to display. manifest.json contains basic information about the extension.
Strategy to update the webpage to insert the image at the top (stars.jpeg)
This sample includes a content script that's injected into the webpage that's loaded in the current browser tab.
1. When you run the extension sample, the initial pop-up HTML page is displayed (popup.html), showing a title, instructions, and the Insert picture button.
2. When you click the Insert picture button, the JavaScript (popup.js) for the initial pop-up page sends a message to the content script (content.js) that's running on the tab page. The message specifies which image file to display.
3. The content script (content.js) running on the tab page receives the message, and displays the specified image file (stars.jpeg).
The initial pop-up webpage (popup.html)
/popup/popup.html is specified in the manifest file as the webpage to display in the extension's initial pop-up. The manifest file contains the key field "default_popup": "popup/popup.html". This sample's popup.html file is a small webpage that contains a title, an Insert picture button, and instructions. popup.html:
HTML<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <style>             body {
                width: 500px;
            }             button {
                background-color: #336dab;                 border: none;                color: white;                 padding: 15px 32px;                 text-align: center;                 font-size: 16px;
            }
        </style>
    </head>
    <body>
        <h1>Picture inserter using a content script</h1>
        <button id="sendmessageid">Insert picture</button>
        <script src="popup.js"></script>
        <p>Click the displayed image to remove it from the webpage.</p>
    </body>
</html>JavaScript (popup.js) for the initial pop-up page, to send a message to the injected JavaScript
/popup/popup.js sends a message to the content script (content.js) that's temporarily injected into the browser tab. To do that, popup.js adds an onclick event to the popup webpage's Insert picture button, which has the ID sendmessageid: popup.js (portion):
JavaScriptconst sendMessageId = document.getElementById("sendmessageid"); if (sendMessageId) {     sendMessageId.onclick = function() {
        ...
    };
}In popup.js, chrome.tabs.query finds the current browser tab, and then chrome.tabs.sendMessage sends a message to that tab. The sample passes in the current
tab's ID. The message must include the URL for the image that will be displayed.
You must send a unique ID to assign to the inserted image, in order to find the image element again later and delete it. To send a unique ID to assign to the inserted image, the unique ID is generated in popup.js and passed to the content script.
popup.js (complete):
JavaScript
const sendMessageId = document.getElementById("sendmessageid"); if (sendMessageId) {     sendMessageId.onclick = function() {         chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {             chrome.tabs.sendMessage(                 tabs[0].id,
                {                     url: chrome.runtime.getURL("images/stars.jpeg"),                     imageDivId: crypto.randomUUID(),                     tabId: tabs[0].id
                },                 function(response) {                     window.close();
                }
            );
        });
    };
}The content script message listener
(content.js)
Here's the content-scripts\content.js file that gets injected into every browser tab page. This file is listed in the content-scripts section in manifest.json. content.js (complete):
JavaScriptchrome.runtime.onMessage.addListener(function(request, sender, sendResponse) 
{   const img = document.createElement("img");   img.id = request.imageDivId;   img.src = request.url;   img.style = "height: auto; width: 90vw;";   document.body.prepend(img);
  img.addEventListener("click", () => {       img.remove();   }, { once: true });
  sendResponse({ fromcontent: "This message is from content.js" });
});content.js registers a listener by using the chrome.runtime.onMessage.addListener
Extension API method. This listener waits for the message that's sent when popup.js
calls chrome.tabs.sendMessage.
In content.js, the addListener method takes a single parameter that's a function. That function's first parameter, request, contains the details of the message that's being passed in.
In content.js, when an event is processed by the listener, the listener function that's passed into addListener is run. The first parameter of the passed-in listener function is a request object that has attributes as assigned by sendMessage.
In popup.js, for the chrome.tabs.sendMessage method call, the attributes of the second parameter for sendMessage are url, imageDivId, and tabId.
Here's the isolated listener function that's passed into addListener: content.js (portion)
JavaScriptfunction(request, sender, sendResponse) {   const img = document.createElement("img");   img.id = request.imageDivId;   img.src = request.url;   img.style = "height: auto; width: 90vw;";   document.body.prepend(img);
  img.addEventListener("click", () => {       img.remove();   }, { once: true });
  sendResponse({ fromcontent: "This message is from content.js" }); }The first five lines in the listener function append an img element immediately below the body element in the browser tab.
The second line in the listener function, img.id = request.imageDivId;, sets the ID of the img element to the imageDivId of the passed-in request.
In the listener function, the addEventListener call adds a click event listener function that covers the entire image, allowing the user to click anywhere on the image. When you click the inserted image, the image is removed from the current webpage by the line img.remove();, and the event listener is also removed, by specifying { once: true }.
How stars.jpeg is made available from any browser tab
To make images/stars.jpeg available from any browser tab:
popup.js (above) uses the chrome.runtime.getURL API.
The manifest (below) specifies that web_accessible_resources of type .jpeg match all URLs.
The sample injects the image by using the src attribute of the img element into the content page. The content page is running on a unique thread that isn't the same as the thread running the extension. The static image file must be exposed as a web asset, for it to work correctly.
Another entry is added in the manifest.json file to declare that the image is available to all browser tabs:
/manifest.json (portion):
JSON"web_accessible_resources": [
    {
      "resources": ["images/*.jpeg"],
      "matches": ["<all_urls>"]
    }
  ]The code in the popup.js file sends a message to the content page that's embedded in the current active tab page.
How resources are listed in the manifest
(manifest.json)
The sample creates and inject the content page that's embedded on the current active tab page. manifest.json includes the content-scripts and web_accessible_resources, as follows:
/manifest.json (complete):
JSON
{
    "name": "Picture inserter using content script",
    "version": "0.0.0.1",
    "manifest_version": 3,
    "description": "A browser extension that uses JavaScript to insert an image at the top of the current webpage.",
    "icons": {
        "16": "icons/extension-icon16x16.png",
        "32": "icons/extension-icon32x32.png",
        "48": "icons/extension-icon48x48.png",
        "128": "icons/extension-icon128x128.png"
    },
    "action": {         "default_popup": "popup/popup.html"
    },
    "content_scripts": [         {
            "matches": [
              "<all_urls>"
            ],
            "js": ["content-scripts/content.js"]
        }
    ],
    "web_accessible_resources": [
        {
            "resources": ["images/*.jpeg"],
            "matches": ["<all_urls>"]
        }
    ]
}The manifest's content_scripts section injects JavaScript into all browser tabs
In the content_scripts key section of the manifest file, the matches attribute is set to
<all_urls>, which means that .js (or .css) files that are specified in the content_scripts key section are injected into all browser tab pages when each tab is
loaded. The allowed files types that can be injected are JavaScript (.js) and CSS (.css).
This sample's manifest specifies a single content script, content-scripts/content.js.
Each content script runs in its own thread,
sandboxed
Each tab page (and extension) runs in its own thread. Even if the browser tab contains a webpage that runs JavaScript code, the content.js script that's injected in that browser tab by the extension doesn't have access to that JavaScript code. The injected content script only has access to the DOM of the webpage.
Next steps
To develop your own Microsoft Edge extension, you can copy and modify the sample's directory, and install and test the resulting extension.
See also
Sample: Picture viewer pop-up webpage
Sideload an extension to install and test it locally
GitHub:
MicrosoftEdge-Extensions repo.
/picture-inserter-content-script/ - source code of this sample.

Feedback
Was this page helpful?  Yes  No
Sideload an extension to install and test it locally
Article • 01/29/2025
To test an extension quickly and safely, sideload the extension in your own copy of Microsoft Edge, which means locally installing the extension. You can then run and test your extension without having to upload the extension to the Microsoft Edge Add-ins website (the store) and then install the extension from there.
Prerequisite: Have an extension to install
This article assumes that your local drive contains an extension that you want to load, such as a sample from the MicrosoftEdge-Extensions repo.
To obtain the samples, see Clone the MicrosoftEdge-Extensions repo in Sample: Picture viewer pop-up webpage.
Locally installing and running an extension
To sideload an extension into Microsoft Edge, so that it's locally installed in your browser for testing:
1. Go to a webpage, such as TODO app, in a new window or tab. For some samples, this step is optional and is just to match the screenshots below; some samples don't require a webpage to be open.
2. In Microsoft Edge to the right of the Address bar, if this icon is displayed, click the Extensions () button. Or, select Settings and more () > Extensions.
The Extensions pop-up opens:

3. Click Manage extensions. The Extensions management page opens in a new tab:

4. Turn on the Developer mode toggle.
5. When installing your extension for the first time, click the Load unpacked () button. The Select the extension directory dialog opens.
6. Select the directory that contains the extension's source files, such as manifest.json.
Example paths resulting from cloning the MicrosoftEdge-Extensions repo:
C:\Users\localAccount\GitHub\MicrosoftEdge-Extensions\Extensionsamples\picture-viewer-popup-webpage
C:\Users\localAccount\GitHub\MicrosoftEdge-Extensions\Extensionsamples\picture-inserter-content-script
7. Click the Select Folder button.
The Select the extension directory dialog closes.
The extension is installed in your browser, similar to extensions that are installed from the store:

8. If the extension requires that a webpage is open, make sure a webpage is open, such as TODO app.
9. Refresh the webpage. This is sometimes required after reloading an extension.
10. In Microsoft Edge to the right of the Address bar, click the Extensions () button.
Or, select Settings and more () > Extensions.
The Extensions pop-up opens:

11. Click the extension's icon or name. The extension opens, and the extension's icon is added next to the Address bar and Extensions () button:

Locally updating an extension (Reload)
To update an extension that's been installed locally (sideloaded) in your browser:
1. Make changes to the extension's source code, and save those changes.
2. In Microsoft Edge, if the Extensions management tab is open, click it.
Or, to the right of the Address bar, if this icon is displayed, click the Extensions () button. The Extensions pop-up opens. Click Manage extensions.
Or, select Settings and more () > Extensions > Manage extensions.
The Extensions management tab is displayed.
3. Click the Reload link in the extension's card.
4. Refresh the webpage. This is sometimes required after reloading an extension.
Locally removing an extension
To remove an extension that's been installed locally (sideloaded) in your browser:
1. In Microsoft Edge, if the Extensions management tab is open, click it.
Or, to the right of the Address bar, if this icon is displayed, click the Extensions () button. The Extensions pop-up opens. Click Manage extensions.
Or, select Settings and more () > Extensions > Manage extensions.
The Extensions management tab is displayed.
2. Click the Remove link in the extension's card.
Error reporting in the Extensions management page
If running an extension causes an error, in some cases, an Error link is added in the extension's card in the Extensions management page between the Remove and Reload links.
1. In Microsoft Edge, if the Extensions management tab is open, click it.
Or, to the right of the Address bar, if this icon is displayed, click the Extensions () button. The Extensions pop-up opens. Click Manage extensions.
Or, select Settings and more () > Extensions > Manage extensions.
The Extensions management tab is displayed.
2. Click the Error link in the extension's card.
3. Fix the error in the extension's code.
4. In the Extensions management page, click the Reload link.
5. To make the Error link in the extension's card go away, in the Extensions management page, click the Clear errors button.
See also
Sample: Picture viewer pop-up webpage
Sample: Picture inserter using content script

Feedback
Was this page helpful? 

Port a Chrome extension to Microsoft Edge
Article • 11/28/2022
Microsoft Edge allows you to port your Chrome extension to Microsoft Edge with minimal changes. The Extension APIs and manifest keys supported by Chrome are codecompatible with Microsoft Edge. For a list of APIs supported by Microsoft Edge, see API support.
To port your Chrome extension:
1. Review the Chrome extension APIs used in your extensions with the Microsoft Edge extensions supported APIs list.
3. If Chrome is used in either the name or the description of your extension, rebrand your extension using Microsoft Edge. To pass the certification process, the changes are required.
4. Test your extension to check if it works in Microsoft Edge by sideloading your extension.
5. If you face any issues, you can debug your extensions in Microsoft Edge by using the DevTools, or contact us.
6. Follow the publishing guidelines to publish your extension on Microsoft Edge Addons website.
Setting allowed_origins for a native app
If your extension exchanges messages with a native app by using chrome.runtime.connectNative, make sure that you set allowed_origins to chrome-
extension://[Microsoft-Catalog-extensionID] in your native messaging host manifest file. The setting allows the app to identify your extension.
Next steps
After your extension package is ready to publish in the Microsoft Edge Add-ons website, create a developer account and publish your extension.

Manifest file format for extensions
Article • 09/12/2024
Every extension for Microsoft Edge has a JSON-formatted manifest file, named manifest.json. The manifest file is the blueprint of your extension. The manifest file
includes information such as:
The version number of the extension.
The title of the extension.
The permissions that are needed for the extension to run.
Manifest V2 is deprecated
Use Manifest V3 for new code. The format for manifest.json for extensions is moving from Manifest V2 to Manifest V3. Both formats are shown here. To migrate a Manifest V2 extension to Manifest V3, see Migrate an extension from Manifest V2 to V3.
Format of manifest.json for extensions
The following code shows the fields that are supported in manifest.json for extensions, for a Manifest V3 or V2 package.


  "automation": ...,
  "background": {
    // If `background` is included, `service_ worker` is required
    "service_worker": ...
  },
  "chrome_settings_overrides": {...},
  "chrome_url_overrides": {...},
  "commands": {...},
  "content_capabilities": ...,
  "content_scripts": [{...}],
  "content_security_policy": "policyString",
  "converted_from_user_script": ...,
  "current_locale": ...,
  "declarative_net_request": ...,
  "devtools_page": "devtools.html",
  "differential_fingerprint": ...,
  "event_rules": [{...}],
  "externally_connectable": {
    "matches": ["*://*.contoso.com/*"]
  },
  "file_browser_handlers": [...],
  "file_system_provider_capabilities": {
    "configurable": true,
    "multiple_mounts": true,
    "source": "network"
  },
  "homepage_url": "http://path/to/homepage",
  "host_permissions": [...],
  "import": [{"id": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}],
  "incognito": "spanning, split, or not_allowed",
  "input_components": ...,
  "key": "publicKey",
  "minimum_chrome_version": "versionString",
  "nacl_modules": [...],
  "natively_connectable": ...,
  "oauth2": ...,
  "offline_enabled": true,
  "omnibox": {
    "keyword": "aString"
  },
  "optional_permissions": ["tabs"],
  "options_page": "options.html",
  "options_ui": {
    "chrome_style": true,
    "page": "options.html"
  },
  "permissions": ["..."],
  "platforms": ...,
  "replacement_web_app": ...,
  "requirements": {...},
  "sandbox": [...],
  "short_name": "Short Name",
  "side_panel": {...},
  "storage": {
    "managed_schema": "schema.json"  },
  "system_indicator": ...,
  "tts_engine": {...},
  "update_url": "http://path/to/updateInfo.xml",
  "version_name": "aString",
  "web_accessible_resources": [...]
}Changes in manifest.json V3 vs. V2
ﾉ Expand table
V3V2"manifest_version": 3,"manifest_version": 2,"action": {...},"browser_action": {...},"action": {...},"page_action": {...},removed"persistent": false,If background is included, service_ worker is requiredIf background is included, service_ worker is optionalSeparated into two different keys: "permissions":
[...], "host_permissions": [...],"permissions": [...],See also
Migrate an extension from Manifest V2 to V3
	Manifest file format	 - V3, in Chrome Extensions > Reference.
	Manifest file format (V2)	 in Chrome Extensions > Reference.
Feedback
Was this page helpful? 

Using Content Security Policy (CSP) to control which resources can be run
Article • 09/12/2024
To control which content can be run by your extension, in the extension's manifest.json file, use the content_security_policy key and its policy string value, per the following syntax:
JSON{
    ...,
    "content_security_policy": "[policy string]"
    ...
}For example, the following is the default content security policy, as described below in Default policy restrictions:
JSON{
    ...,
    "content_security_policy": "script-src 'self'; object-src 'self'; worker-src 'self'"
    ...
}To mitigate a large class of potential cross-site scripting issues, the Microsoft Edge extension system incorporates Content Security Policy (CSP). CSP introduces some strict policies that make extensions more secure by default, and provides you with the ability to create and enforce rules governing the types of content that can be loaded and run by your extensions and applications.
In general, CSP works as a block/allowlisting mechanism for resources loaded or run by your extension. Defining a reasonable policy for your extension enables you to carefully consider the resources that your extension requires, and to ask the browser to ensure that those are the only resources your extension has access to. The policies provide security over and above the host permissions your extension requests; they are an additional layer of protection, not a replacement.
In contrast, in a webpage, such a policy is defined via an HTTP header or via a meta element. But inside the Microsoft Edge extension system, an HTTP header or a meta element is not an appropriate mechanism.
See:
	Content Security Policy (CSP)	 at MDN.
	Manifest - Content Security Policy	 in Chrome Extensions > Reference.
Default policy restrictions
Packages that don't define a manifest_version don't have a default content security policy.

The policy adds security by limiting extensions and applications in three ways:
Eval and related functions are disabled
Code like the following doesn't work:
JavaScriptalert(eval("foo.bar.baz")); window.setTimeout("alert('hi')", 10); window.setInterval("alert('hi')", 10); new Function("return foo.bar.baz");Evaluating strings of JavaScript like this is a common XSS attack vector. Instead, you should write code like:
JavaScriptalert(foo && foo.bar && foo.bar.baz);
window.setTimeout(function() { alert('hi'); }, 10);window.setInterval(function() { alert('hi'); }, 10); function() { return foo && foo.bar && foo.bar.baz };
Inline JavaScript aren't run
Inline JavaScript aren't run. This restriction bans both inline <script> blocks and inline event handlers, such as <button onclick="...">.
The first restriction wipes out a huge class of cross-site scripting attacks by making it impossible for you to accidentally run the script provided by a malicious third-party. It does, however, require you to write your code with a clean separation between content and behavior. An example might make this clearer. You could try to write a Browser Action pop-up as a single pop-up.html containing the following:
HTML<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>
        <script>             function awesome() {
                // do something awesome!
            }
            function totallyAwesome() {
                // do something TOTALLY awesome!
            }
            function clickHandler(element) {                 setTimeout("awesome(); totallyAwesome()", 1000);
            }
            function main() {
                // Initialization work goes here.
            }
        </script>
    </head>
    <body onload="main();">
        <button onclick="clickHandler(this)">
            Click for awesomeness!
        </button>
    </body>
</html>But three things must change in order to make this work the way you expect it to:
The clickHandler definition must be moved into an external JavaScript file (popup.js may be a good target).
The inline event handler definitions must be rewritten in terms of addEventListener and extracted into popup.js. If you're currently starting your program using code like <body onload="main();">, consider replacing it by hooking into the DOMContentLoaded event of the document, or the load event of the window, depending on your requirements. Use the former, since it generally triggers more quickly.
The setTimeout call must be rewritten to avoid converting the string "awesome(); totallyAwesome()" into JavaScript for running.
Those changes could look something like the following:
JavaScriptfunction awesome() {
    // Do something awesome!
}
function totallyAwesome() {
    // do something TOTALLY awesome!
}
function awesomeTask() {     awesome();     totallyAwesome();
}
function clickHandler(e) {
    setTimeout(awesomeTask, 1000);
}
function main() {
    // Initialization work goes here.
}
// Add event listeners once the DOM has fully loaded by listening for the
// `DOMContentLoaded` event on the document, and adding your listeners to // specific elements when it triggers. document.addEventListener('DOMContentLoaded', function () {     document.querySelector('button').addEventListener('click', clickHandler);     main();
});HTML
<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>
        <script src="popup.js"></script>
    </head>
    <body>
        <button>Click for awesomeness!</button>
    </body>
</html>
Only local script and object resources are loaded
Script and object resources are only able to be loaded from the extension package, not from the web at large. This ensures that your extension only runs the code you specifically approved, preventing an active network attacker from maliciously redirecting your request for a resource.
Instead of writing code that depends on jQuery (or any other library) loading from an external CDN, consider including the specific version of jQuery in your extension package. That is, instead of:
HTML<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js">
</script>
    </head>
    <body>
        <button>Click for awesomeness!</button>
    </body>
</html>Use the following approach instead. Download the file, include it in your package, and write:
HTML<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>
        <script src="jquery.min.js"></script>    </head>
    <body>
        <button>Click for awesomeness!</button>
    </body>
</html>
Relaxing the default policy
You can allow running the following types of script:
Inline script
Remote script
Evaluated JavaScript
Details are below.
Inline script
Inline scripts can be allowed by specifying the base64-encoded hash of the source code in the policy. This hash must be prefixed by the used hash algorithm (sha256, sha384 or sha512). For an example, see W3C > Hash usage for <script> elements.
Remote script
If you require some external JavaScript or object resources, you can relax the policy to a limited extent by allowlisting secure origins from which scripts should be accepted. Verify that runtime resources loaded with with elevated permissions of an extension are exactly the resources you expect, and aren't replaced by an active network attacker. As man-in-the-middle attacks are both trivial and undetectable over HTTP, those origins aren't accepted.
Currently, you can allowlist origins that have the following schemes: blob, filesystem, https, and extension. The host part of the origin must explicitly be specified for the https and extension schemes. Generic wildcards such as https:, https://* and https://*.com aren't allowed; subdomain wildcards such as https://*.example.com are
allowed. Domains in the Public Suffix list are also viewed as generic top-level domains. To load a resource from these domains, the subdomain must explicitly be listed. For example, https://*.cloudfront.net is not valid, but https://XXXX.cloudfront.net and https://*.XXXX.cloudfront.net can be allowlisted.
For development ease, resources loaded over HTTP from servers on your local machine can be allowlisted. You can allowlist script and object sources on any port of either

JSON"content_security_policy": "script-src 'self' https://example.com; objectsrc 'self'"
Evaluated JavaScript
The policy against eval() and related functions like setTimeout(String), setInterval(String), and new Function(String) can be relaxed by adding unsafe-eval
to your policy:
JSON"content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 
'self'"However, you should avoid relaxing policies. These types of functions are notorious XSS attack vectors.
Tightening the default policy
You can tighten this policy to whatever extent your extension allows, in order to increase security, at the expense of convenience. To specify that your extension can only load resources of any type (images, and so on) from the associated extension package, for example, a policy of default-src 'self' might be appropriate.
Content scripts
The policy being discussing applies to the background pages and event pages of the extension. How the content scripts apply to the content scripts of the extension is more complicated.
Content scripts are generally not subject to the CSP of the extension. Since content scripts aren't HTML, the main impact of this is that they can use eval even if the CSP of the extension doesn't specify unsafe-eval, although this is not recommended.
Additionally, the CSP of the page doesn't apply to content scripts. More complicated are
<script> tags that content scripts create and put into the DOM of the page they are running on. These are referenced as DOM injected scripts going forward.
DOM injected scripts that run immediately upon injection into the page run as you would expect. Imagine a content script with the following code as a simple example:
JavaScriptdocument.write("<script>alert(1);</script>");This content script causes an alert immediately upon the document.write(). Note that this runs regardless of the policy a page specifies. However, the behavior becomes more complicated both inside that DOM injected script and for any script that doesn't immediately run upon injection.
Imagine that your extension is running on a page that provides an associated CSP that specifies script-src 'self'. Now imagine the content script runs the following code:
JavaScriptdocument.write("<button onclick='alert(1);'>click me</button>'");If a user clicks that button, the onclick script doesn't run. This is because the script didn't immediately run, and code that isn't interpreted until the click event occurs isn't considered part of the content script, so the CSP of the page (not of the extension) restricts the behavior. And since that CSP doesn't specify unsafe-inline, the inline event handler is blocked.
The correct way to implement the desired behavior in this case is to add the onclick handler as a function from the content script, as follows:
JavaScriptdocument.write("<button id='mybutton'>click me</button>'"); var button = document.getElementById('mybutton'); button.onclick = function() {       alert(1);
};Another similar issue arises if the content script runs the following:
JavaScriptvar script = document.createElement('script'); script.innerHTML = 'alert(1);' document.getElementById('body').appendChild(script);In this case, the script runs, and the alert appears. However, consider this case:
JavaScriptvar script = document.createElement('script'); script.innerHTML = 'eval("alert(1);")';
=document.getElementById('body').appendChild(script);While the initial script runs, the call to eval is blocked. That is, while the initial script runtime is allowed, the behavior within the script is regulated by the CSP of the page. Thus, depending on how you write DOM injected scripts in your extension, changes to the CSP of the page might affect the behavior of your extension.
Since content scripts aren't affected by the CSP of the page, this a great reason to put as much behavior as possible of your extension into the content script, rather than DOM injected scripts.
See also

Portions of this page are modifications based on work created and shared by
Google	 and used according to terms described in the Creative Commons Attribution 4.0 International License	. The original page is found here	.
 This work is licensed under a Creative Commons Attribution 4.0

Feedback
Was this page helpful? 

Overview and timelines for migrating to Manifest V3
Article • 09/12/2024
A manifest file is the blueprint of an extension. A manifest file for an extension includes information such as the version number of the extension, the title of the extension, and permissions needed to run the extension. The manifest file follows the format specified by Manifest V2 or Manifest V3.
Overview of changes in Manifest V3
Migrating from Manifest V2 to Manifest V3 brings several structural changes to how extensions are handled by the browser.
In October 2020, Microsoft announced the decision to embrace Manifest V3 to help reduce fragmentation of the web for all developers and enhance privacy, security, and performance for end users.
Manifest V3 is an initiative of the Chromium project.
An overview of the changes involved, as described in Migrate to Manifest V3:
Background pages have been replaced by service workers.
Network request modifications are now handled by the new declarativeNetRequest API.
Remotely hosted code is no longer allowed. An extension can only run JavaScript that's included within its own package.
 Support for Promises has been added to many methods. Callbacks are still supported, as an alternative.
 Various minor feature improvements.
Manifest timeline for the Chromium browser engine
Chromium has revised the timelines for ending support for Manifest V2. See:
 Manifest V2 support timeline
 The phase-out timeline in Resuming the transition to Manifest V3.
Manifest timeline for Microsoft Edge and Partner Center
To help you plan the migration of your extension from Manifest V2 to Manifest V3, consider the following schedule for support for Manifest V2 and V3 in Microsoft Edge and Microsoft Partner Center.
The Microsoft Edge team will independently decide on MV3 migration timelines for Microsoft Edge Add-ons and share an update here. We continue to analyze the concerns raised by extension developers and explore the optimal path for the Microsoft Edge Add-ons ecosystem. Meanwhile, to plan the migration of your extension from Manifest V2 to Manifest V3, see Manifest timeline for the Chromium browser engine, above.
The Microsoft Edge team is currently in the process of updating this MV3 migration timeline.
ﾉ Expand table
TimeframeMicrosoft Partner Center changesMicrosoft Edge changesJuly 2022 (already in effect)Microsoft Partner Center will no longer accept new Manifest V2 extensions with visibility set as Hidden or Public.No change.TBDMicrosoft Partner Center will no longer accept updates to existing Manifest V2 extensions. Developers can submit updates for migrating a V2 extension to V3.Microsoft Edge stops running Manifest V2 extensions. Enterprises can allow Manifest V2 extensions to run on Microsoft Edge, by using enterprise policies.TBDNo change.Manifest V2 extensions will no longer function in Microsoft Edge, even with the use of enterprise policies.Manifest V2 extensions will continue to be supported through Enterprise policies at least until the date in the Chromium Manifest V2 support timeline.
Microsoft continues to iteratively improve the platform and address the feedback shared by extension developers. Share your questions, comments, and concerns:
 Contact the Microsoft Edge extensions team
 Microsoft Edge Insider - forum about Microsoft Edge at Microsoft Tech Community.
 @MSEdgeDev - Microsoft Edge team on X (Twitter).
See also

Feedback
Was this page helpful? 

Migrate an extension from Manifest V2 to V3
Article • 07/06/2022
This article lists important changes being implemented as part of Manifest V3, which is the next version of the Chromium Extensions platform. For guidance on migrating your extension to Manifest V3, see Overview of Manifest V3 - Chrome Developers.
Remotely hosted code
Today, some parts of the extensions code are hosted remotely, and aren't included as part of the extension package during the validation process. While this offers flexibility to change code without resubmitting the extension to the store, it's possible to exploit the code after installation. To ensure that Microsoft Edge Add-ons lists validated extensions, the Microsoft Edge extensions team disallows extensions from using remotely hosted code. This change makes extensions more secure.
Developers will need to package and submit all code that is used by the extension, for validation. Alternatively, you can use the eval() function in a sandboxed environment.
Run-time host permissions
At installation time, it's possible for extensions to request blanket permissions to access all sites and content. These permissions allow extensions to operate with minimum intervention, and so present a risk for user privacy and security. To improve transparency, the Microsoft Edge extensions team provides controls that enable users to allow or restrict access to websites at runtime.
Cross-origin requests in content scripts
Today, content scripts can request access to any origin, including origins that aren't allowed by the website. The behavior breaks cross-origin principles. Going forward, the Microsoft Edge extensions team requires content scripts to have the same permissions as the webpage into which the scripts are injected. This requirement closes a potential security loophole.
To perform cross-origin requests, you need to use background scripts to relay responses back to content scripts. These changes are available and are behind a flag. For more information, see Changes to Cross-Origin Requests in Chrome Extension Content Scripts.
Web Request API
The Microsoft Edge extensions team replaces the Web Request API by the Declarative
Net Request API, but we continue to keep the observational capabilities of the Web Request API. We recommend using the Declarative Net Request (DNR) APIs only, rather than the Web Request API, except in some specific scenarios where observational capabilities of the Web Request API are required by the extension.
This change will have positive impact on extensions that use feature-rich declarative capabilities. As more extensions transition to the Declarative Net Request APIs, this change will improve user privacy, which contributes to trust in the use of extensions.
Enterprises can continue to use the blocking behavior of the Web Request API for extensions that are managed through enterprise policies. For more information about extension policies, see Extensions in Microsoft Edge - Policies.
Background service workers
Service workers are available for testing in the Canary preview channel of Microsoft
Edge. To migrate your extensions from background pages to service workers, see Migrate to a service worker. The Microsoft Edge extensions team is evaluating and investigating the impact that this change brings to both developers and users.
When are these changes available in Microsoft
Edge
The current Declarative Net Request API implementation is available in the Microsoft Edge Stable and Beta channels. Please test the changes and provide feedback.
The Microsoft Edge extensions team publishes updates at our blog. You can provide feedback on the changes through Microsoft Tech Community; see Manifest V3 changes are now available in Microsoft Edge.
Supported APIs for Microsoft Edge extensions
Article • 09/24/2024
Microsoft Edge extensions use a subset of the JavaScript methods for the Chromium browser engine platform. When building an extension for the Microsoft Edge browser, you can use the following APIs.
ﾉ Expand table
APIDescriptionManifest versionsaccessibilityFeaturesManages the browser's accessibility features.MV2,
MV3actionControls the extension's icon in the browser's toolbar.MV3alarmsSchedules code to run periodically or at a specified time in the future.MV2,
MV3bookmarksCreates, organizes, and manipulates bookmarks.MV2,
MV3browserActionUses browser actions to place icons on the toolbar in Microsoft Edge. You can also use browser actions to add a tooltip, badge, or popup.MV2browsingDataRemoves browsing data from a user's local profile.MV2,
MV3commandsAdds keyboard shortcuts that trigger actions in your extension, such as an action to open the browser or send a command to the extension.MV2,
MV3contentSettingsCustomizes the behavior of Microsoft Edge on each site, instead of globally. Changes settings that control whether websites can use features such as cookies, JavaScript, and plugins.MV2,
MV3contextMenusAdds items to the context menu (right-click menu) in Microsoft Edge. Menu items can apply to different objects, such as images, hyperlinks, and pages.MV2,
MV3
APIDescriptionManifest versionscookiesQueries and modifies cookies, and receives notifications when they change.MV2,
MV3debuggerAttaches to one or more tabs to instrument network interaction, debug JavaScript, change the
DOM, change CSS, and so on. Use the Debuggee's tabId to target tabs with sendCommand, and route events by tabId from onEvent callbacks.MV2,
MV3declarativeContentPerforms actions depending on the content of a page, without requiring permission to read the page content.MV2,
MV3declarativeNetRequestProvides more privacy by blocking or modifying network requests by specifying declarative rules. Allows extensions to modify network requests without intercepting the request and viewing the content.MV2,
MV3desktopCaptureCaptures the content of a screen, individual windows, or tabs.MV2,
MV3devtools.inspectedWindowInteracts with the inspected window. For example, obtains the tab ID of pages, evaluate code, refresh pages, or obtain resources on a page.MV2,
MV3devtools.networkRetrieves information about network requests that are displayed by the DevTools Network tool.MV2,
MV3devtools.panelsIntegrates your extension into the Developer Tools window UI by creating your own panels, accessing existing panels, or adding sidebars.MV2,
MV3dnsResolves DNS addresses.MV2, MV3. Dev channel.domAccesses special DOM APIs for Extensions.MV2,
MV3downloadsProgrammatically starts, monitors, manipulates, and searches for downloads.MV2,
MV3enterprise.hardwarePlatformGets the manufacturer and model of the hardware platform where the browser runs. For extensions that are installed by enterprise policy.MV2,
MV3
APIDescriptionManifest versionseventsCommon types used by APIs that raise events to notify you when an interesting event occurs.MV2,
MV3extensionUtilities that can be used by any extension page. Includes support for exchanging messages between an extension and its content scripts, or between extensions.MV2,
MV3extensionTypesType declarations for Microsoft Edge extensions.MV2,
MV3fontSettingsManages font settings in Microsoft Edge.MV2,
MV3historyInteracts with the browser's record of visited pages. You can add, remove, or query for URLs in the browser's history. To override the history page with your own version, navigate to Override Pages.MV2,
MV3i18nImplements internationalization across your whole app or extension.MV2,
MV3identityGets OAuth2 access tokens. Not supported:
identity.getAccounts, identity.getAuthToken As an alternate, you can use identity.launchWebAuthFlow to fetch an OAuth2 token to authenticate users.MV2,
MV3idleDetects when the machine's idle state changes.MV2,
MV3input.imeImplements a custom IME for the OS, allowing an extension to handle keystrokes, set the composition, and manage the candidate window.MV2,
MV3managementManages the list of installed or running extensions.
Can override the built-in New Tab page.MV2,
MV3notificationsCreates rich notifications using templates and displays them in the system tray.MV2,
MV3offscreenCreates and manages offscreen documents.MV3omniboxRegisters keywords in the Microsoft Edge address bar, also known as the omnibox.MV2,
MV3pageActionAdds icons to the Microsoft Edge toolbar, to the right of the address bar. Page actions are actions that can be taken on the current page, and aren'tMV2
APIDescriptionManifest versionsapplicable to all pages. Page actions appear grayed out when inactive.pageCaptureSaves tabs as MHTML files.MV2,
MV3permissionsRetrieves declared, optional permissions at runtime, instead of at install time. You can use this API to display needed and approved permissions to your users.MV2,
MV3powerOverrides the system's power management features.MV2,
MV3printerProviderUses events to query printers, their capabilities, and to submit print jobs.MV2,
MV3privacyControls features in Microsoft Edge that affects a user's privacy. This API depends on the EdgeSetting prototype of types to get and set the configuration of Microsoft Edge.MV2,
MV3processesInteracts with the browser's processes.MV2, MV3. Dev channel.proxyManages proxy settings for Microsoft Edge. This
API depends on the EdgeSetting prototype of the types API to get and set the proxy configuration of Microsoft Edge.MV2,
MV3runtimeRetrieves the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also convert the relative path of URLs to fully qualified URLs.MV2,
MV3scriptingExecutes scripts in different contexts.MV3searchSearches by using the default provider.MV2,
MV3sessionsQueries and restores tabs and windows from a browsing session.MV2,
MV3sidePanelHosts custom content in the browser's sidebar alongside the main content of a webpage. SeeMV3
APIDescriptionManifest versionsDevelop an extension for the Microsoft Edge sidebar.storageStores, retrieves, and tracks changes to user data.MV2,
MV3system.cpuQueries CPU metadata.MV2,
MV3system.displayQueries display metadata.MV2,
MV3system.memoryReports the available memory capacity and total physical memory capacity.MV2,
MV3system.storageQueries information about storage devices. You can also receive notifications when storage devices are attached or detached.MV2,
MV3tabCaptureInteracts with tab media streams.MV2,
MV3tabGroupsInteracts with the browser's tab grouping system.
Modifies and rearranges tab groups in the browser. To group and ungroup tabs, or to query what tabs are in groups, use the tabs API instead.MV3tabsInteracts with the browser's tab system to create, modify, and rearrange tabs.MV2,
MV3topSitesAccesses the top sites, also called the most visited sites, that are displayed on the new tab page. These sites don't include shortcuts that are customized by the user.MV2,
MV3ttsPlays synthesized text-to-speech (TTS).MV2,
MV3ttsEngineImplements a text-to-speech (TTS) engine using an extension. Extensions that register to use this API receive events that contain utterances to be spoken and other parameters. Extensions can then use any available web technology to synthesize and output speech, and send events back to the calling function to report the status.MV2,
MV3typesType declarations for Microsoft Edge.MV2,
MV3APIDescriptionManifest versionsuserScriptsExecutes user scripts in the User Scripts context.MV3webAuthenticationProxyLets remote desktop software that's running on a remote host intercept Web Authentication API (WebAuthn) requests in order to handle them on a local client.MV3webNavigationReceives notifications about the status of navigation requests.MV2,
MV3webRequestObserves and analyzes traffic. Intercepts, blocks, or modifies requests.MV2,
MV3windowsInteracts with browser windows to create, modify, and rearrange windows in the browser.MV2,
MV3Unsupported APIs
These Extensions APIs are not supported for Microsoft Edge.
ﾉ Expand table
API	Notesaudio	ChromeOS only.certificateProvider	ChromeOS only.devtools.recorder	Chrome DevTools only.documentScan	ChromeOS only.enterprise.deviceAttributes	ChromeOS only.enterprise.networkingAttributes	ChromeOS only.enterprise.platformKeys	ChromeOS only.fileBrowserHandler	ChromeOS only.fileSystemProvider	ChromeOS only.gcmidentity.getAccountsAPI	Notesidentity.getAuthToken	Gets an OAuth2 access token using the client ID and scopes
specified in the oauth2 section of manifest.json. As an alternate, you can use identity.launchWebAuthFlow	 to fetch an OAuth2 token to authenticate users.instanceIDloginState	ChromeOS only.platformKeys	ChromeOS only.printing	ChromeOS only.printingMetrics	ChromeOS only.readingListvpnProvider	ChromeOS only.wallpaper	ChromeOS only.Additional considerations for supported APIs
 The user must be signed into Microsoft Edge using a Microsoft account (MSA) or Microsoft Entra ID account to use chrome.identity.getProfileUserInfo. If the user is signed into Microsoft Edge using an on-premises Microsoft Entra ID account, the API returns null for the email and ID values.
A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account.
 Microsoft Edge doesn't support extensions that use Chrome Web Store payments because it uses identity.getAuthtoken to request tokens for signed-in users.
These tokens are sent to the REST-based licensing API.

See also
Chrome Extensions API reference for Manifest V2
Chrome Extensions API reference for Manifest V3
Using the REST API for updating Microsoft Edge Add-ons - to update an extension at the Microsoft Edge Add-ons website.

Feedback
Was this page helpful? 

Declare API permissions in the manifest
Article • 06/23/2023
To use most of the chrome.* APIs, your extension must declare its intent in the permissions fields of the manifest. An extension can declare permissions using a
permission string from the table that follows, or use a pattern to match similar strings. Permissions help to constrain your extension if it gets compromised by malware. Some permissions are displayed to users for their consent before installation of the extension, or at runtime, as needed; these are Permission Warnings.
If an API requires you to declare permissions in the manifest, see the documentation for that API to understand the needed permissions. For example, the Storage API page describes how to declare the storage permission.
Here's an example of the permissions part of a manifest file:

The following table lists the currently available permission strings to use in your manifest, and the descriptions.
ﾉ Expand table
Permission stringDetailsactiveTabRequests that the extension is granted permissions according to the activeTab specification.alarmsGives your extension access to the chrome.alarms API.
Permission stringDetailsbackgroundMakes Microsoft Edge start up early and shut down late, so that extensions may have a longer life.
When any installed extension has background permission, Microsoft Edge runs invisibly as soon as the user logs into the user's computer, and before the user launches Microsoft Edge. The background permission also makes Microsoft Edge continue running, even after its last window is closed, until the user explicitly quits Microsoft Edge.
Note: Disabled extensions are treated as if they aren't installed.
You should use the background permission with background scripts .bookmarksGives your extension access to the chrome.bookmarks API.browsingDataGives your extension access to the chrome.browsingData API.certificateProviderGives your extension access to the chrome.certificateProvider API.clipboardReadRequired if the extension uses document.execCommand('paste').clipboardWriteIndicates the extension uses document.execCommand('copy') or document.execCommand('cut').contentSettingsGives your extension access to the chrome.contentSettings API.contextMenusGives your extension access to the chrome.contextMenus API.cookiesGives your extension access to the chrome.cookies API.debuggerGives your extension access to the chrome.debugger API.declarativeContentGives your extension access to the chrome.declarativeContent API.declarativeNetRequestGives your extension access to the chrome.declarativeNetRequest API. Allows the extension
to block and upgrade requests without requiring host permissions, but requires host permissions to redirect requests or modify headers.
Permission stringDetailsdeclarativeNetRequestWithHostAccessGives your extension access to the chrome.declarativeNetRequest API. Always requires host
permissions on the request URL and on the initiator, to act on the request.declarativeNetRequestFeedbackGrants the extension access to events and methods within the chrome.declarativeNetRequest API, which returns information on declarative rules matched.declarativeWebRequestGives your extension access to the chrome.declarativeWebRequest API.desktopCaptureGives your extension access to the chrome.desktopCapture API.documentScanGives your extension access to the chrome.documentScan API.downloadsGives your extension access to the chrome.downloads API.enterprise.deviceAttributesGives your extension access to the chrome.enterprise.deviceAttributes API.enterprise.hardwarePlatformGives your extension access to the chrome.enterprise.hardwarePlatform API.enterprise.networkingAttributesGives your extension access to the chrome.enterprise.networkingAttributes API.enterprise.platformKeysGives your extension access to the chrome.enterprise.platformKeys API.experimentalRequired if the extension uses any chrome.experimental.* API.fileBrowserHandlerGives your extension access to the chrome.fileBrowserHandler API.fileSystemProviderGives your extension access to the chrome.fileSystemProvider API.fontSettingsGives your extension access to the chrome.fontSettings API.geolocationAllows the extension to use the geolocation API without prompting the user for permission.historyGives your extension access to the chrome.history API.
Permission stringDetailsidentityGives your extension access to the chrome.identity API.idleGives your extension access to the chrome.idle API.loginStateGives your extension access to the chrome.loginState API.managementGives your extension access to the chrome.management API.nativeMessagingGives your extension access to the native messaging API.notificationsGives your extension access to the chrome.notifications API.pageCaptureGives your extension access to the chrome.pageCapture API.platformKeysGives your extension access to the chrome.platformKeys API.powerGives your extension access to the chrome.power API.printerProviderGives your extension access to the chrome.printerProvider API.printingGives your extension access to the chrome.printing API.printingMetricsGives your extension access to the chrome.printingMetrics API.privacyGives your extension access to the chrome.privacy API.processesGives your extension access to the chrome.processes API.proxyGives your extension access to the chrome.proxy API.scriptingGives your extension access to the chrome.scripting API.searchGives your extension access to the chrome.search API.sessionsGives your extension access to the chrome.sessions API.sidePanelGives your extension access to the chrome.sidePanel API.
See Develop an extension for the Microsoft Edge sidebar.signedInDevicesGives your extension access to the chrome.signedInDevices API.storageGives your extension access to the chrome.storage API.
Permission stringDetailssystem.cpuGives your extension access to the chrome.system.cpu API.system.displayGives your extension access to the chrome.system.display API.system.memoryGives your extension access to the chrome.system.memory API.system.storageGives your extension access to the chrome.system.storage API.tabCaptureGives your extension access to the chrome.tabCapture API.tabGroupsGives your extension access to the chrome.tabGroups API.tabsGives your extension access to privileged fields of the Tab objects that can be used by several APIs, including
chrome.tabs and chrome.windows. In many circumstances,
your extension doesn't need to declare the tabs permission, to make use of these APIs.topSitesGives your extension access to the chrome.topSites API.ttsGives your extension access to the chrome.tts API.ttsEngineGives your extension access to the chrome.ttsEngine API.unlimitedStorageProvides an unlimited quota for storing client-side data, such as databases and local storage files. Without this permission, the extension is limited to 5 MB of local storage.
This permission applies only to Web SQL Database and application cache (see Issue 58985: Unlimited Storage permission should apply to Local Storage	).
This permission currently doesn't work with wildcard subdomains such as http://*.contoso.com.vpnProviderGives your extension access to the chrome.vpnProvider API.wallpaperGives your extension access to the chrome.wallpaper API.webNavigationGives your extension access to the chrome.webNavigation API.webRequestGives your extension access to the chrome.webRequest API.Permission stringDetailswebRequestBlockingRequired if the extension uses the chrome.webRequest API to block requests.
See also
 Overview of Microsoft Edge extensions

Feedback
Was this page helpful?  Yes  No
Create a DevTools extension, adding a custom tool tab and panel
Article • 11/19/2024
This article provides a sample and code walkthrough for a Microsoft Edge extension that adds a tool tab and panel in DevTools.
This article first shows how to install and run the provided DevTools extension sample, which adds a Sample Panel tool tab in DevTools within Microsoft Edge. The sample is a working DevTools extension that creates its own panel, and interacts with the DevTools APIs.
This article then presents a tutorial that shows how you can optionally create that sample from scratch, and explains each step of developing the sample, and how the added code works. These tutorial steps are a good way to experience everything that's needed for typical development.
See also:
 Overview of DevTools
Download, install, and run the DevTools extension sample
To download, install, run, and test the provided, finished DevTools extension sample:
1. Download the final extension code by clicking Demos-main.zip and then extracting its content to a folder on your computer.
2. Open Microsoft Edge and go to edge://extensions/.
3. Turn on the Developer mode toggle.
4. Click Load unpacked and navigate to the folder where you extracted the zip file. In this folder, select Demos-main > devtools-extension > sample 4, and then click Select Folder.

The DevTools extension is loaded.
5. In Microsoft Edge, open a new tab.
6. Open DevTools (F12).
7. Select the Sample Panel tool (tab).
The Sample Panel tool opens:

8. Click the Say Hello to the inspected page button.
An alert is displayed in the inspected page:

9. Click the OK button to close the alert.
10. Click anywhere in the inspected page.
A message is displayed in the extension panel: You clicked on position (199, 509) in the inspected page:

11. Select the Console tool.
A message appears in the Console tool: Received response > {xPosition: 199, yPosition: 509}:

You downloaded, installed, ran, and tested the provided, finished DevTools extension sample. In the next steps, you create the same sample by starting from an empty directory. The following sections explain how the code works.
Step 1: Create a basic Microsoft Edge extension that has a DevTools webpage
If you want to create the files for each major step below, install a code editor such as Visual Studio Code, to follow the tutorial steps below to manually re-create the above sample DevTools extension. You can read the code walkthrough below, presented as four major steps or phases.
A basic extension for Microsoft Edge consists of a manifest file (manifest.json). Because this particular extension extends DevTools, this extension also includes a webpage file, devtools.html. The two files are provided in the Microsoft Edge / Demos repo > /devtools-extension/sample 1/ directory. The directory contains the files:
devtools.html
manifest.json
manifest.json
manifest.json is a manifest file, containing key/value pairs. The top-level keys are called
members:
JSON
{
    "name": "DevTools Sample Extension",
    "description": "A Basic DevTools Extension",
    "manifest_version": 3,
    "version": "1.0",
    "devtools_page": "devtools.html" }
ﾉ Expand table
MemberDescriptionnameThe name of the extension that will appear under edge://extensions/.descriptionThe description of the extension that will be displayed under the name of the extension.versionThe version of the extension that will appear next to the name of the extension.manifest_versionDetermines the set of features that the extension will be using, such as service workers or network request modification. The current version is version 3. To learn more about this version and the differences with version 2, see Overview and timelines for migrating to Manifest V3.devtools_pageThe path to an HTML file that's run every time DevTools is opened, and loads the extension's JavaScript files. This page isn't rendered in DevTools.devtools.html
devtools.html matches the devtools_page member in the manifest file:
HTML<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
  </head>
  <body>
    A Basic DevTools Extension.
  </body>
</html>In a later step, you'll add a <script> element in the above file, to load a JavaScript file.
This HTML file isn't displayed in DevTools.
Install and test the basic Microsoft Edge extension
Loading and testing an Edge extension locally is sometimes called sideloading an extension, as opposed to distributing an extension to users.
To load and test your basic extension locally in Microsoft Edge:
1. In Microsoft Edge, go to edge://extensions/.
2. Turn on the Developer mode toggle.
3. Click Load unpacked, navigate to the folder where you wrote the code for your extension, and then click the Select folder button.
Your DevTools extension is loaded.
4. Open a new tab.
5. Open DevTools (F12).
Your extension is loaded, but isn't displayed in DevTools yet, because you haven't created a panel for the extension.
See also:
 Sideload an extension to install and test it locally
Step 2: Add a custom tool in DevTools
In this step, you'll create a new panel (tool tab) in DevTools. You can either:
 Copy and paste the code from the Microsoft Edge / Demos repo > /devtoolsextension/sample 2/	 directory. That directory contains the following files: devtools.html devtools.js - Added in Step 2.
manifest.json panel.html - Added in Step 2.
Copy and paste the code from the code listings below.
A panel is a tool tab in the main toolbar in DevTools, similar to the Elements, Console, and Sources tools shown below:

To create a basic DevTools extension with a sample panel:
1. Create a file named devtools.js.
2. Copy and paste the following code into devtools.js:
JavaScriptchrome.devtools.panels.create("Sample Panel", "icon.png", "panel.html", panel => {
    // code invoked on panel creation
});The create method has the following signature:
JavaScriptchrome.devtools.panels.create(     title: string, // Tool tab's label in Activity bar.     iconPath: string, // Icon to display in tool's tab.     pagePath: string, // Webpage to display in tool's panel.     callback: function // Code to run when tool is opened. )Reference:
     chrome.devtools.panels create() devtools.html:
3. Create a file named devtools.html.
4. Copy and paste the following code into devtools.html:
HTML<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
  </head>
  <body>
    <script src="devtools.js"></script>
  </body>
</html>In the manifest file (manifest.json), the devtools_page field specifies the above file
(devtools.html). devtools.html, above, contains a <script> element that loads devtools.js.
panel.html:
5. Create the panel.html file that you referenced in the previous chrome.devtools.panels.create method call. This webpage will contain the user
interface of the panel your extension is adding to DevTools.
HTML<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
  </head>
  <body>
    <h1>A Basic DevTools Extension with Panel</h1>
  </body>
</html>Reload and test the DevTools extension
To test your changes in Microsoft Edge, reload your extension from the edge://extensions/ page:
1. Go to edge://extensions/.
2. Next to the DevTools extension sample that you installed before writing your own code, click Reload:

The DevTools extension is reloaded, now using the files that you created above, rather than the provided sample that you downloaded.
3. Open a new tab in Microsoft Edge.
4. Open DevTools (F12).
5. In the Activity bar, select the Sample Panel tool (tab):

Step 3: Display memory information by calling extension APIs
In this step, you will use extension APIs to display memory information in your DevTools panel. To do this, we will need to update the permissions in the manifest file, the panel interface, and the devtools script. You can copy the source code files for this step from the Microsoft Edge / Demos repo > /devtools-extension/sample 3/ directory, or create the files yourself by following the instructions below. The directory contains the files:
devtools.html devtools.js - Updated in Step 3. manifest.json - Updated in Step 3.
panel.html - Updated in Step 3.
1. Use the permissions manifest member in your manifest.json file. This member defines which permissions your extension requires from the user. Some permissions are needed to use certain extension APIs.
JSON"permissions": [
  "system.memory",
]The system-memory permission is required, in order to use the extension APIs that you'll use later in this tutorial. To learn more about the available APIs and associated permissions, see API reference for extension APIs.
panel.html:
2. Add the following to the body in the panel.html file to display the data in the panel.
HTML<div>
  Available Memory Capacity: <span id="availableMemoryCapacity"></span>
</div>
<div>   Total Memory Capacity: <span id="totalMemoryCapacity"></span>
</div>devtools.js:
3. Update the devtools.js file with the following code.
JavaScript
let availableMemoryCapacity; let totalMemoryCapacity;
chrome.devtools.panels.create("Sample Panel", "icon.png", "panel.html", panel => {
    // code invoked on panel creation     panel.onShown.addListener((extPanelWindow) => {         availableMemoryCapacity = 
extPanelWindow.document.querySelector('#availableMemoryCapacity');         totalMemoryCapacity = extPanelWindow.document.querySelector('#totalMemoryCapacity');
    }); });
setInterval(() => {     chrome.system.memory.getInfo((data) => {         if (availableMemoryCapacity) {             availableMemoryCapacity.innerHTML = data.availableCapacity;
        }         if (totalMemoryCapacity) {
            totalMemoryCapacity.innerHTML = data.capacity;
        }     });
}, 1000);The above code snippet does the following:
1. Creates a new panel Sample Panel in DevTools.
2. When the panel is displayed (panel.onShown listener), the availableMemoryCapacity and totalMemoryCapacity elements are retrieved from the DOM.
3. Sets a timer to run code every second after the panel is shown.
4. When the timer fires, the chrome.system.memory.getInfo method is used to retrieve the available and total memory capacity of the device and these values are displayed in the corresponding DOM elements.
Reload and test the DevTools extension
To test your changes in Microsoft Edge, reload your extension from the edge://extensions/ page:
1. Go to edge://extensions/.
2. Next to your DevTools extension, click Reload.
Your DevTools extension is reloaded.
3. Open a new tab.
4. Open DevTools (F12).
5. Select the Sample Panel tool.
Your DevTools extension shows the available and total memory capacities:

See also:
 API Reference
Step 4: Interact between the webpage and
DevTools
In this step of the tutorial, you will add code that interacts with the inspected webpage.
That code will:
1. Listen to click events that happen on the webpage and log them into the DevTools Console tool.
2. Display the mouse click position in the DevTools extension panel.
3. When the user clicks a button in the DevTools extension panel, display a greeting alert in the inspected webpage.
You can copy the files that are the end result of this step from the Microsoft Edge / Demos repo > /devtools-extension/sample 4/ directory, or create the files yourself by following the instructions below. The directory contains the files:
background.js - added in Step 4.
content_script.js - added in Step 4. devtools.html devtools.js - updated in Step 4. manifest.json - updated in Step 4.
panel.html - updated in Step 4.
The DevTools tool (panel) that you created so far doesn't have direct access to the inspected webpage, and doesn't run until DevTools is opened. For this you will use a content script and a background service worker.
 A content script runs in the context of the inspected webpage. In the same way that other scripts are loaded by the webpage, a content script has have access to the DOM and can change it.
 A background service worker is a script that the browser runs in a separate thread.
This script has access to the Microsoft Edge extension APIs.
The DevTools page, inspected page, content script, and background service worker fit together in an extension:


In this part of the tutorial, you'll detect the user clicks on a webpage by using a content script. The content script will relay this info to the devtools.js file, where the data will be displayed in both the console and the DevTools extension panel.
1. Append the following code in the manifest.json file:
JSON"content_scripts": [{
  "matches": [
    "http://*/*",     "https://*/*"
  ],
  "run_at": "document_idle",
  "js": [
    "content_script.js"
  ] }],
"background": {    "service_worker": "background.js" }
ﾉ Expand table
KeyValuematchesSpecifies which pages this content script will be injected into.run_atIndicates when the browser injects the script onto the page.jsThe javascript files to be injected.content_script.js:
2. Create a file named content_script.js.
3. Copy and paste the following code into content_script.js:
JavaScriptdocument.addEventListener("click", (event) => {   chrome.runtime.sendMessage({       click: true,       xPosition: event.clientX + document.body.scrollLeft,       yPosition: event.clientY + document.body.scrollTop
    },     response => {       console.log("Received response", response);
    }
  );
});The above code snippet prints a message to the console when the script is injected in the page. It also adds a click event listener to the page that will send a message with mouse click position in the inspected page by using the chrome.runtime.sendMessage API.
panel.html:
4. In the panel.html file, add a sayHello button and a youClickedOn label, as follows:
HTML<button id="sayHello">Say Hello to the inspected page!</button>
<h2><span id="youClickedOn"></span></h2>The above two elements are used to demo the interaction between the inspected page, the DevTools panel, and the background service worker. When the user clicks the sayHello button in the DevTools extension, it will display a greeting message in the inspected window. When the user clicks anywhere in the inspected page, it will display a message to show the mouse click position in the DevTools extension panel.
devtools.js:
5. In the devtools.js file (as shown below), use the chrome.runtime.connect method to create a connection to the background service worker, and then send the inspected window tabId to the service worker by using the
backgroundPageConnection.postMessage method. Finally, add event listeners to the sayHello button and youClickedOn label that's defined in the panel.html file, as shown below:
JavaScriptlet youClickedOn; chrome.devtools.panels.create("Sample Panel", "icon.png", "panel.html", panel => {
    // code invoked on panel creation     panel.onShown.addListener( (extPanelWindow) => {         let sayHello = 
extPanelWindow.document.querySelector('#sayHello');         youClickedOn = 
extPanelWindow.document.querySelector('#youClickedOn');         sayHello.addEventListener("click", () => {
            // show a greeting alert in the inspected page
            chrome.devtools.inspectedWindow.eval('alert("Hello from the 
DevTools extension");');         });             
    }); });
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    // Messages from content scripts should have sender.tab set     if (sender.tab && request.click == true) {         console.log('I am here!');         if (youClickedOn) {             youClickedOn.innerHTML = `You clicked on position 
(${request.xPosition}, ${request.yPosition}) in the inspected page.`;
        }
        sendResponse({             xPosition: request.xPosition,             yPosition: request.yPosition
        });
    }
});// Create a connection to the background service worker const backgroundPageConnection = chrome.runtime.connect({     name: "devtools-page"
});
// Relay the tab ID to the background service worker backgroundPageConnection.postMessage({     name: 'init',     tabId: chrome.devtools.inspectedWindow.tabId
});When the user clicks the sayHello button, the DevTools extension will run a code snippet of alert("Hello from the DevTools Extension"); in the inspected window by invoking the eval() method of the inspected window chrome.devtools.inspectedWindow.
When the user clicks anywhere in the inspected window, the DevTools extension will receive a message, from the background service worker, with request.click == true and the mouse position information. background.js:
6. Create a file named background.js.
7. Copy and paste the following code into background.js:
JavaScriptlet id = null; const connections = {};
chrome.runtime.onConnect.addListener(devToolsConnection => {
    // Assign the listener function to a variable so we can remove it later     let devToolsListener = (message, sender, sendResponse) => {         if (message.name == "init") {             id = message.tabId;             connections[id] = devToolsConnection;             // Send a message back to DevTools
            connections[id].postMessage("Connected!");
        }
    };
    // Listen to messages sent from the DevTools page     devToolsConnection.onMessage.addListener(devToolsListener);
    devToolsConnection.onDisconnect.addListener(() => {         devToolsConnection.onMessage.removeListener(devToolsListener);    });
});
The above code connects the background service worker with the DevTools page. It listens to when the DevTools page connects, saves the connection, and sends a response back to the DevTools page.
This is useful when your background service worker is collecting data or performing tasks in the background that you want to be available in your DevTools extension.
Reload and test the DevTools extension
To test the new sayHello button:
1. Go to edge://extensions/.
2. Find the unpacked extension entry that you loaded in Step 1.
3. Click the Reload button.
4. Open a new browser tab, open DevTools (F12), and then click the Sample Panel tool (tab).
5. Click the Say Hello to The Inspected Page! button.
An alert is displayed in the inspected page:

6. Click the OK button to close the alert.
7. Click anywhere in the inspected page.
A message is displayed in the extension panel: You clicked on position (199, 509) in the inspected page:

8. Select the Console tool.
A message appears in the Console tool: Received response > {xPosition: 199, yPosition: 509}:

This completes the tutorial and code walkthrough for creating a DevTools extension that adds a tool tab and panel in DevTools in Microsoft Edge.
See also:
 Content scripts in the Chrome Extensions docs.
See also

Feedback
Was this page helpful? 

Develop an extension for the Microsoft Edge sidebar
Article • 12/11/2024
As a Microsoft Edge extension developer, you can make your new or existing Microsoft Edge extension appear in the sidebar. Any extension can use the sidebar in addition to its other UI.

By using the Sidebar API for extensions, you can enhance the browsing experience by enabling users to view additional information alongside the main content of a webpage.
The sidebar is a persistent pane located on the side of the browser, which coexists with the primary content of the browser. The sidebar reduces the need to constantly switch between tabs, resulting in a more productive browsing experience.
Extensions can optionally use the sidebar API to show a custom UI in the Microsoft Edge sidebar. Extensions can continue appearing in the Microsoft Edge toolbar along with a UI such as popups, and can inject scripts, for example.
Terminology
ﾉ Expand table
TermDefinitionSidebar APIName of the feature that you can use in your Microsoft Edge extensions.
Chrome docs use the term side panel.sidePanel or side_panelName of the API and permission to enable any extension as a sidebar extension.Sidebar extensionA Microsoft Edge extension that has a UI in the sidebar.Features of the Sidebar API
Features of the Sidebar API include:
 The sidebar remains open while navigating between tabs. Known issue: The sidebar is not automatically displayed again when the user switches to a tab in which the sidebar was previously open (Issue #142).
An extension in the sidebar can be made available for specific websites.
An extension in the sidebar has access to all of the Supported APIs for Microsoft Edge extensions.
Origin
As with other extension resources, the sidebar page commits to a trusted extension context on its origin (extension://<id>). The sidebar has the same API access as other trusted extension contexts.
All the existing extensions APIs are available for sidebar extensions, so you can leverage all current capabilities of the extensibility framework in your sidebar-enabled extension.
Add the sidePanel permission in the extension's manifest file
To use the Sidebar API, add a permission in your manifest.json file. Include the sidePanel permission in the extension's manifest.json file:
JSON{   ...
  "name": "My sidebar extension",  ...
  "side_panel": {
    "default_path": "sidebar.html"
  },
  "permissions": [
    "sidePanel"
  ]    ...
}Every extension for Microsoft Edge has a JSON-formatted manifest file, named manifest.json. The manifest file is the blueprint of your extension.
See also:
 Manifest file format for extensions
Use cases for the Sidebar API
The following sections demonstrate some common use cases for the Sidebar API.
Display the same sidebar on every site
A sidebar can be set as the default, to show the same extension throughout all the open browser tabs. Default values persist across browser sessions.
In manifest.json, define the "default_path" key, such as "sidebar.html":
JSON{
  "name": "My sidebar extension",
  ...
  "side_panel": {
    "default_path": "sidebar.html"
  }   ...
}The file you specified as the default, such as sidebar.html, appears in all the open browser tabs:
HTML<!DOCTYPE html>
<html>  <head>
    <title>My Sidebar</title>
  </head>
  <body>
    <h1>Sidebar extension for all sites</h1>
    <p>This sidebar is enabled on all sites</p>
  </body>
</html>
Enable a sidebar for a specific site only
An extension can use sidepanel.setOptions() to enable a sidebar on a specific tab. This can be a particular website, so the extension opens in the sidebar when the user goes to this website.
This example uses chrome.tabs.onUpdated()	 to listen for any updates made to the tab. It checks whether the URL is www.bing.com and if so, enables the sidebar. Otherwise, it disables the sidebar.
In service-worker.js, in addListener(), test url.origin to see if it's the desired tab, and then in sidePanel.setOptions(), set enabled to true or false:
JavaScriptconst BING_ORIGIN = 'https://www.bing.com';
chrome.tabs.onUpdated.addListener(async (tabId, info, tab) => {   if (!tab.url) return;
  const url = new URL(tab.url);
  // Enables the sidebar when at bing.com   if (url.origin === BING_ORIGIN) {     await chrome.sidePanel.setOptions({       tabId,       path: 'sidepanel.html',       enabled: true
    });
  } else {
    // Disables the sidebar when at other sites     await chrome.sidePanel.setOptions({       tabId,
      enabled: false
    });
  } });When a user switches to a tab or site for which the sidebar is not enabled, the sidebar is hidden.
Known issue: The sidebar is not automatically displayed again when the user switches to a tab in which the sidebar was previously open (Issue #142
For a complete example, see Site-specific side panel example	.
Enable the extension's shortcut icon to open the sidebar
To allow users to open the sidebar by clicking the action toolbar icon, use sidePanel.setPanelBehavior(). First, declare the "action" key in manifest.json:
JSON{
  "name": "My sidebar extension",
  ...
   "action": {
    "default_title": "Click to open sidebar"
  },   ...
}Then, add the following code to the service-worker.js code listing that's in Enable a sidebar for a specific site only, above:
JavaScript// Allow users to open the sidebar by clicking the action toolbar icon chrome.sidePanel
  .setPanelBehavior({ openPanelOnActionClick: true })
  .catch((error) => console.error(error));Switch to a different sidebar
An extension can use sidepanel.getOptions() to retrieve the current sidebar, and then enable a different sidebar for a specific tab.
This example sets a sidebar containing a welcome message on runtime.onInstalled(). When the user navigates to a different tab, the sidebar is replaced with the browserlevel sidebar.
JavaScript// service-worker.js: const welcomePage = 'sidebar/welcome-sb.html'; const mainPage = 'sidebar/main-sb.html';chrome.runtime.onInstalled.addListener(() => {   chrome.sidePanel.setOptions({ path: welcomePage });
});
chrome.tabs.onActivated.addListener(async ({ tabId }) => {   const { path } = await chrome.sidePanel.getOptions({ tabId });   if (path === welcomePage) {     chrome.sidePanel.setOptions({ path: mainPage });
  } });Opening the sidebar upon user interaction
sidePanel.open() allows extensions to open the sidebar through a user gesture, such as clicking the action icon, or through any user interaction on an extension page or content script, such as clicking a button.
The following code shows how to open a global sidebar on the current window when the user clicks on a context menu. When using sidePanel.open(), choose the context in which the sidebar should open:
Use windowId to open a global sidebar, as shown in the following example.
Or, set the tabId to open the sidebar only on a specific tab.
JavaScript// service-worker.js: chrome.runtime.onInstalled.addListener(() => {   chrome.contextMenus.create({     id: 'openSidePanel',     title: 'Open sidebar',     contexts: ['all']
  }); });
chrome.contextMenus.onClicked.addListener((info, tab) => {   if (info.menuItemId === 'openSidePanel') {
    // Open the sidebar in all the tabs of the current window.
    chrome.sidePanel.open({ windowId: tab.windowId });
  } });Sidebar extensions user experience
Develop an extension for the Microsoft Edge sidebar have these user experience (UX) features.
Opening the extension in the sidebar
There are several ways for the user to open the extension in the sidebar:
By clicking an icon
Users can click the Open in sidebar icon (), which is displayed next to the extension's name in the Extensions hub:

Or, users can click the extension's custom icon in the toolbar, if it's enabled. This user experience requires that the extension has enabled the shortcut icon to open the sidebar, as described in Enable the extension's shortcut icon to open the sidebar, above.
In this example, the extension's custom icon is a circle ():

By right-clicking the extension's icon
Users can right-click the extension's icon in the toolbar, and then select Open in sidebar or Close sidebar:


The extension's icon appears in the toolbar if the user has clicked the Show in toolbar ( ) icon next to the extension's name in the Extensions hub.
By pressing a keyboard shortcut
Users can press a keyboard shortcut, if the action command is enabled and the action icon is enabled to open the sidebar.
 To enable the action command, see Action commands in chrome.commands in API reference.
 To enable the action icon, see Open the side panel by clicking the toolbar icon in chrome.sidePanel in API reference.
If the openPanelOnActionClick() property of the PanelBehavior type is set to true, the user can open the sidebar by using a keyboard shortcut. To enable this, you specify an action command in the manifest.
Open through a gesture
The sidebar can also be opened through the following interactions:
 Open the sidebar by an extension user gesture, such as clicking the action icon. This approach uses sidePanel.open(). See Opening the sidebar upon user interaction, above.
 Open the sidebar by clicking the toolbar icon. This approach uses sidePanel.setPanelBehavior(). See By clicking an icon in section "Opening the extension in the sidebar", above.
Extension samples
For more Sidebar API extensions demos, explore any of the following extensions:
Dictionary side panel example
Global side panel example
Multiple side panels example
Opening the side panel through a user interaction
Site-specific side panel example
Types and methods
See Types	 and Methods	 in the chrome.sidePanel API reference page at developer.chrome.com.
See also


Feedback
Was this page helpful?  Yes  No

Native messaging
Article • 01/18/2024
To communicate with a native Win32 app that's installed on a user's device, an extension uses an API that's similar to the other message passing APIs. The native app host sends and receives messages with extensions using standard input and standard output.
Extensions that use native messaging are installed in Microsoft Edge similar to any other extension. However, native apps aren't installed or managed by Microsoft Edge.
To acquire the extension and native app host, there are two different distribution models:
 Package your extension and the host together. When a user installs the package, both the extension and the host are installed.
 Or, install your extension using the Microsoft Edge Add-ons website, and your extension prompts users to install the host.
To create your extension to send and receive messages with native app hosts, do the following steps.
Step 1: Add permissions to the extension manifest
Add the nativeMessaging permission to the manifest.json file of the extension.
This is the extension manifest file, not the native messaging host manifest file, which is covered in later sections.
The following is an example manifest.json file:

        }
    },
    "icons": {
        "128": "icon-128.png"
    },
    "permissions": ["nativeMessaging"]
}Step 2: Create your native messaging host manifest file
Native apps must provide a native messaging host manifest file. A native messaging host manifest file contains the following information:
The path to the native messaging host runtime.
The method of communication with the extension.
A list of allowed extensions to which it communicates.
The browser reads and validates the native messaging host manifest. The browser doesn't install or manage the native messaging host manifest file.
The native messaging host manifest file is distinct from the Manifest V3 or V2 file that is part of the Microsoft Edge extension.
Example of a native messaging host manifest file:
JSON{
    "name": "com.my_company.my_app",
    "description": "My App",
    "path": "C:\\Program Files\\My App\\chrome_native_messaging_host.exe",
    "type": "stdio",
    "allowed_origins": [
        "chrome-extension://knldjmfmopnpolahpmmgbagdohdnhkik/"
    ]
}The native messaging host manifest file must be a valid JSON file that contains the following keys:
ﾉ Expand table
KeyDetailsnameSpecifies the name of the native messaging host. Clients pass the string to runtime.connectNative or runtime.sendNativeMessage.
The value must only contain lowercase alphanumeric characters, underscores, and dots.
The value must not start or end with a dot (a period), and a dot must not be followed by another dot.descriptionDescribes the app.pathSpecifies the path to the native messaging host binary.
On Windows devices, you can use relative paths to the directory that contains the native messaging host manifest file.
On macOS and Linux, the path must be absolute.
The host process starts with the current directory set to the directory that contains the host binary. For example (Windows), if the parameter is set to
C:\App\nm_host.exe, the binary is started using the current directory (C:\App\).typeSpecifies the type of the interface used to communicate with the native messaging host. The value instructs Microsoft Edge to use stdin and stdout to communicate with the host. The only acceptable value is stdio.allowed_originsSpecifies the list of extensions that have access to the native messaging host. To turn on your app to identify and communicate with an extension, in your native messaging host manifest file, set the following value:
"allowed_origins": ["chromeextension://{microsoft_catalog_extension_id}"]Sideload your extension to test native messaging with the host. To sideload your extension during development and retrieve microsoft_catalog_extension_id:
1. Go to edge://extensions, and then turn on the Developer mode toggle button.
2. Select Load unpacked, and then select your extension package to sideload.
3. Click OK.
4. Go to the edge://extensions page and verify that your extension is listed.
5. Copy the key from microsoft_catalog_extension_id (ID) from the extension listing on the page.
When you're ready to distribute your extension to users, publish your extension to the Microsoft Edge Add-ons website. The extension ID of the published extension might differ from the ID that's used while sideloading your extension. If the ID changed, update allowed_origins in the native messaging host manifest file with the ID of your published extension.
Step 3: Copy the native messaging host manifest file to your system
The final step involves copying the native messaging host manifest file to your computer, and making sure that this manifest file is correctly configured. To ensure your native messaging host manifest file is placed in the expected location, do the following steps. The location varies by platform.
On Linux and macOS:
 Make sure that you provide read permissions on the native messaging host manifest file.

shellWindows Registry Editor Version 5.00 [HKEY_CURRENT_USER\Software\Microsoft\Edge\NativeMessagingHost s\com.my_company.my_app]
@="C:\\path\\to\\nmh-manifest.json"OutputHKEY_CURRENT_USER\SOFTWARE\Microsoft\Edge\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\Chromium\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\Google\Chrome\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Edge\NativeMessagingHo sts\ HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Chromium\NativeMessagingHosts\ HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Google\Chrome\NativeMessagingHos ts\
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Edge\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\Chromium\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\Google\Chrome\NativeMessagingHosts\2. Run the .reg file. If you run your created .reg file as part of a batch script, make sure you run it using an administrator command prompt.
Microsoft Edge queries the HKEY_CURRENT_USER root key, followed by
HKEY_LOCAL_MACHINE. In both of the keys, the 32-bit registry is searched first, and then the 64-bit registry is searched to identify native messaging hosts. The registry key specifies the location of the native messaging host manifest file.
If the registry entries for Microsoft Edge don't have the location of the native messaging host manifest file, the Chromium and Chrome registry locations are used as fallback options.
If Microsoft Edge finds the registry key at any of the previously listed locations, it doesn't query the locations that are listed in the following code snippet.
The search order for the registry locations is:
WOW6432Node registry node
The HKEY_CURRENT_USER\SOFTWARE\WOW6432Node registry node is not searched on 64bit machines, due to the way the registry works on them. For more information, see Registry Keys Affected by Windows Installations That Include Windows on Windows (WOW) Support For Multiple Processor Architectures.
Extension IDs required for both stores
If you have extensions on the Microsoft Edge Add-ons and the Chrome Web Store, you must add the extension IDs corresponding to both the stores in the
allowed_origins of the native messaging host manifest file. This is required
because only the native messaging host manifest file that corresponds to the first registry location found is read.Native messaging protocol
Microsoft Edge starts each native messaging host in a separate process and communicates with it using standard input (stdin) and standard output (stdout). The same format is used to send messages in both directions; each message is serialized using JSON, UTF-8 encoded and is preceded with 32-bit message length in native byte order. The maximum size of a single message from the native messaging host is 1 MB, mainly to protect Microsoft Edge from misbehaving native applications. The maximum size of the message sent to the native messaging host is 4 GB.
The first argument to the native messaging host is the origin of the caller, usually chrome-extension://[ID of allowed extension]. This allows native messaging hosts to
identify the source of the message when multiple extensions are specified in the allowed_origins key in the native messaging host manifest; see Step 2: Create your
native messaging host manifest file, above.
On Windows, the native messaging host is also passed a command line argument with a handle to the calling Microsoft Edge native window: --parent-window=<decimal handle value>. This lets the native messaging host create native UI windows that are correctly parented. Note that this value will be 0 if the calling context is a service worker.
When a messaging port is created by using runtime.connectNative, Microsoft Edge starts a native messaging host process and keeps it running until the port is destroyed. On the other hand, when a message is sent by using runtime.sendNativeMessage, without creating a messaging port, Microsoft Edge starts a new native messaging host process for each message. In that case, the first message that's generated by the host process is handled as a response to the original request, and Microsoft Edge will pass it to the response callback specified when runtime.sendNativeMessage is called. All other messages generated by the native messaging host in that case are ignored.
Connecting to a native application
Sending and receiving messages to and from a native application is very similar to cross-extension messaging. The main difference is that runtime.connectNative is used instead of runtime.connect , and runtime.sendNativeMessage is used instead of runtime.sendMessage .
To use these methods, the nativeMessaging permission must be declared in your extensions's manifest file; see Step 1: Add permissions to the extension manifest, above.
These methods are not available inside content scripts, only inside your extension's pages and service worker. If you want to communicate from a content script to the native application, send the message to your service worker to pass it along to the native application.
The following example creates a runtime.Port	 object that's connected to native messaging host com.my_company.my_application, starts listening for messages from that port and sends one outgoing message:
JavaScriptvar port = chrome.runtime.connectNative('com.my_company.my_application'); port.onMessage.addListener(function (msg) {   console.log('Received' + msg);
}); port.onDisconnect.addListener(function () {   console.log('Disconnected');
}); port.postMessage({text: 'Hello, my_application'});Use runtime.sendNativeMessage to send a message to the native application without creating a port; for example:
JavaScriptchrome.runtime.sendNativeMessage(
  'com.my_company.my_application',
  {text: 'Hello'},   function (response) {     console.log('Received ' + response);
  }
);Debugging native messaging
When certain native messaging failures occur, output is written to the error log of
Microsoft Edge. This includes when the native messaging host fails to start, writes to stderr or violates the communication protocol. On Linux and macOS, this log can easily
be accessed by starting Microsoft Edge from the command line and watching its output in the terminal. On Windows, use --enable-logging as explained at How to enable logging.
Here are some common errors and tips for solving them:
Failed to start native messaging host.
Check whether you have sufficient permissions to execute the native messaging host file.
Invalid native messaging host name specified.
Check whether the name contains invalid characters. Only lowercase alphanumeric characters, underscores, and dots (periods) are allowed. A name cannot start or end with a dot, and a dot cannot be followed by another dot.
Native host has exited.
The pipe to the native messaging host was broken before the message was read by Microsoft Edge. This is most likely initiated from your native messaging host.
Specified native messaging host not found.
Check the following:
Is the name spelled correctly in the extension and in the manifest file?
Is the manifest in the right directory and with the correct name? See native messaging host location for the expected formats.
 Is the manifest file in the correct format? In particular, is the JSON valid and wellformed, and do the values match the definition of a native messaging host manifest, per Step 2: Create your native messaging host manifest file above?
 Does the file specified in path exist? On Windows, paths may be relative, but on macOS and Linux, the paths must be absolute.
Native messaging host host name is not registered. (Windows-only)
The native messaging host was not found in the Windows registry. Double-check using regedit whether the key was really created and matches the required format as
documented at native messaging host location.
Access to the specified native messaging host is forbidden.
Is the extension's origin listed in allowed_origins?
Error when communicating with the native messaging host.
This indicates an incorrect implementation of the communication protocol in the native messaging host.
 Make sure that all output in stdout adheres to the native messaging protocol. If you want to print some data for debugging purposes, write to stderr.
 Make sure that the 32-bit message length is in the platform's native integer format (little-endian or big-endian).
The message length must not exceed 1024*1024.
The message size must be equal to the number of bytes in the message. This may differ from the "length" of a string, because characters may be represented by multiple bytes.
 Windows-only: Make sure that the program's I/O mode is set to O_BINARY. By default, the I/O mode is O_TEXT, which corrupts the message format as line breaks (\n = 0A) are replaced with Windows-style line endings (\r\n = 0D 0A). The I/O mode can be set by using __setmode.

Defining match patterns for an extension to access file URLs
Article • 01/14/2023
A Microsoft Edge Add-on (extension) can request access to file URLs. To enable this feature, you need to explicitly configure this access. Access to file URLs isn't automatic.
You must visit the Extensions management page at the Microsoft Edge Add-ons website to opt into file access for each Microsoft Edge extension that requests access to file URLs.
For Microsoft Edge Add-ons (extensions), host permission and content script pattern matching works as follows.
Host permissions and content script matching are based on a set of URLs defined by match patterns. A match pattern is essentially a URL that begins with a permitted scheme (http, https, file, or ftp, and that can contain '*' characters. The special pattern <all_urls> matches any URL that starts with a permitted scheme. Each match pattern has 3 parts:
scheme - for example, http or file or *
_host_ - for example, www.google.com or *.google.com or *; if the scheme is file, there is no host part.
_path_ - for example, /*, /foo*, or /foo/bar. The path must be present in a host permission, but is always treated as /*.
Basic syntax
The basic syntax:
shell<url-pattern> := <scheme>://<host><path>
<scheme> := '*' | 'http' | 'https' | 'file' | 'ftp'
<host> := '*' | '*.' <any char except '/' and '*'>+
<path> := '/' <any chars>The meaning of * depends on whether it is in the scheme, host, or path part. If the scheme is *, then it matches either http or https, and not file, or ftp. If the host is just *, then it matches any host. If the host is *.hostname, then it matches the specified host or any of the subdomains. In the path section, each * matches 0 or more characters. The following table shows some valid patterns.
Examples of valid patterns
ﾉ Expand table
PatternWhat it doesExamples of matching URLshttp://*/*Matches any URL that uses the http schemehttp://www.google.com http://example.org/foo/bar.htmlhttp://*/foo*Matches any URL that uses the http scheme, on any host, as long as the path starts with /foohttp://example.com/foo/bar.html http://www.google.com/foohttps://*.google.com/foo*barMatches any URL that uses the https scheme, is on a google.com host
(such as www.google.com, docs.google.com, or google.com), as long as
the path starts with /foo and ends with barhttps://www.google.com/foo/baz/bar https://docs.google.com/foobarhttp://example.org/foo/bar.htmlMatches the specified
URLhttp://example.org/foo/bar.htmlfile:///foo*Matches any local file whose path starts with
/foofile:///foo/bar.html file:///foohttp://127.0.0.1/*Matches any URL that uses the http scheme and is on the host
127.0.0.1http://127.0.0.1
http://127.0.0.1/foo/bar.html*://mail.google.com/*Matches any URL that starts with http://mail.google.com
or https://mail.google.com.http://mail.google.com/foo/baz/bar https://mail.google.com/foobar<all_urls>Matches any URL that uses a permitted scheme.
(See the beginning ofhttp://example.org/foo/bar.html file:///bar/baz.htmlPatternWhat it doesExamples of matching URLsthis section for the list of permitted schemes.)Examples of invalid patterns
Here are some examples of _invalid_ pattern matches:
ﾉ Expand table
Bad patternWhy it is badhttp://www.foo.comNo _path_http://*foo/bar'*' in the host can be followed only by a '.' or '/'http://foo.*.bar/bazIf '*' is in the _host_, it must be the first characterhttp:/barMissing _scheme_ separator ('/' should be "//")foo://*Invalid _scheme_Some schemes aren't supported in all contexts.


App Developer Agreement Addendum for Microsoft Edge program users
Article • 09/05/2024
Exhibit G: Terms and Conditions for Microsoft Edge Extensions
These Terms and Conditions for Microsoft Edge Extensions (the "Extensions Addendum") is a supplement to the terms and conditions of the Microsoft Store App Developer Agreement. This Addendum applies if you have submitted or are making available Microsoft Edge Extensions (each, an "Extension") through Microsoft Edge Add-ons. Except as expressly modified by this Extensions Addendum, all of the terms and conditions in the App Developer Agreement, which is incorporated by reference herein, apply to the offering and distribution of your Microsoft Edge Extensions. Except where expressly modified by this Addendum, the terms and conditions that apply to an "Application" or "App" under the App Developer Agreement will apply to an Extension as defined in this Addendum and all references to "Store" or "Microsoft Store" under the App Developer Agreement will apply to Microsoft Edge Add-ons as defined in this Addendum.
1. DEFINITIONS. Capitalized terms not defined herein will have the meanings provided in the App Developer Agreement.
a. "Certification Requirements" means the technical, functional, content, and other policy requirements at Developer policies for the Microsoft Edge Add-ons store.
b. "Microsoft Edge Add-ons" means a Microsoft owned or operated platform, however named, through which Microsoft Edge Extensions may be offered to or acquired by Customers.
2. SUBMISSION, CERTIFICATION, AND DISTRIBUTION OF APPS. Section 3 of the App
Developer Agreement (SUBMISSION, EVALUATION, CERTIFICATION, AND
DISTRIBUTION OF APPS) is hereby deleted and replaced by the following:
a. Submission. You must submit to Microsoft each Extension that you wish to make available through Microsoft Edge Add-ons, including any updates to each Extension. You are solely responsible and liable for the Extensions you submit. You are responsible for supporting your extension. Microsoft will retain (or destroy) all copies of the Extension and other materials you submit. Microsoft will not return them, so you must maintain your own backup copies.
b. Updates to Extensions. You may submit updates to Extensions for Certification and distribution through Microsoft Edge Add-ons. Those updates are subject to all of the requirements of this Agreement. You understand that end users may receive updates automatically. You may not add any new functionality to your Extension via an update which requires written consent from the Customer without first providing notice to the Customer and obtaining any consents as may be required by law in the markets where you choose to distribute your Extension.
c. Initial Certification. Microsoft will test each Extension (including any updates) you submit for compliance with this Agreement (which includes the applicable Certification Requirements) and other policies made available to you (if any). Microsoft will not make any Extension available through Microsoft Edge Addons unless and until the Extension is Certified.
3. APP PRICING, PAYMENTS, TRANSACTIONS AND TAXES. Section 6 of the App Developer Agreement (APP PRICING, PAYMENTS, TRANSACTIONS AND TAXES) does not apply to Extensions and is hereby deleted in its entirety.

Developer policies for the Microsoft Edge Add-ons store
Article • 12/30/2024
To develop an extension to be published through the Microsoft Edge Add-ons store, follow these policies. These policies apply to submitting extensions through Partner Center and publishing the extensions at the Microsoft Edge Add-ons store.
The Microsoft Edge Add-ons store is also called the Edge Add-ons store, the Microsoft Edge Add-ons website, or the Edge Add-ons website.
Principles
The following principles are reflected in these developer policies:
 Offer unique and distinct value within your extension for Microsoft Edge. Provide a compelling reason to download your extension from the Microsoft Edge Add-ons store.
 Do not mislead users about what your extension does, who is offering it, and so on.
 Do not attempt to cheat users, the system, or the ecosystem. There is no place in Microsoft Edge Add-ons for any kind of fraud; be it ratings and review manipulation, credit card fraud, or other fraudulent activity.
Adhering to these policies for the Microsoft Edge Add-ons store helps you make choices that enhance the appeal and audience of your extension.
Building quality products
Microsoft is committed to delivering quality products to its customers. Therefore, extensions which don't follow the quality guidelines aren't allowed, such as:
Content deemed not family-friendly.
Bots: Any extension that automatically generates spam-like or unsolicited messages on the user's behalf, or that performs automated actions to manipulate a platform's features, such as artificially inflating engagement metrics.
 Cryptocurrency: Crypto mining and any other illegitimate activities that involve crypto wallets and currency.
 Non-production builds: For example, an extension that's still in an experimental stage, that's prone to crashes or instability, or that's designed for internal testing purposes only and not intended for public release.
 Prohibited products: An extension that promotes or facilitates the sale of illegal drugs, firearms, or counterfeit goods would be considered a prohibited product, and any extension that violates intellectual property rights, such as offering pirated software or copyrighted content without authorization, would be restricted.
 Gambling content.
1. Product policies
1.1 Distinct function and value; accurate representation
Your extension and associated metadata must accurately and clearly reflect the source, functionality, and features that you describe.
1.1.1 Extensions must have a single purpose
Your extension must have a single purpose with narrow functionality. For example, your extension cannot function as a simple calculator and as a code remote scanner simultaneously.
1.1.2 Describe your extension
All aspects of your extension should accurately describe the functions, features and any important limitations of your extension, including required or supported input devices.
The value proposition of your extension must be clear during the first run experience. Your extension may not use a name or icon similar to that of other extensions, must not reference other browsers, and must not claim to represent a company, government body, or other entity if you don't have permission to make that representation.
If screenshots are provided, they must:
Be clear and informative.
Render properly; for example, must not be stretched or blurry.
All functionality of an extension should be clearly disclosed to the user. Any extension that attempts to deceive or mislead users will be removed from the store.
1.1.3 Functionality
Your extension must be fully functional, as in, there should not be any blockers, including but not limited to, broken URLs or blocked webpage links.
1.1.4 Search and discovery
Search terms may not exceed seven unique terms, and should be relevant to your extension.
1.1.5 Provide appropriate details
There should be distinct and informative details about your extension and its functionality in the listing (metadata) for your extension.
1.1.6 Stability and performance
You must ensure that your extension is stable and does not cause the browser to freeze or crash.
In general, the extension cannot interfere with the normal functioning of the browser or operating system.
1.1.7 Obfuscation
Extensions with obfuscated code aren't allowed. This includes code within your extension package, as well as any external code or resource fetched from the web. You may be asked to refactor parts of your code, if it is not reviewable.
1.1.8 Altering browser settings
Your extension must not, without appropriate user consent, alter, or appear to alter, browser functionality or settings including, but not limited to: the address bar search provider and suggestions, the start or home page, the new tab page, and adding or removing favorites.
Any changes made to the device settings must be done with the user's knowledge and consent, and must be easily reversible by the user.
Any alteration of browser settings, such as new tabs and search engines, should be mentioned in the listing or description, and such alterations should use standard APIs to achieve that functionality. They must not override default settings without user permission.
1.2 Security
Extensions must declare all permissions that are required for their functionality in the manifest. Your extension must only request those permissions that are essential for functioning.
Any declarativeNetRequest rules must be clearly declared within the extension, and should not be imported remotely unless necessary for functionality.
Extensions must not collect or track sensitive user information without clear consent, and must clearly state any user data handling in their privacy policy. User-sensitive data must be encrypted by using proper mechanisms such as SSL, and must not be transported via insecure channels.
Extensions must not promote deceptive installation of other extensions.
Bulk submissions of extensions with the same functionality and code are not allowed.
Extensions should not exploit security vulnerabilities of other extensions or applications, and must keep authentication information secure.
Extensions that function as crypto wallets can only be published by verified company accounts.
In general, your extension must not jeopardize or compromise user security, or the security or functionality of the device, system, or related systems.
1.2.1 Content security policies
If you make any changes to your extension beyond the described functionality, any changes to code must be compliant with the Content Security Policy for Microsoft Edge extensions; see Using Content Security Policy (CSP) to control which resources can be run. For example, your extension should not download a remote script and subsequently run that script in a manner that is not consistent with the described functionality.
1.2.2 Unwanted and malicious software
Submitting an extension that contains malware is strictly prohibited. Your extension must not contain or enable malware that may harm the operation of the network, servers, and infrastructure of Microsoft or any third parties. Spyware, malicious scripts, and phishing scams are also prohibited.
You must ensure that your extension is free from any malicious code, to maintain the integrity and security of the Microsoft Edge ecosystem. Your extension must comply with the Microsoft criteria for unwanted and malicious software, listed in How Microsoft identifies malware and potentially unwanted applications.
If an extension is found to contain malware, the account will immediately be suspended. If you believe your account has been wrongly suspended, please contact the support team at ext_dev_support@microsoft.com to raise an appeal request within 7 days. Any request received after 7 days of account suspension will not be considered. All decisions made during the appeal process are final, and no further requests will be considered.
1.2.3 Dependency on other software
Your extension may depend on non-integrated software (such as another product, module, or service) to deliver the primary functionality. However, this information should be clearly disclosed in the description.
1.2.4 Extension updates
Unless otherwise permitted by Microsoft, your extension must be updated only through Partner Center and the Edge Add-ons store.
1.3 Product is testable
Your extension must be fully testable, and all the steps required for testing the product must be provided at the time of submission.
1.3.1 User credentials
If your extension requires login credentials, then provide a test account and credentials or provide a clear and reasonable explanation as to why test credentials cannot be provided for the extension in the Submission Options > Notes for certification.
1.3.2 Availability of services
If your extension requires access to a server, the server must be functional, to verify that the extension works correctly.
1.4 Usability
Your extension must meet Microsoft Edge Add-ons store standards for usability, including, but not limited to, those listed in the subsections below.
1.4.1 Compatibility across platforms
Your extension should be compatible with Microsoft Edge on all the devices and platforms on which it may be downloaded. If an extension is downloaded on a device with which it is not compatible, it should detect that at launch, and display a message to the user detailing the requirements that devices must meet in order to be compatible with the extension.
1.4.2 User experience
Your extension must start up promptly, and must stay responsive to user input. It must also shut down gracefully, and not close unexpectedly.
1.5 Personal information
The following requirements apply to extensions that access personal information. Personal information includes all information or data that identifies or could be used to identify a person, or that is associated with such information or data.
1.5.1 Collect personal information only when necessary
Your extension may collect, access, use, or transmit personal information (including web browsing activity) only if required by and only for use in a prominently disclosed, userfacing feature.
You must clearly state the data handling practices of your extension at the time of installation, including any transfer or use of user data.
You must obtain explicit prior consent from the user before any merger, acquisition, or sale of your assets that may involve the transfer of user data.
You must obtain explicit prior consent from the user and have a clear policy before accessing and providing the user with re-access information when the user has lost their password for the product or service.
You must have a clear and comprehensive privacy policy that outlines your data handling practices, including the use of any third-party services.
1.5.2 Maintain a privacy policy
Your privacy policy must describe the controls that users have over the use and sharing of their information, how they access their information, and it must comply with applicable laws and regulations. Your privacy policy must be kept up-to-date as you add new features and functionality to your extension.
The privacy policy provided should be relevant to the product and should not use the Microsoft privacy statement unless the extension is an official Microsoft extension. Additionally, the privacy policy should primarily refer to the Microsoft Edge browser and not other browsers. Any data that's collected should be aggregated and anonymized, and must used in accordance with applicable privacy and other jurisdictional legal requirements.
If you provide Microsoft with your privacy policy, then you agree to permit Microsoft to share such privacy policy with users of your extension.
1.5.3 Sharing data with third parties
You may publish the personal information of users of your extension to an outside service or third-party through your extension or associated metadata only after obtaining opt-in consent from those users. Opt-in consent means the users give their express permission in the user interface of your extension for the requested activity, after you:
 Describe to your users how the information is accessed, used or shared and indicate the types of parties to whom it is disclosed.
 Provide your users a mechanism in your extension user interface through which they have the option to later rescind the permission and opt-out.
1.5.4 Sharing information of non-users
If you publish a person's personal information to an outside service or third-party through your extension or the metadata, but the person whose information is being shared is not a user of your extension:
1. You must obtain express written consent to publish that personal information.
2. You must permit the person whose information is shared to withdraw that consent at any time.
3. Your privacy policy must clearly disclose that you may collect personal information in this manner.
4. If required by applicable law you must delete the personal information of any individual upon request, including individuals whose information you collect in this manner.
5. If your extension provides users with access to another person's personal information, this requirement also applies.
1.5.5 Transmit information securely
Your extension must only use modern and secure cryptography methods to collect, store, or transmit personal information.
You must not publicly disclose any financial or payment information related to your extension or its users.
You must not publicly disclose any authentication information related to your extension or its users.
In the event of a security breach involving financial or payment information or authentication information, you must immediately inform affected users and entities, including applicable authorities, and must also take necessary steps to address the breach.
1.5.6 Highly sensitive information
Your extension must not collect, store, or transmit highly sensitive personal information, such as health or financial data, unless the information is related to the functionality of your extension. Your extension must also obtain express user consent before collecting, storing, or transmitting such information.
1.6 Permissions
Your extension must only request those permissions that are necessary for functioning and may not request permission for functionalities that go beyond the capabilities required to perform and function as declared.
Requesting permissions or features solely for the purpose of "future proofing" is not allowed.
1.7 Localization
You should localize your extension for all languages that your extension claims to support. The text of the description of your extension should be localized in each language that you declare.
If your extension is localized such that some features aren't available in a localized version, you must clearly state or display the limits of localization in your extension description. The experience provided by an Extension must be reasonably similar in all languages that it supports.
1.8 Financial transactions
If your product includes in-product purchase, subscriptions, virtual currency, billing functionality, or captures financial information; the requirements in the following sections apply.
1.8.1 Paid features
You must use a secure third-party purchase API for purchases of physical goods or services.
You must use a secure third-party purchase API for payments made in connection with any other services including real-world gambling or charitable contributions. However, you must comply with any applicable laws or regulations regarding your services.
You must clearly and honestly describe the type of products you sell and clearly and honestly post the terms of sale.
If your extension is used to facilitate or collect charitable contributions or to conduct promotional sweepstakes or contests, then you must do so in compliance with any applicable laws and regulations.
You must also state clearly and prominently that Microsoft is not the fundraiser or sponsor of the promotion.
In-product offerings sold in your extension must not be converted to any legally valid currency (such as USD, Euro, and so on) or any physical goods or services.
1.8.2 Disclosing paid features
Your extension and associated metadata must clearly provide information about the types of in-product purchases offered and the range of prices. You must not mislead users and must be clear about the nature of your in-product promotions and offerings including the scope and terms of any trial experiences.
If your extension restricts access to user-created content during or after a trial, then you must notify users in every step of the process.
In addition, your extension must make it clear to users that they are initiating a purchase option in your extension.
1.9 Notifications
Your extension must respect system settings for notifications. Any presentation of ads and notifications to users must be consistent with user preferences, regardless of whether the notifications are provided by the Microsoft Push Notification Service (MPNS), Windows Push Notification Service (WNS), or any other service.
If the user disables notifications, either on a product-specific or system-wide basis, then your extension must adhere to the user's notification settings and remain functional even though notifications may be disabled.
Also, you'll be receiving notifications related to your accounts, including but not limited to, login attempts, account changes, and security alerts. To ensure the security of your accounts and the add-ons you submit, verify your accounts through a secure and approved method.
1.9.1 General guidance
Notifications provided through WNS or MPNS are considered product content, and are subject to all developer policies for the Microsoft Edge Add-ons store.
1.9.2 Ownership of notifications
You must not obscure or try to disguise the source of any notification initiated from your extension.
1.9.3 No confidential or sensitive information
You must not include in a notification any information users may reasonably consider confidential or sensitive.
1.9.4 Purpose of notifications
Notifications sent from your extension must relate to that extension or to other extensions you publish in the Microsoft Edge Add-ons store, and must not include promotional messages of any kind that aren't related to your extension.
1.10 Advertising conduct and content
For all advertising related activities, the following requirements apply:
1.10.1 Purpose
The primary content of your extension must not be advertising, and your extension should not bundle other extension offers within the same flow.
Users should not be misled to click on advertisements to fully use the extension.
1.10.2 Policies and agreements
Any ad content that's displayed by your extension must conform to the following:
Microsoft Advertising policies and agreements.
The advertising requirements of the Microsoft Store App Developer Agreement.
The advertising requirements of the developer policies for the Microsoft Edge Add-ons store.
1.10.3 Quality of advertising
The primary purpose of your extension must not be to get users to click ads.
Your extension must not do anything that interferes with or diminishes the visibility, value, or quality of any ads that it does display.
1.10.4 Promotions
If you purchase or create promotional ad campaigns to promote your extension through the ad campaign functionality in Partner Center, all ad materials you provide to Microsoft, including any associated landing pages, must comply with Creative specs and other Microsoft Advertising policies and agreements.
1.10.5 Notifying users of opt-out for interest-based advertising
Your privacy statement or terms of use must let users know you plan to send personal information to the ad service provider and must tell users how they may opt-out of interest-based advertising.
1.10.6 Other guidelines
If your extension is directed at children under the age of 13, as defined in the Children's Online Privacy Protection Act; you must notify Microsoft of this fact in Partner Center and ensure that all ad content displayed in your extension is appropriate for children under the age of 13.
2. Content policies
The following policies apply to content and metadata offered for distribution in Microsoft Edge Add-ons.
Content means the images, sounds, videos, and text contained in your extension; the tiles, notifications, error messages, or ads exposed through your extension; and anything delivered from a server, or anything to which your extension connects.
Metadata includes publisher name, extension name, extension icon, extension description, extension screenshots, extension trailers and trailer thumbnails, and any other extension metadata.
Because extensions and Microsoft Edge Add-ons are used around the world, these requirements are interpreted and applied in the context of regional and cultural norms.
2.1 Content requirements
For your extension to be listed in the Microsoft Edge Add-ons store, your extension and metadata you submit should not contain mature, explicit, or otherwise inappropriate content.
This includes content that is:
Discriminatory, hateful, or offensive.
Harmful or dangerous.
Misleading or fraudulent.
Spam or malware.
Examples of specific types of content that would be considered inappropriate for Edge Add-ons include:
Pornography or nudity.
Hate speech or symbols.
Violence or gore. Drugs or alcohol.
Gambling.
Illegal activities.
Misleading or fraudulent claims.
Spam or malware.
The above list of inappropriate content is not exhaustive. The Microsoft Edge Add-ons store may reject or remove any extension that they deem to be inappropriate, even if it does not violate any specific policy.
An extension that doesn't meet the requirements for Microsoft Edge Add-ons store listings may be rejected or promptly removed.
2.2 Content including names, logos, and original and third-party content
All content in your extension and associated metadata must be originally created by you or appropriately licensed from a rights holder and must be used only as permitted by the rights holder or as otherwise permitted by law.
The content must reference Microsoft trademarks only to the extent necessary, and should not modify or alter the trademarks in any way.
If not created or appropriately licensed, a disclaimer should be added stating the same.
2.3 Risk of harm
2.3.1 Requirements
Your extension must not contain any content that facilitates or glamorizes the following real world activities: (a) extreme or gratuitous violence; (b) human rights violations; (c) the creation of illegal weapons; or (d) the use of weapons against a person, animal, or real or personal property.
2.3.2 Responsibility
Your extension must not: (a) pose a safety risk to, nor result in discomfort, injury or any other harm to end users or to any other person or animal; or (b) pose a risk of or result in damage to real or personal property. You are solely responsible for all extension safety testing, certificate acquisition, and implementation of any appropriate feature safeguards.
You must not disable any platform safety or comfort features and you must include all applicable legally required and industry-standard warnings, notices, and disclaimers in your extension.
2.4 Defamatory, libelous, slanderous, or threatening
Your extension must not contain content that is defamatory, libellous, slanderous, threatening, or that promotes extremism such as the use of violence.
2.5 Offensive content
Your extension and associated metadata must not contain potentially sensitive or offensive content.
Content may be considered sensitive or offensive in certain countries/regions because of local laws, regulations, or cultural norms.
In addition, your extension and associated metadata must not contain content that advocates discrimination, hatred, or violence based on sensitive circumstances, such considerations of race, ethnicity, national origin, language, gender, age, disability, religion, sexual orientation, status as a veteran, or membership in any other social group.
2.6 Alcohol, tobacco, and drugs
Your extension and associated data must not contain any content that facilitates or glamorizes excessive or irresponsible use of alcohol or tobacco products or drugs.
2.7 Adult content
Your extension and associated data must not contain or display content that a reasonable person would consider pornographic or sexually explicit.
For example, content is not allowed that contains nudity, graphic sex acts, or sexually explicit material, or that drives traffic to a pornography site.
2.8 Prohibited content, services, and activity Your extension must adhere to the following conditions:
 Your extension must not contain content or provide services that facilitate online gambling.
 Online gambling includes but is not limited to online casinos, sports betting, lotteries, or games of skill that offer prizes of cash or other value.
 Your extension must not provide unauthorized access to website content, such as by circumventing paywalls or login restrictions.
 Your extension must not provide, encourage, or enable the unauthorized access, download, or streaming of copyrighted content or media.
 Your extension must not mine cryptocurrency.
Extensions manipulating, cheating, or exploiting Microsoft systems, causing revenue loss, or extensions engaging in fraudulent activities, are strictly prohibited.
This prohibition applies to all developers, partners, and third parties. Non-compliance may result in extension removal and account suspension or termination.
Your extension must adhere to applicable laws and regulations, Microsoft's terms of service, and applicable privacy policies. Microsoft reserves the right to review extensions for compliance and to promptly remove any noncompliant extension.
2.9 Illegal activity
Your extension and the associated data must not contain content or functionality that encourages, facilitates, or glamorizes illegal activity in the real world.
2.10 Excessive profanity and inappropriate content
Your extension must not contain excessive or gratuitous profanity.
Your extension must not contain or display content that a reasonable person considers obscene.
2.11 Country- or region-specific requirements
Content that is offensive in any country or region to which your extension is targeted is not allowed. Content may be considered offensive in certain countries or regions because of local laws or cultural norms.
2.12 Age ratings
2.12.1 Mature content
When you submit your extension to Partner Center, you must indicate whether your extension displays content that should be marked "Mature". When determining the rating for your extension, consider all the content in your app, including user generated content and ads, and to the content that your extension links. If you indicate that your extension doesn't contain any "Mature" content, you are responsible for maintaining the accuracy of this rating.
Regardless of the rating given to your extension, it must still adhere to all the content requirements of the Microsoft Edge Add-ons store developer policies.
2.12.2 Ratings change
If your extension provides content (such as user-generated, retail, or other web-based content) that might be appropriate for a higher age rating than the assigned rating, you must require users to opt into receiving such content by using a content filter or by signing in with a pre-existing account.
2.13 Videos
If you submit a promotional video in the listing, it should strictly adhere to these content policies.
Complaint and appeal process for Microsoft Edge Add-ons certification
All extensions must adhere to the store policies listed above. If your extension failed in the review process, review the store policies to understand the reason for failure. After submitting your extension using Partner Center, to ask a question about the review or certification status of it, go to New Support Request and complete the form.
Appeal statistics for Microsoft Edge Add-ons for FY2024
ﾉ Expand table
StatisticCountApp and/or account enforcement action appeals50Complaints about technological issues17StatisticCountRegulatory compliance complaints0Questions about certification, policy, submission, and technical help173Miscellaneous358Total issues261Overturned decisions52Average processing time1.88 daysThese numbers were reported on July 2, 2024.

Register as a Microsoft Edge extension developer
Article • 11/13/2023
If you're new to Partner Center, this article will help you create a Partner Center account that you can use to submit Microsoft Edge extensions to the Microsoft Edge Add-ons website. This article covers company accounts (for enterprise developers), and individual accounts (for individual developers), as described in Account types below.
If you have a Partner Center account, but the Primary Owner of the account isn't a
Microsoft account (MSA), this article will help you create and link to a suitable account. You'll learn how to create a Microsoft account (MSA) if you don't have one, and help you link the Microsoft account (MSA) to your Partner Center account.
To add and manage users in the Microsoft Edge program to manage extensions, you can associate your Partner Center account with your organization's Microsoft Entra tenant.
Types of accounts related to publishing Microsoft Edge extensions
ﾉ Expand table
Type of accountDescriptionMicrosoft account
(MSA)An Outlook.com, Live.com, or Hotmail.com account.GitHub accountA user account at GitHub.com. You can use your personal GitHub account to sign in to Partner Center-a Microsoft account (MSA) will be created for you.Partner Center account, Partner Center developer accountA Partner Center account is an account on partner.microsoft.com. To submit Microsoft Edge extensions, you need a Partner Center developer account, which is a Partner Center account that has a Microsoft account (MSA) as the Primary Owner.Microsoft Edge
Program accountEnables multiple users to work with Microsoft Edge extensions at Partner Center.Microsoft Entra IDA Microsoft Entra ID account.Type of accountDescriptionMicrosoft Entra tenantA tenant represents an organization. A tenant is a dedicated instance of Microsoft Entra ID that an organization or app developer receives at the beginning of a relationship with Microsoft.Create a Microsoft account
To submit an extension to the Microsoft Edge Add-ons website, you must be registered as a developer with the Microsoft Edge program. You register for the Microsoft Edge program at Partner Center. To register for the Microsoft Edge program, you need a Microsoft account (MSA). If you don't have a Microsoft account (MSA), create one. One way to create a Microsoft account (MSA) is to use your existing GitHub account to sign in to Partner Center. Follow the prompts displayed in the dialogs to automatically create a Microsoft account (MSA).
There is no registration fee for submitting extensions to the Microsoft Edge program.
If you don't have a Partner Center account, or you have a Partner Center account but its Primary Owner isn't a Microsoft account (MSA), you must either:
 Use an existing Microsoft account (MSA) to register with the Microsoft Edge program.
 Create a new Microsoft account (MSA). A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account.
To create a Microsoft account (MSA):
1. Decide if you want to use your existing GitHub account to create a Microsoft account (MSA). See Register and sign in to Partner Center using a GitHub account.
2. If you aren't using your GitHub account to create the Microsoft account (MSA), see account.microsoft.com.
3. Select Create a Microsoft account.
4. Complete the registration steps.
If you have a Partner Center account for which the Primary Owner is a Microsoft account (MSA), use that Microsoft account (MSA) to sign into your Partner Center account. Then enroll in the Microsoft Edge program.
Note: The Microsoft Edge program doesn't currently support registering with a work or school account. You must register using a Microsoft account (MSA) and then link your Microsoft Entra tenants with that account, to be able to manage extensions.
Enroll in the Microsoft Edge program on Partner Center
1. Navigate to the Partner Center developer login page, and then select Partner Center.
2. If you have a Microsoft account (MSA), use it to sign into Partner Center. A
Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account. Then fill in the Microsoft Edge program registration form, using the registration form in the next section.
3. If you don't have a Microsoft account (MSA), either create a new Microsoft account (MSA) directly, or sign in to Partner Center by using your GitHub account using the next step. The Partner Center account must have a Primary Owner that's a Microsoft account (MSA). If you want to sign in to Partner Center using your existing personal GitHub account, open Register and sign in to Partner Center using a GitHub account in a new tab or window, and follow the steps in the article.
Your GitHub account will be linked to an automatically created Microsoft account (MSA) whose credentials you can use to register for the Microsoft Edge program.
4. After you sign in, a registration form is displayed, to enroll in the Microsoft Edge program. To help you fill in the registration form, see the next section.
5. Before submitting your registration form, read and accept the terms and conditions of the Microsoft Store App Developer Agreement.
6. To complete your enrollment, select Finish.
Filling in the registration form
Fill in the fields of the registration form as follows.
Account country/region
This field is either where you live, or where your business is located.

Account types
The Microsoft Edge program in Partner Center offers both individual and company accounts. The accounts are described in detail in the following sections. Both account types enable you to publish extensions to the Microsoft Edge Add-ons website.

Individual account
An individual account is appropriate for a developer not associated with a company. The account verification process is shorter and involves verifying that the publisher display name is available.
Company account
A company account is associated with an organization or business. The account verification process is longer and involves confirmation that you're authorized to create the account for your company. The duration of the process can range from a few days to a few weeks. Your company might receive phone calls from Microsoft verification partners.
For a company account, it's crucial to verify your Microsoft Edge program information when you enroll into a new Partner Center program. This verification is needed to publish extensions to the Microsoft Edge Add-ons store. See Verify your company account information.
Publisher display name
This field contains the name that's displayed in the Microsoft Edge Add-ons website. To use a particular name, that name must be available, and you must have the rights to use it. Company accounts must use the registered business name of your organization.
The maximum length for this field is fifty (50) characters.
Contact details
This field contains any contact information that Microsoft uses to contact you about any account issues. After registration is complete, you receive an email confirmation. For a company account, you must use the registered email address associated with your organization.
Company approver
For a company account, you must provide the contact information of your company approver. The contact information includes name, email address, and phone number. As a part of the verification process, Microsoft contacts the specified company approver, to make sure that your extension belongs to your organization.
Next steps
To display your verification status, go to Partner Center and then select Account settings. Continue to build, test, and prepare your submissions while you wait for the verification process to complete.
Publish an extension
Extension concepts and architecture
Add users to the Microsoft Edge program - Add more users to your Microsoft Edge program and your Partner Center developer account. To enable adding users, you associate your organization's Microsoft Entra ID account with your Microsoft account (MSA) on Partner Center.
See also
 Quickstart: Set up a tenant - General information about Microsoft Entra tenants, in the Microsoft Entra documentation.

Feedback
Was this page helpful?  Yes  No
Verify your company account information
Article • 09/12/2024
Before using this article, do the steps in Register as a Microsoft Edge extension developer, for a company account rather than for an individual account. Information specifically about company accounts starts in the Account types section within that article.
When you enroll in the Microsoft Edge program on Partner Center to publish extensions or change legal details in your profile, Microsoft verifies the information that you provide. This information can include your company name, company address, and primary contact details. During the verification process, Microsoft might send email to your primary contact to request confirmation of the information that was provided.
You can go to Legal info in Partner Center to monitor verification status for the Microsoft Edge Developer program.
When account verification is complete, you can use your Partner Center dashboard to publish your extension to the Microsoft Edge Add-ons website.
Verification usually takes three to five business days. If more than five days have passed, you can Contact the Microsoft Edge extensions team for help.
What is verified and what is required for a company account?
This section describes the types of verification, what is verified, and suggestions for meeting verification requirements.
Verify Email ownership
Email ownership verifies that the primary contact (primary email) address is valid.
 The primary contact email address must be a work account that is monitored and can send and receive email.
 Don't use a personal email address. You must use an email address associated with a company domain, such as <alias>@contoso.com.
 Don't use a tenant user credential that's not associated with email, such as <alias>@contoso on microsoft.com.
Suggestions
Be sure to flag email from Microsoft.com as a safe domain, and check your junk email folders.
If you don't receive the email ownership verification email message within one business day, you can ask us to send the email again. On to your Partner Center account, go to Home > Account settings. On the Account settings | My profile page, select Resend verification email.
Verify Employment
Employment verification confirms that your primary contact is an employee of the enrolling company and that the domain entered in the registration form belongs to the enrolling company. The following information is used to verify employment:
 The company's public website has the same domain that was entered in the registration form.
 The contact has an active email address on an email domain owned by the company.
Suggestions
For verification proof, you can submit a screenshot of the website showing the name, address, contact information, and domain of the organization.
If employment verification is rejected, or if the domain of the registered email isn't the same as the employer's public domain, you must provide documentation confirming your email domain is under the ownership of your employer, in the form of:
Assignment letter from an authorized representative of the organization.
Domain ownership records, such as whois.
Domain purchase invoices or registry confirmation records.
Verify Business
Business verification confirms that the enrolling company is a legitimate business entity and at the address in the application.
Suggestions
Submit one of the following documents for business verification:
Formation documents, such as articles of incorporation, or partnership deed.
Franchise or agency appointment letters.
Government issued letter, license, business registration, or tax registration certificate.
Lease or tenancy documents.
Letter or statement from a financial institution or a utility company.
Record on a Government registry website. The site/link must be displayed.
Stock exchange filings or tax filing records.
External company databases, such as Dun & Bradstreet (DUNS ID) or state registry. Receipt from the company's home country/region, municipality.
Confirm that the company name and address in your Legal business profile don't have spelling errors or abbreviations. They must match your formal company business registration records exactly. If appropriate, select the match found in external company databases, such as Dun & Bradstreet (DUNS ID) or state registry.
Microsoft uses these documents to verify that the company is authorized to do business under that name, and that it's located at the address that was provided. For further assistance, go to your profile page to upload more proofs through the interactive vetting experience. For more information, see Checking your verification status.
Checking your verification status
You can check verification status at Partner Center in Account Settings | Legal Info, where you can see:
1. One or more tabs such as Partner, Developer, or Reseller, depending on the programs in which your organization is enrolled.
2. The Developer tab includes the Account details progress bar showing the stages of verification and any pending stages.
3. Your verification status: Pending, Authorized/Accepted, or Action
Required/Rejected, with a status icon. For more information, see Verification status.
4. The Legal business profile progress bar with an information icon you can select to get more information.
5. A Fix now button to start resolving verification issues.
Verification status
There are three possible results when you check your verification status:
 Authorized/Accepted: The information you submitted was verified, and you're notified of your acceptance into the program. No further action is required.
 Pending: The verification process has started but isn't complete. If you've completed the email verification step, no further action is required on your part. Verification usually takes three to five business days. You can monitor verification status at Account Settings | Legal Info.
 Action Required/Rejected: The information you submitted couldn't be verified. The reason, and instructions for how to appeal, appear in the Account Verification pane. See Appealing a rejected application in the next section.
Appealing a rejected application
Use the following steps to appeal a rejected application:
1. At Account Settings | Legal Info, select Fix now.
2. In Account Verification, from Select document type to upload, select the type of document that you want to upload for verification.
3. In Enter your comment, you can enter more information about your appeal.
4. Select Upload.
The amount of time required to review an appeal varies. You can return to Account
Settings | Legal Info to check verification status at any time. Verification status is Pending during the review.

Switching back to an individual account from an enterprise account isn't possible.
Refer to the documentation to make an informed decision.
Next steps
To view your verification status, go to Partner Center and then select Account settings. You can keep building, testing, and preparing your submissions while you wait for the verification process to finish. Review the following extension documents:
 Extension concepts and architecture - Gives an overview of extensions and basic publishing information.
 Publish an extension - Provides detailed information and steps for publishing an extension.
 Add users to the Microsoft Edge program - Describes how to add more users to your Microsoft Edge program and your Partner Center developer account. To enable adding users, you associate your organization's Microsoft Entra ID account with your Microsoft account (MSA) on Partner Center.

Feedback
Was this page helpful?  Yes  No
Add users to the Microsoft Edge program
Article • 11/13/2023
To help manage your Microsoft Edge extensions, you can add more users to an existing Partner Center account. To manage Microsoft Edge extensions, the Primary Owner of the Partner Center account must be a Microsoft account (MSA).
A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account. For a summary of the types of accounts used to publish extensions, see Types of accounts related to publishing Microsoft Edge extensions.
Making sure you have a Partner Center account
with a Microsoft account (MSA) as the Primary Owner
To create a Partner Center account that can publish Microsoft Edge extensions, you must have a Microsoft account (MSA), either by creating one directly or by using your personal GitHub account credentials.
After your Partner Center account is able to publish Microsoft Edge extensions, you can link the Partner Center account to an Microsoft Entra tenant. A linked Microsoft Entra tenant enables the added users to sign in to your Partner Center developer account by using their work accounts.
Different programs on Partner Center require different types of accounts:
 The Microsoft Edge program (like the Windows developer program) requires a
Partner Center developer account. A Partner Center developer account has a Primary Owner that's a Microsoft account (MSA).
 In contrast, Azure marketplace requires a Partner Center commercial account. (To enroll, the user has to log in with their work account.)
Also see these articles in the Partner Center documentation:
Manage your Partner Center account
Microsoft Partner Network membership benefits
Step 1: Enroll in the Microsoft Edge program on
Partner Center
First, determine whether you have a Partner Center account. If you have a Partner Center account, determine whether the Primary Owner is a Microsoft Account (MSA), which is required for joining the Microsoft Edge program, to manage Microsoft Edge extensions.
Then follow the steps in the section that applies to your type of Partner Center account.
If you don't have a Partner Center account
1. Use a Microsoft account (MSA) to register with the Microsoft Edge program, by following the steps in the article Register as a Microsoft Edge extension developer.
As mentioned in that article, you can use your GitHub account to create a Microsoft account (MSA).
Next, do Step 2: Associate Microsoft Entra ID with your Microsoft Edge Program account below.
If the Primary Owner of your Partner Center account isn't a
Microsoft account (MSA)
For a Partner Center account to manage Microsoft Edge extensions, the Primary Owner of the Partner Center account must be a Microsoft account (MSA).
To determine whether the Primary Owner of your Partner Center account is a Microsoft account (MSA):
1. Use the Microsoft account (MSA) which corresponds with your Partner Center commercial account to sign in to your Partner Center commercial account.
2. Navigate to Account settings > User management at Partner Center.
3. Check whether the Primary Owner of the Partner Center account is a Microsoft account (MSA). If the Primary Owner isn't a Microsoft account (MSA), that means that this is a Partner Center commercial account rather than a Partner Center developer account.
4. Use a personal Microsoft account (MSA) (not a work Microsoft account (MSA) or a school Microsoft account (MSA)) to register with the Microsoft Edge program, by following the steps in Register as a Microsoft Edge extension developer.
Next, go to Step 2: Associate Microsoft Entra ID with your Microsoft Edge Program account below.
If the Primary Owner of your Partner Center account is a Microsoft account (MSA)
1. If you're already signed in to Partner Center using your work Microsoft account (MSA), sign out. The Microsoft Edge program on Partner Center doesn't support enrolling by using a work Microsoft account (MSA) or a school Microsoft account (MSA).
2. Use the Microsoft account (MSA) that corresponds with your Partner Center developer account to sign in to your Partner Center developer account.
3. Go to Account settings > User management at Partner Center.
4. Find out who is the Primary Owner of the Partner Center developer account.
5. Verify that the Primary Owner of the Partner Center developer account is a Microsoft account (MSA) user. The Primary Owner must not be a work Microsoft account (MSA) or a school Microsoft account (MSA).
6. Have the Primary Owner of the Partner Center developer account register for the Microsoft Edge program by following the steps in Register as a Microsoft Edge extension developer.
Next, go to Step 2: Associate Microsoft Entra ID with your Microsoft Edge Program account.
Step 2: Associate Microsoft Entra ID with your Microsoft Edge Program account
To enable managing Microsoft Edge extensions, you'll link your Microsoft Entra tenants to your Microsoft Edge Program account. You can use Microsoft Entra ID to add users to your Microsoft Edge Program account and manage those users in that account. You can add individual users, groups of users, or Microsoft Entra ID applications.
To be able to add users to your Microsoft Edge Program account, and to manage the users in that account, you must first associate your Microsoft Edge Program account with your organization's Microsoft Entra tenant. If your organization already uses Office 365 or other business services from Microsoft, you already have a Microsoft Entra tenant. Otherwise, you can create a new Microsoft Entra tenant for free.
To create an AD tenant, see Create a new Microsoft Entra tenant to associate with your Partner Center account.
Also see Associate an existing Microsoft Entra tenant with your Partner Center account, in the Windows UWP documentation. Associating a Microsoft Entra tenant with a Microsoft Edge Program account at Partner Center works the same way as associating a tenant with the Windows apps developer program.
） Important
If you added users after associating your Microsoft Entra tenant with your Microsoft account on Partner Center, note that changing user roles or permissions isn't currently supported. However, you can continue to add as many users as you require and use the filter option of the user management	 section to locate admins of specific roles.
Step 3: Add users, groups, and Microsoft Entra
ID applications to your account
After you've set up the Microsoft Entra ID association, you can add users at Account settings > User management on the Partner Center. Each user has full access the extensions available in the program. You can also add groups of users, or add Microsoft Entra ID applications, to grant them access to your Partner Center account.
For more information about adding users, see Users, groups, and applications in Microsoft Entra ID in the Windows UWP documentation.
Contact us
If you need help or assistance with associating your Microsoft Entra ID account or other related queries, Contact the Microsoft Edge extensions team.
See also
 Quickstart: Set up a tenant - General information about Microsoft Entra tenants in the Microsoft Entra ID documentation.

Feedback
Was this page helpful?  Yes  No

Register and sign in to Partner Center using a GitHub account
Article • 02/26/2024
If you're a GitHub user, you don't need to create a new Microsoft account (MSA) and remember extra passwords to sign into Partner Center. You can use your personal GitHub credentials to sign into Partner Center and publish your Microsoft Edge extensions to the Microsoft Edge Add-ons website.
Currently, you can only use your personal GitHub account to login to Partner Center.
Using your work GitHub account isn't supported.
A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account. This article covers several types of accounts. For a summary of these accounts, see Types of accounts related to publishing Microsoft Edge extensions.
To begin submitting extensions by using GitHub, register for the Microsoft Edge program in Partner Center using your GitHub credentials. A Microsoft account (MSA) will be created for you automatically if necessary.
Step 1: Go to Partner Center to sign in
Go to the Partner Center dashboard. You'll be taken to the Sign-in page, with an option to sign in with your Microsoft account (MSA).
Step 2: Select "Sign-in options" to view alternative sign-in options
Select Sign-in options at the bottom of the page, and then select Sign in with GitHub. Enter your GitHub account credentials that you want to use to publish Microsoft Edge extensions.
Step 3: Authorize Microsoft to access your GitHub account
Microsoft requires your permission to access your GitHub account. Select Authorize Microsoft-corp.
Step 4: Microsoft links your GitHub credentials with your Microsoft account (MSA)
Microsoft checks whether your GitHub account is already linked to a Microsoft account (MSA). If your GitHub account isn't linked to a Microsoft account (MSA), Microsoft will create a new Microsoft account (MSA) and link it to your GitHub credentials.
Step 5: Register for Microsoft Edge Program on Partner Center using the newly linked GitHub account
After your GitHub account is linked to a Microsoft account, you can start using your GitHub account to register as a Microsoft Edge extension developer to publish extensions free of charge. See Register as a Microsoft Edge extension developer.
After you're registered for the Microsoft Edge program, you can port your Chrome extensions to Microsoft Edge. To help manage your Microsoft Edge extensions, you can add more users to the Partner Center account by linking a Microsoft Entra ID account with your Partner Center account. See Add users to the Microsoft Edge program.
Contact us
Let us know if this article was helpful or if you have any feedback. For help with signing into Partner Center using GitHub or other related questions, see Contact the Microsoft Edge extensions team.
See also
 Publish a Microsoft Edge extension

Feedback
Was this page helpful? 

Manage account settings
Article • 11/09/2022
Manage your account settings and profile details for your Microsoft Edge Developer account at Partner Center.
Account settings
To display your account settings, select the gear icon (Settings) in the upper right-hand corner of Partner Center and then select Developer settings. In Developer settings, you can review and update the following information.
Review information about your account.
Links to other pages to review information.
Edit your account information.
In the Account details section, review the type of your account and its status. Your Seller ID and other publisher ID information is also displayed in the Account details section. These values are assigned by Microsoft to uniquely identify your developer account and are read-only.
Contact Details
The Contact info section displays the details you provided when you created your account. The Microsoft Edge extension team uses the contact details information to contact you about your account. The publisher name displayed in the Microsoft Edge Add-ons website is also displayed in the Contact info section.
If your contact information changes you can edit the Contact info section. Select Update, make your changes, and then select Save. You can also select Contact info in the left navigation menu to open the Contact info section.
If you change any of your contact details, the Microsoft Edge extension team might verify your account again, especially if you have a company account. Your extension verification status returns to Pending while the review is in process. The verification process ranges from a few days to a couple of weeks, and your company might receive a phone call from our verification partner.
Other settings
Review the following settings in the Account settings section.
ﾉ Expand table
Account
SettingsDescriptionVerification statusReview your verification status when your account is going through the verification process. For example, your account is verified when you first create an account, or after you update your contact information.ProgramsReview information about enrolled programs or other programs that might be of interest to you.AgreementsReview the agreements that your account accepted.
Publish a Microsoft Edge extension
Article • 01/09/2025
After you develop and test your Microsoft Edge extension, you're ready to distribute your extension. Use the Microsoft Edge Add-ons website to distribute your extension. To release your existing Chromium extension for Microsoft Edge users, see Port a Chrome extension to Microsoft Edge.
Publish your extension to the Microsoft Edge Add-ons website to increase its reach and make it available to other Microsoft Edge users. This article provides the process to submit your extension to the Microsoft Edge Add-ons website.
Prepare an extension to be submitted via Partner Center
To prepare an extension to be submitted via Partner Center, to be published at the Microsoft Edge Add-ons site, do the following steps.
Have a working prototype of your extension
Before publishing your extension, you should have a working prototype of your extension ready. For information on how to create an extension, see Extension concepts and architecture.
Create a developer account
To publish your extension to the Microsoft Edge Add-ons website, use your active developer account on Partner Center. If you don't have a developer account, create a new developer account. To open a new developer account and register to the Microsoft Edge Add-ons program, see Developer registration.
Create a zip file for your extension package
Create a zip file for your extension package. Your extension package must include the following files:
 The extension manifest that specifies details such as the name of the extension, short description, permissions, and default language.
 Images and other files required by your extension.
Review manifest field values
Before uploading your package to Partner Center, inspect the manifest file to make sure that the field values match your preferred display on the Store Listings page, as follows.
The following fields in the manifest file are automatically included in your store listing details. The fields are read-only on the Store Listings page, which is described below.
The Name field, which populates the Display name on the store details page.
The Description field, which populates the Short description on the store details page.
Fill in the Description field, to explicitly provide a catchy description that will be displayed at the top of the listing for your extension.
 If you include a short description in the extension manifest file, that short description is displayed in your store listing.
 If you don't include a short description in the manifest file, the first few lines of the Description are displayed in your store listing. We recommend providing a short description, to avoid content repetition on your store listing page.
Later, after you upload your package, you'll have an opportunity to modify some fields at Partner Center.
Submit your extension to the Microsoft Edge
Add-ons website
After doing the above steps, the extension is ready to be submitted via Partner Center, to be published at the Microsoft Edge Add-ons site.
To submit your extension to Partner Center:
Step 1: Start a new submission.
Step 2: Upload the extension package.
Step 3: Provide availability details.
Step 4: Enter properties describing your extension.
Step 5: Add store listing details for your extension.
Step 6: Complete the submission by providing testing notes.
Details are below.
Step 1: Start a new submission
1. Go to the developer dashboard.
The Partner Center Overview page opens:

2. Click Create new extension.
Step 2: Upload the extension package
The Extension overview page shows information for a specific extension:

To upload the extension package:
1. On the left, click Packages. The Packages page opens.
You can only upload one package at a time. Your submission is blocked if the package upload isn't successful on the Packages page.
2. To upload your package, drag and drop the zip file to the Drag your package here (.zip) section of the page. Or you can select Browse your files to open a dialog to select the package to upload.
After your package is uploaded, it's validated. If there's a validation error, resolve the issue and try uploading your package again.
3. When validation succeeds, review the extension details.
4. Click the Continue button.
The Availability page opens.
Step 3: Provide availability details
On the Availability page for the extension, fill in the Visibility and Markets sections as follows.

Visibility
Select one of the following visibility options to define whether your extension is discoverable in the Microsoft Edge Add-ons website:
Public (default) - Allows everyone to discover your extension through search, browsing in the Microsoft Edge Add-ons website, or using the listing URL to your extension in the Microsoft Edge Add-ons website. The listing URL is available on your Partner Center dashboard on the Extension Overview page.
Hidden - Removes extensions from search results or browsing in the Microsoft Edge Add-ons website. To distribute hidden extensions in the Microsoft Edge Addons website, you must share the listing URL to the extension with your customers.
You can change the visibility of your extension from Public to Hidden. Users who installed your extension while the visibility was set to Public retain access to your extension and receive any updates you make available through the Microsoft Edge Addons website.
Markets
Define the specific markets in which you plan to offer your extension. The default setting for markets is all markets and that includes any future markets that are added later.
1. To choose specific markets, click the Change markets button.
2. Toggle individual markets to exclude each one or select Unselect all and then add individual markets of your choice.
You can change the markets where your extension is offered. A user who installs your extension while it's available in the user's market retains access to your extension. However, the user doesn't have access to any future updates that are submitted to the Microsoft Edge Add-ons website.
3. Click the Save & Continue button.
The Properties page opens.
Step 4: Enter properties describing your extension
1. On the left, click Properties.
The Properties page for the extension opens.
2. Enter the following information:
ﾉ Expand table
Property nameRequired?DescriptionCategoryRequiredThe category that best describes your extension. Listing your extension in the right category helps users find your extension easily and understand more about it.Privacy policy requirementsRequiredIndicate if your extension accesses, collects, or transmits any personal information. Your extension might fail the certification step if you select Yes and you don't provide a Privacy policy URL.Property nameRequired?DescriptionPrivacy policy
URL-A valid privacy policy URL to communicate how your extension follows privacy laws and regulations. You're responsible for ensuring your extension follows privacy laws and regulations. You're also responsible for providing a privacy policy URL if any personal information is being accessed, transmitted, or collected by your extension. To determine if your extension requires a privacy policy, see Microsoft Store App Developer Agreement and Developer policies for the Microsoft Edge Add-ons store.Website URL-A webpage that provides additional information about your extension. The Website URL must point to a webpage on your own website, not the web listing for your extension in the Microsoft Edge Add-ons website. The Website URL helps users learn more about your extension, its features, and any other relevant information.Support contact details-The URL to your support webpage, or the email address to contact your support team.Mature content-Checkbox to specify if your extension includes mature content. Extension rating helps determine the appropriate age group of the target audience of your extension. To help determine if your extension has mature content, see
Developer policies for the Microsoft Edge Add-ons store.Properties that are not indicated as Required are Optional.
The properties are displayed to users at the Microsoft Edge Add-ons website. Your developer/organization name, Website URL, and Support contact details that you submitted during registration are displayed to users on the Microsoft Edge Addons website.
3. Click the Save & Continue button.
The Store Listings page opens.
Step 5: Add store listing details for your extension
1. On the left, click Store listings.
The Store Listings page opens:

2. Click the Edit details button.
3. In the Language details section, fill in the following properties:
ﾉ Expand table
Property nameRequired?DescriptionDisplay nameRequired for at least one languageThe name of your extension specified in the manifest file of your extension. To change the store display name after submission, you can update the name in the manifest file, create a new extension package, and then re-upload it.DescriptionRequired for each languageThe description field explains what your extension does, why users should install it, and any other relevant information users need to know.
* Length: Minimum 250 characters, maximum 5000 characters.
* Clarity: Must clearly describe the full functionality of your extension.
* Completeness: Should be thorough and include all important details.
* Appropriateness: Must not contain any misleading or inappropriate content.Extension
Store logoRequired for each languageAn image that represents your company or extension logo with an aspect ratio of 1, and recommended size of 300 x 300 pixels. You can copy the asset from one language to all other languages by using the Duplicate button, which is displayed next to this field after you upload your logo for the language.Property nameRequired?DescriptionSmall promotional
tile-The Small promotional tile image is used to display your extension alongside other extensions in the store. The size of the image should be 440 x 280 pixels. You can copy the asset from one language to all other languages by using the Duplicate button. The button is found following the field after you upload a promotional tile for the language.Large promotional
tile-Large promotion tiles are used in the store to feature extensions more prominently in the Microsoft Edge Addons website. The images, if submitted, are visible to the users. The size of the PNG files must be 1400 x 560 pixels. You can copy the asset from one language to all other languages by using the Duplicate button. The button is found following the field after you upload a promotional tile for the language.Screenshots-You can submit a maximum of 10 screenshots describing the functionality of your extension in detail. The size of the screenshots must be either 640 x 480 pixels or 1280 x 800 pixels. You can copy the asset from one language to all other languages by using the Duplicate button. The button is found following the field after you upload at least one for the language.YouTube video URL-You can include a promotional YouTube video of your extension. The YouTube video URL video is displayed on the store listing page of your extension.Short descriptionRequired for at least one languageTo edit the short description, you must update the description field in your manifest file of your extension package and reupload it.Search terms-Search terms are single words or phrases that help discover your extension when a user searches in the Microsoft Edge Add-ons website. The search terms aren't displayed to users.The information provided in the Store Listings page is displayed to users who view your listing on the Microsoft Edge Add-ons website. Even though some fields are optional, you should provide as much information as possible.
Required properties
To list your extension in the store, properties that are not indicated as Required in the above table are Optional.
The following Required properties must be provided for each language (such as U.S.
English; en-US) that's listed in your extension zip package:
Description
Extension Store logo
The following Required properties must be filled in for at least one of the languages that's listed in your extension zip package:
Display name
Short description
Supporting multiple languages
To support multiple languages, you can use the internationalization API (chrome.i18n).
To add or remove languages in your store listing on the Microsoft Edge Add-ons website, use the Add a language dropdown list on the Store Listings page:

You can duplicate your assets from one language across other languages by using the Duplicate functionality button on the Language details page.
YouTube video URL requirements
Fill in required fields in the Details for English (United States) page, scrolling down as needed:

If you are linking to a video, make sure your video meets the following requirements.
 Verify that the content of the YouTube video follows the Developer policies for the Microsoft Edge Add-ons store.
 Turn off advertisements on your video. For more information, see YouTube advertising formats and Ads on embedded videos.
To submit the YouTube video URL of your video:
1. On YouTube, locate the video that you want to add to your store listing page.
2. Under the video, click the Share button, and then click the Copy button to copy the URL for the video.
3. On the store listing details page, paste the URL in the YouTube video URL field:

Search terms requirements
1. In the Details for English (United States) page (or equivalent language/market page), in the Search terms text box, enter search terms:

Search terms must meet the following requirements:
 You can enter search terms to use up to a maximum of 21 words. Whether used as single words, phrases, or a combination of both, you're only allowed a maximum of 21 words.
 Up to a maximum of seven search terms (single word or phrases). Each search term has a character limit of 30 characters.
2. Click the Close button.
The Store listing page reappears.
Step 6: Complete the submission by providing testing notes
On the Submit your extension page, you can optionally add notes for certification to help test your extension. When you submit your extension, use the Notes for certification text box to provide additional information to the certification testers. The additional information helps ensure that your extension is tested correctly. If your extension isn't fully tested, it might fail certification.
To add notes for certification:
1. Click the Submit button.
The Submit your extension page opens:

2. Fill in the Notes for certification text box.
You can compose and save your notes in a text editor, such as Visual Studio Code, and then paste the notes into the text box. Include any needed information, such as:
Usernames and passwords for test accounts.
Steps to access hidden or locked features.
Expected differences in functionality based on region or other user settings.
If your submission is an update to an existing extension, include information about the changes made to the extension.
 Any additional information that testers must understand about your submission.
3. Click the Publish button, in the upper right.
Your extension is submitted to the Microsoft Edge Add-ons website.
Your submission then proceeds to the certification step. The certification process can take up to seven business days after your submission.
After your submission passes certification, your extension is published in the Microsoft Edge Add-ons website. The status of your extension in the Partner Center dashboard changes to In the Store.
Support for issues
If you encounter any issues in the submission or registration process, file a support ticket on Extensions New Support Request or send an email to ext_dev_support@microsoft.com.
See also
Port a Chrome extension to Microsoft Edge
Extension concepts and architecture Developer registration
Partner Center:
 Partner Center developer dashboard
Edge Add-ons website:
 Microsoft Edge Add-ons website
Developer Agreement & Legal:
Microsoft Store App Developer Agreement
Developer policies for the Microsoft Edge Add-ons store
Support.microsoft.com:
 Extensions New Support Request
Support.google.com:
YouTube advertising formats Ads on embedded videos
Extensions Reference:

Feedback
Was this page helpful?  Yes  No

Extension hosting
Article • 12/19/2023
Most extensions are published to the Microsoft Edge Add-ons website, to protect users from malicious extensions.
Publish options for extensions
All extensions are distributed to users as a special archive (.zip) file with a .crx suffix.
Extensions published to the Microsoft Edge Add-ons website are uploaded as .zip files. The publishing process automatically converts the .zip file into a .crx file.
The following two scenarios don't require you to publish your extension in the Microsoft Edge Add-ons website:
Extensions that are distributed using Enterprise policy.
Using unpacked extension directories on a local machine when Microsoft Edge is in developer mode.
In both cases, Microsoft Edge periodically checks extension hosts for new versions of installed extensions and automatically updates them without user intervention.
Submission states for extensions in the Microsoft Edge Add-ons website
Article • 11/05/2022
The overview page on the Partner Center displays the state of your extension in the overall submission flow. This article describes the different states your extension can be in at any time during the submission and certification process.
ﾉ Expand table
#StateDetails1In draftYou create your submission and save a draft to your account. You haven't submitted your extension package and your submission form details to publish to the Microsoft Edge Add-ons website. Your extension isn't available to users in this state.2In reviewYou've submitted your extension. Your extension package and your submission form details are reviewed by Microsoft. Your extension isn't available to users in this state.3Waiting to publishYour submission is in this state after your extension review is complete, and your extension is being prepared for publishing in the Microsoft Edge Add-ons website. This state is an intermediate state between In review and In the store. This state might not appear for all submissions.4In the storeThe review is now complete, and your extension is published on the
Microsoft Edge Add-ons website. Your extension is available on the Microsoft Edge Add-ons website in the markets that you specified.5In the store. Update in reviewYour extension is published to the Microsoft Edge Add-ons website and you've submitted an update that is under review by Microsoft.6Review failedYour submission is in this state if your extension fails a review. A failed review might occur during the initial review or during an update. You need to take corrective action and resubmit your extension.7Unavailable in storeThere are three possible scenarios when your extension displays this state: Unpublished from store, Removed from store, and Blocked. The description of each of the three states is specified in 8, 9, and 10.8Unpublished from storeYou unpublished your extension from the Microsoft Edge Add-ons website in Partner Center. In Partner Center, you chose unpublish on the extension submission page. After unpublishing your extension, it's no longer available in the Microsoft Edge Add-ons website for new users to
#StateDetailsdownload, but existing users can continue to use their copies of your extension.9Removed from storeIf your extension is found to violate the terms and conditions of Microsoft Edge Add-ons website, Microsoft might remove it from the Microsoft Edge Add-ons website, and the state then changes to this state.
After removal of your extension by Microsoft, your extension is no longer available on Microsoft Edge Add-ons website for new users to download, but existing users can continue to use their copies of your extension.10BlockedIf your extension is found to be malicious and compromises the security and privacy of users, Microsoft has the right to block your extension from the Microsoft Edge Add-ons website, and the state changes to this state. If your extension is blocked, it's removed from the Microsoft Edge Add-ons website and from all user devices.
Alternative ways to distribute an extension
Article • 09/24/2024
Generally, extensions are distributed through the Microsoft Edge Add-ons website. There are some scenarios where developers may need to distribute extensions using alternate methods. For example:
1. The extension is associated with other software, and it should be installed together with the rest of the bundled software.
2. Network administrators want to distribute an extension throughout their organization.
Extensions that aren't loaded from the Edge Add-ons store are referred to as externally installed extensions. The following are alternate methods of distributing externally installed extensions:
Use the Windows registry (Windows only).
Use a preferences JSON file (macOS and Linux).
These approaches are described below.
See also:
 Set an externally installed extension to automatically update
Gather initial information
Make sure that you publish your extension in the Microsoft Edge Add-ons website, or package a .crx file and ensure that it installs successfully on your computer. If you install the .crx file using the update_url, make sure you can go to your extension at that URL.
Also, make sure that you have the following information:
The file path of the .crx file, or the update_url of your extension.
The version of your extension. The version information is available in your manifest file, or in Microsoft Edge at edge://extensions after you load the packed extension.
The ID of your extension. The ID information is available in Microsoft Edge at edge://extensions after you load the packed extension.
The following examples use 1.0 as the version, and aaaaaaaabbbbbbbbccccccccdddddddd for the ID.
Using the Windows registry (Windows only)
To distribute your extension using the Windows registry:
1. Find or create the following key in the registry:
32-bit Windows: HKEY_LOCAL_MACHINE\Software\Microsoft\Edge\Extensions 64-bit Windows:
HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Edge\Extensions
2. Create a new key, or folder, under Extensions with the same name as the ID of your extension. For example, create the key with the name
aaaaaaaabbbbbbbbccccccccdddddddd.
3. In the Extensions key, create the update_url property, and set the value to https://edge.microsoft.com/extensionwebstorebase/v1/crx. The update_url
property points to the .crx file of your extension in the Microsoft Edge Add-ons website.
JSON{
    "update_url": 
"https://edge.microsoft.com/extensionwebstorebase/v1/crx"
}If you want to install an extension from the Chrome Web Store, set the value of update_url to https://clients2.google.com/service/update2/crx.
4. In Microsoft Edge, go to edge://extensions, and then verify that your extension is listed.
Using a preferences JSON file (macOS and
Linux)
To distribute your extension by using a preferences JSON file:
1. When using Linux, make sure your .crx extension file is available on the machine that the extension will be installed on. Copy the .crx extension file to a local directory, or use a network share that is reachable from the machine.
2. Create a JSON file where the name of the file corresponds to the ID of your extension. For example, create a JSON file with the file name
aaaaaaaabbbbbbbbccccccccdddddddd.json.
The name of the preferences JSON file is your Microsoft Edge extension's CRX ID, followed by a .json extension. The CRX ID is a unique 32-character code which is the letters that are present at the end of your extension's URL.
3. Depending on your operating system, save the JSON file to one of the following folders:

To prevent unauthorized users from installing extensions for all users, make sure your extension preferences file is read-only.
Also make sure that the following conditions are met:
Every directory in the path is owned by the user root.
Every directory in the path is assigned to the admin or wheel group.
Every directory in the path isn't world writable.
The path must be free of symbolic links.
Linux
User-specific: ~/.config/microsoft-edge/External Extensions/ For all users: /usr/share/microsoft-edge/extensions/
4. Depending on your scenario, copy the appropriate code that follows, into your preferences JSON file.
Applies to Linux only. If you install from a file, specify the location and version in external_crx and external_version:
JSON{
   "external_crx": "/home/share/extension.crx",   "external_version": "1.0"
}
 Applies to macOS and Linux. If you install from an update_url, specify the update URL in external_update_url.
Copy the following code into your preferences JSON file when installing from local .crx files on Linux only:
JSON{
   "external_update_url": 
"http://myhost.com/mytestextension/updates.xml"
} Copy the following code to your preferences JSON file when installing from the Microsoft Edge Add-ons website on macOS and Linux:
JSON{
   "external_update_url": 
"https://edge.microsoft.com/extensionwebstorebase/v1/crx"
}5. To install extensions for specific locales, list the supported locales, in supported_locales.
You can specify parent locales, to install your extension for all language locales that use that parent. For example, when using the parent locale en, your extension installs for all English locales, such as en-US, en-GB, and so on. When users change their locale in their browser, externally installed extensions are uninstalled. To install your extension for any locale, don't use supported_locales.
JSON{
   "external_update_url": 
"https://edge.microsoft.com/extensionwebstorebase/v1/crx",
   "supported_locales": [ "en", "fr", "de" ]
}6. Verify that your extension is installed in Microsoft Edge, by going to edge://extensions.
Update and uninstall externally installed extensions
Microsoft Edge scans the metadata entries in the registry each time the browser starts, and makes any changes to the externally installed extensions.
To update your extension to a new version, update the version string in the extension manifest file, and then update the version in the registry.
You may need to uninstall externally installed extensions, which were installed as part of a bundle of software that was previously installed on the machine. To uninstall your extension, remove your preferences JSON file or remove the key from the registry.
See also:
Set an externally installed extension to automatically update Manifest file format for extensions
Blocking of extensions
The policies for ExtensionInstallForcelist, block list, and ExtensionSettings are used when enterprises want to install or block specific extensions on the client machines.
Extensions and their origin that are configured in ExtensionInstallForcelist,
ExtensionInstallSources, or ExtensionSettings take precedence over BlockExternalExtensions.
If the BlockExternalExtensions policy is set to Not Configured or Disabled, that doesn't have any effect. If the BlockExternalExtensions policy is set to Enabled, external extension installation (by third party software) is prevented.
See also
Set an externally installed extension to automatically update Manifest file format for extensions
Microsoft Edge Enterprise docs:
Microsoft Edge - Policies
ExtensionInstallForcelist
ExtensionInstallSources
ExtensionSettings
BlockExternalExtensions


Feedback
Was this page helpful? 

Curation and review process for the Edge Add-ons store
Article • 09/12/2024
The Microsoft Edge Add-ons store curates the Edge store experience so that users can find all the items to customize their browser in one place, such as themes, extensions, and apps.
Before installing an item from the Edge Add-ons store, users can learn more about the functionality, data permissions, and publisher by viewing the item's description and listing.
Organizing Edge Add-ons store items
The store organizes the items to help users discover the ones that are relevant to their interests.
Users can also discover the items they are interested in on the Edge Add-ons store in several ways, including:
The home page.
The Search bar.
Curated collections of store items.
Categories of store items.
The following factors are used to organize items:
 Quality: Items featured on the Edge Add-ons store are selected based on their eligibility criteria.
 Relevancy: Ranking takes into consideration factors such as the item name, description relevancy, popularity, and user experience.
 Popularity: The number of ratings and the average rating are used for prioritizing items.
Security review
The quality and compliance of the item that is displayed on the Edge Add-ons store is verified per the guidelines that are set in the developer policy.
Items violating the policy guidelines are not allowed in the store. There is a standard review process for each new item submission and new versions of items, per the developer policies.
See also:
 Using Content Security Policy (CSP) to control which resources can be run
Ranking
Every item submitted to the Microsoft Edge Add-ons store has detailed information about the item's characteristics, such as:
Screenshots.
The description of the item's features and functionality.
Publisher information.
Links to the publisher site, privacy policies, and financial policies.
The Search ranking of the item is based on these characteristics.
In the Microsoft Edge Add-ons store, users can provide a rating and a written review for the item they are using. Users and developers can report an abusive review from within the review section of the item listing page.
Items are ranked for popularity based on user ratings at the store.
See also
Using Content Security Policy (CSP) to control which resources can be run Developer policies for the Microsoft Edge Add-ons store

Feedback
Was this page helpful? 
Update a Microsoft Edge extension
Article • 09/24/2024
You can update a submitted extension or remove a published extension listing from the Microsoft Edge Add-ons website at any time.
See also:
 Set an externally installed extension to automatically update - for extensions that don't use Partner Center and the Microsoft Edge Add-ons website.
Update an existing extension in the Microsoft Edge Add-ons website
To update your extension that's at the store (the Microsoft Edge Add-ons website):
1. Go to your Partner Center developer dashboard and select the extension that you want to update.
2. Update either the extension package or the metadata of the extension. If you update the extension package, make sure that you increase the version number in the manifest file.
3. After you make the changes, click Publish to update your extension listing and start the certification process. The certification process for an update to an extension can take up to 7 business days.
4. After the Status column displays In the store, your extension update is available on the Microsoft Edge Add-ons website.
After your extension has been created initially, you can update your extension by Using the REST API for updating Microsoft Edge Add-ons.
Update your extension during the certification step
While your extension is in the certification stage, and before it gets published to the Microsoft Edge Add-ons website, you can update your submitted extension. You might also need to update your extension if your extension fails the certification process.
To check the status of your extension:
 Go to your Partner Center developer dashboard and select an extension.
To edit (update) your submitted extension:
1. Go to your Partner Center developer dashboard and select an extension. The information that you filled out during the previous submission is displayed.
2. To open the Extension overview section, use the left navigation bar. To cancel the current submission, select Cancel submission.
3. Go to other sections and update either the extension package or the metadata of the extension. If you update the extension package, make sure that you increase the version number in the manifest file to match changes that were made after the previous package submission.
4. After you finish making changes, select Publish.
Important: The review process stops, your current submission is removed from the Microsoft Edge extensions certification pipeline, and then a new review starts, using the new submission.
Update your extension after it failed the certification
After your extension failed the certification process, you need to update your extension and resubmit your extension, incorporating the feedback you got.
To edit your extension:
1. Go to your Partner Center developer dashboard and select the extension that failed the certification process.
2. Update either the extension package or the metadata, incorporating the feedback received from the certification process. If you update the extension package, make sure that you increase the version in the manifest file.
3. After making changes, select Publish.
Remove an extension from the Microsoft Edge Add-ons website
To remove an extension:
1. Go to your Partner Center developer dashboard. From the Dashboard page, select the listing to remove.
2. Select Extension Overview on your listing.
3. Select Unpublish to remove the listing from the Microsoft Edge Add-ons website.
The extension is now removed from the Microsoft Edge Add-ons website. Users who already installed your extension can continue to use it, but the extension isn't available to new users.
See also
 Set an externally installed extension to automatically update - for extensions that don't use Partner Center and the Microsoft Edge Add-ons website.
Using the REST API for updating Microsoft Edge Add-ons
Feedback
Was this page helpful? 
Using the REST API for updating Microsoft Edge Add-ons
Article • 09/24/2024
Use this REST API to programmatically update an extension that's been published at the Microsoft Edge Add-ons website, to automate the process of uploading and publishing new versions of your extension. You can integrate these REST API endpoints directly into your continuous integration/continuous delivery (CI/CD) pipeline, to publish extension package updates to the Microsoft Edge Add-ons website without using Partner Center.
This REST API exposes endpoints for:
Uploading a package to update an existing submission
Checking the status of a package upload
Publishing the submission Checking the publishing status
These endpoints are described below.
To use this REST API, you first use the Publish API page at Partner Center to enable the API.
To initially publish a new extension, you use Partner Center. To update the extension, either manually use Partner Center, or programmatically use this REST API.
To submit suggestions and feedback, enter an Issue about the Add-ons API.
Versions of the Update REST API
As of September 6, 2024, both v1.1 and v1 of this Update REST API are supported.
Support for v1 will end on December 31, 2024.
Components used

Overview of using the Update REST API

Terminology
ﾉ Expand table
TermDefinitionoperationA REST operation such as GET or POST.operation
IDThe ID of a REST operation.packageThe .zip package that contains the files for your Microsoft Edge Add-on.productA Microsoft Edge extension or theme. Also referred to as a Microsoft Edge Add-on.product IDThe product ID of the product whose draft needs to be published. The product ID is a 128-bit GUID that is associated with a product at Partner Center. For example: d34f98f5-f9b7-42b1-bebb-98707202b21d.TermDefinitionsubmissionAn update that is being submitted to an existing product at Partner Center. Every update to a product is a submission, regardless of whether the status is In Draft, In Review, or In the Store (published).Enable the Update REST API at Partner Center
To use the Microsoft Edge Add-ons API, you first need to enable the API for your project in the Microsoft Partner Center by creating API credentials, as follows:


Using the API endpoints
The Update REST API exposes endpoints for:
Uploading a package to update an existing submission
Checking the status of a package upload
Publishing the submission
Checking the publishing status
These endpoints are introduced below.
To use this Microsoft Edge Add-ons Update REST API, you must have the following, per above:

https://api.addons.microsoftedge.microsoft.com.
There aren't REST API endpoints for:
Creating a new product.
Updating a product's metadata, such as the description.
To create a new product or update a product's metadata, you must use Microsoft Partner Center.
Uploading a package to update an existing submission
Use this REST API endpoint to update the package for an add-on. This API uploads a package to update an existing draft submission of an add-on product.
See also Upload a package to update an existing submission in REST API Reference for updating Microsoft Edge Add-ons.
Endpoint description

To get the product ID:
1. Sign in to your Partner Center developer dashboard.
2. Go to Microsoft Edge > Overview.
3. Select the extension for which you want the product ID.
The Extension overview page opens. The product ID is shown in the page. (The product ID is also shown as the GUID in the URL in the Address bar, between microsoftedge/ and /packages.)
4. In the Extension identity section (or from the Address bar), select and copy the Product ID.
Sample request
To upload a package to update an existing submission, use the curl command at a command prompt as follows:
If the request succeeds and the update process begins, you receive a 202 Accepted response status code with a Location header. This location header contains the operationID that's required for checking the status of the update operation.
See also:
 Upload a package to update an existing submission in REST API Reference for updating Microsoft Edge Add-ons.
Checking the status of a package upload
Use this API to check the status of package upload.
$operationID is the operation ID that's returned in the response header from Uploading a package to update an existing submission or Publishing the submission.
See also Check the publishing status in REST API Reference for updating Microsoft Edge Add-ons.
Endpoint description

Sample request
To check the status of a package upload, use the curl command at the command prompt as follows:

See also:
 Check the status of a package upload in REST API Reference for updating Microsoft Edge Add-ons.
Publishing the submission
Use this API to publish the current draft of the product to the Microsoft Edge Add-ons website.
See also Publish the product draft submission in REST API Reference for updating Microsoft Edge Add-ons.
Endpoint description

Sample request
To publish the submission, use the curl command at the command prompt as follows:
If the request succeeds and the publishing process begins, you'll receive a 202 Accepted response status code with a Location header. This location header contains the operationID that's required for checking the status of the publish operation.
See also:
 Publish the product draft submission in REST API Reference for updating Microsoft Edge Add-ons.
Checking the publishing status
Use this API to check the status of the publish operation.
$operationID is the operation ID that's returned in the response header from Uploading a package to update an existing submission or Publishing the submission.
See also Check the publishing status in REST API Reference for updating Microsoft Edge Add-ons.
Endpoint description

Sample request
To check the publishing status, use the curl command at the command prompt as follows:

See also:
 Check the publishing status in REST API Reference for updating Microsoft Edge Addons.
See also
 REST API Reference for updating Microsoft Edge Add-ons - REST API for updating an extension.
 Supported APIs for Microsoft Edge extensions - JavaScript APIs for developing an extension.
GitHub:
    Issues	 in edge-developer repo for Microsoft Edge Developer docs. Microsoft identity platform:
 Microsoft identity platform and the OAuth 2.0 client credentials flow

Feedback
Was this page helpful?  Yes  No

REST API Reference for updating Microsoft Edge Add-ons
Article • 09/24/2024
This article is the REST endpoint reference for the Microsoft Edge Add-ons API. This API automates publishing updates to add-ons that have been submitted to the Microsoft Edge Add-ons store.
For an overview, see Using the REST API for updating Microsoft Edge Add-ons.
Versions of the Update REST API
As of September 6, 2024, both v1.1 and v1 of this Update REST API are supported.
Support for v1 will end on December 31, 2024.
Upload a package to update an existing submission
Uploads a package to update an existing draft submission of an add-on product.
See also Uploading a package to update an existing submission in Using the REST API for updating Microsoft Edge Add-ons.
Request
ﾉ Expand table
MethodRequest URIPOST/products/$productID/submissions/draft/packageURI parameters
ﾉ Expand table
URI parameterDescription$productIDRequired. The product ID of the product to which the package must beURI parameterDescriptionuploaded.Request headers
The following request headers are required:

Request body
<Zip package>
Response
Response headers
 Location: {operationID}
The response includes an operation ID, to send to other endpoints.
Status codes
This API has the following expected status codes.
ﾉ Expand table
HTTP status codeDescription202The request is accepted for processing, but the processing isn't complete.4XXSee Error codes, below.5XXSee Error codes, below.See also:
 Uploading a package to update an existing submission in Using the REST API for updating Microsoft Edge Add-ons.
Check the status of a package upload
Gets the status of the package upload.
See also Checking the status of a package upload in Using the REST API for updating Microsoft Edge Add-ons.
Request
ﾉ Expand table
MethodRequest URIGET/products/$productID/submissions/draft/package/operations/$operationIDURI parameters
ﾉ Expand table
URI parameterDescription$operationIDRequired. The operation ID of the upload request submitted in the previous step.
This information is available in the response header.Request headers
The following request headers are required:

Request body
None.
Response
There are several responses, for different scenarios.
Response when the operation is still in progress
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "InProgress",
    "message": null,
    "errorCode": null,
    "errors": null
}Response when the operation succeeds
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "Succeeded",
    "message": "Successfully updated package to {fileName}.zip",
    "errorCode": "",
    "errors": null
}Response when the operation fails with errors
JSON {
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "Failed",
    "message": "Error Message.",     "errorCode": "Error Code",
    "errors": ["list of errors"]
}Response headers None.
Status codes
This API has the following expected status codes.
ﾉ Expand table
HTTP status codeDescription200The request is OK.4XXSee Error codes, below.5XXSee Error codes, below.See also:
 Checking the status of a package upload in Using the REST API for updating Microsoft Edge Add-ons.
Publish the product draft submission
Publishes the current draft of the product to Microsoft Edge Add-ons.
See also Publishing the submission in Using the REST API for updating Microsoft Edge Add-ons.
Request
ﾉ Expand table
MethodRequest URIPOST/products/$productID/submissionsURI parameters
ﾉ Expand table
URI parameterDescription$productIDRequired. The product ID of the product whose draft must be published.Request headers
The following request headers are required:

Request body
<Notes for certification>, in plain text format.
Response
Response headers
 Location: {operationID}
The response includes an operation ID, to send to other endpoints.
Status codes
This API has the following expected status codes.
ﾉ Expand table
HTTP status codeDescription202The request is accepted for processing, but the processing isn't complete.4XXSee Error codes, below.5XXSee Error codes, below.See also:
 Publishing the submission in Using the REST API for updating Microsoft Edge Addons.
Check the publishing status
Checks the status of the publish operation.
See also Checking the publishing status in Using the REST API for updating Microsoft Edge Add-ons.
Request
ﾉ Expand table
MethodRequest URIGET/products/$productID/submissions/operations/$operationIDURI parameters None.
Request headers
The following request headers are required:

Request body None.
Response
A GET operation status API can be called in the following scenarios. In all valid scenarios,
200 OK is returned, with different status messages.
The response includes an operation ID, to send to other endpoints.
Response when a new product is published
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't create new extension.",
    "errorCode": "CreateNotAllowed",
    "errors": null
}Response when there's nothing new to be published
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension since there are no updates, please try again after updating the package.",
    "errorCode": "NoModulesUpdated",
    "errors": null
}Response when there's an in-review submission for the same product
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension as your extension submission is in progress. Please try again later.",
    "errorCode": "InProgressSubmission",
    "errors": null    
}Response when there's an ongoing unpublished submission for the same product
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension as your extension is being unpublished. Please try after you've unpublished.",
    "errorCode": "UnpublishInProgress",
    "errors": null    
}Response where any of the modules are invalid
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension as your extension has modules that are not valid. Fix the modules with errors and try to publish again.",
    "errorCode": "ModuleStateUnPublishable",
    "errors": [
        {
            "message": "Invalid module : <Modules>"
        }
    ]
}Response when there are validation errors in submission
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Extension can't be published as there are submission validation failures. Fix these errors and try again later.",
    "errorCode": "SubmissionValidationError",    "errors": ["{list of errors}"]
}
Response when the publish call succeeds
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "Succeeded",
    "message": "Successfully created submission with ID {submission.Id}",
    "errorCode": "",
    "errors": null
}Response when the publish call fails with an irrecoverable failure
JSON{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "An error occurred while performing the operation",
    "errorCode": null,
    "errors": null
}Response when the publish call fails with an unexpected failure
JSON{
    "id": "{operationID}",
    "message": "An error occurred while processing the request. Please contact support Correlation ID: {operationID} Timestamp: {timeStamp}", }Response headers
None.
Status codes
This API has the following expected status codes.
ﾉ Expand table
HTTP status codeDescription200The request is OK.4XXSee Error codes, below.5XXSee Error codes, below.See also:
 Checking the publishing status in Using the REST API for updating Microsoft Edge Add-ons.
Error codes
Here's a list of common error codes and possible reasons. For a full list, see Partner Center REST error codes or List of HTTP status codes.
4xx: Client error
ﾉ Expand table
MessageDescriptionExample scenario400 Bad
RequestThe server didn't understand the request.There's no package (zip file) in the body. Or,
Content-Type header is missing or its value is incorrect.401
UnauthorizedThe request page needs an authorization.The auth token is missing, expired, or not valid.404 Not FoundThe server can't find the requested page.The specified product ID or operation ID doesn't have a valid GUID, isn't valid, or doesn't belong to the developer who is making the request.408 Request
TimeoutThe request took longer than the server was prepared to wait.There was a timeout while uploading a package.429 Too many requestsToo many requests were sent by the user.Too many requests were sent and they got throttled.5xx: Server error
ﾉ Expand table
MessageDescriptionExample scenario500 Internal Server
ErrorThe request wasn't completed.The server met an unexpected condition.See also
Using the REST API for updating Microsoft Edge Add-ons Partner Center REST error codes in Partner Center docs. List of HTTP status codes
Feedback
Was this page helpful?  Yes  No

Set an externally installed extension to automatically update
Article • 09/24/2024
This article applies to externally installed extensions; that is, extensions that are distributed via an approach other than Partner Center; see Alternative ways to distribute an extension. This article doesn't apply to extensions that you publish using the Partner
Center developer dashboard; for that distribution approach, see Update a Microsoft Edge extension.
Every few hours, Microsoft Edge checks whether each installed extension or app has an update URL. To specify an update URL for your extension, use the update_url field in the manifest. The update_url field in the manifest points to a location that can complete an update check. For each update_url, this URL sends requests for updated manifest XML files. If the update manifest XML file lists a newer extension or app version, Microsoft Edge downloads and installs the newer version. The same process works for manual updates, where the new .crx file must be signed with the same private key as the currently installed version.
In order to maintain user privacy, Microsoft Edge doesn't send any Cookie headers with auto-update manifest requests, and ignores any Set-Cookie headers in the responses to those requests.
When you set your extension to automatically update on users' machines, your extension shares the following benefits with Microsoft Edge:
Incorporate bug and security fixes.
Add new features or performance enhancements.
Improve the user interface.
The Microsoft Edge Add-ons website hosts your extensions, and you can update your extension using the same mechanism as Microsoft Edge. You don't control the update mechanism.
(Previously, non-store-based extensions were supported. Also, previously, you updated the native binaries and the extension at the same time.)

Update URL
If you host your own extension or app, you must add the update_url field to your manifest.json file. The following code snippet shows an example of the update_url field:
JSON{
  "name": "My extension",
  ...
  "update_url": "http://contoso.com/mytestextension/updates.xml",
  ...
}Update manifest
The updated manifest returned by the server should be an XML document; for example:
XML<?xml version='1.0' encoding='UTF-8'?>
<gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>
  <app appid='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'>
    <updatecheck codebase='http://contoso.com/mytestextension/mte_v2.crx' version='2.0' />
  </app>
</gupdate>The updated manifest XML file defines the following attributes:
ﾉ Expand table
AttributeDetailsappidThe extension ID is generated based on a hash of the public key. To find the ID of an extension, open Microsoft Edge and see edge://extensions.codebaseA URL to the .crx file.versionThis attribute value is used by Microsoft Edge to determine whether it should download the .crx file specified by codebase. It should match the value of version in the manifest.json file of the .crx file.The update manifest XML file can contain information about multiple extensions, by including multiple <app> elements.
Testing
Microsoft Edge automatically checks for updates of extensions every few hours. To update extensions immediately, go to edge://extensions, turn on the Developer mode toggle, and then click the Update button.
Advanced usage: request parameters
The basic mechanism to update using parameters is simple. To automatically update your extension:
1. Upload your static XML file on your web server, such as Apache.
2. Update the XML file as you release new versions of your extensions.
Take advantage of the fact that some parameters added to the update manifest request indicate the extension ID and version. You can use the same update URL for all your extensions, instead of a static XML file. To use the same update URL for all your extensions, point to a URL that runs dynamic server-side code that tests the parameters.
The following example demonstrates the format of the request parameters of update URL:
url?x={extension_data}In this example, {extension_data} is a URL-encoded string that uses the following format.
urlid={id}&v={version}For example, the following two extensions both point to the same update URL http://contoso.com/extension_updates.php.
Extension 1
ID: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa

The following examples are requests to update each extension.
httpshttp://contoso.com/extension_updates.php?
x=id%3Daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%26v%3D1.1httpshttp://contoso.com/extension_updates.php?
x=id%3Dbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb%26v%3D0.4You can also list multiple extensions in a single request for each unique update URL. The following example merges the previous requests into a single request:
httpshttp://contoso.com/extension_updates.php?
x=id%3Daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%26v%3D1.1&x=id%3Dbbbbbbbbbbbbbbbbbbb bbbbbbbbbbbbb%26v%3D0.4If you send a single request and the number of installed extensions that use the same update URL is too long, the update check issues more GET requests. A GET request URL is too long if it's approximately 2000 characters.
In a future release, instead of issuing multiple GET requests, a single POST request might be issued, with the request parameters in the POST body.
Advanced usage: minimum browser version
As new APIs are released for the Microsoft Edge extensions system, you might want to release an updated version of your extension or app that only works with newer versions of Microsoft Edge. When Microsoft Edge is automatically updated, it can take a few days before most of your users update to that new release.
To ensure that a specific update applies only to Microsoft Edge versions that are current or newer than a specific version, add the prodversionmin attribute in your update manifest.
For example, in the following code, the prodversionmin attribute value of 3.0.193.0 specifies that your app is automatically updated to version 2.0 only when the user is running Microsoft Edge 3.0.193.0 or newer:
XML<?xml version='1.0' encoding='UTF-8'?>
<gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>
  <app appid='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'>
    <updatecheck codebase='http://contoso.com/mytestextension/mte_v2.crx' version='2.0' prodversionmin='3.0.193.0' />
  </app>
</gupdate>See also
Alternative ways to distribute an extension
Update a Microsoft Edge extension
Partner Center developer dashboard


Feedback
Was this page helpful?  Yes  No

View Microsoft Edge extensions analytics dashboard
Article • 06/19/2023
Microsoft announced the launch of the Extensions Analytics Dashboard on September 8, 2021. For more information, see the Track your add-on's performance: extension analytics now available on Partner center blog post.
You can view extension metrics from your Partner Center dashboard and evaluate an extension's performance from Microsoft Edge Add-ons.
For example, you can identify regions in which the number of installations for your extension has increased in the past three months. You can also export this report as a CSV file.
Follow these steps to view your extension's analytics dashboard:
1. Go to your Partner Center account and select an extension.
2. From the left panel, click Extension overview > Analytics to view your extension metrics.
Analytics dashboard metrics
From the analytics dashboard you can view metrics for the Last month, 3 months, 6 months, or All time (the period since your extension has been published to the Microsoft Edge Add-ons store).
Weekly users
The Weekly users metric tracks the number of users that have your extension turned on, turned off and status unknown on Microsoft Edge over the past seven days.
The following screenshot shows the Weekly users from the date the extension was published until the day the report was run on February 18.

Enabled vs Disabled
The Enabled vs Disabled report shows the number of instances of the extension that are enabled or disabled per user.
The following screenshot shows the Weekly users who have enabled and disabled the extension over the same period. You can choose from Select all / Unselect all, Disabled, and Enabled views.

Installs
The Installs metric displays the total number of successful installs of your extensions per day from the Microsoft Edge Add-ons store.
The following screenshot shows daily successful installations for the last month.

Impressions
The Impressions metric captures the total number of page views and user visits to your extension product page on Microsoft Edge Add-ons store. The data points are based on weekly or daily totals depending on the selected time range.
The following screenshot shows Impressions for an extension page over a three month period.

Refine by Region, OS, and Language
You can further refine views of your extension's Weekly users, Installs, and Impressions by Region, OS, and Language.
Region
The Region filter covers the geographical distribution of users for your extension, indicating the user base in each region.
The following screenshot shows total user visits.

OS
The OS (operating system) filter highlights the OS usage distribution of all the install requests for your extension.
The following screenshot shows Weekly Users by Operating System over 30 days.

Language
The Language filter shows the language distribution for users of your extension.
The following screenshot shows Installs per Language over a six month period.

The Analytics Dashboard helps you better understand and engage with your extension users. For information about other features launched on Partner Center, see Released features for Microsoft Edge Add-ons - Microsoft Edge Developer documentation | Microsoft Docs.
Share your feedback, questions, and comments with the team on Twitter
@MSEdgeDev or via the Microsoft Edge Insider forums on TechCommunity.

Reply to user reviews of an extension
Article • 10/25/2024
You can view and respond to user reviews of your extension that are posted on the Microsoft Edge Add-ons product page. To view your extension's reviews and ratings and engage with the user who did the review, use the Partner Center dashboard.
To view your extension's Reviews page:
1. Go to your Partner Center account.
2. Select an extension, and then go to Extension overview > Reviews.
Or, on the Home > Edge breadcrumb path, click the star rating of an extension on the Overview page.

Features of the Reviews page
From the Reviews page, you have access to the following information and actions for an extension:
View your extension's Average Rating.
View the total number of ratings received for your extension.
Reply to reviews.
View the list of all reviews received for your extension and your responses.
Edit your previous responses.
Apply filters to the reviews based on the extension rating and response status.
Reply to user reviews
To reply to a user review:
1. At Partner Center, go to the extension's Review page, as described earlier.
2. Pick the review you want to respond to and then click the Reply link.
A response must be between one and one thousand (1-1000) characters long.
When you post a reply using the Partner Center dashboard, your reply appears on your Microsoft Edge Add-ons product page within 15 to 20 minutes.
See also
 Microsoft Edge Add-ons | NEW Feature to manage user reviews on your extension - blog post.
 Released features for Microsoft Edge Add-ons - recently released features at Partner Center.
Share your feedback, questions, and comments with the team on Twitter
@MSEdgeDev	, or see You can now respond to user reviews on your Microsoft Edge Add-ons page	 in Discussions in the MicrosoftEdge-Extensions repo.
Feedback
Was this page helpful? 
Best practices for extensions
Article • 11/21/2023
Follow these Best Practices to implement your extension and list it on the Microsoft Edge Add-ons Store.
Design a high-quality extension
Build extensions that conform to Microsoft's standards for security, privacy, transparency, and user experience.
Security: Make sure that your extension doesn't pose any security threats to users.
Privacy: Make sure that your extension handles user data appropriately.
User experience: Make sure that your extension provides a clean, intuitive, and seamless user experience on the web without ads that can be interruptive.
Store listing: Make sure that your extension's store listing sets correct user expectations and clearly communicates what the extension does.
We'll continue gathering input about Developer experiences with extensions and updating these Best Practices.

Feedback
Was this page helpful?  Yes  No
Minimize an extension's impact on page load time
Article • 09/19/2024
Content scripts are JavaScript files that your extension injects into webpages, and that run in the context of these webpages. Using content scripts, your extension can access and modify a rendered webpage by reading from or changing the DOM.
Content scripts can, however, have a noticeable impact on the performance of a webpage, for example by slowing down the page load time. This can happen if the content script runs a lot of code while the page is loading.
This article provides best practices that can help you minimize the performance impact of your extension on the webpages that your users visit.
Profile your extension content script
To profile the performance of your extension's content script, use Microsoft Edge DevTools or the Edge tracing tool, as described in the following sections.
Profile your content script using Microsoft Edge DevTools
DevTools provides a set of features for inspecting, debugging, and profiling the code that a webpage uses. DevTools can also be used to profile your extension's code.
In this section, you'll learn how to use the Performance tool in DevTools to profile your extension's content script. To learn more about the Performance tool, see Introduction to the Performance tool.
1. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
2. In DevTools, on the Activity Bar, select the Performance () tab. If that tab isn't visible, select More tools () > Performance.
3. To start recording a performance profile, click the Record () button.
4. Reload the page to capture the profiling data that corresponds to the page load time and then, once the page has finished loading, click the Stop () button to end the recording. DevTools displays the recorded performance profile:

5. To search for the performance events that are caused by your content script, press Ctrl+F on Windows/Linux or Command+F on macOS. The Find text box appears at the bottom of the Performance tool.
6. Type Evaluate script and then press Enter until the Performance tool highlights the performance events that are caused by your content script. You will know that you have found the right performance event when the Script label in the Summary panel shows the name of your content script:

Profile your content script using the Edge tracing tool
The Edge tracing tool, available at the edge://tracing URL, is a powerful tool that can provide detailed analysis of your extension's performance. In this section, you'll learn how to use the Edge tracing tool to understand the impact of your extension on the page load time. To learn more about this tracing tool, which is based on the Perfetto tool, see Perfetto UI in the Perfetto Tracing Docs.
1. To open the Edge tracing tool, open a new tab or window, and go to edge://tracing. The tracing UI opens.
2. To start a new trace, in the top left corner of the tool, click the Record button. The Record a new trace dialog opens.
3. Select the Manually select settings option button. The list of categories appears.
4. To capture detailed information about your extension's content script compilation and execution, select all of the following categories:
extensions v8 devtools devtools.timeline
5. Click the Record button. The dialog closes, and the Edge tracing tool starts recording the trace.
6. Open a new tab and load a webpage that your extension affects. The tracing tool collects data about the performance impact of your extension on the webpage.
7. Open the tab where the Edge tracing tool is running, and then click the Stop button. The new trace information appears in the tool.
Filter the results
Traces that are recorded by the Edge tracing tool provide a lot of information about the browser, as well as your extension.
To filter the information to show only what's relevant to the webpage that your extension impacted:
1. In the edge://tracing page, press Shift+Esc to open the Browser Task Manager dialog.
2. In the Browser Task Manager dialog, search for the tab that corresponds to the webpage that your extension affected, and note the number in the Process ID column. Close the dialog.
3. In the toolbar of the Edge tracing tool, click Processes, and then select the checkbox that corresponds to the process ID you noted. Clear all other checkboxes.
4. In the upper right corner of the Edge tracing tool, click the search field, type ScriptInjection::InjectJS, and then press Enter repeatedly until an event that corresponds to your extension is highlighted in the bottom panel.
The bottom panel displays the start time and total duration of the event:

Look for key events
To continue analyzing the performance impact of your extension's content script on the webpage, look for the following key events inside the ScriptInjection::InjectJS event:
v8.compile - shows the compilation time of your content script. v8.run - indicates the running time of the compiled script.
Only add content script code that's needed for the functionality of your extension
Your extension's content script runs in the context of the webpage. To minimize the impact of your content script on that webpage, make sure to only add, in your content script, the minimum amount of code that your extension needs to run in the context of the webpage. Audit the code in your content script and remove legacy frameworks, tools, libraries, or other code that aren't needed by your content script to run in Microsoft Edge.
You can make use of lazy loading and code splitting techniques to minimize the amount of code that runs in your content script:
 Lazy loading is the process of loading your code only when it's needed, based on the user actions, the page content, or the extension logic.
 Code splitting is the process of dividing your code into smaller chunks, or modules, which can be loaded separately or on demand.
If your extension is small enough, you won't need a build tool to split your code. If your extension is larger, and if your code is more complex to manage, use a build tool to split your code into smaller chunks. Build tools can help you organize your code into logical units, which can be loaded on demand. For example, you can use webpack to split your code into entry points and dynamic imports:
Entry points are loaded on every page load.
Dynamic imports are only loaded on demand, such as when the user interacts with the webpage or with the extension's UI:
JavaScript// When the user clicks on the page. document.addEventListener("click", async () => {
  // Dynamically load the code that's needed to handle the click event.   const module = await import("chunk.js");
  // Do something with the newly loaded module code.
});Only load your content script in required pages and frames
Your extension might not need to run on every webpage that the user visits. To reduce the amount of code that runs when webpages load, configure your extension to load content scripts only on the pages and frames where they are needed.
To configure the pages and frames where your content scripts are loaded, define URL patterns in your extension manifest file by using the matches property in the content_scripts section. To learn more, see Inject scripts	 in Content scripts in the Chrome Extensions documentation.
You can also use the chrome.scripting extensions API to programmatically inject your content script into the webpage. This API allows you to inject your content script based on the user's actions, the webpage content, or the extension logic. To learn more, see chrome.scripting in the Chrome Extensions documentation.
Use the following best practices when configuring where your content scripts are loaded:
 Use the most specific URL patterns possible for the matches and exclude_matches properties in your extension manifest file. For example, if your content script only needs to run on webpages of the example.com domain, use https://example.com/* instead of "*://*/*.
To control whether your content script only runs in the top-level frame, or also in nested frames of the webpage that matches a URL pattern, use the all_frames property in your extension manifest file. By default, this property is set to false, which means that your content script will only run in the top-level frame. If your content script needs to access or modify the DOM in nested frames, set this property to true. Note that setting all_frames to true increases the amount of code that runs on a webpage.
Load content scripts only when needed
To reduce the amount of code that is loaded and that runs on each webpage, and to save memory and CPU resources, only load your content scripts when needed, instead of on every page load.
Configure when to load content scripts in your extension manifest file
To control when your extension's content script should be loaded, use the run_at property in your extension's manifest file.
By default, this property is set to the document_idle value, which means that the content script will be loaded, and run, after the page has finished loading and the DOM is ready. This is the recommended value for most content scripts. The document_idle value ensures that the content script will not interfere with the page loading process.
To load and run your content script before the page is fully loaded, use the document_start or document_end values. These values are useful in cases such as
modifying the webpage layout or styling, but they can also cause performance issues or compatibility problems with other scripts on the page.
Programmatically load content scripts at runtime
To programmatically load your content scripts at runtime, only when needed, use the chrome.scripting API . The chrome.scripting API provides more control over when and
where your content script is loaded.
For example, you can use the chrome.scripting API to load your content script only after the user has interacted with the webpage or extension UI, such as when clicking an extension's button, or clicking a part of the webpage.
If you use the chrome.scripting API when the user interacts with the webpage, make sure to carefully consider whether you need to repeatedly load your content script every time the interaction happens. Loading content scripts too frequently can cause user experience issues or errors.
Avoid blocking calls or long-running synchronous tasks
Blocking calls and long-running synchronous tasks can delay the webpage load or make other aspects of a webpage slower, as well as negatively impact the UI responsiveness.
Blocking calls are JavaScript operations that prevent running other code until they complete. For example, using the XMLHttpRequest, localStorage, or chrome.storage.sync APIs (which are synchronous) prevents the webpage from running
other code.
Long-running synchronous tasks are synchronous tasks that take a long time to complete, preventing the browser from running other webpage code while they are running. This can include complex calculations, loops, or string manipulations.
Use asynchronous or non-blocking code, such as the Fetch API, JavaScript Promises, or Web Workers where possible. Asynchronous or non-blocking code allows the execution of other code while waiting for the completion of a task, without blocking the browser process that runs the webpage.
Note that, although using Web Workers to move your complex code logic to another thread is a good practice, it might still slow down devices that have a low CPU core count or that are already busy.
Below is an example using the Fetch API. While the data is being fetched, the browser is not blocked and can run other code:
JavaScript
// Asynchronously load data from a JSON file.
fetch("data.json")
  .then(response => response.json())
  .then(data => {
    // Do something with the data.
  });
Asynchronously store data
To store data in your extension, use the chrome.storage.local API instead of the localStorage API, which is a synchronous API. The chrome.storage.local API is
asynchronous and can store and retrieve data more efficiently, without affecting the performance of the webpage where your extension is running. For example, you can use the chrome.storage.local.get method to retrieve a previously stored value, and then use the result in a callback function:
JavaScriptchrome.storage.local.get("key", result => {
  // Do something with the result.
});Asynchronously send messages
To communicate between your content script and your extension's background page, or an other content script, use the chrome.runtime.sendMessage or
chrome.tabs.sendMessage methods. These methods are asynchronous and non-blocking,
and allow you to send and receive messages between the different parts of your extension. You can use promises or callbacks to handle the response of the messages. For example, you can use the chrome.runtime.sendMessage method to send a message to the background page, and then use the returned Promise object to process the response:
JavaScriptchrome.runtime.sendMessage({type: 'request', data: 'some data'})
  .then(response => {
    // Do something with the response.
  });Run intensive tasks off the main thread
Use Web Workers to run intensive tasks in your content script without blocking the thread that the browser uses to render the webpage. By using Web Workers, the code that runs the intensive tasks runs in a separate thread. Web Workers can improve the performance and responsiveness of your content script and of the webpages it runs on.
Note that creating a Web Worker creates a new thread, which uses new resources on the devices. Using too many resources on low-end devices might lead to performance issues.
To communicate between your content script and Web Worker, use the postMessage and onmessage APIs. For example, to create a new Web Worker and send a message to it, use
the following code:
JavaScript// Create a new Web Worker. cons worker = new Worker('worker.js');
// Send a message to the Web Worker.
worker.postMessage({type: 'task', data: 'some data'});To receive messages in your Web Worker, and to send messages back:
JavaScript// Listen to messages that are sent to the Web Worker. onmessage = event => {   const type = event.data.type;   const data = event.data.data;
  // Do something with the type and data.   // ...
  // Send a message back.
  postMessage({type: 'result', data: 'some result'});
};See also
 Introduction to the Performance tool
Chrome Extension docs:
Manifest - content scripts chrome.scripting chrome.storage
MDN:

Feedback
Was this page helpful? 

Samples for Microsoft Edge extensions
Article • 11/19/2024
Use the extensions demos in the Demos repo to learn how to develop extensions for Microsoft Edge.
List of samples
ﾉ Expand table
Demo nameDescriptionRepo directoryLive
demo pageLearn to build a Microsoft Edge extension that extends DevTools.Used for Create a DevTools extension, adding a custom tool tab and panel./devtools-extension/n/aBasicA basic DevTools extension./devtoolsextension/sample 1/n/aPanelA basic DevTools extension with a panel./devtoolsextension/sample 2/n/aCDPA basic DevTools extension invoking Chrome Developer Protocol (CDP) APIs./devtoolsextension/sample 3/n/aInspectA basic DevTools extension that interacts with the Inspected page./devtoolsextension/sample 4/n/aSee also
 Download or clone the Demos repo in Sample code for DevTools.

Feedback
Was this page helpful? 
Contact the Microsoft Edge extensions team
Article • 10/25/2024
You can contact the Microsoft Edge extensions support team to request help, submit feedback, or report a copyright or trademark infringement.
Inquire about your extension's review status or certification status
After submitting your extension via Partner Center, if you have questions regarding your extension's review status or certification status, use the MicrosoftEdge-Extensions repo to enter a new Issue.
Learn about correct use of APIs
If your extension isn't working with Microsoft Edge as you expect, or you have a question about how to develop an extension, see Supported APIs for Microsoft Edge extensions and Port Chromium extensions to Microsoft Edge.
Learn about submitting an extension
If you have any issues while you submit your extension to Partner Center, see Publish your extension.
Feature your extension in a collection
To feature your extension in a collection on the Microsoft Edge Add-ons website, see Submit a request to add an extension to the collections on the Microsoft Edge Add-ons home page and complete the form.
MicrosoftEdge-Extensions discussion forum
Participate in the Discussions forum in the MicrosoftEdge-Extensions repo to flag any issues, raise a feature request, be a part of discussions, and share your ideas regarding the Microsoft Edge Extensions Store.
Report copyright or trademark infringement
If you think an item in the Microsoft Edge Add-ons website violates a copyright or trademark, complete the Reporting Infringement form. When filling in Step 3: Where can the infringing material be found?, in the Product/Service/App option, make sure to select Microsoft Store on Windows. The Microsoft Edge extensions team will review your report and then take the necessary action.
See also
 Microsoft Edge Insider - forum about Microsoft Edge at Microsoft Tech Community.

Feedback
Was this page helpful? 

Progressive Web Apps (PWAs) documentation
Develop a web app that can be installed and run on all devices, from one codebase.
Provide a native-like UX, or run in the browser.

Distribute a PWA with the Microsoft Store
ｃ HOW-TO GUIDE
Publish a PWA to the Microsoft Store
Provide in-app purchases with the Digital Goods API
Overview of Progressive Web Apps (PWAs)
Article • 01/24/2023
Progressive Web Apps (PWAs) are applications that you build by using web technologies, and that can be installed and can run on all devices, from one codebase.
PWAs provide native-like experiences to your users on supporting devices. They adapt to the capabilities supported by each device and they can also run in web browsers, like websites.
To start building a PWA, see Get started with PWAs.
Video: Ignite | March 2021 | Igniting the Web Apps Story

PWA benefits
Native-like experiences
When installed on a device, PWAs function just like other apps. For example:
 PWAs have their own application icons that can be added to a device's home screen or task bar.
PWAs can be launched automatically when an associated file type is opened.
PWAs can run when the user signs in.
PWAs can be submitted to application stores, such as the Microsoft Store.
Advanced capabilities
PWAs also have access to advanced capabilities. For example:
 PWAs can continue working when the device is offline.
PWAs support push notifications.
PWAs can perform periodic updates even when the application is not running.
PWAs can access hardware features.
Web-related advantages
Finally, PWAs can run in web browsers, just like websites. Running like websites gives PWAs with advantages, such as:
PWAs can be indexed by search engines.
PWAs can be shared and launched from a standard web link.
PWAs are safe for users because they use secure HTTPS endpoints and other user safeguards.
PWAs adapt to the user's screen size or orientation, and input method.
PWAs can use advanced web APIs such as WebBluetooth, WebUSB, WebPayment, WebAuthn, or WebAssembly.
Lower development cost
PWAs have a much lower cross-platform development cost than compiled apps that require a specific, separate codebase for each platform, such as Android, iOS, and each desktop operating system.
With a PWA, you can use a single codebase that's shared between your website, mobile app, and desktop app (across operating systems).
Cross-device compatibility
Progressive Web Apps (PWAs) are built using HTML, CSS, and JavaScript code that's hosted on web servers and that runs in web browser engines. They can either be used directly in a web browser, like a website, or installed on a device from an app store, or by using the app installation feature of a supporting browser. To learn more about installing PWAs in Microsoft Edge, see Installing a PWA.
The user experience of a PWA scales up or down with device capabilities. In particular, on Windows with Microsoft Edge, you can build immersive experiences that deeply integrate with the operating system. Using only web technologies ensures that your app will work on other browsers, operating systems, and devices.
Desktop computing continues to be the primary productivity environment for many users. PWAs can provide fully tailored, installable experiences on a desktop operating system that inherit the benefits of that environment. Yet PWAs can also be installed on mobile devices, or used directly in web browsers.
Bridging the gap between web and native
There isn't much you can't do today with web technologies. Many features that were once only possible by using device-specific languages can now be achieved by using standard web technologies. For example:
Handle files.
Share content with other apps.
Access the clipboard.
Sync data and fetch resources in the background.
Access device hardware such as Bluetooth and USB.
Store content in databases.
Take advantage of hardware accelerated graphics.
Use CSS layouts, animations, and filters to create advanced designs.
Run near-compiled performance code with WebAssembly.
Thanks to Microsoft Edge, PWAs on desktop can take full advantage of these capabilities to deliver what users expect desktop apps to be able to do. These capabilities provide more engaging experiences across web and desktop platforms.
To find examples of what PWAs can do, see Myth Busting PWAs.
The Microsoft Store
Because Progressive Web Apps (PWAs) are just like other apps in the Microsoft Store, users can fully engage with them-from discovery, to installation, to execution-without ever opening the browser.
The Microsoft Store provides a trustworthy and familiar experience for users to install your app. Additionally, you can view detailed usage statistics and charts that let you know how your apps in the Microsoft Store are doing.
See Publish a PWA to the Microsoft Store.
Success stories
Using Progressive Web App (PWA) technologies is a great way to make your app safe, discoverable, linkable, easy to install and update, responsive, and network independent. Many businesses have had success with PWAs. For example:
 The Starbucks PWA has increased daily active users twice. Orders on desktop are nearly the same rate as mobile (source).
 Trivago saw an increase of 150% for people who add its PWA to the home screen. The increased engagement led to a 97% increase in clockouts to hotel offers (source).
 Tinder cut load times from 11.91 seconds to 4.68 seconds with their PWA. The app is 90% smaller than the compiled Android app (source).
Read more success stories on the PWA Stats website.
See also
	Progressive Web Apps	 at MDN Web Docs.
	Progressive Web Apps	 at web.dev.
	Progressive Web Apps	 at Wikipedia.
PWA Q&A
Was this page helpful?  Yes  No
What's New in PWAs
Article • 05/22/2024
The following are the updates to Progressive Web Apps (PWAs) and Web Apps, from the Microsoft Edge Web Apps team. To try new features, read these announcements. To stay up to date with the latest and greatest features, download the Microsoft Edge preview channels (Beta, Dev, and Canary).
Sections of this document correspond to historical releases of Microsoft Edge, and are not updated over time. For example, references below to "new features" or "origin trials" might become outdated as new versions of Microsoft Edge are released.
What's New in Microsoft Edge 121
Starting with Microsoft Edge 121, in DevTools, you can simulate the Window Controls
Overlay feature that Progressive Web Apps (PWAs) have, without having to install the PWA. See Simulate the Window Controls Overlay API without installing your PWA.
What's New in Microsoft Edge 114
Starting with Microsoft Edge 114, you can detect when your PWA runs in the sidebar in Microsoft Edge by using User-Agent Client Hints.
To learn more, check out these resources:
Detect usage in the sidebar, in Build a PWA for the sidebar in Microsoft Edge.
Detecting Microsoft Edge from your website.
What's New in Microsoft Edge 112
Starting with Microsoft Edge 112, Progressive Web Apps can experimentally opt-in to be pinned to the sidebar in Microsoft Edge.
The sidebar in Microsoft Edge allows users to easily access popular websites and utilities alongside their browser tabs. The content in the sidebar augments the user's primary task by enabling side-by-side browsing and minimizing the need to switch contexts between browser tabs.
To make your PWA ready for pinning to the sidebar in Microsoft Edge, use the edge_side_panel manifest member.

To learn more, see Build a PWA for the sidebar in Microsoft Edge.
What's New in Microsoft Edge 108
Microsoft Edge 108 introduces experimental support for Progressive Web Apps to define their own widgets in the Widgets Board in Windows 11.
Widgets are defined in your PWA manifest file, by using the widgets manifest member.
Widgets are displayed by using Adaptive Cards templates, which makes widgets easy to create, and makes them easy to adapt to various operating system widgets dashboards in the future. Microsoft Edge also makes it possible to handle user actions on PWA widgets from your service worker file.
The following screenshot shows the Windows Widgets Board on the left and the PWAmp demo app on the right. The Widgets Board contains the PWAmp mini player widget, showing the current song that's playing in the PWAmp app:

To learn more, see Display a PWA widget in the Windows Widgets Board.
What's New in Microsoft Edge 105
Microsoft Edge 105 brings the following new features for Progressive Web Apps.
Window Controls Overlay API
The Window Controls Overlay API is now available by default, starting with Microsoft Edge 105. Use the Window Controls Overlay API to take control of the area that would normally be used by the title bar of an installed PWA window. The PWA code can use this area to render arbitrary web content such as a custom title area, navigation buttons, or a menu bar.
This feature makes PWAs that are installed on desktop operating systems such as Windows, macOS, and Linux, more similar to their native counterparts.

See also:
Display content in the title bar area using Window Controls Overlay.
Closing a 30 pixel gap between native and web.
Window Controls Overlay API on MDN.
Notifications from a PWA are now indicated as coming from the
PWA
In earlier versions, the notifications that were created by PWAs looked like they were emitted by Microsoft Edge.
With Microsoft Edge 105, notifications from a PWA now display the name and icon of the PWA instead of displaying "Microsoft Edge":

What's New in Microsoft Edge 101
Microsoft Edge 101 introduces the sidebar search feature for PWAs. Sidebar search lets users of installed PWAs search for and browse web content in a sidebar located in the PWA window.
To access sidebar search:
1. Click the Open sidebar search button in the title bar of the installed PWA:

2. Type a search query, and then press Enter. The search results are displayed, and you can go to a web page from there:

What's New in Microsoft Edge 100
Microsoft Edge Dev and Canary channels moved to version 100 on February 9, 2022. In this milestone, we're testing the following new web app features. We expect to see these new features rolling out to Stable following the testing period.
App Sync
The sync service that powers features including Favorites, Settings, History, and more has been expanded to include your installed web apps - that is, PWAs and websites installed as apps. The sync service works when you are signed in to your profile and have opted in to syncing.
As we test and gradually release this feature over the coming weeks, users who have opted in to sync will start to see a Your available apps section in the edge://apps page, and a redesigned Apps menu.
The Your available apps section
The Your available apps section will show any apps you've installed on other devices with the same signed-in profile, that aren't currently installed in the Microsoft Edge instance you're using. The available apps will be shown in their own section with gray icons. Click the Install button on an app to install the app on that device:

App sync is available on desktop devices only, at this stage. To keep your apps in sync across devices, adding an app on one device will add it to the Your available apps section on other devices. Uninstalling an app on one device will remove it from other devices.
Redesigned Apps menu
In Microsoft Edge, the Apps command in the Settings and more menu is being redesigned:
 The Apps menu icon can be added to the toolbar, for quick access.
 The popup menu can be pinned open as a sidebar to show your apps alongside web content.
 Customizable view and sort options have been added, along with a My available apps section to support the App Sync feature.
Users can show the Apps menu icon on the toolbar, for quick access:

Users can pin the Apps menu open as a sidebar:

Users can choose between a list or grid view:

Users can choose the sort order of their apps:

What's New in Microsoft Edge 97
Microsoft Edge version 96 is scheduled to become the Stable release on November 18, 2021. Microsoft Edge version 97 will move from Dev to Beta preview channel following that date.
Store apps registered as URL handlers hide custom tab UI
Store-installed PWAs that are participating in the URL Handlers origin trial will no longer show the Chrome Custom Tab (CCT) when redirecting from the PWA's domain to a matching domain name with a different top-level domain (TLD). This redirecting often happens in apps with locale-specific domains; for example, redirecting from
contoso.com to contoso.ca for users in Canada.
What's New in Microsoft Edge 96
URL Protocol Handlers moves to Stable
The origin trial has been concluded. The URL Protocol Handlers capability is now shipping in Microsoft Edge 96 Stable.
See also:
Protocol handlers origin trial
Handle protocols in a PWA
URL protocol handler registration for PWAs in Chrome Dev > Web Platform > Best Practices.
New hub design for managing your installed web apps
Microsoft Edge Canary reached version 96 on October 5, 2021. With a subset of our users, we're testing a new design to better manage your installed web apps. When you go to edge://apps in your browser, it now displays a redesigned hub that lists installed PWAs and websites as apps.
Sort order
You can sort your apps by any of the following:
Recently used.
Alphabetically, based on title.
Date of installation.
List view or grid view
You can arrange apps in a list or grid view, by using the View as dropdown list. In this image, Grid view is selected:

To zoom: right-click > Open image in new tab.
Pin apps, create shortcuts to apps, run app on login
You can easily pin apps to the taskbar or Start menu. You can create a shortcut, and enable apps to run on user login.
App details page
There's now an app details page, which provides way to easily access the following:
Permissions and privacy details for the associated origin.
More details about the application.
The app details page:

What's New in Microsoft Edge 95
Microsoft Edge version 95 moved to Beta channel on September 28, 2021. The origin trials remain active for the following features:
Window Controls Overlay for desktop PWAs.
URL Handlers.
We expect the protocol handlers origin trial to end on October 21, 2021.
What's New in Microsoft Edge 94
Microsoft Edge version 94 moved to Stable on September 23, 2021. This release cycle was short-just 3 weeks from Microsoft Edge 93 Stable to Microsoft Edge 94 Stable, as we snapped to the new 4-week release cycle. This new release cadence matches the new cadence of Chromium milestones, described in Speeding up Chrome's release cycle.
Due to the shortened release cycle of Microsoft Edge version 94, we focused on stabilizing the release cycle logistics, and we shifted feature development to Microsoft Edge version 95.
The origin trials remain active for the following features:
Window Controls Overlay for desktop PWAs.
URL Handlers.
We expect the protocol handlers origin trial to end with Microsoft Edge version 94 as we take final feedback and get ready to move the protocol handlers feature to Stable. In case you are enrolled in the origin trial for protocol handlers, we plan to end the trial period after Microsoft Edge version 94. We'll then determine when this feature will become Stable.
What's New in Microsoft Edge 93
Microsoft Edge version 93 became the Stable channel of Microsoft Edge on September 2, 2021. This article lists updates we made to Progressive Web Apps (PWAs) from both a developer and consumer point of view.
Measure usage of your Store-installed PWA
Microsoft Edge now includes a referrer header with the request for the first navigation of your Microsoft Store-installed PWA.
This feature was first introduced in Microsoft Edge version 91, and we shipped a bug fix in Microsoft Edge version 93.
Learn more in Publish a PWA to the Microsoft Store.
Window Controls Overlay origin trials
To have more control over the title bar area that's currently displayed in standalone display mode, you may want to experiment with Window Controls Overlay. Window Controls Overlay (WCO) is a set of features that work together to provide just the essential controls needed for the app window. This layout frees up more space for the web content layer. WCO is available for installed desktop PWAs.
See Display content in the title bar area using Window Controls Overlay.
2023 update: This feature is no longer an origin trial, and is available to all users, so thefollowing no longer applies: Register your origin for the Web App Window Controls Overlay trial at Microsoft Edge Origin Trials.
2024 update: Starting with Microsoft Edge 121, in DevTools, you can simulate the
Window Controls Overlay feature for a Progressive Web App (PWA), without having to install the PWA. See Simulate the Window Controls Overlay API without installing your PWA.
URL Handlers origin trial
Developers can now use the experimental feature Web App URL Handlers, in an origin trial. This feature allows the registration of an installed PWA to open links from other apps that refer to its scope.
2023 update: This feature is no longer an origin trial, and has been removed, so the following no longer applies, and the PWA URL Handlers feature was removed from the Chromium browser engine: Register your domain for the Web App URL Handlers trial at Microsoft Edge Origin Trials.
See also:
Handle links to a PWA
PWAs as URL Handlers
Support for the Share API on macOS
We have implemented support for the navigator.share API for macOS. The feature is rolling out to stable Microsoft Edge browsers on macOS over the coming weeks.
Learn more about the navigator.share() API.
What's New in Microsoft Edge 92
Microsoft Edge version 92 became the stable channel of Microsoft Edge on July 22, 2021. This article lists updates we made to Progressive Web Apps (PWAs) from both a developer and consumer point of view.
Protocol handlers origin trial
You can now register your PWA to handle specific protocols with the host operating system. Learn more about using protocol handlers with your PWA at Handle protocols in a PWA.
2023 update: This feature is no longer an origin trial, and is available to all users, so the following no longer applies: The Windows trial for protocol handlers is now available. You can register your origin for the Web App Protocol Handler trial at Microsoft Edge Origin
Trials.
Streamlined App Info menu
When a user selects the ellipses (...) button in the app's title bar, the App info menu is displayed. We've updated the App info menu and streamlined the user experience in the following ways, to provide a user experience that's more like a desktop app than a browser UI:
 Moved the app Publisher information to the top level and made it the first thing a user sees:



Post-install flyout dialog
After a PWA is installed from the Microsoft Edge browser on Windows, users can now select from four options to easily launch their apps:
Pin to taskbar
Pin to Start
Create Desktop shortcut
Auto-start on device login
For convenience, this flyout dialog is shown the first time the app is launched:

This feature is being rolled out gradually to all users. In the meantime, if you'd like to use this feature, go to edge://flags and enable the flag Web Apps Post Install Dialog.
Restore Web Apps
Installed sites and PWAs that were running before an unexpected shutdown will now restore (that is, they will be restarted) when the system recovers.
An unexpected shutdown can occur due to process failure, system restart, or power outage. Before this change, installed sites and PWAs had indeterminate behavior upon system restore.
See also
 Use origin trials in Microsoft Edge

Feedback
Was this page helpful? 
Get started with PWAs
Article • 12/11/2024
Progressive Web Apps (PWAs) are applications that you build by using web technologies, and that can be installed and can run on all devices, from one codebase.
To learn more about what PWAs are and their benefits, see Overview of Progressive Web Apps (PWAs).
This guide is targeted at web developers who want to learn to build PWAs. To learn more about installing and running PWAs, see Installing a PWA in Use PWAs in Microsoft Edge.
In this guide, you first learn how PWAs work, then create your first simple PWA, which will be a temperature converter app, and then learn more about how to make great PWAs.
You can find the final source code of the app you will be building in this guide on the PWA getting started demo app repository.
Prerequisites
Install Visual Studio Code to edit your PWA source code.
Install Node.js to use it as your local web server.
Working knowledge of HTML, CSS, and JavaScript is also a plus.
The architecture of a PWA
Progressive Web Apps are written using the programming languages of the web: HTML, CSS, and JavaScript, and are distributed to your users by using web servers.
To make your app available to users, you deploy it on a web server that's accessible via HTTPS. Your server contains:
 Back-end code: the endpoints needed by your app, when connected to the internet, to retrieve dynamic content that may be stored in a database on your server.
 Front-end code: the resources needed for the app to be installed on the user's device, such as HTML, CSS, and JavaScript code.
Your back-end code can use the server-side languages of your choice such as ASP.NET, Java, Node.js, or PHP. Note, however, that server-side endpoints may not even be required depending on the app your're building. The PWA that you create in this tutorial doesn't have any server-side code, because the app exclusively runs on the device it's installed on, and doesn't need any server-side data.
Your front-end code uses HTML, CSS, JavaScript, and a JSON manifest only.
You use HTML to describe the content in your app, such as the text, images, text fields, or buttons that appear in the user interface. You then use CSS to organize the HTML content in a layout, and provide styles to elements. You use JavaScript to add user interactions to your user interface. And finally, you use a JSON manifest file that describes your application to the host operating system.
Although your front-end code runs by using the device's web browser, the browser user interface might not be visible, because your app can choose to run in a standalone window.
On top of the user interface code, you can also use JavaScript to make your application faster, more reliable, and network-independent by using a service worker file. Finally, your front-end code also contains a JSON manifest file that describes your application to the host operating system.
The following diagram shows the high-level architecture of a PWA. The web server is on one side of the PWA, and the device is on the other side. The device contains the frontend code, including HTML, CSS, JavaScript, the service worker, and the manifest:

Step 1 - Start a web server
PWAs are distributed to users by using web servers. Once your app is ready, deploy it to the web by using a web hosting provider. You can then update your app simply by deploying the new version to your web server again.
To start developing your PWA, you can use a local web server instead. To start a local server:
1. Create a new folder on your computer where the web server will run.
You can do this by opening a command prompt and typing:
shellcd path/to/your/dev/folder mkdir MySamplePWA cd MySamplePWA2. Start the server by using the http-server Node.js library:
shellnpx http-serverYou now have a simple local web server running at http://localhost:8080.
Key parts of the Progressive Web Apps platform, such as service workers, require using
HTTPS. When your PWA goes live, you must publish it to an HTTPS URL. Many hosts use HTTPS by default, but if your host doesn't offer HTTPS, Let's Encrypt offers a free alternative for creating the necessary certificates.
For example, you can create an Azure free account. If you host your website on the Microsoft Azure App Service, it's served over HTTPS by default.
You can also host your website on GitHub Pages which supports HTTPS too.
For debugging purposes, Microsoft Edge also permits a localhost web server to use the PWA APIs without HTTPS.
Step 2 - Create your app start page
So far, there is no content available on your web server. Start by creating the first page that users will see when they access your temperature converter app.
1. Open Visual Studio Code, select File > Open Folder and then select the MySamplePWA directory you created in the previous step.
2. Create a new file in the project by pressing Ctrl+N, add the following content, and save the file as index.html:
HTML<!DOCTYPE html>
<html lang="en-US" dir="ltr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="shortcut icon" href="https://c.smicrosoft.com/favicon.ico?v2" />
    <title>Temperature converter</title>
  </head>
  <body>
    <h1>Temperature converter</h1>
  </body>
</html>
The app runs in the browser for now, and can't be installed. To make the app installable, the app needs a web app manifest.
Step 3 - Create a web app manifest
A web app manifest is a JSON file containing metadata about your app, such as its name, description, icons, and the various operating system features it uses.
See:
 The web app manifest in Making PWAs installable at MDN > References > Progressive web apps > Guides.
 Web app manifests at MDN > References.
To add an app manifest to your app:
1. In Visual Studio Code, press Ctrl+N to create a new file with the following content, and save the file as manifest.json.
JSON{
    "lang": "en-us",
    "name": "Temperature converter app",
    "short_name": "Temperature converter",
    "description": "A basic temperature converter application that can convert to and from Celsius, Kelvin, and Fahrenheit",
    "start_url": "/",
    "background_color": "#2f3d58",
    "theme_color": "#2f3d58",
    "orientation": "any",
    "display": "standalone",
    "icons": [
        {
            "src": "/icon512.png",
            "sizes": "512x512"
        }
    ]
}2. Add a 512x512 pixel app icon image named icon512.png to your project. You can use the sample image for testing purposes.
3. In Visual Studio Code, open index.html, and add the following code inside the <head> tag.
HTML<link rel="manifest" href="/manifest.json">The above code snippet links the new web app manifest file to your website.
Your VS Code project should now look somewhat like this:

Step 4 - Continue building the user interface of your app
Now that your app has a web app manifest file, and a start page, it's time to build out the main app functionality.
In this step of the tutorial, we'll create a temperature unit conversion app.
1. To create the main user interface content, copy the following HTML code and paste it into the index.html file, replacing the <h1> HTML tag:
HTML<form id="converter">
  <label for="input-temp">temperature</label>
  <input type="text" id="input-temp" name="input-temp" value="20" />
  <label for="input-unit">from</label>
  <select id="input-unit" name="input-unit">
    <option value="c" selected>Celsius</option>
    <option value="f">Fahrenheit</option>
    <option value="k">Kelvin</option>   </select>
  <label for="output-unit">to</label>
  <select id="output-unit" name="output-unit">
    <option value="c">Celsius</option>
    <option value="f" selected>Fahrenheit</option>
    <option value="k">Kelvin</option>  </select>
  <output name="output-temp" id="output-temp" for="input-temp inputunit output-unit">68 F</output>
</form>
The above HTML code contains a form with multiple input elements that your app will use to convert a temperature value from one unit to another unit.
2. To make the converter work, you use JavaScript code. Create a new file named converter.js in your project and add the following code to it:
JavaScriptconst inputField = document.getElementById('input-temp'); const fromUnitField = document.getElementById('input-unit'); const toUnitField = document.getElementById('output-unit'); const outputField = document.getElementById('output-temp'); const form = document.getElementById('converter');
function convertTemp(value, fromUnit, toUnit) {   if (fromUnit === 'c') {     if (toUnit === 'f') {       return value * 9 / 5 + 32;     } else if (toUnit === 'k') {       return value + 273.15;
    }     return value;
  }   if (fromUnit === 'f') {     if (toUnit === 'c') {       return (value - 32) * 5 / 9;     } else if (toUnit === 'k') {       return (value + 459.67) * 5 / 9;
    }     return value;
  }   if (fromUnit === 'k') {     if (toUnit === 'c') {       return value - 273.15;     } else if (toUnit === 'f') {       return value * 9 / 5 - 459.67;
    }     return value;
  }   throw new Error('Invalid unit');
}
form.addEventListener('input', () => {   const inputTemp = parseFloat(inputField.value);   const fromUnit = fromUnitField.value;   const toUnit = toUnitField.value;  const outputTemp = convertTemp(inputTemp, fromUnit, toUnit);   outputField.value = (Math.round(outputTemp * 100) / 100) + ' ' + toUnit.toUpperCase(); });
3. Open the index.html file again and add the following code after the closing </form> tag, to load the JavaScript file:
HTML<script src="converter.js"></script>4. Now add some CSS style to the app, to make it more visually appealing. Create a new file called converter.css in your project and add the following code to it:
csshtml {
  background: rgb(243, 243, 243);
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;   font-size: 15pt;
}
html, body {   height: 100%;   margin: 0;
}
body {   display: grid;   place-items: center; }
#converter {   width: 15rem;   padding: 2rem;   border-radius: .5rem;   box-shadow: 0 0 2rem 0 #0001;   display: flex;   flex-direction: column;   align-items: center; }
#converter input, #converter select {   font-family: inherit;   font-size: inherit;   margin-block-end: 1rem;   text-align: center;   width: 10rem;}
#converter #output-temp {   font-size: 2rem;   font-weight: bold;
}
5. Open index.html again and reference the new CSS file in it by adding the following code inside the <head> tag:
HTML<link rel="stylesheet" href="converter.css">Your Visual Studio Code project should now look something like this:


Your app does something useful now, and it can be installed as a standalone app by users. Before installing the app, create a service worker to make the app work offline.
Step 5 - Add a service worker
Service workers are a key technology that help make PWAs fast and independent of network conditions.
A service worker is a specialized web worker that can intercept network requests from your PWA, and enables scenarios such as:
Offline support, including intermittent connections.
Advanced caching.
Running background tasks such as receiving PUSH messages, adding badges to the app icon, or fetching data from a server.
See Service Worker API at MDN.
A PWA doesn't need to have a service worker for Microsoft Edge to be able to install the app. However, we recommend adding a service worker to your PWA to make it faster, and to make your PWA more reliable, such as when your device has an intermittent network connection or is offline.
A service worker is defined in a JavaScript file that's loaded by your app. To add a service worker to your project:
1. In Visual Studio Code, create a new file (Ctrl+N), add the following content, and save the file as sw.js:
JavaScriptconst CACHE_NAME = `temperature-converter-v1`;
// Use the install event to pre-cache all initial resources. self.addEventListener('install', event => {   event.waitUntil((async () => {     const cache = await caches.open(CACHE_NAME);     cache.addAll([
      '/',
      '/converter.js',       '/converter.css'
    ]);
  })()); });
self.addEventListener('fetch', event => {   event.respondWith((async () => {     const cache = await caches.open(CACHE_NAME);
    // Get the resource from the cache.     const cachedResponse = await cache.match(event.request);     if (cachedResponse) {       return cachedResponse;
    } else {         try {           // If the resource was not in the cache, try the network.           const fetchResponse = await fetch(event.request);
          // Save the resource in the cache and return it.           cache.put(event.request, fetchResponse.clone());           return fetchResponse;
        } catch (e) {
          // The network failed.
        }
    }
  })());
});The sw.js file will act as your PWA's service worker. The code above listens to the install event, which is triggered when the user installs your app, and uses it to
cache the resources that your app needs to function offline, such as the initial HTML page, the converter JavaScript file, and the converter CSS file.
The code also intercepts fetch events, which happen every time your app sends a request to the server, and applies a cache-first strategy. The service worker returns cached resources so your app can work offline, and if that fails attempts to download from the server.
2. Open index.html and add the following code at the end of the <body> tag to register your service worker:
HTML<script> if('serviceWorker' in navigator) {   navigator.serviceWorker.register('/sw.js', { scope: '/' }); }
</script>To confirm that your service worker is running:
1. In Microsoft Edge, go to http://localhost:8080.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. Open the Application tool, then click Service workers. If the service worker isn't displayed, refresh the page.

4. View the service worker cache by expanding Cache Storage and selecting temperature-converter-v1. All of the resources cached by the service worker should be displayed. The resources cached by the service worker include the app icon, app manifest, and the initial page.

5. Try your PWA as an offline app. In DevTools, open the Network tool, and change the Throttling value to Offline.
6. Refresh your app. It should still appear correctly in the browser, using cached resources served by the service worker.

Step 6 - Install the app
Now that your app has a web app manifest, supporting browsers can install your app as a PWA.
In Microsoft Edge, once you refresh your app, the App available button appears in the address bar. Clicking the App available button prompts you to install the app locally.

Click Install to install the app locally. After the installation completes, your app is displayed in its own window, and its own application icon in the Taskbar.

To learn more about installing PWAs, see Use PWAs in Microsoft Edge.
Next steps
The temperature converter PWA that you built so far is only a small sample of what PWAs can do. The previous steps are important prerequisites for any PWA, but there are important best practices that will make your PWA feel like a real app when installed.
When users install applications, they have certain expectations of what these applications can do; for example:
Users expect apps to work offline.
Users expect apps to integrate within the operating system, such as by handling files.
Users expect apps to perform non-trivial computing tasks.
Users expect to find apps in app stores.
To build a great PWA, see Best practices for PWAs.
See also
Local:
Overview of Progressive Web Apps (PWAs)
Use PWAs in Microsoft Edge
Installing a PWA in Use PWAs in Microsoft Edge. Best practices for PWAs
MDN:
Web app manifests at MDN.
Service Worker API at MDN.
External Microsoft:
PWA getting started demo app repository
Visual Studio Code
Azure free account
Microsoft Azure App Service
External:
Getting Started with Progressive Web Apps (Workshop).
GitHub Pages

Feedback
Was this page helpful? 

Use PWAs in Microsoft Edge
Article • 03/28/2023
Any device that's running Microsoft Edge gets full access to the technologies and characteristics of Progressive Web Apps (PWAs). On Windows, PWAs are just like other apps.
Installing a PWA
When Microsoft Edge determines that a website is an installable Progressive Web App (PWA), the App available () icon appears in the address bar.
1. Click the App available () icon to install the PWA.

2. Click Install to complete the installation and run the PWA in Windows.
Many PWAs are also present on the Microsoft Store, and can be installed directly from there, without needing to open Microsoft Edge.
To install a PWA from the Microsoft Store, select Get on the app page:

Managing PWAs
To find the list of installed Progressive Web Apps (PWAs) in Microsoft Edge, go to edge://apps. On this page, you can open any app by clicking Open. To learn more about
an app or uninstall it, click Details.

You can also manage PWAs in the Apps & features system setting, like other Windows apps.
1. In Windows, select Start > Settings.
2. Type "apps" in the Find a setting search field, and then select Add or remove programs.
3. Find the PWA you want to manage in the list of apps and select it to find more information or remove it.

Windows integration
Progressive Web Apps (PWAs) are displayed like native apps on Windows. They appear in the Taskbar (where they can be pinned), in the Start menu, or when switching between apps with Alt+Tab.
PWAs and native apps can reside side-by-side in the Taskbar (PWAs are indicated here by a red box):

PWAs and native apps are displayed when switching between windows with Alt+Tab (PWAs are indicated here by a red box):

PWAs can also expose common tasks to users as shortcuts that appear in the app's right-click menu:

Learn more about defining shortcuts.
PWAs can also display notifications in the operating system's own notification service. This helps users re-engage with your app. Learn more about using notifications, push messages, and badges.
Starting PWAs when the user signs in
PWAs on Windows can launch automatically when the user signs in, so they can immediately engage with the app.
To set an already installed PWA to automatically start when you sign in to Windows:
1. Open Microsoft Edge.
2. Go to edge://apps. The Apps page lists the installed apps.
3. On the app you want to configure, click the More options () button and then select Auto-start on device login.

During installing a PWA, users are also given a chance to set a PWA to automatically start.
To set a PWA to automatically start when you sign in to Windows, while installing the PWA:
1. During installing an app, in the post-installation dialog, select Auto-start on device login:

App info menu
When a user selects the ellipses (...) button in the title bar of a Progressive Web Apps (PWA), the App info menu is displayed:

The App info menu contains useful information about the app, such as:
The app icon, name, and publisher.
The various app permissions that have been granted.
Privacy information such as the number of cookies used.
Lists of extensions and tools that can be used in the app.

Feedback
Was this page helpful? 

Display content in the title bar area using Window Controls Overlay
Article • 12/11/2024
A Progressive Web App (PWA) that's installed on the desktop can display content where the title bar normally is, to make the PWA feel more native, by using the Window Controls Overlay API.
The Window Controls Overlay API does the following:
Allows you to display web content over the entire surface area of the app.
Moves the critical system-required window controls into an overlay.
Makes it possible for your content to stay clear of this overlay.
A Progressive Web App (PWA) can define how it should be displayed on mobile platforms, by using the display member in the web app manifest file. However, to create an immersive, native-like experience, desktop PWAs can use another approach.
By default, a PWA installed on desktop can display content in an area that starts immediately below the reserved title bar area:

Displaying content where the title bar normally is can help PWAs feel more native. Many desktop applications, such as Visual Studio Code, Microsoft Teams, and Microsoft Edge already do this:

Enable the Window Controls Overlay in your app
First, enable the Window Controls Overlay feature in your app's web app manifest file.
To do this, in the manifest file, set the display_override property:
JSON{
  "display_override": ["window-controls-overlay"]
}See also:
	display_override	 at MDN > References > Web app manifests.
	Web app manifests	 at MDN > References.
The web app manifest	 in Making PWAs installable at MDN > References > Progressive web apps > Guides.
Toggle the title bar
When the Window Controls Overlay feature is enabled, the user can choose to have the title bar or not, by clicking the title bar toggle button:

Your code can't assume that the window controls overlay is displayed, because:
The user can choose whether to display the title bar.
Your app can also run in a web browser or on a mobile device, as well as running as a desktop app.
Therefore, your code needs to react to title bar geometry changes. To learn more, see React to overlay changes.
Use CSS environment variables to stay clear of the overlay
The env() CSS function can be used to access environment variables that the user agent defines.
Four environment variables are added by the Window Controls Overlay feature:
ﾉ Expand table
VariableDescriptiontitlebar-area-xDistance, in px, of the area normally occupied by the title bar from the left side of the windowVariableDescriptiontitlebar-area-yDistance, in px, of the area normally occupied by the title bar from the top side of the windowtitlebar-areawidthWidth of the title bar area, in pxtitlebar-areaheightHeight of the title bar area, in pxYou can use these environment variables to position and size your own content where the title bar would normally appear, when the window controls overlay feature is disabled:
css#title-bar {   position: fixed;   left: env(titlebar-area-x, 0);   top: env(titlebar-area-y, 0);   height: env(titlebar-area-height, 50px);   width: env(titlebar-area-width, 100%);
}Using position: fixed; makes sure your title bar does not scroll with the rest of the content and instead stays aligned with the window controls overlay.
Knowing where the overlay is and how big it is is important. The overlay might not always be on the same side of the window; on macOS, the overlay is on the left side, but on Windows, the overlay is on the right side. Also, the overlay might not always be the same size.
The env() CSS function takes a second parameter that's useful for defining the position of your app content when the window controls overlay feature is missing or disabled.
Make a region a drag handle for the window
When the title bar is hidden, only the system-critical window controls remain visible (the Maximize, Minimize, Close, and App Info icons). This means that there is very little space available for users to move the application window around.
You can use the -webkit-app-region CSS property to offer more ways for users to drag the app. For example, if your app has its own titlebar, you can turn its titlebar into a window drag handle:
css#title-bar {   position: fixed;   left: env(titlebar-area-x, 0);   top: env(titlebar-area-y, 0);   height: env(titlebar-area-height, 50px);   width: env(titlebar-area-width, 100%);
  -webkit-app-region: drag;
}React to overlay changes
A user can toggle the title bar or change the window dimensions while the app is running. Knowing when these things happen can be important for your app. Your app might need to rearrange some of the content that's displayed in the title bar, or rearrange the layout elsewhere on the page.
To listen for changes, use the geometrychange event on the navigator.windowControlsOverlay object. To detect whether the title bar is visible, use
the visible property on the navigator.windowControlsOverlay object.
Note that the geometrychange is fired very frequently when the user resizes the window. To avoid running layout-changing code too often and causing performance problems in your app, use a debounce function to limit how many times the event is handled. See The Difference Between Throttling and Debouncing.
JavaScriptconst debounce = (func, wait) => {   let timeout;   return function executedFunction(...args) {     const later = () => {       clearTimeout(timeout);       func(...args);
    };     clearTimeout(timeout);     timeout = setTimeout(later, wait);
  }; };
if ('windowControlsOverlay' in navigator) {   navigator.windowControlsOverlay.addEventListener('geometrychange', debounce(e => {
    // Detect if the Window Controls Overlay is visible.
    const isOverlayVisible = navigator.windowControlsOverlay.visible;    // Get the size and position of the title bar area.     const titleBarRect = e.titlebarAreaRect;
    console.log(`The overlay is ${isOverlayVisible ? 'visible' : 'hidden'}, the title bar width is ${titleBarRect.width}px`);
  }, 200));
}Demo app
1DIV is a PWA demo app that uses the Window Controls Overlay feature.
1. In Microsoft Edge, open the 1DIV demo app in a new window or tab.
2. In the Address bar, click the App available. Install 1DIV () button. The Install 1DIV app dialog opens.
3. Click the Install button. The 1DIV app opens in its own window, with the App installed dialog open:

4. Click the Close (X) button of the dialog. (Or, select or clear checkboxes and then click the Allow button.)
The app's title bar contains at least the following window controls:
ﾉ Expand table
IconTooltipHide title barSettings and moreMinimizeRestoreClose5. In the title bar, click the Hide title bar () button.
The app now displays content all the way to the top of the window frame, where the title bar used to be:

The top area of the app is a drag handle, to let users move the window.
The source code for this demo app is in the 1DIV repo.
 The manifest.json source file declares the app's use of the Window Controls Overlay feature.
 The app.js source file uses the navigator.windowControlsOverlay object.
 The app.css source file uses the titlebar-area-* CSS environment variables.
Preview the custom overlay without installing the PWA
In Microsoft Edge DevTools, in the Application tool, you can simulate the Window
Controls Overlay (WCO) feature, without having to install the PWA first and enable the WCO feature. By simulating the WCO feature from within DevTools, you can test CSS code changes for your title bar area more quickly than by re-installing the revised PWA.
The simulated overlay is a static image. The values of the CSS variables env(titlebararea-left), env(titlebar-area-top), env(titlebar-area-width), and env(titlebararea-height) are set to match the platform that you select.
See Simulate the Window Controls Overlay API without installing your PWA.
See also
 Simulate the Window Controls Overlay API without installing your PWA - DevTools feature.
Customize the window controls overlay of your PWA's title bar Breaking Out of the Box display_override
Feedback
Was this page helpful?  Yes  No
Share content with other apps
Article • 05/03/2023
Sharing content between apps was made popular by mobile devices where manipulating files or copying content is less intuitive than on desktop operating systems. For example, on mobile, it's common to share an image with a friend by sending a text message. But sharing content isn't reserved to mobile devices; it's possible to share between apps on Windows, too.
There are two directions to sharing content, and both directions can be handled by Progressive Web Apps (PWAs):
ﾉ Expand table
DirectionDescriptionSharing contentTo share content, a PWA generates content (such as text, links, or files) and hands off the shared content to the operating system. The operating system lets the user decide which app they want to use to receive that content.Receiving shared contentTo receive content, a PWA acts as a content target. The PWA is registered with the operating system as a content-sharing target.PWAs that register as share targets feel natively integrated into the OS, and are more engaging to users.
Sharing content
PWAs can use the Web Share API to trigger displaying the operating system share dialog.

below. The navigator.share function accepts an object that should have at least one of the following properties:
title: a short title for the shared content.
text: a longer description for the shared content. url: the address of a resource to be shared. files: an array of files to be shared.
JavaScriptfunction shareSomeContent(title, text, url) {   if (!navigator.share) {     return;
  }
  navigator.share({title, text, url}).then(() => {     console.log('The content was shared successfully');
  }).catch(error => {     console.error('Error sharing the content', error);
  });
}In the above code, we first check whether the browser supports Web sharing, by testing if navigator.share is defined. The navigator.share function returns a Promise object that resolves when sharing is successful, and rejects when an error occurred.
Because a Promise is used here, the above code can be rewritten as an async function, as follows:
JavaScriptasync function shareSomeContent(title, text, url) {   if (!navigator.share) {     return;
  }
  try {     await navigator.share({title, text, url});
    console.log('The content was shared successfully');
  } catch (e) {     console.error('Error sharing the content', e);
  }
}On Windows, the above code will trigger the share dialog, allowing the user to pick an app to receive the shared content. The share dialog is shown below:

Once the user has selected an app to receive the shared content, it is up to this app to handle it any way it chooses. For example, an email app might use the title as the email subject, and use the text as the email body.
Sharing files
The navigator.share function also accepts a files array to share files with other apps.
It is important to test whether sharing files is supported by the browser before sharing them. To check whether sharing files is supported, use the navigator.canShare function:
JavaScript
function shareSomeFiles(files) {   if (navigator.canShare && navigator.canShare({files})) {     console.log('Sharing files is supported');
  } else {     console.error('Sharing files is not supported');
  }
}The files sharing object member must be an array of File objects. Learn more about the File interface
One way to construct File objects is:
1. First, use the fetch API to request a resource.
2. Then, use the returned response to create a new File.
That approach is shown below.
JavaScriptasync function getImageFileFromURL(imageURL, title) {   const response = await fetch(imageURL);   const blob = await response.blob();   return new File([blob], title, {type: blob.type});
}In the above code:
1. The getImageFileFromURL function fetches an image by using a URL.
2. The response.blob() function converts the image into a binary large object (BLOB).
3. The code creates a File object by using the BLOB.
Demo of sharing content
PWAmp is a demo PWA that uses the navigator.share function to share text and links.
To test the Sharing feature:
1. Go to PWAmp.
2. In the right side of the Address bar, click the App available. Install () button to install PWAmp as a PWA.
3. In the installed PWAmp PWA, import a local audio file (by dragging it onto the app window). For example, if you've cloned the MicrosoftEdge / Demos repo, you
have a local copy of .mp3 files in the (Demos repo > pwamp/songs directory), such as C:\Users\username\GitHub\Demos\pwamp\songs.
4. Next to the newly imported song, click the Song actions (...) button, and then select Share. The Windows Share dialog is displayed:

5. Pick an app in which to share the content.
You can find the PWAmp source code on GitHub. The PWAmp app uses the Web Share API in the app.js source file.
Receiving shared content
By using the Web Share Target API, a PWA can register to be displayed as an app in the system share dialog. The PWA can then use the Web Share Target API to handle shared content coming in from other apps.

Register as a target
To receive shared content, the first thing to do is register your PWA as a share target. To register, use the share_target manifest member. Upon installation of your app, the operating system uses the share_target member to include your app in the system share dialog. The operating system knows what to do when your app is picked by the user, to share the content.
The share_target member must contain the necessary information for the system to pass the shared content to your app. Consider the following manifest code:
JSON{
    "share_target": {
        "action": "/handle-shared-content/",
        "method": "GET",
        "params": {
            "title": "title",
            "text": "text",
            "url": "url",
        }
    }
}When your app is selected by the user as the target for shared content, the PWA is launched. A GET HTTP request is made to the URL specified by the action property. The shared data is passed as the title, text, and url query parameters. The following request is made: /handle-shared-content/?title=shared title&text=shared text&url=shared url.
If you have existing code that uses other query parameter names, you can map the default title, text, and url query parameters to your other names. In the following example, the title, text, and url query parameters are mapped to subject, body, and address:
JSON{
    "share_target": {
        "action": "/handle-shared-content/",
        "method": "GET",
        "params": {
            "title": "subject",
            "text": "body",
            "url": "address",
        }    }
}
Handle GET shared data
To handle the data shared over the GET request in your PWA code, use the URL constructor to extract the query parameters:
JavaScriptwindow.addEventListener('DOMContentLoaded', () => {     console url = new URL(window.location);
    const sharedTitle = url.searchParams.get('title');     const sharedText = url.searchParams.get('text');     const sharedUrl = url.searchParams.get('url');
});Handle POST shared data
If the shared data is meant to change your app in any way, such as by updating some of the content that's stored in the app, you must use the POST method and define an encoding type with enctype:
JSON{
    "share_target": {
        "action": "/post-shared-content",         "method": "POST",
        "enctype": "multipart/form-data",
        "params": {
            "title": "title",
            "text": "text",
            "url": "url",
        }
    }
}The POST HTTP request contains the shared data, encoded as multipart/form-data. You can access this data on your HTTP server by using server-side code, but this won't work when the user is offline. To provide a better experience, use a service worker and access the data from the service worker by using a fetch event listener, as follows:
JavaScript
self.addEventListener('fetch', event => {     const url = new URL(event.request.url);
    if (event.request.method === 'POST' && url.pathname === '/post-sharedcontent') {         event.respondWith((async () => {             const data = await event.request.formData();
            const title = data.get('title');             const text = data.get('text');             const url = data.get('url');
            // Do something with the shared data here.
            return Response.redirect('/content-shared-success', 303);
        })());
    }
});In the above code:
1. The service worker intercepts the POST request.
2. Uses the data in some way (such as to store the content locally).
3. Redirects the user to a success page. This way, the app can work even if the network is down. The app can choose to only store the content locally, or can send the content to the server later, when connectivity is restored (such as by using Background Sync).
Handle shared files
Apps can also handle shared files. To handle files in your PWA, you must use the POST method and the multipart/form-data encoding type. Additionally, you must declare the types of files that your app can handle.
JSON{
    "share_target": {
        "action": "/store-code-snippet",
        "method": "POST",
        "enctype": "multipart/form-data",
        "params": {
            "title": "title",
            "files": [
                {
                    "name": "textFile",                    "accept": ["text/plain", "text/html", "text/css", 
                               "text/javascript"]
                }
            ]
        }
    }
}
The above manifest code tells the system that your app can accept text files with various MIME types. File name extensions, such as .txt, can also be passed in the accept array.
To access the shared file, use the request formData like before and use a FileReader to read the content, as follows:
JavaScriptself.addEventListener('fetch', event => {     const url = new URL(event.request.url);
    if (event.request.method === 'POST' && url.pathname === '/store-codesnippet') {         event.respondWith((async () => {             const data = await event.request.formData();
            const filename = data.get('title');             const file = data.get('textFile');
            const reader = new FileReader();             reader.onload = function(e) {                 const textContent = e.target.result;
                // Do something with the textContent here.
            };             reader.readAsText(file);
            return Response.redirect('/snippet-stored-success', 303);
        })());
    }
});See also
Integrate with the OS sharing UI with the Web Share API
Receiving shared data with the Web Share Target API
Define app shortcuts (long-press or right-click menus)
Article • 12/11/2024
App shortcuts let users accomplish common tasks more quickly and easily and can increase their engagement with an app.
On mobile devices, shortcuts can usually be accessed by long-pressing an app icon. On Windows, shortcuts are integrated as Jumplists. Jumplists define popup menus that appear when you right-click a tile in the Start menu, or right-click an icon in the taskbar.
Shortcuts on Microsoft Edge, on iOS:

A Jumplist (right-click menu) on the Webboard app, on Windows:

Progressive Web Apps (PWAs) can also define common tasks as shortcuts in the web app manifest. See Expose common app actions as shortcuts at MDN > References > Progressive web apps > How to.
Define shortcuts
Defining shortcuts is done by using the shortcuts manifest member. This member is an array that can contain multiple shortcuts. Each shortcut is essentially a URL that gets requested when the shortcut is used and the app is launched.
JSON{
    "shortcuts" : [
        {
            "name": "Today's agenda",
            "url": "/today",
            "description": "List of events planned for today"
        },
        {
            "name": "New event",
            "url": "/create/event"
        },
        {
            "name": "New reminder",
            "url": "/create/reminder"
        }
    ]
}The following properties can be used:
ﾉ Expand table
PropertyDetailsnameA string that is displayed to the user on Jumplists or the context menu.short_nameA string that is displayed when insufficient space exists to display the full name of the shortcut.descriptionA string that describes the purpose of the shortcut. The string can be accessed by assistive technology.urlThe URI in the web app that opens when the shortcut is activated.iconsA set of icons that represents the shortcut.To learn more, see shortcuts at MDN.
Debug shortcuts
You can test that your shortcuts are configured correctly by using the Application panel of DevTools.
To test that your shortcuts are configured correctly:
1. In Microsoft Edge, go to your app.
2. To open DevTools, right-click the webpage, and then select Inspect. Or, press
Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
4. In the Application tool, select Manifest.

To learn more about using the Application panel to debug PWAs, see Debug a Progressive Web App (PWA).
See also
 Expose common app actions as shortcuts at MDN > References > Progressive web apps > How to.

Feedback
Was this page helpful? 

Display a PWA widget in the Windows Widgets Board
Article • 10/11/2023
Various operating systems have widgets dashboards that let users read content and perform tasks. Examples of this include Android Home Screen widgets, macOS Dashboard and Today Panel widgets, the Apple Touch Bar, Samsung Daily Cards, Mini App widgets, and smart watch app companions.
On Windows 11, widgets appear in the Widgets Board, which you open from the left side of the taskbar:

In Windows 11, Progressive Web Apps (PWAs) can define widgets, update them, and handle user interactions within them.
Requires building a custom widget for the PWA
An existing PWA cannot simply be placed into the widget dashboard as-is, like you can with the Microsoft Edge Sidebar. Instead, you need to build a custom widget experience that's appropriate for the widget host, which currently is the Windows 11 Widgets Board. (There may be other widget hosts in the future.) The Windows 11 Widgets Board requires widgets to be built by using Adaptive Card templates instead of HTML and JavaScript, so the widget has to be designed separately from the rest of the app's UI.
See also:
 Build a PWA for the sidebar in Microsoft Edge
To build a PWA-driven widget and deliver it via the Microsoft Store, no C++/C# code is required. Once you've produced the widget, and can successfully install and run the widget from a public endpoint, you can package the app by using PWABuilder.com and ship the app to the Microsoft Store without requiring any additional code. The PWA backing the widget must be installable from a public endpoint, because PWABuilder doesn't support packing apps from localhost.
See also:
 Publish a PWA to the Microsoft Store
Install WinAppSDK and enable Developer
Mode
To enable developing and testing widgets on your local machine:
Install WinAppSDK 1.2.
Enable Developer Mode in Windows 11:
1. Open Settings.
2. In the Find a setting textbox, enter developer, and then click Use developer features.
3. Enable Developer Mode:

Define widgets
Widgets are defined in your PWA manifest file, by using the widgets manifest member.
This manifest member is an array that can contain multiple widget definitions.
JSON{
  "name": "PWAmp",
  "description": "A music player app",
  "icons": [
    { "src": "img/icon-96.png", "sizes": "96x96" },
    { "src": "img/icon-128.png", "sizes": "128x128" },
    { "src": "img/icon-256.png", "sizes": "256x256" },
    { "src": "img/icon-512.png", "sizes": "512x512" }
  ],
  "widgets": [
    /* widget definitions go here */
  ]
}Each entry in the widgets array contains several fields, as shown below:
JSON{   ...
  "widgets": [
    {
      "name": "PWAmp mini player",
      "description": "widget to control the PWAmp music player",
      "tag": "pwamp",      "template": "pwamp-template",
      "ms_ac_template": "widgets/mini-player-template.json",
      "data": "widgets/mini-player-data.json",
      "type": "application/json",
      "screenshots": [
        {
          "src": "./screenshot-widget.png",
          "sizes": "600x400",
          "label": "The PWAmp mini-player widget"
        }
      ],
      "icons": [
        {
          "src": "./favicon-16.png",
          "sizes": "16x16"
        }
      ],
      "auth": false,
      "update": 86400
    }
  ]
}
In the above example, a music player application defines a mini player widget. A widget definition in the web app manifest has the following required and optional fields:
ﾉ Expand table
FieldDescriptionRequirednameThe title of the widget, presented to users.Yesshort_nameAn alternative short version of the name.NodescriptionA description of what the widget does.YesiconsAn array of icons to be used for the widget. If missing, the icons manifest member is used instead. Icons larger than 1024x1024 are ignored.NoscreenshotsAn array of screenshots that show what the widget looks like. Analogous to the screenshot manifest member	. The platform field of a screenshot item supports the Windows and any values. Images larger than 1024x1024 pixels are ignored. For screenshot requirements specific to the Windows 11 Widgets Board, see
Screenshot image requirements in Integrate with the widget picker.YestagA string used to reference the widget in the PWA service worker.YestemplateThe template to use to display the widget in the operating system widgets dashboard. Note: this property is currently onlyNoFieldDescriptionRequiredinformational and not used. See ms_ac_template below.ms_ac_templateThe URL of the custom Adaptive Cards template to use to display the widget in the operating system widgets dashboard. See Define a widget template below.YesdataThe URL where the data to fill the template with can be found. If present, this URL is required to return valid JSON.NotypeThe MIME type for the widget data.NoauthA boolean indicating if the widget requires authentication.NoupdateThe frequency, in seconds, at which the widget will be updated. Code in your service worker must perform the updating; the widget is not updated automatically. See Access widget instances at runtime.NomultipleA boolean indicating whether to allow multiple instances of the widget. Defaults to true.NoDefine a widget template
To make widgets easy to create and adapt to various operating system widgets dashboards, they are displayed using templates. Two types of templates exist:
Generic templates, defined by their names using the template field.
Custom templates, defined by their URLs using a custom template field.
For the time being, only custom Adaptive Cards templates are supported. Adaptive Cards is an open card exchange format that can be used to exchange UI content in a common and consistent way. See Adaptive Cards Overview.
To define a custom Adaptive Cards template on Windows 11, use the ms_ac_template field in the widget definition that's in your web app manifest. Although template is not currently used, it's a required field.
JSON{   ...
  "template": "pwamp-template",
  "ms_ac_template": "widgets/mini-player.json",
  ...
}The ms_ac_template field value should be a valid URL of a template file.
Here is an example of an Adaptive Cards template:
JSON{
  "type": "AdaptiveCard",
  "body": [
    {
      "type": "TextBlock",
      "size": "Medium",
      "text": "Now playing...",
      "horizontalAlignment": "Center"
    },
    {
      "type": "TextBlock",
      "spacing": "Large",       "weight": "Bolder",
      "horizontalAlignment": "Center",
      "text": "${song}, by ${artist}",
    }
  ],
  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
  "version": "1.5"
}To learn more, see Adaptive Cards Templating.
Next, you need to bind data to your template.
Bind data to your template
The template declares the user interface of a widget. Data then populates this user interface.
To bind data to your template, use the data field in your widget definition. This field should be set to a URL that returns valid JSON data.
The template defined in the previous section contains two variables: song and artist, which are enclosed in the binding expression syntax: ${}. The data that's returned by the data URL in your widget definition should contain values for these variables.
Here's an example of what the data URL might return:
JSON
{
  "song": "I Will Always Love You",   "artist": "Whitney Houston"
}
Define widget actions
If you want your widget to let users perform tasks, define a template that supports actions.
Here is an example of an action defined in a custom Adaptive Cards template:
JSON{
  "type": "AdaptiveCard",
  "body": [
    {
      "type": "TextBlock",
      "size": "Medium",
      "text": "Now playing...",
      "horizontalAlignment": "Center"
    },
    {
      "type": "TextBlock",
      "spacing": "Large",       "weight": "Bolder",
      "horizontalAlignment": "Center",
      "text": "${song}, by ${artist}",
    }
  ],
  "actions": [
    {
      "type": "Action.Execute",
      "title": "Previous",
      "verb": "previous-song"
    },
    {
      "type": "Action.Execute",
      "title": "Next",
      "verb": "next-song"
    }
  ],
  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
  "version": "1.5"
}Note the verb field in the above JSON template. It will be used when handling widget actions in your service worker code. See Handle widget actions.
Access widget instances at runtime
You can access widgets and update them from the PWA service worker code. Accessing widgets at runtime is useful in cases such as:
Rendering widgets on installation.
Updating widgets on service worker updates.
Handling user actions on widgets.
Updating widgets when the application changes.
A service worker has access to the self.widgets object and several widget events which, together, constitute an API that you use to react to changes and access widgets at runtime.
The following sections provide code examples. For a reference of the API, see the service worker API reference.
Render widgets on installation
When a PWA is installed, the widgets that the app defines in its manifest are added to the widgets dashboard but not installed yet. A widget is only installed when the user chooses to add the widget from the dashboard.
When a widget is installed, it is not automatically rendered using the ms_ac_template and data fields of the widget definition.
To render the widget, listen to the widgetinstall event in your service worker, and update the widget by using the widgets.updateByTag function:
JavaScript// Listen to the widgetinstall event. self.addEventListener("widgetinstall", event => {
  // The widget just got installed, render it using renderWidget.
  // Pass the event.widget object to the function.
  event.waitUntil(renderWidget(event.widget));
});
async function renderWidget(widget) {
  // Get the template and data URLs from the widget definition.
  const templateUrl = widget.definition.msAcTemplate;   const dataUrl = widget.definition.data;
  // Fetch the template text and data.   const template = await (await fetch(templateUrl)).text();   const data = await (await fetch(dataUrl)).text();  // Render the widget with the template and data.
  await self.widgets.updateByTag(widget.definition.tag, {template, data}); }
Update widgets on service worker updates
When the service worker code changes in a PWA, the browser detects that change, installs the new service worker, and then later activates the service worker.
When this happens, it's important to update any widget instances that may already be running. Widgets may have been installed before the service worker activate event is emitted. To avoid displaying empty widgets, update your widgets when the activate event occurs
JavaScript// Update the widgets to their initial states // when the service worker is activated.
self.addEventListener("activate", event => {   event.waitUntil(updateWidgets());
});
async function updateWidgets() {
  // Get the widget that match the tag defined in the web app manifest.   const widget = await self.widgets.getByTag("pwamp");   if (!widget) {     return;   }
  // Using the widget definition, get the template and data.   const template = await (await fetch(widget.definition.msAcTemplate)).text();   const data = await (await fetch(widget.definition.data)).text();
  // Render the widget with the template and data.
  await self.widgets.updateByTag(widget.definition.tag, {template, data}); }Handle widget actions
If the widget template contains actions, users can run those actions by clicking buttons in the rendered widget. For information about how to define actions in a template, see Define widget actions.
When a user runs a widget action, a widgetclick event is triggered in the PWA service worker. To handle the user action, listen to the event:
JavaScriptself.addEventListener('widgetclick', (event) => {   switch (event.action) {     case 'previous-song':
      // Application logic to play the previous song...       break;     case 'next-song':
      // Application logic to play the next song...       break;
  } });For brevity, the actual application code isn't shown in the above code snippet. When the previous-song or next-song actions are received, a message would probably need to be
sent to the app by using Client.postMessage to let the app know that it should start playing the previous or next songs.
Note that the action property of the widgetEvent object passed to the event listener above matches the string defined in the action.verb field of the widget template.
For more information about the widgetclick event and what information you can access from it, see Service worker API reference, below.
Update widgets on application changes
In previous sections, you learnt how to update widgets when specific widget events, widget actions, and service worker updates occurred. It can also be useful to update widgets when something happens in the application, or when a push notification occurs, or periodically.
In this section, you'll learn to use the Periodic Background Sync API to update widgets periodically. For more information about the Periodic Background Sync API, see Use the Periodic Background Sync API to regularly get fresh content.
In the following code snippet, an event listener is used to react to various lifecycle events of the application widget. When a widget installation is detected, a periodic sync is registered and when a widget removal is detected, the periodic sync is unregistered.
When periodic sync events occur, widget instances are updated using the


JavaScriptself.addEventListener("widgetinstall", event => {   event.waitUntil(onWidgetInstall(event.widget));
});
self.addEventListener("widgetuninstall", event => {   event.waitUntil(onWidgetUninstall(event.widget));
});
async function onWidgetInstall(widget) {
  // Register a periodic sync, if this wasn't done already.
  // We use the same tag for the sync registration and the widget to   // avoid registering several periodic syncs for the same widget.
  const tags = await self.registration.periodicSync.getTags();   if (!tags.includes(widget.definition.tag)) {
    await self.registration.periodicSync.register(widget.definition.tag, {       minInterval: widget.definition.update
    });
  }
  // And also update the instance.
  await updateWidget(widget);
}
async function onWidgetUninstall(widget) {
  // On uninstall, unregister the periodic sync.
  // If this was the last widget instance, then unregister the periodic sync.
  if (widget.instances.length === 1 && "update" in widget.definition) {     await self.registration.periodicSync.unregister(widget.definition.tag);
  }
}
// Listen to periodicsync events to update all widget instances // periodically.
self.addEventListener("periodicsync", async event => {   const widget = await self.widgets.getByTag(event.tag);
  if (widget && "update" in widget.definition) {     event.waitUntil(updateWidget(widget));
  } });
async function updateWidget(widget) {
  // Get the template and data URLs from the widget definition.
  const templateUrl = widget.definition.msAcTemplate;   const dataUrl = widget.definition.data;
  // Fetch the template text and data.   const template = await (await fetch(templateUrl)).text();   const data = await (await fetch(dataUrl)).text();   // Render the widget with the template and data.  await self.widgets.updateByTag(widget.definition.tag, {template, data}); }
Demo app
PWAmp is a music player PWA demo application that defines a widget. The PWAmp widget lets users visualize the current song and play the previous or next songs.
1. If not done yet, install WinAppSDK 1.2 and enable Developer Mode in Windows 11.
2. Go to PWAmp and install the app on Windows 11.
3. Open the Windows 11 Widgets Board by pressing Windows logo key + W.
4. Click Add widgets to open the widgets settings screen, scroll to the PWAmp mini player widget and add it.
5. Close the widgets settings screen. The PWAmp mini player is now displayed in the Widgets Board.
The PWAmp widget displays the current song and buttons to play the previous or next song.

Service worker API reference
The service worker global object (or ServiceWorkerGlobalScope) contains a widgets attribute that exposes the following Promise-based methods:
ﾉ Expand table
MethodDescriptionParametersReturn valuegetByTag(tag)Gets a widget by tag.The widget tagA Promise that resolves to the widget object that matches the tag, or undefined.getByInstanceId(id)Gets a widget by instance ID.The widget instance
IDA Promise that resolves to the corresponding widget object, or undefined.getByHostId(id)Gets widgets by host ID.The host IDAn array of widget objects found in that host.matchAll(options)Gets widgets by matching options.A widgetOptions objectA Promise that resolves to an array of widget objects that match the options criteria.updateByInstanceId(id, payload)Updates a widget by instance ID.The instance ID, and a widgetPayload objectA Promise that resolves to undefined or Error.updateByTag(tag, payload)Updates a widget by tag.The widget tag, and a widgetPayload objectA Promise that resolves to undefined or Error.The service worker global object also defines the following events:
widgetinstall: Fired when the widget host is installing a widget. widgetuninstall: Fired when the widget host is uninstalling a widget.
widgetresume: Fired when the widget host resumes the rendering of installed
widgets, which can happen after the host suspended the rendering of widgets to preserve resources. widgetclick: Fired when the user runs one of the widget actions.
For more information about the objects that are provided with these events, see widgetEvent object and widgetClickEvent object, below.
widget object
Each widget is represented as a widget object, which contains the following properties:
installable: A Boolean indicating whether the widget is installable. definition: A widgetDefinition object.
instances: An array of widgetInstance objects representing the current state of
each instance of the widget.
widgetOptions object
When using matchAll(options) to get multiple widgets, a widgetOptions object is necessary to filter which widgets to return. The widgetOptions object contains the following properties, all of which are optional:
installable: A Boolean indicating if the returned widgets should be installable. installed: A Boolean indicating if the returned widgets are installed in the widget
host.
tag: A string used to filter the returned widgets by tag. instanceId: A string used to filter the returned widgets by instance ID. hostId: A string used to filter the returned widgets by widget host ID.
widgetPayload object
When creating or updating a widget instance, the service worker must send the template and the data that are necessary to populate the widget. The template and data are called the payload. The widgetPayload object contains the following properties:
template: The template, as a string, to use to render the widget. This will be the
stringified JSON of an Adaptive Card template.
data: The data, as a string, to use with the widget template. This data can be
stringified JSON data.
widgetInstance object
This object represents a given instance of a widget in a widget host and contains the following properties:
id: The internal GUID string used to reference the instance. host: An internal pointer to the widget host that has installed this instance. updated: A Date object that represents the last time data was sent to the instance. payload: A widgetPayload object that represents the last payload that was sent to
this instance.
widgetDefinition object
This object represents the original definition of the widget, found in the PWA manifest file. The properties of this object match the properties that are listed in Define widgets, above.
widgetEvent object
This object is passed as an argument to listeners of service worker widget events of type widgetinstall, widgetuninstall, and widgetresume.
For the widgetinstall, widgetuninstall, and widgetresume event types, the widgetEvent object has the following properties:
ﾉ Expand table
PropertyDescriptionTypewidgetThe widget instance that triggered the event.widgetinstanceIdThe widget instance ID.StringhostIdThe widget host ID.StringwidgetClickEvent object
This object is passed as an argument to listeners of service worker widget events of type widgetclick. You can open your app's window in response to the widgetclick event, by
using clients.openWindow().
The widgetClickEvent object has the following properties:
ﾉ Expand table
PropertyDescriptionTypeactionThe action that triggered the event, as defined in the actions.verb fields of the widget template. See Define widget actions.StringwidgetThe widget instance that triggered the event.widgetInstancehostIdThe widget host ID.StringinstanceIdThe widget instance ID.String
Feedback
Was this page helpful? 

Build a PWA for the sidebar in Microsoft Edge
Article • 12/11/2024
Progressive Web Apps (PWAs) can opt-in to be pinned to the sidebar in Microsoft Edge.
The sidebar in Microsoft Edge allows users to easily access popular websites and utilities alongside their browser tabs. The content in the sidebar augments the user's primary task by enabling side-by-side browsing and minimizing the need to switch contexts between browser tabs.
By signaling intent to be pinned to the sidebar, your PWA gets the following benefits:
Your PWA can be promoted in the Microsoft Edge sidebar store.
Your PWA can detect whether it is running in the Microsoft Edge sidebar or not. Your PWA defines its own style and layout to provide a user-friendly sidebar experience.
Enable sidebar support in your PWA
To make your PWA ready for pinning to the sidebar in Microsoft Edge, use the edge_side_panel manifest member:
1. Make sure your PWA has a web app manifest file that contains at least the name, short_name, description, and icons members.
For details, see:
	Web app manifests	 at MDN.
The web app manifest	 in Making PWAs installable at MDN > References > Progressive web apps > Guides.
2. Add the edge_side_panel member to your web app manifest. For example:
JSON{
  "name": "PWAmp music player",
  "lang": "en-US",
  "start_url": "/",
  "short_name": "PWAmp",
  "description": "A skinnable music player app to play your favorite mp3 files",  "display": "standalone",
  "icons": [
    {
      "src": "./favicon-256.png",
      "sizes": "256x256"
    }
  ],
  "edge_side_panel": {}
}
Adapt your app to the minimum sidebar width
The sidebar in Microsoft Edge has a default minimum width of 376 pixels and can be resized by users. Therefore, your app's layout should support the 376 pixels minimum width, and should be responsive.
While building your app, you can test whether the app's layout is usable when narrow, and make sure the design is responsive at different widths, by using the Device Emulation tool in Microsoft Edge DevTools. To learn more, see Verify that the webpage layout is usable when narrow.
If your app's layout can't support the 376 pixels minimum width, you can define your preferred width by using the preferred_width property in your web app manifest. For example:
JSON{
  "name": "PWAmp music player",
  "lang": "en-US",
  "start_url": "/",
  "short_name": "PWAmp",
  "description": "A skinnable music player app to play your favorite mp3 files",
  "display": "standalone",
  "icons": [
    {
      "src": "./favicon-256.png",
      "sizes": "256x256"
    }
  ],
  "edge_side_panel": {
    "preferred_width": 480
  }
}When you define a preferred width in your app's manifest, the following happens:
 When your app is opened in the sidebar, the sidebar is automatically resized to your preferred width.
 Users can resize the sidebar to make it larger than your preferred width, or smaller, up to the 376 pixels minimum width.
Build a sidebar-only app
One of the most important benefits of building an app as a PWA is that, from one code base, your app adapts to all devices and operating systems, whatever their capabilities and screen sizes.
The edge_side_panel manifest member makes your app installable as a standalone app and enables your app to be pinned to the sidebar in Microsoft Edge.
However, if you prefer to build an app that can only be pinned to the sidebar but cannot be installed as a standalone app, set the value of the display member to browser, as shown below (or, omit the display member from your web app manifest):
JSON{
  "name": "PWAmp music player",
  "lang": "en-US",
  "start_url": "/",
  "short_name": "PWAmp",
  "description": "A skinnable music player app to play your favorite mp3 files",
  "display": "browser",
  "icons": [
    {
      "src": "./favicon-256.png",
      "sizes": "256x256"
    }
  ],
  "edge_side_panel": {
    "preferred_width": 480
  }
}Detect usage in the sidebar
Detecting when your app is running in the sidebar can be useful to provide your users with the best possible experience when your app runs in this browser panel.
You can detect when your app runs in the sidebar by using User-Agent Client Hints. To learn more about User-Agent Client Hints, see Detecting Microsoft Edge from your website.
To detect when your app runs in the sidebar, do either of the following:
On your web server, read the Sec-CH-UA HTTPS request header and look for the Edge Side Panel brand. For example:
httpsSec-CH-UA: "Microsoft Edge";v="112", "Edge Side Panel";v="1", 
"Placeholder;Browser Brand";v="99" Or, in the browser, use the navigator.userAgentData JavaScript API and read the value of the brands property. For example:
JavaScriptconst brands = navigator.userAgentData.brands;
const sidebarBrandInfo = brands.find(b => b.brand === "Edge Side Panel"); if (sidebarBrandInfo) {   console.log(sidebarBrandInfo); // { brand: "Edge Side Panel", version: "1" } } else {   console.log("App is not running in the Microsoft Edge sidebar"); }To detect whether your app is running in the sidebar, you can also use the User Agent string.
Note: we strongly recommend using User Agent Client Hints instead of the User Agent string. The User Agent string is an outdated mechanism for doing browser detection, and has website compatibility issues.
If you can't use User Agent Client Hints in your app, look for Edge Side Panel in the User Agent string. Here are some examples of User Agent strings containing the Edge Side Panel value:
httpsUser-Agent: ... (Edge Side Panel)...
User-Agent: ... (..., Edge Side Panel)...
User-Agent: ... (Edge Side Panel, ...)...Relationship with your mobile app
Suppose you create a desktop variant of your app and a mobile variant of your app. In this scenario, the desktop variant is used when your app is pinned to the sidebar. By default, apps in the sidebar that use the edge_side_panel manifest member receive the Microsoft Edge desktop User Agent Client Hint:
httpsSec-CH-UA-Mobile: ?0As explained in Adapt your app to the minimum sidebar width, we recommend making your app's layout responsive so that it can adapt to multiple form factors using a single code base.
You can, however, use the Edge Side Panel User Agent Client Hint brand to reuse your app's mobile variant in the Microsoft Edge sidebar.
Follow these recommendations when using a mobile-variant of your app in the sidebar:
 Remove all "Open in App" messages instructing users to download your app from an app store.
 Test the accessibility and usability of your app with all input methods: mouse, keyboard, and touch. To learn about testing the accessibility of your app, see Accessibility-testing features.
Demo app
PWAmp is a music player PWA demo application that can be pinned to the sidebar in Microsoft Edge. To test PWAmp as a sidebar app:
1. Open Microsoft Edge and make sure the sidebar is displayed. If the sidebar is not displayed, go to edge://settings/sidebar and then turn on the Always show sidebar toggle:

3. Open the sidebar, click Customize, and then click Open in sidebar:

The PWAmp music player app appears in the sidebar.
4. Click the PWAmp icon in the sidebar to open the app and use it alongside your other tabs:

The source code for the PWAmp demo app has the following, to support the Microsoft Edge sidebar:
	The edge_side_panel member in the manifest.json	 file.
The isSidebarPWA variable, which uses the navigator.userAgentData JavaScript API in the app.js file.
You can find the entire PWAmp demo source code at MicrosoftEdge / Demos > pwamp. To download the source code locally, see Download or clone the Demos repo in Sample code for DevTools.
Provide feedback
The Microsoft Edge team welcomes your feedback about this feature. Read the Side Panel explainer on the Microsoft Edge web platform explainer repo, and leave feedback by creating a new issue on the repo or searching for existing issues and joining existing conversations.

Feedback
Was this page helpful? 
Publish a PWA to the Microsoft Store
Article • 10/12/2023
Publishing your Progressive Web App (PWA) to the Microsoft Store brings the following advantages:
ﾉ Expand table
AdvantageDescriptionDiscoverabilityUsers naturally look for apps in the app store. When you publish to the Microsoft Store, millions of Windows users can discover your PWA alongside other Windows apps. The Store showcases apps through categories, curated collections, and more. App discovery portals provide an easy browsing and shopping experience for potential users of your app. You can even enhance your Store listing with screenshots, a hero image, and video trailers - see App screenshots, images, and trailers.TrustworthinessWindows customers know they can trust their Microsoft Store purchases and downloads, because they adhere to the rigorous Microsoft Store Policies.Easy installThe Microsoft Store provides a consistent and user-friendly install experience across all Windows 10 or later apps.App analyticsThe Microsoft Partner Center dashboard provides detailed analytics about your app's health, usage, and more.To publish your PWA to the Microsoft Store, no code changes are required. Instead, you create an app reservation in Microsoft Partner Center, package your PWA using PWA Builder, and then submit your package to the Microsoft Store. The following sections explain these steps.
Create an app reservation
To submit your app to the Microsoft Store, you use Microsoft Partner Center.
To create an app reservation:
1. Before you can create an app reservation, you must have a personal Microsoft account (not a work Microsoft account or a school Microsoft account) that is enrolled in the Windows Developer Program.
a. If you don't already have one, create a personal Microsoft account at account.microsoft.com.
b. Enroll in the Windows Developer program, by following the steps in Open a developer account in Partner Center.
2. Once your account is enrolled in the app developer program, follow these steps to create an app reservation:
a. Go to the Partner Center Dashboard. Sign in with the account you enrolled.
b. Under Workspaces, select Apps and games. The Apps and games | Overview page appears.
c. Select New product > MSIX or PWA app.
d. When prompted, enter a name for your reservation, and then select Reserve product name.

3. To display your publisher details for use in the Package your PWA section, select Product management > Product Identity.

4. Copy and save the following values.
 Package ID
Publisher ID
Publisher display name
Package your PWA for the Store
Now that you've gathered the publishing information about your app, generate a Windows app package for your PWA by using PWA Builder.
To generate an app package:
1. Go to PWA Builder.
2. Under Ship your PWA to app stores, enter the URL of your PWA in the text box, and then click the Start button.
Your PWA is evaluated to ensure it is store-ready.
3. If the evaluation in the PWABuilder report card page indicates that your PWA is ready to be packaged, continue to the next step. If the evaluation indicates that your PWA is not ready to be packaged, examine the Action Items section to see how to improve your PWA:

4. Once your PWA is ready to be packaged, in the upper-right corner of the
PWABuilder report card page, click the Package For Stores button. A dialog opens, showing the message Awesome! Your PWA is store ready!.
5. Under Windows, click the Generate Package button. The Windows Package Options dialog opens.
6. Paste the following values, which you saved in the Create an app reservation section above:

7. Click the Download Package button to download your Windows package.
Your download is a .zip archive that contains an .msixbundle file and a
.classic.appxbundle file. The two app packages allow your PWA to run on a wide variety of Windows versions.
See also:
What is a classic package?
Bundling MSIX packages.
Submit your app package to the Microsoft Store
To submit your app to the Microsoft Store:
1. Go to Microsoft Partner Center.
2. Select your app.
3. Click the Start your submission button.

4. When you're prompted, provide information about your app, such as pricing and age rating.
5. On the Packages prompt, select the .msixbundle and the .classic.appxbundle files you generated in the Package your PWA section.
After you complete your submission, your app is reviewed, typically within 24 to 48 hours. After you receive approval, your PWA is available in the Microsoft Store.
Measure usage of your PWA installed from the Microsoft Store
When your PWA is initially launched, if the PWA was installed from the Microsoft Store, Microsoft Edge includes the following Referer header with the request of the first navigation of your web app.
Referer: app-info://platform/microsoft-storeUse this feature to measure distinct traffic from your PWA that was installed from the Microsoft Store. Based on the traffic, you can adjust your app's content to improve the user experience. This feature is accessible to both client and server code. To access this information on the client side, you can query document.referrer in your JavaScript.
Redirect to locale-specific domains without displaying additional UI
By default, a PWA that's installed from the Microsoft Store displays an additional UI when the app is redirected to a locale-specific domain. The added UI shows the URL and page title. This UI is added because navigation to the locale-specific domain is considered out of scope.
The following figure shows the UI that is introduced when a user moves outside the scope of a PWA.

Domain redirection with PWAs installed from the browser
A Web App Manifest is tied to a single domain. However, some PWAs use locale-specific domains for their customers in specific regions of the globe. When visiting the PWA in a web browser, customers are seamlessly transitioned from the principal domain (for example, contoso.com) to a locale-specific domain (for example, contoso.co.ke), because the redirect happens during initial load of that website.
Customers who install the PWA from Microsoft Edge would therefore install the PWA from the locale-specific domain. Subsequent launches of the PWA go directly to that locale-specific domain, instead of first going to the principal domain.
Domain redirection with PWAs installed from the Microsoft Store
PWAs that are installed from the Microsoft Store have a hard-coded start URL that is pointed at the principal domain. When the PWA is launched, the PWA initially navigates to the principal domain, and then a customer may (as necessary) be redirected to their locale-specific domain. If that redirection occurs, the navigation is considered "out of scope". As a result, the app displays the URL and page title at the top of the page.
Displaying the URL and page title is a security feature to ensure that users know they have left the context of the PWA. This added UI makes sense when a user loads a page from another website in the context of the PWA. However, that added UI may be inappropriate when a user moves among domains that are all part of the same website.
Prevent the locale-specific URL and title from being displayed
It's currently impossible, for apps installed from the Microsoft Store, to prevent displaying the additional URL and title UI when redirecting to a locale-specific domain.
In the future, scope extensions will make it possible for a PWA to capture navigation to paths, subdomains, or even sites other than its own scope. The scope extensions feature is in active development and isn't ready to be used yet. To find out more about the state of development of this feature in Chromium, check out the Web app scope extensions feature at Chrome Platform Status.
Once the feature can be used in Microsoft Edge, we will document it here. In the meantime, to learn more about how scope extensions will work, see the explainer document on the WICG repository.
Make updates to your app
Generally, when you update your PWA code, you don't need to create a new app package and submit it to the Microsoft Store again. For example, suppose you make changes to your app's front-end HTML, CSS, or JavaScript code, or to your service worker. The next time the user launches the app, the changes are downloaded by the browser that's running your app from your web server.
However, if you make changes to the web app manifest file, you must create a new app package and submit it to the Microsoft Store again. For example, in the manifest, you might change the app icon or app name, or add manifest members such as
file_handlers, protocol_handlers, or share_target. Creating and submitting a new app
package is required when the manifest is changed, because the information in the web app manifest file is copied to the Windows app package, for better integration with Windows.
Publish a new PWA to the Store
Update an existing Store app to a PWA
Image recommendations for PWAs in the Store
App packaging explainer
Was this page helpful?  Yes  No
Provide in-app purchases with the Digital Goods API
Article • 12/20/2024
If your Progressive Web App (PWA) is listed in the Microsoft Store, you can provide inapp products and subscriptions by using the Digital Goods API and the Payment Request API.
Digital Goods API
The Digital Goods API is an interface between your PWA app and the Microsoft Store.
The Digital Goods API supports:
 Querying the details of a digital item from the Microsoft Store backend, such as the item's name, description, and regional price.
Consuming or acknowledging purchases.
Checking the digital items that are currently owned by the user.
Checking the purchase history of the user.
See:
Digital Goods API For Microsoft Store PWA Explainer Digital Goods API specification
Payment Request API
The Payment Request API handles the actual payment transaction when a purchase is made by a user. The Payment Request API uses the item details that the Digital Goods API provides, to make the in-app purchase by using whichever billing payment method the user has set up at the Microsoft Store.
See:
 Payment Request API at MDN.
Enable the Digital Goods API
The Digital Goods API is currently available for testing in Microsoft Edge. To test the API, use either of the following ways:
 To test your code locally: Use a supported preview channel of Microsoft Edge on your dev machine.
 To test your code in your Microsoft Store PWA: Register for the origin trial, then use your token at your website.
Details are below.
Use a supported preview channel of Microsoft Edge on your dev machine
To test the Digital Goods API locally, before deploying your app to production, run Edge Dev or Edge Canary. These preview versions of Edge have the API enabled, as part of a running experiment.
To download a preview (insider) channel of Microsoft Edge, see Become a Microsoft Edge Insider.
Register for the origin trial, then use your token at your website
To test the Digital Goods API in production, with your users, use an origin trial token. With this approach, when your users download your PWA from the Microsoft Store, they will have the API enabled.
See:
Use origin trials in Microsoft Edge Digital Goods API at Origin Trials.
Checking whether the Digital Goods API is available
To detect whether you've correctly enabled the API on your website by using your origin trial token, check whether the getDigitalGoodsService method exists on the window object:
JavaScriptif ('getDigitalGoodsService' in window) {
  // The Digital Goods API is supported.
} else {   console.log('DigitalGoodsService is not available.');  // Use another payment method.
}
See also:
 getDigitalGoodsService() method of the Window interface.
Connecting to the Microsoft Store Billing
service (window.getDigitalGoodsService method)
Use the getDigitalGoodsService method of the window object to connect to the Microsoft Store Billing service. A DigitalGoodsService interface is returned.
The Digital Goods API was designed to be compatible with various browsers and digital stores, similar to how the Payment Request API is browser-agnostic and can be used with different payment providers. To retrieve an instance of the service for Microsoft Store Billing, pass the string "https://store.microsoft.com/billing" as the payment method to the getDigitalGoodsService method.
If the method throws an error, the Microsoft Store Billing payment method is not available (such as when the user is accessing your PWA through the browser).
Alternatively, consider providing a different payment method for transactions.
JavaScriptif (window.getDigitalGoodsService === undefined) {
  // The Digital Goods API isn't supported in this context.   return;
} try {   const digitalGoodsService = await window.getDigitalGoodsService("https://store.microsoft.com/billing");
  // Use the service here.
  ...
} catch (error) {
  // The preferred service provider is not available.
  // Use a web-based payment flow instead.   return;
}This payment method getDigitalGoodsService("https://store.microsoft.com/billing") is available only for a PWA that's installed from the Microsoft Store, on Windows. No other settings are needed.
See also:
	getDigitalGoodsService() method	 of the Window interface.
DigitalGoodsService interface
Querying item details (getDetails method)
Use the getDetails method of the DigitalGoodsService interface to query item details.
After connecting the Digital Goods service to Microsoft Store, you can use the API to access product and purchase information. The getDetails method lets you get information about the items you've set up in the Partner Center. Display information such as the product title, description, and price in your app UI, so the user knows what's available for purchase.
The getDetails method takes a list of item IDs, which correspond to the product IDs of the in-app products and subscriptions you created in the Partner Center.
JavaScriptconst itemDetails = await digitalGoodsService.getDetails(['shiny_sword', 
'gem', 'monthly_subscription']);
for (item of itemDetails) {   const priceStr = new Intl.NumberFormat(       locale,
      {style: 'currency', currency: item.price.currency}
    ).format(item.price.value);
  // Do something with the item's data, such as displaying it in the PWA's 
UI.   displayProductItem(item.itemId, item.title, priceStr, item.description); }The returned itemDetails sequence may be in any order, and might not include an item if the item doesn't exist on the server (that is, if there's not a 1:1 correspondence between the input list and output list).
The item ID is a string that represents the primary key of the items. In the Microsoft
Store, the item ID is InAppOfferToken. There is no function to get a list of item IDs; item IDs should be hardcoded in the client code or fetched from your own server (the developer's server).
The item's price is a PaymentCurrencyAmount that contains the current price of the item in the user's current region and currency. The price is designed to be formatted for the user's current locale by using Intl.NumberFormat, as shown above.
See also
Digital Goods API specification  getDetails() method
Windows App Development:
 StoreProduct.InAppOfferToken Property
W3C:
 PaymentCurrencyAmount dictionary
MDN:
 Intl.NumberFormat
Purchasing an item (PaymentRequest constructor and show method)
After your products and details are displayed to the user, implement the purchase flow by using the Payment Request API. To purchase an item, first construct a request that contains the item details by using the PaymentRequest constructor, and then use the
show method of the PaymentRequest object to start the payment flow.
When combined with the Digital Goods API, the only required input parameter for the PaymentRequest constructor is methodData. In the constructor's parameter:
In the supportedMethods member, specify Microsoft Store Billing as the payment method, as the string 'https://store.microsoft.com/billing'.
 In the data member, pass along the itemId as the sku.
JavaScriptconst details = await digitalGoodsService.getDetails(['monthly_subscription']); const item = details[0];
const request = new PaymentRequest([
  {     supportedMethods: 'https://store.microsoft.com/billing',     data: { sku: item.itemId }  }
]);
Then call the show method of the PaymentRequest object, to start the payment flow:
JavaScriptconst response = await request.show();This displays the Store purchase UI to the user, where the user can view details about the product that they're trying to purchase. During this process, the current browser session is temporarily disabled until the purchase flow is complete. The user can either cancel the transaction, or proceed with the payment:
 If the user cancels the payment, the Promise that's returned by the show method will be rejected with an error.
 If the user successfully pays and completes the purchase, the Promise will resolve with a PaymentResponse. In the details property of the payment response, a purchase token is returned.
See also:
Payment Request API
PaymentRequest: PaymentRequest() constructor
PaymentRequest: show() method
PaymentResponse
PaymentResponse: details property
Consuming a purchase (consume method)
Use the consume method of the DigitalGoodsService interface to consume a purchase.
A consumable purchase is a purchase that's designed to be purchased multiple times. A consumable purchase usually needs to be marked as "consumed" before the purchase can be purchased again by the user. An example of a consumable purchase is an ingame powerup that makes the player stronger for a short period of time.
To mark a purchase as "consumed", use the consume method:
JavaScriptdigitalGoodsService.consume(purchaseToken);See also:
 consume() method of the DigitalGoodsService interface.
Checking existing purchases (listPurchases method)
Use the listPurchases method of the DigitalGoodsService interface to check existing purchases. This method returns information about the user's existing purchases. This method allows a client to get a list of items that are currently owned or purchased by the user. This may be necessary, to do either of the following:
 Check for entitlements, such as whether a subscription, promotional code, or permanent upgrade is active.
 Recover from network interruptions during a purchase, such as when the item is purchased but not yet acknowledged.
The listPurchases method returns item IDs and purchase tokens. Before you grant an entitlement, you should verify the returned item ID or the returned purchase token, by using a direct developer-to-provider API, as shown below:
JavaScriptconst purchaseList = await digitalGoodsService.listPurchases();
for (const purchase of purchaseList) {   // Handle the purchase data in your PWA.
  verifyAndGrantEntitlement(purchase.itemId, purchase.purchaseToken); }The listPurchases method doesn't return consumed products or expired subscriptions.
See also:
 listPurchases() method of the DigitalGoodsService interface.
Getting the purchase history
(listPurchaseHistory method)
Use the listPurchaseHistory method of the DigitalGoodsService interface to get the purchase history.
This method returns a list of PurchaseDetails containing the itemId and purchaseToken for each purchase. The list includes the most recent purchase made by the user for each item, regardless of whether the purchase is expired, canceled, or consumed.
JavaScriptconst purchaseList = await digitalGoodsService.listPurchaseHistory();
for (const purchase of purchaseList) {
  // Handle the expired purchase data in your PWA.
  verifyAndCheckExpiredEntitlement(purchase.itemId, purchase.purchaseToken); }See also:
listPurchaseHistory() method of the DigitalGoodsService interface. PurchaseDetails dictionary
See also
Origin trials:
Use origin trials in Microsoft Edge Digital Goods API at Origin Trials.
GitHub:
Digital Goods API For Microsoft Store PWA Explainer
Digital Goods API specification getDigitalGoodsService() method of the Window interface.
DigitalGoodsService interface getDetails() method listPurchases() method listPurchaseHistory() method consume() method
PurchaseDetails dictionary
MDN:
Payment Request API
PaymentRequest: PaymentRequest() constructor
PaymentRequest: show() method
PaymentResponse
PaymentResponse: details property
    Intl.NumberFormat W3C:
    PaymentCurrencyAmount dictionary Windows App Development:
 StoreProduct.InAppOfferToken Property

Feedback
Was this page helpful? 

Synchronize and update a PWA in the background
Article • 06/19/2023
Using a service worker, a Progressive Web App (PWA) can do work in the background, even when the user isn't using the app, and provide a better offline experience.
Consider the following use cases:
 An email app that lets users compose messages and send them at any time, even when offline.
 A news app that fetches new articles every day, for the user to read later when they open the app.
 A music app that lets users download songs for listening offline.
All three of these use cases are possible with PWAs, by using the following APIs:
Background Sync API
Periodic Background Sync API Background Fetch API
Although these APIs have similar names, they are different in nature.
Use the Background Sync API to synchronize data with the server
Use the Background Sync API to allow users to continue using the app and perform actions even when they are offline.
For example, an email app can let its users compose and send messages at any time. The app frontend can try to send the message right away, and if the device is offline, the service worker can catch the failed request and use the Background Sync API to defer the task until connected.
Another example for using the Background Sync API is loading content in the background for the user.

of the data transfer. The Background Sync API shouldn't be used to fetch large files, because devices can decide to terminate service workers, to preserve battery life.
Instead, use the Background Fetch API.
Check for support
The Background Sync API is available in Microsoft Edge, but you should make sure that Background Sync API is supported in the other browsers and devices that your app runs in. To make sure that the Background Sync API is supported, test whether the ServiceWorkerRegistration object has a sync property:
JavaScriptnavigator.serviceWorker.ready.then(registration => {     if (registration.sync) {
        // Background Sync is supported.
    } else {
        // Background Sync isn't supported.
    }
});To learn more about the ServiceWorkerRegistration interface, see ServiceWorkerRegistration	 at MDN.
Request a sync
The first thing to do is to request a sync. This can be done by your app frontend or your service worker.
 Requesting the sync from the frontend is good when you want to leave the user in charge of synchronizing later or not.
 Requesting the sync from the service worker is good when you want this to be transparent to the user. In this case, the service worker can detect the failed fetch request and request the sync right away.
To request a sync, you need a ServiceWorkerRegistration and a tag name. From the app frontend code, do the following:
JavaScriptasync function requestBackgroundSync() {
    const registration = await navigator.serviceWorker.ready;    await registration.sync.register('my-tag-name'); }
Or, from the service worker, do this instead:
JavaScriptasync function requestBackgroundSync() {     await self.registration.sync.register('my-tag-name'); }The my-tag-name string above should be a unique tag that identifies this sync request, so that multiple requests can be done.
React to the sync event
As soon as a connection can be used and the service worker is running, a sync event is sent to the service worker, which can use it to synchronize the necessary data. The sync event can be listened to with the following code:
JavaScriptself.addEventListener('sync', event => {     if (event.tag === 'my-tag-name') {         event.waitUntil(doTheWork());
    }
});In the example code above, a sync event listener is added in the service worker. When the listener is called, the code checks if the tag is the one registered in the frontend, and then calls doTheWork. This function is expected to return a Promise.
Typically, the doTheWork function will send the information to the server that couldn't be sent when the user was offline. It may be useful to store this information in IndexedDB storage from the frontend so that it can later be retrieved from the service worker when
doTheWork runs.
For more information about the Sync event, the ServiceWorkerRegistration, and the SyncManager interface, see the Background Synchronization draft specification	 and the Background Synchronization API documentation	.
Demo app
My Movie List PWA is a demo app that uses the Background Sync API to fetch movie information later, if the user is offline.

To test background syncing:
1. Install the app.
2. Search for movies using the search input field.
3. Go offline. To do this, open DevTools (F12), and then select the Application > Service Workers > Offline checkbox.

4. In one of the movie results, select More info.
5. A message appears in the app informing you that you are offline, and that the movie details will be retrieved automatically later.

6. Go online. To do this, in DevTools, clear the Application > Service Workers > Offline checkbox.
7. Reload the app. The movie details now appear.
To see the sample code, check out the movies-db-pwa repo.
Debug background syncs with DevTools
To test your background sync code, you don't have to go offline, then go online, and then wait for Microsoft Edge to trigger a sync event. Instead, DevTools lets you simulate the background sync event.
To simulate a sync event:
1. Open DevTools (F12).
2. Select Application > Service Workers.
3. Type the tag name you used when registering the sync in the Sync input field.
4. Select the Sync button.

You can also log the background sync activity generated by your app in DevTools, as follows:
1. Open DevTools (F12).
2. Select Application > Background Sync.
3. Select Start recording events.
Sync registrations and dispatches appear in the event log table:

Use the Periodic Background Sync API to regularly get fresh content
The Periodic Background Sync API lets PWAs retrieve fresh content periodically, in the background, so users can immediately access it when they later open the app again.
Using the Periodic Background Sync API, PWAs don't have to download new content (such as new articles) while the user is using the app. Downloading content could slow down the experience, so instead, retrieve the content at a more convenient time.

Check for support
To check whether this API is supported in the browsers and devices that your app runs in, test whether the ServiceWorkerRegistration object has a periodicSync property:
JavaScript
navigator.serviceWorker.ready.then(registration => {     if (registration.periodicSync) {
        // Periodic Background Sync is supported.
    } else {
        // Periodic Background Sync isn't supported.
    }
});
Ask the user for permission
Periodic background synchronization requires the user's permission. Requesting this permission occurs only one time, for a given application.
To ask the user for permission to do periodic background synchronization, use the Permissions API, as follows:
JavaScriptconst status = await navigator.permissions.query({name: 'periodicbackground-sync'}); if (status.state === 'granted') {
  // Periodic background sync can be used.
} else {
  // Periodic background sync cannot be used.
}To learn more about the Permissions API, see Permissions API at MDN.
Register a periodic sync
To register a periodic sync, you need to define a minimum interval and a unique tag name. The unique tag name enables registering multiple periodic background syncs.
JavaScriptasync function registerPeriodicSync() {     await registration.periodicSync.register('get-daily-news', {         minInterval: 24 * 60 * 60 * 1000
    });
}The minInterval used in the code above corresponds to 1 day in milliseconds. This is a minimum interval only, and Microsoft Edge takes other factors into account before alerting your service worker with a periodic sync event, such as the network connection and whether the user regularly engages with the app.
React to periodic sync events
When Microsoft Edge decides it's a good time to run the periodic sync, Microsoft Edge sends a periodicsync event to your service worker. You can handle this periodicsync event by using the same tag name that was specified when registering the sync.
JavaScriptself.addEventListener('periodicsync', event => {     if (event.tag === 'get-daily-news') {         event.waitUntil(getDailyNewsInCache());
    }
});The getDailyNewsInCache function is where your service worker can fetch new content from the server and store it in the cache. This function is expected to return a Promise that signals whether the sync succeeded or failed.
For more information about the PeriodicSync event, the ServiceWorkerRegistration, and the PeriodicSyncManager interface, see:
	Web Periodic Background Synchronization	 - draft specification.
	Web Periodic Background Synchronization API	.
Demo app
DevTools Tips is a PWA that uses the Periodic Background Sync API. The [DevTools Tips] PWA fetches new developer tools tips daily and stores them in cache, so that users can access them next time they open the app, whether they are online or not.
Go to the source code on GitHub the registerPeriodicSync function. The service worker code is where the app listens to the periodicsync event.
Debug periodic background syncs with DevTools
You can use DevTools to simulate periodicsync events instead of waiting for the minimum interval.
To simulate the event:
1. Open DevTools (F12).
2. Select Application > Service Workers.
3. Type the tag name you used when registering the periodic sync in the Periodic Sync input field.
4. Select the Periodic Sync button.

You can also log the periodic background sync activity generated by your app in DevTools:
1. Open DevTools (F12).
2. Select Application > Periodic Background Sync.
3. Select Start recording events.
Periodic sync registrations and dispatches appear in the event log table.

Use the Background Fetch API to fetch large files when the app or service worker isn't running
The Background Fetch API allows PWAs to completely delegate downloading large amounts of data to the browser engine. This way, the app and service worker don't have to be running at all while the download is in progress.
This API is useful for apps that let users download large files (like music, movies, or podcasts) for offline use cases. Because the download is delegated to the browser engine, which knows how to handle a flaky connection or even a complete loss of connectivity, it can pause and resume the download when necessary.
Check for support
To check whether this API is supported, test if the BackgroundFetchManager constructor exists on the global object:
JavaScriptif (self.BackgroundFetchManager) {
    // Background Fetch is supported.
} else {    // Background Fetch isn't supported. }
Start a background fetch
To start a background fetch:
JavaScriptnavigator.serviceWorker.ready.then(async registration => {     const fetch = await registration.backgroundFetch.fetch('my-download-id',                                                            fileUrls, options);
});Above, my-download-id should be a unique string identifier for this background fetch. fileUrls is the list of files to download, this will be an array of string URLs. And options
is an object that can be used to customize the appearance of the download activity in the browser.
For more information about the fetch function, see BackgroundFetchManager.fetch() and Introducing Background Fetch	.
Use the App Badging API and Notifications API to re-engage users
Use the App Badging API and the Notifications API to let users know that background tasks, downloads, or fresh content have been completed, without interrupting their workflow. Using badges and notifications can increase user re-engagement with your app.
With Microsoft Edge, badges appear on app icons in the taskbar, and notifications integrate with the system notification center.
To learn how to use these APIs, see Re-engage users with badges, notifications, and push messages.
Re-engage users with badges and notifications
Article • 06/20/2023
Progressive Web Apps (PWAs) are able to do work when the app isn't running, such as updating data in the cache, or sending messages when the device regains connectivity. To do this, use the following APIs, which are described in Synchronize and update a PWA in the background:
Background Sync API
Periodic Background Sync API
Background Fetch API
To re-engage the user with the app after a background task has been completed, you can use notifications and badges. To do this, use the following APIs:
App Badging API
Notifications API
Badges are user-friendly, and can be used frequently. Badges don't interrupt the user's workflow, and are useful for displaying a small amount of information, such as the number of messages received.
Notifications are useful for apps to take part in the system's notification center and display images and text information. Notifications are useful to alert the user about an important change of state in your app. However, notifications should be used rarely, because they tend to be disruptive to the user's workflow.
Display a badge on the app icon
PWAs can display a badge on their app icon by using the App Badging API. The badge can be empty or it can contain a number.
Check for support
Before using the App Badging API, first check whether the App Badging API is supported in the browser engine that your app runs in, as follows:
JavaScript
if (navigator.setAppBadge) {     console.log("The App Badging API is supported!"); }
Displaying the badge
To set the badge, use the following code from your app frontend or service worker.
JavaScript// To display an empty badge navigator.setAppBadge();
// To display a number in the badge navigator.setAppBadge(42);The setAppBadge function returns a Promise, which can be used to know when the badge was added, and to catch potential errors, as follows:
JavaScriptnavigator.setAppBadge(42).then(() => {     console.log("The badge was added");
}).catch(e => {     console.error("Error displaying the badge", e);
});Clearing the badge
To remove the badge on the app icon, use the following code from your frontend or service worker:
JavaScriptnavigator.clearAppBadge();The clearAppBadge also returns a Promise that can be used to handle potential errors.
Another way to clear a badge is to call setAppBadge again, but pass 0 as the value, this time:
JavaScriptnavigator.setAppBadge(0);Display notifications in the action center
PWAs can display notifications by using the Notifications API.
Check for support
Before using the API, check that it is supported, as follows:
JavaScriptif ("Notification" in window) {     console.log("The Notifications API is supported"); }Request permission
The Notifications API can only be used after having requested the user's permission to display messages. To request permission, use the requestPermission function, as shown below.
Requesting permission should only be done in response to a user action. This is a best practice, to avoid interrupting the user with permission prompts when the user hasn't yet interacted with a feature that uses notifications.
JavaScriptbutton.addEventListener("click", () => {
    Notification.requestPermission().then(permission => {         if (permission === "granted") {             console.log("The user accepted");
        }
    });
});You can check the permission status again later:

JavaScriptif (Notification.permission === "granted") {     console.log("The user already accepted");
}Display the notification
Once you know that the API is supported and the user has accepted notifications, you can display a notification by creating a Notification object:
JavaScriptconst notification = new Notification("Hello World!");
The above code displays a text-only notification message, but you can also customize the message by including additional body and icon properties:
JavaScriptconst notification = new Notification("Hello World!", {     body: "This is my first notification message",     icon: "/assets/logo-192.png",
});
You can also display notifications from your app's service worker. This is useful because the service worker may be doing work while your app isn't running. To send a notification from your service worker, use the
ServiceWorkerRegistration.showNotification function:
JavaScriptself.registration.showNotification("Hello from the service worker!");The showNotification function supports the same arguments as the Notification constructor used in the previous example. The showNotification function also supports the actions property, which is described in the following section.
Add actions to notifications
In a notification, it's possible to add actions for the user to perform. This is only supported in persistent notifications which are shown by using the ServiceWorkerRegistration.showNotification function.
JavaScriptself.registration.showNotification("Your content is ready", {     body: "Your content is ready to be viewed. View it now?",     icon: "/assets/logo-192.png",     actions: [         {             action: "view-content",             title: "Yes"
        },         {
            action: "go-home",             title: "No"
        }
    ]
});
When the user clicks one of the action buttons, your PWA can handle the click by listening for the notificationclick event. When a notificationclick event is received, close the notification and run some code:

JavaScriptself.addEventListener('notificationclick', event => {
    // Close the notification.     event.notification.close();
    // React to the action.     if (event.action === 'view-content') {         console.log("view-content action was clicked");
    } else if (event.action === 'go-home') {         console.log("go-home action was clicked");
    } else {         console.log("main body of the notification was clicked");
    }
}, false);To learn more about notification actions, see Notification.actions at MDN.

Re-engage users with push messages
Article • 11/14/2023
Push messages are a useful communication channel that lets applications update their users with relevant and timely content. Push messages can be used to re-engage users with your app.
One of the most significant advantages of push messages is that they can be delivered by your app's server even when the user isn't actively using your app.
Push message notifications take part in the system's notification center, and they can display images and text information. Notifications are useful to alert the user about an important updates in your app. However, notifications should be used rarely, because they tend to be disruptive to the user's workflow.
To create a PWA that supports push notifications:
1. Request the user's permission to receive push notifications in the client-side code of your PWA.
2. Subscribe to your server's push messages.
3. Send push messages from the server-side code of your PWA.
4. Display notifications when push messages are received.
Step 1 - Request the user's permission to receive push notifications
Before you can send push notifications to your PWA, you must request permission from the user to receive messages. To request permission, use the
Notification.requestPermission API in your client-side code, such as when the user clicks a button:
JavaScriptbutton.addEventListener("click", () => {
  Notification.requestPermission().then(permission => {     if (permission === "granted") {       console.log("The user accepted to receive notifications");
    }   });
});You can check the permission status again later:
JavaScriptif (Notification.permission === "granted") {   console.log("The user already accepted");
}Step 2 - Subscribe to push notifications
To receive push events from your server, subscribe to push notifications by using the Push API.
Before a new push subscription is created, Microsoft Edge checks whether the user has granted the PWA permission to receive notifications.
If the user hasn't granted the PWA permission to receive notifications, the user is prompted by the browser for permission. If the user doesn't grant permission to the browser, the request to registration.pushManager.subscribe throws a DOMException.
The following code snippet shows how to subscribe to push notifications in your PWA:
JavaScriptasync function subscribeToPushMessages() {   const serviceWorkerRegistration = await navigator.serviceWorker.ready;
  // Check if the user has an existing subscription   let pushSubscription = serviceWorkerRegistration.pushManager.getSubscription();   if (pushSubscription) {
    // The user is already subscribed to push notifications     return;
  }
  try {
    // Subscribe the user to push notifications     pushSubscription = await serviceWorkerRegistration.pushManager.subscribe({       userVisibleOnly: true,
      applicationServerKey: urlBase64ToUint8Array("YOUR PUBLIC VAPID KEY 
HERE")
    });
  } catch (err) {
    // The subscription wasn't successful.     console.log("Error", err);
  }
}
// Utility function for browser interoperability function urlBase64ToUint8Array(base64String) {  var padding = '='.repeat((4 - base64String.length % 4) % 4);   var base64 = (base64String + padding)
      .replace(/\-/g, '+')       .replace(/_/g, '/');
    var rawData = window.atob(base64);   var outputArray = new Uint8Array(rawData.length);
    for (var i = 0; i < rawData.length; ++i) {     outputArray[i] = rawData.charCodeAt(i);
  }   return outputArray;
}The VAPID key that's mentioned in the previous code snippet is a public key that's used to identify the server that sends the push messages and encrypt the push message payload. See Step 3 - Send push messages from your server for more information about VAPID keys.
The userVisibleOnly configuration option of the registration.pushManager.subscribe function must be present and set to true. This option indicates that the push message must be displayed to the user. Microsoft Edge doesn't support push messages that aren't displayed to the user.
Step 3 - Send push messages from your server
Your application needs VAPID (Voluntary Application Server Identification) keys in order to send push messages from your server to your PWA clients. There are several VAPID key generators available online (for example, Vapidkeys.com).
Once you have a VAPID key, you can send push messages to your PWA clients by using the Web Push Protocol.
You can use a library to send push messages from your server, depending on the programming language you use. For example, you can use the web-push library if your server uses Node.js. Other libraries are available on the WebPush libraries repo.
Step 4 - Display notifications when push messages are received
After a subscription is created in your PWA (as shown in Step 2 - Subscribe to push notifications), add a push event handler in your service worker to handle push messages that are sent by your server.
The following code snippet shows how to display a notification when a push message is received:
JavaScript// Listen to push events. self.addEventListener('push', event => {
  // Check if the user has granted permission to display notifications.   if (Notification.permission === "granted") {     // Get the notification data from the server.     const notificationText = event.data.text();
    // Display a notification.
    const showNotificationPromise = self.registration.showNotification('Sample PWA', {       body: notificationText,       icon: 'images/icon512.png'     });
    // Keep the service worker running until the notification is displayed.     event.waitUntil(showNotificationPromise);
  } });If your PWA doesn't display a notification when a push message is received, Microsoft Edge displays a generic notification that indicates that a push message was received.
See also
Push notifications overview.
How to make PWAs re-engageable using Notifications and Push.

Handle files in a PWA
Article • 12/11/2024
A Progressive Web App (PWA) that can handle files feels more native to users and better integrated in the operating system.
Websites can already let users upload files by using the <input type="file"> or drag and drop, but PWAs go one step further and can register as file handlers on the operating system.
When a PWA is registered as a file handler for certain file types, the operating system can automatically launch the app when those files are opened by the user, similar to how Microsoft Word handles .docx files.
Define which files your app handles
The first thing to do is to declare which types of files your app handles. This is done in your app manifest file, by using the file_handlers array member. Each entry in the file_handlers array needs to have two properties:
action: The URL the operating system should navigate to when launching your PWA.
accept: An object of accepted file types. Keys are MIME-types (partial types, using
the wildcard symbol *, are accepted), and values are arrays of accepted file extensions.
Consider the following example:
JSON{
    "file_handlers": [
        {
            "action": "/openFile",
            "accept": {
                "text/*": [
                    ".txt"
                ]
            }
        }
    ]
}In this example, the app registers a single file handler for that accepts text files. When a
.txt file is opened by the user by, for example, double-clicking its icon on the desktop, then the operating system launches the app using the /openFile URL.
See also:
Associate files with your PWA at MDN > References > Progressive web apps. file_handlers at MDN > References > Web app manifests.
Detect whether the File Handling API is available
Before handling the files, your app needs to check whether the File Handling API is available on the device and browser.
To check whether the File Handling API is available, test whether the launchQueue object exists, as follows:
JavaScriptif ('launchQueue' in window) {     console.log('File Handling API is supported!');
} else {     console.error('File Handling API is not supported!'); }Handle files on launch
When your app is launched by the OS after a file was opened, you can use the launchQueue object to access the file content.
Use the following JavaScript code to process the text content:
JavaScriptif ('launchQueue' in window) {     console.log('File Handling API is supported!');
    launchQueue.setConsumer(launchParams => {         handleFiles(launchParams.files);
    }); } else {
    console.error('File Handling API is not supported!');
}async function handleFiles(files) {     for (const file of files) {         const blob = await file.getFile();         blob.handle = file;         const text = await blob.text();
        console.log(`${file.name} handled, content: ${text}`);
    }
}The launchQueue object queues all the launched files until a consumer is set with setConsumer. To learn more about the launchQueue and launchParams objects, go to the File Handling explainer.
Demo
My Tracks is a PWA demo app that uses the File Handling feature to handle .gpx files.
To try the feature with this demo app:
Go to My Tracks and install the app.
Download a GPX file on your computer. You can use this test GPX file.
Open the downloaded GPX file.
Notice that the app launches automatically and that Microsoft Edge requests your permission to handle this file.

If you allow the app to handle the file, a new entry appears in the app's sidebar, and you can click the checkbox next to it to visualize the corresponding GPS track.


Feedback
Was this page helpful?  Yes  No

Handle links to a PWA
Article • 12/11/2024
A Progressive Web App (PWA) on the device's operating system can handle links, so that when an associated URL is activated, the PWA can request to be launched instead of the web browser, to create a more engaging experience.
This link handling is like how native apps handle links on many operating systems.
Automatic link handling
The operating system that your PWA is installed on automatically launches your PWA for any link that refers to content that's within the scope of the PWA, when either of the following conditions are met:
The PWA was installed from the Microsoft Store on Windows.
The PWA was installed by using Microsoft Edge, and Microsoft Edge is the default browser on the device.
No code is required for automatic link handling to work, but end users can opt-out of automatic link handling. To opt-out of automatic link handling:
1. In Microsoft Edge, navigate to edge://apps.
2. Find the PWA you want to disable automatic link handling for and click Details.
3. On the PWA details page, under the Link handling section, click the toggle button.

Handle links from other origins by using scope extensions
Scope extensions make it possible for a PWA to capture navigation to paths, subdomains, or even sites other than its own scope. This can be useful for PWAs that span multiple domains for localization purposes. For example, a PWA may span contoso.com, contoso.co.uk, and contoso.fr.
The manifest of a PWA defines which part of the hosting domain the PWA is scoped to.
For example, the www.contoso.com domain name may have a PWA defined under www.contoso.com/app with its scope set to /app. In this case, all the web pages available
within the www.contoso.com/app path are part of the PWA scope. However, the web pages within the www.contoso.com/foo path are not part of the PWA scope. Furthermore, web pages that are available at bar.contoso.com/app or www.contoso.co.uk are also not part of the PWA scope.
Origin trial
As of October 17, 2024, the scope extensions feature is an origin trial. For status, see Web app scope extensions feature at Chrome Platform Status.
When the feature can be used in Microsoft Edge and is no longer in origin trial, the feature will be documented in the present article. See Scope Extensions for Web Apps, an Explainer in the manifest-incubations repo.
See also:
 Use origin trials in Microsoft Edge
See also

Feedback
Was this page helpful?  Yes  No

Handle protocols in a PWA
Article • 12/11/2024
To create a more engaging experience, a Progressive Web App (PWA) can handle multiple protocols. A Uniform Resource Locator (URL) is a string that allows clients to identify a resource on the Web. The first part of a URL is the protocol, such as http or mailto, which lets clients know how to retrieve the resource.
With Protocol Handling, when a PWA is being installed, the PWA can register to handle certain allowed protocols. For example, an email client app can register to handle the
mailto protocol, or a geolocation app can register to handle the geo protocol.
Custom protocols can also be handled, if a PWA registers a protocol that starts with the web+ prefix.
To learn more about other existing protocols, see List of URI schemes.
Register protocols to handle
To use Protocol Handling, declare which protocols your app handles. This is done in your web app manifest file, by using the protocol_handlers array member. Each entry in the protocol_handlers array contains a protocol string and a url string:
JSON{
    "protocol_handlers": [
        {
            "protocol": "mailto",             "url": "/newEmail?to=%s"
        }
    ]
}In the above example, the app is registered to handle the mailto protocol. When the operating system launches the app in response to the mailto protocol, the app navigates to the /newEmail URL, replacing the %s placeholder with the full URL that's being handled.
See also:
 protocol_handlers at MDN > References > Web app manifests.
Test protocols with the DevTools
You can use the Application tool in Microsoft Edge DevTools to verify that Microsoft Edge successfully registered your app as a handler for the protocols you defined in your web app manifest. You can also test protocols and launch your PWA with different URLs and endpoints. For more information, see Test Progressive Web App (PWA) protocol handling.
See also
Getting started with Protocol Handlers for your web app
URL protocol handler registration for PWAs
Test Progressive Web App (PWA) protocol handling

Feedback
Was this page helpful? 

Define icons and a theme color
Article • 06/19/2023
PWAs that are installed on Windows can be customized in the way they appear in the operating system (OS). A PWA can define a set of icons and a theme color for the title bar.
Define icons
In Windows, apps are recognizable to users by their icons. Icons appear in the Taskbar, in the Start Menu, and in other places such as system settings.
A PWA can configure which image files the operating system should use to display an icon in these various places. Multiple images can be provided for the OS to choose, depending on the context.
In the web app manifest file, app icons are defined with the icons member:
JSON{
    "icons": [
        {
            "src": "/icons/icon-192x192.png",
            "sizes": "192x192",             "type": "image/png"
        },
        {
            "src": "/icons/icon-256x256.png",
            "sizes": "256x256",             "type": "image/png"
        },
        {
            "src": "/icons/icon-384x384.png",
            "sizes": "384x384",             "type": "image/png"
        },
        {
            "src": "/icons/icon-512x512.png",
            "sizes": "512x512",             "type": "image/png"
        }
    ]
}Each icon in the icons array should come with at least the src and sizes properties. An icon can also have the type and purpose properties.
ﾉ Expand table
PropertyDescriptionsrcThe path to the image file, which can be a relative path from the app root folder, or an absolute URL.sizesA space-separated list of sizes that the corresponding image can be used for.typeAn optional hint for the OS to quickly detect the image type.purposeAn optional hint to help the OS choose the right icon image, depending on the context. The value can be monochrome, maskable, or any.Learn more about the icons member.
Icon image sizes
Your PWA can be enhanced on Windows by supplying the images with specific dimensions in your web app manifest. We recommend choosing one of the options below:
 Level 1: (Basic image support: 512x512) This is the base image from which to generate missing images.
 Level 2: (Tiles) At this level, your web app manifest contains tile images for the default (1x) display scale. Each of the images must be in PNG format and have the
any purpose set. Here is a list of recommended images and sizes.
44x44 - app icon
71x71 - small tile
150x150 - medium tile
310x150 - wide tile
310x310 - large tile
50x50 - store logo
620x300 - splash screen
Level 3: (Tiles with display scales) At this level, your web app manifest should contain tile images for all Windows display scale sizes. Display scale is a userconfiguration in Windows (users can change it by going to Settings > Display > Scale). Your web app manifest icons should include images with these dimensions:
 44x44 - app icon

55x55 - app icon 1.25x display scale
66x66 - app icon 1.5x display scale
88x88 - app icon 2x display scale
176x176 - app icon 4x display scale
71x71 - small tile
89x89 - small tile 1.25x display scale
107x107 - small tile 1.5x display scale
142x142 - small tile 2x display scale
284x284 - small tile 4x display scale
150x150 - medium tile
188x188 - medium tile 1.25x display scale
225x225 - medium tile 1.5x display scale
300x300 - medium tile 2x display scale
600x600 - medium tile 4x display scale
310x150 - wide tile
388x188 - wide tile 1.25x display scale
465x225 - wide tile 1.5x display scale
620x300 - wide tile 2x display scale
1240x600 - wide tile 4x display scale
310x310 - large tile
388x388 - large tile 1.25x display scale
465x465 - large tile 1.5x display scale
620x620 - large tile 2x display scale
1240x1240 - large tile 4x display scale
50x50 - store tile
63x63 - store tile 1.25x display scale
75x75 - store tile 1.5x display scale
100x100 - store tile 2x display scale
200x200 - store tile 4x display scale
620x300 - splash screen
775x375 - splash screen 1.25x display scale
930x450 - splash screen 1.5x display scale
1240x600 - splash screen 2x display scale
2480x1200 - splash screen 4x display scale
Level 4 (Tiles, display scales, and target sizes) At this level you supply images for tiles with display scales and target size images for display in various surfaces in Windows, including taskbar, start menu, task manager, ALT+Tab task switcher, and more. This provides the best experience for your users, but also requires the most developer effort. Your web app manifest icons should include images with these dimensions:
44x44 - app icon
55x55 - app icon 1.25x display scale
66x66 - app icon 1.5x display scale
88x88 - app icon 2x display scale
176x176 - app icon 4x display scale
71x71 - small tile
89x89 - small tile 1.25x display scale
107x107 - small tile 1.5x display scale
142x142 - small tile 2x display scale
284x284 - small tile 4x display scale
150x150 - medium tile
188x188 - medium tile 1.25x display scale
225x225 - medium tile 1.5x display scale
300x300 - medium tile 2x display scale
600x600 - medium tile 4x display scale
310x150 - wide tile
388x188 - wide tile 1.25x display scale
465x225 - wide tile 1.5x display scale
620x300 - wide tile 2x display scale
1240x600 - wide tile 4x display scale
310x310 - large tile
388x388 - large tile 1.25x display scale
465x465 - large tile 1.5x display scale
620x620 - large tile 2x display scale
1240x1240 - large tile 4x display scale
50x50 - store tile
63x63 - store tile 1.25x display scale
75x75 - store tile 1.5x display scale
100x100 - store tile 2x display scale
200x200 - store tile 4x display scale
620x300 - splash screen
775x375 - splash screen 1.25x display scale
930x450 - splash screen 1.5x display scale
1240x600 - splash screen 2x display scale
2480x1200 - splash screen 4x display scale
16x16 - target size for taskbar, start menu, task manager
20x20 - target size for taskbar, start menu, task manager
24x24 - target size for taskbar, start menu, task manager
30x30 - target size for taskbar, start menu, task manager
32x32 - target size for taskbar, start menu, task manager
36x36 - target size for taskbar, start menu, task manager 40x40 - target size for taskbar, start menu, task manager
44x44 - target size for taskbar, start menu, task manager
48x48 - target size for taskbar, start menu, task manager
60x60 - target size for taskbar, start menu, task manager
64x64 - target size for taskbar, start menu, task manager
72x72 - target size for taskbar, start menu, task manager
80x80 - target size for taskbar, start menu, task manager
96x96 - target size for taskbar, start menu, task manager
256x256 - target size for taskbar, start menu, task manager
Image level summary
Consider, for example, how your app icon might show different content depending on the available surface area:
Small surface: App icon (44x44) in taskbar, showing a small, abbreviated logo:
Larger surface: Medium tile (150x150) in start menu, showing the full logo of the app:



Notice how the content of the icon changed. This is possible only through the use of higher levels of icon support. We recommend developers choose higher levels to give the best experience for your Windows users.
Icon descriptions
Below you'll find a description of each app icon and where they show up in Windows.
The normal app icon that's shown in the start menu, task bar, or task manager.

The small tile is shown in the start menu when the user set your app's tile to small size.

The medium tile icon is shown in the start menu when the user sets your app's tile to medium size.

300x300 (2x scale)
600x600 (4x scale)
The wide tile icon is shown in the start menu when the user sets your app's tile to wide size.

The large tile icon is in the start menu when the user sets your app's tile to large size.

The store logo icon is shown in app installer, Windows Partner Center, the "Report an app" option in the Store, and the "Write a review" option in the Store.

The splash screen asset is shown as the splash screen for your app. Currently supported only in classic package. In the future, we may add support for the modern hosted app package as well.

Target sized images
In addition to the standard scale factor sizes described above, we also recommend creating "target-size" assets. We call these assets target-size because they target specific sizes, such as 16 pixels, rather than specific scale factors, such as 400. Target-size assets are for Windows surfaces that don't use the scaling plateau system.
For example, the Apps & features Windows setting uses app icons with specific sizes

Choose a theme color
On Windows, PWAs have their own application window, with a title bar that contains the name of the app and the system close, maximize, and minimize icons.
The web content created by the PWA fills the entire surface area of the window, except for the title bar area, which can be customized with a theme color.
The following image shows what a PWA's title bar looks like when not using a theme color, and when using a theme color that matches the main color of the app:

JSON{
    "theme_color": "#0d4c73"
}Individual web pages can also define a theme color, by using the theme-color meta tag. When this meta tag is present on the page, its defined color overrides the color that's found in the web app manifest.
Display app content in the title bar area
You can display your app content in the title bar area, by using the Window Controls
Overlay feature. See Display content in the title bar area using Window Controls Overlay.
See also
PWABuilder Image Generator
Image recommendations for Windows PWA packages
Store data on the device
Article • 01/24/2023
Progressive Web Apps (PWA) offer robust options to store data locally to enable users to continue working even if the network connection becomes unstable or goes offline.
There are several ways in which a PWA can store data on a device, such as local storage, Cache API, or IndexedDB.
The following table describes the different options, and the rest of this article goes into more details and usage scenarios for each option.
ﾉ Expand table
Storage optionDescriptionWeb
StorageWeb Storage has two types: session and local. Web Storage is useful to store small amounts of data from your app's front-end code. The data is structured as keyvalue pairs and is only available to the current app origin. In the case of session storage, the data is cleared when the session ends, for example when the app is closed, or when the user browses to another origin in the same window or tab.
Local storage persists until the app removes the data.IndexedDBIndexedDB is an API for storing larger amounts of structured data. The API is asynchronous and can be used both from your app's front-end code and service worker code. Use the IndexedDB API to store a significant amount of structured data on the client, or binary data, such as encrypted media objects or files.CacheThe Cache API can be used to manage cached resources. The Cache API is Promisebased and allows developers to store and retrieve many web resources-HTML, CSS, JavaScript, images, JSON, and so on. Usually, the Cache API is used within the context of a service worker, but it's also available to your app's front-end code.File System
AccessThe File System Access API allows your PWA to read files and folders on the user's device and save changes back to them.Note: Do not use WebSQL or Application Cache. While these are two other browser storage mechanisms, they have both been deprecated. Instead of WebSQL, use IndexedDB. Instead of Application Cache, use the Cache API.
Web Storage
Web Storage is useful for storing small amounts of string data on the user's device. The simplicity of the key-value pair system of Web Storage makes it easy to use.
Web Storage works synchronously in your app's main thread only. This means that Web
Storage isn't available for use within service workers, and that heavy usage of Web Storage may create performance issues for your application.
Each type of Web Storage, session and local, is maintained as a separate data store that's isolated to the domain that created it.
sessionStorage persists only for the duration of the session - for example, while
the browser is open, which includes when the page is refreshed.
localStorage persists until the data is removed by the app code, the user, or the
browser.
The following code shows how to use localStorage, which is similar to how sessionStorage is used:
JavaScriptconst browserInformation = {   name: 'Microsoft Edge',   version: 108
}; localStorage.setItem('browser', JSON.stringify(browserInformation));The above code stores a JavaScript object as a JSON string in localStorage using the setItem() method, and assigns a key equal to browser. You can retrieve the information
from localStorage by using the getItem() method as shown below:
JavaScriptconst value = localStorage.getItem('browser'); const browserInformation = JSON.parse(value);To learn more, see Web Storage API on MDN.
IndexedDB
IndexedDB is an asynchronous API for storing structured data that can be used in your app's front-end code or service worker code. Use the IndexedDB API for storing a significant amount of structured data on the client, or binary data, such as encrypted media objects or files.
IndexedDB is the best option for storing data in your PWA, because using the API doesn't slow down your app by blocking the main thread, and it can be used both from your app's front-end code and service worker.
Using IndexedDB is more complex than using Web Storage, and requires the following steps to store data:
1. Open a database, by using the window.indexedDB.open() function.
2. Create an object store in the database, by using the IDBDatabase.createObjectStore() function.
3. Start a transaction to store data, by using the IDBDatabase.transaction() function.
4. Wait for the operation to complete, by listening to an event.
To learn more and view code examples, see Using IndexedDB on MDN.
Cache
The Cache API is a system for storing and retrieving network requests and responses in your app's front-end code or service worker. It can be used to store assets, such as images and files, locally on the user's device. This can make your application work even when it's offline, or improve its performance by reducing the number of network requests that are needed to render the app.
The following code snippet shows how to listen to the fetch event in a service worker, and store the response from the server by using the Cache API:
JavaScriptself.addEventListener("fetch", event => {   async function cacheAndReturnRequest() {
    // Get the response from the server.     const fetchResponse = await fetch(event.request.url);
    // Open the app's cache.     const cache = await caches.open("cache-name");
    // Put the response in cache.
    cache.put(event.request.url, fetchResponse.clone());
    // And return the response.     return fetchResponse.
  }
  event.respondWith(cacheAndReturnRequest());
});To discover other useful Cache API scenarios, see Caching at MDN > References > Progressive web apps > Guides.
File System Access
The File System Access API makes it possible for your app to access files on the user's device in a way that's similar to native applications. It can be used to create applications that can read and write files, such as text or image editors.
To open a file from the user's device, use the showOpenFilePicker() function:
JavaScriptopenFileButton.addEventListener("click", async () => {   const fileHandles = await window.showOpenFilePicker(); });To learn more, see Window.showOpenFilePicker() on MDN.
The File System Access API can also be coupled with the PWA File Handling feature to register your app as a handler of specific file types, and therefore feel more native to users. To learn more, see Handle files in a PWA.
The origin-private File System Access API is a variation of the File System Access API that's intended to provide more privacy for users. It allows applications to access files on the user's device too, but only within a specific directory that's private to the app's origin. Also, this API is not intended to make it easy for users to access the private directory using their file explorer.
To open a file from the origin-private file system, use the navigator.storage Promisebased API:
JavaScript// Get the origin-private directory handle.
const root = await navigator.storage.getDirectory();
// Get the handle for a file in the directory.
const fileHandle = await root.getFileHandle("my-file.txt");Storage quota
In Microsoft Edge, local and session storage are limited to about 5MB each.
Other types of data storage, such as IndexedDB, Cache API, or Origin Private File System Access API, can use up to 60% of the total disk space on the device. For example, if the device your app is running on has a 64GB disk, Microsoft Edge allows your app to store up to about 38GB of data.
Note that the free space that's actually available on the device may be less than the 60% storage quota. For example, if the device your app is running on has a 64GB disk, but 50GB is already used by the operating system and other files, your app will only be able to store 14GB of data, even if the storage quota is still 38GB.
You can use navigator.storage.estimate() to ask the Storage Manager API what the storage quota for your app's origin is, and how much from it is already used. To learn more, see StorageManager.estimate()	 on MDN.
Trying to store more data than is available or allowed results in a JavaScript error. Your code should catch this error by using try...catch statements. The code snippet below shows how to catch an exceeded quota error when storing data using Web Storage:
JavaScripttry {   localStorage.setItem('foo', 'bar');
} catch (e) {
  // Code that handles the lack of storage space.
}Data eviction
When the user's device starts being low on available disk space, also known as storage pressure, Microsoft Edge will start evicting non-persistent data.
This means that the data your app stored by using the Cache API, IndexedDB, the Origin Private File System Access API, or Web Storage might get evicted.
By default, the data your app stores is not considered persistent and can get evicted when there's storage pressure. If your app stores critical data, use the
navigator.storage.persist() function to make your app's storage persistent. Persistent
storage can only be cleared by the user. To learn more, see StorageManager.persist() on MDN.

Feedback
Was this page helpful? 
Best practices for PWAs
Article • 12/11/2024
This article lists best practices to make your PWA a great application for your users. When users install applications, they have certain expectations of what these applications can do, such as work offline, integrate deeply into the operating system, or perform non-trivial computing tasks.
Read the best practices on this page to learn to make your PWA look and feel like what users expect.
This page assumes that you already have a PWA. To learn more about building a simple PWA first, see Get started with PWAs.
Provide a custom installation
Your app can already be installed using the App available button in the browser address bar if you follow the steps in Get started with PWAs.
A custom installation experience, in the app user interface, can be more obvious to your users and lead to more installations.
To create a custom installation experience, use the beforeinstallprompt event and provide your own installation button in your app.
To see a code example of the beforeinstallprompt event, check the PWAmp demo source code	. To test the custom installation, open the PWAmp demo, and then click More tools (...) > About > Install app in the app.
Submit to app stores
Many users will look for your app on their device's app store. Downloading from an official app store provides a trustworthy and familiar experience for your users.
You can publish your PWA to the Microsoft Store for Windows, the App store for iOS, or the Play Store for Android, by using PWA Builder.
To learn how to use PWA Builder and publish to the Microsoft Store, see Publish a PWA to the Microsoft Store.
Create a great app icon
Many users find apps on their devices by their icons. To help users find your app more easily, choose a recognizable icon, make sure it stands out, and make sure that it adapts to the devices your app is installed on.
On Windows, your app icon appears in many places such as the taskbar, the Start menu, or the Alt+Tab task switcher. Provide multiple image sizes to ensure your app icon is easily recognizable in these places.
To learn which image size are needed on Windows, see Icon image sizes in Define icons and a theme color.
Use a standalone app window
Native applications have their own dedicated windows. PWAs can define how they appear in the host operating system.
To display your PWA in a standalone window with no browser navigation user interface, use the display member in your web app manifest file, and set it to standalone.
If your app has several HTML pages, make sure users can go between the pages using buttons or links within your app. Use the minimal-ui value of the display manifest member to let users go between pages using previous and next buttons rendered by the browser in your app title bar.
To create a more immersive, native-like experience, desktop PWAs can also choose to hide the default operating system title bar and display their own content instead. Displaying content where the title bar normally is can help PWAs feel more like native apps. Many desktop applications, such as Visual Studio Code, Microsoft Teams, and Microsoft Edge already do this.
To replace the title bar, see Display content in the title bar area using Window Controls Overlay.
Integrate in the operating system
Users expect installed applications to integrate with the host operating system in some way.
Your app can provide a more familiar, engaging, and seamless experience by using operating system integration features such as shortcuts, sharing between apps, badging, file handling, or link handling.
Shortcuts
Shortcuts make it possible to define direct links to your app functionality by rightclicking the app icon.
See Define app shortcuts (long-press or right-click menus).
App sharing
PWAs can share content to other apps, and receive content from other apps, via the operating system's share dialog.
See Share content with other apps.
Icon badges
PWAs can display status badges on their app icons to alert users of the presence of new content in the app.
See Display a badge on the app icon in Re-engage users with badges, notifications, and push messages.
File handling
You can register your PWA to be a file handler for certain file types.
Use the PWA file handler feature to automatically launch your app when certain file are opened by the user in the operating system.
See Handle files in a PWA.
Link and protocol handling
Register your app is a link or protocol handler to automatically launch your app when certain links are used in other applications.
See Handle links to a PWA and Handle protocols in a PWA.
Widgets

Create your own app widgets to display in the operating system widget dashboard such as the Windows 11 Widgets Board.
See Display a PWA widget in the Windows Widgets Board.
Support offline scenarios
When connected to a slow or unreliable network, or even with no internet access, installed applications can usually still be opened and used. Users of installed applications expect them to continue working under these conditions. They also expect the network-dependent parts of an application to gracefully handle the lack of connection with a custom message and local caching capabilities.
To improve retention, add a service worker to your PWA. You can use the service worker's Fetch and Cache APIs, and local data storage access, to provide a good offline experience for your users.
You can provide a good offline experience in several steps:
1. Cache all the static resources your app needs to start, display content, and let users perform the most common tasks.
2. Redirect to a custom offline page for the pages that can't be cached.
3. Gracefully handle the tasks of your app that can't be used with no internet access.
4. Implement advanced scenarios such as letting users download data for offline viewing.
See also:
Synchronize and update a PWA in the background.
Using Service Workers at MDN > References > Web APIs > Service Worker API > Guides.
Service Worker API at MDN > References > Web APIs.
	FetchEvent	 at MDN > References > Web APIs > Service Worker API.
	Cache	 at MDN > References > Web APIs > Service Worker API.
Store data locally
To provide a rich and fast experience to your users, use the different persistent data storage options that are available to PWAs, such as:
Cache storage, to store static resources for your app.
Local and Session storage, to store small amounts of user data.

IndexedDB, to store larger, structured, user data.
 File System Access API, to store files on disk.
To learn more, see Store data on the device.
Use advanced capabilities
Installed apps typically perform advanced computing scenarios that websites usually don't support.
To provide an app-like experience, use advanced web capabilities such as:
 Hardware access with the Web Bluetooth API, USB (WebUSB API), or Web NFC
API.
Clipboard access with the Clipboard API.
Device contacts integration with the Contact Picker API.
Rich media interactions with the Canvas API	, WebGL: 2D and 3D graphics for the web (WebGL API), or Web Audio API	.
 Safe and trusted authentication and payment with the WebAuthn API and Payment Request API.
Non-trivial computing tasks with WebAssembly
	Reading and writing to files with the File System API	.
Ensure your app's most important tasks can be done across all browsers and devices.
See Test on multiple browsers and devices.
Make your app look and feel like a real app
Users install apps on their devices to achieve specific tasks, and they have certain expectations about how these tasks are presented in the user interface and how they integrate in the host operating system.
To let your users achieve your app's most important tasks easily and in a familiar way, make design choices such as:
 Don't use a big header area like websites do for navigation to other pages. Use a menu metaphor instead.
Don't use a big footer area like websites do for more links and information.
Use the system-ui font to make your content feel more native and load faster.
Use less links, and prefer bigger hit targets.
Support the operating system's light and dark themes by using the prefers-colorscheme CSS media feature.
Provide a background-color and theme-color in your web app manifest to customize the application window. See Web app manifests.
 Focus on the most important tasks, de-clutter de content, and streamline the user interface.
 Re-organize the user interface based on the device's form factor, by using CSS grid layout	, CSS flexible box layout (flexbox), CSS media queries, and Responsive images.
Improve perceived performance by registering user interactions immediately.
Consider using skeleton screens, if rendering the next screen takes time. See Building Skeleton Screens with CSS Custom Properties.
Test on multiple browsers and devices
With Progressive Web Apps, you deliver an app for all devices, from one codebase. To make sure your app works everywhere, test it on multiple browsers, operating systems, and devices.
Make sure the most important scenarios of your app work everywhere, and progressively enhance the experience on supporting devices.
To test your app in multiple environments, consider the following techniques:
Cross browser testing.
Emulate and test other browsers from Microsoft Edge, by using DevTools.
Create a remote debugging session on Windows or Android.
Test and automation in Microsoft Edge to automate your testing.
Test on virtual machines.
Support deep linking
To improve discovery and sharing of your app through the web and social media, route each page of your app to a unique URL and support Deep linking.
See also
Local: PWA:
Define app shortcuts (long-press or right-click menus)
Display a badge on the app icon in Re-engage users with badges, notifications, and push messages.
 Display a PWA widget in the Windows Widgets Board
Display content in the title bar area using Window Controls Overlay
Get started with PWAs
Handle files in a PWA
Handle links to a PWA
Handle protocols in a PWA
Icon image sizes in Define icons and a theme color.
Publish a PWA to the Microsoft Store
Share content with other apps
Store data on the device
Synchronize and update a PWA in the background Test and automation in Microsoft Edge
Local: DevTools:
Emulate and test other browsers
Windows Android
MDN:
beforeinstallprompt at MDN > References > Web APIs > Window.
	Cache	 at MDN > References > Web APIs > Service Worker API.
	Canvas API	 at MDN > References > Web APIs.
	Clipboard API	 at MDN > References > Web APIs.
Contact Picker API	 at MDN > References > Web APIs. Cross browser testing	 at MDN > Guides > Tools and testing. display	 in MDN > References > Web app manifests > members.
	FetchEvent	 at MDN > References > Web APIs > Service Worker API.
	File System API	 at MDN > References > Web APIs.
CSS flexible box layout (flexbox) at MDN > References > CSS.
	CSS grid layout	 at MDN > References > CSS.
CSS media queries	 at MDN > References > CSS. Payment Request API	 at MDN > REferences > Web APIs.
	prefers-color-scheme	 at MDN > References > CSS > @media.
	Responsive images	 at MDN > Guides > HTML > Multimedia and embedding.
	Service Worker API	 at MDN > References > Web APIs.
Using Service Workers	 at MDN > References > Web APIs > Service Worker API > Guides.
	Web app manifests	 at MDN > References.
	Web Bluetooth API	 at MDN > References > Web APIs.
	Web NFC API	 at MDN > References > Web APIs.
USB at MDN > References > Web APIs > WebUSB API.
WebAssembly at MDN.
Web Audio API at MDN > References > Web APIs.
WebGL: 2D and 3D graphics for the web (WebGL API) at MDN > References > Web APIs.
Wikipedia:
 Deep linking
GitHub:
PWAmp demo source code
PWAmp demo
Building Skeleton Screens with CSS Custom Properties virtual machines
WebAuthn API
Feedback
Was this page helpful?  Yes  No

Debug a PWA
Article • 12/11/2024
A Progressive Web App (PWA) is built by using web technologies. Therefore, all the tools available in Microsoft Edge DevTools are also helpful for a PWA. A PWA also uses a web app manifest, and can use service workers and other specific features and APIs that require special debugging tools.
See also:
 Microsoft Edge DevTools documentation
Open DevTools
A PWA can be installed locally and be used in a standalone window, or can be used in a web browser like a website.
You can open DevTools on your PWA in the same way in both cases. To open DevTools, use one the following ways:
Right-click any item in the app user interface, and then select Inspect.
Press Ctrl+Shift+I (Windows, Linux) or Command+Option+I (macOS).
Press F12.
To learn more, see Open DevTools in Overview of DevTools.
Test your changes
When developing a PWA, you make changes to your source code and then test them.
The fastest way to test your changes is to load your PWA in a web browser by using its local development URL, for example http://localhost:8080. Testing in a browser is faster because you don't need to install the PWA locally first.
To test your changes, refresh the browser tab where the PWA is loaded by pressing F5.
Once you have a service worker which caches static files, pressing F5 might not always reload your latest changes in the browser. To force the browser to reload your changes, use one of the following ways:
 Open DevTools, right-click Refresh in the browser toolbar, and click Empty cache and hard refresh.
 Open DevTools, open the Application Tool, click Service workers, and then select the Bypass for network checkbox.
To test PWA features that are enabled by adding code in your web app manifest, you must install your PWA. If you then make further changes to your web app manifest, you must uninstall and reinstall the PWA. To learn how to uninstall your PWA, see Managing PWAs in Use PWAs in Microsoft Edge.
Debug your service worker
Your PWA service worker is responsible for making your app faster and more reliable to network conditions.
The service worker does this by running in parallel to your app and intercepting network requests. It has its own lifecycle that's independent from your app's lifecycle.
To check if your service worker was installed correctly, and which state of its lifecycle it currently is in, use the Service workers pane of the Application tool. To learn more, see Service workers in Debug a Progressive Web App (PWA).
To debug the JavaScript code running in the service worker thread, by using breakpoints, switch to the service worker thread in the Sources tool. To learn more, see Change the thread context in JavaScript debugging features.
Service workers can run even when your app isn't running and execute background tasks to keep your app up to date. For example, they can fetch data from the server or receive push messages.
To debug your service worker background tasks, use the Background Services section of the Application tool. To learn more, see Debug background services.
View your web app manifest
Your web app manifest defines the name, description, icon, and features of your application. Whether these features work correctly can depend on whether they were correctly entered in the manifest JSON file.
To check if Microsoft Edge detects your manifest file and the features in it, use the Manifest pane of the Application tool. To learn more, see Web app manifest in Debug a Progressive Web App (PWA).
Certain PWA manifest features have dedicated tools. For example, you can Test Progressive Web App (PWA) protocol handling.
View and edit local data
To provide a rich and fast experience to your users, your PWA can store data locally. To view, edit, and delete the stored data, refer to the following DevTools documentation, depending on the storage option you chose:
View Cache data.
View and change IndexedDB data.
View and edit local storage.
View and edit session storage.
To view the total amount of stored data used by your PWA, the available quota, and delete the data, use the Storage pane of the Application tool. To learn more, see Storage in Debug a Progressive Web App (PWA).
Simulate different screen sizes
With Progressive Web Apps, you deliver an app for all devices, from one codebase. To make sure your app adapts to all device's screen sizes, use the Device Emulation tool in DevTools.
To learn more, see Emulate mobile devices (Device Emulation).
Note that the Device Emulation tool is only available when DevTools is used in the browser, and not when DevTools is used in an installed PWA. Installed PWAs have their own standalone windows that are very easy to resize to test your app under different screen sizes.

Feedback
Was this page helpful? 
Progressive Web App demos
Article • 12/11/2024
Refer to these demo PWAs to learn how to use features and APIs that can progressively enhance your apps when installed on devices.
PWAmp
PWAmp is a desktop music player that plays local and remote audio files.

ﾉ Expand table
FeatureDescriptionDocumentationWindow
Controls
OverlayThe space normally reserved to the title bar can be used by PWAmp to display a visualization of the current song.Display content in the title bar area using Window Controls
OverlayProtocol
HandlingLinks that start with web+amp: can be used to share remote songs.Handle protocols in a PWAFeatureDescriptionDocumentationFile HandlingAudio files can be opened with PWAmp directly. Right-click on a file ending with .mp3 for example and click Open with.Handle files in a PWAWeb ShareSongs can be shared with other apps through the operating system sharing dialog.Sharing contentShare TargetOther apps can share audio files with PWAmp, through the operating system sharing dialog.Receiving shared contentWidgetA mini-player Widget can be installed in Windows 11 Widgets dashboard to see the current song.Display a PWA widget in the
Windows Widgets BoardSidebarPWAmp can be pinned to the sidebar in Microsoft Edge.Build a PWA for the sidebar in
Microsoft EdgeWami
Wami can apply a sequence of image manipulation steps such as cropping, resizing, rotating, or adding effects on batch of images.

ﾉ Expand table
FeatureDescriptionDocumentationWindow
Controls
OverlayThe space normally reserved to the title bar can be used by wami.Display content in the title bar area using Window Controls OverlayFile System
AccessWami can save transformed images back to disk.File System Access APIWebboard

ﾉ Expand table
FeatureDescriptionDocumentationWeb
ShareDrawings can be shared with other apps through the operating system sharing dialog.Sharing contentMy Tracks

ﾉ Expand table
FeatureDescriptionDocumentationWindow
Controls
OverlayThe space normally reserved to the title bar is used by My Tracks to display its own search bar.Display content in the title bar area using Window Controls OverlayProtocol
HandlingMy Tracks handles URIs that start with the geo: protocol to show locations on the map.Handle protocols in a PWAFile HandlingMy Tracks natively handles *.gpx files.Handle files in a PWAShortcutsMy Tracks defines shortcuts to easily hide and show all tracks from the map.Define app shortcuts (long-press or right-click menus)My Movies
This simple PWA demo lets you search for made up movies and store them locally.

ﾉ Expand table
FeatureDescriptionDocumentationBackground
SyncIf the user is offline when displaying more information about a movie, the app uses
Background Sync to retrieve the information later when the user is back online.Use the Background Sync API to synchronize data with the serverNotificationsWhen the information about a movie is retrieved, a notification is sent so the user can re-engage with the app.Display notifications in the action centerBPM Techno
BPM Techno analyzes audio via the device microphone and displays a real-time beatsper-minute (BPM) counter.

App, source code and Readme file. BPM Techno uses the following features:
ﾉ Expand table
FeatureDescriptionDocumentationShortcutsBPM Techno defines a shortcut that lets users upload an audio file in the app.Define app shortcuts (longpress or right-click menus)File
HandlingBPM Techno natively handles *.mp3 files.Handle files in a PWAShare TargetOther apps can share audio files with BPM Techno, through the operating system sharing dialog.Receiving shared contentProtocol
HandlingThe app handles web+bpm: URIs which can be used to send links to a song to be analyzed.Handle protocols in a PWA1DIV
1DIV is a CSS editor that lets users create drawings with just one HTML element and CSS code.

ﾉ Expand table
FeatureDescriptionDocumentationWindow
Controls
Overlay1DIV uses the space normally reserved by the title bar to display a logo, search field, and button.Display content in the title bar area using Window Controls OverlaySee also
 Download or clone the Demos repo in Sample code for DevTools.

Feedback
Was this page helpful?  Yes  No
WebView2 documentation
Embed web technologies (HTML, CSS, and JavaScript) in your native apps.


Getting Started tutorials
Get started with WebView2 in HoloLens 2 Unity apps (Preview)


Develop secure WebView2 apps

Introduction to Microsoft Edge WebView2
Article • 11/26/2024
The Microsoft Edge WebView2 control allows you to embed web technologies (HTML, CSS, and JavaScript) in your native apps. The WebView2 control uses Microsoft Edge as the rendering engine to display the web content in native apps.
With WebView2, you can embed web code in different parts of your native app, or build all of the native app within a single WebView2 instance.

Hybrid app approach
Developers must often decide between building a web app or a native app. This decision hinges on the tradeoff between reach and power:
 Web apps allow for a broad reach. As a Web developer, you can reuse most of your code across different platforms.
 To access all the powerful capabilities of a native platform, use a native app.
The following diagram shows the spectrum of apps, from maximum reach, to maximum power:

Hybrid apps, in the middle of this spectrum, allow you to enjoy the best of both worlds:
the ubiquity and strength of the web platform, combined with the power and full capabilities of the native platform.
WebView2 benefits
 Web ecosystem and skill set. Utilize the entire web platform, libraries, tooling, and talent that exists within the web ecosystem.
Rapid innovation. Web development allows for faster deployment and iteration.
Windows 10 and 11 support. Support for a consistent user experience across Windows 10 and Windows 11.
Native capabilities. Access the full set of Native APIs.
Code-sharing. Add web code to your codebase allows for increased reuse across multiple platforms.
 Microsoft support. Microsoft provides support and adds new feature requests on supported platforms.
 Evergreen distribution. Rely on an up-to-date version of Chromium with regular platform updates and security patches.
 Fixed Version distribution. Optionally package a specific version of the Chromium bits in your app.
 Incremental adoption. Add web components piece-by-piece to your app.
Supported platforms
The following programming environments are supported:
Win32 C/C++
.NET Framework 4.6.2 or later
.NET Core 3.1 or later
.NET 5 or later
WinUI 2.0
WinUI 3.0
WebView2 apps can run on the following versions of Windows:
Windows 11
Windows 10
Windows 10 IoT Enterprise LTSC x32 2019
Windows 10 IoT Enterprise LTSC x64 2019
Windows 10 IoT Enterprise 21h1 x64
Windows Server 2022
Windows Server 2019
Windows Server 2016
WebView2 is also supported on the following devices:
Xbox HoloLens 2
Windows 7 and 8
WebView2 Runtime version 109 is the final version that supports the following versions of Windows. WebView2 Runtime and SDK version 110.0.1519.0 and higher don't support these operating systems.
Windows 8/8.1
Windows 7
Windows Server 2012 R2
Windows Server 2012
Windows Server 2008 R2
See also:
 Microsoft Edge supported Operating Systems - WebView2 support for Windows 7 and Windows Server 2008 R2 have the same support timeline as Microsoft Edge.  Microsoft Edge and WebView2 ending support for Windows 7 and Windows 8/8.1
Sequence of samples to install and run
To start learning WebView2, use the following recommended sequence:
1. Install Visual Studio, install preview channels of Microsoft Edge, and clone the WebView2Samples repo. See Set up your Dev environment for WebView2.
2. Install and run the main sample. See Win32 sample app.
3. Install and run the sample for your target platform, if it's a platform other than Win32. See Sample apps.
4. Install and run the finished Getting Started tutorial for your target platform (if the finished project is provided). See Getting Started tutorials.
5. Do the Getting Started steps to add WebView2 code to the Visual Studio starter project for your platform. See Getting Started tutorials.
Some samples might require updating an SDK, as explained in the article for each sample.
After your environment is set up and the samples build and run on your machine, you can develop your app by reading the other documentation, such as Overview of WebView2 APIs.
See also
Overview of WebView2 APIs
  Distribute your app and the WebView2 Runtime developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features at developer.microsoft.com.
Microsoft.com:
 Become a Microsoft Edge Insider - download the preview channels of Microsoft Edge (Canary, Dev, and Beta).
YouTube:

Feedback
Was this page helpful? 

Overview of WebView2 APIs
Article • 11/18/2024
Embedding the WebView2 control in your app gives your app access to various methods and properties that are provided through the WebView2 classes or interfaces. WebView2 has hundreds of APIs that provide a vast set of capabilities, ranging from enhancing your app's native-platform capabilities, to enabling your app to modify browser experiences. This article provides a high-level grouping of the WebView2 APIs to help you understand the different things you can do using WebView2.
Overview of top-level feature areas
When hosting the WebView2 control, your app has access to the following features and APIs:
ﾉ Expand table
Feature areaPurposeMain classes:
Environment,
Controller, and
CoreThe CoreWebView2Environment, CoreWebView2Controller, and CoreWebView2 classes (or equivalent interfaces) work together so your app can host a WebView2 browser control and access its browser features. These large classes expose a wide range of APIs that your host app can access to provide the below categories of browser-related features for your users.Web/native interopEmbed web content into native applications. Communicate between native code and web code using simple messages, JavaScript code, and native objects.Browser featuresThe WebView2 control gives your app access to many browser features. You can modify these browser features and turn them on or off.Process managementGet information about running WebView2 processes, exiting processes, and failed processes, so your app can take action accordingly.Navigate to pages and manage loaded contentManage navigation to webpages and manage content that's loaded in the webpages.iframesEmbed other webpages into your own webpage. Detect when embedded webpages are created, detect when embedded webpages are navigating, and optionally bypass x-frame options.AuthenticationYour app can handle basic authentication using the WebView2 control. Basic authentication is a specific authentication approach that's part of the HTTPFeature areaPurposeprotocol.Rendering WebView2 in nonframework appsUse these APIs to set up the WebView2 rendering system if your host app doesn't use a UI framework. This rendering setup controls how WebView2 renders output into your host app, and how WebView2 handles input, focus, and accessibility.Rendering
WebView2 using
CompositionFor composition-based WebView2 rendering, use CoreWebView2Environment to create a CoreWebView2CompositionController.
CoreWebView2CompositionController provides the same APIs as
CoreWebView2Controller, but also includes APIs for composition-based rendering.Environment optionsUser data: Manage the user data folder (UDF), which is a folder on the user's machine. The UDF contains data related to the host app and WebView2. WebView2 apps use user data folders to store browser data, such as cookies, permissions, and cached resources. Manage multiple profiles under a single UDF.
Runtime selection supports prerelease testing and self-hosting. You can specify a search order for browser preview channels, and specify which browser preview channels are searched for.Performance and debuggingAnalyze and debug performance, handle performance-related events, and manage memory usage to increase the responsiveness of your app.Chrome DevTools
Protocol (CDP)Instrument, inspect, debug, and profile Chromium-based browsers. The
Chrome DevTools Protocol (CDP) is the foundation for the Microsoft Edge DevTools. Use the Chrome DevTools Protocol for features that aren't implemented in the WebView2 platform.This page only lists APIs that are in Release SDKs; it doesn't list Experimental APIs, or Stable APIs that are not yet available in Release SDKs. For a comprehensive list of APIs including Experimental APIs, see Release Notes for the WebView2 SDK.
Main classes: Environment, Controller, and Core
The CoreWebView2Environment, CoreWebView2Controller, and CoreWebView2 classes (or equivalent interfaces) work together so your app can host a WebView2 browser control and access its browser features. These three large classes expose a wide range of APIs that your host app can access to provide many categories of browser-related features for your users.
 The CoreWebView2Environment class represents a group of WebView2 controls that share the same WebView2 browser process, user data folder, and renderer processes. From this CoreWebView2Environment class, you create pairs of
CoreWebView2Controller and CoreWebView2 instances.
The CoreWebView2Controller class is responsible for hosting-related functionality such as window focus, visibility, size, and input, where your app hosts the WebView2 control.
 The CoreWebView2 class is for the web-specific parts of the WebView2 control, including networking, navigation, script, and parsing and rendering HTML.
See also:

Web/native interop
The Microsoft Edge WebView2 control lets you embed web content into native applications. You can communicate between native code and web code using simple messages, JavaScript code, and native objects. The following are the main APIs for communicating between web and native code.
Subsections below:
Host/web object sharing
Script execution
Web messaging
Script dialogs
Shared buffer
Common use cases for web/native interop:
Update the native host window title after navigating to a different website.
Send a native camera object and use its methods from a web app.
Run a dedicated JavaScript file on the web side of an application.
See also:
 Interop of native and web code
Call web-side code from native-side code
Call native-side code from web-side code
Call native-side WinRT code from web-side code
JavaScript APIs in WebView2 for window.chrome.webview JavaScript APIs
Host/web object sharing
WebView2 enables objects that are defined in native code to be passed to your app's web-side code. Host objects are any objects that are defined in native code that you choose to pass to your app's web-side code.
Host objects can be projected into JavaScript, so that you can call native object methods (or other APIs) from your app's web-side code. For example, your app can call such APIs as a result of user interaction on the web side of your app. This way, you don't need to reimplement your native objects' APIs, such as methods or properties, in your web-side code.

Script execution
Allows the host app to add JavaScript code in the web content within the WebView2 control.


Web messaging
Your app can send messages to the web content that's within the WebView2 control, and receive messages from that web content. Messages are sent as strings or JSON objects.
You can optionally post and receive DOM objects along with your message, via the additionalObjects parameter of PostWebMessageAsJson (.NET, WinRT) or via PostWebMessageAsJsonWithAdditionalObjects (Win32). The WebView2
CoreWebView2FileSystemHandle class represents the DOM FileSystemHandle, and
CoreWebView2File represents the DOM File. See also chrome.webview.postMessageWithAdditionalObjects in the JavaScript Reference.


Script dialogs
When hosting WebView2, your app can manage different JavaScript dialogs, to suppress them or to replace them with custom dialogs.

Shared buffer
The SharedBuffer API supports sharing buffers between the WebView2 host app process and WebView2 renderer process, based on shared memory from the OS.

Browser features
The WebView2 control gives your app access to many browser features. You can modify these browser features and turn them on or off.
Subsections below:
Printing
Cookies
Image capture
Control whether the screen capture UI is shown
Downloads
Save as
Web notification handling
Permissions
Context menus
Status bar
Fluent overlay scrollbars
User Agent
Autofill
Audio
Hit-testing of mouse-clicks in regions
Swipe gesture navigation
Enable or disable the browser responding to accelerator keys (shortcut keys)
Fullscreen
PDF toolbar
Theming
Language
New window
Close window
Document title
Favicon
Security and privacy
Tracking prevention
SmartScreen
Custom crash reporting
Browser extensions
Printing
You can print a webpage to a printer, PDF file, or PDF stream by configuring custom print settings.

 CoreWebView2PrintStatus EnumCookies
You can use cookies in WebView2 to manage user sessions, store user personalization preferences, and track user behavior.

Image capture
By hosting WebView2, your app can capture screenshots and indicate which format to use to save the image.

Control whether the screen capture UI is shown
The ScreenCaptureStarting event is raised whenever the WebView2 and/or iframe that corresponds to the CoreWebView2Frame (or to any of its descendant iframes) requests permission to use the Screen Capture API before the UI is shown. The app can then block the UI from being displayed, or allow the UI to be displayed.

Downloads
Your app can manage the download experience in WebView2. Your app can:


Save as
The Save As APIs allow you to programmatically perform the Save as operation. You can use these APIs to block the default Save as dialog, and then either save silently, or build your own UI for Save as. These APIs pertain only to the Save as dialog, not the Download dialog, which uses the Download APIs.

CoreWebView2SaveAsUIShowingEventArgs.AllowReplace Property
CoreWebView2SaveAsUIShowingEventArgs.Cancel Property
CoreWebView2SaveAsUIShowingEventArgs.ContentMimeType Property
CoreWebView2SaveAsUIShowingEventArgs.Kind Property
CoreWebView2SaveAsUIShowingEventArgs.SaveAsFilePath Property
CoreWebView2SaveAsUIShowingEventArgs.SuppressDefaultDialog Property
CoreWebView2SaveAsUIShowingEventArgs.GetDeferral MethodConfigure the security warning when saving a file
By listening for the SaveFileSecurityCheckStarting event, your app can register a handler on this event to get the file path, filename extension, and document origin URI information. You can then apply your own rules to do actions such as the following:
 Allow saving the file without presenting a default security-warning UI about the file-type policy.

Web notification handling
Web Notification APIs support non-persistent notifications. The NotificationReceived event for CoreWebView2 controls web notification handling, allowing customization or suppression by the host app. Unhandled notifications default to WebView2's UI.

Permissions
Different webpages may ask you for permissions to access some privileged resources, such as geolocation sensor, camera, and microphone. Your host app can programmatically respond to permissions requests and can replace the default permissions UI with its own UI.

Context menus
The WebView2 control provides a default context menu (right-click menu) which you can customize or disable, and you can also create your own context menu.
See also:


Status bar
A status bar is located in the bottom left of the page and displays the state of the webpage being displayed. In WebView2 you can enable/disable the status bar, get the text in the status bar, and find out when the status bar text has changed.

Fluent overlay scrollbars
Stylizes scrollbars with Microsoft Fluent design and makes the scrollbars overlay over the web content. This adaptive scrollbar design adjusts to various devices and window sizes.
To experiment with Fluent overlay scrollbars, in Microsoft Edge, go to edge://flags and then enter Fluent overlay scrollbars.


User Agent
The user agent is a string that represents the identity of the program on behalf of the user, such as the browser name. In WebView2, you can set the user agent.
See also:

Autofill
Your app can independently control whether the browser's autofill functionality is enabled for general information or for passwords.

Audio
Your app can mute and unmute all audio, and find out when audio is playing.

CoreWebView2.IsDocumentPlayingAudioChanged Event
CoreWebView2.IsMutedChanged Event
CoreWebView2.IsDocumentPlayingAudio Property
CoreWebView2.IsMuted PropertyHit-testing of mouse-clicks in regions
Provides hit-testing results on the regions that a WebView2 contains. Useful for visually hosted applications that want to handle mouse events on the non-client area of the WebView2 window.

Swipe gesture navigation
By hosting the WebView2 control, your app can enable or disable swiping gesture navigation on touch input-enabled devices. This gesture allows end users to:
 Swipe left/right (swipe horizontally) to navigate to the previous or next page in the navigation history.
 Pull to refresh (swipe vertically) the current page.
This feature is currently disabled by default in the browser. To enable this feature in
WebView2, set the AdditionalBrowserArguments property, specifying the --pull-to-

Enable or disable the browser responding to accelerator keys
(shortcut keys)
ICoreWebView2AcceleratorKeyPressedEventArgs has a IsBrowserAcceleratorKeyEnabled property to allow you to control whether the browser handles accelerator keys (shortcut keys), such as Ctrl+P or F3.

Fullscreen
In WebView2, you can find out when an HTML element enters or leaves full-screen view.

PDF toolbar
In the browser PDF viewer, there's a PDF-specific toolbar along the top. In WebView2, you can hide some of the items in the PDF viewer toolbar.

Theming
In WebView2, you can customize the color theme as system, light, or dark.

Language

New window
WebView2 provides functionality to handle the JavaScript function window.open().

Close window
WebView2 provides functionality to handle the JavaScript function window.close().

Document title
Your app can detect when the title of the current top-level document has changed.

Favicon
In WebView2, you can set a Favicon for a website, or get notified when it changes.

CoreWebView2.FaviconChanged Event
CoreWebView2.FaviconUri PropertySecurity and privacy
Tracking prevention
Tracking prevention enables the host app to control the level of tracking prevention of the WebView2 control that's associated with the user profile.

SmartScreen
Microsoft Defender SmartScreen ("SmartScreen") is enabled by default. The
IsReputationCheckingRequired property controls whether SmartScreen is enabled.
If you don't disable SmartScreen, you must provide notice to all users that your software includes Microsoft Defender SmartScreen, and collects and sends the user's information to Microsoft as disclosed in Microsoft Privacy Statement and in SmartScreen in Microsoft Edge Privacy Whitepaper.

 CoreWebView2Settings.IsReputationCheckingRequired PropertyCustom crash reporting
If any WebView2 process crashes, one or more minidump files are created and sent to Microsoft for diagnosis. Use this API to customize crash reporting when running diagnostics and doing analysis.
To prevent crash dumps from being sent to Microsoft, set the IsCustomCrashReportingEnabled property to false.
To locate crash dumps and do customization with them, use the CrashDumpFolderPath property.

Browser extensions
Your app can embed a WebView2 control that uses browser extensions (add-ons). A Microsoft Edge extension is a small app that developers use to add or modify features of Microsoft Edge to improve a user's browsing experience.
See also:


Process management
Get information about running WebView2 processes, exiting processes, and failed processes, so that your app can take action accordingly.
Subsections below:

Frame process info
The Frame Process Info API, including GetProcessExtendedInfos, provides a snapshot collection of all frames that are actively running in the associated renderer process. This API enables your app to detect which part of WebView2 is consuming resources such as memory or CPU usage.

Navigate to pages and manage loaded content
Through the WebView2 control, your app can manage navigation to webpages and manage content that's loaded in the webpages.
Subsections below:
Manage content loaded into WebView2
Navigation history
Navigation kind
Block unwanted navigating
Navigation events
Manage network requests in WebView2
Custom scheme registration
Client certificates
Server certificates
Launch an external URI scheme
Manage content loaded into WebView2
These APIs load, stop loading, and reload content to WebView2. The content that's loaded can be:
Content from a URL.
A string of HTML.
Local content via virtual host name to local folder mapping.
Content from a constructed network request.
See also:

Navigation history
The history methods allow back and forward navigation in WebView2, and the history events provide information about the changes in history and in WebView2's current source.


Navigation kind
NavigationKind gets the navigation kind of each navigation, such as Back/Forward, Reload, or navigation to a new document.

Block unwanted navigating
The NavigationStarting event allows the app to cancel navigating to specified URLs in WebView2, including for frames.

Navigation events
With NavigationStarting and the other navigation events, the app can be informed of the state of navigation in WebView2. A navigation is the process for loading a new URL.
See also:

Manage network requests in WebView2
The WebResourceRequested event allows the app to intercept and override all network requests in WebView2. The WebResourceResponseReceived event allows the app to monitor the request sent to and the response received from the network.
See also:

CoreWebView2.WebResourceRequested Event
CoreWebView2.WebResourceResponseReceived Event
CoreWebView2WebResourceRequestedEventArgs Class
CoreWebView2WebResourceRequestSourceKinds Enum
CoreWebView2WebResourceResponseReceivedEventArgs ClassCustom scheme registration
The CustomSchemeRegistration allows registration of custom schemes in WebView2 so that the app can handle the WebResourceRequested event for requests to those custom scheme URLs and navigate the WebView2 to such URLs.

Client certificates
In WebView2, you can use the Client Certificate API to select the client certificate at the application level. This API allows you to:
Display a UI to the user, if desired.
Replace the default client certificate dialog prompt.
Programmatically query the certificates.
Select a certificate from the list to respond to the server, when WebView2 is making a request to an HTTP server that needs a client certificate for HTTP authentication.

 CoreWebView2ClientCertificateRequestedEventArgs ClassServer certificates
In WebView2, you can use the Server Certificate API to trust the server's TLS certificate at the application level. This way, your host app can render the page without prompting the user about the TLS error, or your host app can automatically cancel the request.

Launch an external URI scheme
Launch a URI scheme that is registered with the OS.

iframes
iframes allow you to embed other webpages into your own webpage. In WebView2, you can:
 Find out when iframes are created.
Find out when iframes are navigating.
Allow bypassing x-frame options.

Authentication
Your app can handle basic authentication using the WebView2 control. Basic authentication is a specific authentication approach that's part of the HTTP protocol.
See also:

Rendering WebView2 in non-framework apps
Use these APIs to set up the WebView2 rendering system if your host app doesn't use a
UI framework. This rendering setup controls how WebView2 renders output into your host app, and how WebView2 handles input, focus, and accessibility.
When to use these APIs
 UI framework - If you're using a UI framework for your app, you should use the WebView2 element that's provided by that UI framework, rather than using these APIs.
 No UI framework, and not using Composition - If you're not using a UI framework for your app (for example, if you're using pure Win32 directly), or if your UI framework doesn't have a WebView2 element, then you need to create
CoreWebView2Controller and render it into your app, using these APIs in this section.
 No UI framework, and using Composition - If your app UI is built using
DirectComposition or Windows.UI.Composition, you should use
CoreWebView2CompositionController rather than using these APIs; see Rendering WebView2 using Composition, below.

Sizing, positioning, and visibility

Zooming
WebView2 ZoomFactor is used to scale just the web content of the window. UI scaling is also updated when the user zooms the content by pressing Ctrl while rotating the mouse wheel.

Rasterization scale
The RasterizationScale API scales all WebView2 UI including context menus, tooltip, and popups. The app can set whether the WebView2 should detect monitor scale changes and automatically update the RasterizationScale. BoundsMode is used to configure whether the Bounds property is interpreted as raw pixels, or DIPs (which need to be

CoreWebView2Controller.BoundsMode Property
CoreWebView2Controller.RasterizationScale Property
CoreWebview2Controller.RasterizationScaleChanged Event
CoreWebview2Controller.ShouldDetectMonitorScaleChanges PropertyFocus and tabbing
The WebView2 control raises events to let the app know when the control gains focus or loses focus. For tabbing (pressing the Tab key), there's an API to move focus into WebView2 and an event for WebView2 to request the app to take focus back.

Parent window
WebView2 can be reparented to a different parent window handle (HWND). WebView2 also needs to be notified when the app's position on the screen has changed.

Keyboard accelerators
When WebView2 has focus, it directly receives input from the user. An app may want to intercept and handle certain accelerator key combinations (shortcut keys), or disable the normal browser accelerator key behaviors.
See also Enable or disable the browser responding to accelerator keys (shortcut keys), above.

Default background color
WebView2 can specify a default background color. The color can be any opaque color, or transparent. This color will be used if the HTML page doesn't set its own background color.

Rendering WebView2 using Composition
For composition-based WebView2 rendering, use CoreWebView2Environment to create a
CoreWebView2CompositionController. CoreWebView2CompositionController provides the same APIs as CoreWebView2Controller, but also includes APIs for composition-based rendering.


Connecting to the visual tree
WebView2 can connect its composition tree to an IDCompositionVisual, IDCompositionTarget, or Windows::UI::Composition::ContainerVisual.

Forwarding input
Spatial input (mouse, touch, pen) is received by the application and must be sent to WebView2. WebView2 notifies the app when the cursor should be updated based on the mouse position.

Drag and drop
Dragging from a WebView2 control to another application is supported by default.
However, dragging to a WebView2 control requires that when the host app receives an
IDropTarget event from the system, the host app must forward the event to the
WebView2 control. Dragging to a WebView2 control includes drag-and-drop operations that are entirely within a WebView2 control.
Use the following APIs to forward IDropTarget events from the system to the WebView2 control.

Accessibility
By default, WebView2 will show up in the accessibility tree as a child of the parent HWND, for Win32/C++ apps. WebView2 provides API to better position the WebView2 content relative to other elements in the application.

Environment options
Subsections below:
User data
Runtime selection
User data
Manage the user data folder (UDF), which is a folder on the user's machine. The UDF contains data related to the host app and WebView2. WebView2 apps use user data folders to store browser data, such as cookies, permissions, and cached resources.
Subsections below:
 Multiple profiles
 Delete a profile

Multiple profiles
Manage multiple profiles under a single user data folder.
See also:

 CoreWebView2ControllerOptions Class
Create a WebView2 control that uses the profile:
CoreWebView2Environment Class:
CoreWebView2Environment.CreateCoreWebView2CompositionControllerAs ync Method
 CoreWebView2Environment.CreateCoreWebView2ControllerAsync Method
Access and manipulate the profile:
CoreWebView2 Class:
CoreWebView2.Profile Property
CoreWebView2Profile ClassDelete a profile
Your app can delete user profiles for a WebView2 web browser control.
See also:

Runtime selection
Runtime selection supports prerelease testing and self-hosting. When creating a WebView2 environment:
To specify a search order for browser preview channels, use the
CoreWebView2EnvironmentOptions.ChannelSearchKind property. To specify which browser preview channels are searched for, use the CoreWebView2EnvironmentOptions.ReleaseChannels property.
See also:

Performance and debugging
Analyze and debug performance, handle performance-related events, and manage memory usage to increase the responsiveness of your app.
Subsections below:

Memory usage target
Specifies memory consumption levels, such as low or normal.

Chrome DevTools Protocol (CDP)
The Chrome DevTools Protocol (CDP) provides APIs to instrument, inspect, debug, and profile Chromium-based browsers. The Chrome DevTools Protocol is the foundation for the Microsoft Edge DevTools. Use the Chrome DevTools Protocol for features that aren't implemented in the WebView2 platform.

 CoreWebView2DevToolsProtocolEventReceiver ClassSee also
Introduction to Microsoft Edge WebView2
WebView2 API Reference - API Reference links for additional platforms and languages, such as WinRT/C++ (COM).

Feedback
Was this page helpful? 

Main classes for WebView2:
Environment, Controller, and Core
Article • 07/14/2022
The CoreWebView2Environment, CoreWebView2Controller, and CoreWebView2 classes (or equivalent interfaces) work together so your app can host a WebView2 browser control and access its browser features. These three large classes expose a wide range of APIs that your host app can access to provide many categories of browser-related features for your users.
 The CoreWebView2Environment class represents a group of WebView2 controls that share the same WebView2 browser process, user data folder, and renderer. From this CoreWebView2Environment class, you create pairs of CoreWebView2Controller and CoreWebView2 instances.
 The CoreWebView2Controller class is responsible for hosting-related functionality such as window focus, visibility, size, and input, where your app hosts the WebView2 control.
 The CoreWebView2 class is for the web-specific parts of the WebView2 control, including networking, navigation, script, and parsing and rendering HTML.

Cross-platform API implementation: Most of the WebView2 APIs are initially developed for C++, and then most of the C++ APIs are wrapped as C# APIs. This way, there is a consistent parallelism and equivalence across platforms and programming languages.
Overview of the top-level classes
Overview of:
CoreWebView2Environment
CoreWebView2
CoreWebView2Controller vs. WebView2 classes (UI framework-specific WebView2 element class like the WPF, WinForms, or WinUI WebView2 classes).
or, equivalently:
ICoreWebView2Environment
ICoreWebView2
ICoreWebView2Controller
CoreWebView2Environment represents a group of WebView2 controls that all share the following:
They share the same WebView2 browser process.
They share the same user data folder.
They potentially share WebView2 renderer and other WebView2 processes.
From the CoreWebView2Environment, you create CoreWebView2Controller and
CoreWebView2 pairs. They always come together as a CoreWebView2Controller and a corresponding CoreWebView2.
 The CoreWebView2Controller is responsible for all hosting-related functionality such as focus, visibility, size, and input.
 The CoreWebView2 is for the web-specific parts of the WebView2 control, including networking, navigation, script, and parsing and rendering HTML.
UI framework-specific WebView2 element class such as WPF, WinForms, or WinUI WebView2 classes
It's different if you are using a UI framework-specific WebView2 element class like our WPF, WinForms, or WinUI WebView2 classes.
Then, the WebView2 class can optionally take a CoreWebView2Environment to use, and otherwise it will create a default CoreWebView2Environment. Internally, the WebView2 class creates its CoreWebView2Controller and CoreWebView2 from the
CoreWebView2Environment. The WebView2 exposes its CoreWebView2 as a CoreWebView2 property, but the CoreWebView2Controller is kept private to the WebView2 class. This is because the WebView2 class is responsible for connecting all of the CoreWebView2Controller functionality to the UI framework.
Feedback
Was this page helpful? 
Differences between Microsoft Edge and WebView2
Article • 03/28/2023
WebView2 is based on the Microsoft Edge browser. You have the opportunity to extend features from the browser to WebView2-based apps, which is useful. However, since WebView2 isn't limited to browser-like apps, there are some browser features that need to be modified or removed.
This article covers:
The modified browser features and supporting information.
The ability to turn on or off the feature.
Guidance on keyboard shortcuts.
Design guidelines
In the context of WebView2, browser features adhere to the following design guidelines:
 Most features work the same in WebView2 and Microsoft Edge. If a feature doesn't make sense in the context of WebView2 or for other reasons, the feature is modified or turned off.
 WebView2 features don't include Microsoft Edge branding.
Browser features
The following table displays the WebView2 features that differ from the Microsoft Edge browser:
 Default state indicates that the feature is part of the default experience on a new WebView2 instance.
 Configurable indicates that you can turn on or off the feature using WebView2 APIs or command-line switches.


ﾉ Expand table
FeatureDefault stateConfigurableDetailsAutofill for
AddressesOnYesThis feature is turned on by default. You can turn this feature on or off by using the WebView2 Autofill APIs.Autofill for
PasswordsOffYesThis feature is turned off by default. You can turn this feature on or off by using the WebView2 Autofill APIs.Autofill for
PaymentsOffNoThis feature is turned off.Browser
ExtensionsOffNoThis feature is turned off.Browser Task
ManagerOffNoThis feature is turned off.CollectionsOffNoThis feature is turned off.Continuewhere-I-leftoff promptOffNoThis feature is turned off.DownloadsOnYesWebView2 provides an API that allows you to customize the download UI to manipulate downloads. For example, you can block, redirect, save, pause, and so on. For more information, see Download API.Edge
ShoppingOffNoThis feature is turned off.Family SafetyOffNoThis feature is turned off.FavoritesOffNoThis feature is turned off.IE ModeOffNoThis feature is turned off. WebView2 doesn't support IE mode and has differences in behavior compared to IE (such as MHT or BIN support).Immersive
ReaderOffNoThis feature depends on the browser UI for interaction. This feature is turned off.
FeatureDefault stateConfigurableDetailsIntrusive AdsOffNoThis feature is turned off.Keyboard
ShortcutsReview
DetailsReview
DetailsThe keyboard shortcuts that are turned off by default either don't make sense or cause problems in
WebView2. You cannot turn these shortcuts off or on. Instead, you can listen for a key combination using the AcceleratorKeyPressed event and create a custom response if needed. For more information, see Additional keyboard shortcuts information.PDF
AnnotationsOffNoThis feature is turned off. The PDF viewing feature is enabled, but drawing, inking, and highlighting in a
PDF aren't enabled. For more information, see
Disabling Feature: PDF Annotations Support.Mini menuOffNoThis feature is turned off.Read AloudOffNoThis feature is turned off.Smart ScreenOn*No* The UI for this feature has been removed, however the underlying functionality is still available.
Additionally, you can turn off Smart Screen by using a command-line switch.TranslateOffNoThis feature is turned off.Tracking
PreventionOn*No* The UI for this feature has been removed, however the underlying functionality is still available. Tracking prevention is always set to balanced.Visual search on image hoverOffNoThis feature is turned off.Profile and
IdentityOffNoThe feature that syncs your favorites, cookies, and so on, is turned off.Windows
Defender
Application
GuardOffNoThis feature is turned off.edge:// URLsReview
DetailsNoSettings for the Microsoft Edge browser are on edge:// URLs. Because most of these webpages have Microsoft Edge branding or don't make sense within the context of WebView2, some of these URLs are turned off. For more information, see Blocked internal URLs.Web platform features
The following WebView2 platform features are currently unavailable:
ﾉ Expand table
FeatureDetailsPush NotificationsThis feature isn't implemented in WebView2.Web Payment APIThis feature is turned off.Periodic Background SyncPeriodic Background Sync events will never trigger.Blocked internal URLs
The following Microsoft Edge and Google Chrome settings webpages aren't available in WebView2:

Google Authentication
Google has disabled Google Authentication in embedded webviews, which includes WebView2, due to a security policy they have set. See Upcoming security changes to Google's OAuth 2.0 authorization endpoint in embedded webviews.
To stay up-to-date on the latest discussion, in the WebView2Feedback repo, see Google Auth Flows and WebView2.
Additional keyboard shortcuts information
Keyboard shortcuts or key bindings are supported in Microsoft Edge and WebView2.
Preventing shortcuts from changing during update
When Microsoft Edge is updated, the default key bindings might change. Furthermore, a keyboard shortcut that is turned off by default might instead be turned on, if the feature is now supported in WebView2.
To avoid such changes to your keyboard shortcuts, you can set
AreBrowserAcceleratorKeysEnabled to FALSE, which turns off all keys that access browser features, but keeps all basic text-editing and movement shortcuts turned on.
Shortcuts that are turned off
The following shortcuts are always turned off in WebView2, or are effectively turned off. An asterisk (*) indicates that the shortcut isn't turned off, but the feature that it accesses is turned off, or the feature doesn't apply to WebView2.
ﾉ Expand table
ActionShortcutAdd to FavoritesCtrl+DAdd All Tabs to
FavoritesCtrl+Shift+DFocus LocationCtrl+L, Alt+DPaste and GoCtrl+Shift+LOpen FileCtrl+ORead Aloud *Ctrl+Shift+UWeb Capture *Ctrl+Shift+SSidebarCtrl+Shift+ESave PageCtrl+S
ActionShortcutSelect Last TabCtrl+9Select Next TabCtrl+TabSelect Previous
TabCtrl+Shift+TabSelect Tab (1 - 8)Ctrl+(1-8)Show Favorites
Bar *Ctrl+Shift+BHelpF1Focus Next Pane
*F6. Supported in windowed hosting mode, but not in visual hosting mode. Visual hosting mode is used for WinUI 2 (UWP) apps, and for Win32 C++ apps with Visual Composition.Focus Previous
Pane *Shift+F6. Same as F6 support, above.Reading View *F9Focus Menu BarF10Show Identity
Menu *Ctrl+Shift+MBrowser Task
Manager *Shift+EscapeEdge Feedback
*Shift+Alt+IMute Tab *Ctrl+MNew Incognito
WindowCtrl+Shift+NNew TabCtrl+TNew WindowCtrl+NRestore Last
Closed TabCtrl+Shift+TFocus FavoritesAlt+Shift+BFocus Inactive
PopupAlt+Shift+AActionShortcutFocus SearchCtrl+E, Ctrl+K, Search KeyDuplicate TabCtrl+Shift+KFocus Toolbar *Alt+Shift+THomeAlt+Home, Browser Home KeyShow App MenuAlt+E, Alt+FShow FavoritesCtrl+Shift+OShow HistoryCtrl+HShow Reading
Mode Bar *Shift+Alt+RShow Collections
*Ctrl+Shift+YShortcuts turned off except when event not handled
The following keyboard shortcuts are always turned off, except in windows that display when the NewWindowRequested event isn't handled:
ﾉ Expand table
ActionShortcutClose TabCtrl+W, Ctrl+F4Close WindowCtrl+Shift+WFullscreenF11Shortcuts turned off if AcceleratorEnabled is False
If you set AreBrowserAcceleratorKeysEnabled to FALSE, the following additional keyboard shortcuts are turned off:
ﾉ Expand table
ActionShortcutStopEscActionShortcutFind on PageCtrl+FFind NextCtrl+GFind PreviousCtrl+Shift+GPrintCtrl+PRefreshCtrl+R, F5, Reload KeyRefresh Without CacheCtrl+Shift+R, Ctrl+F5, Shift+F5, Ctrl+Refresh, Shift+RefreshZoom OutCtrl+-Zoom InCtrl++Reset ZoomCtrl+0Find NextF3Find PreviousShift+F3BackAlt+Left Arrow, Browser Back Button KeyForwardAlt+Right Arrow, Browser Forward KeyCaret browsingF7Open / Close DevToolsCtrl+Shift+IOpen DevTools ConsoleCtrl+Shift+JOpen DevTools InspectCtrl+Shift+CShow DownloadsCtrl+JCustomizing an individual key
To customize any of the keys individually, use the AcceleratorKeyPressed event.

Feedback
Was this page helpful? 
Set up your Dev environment for WebView2
Article • 08/01/2024
This article covers general-purpose setup of your development environment for WebView2 development. Some Getting Started tutorials point here for preliminary setup steps, and then add platform-specific or project-specific setup steps.
Install Visual Studio
1. Install Visual Studio 2015 or later, such as Visual Studio Professional 2019, or Visual Studio 2022 Community edition. Most of the WebView2 samples were created and tested using Visual Studio 2019. If a sample was created using Visual Studio 2019, you should build and run the sample in Visual Studio 2019, before using the sample in Visual Studio 2022.
The WebView2 samples are designed for Microsoft Visual Studio, not Microsoft Visual Studio Code.
If you are installing Visual Studio, you can accept the defaults for now; you can click Install, and then decline installing the Workloads at this time. Visual Studio will prompt you later, when you open a particular .sln file, to install the platformappropriate workloads.
Install a preview channel of Microsoft Edge
Install any Microsoft Edge preview channel (Beta, Dev, or Canary) on a supported operating system:
Windows 10
Windows 11
To do this, go to Become a Microsoft Edge Insider. The preview channels are also called Insider channels.
We recommend using the Canary channel. The minimum required version is 82.0.488.0.
The preview channels of Microsoft Edge are required in order to use a prerelease version of the WebView2 SDK. A prerelease SDK enables testing your app against the latest APIs, and trying out the latest APIs.
Download the WebView2Samples repo
There are two repos containing WebView2 samples:
WebView2Samples repo WebView2Browser repo
You can download a repo as a .zip file, or clone the repo.
 If you download the repo (as a .zip file), you get a snapshot copy of the repo. You can then download another, updated copy of the repo later.
 If you clone the repo, you can update your local copy using git commands or features of various Dev apps.
To download the repo (as a .zip file):
1. Open the WebView2Samples repo (or the WebView2Browser repo) in a new window or tab.
2. Click the green Code button in the upper right of the GitHub repo, and then click Download ZIP.

The Download pop-up appears in Microsoft Edge:

In Microsoft Edge, if the Download pop-up isn't visible, click Settings and more (...) and then click Downloads.
3. In the Downloads pop-up window, hover to the right of WebView2Samples-main.zip and then click the Show in folder (folder) icon.
It is recommended that you don't click the Open file link, because that immediately unzips the file in your Downloads area, which could make it harder (and slower) to move to your desired location.
4. Copy or cut the WebView2Samples-main.zip file from your Downloads directory to a regular directory, such as Documents.
5. Unzip the WebView2Samples-main.zip file and note the location of the unzipped files.


6. Study the breakout of main directories.
-main is the name of the repo branch that this downloaded directory snapshot represents. It is possible to switch to a different branch at GitHub and then download, for example, WebView2Samples-smoketest-1.0.1054.27-prereleasetesting.zip. In that case, the downloaded .zip file is a snapshot of the smoketest1.0.1054.27-prerelease-testing branch of the repo. This documentation assumes that you downloaded the main branch of the repo.
7. Recommended: Rename the root directory from WebView2Samples-main to WebView2Samples, to match the repo name and path.
Clone the WebView2Samples repo
You can download the repo as a .zip file, or clone the repo.
 If you download the repo (as a .zip file), you get a snapshot copy of the repo. You can then download another, updated copy of the repo later.
 If you clone the repo, you can update your local copy using git commands or features of various Dev apps.
To clone the WebView2Samples repo (or the WebView2Browser repo), you must first install git. You can download the repo, as described above, or clone it.
Install git
1. If you want to clone the WebView2Samples repo (instead of downloading it), and if git isn't not already installed, download git	 and install it.
Obtain the URL for cloning the WebView2Samples repo
1. Open the WebView2Samples repo in a new window or tab.
2. Click the green Code button in the upper right of the GitHub repo, select Clone, and then click the Copy icon (or, select the HTTPS URL string in the text box and copy it).

3. Decide which tool you want to use to locally clone the repo:
 Visual Studio
GitHub Desktop
Git Bash shell or command prompt
Next, clone the GitHub repo to your local drive. To do that, follow the appropriate steps below, for the tool you want to use.
Cloning the repo by using Visual Studio
If you want to use Visual Studio to clone the GitHub repo to your local drive:
1. In Visual Studio, select File > Clone repository.
2. Enter the URL that you copied from the GitHub repo.
3. From within the same dialog, or in a file explorer utility, you can create a generalpurpose root git or GitHub folder in a writeable location, then select that directory, so that the repo will be cloned there, as a new directory.
For example, you could create the repo in the parent folder:
C:\Users\myUserName\Documents\GitHub\, so that the cloning operation will create the new directory C:\Users\myUserName\Documents\GitHub\WebView2Samples.
You've cloned the repo to your local drive. Skip to the next major section below.
Cloning the repo by using GitHub Desktop
If you want to use GitHub Desktop to clone the GitHub repo to your local drive:
1. Install GitHub Desktop.
2. In GitHub Desktop, select File > Clone repository.
3. In Visual Studio or GitHub Desktop, enter the URL that you copied from the GitHub repo.
4. From within the same dialog, or in a file explorer utility, you can create a generalpurpose root git or GitHub folder in a writeable location, then select that directory, so that the repo will be cloned there, as a new directory.
For example, you could create the repo in the parent folder:
C:\Users\myUserName\Documents\GitHub\, so that the cloning operation will create the new directory C:\Users\myUserName\Documents\GitHub\WebView2Samples.
You've cloned the repo to your local drive. Skip to the next major section below.
Cloning the repo by using Git Bash shell or a command prompt
If you instead want to clone the repo by using a Git Bash shell or command prompt:
1. Clone the repo to your local drive, entering the URL string that you copied from the GitHub repo:
Shell# example location where the repo directory will be added: cd c:/users/myusername/documents/github/ git clone https://github.com/MicrosoftEdge/WebView2Samples.git
The directory is created on your local drive, in the path you specified, such as in the following figure:

You've cloned the repo to your local drive.
See also:
Cloning a repository - GitHub docs.
Downloading or cloning the Demos repo in Sample code for DevTools.
 Step 6: Set up a localhost server in Installing the DevTools extension for Visual Studio Code.
Open a WebView2Samples .sln file in Visual
Studio
After you clone or download the WebView2Samples repo, open a .sln file in Visual Studio.
1. In your local copy of the repo directory structure, locate a .sln file. The top-level README file in the WebView2Samples repo gives a similar overview.
2. Open a .sln file in Visual Studio. For example, open your local copy of
WebView2Samples.sln. This repo's solution files require Visual Studio, not Visual Studio Code.
3. Open one of the .sln files. For example, open your local copy of the main Win32 solution file WebView2Samples/SampleApps/WebView2Samples.sln
(downloaded as path WebView2Samples-main/SampleApps/WebView2Samples.sln) in Microsoft Visual Studio. When you open that solution file in Visual Studio, Solution Explorer contains the following projects:

A platform-specific .sln file in a subdirectory of the GettingStartedGuides directory. These match the Getting Started tutorials and are completed examples that demonstrate a couple API features.
 The Win32 .sln file containing multiple platform projects, in the SampleApps directory. This is a comprehensive API demonstration.
 A platform-specific .sln file in a subdirectory of the SampleApps directory. These are comprehensive API demonstrations.
Install Visual Studio workloads
Install Visual Studio workloads if prompted. When you open a .sln file from the cloned or downloaded WebView2Samples repo in Microsoft Visual Studio 2019 or 2022, you might see a "cannot open" dialog.
1. Click the OK button. Then you might see a workload installer such as:

.
2. Select the checkbox and then click the Install button.
The Visual Studio installer runs, for the platform's workload:

.
A Migration Report log file page might open, such as at file:///C:/Users/username/Documents/WebView2Samples-main/WebView2Samples-
To zoom, right-click > Open image in new tab.
Above, the -main directory suffix is present for the downloaded .zip file of the repo, not if you cloned the repo.

Install or update the WebView2 SDK
The WebView2 SDK includes the WebView2 control, which is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications.
You install the WebView2 SDK once per project node of each .sln file. The WebView2 SDK installation applies only to the project that it's installed on.
Instead of downloading the Microsoft.Web.WebView2 SDK NuGet package from nuget.org, you install the WebView2 SDK NuGet package through the NuGet Package Manager panel in Visual Studio. After you clone or download the WebView2Samples repo, you then open one of the repo's .sln files in Visual Studio, and right-click a project node within the solution. You use the NuGet Package Manager panel to install the Microsoft.Web.WebView2 SDK as a NuGet package.
The Microsoft.Web.WebView2 SDK is available in Release and Prerelease versions. To get started, a Release version is recommended.
Install or update the Release or Prerelease WebView2 SDK, as follows:
1. Open a .sln file in Visual Studio. For example, open your local copy of
WebView2Samples.sln. This repo's solution files require Visual Studio, not Visual Studio Code.
2. In Solution Explorer, right-click the solution's project nodes, such as the WebView2GettingStarted project node (not the solution node) and then select Manage NuGet Packages.
The following image shows a particular .sln file and project; use whichever project you want to install the SDK to:

The NuGet Package Manager tab opens in Visual Studio.
3. In the NuGet window, click the Browse tab.
4. On the right of the search bar, clear the Include prerelease checkbox, or set it if you want a prerelease version of the SDK, which includes experimental APIs.
5. In the search bar in the upper left, type Microsoft.Web.WebView2.
6. Below the search bar, click the Microsoft.Web.WebView2 card.
7. In the right-hand pane, click the Install (or Update) button. NuGet downloads the WebView2 SDK to your machine, for use by this project.

To zoom, right-click > Open image in new tab.
8. Close the NuGet Package Manager tab.
The WebView2 SDK is now installed, so your development environment is now set up to add WebView2 features to WebView2 apps.
See also:
 NuGet.org > Microsoft.Web.WebView2 SDK
Updating the WebView2 Runtime
To update the WebView2 Runtime on your development machine and on user machines, see Distribute your app and the WebView2 Runtime.
See also
Cloning a repository - GitHub docs.
Downloading or cloning the Demos repo in Sample code for DevTools. Step 6: Set up a localhost server in Installing the DevTools extension for Visual Studio Code.

Feedback
Was this page helpful?  Yes  No

WebView2 in Win32 apps
Article • 02/04/2025
The main sample for WebView2 is for Win32.
Articles:
Win32 sample app
Win32 sample app with Visual Composition
Win32 sample WebView2Browser
Get started with WebView2 in Win32 apps

Feedback
Was this page helpful?  Yes  No

Get started with WebView2 in Win32 apps
Article • 03/28/2023
In this article, you set up your development tools (if not done already), learn how to add WebView2 code to a Win32 app project, and learn about WebView2 concepts along the way.
This tutorial starts by opening an existing Win32 app project that has WebView2 code added. The project uses the Win32_GettingStarted (WebView2GettingStarted.sln) directory that's part of the WebView2Samples repo. To use this article, you do the following:
1. Clone or download the WebView2Samples repo to your local drive.
2. Run the completed project.
3. Optionally delete the WebView2 code from HelloWebView.cpp to restore the Win32 baseline app.
4. Follow the remaining steps in this article about adding and understanding the WebView2 code.
This tutorial starts with the completed project that's in the repo, which already has WebView2 code added. (This tutorial doesn't have you create a new project; you don't use a project template in Visual Studio to create a new project, and then add WebView2 code.)
Completed project
The completed tutorial project is available in the WebView2Samples repo:
Sample name: Win32_GettingStarted
Repo directory: Win32_GettingStarted Solution file: WebView2GettingStarted.sln
Step 1 - Install Visual Studio
This tutorial requires Microsoft Visual Studio, not Microsoft Visual Studio Code.
1. If Microsoft Visual Studio isn't installed already, in a new window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps there to do a basic default installation of Visual Studio.
Then return to this page and continue below.
Step 2 - Clone or download the WebView2Samples repo
The code that you add in this tutorial's steps, has already been added to the sample repo, for you. An optional step below allows you to delete the WebView2 code from HelloWebView.cpp, so that you can add it yourself, if you want.
To keep this tutorial focused on WebView2-specific coding, we start from an existing
Microsoft Visual Studio project (WebView2GettingStarted) that's stored in the
WebView2Samples GitHub repo. We'll add WebView2 features - actually, the features have already been added, but follow along in the setup and explanation steps.
The existing Visual Studio project we'll start with is part of the sample code from a standard C++ Win32 desktop application. For information about the underlying, standard Win32 app sample, in a new window or tab, see Walkthrough: Create a traditional Windows Desktop application (C++).

Clone or download the WebView2Samples repo, as follows:
1. If you haven't already, clone or download the WebView2Samples repo. To do this, in a separate window or tab, follow the steps in Download the WebView2Samples repo or Clone the WebView2Samples repo in Set up your Dev environment for WebView2.
Then return here after you've copied the repo to your local drive, and continue with the steps below.
Step 3 - Open the finished solution
(WebView2GettingStarted.sln)
You start with a basic desktop project that contains a single main window. We'll start with an existing app project from the WebView2Samples repo, which you cloned or downloaded from GitHub in the previous step.
1. Open Visual Studio (not Visual Studio Code).
2. Open WebView2GettingStarted.sln, which is located at the path: <your repo directory>/WebView2Samples/GettingStartedGuides/Win32_GettingStarted/WebView2G ettingStarted.sln.
Step 4 - Install workloads if prompted
Visual Studio Installer might open and prompt you to install a Workload:

If Visual Studio Installer prompts you to install a Workload:
1. Select the Desktop development with C++ card so that a checkmark appears.
2. If you want, also select the .NET desktop development card (not needed for this tutorial), so that a checkmark appears on this card as well.
3. Click the Install button.
The Installer closes.
Retarget Projects
The Visual Studio Review Solution Actions dialog might appear, prompting you whether you want to Retarget Projects:

1. If that dialog appears, you can click OK.
The WebView2GettingStarted solution opens in Visual Studio. The solution contains a single project: WebView2GettingStarted, which contains a single .cpp file:
HelloWebView.cpp.
Step 5 - View the opened project in Visual Studio
If the WebView2GettingStarted project isn't open in Visual Studio, open it in Visual Studio:
1. Open WebView2GettingStarted.sln, which is located at the path: <your repo directory>/WebView2Samples/GettingStartedGuides/Win32_GettingStarted/WebView2G ettingStarted.sln.
2. In Solution Explorer, expand the Source Files node, and then select HelloWebView.cpp.
HelloWebView.cpp opens in the code editor of Visual Studio.

already present in the file immediately after cloning (downloading) the repo.
Set the solution to use the Win10 SDK and Visual Studio toolset
This step is only needed for older versions of Visual Studio, so it's likely you can skip it.
But you can take a look at this UI in any case:
1. In Visual Studio's Solution Explorer, right-click the WebView2GettingStarted project (not the solution with the same name), and then select Properties.
2. Select Configuration Properties > General, and then (if it's not the correct setting already):
a. Modify Windows SDK Version to use the Win10 SDK.
b. Modify Platform Toolset to use a Visual Studio toolset.
These modifications are only necessary for older versions of Visual Studio.
Here's a Visual Studio 2017 screenshot showing some valid settings:

The following is a Visual Studio 2022 screenshot; the values were already correct, so no change was required:

Continue with the steps below.
Step 6 - Build and run the repo's finished project
At this point, your Dev environment is set up to run Win32 WebView2 apps in debug mode in Visual Studio and add WebView2 features.

To confirm that your system is set up for WebView2 coding, run the project in Debug mode, as follows:
1. Select Debug > Start debugging (F5) to build and run the project.
The sample app first opens a pop-up window, which displays the URL that will be loaded, along with an OK button:

2. Click the OK button to dismiss the pop-window and continue to the URL:
The WebView2 window now displays webpage content: the Bing website, http://www.bing.com.

3. Close the WebView sample window.
Step 7 - Update or install the Windows Implementation Libraries (WIL)
WIL is already installed into the project at the repo, but walk through these steps to learn about setup and to check the project's setup.
In a moment, you'll install the Windows Implementation Libraries (WIL) - A headeronly C++ library to make life easier for developers on Windows through readable, typesafe C++ interfaces for Windows COM coding patterns. You install this
Microsoft.Windows.ImplementationLibrary package through Solution Explorer in Visual Studio, for the project.
This tutorial also uses Windows Runtime C++ Template Library (WRL) - A template library that provides a low-level way to author and use Windows Runtime components.

Install the Windows Implementation Libraries (WIL) from within Visual Studio, as follows:
1. In Visual Studio, make sure that the WebView2GettingStarted solution is still open.
2. In Solution Explorer, right-click the WebView2GettingStarted project node (not the solution node) and then select Manage NuGet Packages.

3. In the NuGet window, click the Browse tab.
4. In the search bar in the upper left, type Microsoft.Windows.ImplementationLibrary.
Or, copy and paste the single-line code block below. Then select Microsoft.Windows.ImplementationLibrary.
Microsoft.Windows.ImplementationLibrarySelecting the Microsoft.Windows.ImplementationLibrary package in NuGet Package Manager in Visual Studio:

To zoom, right-click > Open image in new tab.
If you don't see Microsoft.Windows.ImplementationLibrary listed, check the NuGet source location, as follows:
a. Select Tools > Options > NuGet Package Manager > Package Sources.
b. Make sure that in Package sources there is a nuget.com source pointing to https://api.nuget.org/v3/index.json.
c. If Package sources doesn't contain that source, enter nuget.com in the Name text box and https://api.nuget.org/v3/index.json in the Source text box. Then click Update and OK.
5. Toward the upper right, click the Install button (or the Update button). NuGet downloads the Windows Implementation Library (WIL) to your machine.
Windows Implementation Libraries (WIL) is now installed, along with Windows Runtime C++ Template Library (WRL).
Continue with the steps below.
Step 8 - Update or install the WebView2 SDK
The finished project in the repo already has a version of the WebView2 SDK installed for the project. If you were creating a project from scratch by starting by using a Win32 project template, you'd need to install the WebView SDK package for the project, as described here.
Next, update (or install) the WebView2 SDK. The WebView2 SDK includes the WebView2 control, which is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications.

Update (or install) the WebView2 SDK, as follows:
1. In Visual Studio, make sure that the WebView2GettingStarted solution is open, as described above.
2. In Solution Explorer, right-click the WebView2GettingStarted project node (not the WebView2GettingStarted solution node) and then select Manage NuGet Packages.
The NuGet Package Manager tab and panel opens in Visual Studio.

3. If the WebView2 SDK is already installed for the project, as is the case with the repo project, in the NuGet window, click the Installed tab or the Update tab.
4. Or, if you're installing the WebView2 SDK in a new project, click the Browse tab.
5. On the right of the search bar, clear the Include prerelease checkbox (unless you know that you want a prerelease version of the SDK).
6. In the search bar in the upper left, type Microsoft.Web.WebView2. Or, copy and paste the single-line code block below. Then select Microsoft.Web.WebView2.
Microsoft.Web.WebView27. In the right-hand side window, click Update (or Install). NuGet downloads the WebView2 SDK to your machine.

8. Close the NuGet Package Manager tab.
The WebView2 SDK is now updated or installed, so your development environment is now set up to add WebView2 features to your Win32 app.
Continue with the steps below.
Step 9 - Optionally delete the WebView2 code from HelloWebView.cpp
If you want to follow the steps below to add the WebView2 code to HelloWebView.cpp yourself, delete the two blocks of WebView2 code, as follows:

C++// include WebView2 header
#include "WebView2.h"2. In HelloWebView.cpp, delete the lines of code that are in between these two comment lines, but keep these two comment lines:
C++// <-- WebView2 sample code starts here --> ...
// <-- WebView2 sample code ends here -->Step 10 - Include the WebView2.h header in HelloWebView.cpp
Above, we did the following:
 Cloned or downloaded the samples repo including an existing project that contains a standard C++ Windows desktop application.
Updated or installed the Windows Implementation Library (WIL).
Updated or installed the WebView2 SDK, to add WebView2 features.
Optionally deleted the WebView2 code from HelloWebView.cpp.
Next, add WebView2 features to the app, as follows:
1. In Visual Studio, make sure the WebView2GettingStarted solution is open.
2. In Solution Explorer, expand Source Files and then click HelloWebView.cpp.
3. If the following code isn't already present, paste the following code in HelloWebView.cpp, after the last #include line:
C++// include WebView2 header
#include "WebView2.h"Make sure that the include section looks like the following:
C++
...
#include <wrl.h>
#include <wil/com.h>
// include WebView2 header #include "WebView2.h"
4. Note the headers used:
wrl.h - Windows Runtime C++ Template Library (WRL) - A template library
that provides a low-level way to author and use Windows Runtime components.
wil/com.h - Windows Implementation Libraries (WIL) - A header-only C++
library to make life easier for developers on Windows through readable, typesafe C++ interfaces for common Windows coding patterns.
WebView2.h - The WebView2 control is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications.
5. Select File > Save All (Ctrl+Shift+S) to save the project.
The source code file and project is ready to use and build against the WebView2 API.
Continue with the steps below.
Step 11 - Build your empty sample app
1. Select Debug > Start debugging (F5) to build and run the project.
The sample app opens and displays an empty window:

You now have a running, empty Win32 desktop app with potential WebView2 capabilities.
2. Close the WebView sample app window.
Continue with the steps below.
Step 12 - Add a WebView2 control in the parent window
Next, add a WebView2 control to the main window.
You'll use the CreateCoreWebView2Environment method to set up the environment and locate the Microsoft Edge browser powering the control.
Note that if you want to override the following defaults, you can instead use the "with options" version of that method, CreateCoreWebView2EnvironmentWithOptions:
Browser location
User data folder Browser flags
Upon completion of the CreateCoreWebView2Environment method, you'll:
 Run the ICoreWebView2Environment::CreateCoreWebView2Controller method inside the ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler callback.
 Run the ICoreWebView2Controller::get_CoreWebView2 method to get the associated WebView2 control.

C++   UpdateWindow(hWnd);
   // <-- WebView2 sample code starts here -->2. If the following code isn't already present, paste the following code into
HelloWebView.cpp. Paste the code in between the lines // <-- WebView2 sample code starts here --> and // <-- WebView2 sample code ends here -->:
C++// Step 3 - Create a single WebView within the parent window
// Locate the browser and set up the environment for WebView
CreateCoreWebView2EnvironmentWithOptions(nullptr, nullptr, nullptr,
   Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler> (
      [hWnd](HRESULT result, ICoreWebView2Environment* env) -> HRESULT {
         // Create a CoreWebView2Controller and get the associated CoreWebView2 whose parent is the main window hWnd          env->CreateCoreWebView2Controller(hWnd, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(
            [hWnd](HRESULT result, ICoreWebView2Controller* controller) 
-> HRESULT {                if (controller != nullptr) {                   webviewController = controller;                   webviewController->get_CoreWebView2(&webview);
               }
               // Add a few settings for the webview
               // The demo step is redundant since the values are the default settings                wil::com_ptr<ICoreWebView2Settings> settings;                webview->get_Settings(&settings);                settings->put_IsScriptEnabled(TRUE);                settings->put_AreDefaultScriptDialogsEnabled(TRUE);                settings->put_IsWebMessageEnabled(TRUE);
               // Resize WebView to fit the bounds of the parent window
               RECT bounds;
               GetClientRect(hWnd, &bounds);                webviewController->put_Bounds(bounds);
               // Schedule an async task to navigate to Bing                webview->Navigate(L"https://www.bing.com/");
               // Step 4 - Navigation events
               // Step 5 - Scripting
               // Step 6 - Communication between host and web content
               return S_OK;             }).Get());          return S_OK;
      }).Get());3. Select File > Save All (Ctrl+Shift+S) to save the project.
Build your Bing sample app
1. Press F5 to build and run the project.
If you started by deleting all of the WebView2 code, at this point, you now have a Win32 window that's filled with a WebView2 control that's filled with webpage content:

2. Close the WebView sample app window.
Or, if you kept all of the WebView2 code, at this point, a pop-up WebView2 window with an alert dialog from Bing opens, over an empty WebView2 window. Click the OK button to close the Bing dialog. Now the WebView2 control is filled by Bing page content:

3. If the WebView sample app window is open, close it.
Continue with the steps below.
Step 13 - Navigation events
In the previous step, we discussed navigating to URL by using the
ICoreWebView2::Navigate method. During navigation, WebView2 fires a sequence of events, which the host can listen for:

If you want more information now, in a new window or tab, see Navigation events for WebView2 apps.

In error cases, one or more of the following events may occur, depending on whether the navigation continued to an error webpage:
SourceChanged
ContentLoading
HistoryChanged
If an HTTP redirect occurs, there are multiple NavigationStarting events in a row.
As an example of using navigation events, register a handler for the NavigationStarting event, to cancel any non-https (non-secure) requests, as follows.
1. If it's not already present, paste the following code into HelloWebView.cpp, below the Step 3 code:
C++// Step 4 - Navigation events
// register an ICoreWebView2NavigationStartingEventHandler to cancel any non-https navigation EventRegistrationToken token; webview>add_NavigationStarting(Callback<ICoreWebView2NavigationStartingEventHa ndler>(
    [](ICoreWebView2* webview, 
ICoreWebView2NavigationStartingEventArgs* args) -> HRESULT {         wil::unique_cotaskmem_string uri;         args->get_Uri(&uri);
        std::wstring source(uri.get());         if (source.substr(0, 5) != L"https") {             args->put_Cancel(true);
        }
        return S_OK;     }).Get(), &token);Now the app doesn't open any non-https sites. You can use a similar mechanism to accomplish other tasks, such as restricting navigation to within your own domain.
Continue with the steps below.
Step 14 - Scripting
Use host apps to inject JavaScript code into WebView2 controls at runtime. You can task
WebView2 to run arbitrary JavaScript or add initialization scripts. The injected JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed.
The injected JavaScript is run with specific timing:

1. If the following code isn't present already, paste the following code into HelloWebView.cpp:
C++// Step 5 - Scripting
// Schedule an async task to add initialization script that freezes the Object object
webview->AddScriptToExecuteOnDocumentCreated(L"Object.freeze(Object);", nullptr);
// Schedule an async task to get the document URL webview->ExecuteScript(L"window.document.URL;", 
Callback<ICoreWebView2ExecuteScriptCompletedHandler>(
    [](HRESULT errorCode, LPCWSTR resultObjectAsJson) -> HRESULT {
        LPCWSTR URL = resultObjectAsJson;         //doSomethingWithURL(URL);         return S_OK;
    }).Get());2. Select File > Save All (Ctrl+Shift+S) to save the project.
Now, WebView2 freezes the Object and returns the page document once.
If code must be run in order, use callbacks
The script injection APIs (and some other WebView2 APIs) are asynchronous. So, if code must be run in a specific order, you should use callbacks.
Continue with the steps below.
Step 15 - Communication between host and web content
The host and the web content can also communicate with each other through the postMessage method. The web content running within a WebView2 control can post to the host through the window.chrome.webview.postMessage method, and the message is handled by any registered ICoreWebView2WebMessageReceivedEventHandler event handler on the host.
Similarly, the host can message the web content through the
ICoreWebView2::PostWebMessageAsString or ICoreWebView2::PostWebMessageAsJSON method, and the message is caught by handlers that are added from the
window.chrome.webview.addEventListener listener. This communication mechanism
allows the web content to use native capabilities by passing messages to ask the host to run native APIs.
As an example to understand the mechanism, the following steps occur when you try to output the document URL in WebView2:
1. The host registers a handler to return received message back to the web content.
2. The host injects a script to the web content that registers a handler to print message from the host.
3. The host injects a script to the web content that posts the URL to the host.
4. The handler of the host is triggered and returns the message (the URL) to the web content.
5. The handler of the web content is triggered and prints message from the host (the URL).

C++// Step 6 - Communication between host and web content
// Set an event handler for the host to return received message back to the web content webview>add_WebMessageReceived(Callback<ICoreWebView2WebMessageReceivedEventHa ndler>(
    [](ICoreWebView2* webview, 
ICoreWebView2WebMessageReceivedEventArgs* args) -> HRESULT {         wil::unique_cotaskmem_string message;         args->TryGetWebMessageAsString(&message);         // processMessage(&message);         webview->PostWebMessageAsString(message.get());         return S_OK;    }).Get(), &token);
// Schedule an async task to add initialization script that
// 1) Add an listener to print message from the host // 2) Post document URL to the host
webview->AddScriptToExecuteOnDocumentCreated(
    L"window.chrome.webview.addEventListener(\'message\', event => alert(event.data));" \
    L"window.chrome.webview.postMessage(window.document.URL);",     nullptr);2. Select File > Save All (Ctrl+Shift+S) to save the project.
3. Press F5 to build and run the project.
The sample app first opens a pop-up window, which displays the URL that will be loaded, along with an OK button:

4. Click the OK button to dismiss the pop-window and continue to the URL:
The WebView2 window now displays webpage content: the Bing website, http://www.bing.com.

5. When you are ready, close the WebView sample window.
Congratulations, you've built a Win32 app that hosts and uses the WebView2 control! Your development environment is now set up for WebView2 app development, to include the WebView2 control in your Win32 apps. You've also had an introduction to WebView2 programming concepts.
API Reference
API Reference for WebView2 Win32 C++
WebView2 API reference - API Reference for each platform.
See also
Windows Runtime C++ Template Library (WRL)
Windows Implementation Libraries (WIL)
Feedback
Was this page helpful? 
Win32 sample app
Article • 01/29/2025
The WebView2APISample app demonstrates how to use the WebView2 control and WebView2 APIs to add features to a Win32 C++ app. This is the main Win32 sample, and has test webpages for the latest features and APIs, and hundreds of menuitems to test various APIs.
Sample name: WebView2APISample
Repo directory: WebView2APISample
Solution file: WebView2Samples.sln (located in the parent directory, \SampleApps\) Project name in Solution Explorer: WebView2APISample
WebView2APISample embeds a WebView2 control within a Win32 native application.
This sample uses C++ and HTML/CSS/JavaScript in the WebView2 environment.
WebView2APISample showcases a selection of WebView2's event handlers and API methods that allow a native Win32 application to directly interact with a WebView2 control and vice versa.

This sample and its solution file are unique: it contains a copy of other samples, in Solution Explorer.
WebView2APISample is a hybrid application built with the Microsoft Edge WebView2 control; that is, this app combines a native side and a browser web app side. See Hybrid app approach in Introduction to Microsoft Edge WebView2.
The running WebView2APISample app window shows the WebView2 SDK version and also the WebView2 Runtime version and path. There are many useful menus and menuitems to test and demonstrate the WebView2 APIs.
Sequence of articles
To start learning WebView2, use this suggested sequence of articles and sample projects:
1. Get this WebView2APISample to build and run, using the present article, even if your own app is for a different platform.
2. If you're most interested in a platform other than Win32, use the Sample article for your platform; see Sample apps.
3. Use the Get Started article for the platform you're interested in; see Getting Started tutorials.
Step 1: Install Visual Studio 2022
1. Press the Windows key, enter Visual Studio 2022, and then click Open.
The Visual Studio Open recent dialog opens.
Microsoft Visual Studio Code is not supported for this sample.
2. If Visual Studio 2022 isn't installed, go to Visual Studio 2022 and then use the Download Visual Studio combo button.
Continue with the next step below, Step 2: Clone the WebView2Samples repo.
Older versions of Visual Studio
Visual Studio 2019 and 2017 are also supported.
Visual Studio 2019
This sample was created with Visual Studio 2019, as a Visual Studio 2019 project. To open this sample's project as-is, you can use Visual Studio 2019.
Visual Studio 2017
If you want to open this sample by using Visual Studio 2017:
1. Open the solution in Visual Studio 2017.
2. Change the project's Platform Toolset in Project Properties > Configuration properties > General > Platform Toolset.
3. You might also need to install a recent Windows SDK on your machine.
Step 2: Clone the WebView2Samples repo
1. Press Windows + E.
A File Explorer window opens.
2. Navigate to where you cloned or plan to clone the WebView2Samples repo.
Example path:
C:\Users\localAccount\GitHub\WebView2Samples
3. If not done already, clone the WebView2Samples repo to your local drive. In a separate window or tab, see Clone the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
4. If not opened already, open a git bash command prompt: Press the Windows key, and then type git bash.
Pull commits
5. Switch to the cloned repo directory:
cd C:/Users/localAccount/GitHub/WebView2Samples`Substitute the path where you cloned the WebView2Samples repo to.
6. Pull the latest commits to your local copy of the repo:
git pullCreate a working branch
7. Create a working branch and switch to it:
git checkout -b testReturns: Switched to branch 'test'
You are now free to modify the code in your working branch, without altering the code that's in the "main" branch of the repo. Later you might want to switch back to the "main" branch, for example to pull new commits, or create a different branch based off the "main" branch.
Step 3: Open the solution in Visual Studio
Opening and building the sample will modify the sample. Best practice is to avoid changing the code that's in the "main" branch, by creating and switching to a working branch, which you can do from within Visual Studio.
1. Press the Windows key, enter Visual Studio 2022, and then click Open.
The Visual Studio Open recent dialog opens:

2. Click Continue without code, in the lower right.
3. In Visual Studio 2022, select File > Open > Project/Solution.
The Open Project/Solution dialog opens.
4. Navigate to the WebView2Samples\SampleApps\WebView2Samples.sln file, and then click the Open button.
Example path:
C:\Users\localAccount\GitHub\WebView2Samples\SampleApps\WebView2Samples
.slnUnlike some other samples, there's not a dedicated .sln file in the sample repo directory that contains this sample's Readme. Instead, the .sln file for this sample (including other sample projects as well) is in the parent directory.
The Review Project and Solution Changes dialog might open:

5. Click the OK button.
The solution opens in Visual Studio:

Step 4: Update the toolset
Continuing from above: The Review Solution Actions: Retarget Projects dialog might open:

This screenshot shows:
Windows SDK Version: 10.0 (latest installed version) Platform Toolset: Upgrade to v143
Those options are listed for these projects:
WebView2APISample.vcxproj - the present, main sample.
WebView2APISampleWinComp.vcxproj - a different sample.
If that dialog opens, click the OK button.
The Output pane in Visual Studio shows results, such as:

Upgrading project 'WebView2APISample'...
Configuration 'Debug|ARM64': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Debug|Win32': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Debug|x64': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Release|Win32': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Release|ARM64': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Release|x64': changing Platform Toolset to 'v143' (was 
'v142').
Upgrading project 'WebView2SampleWinComp'...
Configuration 'Debug|Win32': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Debug|x64': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Release|Win32': changing Platform Toolset to 'v143' (was 
'v142').
Configuration 'Release|x64': changing Platform Toolset to 'v143' (was 
'v142').
Retargeting End: 2 completed, 0 failed, 0 skippedIn the browser, a Migration Report page opens, such as:
file:///C:/Users/localAccount/GitHub/WebView2Samples/SampleApps/UpgradeLog.ht
Step 5: Update .NET
Continuing from above: In Visual Studio, in Solution Explorer in the upper right, the message might appear: This project is targeting a version of .NET which is not installed.
1. If you get that message, click the Install link next to the message.
The Visual Studio Installer dialog opens:

2. Click the Install button.
The User Account Control dialog opens.
3. Click the Yes button.
The Visual Studio Installer dialog shows progress for downloading and installing, and then shows The installation has completed.
4. Click the Close button.
The Visual Studio Installer dialog closes.
Solution Explorer is displayed without the "not installed" message.
Step 6: Install the C++ workload for Visual Studio
Continuing from above: If prompted to install workloads when you try to build the project:
1. In Visual Studio, select Tools > Get Tools and Features.
The Visual Studio Installer dialog opens, and then the Modifying dialog opens.
2. In the Workloads tab, select the Desktop development with C++ card, so that a checkmark appears on it.
3. In Installation details on the right, expand Desktop development with C++.
4. Click the Update or Install button.
The Installer closes.
See also:
Step 4 - Install workloads if prompted in Get started with WebView2 in Win32 apps.
Install Visual Studio workloads in Set up your Dev environment for WebView2.
You don't need to install WiX to continue; that's for a different project in this solution file. Installing WiX is covered in WiX Burn Bundle to deploy the WebView2 Runtime.
Step 7: Build and run using older SDK
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug.
2. In the Solution Platforms dropdown list, select x64.
3. In Solution Explorer, right-click the WebView2APISample project, and then select Build.

This builds the project file
SampleApps/WebView2APISample/WebView2APISample.vcxproj.
4. Select Debug > Start Debugging (F5).
The WebView2APISample app window opens:

5. Close the sample app window.
Step 8: Update the prerelease WebView2 SDK
The repo version of this sample has a Prerelease version of the WebView2 SDK installed. Below, you'll update the WebView2 SDK to the latest Prerelease version (unless the latest Prerelease SDK is installed already). A Prerelease SDK supports the latest experimental APIs and the latest "Stable in Prerelease" APIs.
1. Check the version number of the Prerelease SDK that's in the repo's copy of the WebView2APISample app at GitHub: see packages.config.
For example:
XML<package id="Microsoft.Web.WebView2" version="1.0.2950-prerelease" targetFramework="native" />
<package id="Microsoft.Windows.ImplementationLibrary" version="1.0.220201.1" targetFramework="native" />2. Check what's the latest Prerelease version number, at Release Notes for the WebView2 SDK.
3. In Visual Studio, in Solution Explorer, right-click the WebView2APISample project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
4. In the NuGet Package Manager, click the Installed tab:

5. To the right of the Search text box, select the Include prerelease check box.
6. On the left, select Microsoft.Web.WebView2.
7. On the right, in the Version dropdown list, select the latest -prerelease version.
8. To the right of the Version dropdown list, click the Update button.
The Preview Changes dialog opens:

9. Click the Apply button.
10. Repeat the above steps to update the
Microsoft.Windows.Implementation.Library, but you can select the latest Release rather than latest Prerelease.
The latest prerelease version of the WebView2 SDK is now installed for this project.
See also:
 Phases of adding APIs in About Release Notes for the WebView2 SDK.
Step 9: Build and run using updated SDK
Assuming you updated the Prerelease version of the WebView2 SDK, build and run the sample again:
1. In Solution Explorer, right-click the WebView2APISample project, and then select Build.
2. Select Debug > Start Debugging (F5).
The WebView2APISample app window opens:

3. Close the sample app window.
You obtained, updated, built, and ran the Win32 sample app.
Step 10: Study the sample
The sections below describe how the sample works.
View the project files
These steps assume you obtained, updated, built, and ran the Win32 sample app per the above steps.
The WebView2APISample sample and project is the main Win32 sample.
1. Open WebView2Samples.sln in Visual Studio.
Example path:
C:\Users\localAccount\GitHub\WebView2Samples\SampleApps\WebView2Samples
.slnThis solution file contains the main sample (WebView2APISample) and other samples as well:

2. In Solution Explorer, expand the WebView2APISample project:

Hybrid app architecture
The WebView2APISample app is an example of a hybrid application, with a Win32 native part and a WebView part:
The Win32 part can directly access native Windows APIs. The top part of the WebView2APISample app is a Win32 component written in C++. This part of the application takes in UI inputs from the user and uses them to control the WebView.
 The WebView is a container for standard web technologies (HTML, CSS, and JavaScript). The main part of the WebView2APISample app is a WebView that can be repurposed using standard web technologies (HTML/CSS/JavaScript). The WebView can be navigated to websites or local content.
This hybrid approach allows you to create and iterate faster using web technologies, while still being able to take advantage of native functionality. The
WebView2APISample app demonstrates how the Win32 component and the WebView component can interact with each other.
This sample app has over 100 menuitems, which demonstrate many WebView2 APIs in the Win32/C++ framework. The following sections focus on basics of hybrid app implementation.
Project Files
This section briefly explains some key files within the repository. The
WebView2APISample app is divided vertically into components, instead of horizontally into layers. Each component implements the whole workflow of a category of example features, from listening for menu commands, to calling WebView API methods to implement them.
App.cpp
This is the top-level file that runs the WebView2APISample app. It reads command-line options, sets up the process environment, and handles the app's threading model.
AppWindow.cpp (Window menu)
This file implements the application window, by doing the following:
1. Set up all the Win32 controls.
2. Initialize the WebView Environment and the WebView.
3. Add event handlers to the WebView and create all the components that handle various features of the application.
The AppWindow class handles commands from the sample app's Window menu.
This file is described in more detail in Key functions in AppWindow.cpp, below.
FileComponent.cpp (File menu)
This component handles commands from the File menu (except for Exit), as well as the DocumentTitleChanged event.
ScriptComponent.cpp (Script menu)
This component handles commands from the Script menu, which involve interacting with the WebView by injecting JavaScript, posting WebMessages, adding native objects to the webpage, or using the DevTools protocol to communicate with the webpage.
ProcessComponent.cpp (Process menu)
This component handles commands from the Process menu, which involve interaction with the browser's process. It also handles the ProcessFailed event, in case the browser process or one of its render process crashes or is unresponsive.
SettingsComponent.cpp (Settings menu)
This component handles commands from the Settings menu. This component is also in charge of copying settings from an old WebView when a new one is created. Most code that interacts with the ICoreWebView2Settings interface is found here.
ViewComponent.cpp (View menu)
This component handles commands from the View menu, and any functionality related to sizing and visibility of the WebView. When the app window is resized, minimized, or restored, ViewComponent will resize, hide, or show the WebView in response. It also responds to the ZoomFactorChanged event.
ScenarioWebMessage.cpp and ScenarioWebMessage.html (Scenario menu)
The ScenarioWebMessage component is created when you select the Scenario > Web Messaging menu item. This component implements an example application with a C++ part and an HTML + JavaScript part, which communicate with each other by asynchronously posting and receiving messages.
This component is described in more detail in ScenarioWebMessage (.html, .cpp, and .h), below.
ScenarioAddHostObject.cpp and ScenarioAddHostObject.html
(Scenario menu)
This component is created when you select the Scenario > Host Objects menu item. It demonstrates communication between the native app and the HTML webpage by means of host object injection. The interface of the host object is declared in
HostObjectSample.idl, and the object itself is implemented in HostObjectSampleImpl.cpp.
See also:
 Call native-side code from web-side code
Key functions in AppWindow.cpp
AppWindow.cpp implements the application window, by doing the following:
1. Set up all the Win32 controls.
2. Initialize the WebView Environment and the WebView.
3. Add event handlers to the WebView and create all the components that handle various features of the application.
The AppWindow class handles commands from the sample app's Window menu. The following are some of the key functions in AppWindow.cpp.
InitializeWebView()
In AppWindow.cpp, the InitializeWebView() function creates the WebView2 environment by using CreateCoreWebView2EnvironmentWithOptions.
To see these API calls in action, inspect the following code from InitializeWebView():
C++HRESULT hr = CreateCoreWebView2EnvironmentWithOptions(     subFolder, nullptr, options.Get(),
    Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(         this, &AppWindow::OnCreateEnvironmentCompleted)
        .Get()); if (!SUCCEEDED(hr))
{     if (hr == HRESULT_FROM_WIN32(ERROR_FILE_NOT_FOUND))
    {
        MessageBox(             m_mainWindow,
            L"Couldn't find Edge installation. "
            "Do you have a version installed that's compatible with this "
            "WebView2 SDK version?",             nullptr, MB_OK);
    }     else
    {
        ShowFailure(hr, L"Failed to create webview environment");
    }
}OnCreateEnvironmentCompleted()
After creating the environment, we create the WebView by using CreateCoreWebView2Controller.
The OnCreateEnvironmentCompleted callback function is passed to
CreateCoreWebView2EnvironmentWithOptions in InitializeWebView(). The callback stores the environment pointer and then uses it to create a new WebView:
C++HRESULT AppWindow::OnCreateEnvironmentCompleted(
    HRESULT result, ICoreWebView2Environment* environment){
    CHECK_FAILURE(result);     m_webViewEnvironment = environment;
    CHECK_FAILURE(m_webViewEnvironment->CreateCoreWebView2Controller(         m_mainWindow, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(                             this, 
&AppWindow::OnCreateCoreWebView2ControllerCompleted)
                            .Get()));     return S_OK;
}OnCreateCoreWebView2ControllerCompleted()
The OnCreateCoreWebView2ControllerCompleted callback function is passed to CreateCoreWebView2Controller in InitializeWebView(). This callback:
Initializes the WebView-related state.
Registers some event handlers.
Creates the app components.
RegisterEventHandlers()
The RegisterEventHandlers function is called within CreateCoreWebView2Controller. It sets up some of the event handlers used by the application, and adds them to the WebView.
For more information about event handlers in WebView2, see ICoreWebView2.
Below is a code snippet from RegisterEventHandlers(), where we set up an event handler for the NewWindowRequested event. This event is fired when JavaScript in the webpage calls window.open(). ICoreWebView2NewWindowRequestedEventHandler makes a new AppWindow and passes the new window's WebView back to the browser, so it can return it from the window.open() call. Unlike our calls to
CreateCoreWebView2EnvironmentWithOptions and CreateCoreWebView2Controller, instead of providing a method for the callback, we just provide a C++ lambda right then and there:
C++CHECK_FAILURE(m_webView->add_NewWindowRequested(
    Callback<ICoreWebView2NewWindowRequestedEventHandler>(
        [this](            ICoreWebView2* sender,
            ICoreWebView2NewWindowRequestedEventArgs* args) {             wil::com_ptr<ICoreWebView2Deferral> deferral;             CHECK_FAILURE(args->GetDeferral(&deferral));
            auto newAppWindow = new AppWindow(L"");             newAppWindow->m_isPopupWindow = true;             newAppWindow->m_onWebViewFirstInitialized = [args, deferral, newAppWindow]() {                 CHECK_FAILURE(args->put_NewWindow(newAppWindow-
>m_webView.get()));
                CHECK_FAILURE(args->put_Handled(TRUE));
                CHECK_FAILURE(deferral->Complete());
            };
            return S_OK;
        })         .Get(),     nullptr));ScenarioWebMessage (.html, .cpp, and .h)
The ScenarioWebMessage files show how the Win32 host can modify the WebView, how the WebView can modify the Win32 host, and how the WebView can modify itself by accessing information from the Win32 host. This is done asynchronously.
The ScenarioWebMessage component is created when you select the Scenario > Web Messaging menu item. The ScenarioWebMessage component implements an example application with a C++ part and an HTML+JavaScript part, which communicate with each other by asynchronously posting and receiving messages:

The following sections demonstrate how each discrete function works using the WebView2APISample app, and then explains how to implement this functionality.
First, go to the ScenarioWebMessage web app within the sample app:
1. Open (run) the WebView2APISample app.
2. In the Scenario menu, select Web Messaging.
The WebView displays a webpage titled WebMessage sample page (ScenarioWebMessage.html):

Posting Messages from the Win32 host to the WebView
The following steps show how the Win32 Host can modify a WebView. In this example, you'll turn the text blue:
1. Open the WebMessage sample page (ScenarioWebMessage.html) as described above.
2. In the Script menu, select Post Web Message JSON.
A dialog containing the pre-written code {"SetColor":"blue"} appears.
3. Click OK.
The text in the Posting Messages section of the page changes from black to blue.
How it works
1. In ScriptComponent.cpp, the call to PostWebMessageAsJson posts user input to the ScenarioMessage.html web application:
C++
// Prompt the user for some JSON and then post it as a web message. void ScriptComponent::SendJsonWebMessage()
{
   TextInputDialog dialog(
      m_appWindow->GetMainWindow(),       L"Post Web Message JSON",
      L"Web message JSON:",
      L"Enter the web message as JSON.",       L"{\"SetColor\":\"blue\"}");    if (dialog.confirmed)
   {       m_webView->PostWebMessageAsJson(dialog.input.c_str());
   }
}2. Within the web application, event listeners are used to receive and respond to the web message. The code snippet below is from ScenarioWebMessage.html. The event listener changes the color of the text if the argument is "SetColor":
JavaScriptwindow.chrome.webview.addEventListener('message', arg => {    if ("SetColor" in arg.data) {       document.getElementById("colorable").style.color = arg.data.SetColor;
   }
});Receiving messages (from the WebView to the Win32 host)
The following steps show how the WebView can modify the Win32 Host App by changing the title of the Win32 app:
1. Open the WebMessage sample page (ScenarioWebMessage.html) as described above.
2. Note the title of the WebView2APISample app, displayed in the top left of the window next to the icon. It's initially WebView2APISample - Microsoft Edge WebView2.
3. In the Receiving Messages section of the page, enter a new title, and then click the Send button.
4. Note the new title that's displayed in the titlebar of the WebView2APISample app.
How it works
1. In ScenarioWebMessage.html, window.chrome.webview.postMessage() sends the user input to the host application:
JavaScriptfunction SetTitleText() {    let titleText = document.getElementById("title-text");    window.chrome.webview.postMessage(`SetTitleText 
${titleText.value}`);
}2. Within ScenarioWebMessage.cpp, we use add_WebMessageReceived to register the event handler. When we receive the event, after validating the input, we change the title of the App Window (m_appWindow):
C++// Setup the web message received event handler before navigating to // ensure we don't miss any messages.
CHECK_FAILURE(m_webview->add_WebMessageReceived(
   
Microsoft::WRL::Callback<ICoreWebView2WebMessageReceivedEventHandler>(
      [this](ICoreWebView2* sender, 
ICoreWebView2WebMessageReceivedEventArgs* args) {
   wil::unique_cotaskmem_string uri;    CHECK_FAILURE(args->get_Source(&uri));
   // Always validate that the origin of the message is what you expect.
   if (uri.get() != m_sampleUri)
   {       return S_OK;
   }
   wil::unique_cotaskmem_string messageRaw;    CHECK_FAILURE(args->TryGetWebMessageAsString(&messageRaw));    std::wstring message = messageRaw.get();
   if (message.compare(0, 13, L"SetTitleText ") == 0)
   {       m_appWindow->SetTitleText(message.substr(13).c_str());
   }
   return S_OK;
}).Get(), &m_webMessageReceivedToken));Round trip messages (from the WebView to the host back to the WebView)
The following steps show how the WebView can get information from the Win32 Host and modify itself by displaying the size of the Win32 App.
1. Open the WebMessage sample page (ScenarioWebMessage.html) as described above.
2. In the Round trip section of the page, click the GetWindowBounds button.
The text box below the button displays the bounds for the WebView2APISample app.
How it works
1. When the Get window bounds button is clicked, the GetWindowBounds function in
ScenarioWebMessage.html gets called. GetWindowBounds calls window.chrome.webview.postMessage() to send a message to the host application:
JavaScriptfunction GetWindowBounds() {     window.chrome.webview.postMessage("GetWindowBounds"); }2. In ScenarioWebMessage.cpp, we use add_WebMessageReceived to register the received event handler. After validating the input, the event handler gets window bounds from the App Window. PostWebMessageAsJson sends the bounds to the web application:
C++if (message.compare(L"GetWindowBounds") == 0)
{
   RECT bounds = m_appWindow->GetWindowBounds();    std::wstring reply =
      L"{\"WindowBounds\":\"Left:" + std::to_wstring(bounds.left)
      + L"\\nTop:" + std::to_wstring(bounds.top)
      + L"\\nRight:" + std::to_wstring(bounds.right)
      + L"\\nBottom:" + std::to_wstring(bounds.bottom)
      + L"\"}";
   CHECK_FAILURE(sender->PostWebMessageAsJson(reply.c_str())); }3. In ScenarioWebMessage.html, an event listener responds to the WindowBounds message and displays the bounds of the window:
JavaScriptwindow.chrome.webview.addEventListener('message', arg => {    if ("WindowBounds" in arg.data) {       document.getElementById("window-bounds").value = arg.data.WindowBounds;
   }
});See also
WebView2 API Reference
Get started with WebView2 in Win32 apps
Overview of WebView2 APIs
Phases of adding APIs in About Release Notes for the WebView2 SDK.

Feedback
Was this page helpful? 
Win32 sample app with Visual Composition
Article • 08/01/2024
This WebView2 sample embeds a WebView2 control within a Win32 native application.
Sample name: WebView2SampleWinComp
Repo directory: WebView2SampleWinComp Solution file: WebView2SampleWinComp.sln
This sample is built as a Win32 Visual Studio 2019 project. It uses C++ and HTML/CSS/JavaScript in the WebView2 environment.
This sample uses the Windows Runtime Composition APIs (also called the Visual layer) to take advantage of the Windows UI features and create a better look, feel, and functionality in C++ Win32 applications.
This sample showcases a selection of WebView2's event handlers and API methods that allow a native Win32 application to directly interact with a WebView and vice versa.
If this is your first time using WebView, we recommend first following the tutorial Get started with WebView2 in Win32 apps, which goes over how to create a WebView2 and walks through some basic WebView2 functionality.
See also Readme file for WebView2SampleWinComp.
Step 1 - Install Visual Studio with C++ support
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
This sample is built as a Win32 Visual Studio 2019 project.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
2. If you want to use Visual Studio 2017, change the project's Platform Toolset in Project Properties > Configuration properties > General > Platform Toolset. You might also need to change the Windows SDK to the latest version available to you.
Other prerequisites
 WebView2 SDK - A prerelease version of the WebView2 SDK is already installed in this sample project. Steps are shown below to optionally update the SDK.
 Windows 10 SDK - By default, this sample app will use the latest Window 10 SDK version that's installed on your machine. However, there is an issue with Windows 10 SDK, version 2004 (10.0.19041.0) that will stop this sample app from building.
Steps are provided below to install a compatible version of the Windows 10 SDK.
Step 2 - Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 3 - Open the Solution and set the Windows SDK target
1. On your local drive, open the .sln file in Visual Studio, in the directory:
<your-reposdirectory>/WebView2Samples/SampleApps/WebView2SampleWinComp/WebView2Sampl eWinComp.sln
or:
<your-repos-directory>/WebView2Samplesmain/SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.sln
A Review Solution Actions dialog might open, prompting you for which installed Windows SDK to retarget the project to:

2. In the Windows SDK Version dropdown list, select 10.0.20348.0 or later, or 10.0.18362.0 or earlier; do not select 10.0.19041.0. Then click the OK button. If those versions aren't available, do the steps in the "Install the Windows SDK" section below. Otherwise, skip to the section below that.
If the solution is already open, you can change the target as follows:
 In Solution Explorer, right-click the WebView2SampleWinComp project (not solution), and then click Retarget Projects.
Step 4 - Install the Windows SDK
By default, this sample app uses the latest Window 10 SDK version you have installed. There's an issue with Windows 10 SDK, version 2004 (10.0.19041.0) that will stop this sample app from building. If you run into this issue, either install (and retarget this project to use) a later version, such as Windows 10 SDK version 2104 (10.0.20348.0), or an earlier version, such as 10.0.18362.1.
To install a Windows 10 SDK:
1. Go to Windows SDK and emulator archive.
2. On one of the following rows, click the Install SDK link:
Windows 10 SDK version 2104 (10.0.20348.0) (or later) Windows 10 SDK, version 1903 (10.0.18362.1)
A version-specific copy of winsdksetup.exe is downloaded to your Downloads directory.
3. In your Downloads directory, open the copy of winsdksetup.exe that you just downloaded.
4. The Windows SDK setup window opens:

5. Click the Next button and then follow the prompts. You can accept the defaults. At the end of installing, the Windows SDK Welcome screen for whichever version that you selected appears:

6. Click the Close button.
Do the previous step, "Open the Solution and set the Windows SDK target". Or, if the solution is already open, in Solution Explorer, right-click the
WebView2SampleWinComp project (not solution), and then click Retarget Projects.
Step 5 - Install workloads if prompted
 If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 6 - Build and run the project
After opening the solution in Visual Studio (above) and responding to any setup or installation prompts, the project opens in Visual Studio, showing the WebView2SampleWinComp project in Solution Explorer:

At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select x86, x64, or ARM64.
3. In Solution Explorer, right-click the WebView2SampleWinComp project, and then select Build.
This builds the project file
SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.vcxproj.
4. Select Debug > Start Debugging (F5).
The sample app window opens:

5. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 7 - Update the installed packages
This step is optional. The sample has preinstalled:
A version of the WebView2 prerelease SDK.
A version of the Windows Implementation Libraries (WIL).
1. In Solution Explorer, right-click the WebView2SampleWinComp project (not the
Solution node), and then select Manage NuGet Packages. The NuGet Package Manager tab opens.
2. Select the Include prerelease checkbox.
3. Click the Installed tab. For each package, note whether there are two versions listed (the current version and an available updated version number).
4. Click the Updates tab.
5. If a newer prerelease of the Microsoft.Web.WebView2 SDK is listed, you can optionally click the Update button. A prerelease has a "-prerelease" suffix, such as 1.0.1248-prerelease. If you want to see details about this step, in a separate window or tab, see Install or update the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.

6. If a newer release of the Windows Implementation Libraries (WIL) is listed, you can optionally click the Update button.
7. Follow the prompts to continue updating the packages.
8. Build and run the project again, now using the updated packages.
Step 8 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

See also
Get started with WebView2 in Win32 apps
WebView2 API Reference

Feedback
Was this page helpful? 

Win32 sample WebView2Browser
Article • 06/23/2023
This sample, WebView2Browser, is a web browser built with the Microsoft Edge WebView2 control.

WebView2Browser is a sample Windows desktop application demonstrating the capabilities of the WebView2 control. The WebView2Browser sample app uses multiple WebView2 instances.
This sample is built as a Win32 Visual Studio 2019 project. It uses C++ and JavaScript in the WebView2 environment.
WebView2Browser shows some of the simplest uses of WebView2, such as creating and navigating a WebView, but also some more complex workflows like using the PostWebMessageAsJson API to communicate across WebView2 controls in separate environments. This is a rich code sample to demonstrate how you can use WebView2 APIs to build your own app.
Step 1: Install Visual Studio
1. Install Visual Studio, including C++ support.
Step 2: Clone the WebView2Samples repo
 Clone (or download as .zip) the WebView2Samples repo. See Clone the WebView2Samples repo in Set up your Dev environment for WebView2.
Step 3: Open the solution in Visual Studio
1. Open the solution in Visual Studio 2019. The WebView2 SDK is already included as a NuGet package in the project. If you want to use Visual Studio 2017, change the project's Platform Toolset in Project Properties > Configuration properties > General > Platform Toolset. You might also need to change the Windows SDK to the latest version.
2. Make the changes listed below, if you're using a Windows version below Windows 10.
Using versions below Windows 10
If you want to build and run the browser in versions of Windows before Windows 10, make the following changes. This is required because of how DPI is handled in Windows 10 vs previous versions of Windows.
1. If you want to build and run the browser in versions of Windows before Windows 10: In WebViewBrowserApp.cpp, change SetProcessDpiAwarenessContext to SetProcessDPIAware:
C++int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                      _In_opt_ HINSTANCE hPrevInstance,
                      _In_ LPWSTR    lpCmdLine,
                      _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);
    // Call SetProcessDPIAware() instead when using Windows 7 or any version
    // below 1703 (Windows 10).
    
SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT_PER_MONITOR_AWARE_V2);
    BrowserWindow::RegisterClass(hInstance);    // ...
1. If you want to build and run the browser in versions of Windows before Windows 10: In BrowserWindow.cpp, remove or comment out the following call to GetDpiForWindow:
C++int BrowserWindow::GetDPIAwareBound(int bound)
{
    // Remove the GetDpiForWindow call when using Windows 7 or any version
    // below 1607 (Windows 10). You will also have to make sure the build
    // directory is clean before building again.
    return (bound * GetDpiForWindow(m_hWnd) / DEFAULT_DPI); }Step 4: Build and run the app
1. Set the target you want to build (such as Debug or Release, targeting x86 or x64).
2. Build the solution.
3. Run (or Debug) the app.
4. Close the app.
Step 5: Update the WebView2 SDK
 Update the version of the WebView2 SDK, in Visual Studio. To do this, right-click the project and then click Manage NuGet Packages.
Step 6: Build and run the app with updated WebView2 SDK
 Build and run the app again.
Browser layout
The WebView2Browser sample app uses multiple WebView2 instances.
WebView2Browser has a multi-WebView approach to integrate web content and application UI into a Windows Desktop application. This allows the browser to use standard web technologies (HTML, CSS, JavaScript) to light up the interface but also enables the app to fetch favicons from the web and use IndexedDB for storing favorites and history.
The multi-WebView approach involves using two separate WebView environments (each with its own user data directory): one for the UI WebViews and the other for all content WebViews. UI WebViews (controls and options dropdown list) use the UI environment, while web content WebViews (one per tab) use the content environment.

Features
The WebView2Browser sample provides all the functionalities to make a basic web browser, but there's plenty of room for you to play around.
The WebView2Browser sample implements the following features:
Go back/forward
Reload page
Cancel navigation
Multiple tabs History
Favorites
Search from the address bar
Page security status Clearing cache and cookies
WebView2 APIs
WebView2Browser makes use of a handful of the APIs available in WebView2. For the
APIs not used here, you can find more about them in the Microsoft Edge WebView2 Reference. The following is a list of the most interesting APIs WebView2Browser uses and the features they enable.
ﾉ Expand table
APIFeaturesCreateCoreWebView2EnvironmentWithOptionsUsed to create the environments for UI and content WebViews. Different user data directories are passed to isolate UI from web content.ICoreWebView2There are several WebViews in WebView2Browser and most features make use of members in this interface, the table below shows how they're used.ICoreWebView2DevToolsProtocolEventReceivedEventHandlerUsed along with add_DevToolsProtocolEventReceived to listen for CDP security events to update the lock icon in the browser UI.ICoreWebView2DevToolsProtocolEventReceiverUsed along with add_DevToolsProtocolEventReceived
to listen for CDP security events to update the lock icon in the browser UI.ICoreWebView2ExecuteScriptCompletedHandlerUsed along with ExecuteScript to get the title and favicon from the visited page.ICoreWebView2FocusChangedEventHandlerUsed along with add_LostFocus to hide the browser options dropdown list when it loses focus.ICoreWebView2HistoryChangedEventHandlerUsed along with add_HistoryChanged to update the navigation buttons inAPIFeaturesthe browser UI.ICoreWebView2ControllerThere are several
WebViewControllers in
WebView2Browser and we fetch the associated WebViews from them.ICoreWebView2NavigationCompletedEventHandlerUsed along with add_NavigationCompleted to update the reload button in the browser UI.ICoreWebView2SettingsUsed to disable DevTools in the browser UI.ICoreWebView2SourceChangedEventHandlerUsed along with add_SourceChanged to update the address bar in the browser UI.ICoreWebView2WebMessageReceivedEventHandlerThis is one of the most important APIs to WebView2Browser. Most functionalities involving communication across WebViews use this.ﾉ Expand table
ICoreWebView2 APIFeaturesadd_NavigationStartingUsed to display the cancel navigation button in the controls WebView.add_SourceChangedUsed to update the address bar.add_HistoryChangedUsed to update go back/forward buttons.add_NavigationCompletedUsed to display the reload button once a navigation completes.ExecuteScriptUsed to get the title and favicon of a visited page.PostWebMessageAsJsonUsed to communicate WebViews. All messages use JSON to pass parameters needed.add_WebMessageReceivedUsed to handle web messages posted to the WebView.CallDevToolsProtocolMethodUsed to enable listening for security events, which will notify of security status changes in a document.ﾉ Expand table
ICoreWebView2Controller
APIFeature(s)get_CoreWebView2Used to get the CoreWebView2 associated with this CoreWebView2Controller.add_LostFocusUsed to hide the options dropdown list when the user clicks away from it.Implementing the features
The sections below describe how some of the features in WebView2Browser were implemented. You can look at the source code for more details about how everything works here. Outline:
The basics
Set up the environment, create a WebView
Navigate to web page
Updating the address bar
Going back, going forward
Reloading, stop navigation
Some interesting features
Communicating the WebViews
Tab handling
Updating the security icon
Populating the history
Handling JSON and URIs
The basics
Set up the environment, create a WebView
WebView2 allows you to host web content in your Windows app. It exposes the globals CreateCoreWebView2Environment and CreateCoreWebView2EnvironmentWithOptions from which we can create the two separate environments for the browser's UI and content.
C++    // Get directory for user data. This will be kept separated from the
    // directory for the browser UI data.
    std::wstring userDataDirectory = GetAppDataDirectory();
    userDataDirectory.append(L"\\User Data");
    // Create WebView environment for web content requested by the user. All
    // tabs will be created from this environment and kept isolated from the     // browser UI. This environment is created first so the UI can request new
    // tabs when it's ready.
    HRESULT hr = CreateCoreWebView2EnvironmentWithOptions(nullptr, userDataDirectory.c_str(),
        L"", 
Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(
            [this](HRESULT result, ICoreWebView2Environment* env) -> HRESULT     {
        RETURN_IF_FAILED(result);
        m_contentEnv = env;         HRESULT hr = InitUIWebViews();
        if (!SUCCEEDED(hr))
        {
            OutputDebugString(L"UI WebViews environment creation failed\n");
        }
        return hr;
    }).Get());C++HRESULT BrowserWindow::InitUIWebViews()
{
    // Get data directory for browser UI data     std::wstring browserDataDirectory = GetAppDataDirectory();     browserDataDirectory.append(L"\\Browser Data");
    // Create WebView environment for browser UI. A separate data directory is
    // used to isolate the browser UI from web content requested by the user.
    return CreateCoreWebView2EnvironmentWithOptions(nullptr, browserDataDirectory.c_str(),
        L"", 
Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(
            [this](HRESULT result, ICoreWebView2Environment* env) -> HRESULT     {
        // Environment is ready, create the WebView         m_uiEnv = env;
        RETURN_IF_FAILED(CreateBrowserControlsWebView());         RETURN_IF_FAILED(CreateBrowserOptionsWebView());         return S_OK;    }).Get());
}
We use the ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler to create the UI WebViews once the environment is ready.
C++HRESULT BrowserWindow::CreateBrowserControlsWebView() {
    return m_uiEnv->CreateCoreWebView2Controller(m_hWnd, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(
        [this](HRESULT result, ICoreWebView2Controller* controller) -> 
HRESULT     {         if (!SUCCEEDED(result))
        {
            OutputDebugString(L"Controls WebView creation failed\n");             return result;         }         // WebView created
        m_controlsController = controller;         CheckFailure(m_controlsController>get_CoreWebView2(&m_controlsWebView), L"");
        wil::com_ptr<ICoreWebView2Settings> settings;         RETURN_IF_FAILED(m_controlsWebView->get_Settings(&settings));
        RETURN_IF_FAILED(settings->put_AreDevToolsEnabled(FALSE));
        RETURN_IF_FAILED(m_controlsController-
>add_ZoomFactorChanged(Callback<ICoreWebView2ZoomFactorChangedEventHandler>(
            [](ICoreWebView2Controller* controller, IUnknown* args) -> 
HRESULT         {             controller->put_ZoomFactor(1.0);             return S_OK;
        }
        ).Get(), &m_controlsZoomToken));
        RETURN_IF_FAILED(m_controlsWebView>add_WebMessageReceived(m_uiMessageBroker.Get(), 
&m_controlsUIMessageBrokerToken));         RETURN_IF_FAILED(ResizeUIWebViews());
        std::wstring controlsPath = 
GetFullPathFor(L"wvbrowser_ui\\controls_ui\\default.html");
        RETURN_IF_FAILED(m_controlsWebView->Navigate(controlsPath.c_str()));
        return S_OK;
    }).Get());
}We're setting up a few things here. The ICoreWebView2Settings interface is used to disable DevTools in the WebView powering the browser controls. We're also adding a handler for received web messages. This handler will enable us to do something when the user interacts with the controls in this WebView.
Navigate to web page
You can navigate to a web page by entering its URI in the address bar. When pressing Enter, the controls WebView will post a web message to the host app so it can navigate the active tab to the specified location. Code below shows how the host Win32 application will handle that message.
C++        case MG_NAVIGATE:
        {             std::wstring uri(args.at(L"uri").as_string());             std::wstring browserScheme(L"browser://");
            if (uri.substr(0, browserScheme.size()).compare(browserScheme) 
== 0)
            {
                // No encoded search URI
                std::wstring path = uri.substr(browserScheme.size());                 if (path.compare(L"favorites") == 0 ||                     path.compare(L"settings") == 0 ||                     path.compare(L"history") == 0)
                {                     std::wstring filePath(L"wvbrowser_ui\\content_ui\\");                     filePath.append(path);                     filePath.append(L".html");                     std::wstring fullPath = 
GetFullPathFor(filePath.c_str());
                    CheckFailure(m_tabs.at(m_activeTabId)->m_contentWebView-
>Navigate(fullPath.c_str()), L"Can't navigate to browser page.");
                }                 else                 {
                    OutputDebugString(L"Requested unknown browser page\n");
                }             }
            else if (!SUCCEEDED(m_tabs.at(m_activeTabId)->m_contentWebView-
>Navigate(uri.c_str())))
            {
                CheckFailure(m_tabs.at(m_activeTabId)->m_contentWebView>Navigate(args.at(L"encodedSearchURI").as_string().c_str()), L"Can't navigate to requested page.");
            }         }         break;WebView2Browser will check the URI against browser pages (i.e. favorites, settings, history) and navigate to the requested location or use the provided URI to search Bing as a fallback.
Updating the address bar
The address bar is updated every time there is a change in the active tab's document source and along with other controls when switching tabs. Each WebView will fire an event when the state of the document changes, we can use this event to get the new source on updates and forward the change to the controls WebView (we'll also update the go back and go forward buttons).
C++        // Register event handler for doc state change
        RETURN_IF_FAILED(m_contentWebView>add_SourceChanged(Callback<ICoreWebView2SourceChangedEventHandler>(
            [this, browserWindow](ICoreWebView2* webview, 
ICoreWebView2SourceChangedEventArgs* args) -> HRESULT
        {
            BrowserWindow::CheckFailure(browserWindow-
>HandleTabURIUpdate(m_tabId, webview), L"Can't update address bar");
            return S_OK;
        }).Get(), &m_uriUpdateForwarderToken));C++HRESULT BrowserWindow::HandleTabURIUpdate(size_t tabId, ICoreWebView2* webview) {
    wil::unique_cotaskmem_string source;
    RETURN_IF_FAILED(webview->get_Source(&source));
    web::json::value jsonObj = web::json::value::parse(L"{}");     jsonObj[L"message"] = web::json::value(MG_UPDATE_URI);     jsonObj[L"args"] = web::json::value::parse(L"{}");     jsonObj[L"args"][L"tabId"] = web::json::value::number(tabId);     jsonObj[L"args"][L"uri"] = web::json::value(source.get());     // ...
    RETURN_IF_FAILED(PostJsonToWebView(jsonObj, m_controlsWebView.Get()));
    return S_OK;
}
HRESULT BrowserWindow::HandleTabHistoryUpdate(size_t tabId, ICoreWebView2* webview){
    // ...
    BOOL canGoForward = FALSE;
    RETURN_IF_FAILED(webview->get_CanGoForward(&canGoForward));     jsonObj[L"args"][L"canGoForward"] = web::json::value::boolean(canGoForward);
    BOOL canGoBack = FALSE;
    RETURN_IF_FAILED(webview->get_CanGoBack(&canGoBack));
    jsonObj[L"args"][L"canGoBack"] = web::json::value::boolean(canGoBack);     RETURN_IF_FAILED(PostJsonToWebView(jsonObj, m_controlsWebView.Get()));
    return S_OK;
}
We have sent the MG_UPDATE_URI message along with the URI to the controls WebView.
Now we want to reflect those changes on the tab state and update the UI if necessary.
JavaScript        case commands.MG_UPDATE_URI:
            if (isValidTabId(args.tabId)) {                 const tab = tabs.get(args.tabId);                 let previousURI = tab.uri;
                // Update the tab state                 tab.uri = args.uri;                 tab.uriToShow = args.uriToShow;                 tab.canGoBack = args.canGoBack;                 tab.canGoForward = args.canGoForward;
                // If the tab is active, update the controls UI                 if (args.tabId == activeTabId) {                     updateNavigationUI(message);
                }
                // ...
            }             break;Going back, going forward
Each WebView will keep a history for the navigations it has performed so we only need to connect the browser UI with the corresponding methods. If the active tab's WebView can be navigated back/forward, the buttons will post a web message to the host application when clicked.
The JavaScript side:
JavaScript    document.querySelector('#btn-forward').addEventListener('click', function(e) {         if (document.getElementById('btn-forward').className === 'btn') {             var message = {                 message: commands.MG_GO_FORWARD,                 args: {}
            };
            window.chrome.webview.postMessage(message);
        }     });
    document.querySelector('#btn-back').addEventListener('click', function(e) {         if (document.getElementById('btn-back').className === 'btn') {             var message = {                 message: commands.MG_GO_BACK,                 args: {}
            };             window.chrome.webview.postMessage(message);
        }
    });The host application side:
C++        case MG_GO_FORWARD:
        {
            CheckFailure(m_tabs.at(m_activeTabId)->m_contentWebView-
>GoForward(), L"");
        }         break;         case MG_GO_BACK:
        {
            CheckFailure(m_tabs.at(m_activeTabId)->m_contentWebView-
>GoBack(), L"");         }         break;Reloading, stop navigation
We use the NavigationStarting event fired by a content WebView to update its associated tab loading state in the controls WebView. Similarly, when a WebView fires the NavigationCompleted event, we use that event to instruct the controls WebView to update the tab state. The active tab state in the controls WebView will determine whether to show the reload or the cancel button. Each of those will post a message back to the host application when clicked, so that the WebView for that tab can be reloaded or have its navigation canceled, accordingly.
JavaScriptfunction reloadActiveTabContent() {     var message = {         message: commands.MG_RELOAD,         args: {}
    };     window.chrome.webview.postMessage(message); }  // ...
    document.querySelector('#btn-reload').addEventListener('click', function(e) {         var btnReload = document.getElementById('btn-reload');         if (btnReload.className === 'btn-cancel') {             var message = {                 message: commands.MG_CANCEL,                 args: {}
            };             window.chrome.webview.postMessage(message);         } else if (btnReload.className === 'btn') {             reloadActiveTabContent();
        }
    });C++        case MG_RELOAD:
        {
            CheckFailure(m_tabs.at(m_activeTabId)->m_contentWebView-
>Reload(), L"");         }         break;         case MG_CANCEL:
        {
            CheckFailure(m_tabs.at(m_activeTabId)->m_contentWebView-
>CallDevToolsProtocolMethod(L"Page.stopLoading", L"{}", nullptr), L"");
        }Some interesting features Communicating the WebViews
We need to communicate the WebViews that power the tabs and UI, so that user interactions in one tab's WebView have the desired effect in the other WebView. WebView2Browser makes use of set of very useful WebView2 APIs for this purpose, including PostWebMessageAsJson, add_WebMessageReceived and ICoreWebView2WebMessageReceivedEventHandler.
On the JavaScript side, we're making use of the window.chrome.webview object exposed to call the postMessage method and add an event lister for received messages.
C++HRESULT BrowserWindow::CreateBrowserControlsWebView() {
    return m_uiEnv->CreateCoreWebView2Controller(m_hWnd, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(
        [this](HRESULT result, ICoreWebView2Controller* controller) -> 
HRESULT
    {
        // ...
        RETURN_IF_FAILED(m_controlsWebView>add_WebMessageReceived(m_uiMessageBroker.Get(), &m_controlsUIMessageBrokerToken));         // ...
        return S_OK;
    }).Get());
}C++HRESULT BrowserWindow::PostJsonToWebView(web::json::value jsonObj, 
ICoreWebView2* webview) {     utility::stringstream_t stream;     jsonObj.serialize(stream);
    return webview->PostWebMessageAsJson(stream.str().c_str());
} // ...
HRESULT BrowserWindow::HandleTabNavStarting(size_t tabId, ICoreWebView2* webview) {     web::json::value jsonObj = web::json::value::parse(L"{}");     jsonObj[L"message"] = web::json::value(MG_NAV_STARTING);     jsonObj[L"args"] = web::json::value::parse(L"{}");     jsonObj[L"args"][L"tabId"] = web::json::value::number(tabId);    return PostJsonToWebView(jsonObj, m_controlsWebView.Get()); }
JavaScriptfunction init() {     window.chrome.webview.addEventListener('message', messageHandler);     refreshControls();     refreshTabs();
    createNewTab(true);
} // ...
function reloadActiveTabContent() {     var message = {         message: commands.MG_RELOAD,         args: {}
    };     window.chrome.webview.postMessage(message);
}Tab handling
A new tab will be created whenever the user clicks on the new tab button to the right of the open tabs. The control's WebView will post a message to the host application to create the WebView for that tab and create an object tracking its state.
JavaScriptfunction createNewTab(shouldBeActive) {     const tabId = getNewTabId();
    var message = {         message: commands.MG_CREATE_TAB,         args: {
            tabId: parseInt(tabId),
            active: shouldBeActive || false
        }     };     window.chrome.webview.postMessage(message);
    tabs.set(parseInt(tabId), {         title: 'New Tab',         uri: '',         uriToShow: '',         favicon: 'img/favicon.png',         isFavorite: false,        isLoading: false,         canGoBack: false,         canGoForward: false,         securityState: 'unknown',
        historyItemId: INVALID_HISTORY_ID
    });     loadTabUI(tabId);
    if (shouldBeActive) {
        switchToTab(tabId, false);
    }
}On the host app side, the registered ICoreWebView2WebMessageReceivedEventHandler will catch the message and create the WebView for that tab.
C++        case MG_CREATE_TAB:
        {             size_t id = args.at(L"tabId").as_number().to_uint32();             bool shouldBeActive = args.at(L"active").as_bool();             std::unique_ptr<Tab> newTab = Tab::CreateNewTab(m_hWnd, m_contentEnv.Get(), id, shouldBeActive);
            std::map<size_t, std::unique_ptr<Tab>>::iterator it = m_tabs.find(id);             if (it == m_tabs.end())
            {
                m_tabs.insert(std::pair<size_t,std::unique_ptr<Tab>>(id, std::move(newTab)));             }             else             {                 m_tabs.at(id)->m_contentWebView->Close();                 it->second = std::move(newTab);
            }         }         break;C++std::unique_ptr<Tab> Tab::CreateNewTab(HWND hWnd, ICoreWebView2Environment* env, size_t id, bool shouldBeActive)
{     std::unique_ptr<Tab> tab = std::make_unique<Tab>();
    tab->m_parentHWnd = hWnd;     tab->m_tabId = id;     tab->SetMessageBroker();     tab->Init(env, shouldBeActive);
    return tab;
}
HRESULT Tab::Init(ICoreWebView2Environment* env, bool shouldBeActive)
{
    return env->CreateCoreWebView2Controller(m_parentHWnd, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(         [this, shouldBeActive](HRESULT result, ICoreWebView2Controller* controller) -> HRESULT {         if (!SUCCEEDED(result))
        {
            OutputDebugString(L"Tab WebView creation failed\n");             return result;
        }
        m_contentController = controller;         BrowserWindow::CheckFailure(m_contentController-
>get_CoreWebView2(&m_contentWebView), L"");
        BrowserWindow* browserWindow = reinterpret_cast<BrowserWindow*>
(GetWindowLongPtr(m_parentHWnd, GWLP_USERDATA));
        RETURN_IF_FAILED(m_contentWebView>add_WebMessageReceived(m_messageBroker.Get(), &m_messageBrokerToken));
        // Register event handler for history change
        RETURN_IF_FAILED(m_contentWebView-
>add_HistoryChanged(Callback<ICoreWebView2HistoryChangedEventHandler>(
            [this, browserWindow](ICoreWebView2* webview, IUnknown* args) -> 
HRESULT
        {
            BrowserWindow::CheckFailure(browserWindow-
>HandleTabHistoryUpdate(m_tabId, webview), L"Can't update go back/forward buttons.");
            return S_OK;
        }).Get(), &m_historyUpdateForwarderToken));
        // Register event handler for source change
        RETURN_IF_FAILED(m_contentWebView>add_SourceChanged(Callback<ICoreWebView2SourceChangedEventHandler>(
            [this, browserWindow](ICoreWebView2* webview, 
ICoreWebView2SourceChangedEventArgs* args) -> HRESULT
        {
            BrowserWindow::CheckFailure(browserWindow-
>HandleTabURIUpdate(m_tabId, webview), L"Can't update address bar");
            return S_OK;
        }).Get(), &m_uriUpdateForwarderToken));
        RETURN_IF_FAILED(m_contentWebView>add_NavigationStarting(Callback<ICoreWebView2NavigationStartingEventHandler
>(
            [this, browserWindow](ICoreWebView2* webview, ICoreWebView2NavigationStartingEventArgs* args) -> HRESULT
        {
            BrowserWindow::CheckFailure(browserWindow->HandleTabNavStarting(m_tabId, webview), L"Can't update reload button");
            return S_OK;
        }).Get(), &m_navStartingToken));
        RETURN_IF_FAILED(m_contentWebView>add_NavigationCompleted(Callback<ICoreWebView2NavigationCompletedEventHandl er>(
            [this, browserWindow](ICoreWebView2* webview, 
ICoreWebView2NavigationCompletedEventArgs* args) -> HRESULT
        {
            BrowserWindow::CheckFailure(browserWindow-
>HandleTabNavCompleted(m_tabId, webview, args), L"Can't update reload button");
            return S_OK;
        }).Get(), &m_navCompletedToken));
        // Handle security state updates
        RETURN_IF_FAILED(m_contentWebView>Navigate(L"https://www.bing.com"));         browserWindow->HandleTabCreated(m_tabId, shouldBeActive);
        return S_OK;
    }).Get());
}
The tab registers all handlers so it can forward updates to the controls WebView when events fire. The tab is ready and will be shown on the content area of the browser. Clicking on a tab in the controls WebView will post a message to the host application, which will in turn hide the WebView for the previously active tab and show the one for the clicked tab.
C++HRESULT BrowserWindow::SwitchToTab(size_t tabId)
{
    size_t previousActiveTab = m_activeTabId;
    RETURN_IF_FAILED(m_tabs.at(tabId)->ResizeWebView());
    RETURN_IF_FAILED(m_tabs.at(tabId)->m_contentWebView-
>put_IsVisible(TRUE));     m_activeTabId = tabId;
    if (previousActiveTab != INVALID_TAB_ID && previousActiveTab != m_activeTabId)
    {
        RETURN_IF_FAILED(m_tabs.at(previousActiveTab)->m_contentWebView-
>put_IsVisible(FALSE));
    }    return S_OK;
}
Updating the security icon
We use the CallDevToolsProtocolMethod to enable listening for security events. Whenever a securityStateChanged event is fired, we will use the new state to update the security icon on the controls WebView.
C++        // Enable listening for security events to update secure icon
        RETURN_IF_FAILED(m_contentWebView-
>CallDevToolsProtocolMethod(L"Security.enable", L"{}", nullptr));
        BrowserWindow::CheckFailure(m_contentWebView-
>GetDevToolsProtocolEventReceiver(L"Security.securityStateChanged", 
&m_securityStateChangedReceiver), L"");
        // Forward security status updates to browser
        RETURN_IF_FAILED(m_securityStateChangedReceiver>add_DevToolsProtocolEventReceived(Callback<ICoreWebView2DevToolsProtocolEve ntReceivedEventHandler>(
            [this, browserWindow](ICoreWebView2* webview, 
ICoreWebView2DevToolsProtocolEventReceivedEventArgs* args) -> HRESULT
        {
            BrowserWindow::CheckFailure(browserWindow-
>HandleTabSecurityUpdate(m_tabId, webview, args), L"Can't update security icon");
            return S_OK;
        }).Get(), &m_securityUpdateToken));C++HRESULT BrowserWindow::HandleTabSecurityUpdate(size_t tabId, ICoreWebView2* webview, ICoreWebView2DevToolsProtocolEventReceivedEventArgs* args) {
    wil::unique_cotaskmem_string jsonArgs;
    RETURN_IF_FAILED(args->get_ParameterObjectAsJson(&jsonArgs));     web::json::value securityEvent = web::json::value::parse(jsonArgs.get());
    web::json::value jsonObj = web::json::value::parse(L"{}");     jsonObj[L"message"] = web::json::value(MG_SECURITY_UPDATE);     jsonObj[L"args"] = web::json::value::parse(L"{}");     jsonObj[L"args"][L"tabId"] = web::json::value::number(tabId);     jsonObj[L"args"][L"state"] = securityEvent.at(L"securityState");    return PostJsonToWebView(jsonObj, m_controlsWebView.Get()); }
JavaScript        case commands.MG_SECURITY_UPDATE:             if (isValidTabId(args.tabId)) {                 const tab = tabs.get(args.tabId);                 tab.securityState = args.state;
                if (args.tabId == activeTabId) {                     updateNavigationUI(message);
                }             }             break;Populating the history
WebView2Browser uses IndexedDB in the controls WebView to store history items, just an example of how WebView2 enables you to access standard web technologies as you would in the browser. The item for a navigation will be created as soon as the URI is updated. These items are then retrieved by the history UI in a tab making use of
window.chrome.postMessage.
In this case, most functionality is implemented using JavaScript on both ends (controls WebView and content WebView loading the UI) so the host application is only acting as a message broker to communicate those ends.
JavaScript        case commands.MG_UPDATE_URI:
            if (isValidTabId(args.tabId)) {                 // ...
                // Don't add history entry if URI has not changed                 if (tab.uri == previousURI) {                     break;
                }
                // Filter URIs that should not appear in history                 if (!tab.uri || tab.uri == 'about:blank') {                     tab.historyItemId = INVALID_HISTORY_ID;                     break;
                }
                if (tab.uriToShow && tab.uriToShow.substring(0, 10) == 
'browser://') {                     tab.historyItemId = INVALID_HISTORY_ID;
                    break;
                }
                addHistoryItem(historyItemFromTab(args.tabId), (id) => {                     tab.historyItemId = id;
                });             }             break;JavaScriptfunction addHistoryItem(item, callback) {     queryDB((db) => {         let transaction = db.transaction(['history'], 'readwrite');         let historyStore = transaction.objectStore('history');
        // Check if an item for this URI exists on this day         let currentDate = new Date();         let year = currentDate.getFullYear();         let month = currentDate.getMonth();         let date = currentDate.getDate();         let todayDate = new Date(year, month, date);
        let existingItemsIndex = historyStore.index('stampedURI');         let lowerBound = [item.uri, todayDate];         let upperBound = [item.uri, currentDate];         let range = IDBKeyRange.bound(lowerBound, upperBound);         let request = existingItemsIndex.openCursor(range);
        request.onsuccess = function(event) {             let cursor = event.target.result;             if (cursor) {
                // There's an entry for this URI, update the item                 cursor.value.timestamp = item.timestamp;                 let updateRequest = cursor.update(cursor.value);
                updateRequest.onsuccess = function(event) {                     if (callback) {                         callback(event.target.result.primaryKey);
                    }
                };
            } else {
                // No entry for this URI, add item                 let addItemRequest = historyStore.add(item);
                addItemRequest.onsuccess = function(event) {                     if (callback) {                         callback(event.target.result);
                    }
                };
            }
        };    });
}
Handling JSON and URIs
WebView2Browser uses Microsoft's cpprestsdk (Casablanca) to handle all JSON in the C++ side of things. IUri and CreateUri are also used to parse file paths into URIs and can be used to for other URIs as well.
See also
 WebView2 API Reference

Feedback
Was this page helpful?  Yes  No

WebView2 in WinUI 2 (UWP) apps
Article • 02/04/2025
The following considerations apply to WebView2 in WinUI 2 (UWP) apps. The WebView2 WinUI 2 (UWP) control is in development.
Autofill UI
Autofill UI is not implemented yet for WebView2 for UWP apps.
See also:
 Autofill in Overview of WebView2 APIs.
Print to PDF
Print to PDF requires that the app have access to a writeable location in UWP, such as a local folder. For a full list of UWP-accessible paths, see File access permissions.
See also:
 Printing in Overview of WebView2 APIs.
Default printing
Default printing is disabled for WebView2 for UWP apps. However, you can capture and print the current viewport, by calling CapturePreview.
See also:
 Image capture in Overview of WebView2 APIs.
SmartScreen
WebView2 sends URLs that are navigated to in your application to the SmartScreen service, to ensure that your customers stay secure. If you want to disable this navigation, you can do so via an environment variable:
Environment.SetEnvironmentVariable("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "-
-disable-features=msSmartScreenProtection");
This environment variable must be set prior to CoreWebView2 creation, which occurs when the WebView2.Source property is initially set or the WebView2.EnsureCoreWebView2Async method is initially called.
Downloading files
There are a couple of known limitations for current downloads behavior for WebView2 in UWP.
Save As
Saving files via Save As is working and is enabled for WebView2 for UWP apps. The files will be saved in the folder that the user selects.
Which folder the files are downloaded to
If the host doesn't change the ResultFilePath of the downloaded file, the downloaded files will be downloaded to a subfolder with the app package's name in the Downloads folder.
If the host changes the ResultFilePath of the downloaded file, the file will only be downloaded if the app has access to that file path by default. If you want to use a file location that the app doesn't have access to by default, you must set the corresponding capability. See App capability declarations in the UWP documentation.
Downloads Hub
Opening files and folders from the Downloads Hub is disabled. Clicking on the file or folder icon won't open the respective file/folder.
See also:
 Downloads in Overview of WebView2 APIs.
XAML limitation
XAML Island support requires additional work and may be considered for future releases.
Setting DefaultBackgroundColor
On WinUI 2, the DefaultBackgroundColor property is not exposed directly. You can set the default background color by setting an environment variable, as follows:
C#Environment.SetEnvironmentVariable("WEBVIEW2_DEFAULT_BACKGROUND_COLOR", 
"FF000000");See also:
.NET: WebView2.DefaultBackgroundColor Property
Win32: ICoreWebView2Controller2::DefaultBackgroundColor property (get, put)
Setting transparency
On WinUI 2, transparency is achieved by setting the color to 00FFFFFF.
CSS cursors
On WinUI 2 (UWP), CSS cursors have the following limitations.
Image URLs
The CSS cursor cannot be an image URL, such as cursor: url(https://contoso.com/cursor.png), pointer;. See CSS - cursor loaded from URL doesn't work	.
Predefined CSS cursors
On WinUI 2 (UWP), some of the predefined CSS cursors are not supported. You can use CSS cursors to change the cursor to some of the predefined cursors, such as cursor: wait; or cursor: crosshair;, but not to others, such as cursor: progress or cursor: none.
ﾉ Expand table
KeywordSupported?Generalauto✔ 
KeywordSupported?default✔ none❌Links & statuscontext-menu✔ help✔ pointer✔ progress❌wait✔ Selectioncell❌crosshair✔ text✔ vertical-text❌Drag & dropalias❌copy❌move✔ no-drop✔ not-allowed✔ grab❌grabbing❌Resizing & scrollingall-scroll✔ col-resize❌row-resize❌n-resize✔ KeywordSupported?e-resize✔ s-resize✔ w-resize✔ ne-resize✔ nw-resize✔ se-resize✔ sw-resize✔ ew-resize✔ ns-resize✔ nesw-resize✔ nwse-resize✔ Zoomingzoom-in❌zoom-out❌See also:
 CSS cursors - the Values section describes the above keyword values.
Microsoft Edge Developer Tools
On WinUI 2, Microsoft Edge DevTools cannot be launched inside a store-signed WebView2 WinUI 2 (UWP) app. However, you can work around this by using remote debugging. See Remote debugging WebView2 WinUI 2 (UWP) apps.
API limitations
The following classes aren't accessible in WinUI 2:
CoreWebView2EnvironmentOptions
CoreWebView2ControllerOptions
See also
Autofill in Overview of WebView2 APIs.
Printing in Overview of WebView2 APIs.
Image capture in Overview of WebView2 APIs.
Downloads in Overview of WebView2 APIs.
Remote debugging WebView2 WinUI 2 (UWP) apps
API Reference:
.NET: WebView2.DefaultBackgroundColor Property
Win32: ICoreWebView2Controller2::_getDefaultBackgroundColor
Win32: ICoreWebView2Controller2::_putDefaultBackgroundColor
Windows docs:
SmartScreen
WebView2.Source property
WebView2.EnsureCoreWebView2Async method App capability declarations
MDN:
 Values in cursor CSS property at MDN.
WebView2Feedback repo:

Feedback
Was this page helpful?  Yes  No
Get started with WebView2 in WinUI 2 (UWP) apps
Article • 02/04/2025
This article is to learn to write your own WebView2 code. If you want to run a sample first, see Win32 sample app or another sample app article, such as WinUI 2 (UWP) sample app.
In this tutorial, you:
 Set up your development tools for creating UWP apps that use WebView2 to display web content.
Create an initial WinUI 2 (UWP) app.
Install the Microsoft.UI.Xaml package (WinUI 2) for the project.
Add a WebView2 control that displays webpage content.
Learn about WebView2 concepts along the way.
You use the C# Blank App (Universal Windows) project template, then install the Microsoft.UI.Xaml package (WinUI 2) for this project. Installing that package installs the Microsoft.Web.WebView2 package (the WebView2 SDK) as a dependency.
The Microsoft.UI.Xaml (WinUI 2) package is part of the Windows UI Library. This package provides Windows UI features, including:
UWP XAML controls.
Dense control styles.
Fluent styles and materials.
Platforms
This article applies to Windows and Xbox.
WinUI 2 supports UWP only. These controls are backward-compatible.
See also:
 Media App Samples for Xbox
Completed project
A completed version of this Getting Started project (solution) is in the
WebView2Samples repo. You can use the completed solution (from the repo or from doing the below steps) as a baseline to add more WebView2 code and other features.
A completed version of this tutorial project is available in the WebView2Samples repo:
Sample name: WinUI2_Sample
Repo directory: WinUI2_GettingStarted Solution file: MyUWPGetStartApp.sln
Follow the major Step sections in sequence, below.
About WinUI and WebView2
In WinUI 2 (UWP) apps, WebView2 is exposed as a XAML control. After you embed the XAML control in your app as a named control, you can then refer to that XAML control within C# files.
Only a subset of WebView2 interfaces/functions are exposed in WinUI:
 The WebView2 XAML object exposes the CoreWebView2 interface, along with the most important functionality.
 Interfaces such as CoreWebView2Controller are hidden, because WinUI takes care of the environment and window creation behind the scenes.
See also:
 XAML limitation in WebView2 in WinUI 2 (UWP) apps.
Step 1 - Install Visual Studio
This article shows steps and screenshots for Visual Studio 2022 Community Edition. Microsoft Visual Studio 2019 version 16.9 or later is required. Visual Studio 2017 isn't supported.
1. If a suitable version of Microsoft Visual Studio isn't installed already, in a new window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that page to do a basic default installation of Visual Studio, such as Visual Studio 2022 Community Edition.
Then return to this page and continue below.
2. If Visual Studio doesn't show line numbers in the code editor, you may want to turn on line numbers. To do this, select Tools > Options > Text Editor > All Languages > Line numbers. Then click OK.
Step 2 - Install workloads for .NET desktop, C++ desktop, and UWP development tools
1. Open Microsoft Visual Studio. The opening option window appears:

2. In the lower right, click Continue without code. Visual Studio opens, empty:

3. Select Tools > Get Tools and Features. The Visual Studio Installer window opens, and then the Modifying - Visual Studio window opens over it:

If the Modifying Visual Studio window isn't open, in the Visual Studio Installer window, click the Modify button.
1. On the Workloads tab, scroll to and click the following cards, to select them; make sure a checkmark is on each of these cards:
.NET desktop development
Desktop development with C++
Universal Windows Platform development
2. On the right, in the Installation details section, expand Universal Windows Platform development, and then select C++ (v143) Universal Windows Platform tools:

If all of these components have already been installed, click the Close button, close the Visual Studio Installer window, and skip to the next major section of steps below.
3. Click the Modify button.
A User Account Control window appears, asking "Do you want to allow this app to make changes to your device? Visual Studio Installer. Verified publisher: Microsoft Corporation. File origin: Hard drive on this computer. Show more details (button)".
4. Click the Yes button.
5. A dialog appears, "Before we get started, close Visual Studio":

6. Click the Continue button.
Visual Studio downloads, verifies, and installs the selected packages:

This screenshot shows Visual Studio Professional 2022, though this article was actually updated using Visual Studio Community 2022.
Installation can take several minutes. Visual Studio appears, with an empty Solution Explorer.
7. Press Alt+Tab to switch to the Visual Studio Installer window, and then close the Visual Studio Installer window.
Step 3 - Create a UWP app
1. If Visual Studio is open, select File > New > Project. The Create a new project dialog opens.
Or, if Visual Studio is closed, open it, and then in the startup screen of Visual Studio, click the Create a new project card:

2. In the Search for templates text box at the top, enter C# Blank App (Universal Windows), and then select the C# Blank App (Universal Windows) card:

3. Click the Next button.
The Configure your new project dialog appears, for a Blank App (Universal Windows):

5. In the Location text box, enter a path, such as C:\Users\myusername\Documents\MyWebView2Projects.
6. Click the Create button.
The New Windows Project dialog appears:

7. Accept the defaults, and click the OK button.
8. If the Developer Mode window section appears, in that section, click On. If you haven't already set your machine to Developer Mode, the Use developer features dialog opens, to confirm turning on developer mode.
 Click Yes to turn on Developer Mode for your machine, and then close the Settings window.
Visual Studio displays the newly created solution and project:

Step 4 - Build and run the empty project
Before adding WebView2 code, confirm that the project works and see what the empty app looks like, as follows:
1. Build and run the empty project. To do this, select Debug > Start Debugging (F5). The app's window opens, temporarily displays a grid, and then displays the app's content:

This is a baseline WinUI 2 (UWP) app, without WebView2 yet.
2. Close the app.
Next, you set up this new WinUI 2 (UWP) project to host the WebView2 control and use the WebView2 API.
Step 5 - Install the WinUI 2 SDK
(Microsoft.UI.Xaml)
Next, you install the Microsoft.UI.Xaml package for this project. Microsoft.UI.Xaml is WinUI 2.
1. In Solution Explorer, right-click the project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Browse tab.
3. Clear the Include prerelease check box.
4. In the Search box, enter Microsoft.UI.Xaml, and then select the Microsoft.UI.Xaml card below the search box:

For version 2.8.0 or later, in the Dependencies section at the bottom, Microsoft.Web.WebView2 is listed.
For HoloLens 2 development, the Microsoft.Web.WebView2 package must be version 1.0.1722.45 or higher, which may be higher than the default. WebView2 on HoloLens 2 is in Preview and is subject to change before general availability. WebView2 is only supported on HoloLens 2 devices running the Windows 11 update. For more information, see Update HoloLens 2.
5. In the middle panel, in the Version dropdown list, make sure Latest stable is selected, version 2.8.0 or later.
6. Click the Install button.
The Preview Changes dialog appears:

7. Click the OK button.
8. The License Acceptance dialog appears:


The readme lists some lines of code that are similar to what we'll add.
10. Select File > Save All (Ctrl+Shift+S).
You've now installed the Microsoft.UI.Xaml package, which is WinUI 2, for your project. The WinUI 2 SDK (Microsoft.UI.Xaml) includes the WebView2 SDK, so you don't need to separately install the NuGet package for WebView2 SDK.
Step 6 - Instantiate the WebView2 control in XAML code
Now you are ready to add WebView2 code to the project. First, add a namespace reference for the WebView2 control, as follows:
1. In Solution Explorer, expand your project, and then double-click MainPage.xaml.
MainPage.xaml opens in a designer with a code editor below it:

XMLxmlns:controls="using:Microsoft.UI.Xaml.Controls"Add a WebView2 control to the XAML grid, as follows:
3. In the MainPage.xaml file, in the <Grid> element (which contains no other elements yet), add a WebView2 control, by adding the following element:
XML<controls:WebView2 x:Name="WebView2" Source="https://bing.com"/>4. Press Ctrl+S to save the file.
Above the MainPage.xaml file in the code editor, a preview of the WebView2 control's content might be displayed, or it might remain blank (white) until you first build the app:

The wavy underlining goes away after building and running the app, in the next step.
Step 7 - Build and run the project containing the WebView2 control
1. Click Debug > Start Debugging (F5). (If building for HoloLens 2, see Using Visual
Studio to deploy and debug). The app window opens, briefly showing the WebView2 WebUI grid:

2. After a moment, the app window shows the Bing website in the WebView2 control for WebUI 2:

3. In Visual Studio, select Debug > Stop Debugging to close the app window.
Congratulations, you built your first WebView2 app!
Now you can change the content of the WebView2 control to add your own content.
Learn about navigation events
Next, learn about navigation events, which are essential for WebView2 apps. The app initially navigates to https://bing.com.
 In a new window or tab, read Navigation events for WebView2 apps, and then return to this page.
See also
WebView2 in WinUI 2 (UWP) apps
WebView2 API Reference
Development best practices for WebView2 apps
Manage user data folders
WebView2 sample apps - a guide to the WebView2Samples repo.
WinUI 2 (UWP) sample app - steps to download, update, build, and run the WinUI 2 WebView2 sample.
 Get Started tutorial finished project: Unlike some of the other tutorials, there isn't a completed version of this Getting Started tutorial in the WebView2Samples repo.
GitHub:
WebView2Samples repo
	WebView2 UWP Sample App	 - the WinUI 2 (UWP) WebView2 sample.
Issues - microsoft-ui-xaml repo	 - to enter WinUI-specific feature requests or bugs.
 Media App Samples for Xbox
NuGet:

Feedback
Was this page helpful? 

WinUI 2 (UWP) sample app
Article • 08/01/2024
This WebView2 sample demonstrates how to use the WebView2 control and WebView2 APIs to implement a web browser in a WinUI 2 (UWP) app.
Sample name: webview2_sample_uwp
Repo directory: webview2_sample_uwp
Solution file: webview2_sample_uwp.sln
Installed NuGet packages
This sample includes the following NuGet packages:
Microsoft.NETCore.UniversalWindowsPlatform
Microsoft.UI.Xaml - Prerelease - includes Microsoft.Web.WebView2 SDK as a dependency.
To demonstrate the latest features, this sample in the WebView2Samples repo is set up to use a prerelease version of the WinUI 2 SDK (listed as Microsoft.UI.Xaml in NuGet Package Manager), rather than a Stable version. The WinUI 2 SDK includes a compatible version of the WebView2 SDK, as a dependency of Microsoft.UI.Xaml.
See also README file for webview2_sample_uwp.
Step 1 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
Step 2 - Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 3 - Open the solution in Visual Studio
1. On your local drive, open the .sln file in Visual Studio, in the directory:
<your-reposdirectory>/WebView2Samples/SampleApps/webview2_sample_uwp/webview2_sample _uwp.sln
or:
<your-repos-directory>/WebView2Samplesmain/SampleApps/webview2_sample_uwp/webview2_sample_uwp.sln
Step 4 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 5 - Build and run the project using preinstalled packages
Solution Explorer shows the webview2_sample_uwp project:

Build and run the project, using the versions of the NuGet packages that were installed in the sample from the repo:
1. In the Solution Configurations dropdown list, select a configuration, such as Debug.
2. In the Solution Platforms dropdown list, select a platform, such as x64.

3. In Solution Explorer, right-click the webview2_sample_uwp project, and then select Build.
The project builds.
4. Select Debug > Start Debugging (F5).
An empty grid window initially appears for a moment:

The sample app window then displays webpage content:

5. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Next, update the NuGet packages for the project, per the following sections.
Step 6 - Update the NuGet packages
In this step, we'll update the project's NuGet packages, to get the latest prerelease version of the WinUI 2 SDK. The WinUI 2 SDK includes a compatible prerelease or release version of the WebView2 SDK.
Update the project's NuGet packages:
1. In Visual Studio, in Solution Explorer, right-click the webview2_sample_uwp project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Installed tab.
3. Select the Include prerelease check box.
A prerelease version of the Microsoft.UI.Xaml package is listed, indicating the
WinUI 2 SDK. The Microsoft.UI.Xaml package includes the WebView2 SDK;
Microsoft.Web.WebView2 is listed in the Dependencies section of the Microsoft.UI.Xaml package. Updating the Microsoft.UI.Xaml package will also cause an update to the compatible WebView2 SDK.
4. In the NuGet Package Manager, click the Updates tab.
5. Click the Microsoft.UI.Xaml card on the left.
6. In the Version text box, make sure Latest prerelease is selected.
7. Click the Update button on the right:

After getting the latest packages, which can take a few minutes, the Preview Changes dialog opens. Microsoft.Web.WebView2 (the WebView2 SDK) is listed separately in the Preview Changes dialog:

8. Click the OK button.
9. The License Acceptance dialog appears:


The readme lists some lines of code that are similar to what we'll add.
11. Update the Microsoft.NETCore.UniversalWindowsPlatform NuGet package, using similar steps.
After getting the latest UWP packages, which can take a few minutes, the Preview Changes dialog appears:

12. Select File > Save All.
You've now installed the Microsoft.UI.Xaml package, which is WinUI (WinUI 2), for your project. Check the resulting installed packages, as follows:
13. In NuGet Package Manager, click the Installed tab, and inspect the updated packages:

14. Close the NuGet Package Manager window.
Step 7 - Build and run the project with updated packages
Now that the NuGet packages have been updated, build and run the project again:
1. In Solution Explorer, right-click the webview2_sample_uwp project, and then select Build.
The project builds.
2. Select Debug > Start Debugging (F5).
An empty grid window initially appears for a moment:

The sample app window then displays webpage content:

3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 10 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

See also
WebView2 API Reference
Get started with WebView2 in WinUI 2 (UWP) apps

Feedback
Was this page helpful? 
WebView2 in WinUI 3 (Windows App SDK) apps
Article • 02/04/2025
The following considerations apply to WebView2 in WinUI 3 (Windows App SDK) apps.
WinAppSDK supports custom WebView2 environments
WinAppSDK supports custom WebView2 environments, starting with WinAppSDK 1.5
(1.5.0-experimental2). For more information, see WinUI3 WebView2 with a custom CoreWebView2Environment.
To instantiate a custom WebView2 environment, you could initialize WebView2 with one of the overrides of WebView2.EnsureCoreWebView2Async (listed below), and pass in your custom CoreWebView2Environment (and, optionally, custom CoreWebView2ControllerOptions):
C#public IAsyncAction EnsureCoreWebView2Async (CoreWebView2Environment environment) public IAsyncAction EnsureCoreWebView2Async (CoreWebView2Environment environment, CoreWebView2ControllerOptions controllerOptions)Also see the example code in Disabling SmartScreen navigation, below.
API Reference:
WebView2.EnsureCoreWebView2Async
CoreWebView2ControllerOptions
CoreWebView2Environment
CoreWebView2EnvironmentOptions
Disabling SmartScreen navigation
WebView2 sends URLs that are navigated to in your application to the SmartScreen service, to ensure that your customers stay secure. If you want to disable this navigation, use a custom CoreWebView2Environment, as follows:
C#CoreWebView2EnvironmentOptions environmentOptions = new CoreWebView2EnvironmentOptions(); environmentOptions.AdditionalBrowserArguments = "--disablefeatures=msSmartScreenProtection";
string browserFolder = null; // Use null to get default browser folder string userDataFolder = null; // Use null to get default user data folder
CoreWebView2Environment environment = await CoreWebView2Environment.CreateWithOptionsAsync(     browserFolder, userDataFolder, environmentOptions); // ...
this.WebView2.EnsureCoreWebView2Async(environment);Disabling SmartScreen by using an environment variable
We no longer recommend using an environment variable. Use the above API codebased approach instead.
Environment.SetEnvironmentVariable("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "-
-disable-features=msSmartScreenProtection");
This environment variable must be set prior to CoreWebView2 creation, which occurs when the WebView2.Source property is initially set or the WebView2.EnsureCoreWebView2Async method is initially called.
Setting DefaultBackgroundColor
In WebView2 for WinUI 3, the DefaultBackgroundColor setting exists on the WebView2 XAML object. For example:
C#public MainWindow()
{
    this.InitializeComponent();
    MyWebView.DefaultBackgroundColor = Colors.LightBlue; }Transparency
WinUI 3 doesn't support transparent backgrounds. See Transparent background support for WebView2? · Issue #2992.
See also
microsoft-ui-xaml Repo > Issues
WinUI3 WebView2 with a custom CoreWebView2Environment. Transparent background support for WebView2? · Issue #2992
Windows apps docs:
 1.5.0-experimental2
Windows App SDK Reference:
WebView2.EnsureCoreWebView2Async
WebView2.Source property
WebView2.EnsureCoreWebView2Async method
WebView2 Reference:
CoreWebView2ControllerOptions
CoreWebView2Environment
CoreWebView2EnvironmentOptions
Windows Security docs:
 SmartScreen

Feedback
Was this page helpful? 
Get started with WebView2 in WinUI 3 (Windows App SDK) apps
Article • 02/04/2025
This article is to learn to write your own WebView2 code. If you want to run a sample first, see Win32 sample app or another sample app article, such as WinUI 3 (Windows App SDK) sample app.
This article covers how to set up your development tools and create an initial WebView2 app for WinUI 3 (Windows App SDK), and learn about WebView2 concepts along the way. You first use the Blank App, Packaged (WinUI 3 in Desktop) Visual Studio project template, which uses the WindowsAppSDK, which includes the WebView2 SDK. You then add a WebView2 control, an Address bar and Go button, and URL logic to only allow navigating to HTTPS URLs.
In this tutorial, you do the following:
1. Set up the development environment.
2. Use the Blank App, Packaged (WinUI 3 in Desktop) Visual Studio project template to create a blank WinUI 3 project, which defines an app that contains a button.
3. Add a WebView2 control instead of the button, and initially navigate to the Microsoft homepage. WebView2 is supported because the project template uses the Microsoft.WindowsAppSDK NuGet package, which includes the WebView2 SDK.
4. Add an Address bar as a text box control, and then use the entered HTTPS string to navigate to a new webpage:

5. Insert JavaScript into the WebView2 control, to display a warning alert (dialog) when the user tries to navigate to a URL that has only an http:// prefix instead of

Completed project
A completed version of this tutorial project is available in the WebView2Samples repo:
Sample name: WinUI3GetStarted
Repo directory: WinUI3_GettingStarted
Solution file: WinUI3GetStarted.sln
Step 1: Install the latest Visual Studio 2022
Make sure that Visual Studio 2022 is installed and up-to-date.
To install the latest Visual Studio 2022:
1. Go to Visual Studio: IDE and Code Editor for Software Developers and Teams, and then in the Visual Studio 2022 section, click the Download button, and then select Community 2022 or another version.
2. In the Downloads popup in the upper right of Microsoft Edge, VisualStudioSetup.exe is listed. Click Open file.
Visual Studio Installer opens.
3. Follow the prompts, and accept the defaults. You'll install or update a workload and a component of a workload in the next step.
Step 2: Install the latest Windows App SDK
Make sure that the latest Windows App SDK is installed in Visual Studio 2022. The
Windows App SDK includes Visual Studio project templates, and includes the WebView2 SDK. These project templates include the Blank App, Packaged (WinUI 3 in Desktop) project template, which uses the WindowsAppSDK, including the WebView2 SDK.
The Windows App SDK is installed as the Windows App SDK C# Templates component of the .NET Desktop Development workload for Visual Studio. Before Visual Studio 2022 version 17.1, the Windows App SDK was instead installed as a Visual Studio extension, as explained in Install tools for the Windows App SDK.
To install the latest Visual Studio 2022 the latest Windows App SDK:
1. In Windows, press the Start key, and then type Visual Studio 2022.
The Visual Studio 2022 app is listed.
2. Click Open.
The Visual Studio 2022 dialog opens, with sections including Open recent and Get started.
3. Click Continue without code.
Visual Studio opens.
4. In the Tools menu, select Get Tools and Features.
The Visual Studio Installer window opens.
5. Make sure the Workloads tab is selected.
6. In the Desktop & Mobile section, select the card for the .NET desktop development workload, so that a checkmark appears:

7. In the Installation details tree on the right, in .NET desktop development > Optional, select the checkbox for the Windows App SDK C# Templates component, near the bottom of the tree.
8. Click the Modify button.
The User Account Control dialog opens.
9. Click the Yes button.
You're prompted to close Visual Studio.
10. Click the Continue button (assuming you have no unsaved work).
Visual Studio downloads and installs the latest Windows App SDK C# Templates component. In the Visual Studio Installer window, a message says All installations are up to date, and Visual Studio 2022 opens.
Step 3: Create a blank WinUI 3 project
Next, create a project that's a basic WebView2 app for WinUI 3 (Windows App SDK). This desktop app will contain a single main window. The project won't contain any WebView2 code yet.
To create a WebView2 app for WinUI 3 (Windows App SDK):
1. If Visual Studio is running, select File > New > Project. The Create a new project dialog opens.
2. If Visual Studio 2022 is not running:
a. In Windows, press the Start key, and then type Visual Studio 2022.
The Visual Studio 2022 app is listed.
b. Click Open.
The Visual Studio 2022 startup dialog opens, with sections including Open recent and Get started.
c. In the Get started section, click the Create a new project card. The Create a
new project window opens.
3. In the Create a new project window, in the Search for templates field, enter WinUI 3 in Desktop:

The project templates that were installed in the previous major step are listed.
4. Click the Blank App, Packaged (WinUI 3 in Desktop) card to select it, and then click the Next button.
The Configure your new project dialog appears.
5. In the Project name text box, enter a project name, such as WinUI3GetStarted:

6. In the Location text box, enter or navigate to a directory, such as C:\Users\myUsername\source\.
7. Click the Create button.
The project is created:

1. If a dialog appears, saying "Failed to install the Microsoft.WindowsAppSDK package", click the OK button.
Step 4: Update or install the Windows App SDK
When you create a new project in Visual Studio, check the status of the solution's NuGet packages. Make sure the needed NuGet packages were installed by the project template, and make sure the packages have been updated, so that the project has the latest features and fixes.
To update or install the latest Windows App SDK NuGet package for your project:
1. In Visual Studio, in Solution Explorer, right-click the WinUI3GetStarted project, and then select Manage NuGet Packages.
In Visual Studio, the NuGet: WinUI3GetStarted tab opens. If the
Microsoft.WindowsAppSDK package has been installed during project creation using the project template, the Installed tab is selected, and that package is listed:

If the Microsoft.WindowsAppSDK package is not listed in the Installed tab:
2. Click the Browse tab, and then in the Search text box, enter Microsoft.WindowsAppSDK.
3. Select the Microsoft.WindowsAppSDK card:

4. Click the Install button, to the right.
The Preview Changes dialog opens.
5. Click the Apply button, and then accept the license terms.
The Microsoft.WindowsAppSDK NuGet package is installed.
6. In the NuGet - Solution tab, click the Updates tab, and then optionally update any packages that are listed there.
7. Close the NuGet - Solution tab.
Step 5: Build and run the project
The new WinUI 3 project remains opens in Solution Explorer in Visual Studio:

instance.
 The MainWindow.xaml.cs file defines a MainWindow class that represents the main window that's displayed by your app instance. The classes derive from types in the Microsoft.UI.Xaml namespace of WinUI.
To build and run the project:
1. Select File > Save All (Ctrl+Shift+S).
2. Select Debug > Start (F5).
The Enable Developer Mode for Windows dialog might open:

3. If that dialog appears, click settings for developers, turn on the Developer Mode toggle, click the Yes button, and then click the Close button of the Visual Studio dialog. For more information about Developer Mode, see Enable your device for development, at Build desktop apps for Windows.
The project builds. The blank WinUI Desktop app opens, with no WebView2 control added yet:

4. Click the Click Me button.
The button label changes to Clicked.
5. Close the app.
Step 6: Add a WebView2 control
The project is based on the project template Blank App, Packaged (WinUI 3 in Desktop), which uses the Microsoft.WindowsAppSDK NuGet package, which includes the WebView2 SDK. So we can add WebView2 code. You'll edit the MainWindow.xaml and
MainWindow.xaml.cs files to add a WebView2 control to the blank WinUI 3 app project, initially loading the Microsoft home page. In the XAML file, the WebView control will be tagged like:
<controls:WebView2 x:Name="MyWebView" Source="https://www.microsoft.com"> To add a WebView2 control that initially navigates to the Microsoft home page:
1. In Visual Studio, in Solution Explorer, double-click MainWindow.xaml.
The file opens in the code editor.
2. Copy and paste the following attribute inside the <Window> start tag, at the end of the list of XML namespaces:
XMLxmlns:controls="using:Microsoft.UI.Xaml.Controls"That code adds the WebView2 XAML namespace. Make sure your code in MainWindow.xaml is similar to the following:
XML<?xml version="1.0" encoding="utf-8"?>
<Window     x:Class="MyWebView2WinUI3.MainWindow"     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     xmlns:local="using:MyWebView2WinUI3"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"     xmlns:mc="http://schemas.openxmlformats.org/markupcompatibility/2006"     xmlns:controls="using:Microsoft.UI.Xaml.Controls"     mc:Ignorable="d">
    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" 
VerticalAlignment="Center">
        <Button x:Name="myButton" Click="myButton_Click">Click 
Me</Button>
    </StackPanel>
</Window>3. Delete the <StackPanel> element (three lines).
4. Above the </Window> end tag, paste the following <Grid> element:
XML<Grid>
    <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>         <ColumnDefinition Width="Auto"/>
    </Grid.ColumnDefinitions>
    <controls:WebView2 x:Name="MyWebView"  Grid.Row="1" 
Grid.ColumnSpan="2"
        Source="https://www.microsoft.com" HorizontalAlignment="Stretch"         VerticalAlignment="Stretch"/>
</Grid>
This <Grid> element contains a <controls:WebView2> element named MyWebView, which has a Source attribute that sets the initial URI that's displayed in the WebView2 control (https://www.microsoft.com). When the app opens, it will initially display the Microsoft.com home page, in the WebView2 control.
5. In Solution Explorer, expand MainWindow.xaml and then double-click MainWindow.xaml.cs.
6. In MainWindow.xaml.cs, delete the following line of C# code in the myButton_Click method:
C#myButton.Content = "Clicked";The method is empty for now. We'll use it for the Address bar's Go button later.
7. Select File > Save All (Ctrl+Shift+S).
8. Press F5.
The project builds, and the app opens:

The app is a WebView2 host app that includes the WebView2 control. The WebView2 control initially displays the website https://www.microsoft.com. There's no Address bar text box or Go button yet.
9. Close the app.
Step 7: Add navigation controls
To allow users to control which webpage is displayed in the WebView2 control, add an Address bar to the app, as follows:
1. In MainWindow.xaml, paste the following code inside the <Grid> element, above the <controls:WebView2> element:
XML   <TextBox Name="addressBar" Grid.Column="0"/>
   <Button x:Name="myButton" Grid.Column="1" 
Click="myButton_Click">Go</Button>Make sure the resulting <Grid> element in the MainWindow.xaml file matches the following:
XML
<Grid>
    <Grid.RowDefinitions>
        <RowDefinition Height="Auto"/>
        <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*"/>
        <ColumnDefinition Width="Auto"/>
    </Grid.ColumnDefinitions>
    <TextBox Name="addressBar" Grid.Column="0"/>
    <Button x:Name="myButton" Grid.Column="1" 
Click="myButton_Click">Go</Button>
    <controls:WebView2 x:Name="MyWebView"  Grid.Row="1" 
Grid.ColumnSpan="2"
        Source="https://www.microsoft.com" 
HorizontalAlignment="Stretch"         VerticalAlignment="Stretch"/>
</Grid>
2. In MainWindow.xaml.cs, paste the following try/catch block into the body of the myButton_Click method:
C#private void myButton_Click(object sender, RoutedEventArgs e)
{     try
    {
        Uri targetUri = new Uri(addressBar.Text);
        MyWebView.Source = targetUri;
    }     catch (FormatException ex)
    {
        // Incorrect address entered.
    }
}This code navigates the WebView2 control to the URL that the user enters in the
Address bar, when the user clicks the Go button, by re-setting the value of the
MyWebView.Source property, which is equivalent to the Source attribute of the <controls:WebView2 x:Name="MyWebView"> element.
3. Select File > Save All (Ctrl+Shift+S).
4. Press F5.
The project builds, and the app opens, initially showing the Microsoft home page.
There's now an Address bar and a Go button.
5. Enter a new complete HTTPS URL in the Address bar, such as

The WebView2 control in the app displays the Bing website. The Address bar displays the URL, such as https://www.bing.com.
6. Enter an incomplete URL in the Address bar, such as bing.com, and then click the Go button.
The WebView2 control doesn't attempt to navigate to that URL. An exception is thrown, because the URL doesn't start with http:// or https://. In the try section, the addressBar.Text string doesn't start with http:// or https://, yet the non-URI string is passed to the Uri constructor, which throws a
System.UriFormatException exception. In Visual Studio, the Output pane displays "Exception thrown: 'System.UriFormatException' in System.Private.Uri.dll". The app continues running.
7. Close the app.
Step 8: Handle navigation events
An app that hosts a WebView2 control listens for the following events:
NavigationStarting
SourceChanged
ContentLoading
HistoryChanged
NavigationCompleted
These events are raised by a WebView2 control during webpage navigation. If an HTTP redirect occurs, there are multiple NavigationStarting events in a row. For more information, see Navigation events for WebView2 apps.
When an error occurs, the following events are raised, and an error webpage might be displayed:
SourceChanged
ContentLoading
HistoryChanged
In this section, you add code to import the WebView2 Core library, which handles navigation events to go to various types of URLs.
To handle navigation events:
1. In MainWindow.xaml.cs, add the following line at the top, above the other using statements:
C#using Microsoft.Web.WebView2.Core;Register a handler for NavigationStarting that cancels any non-HTTPS requests:
2. In MainWindow.xaml.cs, in the constructor, add the following NavigationStarting line:
C#public MainWindow()
{
    this.InitializeComponent();
    MyWebView.NavigationStarting += EnsureHttps;
}That line registers the EnsureHttps method (added below) as a listener of the NavigationStarting event.
3. Below the constructor, add the following EnsureHttps method:
C#private void EnsureHttps(WebView2 sender, 
CoreWebView2NavigationStartingEventArgs args){
    String uri = args.Uri;
    if (!uri.StartsWith("https://"))
    {         args.Cancel = true;
    }     else     {         addressBar.Text = uri;
    }
}4. Select File > Save All (Ctrl+Shift+S).
5. Press F5.
The project builds, and the app opens.
6. In the app, in the Address bar, enter an HTTP URL, such as http://bing.com, and then click the Go button.
The app doesn't navigate to that page, because navigation is blocked to HTTP sites. We haven't yet added a dialog to tell the user why the displayed site didn't change.
7. Enter an HTTPS URL, such as https://bing.com, and then click the Go button.
The app navigates to the specified page, because navigation is allowed for HTTPS sites.
8. In the app, in the Address bar, enter a string without a prefix, such as bing.com, and then click the Go button.
The app doesn't navigate to that page. A UriFormatException exception is thrown, as before, and appears in the Output pane in Visual Studio.
9. Close the app.
Step 9: Insert JavaScript to alert the user about a non-HTTPS address
You can use the host app to inject JavaScript code into the WebView2 control at runtime. You can task WebView2 to run arbitrary JavaScript, or add initialization scripts. The injected JavaScript applies to all new top-level documents and any child frames, until the JavaScript is removed. The injected JavaScript is run with specific timing, to either:
Run the injected JavaScript after the creation of the global object.
Run the injected JavaScript before running any other script that's included in the HTML document.
Below, you add JavaScript that displays an alert when a user tries to open a non-HTTPS site. To do this, you inject a script into the web content that uses ExecuteScriptAsync.
To display an alert when the user tries to navigate to a non-HTTPS site:
1. In MainWindow.xaml.cs, in the EnsureHttps method, add the following ExecuteScriptAsync line:
C#private void EnsureHttps(WebView2 sender, 
CoreWebView2NavigationStartingEventArgs args)
{
    String uri = args.Uri;
    if (!uri.StartsWith("https://"))
    {
        MyWebView.ExecuteScriptAsync($"alert('{uri} is not safe, try an https link')");         args.Cancel = true;
    }     else     {         addressBar.Text = uri;
    }
}2. Select File > Save All (Ctrl+Shift+S).
3. Press F5.
The project builds, and the app opens.
4. In the app's Address bar, enter a non-HTTPS URL, such as http://www.bing.com, and then click the Go button.
The app's WebView2 control displays an alert dialog for non-HTTPS websites, saying that the non-HTTPS uri is not safe:

5. Close the app.
Congratulations, you've built a WebView2 WinUI 3 (Windows App SDK) app!
See also
WebView2 API Reference
Introduction to Microsoft Edge WebView2 - overview of features.
Manage user data folders
WebView2 sample apps - a guide to the WebView2Samples repo.
  Development best practices for WebView2 appsDevelopment best practices developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features.
GitHub:
Getting Started with WebView2 in WinUI3
Spec: The WebView2 Xaml control - the WinUI 3.0 version of the WebView2 control.
 microsoft-ui-xaml repo > Issues - to enter WinUI-specific feature requests or bugs.

Feedback
Was this page helpful? 
WinUI 3 (Windows App SDK) sample app
Article • 11/07/2024
Sample name: WebView2_WinUI3_Sample
Repo directory: WebView2_WinUI3_Sample Solution file: WebView2_WinUI3_Sample.sln
This sample demonstrates using a WebView2 control in a WinUI 3 (Windows App SDK) Packaged application.

This sample also allows you to ship the app with a fixed-version WebView2 Runtime, instead of using whichever version of the WebView2 Runtime is installed and running on the user's computer.
NuGet packages and workload components
Before building, we'll do the following:
 Update the Microsoft.Windows.SDK.BuildTools NuGet package for the project and for the (Package) project.
 Update the Microsoft.WindowsAppSDK NuGet package for the project and for the (Package) project.
 Install the "Windows 10 SDK" component of the "Windows app development" workload, if not installed already.
Directories
ﾉ Expand table
Directory	ContentsWebView2_WinUI3_Sample	Project codeWebView2_WinUI3_Sample (Package)	Packaging and distribution projectWebView2_WinUI3_Sample (Package)\FixedRuntime	(Optional) Fixed WebView2 runtimeWebView2_WinUI3_Sample	(Optional) Fixed WebView2 runtime
(Package)\FixedRuntime\130.0.2849.39	sampleStep 1: Install the latest Visual Studio 2022
Make sure that Visual Studio 2022 is installed and up-to-date.
To install the latest Visual Studio 2022:
1. Go to Visual Studio: IDE and Code Editor for Software Developers and Teams, and then in the Visual Studio 2022 section, click the Download button, and then select Community 2022 or another version.
2. In the Downloads popup in the upper right of Microsoft Edge, VisualStudioSetup.exe is listed. Click Open file.
Visual Studio Installer opens.
3. Follow the prompts, and accept the defaults.
Step 2: Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 3: Open the solution in Visual Studio
These initial steps about the repo and branch aren't required, but they're a good practice, to avoid changing the code that's in the "main" branch of your cloned copy of the WebView2Samples repo. This enables you to alter the files of the project (in order to build and run the sample), while keeping the code that's in the "main" branch identical to the repo.
You can do these steps in any tool for git operations, such as:
GitHub Desktop.
The Git Changes tab next to the Solution Explorer tab, in the lower right of Visual Studio.
 The git bash command prompt.
To open the sample's solution file in a working branch:
1. In GitHub Desktop, in the Current repository list in the upper left, select the WebView2Samples repo.
2. Click Fetch origin in the upper middle of the window.
3. In the Current branch menu, create a working branch such as user/myGithubUsername/winui3-sample and switch to it.
You're now safely in a working branch rather than the "main" branch, and are free to start altering the sample's files.
4. On your local drive, open the .sln file in Visual Studio.
Example locations of the .sln file: if you cloned the repo, the repo directory name is /WebView2Samples/:
<your-reposdirectory>/WebView2Samples/SampleApps/WebView2_WinUI3_Sample/WebView2_WinUI3_S ample.sln
If you downloaded the repo, the repo directory name is /WebView2Samples-main/, representing the "main" branch:
<your-repos-directory>/WebView2Samplesmain/SampleApps/WebView2_WinUI3_Sample/WebView2_WinUI3_Sample.sln
Step 4: Update the NuGet packages
1. In Solution Explorer, right-click the WebView2_WinUI3_Sample project, and then select Manage NuGet Packages.
In Visual Studio, the NuGet Package Manager opens:

The Installed tab is selected, listing the NuGet packages:
Microsoft.Windows.SDK.BuildTools
Microsoft.WindowsAppSDK Microsoft.Web.WebView2
2. Select the Updates tab.
3. In the upper left, select the Select all packages checkbox.
4. To the right of that checkbox, click the Update button.
The Preview Changes dialog opens.
5. Click the Apply button.
The License Acceptance dialog opens.
6. Click the I Accept button.
The NuGet packages are updated, and the number next to the Updates tab is removed.
7. Click the View menu, and then click the Output menuitem.
In the Output tab, in the Show output from dropdown list, Package Manager is selected. The output includes lines such as:

Installing NuGet package Microsoft.Windows.SDK.BuildTools
Installing NuGet package Microsoft.WindowsAppSDK
Successfully uninstalled 'Microsoft.Windows.SDK.BuildTools
Successfully uninstalled 'Microsoft.WindowsAppSDK
Successfully installed 'Microsoft.Web.WebView2
Successfully installed 'Microsoft.Windows.SDK.BuildTools
Successfully installed 'Microsoft.WindowsAppSDK
Update NuGet packages in the (Package) project
8. In Solution Explorer, right-click the WebView2_WinUI3_Sample (Package) project, and then select Manage NuGet Packages.
9. Select the Updates tab.
10. In the upper left, select the Select all packages checkbox.
11. To the right of that checkbox, click the Update button.
The Preview Changes dialog opens.
12. Click the Apply button.
The License Acceptance dialog opens.
13. Click the I Accept button.
The NuGet packages are updated, and the number next to the Updates tab is removed.
14. Click the View menu, and then click the Output menuitem.
In the Output tab, in the Show output from dropdown list, Package Manager is selected. The output includes lines like shown above.
15. Close the NuGet Package Manager window.
Step 5: Install the Windows 10 SDK or other workload components
Depending on what you have installed, you might need to install a Visual Studio workload, or component of a workload, such as the following, to build the sample.
To install the Windows 10 SDK component of the Windows application development workload:
1. In Visual Studio, click the Tools menu, and then click the Get Tools and Features menuitem.
The Visual Studio Installer window opens.
2. Select the Windows application development card, so that a checkmark appears.
3. In the Installation details tree on the right, select the Windows 10 SDK
10.0.19041.0 component's checkbox.
4. Click the Modify button.
The User Account Control dialog opens.
5. Click the Yes button.
The Before we get started dialog (of the Visual Studio Installer) opens, prompting to save your work in Visual Studio.
6. Close the main Visual Studio window, saving if needed.
7. In the Before we get started dialog, click the Retry button.
After a few minutes, the Windows 10 SDK 10.0.19041.0 workload component is downloaded and installed. Visual Studio Installer says "All installations are up to date."
Step 6: Build and run the app
1. Open the solution in Visual Studio 2022. For example, in Visual Studio Installer, in the Visual Studio 2022 section, click the Launch button.
The Visual Studio launcher opens, with sections Open recent and Get started.
2. In the Open recent section, select WebView2_WinUI3_Sample.sln.
The solution opens in Visual Studio 2022.
3. Press F5.
In Solution Explorer, the (Package) project is bold, indicating that it's the default project. The app builds, and then the WebView2_WinUI3_Sample (Package) app window opens:

The message "Navigation complete" is displayed at the bottom.
4. In the Address bar (a text box), enter https://bing.com (a complete HTTPS URL), and then press Enter (equivalent to clicking the Go button).
The WebView2 control navigates to Bing and then displays "Navigation complete" at the bottom.
In Visual Studio, the Output window displays messages such as:
AddressBar_KeyDown [Enter]: https://bing.com
TryNavigate
TryCreateUri
Navigation completeStep 7: Commit changes in your working branch
In a git tool such as GitHub Desktop, at this point, you can commit changes, and optionally push them to a fork of your branch at GitHub. These types of operations are relevant when you modify, experiment with, and customize the sample. This also keeps your working branch clean and keep your clone of the repo organized, so that you can switch to a different sample.
To commit and push changes that were made to the sample in your working branch:
1. In Visual Studio, select File > Save All (Ctrl+Shift+S).
2. In GitHub Desktop, enter a brief commit message, such as "updated, built, ran sample", and then click the Commit button.
3. Select Repository > Push. Your working branch is copied from your local drive to your forked branch of the WebView2Samples repo at GitHub.
View your working branch at GitHub
4. In Microsoft Edge, go to your fork of the repo, such as https://github.com/myGithubUsername/WebView2Samples/.
5. Click the [#] Branches link, and then select your new working branch, such as user/myGithubUsername/winui3-sample.
Step 8: Inspect the code
1. Close the WebView2_WinUI3_Sample (Package) app.
2. In Solution Explorer, in the WebView2_WinUI3_Sample project, double-click each .xaml file and its .cs file:
App.xaml - No WebView2 code.
App.cs - Code to use a fixed-version WebView2 Runtime.
MainWindow.xaml - WebView2 elements.
MainWindow.cs - WebView2 code.
Condensed versions of these files are below.
App.xaml
There's no WebView2-specific code in this file.
Condensed listing
XAML<Application     x:Class="WebView2_WinUI3_Sample.App"     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"     xmlns:local="using:WebView2_WinUI3_Sample">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <XamlControlsResources xmlns="using:Microsoft.UI.Xaml.Controls" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources> </Application>
App.cs
The WebView2-specific code in this file is commented out. You can un-comment these lines in order to use a fixed-version Runtime; see Using a fixed-version WebView2 Runtime, below.
Condensed listing
C#namespace WebView2_WinUI3_Sample
{
    /// <summary>
    /// Provides application-specific behavior to supplement the default 
Application class.     /// </summary>     public partial class App : Application
    {
        /// <summary>
        /// Initializes the singleton application object.  Equivalent to main() or WinMain().         /// </summary>         public App()
        {             this.InitializeComponent();
            // If you're shipping a fixed-version WebView2 Runtime with your app, un-comment the
            // following lines of code, and change the version number to the version number of the
            // WebView2 Runtime that you're packaging and shipping to users:
            // StorageFolder localFolder = 
Windows.ApplicationModel.Package.Current.InstalledLocation;
            // String fixedPath = Path.Combine(localFolder.Path, 
"FixedRuntime\\130.0.2849.39");
            // Debug.WriteLine($"Launch path [{localFolder.Path}]");             // Debug.WriteLine($"FixedRuntime path [{fixedPath}]");
            // 
Environment.SetEnvironmentVariable("WEBVIEW2_BROWSER_EXECUTABLE_FOLDER", fixedPath);         }
        /// <summary>        /// Invoked when the application is launched normally by the end user.
        /// </summary>
        /// <param name="args">Details about the launch request and process.
</param>
        protected override void 
OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args)
        {             m_window = new MainWindow();             m_window.Activate();
        }
        private Window m_window;
    }
}MainWindow.xaml
The main window has the following XAML elements as controls:
<TextBox> - The Address bar.
<Button> - The Go button.
<WebView2> - The WebView2 control.
<TextBlock> - The status bar.
Condensed listing
XAML<Window     xmlns:local="using:WebView2_WinUI3_Sample">
    <Grid>
        <Grid.RowDefinitions>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Background="LightGray">
            <TextBox Grid.Column="0"  x:Name="AddressBar" 
KeyDown="AddressBar_KeyDown" VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Button Grid.Column="1" x:Name="Go" Content="Go" 
Click="Go_OnClick" VerticalAlignment="Center" HorizontalAlignment="Center"/>         </Grid>
        <WebView2 x:Name="WebView2" Grid.Row="1"/>
        <Rectangle Grid.Row="2" Fill="LightGray"/>
        <TextBlock x:Name="StatusBar" Text="WebView2" 
VerticalAlignment="Center" Grid.Row="2" Margin="10,0,10,0"/>
    </Grid>
</Window>MainWindow.cs
The MainWindow class has the following methods:
Constructor
StatusUpdate
WebView2_CoreWebView2Initialized
WebView2_NavigationCompleted
TryCreateUri
TryNavigate
Go_OnClick
AddressBar_KeyDown
SetTitle
GetWebView2Version
Excerpts or condensed versions of these methods are below.
MainWindow class
C#using Microsoft.Web.WebView2.Core;
namespace WebView2_WinUI3_Sample
{
    /// <summary>
    /// An empty window that can be used on its own or navigated to within a 
Frame.
    /// </summary>     public sealed partial class MainWindow : Window
    {Constructor
C#public MainWindow()
{
    this.InitializeComponent();
    Closed += (obj, eventArgs) =>
    {         if (WebView2 != null)
        {
            // Ensure that WebView2 resources are released when
            // the MainWindow is closed. 
            // WebView2 lifecycle in WinUI3 and the Close() method:            // https://github.com/microsoft/microsoft-uixaml/issues/4752#issuecomment-819687363
            WebView2.Close();
        }
    };
    AddressBar.Text = "https://developer.microsoft.com/microsoftedge/webview2/";
    WebView2.NavigationCompleted += WebView2_NavigationCompleted;     WebView2.CoreWebView2Initialized += WebView2_CoreWebView2Initialized;
    WebView2.Source = new Uri(AddressBar.Text);
    StatusUpdate("Ready");
    SetTitle();
}
StatusUpdate
C#private void StatusUpdate(string message)
{
    StatusBar.Text = message;
    Debug.WriteLine(message);
}WebView2_CoreWebView2Initialized
C#private void WebView2_CoreWebView2Initialized(WebView2 sender, 
CoreWebView2InitializedEventArgs args)
{     if (args.Exception != null)
    {
        StatusUpdate($"Error initializing WebView2: 
{args.Exception.Message}");
    }     else
    {
        SetTitle(sender);
    }
}WebView2_NavigationCompleted
C#
private void WebView2_NavigationCompleted(WebView2 sender, 
CoreWebView2NavigationCompletedEventArgs args)
{
    StatusUpdate("Navigation complete");
    // Update the address bar with the full URL that was navigated to.
    AddressBar.Text = sender.Source.ToString(); }
TryCreateUri
C#private bool TryCreateUri(String potentialUri, out Uri result) {
    StatusUpdate("TryCreateUri");
    Uri uri;
    if ((Uri.TryCreate(potentialUri, UriKind.Absolute, out uri) || 
Uri.TryCreate("http://" + potentialUri, UriKind.Absolute, out uri)) &&
        (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == 
Uri.UriSchemeHttps))
    {         result = uri;         return true;
    }     else
    {
        StatusUpdate("Unable to configure URI");         result = null;         return false;
    }
}TryNavigate
C#private void TryNavigate()
{
    StatusUpdate("TryNavigate");
    Uri destinationUri;     if (TryCreateUri(AddressBar.Text, out destinationUri))
    {
        WebView2.Source = destinationUri;
    }     else     {        StatusUpdate("URI couldn't be figured out use it as a bing search term");
        String bingString = $"https://www.bing.com/search?q=
{Uri.EscapeDataString(AddressBar.Text)}";         if (TryCreateUri(bingString, out destinationUri))         {
            AddressBar.Text = destinationUri.AbsoluteUri;
            WebView2.Source = destinationUri;
        }         else         {
            StatusUpdate("URI couldn't be configured as bing search term, giving up");
        }
    }
}Go_OnClick
C#private void Go_OnClick(object sender, RoutedEventArgs e) {
    StatusUpdate("Go_OnClick: " + AddressBar.Text);
    TryNavigate();
}AddressBar_KeyDown
C#private void AddressBar_KeyDown(object sender, KeyRoutedEventArgs e)
{     if (e.Key == Windows.System.VirtualKey.Enter)
    {
        StatusUpdate("AddressBar_KeyDown [Enter]: " + AddressBar.Text);         e.Handled = true;
        TryNavigate();
    }
}SetTitle
C#
private void SetTitle(WebView2 webView2 = null)
{
    var packageDisplayName = 
Windows.ApplicationModel.Package.Current.DisplayName;     var webView2Version = (webView2 != null) ? " - " + GetWebView2Version(webView2) : string.Empty;
    Title = $"{packageDisplayName}{webView2Version}"; }
GetWebView2Version
C#private string GetWebView2Version(WebView2 webView2)
{     var runtimeVersion = 
webView2.CoreWebView2.Environment.BrowserVersionString;
    CoreWebView2EnvironmentOptions options = new CoreWebView2EnvironmentOptions();     var targetVersionMajorAndRest = options.TargetCompatibleBrowserVersion;     var versionList = targetVersionMajorAndRest.Split('.');     if (versionList.Length != 4)
    {         return "Invalid SDK build version";
    }     var sdkVersion = versionList[2] + "." + versionList[3];
    return $"{runtimeVersion}; {sdkVersion}";
}Using a fixed-version WebView2 Runtime
If you want to ship a fixed version of the WebView2 runtime with your application you will need to include it in your project. See Distribute your app and the WebView2 Runtime.
The following steps show Runtime version number 130.0.2849.39; you'll change this number to whatever version you are packaging and shipping.
To use a fixed-version Runtime:
1. Include the fixed WebView2 runtime in the package project:

\WebView2_WinUI3_Sample\WebView2_WinUI3_Sample 
(Package)\FixedRuntime\130.0.2849.39\
Above, use the version that you're shipping, instead of 130.0.2849.39.
2. Update the package project wapproj file for the version you're using (use your version instead of 130.0.2849.39):
< Content Include="FixedRuntime\130.0.2849.39\\**\*.*" >3. In App.xaml.cs, uncomment the five commented-out lines of code below the comment, to enable the Runtime override:
public App() {    this.InitializeComponent();
   // If you're shipping a fixed-version WebView2 Runtime with your app, un-comment the
   // following lines of code, and change the version number to the version number of the
   // WebView2 Runtime that you're packaging and shipping to users:
   // StorageFolder localFolder = 
Windows.ApplicationModel.Package.Current.InstalledLocation;
   // String fixedPath = Path.Combine(localFolder.Path, 
"FixedRuntime\\130.0.2849.39");
   // Debug.WriteLine($"Launch path [{localFolder.Path}]");    // Debug.WriteLine($"FixedRuntime path [{fixedPath}]");
   // 
Environment.SetEnvironmentVariable("WEBVIEW2_BROWSER_EXECUTABLE_FOLDER"
, fixedPath);
}4. In the above code, change the version number from 130.0.2849.39 to the version that you're shipping.
See also
Distribute your app and the WebView2 Runtime
Get started with WebView2 in WinUI 3 (Windows App SDK) apps
Feedback
Was this page helpful? 

WebView2 in WPF apps
Article • 02/04/2025
The following considerations apply to WebView2 in WPF apps.
Show WPF elements on top of the WebView2 layer (WebView2CompositionControl)
The WebView2CompositionControl prevents the WebView2 control from being the topmost layer in a WPF app and obscuring any WPF elements.
Microsoft.Web.WebView2.Wpf.WebView2CompositionControl is a drop-in replacement for the standard WPF WebView2 control. Both the WebView2 control and
WebView2CompositionControl implement the Microsoft.Web.WebView2.Wpf.IWebView2 interface. Both of them derive from FrameworkElement, as follows:
FrameworkElement -> HwndHost -> WebView2.
FrameworkElement -> Control -> WebView2CompositionControl.
Background: If you're building a Windows Presentation Foundation (WPF) app and using the WebView2 control, you may find that your app runs into "airspace" issues, where the WebView2 control is always displayed on top, hiding any WPF elements in the same location, even if you try to specify the WPF elements to be above the WebView2 control (using visual tree order or the z-index property, for example).
This issue occurs because the WPF control uses the WPF HwndHost to host the Win32 WebView2 control, and HwndHost has an issue with airspace.
See also:

See also
 WebView2CompositionControl Class
Airspace:

Feedback
Was this page helpful? 

Get started with WebView2 in WPF apps
Article • 03/28/2023
This article covers how to set up your development tools and create an initial WebView2 app for Windows Presentation Foundation (WPF), and learn about WebView2 concepts along the way.
In this tutorial, you use the WPF Application or WPF App (.NET Framework) project template to create a WPF app, and then install the WebView2 SDK for the project to add WebView2.
Completed project
A completed version of this tutorial project is available in the WebView2Samples repo:
Sample name: WPF_GettingStarted
Repo directory: WPF_GettingStarted
Solution file: WPFSample.sln
Step 1 - Install Visual Studio with .NET support
This tutorial requires Microsoft Visual Studio, not Microsoft Visual Studio Code. This article mainly describes using Visual Studio 2022.
1. Install Visual Studio. Install .NET desktop development support, to get the needed project templates, as follows.
2. If you're at the Visual Studio startup screen, scroll to the bottom of the Create a new project dialog and click the link Open without code. Visual Studio opens.
3. In Visual Studio, select Tools > Get Tools and Features. The Visual Studio Installer window opens, and the Modifying dialog opens over it.
4. Select the .NET desktop development workload so there's a checkmark on it.
5. In the section Installation details > .NET desktop development > Included on the right, make sure .NET desktop development tools and .NET Framework 4.7.2 development tools are listed, with a checkmark next to them.
6. In the section Installation details > .NET desktop development > Optional on the right:
 If you're using Visual Studio 2022, make sure Development tools for .NET is selected:


7. Click the Modify button.
This tutorial also works with Visual Studio 2017. See Visual Studio older downloads.
Install .NET support, to get the needed project templates, similar to the above steps.
Step 2 - Create a single-window WebView2 app
Start by creating a basic desktop project that contains a single main window.
1. Decide whether to create a .NET Core/5/6 project (newer), or a WPF App (.NET Framework) project (older). For more information, see:
.NET history in What is .NET? Introduction and overview.
.NET at Wikipedia.
2. Follow the applicable section below.
Creating a .NET Core/5/6 project
If you are creating a .NET Core/5/6 project, do the following steps. Otherwise, skip to Creating a WPF App (.NET Framework) project.
1. Open Microsoft Visual Studio, such as Visual Studio 2022.
2. In the opening panel, click Create new project. Or, in the main Visual Studio window, select File > New > Project. The Create a new project dialog opens.
3. In the Search for templates text box, type WPF Application. The Create a new project panel shows the installed project templates that match your entered text. This article shows the C# rather than VB dialogs; both languages are supported for WebView2.
4. If you're using Visual Studio 2022, click a project template that has the title WPF
Application and the description text A project for creating a .NET WPF Application:

If you're using Visual Studio 2019, click a project template that has the title WPF
Application and the description text A project for creating a .NET Core WPF Application:

If the above project template isn't listed, see Step 1 - Install Visual Studio with .NET support above, to install .NET desktop development tools.
5. Click the Next button.
The Configure your new project: WPF Application dialog opens:

6. In the Project name text box, enter a project name, such as
MyWpfDotnetCoreWv2App.
7. In the Location text box, select a path on your local drive, such as
C:\Users\myusername\Documents\MyProjects, and then click the Next button.
The Additional information dialog appears, with a Target Framework dropdown list:

8. Select .NET Core 3.1 or later, such as .NET 6.0. (Don't select .NET Core 3.0.) Then click the Create button.
The initial .NET Core WPF Application project opens in Visual Studio:

Skip to Step 3 - Build and run the initial project without WebView2 below.
Creating a WPF App (.NET Framework) project
If you are creating a WPF App (.NET Framework) project, do the following steps.
Otherwise, skip to Step 3 - Build and run the initial project without WebView2.
1. Open Microsoft Visual Studio, such as Visual Studio 2022.
2. In the opening panel, click Create new project. Or, in the main Visual Studio window, select File > New > Project. The Create a new project dialog opens.
3. In the Search for templates text box, type WPF App. The Create a new project panel shows the installed project templates that match your entered text. This article shows the C# rather than VB dialogs; both languages are supported for WebView2.
4. Click a project template that has the title WPF App (.NET Framework) and the description text Windows Presentation Foundation client application:

If the above project template isn't listed, see Step 1 - Install Visual Studio with .NET support above, to install .NET desktop development tools.
5. Click the Next button.
The Configure your new project: WPF App (.NET Framework) dialog opens:

6. In the Project name text box, enter a project name, such as
MyWpfDotnetFwkWv2App.
7. In the Location text box, select a path on your local drive, such as C:\Users\myusername\Documents\MyProjects.
8. In the Framework dropdown list, select .NET Framework 4.6.2 or later.
9. Click the Create button.
The initial WPF App (.NET Framework) project opens in Visual Studio:

Step 3 - Build and run the initial project without WebView2
1. Select File > Save All to save the project.
2. Press F5 to build and run the project.
The project runs, and displays an empty window:

You might need to install the selected .NET Framework version, as follows.
3. If the app doesn't open, select Debug > Start Without Debugging.
If you haven't installed the selected version of .NET Framework, you might get the following dialog: "This application could not be started. The application requires one of the following versions of the .NET Framework:
.NETFramework,Version=v4.8.1 - Do you want to install this .NET Framework version now?"
4. If you get such a dialog, go to Download .NET Framework and download and then install the needed version of the Developer Pack (not the Runtime). For example, download ndp481-devpack-enu.exe to C:\Users\username\Downloads, and then double-click the file to install it.
5. If prompted, restart your computer:

C:\Users\username\Downloads, and again double-click the downloaded file to install the .NET Framework Developer Pack. A Success dialog appears:

7. If prompted, restart the computer again.
8. Open Visual Studio, and open the solution you created.
9. Press F5 to run the initial app (shown above), not yet including the WebView2 SDK.
10. Close the initial app.
Step 4 - Install the WebView2 SDK
In Visual Studio, use NuGet Package Manager to add the WebView2 SDK to the project, as follows:
1. In Solution Explorer, right-click the project name (based on either the .NET (Core) or .NET Framework project template), and then select Manage NuGet Packages:

2. In the upper left, click the Browse tab. In the search bar, type
Microsoft.Web.WebView2, then click the Microsoft.Web.WebView2 package.
The NuGet package manager dialog displays search results, including a Microsoft.Web.WebView2 package. The dialog has a version number and Install button.

3. Accept the default version, and then click the Install button.
4. In the Preview Changes dialog, click the OK button.
5. Select File > Save All to save the project.
6. Press F5 to build and run the project.
The project runs, and displays an empty window. This verifies that WebView2 is installed and working, although WebView2 has no content to display yet:

7. Close the app.
Step 5 - Create a single WebView2 control
Add a WebView2 control to your app.
1. In the MainWindow.xaml file, to add the WebView2 XAML namespace, insert the following line inside the <Window/> tag:
XMLxmlns:wv2="clrnamespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wp f"2. Make sure the code in MainWindow.xaml looks like the following code:
XML
<Window x:Class="WPF_Getting_Started.MainWindow"       xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"       xmlns:mc="http://schemas.openxmlformats.org/markupcompatibility/2006"       xmlns:local="clr-namespace:{YOUR PROJECT NAME}"       xmlns:wv2="clrnamespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wp f"
      mc:Ignorable="d"
      Title="MainWindow"
      Height="450"
      Width="800"
>
   <Grid>
   </Grid>
</Window>
3. To add the WebView2 control, replace the <Grid> tags with the following code.
The Source property sets the initial URI displayed in the WebView2 control.
XML<DockPanel>
   <wv2:WebView2 Name="webView"
                  Source="https://www.microsoft.com"
   />
</DockPanel>4. Select File > Save All to save the project.
5. Press F5 to build and run the project.
6. Make sure your WebView2 control displays https://www.microsoft.com:

Step 6 - Navigation
Enable users to change the URL that the WebView2 control displays, by adding an address bar to the app.
1. In the MainWindow.xaml file, add an address bar by copying and pasting the following code inside the <DockPanel> that contains the WebView2 control. Keep the existing code below the new snippet.
XML<DockPanel DockPanel.Dock="Top">
    <Button x:Name="ButtonGo"
              DockPanel.Dock="Right"               Click="ButtonGo_Click"
              Content="Go"
    />
    <TextBox Name="addressBar"/>
</DockPanel>2. Make sure the <DockPanel> section of the MainWindow.xaml file matches the following code:
XML<DockPanel>
    <DockPanel DockPanel.Dock="Top">
        <Button x:Name="ButtonGo" DockPanel.Dock="Right" 
Click="ButtonGo_Click" Content="Go"/>        <TextBox Name = "addressBar"/>
    </DockPanel>
    <wv2:WebView2 Name = "webView"
                  Source = "https://www.microsoft.com"
    />
</DockPanel>
3. In MainWindow.xaml.cs, to add the CoreWebView2 namespace, insert the following code at the top of the file:
C#using Microsoft.Web.WebView2.Core;4. In the MainWindow.xaml.csfile, copy the following code to create the
ButtonGo_Click method. This code navigates the WebView2 control to the URL entered in the address bar.
C#private void ButtonGo_Click(object sender, RoutedEventArgs e)
{     if (webView != null && webView.CoreWebView2 != null)
    {         webView.CoreWebView2.Navigate(addressBar.Text);
    }
}5. Paste the code directly after the Public MainWIndow declaration, as shown in the following code:
C#namespace WpfApp1
{
   /// <summary>
   /// Interaction logic for MainWindow.xaml
   /// </summary>    public partial class MainWindow : Window
   {       public MainWindow()
      {
            InitializeComponent();
      }       void ButtonGo_Click(object sender, RoutedEventArgs e)
      {             if (webView != null && webView.CoreWebView2 != null)
            {               webView.CoreWebView2.Navigate(addressBar.Text);
            }
      }
   }
}
6. Select File > Save All to save the project.
7. Press F5 to build and run the project.
8. Type a new URL in the address bar and choose Go. For example, type https://www.bing.com.
9. Make sure the WebView2 control opens the URL you entered.
Make sure you enter a complete URL in the address bar. The app generates an ArgumentException if the URL doesn't start with http:// or https://.
The sample app displays the Bing website with the URL https://www.bing.com in the address bar:

Step 7 - Navigation events
During webpage navigation, the WebView2 control raises events. The app that hosts WebView2 controls listens for the following events:
NavigationStarting
SourceChanged
ContentLoading

The above diagram shows the event sequence. Navigation events start with a new document.
Success path
A successful path includes the full sequence of events:
1. Navigation starting.
2. Source changed, with possible input from the same document.
3. Content loading.
4. History changes.
5. Navigation completed.
For more information, see Navigation events for WebView2 apps.
Failure path
If theres a failure, the failure path proceeds directly from navigation starting, to navigation completed, skipping the intervening events.
When an error occurs, the following events are raised, and may depend on navigation to an error webpage:
SourceChanged
ContentLoading
HistoryChanged
Redirection
If an HTTP redirect occurs, there are multiple NavigationStarting events in a row.
Example demonstrating navigation events
To demonstrate how to use the events, register a handler for NavigationStarting that cancels any non-HTTPS requests, as follows.
1. In the MainWindow.xaml.cs file, modify the constructor to match the top part of the following code. Below the constructor, add the EnsureHttps function:
C#public MainWindow()
{
    InitializeComponent();     webView.NavigationStarting += EnsureHttps;
}
void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args)
{
    String uri = args.Uri;
    if (!uri.StartsWith("https://"))
    {         args.Cancel = true;
    }
}In the constructor, EnsureHttps is registered as the event handler on the NavigationStarting event on the WebView2 control.
2. Select File > Save All to save the project.
3. Press F5 to build and run the project.
4. Attempt to open an HTTP site. Make sure the WebView2 control remains unchanged.
5. Attempt to open an HTTPS site. The WebView2 control allows you to open HTTPS sites.
Step 8 - Scripting
You can use host apps to inject JavaScript code into WebView2 controls at runtime. You can task WebView2 to run arbitrary JavaScript or add initialization scripts. The injected
JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed.
The injected JavaScript is run with specific timing:
Run it after the creation of the global object.
Run it before any other script included in the HTML document is run.
For example, add scripts that send an alert when a user navigates to non-HTTPS sites, as follows:
1. Modify the EnsureHttps function to inject a script into the web content that uses ExecuteScriptAsync method.
C#void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args)
{
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {
      webView.CoreWebView2.ExecuteScriptAsync($"alert('{uri} is not safe, try an https link')");       args.Cancel = true;
   }
}2. Select File > Save All to save the project.
3. Press F5 to build and run the project.
4. Make sure the app displays an alert when you navigate to a website that doesn't use HTTPS.

Step 9 - Communication between host and web content
The host and web content can communicate in the following ways using postMessage:
Web content in a WebView2 control can post a message to the host using window.chrome.webview.postMessage. The host handles the message using any
registered WebMessageReceived on the host.
Hosts post messages to web content in a WebView2 control using
CoreWebView2.PostWebMessageAsString or CoreWebView2.PostWebMessageAsJSON. The messages are caught by handlers added to
window.chrome.webview.addEventListener.
The communication mechanism passes messages from web content to the host using native capabilities.
In your project, when the WebView2 control navigates to a URL, it displays the URL in the address bar and alerts the user of the URL displayed in the WebView2 control.
1. In MainWindow.xaml.cs, update your constructor and create an InitializeAsync function to match the following code. The InitializeAsync function awaits EnsureCoreWebView2Async, because the initialization of CoreWebView2 is asynchronous.
C#
public MainWindow()
{
   InitializeComponent();
   webView.NavigationStarting += EnsureHttps;
   InitializeAsync();
}
async void InitializeAsync()
{    await webView.EnsureCoreWebView2Async(null); }
2. After CoreWebView2 is initialized, register an event handler to respond to WebMessageReceived. In MainWindow.xaml.cs, update InitializeAsync and add UpdateAddressBar using the following code:
C#async void InitializeAsync()
{    await webView.EnsureCoreWebView2Async(null);    webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
}
void UpdateAddressBar(object sender, 
CoreWebView2WebMessageReceivedEventArgs args) {
   String uri = args.TryGetWebMessageAsString();    addressBar.Text = uri;    webView.CoreWebView2.PostWebMessageAsString(uri);
}3. For the WebView2 control to send and respond to the web message, after CoreWebView2 is initialized, the host does the following:
a. Injects a script to the web content that registers a handler to print message from the host.
b. Injects a script to the web content that posts the URL to the host.
4. In MainWindow.xaml.cs, update InitializeAsync to match the following code:
C#async void InitializeAsync()
{    await webView.EnsureCoreWebView2Async(null);    webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;    await webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.c hrome.webview.postMessage(window.document.URL);");    await webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.c hrome.webview.addEventListener(\'message\', event => alert(event.data));");
}
5. Select File > Save All to save the project.
6. Press F5 to build and run the project.
7. When you open a new URI, the WebView2 control displays the URI in the address bar.
The sample app displays the URI in the address bar and the Microsoft website,

Congratulations, you built your first WebView2 app!
See also
WebView2 API Reference
WPF
developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features at developer.microsoft.com.
Local pages:
WPF sample app
Manage user data folders
WebView2 sample apps - a guide to the WebView2Samples repo. Development best practices for WebView2 apps
GitHub:
 WebView2Samples repo > WebView2WpfBrowser

Feedback
Was this page helpful?  Yes  No

WPF sample app
Article • 08/01/2024
This sample, WebView2WpfBrowser, is a WPF .NET app that demonstrates how to embed the WebView2 control and use WebView2 APIs to implement a web browser.
Sample name: WebView2WpfBrowser
Repo directory: WebView2WpfBrowser Solution file: WebView2WpfBrowser.sln
This sample is built as a WPF Visual Studio 2019 project. It uses C# and HTML/CSS/JavaScript in the WebView2 environment.
This sample showcases a selection of WebView2's event handlers and API methods that allow a WPF application to directly interact with a WebView and vice versa.

The WebView2WpfBrowser sample app has the following menus, containing many useful menuitems:
 File
View
Settings
Scenario
If this is your first time using WebView2, we recommend first following the Getting Started tutorial, which goes over how to create a WebView2 and walks through some basic WebView2 functionality. See Get started with WebView2 in WPF apps.
For more information about events and API Handlers in WebView2, see WebView2 API Reference.
Step 1 - Install Visual Studio 2019 with .NET support
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio 2019 (minimum required version) with .NET support is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section to install Visual Studio 2019 with .NET support, and then return to this page and continue the steps below.
Step 2 - Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 3 - Open the solution in Visual Studio
1. On your local drive, open the .sln file in Visual Studio, in the directory:
<your-reposdirectory>/WebView2Samples/SampleApps/WebView2WpfBrowser/WebView2WpfBrows
er.sln
or:
<your-repos-directory>/WebView2Samples-
main/SampleApps/WebView2WpfBrowser/WebView2WpfBrowser.sln
Step 4 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
The WebView2WpfBrowser project opens in Visual Studio:

Step 5 - Build and run the project
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WebView2WpfBrowser project, and then select Build.
This builds the project file WebView2WpfBrowser.csproj.
4. In Visual Studio, select Debug > Start Debugging (F5).
The sample app window opens:

5. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 6 - Update the WebView2 SDK
1. Update the prerelease WebView2 SDK on the project node (not the solution node) in Solution Explorer. Install the latest prerelease of the WebView2 SDK, so that you can try the latest features. In a separate window or tab, see Install or update the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
2. Build and run the project again.
Step 7 - Explore the menus and inspect the code
1. Explore the WebView2WpfBrowser sample app's menus, containing many useful menuitems:
File
View
Settings
Scenario
2. In the Visual Studio code editor, inspect the code:

See also
WebView2 API Reference
Get started with WebView2 in WPF apps

Feedback
Was this page helpful? 
WPF sample app with CDP extension
Article • 08/01/2024
This WebView2 sample demonstrates how to use the WebView2 CDP extension to use the Chrome DevTools Protocol (CDP) in a WPF app.
Sample name: WV2CDPExtensionWPFSample
Repo directory: WV2CDPExtensionWPFSample Solution file: WV2CDPExtensionWPFSample.sln
This sample, WV2CDPExtensionWPFSample, is built with the WebView2 CDP Extension (the Microsoft.Web.WebView2.DevToolsProtocolExtension NuGet package). This sample calls Chrome DevTools Protocol methods on a DevToolsProtocolHelper object in WebView2.
This sample is built as a WPF Visual Studio 2019 project. It uses C# in the WebView2 environment.

The DevTools Commands menu:

The DevTools Events menu:

If this is your first time using WebView2, we recommend first following the Get started with WebView2 in WPF apps tutorial. The tutorial walks you through creating a WebView2 and adding some basic WebView2 functionality.
Step 1 - Install Visual Studio with .NET support
Microsoft Visual Studio (with .NET support) is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) with .NET support is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
Step 2 - Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 3 - Open the solution in Visual Studio
1. On your local drive, open the .sln file in Visual Studio, in the directory:
<your-reposdirectory>/WebView2Samples/SampleApps/WV2CDPExtensionWPFSample/WV2CDPExte
nsionWPFSample.sln
or:
<your-repos-directory>/WebView2Samplesmain/SampleApps/WV2CDPExtensionWPFSample/WV2CDPExtensionWPFSample.sln
If you want to use Visual Studio 2017, in Visual Studio, change the project's Platform Toolset in Project Properties > Configuration properties > General > Platform Toolset.
To use Visual Studio 2017, you might also need to install a recent Windows SDK.
Step 4 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
The WV2CDPExtensionWPFSample project opens in Visual Studio:

Step 5 - Build and run the project with installed version of SDKs
A version of the WebView2 SDK and the WebView2 DevToolsProtocolExtension are included as NuGet packages in this project. In a later step, you'll update these by using Visual Studio's NuGet Package Manager.
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WV2CDPExtensionWPFSample project, and then select Build.
1. In Visual Studio, select Debug > Start Debugging (F5).
The sample app window opens:

2. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 6 - Update the WebView2 SDK
1. In Solution Explorer, right-click the project (not the solution node) and then select Manage NuGet Packages. NuGet Package Manager opens.
2. Click the Installed or Updates tab.
3. Select or clear the Include prerelease checkbox.

The above screenshot shows Visual Studio 2019, showing this sample in the context of the overarching WebView2APIsSample solution, rather than the present standalone solution. In this screenshot, the repo has a release version of the WebView2 SDK, and newer release and prerelease versions of the SDK are available.
4. If a newer release of the Microsoft.Web.WebView2 SDK is listed, click the Update button. A prerelease has a "-prerelease" suffix, such as 1.0.1248-prerelease.
Prerelease SDKs allow you to try the latest WebView2 features and APIs.
If you want to see details about this step, in a separate window or tab, see Install or update the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 7 - Update the WebView2 CDP Extension
A prerequisite for this sample is the latest release version of the WebView2 CDP Extension (Microsoft.Web.WebView2.DevToolsProtocolExtension), which is included in this project. That package adds support for the Chrome DevTools Protocol (CDP) API.
1. In Solution Explorer, right-click the project and then select Manage NuGet Packages. NuGet Package Manager opens.
2. Click the Installed or Updates tab.
3. Clear the Include prerelease checkbox.

4. If a newer release version of the
Microsoft.Web.WebView2.DevToolsProtocolExtension SDK is listed, click the Update button.
See also:
 Use the Chrome DevTools Protocol (CDP) in WebView2 apps
Step 8 - Build and run the project with updated packages
1. In Visual Studio, select Debug > Start Debugging (F5).
The sample app window opens:

2. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 9 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

The DevTools Commands menu:

The DevTools Events menu:

See also
Get started with WebView2 in WinUI 2 (UWP) apps
Microsoft.Web.WebView2.DevToolsProtocolExtension
Feedback
Was this page helpful? 

WebView2 in WinForms apps
Article • 02/04/2025 Articles:
Win32 sample app
Win32 sample app with Visual Composition
Win32 sample WebView2Browser
Get started with WebView2 in Win32 apps

Feedback
Was this page helpful?  Yes  No

Get started with WebView2 in WinForms apps
Article • 03/28/2023
This tutorial helps you:
Set up your development tools.
Use the C# Windows Forms App (.NET Framework) Visual Studio project template to create a WinForms project.
Install the Microsoft.Web.WebView2 SDK package for the WinForms project.
Learn about WebView2 concepts along the way.
Step 1 - Optionally clone or download the WebView2Samples repo
Do either of the following:
 Create a new project in Visual Studio starting from a project template, using the steps in the sections below. This will give you the latest code and project structure.
 Clone or download the WebView2Samples repo, open the completed project in
Visual Studio, and follow the steps in this article to understand creating the
WinForms project and understand the added WebView2 code. See Download the WebView2Samples repo in Set up your Dev environment for WebView2. A completed version of this tutorial project is available in the WebView2Samples repo directory WinForms_GettingStarted.
Sample name: Win32_GettingStarted
Repo directory: Win32_GettingStarted
Solution file: WebView2GettingStarted.sln
The sample in the repo might not be as up-to-date as a project that you create by using the latest Visual Studio project templates.
Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this tutorial.
1. If Visual Studio isn't installed already, open the page Microsoft Visual Studio in a new window or tab, and install Visual Studio 2017 or later, such as Visual Studio 2022 Professional.
Then return here and continue below.
Step 3 - Create a single-window app
Start with a basic desktop project that contains a single main window.
1. Open Visual Studio.
2. Select File > New > Project.
The Visual Studio Open recent window appears:

3. On the right, click the Create a new project card. The Visual Studio Create a new project window opens.
4. In the Search text box, paste or start typing the following:
C# Windows Forms App (.NET Framework)Search results appear, listing project types.
5. Select the C# Windows Forms App (.NET Framework) card. Make sure the name matches, with a C# icon and then the name Windows Forms App (.NET Framework). Then click the Next button:

6. In the Project name text box, enter a project name. This tutorial article uses the name WinForms_GettingStarted, like the repo's directory name for the completed project.
7. In the Location text box, enter a path, such as
"C:\Users\username\Documents\MyWebView2Projects".
8. In the Framework dropdown list, select .NET Framework 4.7.2 or later, such as .NET Framework 4.8:

9. Click the Create button.
The Visual Studio window opens, showing the baseline WinForms project in the Solution Explorer, and showing a Form Designer window:

10. Select File > Save All (Ctrl+Shift+S).
11. Select Debug > Start Debugging (F5).
An empty Form1 window opens, from the fresh WinForms project:

12. Close the Form1 window.
You now have an empty WinForms project that runs. Next, set up the project to add WebView2 content.
Step 4 - Install the WebView2 SDK
For every WebView2 project, you use the NuGet package manager within Visual Studio to add the WebView2 SDK to the project. You install the Microsoft.Web.WebView2 SDK NuGet package for use by the current project.
Use NuGet to add the WebView2 SDK to the project, as follows:
1. In Solution Explorer, right-click the project name (not the solution name above it), and then select Manage NuGet Packages:

The NuGet Package Manager opens in Visual Studio.
2. Click the Browse tab in the upper left.
3. Clear the Include prerelease checkbox.
4. In the search bar, type WebView2, and then below the search bar, click Microsoft.Web.WebView2 to select it:

To zoom, right-click > Open image in new tab.
5. Click the Install (or Update) button. The Preview Changes dialog opens:

6. Click the OK button.
7. Select File > Save All (Ctrl+Shift+S) to save the project.
8. Close the NuGet Package Manager window.
9. Select Debug > Start Debugging (F5) to build and run the project.
The running project displays the same empty window as before:

10. Close the Form1 window.
You've added the WebView2 SDK to the project, but haven't added any WebView2 code to the project yet.
Step 5 - Create a single WebView2 control
Now that the WebView2 SDK is installed for the WinForms project, add a WebView2 control to the app, as follows:
The starter project has a Form1.cs form already, but we'll add another, as Form2.cs, to see how to do that.
1. Select Project > Add Form (Windows Forms).
2. In the Add New Item window, on the left, select Visual C# Items > Windows Forms.
3. On the right, select Form (Windows Forms), and then click the Add button:
The project now has an additional form, with file name Form2.cs, shown in the Form Designer and in Solution Explorer:

4. Click the Form1 canvas. We won't use Form2.
5. Select View > Toolbox.
Here's where you add WebView2-specific content to the app:
6. In the Toolbox, click WebView2 Windows Forms Control to expand the options.
In Visual Studio 2017, by default, WebView2 isn't displayed in the Toolbox. To enable WebView2 to be displayed in the Toolbox, select Tools > Options > General > and set the Automatically Populate Toolbox setting to True.
7. In the Toolbox, click or drag the WebView2 control onto the Forms Designer canvas of the control you added, such as Form2.cs:

8. Drag the sides of the WebView2 control to make it fill almost all of the canvas.
9. Make sure the new WebView2 control on the form is selected. In the Properties panel, in the Design section, set the (Name) property to webView (lowercase 'w', capital 'V', no numeric suffix). The control might initially be named something else, such as webView21. Use the Categorized and Alphabetical sort option buttons as needed to find properties:

10. In the Properties panel, in the Misc section, set the Source property to https://www.microsoft.com. The Source property sets the initial URL that will be
displayed in the WebView2 control.
11. Select File > Save All (Ctrl+Shift+S) to save the project.
12. Press F5 to build and run the project.
The WebView2 control displays content from https://www.microsoft.com, in a WebView2 control in the Windows Forms form, with a Skip to main content link if you pressed Alt+Tab to switch to the window:

13. If needed, click the Skip to main content link.
The WebView2 control displays content from https://www.microsoft.com, in a WebView2 control in the Windows Forms form:

14. Close the Form1 window.
If you're working on a high-resolution monitor, you may need to configure your Windows Forms app for high DPI support.
Step 6 - Add controls and process window resize events
Add more controls to your Windows Forms form from the toolbox, and then process window resize events, as follows.
1. Select View > Toolbox, or click the Toolbox tab on the left.
2. In the Toolbox, click Common Controls.
Add a text box control, as follows:
3. Drag the TextBox control onto the Form1.cs Form Designer canvas.
4. Make sure the TextBox control has focus.
5. In the Properties panel, in the Design section, change the (Name) (probably from textBox1) to addressBar.
Add a button control, as follows:
6. Drag a Button control onto the Form1.cs Form Designer canvas.
7. Make sure the button control has focus.
1. In the Properties panel, in the bolded Appearance section (about 15 properties down), change the Text property (probably from button1) to Go!
Align the text box and the existing button, as follows:
2. Position the text box on the left side of the form, vertically aligned with the button, as shown below:


Define Form_Resize to keep the controls in place when the app window is resized, as follows.
5. Delete the following code:
C#   public Form1()
{
   InitializeComponent();
}6. Paste this code in the same location:
C#public Form1()
{
   InitializeComponent();    this.Resize += new System.EventHandler(this.Form_Resize);
}
private void Form_Resize(object sender, EventArgs e)
{
   webView.Size = this.ClientSize - new System.Drawing.Size(webView.Location);    goButton.Left = this.ClientSize.Width - goButton.Width;    addressBar.Width = goButton.Left - addressBar.Left; }
7. Select File > Save All (Ctrl+Shift+S) to save the project.
8. Press F5 to build and run the project.
A Form1 window appears, displaying webpage content from

If you press Alt+Tab to switch to the Form1 window, you may need to click the Skip to main content link that's added.
9. Scroll the window up and down with the mouse wheel. The input controls remain in place.
10. Drag the corner of the window to resize it. The text box changes width.
11. Close the Form1 window.
Step 7 - Navigation
Enable users to change the URL that the WebView2 control displays, by reading the text entered in the text box, to serve as an address bar.
1. Select View > Code so that Form1.cs is open in the code editor.
2. In Form1.cs, add the CoreWebView2 namespace by inserting the following code at the top of the file as line 1:
C#
using Microsoft.Web.WebView2.Core;
3. Select the Form1.cs [Design] tab, then double-click the Go! button. The goButton_Click method is added in the Form1.cs file.
4. Paste the following code into the file to replace the empty goButton_Click method, so that the method body is as follows:
C#private void goButton_Click(object sender, EventArgs e)
{    if (webView != null && webView.CoreWebView2 != null)
   {       webView.CoreWebView2.Navigate(addressBar.Text);
   }
}Now the goButton_Click function will navigate the WebView2 control to the URL that's entered in the address bar text box.
5. Select File > Save All (Ctrl+Shift+S) to save the project.
6. Press F5 to build and run the project.
7. In the address bar, enter a URL that starts with https, such as https://www.bing.com, and then click the Go! button:
The WebView2 control shows the webpage content for the URL.
8. In the address bar, enter a string that doesn't start with http, such as www.bing.com, and then click the Go! button.
9. Select Debug > Stop Debugging, or click Continue. The Form1 window closes.
Step 8 - Navigation events
During webpage navigation, the WebView2 control raises events. The app that hosts WebView2 controls listens for the following events:
NavigationStarting
SourceChanged
ContentLoading
HistoryChanged
NavigationCompleted
For more information, see Navigation events for WebView2 apps.

When an error occurs, the following events are raised and may depend on navigation to an error webpage:

To demonstrate how to use the events, start by registering a handler for NavigationStarting that cancels any requests not using HTTPS.
C#public Form1()
{
   InitializeComponent();    this.Resize += new System.EventHandler(this.Form_Resize);
   webView.NavigationStarting += EnsureHttps;
}
void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args)
{
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {       args.Cancel = true;
   }
}In the constructor, EnsureHttps is registered as the event handler on the NavigationStarting event on the WebView2 control.
2. Select File > Save All (Ctrl+Shift+S) to save the project.
3. Press F5 to build and run the project.
4. In the address bar, enter a URL that starts with https, such as https://www.bing.com, and then click the Go! button.
The https URL loads; the web content changes from the default, Microsoft.com, to Bing.com.
5. In the address bar, enter a URL that starts with http, such as http://www.microsoft.com, and then click the Go! button.
The http URL doesn't load; the Bing.com webpage remains displayed. In contrast, entering http://www.microsoft.com into Microsoft Edge works; it redirects to the https site for Microsoft.com.
6. In the address bar, enter a URL that starts with https, such as https://www.microsoft.com, and then click the Go! button.
The https URL loads; the Microsoft.com webpage now appears, since you added the 's' after 'http'.
Step 9 - Scripting
You can use host apps to inject JavaScript code into WebView2 controls at runtime. You can task WebView2 to run arbitrary JavaScript or add initialization scripts. The injected
JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed. The injected JavaScript runs with specific timing. Run the injected JavaScript after the creation of the global object.
Run the injected JavaScript before any other script included in the HTML document is run.
For example, add a script that sends an alert when a user navigates to a non-HTTPS site, as follows:
1. Modify the EnsureHttps function to add the following line that contains ExecuteScriptAsync:
C#void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args)
{
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {
      webView.CoreWebView2.ExecuteScriptAsync($"alert('{uri} is not safe, try an https link')");       args.Cancel = true;
   }
}The added line injects a script into the web content that uses the ExecuteScriptAsync method. The added script is:
JavaScriptalert('{uri} is not safe, try an https link')2. Select File > Save All (Ctrl+Shift+S) to save the project.
3. Press F5 to build and run the project.
4. Try to go to http://www.bing.com (with http instead of https prefix).
The app displays an alert:

Step 10 - Communication between host and web content
The host and web content can use postMessage to communicate with each other as follows:
 Web content in a WebView2 control can use window.chrome.webview.postMessage to post a message to the host. The host handles the message using any registered WebMessageReceived on the host.
Hosts post messages to web content in a WebView2 control using
CoreWebView2.PostWebMessageAsString or CoreWebView2.PostWebMessageAsJSON.
These messages are caught by handlers added to window.chrome.webview.addEventListener.
The communication mechanism passes messages from web content to the host using native capabilities.
In your project, when the WebView2 control navigates to a URL, it displays the URL in the address bar and alerts the user of the URL displayed in the WebView2 control.
1. In Form1.cs, update the Form1() constructor and create an InitializeAsync() function below it, matching the following code:
C#public Form1()
{
   InitializeComponent();    this.Resize += new System.EventHandler(this.Form_Resize);   webView.NavigationStarting += EnsureHttps;
   InitializeAsync();
}
async void InitializeAsync()
{    await webView.EnsureCoreWebView2Async(null); }
The InitializeAsync function awaits EnsureCoreWebView2Async, because the initialization of CoreWebView2 is asynchronous.
Next, register an event handler to respond to WebMessageReceived. This event handler will be registered after CoreWebView2 is initialized.
2. In Form1.cs, update InitializeAsync, and add UpdateAddressBar below it, as follows:
C#async void InitializeAsync()
{    await webView.EnsureCoreWebView2Async(null);    webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
}
void UpdateAddressBar(object sender, 
CoreWebView2WebMessageReceivedEventArgs args)
{
   String uri = args.TryGetWebMessageAsString();    addressBar.Text = uri;    webView.CoreWebView2.PostWebMessageAsString(uri);
}Next, for WebView2 to send and respond to the web message, after CoreWebView2 is initialized, the host will inject a script in the web content to:
Send the URL to the host using postMessage.
Register an event handler to display a message sent from the host, in an alert box, before displaying webpage content.
3. In Form1.cs, update InitializeAsync to match the following code:
C#async void InitializeAsync()
{   await webView.EnsureCoreWebView2Async(null);    webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
   await 
webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.c hrome.webview.postMessage(window.document.URL);");    await webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.c hrome.webview.addEventListener(\'message\', event => alert(event.data));");
}
4. Select File > Save All (Ctrl+Shift+S) to save changes.
5. Press F5 to build and run the project.

An alert initially appears, showing the resulting URL that's sent from the host website.
7. Click the OK button.
The WebView2 control now displays the new URL in the address bar, and webpage content from the URL is displayed in the WebView2 control in the WinForms window:
When the app starts, the default URL is https://www.microsoft.com, and the resulting displayed address shows the locale, such as
https://www.microsoft.com/en-us/.
If you enter https://www.bing.com, the resulting address is a variant, such as https://www4.bing.com/?form=DCDN.
Congratulations, you built your first WebView2 app!
Distributing a WebView2 app
If you were to distribute the app that results from this tutorial, you would need to distribute the WebView2 Runtime along with your app. The WebView2 Runtime would then be automatically installed onto user machines. For more information, see Distribute your app and the WebView2 Runtime.
See also
Distribute your app and the WebView2 Runtime
WinForms sample app - Demonstrates more WebView2 APIs than the present tutorial.
WebView2 API Reference
Core
WPF
Windows Forms

WinForms sample app
Article • 08/01/2024
This sample, WebView2WindowsFormsBrowser, demonstrates how to use the
WebView2 control and WebView2 APIs to implement a web browser in a WinForms app.

Drop.
The View menu has Zoom and Background Color submenus.
The Events button opens the EventMonitor window.
Step 1 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
Step 2 - Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 3 - Open .sln in Visual Studio
1. On your local drive, open the .sln file in Visual Studio, in the directory:
<your-reposdirectory>/WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/WebView 2WindowsFormsBrowser.sln
or:
<your-repos-directory>/WebView2Samplesmain/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.s ln
Step 4 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 5 - Build and run the project
The WebView2WindowsFormsBrowser project is now open in Visual Studio, from doing the above steps. At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WebView2WindowsFormsBrowser project, and then select Build.
This builds the project file
SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.vcxproj.
This might take a couple minutes.
If you get error messages about missing .NET Framework 4.6.2 Developer Pack, follow the steps below. Otherwise, skip to the next major section below.
4. In Visual Studio, select Debug > Start Debugging (F5).
The sample app window opens:

6. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 6 - Install .NET Framework 4.6.2 Developer
Pack
If you build the WebView2WindowsFormsBrowser project and get error messages about missing .NET Framework 4.6.2 Developer Pack, follow the steps below. Otherwise, skip to the next major section below.
1. Go to Download .NET Framework, select v4.6.2, and then click the Download .NET Framework 4.6.2 Developer Pack button:

2. In Microsoft Edge, select Settings and more > Downloads > Show in folder icon:

The Microsoft .NET Framework Developer Pack license agreement dialog appears:

4. Select the I agree to the license terms and conditions checkbox, and then click the Install button.
A User Account Control window appears, asking "Do you want to allow this app to make changes to your device?"
5. Click the Yes button.
The Microsoft .NET Framework Developer Pack Setup Successful dialog appears:

6. Click the Close button.
Microsoft .NET Framework 4.6.2 Developer Pack is now installed on your machine.
Step 7 - Update or install the WebView2 SDK
1. WebView2 SDK - Update or install the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install or update the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.

Step 8 - Build and run the updated project
1. If you just now installed .NET Framework 4.6.2 Developer Pack above, close Visual Studio, and then open the solution file in Visual Studio again, from the directory:
<your-reposdirectory>/WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/WebView 2WindowsFormsBrowser.sln
or:
<your-repos-directory>/WebView2Samplesmain/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.s ln
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WebView2WindowsFormsBrowser project, and then select Build.
This builds the project file
SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.vcxproj.
4. In Visual Studio, select Debug > Start Debugging (F5).
The sample app window opens:

External Drop.
The View menu has Zoom and Background Color submenus.
The Events button opens the EventMonitor window.
5. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
Step 9 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

See also
WebView2 API Reference
Get started with WebView2 in WinForms apps

Feedback
Was this page helpful? 
WebView2 in HoloLens 2 Unity apps
Article • 02/04/2025
This article is for developers using WebView2 in immersive HoloLens 2 Unity applications.

WebView2 on HoloLens 2 and the WebView plugin for Unity are both in Preview and are subject to change before general availability.
WebView2 only works on HoloLens 2 devices running the Windows 11 update. For more information, see Update HoloLens 2.
For WebView2-enabled 2D applications on HoloLens 2, see Get started with WebView2 in WinUI 2 (UWP) apps.
Limitations and known issues
When developing a HoloLens 2 Unity app with WebView2, be aware of some limitations and known issues:
 Pop-ups: Pop-ups don't work well within WebView2 inside Unity apps on HoloLens 2, but they work fine in 2D XAML apps on the device. Avoid pop-ups and use alternative techniques or UI designs, such as custom pop-up-like elements within the WebView using HTML, CSS, and JavaScript.
 New windows: WebView2 instances on HoloLens 2 navigate within the same window by default, unlike on Desktop. Follow this default behavior for a better user experience. Additionally, the DevTools window cannot be launched.
 Enterprise authentication: Automatic Single Sign-On (SSO) leveraging OS-level tokens is currently not supported in WebView2 on HoloLens 2. Users can still sign in by providing credentials, except for cases requiring device-level authentication.
Cookie storage works as expected.
 User interactions: Unlike native HoloLens 2 slates, WebView2 is best interacted with by using far-interaction hand rays. Touch-to-swipe and scroll interactions might not be supported.
 Performance: Complex websites with heavy use of JavaScript or advanced rendering may impact system performance or the host application's framerate. For general performance-related limitations and recommendations, see Understanding performance for mixed reality in the mixed reality documentation. Also see Performance optimization, below.
Performance optimization
Optimizing the performance of WebView2 in your HoloLens 2 Unity app is crucial for a smooth user experience. Here are some recommendations:
 Limit the number of WebView2 instances: We suggest using only one instance of WebView2 within a Unity app. Reuse the same instance or tear down and create a new one as needed. Keep in mind that removing the WebView prefab from the scene might not destroy the underlying WebView2 instance. You must call the Destroy() method on the game object to destroy it properly.
Apply general Unity optimization techniques: To optimize WebView2 performance, use the standard Unity optimization approaches, such as occlusion culling or limiting the update rate. For more information, see Performance recommendations for Unity in the mixed reality documentation.
 Profile and monitor WebView2 performance: There are several ways to profile the performance of a HoloLens 2 Unity application:
 Unity Profiler: A built-in tool in Unity that allows you to measure and optimize the performance of your application on various platforms, including HoloLens 2.
 Visual Profiler: A feature of the Mixed Reality Toolkit that provides an inapplication view of your application's performance.
 PIX: A performance tuning and debugging tool for Windows that can also be used to profile Unity applications on HoloLens 2.
Navigation
Some navigation methods are demonstrated in Step 7 - Extending WebView2 functionality in Get started with WebView2 in HoloLens 2 Unity apps (Preview). The present section expands on that demonstration.
See also:
WebView2 API Reference
API Reference for Mixed Reality WebView plugin - for HoloLens 2 in the WebView2 Unity plugin.
IWebView interface
The IWebView interface exposes a few methods, events, and properties related to page navigation. The main functionality exposed here is the ability to navigate to a given URL, by using Load(Uri url):
C#public interface IWebView
{
    // Non-navigation methods are removed for clarity.     event WebView_OnNavigated Navigated;     Uri Page { get; }     void Load(Uri url);
    void Reload(bool ignoreCache);
}IWithBrowserHistory interface
The IWithBrowserHistory interface exposes a few methods and events related to page navigation. This mainly allows developers to navigate forward and backward, as you would expect with a typical web-browsing experience:
C#public interface IWithBrowserHistory : IWebView
{
    // Non-navigation methods are removed for clarity.     event WebView_OnCanGoForwardUpdated CanGoForwardUpdated;     event WebView_OnCanGoBackUpdated CanGoBackUpdated;     void GoBack();    void GoForward();
}
SetVirtualHostNameToFolderMapping and SetVirtualHostMapping
The CoreWebView2.SetVirtualHostNameToFolderMapping Method enables mapping between a virtual host name and a folder path, making it accessible to websites using that host name. This method maps a local domain name to a local folder, so that the WebView2 control loads content from the specified local folder when attempting to access a resource for that domain.
The WebView plugin for Unity exposes this functionality through the IWithVirtualHost interface, which has a single method, SetVirtualHostMapping(string hostName, string folderPath):
C#public interface IWithVirtualHost : IWebView
{     void SetVirtualHostMapping(string hostName, string folderPath); }To use the SetVirtualHostMapping method, set hostName to any valid URL conforming string, such as webview2.sample. folderPath can be an absolute path or a path relative to the application's working directory, such as Assets\Html.
Assuming we have an HTML file called demo.html under Assets\Html, the following code snippet demonstrates loading demo.html by using the WebView plugin for Unity:
C#using Microsoft.MixedReality.WebView;
public class WebViewExample : MonoBehaviour
{     private void Start()
    {         var webViewComponent = gameObject.GetComponent<WebView>();
        webViewComponent.GetWebViewWhenReady((IWebView webView) =>         {
            
((IWithVirtualHost)webView).SetVirtualHostMapping("webview2.sample", 
"Assets\\Html");
            // Navigate to our local content.            webViewComponent.Load(new 
Uri("http://webview2.sample/demo.html"));
        });
    }
}
Input
There are various ways to handle input in Unity for mixed reality applications.
 Input overview - MRTK2 - recommended for Mixed Reality Toolkit 2.8 applications.
Input - MRTK3 - recommended for Mixed Reality Toolkit 3 applications. Unity Input System
Regardless of the input system used within your Unity application, interop code between the various application input events and the WebView plugin for Unity is required. This means translating those events (such as Pointer events) into a WebViewMouseEventData object and then forwarding those events to the plugin via the IWithMouseEvent interface:
C#public interface IWithMouseEvents : IWithInputEvents
{     void MouseEvent(WebViewMouseEventData mouseEvent); }WebView2 is unaware of Unity's input system and likely has a different coordinate system than your Unity scene. As a result, when there is a pointer-down event, its coordinates must be translated into the coordinate system of the WebView2 control.
Additionally, the pointer-down event needs to be converted into an appropriate WebViewMouseEventData event type.
Simple example:
C#using Microsoft.MixedReality.WebView;
public class WebViewExample : MonoBehaviour, IPointerDownHandler {
    // WebView setup steps skipped for brevity     public void OnPointerDown(PointerEventData eventData)    {
        IWithMouseEvents mouseEventsWebView = webView as IWithMouseEvents;
        // Call hypothetical function which converts the event's x, y into the WebView2's coordinate space.
        var hitCoord = ConvertToWebViewSpace(eventData.position.x, eventData.position.y);
        WebViewMouseEventData mouseEvent = new WebViewMouseEventData         {
X = hitCoord.x,
Y = hitCoord.y,
            Type = WebViewMouseEventData.EventType.MouseDown,
            Button = WebViewMouseEventData.MouseButton.ButtonLeft,
            TertiaryAxisDeviceType = 
WebViewMouseEventData.TertiaryAxisDevice.PointingDevice
        };
        // Propagate the event to the WebView plugin.         mouseEventsWebView.MouseEvent(mouseEvent);
    }
}In the above example, pointer-down events are converted into WebViewMouseEventData objects and forwarded to the WebView plugin for Unity. It is essentially converted into a mouse-down event. In order to create mouse click events, pointer-up events would need to be handled in a similar fashion.
In the example above, ConvertToWebViewSpace is intentionally not implemented.
See also
 Get started with WebView2 in WinUI 2 (UWP) apps
API Reference:
WebView2 API Reference
CoreWebView2.SetVirtualHostNameToFolderMapping Method
Hololens docs:
 Update HoloLens 2
Mixed Reality docs:
Understanding performance for mixed reality
Performance recommendations for Unity
API Reference for Mixed Reality WebView plugin
  Input overview - MRTK2 Input - MRTK3 Unity docs:

Feedback
Was this page helpful?  Yes  No

Get started with WebView2 in HoloLens 2 Unity apps (Preview)
Article • 02/04/2025
This tutorial is for developers using WebView2 in immersive HoloLens 2 Unity applications.
This article is to learn to write your own WebView2 code. If you want to run a sample first, see Win32 sample app or another sample app article.

WebView2 on HoloLens 2 and the WebView plugin for Unity are both in Preview and are subject to change before general availability.
WebView2 only works on HoloLens 2 devices running the Windows 11 update. For more information, see Update HoloLens 2.
For WebView2-enabled 2D applications on HoloLens 2, see Get started with WebView2 in WinUI 2 (UWP) apps.
In this tutorial, you:
 Set up your development tools for creating HoloLens 2 Unity apps that use WebView2 to display web content.
Install the Mixed Reality Toolkit, by using the Mixed Reality Feature Tool.
Create an initial Unity project for HoloLens 2 development.
Add the Microsoft Mixed Reality WebView plugin for Unity, by using the Mixed Reality Feature Tool.
 Configure a WebView prefab that displays webpage content in your HoloLens 2 app.
 Learn about WebView2 concepts and interactions in Unity.
Completed project
A completed version of this Getting Started project is available in the
WebView2Samples repo. You can use the completed project (from the repo or from following the steps below) as a baseline to add more WebView2 functionality and other features to your HoloLens 2 Unity app.
A completed version of this tutorial project is available in the WebView2Samples repo:
Sample name: HoloLens2_GettingStarted
Repo directory: HoloLens2_GettingStarted
Unity project folder: HoloLens2GetStartedApp
Follow the major Step sections in sequence, below.
About HoloLens 2, Unity, Mixed Reality Feature Tool, Mixed Reality
Toolkit, and the WebView plugin
By combining HoloLens 2, Unity, the Mixed Reality Toolkit, and the WebView plugin for Unity, you can create immersive mixed-reality experiences that seamlessly integrate web content.
HoloLens 2
HoloLens 2 is a groundbreaking, untethered holographic device, offering a hands-free and immersive mixed reality experience. HoloLens 2 seamlessly overlays digital information onto the real world, rendering high-definition holograms that stay in place and respond naturally to interaction.
You can use the Unity game engine and Visual Studio to create your HoloLens 2 project.
Unity
Unity, a versatile game engine, is a popular choice for creating 3D applications, including mixed reality experiences for HoloLens 2 devices, due to its extensive features and robust capabilities for augmented reality (AR), virtual reality (VR), and mixed reality (MR).
Mixed Reality Feature Tool (MRFT)
The Mixed Reality Feature Tool (MRFT) is a new way for developers to discover, update, and add mixed reality feature packages into Unity projects. You can search packages by name or category, see their dependencies, and even view proposed changes to your projects manifest file before importing. A manifest file is a JSON file defining all of your project's packages. Once you've validated the packages to be included, the Mixed Reality Feature tool will automatically download them into your selected Unity project.
This guide will use the MRFT to install the Mixed Reality Toolkit and the Microsoft Mixed Reality WebView plugin for Unity.
Mixed Reality Toolkit (MRTK)
The Mixed Reality Toolkit (MRTK) is a Microsoft-driven open-source project that accelerates the development of mixed reality applications in Unity by providing essential components and features for developing mixed reality experiences. The MRTK provides a collection of scripts, components, and prefabs specifically designed to help you create performant and intuitive mixed reality experiences on HoloLens 2 devices.
The Microsoft Mixed Reality WebView plugin for Unity
The Microsoft Mixed Reality WebView plugin for Unity enables the integration of WebView2 functionality into your HoloLens 2 app. This WebView plugin for Unity simplifies the integration of WebView2 functionality into your HoloLens 2 app by wrapping the WebView2 control, automatically handling rendering, and automatically directing input to the WebView2 control.
This plugin also manages interop between Unity and WebView2, enabling communication between JavaScript and Unity via messages and events.
In Unity, the Microsoft Mixed Reality WebView plugin for Unity can be installed by using the Mixed Reality Feature Tool.
Step 1 - Install Visual Studio
This tutorial assumes you have Unity 2021.3 LTS or later and Visual Studio 2019 version 16.9 or later installed. Visual Studio 2017 isn't supported. In this step we will start by setting up your Visual Studio environment for HoloLens 2 development, follow the Mixed Reality tools installation guide. That article guides you through installing and configuring the necessary tools, including Visual Studio and the Universal Windows Platform development workload.
Also set up your development environment for WebView2, by following the steps in Set up your Dev environment for WebView2.
Once you have completed the setup, return to this page and continue with the next steps to get Unity installed.
Step 2 - Install Unity for HoloLens 2 development
Before you can start developing a HoloLens 2 app with WebView2, you will need to install Unity. Follow the steps in Choosing a Unity version and XR plugin to complete installation of the toolset that's needed to build mixed reality applications.
Step 3 - Configure the Unity project for Mixed Reality development
Once you have your tools installed, you're ready to create and configure your project. The easiest way to get started with HoloLens 2 development is to use the Mixed Reality Toolkit in your project.
The Mixed Reality Feature Tool simplifies the process of discovering, installing, and managing mixed reality features, including the Mixed Reality Toolkit, and packages for your Unity project. For more guidance on installing the Mixed Reality Feature Tool, see Welcome to the Mixed Reality Feature Tool.
1. First, Download the Mixed Reality Feature Tool from the Microsoft Download Center.
2. Run the downloaded Mixed Reality Feature Tool executable, and follow the prompts to install the Mixed Reality Toolkit and any additional required packages for HoloLens 2 development.
The Mixed Reality Feature Tool allows you to select and install the appropriate versions of the Mixed Reality Toolkit, along with other mixed reality features, directly into your Unity project.
After you've used the Mixed Reality Feature Tool to install the Mixed Reality Toolkit, the toolkit's assets and prefabs will appear in your Unity project. The Mixed Reality Toolkit will guide you through configuring the Open XR plugin for your project.
For a detailed step-by-step walkthrough of configuring the Unity project, see Set up a new OpenXR project with MRTK.
Step 4 - Install the WebView plugin for Unity by using the Mixed Reality Feature Tool
In this step, as above, you'll use the Mixed Reality Feature Tool to install the Microsoft
Mixed Reality WebView plugin for Unity. This will install the specific version of the WebView2 NuGet package that's compatible with HoloLens 2.
1. Launch the Mixed Reality Feature Tool (which you installed above). The Start page of the Mixed Reality Feature Tool for Unity opens, containing options to configure settings and to view documentation:

2. Click the gear button. The Settings pane opens.
3. Click the Feature tab, and then make sure the Show preview releases checkbox is selected:

4. Click the Ok button to return to the starting page.
5. Click the Start button to begin discovering feature packages.
6. Point the Mixed Reality Feature Tool to your Unity project. To do this, click the
Browse for the project folder (...) button to the right of the Project Path field:

7. In the file selection dialog, select your Unity project folder, and then click the Open button.
8. In the Select project dialog, click the Discover Features button.
9. In the Discover Features page, expand the Other features section, and then select the Microsoft Mixed Reality WebView checkbox:

This marks the WebView plugin for Unity for installation. In the Version dropdown list, by default, the latest version of the plugin is selected.
10. Click the Get Features button. This downloads the required packages.
11. Once the packages are downloaded, click the Import button:

12. On the Review and Approve page, inspect the modifications that will be made to your project manifest.json file, and inspect the list of files (such as .tgz packages) that will be copied into your project:

13. Click the Approve button to finalize the changes.
14. In your Unity project, in your project's Assets folder, inspect the WebView prefab.
The Microsoft Mixed Reality WebView plugin for Unity is now installed and imported.
Continue with the next Step below.
For more information, see Welcome to the Mixed Reality Feature Tool.
Step 5 - Set up the WebView prefab in Unity scene
Now that the WebView plugin for Unity is installed and imported, set up the WebView prefab in your Unity scene, as follows:
1. In the Unity Editor, navigate to the Project window, and then find the WebView prefab by going to Packages > Microsoft Mixed Reality WebView (Preview) > Runtime > Prefab.
2. Drag the WebView prefab into your scene.
3. With the WebView prefab selected in the Hierarchy window, move it to a suitable starting location within the scene (such as under the MixedRealitySceneContent node), making sure it's in view of the default camera.
4. In the Inspector window, you can change the initial URL that's loaded by the WebView prefab. To do this, locate the Current URL text box, and then enter the desired URL. By default, the prefab loads https://www.microsoft.com:
Step 6 - Test the project
Now that you've added the WebView plugin to the scene, it's a good time to test your project.
1. To test the project directly in the Unity editor, click the Play button:

2. To test the project on the actual device, follow the steps in Build and deploy to the HoloLens.
Then continue with the next steps below.
Step 7 - Extending WebView2 functionality
Now that you've reviewed the WebView code, let's extend the functionality of the sample.
In the rest of this step, we'll add some basic functionality so that the user will have a Back button, a Go button, and a text field to navigate to a custom URL.
Add the input field and buttons
1. Modify the scene hierarchy as follows:
a. Under MixedRealitySceneContent, add a new input component (right-click > UI > Input Field - TextMeshPro). This automatically adds a parent Canvas for the component.

2. Update the Canvas properties by selecting the Canvas in the Hierarchy pane, then making the following changes in the Inspector pane:
a. Change Width and Height to 600, 400 respectively.
b. Change Scale for X, Y, and Z to 0.001, 0.001, 0.001:

3. Update the input field's properties by selecting it in the Hierarchy pane, then making the following changes in the Inspector pane:
a. Change Name to "AddressField (TMP)"
b. Change Pos X, Pos Y, Pos Z to -2, 178, -5, respectively.
c. Change Width and Height to 390, 30 respectively:

4. Update the first button's properties by selecting it in the Hierarchy pane, then making the following changes in the Inspector pane:
a. Change Name to "Back Button"
b. Change Pos X, Pos Y, Pos Z to -248, 178, -5, respectively.
c. Change Width and Height to 75, 30 respectively:

5. Update the second button's properties by selecting it in the Hierarchy pane, then making the following changes in the Inspector pane:
a. Change Name to "Go Button"
b. Change Pos X, Pos Y, Pos Z to 242, 178, -5, respectively.
c. Change Width and Height to 75, 30 respectively:

6. Update the WebView's properties by selecting it in the Hierarchy pane, then making the following changes in the Inspector pane:
a. Change Position > X, Y, Z to 0, -16, -5, respectively.
b. Change Scale > X, Y, Z to 570, 340, 1 respectively:

7. Add a background image to the Canvas:
a. Select the Canvas in the Hierarchy pane.
b. Click the Add Component button at the bottom of the Inspector pane.
c. Type Image and then select the top result in the list.
d. Click the Color well for the image and then choose a background color. In our example, we chose a gray color. (This is simply to show some contrast between the different controls in the canvas.)

8. In the Hierarchy pane, under Back Button, select Text (TMP). Then in the Inspector pane, change the Text Input to Back:

9. Repeat the above process for the Go Button, substituting Go as the text.
You should now have a scene which looks similar to the following:

Add code to hook up the buttons
Now that we have our UI designed, we will now create the code to hook up the buttons.
To do that, we'll create a new script that derives from Microsoft.MixedReality.WebView.
1. In the Inspector window for WebView, click Add Component, select New script, type WebViewBrowser, and then click Create and add. Your new component is added to the Inspector window.
2. In the Inspector window, double-click the WebViewBrowser script, to edit the script.
3. Replace the contents of that file with the following code:
C#using Microsoft.MixedReality.WebView; using UnityEngine.UI; using UnityEngine; using TMPro; using System;
public class WebViewBrowser : MonoBehaviour
{
   // Declare UI elements: Back button, Go button, and URL input field    public Button BackButton;    public Button GoButton;    public TMP_InputField URLField;
   private void Start()
   {
      // Get the WebView component attached to the game object       var webViewComponent = gameObject.GetComponent<WebView>();       webViewComponent.GetWebViewWhenReady((IWebView webView) =>       {
            // If the WebView supports browser history, enable the Back button             if (webView is IWithBrowserHistory history)
            {
               // Add an event listener for the Back button to navigate back in history
               BackButton.onClick.AddListener(() => history.GoBack());
               // Update the Back button's enabled state based on whether there's any history to go back to                history.CanGoBackUpdated += CanGoBack;
            }
            // Add an event listener for the Go button to load the URL that was entered in the input field
            GoButton.onClick.AddListener(() => webView.Load(new 
Uri(URLField.text)));
            // Subscribe to the Navigated event to update the URL input field whenever a navigation occurs             webView.Navigated += OnNavigated;
            // Set the initial value of the URL input field to the current URL of the WebView             if (webView.Page != null)
            {
               URLField.text = webView.Page.AbsoluteUri;
            }
      });   }
   // Update the URL input field with the new path after navigation    private void OnNavigated(string path)
   {
      URLField.text = path;
   }
   // Enable or disable the Back button based on whether there's any history to go back to    private void CanGoBack(bool value)
   {
      BackButton.enabled = value;
   }
}
4. Connect the UI GameObjects to the WebViewBrowser code that we just wrote:
a. Select the WebViewBrowser.
b. Drag Back Button from the Hierarchy pane into the Back Button variable field for the WebView Browser in the Inspector.
c. Drag Go Button from the Hierarchy pane into the Go Button variable field for the WebView Browser in the Inspector:

5. You can now test the scene in the Unity Editor. With everything wired up in your scene, you should be able to verify that everything is working as expected. Try testing out the scene by entering a new URL into the AddressField text box (must be a full URL including the protocol), then pressing the Go button. Make sure the Back button works as well.
It can sometimes be helpful to debug your application running on your HoloLens, and the steps to do so are slightly different than standard debugging within Visual Studio. For more information on how to set up and connect to your application running on the HoloLens or inside of the Unity editor, see Managed debugging with Unity.
See also:
WebView2 API Reference
API Reference for Mixed Reality WebView plugin - for HoloLens 2 in the WebView2 Unity plugin.
Continue with the next steps below.
Step 8 - Learn about WebView2 events and interactions in Unity
The Microsoft Mixed Reality WebView plugin for Unity provides events for working with the webview.
One important event is IWithPostMessage.MessageReceived, which is raised when a message is sent from the webview to the Unity app. The MessageReceived event is defined in the Microsoft.MixedReality.WebView.IWithPostMessage interface.
IWithPostMessage also defines the PostMessage() method, which can be used to send a message from the Unity app to the webview.
Here is an example of how to use these events and methods for working with the webview:
C#using Microsoft.MixedReality.WebView;
public class WebViewExample : MonoBehaviour, IWithPostMessage
{     private void Start()
    {         var webViewComponent = gameObject.GetComponent<WebView>();
        if (Url != string.Empty)
        {
            Debug.Log("Loading URL: " + Url);             webViewComponent.Load(new Uri(Url));
        }
        webViewComponent.GetWebViewWhenReady((IWebView webView) =>         {
            // Add event listeners for WebView2 events
            ((IWithPostMessage)webView).MessageReceived += 
OnMessageReceived;
        });
    }
    // Handler for WebView2 OnPostMessage event     void OnMessageReceived(string message)
    {
        Debug.Log("WebView2 message received: " + message);
    }
}See also
Get started with WebView2 in WinUI 2 (UWP) apps
WebView2 API Reference
API Reference for Mixed Reality WebView plugin - for HoloLens 2 in the WebView2 Unity plugin.

Feedback
Was this page helpful? 

Getting Started tutorials
Article • 02/04/2025
These articles cover how to set up your development tools and create an initial WebView2 app, like a Hello World app with basic functionality. You learn WebView2 concepts along the way. If you want to run a sample first, see Win32 sample app or another sample app article.
ﾉ Expand table
ArticleCompleted projectDescriptionGet started with WebView2 in WinUI 2 (UWP) appsWinUI2_GettingStartedUse C# Blank App (Universal Windows) project template and install the Microsoft.UI.Xaml package (WinUI 2), which installs the
Microsoft.Web.WebView2 SDK package as a dependency.Get started with WebView2 in WinUI 3 (Windows App
SDK) appsWinUI3GetStartedUse the Blank App, Packaged (WinUI 3 in Desktop) Visual Studio project template, which uses the WindowsAppSDK, which includes the WebView2 SDK. You add a WebView2 control, an Address bar and Go button, and URL logic to only allow navigating to HTTPS URLs.Get started with WebView2 in WPF appsWPF_GettingStartedUse the WPF Application or WPF App (.NET Framework) project template to create a WPF app, and then install the WebView2 SDK for the project to add WebView2.Get started with WebView2 in WinForms appsWinForms_GettingStartedUse the C# Windows Forms App (.NET
Framework) project template to create a
WinForms project, then install the
Microsoft.Web.WebView2 SDK package for the WinForms project.Get started with WebView2 in Win32 appsWin32_GettingStartedStarts by opening an existing Win32 app project that has the WebView2 SDK and code already added.Get started with WebView2 in HoloLens 2 Unity appsHololens2_GettingStartedStarts by opening an existing Unity project that has the WebView2 SDK package and sample code added.See also
Microsoft Edge WebView2 - initial introduction to WebView2, at developer.microsoft.com.
WebView2 sample apps - framework-specific sample apps that showcase more of the WebView2 APIs than the Getting Started tutorials.
 WebView2Samples repo - contains completed Visual Studio projects that result from following the steps in these Getting Started tutorials, as well as sample apps and deployment samples.

Feedback
Was this page helpful? 

WebView2 sample apps
Article • 11/07/2024
WebView2Samples repo
Sample apps that use WebView2 are available in the WebView2Samples repo, for various frameworks or platforms.
ﾉ Expand table
ArticleSampleNotesWin32 sample appWebView2APISampleMain sample; extensive.Win32 sample app with
Visual CompositionWebView2SampleWinCompWindows Runtime
Composition APIs leverage the Windows UI in Win32 app.WebView2Browser
(Win32 C++/JS)WebView2Browser repoUses multiple WebView2 instances. A major sample; has its own repo.WinUI 2 (UWP) sample appwebview2_sample_uwpWinUI 3 (Windows App
SDK) sample appWebView2_WinUI3_SampleWPF sample appWebView2WpfBrowser WPF app with CDP extensionWV2CDPExtensionWPFSampleUse Chrome DevTools Protocol APIs in a WPF app.WinForms sample appWebView2WindowsFormsBrowserThese articles provide the specific steps to set up your machine and build, run, and update each sample.
Sample apps vs. completed Getting Started tutorials
The sample apps are the source of the sample code snippets that are shown in the API Reference docs and conceptual docs.
For some frameworks or platforms, the samples repo contains both a completed Getting
Started tutorial and a sample app. These sample apps showcase more of the WebView2 APIs than the Getting Started tutorials.
Xbox WebView2 samples
 Media App Samples for Xbox
See also
WebView2Samples repo
WebView2 deployment samples

Feedback
Was this page helpful?  Yes  No

Navigation events for WebView2 apps
Article • 03/20/2023
When the user of your WebView2 app goes to a different webpage, URL, or file path, this is a navigation. Each navigation fires a sequence of navigation-related events. The native portion of your WebView2 app listens for these navigation events and handles them.
Navigation events run when specific asynchronous actions occur to the content that's displayed in a WebView2 instance. For example, when a WebView2 user navigates to a new website, the native content listens for the change by listening for the
NavigationStarting event. When the navigation action completes, NavigationCompleted runs.
Supported platforms: Win32, Windows Forms, WinUI, WPF.
Standard sequence of events
The following is the normal sequence of events that are fired during each step of a navigation:

ﾉ Expand table
SequenceEventDescriptionAPI Reference overview1NavigationStartingWebView2 starts to navigate and the navigation results in aBlock unwanted navigatingSequenceEventDescriptionAPI Reference overviewnetwork request. The host may disallow the request during the event.2SourceChangedThe source of WebView2 changes to a new URL. The event may result from a navigation action that doesn't cause a network request, such as a fragment navigation.Navigation history3ContentLoadingWebView2 starts loading content for the new page.Navigation events4HistoryChangedThe navigation causes the history of WebView2 to update.Navigation history5BasicAuthenticationRequestedRaised when WebView encounters a Basic HTTP
Authentication request. See Basic authentication for WebView2 apps.Authentication6DOMContentLoadedWebView2 finishes parsing the DOM content but hasn't finished loading all images, script, and other content on the page.Navigation events7NavigationCompletedWebView2 completes loading content on the new page.Navigation eventsNavigation IDs
The diagram above shows navigation events that have the same NavigationId property on the respective eventArgs object.
Track navigation events to each new document by using the NavigationId property of each navigation event's eventArgs object. Each navigation involves a sequence of navigation events. The NavigationId value changes every time a successful navigation to a new document is completed.
Navigation events that have different Navigation IDs may overlap. For instance, when you start a navigation event, you must wait for the related NavigationStarting event.
The NavigationStarting event is identified by the NavigationId property on the NavigationStartingEventArgs object. If you then start another navigation, you'll see the following sequence:
1. The NavigationStarting event for the first navigation.
2. The NavigationStarting event for the second navigation.
3. The NavigationCompleted event for the first navigation.
4. All the rest of the appropriate navigation events for the second navigation.
In error cases, there may or may not be a ContentLoading event, depending on whether the navigation is continued to an error page.
If an HTTP redirect occurs, there are multiple NavigationStarting events in a row, where later event arguments have the IsRedirect property set; however, the Navigation ID remains the same.
Same-document navigation events, such as navigating to a fragment in the same document, don't cause a NavigationStarting event to be fired, and don't cause the Navigation ID to change.
Navigation in frames
To monitor or cancel navigation events inside frames in a WebView2 instance, use the equivalent frame-related APIs and events. See Using frames in WebView2 apps.
Navigation example code
For example code showing how to handle navigation events, see:
 Learn about navigation events in Get started with WebView2 in WinUI 2 (UWP) apps - no example code in the article; see other frameworks' articles.  Step 8 - Handle navigation events in Get started with WebView2 in WinUI 3 (Windows App SDK) apps.
Step 7 - Navigation events in Get started with WebView2 in WPF apps.
Step 8 - Navigation events in Get started with WebView2 in WinForms apps.
Step 13 - Navigation events in Get started with WebView2 in Win32 apps.
The WebView2 sample apps also demonstrate handling navigation events.
See also
 Navigate to pages and manage loaded content in Overview of WebView2 APIs
Basic authentication for WebView2 apps
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities. WebView2 API reference

Feedback
Was this page helpful?  Yes  No

Handling process-related events in WebView2
Article • 07/17/2023
WebView2 uses multiple processes to support the WebView2 controls in your application. Because these processes can exit during use, WebView2 provides the
CoreWebView2.ProcessFailed and CoreWebView2Environment.BrowserProcessExited events.
Have your app use these events as follows, to react when these scenarios occur.
To improve the reliability of your WebView2 application, it is recommended that your app handles at least the following events:
The main browser process has exited unexpectedly.
A process rendering content in the WebView2 control has exited unexpectedly.
A renderer process becomes unresponsive.
To use this article, we recommend first reading Process model for WebView2 apps. For a list of process-related APIs covered by this article, see Process management in Overview of WebView2 APIs.
Events for processes that exited or failed
When you initialize a WebView2 control, WebView2 will ensure there's a WebView2 Runtime to power your control and connect to its WebView2 Process Group. Once this connection is established, your control will start monitoring these processes and report the following events so your application can react accordingly:
 Any process failure. When any of the processes in the WebView2 Runtime fails, the CoreWebView2 will raise the ProcessFailed event. This can be due to a process crash, or an unresponsive renderer process. Use this event for diagnostics and recovery from failures in the WebView2 processes. See Handle process crashes and A process rendering content in the WebView2 control has exited unexpectedly, below.
Main browser process exits. If the main browser process exits for any reason, the
CoreWebView2Environment will raise the BrowserProcessExited event. Use this event to synchronize operations involving the WebView2 Runtime resources and lifetime, such as User Data Folder management and updates. See Handle main browser process exited, below.
 Main browser process crashes. When the main browser process crashes, it will produce both a ProcessFailed event and a BrowserProcessExited event, since the main browser process exited because of a failure.

Gathering process failure details
The ProcessFailed event provides detailed information about the process failure being reported. Your application can use and collect information from the event args for monitoring and diagnostics purposes, including process description (for utility processes only) and frames information (for renderer processes only).
Some process failures might raise the ProcessFailed event across different WebView2 controls in your application. You must decide how often to gather details and how to handle duplicates for these cases.
Additionally, most process crashes will generate dumps in the user data folder, under the directory returned by FailureReportFolderPath. You can use these dumps to understand crashes and provide additional information when contacting the WebView2 team.

Handle process crashes
When a crash occurs in the WebView2 Runtime, the ProcessFailed event will be raised for every WebView2 control associated to the crashing process. The failure might or might not be recoverable, and some failures are auto-recoverable.
You can use the following properties from the event args to identify the failure:
ProcessFailedKind. A combination of the process purpose (such as browser, renderer, or GPU) and failure (exit, unresponsiveness). Renderer processes are further divided in main frame renderer (RenderProcessExited,
RenderProcessUnresponsive) and subframe renderer (FrameRenderProcessExited).
ProcessFailedReason. Indicates the category of the problem causing the failure.
Some of these failure reasons are only applicable to specific failure kinds.

The main browser process has exited unexpectedly
All the WebView2 controls in your application using the same environment configuration will receive the ProcessFailed event with:
Failure kind: BrowserProcessExited.
Failure reason: any, except Unresponsive and LaunchFailed.
All associated WebView2 controls will be closed and your application must handle recovery from this failure. The WebView2 controls need to be recreated.
A single BrowserProcessExited event will be raised from the CoreWebview2Environment too, but the order of these events is not guaranteed. Your application must coordinate its event handlers for these two events when the browser process crashes. See Handle main browser process exited, below.
A process rendering content in the WebView2 control has exited unexpectedly
The content in impacted frames (main or subframe) is replaced with an error page. Every WebView2 control where content is impacted will receive the ProcessFailed event with:
Failure kind: RenderProcessExited or FrameRenderProcessExited.
Failure reason: any, except Unresponsive and ProfileDeleted.
Your application must handle recovery from this failure. If the main frame is impacted (RenderProcessExited), you can use the Reload API to reload content in your controls.
Alternatively, you can Close and recreate the WebView2 controls.
If the main frame is not impacted (FrameRenderProcessExited), your application can communicate with the main frame to recover content in the impacted frames. The
ProcessFailed event provides details for the impacted frames through the FrameInfosForFailedProcess property.
The GPU process has exited unexpectedly
The content in your WebView2 controls might flash as the process is automatically recreated. Every WebView2 control in the WebView2 Process Group will receive the

This is the most common WebView2 process failure and is auto-recoverable. Your application does not need to handle recovery for this event, but can collect information to understand any persistent issues, or if there is an underlying cause for repeated GPU process exits.
A utility process has exited unexpectedly
There might be some interruptions (for example, if the utility process was hosting the audio service) necessary processes are automatically recreated. Every WebView2 control in the WebView2 Process Group will receive the ProcessFailed event with:
 Failure kind: UtilityProcessExited.
 Failure reason: any, except Unresponsive and ProfileDeleted.
This process failure is not fatal and is auto-recoverable. Your application does not need to handle recovery for this event, but can collect information to understand any persistent issues, including the ProcessDescription provided in the event args.

Any other process has exited unexpectedly
Most processes in the WebView2 Process Group are associated to all WebView2 controls using it and will raise ProcessFailed to each control with:
Failure kind: PpapiBrokerProcessExited, PpapiPluginProcessExited,
RenderProcessUnresponsive, SandboxHelperProcessExited, or UnknownProcessExited.
Failure reason: any, except Unresponsive and ProfileDeleted.
These process failures are not fatal and your application does not need to handle recovery for any of them, but can collect information to understand any persistent issues.
Handle unresponsive renderers
When the renderer process for the main frame in a WebView2 control becomes unresponsive to user input, the ProcessFailed event will be raised with:
Failure kind: RenderProcessUnresponsive.
Failure reason: Unresponsive.
The event will continue to be raised as long as the process remains unresponsive.
Renderer process unresponsiveness can happen for the following reasons:
 There is a long-running script being executed. For example, the web content in your WebView2 control might be performing a synchronous XHR, or have entered an infinite loop. Reloading the WebView2 control (by calling Reload) might make the control responsive again.
 The system is busy.
This event will be raised repeatedly (for example, every 15 seconds), so you need to decide the threshold for your application to act upon it.
Handle main browser process exited
The BrowserProcessExited event indicates that the main browser process has exited and its resources (including its child processes) have been released. This can happen for the following reasons:
 All WebView2 controls from the CoreWebView2Environment have been closed.
Example app scenarios include:
Clearing the user data folder.
Updating the WebView2 Runtime.
Restarting with a different environment configuration.
Clearing the auth cache.
The main browser process failed. See The main browser process has exited unexpectedly, above.
This event is intended for operations involving the WebView2 Runtime resources. Your application can use the exit kind and the process ID from the event args to determine when and how to handle the event. For example, you might want coordinate with your
ProcessFailed event handlers to prevent race conditions that could arise from attempting recovery while also trying to remove the user data folder.

Clearing the user data folder
Your application needs to wait until the WebView2 Runtime has released the User Data
Folder before it can delete its contents. After closing all WebView2 controls, the
BrowserProcessExited event indicates this has happened and your application can proceed with the operation.
See also:
 Manage user data folders
Updating the WebView2 Runtime
In order to make use of the latest WebView2 Runtime after an update, your application needs to close all WebView2 controls and create a new CoreWebView2Environment. To ensure the new version is used, your application must wait for the BrowserProcessExited event; otherwise, the main browser process might stay alive when the new environment is created and switching to the new version would fail.
Restarting with a different environment configuration
Most of the configuration used for a CoreWebView2Environment is bound to the main browser process lifetime. In order to make changes to this configuration (for example, to language), your application needs to close existing WebView2 controls and wait for BrowserProcessExited before recreating the controls; otherwise, initializing the WebView2 controls from the new CoreWebView2Environment might fail with incompatible configuration.
Clearing the auth cache
The auth cache stores certificate selection and credentials from HTTPS Client Certificate Requests.
The auth cache is bound to the main browser process lifetime. Therefore, to clear the auth cache, your application must re-create its WebView2 controls from a new main browser process instance.
To ensure that a new main browser process instance is used when re-creating the WebView2 controls, your application must wait for the BrowserProcessExited event before proceeding; otherwise, the main browser process might stay alive when the controls are recreated, which would preserve the auth cache instead of clearing it as intended.
See also
Process model for WebView2 apps
Process management in Overview of WebView2 APIs. WebView2 API Reference

Feedback
Was this page helpful?  Yes  No

Basic authentication for WebView2 apps
Article • 02/07/2023
Basic authentication is an authentication approach that's part of the HTTP protocol.
Basic authentication for WebView2 apps includes a sequence of authentication and navigation steps to retrieve a webpage from an HTTP server. The WebView2 control acts as an intermediary for communication between the host app and the HTTP server.
Use HTTPS for sending credentials
Warning: You must use HTTPS when using Basic Authentication. Otherwise the username and password are not encrypted. You may want to consider other forms of authentication.
The HTTP standard for basic authentication includes the authentication credentials (username and password) unencrypted. Therefore, you must use https, to ensure that the credentials are encrypted.
The order of navigation events
The basic authentication event happens in the middle of the sequence of events:
1. NavigationStarting - navigation event
2. ContentLoading - navigation event
3. BasicAuthenticationRequested
4. DOMContentLoaded
5. NavigationCompleted - navigation event
For more information, see Navigation events for WebView2 apps.
Communication between the HTTP server, WebView2 control, and host app
 The HTTP server checks authentication (username and password credentials) and returns either an error document or the requested webpage.
 The WebView2 control instance raises the events. The WebView2 control sits between the HTTP server and the host app. The WebView2 control serves as an intermediary for communication between the host app and the HTTP server.
 You write the host app. The host app sets the user name and password on the event's arguments (EventArgs) response objects.
BasicAuthenticationRequestedEventArgs has a Response property. The Response property is an object that contains the username and password properties.
Sequence of navigation events
The following diagram shows the flow of navigation events for basic authentication for WebView2 apps:


1. The host app tells the WebView2 control to navigate to a URI.
2. The WebView2 control talks to the HTTP server requesting to get the document at a specified URI.
3. The HTTP server replies to the WebView2 control, saying "You can't get that URI (document) without authentication."
4. The WebView2 control tells the host app "Authentication is needed" (which is the BasicAuthenticationRequested event).
5. The host app responds to that event by providing the username and password to the WebView2 control.
6. The WebView2 control again requests the URI from the HTTP server, but this time with the authentication (username and password).
7. The HTTP server evaluates the credentials (username and password).
8. The HTTP server might deny the credentials and request new credentials.
9. The HTTP server might reject the username and password; it might tell the WebView2 control "You're not permitted to get that URI/document".
10. The WebView2 control renders the error page that's returned by the HTTP server. The rendering occurs between the ContentLoading event and DOMContentLoaded event.
11. The HTTP server might accept the authentication credentials and return the requested document.
12. The WebView2 control renders the returned document. The rendering occurs between the ContentLoading event and DOMContentLoaded event.
Example code: App providing credentials that are known ahead of time
The following simplified example shows the host app providing credentials (user name and password) that are known ahead of time. This example is a slightly modified version of the code that's in WebView2Samples repo > WebView2APISample > ScenarioAuthentication.cpp.
This example isn't realistic, because:
 In practice, you'd prompt the user for the username and password rather than hardcoding them like "user" and "pass".
 This code is synchronous, but you'd probably use asynchronous code instead.
For more realistic code, see the subsequent section.


Example code: Prompting user for credentials
This example demonstrates a host app prompting the user for credentials (user name and password), and uses async code.
This example builds upon the above sample, by adding the following features:
Displays a dialog to prompt the user for their username and password.
Calls the GetDeferral method on the event argument.
C#
// Prerequisite: Before using this code, make sure you read the section 
"Use HTTPS // for sending credentials" in this article. webView.CoreWebView2.BasicAuthenticationRequested += delegate (     object sender, 
    CoreWebView2BasicAuthenticationRequestedEventArgs args)
{
    // We need to show UI asynchronously so we obtain a deferral.
    // A deferral will delay the CoreWebView2 from
    // examining the properties we set on the event args until     // after we call the Complete method asynchronously later.     // This gives us time to asynchronously show UI.
    CoreWebView2Deferral deferral = args.GetDeferral();
    // We avoid potential reentrancy from running a message loop in the
    // event handler by showing our download dialog later when we
    // complete the deferral asynchronously.
    System.Threading.SynchronizationContext.Current.Post((_) =>
    {         using (deferral)
        {
            // When prompting the end user for authentication its important
            // to show them the URI or origin of the URI that is requesting
            // authentication so the end user will know who they are giving
            // their username and password to.
            // Its also important to display the challenge to the end user
            // as it may have important site specific information for the
            // end user to provide the correct username and password.
            // Use an app or UI framework method to get input from the end user.
            TextInputDialog dialog = new TextInputDialog(                 title: "Authentication Request",                 description: "Authentication request from " + args.Uri + "\r\n" +
                    "Challenge: " + args.Challenge,                 defaultInput: "username\r\npassword");             bool userNameAndPasswordSet = false;
            if (dialog.ShowDialog().GetValueOrDefault(false))
            {                 string[] userNameAndPassword = dialog.Input.Text.Split(                     new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);                 if (userNameAndPassword.Length > 1)                 {                     args.Response.UserName = userNameAndPassword[0];                     args.Response.Password = userNameAndPassword[1];                     userNameAndPasswordSet = true;
                }
            }
            // If we didn't get a username and password from the end user then
            // we cancel the authentication request and don't provide any
            // authentication.
            if (!userNameAndPasswordSet)
            {                 args.Cancel = true;
            }         }
    }, null);
};CoreWebView2BasicAuthenticationRequestedEventArgs Class	

How navigations work
This section provides optional background information about how navigations work.
A navigation corresponds to multiple navigation events. By navigation, we here mean each retry, starting with the NavigationStarting box of the above diagram, through the NavigationCompleted box.
When a new navigation begins, a new navigation ID is assigned. For the new navigation, the HTTP server gave the WebView2 control a document. This is the "have document" navigation.
As a part of navigation, the WebView2 control renders the corresponding page (the requested page or an error page, whichever is returned by the HTTP server), and a "success" or "failure" outcome raises a successful or failed NavigationCompleted event.
For more information, see Navigation events for WebView2 apps.
Navigations for basic authentication
There are two kinds of navigations in the flow:
A "server requested authentication" navigation.
A "server gave the WebView2 control a document" navigation.
After the first type of navigation, the server has asked for authentication and the app needs to try that kind of navigation again (with a new navigation ID). The new navigation will use whatever the host app gets from the events arguments response objects.
An HTTP server may require HTTP authentication. In this case, there's a first navigation, which has the navigation events that are listed above. The HTTP server returns a 401 or
407 HTTP response, and so the NavigationCompleted event has a corresponding failure.
The WebView2 then renders a blank page, and raise the BasicAuthenticationRequested event, which will potentially prompt the user for credentials.
If the BasicAuthenticationRequested event is canceled, then there's no subsequent navigation and the WebView2 will remain to display the blank page.
If the BasicAuthenticationRequested event isn't canceled, the WebView2 will perform the initial navigation again, but this time, using any provided credentials. You'll again see all the same navigation events as before.
If the credentials aren't accepted by the HTTP server, navigation fails again with 401 or
407. In that case, the CoreWebView2 class instance again raises the
BasicAuthenticationRequested event, and navigation continues as above.
The navigation succeeds if the credentials are accepted by the HTTP server. The navigation fails if the HTTP server denies authentication (the server typically returns an error page).
The navigations before and after the BasicAuthenticationRequested event are distinct navigations and have distinct navigation IDs.
Navigation event args has a property: the NavigationId. The NavigationId ties together navigation events that correspond to a single navigation. The NavigationId remains the same during each navigation, such as a retry. During the next pass through the event flow, a different NavigationId is used.
API Reference overview

See also

Feedback
Was this page helpful? 

Customizing the UI of WebView2 apps
Article • 03/11/2022
Customize the context menus of your WebView2 app
Use the ContextMenuRequested API to customize the context-menus (right-click menus) of your WebView2 app. Using this API, you can:
Add and remove items from the default WebView2 context menus.
Create your own context menu by using data that's passed from the WebView2 control to your app.
See Customize context menus in WebView2.

Feedback
Was this page helpful?  Yes  No
Customize context menus in WebView2
Article • 03/28/2023
The WebView2 control provides a default context menu, and you can create your own context menu when using a WebView2 control. Use the ContextMenuRequested API to customize the context-menus (right-click menus) of a WebView2 app. For example, you can do any of the following:
 Add a custom context menu.
Instead of using the default context menu, your host app can draw its own context menu by using the information that's sent from the WebView2 context menu. Your app handles the ContextMenuRequested event. You can use the data provided in the Event arguments of ContextMenuRequested to display a custom context menu with entries of your choice. For this case, you handle the event and request a deferral.
You can add default menu items and/or custom menu items to a custom context menu.
Add default menu items to a custom context menu.
Add custom menu items to a default context menu.
Remove default or custom menu items from the default context menu.
Disable context menus.
Terminology:
ﾉ Expand table
TermDefinitionmenu itemA broad term. Includes checkbox, command, radio button, separator, and submenu.commandA narrow term. One of five types of menu item.context
menuEither a default context menu (right-click menu) belonging to the WebView2 control, or a custom context menu (right-click menu) belonging to your host app.Adding a custom context menu
Instead of using the default context menu, your host app can draw its own context menu by using the information that's sent from the WebView2 context menu. Your app handles the ContextMenuRequested event. You can use the data provided in the Event arguments of ContextMenuRequested to display a custom context menu with entries of your choice. For this case, you handle the event and request a deferral.
When the user selects a command from your custom context menu, your app needs to tell the WebView2 control which command the user selected, by using the SelectedCommandId property.
You can add default menu items and/or custom menu items to a custom context menu.


Example: Adding a custom context menu
The following sample presents the WebView2 context menu in the Win32/WPF context menu format.

        if (current.Kind == CoreWebView2ContextMenuItemKind.Separator)         {
            Separator sep = new Separator();             cm.Items.Add(sep);             continue;
        }
        MenuItem newItem = new MenuItem();
        // The accessibility key is the key after the & in the label         // Replace with '_' so it is underlined in the label         newItem.Header = current.Label.Replace('&', '_');         newItem.InputGestureText = current.ShortcutKeyDescription;         newItem.IsEnabled = current.IsEnabled;         if (current.Kind == CoreWebView2ContextMenuItemKind.Submenu)         {
            PopulateContextMenu(args, current.Children, newItem);
        }         else         {             if (current.Kind == CoreWebView2ContextMenuItemKind.CheckBox             || current.Kind == CoreWebView2ContextMenuItemKind.Radio)
            {                 newItem.IsCheckable = true;                 newItem.IsChecked = current.IsChecked;
            }
            newItem.Click += (s, ex) =>
            {                 args.SelectedCommandId = current.CommandId;
            };         }         cm.Items.Add(newItem);
    }
}Adding menu items to a context menu
You can:
 Add default menu items to a custom context menu, as shown above in "Adding a custom context menu".
 Add custom menu items to a default context menu, as shown below in "Adding custom menu items to a default context menu".
Adding custom menu items to a default context menu
To add custom menu items to the default context menu, use the following API items.

Example: Adding custom menu items to a default context menu
The following example adds a Display Page Uri command to the WebView2 context menu.

            System.Threading.SynchronizationContext.Current.Post((_) =>             {
                MessageBox.Show(pageUri, "Page Uri", 
MessageBoxButton.OK);             }, null);
        };     menuList.Insert(menuList.Count, newItem);
};Removing menu items from a default context menu
You can remove default or custom menu items from the default context menu.

Example: Removing menu items from a default context menu
The following example removes the Save image as command from the WebView2 context menu.

{
    IList<CoreWebView2ContextMenuItem> menuList = args.MenuItems;     CoreWebView2ContextMenuTargetKind context = args.ContextMenuTarget.Kind;     if (context == CoreWebView2ContextMenuTargetKind.Image)
    {         for (int index = 0; index < menuList.Count; index++)         {             if (menuList[index].Name == "saveImageAs")
            {                 menuList.RemoveAt(index);                 break;
            }
        }
    }
};Detecting when the user requests a context
menu
This section explains how to detect when the user requests opening a context menu. It's the same for custom or default context menus.
When a user requests opening a context menu (such as by right-clicking), your app needs to listen for the ContextMenuRequested event.
When your app detects this event, your app should do some combination of the following:
Add custom menu items to the default context menu.
Remove custom menu items from the default context menu.
Open a custom context menu.
The ContextMenuRequested event indicates that the user requested opening a context menu.
The WebView2 control raises this event to indicate that the user requested opening a context menu in the WebView2 control, such as by right-clicking.
The WebView2 control only raises the ContextMenuRequested event if the current webpage allows the context menu to appear; that is, if the AreDefaultContextMenusEnabled property is true.
The CoreWebView2ContextMenuRequestedEventArgs contains the following information:
 An ordered list of ContextMenuItem objects to populate the custom context menu.
The ordered list includes the following:
The internal name of the menu item.
The UI label of the menu item, displayed to the user in the UI.
The kind of menu item.
A keyboard shortcut Description, if any, such as Alt+C.
Any other properties of the custom menu item.
The coordinates where the context menu was requested, so your app can detect which UI item the user right-clicked. The coordinates are defined in relation to the upper left corner of the WebView2 control.
 A selection object that will include the kind of context selected and the appropriate context menu parameter data.
When the user selects a custom menu item on a context menu, the WebView2 control fires a CustomItemSelected event.
When your host app indicates to WebView2 that a user selected a menu item on a context menu, WebView2 then runs the selected command.

Detecting when the user selects a custom menu item
Your host app can handle the user-selected menu item, or your app can return the menu item to the WebView2 control to handle the user-selected menu item.
Your host app should listen for the CustomItemSelected event, which is raised when the user selects a custom menu item on a default or custom context menu.
The WebView2 control raises this event to indicate that the user selected a custom menu item that your app added to a context menu.
If the user selects a custom menu item, the CustomMenuItemSelected event is raised on the context menu item object that was selected, in these cases:
 The app adds custom menu items, but defers the context menu UI to the WebView2 platform.
The app adds custom menu items, shows custom UI, and sets the SelectedCommandId property to the ID of the custom menu item.
Reporting a selected command menu item to WebView2
When the user selects a WebView2 context menu command (a default menu item that's in a custom context menu), the host app can optionally report that selection to WebView2 so that WebView2 will invoke the command.

Custom menu items
If your host app reports a custom menu item as the selected menu item, then the CustomMenuItemSelected event will be fired for the custom menu item.
Disabling context menus
The AreDefaultContextMenusEnabled property controls whether any context menu can be opened. If the WebView2 AreDefaultContextMenusEnabled setting is set to False, that disables context menus, and the ContextMenuRequested event won't be raised, such as when the user right-clicks.

CoreWebView2Settings Class
AreDefaultContextMenusEnabled PropertyAPI Reference overview


See also
Context menus in Overview of WebView2 APIs.
WebView2Samples repo
Feedback
Was this page helpful? 
Using frames in WebView2 apps
Article • 06/19/2023
Frames allow you to embed other webpages into your own webpage. A frame is a subpage or area within a webpage, like a webpage within a webpage.
An iframe is one type of frame. Other types of frames are frameset, portal, embed, fencedFrame, and object. The main WebView2 type for frames is CoreWebView2Frame,
which is currently enabled for top-level iframes. Support for other types of frames is planned.
WebView2 supports APIs to interact with iframes. You can:
Find out when iframes are created.
Find out when iframes are navigating to a different URL. This works the same as state machine Navigation events for WebView2 apps.
 Communicate between the host app and iframes, sending messages in both directions.
 Allow the app to ignore the X-Frame-Options HTTP response header.
See also:
iframes in Overview of WebView2 APIs.
HTML <iframe> Tag
Subscribe to the FrameCreated event to obtain a frame
To interact with frames in your host app, the first step is to subscribe to the
FrameCreated event so that your host app obtains a frame object. The FrameCreated event is raised whenever a new frame is created. After your host app has obtained a frame object, use the frame object to monitor changes and interact with this specific frame.
Your host app must monitor the lifetime of a frame by subscribing to the
CoreWebView2Frame.Destroyed event, because when the frame is destroyed, your host app can no longer reference that frame. Frames get created and destroyed during each new webpage navigation. Use the CoreWebView2Frame.IsDestroyed method to check whether the frame still exists.

 iframes in Overview of WebView2 APIs.
Navigating within a frame
After a frame is created, the frame navigates to the frame's source URL. iframes use navigation and navigation events, such as FrameNavigationStarting and
NavigationCompleted. When the frame navigates to the source URL, the following navigation events are raised:
NavigationStarting
ContentLoading
HistoryChanged
DOMContentLoaded
NavigationCompleted
Frequency of navigating within a frame
Navigation can potentially happen within a frame. As a simple use case, an iframe element's source attribute is a URL, such as wikipedia.com, and the URL is loaded in an iframe. Usually the navigation happens immediately after the frame is created. The
ContentLoading, DOMContentLoaded, and NavigationCompleted events are then raised.
The frame itself is navigating. A webpage navigates to a URL. Similarly, a frame potentially navigates.
After the frame is created, the frame navigates as driven by your host app. To monitor what's going on in the main page, events such as NavigationStarting,
NavigationCompleted, and HistoryChanged enable the host app to navigate back and forth among frames or webpages. Frames are navigated to a new URL less often than webpages, but the same navigation style is supported. The user usually cannot navigate inside a frame, although JavaScript enables that; a frame is usually static regarding navigation.

See also:
Standard sequence of events in Navigation events for WebView2 apps.
Navigation events in Overview of WebView2 APIs.
Block unwanted navigating in Overview of WebView2 APIs.
Using host objects in an iframe
To communicate between the native side of the host app and JavaScript that's in an iframe, use host objects. A host object is an object that you create in the host app and then use from JavaScript code in the webpage side of the app.
Using native-side APIs from script within a frame, via a host object, is similar to web/native interop page structure as explained in Call native-side code from web-side code:
To use host objects within an iframe:
1. Define the host object and implement IDispatch.
2. Add the host object on the native side by using AddHostObjectToScriptWithOrigins (Win32) or AddHostObjectToScript (.NET).
3. From JavaScript in your web-side code, access this host object by using chrome.webview.hostObjects.<name> API.
To access and control native-side objects from web-side JavaScript in a frame, use
AddHostObjectToScriptWithOrigins (Win32) or
CoreWebView2Frame.AddHostObjectToScript (.NET), which has an origins parameter. The origins parameter specifies which URLs iframes will be allowed to access, for security
reasons. This parameter identifies the URLs for which iframes will have access to the host object.
If the frame is navigated to a URL that is not in the origins list, the frame won't be able to operate the host object; the frame won't be able to read or write any properties. See the Method name table in the AddHostObjectToScript method for your framework. See the following two rows:

Example code
See Step 6: Call AddHostObjectToScript to pass the host object to web-side code in Call native-side code from web-side code.
See also:
 Host/web object sharing in Overview of WebView2 APIs.
Sending and receiving messages
Messages can be sent between the native app and JavaScript code that's in an iframe:
 You can send messages from JavaScript in an iframe in an HTML page to the host app.
 You can send messages from the host app to JavaScript in an iframe in an HTML page.
Sending web messages from an iframe to the host app
To send web messages from an iframe to the host app, use the window.chrome.webview.postMessage method:
JavaScriptwindow.chrome.webview.postMessage(`SetTitleText ${titleText.value}`);To receive these messages in the host app, the host app must subscribe to the WebMessageReceived event.
Sending messages from the host app to the iframe
The host app sends messages to the iframe by calling the PostWebMessageAsJson or PostWebMessageAsString method.
The iframe receives the message by subscribing to the window.chrome.webview.addEventListener('message') event, as follows:
JavaScriptwindow.chrome.webview.addEventListener('message', arg => {
    // implement event listener here
});
Interop of native-side and web-side code
Web messaging in Overview of WebView2 APIs.
Run JavaScript code in iframes by using
ExecuteScript
A WebView2 app can run any JavaScript in a frame, by using ExecuteScript.
In order for script to be run in an iframe, an execution context must be created. An execution context is created after the ContentLoading event, that's why if ExecuteScript is called before the ContentLoading event is raised, the script will not be run and the string null will be returned.
For information about the ContentLoading event, see Navigation events for WebView2 apps, which is valid for frames as well as webpages.

See also:
 Script execution in Overview of WebView2 APIs.
Modifying network events by using the
WebResourceRequested event in iframes
For iframes, you can listen to network events and modify them, by using the WebResourceRequested event.
See also:
Manage network requests in WebView2 in Overview of WebView2 APIs.
Custom management of network requests
Experimental APIs for 1.0.1222-prerelease in Archived Release Notes for the WebView2 SDK.
.NET/C#
See the latest prerelease APIs. The following links contain 1.0.1466-prerelease. In the Version dropdown list in the upper left of the API Reference docs, select the latest prerelease.
CoreWebView2.AddWebResourceRequestedFilter(uri, resourceContext, requestSourceKinds) Method Overload - To subscribe to network requests that belong to an iframe, you must use this overload and use Document as the value of the requestSourceKinds parameter.
CoreWebView2WebResourceRequestSourceKinds Enum
CoreWebView2.RemoveWebResourceRequestedFilter(uri, resourceContext, requestSourceKinds) Method Overload
CoreWebView2WebResourceRequestedEventArgs Class
Ignoring X-Frame-Options to render a webpage inside of a frame
The X-Frame-Options HTTP response header is used by webpages to prevent an application from rendering that webpage inside of a frame. The
AdditionalAllowedFrameAncestors property allows your application to bypass the XFrame-Options header, to render the webpage inside a frame.
See also:

 CoreWebView2NavigationStartingEventArgs.AdditionalAllowedFrameAncestor s PropertyExample of using iframes in a host app
This sample code shows how to use frame APIs, including:

DOMContentLoadedArgs) =>
            {                 args.Frame.ExecuteScriptAsync(
                    "let content = document.createElement(\"h2\");" +
                    "content.style.color = 'blue';" +
                    "content.textContent = \"This text was added to the iframe by the host app\";" +
                    "document.body.appendChild(content);");
            };
        }API Reference overview
The following features, listed in Overview of WebView2 APIs, include frame-related APIs:
Host/web object sharing iframes Script execution
Web messaging
Permissions
Block unwanted navigating
Navigation events
See also
Interop of native and web code
Navigation events for WebView2 apps - valid for frames as well as webpages.
External pages:

Feedback
Was this page helpful? 
Windowed vs. Visual hosting of WebView2
Article • 10/03/2024
There are three options for hosting the Microsoft Edge WebView2 control in your app:
The Windowed hosting mode.
The Window to Visual hosting mode.
The Visual hosting mode.
You don't need to read this article if you use Windowed hosting in most scenarios.
Windowed hosting is a good starting point for most apps. Read this article:
 If you are using Windowed hosting in uncommon scenarios and are experiencing persistent issues with DPI and scaling. In this case, consider Window to Visual hosting.
 If you want to provide a more custom user experience (UX). In this case, consider Visual hosting.
The different approaches for hosting the WebView2 control in your app are similar in functionality, but they suit different needs depending on the app requirements, as follows:
ﾉ Expand table
ApproachDescriptionOptimized forWindowed hostingThe WebView2 control takes input from the operating system (OS). The OS sends the input to the WebView2.Displaying web content quickly and easily, without having to include features for inputs, outputs, and accessibility.Window to
Visual hostingA combination of Windowed and Visual hosting. Similar to Windowed hosting except that WebView2 content is output to a Visual that is hosted in a window rather having content output to the window directly.A developer experience nearly identical to Windowed hosting, but with improved DPI/scaling handling and the caveat that the Windows Shell Handwriting experience is unsupported.Visual hostingYour host app takes spatial input (such as mouse or touch input) from the user.
Your app sends this input to the WebView2 control.More granular control over control composition. The app needs to do specific handling of window management and rendering APIs.These approaches have different requirements, constraints, and benefits.
Windowed hosting is simpler to implement than Visual hosting.
Visual hosting requires all the API calls that Windowed hosting requires, and has additional requirements for it to render properly.
The supported API lists are linked to in the sections below:
APIs for Windowed hosting
APIs for Window to Visual hosting
APIs for Visual hosting
Windowed hosting: For displaying content quickly and easily
Windowed hosting means that in your app, WebView2 content is hosted directly in a window; that is, an HWND. The WebView2 HWND inherits many default properties from the operating system (OS). The WebView2 control takes input from the OS, and the OS sends the input to the WebView2 control. You can have multiple HWNDs in your app that will each be used as a WebView2 component to access web content.
The benefit of this is that some of the Input/Output commands are handled for you by the OS or by the framework. However, you will still need to handle some aspects of window management.
For general information about Window management and HWND functionality, see About Windows.
Advantages
 Windowed hosting allows for a solution that quickly displays web content without having to implement functionality for inputs, outputs, and accessibility.
 Owned and child windows (such as menus and context menus) automatically scale to match the app's parent HWND scaling.
 Windowed hosting handles how the WebView2 control manages being focused and tabbing in or out of itself when pressing Tab reaches the final element.
 You don't have to manage the various composition-based rendering controls (such as Inputs, Outputs, and Accessibility controls) if you don't want to.
Disadvantages
Windowed hosting mode can run into DPI issues in some scenarios, such as when sharing a user data folder (and therefor sharing a browser process) across different applications with different DPI awareness.
APIs for Windowed hosting
For a list of APIs that can be used when configuring WebView2 for Windowed hosting (or for Window to Visual hosting), see Rendering WebView2 in non-framework apps in Overview of WebView2 APIs.
Window to Visual hosting: For a similar experience as Windowed hosting, with added benefits and tradeoff
Window-to-Visual hosting means that the WebView2 content is outputted to a Visual that is hosted in an HWND, rather than outputting content to a window directly or to a Visual directly. By hosting content in an HWND, Window to Visual hosting is easy to use, in the same ways as Windowed hosting. But by displaying content by using a Visual, Window-to-Visual hosting avoids some DPI and input issues that can result when using Windowed hosting.
Window to Visual hosting doesn't require you to use the WebView2 Visual hosting APIs.
To enable Window to Visual hosting, the environment variable
COREWEBVIEW2_FORCED_HOSTING_MODE must be set to the value
COREWEBVIEW2_HOSTING_MODE_WINDOW_TO_VISUAL before initializing your WebView2.
In Window-to-Visual hosting and Visual hosting, a Visual is a basic graphical unit that can be used to compose graphical experiences on Windows. The Windows graphics APIs that expose this functionality and are relevant to WebView2 are DirectComposition and
Windows.UI.Composition. The "Visual" in "Visual hosting" can be any one of
IDCompositionVisual, IDCompositionTarget, or Windows.UI.Composition.Visual, which are Visuals that are exposed through the DirectComposition and
Windows.UI.Composition APIs. (Window to Visual hosting uses IDCompositionVisual specifically.) See:
Basic concepts in the Windows App Development > DirectComposition docs.
Composition visual in the Windows App Development > UWP docs.
Advantages
 Different apps that share a WebView2 user data folder can have different DPI awareness.
 Different apps that share a WebView2 user data folder can have different integrity levels.
 Different apps that share a WebView2 user data folder won't potentially cause each other to hang due to attached window input queues.
 When hosting a WebView2 in a VSTO Add-in, changing monitor scale won't potentially cause the app to hang. See VSTO Add-ins in Office solutions development overview (VSTO).
Disadvantages
Enabling Window to Visual hosting mode removes support for Windows Shell Handwriting within the WebView2.
See also:
Ink input - Windows App Development > User Interaction. shellhandwriting.h header - Win32 API.
APIs for Window to Visual hosting
For a list of APIs that can be used when configuring WebView2 Window to Visual hosting (or for Windowed hosting), see Rendering WebView2 in non-framework apps in Overview of WebView2 APIs.
Visual hosting: For more granular control over layout
When using Visual hosting, your host app receives spatial input (such as mouse or touch input) from the user, and forwards this input to the WebView2 control. Visual hosting requires the app to do the same window management as Windowed hosting, but has additional window management requirements regarding:
Scaling the contents.
Routing spatial inputs (such as mouse, touch, or pen).
Requirements for scaling the contents
Per composition-based rendering, a WebView2 control is part of a Visual tree, so by default, it's rendered at a scale that's based on the scales of all of its ancestor Visuals. For example, if a WebView2's ancestor Visual is scaled (zoomed) 2x, then the WebView2's contents are also rendered at 2x scale. If the WebView2's parent Visual is scaled 2x and that Visual's parent is also scaled 2x, then the WebView2 is scaled 4x. But because the WebView2 isn't scaling its own contents, they're blurry.
To resolve this, the app can undo the default Visual scaling of the WebView2, and instead use the Rasterization Scale APIs to apply the intended Visual scaling. This results in the WebView2's contents rendering at the correct scale. See Rasterization scale in Overview of WebView2 APIs.
Requirements for routing spatial inputs (mouse, touch, or pen)
If your WebView2 app uses Visual hosting, no spatial inputs (such as mouse, touch, or pen) are sent to the WebView2 control, unless the app manages such input. Input is sent to the app's HWND, and the app is responsible for forwarding this spatial input to the WebView2, if the input's position is over the WebView2.
The app is also responsible for any necessary transformation of input positions into the WebView2's coordinate space.
See also:
 Using the Visual layer in desktop apps in Windows > App development docs.
Advantages and disadvantages
Visual hosting allows for (and requires) more granular control of layout. When using this approach, the app needs specific handling of window management and rendering APIs.
For example, if a user action causes the WebView2's Visual tree to scale, the app must adjust the WebView2's scale to render correctly relative to its parent Visuals.
APIs for Visual hosting
For a list of APIs that can be used when configuring WebView2 in a Visual hosting environment, see Rendering WebView2 using Composition in Overview of WebView2 APIs.
Compatibility and constraints
Key compatibility limitations include the operating system and rendering in framework and non-framework apps.
Operating systems
All hosting modes are supported wherever WebView2 is supported; that is, Windows 10 and later, and certain Windows Server versions. Windows 7, 8 and 8.1 are no longer supported; Windows 7 and Windows 8 only support Windowed hosting, not Visual hosting.
See also:
 Windows 7 and 8 in Introduction to Microsoft Edge WebView2.
Framework constraints
CreateCoreWebView2CompositionController does not support WinAppSDK Visuals; that is, Visual objects in the Microsoft.UI.Composition namespace, described in Enhance UI with the Visual layer (Windows App SDK/WinUI 3).
See also
Overview of WebView2 APIs
Windows 7 and 8 in Introduction to Microsoft Edge WebView2.
External:
About Windows - Window management and HWND functionality.
Using the Visual layer in desktop apps - Windows App Development.
Basic concepts - Windows App Development > DirectComposition.
Composition visual - Windows App Development > UWP. Ink input - Windows App Development > User Interaction. shellhandwriting.h header - Win32 API.

Feedback
Was this page helpful? 
Using local content in WebView2 apps
Article • 04/10/2024
In addition to loading remote content, content can also be loaded locally into WebView2. There are several approaches that can be used to load local content into a WebView2 control, including:
Navigating to a file URL.
Navigating to an HTML string.
Virtual host name mapping.
Handling the WebResourceRequested event.
These approaches are described below.
Selecting an approach
The various ways of loading local content into a WebView2 control support the following scenarios:
ﾉ Expand table
ScenarioBy
navigating to a file URLBy navigating to an HTML string By using virtual host name mapping     By using WebResourceRequestedOrigin-based
DOM APIs✔ ❌✔ ✔ DOM APIs
requiring secure context❌❌✔ ✔ Dynamic content❌✔ ❌✔ Additional web resources✔ ❌✔ ✔ Additional web resources resolved in WebView2 process✔ ❌✔ ❌These scenarios are described in more detail below.
Loading local content by navigating to a file URL
WebView2 allows navigations to file URLs, to load basic HTML or a PDF. This is the simplest and most efficient approach to loading local content. However, it is less flexible than the other approaches. Like in a web browser, file URLs are limited in some capabilities:
 The document has an origin that is unique to its file path. This means that web APIs that require an origin such as localStorage or indexedDB will work, but the stored data will not be available to other local documents loaded from other file paths.
 Some web APIs are limited to secure HTTPS URLs only and are not available to documents loaded by file URLs. This includes APIs such as
navigator.mediaDevices.getUserMedia() to acquire video or sound, navigator.geolocation.getCurrentPosition() to access the device's location, or
Notification.requestPermission() to request the user's permission to display notifications.
For each resource, the full path must be specified.
To allow references to other local files from file URIs, or to display XML files with XSL transformations applied, you can set the --allow-file-access-from-files browser argument. See
CoreWebView2EnvironmentOptions.AdditionalBrowserArguments Property.
Considerations for loading local content by navigating to a file URL
File URLs behave like they do in the browser. For example, you can't make an
XMLHttpRequest (XHR) in a file URL, because you're not working in the context of a webpage.
You must specify the full path of the file, for every resource. For example:
file:///C:/Users/username/Documents/GitHub/Demos/demo-to-do/index.htmlCross-origin resources
When specifying a file URL, the app navigates to a file on disk, not to a domain on the network. As a result, it's not possible to use cross-origin resources in the resulting document.
Origin-based DOM APIs
A document loaded via a file URL has an origin that is unique to its file path, just like in the browser. Web APIs that require an origin such as localStorage or indexedDB will work. However, different documents loaded from different file URLs are not considered to be from the same origin, and will not have access to the same stored data.
DOM APIs requiring secure context
Some web APIs are limited to secure HTTPS URLs only and are not available to documents loaded by file URLs. This includes APIs such as
navigator.mediaDevices.getUserMedia() to acquire video or sound, navigator.geolocation.getCurrentPosition() to access the device's location, or
Notification.requestPermission() to request the user's permission to display notifications. See Secure contexts	 on MDN for more information.
Dynamic content
When loading a document via a file URL, the document's content comes from a static files on disk. This means that it's not possible to dynamically modify this local content. This is different from loading documents from a web server, where each response can be dynamically generated.
Additional web resources
Relative URL resolution also work for documents loaded via a file URL. This means that the loaded document can have references to additional web resources such as CSS, script, or image files which are also served via file URLs.
Additional web resources resolved in WebView2 process
File URLs are resolved in WebView2 processes. This is a faster option than WebResourceRequested, which resolves in the host app process UI thread.
APIs for loading local content by navigating to a file URL

Example of a file URL
This section shows what a file URL looks like for a local content file path in a platformindependent way.
A WebView2 app needs to code local file URLs using a file:/// prefix and forward slashes. For example, for the Demo To Do example, the path would be:
file:///C:/Users/username/Documents/GitHub/Demos/demo-to-do/index.htmlTo copy the full path with "file" prefix for a local file:
1. Optionally, clone the Demos repo so you have a local copy. See Step 5: Clone the Demos repo in Installing the DevTools extension for Visual Studio Code.
2. In Microsoft Edge, press Ctrl+O to open a file. Open a local .html file, such as the locally cloned file Demos/demo-to-do/index.html:
C:\Users\username\Documents\GitHub\Demos\demo-to-do\index.html
The Address bar doesn't initially show the file:/// prefix, but starts with the drive letter:
C:/Users/username/Documents/GitHub/Demos/demo-to-do/index.html
3. Click the Address bar and then press the Home key, or press Ctrl+A to select the entire path.

file:///C:/Users/username/Documents/GitHub/Demos/demo-to-do/index.htmlSee also:
Demo To Do - rendered page
Demo To Do - source code
Step 5: Clone the Demos repo in Installing the DevTools extension for Visual Studio Code.
Example of navigating to a file URL

Loading local content by navigating to an
HTML string
Another method to load local content is the NavigateToString method. This approach loads the content into WebView2 directly from a string. This can be useful if you will be packaging the content via the app code, or if you'd like to dynamically create the content.
Another scenario where navigating to a string might be useful is if you want to load content that is not accessible via a URL. For example, if you have an in-memory representation of an HTML document, you could use the NavigateToString method to load that content into the WebView2 control. This can be useful if you want to avoid the need to write the content to a file or server before loading it into the control.
Considerations for loading local content by navigating to an HTML string
The HTML content string that's passed into the NavigateToString method has a size limit of 2MB. This size limit may be easy to exceed, when the string includes inlined additional resources. If this size limit is exceeded, an error is returned: "Value does not fall within the expected range".
Origin-based DOM APIs
A document loaded by using the NavigateToString method has its location set to about:blank and its origin set to null. This means that web APIs that depend on an
origin being defined, such as localStorage or indexedDB, can't be used.
DOM APIs requiring secure context
Some web APIs are limited to secure HTTPS URLs only and are not available to documents loaded via the NavigateToString method because their location is set to about:blank. This includes APIs such as navigator.mediaDevices.getUserMedia() to
acquire video or sound, navigator.geolocation.getCurrentPosition() to access the device's location, or Notification.requestPermission() to request the user's permission to display notifications. See Secure contexts	 on MDN for more information.
Dynamic content
When loading local content via the NavigateToString method, you're directly providing the content as a parameter to the method. This means you are in control of the content at runtime, and you can dynamically generate it if needed.
Additional web resources
Loading local content by using the NavigateToString method doesn't make it possible for the resulting document to reference additional web resources such as CSS, image, or script files. The method only lets you specify the string content of the HTML document. To reference additional web resources from your HTML document, use one of the other approaches described in this article, or represent those additional web resources inline in the HTML document.
Additional web resources resolved in WebView2 process
NavigateToString does not support additional web resources, as mentioned above.
APIs for loading local content by navigating to an HTML string

Example string representation of a webpage
The following is the string representation of the Demo To Do webpage. The listing below has added line wrapping for readability. In practice, these lines are concatenated into a single long line:
HTML`<html lang="en"><head>\n    
<meta charset="UTF-8">\n    
<meta name="viewport" content="width=device-width, initial-scale=1.0">\n    
<title>TODO app</title>\n    
<link rel="stylesheet" href="styles/light-theme.css" media="(prefers-colorscheme: light), (prefers-color-scheme: no-preference)">\n    
<link rel="stylesheet" href="styles/dark-theme.css" media="(prefers-colorscheme: dark)">\n    
<link rel="stylesheet" href="styles/base.css">\n    
<link rel="stylesheet" href="styles/to-do-styles.css">\n    <link rel="icon" href="data:image/svg+xml,<svg 
xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>📋
</text></svg>">\n  
</head>\n\n  
<body>\n    
<h1>📋 My tasks</h1>\n    <form>\n      
<div class="new-task-form" tabindex="0">\n        
<label for="new-task">➕ Add a task</label>\n        
<input id="new-task" autocomplete="off" type="text" placeholder="Try typing 
'Buy milk'" title="Click to start adding a task">\n        
<input type="submit" value="➡" >\n      
</div>\n      
<ul id="tasks"><li class="divider">No tasks defined</li></ul>\n    
</form>\n\n    \x3Cscript src="to-do.js">\x3C/script>\n  \n\n
</body>
</html>`
To obtain the above string:
1. Go to Demo To Do.
2. Right-click the webpage and then select Inspect to open DevTools.
3. In the Console of DevTools, enter: document.body.parentElement.outerHTML. The Console outputs a string representation of the webpage:

Example of navigating to an HTML string

Loading local content by using virtual host name mapping
Another way to load local content in a WebView2 control is to use virtual host name mapping. This involves mapping a local domain name to a local folder, so that when the WebView2 control attempts to load a resource for that domain, it will load the content from the specified local folder location instead. The origin of the document will also be the virtual host name.
This approach lets you specify the cross-origin access, by using the CoreWebView2HostResourceAccessKind enum.
Due to a current limitation, media files that are accessed using a virtual host name can be slow to load.
Considerations for loading local content by using virtual host name mapping
Origin-based DOM APIs
Local content loaded via virtual host name mapping results in a document that has an HTTP or HTTPS URL and a corresponding origin. This means that web APIs that require an origin such as localStorage or indexedDB will work, and other documents that belong to the same origin will be able to use the stored data. For more information, see Same-origin policy	 on MDN.
DOM APIs requiring secure context
Some web APIs are limited to secure HTTPS URLs only. Using virtual host name mapping provides an HTTPS URL for your local content. This means that APIs such as
navigator.mediaDevices.getUserMedia() to acquire video or sound, navigator.geolocation.getCurrentPosition() to access the device's location, or
Notification.requestPermission() to request the user's permission to display notifications are available. See Secure contexts on MDN for more information.
Dynamic content
When loading local content via a virtual host name mapping, you are mapping a virtual host name to a local folder that contains static files on disk. This means that it's not possible to dynamically modify this local content. This is different from loading documents from a web server, where each response can be dynamically generated.
Additional web resources
Local content that's loaded via virtual host name mapping has an HTTP or HTTPS URL which supports relative URL resolution. This means that the loaded document can have references to additional web resources such as CSS, script, or image files which are also served via virtual host name mapping.
Additional web resources resolved in WebView2 process
Virtual host name URLs are resolved in WebView2 processes. This is a faster option than WebResourceRequested, which resolves in the host app process UI thread.
APIs for loading local content by using virtual host name mapping

Example of virtual host name mapping

Loading local content by handling the
WebResourceRequested event
Another way you can host local content in a WebView2 control is by relying on the
WebResourceRequested event. This event is triggered when the control attempts to load a resource. You can use this event to intercept the request and provide the local content, as described in Custom management of network requests.
WebResourceRequested allows you to customize the behavior of local content on a perrequest basis. This means you can decide which requests to intercept and provide your own content for, and which requests to let the WebView2 control handle normally. However, customizing the behavior requires more code, such as virtual host mapping, and requires knowledge of HTTP, to be able to construct a proper response.
From WebView2's perspective, the resource will have come via the network, and
WebView2 will adhere to the headers that are set by the app as part of the response. Using the WebResourceRequested event is also slower than other approaches, due to the cross-process communication and processing that's needed for each request.
Custom scheme registration
If you want to use a custom scheme to make the Web Resource Request that generates the WebResourceRequested event, see Custom scheme registration in Overview of WebView2 APIs.
Considerations for loading local content by handling the WebResourceRequested event
Origin-based DOM APIs
Local content loaded via WebResourceRequested results in a document that has an HTTP or HTTPS URL and a corresponding origin. This means that web APIs that require an origin such as localStorage or indexedDB will work, and other documents that belong to the same origin will be able to use the stored data. For more information, see Sameorigin policy	 on MDN.
DOM APIs requiring secure context
Some web APIs are limited to secure HTTPS URLs only. Using WebResourceRequested allows you to replace HTTPS URL web resource requests with your own local content. This means that APIs such as navigator.mediaDevices.getUserMedia() to acquire video or sound, navigator.geolocation.getCurrentPosition() to access the device's location, or Notification.requestPermission() to request the user's permission to display notifications are available. See Secure contexts on MDN for more information.
Dynamic content
When loading local content via WebResourceRequested, you specify the local content to load in your event handler. This means you are in control of the content at runtime, and you can dynamically generate it if needed.
Additional web resources
WebResourceRequested modifies the content that's loaded via HTTP or HTTPS URLs, which support relative URL resolution. This means that the resulting document can have references to additional web resources such as CSS, script, or image files that are also served via WebResourceRequested.
Additional web resources resolved in WebView2 process
When loading content via a file URL or a virtual host name mapping, the resolution happens in the WebView2 processes. However, the WebResourceRequested event is raised on the WebView2 UI thread of your host app process, which may lead to slower loading of the resulting document.
1. WebView2 first pauses loading the web page in order to wait for the event to be sent to your host app process.
2. WebView2 then waits for your UI thread to be available.
3. WebView2 then waits for your app code to handle the event.
This can take some time. Make sure to limit calls to AddWebResourceRequestedFilter to only the web resources that must raise the WebResourceRequested event.
APIs for loading local content by handling the
WebResourceRequested event

Example of handling the WebResourceRequested event


            {                 s_.Dispose();
            }         }         catch         {             s_.Dispose();             throw;
        }         return read;
    }
    public override void Write(byte[] buffer, int offset, int count)
    {         throw new NotImplementedException();
    }
   private Stream s_;
} webView.CoreWebView2.AddWebResourceRequestedFilter("https://demo/*", 
                                                CoreWebView2WebResourceContext.All); webView.CoreWebView2.WebResourceRequested += delegate (object sender, 
                                     
CoreWebView2WebResourceRequestedEventArgs args) {     string assetsFilePath = "C:\\Demo\\" + 
                            args.Request.Uri.Substring("https://demo/*".Length - 1);     try
    {
        FileStream fs = File.OpenRead(assetsFilePath);         ManagedStream ms = new ManagedStream(fs);         string headers = "";         if (assetsFilePath.EndsWith(".html"))
        {             headers = "Content-Type: text/html";
        }         else if (assetsFilePath.EndsWith(".jpg"))
        {             headers = "Content-Type: image/jpeg";
        } else if (assetsFilePath.EndsWith(".png"))
        {             headers = "Content-Type: image/png";
        }         else if (assetsFilePath.EndsWith(".css"))
        {             headers = "Content-Type: text/css";
        }         else if (assetsFilePath.EndsWith(".js"))
        {             headers = "Content-Type: application/javascript";
        }         args.Response = webView.CoreWebView2.Environment.CreateWebResourceResponse(
                                                            ms, 200, 
"OK", headers);
    }     catch (Exception)
    {         args.Response = webView.CoreWebView2.Environment.CreateWebResourceResponse(                                                         null, 404, "Not found", "");
    }
};See also
Manage content loaded into WebView2 in Overview of WebView2 APIs
Feedback
Was this page helpful? 
Custom management of network requests
Article • 08/03/2023
The Microsoft Edge WebView2 control lets you interact with and modify network requests. You can either provide a response or modify the network request using the WebResourceRequested and WebResourceResponseReceived events. There is also special functionality that allows you to navigate with specific network requests using the NavigateWithWebResourceRequest API.
This article describes how you can modify network requests. Use this API and approach to:
Upload local file content to your app to add support for offline functionality.
Block content in a webpage, such as specific images.
Fine-tune authentication for specific pages.
Terminology:
ﾉ Expand table
TermDefinitioninterceptYour host app can intercept a request that is sent from the WebView2 control to the HTTP server, read or modify the request, and then send the unchanged or modified request to the HTTP server (or to local code instead of the HTTP server).overrideYour host app can override a response that's sent from the HTTP server to the WebView2 control, and send a custom response to the WebView2 control instead of the original response.When to use custom vs. basic approaches
The WebResourceRequested event is a low-level API that gives more control, but requires more coding and is complicated to use. For some common scenarios, we provide APIs that are easier to use and are optimized for those specific scenarios, and we recommend you use those APIs rather than the APIs discussed in this article.
Instead of using the WebResourceRequested APIs, it's preferable to use these other approaches when feasible:
 Basic Authentication
General navigation
Managing cookies in WebView2
Setting the user agent string. See UserAgent Property.
Note: For URLs with virtual hostnames, using the WebResourceRequested event isn't supported. This is because the WebResourceRequested event isn't fired for the SetVirtualHostNameToFolderMapping method.
How your host app, the WebView2 control, and the HTTP server interact
The WebView2 control sits in between your host app and the HTTP server. When your host app navigates to a URI, the WebView2 control sends a request to the HTTP server.
The HTTP server then sends a response to the WebView2 control.
Intercepting a request, to monitor or modify it
Your host app can intercept a request that is sent from the WebView2 control to the HTTP server, read or modify the request, and then send the unchanged or modified request to the HTTP server (or to local code instead of the HTTP server).
Intercepting the request allows you to customize the header content, URL, or the GET/POST method. The host app may want to intercept a request to provide optional POST content as part of the request.
The host app can change the properties of a request by using this API:

What you can do with headers
A HTTP header provides important information and metadata about a request or response. Changing headers enables you to perform powerful actions on the network.
A request header can be used to indicate the format of the response (such as the
Accept-* headers), set authentication tokens, read and write cookies (sensitive information), modify the user agent, and so on. A response header can be used to provide more context of the response.
Filtering the WebResourceRequested event based on URL and resource type
In order to receive WebResourceRequested events, specify filters for the requests that the host app is interested in, based on URL and resource type.
For example, suppose the host app is trying to replace images. In this case, the host app is only interested in WebResourceRequested events for images. The host app would only get events for images by specifying the resourceContext filter for images.

For details about how the URL filter works, see
CoreWebView2.AddWebResourceRequestedFilter Method > Remarks
Why would you want to intercept requests that are sent from WebView2?
Intercepting requests sent from WebView2 enables you to further configure your request. The host app might want to provide optional content as part of the request that the WebView2 control won't know on its own. Some scenarios include:
 You're logging into a page and the app has credentials so the app can provide authentication header without the user having to enter those credentials.
 You want offline functionality in the app so you redirect the URL to a local file path when no internet connection is detected.
 You want to upload local file content to the request server via a POST request.
Sequence for modifying requests

3. The host app navigates the WebView2 control to a webpage.
4. The WebView2 control creates a request for a resource that's needed for the webpage.
5. The WebView2 control fires a WebResourceRequested event to the host app.
6. The host app listens for and handles the WebResourceRequested event.
7. The host app can modify headers at this point. The host app can also defer the WebResourceRequested event, which means that the host app asks for more time to decide what to do.
8. The WebView2 network stack can add more headers (for example, can add cookies and authorization headers).
9. The WebView2 control sends the request to the HTTP server.
10. The HTTP server sends the response to the WebView2 control.
11. The WebView2 control fires the WebResourceResponseReceived event.
12. The host app listens for the WebResourceResponseReceived event and handles it.
Example: Intercepting a request, to monitor or modify it
In the following example, the host app intercepts the document request that is sent from the WebView2 control to the http://www.example.com HTTP server, adds a custom header value and sends the request.

Overriding a response, to proactively replace it
By default, the HTTP server sends responses to the WebView2 control. Your host app can override a response that's sent from the HTTP server to the WebView2 control, and send a custom response to the WebView2 control instead of the original response.
Sequence for overriding responses

3. The host app navigates the WebView2 control to a webpage.
4. The WebView2 control creates a request for a resource that's needed for the webpage.
5. The WebView2 control fires a WebResourceRequested event to the host app.
6. The host app listens for and handles the WebResourceRequested event.
7. The host app sets a response to the WebResourceRequested event handler. The host app can also defer the WebResourceRequested event, which means that the host app asks for more time to decide what to do.
8. The WebView2 control renders the response as the resource.
Example: Overriding a response, to proactively replace it

Constructing a custom request and navigating using that request
The NavigateWithWebResourceRequest method allows your host app to navigate the
WebView2 control using a custom WebResourceRequest. You can use this API to create a
GET or POST request that has custom headers and content. Then the WebView2 control will navigate by using this custom request.

Example: Constructing a custom request and navigating using that request

// This code posts text input=Hello to the POST form page in W3Schools.
// Need to convert post data to UTF-8 as required by the application/xwww-form-urlencoded Content-Type 
UTF8Encoding utfEncoding = new UTF8Encoding(); byte[] postData = utfEncoding.GetBytes("input=Hello");
MemoryStream postDataStream = new MemoryStream(postData.Length); postDataStream.Write(postData, 0, postData.Length); postDataStream.Seek(0, SeekOrigin.Begin);
// This acts as a HTML form submit to https://www.w3schools.com/action_page.php CoreWebView2WebResourceRequest webResourceRequest = environment.CreateWebResourceRequest("https://www.w3schools.com/action_p age.php",
                                     "POST",
                                     postDataStream,
                                    "Content-Type: application/x-wwwform-urlencoded"); webView.CoreWebView2.NavigateWithWebResourceRequest(webResourceRequest);Monitoring the requests and responses via the WebResourceResponseReceived event
You can monitor the requests and responses via the WebResourceResponseReceived event, to read any header value.
Example: Monitoring the requests and responses via the WebResourceResponseReceived event
This example shows how to read the authorization header value by monitoring the requests and responses via the WebResourceResponseReceived event.
The following code demonstrates how the WebResourceResponseReceived event can be used.

// Note: modifications made to request are set but have no effect on 
WebView processing it. private async void WebView_WebResourceResponseReceived(object sender, 
CoreWebView2WebResourceResponseReceivedEventArgs e)
{
    // Actual headers sent with request     foreach (var current in e.Request.Headers)
    {
        Console.WriteLine(current);     }
    // Headers in response received     foreach (var current in e.Response.Headers)
    {
        Console.WriteLine(current);
    }
    // Status code from response received     int status = e.Response.StatusCode;     if (status == 200)
    {
        Console.WriteLine("Request succeeded!");
        // Get response body         try         {
            System.IO.Stream content = await 
e.Response.GetContentAsync();
            // Null will be returned if no content was found for the response.
            if (content != null)
            {
                DoSomethingWithResponseContent(content);
            }         }         catch (COMException ex)         {
            // A COMException will be thrown if the content failed to load.         }
    }
}API Reference overview


See also
Call native-side code from web-side code
Web/native interop in Overview of WebView2 APIs.
Feedback
Was this page helpful? 

Printing from WebView2 apps
Article • 02/23/2023
There are several different ways to print a webpage in WebView2, which give you various levels of ease of implementation and customizing.
ﾉ Expand table
MethodDescriptionShowPrintUIOpens the WebView2 Print Preview dialog or the operating system's Print dialog. Easy to implement, minimal support for customizing.PrintSilently prints the current top-level document in the WebView2 using optional programmatically specified print settings to a printer. You can use this to build your own Print Preview dialog or print experience.PrintToPdfSilently prints the current top-level document in the WebView2 to a PDF file.
You can use this to build your own code to print the PDF file.PrintToPdfStreamSilently prints the current top-level document in the WebView2 to a PDF stream. You can use this to build your own code to print the PDF.The ShowPrintUI method to open a Print dialog
The ShowPrintUI method opens the WebView2 Print Preview dialog or the operating system's Print dialog, for the current top-level document in the WebView2 control. By using this approach, you can easily provide a familiar printing experience for users.

Example: The ShowPrintUI method to open a Print dialog
This example shows the user a Print dialog.
If printDialog is CoreWebView2PrintDialogKind.Browser, opens the browser's Print Preview dialog.
If printDialog is CoreWebView2PrintDialogKind.System, opens a system Print dialog.

The Print method to customize printing
The Print method silently prints the current top-level document in the WebView2 control by using optional, programmatically specified print settings. If you want to build your own Print Preview dialog, or build your own print experience, you can use this method. This API consists of an asynchronous Print method and a PrintSettings object.

Example 1: The Print method without a dialog, using default print settings
This example prints the current webpage to the default printer, using the default print settings, without opening a Print dialog.

Example 2: The Print method to print to a specified printer, using custom print settings
This example prints the current webpage to a specific printer, using the specified settings.


  string printerName = GetPrinterName();   CoreWebView2PrintSettings printSettings = GetSelectedPrinterPrintSettings(printerName);   string title = webView.CoreWebView2.DocumentTitle;   try
  {
    CoreWebView2PrintStatus printStatus = await webView.CoreWebView2.PrintAsync(printSettings);
    if (printStatus == CoreWebView2PrintStatus.Succeeded)
    {
      MessageBox.Show(this, "Printing " + title + " document to printer succeeded", "Print to printer");
    }     else if (printStatus == CoreWebView2PrintStatus.PrinterUnavailable)     {
      MessageBox.Show(this, "Selected printer is not found, not available, offline or error state", "Print to printer");
    }     else
    {
      MessageBox.Show(this, "Printing " + title + " document to printer is failed", "Print");
    }   }   catch(ArgumentException)
  {
    MessageBox.Show(this, "Invalid settings provided for the specified printer", "Print");
  }   catch (Exception)
  {
    MessageBox.Show(this, "Printing " + title + " document already in progress", "Print");
  }
}
// Gets the printer name by displaying the list of installed printers to the user and // returns the name of the user's selected printer. string GetPrinterName() {
  // Use GetPrintQueues() of LocalPrintServer from System.Printing to get the list of locally installed printers.
  // Display the list of printers to the user and get the desired printer to use.
  // Return the name of the selected printer.
}
// Gets the print settings for the selected printer.
// You can also get the capabilities from the native printer API, and display them // to the user to get the print settings for the current webpage and for the selected printer.
CoreWebView2PrintSettings GetSelectedPrinterPrintSettings(string printerName) {
  CoreWebView2PrintSettings printSettings = null;   printSettings = WebViewEnvironment.CreatePrintSettings();   printSettings.ShouldPrintBackgrounds = true;   printSettings.ShouldPrintHeaderAndFooter = true;   return printSettings;
  // or
  // Get PrintQueue for the selected printer and use 
GetPrintCapabilities() of PrintQueue from System.Printing
  // to get the capabilities of the selected printer.   // Display the printer capabilities to the user along with the page settings.
  // Return the user selected settings.
}The PrintToPdf method to print to a PDF file, using custom print settings
Silently prints the current top-level document in the WebView2 control to a PDF file. To completely control how printing is performed, you can print to a PDF and then build your own code to print the PDF.
This API consists of an asynchronous PrintToPdf method and a PrintSettings object.
The PrintToPdf method accepts a path that the PDF file will be saved to.
Example: The PrintToPdf method to print to a PDF file, using custom print settings
This example prints the current webpage to a PDF file, using the default path and settings.


async void PrintToPdfCmdExecuted(object target, ExecutedRoutedEventArgs e) {     if (_isPrintToPdfInProgress)
    {
        MessageBox.Show(this, "Print to PDF in progress", "Print To PDF");
        return;
    }
    CoreWebView2PrintSettings printSettings = null;     string orientationString = e.Parameter.ToString();     if (orientationString == "Landscape")
    {         printSettings = WebViewEnvironment.CreatePrintSettings();         printSettings.Orientation =
            CoreWebView2PrintOrientation.Landscape;     }
    Microsoft.Win32.SaveFileDialog saveFileDialog =         new Microsoft.Win32.SaveFileDialog();     saveFileDialog.InitialDirectory = "C:\\";     saveFileDialog.Filter = "PDF Files|*.pdf";
    Nullable<bool> result = saveFileDialog.ShowDialog();     if (result == true) {
        _isPrintToPdfInProgress = true;         bool isSuccessful = await webView.CoreWebView2.PrintToPdfAsync(             saveFileDialog.FileName, printSettings);
        _isPrintToPdfInProgress = false;         string message = (isSuccessful) ?
            "Print to PDF succeeded" : "Print to PDF failed";
        MessageBox.Show(this, message, "Print To PDF Completed");
    }
}The PrintToPdfStream method to print to a PDF stream, using custom print settings
Silently prints the current top-level document in the WebView2 control to a PDF stream. To completely control how printing is performed, you can print to a PDF and then build your own code to print the PDF. This API consists of an asynchronous PrintToPdfStream method and a PrintSettings object.
 CoreWebView2PrintSettings ClassExample: The PrintToPdfStream method to print to a PDF stream, using custom print settings
This example prints the PDF data of the current webpage to a stream.

See also
Printing in Overview of WebView2 APIs.
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
Introduction to Microsoft Edge WebView2

Feedback
Was this page helpful? 

WebView2 browser flags
Article • 09/24/2024
One of the ways you can interact with Microsoft Edge WebView2 and impact behavior is by passing browser flags (arguments, or switches) to WebView2. These browser flags are useful for testing forthcoming features, and for diagnosing issues.

Generally, the flags are owned by both Chromium and Microsoft Edge. Chromium flags are not owned or controlled by Microsoft Edge, so Microsoft Edge doesn't have control over when or how the flags are removed or altered in their behavior.
You can set browser flags in your local device environment, or set browser flags programmatically through code. Both approaches are described below.
Setting browser flags in your local device environment
To test forthcoming features or to diagnose issues, we recommend using browser flags in your local device environment, via setting the WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS environment variable or via registry keys. For more information, see the following Win32 API Reference:
CreateCoreWebView2EnvironmentWithOptions.
Setting browser flags programmatically through code
Instead of setting browser flags in your local device environment, an alternative approach is to set browser flags programmatically, by passing the browser flags as the AdditionalBrowserArguments property of CoreWebView2EnvironmentOptions. If you set browser flags programmatically, be sure to remove the flags in code before shipping your app, to avoid accidentally shipping the flags in production.

Available WebView2 browser flags
The following are some of the flags we've seen used.
ﾉ Expand table
FlagDescriptionaccept-langSpecifies Accept-Language to send to servers and expose to JavaScript via the Navigator.language	 DOM property.
The format is language[-country], where language is the 2-letter code from ISO-639.allow-file-access-from-filesAllows reading file:// URIs from other file:// URIs.allow-insecure-localhostEnables TLS/SSL errors on localhost to be ignored, so that no interstitial is done and no blocking of requests is done.allow-run-as-systemBy default, the Edge WebView browser exits if launched as System (launching as System is not recommended). This flag bypasses that check, so that even if the Edge WebView browser is launched as System, the Edge WebView browser doesn't exit.allow-running-insecure-contentEnables insecure content in Cast Web Runtime. This flag unblocks MSPs that serve content from HTTP sources.auto-open-devtools-for-tabsMakes Edge WebView auto-open the DevTools window for each tab. For use by developers and by automation.AutofillReplaceCachedWebElementsByRendererIdsIf enabled, replaces cached web elements in AutofillAgent and FormTracker by their renderer IDs.autoplay-policyCommand-line flag name to set the autoplay policy.BlockInsecurePrivateNetworkRequestsWhen this feature is enabled, private network requests that are initiated from non-secure contexts in the public address space are blocked.block-new-web-contentsIf true, all pop-ups and calls to window.open fail.BreakoutBoxPreferCaptureTimestampInVideoFramesReverts the behavior of the Timestamp property of the
CoreWebView2Texture class to match legacy behavior of WebView2 Runtime version 124 and earlier.disable-background-timer-throttlingDisables task throttling of timer tasks from background pages.disable-domain-action-user-agent-overrideDisables the per-domain User Agent override from the Domain Actions feature.disable-gpuDisables GPU hardware acceleration. If a software renderer isn't in place, the GPU process doesn't launch.disable-gpu-driver-bug-workaroundsDisables workarounds for various GPU driver bugs.disable-site-isolation-trialsDisables site isolation.disable-web-securityDisables cross-origin policy and doesn't enforce the same-origin policy. Use for website testing only.disk-cache-sizeForces the maximum disk space to be used by the disk cache, in bytes.
FlagDescriptiondo-not-de-elevatePrevents de-elevation of the WebView2 on launch. Used after de-elevating, to prevent infinite loops.edge-webview-debugging-scriptRuns PostWebMessage script asynchronously.edge-webview-enable-mojo-ipczEnables MojoIpcz (mojo-ipcz) for apps that use WebView2.edge-webview-foreground-boost-opt-inOpts-in to foreground boost.edge-webview-foreground-boost-opt-outOpts-out of foreground boost.edge-webview-force-personal-contextForces Edge WebView browser processes to run in WIP personal context.edge-webview-interactive-draggingEnables pointer events and focus events to occur on elements that have the --app-region: drag attribute.
Drag elements are interactive by default.edge-webview-disable-interactive-draggingDisables pointer events and focus events from occuring on elements that have the --app-region: drag attribute. If this flag isn't set, drag elements are interactive by default.edge-webview-is-backgroundIndicates that WebView is being launched in the background.edge-webview-no-dpi-workaroundDisables the "DPI awareness app compatibility shim" workaround, which launches Edge WebView browser process via a shell, so that the process doesn't inherit the "app compat" shim.edge-webview-run-with-package-idRuns WebView processes with a package identity (package ID) for a bridged Desktop app.edge-webview-run-without-package-idRuns WebView processes without a package identity (package ID) for a bridged Desktop app.embedded-browser-webview-dpi-awarenessSets the DPI awareness level of the server-side processes.enable-experimental-web-platform-featuresEnables Web Platform features that are in development.enable-loggingEnable logging at the error level.force-color-profileForce all monitors to be treated as though they have the specified color profile. Valid values: srgb, generic-rgb.force-device-scale-factorOverrides the device scale factor for the Edge WebView browser UI and the contents.force-fieldtrialsCan be used to force field trials when testing changes locally. The argument is a list of name/value pairs, separated by forward slashes. If a trial name is prefixed with an asterisk, that trial will start activated. For example, the following argument defines two trials, with the second one activated:
EdgeNow/Enable/*MaterialDesignNTP/Default/. This option can also be used by the browser process to send the list of trials to a non-browser process, using the same format.
FlagDescriptionforce-fieldtrial-paramsCan be used to force parameters of field trials when testing changes locally. The argument is a parameter list of (key, value) pairs, prefixed by an associated (trial, group) pair. For multiple (trial, group) pairs, use a comma separator.force-renderer-accessibilityWhether to force renderer accessibility to be on, instead of enabling renderer accessibility on-demand when a screen reader is detected. The disable-rendereraccessibility flag overrides this flag, if the disablerenderer-accessibility flag is present.HardwareMediaKeyHandlingEnables handling of hardware media keys for controlling media.ignore-certificate-errorsIgnores certificate-related errors.ignore-gpu-blocklistWhether to ignore the GPU blocklist.incognitoForces Incognito mode even if user data directory is specified by using the --user-data-dir flag.isolate-originsRequire dedicated processes for a set of origins, specified as a comma-separated list. For example: --isolateorigins=https://www.foo.com,https://www.bar.com.js-flagsSpecifies the flags passed to JS engine.langThe language file that WebView2 want to try to open. Of the form language[-country] where language is the 2letter code from ISO-639.log-net-logEnables saving net log events to a file. If a value is given, that value is used as the directory path and file name. If no value is given, the file is named netlog.json, and is placed in the user data directory.msAbydosEnables the "handwriting-to-text" experience.msAbydosGestureSupportAllows users to use gestures (such as the scratchout gesture) to delete text by using a pen. Valid only if the msAbydos flag is enabled.msAbydosHandwritingAttrWhether the "handwriting-to-text" experience is enabled for input elements at the DOM level. Valid only if the msAbydos flag is enabled.msEdgeDesignerUIUse this flag to disable the Designer Shoreline App. This feature is not supported in WebView2.msEdgeHubAppDesignerUse this flag to disable the Designer Shoreline App. This feature is not supported in WebView2.msEdgeDesignerDriverFixUse this flag to disable getting content and automatically showing the Designer feature. This feature is not supported in WebView2.
FlagDescriptionmsEdgeFluentOverlayScrollbarForce-enables Fluent Overlay scrollbars, overriding whatever value kFluentScrollbar may hold at the moment.msEdgeDevToolsWdpRemoteDebuggingEnables remote debugging. See Remote debugging
WebView2 WinUI 2 (UWP) apps, Remotely debug Windows devices.msEdgeWebViewApplyWebResourceRequestedFilterForOOPIFsIf this flag is enabled, the AddWebResourceRequestedFilter method (including overloads) will also apply to out-ofprocess iframes.
.NET: AddWebResourceRequestedFilter WinRT: AddWebResourceRequestedFilter Win32:
AddWebResourceRequestedFilterWithRequestSourceKindsmsEnhancedTextContrastImproves text contrast enhancement and gamma correction to match the quality and clarity of other native Windows applications. When this flag is used, font rendering respects user ClearType Tuner settings when applying text contrast enhancement and gamma correction.msEnhancedTrackingPreventionEnabledEnables native privacy protection features, such as blocking cookies and web requests that reside in domains that are known to be tracking domains.msFloatyModeIf false, disables the Floaty feature. Use this flag to disable the Floaty feature, because WebView doesn't support browser retention experiments.msFloatyShouldHonorIndiaHoldoutIf true, honors the India holdout group. Use this flag, set to false, to disable the Floaty feature that's enabled if the user is part of the India holdout group, because
WebView doesn't support browser retention experiments.msOverlayScrollbarWinStyleWhether the users can change between overlay and nonoverlay modes for Fluent scrollbars.msPdfEnableAsPreviewThis features enables the PDF viewer to launch with a minimal toolbar and in read-only preview mode.msSingleSignOnOSForPrimaryAccountIsSharedIf enabled, allows implicit sign-in to Microsoft webpages using any account, by using the information from the primary OS account.msSmartScreenProtectionIf enabled, SmartScreen protection will be available.msUseSpellCheckCorrectionsCardIf enabled, a new corrections card UI is shown when the user clicks a misspelled word.msWebView2CancelInitialNavigationIf enabled, cancels the initial navigation in WebView2 to improve startup performance.msWebView2CodeCacheIf enabled, JavaScript resources that are loaded in a
WebView2 app via SetVirtualHostNameToFolderMapping or add_WebResourceRequested are eligible for bytecode caching, which should speed up the third and subsequent
FlagDescriptionloads. This feature also enables bytecode caching for any other components that use the DevTools network interception mechanism to provide custom responses (see Custom management of network requests).msWebView2EnableDownloadContentInWebResourceResponseReceivedIf enabled, allow responses of navigations that become downloads to be available in
WebResourceResponseReceivedmsWebView2TextureStreamIf enabled, allows to stream captured or composed video frames to the WebView2 where JavaScript can render or otherwise interact with the frames via W3C standard DOM APIs including the Video element, and MediaStream.msWebView2EnableDraggableRegionsIf true, enables webpages within WebView2 make use of the app-region: drag\|nodrag CSS style, which causes elements with that style to behave like a titlebar. Without this flag, the app-region: drag\|nodrag CSS style has no effect.msWebView2CodeCacheIf enabled, JavaScript resources that are loaded in a
WebView2 app via SetVirtualHostNameToFolderMapping or add_WebResourceRequested are eligible for bytecode
caching, which should speed up the third and subsequent loads. This feature also enables bytecode caching for any other components that use the DevTools network interception mechanism to provide custom responses.msWebView2NativeEventDispatchIf enabled, uses a native mojo connection to dispatch internal events, such as web messages to a renderer process.msWebView2SimulateMemoryPressureWhenInactiveIf enabled, simulates memory pressure for an inactive WebView.msWebView2TreatAppSuspendAsDeviceSuspendIf enabled, when all WebViews are suspended, WebView2 treats the app as if the device is suspended, and pauses all delayed tasks and timers.no-proxy-serverOverrides any other proxy server flags that are passed.net-log-capture-modeSets the granularity of events to capture in the network log. Valid values: Default, IncludeSensitive, Everything.no-network-profile-warningIf enabled, the browser warns if the UDF is on a network share. This flag is only supported on Windows; this flag is ignored on other platforms.no-sandboxDisables the sandbox for all process types that are normally sandboxed. Meant to be used as a browser-level flag for testing purposes only.no-first-runSkips First-Run tasks, regardless of whether it's actually the First Run, and skips displaying the What's New page.
This flag is overridden by kForceFirstRun (for the FirstRun Experience (FRE)) and by kForceWhatsNew (for displaying What's New). This flag doesn't drop the First Run sentinel, and thus doesn't prevent the First-Run
FlagDescriptionexperience from occurring the next time the Edge WebView browser is launched without this flag. This flag doesn't update the last What's New milestone, so doesn't prevent What's New from being displayed the next time the Edge WebView browser is launched without this flag.PartitionedCookiesWhen enabled, sites can opt-in to having their cookies partitioned by the top-level site by using the Partitioned attribute. Partitioned cookies are only sent when the browser is on the same top-level site that it was on when the cookie was set.proxy-auto-detectForces proxy auto-detection.proxy-bypass-listA list of hosts for which proxy settings are bypassed; the specified hosts then use direct connections instead. This flag is ignored unless --proxy-server is also specified.
Multiple hosts can be supplied as a comma-separated list.proxy-serverA proxy server that overrides system settings. This flag only affects HTTP and HTTPS requests.remote-allow-originsEnables web socket connections from the specified origins only. The * wildcard allows any origin.remote-debugging-portEnables remote debugging over HTTP on the specified port.RendererAppContainerEnables Renderer AppContainer.RestartIndicates that Microsoft Edge WebView2 browser process was restarted (such as after a flag change). Use this flag to ignore the launch when recording the Launch.Mode2 metric.sdsm-stateThe "Super Duper Secure Mode" state. Valid values: off, basic, balanced, strict.SharedArrayBufferIf enabled, indicates that a SharedArrayBuffer thread is present.SpareRendererForSitePerProcessIf this flag is enabled, the Edge Webview spare renderer process tries to always have a warm spare renderer process running for the most recently requested
BrowserContext. This feature is only consulted in site-perprocess mode.ThirdPartyStoragePartitioningEnables partitioning of third-party storage, such as
IndexedDB or CacheStorage, by the top-level site, to reduce fingerprinting.unsafely-treat-insecure-origin-as-secureTreats given (insecure) origins as secure origins. Multiple origins can be specified, as a comma-separated list. For the definition of secure contexts, see Secure Contexts , including the section Is origin potentially trustworthy? . Example: --unsafely-treat-insecure-origin-assecure=http://a.test,http://b.testFlagDescriptionuse-fake-device-for-media-streamUses a fake device for Media Stream to replace an actual camera and microphone.use-fake-ui-for-media-streamBypasses the media stream infobar, by selecting the default device for media streams (such as WebRTC). Works with --use-fake-device-for-media-stream. Prefer using -auto-accept-camera-and-microphone-capture instead, which doesn't interact with screen capture, such as capturing a browser tab.use-system-proxy-resolverUses WinHttp to resolve proxies instead of using WebView2's normal proxy resolution logic. This flag is only supported in Windows.user-agentA string used to override the default user agent with a custom user agent.user-data-migratedIndicates that this process is the product of a relaunch following migration of user data.UseBackgroundNativeThreadPoolIf this is enabled, WebView2 ThreadPoolImpl will use a background ThreadGroup backed by a native thread pool implementation.UseNativeThreadPoolIf enabled, WebView2 ThreadPoolImpl uses a foreground
ThreadGroup that's backed by a native thread pool implementation.V8MaglevEnables the Maglev compiler. This only sets the V8 flag when manually overridden; otherwise, it defers to whatever the V8 default is.
See also
Introduction to Microsoft Edge WebView2
WebView2 API Reference - API Reference links for additional platforms and languages, such as WinRT/C++ (COM).

Feedback
Was this page helpful? 
Interop of native and web code
Article • 06/19/2023
The Microsoft Edge WebView2 control lets you embed web content into native applications. You can use WebView2 in different ways, depending on what you need to accomplish. This article describes how to communicate using simple messages, JavaScript code, and native objects.
Some common use cases include:
Update the native host window title after navigating to a different website.
Send a native camera object and use its methods from a web app.
Run a dedicated JavaScript file on the web side of an application.
Before you begin
This tutorial steps through the Sample App code to demonstrate some of the communication capabilities in WebView2. Clone the WebView2Samples repo, open a
.sln file in Visual Studio, build the project, and run (debug) to follow along with the steps in this article.
For detailed steps about cloning the repo, see WebView2 sample apps.
Scenario: Simple messaging
WebView2 controls let you exchange simple messages between web and native sides of an application. You can use data types such as JSON or String to send messages between the host application and WebView2.
Send messages from the host app to WebView2
This example shows how the sample app changes the color of text in the front end, based on a message from the host app.
To see messaging in action:
1. Run the sample app, then select the Scenario tab and select the Web Messaging option.
The following screen appears:

Script > Post Message JSON. Then click OK. The message turns blue:

How were we able to change text color? The sample starts by creating a button, on the native side. Then the sample adds the following code to post the web message when the button is clicked. This code changes the color of the web text to blue.
The example includes C++ code to create a Windows button that calls SendJsonWebMessage() when clicked.
For more information about creating a button in C++, see How to Create a Button.
3. When the button is clicked, it calls the following code from ScriptComponent.cpp.
C++// Prompt the user for some JSON and then post it as a web message.
void ScriptComponent::SendJsonWebMessage()
{
    TextInputDialog dialog(        m_appWindow->GetMainWindow(),         L"Post Web Message JSON",
        L"Web message JSON:",
        L"Enter the web message as JSON.",         L"{\"SetColor\":\"blue\"}");     if (dialog.confirmed)
    {         m_webView->PostWebMessageAsJson(dialog.input.c_str());
    }
}
The example uses a JavaScript event listener on the web.
4. ScenarioWebMessage.html includes the following JavaScript in the header:
JavaScriptwindow.chrome.webview.addEventListener('message', arg => {    if ("SetColor" in arg.data) {       document.getElementById("colorable").style.color =       arg.data.SetColor;
   }
});The event listener listens for a message event and makes the message text colorable.
5. The HTML file describes the messaging exercise:
HTML<h1>WebMessage sample page</h1>
<p>This page demonstrates basic interaction between the host app and the webview by means of Web Messages.</p>
<h2>Posting Messages</h2>
<p id="colorable">Messages can be posted from the host app to the webview using the functions
<code>ICoreWebView2::PostWebMessageAsJson</code> and <code>ICoreWebView2::PostWebMessageAsString</code>. Try selecting the menu item "Script > Post Message JSON" to send the message <code>{"SetColor":"blue"}</code>.
It should change the text color of this paragraph.</p>
6. The Post Message JSON menu item is in the Microsoft Visual C++ generated resource script file WebView2APISample.rc.
XMLMENUITEM "Post Message JSON",           IDM_POST_WEB_MESSAGE_JSON7. The script file, in turn, calls the case IDM_POST_WEB_MESSAGE_JSON in ScriptComponent.cpp.
C++case IDM_POST_WEB_MESSAGE_JSON:    SendJsonWebMessage();    return true;That completes the example showing how WebView2 communicates through simple messages.
Receive message strings via postMessage
This example follows the Receiving Messages section of the webpage, to change the text of the title bar. The host app receives a message from WebView2 with the new title bar text.
The C++ file handles the title text and communicates it to the host app as a string.
1. When the button is clicked, WebView2 transmits a message from the web page to the native application using window.chrome.webview.postMessage in ScenarioWebMessage.html	.
HTMLfunction SetTitleText() {    let titleText = document.getElementById("title-text");    window.chrome.webview.postMessage(`SetTitleText 
${titleText.value}`);
}2. The HTML file includes a text box and button to send a message to the host app:

HTML<h2>Receiving Messages</h2>
<p>The host app can receive messages by registering an event handler with <code>ICoreWebView2::add_WebMessageReceived</code>. If you enter text and click "Send", this page will send a message to the host app which will change the text of the title bar.</p>
<input type="text" id="title-text"/>
<button onclick="SetTitleText()">Send</button>3. The event handler in ScenarioWebMessage.cpp processes the new title text string and communicates it to the host app as a string.
C++// Setup the web message received event handler before navigating to // ensure we don't miss any messages.
CHECK_FAILURE(m_webView->add_WebMessageReceived(
   
Microsoft::WRL::Callback<ICoreWebView2WebMessageReceivedEventHandler>(
      [this](ICoreWebView2* sender, 
ICoreWebView2WebMessageReceivedEventArgs* args) {
   wil::unique_cotaskmem_string uri;    CHECK_FAILURE(args->get_Source(&uri));
   // Always validate that the origin of the message is what you expect.
   if (uri.get() != m_sampleUri)
   {       return S_OK;
   }
   wil::unique_cotaskmem_string messageRaw;    CHECK_FAILURE(args->TryGetWebMessageAsString(&messageRaw));    std::wstring message = messageRaw.get();
   if (message.compare(0, 13, L"SetTitleText ") == 0)
   {       m_appWindow->SetTitleText(message.substr(13).c_str());
   }    else if (message.compare(L"GetWindowBounds") == 0)
   {
      RECT bounds = m_appWindow->GetWindowBounds();       std::wstring reply =
            L"{\"WindowBounds\":\"Left:" + std::to_wstring(bounds.left)
            + L"\\nTop:" + std::to_wstring(bounds.top)
            + L"\\nRight:" + std::to_wstring(bounds.right)
            + L"\\nBottom:" + std::to_wstring(bounds.bottom)
            + L"\"}";
      CHECK_FAILURE(sender->PostWebMessageAsJson(reply.c_str()));    }   return S_OK;
}).Get(), &m_webMessageReceivedToken));
Round-trip messages
This example follows the <h2>Round trip</h2> section of the WebMessage sample page,
ScenarioWebMessage.html	. This example shows a round-trip message from WebView2 to the host app and back. The host app receives a request from WebView2 and returns the bounds of the active window.
When requested by the host app, the C++ file gets the window bounds and sends the data to WebView2 as a JSON web message.
1. The HTML file includes a button to get window bounds from the host app:
HTML<h2>Round trip</h2>
<p>The host app can send messages back in response to received messages. If you click the <b>Get window bounds</b> button, the host app reports back the bounds of its window, which are displayed in the text box.</p>
<button onclick="GetWindowBounds()">Get window bounds</button><br>
<textarea id="window-bounds" rows="4" readonly></textarea>2. When the user clicks the button, WebView2 transmits a message from the web page to the native application using window.chrome.webview.postMessage.
HTMLfunction GetWindowBounds() {    window.chrome.webview.postMessage("GetWindowBounds"); }3. The event handler in ScenarioWebMessage.cpp	 gets the window bounds and sends the data to the host app using TryGetWebMessageAsString:
C++// Setup the web message received event handler before navigating to // ensure we don't miss any messages.
CHECK_FAILURE(m_webView->add_WebMessageReceived(
   
Microsoft::WRL::Callback<ICoreWebView2WebMessageReceivedEventHandler>(
      [this](ICoreWebView2* sender, 
ICoreWebView2WebMessageReceivedEventArgs* args){
   wil::unique_cotaskmem_string uri;    CHECK_FAILURE(args->get_Source(&uri));
   // Always validate that the origin of the message is what you expect.
   if (uri.get() != m_sampleUri)
   {       return S_OK;
   }
   wil::unique_cotaskmem_string messageRaw;    CHECK_FAILURE(args->TryGetWebMessageAsString(&messageRaw));    std::wstring message = messageRaw.get();
   if (message.compare(0, 13, L"SetTitleText ") == 0)
   {       m_appWindow->SetTitleText(message.substr(13).c_str());
   }    else if (message.compare(L"GetWindowBounds") == 0)
   {
      RECT bounds = m_appWindow->GetWindowBounds();       std::wstring reply =
            L"{\"WindowBounds\":\"Left:" + std::to_wstring(bounds.left)
            + L"\\nTop:" + std::to_wstring(bounds.top)
            + L"\\nRight:" + std::to_wstring(bounds.right)
            + L"\\nBottom:" + std::to_wstring(bounds.bottom)
            + L"\"}";
      CHECK_FAILURE(sender->PostWebMessageAsJson(reply.c_str()));
   }
   return S_OK;
}).Get(), &m_webMessageReceivedToken));The window bounds are displayed on the web page.
Scenario: Send JavaScript code
This scenario shows how to run JavaScript on the web side. In this approach, the host app specifies the JavaScript code to run, and passes the code to the web through
ExecuteScriptAsync. The ExecuteScriptAsync function returns the JavaScript result back to the ExecuteScript caller.
For more information, see Use JavaScript in WebView2 (Run JavaScript from native code).
Scenario: Send native objects
Pass the native object to the web. Then call the object's methods from the web.
To use messages that represent method calls, use the AddHostObjectToScript API. At a high level, this API lets you expose native (host) objects into the web side and act as a proxy. Access these objects by using window.chrome.webview.hostObjects.{name}.
Passing a native object to the web side of an application is described in the AddHostObjectToScript section of interface ICoreWebView2.
Congratulations! You've successfully embedded web content into native applications.
See also
 Web/native interop in Overview of WebView2 APIs.

Feedback
Was this page helpful?  Yes  No

Call web-side code from native-side code
Article • 06/19/2023
Using JavaScript in WebView2 controls allows you to customize native apps to meet your requirements. This article explores how to use JavaScript in WebView2, and reviews how to develop using advanced WebView2 features and functions.
Before you begin
This article assumes that you already have a working project. If you don't have a project, and want to follow along, see Get started with WebView2.
Basic WebView2 functions
Use the following functions to begin embedding JavaScript in your WebView2 app.
ﾉ Expand table
APIDescriptionExecuteScriptAsyncRun JavaScript in a WebView2 control. Call this method after the page Document Object Model (DOM) content is loaded or the navigation is completed. See Get started with WebView2.AddScriptToExecuteOnDocumentCreatedAsyncRuns on every page when the DOM is created. Call this method after the CoreWebView2 is initialized.Scenario: ExecuteScript JSON-encoded results
Because the result of ExecuteScriptAsync is JSON-encoded, if the result of evaluating the JavaScript is a string, you will receive a JSON-encoded string and not the value of the string.
For example, the following code executes script that results in a string. The resulting string includes a quote at the start, a quote at the end, and escaping slashes:
C#
string result = await coreWebView2.ExecuteScriptAsync(@"'example'"); Debug.Assert(result == "\"example\"");
The script returns a string that ExecuteScript JSON-encodes for you. If you call
JSON.stringify from your script, then the result is doubly encoded as a JSON string the value of which is a JSON string.
Only the properties that are directly in the result are included in the JSON-encoded object; inherited properties aren't included in the JSON-encoded object. Most DOM objects inherit all properties, so you'll need to explicitly copy their values into another object to return. For example:
ﾉ Expand table
ScriptResultperformance.memory{}(() => { const {totalJSHeapSize, usedJSHeapSize} = performance.memory; return {totalJSHeapSize, usedJSHeapSize}; })();{"totalJSHeapSize":4434368,"usedJSHeapSize":2832912}When we return just performance.memory we don't see any of its properties in the result because all properties are inherited. If instead, we copy particular property values from performance.memory into our own new object to return, then we see those properties in
the result.
When executing script via ExecuteScriptAsync that script is run in the global context. It helps to have your script in an anonymous function so that any variables you define aren't polluting the global context.
For example:
 If you run the script const example = 10; more than once, the subsequent times you run the script will throw an exception, because example was defined the first time you ran it.
 If you instead run the script (() => { const example = 10; })(); the example variable is defined in the context of that anonymous function. That way, it's not polluting the global context, and can be run more than once.
Scenario: Running a dedicated script file
In this section, you access a dedicated JavaScript file from your WebView2 control.

To solve the problem, create a separate JavaScript file with your code, and then pass a reference to that file using the ExecuteScriptAsync parameters.
1. Create a .js file in your project, and add the JavaScript code that you want to run.
For example, create a file called script.js.
2. Convert the JavaScript file to a string that is passed to ExecuteScriptAsync, by pasting the following code after the page is done navigating:
C#string text = 
System.IO.File.ReadAllText(@"C:\PATH_TO_YOUR_FILE\script.js");3. Pass your text variable using ExecuteScriptAsync:
C#await webView.CoreWebView2.ExecuteScriptAsync(text);Scenario: Removing drag-and-drop functionality
In this section, you use JavaScript to remove the drag-and-drop functionality from your WebView2 control.
To begin, explore the current drag-and-drop functionality:
1. Create a .txt file in order to drag-and-drop. For example, create a file named contoso.txt and add text to it.
2. Press F5 to build and run the project.
3. Drag-and-drop the contoso.txt file into the WebView2 control. A new window opens, which is the result of the code in your sample project:

4. Next, add code to remove the drag-and-drop functionality from the WebView2 control. Paste the following code after the CoreWebView2 object is initialized in your code:
C#await webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync(
   "window.addEventListener('dragover',function(e) {e.preventDefault();},false);" +
   "window.addEventListener('drop',function(e){" +
      "e.preventDefault();" +
      "console.log(e.dataTransfer);" +
      "console.log(e.dataTransfer.files[0])" +
   "}, false);");5. Press F5 to build and run the project.
6. Try to drag and drop contoso.txt into the WebView2 control. Confirm that you can't drag and drop.
Scenario: Removing the context menu
In this section, you remove the right-click menu from your WebView2 control.
To begin, explore the current functionality of the right-click menu:
1. Press F5 to build and run the project.
2. Right-click anywhere on the WebView2 control. The context menu displays the default right-click menu commands:

Next, add code to remove the right-click menu functionality from the WebView2 control.
3. Paste the following code after the CoreWebView2 object is initialized in your code:
C#await webView.CoreWebView2.ExecuteScriptAsync("window.addEventListener('conte xtmenu', window => {window.preventDefault();});");4. Press F5 to build and run the project. Confirm that you can't open a right-click menu.
See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
Web/native interop in Overview of WebView2 APIs.

Feedback
Was this page helpful? 

Call native-side code from web-side code
Article • 03/28/2023
WebView2 enables applications to bridge the gap between the web and native sides of an application by enabling an object to be passed to the web. You expose selected native-side APIs to your webpage JavaScript through an intermediary native host object that's defined in the native code. The native-side APIs are projected into JavaScript by using the WebView2 AddHostObjectToScript API.

This article mainly covers Win32/C++, and also covers some aspects of .NET/C# within frames. For WinRT, see Call native-side WinRT code from web-side code.
Why use AddHostObjectToScript?
 When developing a WebView2 app, you may encounter a native object whose methods or properties you find useful. You might want to trigger these native object methods from web-side code, as a result of user interaction on the web side of your app. In addition, you might not want to re-implement your native objects' methods in your web-side code. The AddHostObjectToScript API enables re-use of native-side code by web-side code.
 For example, there might be a native webcam API, which would require re-writing a large amount of code on the web side. Having the ability to call the native object's methods is quicker and more efficient than re-coding the object's methods on the web side of your app. In this case, your native-side code can pass the object to your app's web-side, JavaScript code, so that your JavaScript code can reuse the native API's methods.
Scenarios that may benefit from using host objects in script:
 There is a keyboard API, and you want to call the keyboardObject.showKeyboard function from the web side.
 Accessing the file system, not just the webpage sandbox, via JavaScript. JavaScript is sandboxed, which prevents it from directly accessing the file system. By using
AddHostObjectToScript to create a native object that's exposed to JavaScript, you can use the host object to manipulate files on the file system, not just in the webpage sandbox.
This article uses the Win32 sample app to demonstrate some practical applications of AddHostObjectToScript.
Step 1: Install Visual Studio, install git, clone the
WebView2Samples repo, and open the solution
1. Download and install Microsoft Visual Studio 2019 (version 16.11.10) or later, and other prerequisites as described in Win32 sample app. The Win32 sample app was created using Visual Studio 2019, so to follow the example steps in this article, we recommend starting with Visual Studio 2019 rather than Visual Studio 2022.
2. Clone the WebView2Samples repo. The repo includes the Win32-specific WebView2 sample app. For instructions, in a new window or tab, see Win32 sample app.
3. Open Microsoft Visual Studio. We recommend initially opening the Win32 sample by using Visual Studio 2019.
4. In your local copy of the cloned WebView2Samples repo, open WebView2Samples > SampleApps > WebView2Samples.sln . WebView2Samples.sln includes the
WebView2APISample project, which is the Win32 sample app. Keep the sample app solution open, to follow along with the rest of this article.
Step 2: Define the host object's COM interface using IDL
Define the host object's COM interface in an .idl file, like HostObjectSample.idl, to describe the methods and properties on the host object.
First, use interface definition language (IDL) to define the host object's COM interface. This host object definition in an idl file describes the exposed (or "wrapped") nativeside properties and methods. The IDL (.idl) file defines an interface, but doesn't implement it.
1. In Visual Studio Solution Explorer, expand WebView2APISample > Source Files, and then double-click HostObjectSample.idl to open it.
The following code defines the IHostObjectSample interface, which inherits
IUnknown as is standard for COM. Use this IHostObjectSample definition as a template for defining your object's methods, properties, callback functions, and so on.
C#import "oaidl.idl"; import "ocidl.idl";
[uuid(0a7a4655-5660-47d0-8a37-98ae21399e57), version(0.1)] library HostObjectSampleLibrary {
    [uuid(3a14c9c0-bc3e-453f-a314-4ce4a0ec81d8), object, local]     interface IHostObjectSample : IUnknown
    {
        // Demonstrates a basic method call with some parameters and a return value.
        HRESULT MethodWithParametersAndReturnValue([in] BSTR stringParameter, [in] INT integerParameter, [out, retval] BSTR* stringResult);
        // Demonstrate getting and setting a property.
        [propget] HRESULT Property([out, retval] BSTR* stringResult);
        [propput] HRESULT Property([in] BSTR stringValue);
        [propget] HRESULT IndexedProperty(INT index, [out, retval] BSTR * stringResult);
        [propput] HRESULT IndexedProperty(INT index, [in] BSTR stringValue);
        // Demonstrate native calling back into JavaScript.         HRESULT CallCallbackAsynchronously([in] IDispatch* callbackParameter);
        // Demonstrates a property which uses Date types.         [propget] HRESULT DateProperty([out, retval] DATE * dateResult);
        [propput] HRESULT DateProperty([in] DATE dateValue);
        // Creates a date object on the native side and sets the DateProperty to it.
        HRESULT CreateNativeDate();
    };2. Above, note the DateProperty, which uses a DATE type. We'll focus on this date demo property in this article.
Step 3: Define a host object coclass
Next, the example defines the HostObjectSample coclass to include IHostObjectSample and IDispatch.
1. In HostObjectSample.idl, examine the HostObjectSample coclass (component object class), which includes the IHostObjectSample and IDispatch interfaces:
C#    [uuid(637abc45-11f7-4dde-84b4-317d62a638d3)]     coclass HostObjectSample
    {
        [default] interface IHostObjectSample;         interface IDispatch;
    };
}2. The HostObjectSample coclass includes interface IDispatch, which is needed for the host object to work with AddHostObjectToScript.
Step 4: Implement the members of the C++ object
In the Win32 sample app code, HostObjectSampleImpl.cpp takes the skeleton that's created in the COM IDL file and implements each member of the C++ object. This C++ (.cpp) file implements the defined interface (and also implements IDispatch).
Implement all the functions that are defined in your object's interface, as we outlined in the IDL file. Be sure to implement the functions that are required by IDispatch. The compiler will throw an error if these functions aren't defined.
Next, we examine two specific properties that were defined in the IDL, to show how the IDL is related to the .cpp file.
1. In Visual Studio Solution Explorer, expand WebView2APISample > Source Files, and then double-click HostObjectSampleImpl.cpp to open it.
2. Examine the property declarations in HostObjectSample.idl:
C#// Demonstrate getting and setting a property.
[propget] HRESULT Property([out, retval] BSTR* stringResult);[propput] HRESULT Property([in] BSTR stringValue);
...
// Demonstrate a property which uses Date types
[propget] HRESULT DateProperty([out, retval] DATE * dateResult);
[propput] HRESULT DateProperty([in] DATE dateValue);
// Creates a date object on the native side and sets the DateProperty to it.
HRESULT CreateNativeDate();
3. Examine the implementation of the object's properties in HostObjectSampleImpl.cpp:
C++STDMETHODIMP HostObjectSample::get_Property(BSTR* stringResult)
{
    *stringResult = SysAllocString(m_propertyValue.c_str());     return S_OK;
}
STDMETHODIMP HostObjectSample::put_Property(BSTR stringValue) {     m_propertyValue = stringValue;     return S_OK;
} ...
STDMETHODIMP HostObjectSample::get_DateProperty(DATE* dateResult)
{
    *dateResult = m_date;     return S_OK;
}
STDMETHODIMP HostObjectSample::put_DateProperty(DATE dateValue) {
    m_date = dateValue;     SYSTEMTIME systemTime;     if (VariantTimeToSystemTime(dateValue, &systemTime))
...
}
STDMETHODIMP HostObjectSample::CreateNativeDate()
{
    SYSTEMTIME systemTime;
    GetSystemTime(&systemTime);     DATE date;     if (SystemTimeToVariantTime(&systemTime, &date))
    {         return put_DateProperty(date);
    }    return E_UNEXPECTED;
}
4. Examine DateProperty, which we trace throughout this article.
Step 5: Implement IDispatch
The host object must implement IDispatch so that WebView2 can project the native host object to the app's web-side code.
IDispatch allows you to dynamically invoke methods and properties. Normally, calling objects requires static invocations, but you can use JavaScript to dynamically create object calls. In the Win32 sample app code, HostObjectSampleImpl.cpp implements IDispatch, which means implementing these methods:
GetIDsOfNames
GetTypeInfo
GetTypeInfoCount
Invoke
Implement IDispatch as described in Type Libraries and the Object Description Language. For more information about IDispatch inheritance and methods, see IDispatch interface (oaidl.h).
If the object you want to add to JavaScript doesn't already implement IDispatch, you need to write an IDispatch class wrapper for the object that you want to expose.
There might be libraries to do this automatically. To learn more about the steps that are needed to write an IDispatch class wrapper for the object that you want to expose, see Automation.
1. Next, save any changes you made in the project.
2. In Solution Explorer, right-click the WebView2APISample (which is the Win32 sample app), and then select Build. This creates a COM type library .tlb file. You need to reference the .tlb file from the C++ source code. For more information, see Type Library in COM, DCOM, and Type Libraries.
Step 6: Call AddHostObjectToScript to pass the host object to web-side code
So far, we've built our interface and implemented our native host object. Now we're ready to use AddHostObjectToScript to pass the native host object to our app's webside, JavaScript code. The Win32 sample app calls AddHostObjectToScript in ScenarioAddHostObject.cpp	, as shown below.

        CHECK_FAILURE(args->get_Uri(&navigationTargetUri));         std::wstring uriTarget(navigationTargetUri.get());C++        if (AreFileUrisEqual(sampleUri, uriTarget))
        {
            VARIANT remoteObjectAsVariant = {};             m_hostObject.query_to<IDispatch>
(&remoteObjectAsVariant.pdispVal);             remoteObjectAsVariant.vt = VT_DISPATCH;C++            // We can call AddHostObjectToScript multiple times in a row without
            // calling RemoveHostObject first. This will replace the previous object
            // with the new object. In our case this is the same object and everything             // is fine.             CHECK_FAILURE(                 m_webView->AddHostObjectToScript(L"sample", 
&remoteObjectAsVariant));             remoteObjectAsVariant.pdispVal->Release();
        }5. In the NavigationStarting event handler, the query_to line (below) casts the newly created COM object to an IDispatch type and then converts the object to a VARIANT. VARIANT types allow you to use data structures such as integers and arrays as well as more complex types such as IDispatch.
For a full list of supported data types, see VARIANT structure (oaidl.h). Not all types in the VARIANT union are supported by AddHostObjectToScript. For details, see ICoreWebView2::AddHostObjectToScript method.
Now that we have a variant of the object that is C++ code-friendly, the sample app's native-side code is ready to pass the host object to the app's web-side code.
6. In the bottom line above, the NavigationStarting event handler then sets the remote object's variant type as IDispatch.
7. Above, in the NavigationStarting event handler, the VARIANT is passed to AddHostObjectToScript, using the name sample.

Step 7: Access host object members from webpage JavaScript
In the above steps, the sample app's native-side code created a host object that implements IDispatch. This native code also calls the WebView2 API
ICoreWebView2::AddHostObjectToScript or
ICoreWebView2Frame::AddHostObjectToScriptWithOrigins and passes the host object to the app's web-side code.
Now the app's web-side code can access the native-side APIs which are exposed by the host object. JavaScript statements in your .html webpage script element or in a referenced .js JavaScript file can access the exported native-side APIs.
The web-side code of the Win32 sample app is now able to access the properties and methods of the native host object, to access the native APIs. We'll use the sample app's webpage controls, in the Scenario > Host Objects webpage of the app, to demonstrate this.
1. In Microsoft Visual Studio, select File > Save All (Ctrl+Shift+S) to save the project.
2. In Solution Explorer, open WebView2APISample > ScenarioAddHostObject.html. We'll compare this file to the corresponding webpage in the running Win32 sample app.
3. In Solution Explorer, right-click the WebView2APISample (which is the Win32 sample app), and then select Build.
4. Press F5 to run the project in Debug mode.
5. In the Win32 sample app (which has the titlebar of WebView2APISample), click the
Scenario menu, and then select the Host Objects menuitem. The
AddHostObjectToScript Sample webpage appears, defined by ScenarioAddHostObject.html:

6. The webpage suggests using the Console tool of DevTools to run JavaScript statements on the chrome.webview.hostObjects.sample object. If you want to open DevTools from the sample app, right-click the page and then select Inspect. Then select the Console tab. For more information, see Console overview.
To open DevTools, pressing F12 might not work in this context, and might trigger an exception. If so, in Visual Studio, select Stop Debugging, and then press F5 to restart debugging. In the sample app, select Scenario > Host Objects again. For more information, see Open DevTools using an approach other than F12 in Debug WebView2 apps with Visual Studio.
The bottom of the Host Objects demo page duplicates the demo object members within an <iframe>:

7. In the rendered demo page in the sample app, read the label text explaining the Date buttons.
8. Click the Date buttons. A date string is displayed below the buttons, such as:
sample.dateProperty: Tue Nov 01 2022 12:45:25 GMT-0700 (Pacific 
Daylight Time)9. Explore properties and methods by clicking the buttons in the demo webpage and entering values, to see how the sample code behaves. The buttons demonstrate accessing properties and methods of the host object from the app's web-side code.
10. To gain insight into what's happening in JavaScript, examine the following code in ScenarioAddHostObject.html
The following code is a demo Date property, directly within the body element:
JavaScript<h2>Date Objects</h2>
<button id="setDateButton">Set Date to Now</button>
<label for="setDateButton">Sets 
<code>chrome.webview.hostObjects.options.shouldSerializeDates = true</code>     and then runs <code>chrome.webview.hostObjects.sample.dateProperty = new Date()</code></label>
<br />
<button id="createRemoteDateButton">Set Remote Date</button>
<label for="createRemoteDateButton">Calls 
<code>chrome.webview.hostObjects.sample.createNativeDate()</code>     to have the native object create and set the current time to the 
DateProperty</label>
<code><pre><span id="dateOutput"></span></pre></code>
<div id="div_iframe" style="display: none;">
    <h2>IFrame</h2>
</div>
You can also read the above label text in the rendered demo page in the sample app, explaining the Date button code.
11. The following code is a demo Date property that's wrapped in an iframe element that's created within a script element:
JavaScript// Date property 
document.getElementById("setDateButton").addEventListener("click", () 
=> {     chrome.webview.hostObjects.options.shouldSerializeDates = true;     chrome.webview.hostObjects.sync.sample.dateProperty = new Date();     document.getElementById("dateOutput").textContent = 
        "sample.dateProperty: " + 
chrome.webview.hostObjects.sync.sample.dateProperty; }); document.getElementById("createRemoteDateButton").addEventListener("cli ck", () => {     chrome.webview.hostObjects.sync.sample.createNativeDate();     document.getElementById("dateOutput").textContent = 
        "sample.dateProperty: " + 
chrome.webview.hostObjects.sync.sample.dateProperty; 
});12. The expression chrome.webview.hostObjects.sync.sample.dateProperty is the dateProperty of the native host object.
In the .idl file HostObjectSample.idl, described previously, the date property is defined as part of the host object.
Using the sample app
You can experiment with using and modifying the Win32 sample app. Then follow the same pattern in your own app:
1. Create a host object in your app's native-side code.
2. Pass the host object to your app's web-side code.
3. Use the host object from the app's web-side code.
To find out what other APIs there are in the host object ecosystem, see WebView2 Win32 C++ ICoreWebView2.
API Reference overview
See Host/web object sharing in Overview of WebView2 APIs.
See also
Web/native interop in Overview of WebView2 APIs.
Using frames in WebView2 apps
Call native-side WinRT code from web-side code
GitHub:
Win32 sample app (WebView2APISample project)
Feedback
Was this page helpful? 
Call native-side WinRT code from webside code
Article • 03/28/2023
Your web-side JavaScript code can access native-side WinRT methods and properties, with the help of the wv2winrt tool (the WebView2 WinRT JS Projection tool). The wv2winrt tool generates needed code files for your JavaScript code, and enables using methods and properties of any WinRT APIs, including:
Your WebView2 host app's WinRT APIs.
Windows WinRT APIs.
Third-party WinRT APIs.
For more information about why you'd want to have your web-side JavaScript code access the methods and properties of your WinRT host app, see the introduction of Call native-side code from web-side code.
Why WinRT and .NET use different approaches
This article is for WinRT WebView2 APIs, not for .NET WebView2 APIs. The C# code in this article will build, but not run, for .NET WebView2 APIs. Calling
AddHostObjectToScript using this article's C# code for .NET WebView2 APIs would produce an error message.
The wv2winrt tool (the WebView2 WinRT JS Projection tool) is needed when projecting WinRT objects, because WinRT doesn't support IDispatch or any other mechanism to dynamically inspect and interact with WinRT objects, which WebView2's Win32 and .NET platforms support. For .NET use of AddHostObjectToScript, see Call native-side code from web-side code instead of this article.
Setup differences for WinUI 3 vs. WinUI 2
If your WinRT WebView2 app targets WinUI 3 (Windows App SDK) rather than WinUI 2
(UWP), here's an overview of the WinUI 3-specific steps that are provided further below:
 In a non-packaged app, you have to do additional steps that are in the article "Enhancing Non-packaged Desktop Apps using Windows Runtime Components".
 Add WinRTAdapter to CsWinRTIncludes.
 For WinUI 3 (Windows App SDK) apps, the main app project has a reference to WinAppSDK which directly includes its own copy of the WebView2 SDK files, so you cannot include a reference to the WebView2 SDK in the main app project without producing error messages.
The project adapter version doesn't have to match.
After installing "default" options for Visual Studio 2022 Community edition, in Visual Studio Installer, click the .NET card, then on the right, select the checkbox Windows App SDK C# Templates.
 If the correct project template still doesn't appear: in the Visual Studio Installer, click the UWP card to select it, select the v143 C++ tools checkbox on the right, and then click the Modify button.
Strategy and end goal of this example
Strategy
This article walks you through the following main steps:
1. Create a WinRTAdapter project for the wv2winrt tool (the WebView2 WinRT JS Projection tool).
2. For this example, specify the following host-side APIs for projection:
Windows.System.UserProfile Namespace Windows.Globalization.Language Class
3. Run the wv2winrt tool to generate C++/WinRT source code for the selected namespaces or classes.
4. Call AddHostObjectToScript, in your main WinUI project.
5. Call methods and properties on the host object from your web-side JavaScript code (or from the DevTools Console).
End goal
First, we'll pick some WinRT APIs that we're interested in calling from JavaScript code.
For this example, we'll use the WinRT Language class, which is in the
Windows.Globalization namespace, for Windows UWP applications. The Windows.Globalization.Language Class enables getting language information from the client's native OS.
In the WebView2 host app, the web-side JavaScript code can then access methods and properties on the Language object that's in the native-side code.
Access projected APIs via DevTools Console
At the end of this example walkthrough, you'll use the Console of Microsoft Edge DevTools to test reading the host's displayName property of the Language class:
JavaScriptconst Windows = chrome.webview.hostObjects.sync.Windows;
(new Windows.Globalization.Language("en-US")).displayName;The DevTools Console will then output English (United States), or another language display name, demonstrating that you've called native-side code from web-side JavaScript code:

You can similarly access Windows.System.UserProfile Namespace members.
Access projected APIs via source code files
Similarly, in source code files rather than in the DevTools Console, you can access the projected host object. First, you run setup code for the script:
JavaScript// early in setup code:
const Windows = chrome.webview.hostObjects.sync.Windows;Then in the main body of your code, you add calls to projected objects, like the following:
C#(new Windows.Globalization.Language("en-US")).displayName;You can similarly access Windows.System.UserProfile Namespace members.
Let's get started!
Step 1: Create or obtain a basic WebView2 project
WinUI 2 (UWP)
Install Visual Studio
If Visual Studio 2015 or later isn't already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below. The present article shows screenshots for Visual Studio Community Edition 2022.
Install a preview channel of Microsoft Edge
If a preview channel of Microsoft Edge (Beta, Dev, or Canary) isn't already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
Create or open a basic WebView2 project
1. Do any of the following approaches to obtain a baseline starter project that contains a couple lines of WebView2 code that embeds the WebView2 control:
 Use the provided baseline sample solution: If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your


Step 2: Add a WinRTAdapter project for the wv2winrt tool
Next, create a WinRTAdapter project for the wv2winrt tool (the WebView2 WinRT JS Projection tool). This project builds a library out of code that's generated by running the tool. This generated code allows WinRT APIs to be exposed in the WebView2 control.
Add a project for the wv2winrt tool, as follows:
1. In Visual Studio, open your WinUI project, from the previous step.
2. In Solution Explorer, right-click the solution (not the project), and then select Add > New project. The Add a new project dialog opens.
3. In the Search textbox, enter Windows Runtime Component (C++/WinRT).
Alternative approach: If you don't add a project using the project template for
Windows Runtime Component (C++/WinRT) as described in the numbered steps below, then you'll need to instead install the Universal Windows Platform development workload, by following the steps in UWP applications > Introduction to C++/WinRT.
4. Select the Windows Runtime Component (C++/WinRT) card, and then click the Next button:

Note: Make sure the template includes "C++/WinRT" in its name. If this template isn't listed, install the Universal Windows Platform development workload from within the Visual Studio Installer. If you are using Visual Studio 2019 and still can't find the template, install the C++/WinRT templates and visualizer for VS2019 extension from Visual Studio > Extensions > Manage Extensions.
The Configure your new project window opens.
Configuring and creating the project



The wv2winrt tool (the WebView2 WinRT JS Projection tool) will run in this
WinRTAdapter project. In a below step, you'll generate code for selected classes in this project.
Step 3: Install Windows Implementation Library, for WinRTAdapter project
In the WinRTAdapter project, install the Windows Implementation Library (WIL), as follows:


WIL is now installed for the WinRTAdapter project. Windows Implementation Library (WIL) is a header-only C++ library to make using COM coding for Windows easier. It provides readable, type-safe C++ interfaces for Windows COM coding patterns.
Step 4: Install WebView2 prerelease SDK, for
WinRTAdapter project
In the WinRTAdapter project, also install a prerelease version of the WebView2 SDK, as follows:


The WebView2 prerelease SDK is now installed for the WinRTAdapter project.
Step 5: Install WebView2 prerelease SDK
(WinUI 2 only)

target WinUI 2 (UWP), this needs to be the same version as for the WinRTAdapter project. The version must be 1.0.1243.0 or higher.
7. Click the Install button. The Preview Changes dialog opens, to add WebView2 to the main project.
8. Click the OK button.
Visual Studio should look similar to the above Step section, except that now,
NuGet Package Manager is open for the main project instead of the WinRTAdapter project.
9. Select File > Save All (Ctrl+Shift+S).
The WebView2 prerelease SDK is now installed for the main project.Step 6: Generate source code for selected host APIs
Next, configure the wv2winrt tool (the WebView2 WinRT JS Projection tool), to incorporate the WinRT classes that you want to use. This generates source files that will then be compiled. Generating code for these APIs enables your web-side JavaScript code to call these APIs.
In the example steps below, we'll specify two Windows namespaces, and the wv2winrt tool will generate source code for only APIs under those namespaces:
Windows.System.UserProfile Namespace
Windows.Globalization.Language Class
Later, when the sample app is running, you'll call these APIs from the DevTools Console, to demonstrate that these specified host-side APIs can be called from web-side code.
Specify the namespace and class as follows:
1. In Solution Explorer, right-click the WinRTAdapter project, and then select Properties. The WinRTAdapter Property Pages dialog opens.
2. On the left, expand and select Common Properties > WebView2.
3. Set Use WebView2 WinRT APIs to No. This is so the WebView2 SDK doesn't copy the WebView2 WinRT component to the project's output. This WinRTAdapter project isn't calling any WebView2 WinRT APIs, so it doesn't need the WinRT component.
4. Set Use the wv2winrt tool to Yes.
5. Set Use JavaScript case to Yes.
6. In the Include filters row, click the column on the right, click the dropdown menu in that cell, and then click Edit. The Include filters dialog opens.
7. In the topmost text box, paste the following strings on separate lines, without leading or trailing whitespace:
C#Windows.System.UserProfile
Windows.Globalization.Language
  You need to specify the full name of the namespaces or classes, as shown above. 8. Click the OK button to close the Include filters dialog.
9. Make sure the WinRTAdapter Property Pages dialog looks like the following, for this walkthrough:

10. Click the OK button to close the Property Pages dialog.
11. Select File > Save All (Ctrl+Shift+S).
Adding a reference pointing to the adapter project
Next, add a reference in the main project, pointing to the adapter project.


Generate the API code
Next, generate the API code:
1. Right-click the WinRTAdapter project, and then select Build.
Source code is generated for namespaces or classes that you specified in the Include filters dialog of the wv2winrt tool (the WebView2 WinRT JS Projection tool):
Windows.System.UserProfile namespace Windows.Globalization.Language class
2. After building is complete, select File > Save All (Ctrl+Shift+S).


Step 7: Update Target Framework (WinUI 3 only)

Step 8: Add the host object in the main project
Next, pass the WinRT object from the native side of the host app to the web side of the host app. To do this, add an InitializeWebView2Async method that calls

private async void InitializeWebView2Async()
{    await WebView2.EnsureCoreWebView2Async();
   var dispatchAdapter = new WinRTAdapter.DispatchAdapter();    WebView2.CoreWebView2.AddHostObjectToScript("Windows", dispatchAdapter.WrapNamedObject("Windows", dispatchAdapter)); }C#WebView2.CoreWebView2.AddHostObjectToScript("RuntimeComponent1", dispatchAdapter.WrapNamedObject("RuntimeComponent1", dispatchAdapter));C#InitializeWebView2Async();This method calls AddHostObjectToScript.
In the line AddHostObjectToScript("Windows", ..., Windows is the top-level namespace. If you have other top-level namespaces, you can add additional calls to AddHostObjectToScript, like the following example:
The WrapNamedObject call creates a wrapper object for the RuntimeComponent1 namespace. The AddHostObjectToScript call adds that wrapped object to script using the name RuntimeComponent1.
For full guidance on how to use custom WinRT components, see Custom (3rdparty) WinRT components, below.
3. In the MainPage constructor, below this.InitializeComponent();, add the following code:
4. Right-click the main project, such as MyUWPGetStartApp, and then select Set as startup project. Bold indicates startup project.
5. Select File > Save All (Ctrl+Shift+S).
6. Press F5 to run the sample app. The WebView2-enabled WinUI 2 (UWP) app opens:

The host app's web-side code (and the DevTools Console) can now call methods and properties of the specified namespaces or classes of the host object.
Step 9: Call methods and properties on the host object from web-side JavaScript
Access projected APIs via DevTools Console
Next, use the DevTools Console to demonstrate that web-side code can call the hostside APIs that were specified in the wv2winrt tool (the WebView2 WinRT JS Projection tool):
Windows.System.UserProfile Namespace Windows.Globalization.Language Class
1. If the app isn't running, in Visual Studio, press F5 to run the sample app.
2. Click in the main part of the WebView2 sample app window to give it focus, and then press Ctrl+Shift+I to open Microsoft Edge DevTools. Or, right-click the page, and then select Inspect.
The Microsoft Edge DevTools window opens.
3. If the Microsoft Edge DevTools window isn't displayed, press Alt+Tab to display it.
4. In the DevTools window, select the Console tab.
5. Click the Clear console () button, or right-click in the Console and then select Clear console. Messages might periodically appear in the Console.
6. In the DevTools Console, paste the following Windows.Globalization.Language Class code, and then press Enter:
JavaScriptconst Windows = chrome.webview.hostObjects.sync.Windows;
(new Windows.Globalization.Language("en-US")).displayName;The Console outputs a language name string, such as English (United States), demonstrating that your app's host-side (native-side) code can be called from web-side JavaScript code:

7. Try omitting the parentheses. In the DevTools Console, enter the following statement:
JavaScriptnew Windows.Globalization.Language("en-US").displayName;The Console outputs a language name string, such as English (United States).
You can similarly access Windows.System.UserProfile Namespace members.
8. Close the DevTools window.

Access projected APIs via source code files
Above, we used the DevTools console to run JavaScript statements that access the projected host object. Similarly, you can access the projected host object from within source code files. To do this, first you run setup code for the script:
JavaScript// early in setup code:
const Windows = chrome.webview.hostObjects.sync.Windows;Then in the main body of your code, you add calls to projected objects, like the following:
C#(new Windows.Globalization.Language("en-US")).displayName;You can similarly access Windows.System.UserProfile API members.
This is the end of the tutorial steps. The following sections are general information about WebView2 WinRT apps.
Custom (3rd-party) WinRT components
The wv2winrt tool (the WebView2 WinRT JS Projection tool) supports custom thirdparty WinRT components, in addition to first-party OS WinRT APIs.

To use custom (3rd-party) WinRT components with the wv2winrt tool, in addition to the above steps, also do the following steps:
1. Add a third project (other than your main app and WinRTAdapter project) to your Visual Studio solution that implements your WinRT class.
2. Have the WinRTAdapter project 'Add a reference' to your new third project containing your WinRT class.
3. Update the WinRTAdapter project's Include filter in the properties to also include your new class.
4. Add an additional line to InitializeWebView2Async to add your winrt class's namespace:
WebView2.CoreWebView2.AddHostObjectToScript("MyCustomNamespace", dispatchAdapter.WrapNamedObject("MyCustomNamespace", dispatchAdapter));
5. For easy method calling from the web, optionally add your namespace sync proxy as a global object in script. For example: window.MyCustomNamespace = chrome.webview.hostObjects.sync.MyCustomNamespace;
For an example of this, see the following WebView2 sample:
 uwp-wv2winrt-custom-csharp-winrt - A sample, as a branch.
Asynchronous WinRT methods
Following the steps in the above guide, you should be able to use synchronous proxies.
For async method calls, you will need to use chrome.webview.hostObjects.options.forceAsyncMethodMatches.
The forceAsyncMethodMatches property is an array of regexes, where if any regex matches a method name on a sync proxy, the method will be run asynchronously instead. Setting this to [/Async$/] will have it match any method ending with the suffix
Async. Then matching method calls work just like a method on an async proxy and returns a promise that you can await.
Example:
JavaScriptconst Windows = chrome.webview.hostObjects.sync.Windows;
chrome.webview.hostObjects.options.forceAsyncMethodMatches = [/Async$/];let result = await Windows.System.Launcher.launchUriAsync(new Windows.Foundation.Uri('https://contoso.com/'));
For more information, see the forceAsyncMethodMatches row in CoreWebView2.AddHostObjectToScript Method.
Subscribing to WinRT events
WinRT events are also exposed via the script proxies. You can add and remove event handlers of instance WinRT events and static WinRT events by using the addEventListener(string eventName, function handler) and removeEventListener(string eventName, function handler) methods.
These methods work similarly to the DOM methods of the same name. Call addEventListener with a string name of the WinRT event you want to subscribe as the
first parameter, and a function callback to be called whenever the event is raised. Calling removeEventListener with the same parameters unsubscribes from that event. For
example:
JavaScriptconst Windows = chrome.webview.hostObjects.sync.Windows; const coreApplication = Windows.ApplicationModel.Core.CoreApplication; const coreApplicationView = coreApplication.getCurrentView(); const titleBar = coreApplicationView.titleBar; titleBar.addEventListener('IsVisibleChanged', () => {
    console.log('titlebar visibility changed to: ' + titleBar.isVisible);
});For a WinRT event that provides event args, those are provided as the first parameter to the event handler function. For example, the
Windows.Foundation.Collections.PropertySet.MapChanged event has
IMapChangedEventArgs<string, object> event arg object and that object is provided as the parameter to the callback.
JavaScriptconst Windows = chrome.webview.hostObjects.sync.Windows; const propertySet = new Windows.Foundation.Collections.PropertySet(); propertySet.addEventListener('MapChanged', eventArgs => {     const key = eventArgs.key;     const collectionChange = eventArgs.collectionChange;
    // ...
});The event args object will additionally have the following properties:
ﾉ Expand table
Property NameDescriptiontargetThe object that raised the eventtypeThe string name of the eventdetailAn array of all parameters provided to the WinRT delegateMake AddHostObjectToScript JavaScript proxies act more like other JavaScript APIs
AddHostObjectToScript defaults to using asynchronous and verbose proxies, but you can make the AddHostObjectToScript JavaScript proxies act more like other JavaScript APIs.
To read more about AddHostObjectToScript and its default behavior, see
AddHostObjectToScript. Also, if you are migrating a host app from JavaScript WinRT projection in JavaScript UWP apps, or from the EdgeHTML-based WebView, you may want to use the following approach, to better match that previous behavior.
To make the AddHostObjectToScript JavaScript proxies act more like other JavaScript APIs, set the following properties:
chrome.webview.hostObjects.option.defaultSyncProxy - Proxies may either be
asynchronous or synchronous. Normally we know, when calling a method on a synchronous proxy, that the result should also be a synchronous proxy. But in some cases, we lose that context, such as when providing a reference to a function to native code, and then native code later calling that function. In these cases, the proxy will be asynchronous, unless this property is set.
chrome.webview.hostObjects.options.forceAsyncMethodMatches - This is an array of
regular expressions. If you call a method on a synchronous proxy, the method call will actually be performed asynchronously if the method name matches a string or regular expression that's in this array. Setting this value to [/Async$/] will make any method that ends with Async be an asynchronous method call. If an async method doesn't match here and isn't forced to be asynchronous, the method will be invoked synchronously, blocking execution of the calling JavaScript and then returning the resolution of the promise, rather than returning a promise.
chrome.webview.hostObjects.options.ignoreMemberNotFoundError - If you attempt
to get the value of a property of a proxy, and the property doesn't exist on the corresponding native class, you'll get an exception - unless you set this property to true, in which case the behavior will match Chakra WinRT projection behavior (and
general JavaScript behavior) and return undefined with no error.
Chakra WinRT projection puts the WinRT namespaces directly on the root object. In contrast:
AddHostObjectToScript places async root proxies on chrome.webview.hostObjects. AddHostObjectToScript places sync root proxies on chrome.webview.hostObjects.sync.
To access root proxies where Chakra WinRT projection code would expect, you can assign the root proxy WinRT namespace locations over to the root object. For example:
JavaScriptwindow.Windows = chrome.webview.hostObjects.sync.Windows;To ensure that the JavaScript that sets all this up is run before anything else, you can either add the above statement to your JavaScript, or you can tell WebView2 to inject the above statement for you before running any other script, by using the CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync method.
The following example demonstrates the above techniques:

                    "}" +
                "})();");Get information about WebView2 properties
Information about WebView2 properties is available in two places:
The WinRTAdapter project's Property Pages. wv2winrt.exe command-line help. This is the wv2winrt tool (the WebView2 WinRT JS Projection tool).
WinRTAdapter project's Property Pages
In the WinRTAdapter project's Property Pages, for help about a property, click a property row. Help is shown at the bottom of the dialog:

Command-line help for wv2winrt.exe properties
Command-line help for wv2winrt.exe gives information about the parameters of the wv2winrt tool (the WebView2 WinRT JS Projection tool). For example:
ﾉ Expand table
ParameterDescriptionverboseList some content to standard out including which files have been created and information about the include and exclude rules.includeList as above will exclude namespaces and runtimeclasses by default except those listed. The include declarations may be either namespaces which include everything in that namespace, or runtimeclass names to include just that runtimeclass.usejavascriptcaseChanges the generated code to produce methods names, property names, and so on, that use the same casing style as Chakra JavaScript WinRT projection. The default is to produce names that match the winrt.output-pathSets the path in which generated files will be written.outputnamespaceSets the namespace to use for the generated WinRT class.winmd-pathsA space-delimited list of all the winmd files that should be examined for code generation.See also
Tutorial and sample:
 Get started with WinUI 2 (UWP) apps - Tutorial: Steps to create an app with WebView2 using a project template.
 WinUI 2 (UWP) sample app - Sample: Steps to download, build, run, and update the sample.
API Reference:
WinRT: CoreWebView2.AddHostObjectToScript Method
Win32: ICoreWebView2::AddHostObjectToScript method
.NET: CoreWebView2.AddHostObjectToScript Method
.NET equivalent article:
 Call native-side code from web-side code - covers Win32/C++, and also covers some aspects of .NET/C# within frames.

Feedback
Was this page helpful?  Yes  No

How WinRT types and members are represented in JavaScript
Article • 05/31/2024
Here's how to use WinRT types and members from within web-side JavaScript code in a WebView2 app, when calling native-side WinRT code from web-side code.
Language equivalents
The WebView2 WinRT JS Projection tool (wv2winrt) converts from WinRT to JavaScript language constructs as follows.
ﾉ Expand table
WinRT language constructJavaScript representationNotesUInt8, Int16, UInt16, Int32,
UInt32, Int64, UInt64, Single,
DoubleNumberChar, StringStringA JavaScript String instance is converted to a WinRT String instance.BooleanBooleanWindows.Foundation.DateTime structDateWindows.Foundation.TimeSpan structNumberGuidStringA JavaScript String instance that contains a string representation of a UUID (with or without delimiting { and } braces) is converted to the corresponding UUID. A UUID is converted to its string representation, with delimiting { and } brace characters at the start and end. For information about UUID, see RFC 4122 .IVector<T>, IVectorView<T>,
IObservableVector<T>Array and JavaScript objectIf a RuntimeClass instance implements vector interfaces, then it is represented in JavaScript as the usual object described below, but also will act like a JavaScript
WinRT language constructJavaScript representationNotesarray. Reads and writes are performed live on the underlying WinRT vector object.IMap<K,V>, IMapView<K,V>,
IObservableMap<K,V>JavaScript objectIf a RuntimeClass instance implements map interfaces, then it is represented in JavaScript as the usual object described below, but also has properties with name and values from the underlying WinRT map object. Reads and writes are performed live on the underlying WinRT map object.EnumJavaScript objectAn enum type is represented as a JavaScript object. Each enum value is a
Number property on the JavaScript object.StructJavaScript objectA Struct type is converted to a JavaScript object that has property names which correspond to the Struct type member names. This is a two-way conversion.NamespaceJavaScript objectA namespace is represented as a
JavaScript object that has a property for any child namespaces, enum types, or
RuntimeClass. The namespace may have 0, 1, or many child namespaces, enums, or runtimeclasses, and each individual child namespace, enum and runtimeclass gets its own property.ClassJavaScript objectA RuntimeClass class is converted to a JavaScript object that has the same methods, properties, and events.InterfaceJavaScript objectA RuntimeClass interface is converted to a JavaScript object that has the same methods, properties, and events. There is no support for implementing an interface in JavaScript.Class static memberJavaScript object propertySee below.Class constructorJavaScript constructor and functionSee below.When passing JavaScript objects to host objects:
 If JavaScript Date objects need to be passed to host objects as VT_DATE, set the host object's shouldSerializeDates property to true. By default, Date objects are passed to the host as string, by using JSON.stringify.
 If JavaScript typed arrays need to be passed to host objects as array, set the host object's shouldPassTypedArraysAsArrays property to true. By default, typed arrays are passed to the host as IDispatch.
See also:
 Introduction to Microsoft Interface Definition Language 3.0
Class static members
A runtime class that has static properties, static methods, or static events is represented as a property of the namespace. Each static property, static method, and static event is represented as a property on that JavaScript object of the runtimeclass.
For example, for the WinRT API static method Windows.Foundation.Uri.EscapeComponent:
Windows.Foundation is the namespace.
Uri is the runtimeclass.
EscapeComponent is the static method.
In JavaScript, the representation looks similar: chrome.webview.hostObjects.Windows.Foundation.Uri.EscapeComponent:
EscapeComponent is a JavaScript method that's a property on the JavaScript object for the Uri runtimeclass.
 The Uri runtimeclass is a property on the JavaScript object for the Foundation namespace.
For example, to call the static method Windows.Foundation.Uri.EscapeComponent, call:
JavaScript`chrome.webview.hostObjects.Windows.Foundation.Uri.EscapeComponent("example"
);`The JavaScript namespace object here is chrome.webview.hostObjects.Windows.Foundation.
Class constructors
A constructor for a RuntimeClass class is represented as a single property on a JavaScript object that can be called two ways:
As a constructor on the JavaScript namespace object.
As a function on the JavaScript namespace object.
For example, to create a new Windows.Foundation.Uri object, you can either call it as a constructor, using new:
JavaScript`let uri = new 
chrome.webview.hostObjects.Windows.Foundation.Uri("https://example.com/");`Or, call it as a function, without new:
JavaScript`let uri = 
chrome.webview.hostObjects.Windows.Foundation.Uri("https://example.com/");`The JavaScript namespace object here is chrome.webview.hostObjects.Windows.Foundation.
Method overloads
If a WinRT method name is overloaded for more than one method, then calling that method name from JavaScript will call the overload which has the matching number of parameters.
If there is more than one overload that has a matching number of parameters, the first overload that's found in the metadata will be called.
Method out parameters
If a WinRT method has out parameters, when calling that method from JavaScript, the returned result will be a JavaScript object that a property for each out parameter. If the method has a non-void return type, then the returned result object will also have a property named value that contains the return value of the method.
When calling a WinRT method that has out parameters, any out parameters are skipped in the parameter list in the method call (unless they are array type). For example, suppose a WinRT method that has out parameters and a non-void return type is defined as follows, using MIDL3:
C++String MethodWithOutParams(String stringParam1,                            out Int32 intParam2,                            out Int32 intParam3,                            String stringParam4);When you call that method from JavaScript, omit the out arguments:
JavaScriptlet result = object.MethodWithOutParams("stringParam1",                                         "stringParam4");Then to read the WinRT method's return value, read the value property on the JavaScript result object. To read the WinRT method's out parameters, read the correspondingly named properties on the JavaScript result object:
JavaScriptconsole.assert(result.value == "return value"); console.assert(result.intParam2 == 1); console.assert(result.intParam3 == 2);For array type out parameters, the array needs to be passed into the method's parameter list when calling the method. For a non-void return type, the result array will replace the array that's passed in for the method call. For the void return type, the result array will be the result of the method call.
C++// Both methods update input array values to index values
String NonVoidMethodWithArrayOutParam(out Int[] intArrayParam);
Void VoidMethodWithArrayOutParam(out Int[] intArrayParam);JavaScript
let input_array1 = [0, 0, 0]; let result1 = object.NonVoidMethodWithArrayOutParam(input_array1); console.assert(input_array1 == [0, 1, 2]) let input_array2 = [0, 0, 0]; let result2 = object.VoidMethodWithArrayOutParam(input_array2); console.assert(result2 == [0, 1, 2]);
If passing typed arrays as array out parameters, chrome.webview.hostObjects.options.shouldPassTypedArraysAsArrays needs to be set to true.
See also:
 Issue #2788 about WebView2 SDK and Windows App SDK (WinUI3) in C++ WinRT
See also
Call native-side WinRT code from web-side code
Introduction to Microsoft Interface Definition Language 3.0

Deployment and distribution
Article • 04/03/2023
For an introduction to the fundamentals, see Distribute your app and the WebView2 Runtime.
Articles in this section:
Enterprise management of WebView2 Runtimes.
Distribute an app as a single executable file - How to statically link the WebView2 loader library, to create a single-file app.
 Publish a UWP WebView2 app to the Microsoft Store

WebView2 deployment samples
Article • 11/26/2024
These samples demonstrate how to deploy the Evergreen WebView2 Runtime with your app that uses the WebView2 control.
ﾉ Expand table
ArticleSampleDescriptionWebView2
Deployment Visual Studio installerWV2DeploymentVSInstallerSampleUses the Microsoft Visual Studio Installer Projects to create an installer for
WebView2APISample and chain-install the Evergreen WebView2 Runtime.WiX Burn Bundle to deploy the RuntimeWV2DeploymentWiXBurnBundleSampleCreates a WiX installer for
WebView2APISample and uses WiX Burn Bundle to chain-install the Evergreen WebView2 Runtime.WiX Custom
Action to deploy the RuntimeWV2DeploymentWiXCustomActionSampleCreates a WiX installer for
WebView2APISample and uses WiX Custom Action to chaininstall the Evergreen WebView2 Runtime.See also
 Deploying the Evergreen WebView2 Runtime in Distribute your app and the WebView2 Runtime.
WebView2Samples repo
WebView2 sample apps

Feedback
Was this page helpful?  Yes  No

WebView2 Deployment Visual Studio installer
Article • 09/16/2022
This sample, WV2DeploymentVSInstallerSample, demonstrates how to deploy a WebView2 app by using the Visual Studio installer.
Sample name: WV2DeploymentVSInstallerSample
Repo directory: WV2DeploymentVSInstallerSample
Solution file: not provided in the repo. You create a solution file in the steps below.
To demonstrate how to deploy the Evergreen WebView2 Runtime with your app, this article describes how to use the Microsoft Visual Studio Installer Project extension for Visual Studio. You create a project of type Setup Project, to create an installer for the Win32 sample app (WebView2APISample). That installer that you create chain-installs the Evergreen WebView2 Runtime.
You first edit the project.xml file from the repo, and then in Visual Studio, you create a new project by using the Setup Project project template from the Microsoft Visual Studio Installer Projects extension.
This sample demonstrates several different deployment approaches:
Downloading the Evergreen WebView2 Runtime Bootstrapper by using a link.
Packaging the Evergreen WebView2 Runtime Bootstrapper with your app.
Packaging the Evergreen WebView2 Runtime Standalone Installer with your app.
For information about these different approaches, see Deploying the Evergreen WebView2 Runtime in Distribute your app and the WebView2 Runtime.
Step 1 - Build and run WebView2APISample
To become familiar with the app that this sample distributes, and to make sure your environment is set up for general Win32 WebView2 app development, build and run the Win32 sample app (WebView2APISample) before using this deployment sample.
1. Do the steps in Win32 sample app (WebView2APISample) and then continue below.
Prerequisite: As stated in the above page, Microsoft Visual Studio is required, including
C++ support. Microsoft Visual Studio Code is not supported for this WV2DeploymentVSInstallerSample sample.
The above page helps you clone or download the WebView2Samples repo, and install Visual Studio with C++ support, if not done yet.
Step 2 - Install Visual Studio Installer Projects
If not done yet, install Visual Studio Installer Projects:
1. Install the Microsoft Visual Studio Installer Projects for Visual Studio 2019. Follow the steps on that page, and then return to this page and continue the steps below.

If a Waiting on the following processes to shut down dialog appears, close Visual Studio.
Step 3 - Edit product.xml to configure how to distribute the WebView2 Runtime
1. Open Visual Studio. In the opening screen, you can click the Continue without code link in the lower right.
2. Open the following individual file that's in your local copy of the repo: <repolocation>\WebView2Samples\SampleApps\WV2DeploymentVSInstallerSample\product.xm l
Location of the file in the repo at GitHub:
SampleApps/WV2DeploymentVSInstallerSample/product.xml

above each of the 3 lines. Here is a simplified view of the lines, with clarifications.
The first <PackageFile> line uses file MicrosoftEdgeWebview2Setup.exe, which is the Evergreen WebView2 Runtime Bootstrapper, and it specifies a HomeSite website.
Use this line for Approach 1: Downloading the Evergreen WebView2 Runtime Bootstrapper through a link:
XML<!-- Download the MicrosoftEdgeWebview2Setup.exe -->
<!-- <PackageFile Name="MicrosoftEdgeWebview2Setup.exe" 
HomeSite="WebViewRuntime" PublicKey="..."/> -->The second <PackageFile> line uses file MicrosoftEdgeWebview2Setup.exe, which is the Evergreen WebView2 Runtime Bootstrapper. Use this line for Approach 2:
Packaging the Evergreen WebView2 Runtime Bootstrapper with the app:
XML<!-- Package the MicrosoftEdgeWebview2Setup.exe -->
<PackageFile Name="MicrosoftEdgeWebview2Setup.exe" />The third <PackageFile> line uses file
MicrosoftEdgeWebView2RuntimeInstallerX64.exe, which is a platform-specific
Evergreen WebView2 Runtime Standalone Installer. Use this line for Approach 3:
Packaging the Evergreen WebView2 Runtime Standalone Installer with your app:
XML<!-- Package the WebView Standalone Installer -->
<!-- <PackageFile Name="MicrosoftEdgeWebView2RuntimeInstallerX64.exe" /> -->4. Identify which approach you are using. Approach 2 is the default; that is, the line to use Approach 2 is un-commented in the repo's product.xml file.
5. Edit product.xml, as follows; do the steps in one of the three sections below.
Approach 1: Downloading the Evergreen WebView2 Runtime Bootstrapper through a link
If you want the app to download the Evergreen WebView2 Runtime Bootstrapper (MicrosoftEdgeWebview2Setup.exe) through a link:
1. Within the <PackageFiles CopyAllPackageFiles="false"> section, un-comment the following line (keep the long public key value), and comment out the other lines:
XML<PackageFile Name="MicrosoftEdgeWebview2Setup.exe" 
HomeSite="WebViewRuntime" PublicKey="..."/>2. The PublicKey value for the WebView2 Runtime Bootstrapper may change without notice. We're working on addressing this issue. For now, you may need to replace it in product.xml with an updated PublicKey value.
3. Within the <Commands Reboot="Defer"> and </Commands> section, make sure
PackageFile points to "MicrosoftEdgeWebview2Setup.exe" so that the Visual Studio installer is using the Bootstrapper.
4. Save the file.
Approach 2: Packaging the Evergreen WebView2 Runtime
Bootstrapper with the app
If you want to package the Evergreen WebView2 Runtime Bootstrapper (MicrosoftEdgeWebview2Setup.exe) with the app:
1. Within the <PackageFiles CopyAllPackageFiles="false"> section, un-comment the following line and comment out the other lines:
XML<PackageFile Name="MicrosoftEdgeWebview2Setup.exe" />2. Within the <Commands Reboot="Defer"> section, make sure PackageFile points to
"MicrosoftEdgeWebview2Setup.exe" so that the Visual Studio installer is using the Bootstrapper.
3. Save the file.
Approach 3: Packaging the Evergreen WebView2 Runtime Standalone Installer with your app
If you want to package the Evergreen WebView2 Runtime Standalone Installer with the app:
1. Within the <PackageFiles CopyAllPackageFiles="false"> section, un-comment the following line and comment out the other lines:
XML<PackageFile Name="MicrosoftEdgeWebView2RuntimeInstallerX64.exe" />2. Within the <Commands Reboot="Defer"> and </Commands> section, make sure
PackageFile points to "MicrosoftEdgeWebView2RuntimeInstallerX64.exe" so that the Visual Studio installer is using the Standalone Installer.
3. If you're targeting non-X64 devices, edit the
MicrosoftEdgeWebView2RuntimeInstallerX64 file name to reflect the correct architecture.
4. Save the file.
Step 4 - Download the WebView2 Bootstrapper or Standalone Installer
If you want to package either the Bootstrapper (Approach 2) or the Standalone Installer
(Approach 3) with the app, do the steps in this section. Otherwise skip to the next major Step section.
1. Download Microsoft Edge WebView2 Bootstrapper or the Standalone Installer.
2. Save the downloaded Bootstrapper or the Standalone Installer under the <repo-
location>\WebView2Samples\SampleApps\WV2DeploymentVSInstallerSample\ folder.
Step 5 - Copy the
WV2DeploymentVSInstallerSample folder into a Packages folder
This step applies to all of the approaches (1, 2, or 3).
1. Copy the <repolocation>\WebView2Samples\SampleApps\WV2DeploymentVSInstallerSample\ folder, and paste it into either one of the following folders:

Typical path for <Visual Studio install dir>:
C:\Program Files (x86)\Microsoft Visual
Studio\2019\Professional\Common7\IDE\
Step 6 - Create a Setup Project in Visual Studio
1. In Visual Studio, select File > New > Project. The Create a new project window appears.
2. In the Search for templates text box, enter setup project, and then select the Setup Project template. Make sure you select the template that's named exactly that, as shown below:

3. Click the Next button.
The Configure your new project: Setup Project dialog opens, as shown below.
4. In the Project name text box, enter a name, such as MyWin32WV2DeploySample.
5. In the Location text box, navigate to a location that's not inside another project directory, such as <repo-path>\WebView2Samples\ or a location that's not in the repo directory.

6. Click the Create button.

Step 7 - Add WebView2 Runtime as a prerequisite
1. In Visual Studio, in Solution Explorer, right-click your project, and then select Properties. The Property Pages dialog opens.
2. Click the Prerequisites button:

3. Select the Edge WebView2 runtime checkbox.
If that checkbox isn't listed, that might indicate that a needed file hasn't been placed in a Packages folder. Check which approach you are using. You might need to do the steps above, in sections Step 4 - Download the WebView2 Bootstrapper or Standalone Installer and Step 5 - Copy the WV2DeploymentVSInstallerSample folder into a Packages folder.
4. Clear the other prerequisites checkboxes. Then click the OK button:

Step 8 - Build the Setup project
1. Press F5 to save and build the Setup project.
See also
 README file for WV2DeploymentVSInstallerSample

WiX Burn Bundle to deploy the WebView2 Runtime
Article • 06/19/2023
This sample, WV2DeploymentWiXBurnBundleSample, demonstrates how to use a WiX
Burn Bundle to deploy the WebView2 Runtime. Do the steps in this article to create a
WiX installer that chain-installs the Evergreen WebView2 Runtime through Burn Bundle.
Sample name: WV2DeploymentWiXBurnBundleSample
Repo directory: WV2DeploymentWiXBurnBundleSample Project file: WV2DeploymentWiXBurnBundleSample.wixproj
This sample creates a WiX	 installer for the Win32 sample app. This sample uses WiX Burn Bundle to chain-install the Evergreen WebView2 Runtime.
This sample demonstrates these two different distribution approaches to distribute the WebView2 Runtime for your app:
 Downloading the Evergreen WebView2 Runtime Bootstrapper through a link stored in your app.
 Packaging the Evergreen WebView2 Runtime Bootstrapper with your app.
The other approach, not demonstrated in this sample, is packaging the Evergreen WebView2 Runtime Standalone Installer with your app. That approach is very similar to packaging the Evergreen WebView2 Runtime Bootstrapper with your app.
For an overview of the approaches, see Deploying the Evergreen WebView2 Runtime in Distribute your app and the WebView2 Runtime.
Step 1 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
If Visual Studio (minimum required version) is not already installed, with C++ support:
1. In a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section to install Visual Studio, including C++ support.
Then return to this page and continue the steps below.
Step 2 - Install WiX Toolset build tools
If not done yet, install WiX Toolset:
1. In a new window or tab, go to WiX Toolset and then download the WiX Toolset build tools.
2. Click the wixnnn.exe file, and then click Open file.
A dialog might open, Requires .NET Framework 3.5.1 to be enabled:

If .NET Framework 3.5.1 is already enabled on your machine, skip ahead to continue installing this WiX component.
3. Click the OK button. The WiX installer window closes.
4. Press the Windows logo key , type Windows features, and then press Enter. The Turn Windows features on or off dialog appears.
5. Select the .NET Framework 3.5 (includes .NET 2.0 and 3.0) check box:

You don't need to select the child items.
6. Click OK. You might be prompted whether to let Windows Update download files.
For more information, see Install the .NET Framework 3.5 on Windows 11, Windows 10, Windows 8.1, and Windows 8.
7. After .NET Framework 3.5.1 is enabled, again run the wixnnn.exe file. For example, in Microsoft Edge, click Settings and more, click Downloads, and then click Open file below wix311.exe.
8. Click the Install panel of the WiX installer.
9. In User Account Control, click the Yes button. The top of the WiX installer reads "Successfully installed".
Also install the WiX Visual Studio component, per the next section.
Step 3 - Install WiX Toolset Visual Studio Extension
If not done yet, install WiX Toolset Visual Studio 2019 Extension:
1. In a new window or tab, go to WiX Toolset and then download and install the extension:
WiX Toolset Visual Studio 2019 Extension - downloaded installer file:
Votive2019.vsix
2. In User Account Control, click the Yes button. VSIX Installer for WiX Visual Studio extension opens:

3. Click the Install button.
4. If a VSIX waiting for processes to shut down dialog opens, close Visual Studio.
The VSIX Installer proceeds.
The VSIX Installer reads Install complete:

5. In VSIX Installer, click the Close button.
6. In the WiX installer, click the Exit panel.
7. Close Visual Studio, if it's open.
Step 4 - Clone or download the WebView2Samples repo
1. If not done already, clone or download the WebView2Samples repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 5 - Build the deployment project
1. In your local copy of the WebView2Samples repo, open <repolocation>\WebView2Samples\SampleApps\WebView2Samples.sln with Visual Studio (not Visual Studio Code).
If the Unsupported ... .wixproj dialog appears, install the WiX Toolset and the WiX Toolset Extension, above:

2. This sample is an extension to the WV2DeploymentWiXCustomActionSample sample. In Solution Explorer, expand WV2DeploymentWiXCustomActionSample and then double-click Product.wxs.
3. In Product.wxs, comment out all the <Binary>, <CustomAction>, and <Custom> elements under <!-- Step 4: Config Custom Action to download/install Bootstrapper --> and <!-- Step 5: Config execute sequence of custom action -> so that Custom Action is not used.
4. Open Bundle.wxs under the WV2DeploymentWiXBurnBundleSample project. Edit Bundle.wxs depending on which workflow you want to use:
To package the Evergreen WebView2 Runtime Bootstrapper with your app:
Uncomment the <ExePackage Id="InvokeBootstrapper" ...> element below
<!-- [Package Bootstrapper] ... -->, and comment out other <ExePackage> elements.
To download the Evergreen WebView2 Runtime Bootstrapper through a link in your app:
 Uncomment the <ExePackage Id="DownloadAndInvokeBootstrapper" ...> element below <!-- [Download Bootstrapper] ... -->, and comment out other <ExePackage> elements.
5. If you are packaging the Evergreen WebView2 Runtime Bootstrapper with your app, download the Bootstrapper and place it under the enclosing SampleApps folder.
6. Build the WV2DeploymentWiXBurnBundleSample project.
See also
 Deploying the Evergreen WebView2 Runtime in Distribute your app and the WebView2 Runtime.

Feedback
Was this page helpful? 
WiX Custom Action to deploy the WebView2 Runtime
Article • 08/01/2024
This sample, WV2DeploymentWiXCustomActionSample, demonstrates how to use a WiX Custom Action to deploy the WebView2 Runtime.
Sample name: WV2DeploymentWiXCustomActionSample
Repo directory: WV2DeploymentWiXCustomActionSample Project file: WV2DeploymentWiXCustomActionSample.wixproj
To help you understand how to deploy the Evergreen WebView2 Runtime with your app, this sample creates a WiX installer for the WebView2APISample and uses a WiX Custom Action to chain-install the Evergreen WebView2 Runtime.
This sample demonstrates several different deployment approaches:
Downloading the Evergreen WebView2 Runtime Bootstrapper by using a link.
Packaging the Evergreen WebView2 Runtime Bootstrapper with your app.
Packaging the Evergreen WebView2 Runtime Standalone Installer with your app.
Step 1 - Install Visual Studio 2019 with C++ support
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. Visual Studio - If Install Visual Studio 2019 (minimum required version) with C++ support is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section to install Visual Studio 2019 with C++ support, and then return to this page and continue the steps below.
Step 2 - Install WiX Toolset build tools
If not done yet, install WiX Toolset:
1. In a new window or tab, go to WiX Toolset and then download the WiX Toolset build tools.
2. Click the wixnnn.exe file, and then click Open file.
A dialog might open, Requires .NET Framework 3.5.1 to be enabled:

If .NET Framework 3.5.1 is already enabled on your machine, skip ahead to continue installing this WiX component.
3. Click the OK button. The WiX installer window closes.
4. Press the Windows logo key , type Windows features, and then press Enter. The Turn Windows features on or off dialog appears.
5. Select the .NET Framework 3.5 (includes .NET 2.0 and 3.0) check box:

You don't need to select the child items.
6. Click OK. You might be prompted whether to let Windows Update download files.
For more information, see Install the .NET Framework 3.5 on Windows 11, Windows 10, Windows 8.1, and Windows 8.
7. After .NET Framework 3.5.1 is enabled, again run the wixnnn.exe file. For example, in Microsoft Edge, click Settings and more, click Downloads, and then click Open file below wix311.exe.
8. Click the Install panel of the WiX installer.
9. In User Account Control, click the Yes button. The top of the WiX installer reads "Successfully installed".
Also install the WiX Visual Studio component, per the next section.
Step 3 - Install WiX Toolset Visual Studio Extension
If not done yet, install WiX Toolset Visual Studio 2019 Extension:
1. In a new window or tab, go to WiX Toolset and then download and install the extension:
WiX Toolset Visual Studio 2019 Extension - downloaded installer file:
Votive2019.vsix
2. In User Account Control, click the Yes button. VSIX Installer for WiX Visual Studio extension opens:

3. Click the Install button.
4. If a VSIX waiting for processes to shut down dialog opens, close Visual Studio.
The VSIX Installer proceeds.
The VSIX Installer reads Install complete:

5. In VSIX Installer, click the Close button.
6. In the WiX installer, click the Exit panel.
Step 4 - Clone the WebView2Samples repo
1. If not done already, clone the WebView2Samples repo to your local drive. In a separate window or tab, see Clone the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Step 5 - Open the solution in Visual Studio
1. In your local copy of the WebView2Samples repo, open <repolocation>\WebView2Samples\SampleApps\WebView2Samples.sln with Visual Studio (not Visual Studio Code).
Step 6 - Edit Product.wxs to configure how to distribute the WebView2 Runtime
1. Open Product.wxs under the WV2DeploymentWiXCustomActionSample project.
2. Edit Product.wxs depending on which approach you want to use:
Approach 1: Downloading the Evergreen WebView2 Runtime Bootstrapper through a link
If you want the app to download the Evergreen WebView2 Runtime Bootstrapper (MicrosoftEdgeWebview2Setup.exe) through a link:
1. Under <!-- Step 4: Config Custom Action to download/install Bootstrapper -->, uncomment the <CustomAction Id='DownloadAndInvokeBootstrapper' ...> element below <!-- [Download Bootstrapper] ... -->.
2. Comment out other <Binary> and <CustomAction> elements under Step 4.
3. Under <!-- Step 5: Config execute sequence of custom action -->, uncomment the <Custom Action='DownloadAndInvokeBootstrapper' ...> element below <!-[Download Bootstrapper] ...-->.
4. Comment out other <Custom> elements under Step 5.
Approach 2: Packaging the Evergreen WebView2 Runtime
Bootstrapper with the app
If you want to package the Evergreen WebView2 Runtime Bootstrapper (MicrosoftEdgeWebview2Setup.exe) with the app:
1. Under <!-- Step 4: Config Custom Action to download/install Bootstrapper -->, uncomment the <Binary Id="MicrosoftEdgeWebview2Setup.exe" ...> and <CustomAction Id='InvokeBootstrapper' ...> elements below <!-- [Package Bootstrapper] ... -->.
2. Comment out other <Binary> and <CustomAction> elements under Step 4.
3. Under <!-- Step 5: Config execute sequence of custom action -->, uncomment the <Custom Action='InvokeBootstrapper' ...> element below <!-- [Package Bootstrapper] ...-->.
4. Comment out other <Custom> elements under Step 5.
Approach 3: Packaging the Evergreen WebView2 Runtime Standalone Installer with your app
If you want to package the Evergreen WebView2 Runtime Standalone Installer with the app:
1. Under <!-- Step 4: Config Custom Action to download/install Bootstrapper -->, uncomment the <Binary Id="MicrosoftEdgeWebView2RuntimeInstallerX64.exe" ...> and <CustomAction Id='InvokeStandalone' ...> elements below <!-- [Package Standalone Installer] ... -->.
2. Comment out other <Binary> and <CustomAction> elements under Step 4.
3. If you're targeting non-X64 devices, you may also want to edit the
MicrosoftEdgeWebView2RuntimeInstallerX64 file name to reflect the correct architecture.
4. Under <!-- Step 5: Config execute sequence of custom action -->, uncomment the <Custom Action='InvokeStandalone' ...> element below <!-- [Package Standalone Installer] ...-->.
5. Comment out other <Custom> elements under Step 5.
Step 7 - Put bootstrapper or installer in the folder
If you plan to package either the Bootstrapper (Approach 2) or the Standalone Installer (Approach 3) with the app:
1. Download the Bootstrapper or the Standalone Installer. At Microsoft Edge WebView2, click Download Now, to scroll down to the Download the WebView2 Runtime section.
2. Place the downloaded Bootstrapper or Standalone Installer under the enclosing SampleApps folder.
Step 8 - Build the installer project
1. Build the WV2DeploymentVSInstallerSample project.
See also
Win32 sample app
Deploying the Evergreen WebView2 Runtime in Distribute your app and the WebView2 Runtime.
Readme for WV2DeploymentWiXCustomActionSample	. WiX Toolset
Feedback
Was this page helpful?  Yes  No
Prerelease and Release SDKs for WebView2
Article • 04/28/2023
The WebView2 SDK is provided as a Prerelease or Release version of the
Microsoft.Web.WebView2 NuGet package. Either use a Prerelease SDK with a preview channel of Microsoft Edge, or use a Release SDK with the WebView2 Runtime.
Prerelease SDK packages are for use during development if you want to test the latest WebView2 APIs, including the Experimental APIs, before support for those APIs is added to the Runtime. The Canary channel is recommended, because it has the implementations of the latest APIs. When you want to test and use Experimental WebView2 APIs, use the following combination:
A Prerelease version of the WebView2 SDK.
A preview channel of Microsoft Edge on your development client.
Release SDK packages only contain Stable APIs, not Experimental APIs. When you're working on a production release of your WebView2 app, use the following combination:
A Release version of the WebView2 SDK.
The WebView2 Runtime on your development client.
More details about the Prerelease and Release SDK packages are provided below.
Phases of introducing APIs
New APIs are introduced in phases as follows:
ﾉ Expand table
API statusDescriptionExperimental1. First an API is Experimental in a Prerelease SDK. You can test these APIs and provide feedback. The API isn't in a Release SDK yet.Stable in a
Prerelease SDK2. Then the API is promoted to Stable in the Prerelease SDK. The API isn't in a Release SDK yet.Stable in a
Release SDK3. Then the Stable API is promoted to be included in the Release SDK. This typically happens 1 month after the API is promoted to Stable in a Prerelease SDK. The API also remains in the Prerelease SDK.
Selecting which type of SDK to use
To select which version of WebView2 SDK NuGet package a Visual Studio project uses, in
Visual Studio, right-click a project, select Manage NuGet Packages, select or clear the Include prerelease checkbox, select the Microsoft.Web.WebView2 package, and then in the Version dropdown list, select a version of the Microsoft.Web.WebView2 NuGet package.
For details, see Install or update the WebView2 SDK in Set up your Dev environment for WebView2. You can also view the list of Microsoft.Web.WebView2 SDK packages at the NuGet site.
Use a Prerelease version of the SDK along with a preview channel of Microsoft Edge
When developing an Evergreen WebView2 app, regularly test the app against the latest Microsoft Edge preview channel, in addition to testing against the WebView2 Runtime. Because the web platform is constantly evolving, regular testing is the best way to ensure your app will continue to work as intended.
When you use a WebView2 Prerelease SDK package, use a Microsoft Edge preview channel on your development client. Preview channels are also called Insiders channels. The Canary preview channel is recommended rather than Beta or Dev, because Canary is most recent and has implementations of the latest Experimental APIs.
The Prerelease SDK package is a superset of the Release SDK package. A Prerelease SDK contains method signatures for:
Experimental APIs.
Stable APIs that are no longer Experimental, but haven't been included in a Release SDK yet.
 Stable APIs that have been added to Release SDKs.
Preview channels of Microsoft Edge provide the implementations of Experimental WebView2 APIs and of Stable APIs. The Experimental APIs are subject to change based on feedback. Avoid using a Prerelease SDK package to build production apps.
For information about temporarily pointing your app to a preview channel instead of defaulting to the WebView2 Runtime, see Test upcoming APIs and features.
See also:
Prerelease testing using preview channels
Self-host by deploying preview channels
Use a release version of the SDK along with the Runtime
When you use a WebView2 Release SDK package, use the Evergreen WebView2 Runtime on your development client, rather than a Microsoft Edge preview channel. By default, a WebView2 app targets the Runtime rather than Microsoft Edge. By design, the Microsoft Edge Stable channel doesn't support WebView2.
The Release SDK package contains all of the Stable Win32 C/C++ and .NET APIs that are in production release, and doesn't include method signatures for Experimental APIs. All of the APIs that are in a Release SDK package are fully supported, in an equal or higher build number of the WebView2 Runtime.
The Release SDK package contains the following components:
Win32 C/C++ APIs.
.NET APIs: WPF, WinForms, and Core.
For more information about automatic updating of the Evergreen Runtime, see Distribute your app and the WebView2 Runtime.
Release cadence
New versions of the WebView2 SDK are shipped at the same general cadence as the Microsoft Edge browser, which is approximately every four weeks.
Minimum version and build number to instantiate WebView2
For the client to be able to create a WebView2 instance and use the set of APIs in the
WebView2 General Availability release (SDK build 616), the client must have WebView2 Runtime version 86.0.616.0 or higher. Runtime 86.0.616.0 is a special release, because it is the General Availability release.
On a development machine, the client must have either the Microsoft Edge preview channel version 86.0.616.0 or higher, or the WebView2 Runtime version 86.0.616.0 or higher.
Forward compatibility of APIs
The WebView2 release SDK has been forward-compatible ever since version 1 (Release
SDK 1.0.622.22 in Archived Release Notes for the WebView2 SDK). You can update your
WebView2 app to use the latest APIs from the most recent Release version of the SDK.
Your app will continue to work on clients because clients automatically have the latest Evergreen WebView2 Runtime.
The WebView2 APIs in a Release SDK package are stable and forward-compatible. A WebView2 API works when using a WebView2 Runtime that has an equal or higher build number as the SDK build number in which the API was introduced. The build number is the third part of the four-part version number for the Webview2 SDK, and of the fourpart version number for Microsoft Edge and the WebView2 Runtime.
 When you use a WebView2 SDK that has a build number equal to or less than the WebView2 Runtime, every API that you have access to in that SDK works with that version of the Runtime.
 When you use a WebView2 SDK that has a build number greater than the WebView2 Runtime, the newer APIs' implementations aren't available in the Runtime.
For example, if an API is introduced in SDK 1.0.900.0, that API would work with Runtime 94.0.900+.0, but not with Runtime 90.0.700.0.
You must coordinate the WebView2 SDK version that you use for development, and the WebView2 Runtime version that's installed on client machines. The client should have a version of the Runtime that supports all of the latest APIs that are in the SDK version you use to develop the app. For full support for the latest APIs in a release version of the SDK, the Runtime on the client must have a build number that's greater than or equal to the SDK build number.
Experimental APIs
To try out new forthcoming features that are in development, use Experimental APIs.
Experimental APIs are contained in Prerelease SDKs, but not in Release SDKs.
Developing with Experimental APIs and providing feedback
The Experimental APIs in a WebView2 Prerelease SDK package aren't guaranteed to be forward-compatible, and might be removed in future Runtime updates.
For full support of Experimental APIs, use a Microsoft Edge preview channel, not the Evergreen WebView2 Runtime. When a Prerelease version of the WebView2 SDK is initially made available, that SDK only works with Microsoft Edge Canary. Soon after that, the Prerelease SDK also works with the Beta and Dev channels.
Use a Prerelease SDK to try out new, Experimental APIs early and provide feedback before the Experimental APIs are promoted to become Stable, forward-compatible APIs.
 The Experimental APIs (in a Prerelease SDK) aren't guaranteed to be forwardcompatible.
 The Stable APIs that are in a Prerelease SDK are forward-compatible, even if they aren't included in a Release SDK yet.
 The Stable APIs that are in a Release SDK are forward-compatible.
For more information, see Forward compatibility of APIs, above.
The WebView2 team is seeking feedback on Experimental WebView2 APIs that might be promoted to Stable in future releases. The Experimental APIs are indicated as
"experimental" in the WebView2 SDK Reference documentation, such as: "Note: This an experimental API that is shipped with our prerelease SDK."
To help you evaluate the Experimental APIs and share your feedback, use the WebView2Feedback repo.
Moving from Experimental APIs to Stable APIs
Once an API has been moved from Experimental to Stable status, you need to move your app's code to the Stable API. Using Experimental APIs or a Prerelease SDK is not recommended for production apps. Follow these practices when moving your app from using Experimental APIs to using Stable APIs:
 In your project in Visual Studio, update your WebView2 SDK package version to a newer Prerelease SDK or Release SDK. See Install or update the WebView2 SDK in Set up your Dev environment for WebView2.
 Update your app's code to use Stable APIs instead of Experimental APIs (for COM). The Stable API will be supported with bug fixes, but the Experimental API will be deprecated, and not available in the newer (Prerelease or Release) SDK. After an API is promoted to Stable, the Experimental version of that API is supported for
two releases of the Prerelease SDK, in a deprecated state. In subsequent versions of the Prerelease SDK, Experimental APIs might be modified, removed, or added.
 Always use feature detection, to ensure that the Stable API is implemented in the user's version of the WebView2 Runtime. See Feature-detecting to test whether the installed Runtime supports recently added APIs, below.
 Note for .NET only: In a Prerelease WebView2 SDK, the .NET Stable APIs will fallback to the corresponding Experimental APIs, if the user's WebView2 Runtime has only the Experimental API implementation and doesn't have the Stable API implementation.
Matching the Runtime version with the SDK version
In the Evergreen distribution approach, the client's WebView2 Runtime automatically updates to the latest version available. However, a user or IT admin might choose to prevent automatic updating of the WebView2 Runtime. The resulting outdated Runtime on the client might cause compatibility issues with your updated WebView2 app that uses new APIs from a recent SDK.
In case updating the WebView2 Runtime is prevented on the client, make sure that you know the minimum build number of the WebView2 Runtime that is required by your app. To view or get the latest WebView2 Runtime versions, see Download the WebView2 Runtime in the Microsoft Edge WebView2 page at developer.microsoft.com. The minimum required Runtime version to support the General Availability release of the SDK (build 616) is older than for the latest Runtime. The latest Runtime supports all APIs that are in the latest Release SDK.
To check the compatibility between specific build numbers of the SDK and the Runtime or Microsoft Edge preview channel, see Release Notes for the WebView2 SDK.
Feature-detecting to test whether the installed Runtime supports recently added APIs
If your app uses the Evergreen Runtime rather than Fixed Version, you should wrap any calls to relatively new WebView2 APIs by using QueryInterface or try-catch. There are edge cases where a client's Evergreen Runtime isn't the latest build and therefore falls behind the SDK build number, because the Admin might have turned off updating of the WebView2 Runtime, or the client might be offline.
When you develop a WebView2 app using a recent version of the WebView2 SDK, if you use a recently added API, you should test or "feature-detect" whether that API is present in the client's installed WebView2 Runtime. How your app programmatically tests for API support depends on the coding platform.
 Win32 C/C++. When requesting the DLL export CreateCoreWebView2Environment and when running QueryInterface on any CoreWebView2 object, test for a return value of E_NOINTERFACE. That return value likely indicates that the client's
WebView2 Runtime is an older version that doesn't support that interface.
For an example of checking for the existence of specific WebView2 APIs in the Runtime, find try_query in AppWindow.cpp	. This file wraps WebView2 API calls in the CHECK_FAILURE macro function, defined in CheckFailure.h.
 .NET and WinUI. Use try/catch and check for a No such interface supported exception when using methods, properties, and events that were added to more recent versions of the WebView2 SDK. This exception likely indicates that the client's WebView2 Runtime is an older version that doesn't support that API.
If your code determines that an API is unavailable in the client's installed WebView2 Runtime, you should provide graceful fallback for the associated feature, or inform the user that they must update the WebView2 Runtime to use the feature.
Distribute your app and the WebView2 Runtime
Article • 07/01/2024
When releasing an app that uses Microsoft Edge WebView2, you need to distribute the WebView2 Runtime, either by distributing the automatically updated Evergreen Runtime, or by distributing a Fixed Version of the Runtime.
A WebView2 app depends on the WebView2 Runtime on client machines. When you distribute your WebView2 app, you need to take into account how the WebView2 Runtime is distributed to and updated on client machines.
The WebView2 Runtime
The WebView2 Runtime is a redistributable runtime and serves as the underlying (or backing) web platform for WebView2 apps. The concept is similar to Visual C++ or the .NET Runtime for C++/.NET apps. The WebView2 Runtime contains modified Microsoft
Edge binaries that are fine-tuned and tested for WebView2 apps. After the WebView2 Runtime is installed, it doesn't appear as a user-visible browser app. For example, a user doesn't have a browser desktop shortcut or an entry in the Start menu.
There are two different ways of distributing and updating the WebView2 Runtime to client machines: the Evergreen distribution mode, and the Fixed Version distribution mode.
The Evergreen Runtime distribution mode
In the Evergreen distribution mode, the WebView2 Runtime isn't packaged with your app, but is initially installed onto clients using an online bootstrapper or an offline installer. Afterwards, the WebView2 Runtime is automatically updated on client machines. You can then distribute updates of your WebView2 app that use the latest WebView2 APIs, from the latest WebView2 SDK. The Evergreen distribution mode is recommended for most developers.
Pros:
 The underlying web platform (WebView2 Runtime) updates automatically without more effort from you.
 Less disk space is required for the WebView2 Runtime on client systems, because the WebView2 Runtime is shared by all WebView2 apps that are on the client.
 On eligible systems, binaries for Microsoft Edge and the Evergreen WebView2 Runtime are hard-linked together when they are on the same version. This linking provides benefits for disk footprint, memory, and performance.
Cons:
 Your WebView2 app cannot specify that a particular version of the WebView2 Runtime is required.
Windows 11 devices and Windows 10 devices
The Evergreen Runtime is preinstalled onto all Windows 11 devices as a part of the
Windows 11 operating system. Microsoft installed the WebView2 Runtime to all eligible Windows 10 devices, as described in Delivering Microsoft Edge WebView2 Runtime to managed Windows 10 devices. Even if your app uses the Evergreen distribution mode, we recommend that you distribute the WebView2 Runtime, to cover edge cases where the Runtime wasn't already installed. See Details about the Evergreen Runtime distribution mode below.
The Fixed Version runtime distribution mode
In the Fixed Version distribution mode, you download a specific version of the WebView2 Runtime and package it together with your WebView2 app in your app package. The WebView2 Runtime that you package with your app is used only by your WebView2 app, not by any other apps on the client's machine.
Pros:
 You have more control over versioning of the WebView2 Runtime. You know which
WebView2 APIs are available to your app, because you control which version of the WebView2 Runtime is available to your app. Your app doesn't need to test whether the latest APIs are present.
Cons:
 You need to manage the WebView2 Runtime yourself. The WebView2 Runtime isn't automatically updated on clients, so to use the latest WebView2 APIs, you must periodically update your app together with the updated WebView2 Runtime.
 More disk space is required on the client, if there are multiple WebView2 apps installed.
 The Fixed Version runtime can't be installed by using an installer.
Understanding the options at the Runtime download page
The Download the WebView2 Runtime section of the Microsoft Edge WebView2 page provides several options for distributing the WebView2 Runtime onto client machines. Understanding the options at this page provides a good introduction, to help decide which approach you want to use.

The Evergreen distribution mode is recommended for most apps.
 The Evergreen Bootstrapper section of the page provides a small Evergreen Runtime bootstrapper that runs on the client machine, for online users. The bootstrapper downloads and installs the appropriate Evergreen WebView2 Runtime onto the client. You can use the bootstrapper a couple different ways:
 Link to the bootstrapper, using a link that you obtain from the Get the Link button. Your app uses this link to programmatically download the bootstrapper onto the client and invoke the bootstrapper. This approach avoids the need to package the bootstrapper with your app. This approach has a dependency on Microsoft's Content Delivery Network (CDN), to get the bootstrapper.
 Download the bootstrapper (using the Download button in the Bootstrapper section) and then distribute the bootstrapper with your app. In this approach, you package the bootstrapper with your app installer/updater or with your app itself, and invoke the bootstrapper that you included with your app. This approach avoids dependency on Microsoft's CDN, to get the bootstrapper.
 The Evergreen Standalone Installer section of the page provides a large, standalone Evergreen installer, primarily for offline users. In this approach, you package the standalone installer with your app installer/updater or app itself, and invoke the Evergreen Standalone installer. This approach avoids dependency on Microsoft's CDN, to get the Runtime.
 The Fixed Version section of the page provides a Fixed Version runtime, which is a specific version of the WebView2 Runtime that you distribute along with your app.
Details about the WebView2 Runtime
When distributing your WebView2 app, make sure that the WebView2 Runtime is present on the client machine. This requirement applies to both the Evergreen and Fixed Version distribution modes.
If you want to use the Fixed Version distribution mode, you can skip the next couple of sections and jump ahead to Details about the Fixed Version runtime distribution mode.
Servicing the WebView2 Runtime through Windows Server Update
Services (WSUS)
See Windows Server Update Services (WSUS) in Enterprise management of WebView2 Runtimes.
Runtime or browser support during development or production
During development and testing, a WebView2 app can use either option as the backing web platform:
 The WebView2 Runtime. The Runtime generally provides the same web platform capabilities and update cadence as the Stable channel of the Microsoft Edge browser. Use the WebView2 Runtime in a production environment or to develop and test against the web platform that your users have today.
 A preview (Insider) Microsoft Edge browser channel. These Microsoft Edge preview channels are Beta, Dev, and Canary. Use this approach to test your app for forward-compatibility, so that you know if a breaking change is coming that will require updating your app. See Test upcoming APIs and features.
A production release of a WebView2 app can only use the WebView2 Runtime as the backing web platform, not Microsoft Edge.
Microsoft Edge Stable channel isn't supported for WebView2
WebView2 apps aren't permitted to use the Stable channel of Microsoft Edge as the backing web platform. This restriction prevents a production release of a WebView2 app from taking a dependency on the browser. A WebView2 app cannot take a dependency on the browser during production, for the following reasons:
 Microsoft Edge isn't guaranteed to be present on all user devices. Many devices in enterprises and in education are disconnected from Windows Update or aren't managed by Microsoft directly. Such devices might not have Microsoft Edge installed. Requiring the production version of WebView2 apps to use the WebView2 Runtime rather than Microsoft Edge avoids making Microsoft Edge a prerequisite for running a WebView2 app.
 Browsers and apps have different use cases. If a WebView2 app required the presence of Microsoft Edge on the client, that would potentially have unintended side-effects on the WebView2 app. For example, an IT admin can prevent the browser from being updated from a specific version, to keep the browser compatible with an internal website. Requiring the production version of a WebView2 app to use the WebView2 Runtime rather than the browser allows the WebView2 app to stay evergreen even if browser updates are prevented by the clients' admin.
 As opposed to the browser, the WebView2 Runtime is developed and tested for app scenarios, and in some cases the WebView2 Runtime might include bug fixes that aren't yet available in the browser.
The Evergreen WebView2 Runtime will be included as part of the Windows 11 operating system. Various WebView2 apps have installed the Evergreen Runtime on devices with an operating system prior to Windows 11. However, some devices might not have the Runtime pre-installed, so it's a good practice to check whether the Runtime is present on the client.
Before your app creates a WebView2, the app should check whether the WebView2
Runtime is present (either by checking a registry key or by calling an API) and install the
Runtime if it is missing. The app can do this check when installing or updating your app
(recommended), or at app runtime. To check whether the Runtime is present, see Deploying the Evergreen WebView2 Runtime, below.
Details about the Evergreen Runtime distribution mode
The Evergreen distribution mode ensures that your WebView2 app is taking advantage of the latest WebView2 features and security updates. The Evergreen distribution mode has the following characteristics:
 The WebView2 Runtime updates automatically without requiring any action from you. It receives the same Microsoft Edge updates that are described in Release notes for Microsoft Edge Stable Channel and Release notes for Microsoft Edge Security Updates.
 All WebView2 apps that use the Evergreen distribution mode use a shared copy of the Evergreen WebView2 Runtime, which saves disk space.
 On eligible systems, binaries for Microsoft Edge and the Evergreen WebView2 Runtime are hard-linked together when they are on the same version. This linking provides benefits for disk footprint, memory, and performance.
When you use the Evergreen distribution mode of the WebView2 Runtime, your WebView2 app assumes that clients have the latest Runtime. Your app cannot require a particular version of the WebView2 Runtime for all apps on the client. By the time a new WebView2 SDK package is released, a compatible version of the WebView2 Runtime has already been distributed to clients. Therefore it's OK for your WebView2 app to use the APIs that are in the latest version of the WebView2 SDK.
Windows 11 devices and Windows 10 devices (details)
The vast majority of Windows 10 devices have the WebView2 Runtime installed already, as described in Delivering Microsoft Edge WebView2 Runtime to managed Windows 10 devices. A small number of Windows 10 devices don't have the WebView2 Runtime installed. We recommend that you handle this edge case, by using either of the following approaches:
 Programmatically deploy the Evergreen Runtime with your app. See Deploying the Evergreen WebView2 Runtime below.
 Redirect your end users to the Microsoft site: Download Microsoft Edge WebView2, and have end users download the Evergreen WebView2 Runtime installer from the site and install the Runtime themselves.
See also:
 Prerelease and Release SDKs for WebView2 - Use a Prerelease version of the SDK along with a preview channel of Microsoft Edge; or use a Release version of the SDK along with the Evergreen WebView2 Runtime.
 Delivering Microsoft Edge WebView2 Runtime to managed Windows 10 devices.
Deploying the Evergreen WebView2 Runtime
Only one installation of the Evergreen WebView2 Runtime is needed for all Evergreen apps on the device. Several tools are available at Download the WebView2 Runtime to help you deploy the Evergreen Runtime.
 For online clients: WebView2 Runtime Bootstrapper is a tiny (approximately 2 MB) installer. The WebView2 Runtime Bootstrapper downloads and installs the Evergreen Runtime from Microsoft servers that matches the user's device architecture.
 In the setup part of your WebView2 app, link to the bootstrapper. Use a link to programmatically download the bootstrapper; select the Get the Link button at the above download page.
Or, download the bootstrapper and package it with your WebView2 app.
For offline clients: WebView2 Runtime Standalone Installer is a full installer that installs the Evergreen WebView2 Runtime in offline environments.
 If you're using App Installer to deploy MSIX applications, you can specify the
WebView2 Runtime as a dependency, to have it be installed with the application.
For details about how to do this, see win32dependencies:ExternalDependency
(Windows 10, Windows 11) in the App package manifest docs. See also Install Windows 10 apps with App Installer.
Installing the Runtime as per-machine or per-user
The latest bootstrapper and standalone installer support both per-machine and per-user installs of the WebView2 Runtime.
If you run the installer from an elevated process or command prompt, the Runtime is installed as per-machine. If you don't run the installer from an elevated process or command prompt, the Runtime will be installed as per-user. However, a per-user install is automatically replaced by a per-machine install, if a per-machine Microsoft Edge Updater is in place. A per-machine Microsoft Edge Updater is included as part of Microsoft Edge, except for the Canary preview channel of Microsoft Edge.
Use the following online deployment workflow or offline deployment workflow to ensure that the Runtime is already installed before your app launches. You can adjust your workflow depending on your scenario. Sample code is available in the Samples repo.
Detect if a WebView2 Runtime is already installed
To verify that a WebView2 Runtime is installed, use one of the following approaches:
 Approach 1: Inspect the pv (REG_SZ) regkey for the WebView2 Runtime at both of the following registry locations. The HKEY_LOCAL_MACHINE regkey is used for permachine install. The HKEY_CURRENT_USER regkey is used for per-user install.
For WebView2 applications, at least one of these regkeys must be present and defined with a version greater than 0.0.0.0. If neither regkey exists, or if only one of these regkeys exists but its value is null, an empty string, or 0.0.0.0, this means that the WebView2 Runtime isn't installed on the client. Inspect these regkeys to detect whether the WebView2 Runtime is installed, and to get the version of the WebView2 Runtime. Find pv (REG_SZ) at the following two locations.
The two registry locations to inspect on 64-bit Windows:
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\
{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}
HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-
4295-8BDF-00C3A9A7E4C5}The two registry locations to inspect on 32-bit Windows:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-
FE2A-4295-8BDF-00C3A9A7E4C5}HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-
4295-8BDF-00C3A9A7E4C5}
 Approach 2: Run GetAvailableCoreWebView2BrowserVersionString and evaluate whether the versionInfo is nullptr. nullptr indicates that the WebView2
Runtime isn't installed. This API returns version information for the WebView2 Runtime or for any installed preview channels of Microsoft Edge (Beta, Dev, or Canary).
Online-only deployment
If you have an online-only deployment scenario where users are assumed to have internet access, use the following workflow.
1. During your app setup, run a test to make sure that the WebView2 Runtime is already installed. See Detect if a WebView2 Runtime is already installed, above.
2. If the Runtime isn't installed, in your app setup process, use the link (from the Get the Link button on the download page) to programmatically download the WebView2 Runtime Bootstrapper.
3. Invoke the WebView2 Runtime Bootstrapper by issuing the following command.
If you run the following command from an elevated process or command prompt, it triggers a per-machine install. If you don't run the command from an elevated process or command prompt, a per-user install will take place. However, a per-user install is automatically replaced by a per-machine install, if a per-machine Microsoft Edge Updater is in place. A per-machine Microsoft Edge Updater is provided as part of Microsoft Edge, except for the Canary preview channel of Microsoft Edge.
For more information, see Installing the Runtime as per-machine or per-user.
ShellMicrosoftEdgeWebview2Setup.exe /silent /installThe above workflow has several benefits:
The Runtime is installed only when needed.
You aren't required to package a Runtime installer with your WebView2 app.
The WebView2 Runtime Bootstrapper automatically detects the device's architecture (platform) and then installs the matching WebView2 Runtime.
 The Runtime is installed silently.
Alternatively, instead of programmatically downloading the bootstrapper on-demand by getting a link, as shown above, you can package the Evergreen Bootstrapper for the WebView2 Runtime with your app.
Offline deployment
If you have an offline deployment scenario, where app deployment has to work entirely offline, use the following workflow.
1. Download the Evergreen Standalone Installer from Download the WebView2 Runtime to your development machine. The Evergreen Standalone Installer installs the Evergreen WebView2 Runtime on the client.
2. Include the Evergreen Standalone Installer in your app installer or updater.
3. During your app setup, run a test to make sure that the WebView2 Runtime is already installed. See Detect if a WebView2 Runtime is already installed, above.
4. If the WebView2 Runtime isn't installed, run the Evergreen Standalone Installer. If you want to run a silent installation, you can run the following command.
If you run the following command from an elevated process or command prompt, it triggers a per-machine install. If you don't run the command from an elevated process or command prompt, a per-user install will take place. However, a per-user install is automatically replaced by a per-machine install, if a per-machine Microsoft Edge Updater is in place. A per-machine Microsoft Edge Updater is provided as part of Microsoft Edge, except for the Canary preview channel of Microsoft Edge.
For more information, see Installing the Runtime as per-machine or per-user.
ShellMicrosoftEdgeWebView2RuntimeInstaller{X64/X86/ARM64}.exe /silent 
/installHandle Evergreen WebView2 Runtime updates
New versions of the Evergreen WebView2 Runtime are automatically downloaded to the client. The client uses the new version of the WebView2 Runtime when your WebView2 app is restarted. However, if your app runs continuously, your app will continue to use the previous version of the WebView2 Runtime. This has security implications, because the previous version of the WebView2 Runtime might have security vulnerabilities that are fixed in the new version. You should consider whether it is important for your app to adopt the latest version of the WebView2 Runtime as soon as possible, based on your app's threat model. For example, if your WebView2 app accesses third-party content, that content should be considered untrusted, so your app would need to use the latest version of the WebView2 Runtime.
To use the new version of the WebView2 Runtime, you need to either release all references to the previous WebView2 environment objects, or restart your app. The next time your app creates a new WebView2 environment, the app will use the new version of the WebView2 Runtime. To accomplish this, you can have an event handler for the
NewBrowserVersionAvailable event, to have your app automatically notify the user to restart the app. If your app handles restarting the app, consider saving the user state before the WebView2 app exits.

Test your app for forward-compatibility
In the Evergreen distribution mode, the WebView2 Runtime is automatically kept up to date on the client to provide the latest features and security fixes. If you use Evergreen distribution, to ensure that your WebView2 app stays compatible with the web, you should set up testing infrastructure.
For best practices about how to test your app for forward-compatibility, see Prerelease testing using preview channels and Self-host by deploying preview channels.
Feature-detect when using recent APIs
When using Evergreen mode in WebView2 apps, it's crucial to check for the presence of new APIs on the client's machine, by using methods like QueryInterface or try-catch, because the client machine might not have the latest WebView2 Runtime, containing the new APIs. Updates to the WebView2 Runtime might not occur if an IT Admin disables updating, or if the client is offline.
For details, see Feature-detecting to test whether the installed Runtime supports recently added APIs in Prerelease and Release SDKs for WebView2.
There are separate update policies for Microsoft Edge and the WebView2 Runtime.
Disabling updates for Microsoft Edge doesn't impact the availability of the latest WebView2 APIs, because the WebView2 Runtime can still update automatically (unless updating the WebView2 Runtime is disabled by an Admin).
Details about the Fixed Version runtime distribution mode
For constrained environments that have strict compatibility requirements, consider using the Fixed Version distribution mode. (The Fixed Version distribution mode was previously called bring-your-own.)
In the Fixed Version distribution mode, you control the timing of updates to the
WebView2 Runtime for your app. You download a specific version of the WebView2 Runtime and then package it with your WebView2 app. The WebView2 Runtime on the client isn't automatically updated. Instead, you periodically update the WebView2 Runtime that's packaged and distributed together with your updated app. The Fixed Version approach doesn't use a registry key for the WebView2 Runtime.
The Fixed Version binaries are over 250 MB and will make your app package larger by that amount.
To use the Fixed Version distribution mode:
1. Download the Fixed Version of the WebView2 Runtime from Download the WebView2 Runtime, as a package.
The most-patched version of the latest and second-latest major releases are available for download at this site. Keep an archived copy of any versions you need.
2. Decompress the WebView2 Runtime package using the command-line command expand {path to the package} -F:* {path to the destination folder} or by using
a decompression tool such as WinRAR. Avoid decompressing through File Explorer, because that approach might not generate the correct folder structure.
3. Include all of the decompressed Fixed Version binaries in your app package, to be deployed on the target machine during your app's installation.
4. Indicate the path to the Fixed Version binaries when creating the WebView2 environment.
 For Win32 C/C++, you can create the environment using the
CreateCoreWebView2EnvironmentWithOptions function. Use the browserExecutableFolder parameter to indicate the path to the folder that
contains msedgewebview2.exe.
 For .NET, you must specify the environment before the WebView2 Source property takes effect. For .NET, you can use either of the following approaches to specify the environment:
 Set the CreationProperties (WPF/WinForms) property on the WebView2 element. Use the BrowserExecutableFolder member in the
CoreWebView2CreationProperties (WPF/WinForms) class to indicate the path to the Fixed Version binaries.
 Alternatively, use EnsureCoreWebView2Async (WPF/WinForms) to specify the environment. Use the browserExecutableFolder parameter in
CoreWebView2Environment.CreateAsync to indicate the path to the Fixed Version binaries.
 For WinUI, make sure the app has access to the folder by specifying the installed location and setting the environment variable for runtime path. One way to do this is by adding the following C# code to your app:
C#StorageFolder localFolder = 
Windows.ApplicationModel.Package.Current.InstalledLocation;
String fixedPath = Path.Combine(localFolder.Path, "FixedRuntime\\
(version number)");
Debug.WriteLine($"Launch path [{localFolder.Path}]");
Debug.WriteLine($"FixedRuntime path [{fixedPath}]");
Environment.SetEnvironmentVariable("WEBVIEW2_BROWSER_EXECUTABLE_FO
LDER", fixedPath);5. Package and ship the Fixed Version binaries with your app. Update the binaries as appropriate.
 For WinUI, this might include opening the project file (.csproj) in a code editor, and then add the following code within the project tags:
XML<ItemGroup>
   <Content Include="FixedRuntime\(version number)\\**\*.*">
   <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>   </Content>
</ItemGroup>
Verify that the bin\**designated architecture**\Release folder has a matching FixedRuntime\(version number) folder with the runtime files in it.
6. On Windows 10 devices, starting with Fixed Version 120, developers of unpackaged Win32 applications using Fixed Version are required to run the following commands, for Fixed Version to continue to work. This is due to a security improvement in v120 to run the Renderer process inside the App Container. This change doesn't affect Windows 11 devices, the older runtime, or packaged apps.
a. Locate the path where you deploy the Fixed Version package on the user's device, such as the following location:
textD:\myapp\Microsoft.WebView2.FixedVersionRuntime.87.0.664.8.x64b. Run the following commands on the user's device:
shellicacls {Fixed Version path} /grant *S-1-15-2-2:(OI)(CI)(RX) icacls {Fixed Version path} /grant *S-1-15-2-1:(OI)(CI)(RX)c. Confirm that permissions are granted for ALL APPLICATION PACKAGES and ALL RESTRICTED APPLICATION PACKAGES in the Security tab of the Fixed Version folder, as shown below:

Known issues for Fixed Version
 Currently, Fixed Version cannot be run from a network location or UNC path.
Files to ship with the app
The WebView2Loader code needs to be shipped with the app. This can be done by statically linking WebView2Loader.lib into the app binaries, or by including the
WebView2Loader.dll that matches the app's architecture. Usually this is handled automatically for you by Visual Studio when using the .targets file in the WebView2
SDK, but there might be cases when you need to manually specify what files to publish with your app.
WebView2Loader.dll is a native and architecture-specific binary, so you need to include all flavors of this binary that you expect your app to run in. For example:
For x86, you would include the x86 version of WebView2Loader.dll.
For a managed app using AnyCPU, you would include the x86, x64, and arm64 versions of WebView2Loader.dll. The correct version of WebView2Loader.dll is loaded from the appropriate architecture-specific folder.
Example native app folder structure:
\<myApp>
    \WebView2Loader.dllFor .NET managed apps, you also need to include the WebView2 .NET assemblies for the core WebView2 functionality (Microsoft.Web.WebView2.Core.dll) and for the WPF/WinForms-specific functionality (Microsoft.Web.WebView2.Winforms.dll or Microsoft.Web.WebView2.WPF.dll).
Example managed app folder structure:
\<myApp>
    \Microsoft.Web.WebView2.Core.dll
    \Microsoft.Web.WebView2.Winforms.dll
    \Microsoft.Web.WebView2.WPF.dll
    \runtimes
        \win-arm64\native\WebView2Loader.dll (arm64)
        \win-x64\native\WebView2Loader.dll (x64)
        \win-x86\native\WebView2Loader.dll (x86)
Feedback
Was this page helpful?  Yes  No
Enterprise management of WebView2 Runtimes
Article • 03/01/2022
WebView2 is a component that developers use to build their applications, and the developers can deploy a self-updating Evergreen WebView2 Runtime onto user devices to power their applications. This article discusses how IT admins can manage WebView2 applications and the WebView2 Runtime.
Feedback from IT admins and developers is welcome, through the WebView2 Feedback repo.
Group policies for WebView2
IT admins can use group policy objects (GPO) to configure policy settings for WebView2.
The following policies are relevant to WebView2.
Update policies
Microsoft Edge - Update policies are available for IT admins to manage the installing and updating aspects of the WebView2 Runtime. The Microsoft Edge browser and WebView2 Runtime are updated using the same update mechanism. Unless a policy, such as Update, is channel-specific, it applies to both the browser and WebView2 Runtime.
For example, UpdateSuppressed allows IT admins to set the time during each day at which to suppress auto-update for both the browser and WebView2 Runtime. This enables IT admins to configure preferences and proxies once for both the browser and the WebView2 Runtime, to control their network bandwidth/traffic or for other purposes.
IT admins can follow Microsoft Edge's guide to configure Microsoft Edge - Update policies.
Browser policies
Microsoft Edge - Browser policies doesn't apply to WebView2 applications. This is by design, because apps and browsers have different use cases, and IT admins might not be aware of what applications use WebView2.
Applying browser policies on WebView2 would have unintended consequences. For example, IT admins can block JavaScript in the browser, and that would break WebView2 apps that use JavaScript. To prevent that, browser policies are separate from WebView2 policies.
WebView2-specific policies
WebView2-specific policies are available to for you to manage WebView2 directly. However, we recommend that WebView2 app developers implement their own group policies to manage the use of WebView2, because it's easier for administrators to manage the app instead of managing WebView2 directly.
Windows Server Update Services (WSUS)
Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates of WebView2 that are released through Microsoft Update to computers on your network.
The recommended way of receiving WebView2 updates is by using the default Microsoft Edge updater. Any modification of update and servicing paths should be done with caution.
WebView2 Deployment and Update using WSUS
WebView2 options in Configuration Manager exist under the Microsoft Edge Management node. For more information, visit Update Microsoft Edge.
See also
 Distribute your app and the WebView2 Runtime - About the Evergreen, selfupdating WebView2 Runtime.

Feedback
Was this page helpful?  Yes  No

Distribute a WebView2 app as a single executable file
Article • 06/19/2023
You may want to distribute your application with a single executable file, instead of a package of many files. To create a single executable file, or to reduce the size of your package, you should statically link the WebView2Loader files. The WebView2 SDK contains a header file, WebView2Loader.dll, and the IDL file. WebView2Loader.dll is a small component that helps apps locate the WebView2 Runtime, or Microsoft Edge preview channels, on the device.
For an app that doesn't ship WebView2Loader.dll, do the following:
1. Open the .vcxproj project file for your app in a text editor, such as Visual Studio Code.
The .vcproj project file might be a hidden file, meaning that the file isn't shown in Visual Studio. To find hidden files, use the command line.
2. Locate the section in the code where you include the WebView2 NuGet package target files. The location in the code is highlighted in the following figure:

XAML<PropertyGroup>
    <WebView2LoaderPreference>Static</WebView2LoaderPreference>
</PropertyGroup>The inserted code is shown below:

4. Compile and run your app.
See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference

Publish a UWP WebView2 app to the Microsoft Store
Article • 10/13/2022
A UWP WebView2 app is a Universal Windows Platform (UWP) app that hosts the WebView2 control. To make a UWP WebView2 app widely available, you can publish it to the Microsoft Store, by following the steps below.
For general background information about publishing to the Windows Store, see Publish Windows apps and games, at Windows App Development documentation > UWP. The steps below provide the specific details about how to publish a UWP WebView2 app.
Step 1: Configure a Microsoft Store account in Visual Studio
 Make sure you have a Microsoft Store account configured in Microsoft Visual Studio.
If needed, see Get registered, about developer accounts for the Microsoft Store.
Then continue with the steps below.
Step 2: Test the non-packaged host app
Test for these common basic issues before submitting your app to the Microsoft Store. This will help prevent Store certification failures, which would delay your app from becoming available.
1. Make sure the app runs correctly on startup.
2. Make sure the app works correctly during shutdown sleep.
Step 3: Package the host app
The Microsoft Store requires submitting a packaged app. Package your app as follows:
1. Update the package.appxmanifest with all needed content, such as Visual Assets, Packaging name, and Application information. If you don't do this, the Microsoft Store validation step will fail. Then continue with the steps below.
2. At Partner Center, select Project > Publish and then reserve an application name.
3. Associate the application with the reserved name, by selecting Project > Publish > Associate App with the Store.
4. Create the app package, by selecting Project > Publish > Create App Packages.
Select the target configurations:

32-bit and 64-bit versions of the WebView2 Runtime will work in UWP on nonARM platforms. 32-bit is not supported for ARM, due to dependencies on Microsoft Edge. 64-Bit is supported on ARM.
5. Once the app package has been created for your configurations, the Create App Packages window displays the Finished creating package dialog:

6. In the dialog, note where the package bundle was placed. This information is also shown in the build window.
7. Click the Close button.
Step 4: Test the package
To make sure that all required content files are present in the package, and to make sure the files have correct permissions, test your packaged app, as follows:
1. Use the generated app package to install the app on your machine. Look for any oddities regarding required packages and functionality.
2. If possible, install your app on other machines also. Look for any oddities regarding required packages and functionality.
Step 5: Run Windows App Certification Kit (WACK)
Windows App Certification Kit (WACK) is an app that's a certification tool. This tool evaluates your host app against the Microsoft Store's requirements.
Once you're satisfied that your packaged app works, run the Windows App Certification Kit (WACK):
1. Generate the app package again, as above. That's the easiest way to get to the Windows App Certification Kit (WACK) process.
2. Once the package creation is complete, select Launch Windows App Certification
Kit.
3. You must approve the User Access Control (UAC) dialog, for the Windows App Certification Kit (WACK) to run correctly.
4. Select All for the test suite, and then click Next.
5. After a few minutes, the Windows App Certification Kit (WACK) shows a results page. If the app failed, click the link to review the results.
Resolving tests
The results page of the Windows App Certification Kit (WACK) app shows any tests that need to be resolved.
Restricted name-space
If your app failed the Restricted name-space check, edit the package.appxmanifest file and remove the restrictedcapabilities line and any capabilities that use rescap.
WebView2 shouldn't require any restricted capabilities, to operate. If your app needs restricted capabilities, you'll need to either ask for a store exception through Partner Center, or only distribute the app through non-Store avenues.
Branding
If your app failed the Branding checks, update all the Visual Assets in the manifest as described above.
App Capabilities
If your app failed the App Capabilities tests, turn off any unneeded capabilities. If you need a special use capability you will need to get Microsoft Store approval or use nonStore distribution methods.
General metadata correctness
If your app failed the General metadata correctness tests with an error in IPopup4, update the microsoft.UI.xaml NuGet package to version Microsoft.UI.Xaml.2.8.0prerelease.220118001 or higher. There was a bug in the manifests, prior to that version.
Supported API
In this test, WACK checks the Windows APIs that your host app is calling, to make sure they're supported.
If your app failed the Supported API test, update the Windows SDK to version 22000 or higher, to get the latest version of the allowed-APIs list. There should be no blocking APIs for WebView2 in the current Windows SDK.
Step 6: Upload the app package
 After all of the Windows App Certification Kit (WACK) tests have passed, upload your app package to the Windows Store, by using either of the following approaches:
 Approach 1: In Windows App Certification Kit (WACK), select Project > Publish > Upload App Packages.
 Approach 2: Go to Partner Center and upload your app package to the Windows Store through Partner Center.
See also
Get registered - Creating a developer account for the Microsoft Store.
  Publish Windows apps and games, at Windows App Development documentation > UWP. General background information about publishing to the Windows Store. Windows App Certification Kit
Feedback
Was this page helpful?  Yes  No
Development best practices for WebView2 apps
Article • 07/01/2024
We recommend the following best practices for developing production WebView2 apps.
Use the Evergreen WebView2 Runtime
We recommend using the Evergreen WebView2 Runtime for most WebView2 apps, rather than using the Fixed Version runtime.
The Evergreen runtime updates automatically on the client, so that the latest features and security patches are available to your WebView2 app. The Evergreen runtime also requires less storage space on the disk than the Fixed Version runtime. Fixed Version runtime distribution is only recommended for apps that have strict compatibility requirements.
For more information about the benefits of the Evergreen Runtime, see Details about the Evergreen Runtime distribution mode in Distribute your app and the WebView2 Runtime.
To help ensure that your WebView2 app works well with the Evergreen WebView2 Runtime, use the recommended practices in the subsections below:
Check to make sure the WebView2 Runtime is installed.
Handle updates of the WebView2 Runtime.
Do forward-compatibility testing using Edge preview channels.
Use feature detection for newer APIs.
Check to make sure the WebView2 Runtime is installed
When using the Evergreen WebView2 Runtime, before your app uses the WebView2 control, programmatically check to make sure that the Evergreen WebView2 Runtime is installed on the client.
See Detect if a WebView2 Runtime is already installed in Distribute your app and the WebView2 Runtime.
Handle updates of the WebView2 Runtime
When using the Evergreen WebView2 Runtime, handle Evergreen WebView2 Runtime updates. Updates of the Evergreen WebView2 Runtime are automatically downloaded, but a running WebView2 app will continue using its current version of the WebView2 Runtime, potentially missing security updates. To adopt the new version, an app must release all references to previous WebView2 objects or restart. Implementing a
NewBrowserVersionAvailable event handler can prompt users to restart the app for updates, with a recommendation to save user state before exiting for a seamless transition.
See Handle Evergreen WebView2 Runtime updates in Distribute your app and the WebView2 Runtime.
Do forward-compatibility testing using Edge preview channels
When using the Evergreen WebView2 Runtime, run forward-compatibility tests by using the preview channels of Microsoft Edge (Beta, Dev, or Canary).
Because the Evergreen Runtime updates automatically, you should regularly run compatibility tests to ensure that your WebView2 app will continue to work as expected on the new Runtime version. This can be done by testing your web content in the WebView2 control against the Microsoft Edge preview channels.
Follow the guidance in Prerelease testing using preview channels and Self-host by deploying preview channels.
Use feature detection for newer APIs
When using the Evergreen WebView2 Runtime, use feature detection to test whether the installed Runtime supports recently added APIs. To run a WebView2 app that was developed with a particular version of the Webview2 SDK, the client must have a compatible version of the WebView2 Runtime installed.
When using the Evergreen WebView2 Runtime, there are some scenarios where the runtime on a client hasn't been automatically updated to the latest version. Additionally, some group policies pause updating of the runtime. As a result, when you push an update to your WebView2 app, the app might not work if it tries to call newer APIs that aren't available in the client's installed runtime. Therefore, you should use feature detection to make sure that the newer APIs that are used by your WebView2 app are supported by the WebView2 Runtime that's installed on the client.
See Feature-detecting to test whether the installed Runtime supports recently added APIs in Prerelease and Release SDKs for WebView2.
Update regularly if using the Fixed Version Runtime
If you use the Fixed Version WebView2 Runtime, make sure you regularly update the WebView2 Runtime that's packaged with your app, to reduce security risks. To determine how often you should update the Fixed Version Runtime, you should consider your app's threat model. For example, when using third-party content in Webview2 apps, always consider the content to be untrusted.
See Details about the Fixed Version runtime distribution mode in Distribute your app and the WebView2 Runtime.
Manage the lifetime of the user data folder
WebView2 apps create a user data folder to store data such as cookies, credentials, and permissions. After creating the user data folder, your app is responsible for managing the lifetime of the user data folder. For example, your app must do cleanup when the app is uninstalled.
See Manage user data folders for further guidance on managing the user data folder.
Handle runtime-process failures or exits
WebView2 apps are supported by a collection of runtime processes that run alongside the app process. These supporting runtime processes can fail for various reasons, such as running out of memory, or being terminated by the user. Your WebView2 app should handle these process-related events, to ensure that the app can recover from failures and continue to run smoothly.
See Handling process-related events in WebView2.
Event handlers on the environment object
If any of your app's event handlers on the environment object hold a reference to the environment object, and the app simply releases the reference to the environment and event handlers without removing the event handlers, there might be a circular reference between the environment object and handler objects, which will leak memory.
To prevent such a memory leak:
 For any added event handler, remove the event handler before releasing the environment object.
 Avoid holding a reference to the environment object in an event handler. Instead, the event handler can access the environment object from the sender argument of the "event completed" callback.
 If you want the app to hold a reference to a WebView2 object, use a weak reference whenever possible.
Follow security best practices
WebView2 enables you to host web content in your native applications, providing advantages such as using web-based UI, accessing features of the web platform, and sharing code cross-platform.
However, hosting web content can also introduce vulnerabilities. To avoid vulnerabilities that can arise from hosting web content within a native application, make sure to design your WebView2 application to closely monitor interactions between the web content and the host application.
Follow the guidance in Develop secure WebView2 apps.

Feedback
Was this page helpful?  Yes  No
Develop secure WebView2 apps
Article • 07/01/2024
WebView2 allows developers to host web content in the native applications. When used correctly, hosting web content offers several advantages, such as using web-based UI, accessing features of the web platform, or sharing code cross-platform.
In a web browser, websites are granted limited powers in a sandboxed environment. However, when hosting web content in a native application, the web content can access the native application's resources and APIs. This can lead to security vulnerabilities if the web content is not properly isolated from the host application. To avoid these vulnerabilities, follow the below practices to improve the security of your WebView2 application.
Treat all web content as insecure
 Always check the origin of the document that's running inside WebView2, and assess the trustworthiness of the content, especially before using ExecuteScript,
PostWebMessageAsJson, PostWebMessageAsString, or any other method to send information into the WebView2 control. The WebView2 control may have navigated to another page via the end user interacting with the page or script in the page causing navigation. The origin of the document can be obtained from the Source property of the WebView2 control.
Be careful with AddScriptToExecuteOnDocumentCreated. All future navigations run the same script, and if that script provides access to information that's intended only for a certain origin, any HTML document may have access to the native application's resources and APIs.
 Validate web messages and host object parameters before consuming them, because web messages and parameters can be malformed (unintentionally or maliciously) and can cause the app to behave unexpectedly.
When examining the result of an ExecuteScript method call, which is a
WebMessageReceived event, always check the Source property of the WebView2 control to check the source of the sender, or check any other mechanism of receiving information from an HTML document in a WebView2 control, to validate that the URI of the HTML document is what you expect.
Avoid generic proxies
Design specific web messages and host object interactions, instead of using generic proxies.
Use PostWebMessageAsJson to send messages
Use the PostWebMessageAsJson method to send messages to the WebView2 control.
When constructing a message to send into a WebView2 control, prefer using
PostWebMessageAsJson and construct the JSON string parameter using a JSON library.
This avoids any potential accidents of encoding information into a JSON string or script, and ensures that no attacker-controlled input can modify the rest of the JSON message or run arbitrary JavaScript code.
Restrict web content functionality
Restrict web content functionality, if it's not needed. Update the WebView2 properties in CoreWebView2Settings to restrict the functionality of the web content, as follows:
Set AreHostObjectsAllowed to false, if you don't expect the web content to access host objects.
Set IsWebMessageEnabled to false, if you don't expect the web content to post web messages to your native application.
Set IsScriptEnabled to false, if you don't expect the web content to run scripts (for example, when showing static HTML content).

Update settings based on the origin of the new page
Update settings based on the origin of the new page, as follows:
To prevent your application from navigating to certain pages, use the
NavigationStarting and FrameNavigationStarting events to check page or frame navigation, and then conditionally block the navigation.
 When navigating to a new page, you may need to adjust the property values on the CoreWebView2Settings object to match the security requirements of the new page, as described in Restrict web content functionality, above.
Remove exposed host objects
When navigating to a new document, use the ContentLoading event and RemoveHostObjectFromScript to remove exposed host objects.
WebView2 cannot be run as a system user
WebView2 cannot be run as a system user. This restriction blocks scenarios such as building a Credential Provider.

Test upcoming APIs and features
Article • 04/25/2024
This article explains how to switch to a preview channel of Microsoft Edge, to test experimental APIs that are in a WebView2 Prerelease SDK package.
To test new or forthcoming APIs and features, switch to a Microsoft Edge preview channel rather than using the stable WebView2 Runtime. The Evergreen WebView2 Runtime is updated frequently to add new APIs and functionalities. These updates can include APIs have been promoted from Experimental in a Prerelease WebView2 SDK to Stable in the WebView2 Release SDK. Some of the updates in the Evergreen WebView2 Runtime could potentially break your WebView2 app.
We recommend that you test the Experimental APIs ahead of time, before they are promoted to Stable in the WebView2 Release SDK, by switching to a preview channel of Microsoft Edge (which includes WebView2), to ensure that your app is forwardcompatible.
See also:
Phases of introducing APIs in Prerelease and Release SDKs for WebView2. Prerelease and Release SDKs for WebView2 - Use a Prerelease version of the SDK along with a preview channel of Microsoft Edge; or use a Release version of the SDK along with the Evergreen WebView2 Runtime.
Use a preview channel of WebView2 to test your app against the most recent experimental WebView2 APIs
The Evergreen WebView2 Runtime doesn't include experimental WebView2 APIs. Instead, to use these experimental features in your WebView2 code, have your app use the version of WebView2 that is in a Microsoft Edge preview channel (Edge Beta, Edge Dev, or Edge Canary).
The Canary channel is recommended, because it offers the latest experimental APIs.
Interplay between the WebView2 Prerelease SDK and Microsoft Edge Preview Channels
 Prerelease SDK: This version of the WebView2 SDK provides method signatures for experimental APIs, which allow you to write code using the experimental WebView2 APIs in your app.
 Microsoft Edge Preview Channels: These channels (Edge Beta, Edge Dev, or Edge Canary) contain the necessary Microsoft Edge binaries. These channels allow your app to run and render using the experimental APIs.
For more information about how SDK versions interact with the WebView2 Runtime and the Microsoft Edge preview channels, see Prerelease and Release SDKs for WebView2.
Forward-compatibility testing by using the preview channel
We recommend that you test upcoming changes using preview channels to ensure your app's forward compatibility, by following these best practices:
Prerelease testing using preview channels
Self-host by deploying preview channels
Downloading the prerelease SDK and a preview channel
To use experimental APIs, download a prerelease version of the WebView2 SDK from Microsoft.Web.WebView2 package.
Preview channels of Microsoft Edge include the preview WebView2 Runtime. Preview channels are also called Insider channels. After being installed, the preview channels stay up-to-date; the latest version of each preview channel is automatically installed. For example, this means the Canary channel will update itself almost daily. To download a Microsoft Edge preview channel (Canary, Dev, or Beta), go to Become a Microsoft Edge Insider.
To deploy the preview channel to multiple machines, see How to deploy preview channels, below.
Approaches to making your app use a specific browser channel
When a WebView2 is initialized, it will attempt to find a valid runtime on the machine to use. This can be the WebView2 Runtime, a preview channel of Microsoft Edge, or a specified location that contains Fixed Version binaries. For more information about supported runtimes, see Distribute your app and the WebView2 Runtime.
There are two ways to make your WebView2 app use a specific preview channel of Microsoft Edge:
Switching the channel search order (recommended).
Setting the browser executable folder (for local testing).
These approaches are described below.
Switching the channel search order (recommended)
This section applies to using an API, registry override, environment variable, or group policy.
If a specific browser executable folder isn't specified, then the WebView2 will attempt to load a runtime from one of the known default locations. By default, the WebView2 loader searches for runtimes from most-stable to least-stable (Canary), using the first runtime that's found.
WebView2 Runtime (Stable) ->  Edge Beta -> Edge Dev -> Edge CanaryYou can reverse the default search order by setting the ChannelSearchKind API to
LeastStable, or by setting the ChannelSearchKind policy, registry key, or environment variable to 1. Reversing the search order makes the WebView2 loader search from leaststable (Canary) to most-stable:
Edge Canary -> Edge Dev -> Edge Beta -> WebView2 Runtime (Stable)This must be done before the WebView2 control is initialized.
If you need a more specific order, see How to use ChannelSearchKind to ensure that a particular channel is used.

.NET:
CoreWebView2EnvironmentOptions.ChannelSearchKind Property CoreWebView2ChannelSearchKind Enum
WinRT:
CoreWebView2EnvironmentOptions.ChannelSearchKind Property CoreWebView2ChannelSearchKind Enum
Win32:
ICoreWebView2EnvironmentOptions7::get_ChannelSearchKind
ICoreWebView2EnvironmentOptions7::put_ChannelSearchKind
COREWEBVIEW2_CHANNEL_SEARCH_KIND enumHow to use ChannelSearchKind to ensure that a particular channel is used
When using ChannelSearchKind, here's how you can make sure that a certain preview browser channel is used when you have multiple preview browser channels installed.
In addition to reversing the channel search order, you can modify the set of release channels to include in the search, to provide further control over channel selection. The loader will search for channels on the device in the order specified by the channel search kind, but it will only consider channels that are in the specified set of release channels.
This option is useful if you would like to target a particular channel, instead of simply choosing the most or least stable channel. By default, the release channels includes all channels: Stable (0), Beta (1), Dev (2), and Canary (3).
Example:
Channel Search Kind: 1 (Least Stable)
Release Channels: 0 (Stable), 1 (Beta)This example setting causes the loader to try to run the app with Edge Beta if Edge Beta is installed on the device, and otherwise fall back to using the Stable WebView2 Runtime.
The release channels can similarly be set through the API, registry key, environment variable, or group policy.

Setting the browser executable folder (for local testing)
An alternative approach is to use a browser executable folder. In this approach, you specify a folder that contains runtime binaries. This folder can be any of the following locations:
The installed location of the WebView2 Runtime.
A preview channel of Microsoft Edge.
A folder containing Fixed Version binaries that you have deployed to the machine yourself.
If you set the browser executable folder to a specific preview channel of Microsoft Edge, you will need to update the location when that preview channel updates to a newer version. This is because the location includes the version number as part of its path.
Therefore, we recommend using this approach for local testing only.

When the new runtime gets picked up
If you are using an environment variable, registry key, or group policy, they are only applied to any new WebView2 Runtime browser processes that are created; they do not apply to WebView2 Runtime browser processes that are already running. For example, if you already have a WebView2 with a specific user data folder (and therefore a corresponding browser process) and change ChannelSearchKind before attempting to create a new WebView2 using that same user data folder, it will use the existing WebView2 Runtime browser process, and not search for a different runtime.
To ensure that all processes use the environment variable, registry key, or group policy, you need to do any of the following:
Restart the app.
Re-create all of the WebView2 controls that share a user data folder. Create a new WebView2 that has a different user data folder than any other currently running WebView2 controls.
How to set an environment variable
You can use multiple approaches to set environment variables:
Setting environmental variables by using APIs, for a specific app.
Setting environmental variables globally, for all apps.
These approaches are described below.
Setting environmental variables by using APIs, for a specific app
You can set environment variables by using SetEnvironmentVariable. Calling this function from your host app limits the scope of the environment variable to just your host app and the WebView2 controls that it creates, and doesn't affect other apps on the system.
.NET: Environment.SetEnvironmentVariable Method
WinRT: EnvironmentManager.SetEnvironmentVariable Method
Win32: SetEnvironmentVariable function (winbase.h)
Setting environmental variables globally, for all apps
You can set environment variables by using the Windows system UI. This approach makes the scope of the environment variable global for the current user or system, and affects all apps that create WebView2 controls.
1. In the Windows search bar, enter "environment", and then select Edit the system environment variables:

The System Properties dialog opens.
2. Select the Advanced tab, and then click the Environment Variables button:

The Environment Variables dialog opens.
3. In the User variables section at the top, click the New button. The New User Variable dialog opens.
4. In the Variable name text box, enter the environment variable name, either WEBVIEW2_CHANNEL_SEARCH_KIND or WEBVIEW2_BROWSER_EXECUTABLE_FOLDER.
5. In the Variable value text box, do either of the following:
 If setting the ChannelSearchKind, enter 1 to reverse the search order from the default, to use the preview channels first (Canary, Beta, then Dev), followed by the WebView2 Runtime. Any value other than 1 causes the default search order to be used (WebView2 Runtime, Edge Dev, Edge Beta, and then Edge Canary).
 If setting the BrowserExecutableFolder, enter the path to your preferred browser channel or fixed-version binaries.
6. Click the OK buttons to close the dialogs.
How to deploy preview channels
To deploy the preview channels of Microsoft Edge to multiple machines, do either of the following:
Option 1: Manually install preview channels on machines.
Option 2: Programmatically deploy preview channels via API endpoints.
These options are explained below.
Option 1: Manually install preview channels on machines
Preview channels can be manually installed (either manually or through a deployed custom script) through the following enterprise links:
ﾉ Expand table
ChannelLinkCanaryDownloadDevDownloadBetaDownloadManual installation only needs to be done once per machine. Prerelease channels are evergreen, so they will automatically get updated when newer versions are available.
Option 2: Programmatically deploy preview channels via API endpoints
In your app's code, write your own custom logic to deploy the latest version of a preview channel of Microsoft Edge as follows:
1. Call the following API endpoint that corresponds to the preview channel that you want to deploy:
ﾉ Expand table
ChannelLinkCanaryhttps://edgeupdates.microsoft.com/api/products/canary
MSI LinkDevhttps://edgeupdates.microsoft.com/api/products/devChannelLinkBetahttps://edgeupdates.microsoft.com/api/products/betaThe Canary channel has a separate MSI link. The Dev and Beta channels contain MSI links.
2. Fetch the latest package to the device.
3. Install the package.
See also
 Phases of introducing APIs in Prerelease and Release SDKs for WebView2.

Use the Chrome DevTools Protocol (CDP) in WebView2 apps
Article • 05/19/2023
The Chrome DevTools Protocol provides APIs to instrument, inspect, debug, and profile Chromium-based browsers. The Chrome DevTools Protocol is the foundation for the Microsoft Edge DevTools. Use the Chrome DevTools Protocol for features that aren't implemented in the WebView2 platform.
To use the Chrome DevTools Protocol API in a WebView2 app, do either of the following:
 Install and use the Microsoft.Web.WebView2.DevToolsProtocolExtension NuGet package (.NET).
Or, run one of the following methods:
.NET: CallDevToolsProtocolAsync, GetDevToolsProtocolEventReceiver
Win32 C/C++: CallDevToolsProtocolMethod, ICoreWebView2DevToolsProtocolEventReceiver
Use DevToolsProtocolHelper
The DevToolsProtocolExtension includes a DevToolsProtocolHelper object.
Microsoft.Web.WebView2.DevToolsProtocolExtension is a NuGet package created by the WebView2 team that provides easy access to Chrome DevTools Protocol features. The following examples describe how to use the geolocation functionality in Chrome DevTools Protocol in your WebView2 control. To use other Chrome DevTools Protocol features, you can follow a similar pattern.
Step 1: Create a webpage to find your geolocation
To create an HTML file to find your geolocation, complete following the actions.
1. Open Visual Studio Code (or an IDE of your choice).
2. Create a new .html file.
3. Paste the following code in your new .html file:
HTML<!DOCTYPE html>
<html lang="en">
<head>
   <title>Geolocation Finder</title>
</head>
<body>
   <button id="display">Display Location</button>
   <div id="message"></div>
</body>
<script>    const btn = document.getElementById('display');
   // Find the user location.    btn.addEventListener('click', function () {       navigator.geolocation.getCurrentPosition(onSuccess, onError);    });
   // Update message to display the latitude and longitude coordinates.    function onSuccess(position) {       const {latitude, longitude} = position.coords;       message.textContent = `Your location: 
(${latitude},${longitude})`;
   }
   function onError() {       message.textContent = `Operation Failed`;
   }
</script>
</html>4. Save the .html file with the file name geolocation.html.
5. Open Microsoft Edge.
6. Open geolocation.html.
7. To display your latitude and longitude coordinates, click the Display Location button. To verify and compare your geolocation, copy and paste your coordinates in https://www.bing.com/maps.

Step 2: Display geolocation.html in a WebView2
1. To create a WebView2 app, use a Get Started guide or the WebView2 samples:
Get started with WebView2
WebView2Samples repo
2. Set the initial navigation of the WebView2 control to geolocation.html:
C#webView.CoreWebView2.Navigate(@"C:\{path\to\file}\geolocation.html");
Step 3: Install the DevToolsProtocolHelper NuGet package
Use NuGet to download Microsoft.Web.WebView2.DevToolsProtocolExtension.
To install the package:
1. Select Project > Manage NuGet Packages > Browse.
2. Type Microsoft.Web.WebView2.DevToolsProtocolExtension and then select Microsoft.Web.WebView2.DevToolsProtocolExtension > Install.
3. Make sure Microsoft.Web.WebView2.DevToolsProtocolExtension is displayed in the Visual Studio NuGet Package Manager:

Step 4: Use DevTools Protocol Helper
1. Add the DevToolsProtocolExtension namespace to your project:
C#using Microsoft.Web.WebView2.Core;
using Microsoft.Web.WebView2.Core.DevToolsProtocolExtension;2. Instantiate the DevToolsProtocolHelper object and navigate to geolocation.html:
C#async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);    DevToolsProtocolHelper helper = webView.CoreWebView2.GetDevToolsProtocolHelper();    webView.CoreWebView2.Navigate(@"C:\{path\to\file}\geolocation.html");
}
3. Run the setGeoLocationOverrideAsync method:
C#async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);    DevToolsProtocolHelper helper = webview.CoreWebView2.GetDevToolsProtocolHelper();
   // Latitude and longitude for Paris, France.
   double latitude = 48.857024082572565;    double longitude = 2.3161581601457386;    double accuracy = 1;    await helper.Emulation.setGeolocationOverrideAsync(latitude, longitude, accuracy);
}For more information, see setGeolocationOverride.
4. Run your app.
5. To display the coordinates of Paris, France, click the Display Location button:

File a bug or feature request for the Chrome DevTools Protocol
To request a WebView2 platform feature, enter a new issue in the WebView2Feedback repo.
To file a bug about the Chrome DevTools Protocol, file a bug report in the Chromium bugs database.
The Chrome DevTools Protocol is maintained by the open source Chromium project, not by the Microsoft Edge WebView2 team.
See also
Microsoft Edge DevTools Protocol overview
WebView2Samples repo
Chrome DevTools Protocol (CDP) in Overview of WebView2 APIs

Feedback
Was this page helpful?  Yes  No

Use Playwright to automate and test in WebView2
Article • 06/07/2023
Use Playwright to automate and test webpages in a WebView2 control. See WebView2 in the Playwright docs.
See also
Use Playwright to automate and test in Microsoft Edge
Playwright documentation
Playwright repo on GitHub.
Issues page for Playwright - share your feedback on automating and testing your website or app with Playwright.

Automate and test WebView2 apps with Microsoft Edge WebDriver
Article • 05/25/2023
This article explains how to automate and test your WebView2 app with Microsoft Edge WebDriver, by using the Selenium framework for browser test automation.
This article provides instructions for using the Selenium framework and C#, but you can use any library, framework, and programming language that supports WebDriver. To accomplish the same tasks using a WebDriver testing framework other than Selenium, consult the official documentation for your framework of choice.
To create automated tests that simulate user interactions for your WebView2 app, you can use Microsoft Edge WebDriver. Microsoft Edge WebDriver is Microsoft's implementation of the W3C WebDriver protocol. The W3C WebDriver protocol allows programs to control the behavior of web browsers.
Test authors write tests that use WebDriver commands to tell the browser to perform specific actions. Microsoft Edge WebDriver receives these commands and then asks the browser to perform the requested action. Microsoft Edge WebDriver supports automating both the Microsoft Edge Browser, and WebView2 apps.
For the relationship between the WebDriver protocol, Microsoft Edge WebDriver as an implementation of that protocol, and the Selenium test framework, see WebDriver overview.
Step 1: Download the WebView2API Sample
If you don't have an existing WebView2 project, clone the WebView2Samples repo in order to download the WebView2API Sample app. That particular sample within the larger repo a comprehensive sample of the latest WebView2 SDK. Make sure you've satisfied the prerequisites for the WebView2API Sample app.
Once you've cloned the repo, build the project in Visual Studio. It should look like the following figure.

Step 2: Install Microsoft Edge WebDriver
Follow the instructions to install Microsoft Edge WebDriver. Microsoft Edge WebDriver is the browser-specific driver required by Selenium to automate and test WebView2.
Make sure the version of Microsoft Edge WebDriver matches the version of the WebView2 Runtime that your app uses. For the WebView2API Sample to work, make sure your version of the WebView2 Runtime is greater than or equal to the supported version of the latest WebView2 SDK release.
 To locate the latest WebView2 SDK release, see Release Notes for the WebView2 SDK.
To find out which version of the WebView2 Runtime you currently have, go to edge://settings/help.
Step 3: Add Selenium to the WebView2API Sample
By this point, you've installed the WebView2 Runtime, built a WebView2 project, and installed Microsoft Edge WebDriver. Next, get started using Selenium, as follows.
1. Start by creating a new C# .NET Framework project in Visual Studio. Select Next on the bottom right-hand corner to continue.

2. Give your project a Project name, save it to your preferred Location, and then select Create.


3. Next, add Selenium to the project; install Selenium by using the
Selenium.WebDriver NuGet package as follows. To download the
Selenium.WebDriver NuGet package, in Visual Studio, select Project > Manage NuGet Packages.
4. Select the Browse tab. The following screen appears.

5. In the Package source dropdown list, select nuget.org.
6. Select the Include prerelease checkbox.
7. Type Selenium.WebDriver in the Search bar, and then select Selenium.WebDriver from the results.
8. In the detail window on the right, make sure the Version is set to 4.0.0 or later, and then select Install. NuGet downloads Selenium to your machine.

To learn more about the Selenium.WebDriver NuGet package, see Selenium.WebDriver	.
9. Use OpenQA.Selenium.Edge by adding the statement using OpenQA.Selenium.Edge; at the beginning of the file Program.cs:
C#using OpenQA.Selenium.Edge;
using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;You've now set up an empty Visual Studio project that's suitable for Selenium testing. Next, configure Selenium to drive WebView2 by using either the "launch" approach or the "attach" approach.
Step 4: Choosing whether Microsoft Edge WebDriver should launch your app or attach to it
Decide whether to configure Selenium to drive WebView2 by using the "launch" or "attach" approach.
 The "launch" approach: In some scenarios, it's appropriate to let Microsoft Edge WebDriver handle launching your WebView2 app. Microsoft Edge WebDriver launches your WebView2 app and automatically attaches to the first available WebView2 instance that your app creates.
 The "attach" approach: In other scenarios, it's appropriate to attach Microsoft Edge
WebDriver to a running WebView2 instance. You launch your app outside of
Microsoft Edge WebDriver, and then attach Microsoft Edge WebDriver to a running WebView2 instance. This "attach" approach is for a WebView2 app that's not compatible with the "launch" approach.
Approach 1: Letting Microsoft Edge WebDriver launch your WebView2 app
If you have a simple app that creates a single WebView2 instance and that instance is active immediately upon launch, then you can use the "launch" approach; use Step 4a:
Letting Microsoft Edge WebDriver launch your WebView2 app.
In this scenario, there's one WebView2 instance, and it's available upon launch, without needing to navigate through any native UI.
Approach 2: Attaching Microsoft Edge WebDriver to a running
WebView2 app
If you have any situation that doesn't fit the "launch" scenario above, you should attach
Microsoft Edge WebDriver to a running WebView2 instance (instead of letting Microsoft
Edge WebDriver handle the WebView2 launch); use Step 4b: Attaching Microsoft Edge WebDriver to a running WebView2 app.
Some examples of scenarios that don't fit the "launch" scenario are:
 You need to navigate through some native UI before the WebView2 instance is created.
 Your app creates multiple WebView2 instances, and you want to attach to a specific instance.
In such scenarios, we recommend attaching to a specific instance of WebView2, because having Microsoft Edge WebDriver launch your WebView2 app is for relatively simple scenarios only. When Microsoft Edge WebDriver launches your app, it automatically attaches to the first WebView2 instance that is created, and will fail if no WebView2 instance is found.
Regardless of whether you use the "launch" or "attach" approach, you must download
Microsoft Edge WebDriver, and make sure the version matches the version of the WebView2 runtime that your app uses. The initial steps to configure your WebDriver framework (such as Selenium) will differ between the "launch" versus "attach" approaches.
Once you've completed these initial steps to either launch an app or attach to a WebView2 instance, you'll be able to use any supported WebDriver commands to interact with that WebView2 instance.
Step 4a: Letting Microsoft Edge WebDriver launch your WebView2 app
Use this "launch" approach if you have a simple app that creates a single WebView2 instance and that instance is active immediately upon launch. In this scenario, there's one WebView2 instance, and it's available upon launch, without needing to navigate through any native UI.
To drive WebView2 with Selenium and Microsoft Edge WebDriver:
1. Create an EdgeOptions object, by copying and pasting the following code:
C#static void Main(string[] args)
{
   EdgeOptions eo = new EdgeOptions();Next, we'll add code that does the following:
Configure the EdgeOptions instance to use WebView2, by setting the
UseWebView option to true.
Set eo.BinaryLocation to the file path of your WebView2 app binary.
Create an EdgeDriver object using the EdgeOptions instance.
2. Copy the following code and paste it below the eo declaration line:
C#
//Set the EdgeOptions instance to use WebView2 eo.UseWebView = true;
//Set the BinaryLocation to the filepath of the WebView2API Sample runtime
eo.BinaryLocation = @"C:\path\to\your\webview2\project.exe";
EdgeDriver e = new EdgeDriver(eo);3. In the above code, specify the correct file path of your project runtime and the Microsoft Edge WebDriver runtime on your machine.
EdgeDriver has now been configured to drive the WebView2 in your project. For example, if you're using the WebView2API Sample, your code can now go to https://microsoft.com by running the e.Url = @"https://www.microsoft.com";
command, as shown in the next code listing.
4. Verify that Selenium can drive WebView2. To do this, set a breakpoint on the line
e.Url = @"https://www.microsoft.com";, and then run the project.
C#   //Navigate the WebView2API Sample from bing.com to microsoft.com
   e.Url = @"https://www.microsoft.com";
   //Exit Microsoft Edge WebDriver
   e.Quit();
}
Congratulations! You've successfully automated a WebView2 project and driven WebView2 by using Selenium and Microsoft Edge WebDriver, per the "launch" approach.
This is the end of the article, if you are using the "launch" approach.
Step 4b: Attaching Microsoft Edge WebDriver to a running WebView2 app
This section explains how to attach Microsoft Edge WebDriver to an already-running
WebView2 instance. If you don't have just a single WebView2 instance, or your WebView2 instance requires navigating through some native UI, use this section and approach.
A problem is that to automate a WebView2-based app, you sometimes first need to perform some actions in the native GUI in order to launch the WebView2 control. As a solution, you need to navigate the native UI outside of Microsoft Edge WebDriver, and somehow ensure that the WebView2 instance is displayed, as follows.
In this scenario, where you have some native UI to navigate, you launch your app using a method other than Microsoft Edge WebDriver, such as a command line script, or a separate tool such as WinAppDriver. Once your app process has been launched, you trigger the WebView2 instantiation, and then attach Microsoft Edge WebDriver to the running WebView2 instance.
Microsoft Edge WebDriver doesn't handle native UI automation, but here are some other approaches to navigate the native UI and display the WebView2 instance that you are automating:
 Windows Application Driver (WinAppDriver) is a service to support Selenium-like
UI Test Automation on Windows Applications. This service supports testing
Universal Windows Platform (UWP), Windows Forms (WinForms), Windows Presentation Foundation (WPF), and Classic Windows (Win32) apps on Windows 10 PCs.
 Using Microsoft Native UI automation directly. The Microsoft UI Automation framework allows automated test scripts to interact with the UI. Microsoft UI Automation enables Windows applications to provide and consume programmatic information about user interfaces (UIs). It provides programmatic access to most UI elements on the desktop. It enables assistive technology products, such as screen readers, to provide information about the UI to end users and to manipulate the UI by standard input and by means other than standard input.
 Use a flag such as a command-line parameter or an environment variable to tell your app to launch directly to the WebView2 instance, to avoid the need for navigating native UI. Depending on your scenario, this might make it possible to use the "launch" approach described in Step 4a: Letting Microsoft Edge WebDriver launch your WebView2 app.
In addition to ensuring the WebView2 instance is activated, you need to set its -remote-debugging-port command-line parameter. We'll do this in the steps below. Microsoft Edge WebDriver will use this remote debugging port to connect to your WebView2 instance.
Launching the WebView2 app with remote debugging enabled
The next step happens when you're coding your app. You need to provide this extra command-line parameter when you're instantiating your WebView2 control. Enable remote debugging, as follows.
1. Configure your WebView2 instance with the --remote-debugging-port=<port> additional command-line parameter using one of the recommended approaches in Globals, in WebView2 Win32 C++ Reference. Choose an available port number for this parameter.
2. Launch your app. How you launch your app depends on what other native UI testing tools you're using.
At this point, your app is running and its --remote-debugging-port command-line parameter has been set. Next, we'll attach Microsoft Edge WebDriver to the launched WebView2 app.
Attaching Microsoft Edge WebDriver to the launched WebView2 app
1. Use the EdgeOptions.DebuggerAddress property to tell Microsoft Edge WebDriver to connect to the remote debugging port that you specified previously, instead of launching a new application:
C#EdgeOptions eo = new EdgeOptions(); eo.UseWebView = true;
eo.DebuggerAddress = "localhost:9222";
EdgeDriver e = new EdgeDriver(eo);At localhost:9222 above, the port number given on this line should match the port number that you chose when setting --remote-debugging-port above.
For more info about the DebuggerAddress property of the EdgeOptions object, see EdgeOptions object.
For UWP apps, attach Microsoft Edge WebDriver to WebView2 with Remote Tools
1. Do the steps in Remote debugging UWP apps with Remote Tools for Microsoft Edge.
This WebView2 feature is currently only supported in the Canary preview channel of Microsoft Edge. Set the environment variable
WEBVIEW2_RELEASE_CHANNEL_PREFERENCE=1, to ensure that the WebView2 version is Canary. For more information, see How to set an environment variable in Test upcoming APIs and features.

URL>/msedge. For example, the following screenshot shows localhost:50080/msedge:
4. In your code, use the wdpAddress and wdpProcessId properties to tell Microsoft
Edge WebDriver to connect to the Remote Tools for Microsoft Edge and the specific WebView2 process.
wdpAddress is defined as the Device Portal URL.
wdpProcessId is defined as the browserProcessId value that you noted in the
previous step:
C#EdgeOptions eo = new EdgeOptions(); eo.AddAdditionalEdgeOption("wdpAddress", "localhost:50080"); eo.AddAdditionalEdgeOption("wdpProcessId", 47860);
// Optional user name and password to use when connecting to a Windows Device Portal // server.  Required if the server has authentication enabled.
// eo.AddAdditionalEdgeOption("wdpUsername", "username");
// eo.AddAdditionalEdgeOption("wdpPassword", "password");
EdgeDriver e = new EdgeDriver(eo);For more information about launching a WebView2 UWP app with Remote Tools, see Remote debugging UWP apps with Remote Tools for Microsoft Edge.
Congratulations! You've successfully attached Microsoft Edge WebDriver to a running WebView2 app.
UWP projects and debugging
To configure the debug settings on launch, you must use the registry to enable debugging for all WebView2 processes on startup. Because of the way that UWP projects are launched, the WebDriver2 control is unable to automatically configure the debug settings on launch. Note that setting this registry key enables debugging support for all launched WebView2 processes while this environment variable is configured.
You can override parameters by values that are specified in the
WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS registry key. For information about the WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS registry key (and equivalent environment variable), see CreateCoreWebView2EnvironmentWithOptions in Globals. The WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS registry key (which is also an environment variable name) lets you add to the command-line arguments that will be passed to the WebView2 Runtime browser process when it is started.
See also
 WebDriver on Selenium documentation - How the APIs Selenium drives WebView2 or Microsoft Edge.
 Introduction to Microsoft Edge WebView2 - How to use the WebView2 control to embed web content in your native app.
 Use WebDriver for test automation - Automating Microsoft Edge.
Prerelease testing using preview channels
Article • 04/25/2024
Prerelease testing means testing your WebView2 app by using the preview channels of Microsoft Edge to find issues that will affect your particular WebView2 app, before any changes ship in the Stable Evergreen WebView2 Runtime. This helps catch any bugs before they degrade the app experience for end users.
Conduct both automated and manual testing:
 For automated testing, do prerelease testing, which means testing with a preview version of the WebView2 Runtime. Covered by the present article.
 For manual testing, use self-hosting, which means deploying a preview version of the WebView2 Runtime with your app, to use daily by your team. See Self-host by deploying preview channels.
Importance of prerelease testing
Evergreen WebView2 is based on the evergreen Chromium platform, which receives monthly major updates. Regressions in WebView2 apps tend to be application-specific, rather than affecting all WebView2 apps. WebView2 is tested in a variety of general scenarios, but it's possible that some of the specific scenarios of your app are not covered.
To catch app-specific regressions before WebView2 changes ship in Edge Stable, test your WebView2 app against the preview WebView2 Runtime that's shipped with the preview channels of Microsoft Edge (Canary, Dev, and Beta). To manually install the preview channels, go to Become a Microsoft Edge Insider. The preview channels are also called Insider channels.
Start by doing automated testing against Edge
Canary
Start with automated testing against the Microsoft Edge Canary channel, which ships daily. This enables you to catch issues as early as possible. The Microsoft Edge Dev channel ships weekly, and is also a good option.
Start with automated testing against the preview WebView2 Runtime in the Microsoft Edge Canary channel, which ships daily. This enables you to catch issues as early as possible. The Microsoft Edge Dev channel ships weekly, and is also a good option.
To do automated testing:
1. Set the preview channel for your app.
You can set the preview channel by using ChannelSearchKind, so that your
WebView2 app uses the least-stable channel (Canary, then Dev). To do this, see Switching the channel search order (recommended) in Test upcoming APIs and features.
2. Install or deploy the preview channel.
 If you choose to install preview channels manually, install them from the page Become a Microsoft Edge Insider.
 If you instead choose to deploy preview channels to devices, see How to deploy preview channels in Test upcoming APIs and features.
3. Conduct automated testing on your app running against the preview channels.
You can use WebDriver to conduct automated testing of your WebView2 app. See Automate and test WebView2 apps with Microsoft Edge WebDriver.
4. Compare the results with the baseline.
The baseline for testing should be the latest stable release of WebView2, which can be either the Evergreen WebView2 runtime, or the latest fixed-version Runtime.
You can download the Runtime from the Microsoft Edge WebView2 page.
Upon finding issues, you can report them via the Microsoft Edge / WebView2Feedback repo. Under the Runtime Channel section, be sure to indicate that you found the issue on a preview channel, so that the fix can be prioritized before the bug ships in the Stable release.
See also
Self-host by deploying preview channels
Test upcoming APIs and features
Automate and test WebView2 apps with Microsoft Edge WebDriver
WebView2 feedback repo
Site compatibility-impacting changes coming to Microsoft Edge
Overview of the Microsoft Edge channels
 Become a Microsoft Edge Insider - download Edge Canary, Edge Dev, or Edge Beta.

Self-host by deploying preview channels
Article • 04/25/2024
Self-hosting means deploying a preview WebView2 Runtime with your app. This allows you and your development team to use your app daily with the preview version of the WebView2 Runtime, to find issues that will affect your particular WebView2 app, before the forthcoming changes reach the Evergreen WebView2 Runtime (Stable).
The self-hosting approach provides real-world usage of your app with the latest preview WebView2 Runtime to catch any issues that may arise. You should self-host your app in tandem with doing prerelease testing on your app, to provide a structured approach to testing your app with the latest version of the WebView2 Runtime.
Conduct both automated and manual testing:
 For automated testing, do prerelease testing, which means testing with a preview version of the WebView2 Runtime. See Prerelease testing using preview channels.  For manual testing, use self-hosting, which means deploying a preview version of the WebView2 Runtime with your app, to use daily by your team. Covered by the present article.
How to self-host a preview channel of WebView2
We recommend that you self-host using the preview WebView2 Runtime in the Dev channel of the Edge browser. The Dev channel is updated weekly, so it allows you to catch issues early while having sufficient stability for daily use.
The Canary channel is also suitable, but it might be less stable for daily use. The Beta channel allows you to test against the version of the runtime that is about to ship to stable, but you might not be able to catch issues early enough for your application.
To self-host a preview channel of WebView2:
1. Set the preview channel for your app.
You can set the preview channel by using ChannelSearchKind, making it such that your WebView2 app uses the least-stable channel on the device. We recommend using either the Registry Key or Group Policy for self-hosting.
2. Install the preview channel on your team's machines.
To install preview channels on a small number of devices, you can download and install them manually from the page Become a Microsoft Edge Insider. To deploy preview channels to a large number of devices, see How to deploy preview channels in Test upcoming APIs and features.
3. Use your app daily with the preview channel of WebView2, and diagnose potential issues with the WebView2 Runtime.
See Diagnose potential issues with the WebView2 Runtime, below.
Upon finding issues, you can report them via the Microsoft Edge / WebView2Feedback repo. Under the Runtime Channel section, be sure to indicate that you found the issue on a preview channel, so that the fix can be prioritized before the bug ships in the Stable release.
Diagnose potential issues with the WebView2 Runtime
To diagnose or troubleshoot potential preview WebView2 Runtime issues that are revealed by your app, do the following:
Confirm that your app is running a preview channel of WebView2
1. In Windows, open Task Manager.
2. Find your application's process, and then find the WebView2 Manager child process.
3. Right-click the Edge WebView2 process, and then select Open file location. The folder name is the version number of the Runtime.
Switch to the Stable WebView2 Runtime channel to see if the issue is reproduced
If the issue isn't reproduced on the Stable channel of the WebView2 Runtime, it's likely that the issue is with the preview channel of WebView2, or how your app interacts with the preview channel of WebView2.
You can easily switch to the stable channel (Evergreen WebView2 Runtime) by using environmental variables, because revised environment variables override the registry settings (which are what's set by group policies). This allows you to easily switch from a preview channel to the stable channel, to see if the issue is reproduced. If you are already using environmental variables, you simply update the values.
If you set the environment variable globally, it changes the WebView2 channel for all apps that use WebView2 on the machine.
If you are using the API, then we recommend building UI in your app that allows your users to change between using the Stable Runtime or a preview Runtime.
Collect diagnostics data
1. See Gathering Diagnostics and Logs. Crash dumps and Event Tracing for Windows (ETW) traces are the common formats that are required.
2. You can then report the issue to the Microsoft Edge / WebView2Feedback repo, and include the log file.
See also
Test upcoming APIs and features
Prerelease testing using preview channels
WebView2 feedback repo
Site compatibility-impacting changes coming to Microsoft Edge
Become a Microsoft Edge Insider - download the Canary, Dev, or Beta channel of Microsoft Edge.
Debug WebView2 apps
Article • 01/26/2023
Debug web code in WebView2 apps by using Microsoft Edge DevTools, Microsoft Visual Studio, or Microsoft Visual Studio Code. Use these tools to debug both web code and native code.
WebView2 apps combine the best of web and native app development features and tools. When you develop your WebView2 app, you test the app by debugging it.
Debug WebView2 apps with Microsoft Edge DevTools
Debug WebView2 apps with Visual Studio Code
Debug WebView2 apps with Visual Studio
See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities. WebView2 API reference

Feedback
Was this page helpful? 

Debug WebView2 apps with Microsoft Edge DevTools
Article • 03/28/2023
Use Microsoft Edge Developer Tools to debug web content displayed in WebView2 controls, in the same way that you can debug another webpage that's displayed in Microsoft Edge.

When you're using a WebView2 app, there are several ways to open DevTools:
Press F12.
Press Ctrl+Shift+I.
Right-click the page and then select Inspect.
An app can also use the OpenDevToolsWindow API to programmatically open a DevTools window. For example, you can use this approach if the above hotkeys and the context menu items have been removed.
If none of the above approaches are available, you can add --auto-open-devtools-fortabs to the browser arguments via an environment variable or registry key. This approach will open a DevTools window when a WebView2 is created.
See also
Overview of DevTools.
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference

Debug WebView2 apps with Visual Studio Code
Article • 07/30/2024
Use Microsoft Visual Studio Code to debug scripts that run in WebView2 controls. Visual Studio Code has a built-in debugger for browser debugging. See Browser debugging in
VS Code.
Create a launch.json file
To debug your code, your project is required to have a launch.json file. A launch.json file is a debugger configuration file to configure and customize the Visual Studio Code debugger. One of the properties that's needed to configure the debugger is the
request property. There are two request types, launch and attach.
The following code demonstrates launching the app from Visual Studio Code (rather than attaching the debugger to a running instance of the app). To do this, the app must have been built previously. If your project doesn't have a launch.json file, create a new launch.json file in the .vscode subfolder in your current project and paste the following
code into it:
JSON"name": "Hello debug world",
"type": "msedge",
"port": 9222, // The port value is optional, and the default value is 9222.
"request": "launch",
"runtimeExecutable": "C:/path/to/your/webview2/app.exe",
"env": {
   // Customize for your app location if needed
   "Path": "%path%;e:/path/to/your/app/location; "
},
"useWebView": true,
// The following two lines set up source path mapping, where `url` is the start page // of your app, and `webRoot` is the top level directory with all your code files.
"url": "file:///${workspaceFolder}/path/to/your/toplevel/foo.html",
"webRoot": "${workspaceFolder}/path/to/your/assets"Command-line URL parameter passed in
Visual Studio Code source path mapping now requires an URL, so your app now receives a url command-line parameter when it starts. You can safely ignore the url parameter, if needed.
Debug your code
1. To set a breakpoint in your source code, click a line of code and then press F9:

2. On the Run tab, select the launch configuration from the dropdown menu.
3. Click Start Debugging, which is the green triangle next to the launch configuration dropdown list:

4. To view the debug output and errors, open Debug Console:

Targeted WebView2 debugging
In some WebView2 apps, you might use more than one WebView2 control. To pick which WebView2 control to debug in this situation, you can use targeted WebView2 debugging.
Open launch.json and complete the following actions to use targeted WebView2 debugging.
1. Confirm that the useWebview parameter is set to true.
2. Add the urlFilter parameter. When the WebView2 control navigates to a URL, the urlFilter parameter value is used to compare strings that appear in the URL.
JSON"useWebview": "true", "urlFilter": "*index.ts",
// Options for "urlFilter":
// Match any url that ends with "index.ts":
"urlFilter": "*index.ts",
// Match any url that contains "index" anywhere in the URL:
"urlFilter": "*index*",
// Explicitly match a file named "index.ts":
"urlFilter": "file://C:/path/to/my/index.ts",When debugging your app, you might need to step through the code from the beginning of the rendering process. If you are rendering webpages on sites and you don't have access to the source code, you can use the ?=value option, because webpages ignore unrecognized parameters.
Cannot debug two WebView2 controls at the same time
After the first match is found in the URL, the debugger stops. You cannot debug two WebView2 controls at the same time, because the CDP port is shared by all WebView2 controls, and uses a single port number.
Debug running processes
You might need to attach the debugger to running WebView2 processes. To do that, in launch.json, update the request parameter, changing its value to attach:
JSON"name": "Hello debugging world",
"type": "msedge",
"port": 9222,
"request": "attach",
"runtimeExecutable": "C:/path/to/your/webview2/myApp.exe",
"env": {
   "Path": "%path%;e:/path/to/your/build/location; "
},
"useWebView": trueYour WebView2 control must open the Chrome Developer Protocol (CDP) port to allow debugging of the WebView2 control. Your code must be built to ensure that only one WebView2 control has a CDP port open, before starting the debugger.
You also need to add a new REGKEY <myApp.exe> = --remote-debugging-port=9222 under
Computer\HKEY_CURRENT_USER\Software\Policies\Microsoft\Edge\WebView2\AdditionalBrow serArguments, so that the debugger can find the proper port. To add this registry key:
1. Press the Windows logo key and then search for registry editor. Open the Registry Editor app, and then click Yes to allow editing.
2. In the folder tree on the left, try to expand
HKEY_CURRENT_USER\Software\Policies\Microsoft\Edge\WebView2\AdditionalBrowserA rguments.
3. If the \Edge\WebView2\AdditionalBrowserArguments part of that path doesn't exist, create those three nested subfolders, as follows:
a. To create the \Edge subfolder: In the folder tree, right-click the
HKEY_CURRENT_USER\Software\Policies\Microsoft folder, hover over New, and then select Key. A folder is added as a child of the Microsoft folder, initially named New Key #1. Right-click the New Key #1 folder, and then select Rename.
Enter Edge for the name of the new key.
b. Create the \WebView2 subfolder, as in the previous step.
c. Create the \AdditionalBrowserArguments subfolder, as in the previous step.
The tree is now expanded to
HKEY_CURRENT_USER\Software\Policies\Microsoft\Edge\WebView2\AdditionalBrows erArguments.
4. Right-click the AdditionalBrowserArguments folder, hover over New, and then select String Value. In the Name column, right-click New Value #1, select Rename, and then enter the file name of your app executable, such as myApp.exe.
5. In the Name column, right-click your executable file name, such as myApp.exe, and then select Modify. The Edit String dialog opens.
6. In the Value data text box, enter --remote-debugging-port=9222:

7. Click the OK button, and then verify that the registry key matches the following (with the file name of your .exe file in the Name column):
Debug tracing options
To enable debug tracing, add the trace parameter to launch.json , as follows:
1. Add the trace parameter:
JSON"name": "Hello debugging world",
"type": "msedge",
"port": 9222,
"request": "attach",
"runtimeExecutable": "C:/path/to/your/webview2/app.exe",
"env": {
"Path": "%path%;e:/path/to/your/build/location; "
},
"useWebView": true
,"trace": true  // Turn on debug tracing, and save the output to a log file.Saving debug output to a log file:

JSON,"trace": "verbose"  // Turn on verbose tracing in the Debug Output pane.Visual Studio Code Debug Output with verbose tracing turned on:

Debug Office Add-ins
If you're debugging Office Add-ins, open the add-in source code in a separate instance of Visual Studio Code. Open launch.json in your WebView2 app. Add the following code into launch.json, to attach the debugger to the Office add-in:
JSON,"debugServer": 4711Debug WebView2 WinUI 2 (UWP) apps
1. Install a WebView2 Runtime version past 106.0.1370.34.
2. Open the Registry Editor by pressing the Windows logo key and then searching for registry editor. Open the Registry Editor application and select Yes to allow editing.
3. Set the registry key
HKEY_CURRENT_USER\Software\Policies\Microsoft\Edge\WebView2\AdditionalBrowserA rguments equal to --remote-debugging-pipe. To do this, follow the steps outlined in the Debug running processes section above.
4. Verify that the registry key is set in the editor and matches the following:

JSON"name": "Attach to UWP App",
"useWebView":{
   "pipeName":"JSDebugPipe"
}
"request": "attach",
"type": "msedge",
"webRoot":"${workspaceFolder}"6. Launch your app.
7. Click the Start Debugging button to attach to the process and begin debugging.

Troubleshoot the debugger
You might encounter these scenarios when using the debugger.
Doesn't stop at breakpoint
If the debugger doesn't stop at the breakpoint, and you have debug output:
To solve the issue, confirm that the file with the breakpoint is the same file that's used by the WebView2 control. The debugger doesn't perform source path mapping.
Can't attach to running process
If you can't attach to a running process, and you get a timeout error:
To solve the issue, confirm that the WebView2 control opened the CDP port. Make sure your additionalBrowserArguments value in the registry is correct, or the options are correct. See additionalBrowserArguments for dotnet and additionalBrowserArguments for Win32.
See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities. WebView2 API reference

Feedback
Was this page helpful?  Yes  No

Debug WebView2 apps with Visual Studio
Article • 09/26/2024
Microsoft Visual Studio provides various debugging tools for web and native code in WebView2 apps, to debug web and native code in Win32 apps or Office Add-ins. This article focuses on debugging WebView2 controls. The other methods of debugging in Visual Studio are available, as well.
Summary of high-level steps
To debug JavaScript code in a WebView2 control:
1. Install the JavaScript diagnostics component in the Desktop development with C++ workload of Visual Studio, or in another platform's workload.
2. Set a breakpoint on a line of JavaScript code.
3. In the project's Properties > Debugging page, set Debugger Type to JavaScript (WebView2) (instead of Auto or Native).
4. Start the debugger, as usual. For example, in the menu bar, select Debug > Start Debugging (F5).
5. In the running WebView2 app, interact with a webpage that runs the JavaScript code. The debugger pauses on the line of JavaScript code that has the breakpoint.
6. Use the debugger panes in Visual Studio.
These steps are detailed below, using the main, Win32/C++ sample (WebView2APISample).
Requirements
 Clone the WebView2Samples repo, if you want to follow the specific example steps below (using the main, Win32/C++ sample, WebView2APISample). A step below shows how to do this.
 Install Visual Studio 2022. You can use Visual Studio 2022 to work with the WebView2 sample apps and your own WebView2 app. (Visual Studio 2019 works, as well.) A step below shows how to do this.
 Install and set up the script debugger tools in Visual Studio. That is, install the Desktop development with C++ workload of Visual Studio (or the equivalent workload for a different language), including its JavaScript diagnostics component. A step below shows how to do this.
 Build and run the main, Win32/C++ sample, so that the WebView2APISample app builds and runs (if you want to follow the specific example steps below). A step below shows how to do this.
To debug scripts, the app must be launched from within Visual Studio.
You cannot attach a debugger to a running WebView2 process.
Install the JavaScript diagnostics component
Use the Visual Studio Installer to install the Desktop development with C++ workload of Visual Studio, including its JavaScript diagnostics component, as follows. Or, if you are using a language workload other than C++, select that workload's JavaScript diagnostics component, similar to the below steps.
1. If not done already, clone the WebView2Samples repo, as described in Clone the WebView2Samples repo in Set up your Dev environment for WebView2.
2. If not done already, install Visual Studio 2022, as described in Install Visual Studio in Set up your Dev environment for WebView2.
3. In Visual Studio 2022, install the Desktop development with C++ workload, as follows:
4. In the Windows Explorer bar, type Visual Studio Installer.
5. Select Visual Studio Installer to open it.
6. In the Visual Studio Installer, on the installed version, click the More button, and then select Modify.
7. In Visual Studio, under Workloads, select the Desktop Development with C++ workload, so that a checkmark appears:

8. Select Individual components, at the top.
9. In the search box, enter JavaScript diagnostics.
10. Select the JavaScript diagnostics checkbox:

11. Click the Modify button.
Continue with the next section, below.
Select the JavaScript (WebView2) debugger
Next, enable script debugging for WebView2 apps, as follows.
1. If not done already, do the steps in Win32 sample app so that the
WebView2APISample app builds and runs. The WebView2Samples solution should be open in Visual Studio, and the sample app should not be running. Or, open your own WebView2 app project in Visual Studio.
2. In Visual Studio, in Solution Explorer, right-click the WebView2APISample project (or your own project), and then select Properties.
The Property Pages dialog opens.
3. On the left, expand Configuration Properties, and then select Debugging.
4. To the right of Debugger Type, select JavaScript (WebView2), and then click the OK button:

Debug your WebView2 app
After doing the above setup, debug your WebView2 app, as follows.
1. To set a breakpoint in your source code, hover to the left of the line number, and click to set a breakpoint. For example, open
WebView2Samples\SampleApps\WebView2APISample\assets\ScenarioJavaScriptDebugInd ex.js, and set a breakpoint on line 2: console.log("onAddClick+");, in the body of
When setting a breakpoint, you must open the file that's in the exact same path that's associated with your WebView2 control, because the JS/TS debug adapter doesn't perform source path mapping.
The breakpoint will be triggered when this section of the code is executed. This breakpoint is triggered upon clicking the Add a new item button in the sample app, in a later step below.
2. Select the bit size of the platform, such as x64.
3. To run the debugger, do any of the following:
In the menu bar, select Debug > Start Debugging (F5).
In Solution Explorer, right-click the project > Debug > Start New Instance or Step Into New Instance.
 Click the green Play button to the left of Local Windows Debugger.
The WebView2APISample app (or your own app) runs and opens, and the debugger connects to the first WebView2 process that's created. In Properties >
Debugging for the project, Local Windows Debugger was set to JavaScript (WebView2).
4. In Visual Studio, click the Output tab, in the lower right.
The tab contains only the following message, which mentions the JS debugger:
"Verbose logs are written to:
C:\Users\myUsername\AppData\Local\Temp\visualstudio-js-debugger.txt".
5. In the WebView2APISample app window, select Scenario > Script Debugging > JavaScript Local File.
The file WebView2APISample/Debug/x64/assets/ScenarioJavaScriptDebugIndex.html is rendered:

6. In Visual Studio, examine the Output pane. The following output has been added:
This is the very first line of code that executes.
Second Third inside onAddClick+ onAddClickonAddClick+ onAddClick-
End7. In the webpage in the app, click the Add a new item popup button.
The breakpoint in the onAddClick function is hit, and the app is paused in the debugger.
8. Switch to the Visual Studio window, and examine the debugger panes.
9. Click the Output tab, to display the app's output:

The app output shows "This is the very first line of code that executes", because of the line console.log("This is the very first line of code that executes."); in the file
WebView2Samples\SampleApps\WebView2APISample\assets\ScenarioJavaScriptDebugInd ex.html.
Troubleshooting
Open DevTools using an approach other than F12
When you debug your app in Visual Studio with the native debugger attached, when viewing your running app, pressing F12 might start the native debugger instead of starting Developer Tools.
To open DevTools, press Ctrl+Shift+I. Or, right-click the page in the running app, and then select Inspect.
Virtual source path mapping not supported in Visual Studio 2019
If you use the WebView2 SetVirtualHostNameToFolderMapping method, the debugger in Visual Studio 2019 doesn't understand the virtual source path mapping, so breakpoints don't work correctly.
When setting a breakpoint, you must open the file that's in the exact same path that's associated with your WebView2 control, because the JS/TS debug adapter doesn't perform source path mapping.
Virtual source path mapping is supported by the debugger in Visual Studio Code.
See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities. WebView2 API reference

Feedback
Was this page helpful? 

Remote debugging WebView2 WinUI 2 (UWP) apps
Article • 05/15/2024
To use Microsoft Edge DevTools to debug a WebView2 WinUI 2 (UWP) app, use remote debugging. Remote debugging is necessary for WebView2 WinUI 2 (UWP) apps because currently, the built-in DevTools can't be launched inside a store-signed WebView2 WinUI 2 (UWP) app.
ﾉ Expand table
PlatformArticleDesktopRemote debugging desktop WebView2 WinUI 2 (UWP) appsHoloLens 2Remote debugging HoloLens 2 WebView2 WinUI 2 (UWP) appsXboxRemote debugging Xbox WebView2 WinUI 2 (UWP) apps
Remote debugging desktop WebView2 WinUI 2 (UWP) apps
Article • 11/01/2023
To use Microsoft Edge DevTools to debug a WebView2 WinUI 2 (UWP) app, use remote debugging. Remote debugging is necessary for WebView2 WinUI 2 (UWP) apps because currently, the built-in DevTools can't be launched inside a store-signed WebView2 WinUI 2 (UWP) app.
Attach DevTools remotely to a desktop WebView2 WinUI 2 (UWP) app
Attach Microsoft Edge DevTools remotely to a desktop WebView2 WinUI 2 (UWP) app as follows:
1. In Microsoft Edge, go to edge://inspect. The Inspect with Edge Developer Tools page opens:

developers, and then turn on the Developer Mode toggle.
3. In the same Settings page, turn on the Device Portal toggle:

If your operating system isn't up-to-date, you might get a message in the Settings window: "The Windows Developer Mode package couldn't be found in Windows Update, so remote deployment and Windows Device Portal are unavailable. Learn more."
4. If you get such a message, update your operating system (OS) to the latest version, and then turn on the Device Portal toggle.
5. When prompted to Install Windows Developer Mode package, click Yes:

After the installation is complete, note the URL that will be used for the remote debugging connection. To find this URL, expand the Device Portal dropdown list.
In this case, the Device Portal URL that will be used is http://localhost:50080:
7. In Microsoft Edge, go to the Device Portal URL that you previously noted. Verify that the Confirm security settings page is loaded (in the Windows Device Portal tab):

8. If you are only debugging apps that are running locally, you can select the Continue with an unsecured connection button.
Or, if you aren't running the app locally, or if you need to connect over HTTPS, select the Configure a secure connection link, and then follow the steps in the page that you're redirected to.
9. Verify that you're redirected to the Apps manager: Windows Device Portal page:

Edge are functioning. The page loads an empty list: [], unless there's an application running that is debuggable by remote tools.
11. Configure your WebView2 WinUI 2 (UWP) app for remote debugging:
To enable remote debugging, an environment variable must be set in your project. This variable must be set before creating the CoreWebView2 instance, and before either setting the WebView2.Source property or calling the WebView2.EnsureCoreWebView2Async method.
Set the following variable:
"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "--enablefeatures=msEdgeDevToolsWdpRemoteDebugging"For example, if you're using the WebView2 Sample UWP app	, you can set the environment variable by adding the following line in the Browser.xaml.cs file:
C#Environment.SetEnvironmentVariable("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMEN
TS", "--enable-features=msEdgeDevToolsWdpRemoteDebugging");
13. Go to http://<Device Portal URL>/msedge, such as http://localhost:50080/msedge, and make sure your WebView2 instance appears in the list:

Connect to Device.
15. Verify that you can successfully connect, so that your debuggable WebView2 control, named Edge, is listed under your machine name:

16. At the bottom of the Edge WebView2 control entry, click the inspect link.
Microsoft Edge DevTools opens for the WebView2 control:

Now you can use Microsoft Edge DevTools to inspect and debug the WebView2 control.
See also
 Remote debugging WebView2 WinUI 2 (UWP) apps
Remote debugging HoloLens 2
WebView2 WinUI 2 (UWP) apps
Article • 11/01/2023
To use Microsoft Edge DevTools to debug a WebView2 WinUI 2 (UWP) app, use remote debugging. Remote debugging is necessary for WebView2 WinUI 2 (UWP) apps because currently, the built-in DevTools can't be launched inside a store-signed WebView2 WinUI 2 (UWP) app.
WebView2 on HoloLens 2 and the WebView plugin for Unity are both in Preview and are subject to change before general availability.
WebView2 and the WebView2 plugin are only supported on HoloLens 2 devices running the Windows 11 update. For more information, see Update HoloLens 2.
Attach DevTools remotely to a HoloLens 2 WebView2 WinUI 2 (UWP) app
Attach Microsoft Edge DevTools remotely to a HoloLens 2 WebView2 WinUI 2 (UWP) app as follows:
1. In Microsoft Edge, go to edge://inspect. The Inspect with Edge Developer Tools page opens:

2. Enable Device Portal: Open Windows Settings, select Update & Security > For developers, and then turn on the Device Portal toggle:

In Connect using > Ethernet, note the URL that will be used for the remote debugging connection.
3. Install Remote Tools for Microsoft Edge from the Microsoft Store on your HoloLens 2 device.
4. In Microsoft Edge, go to the Device Portal URL that you previously noted. Verify that the Confirm security settings page is loaded (in the Windows Device Portal tab):

5. If you are only debugging apps that are running locally, you can select the Continue with an unsecured connection button.
Or, if you aren't running the app locally, or if you need to connect over HTTPS, select the Configure a secure connection link, and then follow the steps in the page that you're redirected to.
6. Verify that you're redirected to the Apps manager: Windows Device Portal page:

Edge are functioning. The page loads an empty list: [], unless there's an application running that is debuggable by remote tools.
8. Configure your WebView2 WinUI 2 (UWP) app for remote debugging:
To enable remote debugging, an environment variable must be set in your project. This variable must be set before creating the CoreWebView2 instance, and before either setting the WebView2.Source property or calling the WebView2.EnsureCoreWebView2Async method.
Set the following variable:
"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "--enablefeatures=msEdgeDevToolsWdpRemoteDebugging"For example, if you're using the WebView2 Sample UWP app	, you can set the environment variable by adding the following line in the Browser.xaml.cs file:
C#Environment.SetEnvironmentVariable("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMEN
TS", "--enable-features=msEdgeDevToolsWdpRemoteDebugging");
9. Launch your app on your HoloLens 2 device.
10. Go to http://<Device Portal URL>/msedge, such as http://localhost:50080/msedge, and make sure your WebView2 instance appears in the list:

Connect to Device.
12. Verify that you can successfully connect, so that your debuggable WebView2 control, named Edge, is listed under your machine name:

13. At the bottom of the Edge WebView2 control entry, click the inspect link.
Microsoft Edge DevTools opens for the WebView2 control:

Now you can use Microsoft Edge DevTools to inspect and debug the WebView2 control in your HoloLens 2 WebView2 WinUI 2 (UWP) app.
See also
 Remote debugging WebView2 WinUI 2 (UWP) apps

Remote debugging Xbox WebView2 WinUI 2 (UWP) apps
Article • 11/01/2023
To use Microsoft Edge DevTools to debug a WebView2 WinUI 2 (UWP) app, use remote debugging. Remote debugging is necessary for WebView2 WinUI 2 (UWP) apps because currently, the built-in DevTools can't be launched inside a store-signed WebView2 WinUI 2 (UWP) app.
Attach DevTools remotely to an Xbox WebView2 WinUI 2 (UWP) app
Attach Microsoft Edge DevTools remotely to an Xbox WebView2 WinUI 2 (UWP) app as follows:
1. In Microsoft Edge, go to edge://inspect. The Inspect with Edge Developer Tools page opens:

2. Enable Developer Mode on Xbox. See Xbox One Developer Mode activation.
3. In Microsoft Edge, go to https://<System IP>:11443, where <System IP> is replaced by your Xbox System OS IP. The Confirm security settings page is displayed, in the Windows Device Portal tab:

4. Click the Continue with an unsecured connection button. An SSL cert error appears, NET::ERR__CERT_AUTHORITY_INVALID:

5. Click the Advanced button. A message is displayed, "The server couldn't prove ...":

your Xbox System OS IP. Xbox Device Portal opens:


opens:

9. Click the Open button. A Certificate dialog opens:

10. Click the Install Certificate button. A Welcome to the Certificate Import Wizard dialog opens:

11. Select the Current User option button, and then click the Next button. The Certificate Import Wizard opens:

12. Select the option Place all certificates in the following store, click the Browse button, and then select Trusted Root Certification Authorities.
13. Click the Next button. A Security Warning dialog opens:

14. Click the Yes button.
15. Restart Microsoft Edge.
16. Go to https://<System IP>:11443, where <System IP> is replaced by your Xbox System OS IP, and verify that the connection is indicated as secure (that is, an HTTPS URL):

17. In your app project, set the following variable, to configure your WebView2 WinUI 2 (UWP) app for remote debugging.
To enable remote debugging, an environment variable must be set in your project. This variable must be set before creating the CoreWebView2 instance, and before either setting the WebView2.Source property or calling the WebView2.EnsureCoreWebView2Async method.
"WEBVIEW2_ADDITIONAL_BROWSER_ARGUMENTS", "--enablefeatures=msEdgeDevToolsWdpRemoteDebugging"For example, if you're using the WebView2 Sample UWP app	, you can set the environment variable by adding the following line in the Browser.xaml.cs file:
C#Environment.SetEnvironmentVariable("WEBVIEW2_ADDITIONAL_BROWSER_ARGUMEN
TS", "--enable-features=msEdgeDevToolsWdpRemoteDebugging");20. In the Connect to a remote Windows device text box, enter https://<System IP>:11443, where <System IP> is replaced by your Xbox System OS IP, and then click the Connect to Device button.
21. Verify that you can successfully connect, so that your debuggable WebView2 control, named Edge, is listed under your machine name:

22. At the bottom of the Edge WebView2 control entry, click the inspect link.
Microsoft Edge DevTools opens for the WebView2 control:

Now you can use Microsoft Edge DevTools to inspect and debug the WebView2 control in your Xbox WebView2 WinUI 2 (UWP) app.
See also
 Remote debugging WebView2 WinUI 2 (UWP) apps

Process model for WebView2 apps
Article • 06/19/2023
Supported platforms: Win32, Windows Forms, WinUI, WPF.
The WebView2 Runtime uses the same process model as the Microsoft Edge browser. This browser process model is described at Browser Architecture in Inside look at modern web browser (part 1).
Processes in the WebView2 Runtime
A WebView2 process group is a collection of WebView2 Runtime processes. A WebView2 process group includes the following:

The number and presence of processes in a WebView2 process group can change as a WebView2 application makes use of WebView2 features. (However, there's only a single, specific browser process in a WebView2 process group.) For example, creating a new WebView2 instance from the same CoreWebView2Environment, but with a different domain in the Source property, will usually start a new renderer process.
The number of renderer processes can vary based on the following conditions:
 Use of the Site Isolation feature in the WebView2 Runtime. See Per-frame renderer processes - Site Isolation.
 The number of distinct disconnected origins that are rendered in instances of WebView2 that use the same user data folder.
The logic that controls when these extra processes are created depends on the Chromium architecture, and is beyond the scope of the WebView2 Runtime.
WebView2 Runtime processes and the user data folder
All processes in a WebView2 Runtime processes collection are tied to the browser process, which in turn is associated with a single user data folder. If an application makes use of multiple user data folders, a collection of WebView2 Runtime processes will be created for each of these user data folders.
A user data folder can be shared by multiple applications, but be sure to consider the implications on performance and management, as described in Manage user data folders.

To make use of multiple user data folders, a WebView2 application needs to create different CoreWebView2Environment objects. A WebView2 instance is created for a given user data folder through the configured CoreWebView2Environment object. Each
CoreWebView2Environment object needs to be configured with a different user data folder value.
When the first WebView2 instance is created for a given user data folder, the browser process for the WebView2 Runtime processes collection that is associated with that user data folder will be started. All additional processes will be managed by the lifetime of that browser process.
The CoreWebView2Environment represents a user data folder and the collection of processes associated with it. A given renderer process is not associated with a single
CoreWebView2 instance, because the renderer process can serve frames in multiple CoreWebView2 instances that use the same user data folder, depending on website isolation. See Per-frame renderer processes - Site Isolation.
Multiple environment objects
If you create multiple CoreWebView2Environment objects that are configured the same way (including sharing the same user data folder), they will represent the same user data folder and the same associated collection of processes. Use any of these
CoreWebView2Environment objects to create a CoreWebView2 with the one shared user data folder and associated collection of processes.
If you try to create a CoreWebView2Environment using a user data folder which another
CoreWebView2Environment is already using, and you don't configure the two
CoreWebView2Environment objects the same, for example if they were created with different CoreWebView2EnvironmentOptions.Language values, then the second
CoreWebView2Environment will fail to create WebView2 objects. This is true for
CoreWebView2Environment objects that are in the same process or in different processes.
Handling process events and lifetime
To react to crashes and hangs in the browser and renderer processes, use the ProcessFailed event of CoreWebView2.
To safely shut down associated browser and renderer processes, use the Close method of CoreWebView2Controller.
To open the Browser Task Manager, call the OpenTaskManagerWindow method.

All processes that are associated with the browser process of your WebView2 are displayed, including their associated purposes.
See also
 Inside look at modern web browser (part 1) - the browser process model that's used by the WebView2 Runtime and the Microsoft Edge browser.
 Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities. WebView2 API reference

Feedback
Was this page helpful? 

Threading model for WebView2 apps
Article • 06/19/2023
Supported platforms: Win32, Windows Forms, WinUI, WPF.
The WebView2 control is based on the Component Object Model (COM) and must run on a Single Threaded Apartments (STA) thread.
Thread safety
The WebView2 must be created on a UI thread that uses a message pump. All callbacks occur on that thread, and requests into the WebView2 must be done on that thread. It isn't safe to use the WebView2 from another thread.
The only exception is for the Content property of CoreWebView2WebResourceRequest. The
Content property stream is read from a background thread. The stream should be agile or should be created from a background STA, to prevent performance degradation of the UI thread.
Object properties are single-threaded. For example, calling
CoreWebView2CookieManager.GetCookiesAsync(null) from a thread other than Main will succeed (that is, cookies are returned); however, attempting to access the cookies' properties (such as c.Domain) after such a call will throw an exception.
Reentrancy
Callbacks, including event handlers and completion handlers, run serially. After you run an event handler and begin a message loop, an event handler or completion callback cannot be run in a re-entrant manner. If a WebView2 app tries to create a nested message loop or modal UI synchronously within a WebView2 event handler, this approach leads to attempted reentrancy. Such reentrancy isn't supported in WebView2 and would leave the event handler in the stack indefinitely.
For example, the following coding approach isn't supported:
C#private void Btn_Click(object sender, EventArgs e)
{
   // Post web message when button is clicked
   this.webView2Control.ExecuteScriptAsync("window.chrome.webview.postMessage(\"Open Dialog\");");
}
private void CoreWebView2_WebMessageReceived(object sender, 
CoreWebView2WebMessageReceivedEventArgs e)
{    string msg = e.TryGetWebMessageAsString();    if (msg == "Open Dialog")
   {
      Form1 form = new Form1(); // Create a new form that contains a new 
WebView2 instance when web message is received.       form.ShowDialog(); // This will cause a reentrancy issue and cause the newly created WebView2 control inside the modal dialog to hang.
   }
}Instead, schedule the appropriate work to take place after completion of the event handler, as shown in the following code:
C#private void CoreWebView2_WebMessageReceived(object sender, 
CoreWebView2WebMessageReceivedEventArgs e)
{    string msg = e.TryGetWebMessageAsString();    if (msg == "Open Dialog")
   {
      // Show a modal dialog after the current event handler is completed, to avoid potential reentrancy caused by running a nested message loop in the 
WebView2 event handler.
      System.Threading.SynchronizationContext.Current.Post((_) => {          Form1 form = new Form1();          form.ShowDialog();          form.Closed();
      }, null);
   }
}

Deferrals
Some WebView2 events read values that are set on the related event arguments, or start some action after the event handler completes. If you also need to run an asynchronous operation, such as an event handler, use the GetDeferral method on the event arguments of the associated events. The returned Deferral object ensures that the event handler isn't considered complete until the Complete method of the Deferral is requested.
For instance, you can use the NewWindowRequested event to provide a CoreWebView2 to connect as a child window when the event handler completes. But if you need to asynchronously create the CoreWebView2, you should call the GetDeferral method on the NewWindowRequestedEventArgs. After you've asynchronously created the
CoreWebView2 and set the NewWindow property on the NewWindowRequestedEventArgs, call Complete on the Deferral object that's returned by the GetDeferral method.
Deferrals in C#
When using a Deferral in C#, the best practice is to use it with a using block. The using block ensures that the Deferral is completed even if an exception is thrown in the middle of the using block. If instead, you have code to explicitly call Complete, but an exception is thrown before your Complete call occurs, then the deferral isn't completed until some time later, when the garbage collector eventually collects and disposes of the deferral. In the interim, the WebView2 waits for the app code to handle the event.
For example, don't do the following, because if there's an exception before calling
Complete, the WebResourceRequested event isn't considered "handled", and blocks WebView2 from rendering that web content.
C#private async void WebView2WebResourceRequestedHandler(CoreWebView2 sender,                            CoreWebView2WebResourceRequestedEventArgs eventArgs)
{    var deferral = eventArgs.GetDeferral();    args.Response = await CreateResponse(eventArgs);
   // Calling Complete is not recommended, because if CreateResponse    // throws an exception, the deferral isn't completed.    deferral.Complete();
}Instead, use a using block, as in the following example. The using block ensures that the Deferral is completed, whether or not there's an exception.
C#private async void WebView2WebResourceRequestedHandler(CoreWebView2 sender,                            CoreWebView2WebResourceRequestedEventArgs eventArgs)
{    // The using block ensures that the deferral is completed, regardless of
   // whether there's an exception.    using (eventArgs.GetDeferral())
   {       args.Response = await CreateResponse(eventArgs);
   }
}Block the UI thread
WebView2 relies on the message pump of the UI thread to run event handler callbacks and async method completion callbacks. If you use methods that block the message pump, such as Task.Result or WaitForSingleObject, then your WebView2 event handlers and async-method completion handlers don't run. For example, the following code doesn't complete, because Task.Result stops the message pump while it waits for
ExecuteScriptAsync to complete. Because the message pump is blocked, the ExecuteScriptAsync isn't able to complete.
For example, the following code doesn't work, because it uses Task.Result.
C#private void Button_Click(object sender, EventArgs e)
{     string result = 
webView2Control.CoreWebView2.ExecuteScriptAsync("'test'").Result;
    MessageBox.Show(this, result, "Script Result"); }Instead, use an asynchronous await mechanism such as async and await, which doesn't block the message pump or the UI thread. For example:
C#private async void Button_Click(object sender, EventArgs e)
{     string result = await 
webView2Control.CoreWebView2.ExecuteScriptAsync("'test'");
    MessageBox.Show(this, result, "Script Result");
}See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities. WebView2 API reference

Feedback
Was this page helpful? 
Manage user data folders
Article • 05/03/2023
The user data folder (UDF) is a folder stored on the user's machine, that contains data related to the host app and WebView2. WebView2 apps use user data folders to store browser data, such as cookies, permissions, and cached resources.
Terminology:
ﾉ Expand table
TermDefinitionuser data folderA folder that WebView2 creates to store browser data, such as cookies, permissions, and cached resources.UDFThe user data folder.UDF locationThe directory path of the user data folder.default UDF locationThe default directory path of the user data folder. The directory path where WebView2 creates the UDF if you don't specify a custom UDF location.custom UDF locationA custom location for the user data folder. The directory path that your
WebView2 host app specifies where WebView2 will create the user data folder.WebView2 creates the UDF in the default location for the platform, or in the custom UDF location that your host app explicitly specifies.
By default, WebView2 creates a UDF in the default location for the particular platform. This works well on some platforms, but not others. If your app has specific needs, you can specify a custom UDF location.
Suitable custom UDF locations
If you specify a custom UDF location, it should meet the following requirements:
 The custom UDF location must have appropriate Read/Write permissions for the WebView2 app runtime.
 Avoid storing user settings on a network drive. This can result in slowdowns, crashes, or loss of data.
What kind of data is stored in the UDF
WebView2 apps use user data folders (UDFs) to store browser data, such as cookies, permissions, and cached resources.
ﾉ Expand table
Type of dataDescriptionAllDomStorageDOM storage data, now and future. This browsing data kind is inclusive of FileSystems, IndexedDb, WebSql, CacheStorage.AllProfileProfile data that should be wiped to make it look like a new profile. This does not delete account-scoped data like passwords but will remove access to account-scoped data by signing the user out. All profile data, now and future. New profile data types may be added to this data kind in the future. This browsing data kind includes the data kinds AllSite, DiskCache,
DownloadHistory, GeneralAutofill, PasswordAutosave, BrowsingHistory, and Settings.AllSiteAll site data, now and future. This browsing data kind includes the data kinds
AllDomStorage and Cookies. New site data types may be added to this data kind in the future.BrowsingHistoryBrowsing history data.CacheStorageData stored by the CacheStorage DOM API.CookiesHTTP cookies data.DiskCacheDisk cache.DownloadHistoryDownload history data.FileSystemsFile systems data.GeneralAutofillGeneral autofill form data. This excludes password information and includes information such as names, street and email addresses, phone numbers, and arbitrary input. Includes payment data.IndexedDbData stored by the IndexedDB DOM feature.LocalStorageData stored by the localStorage DOM API.PasswordAutosavePassword autosave data.SettingsSettings data.WebSqlData stored by the Web SQL database DOM API.The above types of data are listed as enum members in the CoreWebView2BrowsingDataKinds Enum.
How and when the UDF is created
The user data folder (UDF) is created for your WebView2 host app by the WebView2 control.
The UDF is created in the default UDF location for the platform, or if your host app specifies a custom UDF location, the UDF is created in the custom UDF location.
The UDF is created on startup of the WebView2 host app, if the UDF doesn't exist.
How many UDFs are created?
Each instance of a WebView2 control is associated with a user data folder (UDF).
Each WebView2 session must have a UDF. There's only 1 active UDF per WebView2 session.
There is at least one UDF per app WebView2 session. It's possible for your host app to overlap them, by specifying a custom UDF location. Or, you can have one UDF per machine. This depends on how your host app configs the UDF.
A UDF can be either per user, if the app was installed per-user. If the host app is installed per-user, each UDF is unique to a user, if not otherwise specified.
How to move the UDF
To move a user data folder (UDF):
1. Shut down all WebView2 sessions.
2. Start a new WebView2 host app session, specifying a new custom UDF location.
The default UDF location
The default user data folder (UDF) location varies per platform.

For example, if you ran D:\WebView2App\WebView2.exe, a UDF folder would be created: D:\WebView2App\WebView2.exe.WebView2\. As another example:
WebView2APISample.exe.WebView2\.
Should you use default or custom UDF location?
In most cases, you should specify a custom UDF location, rather than using the default UDF location. This ensures that the WebView2 control has Write access so that the WebView2 control is able to create the UDF and then write to it. See the section "Specifying a custom UDF location" below.
Packaging:
Win32 MSIX packaging is a standalone .exe.Specifying a custom UDF location
How to specify a custom user data folder (UDF) location varies per platform.

(         this, &AppWindow::OnCreateEnvironmentCompleted)         .Get());
For example code, see the Win32-appropriate, .cpp or .cs file, near WebView2Samples repo > WebView2APISample	.
Where browser data gets stored within the UDF:
After creation of the session and UDF, browser data from your WebView2 control is stored in a subfolder of userDataFolder.
Why you should use a custom UDF location on this platform:
If you don't specify a custom UDF location, the default location can produce a runtime failure, if using installer technologies, because installer technologies put the app and thus the UDF in a protected area of the filesystem, where WebView2 isn't able to create the UDF, and thus UDF creation will usually fail. WebView2 will throw an error to let your host app know that the UDF can't be created at that location.
If the host app is running from a location that the user doesn't have Write access to,
WebView2 isn't able to create the UDF, and you will receive a runtime error during WebView2 startup.
Retrieving the UDF location
To find out what the user data folder (UDF) location was set to, use the UserDataFolder property. This read-only property returns the UDF location for the WebView2 app.
Reasons you might want to read the UDF location:
 If you want to clear browsing data from the UDF folder, such as at the end of a session.

C++auto environment7 = 
m_webViewEnvironment.try_query<ICoreWebView2Environment7>(); CHECK_FEATURE_RETURN(environment7); wil::unique_cotaskmem_string userDataFolder; environment7->get_UserDataFolder(&userDataFolder);For examples of reading the UserDataFolder property, see the Win32 samples in the WebView2Samples repo	.Clearing space in the UDF
Instead of deleting the user data folder (UDF), clear browsing data from the UDF. For example, clear user data and history when a user signs out.
See Clear browsing data from the user data folder.
Handling error messages
If the user data folder (UDF) doesn't have Write permissions, the following error message strings may be returned:
User data folder cannot be created because a file with the same name already exists.
Unable to create user data folder, Access Denied.
The above is true regardless of whether the location of the user data folder was the default UDF location or a custom UDF location.
If there's insufficient memory, or the Microsoft Edge runtime is unable to start, or the WebView2 Runtime is not found, error message strings similar to the following may be returned:
Microsoft Edge runtime unable to start
Failed to create WebView2 environment
Add code, such as try/catch code, to handle these errors. These errors tend to be fatal errors that you can't recover from, so try/catch will prevent the app from crashing. You'll then be able to detect the failure and close the app gracefully. Some errors are unrecoverable, such as Access Denied when trying to use a user data folder that you don't have Write permissions to.
Error message strings are displayed in a dialog.
Whether to persist user data folders in various scenarios
Your host app controls the lifetime of the user data folder (UDF). If your app re-uses user data from app sessions, consider saving (that is, not deleting) the UDFs.
If your app doesn't reuse user data from app sessions, you can delete the UDF. However, while a session is running, it's better to call the clear browsing data methods instead of deleting the UDF.
Persisting user data folders if same user uses your app repeatedly, and the web content of the app relies on the user's data
In this scenario, don't explicitly delete the user data folder (UDF); persist the data.
Persisting user data folders if multiple users use your app repeatedly
If multiple users use your app repeatedly, you should create a new user data folder (UDF) for each new user, and save the UDF of each user.
The WebView2 control creates a new UDF for each new user. The WebView2 control creates one UDF per session. If there are multiple WebView2 sessions, the WebView2 control creates multiple UDFs. Usually if the host app has more than one WebView2 control instance, the host app should point all instances of WebView2 to the same UDF.
Each host app that has a WebView2 control instance will have its own UDF. Your host app can have each UDF point to the same place.
If your host app is for multiple users, you should probably create one UDF per user. If your app was installed per-user, this is how it works.
If you launch two copies of your host app, they will use the same UDF.
For Win32 host apps, the UDF is not automatically removed.
For .NET (WPF & WinForms) host apps, the UDF is not automatically removed.
For ClickOnce host apps, the UDF is automatically removed.
For WinUI 2 (UWP) host apps, the UDF is not automatically removed.
For WinUI 3 host apps, the UDF is not automatically removed.
Uninstalling a host app
Uninstalling a WebView2 host app uses the standard uninstalling process; this process is not unique to WebView2.
During uninstall, your installer may need to clean up any created UDF. In some cases, you might want to preserve the UDF.
If you create the host app, create an MSIX installer, install the host app, and then run the host app, it creates the UDF. But then if you uninstall the host app, that won't auto-clean up the UDF (because the uninstaller protects and preserves the user data), so your uninstall process needs to be aware of that consideration.
In ClickOnce apps, it installs in a single location, and when the session ends, it deletes the entire tree, so the UDF is automatically deleted. That's because of how ClickOnce works, not because of how WebView2 works.
Persisting user data folders if your app doesn't have repeat users
In this scenario, create a new user data folder (UDF) for each user, and delete the previous UDF.
Deleting user data folders
Your host app or the uninstaller can delete the user data folder (UDF). You might need to delete UDFs for any of the following reasons:
 If you want to uninstall a packaged Windows Store app. In this case, Windows deletes UDFs automatically.
 If you want to clean up all browsing data history. However, see the clear browsing data methods first, as an easier, more flexible approach.
If you want to recover from data corruption.
If you want to remove previous session data.
 If you want to change the UDF location. If you change the UDF location, the previous UDF will not be automatically cleaned up.
End the WebView2 session before deleting the UDF
To delete a user data folder (UDF), you must first end the WebView2 session. You cannot delete a UDF if the WebView2 session is currently active.
Wait for browser processes to exit before deleting the UDF
If files are still in use after your WebView2 host app closes, wait for browser processes to exit before deleting the user data folder (UDF).
Files in UDFs might still be in use after the WebView2 app is closed. In this situation, wait for the browser process and all child processes to exit before deleting the UDF. To monitor processes to wait for them to exit, retrieve the process ID of the browser process by using the BrowserProcessId property of the WebView2 app instance.
Sharing user data folders
WebView2 control instances can share the same user data folders (UDFs), to do the following:
 Optimize system resources by running in one browser process. See Process model for WebView2 apps.
 Have WebView2 controls with different profiles, to separate browser data storage such as cookies, permissions, and cached resources under the same UDF. See Support multiple profiles under a single user data folder.
Consider the following when sharing UDFs:
 When re-creating WebView2 controls to update browser versions using add_NewBrowserVersionAvailable (Win32) event handlers or
NewBrowserVersionAvailable (.NET) events, your host app must ensure that browser processes exit and close any WebView2 controls that share the same UDF. To retrieve the process ID of the browser process, use the BrowserProcessId property of the WebView2 control.
Avoid running too many folders at once
To isolate different parts of your app, or when sharing data between WebView2 controls isn't needed, you can use different user data folders (UDFs). For example, an app can consist of two WebView2 controls, one for displaying an advertisement and the other for displaying app content. You can use different UDFs for each WebView2 control.
Each WebView2 browser process consumes additional memory and disk space. Therefore, avoid running a WebView2 control with too many different UDFs at the same time.
Rather than multiple UDFs, you can use multiple profiles to achieve browser data storage separation for different WebView2 controls. Each profile saves browser data in a dedicated folder under the same, shared UDF. See Support multiple profiles under a single user data folder.
See also
Support multiple profiles under a single user data folder
Clear browsing data from the user data folder
Package and deploy in Windows App Development docs (Build desktop apps for Windows).
ClickOnce security and deployment - Visual Studio deployment documentation.
Understand the ClickOnce and DirectInvoke features in Microsoft Edge - in Microsoft Edge Enterprise documentation.

Feedback
Was this page helpful?  Yes  No
Support multiple profiles under a single user data folder
Article • 11/17/2022
The WebView2 Multiple Profiles API allows you to create and manipulate user profiles to work with your WebView2 controls. Profiles in WebView2 are conceptually similar to profiles in Microsoft Edge. Multiple profile support enables a WebView2 app to have multiple profiles under a single user data folder.
Each profile has a dedicated profile folder to save browser data, which provides separate browsing data storage for each user, such as cookies, user preference settings, and cached resources. All the WebView2 controls that are associated with the same user profile share a single profile folder.
Previous approach: Using a different user data folder for each WebView2 control
Previously, without multi-profile support, to achieve data separation, a WebView2 app could use different user data folders for different WebView2 controls. However, in that approach, you must run multiple WebView2 runtime instances (each including a browser process and a bunch of child processes), which consumed more system resources including memory, CPU footprint, and disk space.
Specify the profile when creating a WebView2
Create an options object that defines a profile
The CreateCoreWebView2ControllerOptions method on CoreWebView2Environment creates an options object, CoreWebView2ControllerOptions, to provide specific information about a profile, including ProfileName and IsInPrivateModeEnabled. Use this object to specify the target profile when creating a WebView2 control instance.

Create a WebView2 control that uses the profile
Each Create...Controller method which takes an options parameter creates a WebView2 control and associates it with the profile you specified. If the specified profile doesn't exist, a new profile will be created.

Example of specifying the profile when creating a WebView2

Access and manipulate the profile
You can get the profile object by accessing the Profile property of a WebView2 control.
After you get the profile object, you can manipulate it. Use CoreWebView2Profile to get profile information and do profile-wide settings and operations.

Example of accessing and manipulating the profile

See also
Multiple profiles in Overview of WebView2 APIs.
Manage the user data folder
Clear browsing data from the user data folder
Spec for multiple profile support API
Was this page helpful? 



Clear browsing data from the user data folder
Article • 11/17/2022
To clear browsing data from the user data folder for a WebView2 app and free up space, call the methods of the Clear Browsing Data API.
The Clear Browsing Data API allows you to programmatically erase data in the user data folder that's associated with a WebView2 user profile. For example, use this API to clear user data and history when a user signs out.
You can:
Clear all browsing data.
Clear selected kinds of browsing data.
Clear selected kinds of browsing data in a specified time range.
Clear all browsing data
This method clears all the kinds of browsing data that are listed in the data kinds enumeration, regardless of when the data was created. It clears the data from the user data folder for the user profile on which the method is called.

Clear selected kinds of browsing data
This method clears the specified kinds of browsing data, regardless of when the data was created. It clears the data from the user data folder for the user profile on which the method is called.

Clear selected kinds of browsing data in a time range
This method clears the specified kinds of browsing data that was created between the specified start time and end time. It clears the data from the user data folder for the user profile on which the method is called.

Example: Clearing selected kinds of browsing data in a time range
This example clears autofill data and password autosave data from the last hour.
The following parameter values are passed to the Clear Browsing Data API method:


API Reference

See also
Manage the user data folder
Support multiple profiles under a single user data folder
Feedback
Was this page helpful? 
Data and privacy in WebView2
Article • 06/22/2023
WebView2 collects a set of optional and required diagnostic data to keep WebView2 secure and up to date, diagnose issues, and improve WebView2. By agreeing to the WebView2 Runtime Terms and Conditions License, WebView2 developers acknowledge that WebView2 will collect the data that's described in this article. To view the license, go to Download the WebView2 Runtime, where clicking any of the download buttons, such as Get the Link, Download, or x64, shows the license in a dialog.
Additionally, WebView2 follows the standards that are outlined in Microsoft Edge Privacy Whitepaper. WebView2 has mechanisms to ensure privacy. WebView2 data collection follows the same strict standards as Microsoft Edge. For more information, see Microsoft Privacy Statement - Microsoft privacy.
The main diagnostic data sources are:
Chromium and Microsoft Edge telemetry infrastructure.
Windows data reporting.
Watson (Microsoft Internal) infrastructure to collect crash dumps.
This article is for WebView2 developers.
Optional diagnostic data
WebView2 is a Windows component and thus follows the Windows diagnostic data collection practices. For more information, see Windows diagnostic data. The data collection consent for WebView2 is governed by the Settings > Privacy & security > Diagnostics & feedback > Diagnostic data setting on Windows 10 and Windows 11 as a centralized switch.
Users can control WebView2 data collection through the Windows Diagnostic data setting on Windows 10 and Windows 11, as shown below. As a developer, consider conveying this to your WebView2 app users and inviting them to use the Windows Diagnostic data setting to fit their preference.
Here's an example of diagnostic data settings, for a Windows 11 machine that has some settings managed by an organization:

When the Windows Diagnostic data setting is on:
 WebView2-related data is collected, including API usage, SDK usage, and creation failure.
 Browser diagnostic data is collected. Only browser events that are relevant to WebView2 are collected.
Regardless of the Windows Diagnostic data setting, WebView2 collects required data that's necessary to maintain performance and reliability; see Diagnostics, feedback, and privacy in Windows.
Although you don't have control of overall diagnostic data collection, WebView2 offers APIs to control the behavior of the following features that generate data:
SmartScreen.
Custom crash reporting.
These features are described below.
SmartScreen
Microsoft Defender SmartScreen ("SmartScreen") is a security feature that is enabled by default to help users safely browse the web. The IsReputationCheckingRequired property controls whether SmartScreen is enabled. Generally, all other services in
edge://settings/privacy are turned off, for WebView2.
If you don't disable SmartScreen, you must provide notice to all users that your software includes Microsoft Defender SmartScreen, and collects and sends the user's information to Microsoft as disclosed in Microsoft Privacy Statement and in SmartScreen in Microsoft Edge Privacy Whitepaper.

SmartScreen in Overview of WebView2 APIs.
Spec: Disable SmartScreen
Custom crash reporting
If any WebView2 process crashes, one or more minidump files are created and sent to Microsoft for diagnosis. Use this API to customize crash reporting when running diagnostics and doing analysis.
 When IsCustomCrashReportingEnabled is set to true, Windows won't send crash data to the Microsoft endpoint.

See also:
 Custom crash reporting in Overview of WebView2 APIs.
Spec: Custom Crash Reports
Minidump Files
See also
 Security and privacy in Overview of WebView2 APIs.

Feedback
Was this page helpful?  Yes  No

About Release Notes for the WebView2 SDK
Article • 11/26/2024
The WebView2 team updates the WebView2 Release SDK and the WebView2 Prerelease SDK on a four-week cadence. These Release Notes contain the latest information on product announcements, additions, modifications, and breaking changes to the APIs.
You can view the list of Microsoft.Web.WebView2 SDK packages at the NuGet site.
Generally, release notes apply across the supported platforms, which are listed in WebView2 API Reference. For an outline of APIs that are in Release SDK packages, see Overview of WebView2 APIs.
Release Notes entries correspond to historical releases of WebView2, and are not updated over time. References to "new features" and "experimental APIs" might become outdated as new versions of WebView2 are released.
Phases of adding APIs
New APIs are added in phases, as follows:
1. APIs are initially introduced as Experimental APIs in a Prerelease SDK package.
2. Then they become Stable APIs in a Prerelease SDK package.
3. Soon after, they become Stable APIs in a Release SDK package. Sometimes, APIs are simultaneously promoted to Stable in a Prerelease SDK and Stable in a Release SDK.

See also:
 Phases of introducing APIs in Prerelease and Release SDKs for WebView2.
Updating the Runtime and SDK
WebView2 changes may require an update to the Runtime, SDK, or both. Most new APIs require both Runtime and SDK updates. Starting with the February 2023 release, the update requirement for each bug fix is indicated as follows:
ﾉ Expand table
IndicatorMeaningRuntime and SDK, or no indicatorBoth the Runtime and the SDK need to be updated.Runtime-onlyOnly the Runtime needs to be updated.SDK-onlyOnly the SDK needs to be updated.WebView2 shares code and binaries with the Microsoft Edge browser, and is released around the same time. As a result, WebView2 Runtime releases generally also include Microsoft Edge updates.
 For Microsoft Edge updates, see Release notes for Microsoft Edge Stable Channel and Release notes for Microsoft Edge Beta Channel.
 To update the WebView2 Runtime on your development machine and on user machines, see Distribute your app and the WebView2 Runtime. To view or get the latest WebView2 Runtime versions, see Download the WebView2 Runtime in the Microsoft Edge WebView2 page at developer.microsoft.com.
 To install or update the WebView2 SDK, see Install or update the WebView2 SDK in Set up your Dev environment for WebView2.
Recommended browser channel and Runtime
Make sure to re-compile your WebView2 app after updating the WebView2 SDK NuGet package. The WebView2 team recommends the following:
 Use the Canary preview channel of Microsoft Edge when you develop using a Prerelease version of the WebView2 SDK package. Canary is the recommended preview channel, because it ships at the fastest cadence and has the newest APIs.
 Use the Evergreen WebView2 Runtime when you use a release version of the WebView2 SDK package.
For more information, see Matching the Runtime version with the SDK version in Prerelease and Release SDKs for WebView2.
Minimum version of the browser or Runtime to load WebView2
To load WebView2, the minimum version of Microsoft Edge or the WebView2 Runtime is 86.0.616.0. The minimum version to load WebView2 only changes when a breaking change occurs in the web platform.
To use a Prerelease SDK along with a Microsoft Edge preview channel, see Test upcoming APIs and features.
See also
Release Notes for the WebView2 SDK
Archived Release Notes for the WebView2 SDK
Overview of WebView2 APIs
Contacting the Microsoft Edge WebView2 team

Feedback
Was this page helpful? 
Release Notes for the WebView2 SDK
Article • 01/24/2025
These Release Notes provide information about new features and bug fixes that are included in the WebView2 Release SDK and the WebView2 Prerelease SDK.
1.0.2957.106
Release Date: January 20, 2025
NuGet package for WebView2 SDK 1.0.2957.106
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 132.0.2957.106 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
Show WPF elements on top of the WebView2 layer (WebView2CompositionControl)
The WebView2CompositionControl prevents the WebView2 control from being the topmost layer in a WPF app and obscuring any WPF elements.
Microsoft.Web.WebView2.Wpf.WebView2CompositionControl is a drop-in replacement for the standard WPF WebView2 control. Both the WebView2 control and
WebView2CompositionControl implement the Microsoft.Web.WebView2.Wpf.IWebView2 interface. Both of them derive from FrameworkElement, as follows:
FrameworkElement -> HwndHost -> WebView2.
FrameworkElement -> Control -> WebView2CompositionControl.
Background: If you're building a Windows Presentation Foundation (WPF) app and using the WebView2 control, you may find that your app runs into "airspace" issues, where the WebView2 control is always displayed on top, hiding any WPF elements in the same location, even if you try to specify the WPF elements to be above the WebView2 control (using visual tree order or the z-index property, for example).
This issue occurs because the WPF control uses the WPF HwndHost to host the Win32 WebView2 control, and HwndHost has an issue with airspace.

Bug fixes
Runtime-only
 Fixed a regression where display changes can cause WebView2 to render smaller than the app window.
SDK-only
 Fixed an issue in the WPF WebView2CompositionControl where it's not displayed if it's initialized with size (0,0), such as when it's initialized in a TabItem of a TabControl. (Issue #4941	)
1.0.3079-prerelease
Release Date: January 24, 2025
NuGet package for WebView2 SDK 1.0.3079-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 134.0.3079.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
Customize the Find behavior (Find API)
The Find API allows you to programmatically control Find operations, and enables adding the following functionality to your app:
 Customize Find options, including Find Term, Case Sensitivity, Word Matching, Match Highlighting, and Default UI Suppression.
Find text strings and navigate among them within a WebView2 control.
Programmatically initiate Find operations, and navigate Find results.
Suppress the default Find UI.
Track the status of Find operations.
There are known issues with the Find API for PDF documents. When you view a PDF document within a WebView2 control, the Find feature currently only provides the first index and the number of matches found. For example, if the string occurs three times in a PDF, the UI would say 1/3 and would not support programmatically calling Next or Previous. We are actively investigating these issues, and we encourage you to report any problems you encounter, by using the WebView2Feedback repo.

Customize the drag and drop behavior (DragStarting API)
The DragStarting API overrides the default drag and drop behavior when running in visual hosting mode. The DragStarting event notifies your app when the user starts a drag operation in the WebView2, and provides the state that's necessary to override the default WebView2 drag operation with your own logic.
 Use DragStarting on the ICoreWebView2ExperimentalCompositionController6 to add an event handler that's invoked when the drag operation is starting.  Use ICoreWebView2ExperimentalDragStartingEventArgs to start your own drag operation.
 Use the GetDeferral method to execute any async drag logic and call back into the WebView at a later time.
 Use the Handled property to let the WebView2 know whether to use its own drag logic.

Track navigation history for nested iframes (FrameCreatedEvent API)
The FrameCreatedEvent API supports nested iframes, such as recording the navigation history for a second-level iframe. Without this API, WebView2 only tracks first-level iframes, which are the direct child iframes of the main frame. Using this API, your app can subscribe to the nested iframe creation event, giving the app access to all properties, methods, and events of CoreWebView2Frame for the nested iframe.
Use this API to manage iframe tracking on a page that contains multiple levels of iframes. You can choose to track any of the following:

Set default background color on WebView2 initialization (DefaultBackgroundColor API)
The DefaultBackgroundColor API allows users to set the DefaultBackgroundColor property at initialization. This prevents a disruptive white flash during the WebView2 loading process.

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Show WPF elements on top of the WebView2 layer (WebView2CompositionControl)
The WebView2CompositionControl prevents the WebView2 control from being the topmost layer in a WPF app and obscuring any WPF elements.
Microsoft.Web.WebView2.Wpf.WebView2CompositionControl is a drop-in replacement for the standard WPF WebView2 control. Both the WebView2 control and
WebView2CompositionControl implement the Microsoft.Web.WebView2.Wpf.IWebView2 interface. Both of them derive from FrameworkElement, as follows:
FrameworkElement -> HwndHost -> WebView2.
FrameworkElement -> Control -> WebView2CompositionControl.
Background: If you're building a Windows Presentation Foundation (WPF) app and using the WebView2 control, you may find that your app runs into "airspace" issues, where the WebView2 control is always displayed on top, hiding any WPF elements in the same location, even if you try to specify the WPF elements to be above the WebView2 control (using visual tree order or the z-index property, for example).
This issue occurs because the WPF control uses the WPF HwndHost to host the Win32 WebView2 control, and HwndHost has an issue with airspace.
See also:

Bug fixes
Runtime-only
 Fixed a regression where display changes can cause WebView2 to render smaller than app window.
Enabled the IsolateSandboxedIframes upstream feature for WebView2.
Prevented deleting a service worker when the version changes.
The CleanUpSome API in Hostobject now only does garbage collection for the full heap. CleanUpSome has been removed from the V8 engine.
Fixed a regression of AreBrowserAcceleratorKeysEnabled. (Issue #5033) Fixed a bug where IsDefaultDownloadDialogOpenChanged wasn't triggered when a dialog is closed by using the keyboard. (Issue #4807	)
SDK-only
 Fixed an issue in the WPF WebView2CompositionControl where it's not displayed if it's initialized with size (0,0), such as when it's initialized in a TabItem of a TabControl. (Issue #4941	)
1.0.2903.40
Release Date: November 18, 2024
NuGet package for WebView2 SDK 1.0.2903.40
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 131.0.2903.40 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
Control whether the screen capture UI is shown (ScreenCaptureStarting event)
Added a new ScreenCaptureStarting event. This event is raised whenever the WebView2 and/or iframe that corresponds to the CoreWebView2Frame (or to any of its descendant iframes) requests permission to use the Screen Capture API before the UI is shown. The app can then block the UI from being displayed, or allow the UI to be displayed.

Bug fixes
Runtime-only
 Allowed the Download dialog to receive initial focus on launch.
General changes
 The Microsoft Edge WebView2 Runtime is no longer listed in Windows Settings > Apps > Installed apps, because it is a persistent system component.
1.0.2950-prerelease
Release Date: November 18, 2024
NuGet package for WebView2 SDK 1.0.2950-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 132.0.2950.0 or higher.
Experimental APIs
No Experimental APIs have been added in this Prerelease SDK.
Promotions
No APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Bug fixes
Runtime-only
Allowed the Download dialog to receive initial focus on launch.
Fixed a crash while cancelling navigation to certain sites in
FrameNavigationStarting. (Issue #4843)
Postponed customizing the context menu when the touch selection menu is being displayed. (Issue #4737	)
SDK-only
Added Arm64ec support.
Fixed an issue where WebView2 running in "Window to Visual" mode couldn't receive accelerator input.
1.0.2849.39
Release Date: October 21, 2024
NuGet package for WebView2 SDK 1.0.2849.39
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 130.0.2849.39 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
Configure the security warning when saving a file
( SaveFileSecurityCheckStarting event)
Added a new SaveFileSecurityCheckStarting event. Your app can register a handler on this event to get the file path, filename extension, and document origin URI information.
You can then apply your own rules to do actions such as the following:
 Allow saving the file without presenting a default security-warning UI about the file-type policy.

Bug fixes
Runtime-only
 Fixed a Download dialog focus issue when pressing Tab or Shift+Tab to switch into the Webview2 control.
SDK-only
Using CoreWebView2.AddWebResourceRequestedFilter without a
CoreWebView2WebResourceRequestSourceKinds parameter is now deprecated. See the .NET CoreWebView2.AddWebResourceRequestedFilter Method.
 Added the .NET 8 TargetFramework for C# WinRT, enabled AOT (ahead-of-time) compatibility, and disabled runtime marshalling.
1.0.2895-prerelease
Release Date: October 21, 2024
NuGet package for WebView2 SDK 1.0.2895-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 131.0.2895.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
RestartRequested event when WebView2 needs to restart
Added a new RestartRequested event. The RestartRequested event is raised whenever
WebView2 needs to restart to apply updates or configuration changes. You can use this
API to detect when WebView2 needs to restart, and take appropriate actions. The
Priority property of the RestartRequested event arguments indicates the priority of the restart request:


Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Control whether the screen capture UI is shown
( ScreenCaptureStarting event)
Added a new ScreenCaptureStarting event. This event is raised whenever the WebView2 and/or iframe that corresponds to the CoreWebView2Frame (or to any of its descendant iframes) requests permission to use the Screen Capture API before the UI is shown. The app can then block the UI from being displayed, or allow the UI to be displayed.

Configure the security warning when saving a file
( SaveFileSecurityCheckStarting event)
Added a new SaveFileSecurityCheckStarting event. Your app can register a handler on this event to get the file path, filename extension, and document origin URI information.
You can then apply your own rules to do actions such as the following:
 Allow saving the file without presenting a default security-warning UI about the file-type policy.

Bug fixes
SDK-only
Fixed Arm64 incompatibility with WindowsAppSDK 1.6.
Removed extra WebView2Loader.dll in WinAppSDK case.
Using CoreWebView2.AddWebResourceRequestedFilter without a
CoreWebView2WebResourceRequestSourceKinds parameter is now deprecated. See the .NET CoreWebView2.AddWebResourceRequestedFilter Method.
1.0.2792.45
Release Date: September 23, 2024
NuGet package for WebView2 SDK 1.0.2792.45
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 129.0.2792.45 or higher.
Promotions
No additional APIs have been promoted to Stable and added in this Release SDK.
Bug fixes
SDK-only
 Fixed an SDK dependency for .NET projects. (Issue #4743)
1.0.2839-prerelease
Release Date: September 23, 2024
NuGet package for WebView2 SDK 1.0.2839-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 130.0.2839.0 or higher.
Experimental APIs
No Experimental APIs have been added in this Prerelease SDK.
Promotions
No APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Bug fixes
Runtime-only
 Fixed an issue where focusing on a WebView2 control in WinAppSDK with the Windows "Scroll inactive windows" setting disabled caused scrolling to fail.
Blocked edge://wallet in WebView2. (Issue #4710)
Cleared the environment variable for default background color in .NET WebView2 controls after the controller has finished creation.
Enabled accessibility support for Webview2 in visual hosting mode.
Fixed a bug with removing a "web resource requested" filter for multiple sources when one of them is Document.
 Fixed a regression where DataList was not visible in WinUI or in other visually hosted WebView2 instances.
SDK-only
	Fixed an SDK dependency for .NET projects. (Issue #4743	)
Fixed a compatibility issue when calling GetAvailableBrowserVersionString() with an older WebView2Loader.dll. (Issue #4395	)
Fixed issues when compiling wv2winrt-generated code with the cpp20 and
/permissive- options.
Added the .NET 8 TargetFramework for C# WinRT, enabled AOT (ahead-of-time) compatibility, and disabled runtime marshalling.
1.0.2739.15
Release Date: August 26, 2024
NuGet package for WebView2 SDK 1.0.2739.15
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 128.0.2739.15 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
Web notification handling
Added support for Web Notification, for non-persistent notifications. The
NotificationReceived event for CoreWebView2 controls web notification handling, allowing customization or suppression by the host app. Unhandled notifications default to WebView2's UI.

Save as
Added SaveAs APIs that allow you to programmatically perform the Save as operation.
You can use these APIs to block the default Save as dialog, and then either save silently, or build your own UI for Save as. These APIs pertain only to the Save as dialog, not the Download dialog, which continues to use the existing Download APIs.

Bug fixes
There are no bug fixes in this Release SDK.
1.0.2783-prerelease
Release Date: August 26, 2024
NuGet package for WebView2 SDK 1.0.2783-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 129.0.2783.0 or higher.
Experimental APIs
No Experimental APIs have been added in this Prerelease SDK.
Promotions
No APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Bug fixes
Runtime and SDK
 Re-enabled the default behavior of SetUserAgent: by default, SetUserAgent is effective for cross-origin iframes.
Runtime-only
Enabled the interactive dragging feature by default. See edge-webviewinteractive-dragging in WebView2 browser flags.
Disabled IsolateSandboxedIframes for WebView2.
Fixed an issue where WebView creation fails when multiple instances are launched at the same time. (Issue #4731)
 Fixed a bug in WinRT JavaScript projection where caching existing properties in objects whose name contains Proxy or Function caused an error due to name collision.
 Fixed a bug where the WebView2 control became the wrong size after disconnecting and reconnecting a monitor.
 Fixed an issue where "mailto:" links leave an untitled popup window open, instead of automatically closing the popup window.
SDK-only
C# WinRT projection now works on UWP.
Fixed an issue to ensure that GeneratedFilesDir no longer appears in Visual Studio for C# WinRT projection.
See also
About Release Notes for the WebView2 SDK
Archived Release Notes for the WebView2 SDK
Overview of WebView2 APIs - outlines many of the APIs, by feature area, that are in Release SDK packages.
 Contacting the Microsoft Edge WebView2 team

Feedback
Was this page helpful? 

Archived Release Notes for the WebView2 SDK
Article • 01/20/2025
These Release Notes provide information about added features and bug fixes that are included in the WebView2 Release SDK and the WebView2 Prerelease SDK, for older releases.
1.0.2651.64
Release Date: August 13, 2024
NuGet package for WebView2 SDK 1.0.2651.64
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 127.0.2651.64 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Updated the WebMessageObjects API to allow injecting DOM objects into
WebView2 content that's constructed via the app, and via the
CoreWebView2.PostWebMessage API in the other direction. Added a new web object type (CoreWebView2FileSystemHandle) to represent a file system handle that can be posted to the web content to provide it with filesystem access.


Bug fixes
Runtime-only
 Fixed a regression where WebResourceRequested events crash on certain sites. (Issue
#4602)
SDK-only
 Fixed x86 for WinRT C# projection.
1.0.2730-prerelease
Release Date: August 7, 2024
NuGet package for WebView2 SDK 1.0.2730-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 128.0.2730.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added new Throttling Controls APIs which allows for efficient resource management by allowing you to throttle JavaScript timers. This is helpful in scenarios where a WebView2 control needs to remain visible, but needs to consume fewer resources (such as when the user isn't interacting with the content). These Throttling Controls APIs allow you to:
 Customize script timers (setTimeout and setInterval) throttling under different page states (foreground, background, and background with intensive throttling).

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 Added SaveAs APIs that allow you to programmatically perform the Save as operation. You can use these APIs to block the default Save as dialog, and then either save silently, or build your own UI for Save as. These APIs pertain only to the
Save as dialog, not the Download dialog, which continues to use the existing Download APIs.

Added support for Web Notification, for non-persistent notifications. The
NotificationReceived event for CoreWebView2 controls web notification handling, allowing customization or suppression by the host app. Unhandled notifications default to WebView2's UI.

Bug fixes
Runtime-only
 Fixed an issue where the app window couldn't be controlled via system commands
(such as Alt+F4 or Alt+Spacebar) when the focus was in WebView2 for Visual
hosting mode. (Issue #2961)
 Fixed a bug in WebView2 UWP where the Find bar couldn't be clicked into from the host app.
SDK-only
 Adding the missing WinRT CoreWebView2Notification.VibrationPattern API. This WinRT API can be combined with the stable notification API promotion release notes; see "Web Notification" and NotificationReceived for WinRT, immediately above.
 Fixed an issue where KeyDown events from the WinForms WebView2 control didn't include the correct ModifierKeys information. (Issue #1216) Fixed x86 for WinRT C# projection.
Made CreateCoreWebView2Environment and
GetAvailableCoreWebView2BrowserVersionString more robust against potential race condition during Runtime update.
1.0.2592.51
Release Date: June 19, 2024
NuGet package for WebView2 SDK 1.0.2592.51
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 126.0.2592.51 or higher.
Promotions
No additional APIs have been promoted to Stable and added in this Release SDK.
Bug fixes
Runtime-only
Disabled BreakoutBoxPreferCaptureTimestampInVideoFrame for WebView2 TextureStream.
Fixed a regression where the WindowCloseRequested event only fires for first window.close() call.
Fixed a regression where typed arrays in WinRT JavaScript projection could not be handled as IDispatch in the host.
 Fixed a bug where the autofill popup dismisses immediately and causes a focus change.
 Fixed a bug where WebView2 fails to load because of AppPolicyGetWindowingModel. (Issue #4591)
1.0.2646-prerelease
Release Date: June 19, 2024
NuGet package for WebView2 SDK 1.0.2646-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 128.0.2646.0 or higher.
General features
 Added support for C#/WinRT .NET 6+.
Experimental features
Introduced the feature flag msWebView2EnableDownloadContentInWebResourceResponseReceived, an an Experimental feature (rather than as a Stable feature). When this flag is enabled, this allows responses of navigations that become downloads to be available in WebResourceResponseReceived.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added a new SaveFileSecurityCheckStarting event. As a developer, you can register a handler on this event to get the file path, filename extension, and document origin URI information. Then you can apply your own rules to do actions such as the following:
 Allow saving the file without presenting a default security-warning UI about the file-type policy.
Added a new ScreenCaptureStarting event. This event is raised whenever the WebView2 and/or iframe that corresponds to the CoreWebView2Frame (or to any of its descendant iframes) requests permission to use the Screen Capture API before the UI is shown. As a developer, you can then choose to block the UI from being displayed, or allow the UI to be displayed.

 CoreWebView2ScreenCaptureStartingEventArgs.OriginalSourceFrameInfo Property
 CoreWebView2ScreenCaptureStartingEventArgs.GetDeferral Method Added a new GetComICoreWebView2 method to the CoreWebView2 .NET class that enables you to convert a CoreWebView2 between .NET and COM. Added a new
WinRT interface that enables you to convert a CoreWebView2 between WinRT and
COM. This allows you to interoperate between libraries that are written in different languages.

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 Updated the WebMessageObjects API to allow injecting DOM objects into
WebView2 content that's constructed via the app, and via the
CoreWebView2.PostWebMessage API in the other direction. Added a new web object type to represent a file system handle that can be posted to the web content to provide it with filesystem access.


Bug fixes
Runtime-only
 Fixed a bug in owned-window activation logic for visual hosting.
1.0.2535.41
Release Date: May 28, 2024
NuGet package for WebView2 SDK 1.0.2535.41
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 125.0.2535.41 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.


Bug fixes
Runtime-only
 Fixed a bug where if the LaunchingExternalURIScheme event handler is attached, and the always remember checkbox is enabled, and the user selects this checkbox, the dialog is incorrectly displayed again.
 Fixed an issue where text edit controls in visual hosting would duplicate IME input when losing and then regaining focus.
 Fixed an issue where full-trust UWP apps couldn't display owned windows.
SDK-only
 Fixed an issue in the SDK causing erroneous <Platform> values in the .NET project platforms list. (Issue #1755)
1.0.2584-prerelease
Release Date: May 28, 2024
NuGet package for WebView2 SDK 1.0.2584-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 126.0.2584.0 or higher.
Experimental features
 Introduced an option to cancel the initial navigation in WebView2, to improve startup performance. This change is disabled by default, and can be enabled by using the msWebView2CancelInitialNavigation feature flag.
Experimental APIs
No Experimental APIs have been added in this Prerelease SDK.
Promotions
No APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Bug fixes
Runtime and SDK
 Fixed a crash when .NET host object async methods return a null result. (Issue
#4509)
Runtime-only
Fixed a WebView2 memory leak issue when the window is closed. (Issue #4286)
Fixed an issue where ignoreMemberNotFoundError wasn't working for .NET objects. (Issue #4497)
 Now returns a proper error code when CreateSharedBuffer is called with 0 buffer size. (Issue #4554)
Fixed an activation issue for the caret browsing dialog.
Fixed an issue where the WebView2 Visual Hosting CursorChanged event wasn't firing for custom cursors.
1.0.2478.35
Release Date: April 22, 2024
NuGet package for WebView2 SDK 1.0.2478.35
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 124.0.2478.35 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Added the Runtime selection feature to support more prerelease testing and flighting scenarios. You can specify ReleaseChannels to choose which channels are searched for during environment creation, and ChannelSearchKind to select a search order.

Bug fixes
Runtime-only
Fixes a potential integer overflow that could lead to a crash when using AdditionalObjects in the WebMessage API.
1.0.2526-prerelease
Release Date: April 22, 2024
NuGet package for WebView2 SDK 1.0.2526-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 125.0.2526.0 or higher.
Breaking changes
The minimum .NET Framework version requirement for .NET WebView2, including WPF and WinForms controls, has been updated from .NET Framework 4.5 to .NET Framework
4.6.2.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added SaveAs APIs that allow you to programmatically perform the Save as operation. You can use these APIs to block the default Save as dialog, and then either save silently, or build your own UI for Save as. These APIs pertain only to the
Save as dialog, not the Download dialog, which continues to use the existing Download APIs.

 CoreWebView2SaveAsUIShowingEventArgs.GetDeferral MethodPromotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.

Bug fixes
Runtime and SDK
 Fixed a bug in WinRT JavaScript projection where passing in a typed array resulted in an "Interface Not Supported" error. (Issue #3486)
 Added support for handling out array parameters in WinRT JavaScript projection.
Runtime-only
Fixed a bug where the Image Auto-captioning feature was enabled by default.
Fixed a bug where if the LaunchingExternalURIScheme event handler is attached, if the always remember checkbox is enabled and the user selects this checkbox, the dialog will incorrectly be shown again.
Fixed GetNonClientRegionAtPoint incorrectly returning Nowhere for some points.
Fixed a bug where the Text Services Framework would disconnect upon dropping a file onto a WebView2 region.
 Fixed a bug where the View Source Ctrl+U keyboard shortcut remained enabled when the AreDevToolsEnabled setting was false.
 Fixed a bug where a composable IME was duplicated upon regaining focus. (Issue
#1610)
 Ensured that devicePixelRatio is synchronized with custom rasterization scales.
	(Issue #3060	)
Fixed a race condition when using CallDevToolsProtocolMethod events in
	NewWindowRequested. (Issue #4181	)
Fixed a crash that can occur in WPF TabIntoCore when the Controller has been destroyed but the user tries to tab into the control (pressing the Tab key). (Issue
#4452)
Ensured that spellcheck takes input language with case-insensitive format.
Made the Language API more robust regarding user input.
Fixed a bug where the Save password? prompt is not displayed.
SDK-only
 Fixed missing AreBrowserExtensionsEnabled API in WinRT projection.
1.0.2420.47
Release Date: March 25, 2024
NuGet package for WebView2 SDK 1.0.2420.47
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 123.0.2420.47 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Added a new API to provide hit-testing results on the regions that a WebView2 contains. This API is useful for visually hosted applications that want to handle mouse events on the non-client area of the WebView2 window.
Added the FailureSourceModulePath property to the ProcessFailedEventArgs type, to specify the full path of the module that caused the crash in cases of Windows code integrity failures - that is, when a process exited with

Bug fixes
SDK-only
 The .NET assemblies for WinForms and WPF are now shipped with optimization enabled. (Issue #4409)
1.0.2470-prerelease
Release Date: March 25, 2024
NuGet package for WebView2 SDK 1.0.2470-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires WebView2 Runtime version 124.0.2470.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.



Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 Added the Runtime selection feature to support more prerelease testing and flighting scenarios. You can specify ReleaseChannels to choose which channels are searched for during environment creation, and ChannelSearchKind to select a search order.
Added the FailureSourceModulePath property to the ProcessFailedEventArgs type, to specify the full path of the module that caused the crash in cases of Windows
code integrity failures - that is, when a process exited with

Bug fixes
Runtime-only
 Fixed a reliability regression that could crash the application process when an old version of WebView2 client DLL is unloaded.
 Ensured that the WebView2 temporary download folder is unique per user data folder, and doesn't interfere with other apps or the browser.
1.0.2365.46
Release Date: February 26, 2024
NuGet package for WebView2 SDK 1.0.2365.46
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 122.0.2365.46 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Added support for WebResourceRequested for workers, which allows setting filters in order to receive WebResourceRequested events for service workers, shared workers, and different-origin iframes.



Bug fixes
Runtime-only
 Fixed a regression that affected handling of the NewWindowRequested event when the new window is set to be the source WebView. (Issue #4250	)
 Fixed a bug where closing a WebView that has an embedded PDF viewer could lead to a crash. (Issue #3832)
 Fixed a regression where mouse-clicks stopped working when the application enabled SetWindowDisplayAffinity. (Issue #4325)
1.0.2415-prerelease
Release Date: February 26, 2024
NuGet package for WebView2 SDK 1.0.2415-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 123.0.2415.0 or higher.
Breaking changes

The behavior of the InitiatingOrigin property of
CoreWebView2LaunchingExternalUriSchemeEventArgs has changed. If the
InitiatingOrigin is an opaque origin	, the InitiatingOrigin that's reported in the event args is its precursor origin. The precursor origin is the origin that created the opaque origin. For example, if a frame that's at example.com opens a subframe that has a different opaque origin, the subframe's precursor origin is example.com.


Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 The CoreWebView2ControllerOptions class now has an AllowHostInputProcessing property, which allows user input messages (keyboard, mouse, touch, and pen) to pass through the browser window to be received by an app process window.

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 Added a new API to provide hit-testing results on the regions that a WebView2 contains. This API is useful for visually hosted applications that want to handle mouse events on the non-client area of the WebView2 window.

Bug fixes
Runtime-only
 Fixed the camera or mic not being able to open in Google Meet or Microsoft
Teams meetings when the permission request is set to "not persisted" (that is,
SavesInProfile = false). (Issue #3592)
Fixed appending an empty --edge-webview-custom-scheme command-line switch in a WebView2 browser process.
 Disabled the global UserDataFolder registry key, so that this registry key can only be applied per-app.
 Fixed the NewWindowRequested event not being fired when opened by a browser extension. (Issue #3841	)
 Fixed the NewWindowRequested event not being fired when opening a view source. (Issue #4162	)
 Fixed an issue to fire StateChanged and BytesReceivedChanged events when a download involves navigation.
 Fixed a bug where the BeforeUnload dialog caused the WebView2 window to unexpectedly jump position. (Issue #4350	)
 Fixed an issue where PrintAsync prints a blank page if it is called too soon, before the PDF is fully loaded. (Issue #3779	)
1.0.2277.86
Release Date: February 5, 2024
NuGet package for WebView2 SDK 1.0.2277.86
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 121.0.2277.86 or higher.
Breaking changes

Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
ExecuteScriptWithResult provides exception information if the script failed. TryGetResultAsString gets the script execution result as a string rather than as JSON, to make it more convenient to interact with string results:

Bug fixes
Runtime-only
 Ensured that the spellcheck language matches put_Language programmatically.
The customized context menu is also updated with correct spellchecks. (Runtimeonly)
 Fixed a bug that stopped raising the NavigationCompleted event for some websites that load AV1-encoded videos. (Runtime-only) (Issue #3801	)
 Fixed an issue where host-process COM resources would be released during
WebView tear-down. (Runtime-only) (Issue #4226)
Fixed a bug that broke loading some social media apps such as Facebook, Twitter, and Linkedin. This change is Runtime-specific. (Runtime-only) (Issue #4281)
1.0.2357-prerelease
Release Date: January 30, 2024
NuGet package for WebView2 SDK 1.0.2357-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 122.0.2357.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added the Runtime selection feature to support more prerelease testing and flighting scenarios. Developers can specify ReleaseChannels to choose which channels are searched for during environment creation, and ChannelSearchKind to select a search order.
Added a new API to provide hit-testing results on the regions that a WebView2 contains. This API is useful for visually hosted applications that want to handle mouse events on the non-client area of the WebView2 window.


Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
CoreWebView2AcceleratorKeyPressedEventArgs has a new
IsBrowserAcceleratorKeyEnabled property to allow you to control whether the browser handles accelerator keys (shortcut keys), such as Ctrl+P or F3:
The Frame Process Info API, including GetProcessExtendedInfos, provides a snapshot collection of all frames that are actively running in the associated renderer process. This API enables the host application to detect which part of WebView2 is consuming resources such as memory or CPU usage:





CoreWebView2 Class:
CoreWebView2.CreateFromComICoreWebView2 Method To support browser extensions in WebView2, added GetBrowserExtensions for WinRT:


Bug fixes
Runtime-only
 Fixed a bug where closing a WebView control that has an embedded PDF viewer could lead to a crash. (Runtime-only) (Issue #3832)
 Fixed issues with stacking of child-process taskbar icons. (Runtime-only) (Issue
#3245)
 Fixed a bug that sent an unnecessary network request for Edge Cloud Config
Service. (Runtime-only) (Issue #4180)
 Updated the behavior of the app-region CSS property so that changes to its value trigger a page re-layout. (Runtime-only)
 Fixed an issue where put_AreBrowserAcceleratorKeysEnabled wasn't able to update settings for WebView2 when no AcceleratorKeyPressed event handler is registered. (Runtime-only) (Issue #4278	)
SDK-only
Fixed an issue where the WebView2 control in .NET was failing to find the
	WebView2Loader.dll on UNC paths. (SDK-only) (Issue #4081	)
Fixed some issues causing instances of InvalidOperationException in .NET controls, that weren't helpful to developers. (SDK-only) (Issue #4272	)
1.0.2210.55
Release Date: December 11, 2023
NuGet package for WebView2 SDK 1.0.2210.55
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 120.0.2210.55 or higher.
Breaking changes
） Important
Breaking Change: If you're developing an unpackaged Win32 app using Fixed Version Runtime v120 or above and targeting Windows 10 devices, you need to run a couple of ACL shell commands (icacls), to avoid crashing, because of a new security feature implemented in WebView2. See [Breaking Change] Unpackaged Win32 app using Fixed Version v120+ on Win10 need ACL	. The fix is in the article Distribute your app and the WebView2 Runtime, section Details about the Fixed Version runtime distribution mode, step "On Windows 10 devices, starting with Fixed Version 120, developers of unpackaged Win32 applications using Fixed
Version are required to run the following commands."
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
The Frame Process Info API, including GetProcessExtendedInfos, provides a snapshot collection of all frames that are actively running in the associated renderer process. This API enables the host application to detect which part of WebView2 is consuming resources such as memory or CPU usage:



Bug fixes
 Added support for promise cancellation on host objects' async methods in WinRT
JS projection. For information about AddHostObjectToScript, see Call native-side
WinRT code from web-side code. (Runtime and SDK)
 Disabled automatic HTTPS upgrades for WebView2 API navigations. (Runtimeonly) (Issue #4104)
1.0.2151.40
Release Date: November 6, 2023
NuGet package for WebView2 SDK 1.0.2151.40
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 119.0.2151.40 or higher.
General Availability

Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Added source frame info to the NewWindowRequested event arguments, to identify the source of the request:

Bug fixes
 Fixed a reliability issue where multiple WebView creations could lead to a crash. (Runtime-only) (Issue #3793)
1.0.2194-prerelease
Release Date: November 6, 2023
NuGet package for WebView2 SDK 1.0.2194-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 120.0.2194.0 or higher.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.

Bug fixes
 Fixed an issue where WebView2 would sometimes render blurry content or no content after changing monitor scale or switching between RDP and docking modes. (Runtime-only)
 Fixed an issue in TextServicesFoundation causing a crash when a WebView2 instance was destroyed. (Runtime-only)
 Fixes a memory leak in .NET when web messages are sent from WebView2, but aren't read from the application side. (Runtime and SDK) (Issue #3794)
 Fixed an issue causing the ScaleFactor setting to not work properly for all
WebView2 Print APIs. (Runtime-only) (Issue #4082)
1.0.2088.41
Release Date: October 16, 2023
NuGet package for WebView2 SDK 1.0.2088.41
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 118.0.2088.41 or higher.
Promotions
No additional APIs have been promoted to Stable and added in this Release SDK.
Bug fixes
 Fixed an issue causing some UWP apps to be unable to input text. (Runtime-only) (Issue #3805)
Fixed an initialization failure for apps that were using the Windows
	PerProcessSystemDPIForceOff compatibility setting. (Runtime-only) (Issue #3692	)
Fixed a Dialog Position Offset bug in WebView2. (Runtime-only) (Issue #3763
1.0.2164-prerelease
Release Date: October 18, 2023
NuGet package for WebView2 SDK 1.0.2164-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 120.0.2164.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added the FailureSourceModulePath property to the ProcessFailedEventArgs type, to specify the full path of the module that caused the crash in cases of Windows
code integrity failures - that is, when a process exited with

Bug fixes
 Added support for additional page settings (PageRange and PagesPerSheet) in the
	PrintToPDF API. (Runtime-only) (Issue #3719	)
 Navigation to an Extension Resource file was not handled correctly, and has now been fixed with the correct handling method. (Runtime-only) (Issue #3728)
 Fixed an issue causing some UWP apps to be unable to input text. (Runtime-only) (Issue #3805)
Fixed an initialization failure for apps that were using the Windows
PerProcessSystemDPIForceOff compatibility setting. (Runtime-only) (Issue #3692)
Removed monitors that were collecting data when the system default browser setting changes. (Runtime-only)
	Fixed a Dialog Position Offset bug in WebView2. (Runtime-only) (Issue #3763	)
Fixed a crash in the NewWindowRequested event if the NewWindow is set to null. (Runtime-only)
1.0.2045.28
Release Date: September 18, 2023
NuGet package for WebView2 SDK 1.0.2045.28
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 117.0.2045.28 or higher.
Promotions
No additional APIs have been promoted to Stable and added in this Release SDK.
Bug fixes
Disabled the Mouse Gesture feature by default. (Runtime-only) (Issue #3737)
Fixed a bug where mouse wheel scrolling was intermittently broken for visual hosting. (Runtime-only)
 Fixed a bug where downloading APK files in WebView2 crashes the WebView2 browser process. (Runtime-only) (Issue #3569)
1.0.2106-prerelease
Release Date: September 20, 2023
NuGet package for WebView2 SDK 1.0.2106-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 119.0.2106.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 The Frame Process Info API, including GetProcessExtendedInfos, provides a snapshot collection of all frames that are actively running in the associated renderer process. This API enables the host application to detect which part of WebView2 is consuming resources such as memory or CPU usage:

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 For WinRT, options have been added to manage custom scheme registration when

Bug fixes
Runtime
Updated the Screen Capture UI to remove mention of tabs. (Runtime-only)
Fixed a bug where PrintAsync doesn't print using the default DPI on the printer.
	(Runtime-only) (Issue #3709	)
 Fix a WebView creation failure when app is running as a different admin user.
(Runtime-only) (Issue #3738)
 Fixed a bug that prevented setting an automation name for the WebView2 control on WinUI 3. (Runtime-only)
 Enabled the new inter-process communication implementation for apps that are using very old SDKs. (Runtime-only)
SDK
 Fixed a bug where the CoreWebView2EnvironmentOptions.Language property doesn't change the accept-language HTTP header. (SDK-only) (Issue #3635	)
Added support for longer runtime installation paths. (SDK-only)
The custom URI scheme registration API now works in WinRT. For API names and links, in the Promotions section above, see the "custom scheme registration" entry. (SDK-only)
Runtime and SDK
Fixed a bug where the Runtime exits unexpectedly when calling
SetPermissionState with an invalid enum value. (Runtime and SDK)
1.0.1938.49
Release Date: August 28, 2023
NuGet package for WebView2 SDK 1.0.1938.49
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 116.0.1938.49 or higher.
Promotions
No additional APIs have been promoted to Stable and added in this Release SDK.
Bug fixes
 Fixed a handle tracking bug where TextureStream API usage could fail. (Runtimeonly)
 Fixed a bug where a WebView2 created in a background thread doesn't come to the foreground when created. (Runtime-only) (Issue #3584)
 Fixed a bug where the WebView2 content sometimes renders at the incorrect size after changing the display configuration (such as laptop sleeping; remoting; or connecting or disconnecting an external display). (Runtime-only) (Issue 3429)
 Fixed a bug where a bluescreen happens when using WebView2 apps on certain hardware configurations. (Runtime-only) (Issue #3679)
1.0.2065-prerelease
Release Date: August 30, 2023
NuGet package for WebView2 SDK 1.0.2065-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 118.0.2065.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.

Bug fixes
Disabled installing CRX in WebView2. (Runtime-only)
Fixed an initialization failure when the app has a DPI awareness compatibility setting applied. (Runtime-only) (Issue #3008)
 Fixed a bug where visual hosted owned windows couldn't take character input. (Runtime-only)
1.0.1901.177
Release Date: July 24, 2023
NuGet package for WebView2 SDK 1.0.1901.177
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 115.0.1901.177 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
NavigationKind gets the navigation kind of each navigation, such as Back/Forward, Reload, or navigation to a new document.


Bug fixes
 Fixed a bug where the entire toolbar is blank when hiding the Bookmarks, Search, and PageSelector buttons simultaneously. (Runtime-only) Issue 2866
1.0.1988-prerelease
Release Date: July 24, 2023
NuGet package for WebView2 SDK 1.0.1988-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 117.0.1988.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.




Bug fixes
 Fixed a CoreWebView2Frame.ExecuteScriptAsync hang that occurred when a frame was destroyed during script execution. Issue 3124
 Fixed a COMException when reading WebResourceResponse content after a redirect. Issue 3229
 Fixed a regression where calling CoreWebView2.AddHostObjectToScript twice for the same name hangs. (Runtime-only) Issue 3539
 Fixed an issue where PrintAsync fails when PrinterName contains Chinese characters. Issue 3379
Fixed an issue to disable the context menu in print pages when
AreDefaultContextMenusEnabled is set to false. Issue 3548
Removed visual search from the web capture context menu. (Runtime-only) Issue
3426
 Fixed an issue that caused PrintAsync and PrintToPdfStreamAsync to fail when print settings are null.
 Removed the Launch game button from the default No Internet Connection error page. (Runtime-only)
 Fixed an issue to ensure that WebVivew2Loader can be loaded from a UNC path.

 Removed the Hide all annotations option in PDF Settings and more. (Runtimeonly)
 Removed the Show all saved passwords context menu item. (Runtime-only)
1.0.1823.32
Release Date: June 5, 2023
NuGet package for WebView2 SDK 1.0.1823.32
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 114.0.1823.32 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 The LaunchingExternalUriScheme event is raised when there's an attempt to launch a URI scheme that is registered with the OS (an external URI scheme).

CoreWebView2.LaunchingExternalUriScheme Event
CoreWebView2LaunchingExternalUriSchemeEventArgs Class
CoreWebView2LaunchingExternalUriSchemeEventArgs.Cancel Property
CoreWebView2LaunchingExternalUriSchemeEventArgs.InitiatingOrigin Property
 CoreWebView2LaunchingExternalUriSchemeEventArgs.IsUserInitiated Property
CoreWebView2LaunchingExternalUriSchemeEventArgs.Uri Property
CoreWebView2LaunchingExternalUriSchemeEventArgs.GetDeferral MethodEnhanced support for multiple profiles, to allow configuring General Autofill and Password Autosave settings for different profiles.

1.0.1905-prerelease
Release Date: June 12, 2023
NuGet package for WebView2 SDK 1.0.1905-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 116.0.1905.0 or higher.
Experimental APIs
No Experimental APIs have been added in this Prerelease SDK.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
NavigationKind gets the navigation kind of each navigation, such as Back/Forward, Reload, or navigation to a new document.

The LaunchingExternalUriScheme event is raised when there's an attempt to launch a URI scheme that is registered with the OS (an external URI scheme).

CoreWebView2LaunchingExternalUriSchemeEventArgs.Uri Property
CoreWebView2LaunchingExternalUriSchemeEventArgs.GetDeferral Method
Bug fixes
Using wv2winrt webhosthidden entered an infinite loop when enumerating some webhosthidden types. (SDK-only)
In code that's generated by the wv2winrt tool, when calling an async method, it would crash if it succeeded but returned null instead of an IAsyncAction. (SDKonly)
1.0.1774.30
Release Date: May 8, 2023
NuGet package for WebView2 SDK 1.0.1774.30
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 113.0.1774.30 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.

The Profile Cookie Manager API supports profile management. The CookieManager property enables the host app to get the cookie manager for the profile.

Bug fixes
Fixed an issue that was causing the X-Edge-Shopping-Flag header to be added to web requests that are coming from WebView2. (Runtime-only) (Issue #3365)
1.0.1829-prerelease
Release Date: May 8, 2023
NuGet package for WebView2 SDK 1.0.1829-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 115.0.1829.0 or higher.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 Enhanced support for multiple profiles, to allow configuring General Autofill and Password Autosave settings for different profiles.

Bug fixes
 Disabled the Chrome Web Store info banner that displays the option to allow extensions installation. (Issue #3312)
Fixed an issue where a custom menu item wasn't firing. (Issue #3300)
Fixed a crash during initialization when creating a WebView2 using WPF and SDK version 1.0.1722.32, which is now deprecated. (See SDK 1.0.1722.32 is deprecated below.) (Issue #3375
 Fixed a bug in PostSharedBufferToScript that stops after about 32000x1MB buffers are posted. (Runtime-only) (Issue #3360)
Fixed an issue with visual hosted owned windows, where clicking into the Find bar from outside the window didn't activate the Find bar.
1.0.1722.45
Release Date: April 13, 2023
NuGet package for WebView2 SDK 1.0.1722.45
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 112.0.1722.45 or higher.
SDK 1.0.1722.32 is deprecated
WebView2 SDK 1.0.1722.32 is deprecated, and that package has been removed from the listing at NuGet. Discontinue development with package 1.0.1722.32. If your WebView2 app uses that package, we recommend that you move to a newer package, such as WebView2 SDK 1.0.1722.45 or later.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.


1.0.1777-prerelease
Release Date: April 10, 2023
NuGet package for WebView2 SDK 1.0.1777-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 114.0.1777.0 or higher.
Experimental APIs
No Experimental APIs have been added in this Prerelease SDK.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
The Profile Cookie Manager API supports profile management. The CookieManager property enables the host app to get the cookie manager for the profile.

Bug fixes
 Fixed a crash when releasing the WebView from a different thread. (Runtime-only) (Issue #3062)
 Fixed a bug where focus was trapped inside the WebView2 control when wrapped in a ContainerControl. (Issue #2835)
 Fixed the issue by disabling the editable .pdf temporary cached data recovery function in WebView2. (Issue #3274	)
 Disabled the Chrome Web Store info banner that displays the option to allow extensions installation. (Issue #3312)
Fixed an issue with new download items not getting called out by screen readers.
Fixed a bug where visual hosted owned windows didn't map mouse pointer input correctly.
 Fixed a bug where DownloadStarting was getting raised for a canceled Save As dialog. (Runtime-only)
1.0.1661.34
Release Date: March 20, 2023
NuGet package for WebView2 SDK 1.0.1661.34
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 111.0.1661.34 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.




1.0.1724-prerelease
Release Date: March 20, 2023
NuGet package for WebView2 SDK 1.0.1724-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 113.0.1724.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.


 CoreWebView2TextureStream.WebTextureStreamStopped Event
ErrorReceivedEventArgs:
CoreWebView2TextureStreamErrorReceivedEventArgs Class
CoreWebView2TextureStreamErrorReceivedEventArgs.Kind Property
CoreWebView2TextureStreamErrorReceivedEventArgs.texture Property
WebTextureReceivedEventArgs:
CoreWebView2TextureStreamWebTextureReceivedEventArgs Class
CoreWebView2TextureStreamWebTextureReceivedEventArgs.WebTexture Property
TextureStream error kind enum:
CoreWebView2TextureStreamErrorKind Enum
CoreWebView2TextureStreamErrorKind.CoreWebView2TextureStreamErrorN oVideoTrackStarted Enum Value
 CoreWebView2TextureStreamErrorKind.CoreWebView2TextureStreamErrorT extureError Enum Value
 CoreWebView2TextureStreamErrorKind.CoreWebView2TextureStreamErrorT extureInUse Enum Value
The Texture interface that the host writes to so that the Renderer will render on it:
CoreWebView2Texture Class
CoreWebView2Texture.Handle Property
CoreWebView2Texture.Resource Property
CoreWebView2Texture.Timestamp Property
The received WebTexture interface that the Renderer writes to so that the host will read on it:
CoreWebView2WebTexture Class
CoreWebView2WebTexture.Handle Property
CoreWebView2WebTexture.Resource Property
CoreWebView2WebTexture.Timestamp Property Added support for profile management: custom data partition, cookie manager and profile deletion:

Added support for custom data partition:
CoreWebView2.CustomDataPartitionId Property
CoreWebView2Profile.ClearCustomDataPartitionAsync Method
Added support for cookie manager:
 CoreWebView2Profile.CookieManager Property
Add support for managing profile deletion:
CoreWebView2Profile.Delete Method
CoreWebView2Profile.Deleted EventPromotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.

Bug fixes
 Fixed a bug in PrintAsync and PrintToPdfStreamAsync that throws an exception when print settings are null.
Improved handling of apps running elevated. (Runtime-only)
Added support for window management permission kind. (Runtime and SDK)
Reliability improvement. (Runtime-only)
1.0.1587.40
Release Date: February 15, 2023
NuGet package for WebView2 SDK 1.0.1587.40
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 110.0.1587.40 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Additional options used to create a WebView2 Environment to manage custom scheme registration:

1.0.1671-prerelease
Release Date: February 15, 2023
NuGet package for WebView2 SDK 1.0.1671-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 112.0.1671.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.

Previous name in 1619-prerelease:
 CoreWebView2ControllerOptions.LocaleRegion PropertyBug fixes
 Fixed a bug where WebView2 was not closing properly when a BeforeUnload event was received. (Runtime-only) (Issue #2677	)
 In the DownloadStarting event, the ResultFilePath previously wasn't showing the correct download location for UWP applications when the DownloadStarting event handler was attached. This has been fixed; the correct ResultFilePath is now shown.
Fixed a bug where System.ArgumentException was thrown when a call to the
HostObject method returns a non-generic task. (Issue #2787)
Fixed an issue in the SharedBuffer API where the stream object didn't work well with StreamWriter. (Runtime-only) (Issue #3108	)
 DOM speech-synthesis APIs, such as SpeechSynthesis.getVoices(), will now work in UWP apps. (Runtime-only)
	Fixed a crash that occurred on frame destruction. (Runtime-only) (Issue #3062	)
Fixed a bug where the app crashes when trying to call CreateWebResourceResponse with a null reason phrase. (Runtime-only)
The CoreWebView2.AddHostObjectToScript option chrome.webview.hostObjects.options.ignoreMemberNotFoundError now works in
non-English locales. (Runtime-only)
Fully enabled Open file dialog support for elevated apps on Windows 7.
Fixed a bug where owned windows were not appearing for UWP.
1.0.1518.46
Release Date: January 17, 2023
NuGet package for WebView2 SDK 1.0.1518.46
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 109.0.1518.46 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.

1.0.1619-prerelease
Release Date: January 19, 2023
NuGet package for WebView2 SDK 1.0.1619-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 111.0.1619.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 The Custom Scheme Registration API:

Bug fixes
Disabled Open link as Profile in the WebView2 context menu.
Fixed post data missing in form submit with Ctrl-click. (Issue #2652)
Fixed a bug where the user is not able to get the custom context menu on PDF
Viewer. (Issue #2607)
 Fixed a bug where the entire toolbar is blank when simultaneously hiding the
Bookmarks, Search, and PageSelector buttons. (Issue #2866)
 Fixed a bug where the app crashes when trying to move focus to WebView2 when it is disabled.
Fixed drag and drop within the WebView2 for composition-hosted WebViews.
Removed read-aloud icon in address bar in a WebView2 popup window.
Fixed unexpected items in the context menu of popup windows in WebView2.
1.0.1462.37
Release Date: December 12, 2022
NuGet package for WebView2 SDK 1.0.1462.37
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 108.0.1462.37 or higher.
Bug fixes
This WebView2 SDK release has the same bug fixes as Bug fixes for 1.0.1466-prerelease.
1.0.1549-prerelease
Release Date: December 12, 2022
NuGet package for WebView2 SDK 1.0.1549-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 110.0.1549.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.

Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 Added support for the Print API:

Bug fixes
 Fixed some nullptr issues where now some public APIs which take nullptr as input parameters do not crash the WebView2.
Disabled "Open link as Profile" in the WebView2 context menu.
Fixed bug where the whole tool bar will be blank when hiding Bookmarks, Search, and PageSelector buttons simultaneously. (Issue #2866)
Fix post data missing in form submit with control click. (Issue #2652)
Fixed a bug where the user is not able to get the custom context menu on PDF
Viewer. (Issue #2607)
 Fix drag/drop within the WebView2 for composition hosted WebViews.

Fixed a bug where the app crashes when trying to move focus to WebView2 when it is disabled.
Remove read aloud icon in address bar in a WebView2 popup window.
Fixed an issue where context menu shows unexpected items in WebView2 popup window.
1.0.1418.22
Release Date: October 31, 2022
NuGet package for WebView2 SDK 1.0.1418.22
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 107.0.1418.22 or higher.
Bug fixes
This WebView2 SDK release has the same bug fixes as Bug fixes for 1.0.1414-prerelease.
1.0.1466-prerelease
Release Date: October 31, 2022
NuGet package for WebView2 SDK 1.0.1466-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 109.0.1466.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.




Bug fixes for 1.0.1466-prerelease
 Fixed a bug in which the custom header title in print settings could be wrong.

 Fixed a bug in which the default footer URI in print settings is missing. (Issue
#2851)
 Fixed a bug that produces a null pointer exception that's related to print settings.
(Runtime-only) (Issue #2858)
Fixed a bug that reports navigation failure when redirecting to a server that has been configured with Client Certificate Authentication and when the WebResourceRequested event is subscribed to. (Runtime-only)
Fixed an AddHostObjectToScript bug in which, when JavaScript calls an async method and then a synchronous method, the async method call might fail.
1.0.1370.28
Release Date: October 11, 2022
NuGet package for WebView2 SDK 1.0.1370.28
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 106.0.1370.28 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.

1.0.1414-prerelease
Release Date: October 11, 2022
NuGet package for WebView2 SDK 1.0.1414-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 107.0.1414.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added support for the Print API:

Bug fixes for 1.0.1414-prerelease
 Removed three-dot menu with a broken link from the downloads page. (Runtimeonly) (Issue #2753)
 Fixed a bug in the WebView2 WinRT JS Projection tool (wv2winrt) where C++20 projects failed to compile. (Issue #2768)
Fixed a crash which could occur with the WebView2 WinRT API while closing down
WebView2 if you subscribed to any events, especially the
CoreWebView2.GetDevToolsEventReceiver event. (SDK-only)
Fixed a bug where it wasn't possible to dismiss the download popup after minimizing the window. (Runtime-only)
1.0.1343.22
Release Date: September 6, 2022
NuGet package for WebView2 SDK 1.0.1343.22
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 105.0.1343.22 or higher.
Bug fixes
This WebView2 SDK release has the same bug fixes as Bug fixes for 1.0.1369-prerelease.
1.0.1369-prerelease
Release Date: September 6, 2022
NuGet package for WebView2 SDK 1.0.1369-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 106.0.1369.0 or higher.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.

Bug fixes for 1.0.1369-prerelease
 Fixed a bug where WPF apps would crash when windows with WebView2 were closed. (Issue #640)
 Fixed a bug that produced simultaneous WebView creation failure. (Runtime-only) (Issue #2703)
 Fixed print settings paper size to support dimensions as small as 0.01 inches. (Runtime-only)
 Fixed a bug where the WebView2 print dialog reset the Scale setting to Fit to printable area every time. (Issue #2523)
 Fixed a bug in the wv2winrt tool where a WinMD file wasn't referenced in some projects.
1.0.1293.44
Release Date: August 8, 2022
NuGet package for WebView2 SDK 1.0.1293.44
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 104.0.1293.44 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.

1.0.1340-prerelease
Release Date: August 8, 2022

NuGet package for WebView2 SDK 1.0.1340-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 105.0.1340.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added support for WebResourceRequested for workers which allows setting filters in order to receive WebResourceRequested events for service workers, shared workers, and different origin iframes.
Added support for custom scheme registration which allows WebView2 apps to be able to handle WebResourceRequested event for requests with the specified scheme and be able to navigate the WebView2 control to the custom scheme.

Bug fixes
 Added the ability for developers to explicitly specify the path from which to load the WebView2Loader.dll. (Issue #767
 Added useful error messages when using CallDevToolsProtocolMethod. (Issue
#1609)
 Fixed a bug in finding and loading the WebView2Loader.dll in some .NET apps.
(Issue #2372)
 Fixed a bug where DownloadStarting event was not fired when retrying a download. (Issue #2489	)
Fixed an issue in service worker caching if the path was too long. (Issue #1900)
Improved performance for wv2winrt IMap and IMapView projections into JavaScript.
 Adding support for HWND_MESSAGE to be used as WebView2 parent window to support headless scenarios. (Issue #202)
Improved handling of running as admin user apps.
Fixed online/offline status and notifications when using WebView2 in UWP apps.
GDI scaling can now be enabled for WebView2. WebView2 will respect the GDI scaling setting of the hosting application without additional work needed from the app. (Issue #1700)
 Fixed a bug where focus is not returned to the application after closing the find bar for windowed mode. (Issue #1225)
1.0.1264.42
Release Date: July 4, 2022
NuGet package for WebView2 SDK 1.0.1264.42
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 103.0.1264.42 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Added ContextMenuRequestedAPI to enable host app to create or modify their own context menu.

1.0.1305-prerelease
Release Date: July 4, 2022
NuGet package for WebView2 SDK 1.0.1305-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 105.0.1305.0 or higher.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.

Bug fixes
Fixed regression where WebView2 would steal focus from the app when the WebView2 was made visible. (Issue #862)
1.0.1245.22
Release Date: June 14, 2022
NuGet package for WebView2 SDK 1.0.1245.22
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 102.0.1245.22 or higher.
There is no corresponding prerelease package.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 The Server Certificate API which provides an option to trust the server's TLS certificate at the application level. It renders the page without prompting the user about TLS or providing the ability to cancel the web request.
 The ClearBrowsingData API which allows developers to programmatically clear specific data types for a duration:
ClearBrowsingData
ClearBrowsingDataAll
ClearBrowsingDataInTimeRange
 The HttpStatusCode API which provides the HTTP status code for navigation requests in NavigationCompleted events.
Bug fixes
 Fixed an issue with the on-screen keyboard in which the keyboard doesn't reappear after it's closed by clicking the X button. Also fixed an issue in which the keyboard gets dismissed when users switch from one edit control to another within WebView2. (Issue #460)
Fixed an issue when using a proxy from AddHostObjectToScript in script. If you call setHostProperty and it failed, you could have received an internal error message
structure rather than a JavaScript Error object.
 Fixed regression where WebView2 would steal focus from the app when the
WebView2 was made visible. (Issue #862)
 Fixed a bug that caused increased memory usage with WebResourceRequested events using large data. (Issue #2171)
 Fixed StatusBarTextChanged regression. The StatusBarText API was made compatible with previous versions again. (Issue #2414
	 Better support for apps running as admin. (Issue #2356	)
1.0.1210.39
Release Date: May 9, 2022
NuGet package for WebView2 SDK 1.0.1210.39
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 101.0.1210.39 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
Support for multiple user profiles in WebView2.
Theming API which provides a way to customize the WebView2 color theme as light, dark, or system.
Default Download API which provides a way to customize the default download location.
1.0.1248-prerelease
Release Date: May 9, 2022
NuGet package for WebView2 SDK 1.0.1248-prelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 102.0.1248.0 or higher.
General features
 Added support for WinRT Object projection into JavaScript by adding WinRT JS
Projection tool (wv2winrt) in NuGet package. For instructions about using the
WinRT JS Projection tool see Call native-side WinRT code from web-side code.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 The Server Certificate API which provides an option to trust the server's TLS certificate at the application level and render the page without prompting the user about TLS or providing the ability to cancel the web request.
 The ClearBrowsingData API which allows developers to programmatically clear specific data types for a duration: clearBrowsingDataInTimeRange
clearBrowsingDataAll
Bug fixes
Fixed an unavoidable crash that occurred in the WPF control's OnWindowPositionChanged event. (Issue #1531)
Fixed the issue with
CoreWebView2EnvironmentOptions.ExclusiveUserDataFolderAccess not working properly in .NET SDK. (Issue #2363 )
 Fixed a runtime regression that caused some Office Add-ins which use host objects to crash during operations that previously worked. (Issue #2337)
 Fixed an issue where WebView2 content can become blurry when moving between monitors with different scaling.
Fixed a regression to make sure that WebView2 creation fails quickly with HRESULT_FROM_WIN32(ERROR_INVALID_STATE) instead of time out.
Fixed a bug where changes from Chromium broke WebView2 background color.
1.0.1185.39
Release Date: April 12, 2022
NuGet package for WebView2 SDK 1.0.1185.39
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 100.0.1185.39 or higher.
General features
 Renamed ICoreWebView2Certificate to ICoreWebView2ClientCertificate.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 The CallDevToolsProtocolMethodForSession API that supports sessionId for CDP method calls.
The StatusBarText API: add_StatusBarTextChanged get_StatusBarText
remove_StatusBarTextChanged
The AllowExternalDrop API that supports enable/disable for external drop operations.
The HiddenPdfToolbarItems API is available to customize PDF toolbar items.
The ExclusiveUserDataFolderAccess API allows control of whether or not other processes can create WebView2 from WebView2Environment created with the same user data folder and therefore sharing the same WebView browser process instance.
The permission requested support for iframes: add_PermissionRequested
remove_PermissionRequested
1.0.1222-prerelease
Release Date: April 12, 2022
NuGet package for WebView2 SDK 1.0.1222-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 102.0.1222.0 or higher.
Experimental APIs for 1.0.1222-prerelease
The following Experimental APIs have been added in this Prerelease SDK.
 Added the Server Certificate API which provides an option to trust the server's TLS certificate at the application level and render the page without prompting the user about TLS or providing the ability to cancel the web request.
 Added the Favicon API which provides a way to get the favicon when it changes or is set at a website.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Support for multiple user profiles in WebView2.
Theming API which provides a way to customize the WebView2 color theme as light, dark, or system.
Default Download API which provides a way to customize the default download location.
Bug fixes
 Fixed ZoomFactor issue that incorrectly sets ZoomFactor value to the maximum value when it is out of bounds.
 Fixed an issue in which WebView2 content can become blurry when moving between monitors with different scaling.
 Fixed a bug where MouseEvent.movementX and MouseEvent.movementY will always be
	0 in visual hosting mode. (Issue #2220	)
Fixed log in issue caused by a password regression in WebView2. (Issue #2291)
Fixed a failure caused when a user opens a new app window and the web page does not have a navigation entry assigned.
 Made a runtime change to fix a bug in WinUI 2 (UWP) in which owned windows were not showing up.
 Fixed ICoreWebView2Frame::PostWebMessage functionality after source update. (Issue
	#2267	)
1.0.1150.38
Release Date: March 10, 2022
NuGet package for WebView2 SDK 1.0.1150.38
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 99.0.1150.38 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 The BasicAuthentication API that enables developers to handle Basic HTTP Authentication request and response.
1.0.1189-prerelease
Release Date: March 10, 2022
NuGet package for WebView2 SDK 1.0.1189-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 100.0.1189.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added ContextMenuRequested API to enable host app to create or modify their own context menu.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 The CallDevToolsProtocolMethodForSession API that supports sessionId for CDP method calls.
The StatusBarText API: add_StatusBarTextChanged get_StatusBarText
remove_StatusBarTextChanged
The AllowExternalDrop API that supports enable/disable external drop.
The HiddenPdfToolbarItems API is available to customize the PDF toolbar items. The ExclusiveUserDataFolderAccess API allows control of whether or not other processes can create WebView2 using the same user data folder.
Bug fixes
Fixed a bug where WebView2 app gets stuck occasionally with UWP.
Fixed a bug where focus is not returned to the application after closing the Find bar for windowed mode.
 Fixed bug in which the DocumentTitleChanged event was not being raised for backward/forward navigation in single-page apps.
 Fixed bug in which the HistoryChanged event was not being raised for Iframe navigation.
1.0.1108.44
Release Date: February 6, 2022
NuGet package for WebView2 SDK 1.0.1108.44
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 98.0.1108.44 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 The AdditionalAllowedFrameAncestors API that enable developers to provide additional allowed frame ancestors.
 The ProcessInfo APIs provide more information about WebView2 processes and process collections.
New APIs for iframes: add_NavigationStarting remove_NavigationStarting add_ContentLoading remove_ContentLoading add_NavigationCompleted remove_NavigationCompleted add_DOMContentLoaded remove_DOMContentLoaded
ExecuteScript
PostWebMessageAsJson PostWebMessageAsString add_WebMessageReceived
remove_WebMessageReceived
1.0.1158-prerelease
Release Date: February 6, 2022
NuGet package for WebView2 SDK 1.0.1158-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 100.0.1158.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added Status bar API to provide info when webiew is showing status message, URL, or empty string.
Added CDP API to provide possibility for developers have multiple DevToolsProtocol targets in WebView2.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Rename ICoreWebView2ClientCertificate to ICoreWebView2Certificate.
New APIs for iframes: add_PermissionRequested remove_PermissionRequested
Bug fixes
 Fixed an issue causing erroneous warnings in the Visual Studio Error List window. (Issue #1722)
 Fixed a bug where NewWindowRequested was not getting raised when opening PDF downloads.

Resolved a bug in WinUI 3 where select dropdowns would not show up. (Issue
#1693)
Added the ability to toggle WebView2 mute state, even when there is no audio playing.
1.0.1072.54
Release Date: January 13, 2022
NuGet package for WebView2 SDK 1.0.1072.54
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 97.0.1072.54 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
The Media API that enables developers to mute/unmute media within WebView2.
The Download Positioning and Anchoring API enables:
Changing the position of the download dialog, relative to the WebView2 bounds. You can anchor the download dialog to the Download button, instead of the default position, which is the top-right corner.
Programmatically open and close the default download dialog.
Making changes in response to the dialog opening and closing.
1.0.1133-prerelease
Release Date: January 13, 2022
NuGet package for WebView2 SDK 1.0.1133-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 99.0.1133.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
Added support for theming (overall color scheme - light, dark, system) of WebView2.
Added a way to set default download path.
Added support for clearing browser data.
Added permission requested support for iframes.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
New APIs for iframes:
PostWebMessageAsJson PostWebMessageAsString add_WebMessageReceived remove_WebMessageReceived
The ProcessInfo APIs provides more information about WebView2 processes and process collections.
 The HTTP Authentication API.
Bug fixes
Fixed a bug that prevented Set-Cookies header from showing up in the WebResourceResponseReceived event.
Resolved a bug where pop-ups and owned windows would jump to a different position before closing instead of closing along with the app window. This bug was only active for a very short window of time.
Fixed focus issue after closing file picker dialog.
Fixed bug where Find on Page UI visibility did not change with WebView2 visibility.
Fixed bug where GetAvailableBrowserVersionString() fails to locate/load
	WebView2Loader.dll. (Issue #1236	)
Fixed size and position of the new window created with window.open when
	NewWindowRequested event was not handled. (Issue #1343	)
Fixed bug where mini menu was still displaying on selected text when context menus were disabled. This change is Runtime-specific. (Issue #1345)
Fixed bug where focus returns to wrong location after switching apps in WinForms.
1.0.1083-prerelease
Release Date: November 29, 2021
NuGet package for WebView2 SDK 1.0.1083-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 97.0.1083.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
Added the following APIs for iframes in WebView2:
PostWebMessageAsJson PostWebMessageAsString add_WebMessageReceived remove_WebMessageReceived
 Added ProcessInfo APIs to provide more information about WebView2 processes and process collections.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
The Media API that enables developers to mute/unmute media within WebView2.
The Download Positioning and Anchoring API. This API enables:
Changing the position of the download dialog, relative to the WebView2 bounds. You can anchor the download dialog to the Download button, instead of the default position, which is the top-right corner.
Programmatically opening and closing the default download dialog.
Making changes in response to the dialog opening and closing.
Bug fixes

Fixed a focus issue after closing the file picker dialog.
Fixed a bug where WebView2 doesn't receive spatial input on initial launch.
Fixed an issue that prevented single sign-on in WebView2.
Resolved a bug where the download dialog was not moving with the window on WPF and WinForms.
 Updated compatible command line check to prevent needing a version check for optional switches.
 Fixed an error that was causing "Microsoft Edge" branding to appear in the accessibility tree.
1.0.1054.31
Release Date: November 29, 2021
NuGet package for WebView2 SDK 1.0.1054.31
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 96.0.1054.31 or higher.
Bug fixes
General reliability fixes.
Turned off the Control-flow Enforcement Technology (CET) Shadow Stack feature for v96 WebView2 Runtime.
 Fixed an issue that was causing slow startup times when launching in a .NET singlefile application. (Issue #1909)
 Fixed a crash caused by Microsoft Edge browser policies getting incorrectly applied to WebView2 as well. (Issue #1860)
 Fixed a crash that occurred when a pop-up window with a download dialog was closed. (Issue #1765) & (Issue #1723)
1.0.1056-prerelease
Release Date: October 29, 2021
NuGet package for WebView2 SDK 1.0.1056-prerelease
For full API compatibility, this Prerelease version of the WebView2 SDK requires the WebView2 Runtime that ships with Microsoft Edge version 97.0.1056.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
The Download Positioning and Anchoring API. This API enables:
Changing the position of the download dialog, relative to the WebView2 bounds. You can anchor the download dialog to the Download button, instead of the default position, which is the top-right corner.
Programmatically opening and closing the default download dialog.
Making changes in response to the dialog opening and closing.
The HTTP Authentication API.
Bug fixes
General reliability improvements.
The real process exit code is now provided as ExitCode in
ICoreWebView2ProcessFailedEventArgs2 for
COREWEBVIEW2_PROCESS_FAILED_KIND_BROWSER_PROCESS_EXITED process failure.
The --js-flags switch is now honored in the AdditionalBrowserArguments that are provided in CoreWebView2EnvironmentOptions.
Fixed access to the name property for host objects in JavaScript. (Issue #641)
Fixed an InvalidCastException in the WPF control when it's implicitly initialized prior to the event loop starting. (Issue #1577)
1.0.1020.30
Release Date: October 25, 2021
NuGet package for WebView2 SDK 1.0.1020.30
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 95.0.1020.30 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 PrintToPdf API.
Bug fixes
 Updated EnsureCoreWebView2Async to not throw exceptions when the WPF source property is set. (Issue #1781	)
 Fixed a bug where WebView2 crashes after interacting with multiple windows that show a download UI. (Issue #1723)
1.0.992.28
Release Date: September 27, 2021
NuGet package for WebView2 SDK 1.0.992.28
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 94.0.992.31 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
OpenTaskManagerWindow API.
isSwipeNavigationEnabled property.
BrowserProcessExited API. get_Name property on ICoreWebView2NewWindowRequestedEventArgs2 interface.
Bug fixes
Fixed missing WebView2 DLLs (which led to initialization failure) when
PlatformTarget isn't set in the user's .NET project. (Issue #1061)
1.0.1018-prerelease
Release Date: September 20, 2021
NuGet package for WebView2 SDK 1.0.1018-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 95.0.1018.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added a media API that enables developers to mute/unmute media within WebView2.
 Added support for multiple user profiles with WebView2.
Bug fixes
 Fixed a bug where WebView2 stops rendering when the app is spanning monitors and the monitor scale changes.
 Fixed a bug where closing the download UI crashes WebView2 when multiple download windows are open. (Issue #1723)
 Fixed a build/initialization error when PlatformTarget isn't set in the user's .NET project. (Issue #730 and Issue #1548)
1.0.1010-prerelease
Release Date: September 14, 2021
NuGet package for WebView2 SDK 1.0.1010-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 95.0.1010.0 or higher.
General features
WebView2 performance improvements.
Reliability fixes. (Issue #1605 and Issue #1678)
Added performance improvements during startup and when the host app is in the foreground.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
Removed silent failures by using EnsureCoreWebView2Async, which throws an
ArgumentException when called multiple times with incompatible parameters.
Changed default handling of the UserDataFolder property in the environment object.
Added MemoryUsageTargetLevel which allows developers to specify memory consumption levels, such as low, or normal.
Added ExclusiveUserDataFolderAccess to environment options.
Added HiddenPdfToolbarItems to customize PDF toolbar items.
Added PrintToPdf, which allows printing the current page to PDF. Also, you can use optional custom settings with this new API.
 Added AllowExternalDrop property to allow the dragging and dropping of objects from outside a WebView2 control into it.
 Added ContextMenu APIs which allow customization of the WebView2 context menu.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
IsSwipeNavigationEnabled
BrowserProcessExited
OpenBrowserTaskManager
Bug fixes
Improved how host objects exceptions are caught in your JavaScript code.
Replaced WebView2 icon with a generic icon in DevTools windows.
Turn on the Tab screen sharing option when MediaDevices.getDisplayMedia() is used. (Issue #1566)
 Fixed a bug in the Client Certificate API, when the correct certificate was not selected. This is a Runtime change. (Issue #1666)
 Fixed bug where window.chrome.webview was unavailable in new windows in the same parent domain. This change is Runtime-specific. (Issue #1144)
 Fixed a bug where dropdown menus or lists were displayed behind the window that has focus. (Issue #411	)
Fixed focus issues when using put_IsVisible(false). (Issue #238)
Fixed a bug to apply SetVirtualHostNameToFolderMapping to pop-up windows.
Fixed bugs where an IDispatch objects were returned as IUnknown.
1.0.961.33
Release Date: September 8, 2021
NuGet package for WebView2 SDK 1.0.961.33
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 93.0.961.44 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
 Client Certificate API.
Bug fixes
 Fixed a bug that caused ERR_SSL_CLIENT_AUTH_CERT_NEEDED errors. This is a Runtime change.
 Fixed a bug that special browser keys like Refresh, Home, Back, and so on can't be turned off using AreBrowserAcceleratorKeysEnabled. This change is Runtimespecific.
Fixed a bug where the transparent background color isn't rendered.
Fixed a bug that caused a white flicker when loading WebView2.
Fixed a bug in WebView2 .NET controls where WebView2 windows were blank when created in the background. (Issue #1077)
 Fixed a bug where settings were not updated when the user navigated to or a new window displayed about:blank pages. This is a Runtime change.
1.0.955-prerelease
Release Date: July 26, 2021
NuGet package for WebView2 SDK 1.0.955-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 93.0.967.0 or higher.
General features
WebView2 performance improvements.
Added partial Event Tracing for Windows (ETW) support.
Removed Microsoft branding from edge://history.
New default Download UI.
Experimental APIs
Added OpenTaskManagerWindow to launch a WebView2 browser task manager.
Added NewWindowRequestedEventArgs.
Added support for virtual host name mapping to work with service workers.
Added HiddenPdfToolbarItems to customize the PDF toolbar items.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
 add_ClientCertificateRequested
Bug fixes
 Fixed bug that broke the edge://downloads and edge://history pages. This change is Runtime-specific.
Fixed bugs to improve reliability in the WebView2Loader.dll.
Fixed bug in which NewWindowRequested event handler launched two windows when handling links that use target=_blank.
Fixed a bug in WebView2 visual hosting that flickered before startup.
Fixed bug when add_WebResourceRequested didn't work on WebView2 controls created using add_NewWindowRequested. (Issue #616)
 Allow the host app to set foreground on a different application in response to events including NavigationStarting, AddHostObjectToScript methods, WebMessageReceived, and NewWindowRequested. (Issue #1092 )
Fix bug to trigger the PermissionRequested event for the microphone. This change is Runtime-specific.(Issue #1462	)
 Fixed bug when ExecuteScriptAsync blocked after several successful runs. This change is Runtime-specific. (Issue #1348	)
Fixed bug preventing non-ASCII file names from being used in ResultFilePath in DownloadStartingEventArgs. (Issue #1428)
Fixed bug where the title bar on the default pop-up wasn't displayed completely. This change is Runtime-specific. (Issue #1016)
.NET
Bug fixes
 Fixed an issue in WebView2 .NET API reference documentation that caused only the first exception to be displayed.
 .NET core libraries are now built in release mode. To debug, ensure you clear the Just my code checkbox.
 Fixed a bug that crashed WebView2 on forms with child forms. The child form, with the find in page bar open, caused WebView2 to crash when the child form was closed. (Issue #1097)
1.0.902.49
Release Date: July 26, 2021
NuGet package for WebView2 SDK 1.0.902.49
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 92.0.902.49 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
add_FrameCreated. get_IsGeneralAutofillEnabled. get_IsPinchZoomEnabled.
The Download APIs.
AddHostObjectToScriptWithOrigins API with iframe element support.
Bug fixes
 Fix bug that broke the IsBuiltInErrorPageEnabled property, which turned off the error page that's displayed when there's a navigation failure or render process failure. This change is Runtime-specific. (Issue #634	)
Fixed an issue where WebView2 controls took focus away from the user's focus.
Fixed bug when AddScriptToExecuteOnDocumentCreated didn't work on child windows. (Issue #935	)
Fixed a bug that caused inactive tabs to be automatically discarded. (Issue #637)
Fixed a bug when a navigation event was interrupted by another navigation event resulting in the Navigation ID of NavigationCompleted events to be incorrect. (Issue
#1142)
1.0.902-prerelease
Release Date: June 1, 2021
NuGet package for WebView2 SDK 1.0.902-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 92.0.902.0 or higher.
General features
 Improved WebView2 startup performance and disk footprint.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added IsSwipeNavigationEnabled property to enable or disable the ability of the end user to use swiping gesture on touch input-enabled devices to navigate in WebView2.
Added BrowserProcessExited event.
Added add_ClientCertificateRequested API. It allows showing a client certificate dialog prompt if desired and enables access to required metadata to replace default client certificate dialog prompt.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Download API.
PinchZoom API.
AddFrameCreated.
AddHostObjectToScriptWithOrigins API promoted to Stable with iframe element support.


Bug fixes
 Fix a bug where mouse left click doesn't dismiss context menu. This change is Runtime-specific.
 Fixed a bug where WebView2 creation fails when exe files for apps sharing the same user data folder have inconsistent version info.
 Fixed a bug where special browser keys such as Refresh, Home, and Back can't be disabled by AreBrowserAcceleratorKeysEnabled. This change is Runtime-specific.
 Fixed a bug in WebView2 .NET controls, where WebView2 windows are blank when created in the background. (Issue #1077)
 Dismissing a file picker dialog by pressing Enter or Esc no longer crashes WPF applications using WebView2 control. (Issue #1099)
 Fixed a bug that AllowSingleSignOnUsingOSPrimaryAccount doesn't work properly with WebView2 when a WebResourceRequested event handler is attached. This change is Runtime-specific. (Issue #1183	)
 Downloading a file no longer breaks WebView2 DefaultBackgroundColor transparency. This change is Runtime-specific. (Issue #1108	)
 Removed screen sharing media picker message that contains Microsoft branding. (Issue #940)
 Fixed a bug in WebView2 WinForm control where hiding the parent form doesn't hide the WebView2 control. (Issue #828 and Issue #1079)
 Added static WS_CLIPCHILDREN style to WebView2's WPF windows. (Issue #1013).
 Fixed a bug where right-clicking a link crashes the WebView2 host app. This change is Runtime-specific.
 Fixed a reliability bug that could crash the host app process when moving to a newer Edge WebView2 Runtime version.
 DEPRECATION: Officially deprecated the DefaultBackgroundColor API for Windows
7.
.NET
Bug fixes
 Fixed a bug in WebView2 WinForm control where WebView2 window visibility isn't updated properly after parent window is disposed. (Issue #1282 and Issue
#828)
 Fixed a bug in WebView2 WPF control that Source property binding in WPF
OneWay binding mode isn't working properly. (Issue #619 and Issue #608)
1.0.864.35
Release Date: May 31, 2021
NuGet package for WebView2 SDK 1.0.864.35
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 91.0.864.35 or higher.
Bug fixes
 Fixed a reliability bug that could crash the host app process when moving to a newer Edge WebView2 Runtime version.
 Fixed a bug that prevented memory purge in some situations. This change is Runtime-specific.
 Fixed error in 818 SDK release package where project couldn't find the WebView2.h file. (Issue #1209).
 Fixed a bug which caused WebResourceRequested event to be dropped for some requests with binary bodies.
 Improve NewWindowRequested documentation. (Issue #448).
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
UserAgent API
AreBrowserkeysenabled
.NET
Bug fixes
Fixed a bug in WebView2 .NET controls that first header is missing when iterating CoreWebView2WebResourceRequest headers collection. (Issue #1123).
1.0.865-prerelease
Release Date: April 26, 2021
NuGet package for WebView2 SDK 1.0.865-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 91.0.865.0 or higher.
Experimental APIs
The following Experimental APIs have been added in this Prerelease SDK.
 Added IsPinchZoomEnabled setting. It allows you to turn on or off page scale zoom control in a setting.
 Added Custom add_DownloadStarting API. It allows you to block downloads, save to a different path, and access the required metadata to build custom download UI.
Added iframe element support from AddHostObjectToScriptWithOrigins.
Added sample code for WPF sample app to use the API to turn off browser function keys.
 Added the UpdateRuntime API, to easily update the WebView2 Runtime.
Bug fixes
 Fixed handler for a Chromium DevTools Protocol message with POST binary data in WebView2.
Turned off the OpenSaveAsAwareness download UI, because it included links to edge://settings. (Issue #1120	).
Removed branding from screen share dialog. (Issue #940).
 Fixed bug where the SetWindowDisplayAffinity function broke WebView2 when it stopped screen capture in an WebView2 app. (Issue #841).
 Fixed bug for composition hosting where mouse input stopped working if any pen input was sent to WebView2.
 Fixed bug that broke mouse input after any pen input. This change is Runtimespecific.
.NET
Experimental APIs
The following Experimental APIs for .NET have been added in this Prerelease SDK.
Added WebView2 designer tool to WPF Toolbox. (Issue #210).
Added WebView2 UI element in .NET Designer Mode.
Bug fixes
 Improved COM Exception descriptions by wrapping each in a more detailed .NET exception. (Issue #338). This change is Runtime-specific.
 Fixed bug caused when you select Tab to shift focus caused WebView2 control to crash in Microsoft Visual Studio Tools for Office. (Issue #589 and Issue #933).
This change is Runtime-specific.
Improved .NET framework loader down level to be more robust. (Issue #946)
Fixed bug that caused crash when you try to refresh before first navigation completed. (Issue #1011)
Fixed initialization so navigation occurs during
CoreWebView2InitializationCompleted. (Issue #1050)
Improved .NET browser process crash error handling. You can now recreate controls after you handle a ProcessFailed event, without a crash. (Issue #996)
1.0.818.41
Release Date: April 21, 2021
NuGet package for WebView2 SDK 1.0.818.41
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 90.0.818.41 or higher.
Features
 Extended the ProcessFailed event. It now raises for non-renderer child processes and frame renderers.
Added iframe element support for AddScriptToExecuteOnDocumentCreated. Improved WebView2 code to be more resilient to .exe application files with malformatted version information. (Issue #850 ).
 Removed --winhttp-proxy-resolver from WebView2 browser process commandline, turned on other proxy command-line options for WebView2.
1.0.824-prerelease
Release Date: March 8, 2021
NuGet package for WebView2 SDK 1.0.824-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 91.0.824.0 or higher.
Features
 Extended the ProcessFailed event. It now raises for non-renderer child processes and frame renderers.
 Added experimental AreBrowserAcceleratorKeysEnabled setting. You can prevent the browser from responding to keyboard shortcuts related to navigation, printing, saving, and other browser-specific functions.
 Added iframe element support for AddScriptToExecuteOnDocumentCreated.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
UserAgent.
Rasterization Scale APIs:
RasterizationScale property
RasterizationScaleChanged event
BoundsMode property
ShouldDetectMonitorScaleChanges property
Bug fixes
 Expanded supported C++ and .NET project types such as MFC and ATL. (Issue #506, Issue #669, and Issue #851).
Fixed a bug that Evergreen WebView2 Runtime leaks Inbound firewall entry.
Fixed setting Response during WebResourceRequested event. (Issue #568).
Fixed a bug that navigating to edge:// causes browser process to exit. (Issue
#604).
 Fixed a bug that limited WebView2 bounds to size of screen in Visual Hosting mode.
1.0.774.44
Release Date: March 8, 2021
NuGet package for WebView2 SDK 1.0.774.44
For full API compatibility, this Release version of the WebView2 SDK requires WebView2 Runtime version 89.0.774.44 or higher.
Features
Turned off various Microsoft Edge browser services in WebView2.
Visual Hosting APIs are now Generally Available.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
DPI support related APIs
Visual hosting APIs
SetVirtualHostNameToFolderMapping
TrySuspend and Resume
DefaultBackgroundColor
Bug fixes
 Fixed a bug that limited WebView2 bounds to size of screen in Visual Hosting mode.
1.0.790-prerelease
Release Date: February 10, 2021
NuGet package for WebView2 SDK 1.0.790-prerelease
This prerelease version of the WebView2 SDK requires Microsoft Edge version 86.0.616.0 or higher.
Breaking changes


Features
Added TrySuspend and Resume method to suspend and resume WebViews. Added SetVirtualHostNameToFolderMapping method that maps a virtual host name to a directory path. (Issue #37, Issue #161, and Issue #212).
 Added the DefaultBackgroundColor property to set the color and alpha-channel of the background. (Issue #414	).
	Added the UserAgent property to get or set the User Agent. (Issue #122	).
Replaced the CreateCookieWithCookie method with the CopyCookie method.
Added visual hosting support using the ICoreWebView2CompositionController interface, which is created using the new
CreateCoreWebView2CompositionController method from ICoreWebView2Environment3.
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
Visual Hosting APIs
SetVirtualHostNameToFolderMapping
Bug fixes
Turned off the Microsoft Edge Shopping feature in WebView2.
Turned off the context menu in the PDF viewer when
AreDefaultContextMenusEnabled is false. (Issue #605
Fixed a bug that returned E_NOINTERFACE when querying ICoreWebView2 for ICoreWebView2Experimental. (Issue #691	).
Fixed a bug that allowed navigation with malformed URIs when
CoreWebView2NavigationStartingEventArgs.Cancel is set to false. (Issue #400).
Fixed a bug that blocked window.print() on pop-up windows with event handlers attached to NewWindowRequested events. (Issue #409).
 Fixed Dynamic DPI issue when moving apps between different monitors. (Issue
#58)
 Improved the HRESULT instances passed by
ICoreWebView2WebResourceResponseViewGetContentCompletedHandler::Invoke.
Turned off autofill manage button. (Issue #585
Fixed Visual Studio crashes while you run WebView2.Dispose when hosted in multiple windows. (Issue #816) and Issue #442
Fixed bug to display WebView2 control in Visual Studio Toolbox. (Issue #210).
Reduced high CPU usage issues. (Issue #878).
Fixed issues with deprecated 1.0.781-prerelease package. (Issue #875 and Issue
#878).
.NET
Bug fixes
 Fixed bug that crashed WebView2 apps that use the WPF SDK. The crash occurred when pressing F4 to close a window. (Issue #399).
 The WebView2 initialization screen is now transparent, instead of gray. (Issue
#196).
1.0.705.50
Release Date: January 25, 2021
NuGet package for WebView2 SDK 1.0.705.50
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
Promotions
The following APIs have been promoted to Stable and are now included in this Release SDK.
WebResourceResponseReceived API
NavigateWithWebResourceRequest API
Cookie management API
DOMContentLoaded API
Environment property
1.0.721-prerelease
Release Date: December 8, 2020
NuGet package for WebView2 SDK 1.0.721-prerelease
This prerelease version of the WebView2 SDK requires Microsoft Edge version 86.0.616.0 or higher.
Breaking changes

Features
 Added WebView2 Group Policies. For best practices, see group policies for WebView2.
Added RasterizationScale property to change the DPI scale for WebView2 content and UI pop-ups, and associated RasterizationScaleChanged event. Added ShouldDetectMonitorScaleChanges property to automatically update RasterizationScale property if needed.
Added BoundsMode property to specify that the bounds are logic pixels and allow WebView2 to use RasterizationScale for WebView2 pixel display, and
WebView2 use the RasterizationScale with the Bounds to get the physical size.
 Updated NewWindowRequested event to handle Ctrl+click and Shift+click. (Issue #168	 and Issue #371	).
Promotions
The following APIs have been promoted from Experimental to Stable in this Prerelease SDK.
WebResourceResponseReceived API
NavigateWithWebResourceRequest API
Cookie management API
DOMContentLoaded API
Environment property
.NET
Features
Turned on WinForms designer in .NET Core 3.1+ and .NET 5.
Improved .NET cookie management. (Issue #611).
Replaced CoreWebView2Ready with CoreWebView2InitializationCompleted.
Bug fixes
 Added AcceleratorKeyPressed event to support AcceleratorKey select in WebView2. (Issue #288).
 Removed unnecessary files from being output to WebView2 folders. (Issue
#461).
 Improved host object API. (Issue #335 and Issue #525).
1.0.664.37
Release Date: November 20, 2020
NuGet package for WebView2 SDK 1.0.664.37
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
General Availability

Features
.NET WPF/WinForms WebView2 is now Generally Available (GA).
Fixed Distribution (Bring-your-own) mode reached GA.
.NET
Bug fixes
CoreWebView2NewWindowRequestedEventArgs.Handled prevents new window from being opened. (Issue #549	 and Issue #560	).
1.0.674-prerelease
Release Date: October 19, 2020
NuGet package for WebView2 SDK 1.0.674-prerelease
This prerelease version of the WebView2 SDK requires WebView2 Runtime version
86.0.616.0 or higher.
General features
 Added NavigateWithWebResourceRequest method to provide post data or other request headers during navigation.
 Added DOMContentLoaded event that runs when the initial HTML document is loaded and parsed.
 Added the Environment property on WebView2. This property exposes the WebView2 environment where an instance of WebView2 was created.
 Added cookie management APIs that allow developers to authenticate the
WebView2 session, or retrieve cookies from WebView2 to authenticate other tools.
The WebView2 team plans to make language or framework-specific improvements.
See API Review: Cookie Management.
 Updated the WebResourceResponseReceived event, and added immutable
WebResourceResponseView and
WebResourceResponseReceivedEventArgs::PopulateResponseContent to WebResourceResponseView::GetContent.
Turned off Microsoft Defender Application Guard (WDAG) in WebView2.
Added SystemCursorId for Visual Hosting.
Added bug fixed for Input Method in Visual Hosting.
Removed include requirement for version.lib when using WebView2 static library.
.NET
Updated CoreWebView2 class to expose the CoreWebView2Environment variable.
Changed implementations of custom EventArgs classes in
Microsoft.Web.WebView2.Core namespace to subclasses of System.EventArgs or
System.ComponentModel.CancelEventArgs. (Issue #250)
Added support for CoreWebView2CreationProperties in WinForms. (Issue #204).
Added WebResourceRequested .NET APIs. (Issue #219).
Updated WinForms Designer Source property to default or reset to null. (Issue
#177).
 Updated WebView2 bounds in WebView2.Init() to support DPI modes that are less than 100%. (Issue #432).
 Updated BuildWindowCore and DestroyWindowCore to increase robustness. (Issue #382).
 Updated .NET Loader base to load on process bit instead of operating system architecture. (Issue #431	).
 Renamed EdgeNotFoundException to WebView2RuntimeNotFoundException.
1.0.622.22
Release Date: October 19, 2020
NuGet package for WebView2 SDK 1.0.622.22
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
The Evergreen WebView2 Runtime and installer are GA. The bootstrapper, the downlink link for the Bootstrapper, and the Standalone Installer for the Evergreen WebView2 Runtime are available on Microsoft Edge WebView2. Sample code for the installation workflow is also available in the WebView2Samples repo.
For more information about the Runtime, Evergreen distribution, and Fixed Version distribution, see Distribute your app and the WebView2 Runtime.
0.9.622.11
Release Date: September 10, 2020
NuGet package for WebView2 SDK 0.9.622.11
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
Added AllowSingleSignOnUsingOSPrimaryAccount property on WebView2 environment options to turn on conditional access for WebView2.
 Updated ICoreWebView2NewWindowRequestedEventArgs to include WindowFeatures property, and the associated ICoreWebView2WindowFeatures. (Issue #293).
Updated System.Windows.Rect to use System.Drawing.Rectangle instead of System.Windows.Rect (Issue #235	).
Updated NewWindowRequested event to handle window.open() request without parameters. (Issue #293).
 AdditionalBrowserArguments specified with ICoreWebView2EnvironmentOptions aren't overridden with environment variables or registry values. See CreateCoreWebView2EnvironmentWithOptions.
0.9.579
Release Date: July 20, 2020
NuGet package for WebView2 SDK 0.9.579
This version of the WebView2 SDK requires Microsoft Edge version 86.0.579.0 or higher.
All platforms
Added experimental IsSingleSignOnUsingOSPrimaryAccountEnabled property on WebView2 environment options to turn on conditional access for WebView2.
 Added experimental WebResourceResponseReceived event that runs after the WebView2 receives and processes the response from a WebResource request.
Authentication headers, if any, are included in the response object.
.NET
 Improved WPF focus handling. (Issue #185).
 Added ZoomFactor property on WPF Webview2 Controller.
0.9.538
Release Date: June 8, 2020
NuGet package for WebView2 SDK 0.9.538
This version of the WebView2 SDK requires Microsoft Edge version 85.0.538.0 or higher.
All platforms
 Dropping support for WebView2 SDK Version 0.8.149. WebView2 recommends staying up to date with the latest version of WebView2.
 Updated group policy to account for when the profile path of the Microsoft Edge browser is modified (#179).
Win32 C/C++
 Added
ICoreWebView2ExperimentalNewWindowRequestedEventArgs::get_WindowFeatur es, which fires when window.open() is run and associated with
ICoreWebView2ExperimentalWindowFeatures (#70
Updated AddHostObjectToScript. The original host object serializer markers are now set to the proxy objects. Then host object serializer markers are serialized back as a host object when passed as a parameter in the JavaScript callback (#148).
.NET (0.9.538 prerelease)
 Released WinForms and WPF WebView2API Samples, which are comprehensive guides of the WebView2 SDK. See Samples Repo.

0.9.515-prerelease
Release Date: May 14, 2020
NuGet package for WebView2 SDK 0.9.515-prerelease
This prerelease version of the WebView2 SDK requires Microsoft Edge version 84.0.515.0 or higher.
For more information about building WPF apps, see Get started with WebView2 in WPF apps and the WebView2 WPF Reference for WPF-specific APIs.
 For more information about building Windows Forms apps, see Get started with
WebView2 in WinForms apps and the WebView2 Windows Forms Reference for Windows Forms specific APIs.

Known Issues: The WebView2 team is aware of some issues in the prerelease that are being resolved in future releases.
DPI Awareness: WebView2 for WPF is currently not DPI aware. When initializing WebView2 on high DPI monitors, there is a known issue where the WebView2 control at first initializes as a fraction of the window until the window is resized.
WPF Designer: The WPF designer isn't currently supported. Add the WebView2 control in your app by directly modifying the appropriate XAML in a text editor.
0.9.488
Release Date: April 20, 2020
NuGet package for WebView2 SDK 0.9.488
This version of the WebView2 SDK requires Microsoft Edge version 84.0.488.0 or higher.

Added FrameNavigationCompleted event. Now, when an iframe element completes navigation, an event is run and returns the success of the navigation and the navigation ID.
 Added ICoreWebView2EnvironmentOptions interface, which can be used to determine the version of the Evergreen WebView2 Runtime targeted by your app.
 Added IsBuiltInErrorPageEnabled setting. Now, you can choose to turn on or off the built-in error webpage for navigation failure and render process failure.
 Updated Remote Object Injection to support .NET IDispatch implementations (#113).
 Updated NewWindowRequested event to handle requests from context menus (#108).
 Released the first separate WebView2 prerelease package where you can access visual hosting APIs. The WebView2 team updated APISample to include the new experimental APIs.
 Added ICoreWebView2ExperimentalCompositionController interface, to connect to a composition tree and provide input for the WebView2 control.  Added ICoreWebView2ExperimentalPointerInfo, which contains all the information from a POINTER_INFO. This object is passed to SendPointerInput to inject pointer input into the WebView2.
 Added ICoreWebView2ExperimentalCursorChangedEventHandler, which tells the app when the mouse cursor over the WebView2 control should be changed. When mouse is over a text box in the WebView2, the cursor changes from the arrow to the selector. The cursor property on the CompositionController tells the app what the mouse cursor should currently be for the WebView2.
0.9.430
NuGet package for WebView2 SDK 0.9.430
This version of the WebView2 SDK requires Microsoft Edge version 82.0.430.0 or higher.
The WebView2 SDK is the official Win32 C++ Beta version, which incorporates several feature requests from feedback. The WebView2 team tries to limit the number of releases with breaking changes. As general availability approaches, several major breaking changes are incorporated in the Beta release.
） Important
Breaking Change: As the final release approaches the WebView2 team renamed the prefix IWebView2WebView to ICoreWebView2 in order to make sure the WebView2 API aligns with the Windows API naming convention. Additionally, in order to leverage the WebView2 SDK from UI frameworks, the WebView2 team separated ICoreWebView2 into ICoreWebView2 and ICoreWebView2Host. ICoreWebView2Host supports resizing, showing-andhiding, focusing, and other functionality related to windowing and composition. ICoreWebView2 supports all other WebView2 functionality. To learn more about incorporating the changes, see the WebView2 pull request in the WebView2 APISample project.
Added support for Windows Server 2008 R2, Windows Server 2012, Windows Server 2012 R2, and Windows Server 2016.
 Added NotifyParentWindowPositionChanged for the status bar to follow the window in windowed mode. Also, implement the change in windowless mode in order for accessibility features to work.
 Added AreRemoteObjectsAllowed setting to globally control whether a webpage can be accessed by any remote objects. By default, AreRemoteObjectsAllowed is turned on, so remote objects added by AddRemoteObject are accessible from the webpage. When AreRemoteObjectsAllowed is turned off, the objects aren't accessible from the webpage. Changes are applied on the next navigation event.
 Added IsZoomControlEnabled setting to prevent users from impacting the zoom of the WebView2 control using Ctrl++ and Ctrl+- (or Ctrl+ mouse wheel). Zoom can still be set using put_ZoomFactor when the setting is turned off.
 Changed ZoomFactor to only apply to the current WebView2 control. Zoom changes to the current WebView2 control don't affect other WebViews that you navigated to using the same site of origin. See get_ZoomFactor.
Hid ZoomView UI for WebView2 control (#95).
Added SetBoundsAndZoomFactor. Now, you can set the zoom factor and bounds of a WebView2 control at the same time.
Added WindowCloseRequested event. See add_WindowCloseRequested (#119).
Added support for the beforeunload dialog type for JavaScript dialog events and added CORE_WEBVIEW2_SCRIPT_DIALOG_KIND_BEFOREUNLOAD enum entry.
 Added GetHeaders to HttpRequestHeaders, GetHeader to HttpResponseHeaders, and get_HasCurrentHeader property to HttpHeadersCollectionIterator.

0.8.355
Release Date: December 9, 2019
NuGet package for WebView2 SDK 0.8.355
This version of the WebView2 SDK requires Microsoft Edge version 80.0.355.0 or higher.
 Released WebView2API Sample, a comprehensive guide of the WebView2 SDK. See API Sample.
	Added IME support for all languages besides English (#30	).
Updated the API surface of the WebResourceRequested event in response to bug reports. Simultaneously specifying a filter and an event on creation is now deprecated. To create a web resource requested event, use add_WebResourceRequested to add the event and AddWebResourceRequestedFilter to add a filter.
RemoveWebResourceRequestedFilter removes the filter (#36) (#74).
） Important
Breaking Change: Modified fullscreen behavior. Deprecated
IsFullScreenAllowed. Now, by default, if an element in a WebView2 control (such as a video) is set to full screen, it fills the bounds of the WebView2 control. Use the ContainsFullScreenElementChanged event and get_ContainsFullScreenElement to specify how the app should resize the WebView2 control if an element wants to enter fullscreen mode.
0.8.314
Release Date: October 28, 2019
NuGet package for WebView2 SDK 0.8.314
This version of the WebView2 SDK requires Microsoft Edge version 80.0.314.0 or higher.
Changes
 Added support for Windows 7, Windows 8, and Windows 8.1. See Supported platforms in Introduction to Microsoft Edge WebView2.
 Added Visual Studio and Visual Studio Code debug support for WebView2. Now, debug your script in the WebView2 right from your IDE. See How to debug when developing with WebView2 controls.
 Added Native Object Injection for the running script in WebView2 to access an
IDispatch object from the Win32 component of the app and access the properties of the IDispatch object. See AddRemoteObject (#17).
Added AcceleratorKeyPressed event. See add_AcceleratorKeyPressed (#57
	Turned off the Context Menus. See put_AreDefaultContextMenusEnabled (#57	).
Updated DPI Awareness. Now, the DPI awareness of the WebView2 control is the same as the DPI awareness of the host app.

Updated Notification Change Behavior so WebView2 automatically rejects notification permission requests prompted by web content hosted in the WebView2 control.
0.8.270
Release Date: September 10, 2019
NuGet package for WebView2 SDK 0.8.270
This version of the WebView2 SDK requires Microsoft Edge version 78.0.270.0 or higher.
Changes
 Added DocumentTitleChanged event to indicate document title change (Issue
	#27	).
Added GetWebView2BrowserVersionInfo API (Issue #18).
Added NewWindowRequested event.
Updated CreateWebView2EnvironmentWithDetails function to remove releaseChannelPreference. For more information about the
CreateWebView2EnvironmentWithDetails function, see
CreateWebView2EnvironmentWithDetails. The registry and environment variable override is still supported. The default channel preference is used unless overridden.
During the channel search, the WebView2 team skips any previous channel version that isn't compatible with the WebView2 SDK.
The WebView2 team selects the more stable channel to ensure the most consistent behaviors for the end user. When you test with the latest Canary build, you should create a script to set the WEBVIEW2_RELEASE_CHANNEL_PREFERENCE environment variable to 1 before launching the app. See Test upcoming APIs and features.
 Updated the CreateWebView2EnvironmentWithDetails function with logic for selecting userDataFolder when not specified. For more information about the
CreateWebView2EnvironmentWithDetails function, see
CreateWebView2EnvironmentWithDetails. If you previously used the default userDataFolder location, when you switch to the new SDK the default userDataFolder is reset (set to a new location in the host code directory) and your
state is also reset. If the host process doesn't have permission to write to the specified directory, the CreateWebView2EnvironmentWithDetails function might fail.
You can copy the data from the old user data folder to the new directory.
0.8.230
Release Date: July 29, 2019
NuGet package for WebView2 SDK 0.8.230
This version of the WebView2 SDK requires Microsoft Edge version 77.0.230.0 or higher.
Changes
Added Stop API to stop all navigation and pending resource fetches (Issue #28).
Added .tlb file to the NuGet package (Issue #22).
Added .NET projects to the installer list in the NuGet package (Issue #32).
0.8.190
Release Date: June 17, 2019
NuGet package for WebView2 SDK 0.8.190
This version of the WebView2 SDK requires Microsoft Edge version 77.0.190.0 or higher.
 Added get_AreDevToolsEnabled/put_AreDevToolsEnabled to control if users can open DevTools (Issue #16	).
 Added get_IsStatusBarEnabled/put_IsStatusBarEnabled to control if the status bar is displayed (Issue #19	).
 Added get_CanGoBack/GoBack/get_CanGoForward/GoForward for going back and forward through navigation history. Added HTTP header types
(IWebView2HttpHeadersCollectionIterator/IWebView2HttpRequestHeaders/IWebView2 HttpRequestHeaders) for viewing and modifying HTTP headers in WebView2.
	Added 32-bit WebView2 support on 64-bit machines (Issue #13	).
Added WebView2 IDL to the SDK (Issue #14).
Added lib to support IID\_\* interface ID objects (Issue #12).
 Added include path, linking, and autocopying of DLL files to NuGet TARGET file in SDK.
 Turned on requesting window.open() in script.
0.8.149
Release Date: May 6, 2019
NuGet package for WebView2 SDK 0.8.149
This version of the WebView2 SDK requires Microsoft Edge version 76.0.149.0 or higher.
Initial developer preview release.
See also
About Release Notes for the WebView2 SDK
Release Notes for the WebView2 SDK
Overview of WebView2 APIs - outlines many of the APIs, by feature area, that are in Release SDK packages.
 Contacting the Microsoft Edge WebView2 team

Feedback
Was this page helpful? 
WebView2 Roadmap
Article • 07/09/2024
The Microsoft Edge WebView2 control allows you to embed web technologies in your native applications. This article outlines the prospective roadmap for WebView2.
WebView2 is under active development and the roadmap continues to evolve based on market changes and customer feedback. The plans outlined here aren't exhaustive and are subject to change.
If you have concerns or questions about the Roadmap, provide your feedback in the feedback repo.
WebView2 Runtime and Installer
Evergreen distribution mode allows you to target or chain-install the WebView2 Runtime onto your users' machines. The Evergreen WebView2 Runtime and installer has reached General Availability (GA). For more information, see Distribute your app and the WebView2 Runtime.
Fixed version
Fixed version distribution mode allows you to package the Microsoft Edge binaries inside your native application. The Fixed Version has reached General Availability (GA).
For more information, see Distribute your app and the WebView2 Runtime.
General Availability
The following technologies have reached General Availability (GA).
Win32 C/C++
The Win32 C/C++ SDK has reached GA.
.NET
The .NET SDK has reached GA.
Windows UI Library 2
You can access WebView2 controls in your UWP applications using Windows UI Library 2 (WinUI 2). This has reached GA.
Windows UI Library 3
You can access WebView2 controls in your applications using Windows UI Library 3 (WinUI 3) with the Windows App SDK. This has reached GA.
XAML limitation
XAML Island support requires additional work and may be considered for future releases.
Xbox
WebView2 is now available on Xbox devices.
Preview Availability
The following technologies are now available in a Preview release.
HoloLens 2
Starting with the Windows 11 update for HoloLens 2, a WebView2 Preview is now available on HoloLens 2 devices.
WebView2 API Reference
Article • 11/26/2024
The Microsoft Edge WebView2 control enables you to host web content in your application using Chromium-based Microsoft Edge as the rendering engine.
Platforms
WebView2 is available for the following frameworks or platforms:

Use all three tabs
Tip: When reading a non-Reference article about WebView2, to see all available documentation for a type or member, click the links in all three tabs in the article:
.NET/C#, WinRT/C#, and Win32/C++.
JavaScript
On the web side of a WebView2 app, WebView2 exposes JavaScript APIs to the HTML documents that are running within the WebView2 control. These JavaScript APIs are mostly to support communication with the host application.
 JavaScript
See also
Overview of Microsoft Edge WebView2
Get started with WebView2

Feedback
Was this page helpful? 

Microsoft.Web.WebView2.Core Namespace
Reference
Classes
ﾉ Expand table
CoreWebView2WebView2 enables you to host web content using the latest Microsoft Edge browser and web technology.CoreWebView2Accelerator
KeyPressedEventArgsEvent args for the AcceleratorKeyPressed event.CoreWebView2Basic
AuthenticationRequested
EventArgsEvent args for the BasicAuthenticationRequested event. Will contain the request that led to the HTTP authorization challenge, the challenge and allows the host to provide authentication response or cancel the request.CoreWebView2Basic
AuthenticationResponseRepresents a Basic HTTP authentication response that contains a user name and a password as according to RFC7617 (https://tools.ietf.org/html/rfc7617).CoreWebView2Browser
ExtensionBrowser extension installed on current profile.CoreWebView2Browser
ProcessExitedEventArgsEvent args for the BrowserProcessExited event.CoreWebView2CertificateRepresents a certificate and provides access to its metadata.CoreWebView2Client
CertificateRepresents a client certificate that provides access to the client certificate metadata.CoreWebView2Client
CertificateRequestedEvent
ArgsEvent args for the ClientCertificateRequested event.CoreWeb
View2Composition
ControllerThis class is an extension of the CoreWebView2Controller class to support visual hosting.CoreWebView2Content
LoadingEventArgsEvent args for the ContentLoading event.CoreWebView2ContextRepresents a context menu item of a context menu displayed by
MenuItemWebView.CoreWebView2Context
MenuRequestedEventArgsEvent args for the ContextMenuRequested event.CoreWebView2Context
MenuTargetRepresents the information regarding the context menu target. Includes the context selected and the appropriate data used for the actions of a context menu.CoreWebView2ControllerThe owner of the CoreWebView2 object that provides support for resizing, showing and hiding, focusing, and other functionality related to windowing and composition.CoreWebView2Controller
OptionsUsed to manage profile options that created by CreateCoreWebView2ControllerOptions().CoreWebView2CookieProvides a set of properties that are used to manage a CoreWebView2Cookie.CoreWebView2Cookie
ManagerCreates, adds or updates, gets, or or view the cookies.CoreWebView2Custom
SchemeRegistrationRepresents the registration of a custom scheme with the CoreWebView2Environment.CoreWebView2DeferralThis is used to complete deferrals on event args that support getting deferrals using the GetDeferral method. This class implements IDisposable.CoreWebView2DevTools
ProtocolEventReceived
EventArgsEvent args for the DevToolsProtocolEventReceived event.CoreWebView2DevTools
ProtocolEventReceiverA Receiver is created for a particular DevTools Protocol event and allows you to subscribe and unsubscribe from that event.CoreWeb
View2DOMContentLoaded
EventArgsEvent args for the DOMContentLoaded event.CoreWebView2Download
OperationRepresents a download operation. Gives access to a download's metadata and supports a user canceling, pausing, or resuming a download.CoreWebView2Download
StartingEventArgsEvent args for the DownloadStarting event.CoreWeb
View2EnvironmentThis represents the WebView2 Environment. WebViews created from an environment run on the Browser process specified with environment parameters and objects created from an environment should be used in the same environment. Using it in different environments are not guaranteed to be compatible and may fail.
CoreWeb
View2EnvironmentOptionsOptions used to create WebView2 Environment. Default values will use your defaulted Edge WebView2 Runtime binaries and user data folder.CoreWebView2Execute
ScriptResultThe result for ExecuteScriptWithResultAsync(String).CoreWebView2FileRepresentation of a DOM File object passed via WebMessage.CoreWebView2FileSystem
HandleRepresentation of a DOM FileSystemHandle object.CoreWebView2FrameCoreWebView2Frame provides direct access to the iframes information and handling. You can get a CoreWebView2Frame by handling the FrameCreated event.CoreWebView2Frame
CreatedEventArgsEvent args for the FrameCreated event.CoreWebView2FrameInfoProvides a set of properties for a frame in the CoreWebView2.CoreWebView2Http
HeadersCollectionIteratorIterator for a collection of HTTP headers.CoreWebView2Http
RequestHeadersHTTP request headers.CoreWebView2Http
ResponseHeadersHTTP response headers.CoreWeb
View2Initialization
CompletedEventArgsEvent args for the CoreWebView2InitializationCompleted event.CoreWebView2Launching
ExternalUriSchemeEvent
ArgsEvent args for the LaunchingExternalUriScheme event.CoreWebView2MoveFocus
RequestedEventArgsEvent args for the MoveFocusRequested event.CoreWebView2Navigation
CompletedEventArgsEvent args for the NavigationCompleted event.CoreWebView2Navigation
StartingEventArgsEvent args for the NavigationStarting event.CoreWebView2New
WindowRequestedEvent
ArgsEvent args for the NewWindowRequested event.
	CoreWebView2NonClient	Event args for the NonClientRegionChanged event.
RegionChangedEventArgs	CoreWebView2Notification	An object that represents a HTML Notification object.	CoreWebView2Notification	Event args for the NotificationReceived.
ReceivedEventArgs	CoreWebView2Permission	Event args for the PermissionRequested event.
RequestedEventArgs	CoreWebView2Permission	Provides a set of properties for a permission setting.
SettingCoreWebView2PointerInfo This mostly represents a combined win32 POINTER_INFO, POINTER_TOUCH_INFO, and POINTER_PEN_INFO object.	CoreWebView2Print	Settings used by the PrintToPdfAsync(String,
	Settings	CoreWebView2PrintSettings) method.	CoreWebView2Process	Provides a set of properties for a process list with extended
	ExtendedInfo	information in the .	CoreWebView2Process	Event args for the ProcessFailed event.
FailedEventArgsCoreWebView2ProcessInfo	Provides a set of properties for a process list in the CoreWebView2Environment.CoreWebView2Profile	CoreWebView2Save	The event args for SaveAsUIShowing event.
AsUIShowingEventArgs	CoreWebView2SaveFile	The event args for SaveFileSecurityCheckStarting event.
SecurityCheckStarting
EventArgsCoreWebView2ScreenCaptureStartingEventArgs	CoreWebView2Script	Event args for the ScriptDialogOpening event.
DialogOpeningEventArgs	CoreWebView2Script	This represents a JavaScript exception.
Exception	CoreWebView2Server	Event args for the ServerCertificateErrorDetected event.
CertificateErrorDetected
EventArgs	CoreWebView2Settings	Defines properties that enable, disable, or modify WebView features.CoreWebView2Shared
BufferA shared memory based buffer object that is created by
CreateSharedBuffer(UInt64). The object is presented to script as
ArrayBuffer when posted to script with
PostSharedBufferToScript(CoreWebView2SharedBuffer, CoreWebView2SharedBufferAccess, String).CoreWebView2Source
ChangedEventArgsEvent args for the SourceChanged event.CoreWebView2Web
MessageReceivedEvent
ArgsEvent args for the WebMessageReceived event.CoreWebView2Web
ResourceRequestAn HTTP request used with the WebResourceRequested event.CoreWebView2Web
ResourceRequestedEvent
ArgsEvent args for the WebResourceRequested event.CoreWebView2Web
ResourceResponseAn HTTP response used with the WebResourceRequested event.CoreWebView2Web
ResourceResponse
ReceivedEventArgsEvent args for the WebResourceResponseReceived event.CoreWebView2Web
ResourceResponseViewView of the HTTP representation for a web resource response.CoreWebView2Window
FeaturesThe window features for a WebView popup window.WebView2RuntimeNot
FoundExceptionThe exception that is thrown when an WebView2 Runtime installation is missing.Structs
ﾉ Expand table
CoreWebView2ColorA value representing RGBA color (Red, Green, Blue, Alpha) for WebView2. Each component takes a value from 0 to 255, with 0 being no intensity and 255 being the highest intensity.CoreWeb
View2PhysicalKey
StatusContains the information packed into the LPARAM sent to a Win32 key event.Enums
ﾉ Expand table
CoreWeb
View2BoundsModeMode for how the Bounds property is interpreted in relation to the RasterizationScale property.CoreWeb
View2BrowserProcess
ExitKindSpecifies the browser process exit type used in the ICoreWebView2BrowserProcessExitedEventArgs interface.CoreWeb
View2BrowsingData
KindsSpecifies the datatype for the
ICoreWebView2Profile2::ClearBrowsingData method.CoreWeb
View2CapturePreview
ImageFormatSpecifies the image format for the ICoreWebView2::CapturePreview method.CoreWeb
View2ChannelSearch
KindThe channel search kind determines the order that release channels are searched for during environment creation. The default behavior is to search for and use the most stable channel found on the device. The order from most to least stable is: WebView2 Runtime -> Beta -> Dev -> Canary. Switch the order to prefer the least stable channel in order to perform pre-release testing. See COREWEBVIEW2_RELEASE_CHANNELS for descriptions of channels.CoreWebView2Client
CertificateKindSpecifies the client certificate kind.CoreWeb
View2ContextMenu
ItemKindSpecifies the menu item kind for the
ICoreWebView2ContextMenuItem::get_Kind methodCoreWeb
View2ContextMenu
TargetKindIndicates the kind of context for which the context menu was created for the ICoreWebView2ContextMenuTarget::get_Kind method. This enum will always represent the active element that caused the context menu request. If there is a selection with multiple images, audio and text, for example, the element that the end user right clicks on within this selection will be the option represented by this enum.CoreWebView2Cookie
SameSiteKindKind of cookie SameSite status used in the ICoreWebView2Cookie interface. These fields match those as specified in https://developer.mozilla.org/docs/Web/HTTP/Cookies#. Learn more about SameSite cookies here: https://tools.ietf.org/html/draft-west-firstparty-cookies-07
CoreWeb
View2Default
DownloadDialog
CornerAlignmentThe default download dialog can be aligned to any of the WebView corners by setting the DefaultDownloadDialogCornerAlignment property.
The default position is top-right corner.CoreWeb
View2Download
InterruptReasonReason why a download was interrupted.CoreWeb
View2DownloadStateState of the download operation.CoreWeb
View2FaviconImage
FormatSpecifies the image format to use for favicon.CoreWebView2File
SystemHandleKindKind of CoreWebView2FileSystemHandle as described in FileSystemHandle.kind.CoreWebView2File
SystemHandle
PermissionAllowed permissions of a CoreWebView2FileSystemHandle as described in FileSystemHandle.requestPermission().CoreWebView2Frame
KindIndicates the frame type used in the ICoreWebView2FrameInfo interface.CoreWebView2Host
ResourceAccessKindKind of cross origin resource access allowed for host resources during download. Note that other normal access checks like same origin DOM access check and Content Security Policy still apply.
        The following table illustrates the host resource cross origin access according to         access context and 
`CoreWebView2HostResourceAccessKind`.
        <table><thead><tr><th></th><th>Cross Origin 
Access Context</th><th>Deny</th><th>Allow</th>
<th>DenyCors</th></tr></thead><tbody><tr><td></td> <td>From DOM like src of img, script or iframe element</td><td>Deny</td><td>Allow</td><td>Allow</td>
</tr><tr><td></td><td>From Script like Fetch or 
XMLHttpRequest</td><td>Deny</td><td>Allow</td>
<td>Deny</td></tr></tbody></table>CoreWebView2Key
EventKindSpecifies the key event type that triggered an AcceleratorKeyPressed event.CoreWeb
View2MemoryUsageSpecifies memory usage target level of WebView.
TargetLevelCoreWebView2Mouse
EventKindMouse event type used by SendMouseInput to convey the type of mouse event being sent to WebView. The values of this enum align with the matching WM_* window messages.CoreWebView2Mouse
EventVirtualKeysMouse event virtual keys associated with a
COREWEBVIEW2_MOUSE_EVENT_KIND for SendMouseInput. These
values can be combined into a bit flag if more than one virtual key is pressed for the event. The values of this enum align with the matching MK_* mouse keys.CoreWebView2Move
FocusReasonSpecifies the reason for moving focus.CoreWeb
View2NavigationKindSpecifies the navigation kind of each navigation.CoreWebView2Non
ClientRegionKindThis enum contains values representing possible regions a given point lies within. The values of this enum align with the matching WM_NCHITTEST* window message return values.CoreWebView2Pdf
ToolbarItemsSpecifies the PDF toolbar item types used for the
ICoreWebView2Settings::put_HiddenPdfToolbarItems method.CoreWeb
View2PermissionKindIndicates the type of a permission request.CoreWeb
View2PermissionStateSpecifies the response to a permission request.CoreWebView2Pointer
EventKindPointer event type used by SendPointerInput to convey the type of pointer event being sent to WebView. The values of this enum align with the matching WM_POINTER* window messages.CoreWeb
View2PreferredColor
SchemeAn enum to represent the options for WebView2 color scheme: auto, light, or dark.CoreWebView2Print
CollationSpecifies the collation for a print.CoreWebView2Print
ColorModeSpecifies the color mode for a print.CoreWebView2Print
DialogKindSpecifies the print dialog kind.CoreWebView2Print
DuplexSpecifies the duplex option for a print.
CoreWebView2Print
MediaSizeSpecifies the media size for a print.CoreWebView2Print
OrientationThe orientation for printing, used by the Orientation property on ICoreWebView2PrintSettings.CoreWebView2Print
StatusIndicates the status for printing.CoreWeb
View2ProcessFailed
KindSpecifies the process failure type used in the
ICoreWebView2ProcessFailedEventArgs interface. The values in this enum make reference to the process kinds in the Chromium architecture. For more information about what these processes are and what they do, see Browser Architecture - Inside look at modern web browser.CoreWeb
View2ProcessFailed
ReasonSpecifies the process failure reason used in the
ICoreWebView2ProcessFailedEventArgs interface. For process failures where a process has exited, it indicates the type of issue that produced the process exit.CoreWeb
View2ProcessKindIndicates the process type used in the ICoreWebView2ProcessInfo interface.CoreWeb
View2Release
ChannelsSpecifies the WebView2 release channel.CoreWebView2Save
AsKindSpecifies Save As kind selection options for ICoreWebView2SaveAsUIShowingEventArgs.
        For HTML documents, we support 3 Save As kinds: HTML_ONLY, SINGLE_FILE and
        COMPLETE. For non-HTML documents, you must use DEFAULT. MIME types of `text/html` and
        `application/xhtml+xml` are considered HTML documents.CoreWebView2Save
AsUIResultStatus of a programmatic Save As call. Indicates the result of the ShowSaveAsUI method.CoreWebView2Script
DialogKindSpecifies the JavaScript dialog type used in the
ICoreWebView2ScriptDialogOpeningEventHandler interface.CoreWeb
View2ScrollbarStyleSet ScrollBar style on ICoreWebView2EnvironmentOptions during environment creation.CoreWebView2Server
CertificateErrorActionSpecifies the action type when server certificate error is detected to be used in the ICoreWebView2ServerCertificateErrorDetectedEventArgs
interface.CoreWebView2Shared
BufferAccessSpecifies the desired access from script to CoreWebView2SharedBuffer.CoreWebView2Text
DirectionKindIndicates the text direction of the notification.CoreWeb
View2Tracking
PreventionLevelTracking prevention levels.CoreWebView2Web
ErrorStatusIndicates the error status values for web navigations.CoreWebView2Web
ResourceContextSpecifies the web resource request contexts.CoreWebView2Web
ResourceRequest
SourceKindsSpecifies the source of WebResourceRequested event.

Microsoft.Web.WebView2.Wpf Namespace
Reference
Classes
ﾉ Expand table
CoreWeb
View2Creation
PropertiesThis class is a bundle of the most common parameters used to create CoreWebView2Environment and CoreWebView2Controller instances. Its main purpose is to be set to CreationProperties in order to customize the environment and/or controller used by a WebView2 during implicit initialization. It is also a nice WPF integration utility which allows commonly used environment/controller parameters to be dependency properties and be created and used in markup.WebView2A control to embed web content in a WPF application.Web
View2Composition
ControlVisual hosting version of the WebView2 control.Interfaces
ﾉ Expand table
IWebView2The public interfaces of WebView2 WPF control.Microsoft.Web.WebView2.WinForms Namespace
Reference
Classes
ﾉ Expand table
CoreWeb
View2Creation
PropertiesThis class is a bundle of the most common parameters used to create CoreWebView2Environment and CoreWebView2Controller instances. Its main purpose is to be set to CreationProperties in order to customize the environment and/or controller used by a WebView2 during implicit initialization.WebView2Control to embed WebView2 in WinForms.

API Reference for Mixed Reality
WebView plugin (Preview)

The Microsoft Mixed Reality WebView plugin for Unity enables the integration of WebView2 functionality into your HoloLens 2 app. This WebView plugin for Unity simplifies the integration of WebView2 functionality into your HoloLens 2 app by wrapping the WebView2 control, automatically handling rendering, and automatically directing input to the WebView2 control.
This plugin also manages interop between Unity and WebView2, enabling communication between JavaScript and Unity via messages and events.
This plugin exposes a subset of the functionality that's available via CoreWebView2.
WebView2 on HoloLens 2 and the WebView plugin for Unity are both in Preview and are subject to change before general availability. The WebView2 Preview is available in the Insider Preview for Microsoft HoloLens. To access this preview, you must be enrolled in the Windows Insider Program; see Start receiving Insider builds in Insider preview for Microsoft HoloLens.
WebView2 and the WebView plugin are only supported on HoloLens 2 devices running the Windows 11 update. For more information, see Update HoloLens 2.
For information on getting started with the WebView plugin for Unity, see Get started with WebView2 in HoloLens 2 Unity apps.
IWebView Interface
The main interface for the WebView plugin for Unity.
c#
public interface IWebView
{     event WebView_OnNavigated Navigated;     event WebView_OnCloseRequested WindowCloseRequested;
    GameObject GameObject { get; }     Texture2D Texture { get; }     int Width { get; set; }     int Height { get; set; }
    Uri Page { get; }
    
    Task OnceCreated { get; }     void Resize(int width, int height);     void Load(Uri url);
    void Dispose();
}IWebView Delegates
c#public delegate void WebView_OnNavigated(string path); public delegate void WebView_OnCanGoForwardUpdated(bool value);IWebView Events
IWebView.Navigated Event
Event triggered when CoreWebView2.SourceChanged Event is raised by WebView.
Example
c#webView.Navigated += OnNavigated; private void OnNavigated(string uri){
    UrlField.text = uri;
}
IWebView.WindowCloseRequested Event
Event triggered when CoreWebView2.WindowCloseRequested Event is raised by WebView.
Example
c#webView.WindowCloseRequested += OnWindowCloseRequested;
private void OnWindowCloseRequested()
{
    Destroy(GameObject);
}IWebView Properties
IWebView.GameObject Property
The top-level Unity GameObject entity that represents the WebView plugin in the scene.
Readonly.
IWebView.Texture Property
The 2D Unity Texture2D object that the WebView content is rendered to. Readonly
IWebView.Width Property
The width of the WebView texture and the WebView control. The rendered dimensions of the IWebView instance in the Unity scene are controlled by the GameObject.
IWebView.Height Property
The height of the WebView texture and the WebView control. The rendered dimensions of the IWebView instance in the Unity scene are controlled by the GameObject.
IWebView.Page Property
The URI currently loaded or being navigated to by the WebView control. Readonly
IWebView.OnceCreated Property
Task executes when the WebView control has been fully instantiated and ready to use. Readonly
Example
c#webView.OnceCreated.ContinueWith((task) => {
    // Finish setting up plugin.
    webview.Navigated += OnNavigated;
    webview.WindowCloseRequested += OnWindowCloseRequested;
    Load(initialURL);
}, TaskScheduler.FromCurrentSynchronizationContext());IWebView Methods
IWebView.Resize Method
Changes the size of the WebView2 control and the Texture. For details, see the underlying CoreWebView2Controller.Bounds Property.
The rendered dimensions of the IWebView instance in the Unity scene are controlled by the GameObject.
Example
c#Resize(600, 400);IWebView.Load Method
Navigates to the specified URI. For details, see the underlying CoreWebView2.Navigate Method.
Example
c#Load(new Uri("https://www.microsoft.com"));IWebView.Dispose Method
Clears resources such as memory, handles, and callbacks that are related to an IWebView instance.
Invoke this method when you are done with a particular IWebView instance to ensure internal memory is properly freed. After Dispose is called, the IWebView instance should be considered invalid.
Example
c#void OnDestroy()
{     webView.Dispose();
}IWithMouseEvents Interface
Supports mouse and pointer input for the WebView plugin for Unity.
c#public interface IWithMouseEvents
{     void MouseEvent(WebViewMouseEventData mouseEvent); }IWithMouseEvents Methods
IWithMouseEvents.MouseEvent Method
Propagates a WebViewMouseEventData event to the WebView control. Depending on internal logic, the event results in calling either the CoreWebView2Controller.SendMouseInput Method or the CoreWebView2Controller.SendPointerInput Method.
Example
c#public void OnPointerDown(PointerEventData eventData)
{
    IWithMouseEvents mouseEventsWebView = webView as IWithMouseEvents;
    // Call hypothetical function which converts the event's x, y into the 
WebView2's coordinate space.     var hitCoord = ConvertToWebViewSpace(eventData.position.x, eventData.position.y);
    WebViewMouseEventData mouseEvent = new WebViewMouseEventData     {
X = hitCoord.x,
Y = hitCoord.y,
        Type = PointerEvent.PointerDown,
        Button = PointerButton.Left,
        TertiaryAxisDeviceType = 
WebViewMouseEventData.TertiaryAxisDevice.PointingDevice
    };
    mouseEventsWebView.MouseEvent(mouseEvent);
}IWithPostMessage Interface
Interface for interop communication between Unity code and hosted WebView code.
To learn more about interop in WebView2, see Interop of native-side and web-side code.
c#public interface IWithPostMessage : IWebView
{     event WebView_OnPostMessage MessageReceived;    void PostMessage(string message, bool isJSON = false); }
IWithPostMessage Delegates
c#public delegate void WebView_OnPostMessage(string message);IWithPostMessage Events
IWithPostMessage.MessageReceived Method
Triggered when a new JavaScript message is received from the WebView control. For details, see the underlying CoreWebView2.WebMessageReceived Event.
Example
c#(webView as IWithPostMessage).MessageReceived += OnMessageReceived;
void OnMessageReceived(string message)
{
    Debug.Log(message);
}IWithPostMessage Methods
IWithPostMessage.PostMessage Method
Sends a JavaScript message to the hosted content in the WebView control. Depending on the isJSON parameter, this will either result in calling the
CoreWebView2.PostWebMessageAsString Method or the CoreWebView2.PostWebMessageAsJson Method.
c#var msg = new MyMessage("updateText", "Updated from Unity!");(webView as IWithPostMessage).PostMessage(JsonUtility.ToJson(msg), true);
IWithBrowserHistory Interface
Handles functionality related to browser history, such as navigating to a previous page.
c#public interface IWithBrowserHistory : IWebView
{     event WebView_OnCanGoForwardUpdated CanGoForwardUpdated;     event WebView_OnCanGoBackUpdated CanGoBackUpdated;     void GoBack();
    void GoForward();
}IWithBrowserHistory Delegates
c#public delegate void WebView_OnCanGoBackUpdated(bool value); public delegate void WebView_OnCloseRequested();IWithBrowserHistory Events
IWithBrowserHistory.CanGoForwardUpdated Event
Triggered when navigation occurs. The event delegate will provide a true value if CoreWebView2.CanGoForward Property is true.
Example
c#(webView as IWithBrowserHistory).CanGoBackUpdated += OnCanGoBack;
void OnCanGoBack(bool value)
{    BackButton.enabled = value;
}
IWithBrowserHistory.CanGoBackUpdated Event
Triggered when navigation occurs. The event delegate will provide a true value if CoreWebView2.CanGoBack Property is true.
Example
c#(webView as IWithBrowserHistory).CanGoForwardUpdated += OnCanGoForward;
void OnCanGoForward(bool value)
{
    ForwardButton.enabled = value;
}IWithBrowserHistory Methods
IWithBrowserHistory.GoBack Method
Navigates to the previous page. For details, see the underlying CoreWebView2.GoBack Method.
Example
c#(webView as IWithBrowserHistory).GoBack();IWithBrowserHistory.GoForward Method
Navigates to the next page. For details, see the underlying CoreWebView2.GoForward Method.
Example
c#

(webView as IWithBrowserHistory).GoForward();

Microsoft.Web.WebView2.Core Namespace
Article • 01/23/2025
Classes
CoreWebView2
CoreWebView2AcceleratorKeyPressedEventArgs
CoreWebView2BasicAuthenticationRequestedEventArgs
CoreWebView2BasicAuthenticationResponse
CoreWebView2BrowserExtension
CoreWebView2BrowserProcessExitedEventArgs
CoreWebView2Certificate
CoreWebView2ClientCertificate
CoreWebView2ClientCertificateRequestedEventArgs
CoreWebView2CompositionController
CoreWebView2ContentLoadingEventArgs
CoreWebView2ContextMenuItem
CoreWebView2ContextMenuRequestedEventArgs
CoreWebView2ContextMenuTarget
CoreWebView2Controller
CoreWebView2ControllerOptions
CoreWebView2ControllerWindowReference
CoreWebView2Cookie
CoreWebView2CookieManager
CoreWebView2CustomSchemeRegistration
CoreWebView2DOMContentLoadedEventArgs
CoreWebView2DevToolsProtocolEventReceivedEventArgs
CoreWebView2DevToolsProtocolEventReceiver
CoreWebView2DownloadOperation
CoreWebView2DownloadStartingEventArgs
CoreWebView2Environment
CoreWebView2EnvironmentOptions
CoreWebView2ExecuteScriptResult
CoreWebView2File
CoreWebView2FileSystemHandle
CoreWebView2Frame
CoreWebView2FrameCreatedEventArgs
CoreWebView2FrameInfo
CoreWebView2HttpHeadersCollectionIterator
CoreWebView2HttpRequestHeaders
CoreWebView2HttpResponseHeaders
CoreWebView2LaunchingExternalUriSchemeEventArgs
CoreWebView2MoveFocusRequestedEventArgs
CoreWebView2NavigationCompletedEventArgs
CoreWebView2NavigationStartingEventArgs
CoreWebView2NewWindowRequestedEventArgs
CoreWebView2NonClientRegionChangedEventArgs
CoreWebView2Notification
CoreWebView2NotificationReceivedEventArgs
CoreWebView2PermissionRequestedEventArgs
CoreWebView2PermissionSetting
CoreWebView2PointerInfo
CoreWebView2PrintSettings
CoreWebView2ProcessExtendedInfo
CoreWebView2ProcessFailedEventArgs
CoreWebView2ProcessInfo
CoreWebView2Profile
CoreWebView2SaveAsUIShowingEventArgs
CoreWebView2SaveFileSecurityCheckStartingEventArgs
CoreWebView2ScreenCaptureStartingEventArgs
CoreWebView2ScriptDialogOpeningEventArgs
CoreWebView2ScriptException
CoreWebView2ServerCertificateErrorDetectedEventArgs
CoreWebView2Settings
CoreWebView2SharedBuffer
CoreWebView2SourceChangedEventArgs
CoreWebView2WebMessageReceivedEventArgs
CoreWebView2WebResourceRequest
CoreWebView2WebResourceRequestedEventArgs
CoreWebView2WebResourceResponse
CoreWebView2WebResourceResponseReceivedEventArgs
CoreWebView2WebResourceResponseView
CoreWebView2WindowFeatures
Interfaces
 ICoreWebView2DispatchAdapter
Enums
CoreWebView2BoundsMode
CoreWebView2BrowserProcessExitKind
CoreWebView2BrowsingDataKinds
CoreWebView2CapturePreviewImageFormat
CoreWebView2ChannelSearchKind
CoreWebView2ClientCertificateKind
CoreWebView2ContextMenuItemKind
CoreWebView2ContextMenuTargetKind
CoreWebView2CookieSameSiteKind
CoreWebView2DefaultDownloadDialogCornerAlignment
CoreWebView2DownloadInterruptReason
CoreWebView2DownloadState
CoreWebView2FaviconImageFormat
CoreWebView2FileSystemHandleKind
CoreWebView2FileSystemHandlePermission
CoreWebView2FrameKind
CoreWebView2HostResourceAccessKind
CoreWebView2KeyEventKind
CoreWebView2MemoryUsageTargetLevel
CoreWebView2MouseEventKind
CoreWebView2MouseEventVirtualKeys
CoreWebView2MoveFocusReason
CoreWebView2NavigationKind
CoreWebView2NonClientRegionKind
CoreWebView2PdfToolbarItems
CoreWebView2PermissionKind
CoreWebView2PermissionState
CoreWebView2PointerEventKind
CoreWebView2PreferredColorScheme
CoreWebView2PrintCollation
CoreWebView2PrintColorMode
CoreWebView2PrintDialogKind
CoreWebView2PrintDuplex
CoreWebView2PrintMediaSize
CoreWebView2PrintOrientation
CoreWebView2PrintStatus
CoreWebView2ProcessFailedKind
CoreWebView2ProcessFailedReason CoreWebView2ProcessKind
CoreWebView2ReleaseChannels
CoreWebView2SaveAsKind
CoreWebView2SaveAsUIResult
CoreWebView2ScriptDialogKind
CoreWebView2ScrollbarStyle
CoreWebView2ServerCertificateErrorAction
CoreWebView2SharedBufferAccess
CoreWebView2TextDirectionKind
CoreWebView2TrackingPreventionLevel
CoreWebView2WebErrorStatus
CoreWebView2WebResourceContext
CoreWebView2WebResourceRequestSourceKinds
Structs
 CoreWebView2PhysicalKeyStatus
Delegates

WebView2 WinRT COM Interop Reference
Article • 01/23/2025
The Microsoft Edge WebView2 control enables you to host web content in your application using Microsoft Edge (Chromium) as the rendering engine. For more information, see Overview of Microsoft Edge WebView2) and Getting Started with WebView2.
Interfaces
ICoreWebView2CompositionControllerInterop
ICoreWebView2CompositionControllerInterop2
ICoreWebView2EnvironmentInterop
ICoreWebView2Interop
ICoreWebView2Interop2

Win32 C++ WebView2 API conventions
Article • 04/11/2022
Supported platforms: Win32.
Prerequisites
 Experience using the Win32 API.
Async methods
Asynchronous methods in the WebView2 Win32 C++ API use a delegate interface to contact you for any of the following reasons:
The async method has completed.
The success or failure code.
The result of the asynchronous method.
The final parameter for all asynchronous methods is a pointer to a delegate interface, of which you provide an implementation.
The delegate interface has a single Invoke method that takes as a first parameter an
HRESULT of the success or failure code. Additionally, there may be a second parameter that is the result of the method, if the method has a result.
For example, the ICoreWebView2::CapturePreview method takes an
ICoreWebView2CapturePreviewCompletedHandler pointer as the final parameter. To send a
CapturePreview method request, you provide an instance of the
ICoreWebView2CapturePreviewCompletedHandler pointer that you implement.
The following code uses the Invoke method to implement an ICoreWebView2CapturePreviewCompletedHandler pointer:
C++HRESULT Invoke(HRESULT result)You implement the Invoke method, and then CoreWebView2 requests your Invoke method when CapturePreview request completes. The single parameter is the HRESULT describing the success or failure code of the CapturePreview request.
Alternately, for ICoreWebView2::ExecuteScript, you provide an instance that has an
Invoke method that provides you with the success or failure code of the ExecuteScript request. Also provide the second parameter, which is the JSON of the result of running the script.
You can manually implement the CompleteHandler delegate interfaces, or you can use the Callback function (WRL). The Callback function (WRL) is used throughout the following WebView2 code:
C++void ScriptComponent::InjectScript()
{
    TextInputDialog dialog(
        m_appWindow->GetMainWindow(),         L"Inject Script",
        L"Enter script code:",
        L"Enter the JavaScript code to run in the WebView2 control.",         L"window.getComputedStyle(document.body).backgroundColor");     if (dialog.confirmed)
    {
        m_webView->ExecuteScript(dialog.input.c_str(),
            Callback<ICoreWebView2ExecuteScriptCompletedHandler>(
                [](HRESULT error, PCWSTR result) -> HRESULT         {
            if (error != S_OK) {
                ShowFailure(error, L"ExecuteScript failed");
            }
            MessageBox(nullptr, result, L"ExecuteScript Result", MB_OK);             return S_OK;
        }).Get());
    }
}Events
Events in the WebView2 Win32 C++ API use the add_EventName and remove_EventName method pair to subscribe and unsubscribe from events. The add_EventName method takes an event handler delegate interface and gives back an EventRegistrationToken token as an output parameter. The remove_EventName method takes an
EventRegistrationToken token and unsubscribes the corresponding event subscription.
Event handler delegate interfaces
Event handler delegate interfaces work similarly to the async method completed handler delegate interfaces. You implement the event handler delegate interface and CoreWebView2 sends a callback whenever the event runs.
Every event handler delegate interface has a single Invoke method that has a sender parameter followed by an event args parameter. The sender is the instance of the object on which you subscribed for events. The event args parameter is an interface that contains information about the currently firing event.
For instance, the NavigationCompleted event on ICoreWebView2 has the
ICoreWebView2::add_NavigationCompleted and
ICoreWebView2::remove_NavigationCompleted method pair. When you send a request, you provide an instance of ICoreWebView2NavigationCompletedEventHandler in which you previously implemented Invoke method.
When the NavigationCompleted event runs, your Invoke method is requested:
The first parameter runs the NavigationCompleted event.
The second parameter contains information about whether the navigation completed successfully, and so on.
Similar to the async method completed handler delegate interface, use one of the following actions to set it up:
Implement it directly.
Use the Callback function (WRL) function that is used in the following WebView2 code:
C++// Register a handler for the NavigationCompleted event.
// Check whether the navigation succeeded, and if not, do something.
// Also update the Cancel buttons.
CHECK_FAILURE(m_webView->add_NavigationCompleted(
    Callback<ICoreWebView2NavigationCompletedEventHandler>(
        [this](ICoreWebView2* sender, 
ICoreWebView2NavigationCompletedEventArgs* args)
            -> HRESULT {
            BOOL success;
            CHECK_FAILURE(args->get_IsSuccess(&success));             if (!success)
            {
                COREWEBVIEW2_WEB_ERROR_STATUS webErrorStatus;                 CHECK_FAILURE(args->get_WebErrorStatus(&webErrorStatus));                 if (webErrorStatus == COREWEBVIEW2_WEB_ERROR_STATUS_DISCONNECTED)                {
                    // Do something here if you want to handle a specific error case.
                    // In most cases it is not necessary, because the 
WebView2 control
                    // displays an error page automatically.
                }             }             m_toolbar->SetItemEnabled(Toolbar::Item_CancelButton, false);             m_toolbar->SetItemEnabled(Toolbar::Item_ReloadButton, true);             return S_OK;
        })
        .Get(),
    &m_navigationCompletedToken));
Strings
String output parameters are LPWSTR null-terminated strings. The requester provides the string using CoTaskMemAlloc. Ownership is transferred to the requester and it is up to the requester to free the memory using CoTaskMemFree.
String input parameters are LPCWSTR null-terminated strings. The requester ensures the string is valid for the duration of the synchronous function request. If the receiver must store the value to some point after the function request completes, the receiver must give an associated copy of the string value.
URI and JSON parsing
Various methods provide or accept URIs and JSON as strings. Use your preferred library for parsing and generating the strings.
If WinRT is available for your app, you can use the
RuntimeClass_Windows_Data_Json_JsonObject and IJsonObjectStatics methods to parse or produce JSON strings, or RuntimeClass_Windows_Foundation_Uri and
IUriRuntimeClassFactory methods to parse and produce URIs. Both of these approaches work in Win32 apps.
If you use IUri and CreateUri to parse URIs, you may want to use the following URI creation flags, to have CreateUri behavior more closely match the URI parsing in the WebView2 control:
JSON
Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME | Uri_CREATE_NO_DECODE_EXTRA_INFO
See also
Get started with WebView2 in Win32 apps - WebView2 Win32 C/C++. WebView2 API reference

Feedback
Was this page helpful?  Yes  No

Reference (WebView2 Win32 C++)
Article • 01/23/2025
The Microsoft Edge WebView2 control enables you to host web content in your application using Microsoft Edge (Chromium) as the rendering engine. For more information, see Overview of Microsoft Edge WebView2) and Getting Started with WebView2. ICoreWebView2 is a great place to start learning the details of the API.
Globals
 Globals
Interfaces
COREWEBVIEW2_COLOR
COREWEBVIEW2_PHYSICAL_KEY_STATUS
ICoreWebView2
ICoreWebView2_10
ICoreWebView2_11
ICoreWebView2_12
ICoreWebView2_13
ICoreWebView2_14
ICoreWebView2_15
ICoreWebView2_16
ICoreWebView2_17
ICoreWebView2_18
ICoreWebView2_19 ICoreWebView2_2
ICoreWebView2_20
ICoreWebView2_21
ICoreWebView2_22
ICoreWebView2_23
ICoreWebView2_24
ICoreWebView2_25
ICoreWebView2_26
ICoreWebView2_27
ICoreWebView2_3
ICoreWebView2_4
ICoreWebView2_5

ICoreWebView2_6
ICoreWebView2_7
ICoreWebView2_8
ICoreWebView2_9
ICoreWebView2AcceleratorKeyPressedEventArgs
ICoreWebView2AcceleratorKeyPressedEventArgs2
ICoreWebView2BasicAuthenticationRequestedEventArgs
ICoreWebView2BasicAuthenticationResponse
ICoreWebView2BrowserExtension
ICoreWebView2BrowserExtensionList
ICoreWebView2BrowserProcessExitedEventArgs
ICoreWebView2Certificate
ICoreWebView2ClientCertificate
ICoreWebView2ClientCertificateCollection
ICoreWebView2ClientCertificateRequestedEventArgs
ICoreWebView2CompositionController
ICoreWebView2CompositionController2
ICoreWebView2CompositionController3
ICoreWebView2CompositionController4
ICoreWebView2ContentLoadingEventArgs
ICoreWebView2ContextMenuItem
ICoreWebView2ContextMenuItemCollection
ICoreWebView2ContextMenuRequestedEventArgs
ICoreWebView2ContextMenuTarget
ICoreWebView2Controller
ICoreWebView2Controller2
ICoreWebView2Controller3
ICoreWebView2Controller4
ICoreWebView2ControllerOptions
ICoreWebView2ControllerOptions2
ICoreWebView2Cookie
ICoreWebView2CookieList
ICoreWebView2CookieManager
ICoreWebView2CustomSchemeRegistration
ICoreWebView2Deferral
ICoreWebView2DevToolsProtocolEventReceivedEventArgs
ICoreWebView2DevToolsProtocolEventReceivedEventArgs2
ICoreWebView2DevToolsProtocolEventReceiver
ICoreWebView2DOMContentLoadedEventArgs
ICoreWebView2DownloadOperation
ICoreWebView2DownloadStartingEventArgs ICoreWebView2Environment
ICoreWebView2Environment10
ICoreWebView2Environment11
ICoreWebView2Environment12
ICoreWebView2Environment13
ICoreWebView2Environment14
ICoreWebView2Environment2
ICoreWebView2Environment3
ICoreWebView2Environment4
ICoreWebView2Environment5
ICoreWebView2Environment6
ICoreWebView2Environment7
ICoreWebView2Environment8
ICoreWebView2Environment9
ICoreWebView2EnvironmentOptions
ICoreWebView2EnvironmentOptions2
ICoreWebView2EnvironmentOptions3
ICoreWebView2EnvironmentOptions4
ICoreWebView2EnvironmentOptions5
ICoreWebView2EnvironmentOptions6
ICoreWebView2EnvironmentOptions7
ICoreWebView2EnvironmentOptions8
ICoreWebView2ExecuteScriptResult
ICoreWebView2File
ICoreWebView2FileSystemHandle
ICoreWebView2Frame
ICoreWebView2Frame2
ICoreWebView2Frame3
ICoreWebView2Frame4
ICoreWebView2Frame5
ICoreWebView2Frame6
ICoreWebView2FrameCreatedEventArgs
ICoreWebView2FrameInfo
ICoreWebView2FrameInfo2
ICoreWebView2FrameInfoCollection
ICoreWebView2FrameInfoCollectionIterator
ICoreWebView2HttpHeadersCollectionIterator
ICoreWebView2HttpRequestHeaders
ICoreWebView2HttpResponseHeaders
ICoreWebView2LaunchingExternalUriSchemeEventArgs
ICoreWebView2MoveFocusRequestedEventArgs ICoreWebView2NavigationCompletedEventArgs
ICoreWebView2NavigationCompletedEventArgs2
ICoreWebView2NavigationStartingEventArgs
ICoreWebView2NavigationStartingEventArgs2
ICoreWebView2NavigationStartingEventArgs3
ICoreWebView2NewWindowRequestedEventArgs
ICoreWebView2NewWindowRequestedEventArgs2
ICoreWebView2NewWindowRequestedEventArgs3
ICoreWebView2NonClientRegionChangedEventArgs
ICoreWebView2Notification
ICoreWebView2NotificationReceivedEventArgs
ICoreWebView2ObjectCollection
ICoreWebView2ObjectCollectionView
ICoreWebView2PermissionRequestedEventArgs
ICoreWebView2PermissionRequestedEventArgs2
ICoreWebView2PermissionRequestedEventArgs3 ICoreWebView2PermissionSetting
ICoreWebView2PermissionSettingCollectionView
ICoreWebView2PointerInfo
ICoreWebView2PrintSettings
ICoreWebView2PrintSettings2
ICoreWebView2ProcessExtendedInfo
ICoreWebView2ProcessExtendedInfoCollection
ICoreWebView2ProcessFailedEventArgs
ICoreWebView2ProcessFailedEventArgs2
ICoreWebView2ProcessFailedEventArgs3
ICoreWebView2ProcessInfo
ICoreWebView2ProcessInfoCollection
ICoreWebView2Profile
ICoreWebView2Profile2
ICoreWebView2Profile3
ICoreWebView2Profile4
ICoreWebView2Profile5
ICoreWebView2Profile6
ICoreWebView2Profile7
ICoreWebView2Profile8
ICoreWebView2RegionRectCollectionView
ICoreWebView2SaveAsUIShowingEventArgs
ICoreWebView2SaveFileSecurityCheckStartingEventArgs
ICoreWebView2ScreenCaptureStartingEventArgs
ICoreWebView2ScriptDialogOpeningEventArgs

ICoreWebView2ScriptException
ICoreWebView2ServerCertificateErrorDetectedEventArgs
ICoreWebView2Settings
ICoreWebView2Settings2
ICoreWebView2Settings3
ICoreWebView2Settings4
ICoreWebView2Settings5
ICoreWebView2Settings6
ICoreWebView2Settings7
ICoreWebView2Settings8
ICoreWebView2Settings9
ICoreWebView2SharedBuffer
ICoreWebView2SourceChangedEventArgs
ICoreWebView2StringCollection
ICoreWebView2WebMessageReceivedEventArgs
ICoreWebView2WebMessageReceivedEventArgs2
ICoreWebView2WebResourceRequest
ICoreWebView2WebResourceRequestedEventArgs
ICoreWebView2WebResourceRequestedEventArgs2
ICoreWebView2WebResourceResponse
ICoreWebView2WebResourceResponseReceivedEventArgs
ICoreWebView2WebResourceResponseView
ICoreWebView2WindowFeatures
Delegates
ICoreWebView2AcceleratorKeyPressedEventHandler
ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler
ICoreWebView2BasicAuthenticationRequestedEventHandler
ICoreWebView2BrowserExtensionEnableCompletedHandler
ICoreWebView2BrowserExtensionRemoveCompletedHandler
ICoreWebView2BrowserProcessExitedEventHandler
ICoreWebView2BytesReceivedChangedEventHandler
ICoreWebView2CallDevToolsProtocolMethodCompletedHandler
ICoreWebView2CapturePreviewCompletedHandler
ICoreWebView2ClearBrowsingDataCompletedHandler
ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler
ICoreWebView2ClientCertificateRequestedEventHandler
ICoreWebView2ContainsFullScreenElementChangedEventHandler
ICoreWebView2ContentLoadingEventHandler ICoreWebView2ContextMenuRequestedEventHandler
ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler
ICoreWebView2CreateCoreWebView2ControllerCompletedHandler
ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler
ICoreWebView2CursorChangedEventHandler
ICoreWebView2CustomItemSelectedEventHandler
ICoreWebView2DevToolsProtocolEventReceivedEventHandler
ICoreWebView2DocumentTitleChangedEventHandler
ICoreWebView2DOMContentLoadedEventHandler
ICoreWebView2DownloadStartingEventHandler
ICoreWebView2EstimatedEndTimeChangedEventHandler
ICoreWebView2ExecuteScriptCompletedHandler
ICoreWebView2ExecuteScriptWithResultCompletedHandler
ICoreWebView2FaviconChangedEventHandler
ICoreWebView2FocusChangedEventHandler
ICoreWebView2FrameContentLoadingEventHandler
ICoreWebView2FrameCreatedEventHandler
ICoreWebView2FrameDestroyedEventHandler
ICoreWebView2FrameDOMContentLoadedEventHandler
ICoreWebView2FrameNameChangedEventHandler
ICoreWebView2FrameNavigationCompletedEventHandler
ICoreWebView2FrameNavigationStartingEventHandler
ICoreWebView2FramePermissionRequestedEventHandler
ICoreWebView2FrameScreenCaptureStartingEventHandler
ICoreWebView2FrameWebMessageReceivedEventHandler
ICoreWebView2GetCookiesCompletedHandler
ICoreWebView2GetFaviconCompletedHandler
ICoreWebView2GetNonDefaultPermissionSettingsCompletedHandler
ICoreWebView2GetProcessExtendedInfosCompletedHandler
ICoreWebView2HistoryChangedEventHandler
ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler
ICoreWebView2IsDocumentPlayingAudioChangedEventHandler
ICoreWebView2IsMutedChangedEventHandler
ICoreWebView2LaunchingExternalUriSchemeEventHandler
ICoreWebView2MoveFocusRequestedEventHandler
ICoreWebView2NavigationCompletedEventHandler
ICoreWebView2NavigationStartingEventHandler
ICoreWebView2NewBrowserVersionAvailableEventHandler
ICoreWebView2NewWindowRequestedEventHandler
ICoreWebView2NonClientRegionChangedEventHandler
ICoreWebView2NotificationCloseRequestedEventHandler ICoreWebView2NotificationReceivedEventHandler
ICoreWebView2PermissionRequestedEventHandler
ICoreWebView2PrintCompletedHandler
ICoreWebView2PrintToPdfCompletedHandler
ICoreWebView2PrintToPdfStreamCompletedHandler
ICoreWebView2ProcessFailedEventHandler
ICoreWebView2ProcessInfosChangedEventHandler
ICoreWebView2ProfileAddBrowserExtensionCompletedHandler
ICoreWebView2ProfileDeletedEventHandler
ICoreWebView2ProfileGetBrowserExtensionsCompletedHandler
ICoreWebView2RasterizationScaleChangedEventHandler
ICoreWebView2SaveAsUIShowingEventHandler
ICoreWebView2SaveFileSecurityCheckStartingEventHandler
ICoreWebView2ScreenCaptureStartingEventHandler
ICoreWebView2ScriptDialogOpeningEventHandler
ICoreWebView2ServerCertificateErrorDetectedEventHandler
ICoreWebView2SetPermissionStateCompletedHandler
ICoreWebView2ShowSaveAsUICompletedHandler
ICoreWebView2SourceChangedEventHandler
ICoreWebView2StateChangedEventHandler
ICoreWebView2StatusBarTextChangedEventHandler ICoreWebView2TrySuspendCompletedHandler
ICoreWebView2WebMessageReceivedEventHandler
ICoreWebView2WebResourceRequestedEventHandler
ICoreWebView2WebResourceResponseReceivedEventHandler
ICoreWebView2WebResourceResponseViewGetContentCompletedHandler
ICoreWebView2WindowCloseRequestedEventHandler
ICoreWebView2ZoomFactorChangedEventHandler

Feedback
Was this page helpful?  Yes  No

WebView2Script package
Reference
Use the Microsoft Edge WebView2 control to embed web content into native applications. You can use the following window.chrome.webview JavaScript APIs along with native WebView2 APIs to communicate between native code and web code.
Classes
ﾉ Expand table
Host
Object
Async
ProxyAn asynchronous host object proxy. Host objects added via
CoreWebView2.AddHostObjectToScript are exposed as host object proxies using window.chrome.webview.hostObjects.{name}. Host object proxies are promises, and
resolve to an object representing the host object. The promise is rejected if the app has not added an object with the name. When JavaScript code access a property or method of the object, a promise is returned. The promise resolves to the value that's returned from the host for the property or method. The promise is rejected in case of error; for example, no property or method on the object or parameters are not valid.
Host object proxies are JavaScript Proxy objects that intercept all property get, property set, and method invocations. Properties or methods that are a part of the
Function or Object prototype are run in the JavaScript engine of the current document. Additionally any property or method in the
chrome.webview.hostObjects.options.forceLocalProperties array are also run in the JavaScript engine of the current document. This defaults to including optional methods that have meaning in JavaScript like toJSON and Symbol.toPrimitive. Add more to the array as required.Host
Object
Async
Proxy
BaseAn asynchronous host object proxy. Host objects added via
CoreWebView2.AddHostObjectToScript are exposed as host object proxies using window.chrome.webview.hostObjects.{name}. Host object proxies are promises, and
resolve to an object representing the host object. The promise is rejected if the app has not added an object with the name. When JavaScript code access a property or method of the object, a promise is returned. The promise resolves to the value that's returned from the host for the property or method. The promise is rejected in case of error; for example, no property or method on the object, or parameters are not valid.
Host object proxies are JavaScript Proxy objects that intercept all property get, property set, and method invocations. Properties or methods that are a part of the
Function or Object prototype are run in the JavaScript engine of the current document. Additionally any property or method in the
chrome.webview.hostObjects.options.forceLocalProperties array are also run in the
JavaScript engine of the current document. This defaults to including optional
methods that have meaning in JavaScript like toJSON and Symbol.toPrimitive. Add more to the array as required.Host
Objects
Async
RootContains asynchronous proxies for all host objects added via
CoreWebView2.AddHostObjectToScript as well as options to configure those proxies, and the container for synchronous proxies.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, an asynchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.myObject.Host
Objects
OptionsContains options applicable to CoreWebView2.AddHostObjectToScript added script proxies.Host
Objects
SyncRootContains synchronous proxies for all host objects added via CoreWebView2.AddHostObjectToScript.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, a synchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.sync.myObject.Host
Object
Sync
ProxyA synchronous host object proxy. Host objects added via
CoreWebView2.AddHostObjectToScript are exposed as host object proxies using window.chrome.webview.hostObjects.{name}. A host object proxy represent a host
object.
Host object proxies are JavaScript Proxy objects that intercept all property get, property set, and method invocations. Properties or methods that are a part of the
Function or Object prototype are run locally. Additionally any property or method in the chrome.webview.hostObjects.options.forceLocalProperties array is also run locally. This defaults to including optional methods that have meaning in JavaScript like toJSON and Symbol.toPrimitive. Add more to the array as required.Shared
Buffer
Received
EventEvent object for the chrome.webview.sharedbufferreceived event. This event is dispatched when CoreWebView2.PostSharedBufferToScript is successfully called.WebViewwindow.chrome.webview is the class to access the WebView2-specific APIs that are available to the script running within WebView2 Runtime.WebView
Event
MapEvents of the WebView interface.WebView
Message
EventEvent object for the chrome.webview.webmessage event. This event is dispatched when CoreWebView2.PostWebMessage* is successfully called.
Feedback
Was this page helpful? 

HostObjectAsyncProxy class
Reference
Package: WebView2Script
An asynchronous host object proxy. Host objects added via
CoreWebView2.AddHostObjectToScript are exposed as host object proxies using window.chrome.webview.hostObjects.{name}. Host object proxies are promises, and
resolve to an object representing the host object. The promise is rejected if the app has not added an object with the name. When JavaScript code access a property or method of the object, a promise is returned. The promise resolves to the value that's returned from the host for the property or method. The promise is rejected in case of error; for example, no property or method on the object or parameters are not valid.
Host object proxies are JavaScript Proxy objects that intercept all property get, property set, and method invocations. Properties or methods that are a part of the Function or
Object prototype are run in the JavaScript engine of the current document. Additionally any property or method in the
chrome.webview.hostObjects.options.forceLocalProperties array are also run in the JavaScript engine of the current document. This defaults to including optional methods that have meaning in JavaScript like toJSON and Symbol.toPrimitive. Add more to the array as required.
Extends HostObjectAsyncProxyBase
Methods
ﾉ Expand table
sync() A method which returns a promise for a synchronous host object proxy for the same host object. For example, chrome.webview.hostObjects.sample.methodCall() returns an asynchronous host object proxy. Use the sync method to obtain a synchronous host object proxy instead: const syncProxy = await chrome.webview.hostObjects.sample.methodCall().sync().
Method Details
sync()
A method which returns a promise for a synchronous host object proxy for the same host object. For example, chrome.webview.hostObjects.sample.methodCall() returns an asynchronous host object proxy. Use the sync method to obtain a synchronous host object proxy instead: const syncProxy = await chrome.webview.hostObjects.sample.methodCall().sync().
TypeScriptsync(): Promise<HostObjectSyncProxy>;Returns
Promise<HostObjectSyncProxy>
A promise representing the synchronous host object proxy.

Feedback
Was this page helpful?  Yes  No

HostObjectAsyncProxyBase class
Reference
Package: WebView2Script
An asynchronous host object proxy. Host objects added via
CoreWebView2.AddHostObjectToScript are exposed as host object proxies using window.chrome.webview.hostObjects.{name}. Host object proxies are promises, and
resolve to an object representing the host object. The promise is rejected if the app has not added an object with the name. When JavaScript code access a property or method of the object, a promise is returned. The promise resolves to the value that's returned from the host for the property or method. The promise is rejected in case of error; for example, no property or method on the object, or parameters are not valid.
Host object proxies are JavaScript Proxy objects that intercept all property get, property set, and method invocations. Properties or methods that are a part of the Function or
Object prototype are run in the JavaScript engine of the current document. Additionally any property or method in the
chrome.webview.hostObjects.options.forceLocalProperties array are also run in the JavaScript engine of the current document. This defaults to including optional methods that have meaning in JavaScript like toJSON and Symbol.toPrimitive. Add more to the array as required.
Extends Function
Methods
ﾉ Expand table
applyHost
Function(argArray)Perform a method invocation on the host object that corresponds to this proxy.
All parameters are converted to call the host object method.getHost
Property(property
Name)Perform a property get on the host object. Use this method to explicitly force a property get to occur remotely if a conflicting local method or property exists. For instance, proxy.toString() runs the local toString method on the proxy object. But proxy.applyHostFunction('toString') runs toString on the host proxied object instead.getLocal
Property(propertyPerform a property get locally on the proxy object. Use the methods to force getting a property on the host object proxy rather than on the hostName)object it represents. For instance, proxy.unknownProperty gets the property named unknownProperty from the host proxied object. But proxy.getLocalProperty('unknownProperty') gets the value of the property unknownProperty on the proxy object.setHost
Property(property
Name, property
Value)Perform a property set on the host object. Use this method to explicitly force a property set to occur remotely if a conflicting local method or property exists.setLocal
Property(property
Name, property
Value)Perform a property set locally on the proxy object. Use the methods to force setting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty = 2 sets the property named unknownProperty on the host proxied object. But proxy.setLocalProperty('unknownProperty', 2) sets the value of the property unknownProperty on the proxy object.Method Details
applyHostFunction(argArray)
Perform a method invocation on the host object that corresponds to this proxy.
All parameters are converted to call the host object method.
TypeScriptapplyHostFunction(argArray?: any): Promise<any>;Parameters argArray any
An array of arguments to pass to the host object method invocation.
Returns
Promise<any>
A promise representing the converted value of the return value of the host object method invocation.
getHostProperty(propertyName)
Perform a property get on the host object. Use this method to explicitly force a property get to occur remotely if a conflicting local method or property exists. For instance, proxy.toString() runs the local toString method on the proxy object. But proxy.applyHostFunction('toString') runs toString on the host proxied object instead.
TypeScriptgetHostProperty(propertyName: string): Promise<any>;Parameters propertyName string
String name of the property of which to get the value.
Returns
Promise<any>
A promise representing the converted value of the property of the host object's property.
getLocalProperty(propertyName)
Perform a property get locally on the proxy object. Use the methods to force getting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty gets the property named unknownProperty from the host proxied object. But proxy.getLocalProperty('unknownProperty') gets the value of the property unknownProperty on the proxy object.
TypeScriptgetLocalProperty(propertyName: string): any;Parameters propertyName string
Name of the property to get the value of.
Returns
any
The value of the property.
setHostProperty(propertyName, propertyValue)
Perform a property set on the host object. Use this method to explicitly force a property set to occur remotely if a conflicting local method or property exists.
TypeScriptsetHostProperty(propertyName: string, propertyValue: any): Promise<any>;Parameters propertyName string
Name of the property of which to set the value.
propertyValue any
Value to set the property to.
Returns
Promise<any>
A promise representing the converted value of the property of the host object's property. This promise only resolves after the property value has been changed.
setLocalProperty(propertyName, propertyValue)
Perform a property set locally on the proxy object. Use the methods to force setting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty = 2 sets the property named unknownProperty on the host proxied object. But proxy.setLocalProperty('unknownProperty', 2) sets the value of the property unknownProperty on the proxy object.
TypeScriptsetLocalProperty(propertyName: string, propertyValue: any): any;Parameters propertyName string Name of the property of which to set the value.
propertyValue any
Value to set the property to.
Returns
any
The value of the property after it is set.

Feedback
Was this page helpful?  Yes  No

HostObjectsAsyncRoot class
Reference
Package: WebView2Script
Contains asynchronous proxies for all host objects added via
CoreWebView2.AddHostObjectToScript as well as options to configure those proxies, and the container for synchronous proxies.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, an asynchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.myObject.
Extends HostObjectAsyncProxyBase
Properties
ﾉ Expand table
optionsContains options applicable to CoreWebView2.AddHostObjectToScript added script proxies.syncContains synchronous proxies for all host objects added via CoreWebView2.AddHostObjectToScript.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, a synchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.sync.myObject.Methods
ﾉ Expand table
cancel
Promise(promise)Performs a best-effort cancellation on promises for async method calls.cleanupSome()Performs a best effort garbage collection on host object proxies that are no longer in use.Property Details
options
Contains options applicable to CoreWebView2.AddHostObjectToScript added script proxies.
TypeScriptoptions: HostObjectsOptions;Property Value
HostObjectsOptions
sync
Contains synchronous proxies for all host objects added via CoreWebView2.AddHostObjectToScript.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, a synchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.sync.myObject.
TypeScriptsync: HostObjectsSyncRoot;Property Value HostObjectsSyncRoot
Method Details
cancelPromise(promise)
Performs a best-effort cancellation on promises for async method calls.
TypeScriptcancelPromise(promise: Promise<HostObjectAsyncProxy>): void;Parameters promise Promise<HostObjectAsyncProxy>
Returns
void
cleanupSome()
Performs a best effort garbage collection on host object proxies that are no longer in use.
TypeScriptcleanupSome() : void;Returns
void

Feedback
Was this page helpful?  Yes  No
HostObjectsOptions class
Reference
Package: WebView2Script
Contains options applicable to CoreWebView2.AddHostObjectToScript added script proxies.
Properties
ﾉ Expand table
defaultSync
ProxyWhen calling a method on a synchronous proxy, the result should also be a synchronous proxy. But in some cases, the sync or async context is lost (for example, when providing to native code a reference to a function, and then calling that function in native code). In these cases, the proxy will be asynchronous if this option is false, and synchronous if this option is true.forceAsync
Method
MatchesThis is an array of regular expressions. When calling a method on a synchronous proxy, the method call will be performed asynchronously if the method name matches a string or regular expression in this array. Setting this value to /Async$/ will make any method that ends with Async be an asynchronous method call. If an async method doesn't match here and isn't forced to be asynchronous, the method will be invoked synchronously, blocking execution of the calling JavaScript and then returning the resolution of the promise, rather than returning a promise.
This defaults to [].forceLocal PropertiesThis is an array of host object property names that will be run locally, instead of being called on the native host object. This defaults to ['then', 'toJSON',
Symbol.toString, Symbol.toPrimitive]. You can add other properties to specify that they should be run locally on the javascript host object proxy.ignore
MemberNot
FoundErrorBy default, an exception is thrown when attempting to get the value of a proxy property that doesn't exist on the corresponding native class. Setting this property to true changes the behavior to match Chakra WinRT projection (and general JavaScript) behavior of returning undefined with no error.logThis is a callback delegate that will be called with debug information if non-null.
For example, you can set this to console.log.bind(console) to have it print debug information to the console, to help when troubleshooting host object usage.
By default this is null.shouldPass
TypedArraysBy default, typed arrays are passed to the host as IDispatch. To instead pass typed arrays to the host as array, set this to true.AsArraysshould Serialize
DatesBy default this is false, and javascript Date objects will be sent to host objects as a string using JSON.stringify.
You can set this property to true to have Date objects properly serialize as a
VT_DATE when sending to the native host object, and have VT_DATE properties and return values create a JavaScript Date object.Property Details
defaultSyncProxy
When calling a method on a synchronous proxy, the result should also be a synchronous proxy. But in some cases, the sync or async context is lost (for example, when providing to native code a reference to a function, and then calling that function in native code). In these cases, the proxy will be asynchronous if this option is false, and synchronous if this option is true.
TypeScriptdefaultSyncProxy: boolean;Property Value boolean
forceAsyncMethodMatches
This is an array of regular expressions. When calling a method on a synchronous proxy, the method call will be performed asynchronously if the method name matches a string or regular expression in this array. Setting this value to /Async$/ will make any method that ends with Async be an asynchronous method call. If an async method doesn't match here and isn't forced to be asynchronous, the method will be invoked synchronously, blocking execution of the calling JavaScript and then returning the resolution of the promise, rather than returning a promise.
This defaults to [].
TypeScript
forceAsyncMethodMatches: RegExp[];
Property Value
RegExp[]
forceLocalProperties
This is an array of host object property names that will be run locally, instead of being called on the native host object. This defaults to ['then', 'toJSON', Symbol.toString, Symbol.toPrimitive]. You can add other properties to specify that they should be run locally on the javascript host object proxy.
TypeScriptforceLocalProperties: string[];Property Value
string[]
ignoreMemberNotFoundError
By default, an exception is thrown when attempting to get the value of a proxy property that doesn't exist on the corresponding native class. Setting this property to true changes the behavior to match Chakra WinRT projection (and general JavaScript) behavior of returning undefined with no error.
TypeScriptignoreMemberNotFoundError: boolean;Property Value boolean
log
This is a callback delegate that will be called with debug information if non-null.
For example, you can set this to console.log.bind(console) to have it print debug information to the console, to help when troubleshooting host object usage.
By default this is null.
TypeScriptlog: (...data: any[]) => void;Property Value
(...data: any[]) => void
shouldPassTypedArraysAsArrays
By default, typed arrays are passed to the host as IDispatch. To instead pass typed arrays to the host as array, set this to true.
TypeScriptshouldPassTypedArraysAsArrays: boolean;Property Value boolean
shouldSerializeDates
By default this is false, and javascript Date objects will be sent to host objects as a string using JSON.stringify.
You can set this property to true to have Date objects properly serialize as a
VT_DATE when sending to the native host object, and have VT_DATE properties and return values create a JavaScript Date object.
TypeScriptshouldSerializeDates: boolean;Property Value
boolean

Feedback
Was this page helpful?  Yes  No

HostObjectsSyncRoot class
Reference
Package: WebView2Script
Contains synchronous proxies for all host objects added via CoreWebView2.AddHostObjectToScript.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, a synchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.sync.myObject.
Extends HostObjectSyncProxy

Feedback
Was this page helpful?  Yes  No

HostObjectSyncProxy class
Reference
Package: WebView2Script
A synchronous host object proxy. Host objects added via
CoreWebView2.AddHostObjectToScript are exposed as host object proxies using window.chrome.webview.hostObjects.{name}. A host object proxy represent a host object.
Host object proxies are JavaScript Proxy objects that intercept all property get, property set, and method invocations. Properties or methods that are a part of the Function or Object prototype are run locally. Additionally any property or method in the chrome.webview.hostObjects.options.forceLocalProperties array is also run locally. This
defaults to including optional methods that have meaning in JavaScript like toJSON and Symbol.toPrimitive. Add more to the array as required.
Extends Function
Methods
ﾉ Expand table
applyHost
Function(argArray)Perform a method invocation on the host object that corresponds to this proxy.
All parameters are converted to call the host object method.async()A method which blocks and returns an asynchronous host object proxy for the same host object. For example,
chrome.webview.hostObjects.sync.sample.methodCall() returns a
synchronous host object proxy. Running the async method on this blocks and then returns an asynchronous host object proxy for the same host object: const asyncProxy = chrome.webview.hostObjects.sync.sample.methodCall().async().getHost
Property(property
Name)Perform a property get on the host object. Use this method to explicitly force a property get to occur remotely if a conflicting local method or property exists. For instance, proxy.toString() runs the local toString method on the proxy object. But proxy.applyHostFunction('toString') runs toString on the host proxied object instead.getLocal
Property(property
Name)Perform a property get locally on the proxy object. Use the methods to force getting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty gets the property named unknownProperty from the host proxied object. But proxy.getLocalProperty('unknownProperty') gets the value of the property unknownProperty on the proxy object.setHost
Property(property
Name, property
Value)Perform a property set on the host object. Use this method to explicitly force a property set to occur remotely if a conflicting local method or property exists.setLocal
Property(property
Name, property
Value)Perform a property set locally on the proxy object. Use the methods to force setting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty = 2 sets the property named unknownProperty on the host proxied object. But proxy.setLocalProperty('unknownProperty', 2) sets the value of the property unknownProperty on the proxy object.Method Details
applyHostFunction(argArray)
Perform a method invocation on the host object that corresponds to this proxy.
All parameters are converted to call the host object method.
TypeScriptapplyHostFunction(argArray?: any): any;Parameters argArray any
An array of arguments to pass to the host object method invocation.
Returns
any
The converted value of the return value of the host object method invocation.
async()
A method which blocks and returns an asynchronous host object proxy for the same host object. For example, chrome.webview.hostObjects.sync.sample.methodCall() returns a synchronous host object proxy. Running the async method on this blocks and then returns an asynchronous host object proxy for the same host object: const asyncProxy = chrome.webview.hostObjects.sync.sample.methodCall().async().
TypeScriptasync(): HostObjectAsyncProxy;Returns
HostObjectAsyncProxy
An asynchronous host object proxy for the same host object.
getHostProperty(propertyName)
Perform a property get on the host object. Use this method to explicitly force a property get to occur remotely if a conflicting local method or property exists. For instance, proxy.toString() runs the local toString method on the proxy object. But proxy.applyHostFunction('toString') runs toString on the host proxied object
instead.
TypeScriptgetHostProperty(propertyName: string): any;Parameters propertyName string
String name of the property of which to get the value.
Returns
any
The converted value of the property of the host object's property.
getLocalProperty(propertyName)
Perform a property get locally on the proxy object. Use the methods to force getting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty gets the property named unknownProperty from the host proxied object. But proxy.getLocalProperty('unknownProperty') gets the value of the property unknownProperty on the proxy object.
TypeScriptgetLocalProperty(propertyName: string): any;Parameters propertyName string
Name of the property to get the value of.
Returns
any
The value of the property.
setHostProperty(propertyName, propertyValue)
Perform a property set on the host object. Use this method to explicitly force a property set to occur remotely if a conflicting local method or property exists.
TypeScriptsetHostProperty(propertyName: string, propertyValue: any): any;Parameters propertyName string
Name of the property of which to set the value.
propertyValue any
Value to set the property to.
Returns
any
The converted value of the property of the host object's property.
setLocalProperty(propertyName, propertyValue)
Perform a property set locally on the proxy object. Use the methods to force setting a property on the host object proxy rather than on the host object it represents. For instance, proxy.unknownProperty = 2 sets the property named unknownProperty on the host proxied object. But proxy.setLocalProperty('unknownProperty', 2) sets the value of the property unknownProperty on the proxy object.
TypeScriptsetLocalProperty(propertyName: string, propertyValue: any): any;Parameters propertyName string
Name of the property of which to set the value.
propertyValue any
Value to set the property to.
Returns
any
The value of the property after it is set.

Feedback
Was this page helpful? 
SharedBufferReceivedEvent class
Reference
Package: WebView2Script
Event object for the chrome.webview.sharedbufferreceived event. This event is dispatched when CoreWebView2.PostSharedBufferToScript is successfully called.
Extends Event
Remarks
Examples
The following example sends data to script for one-time, read-only consumption.
First, in the native host app code, set data into the shared memory:
C++wil::com_ptr<ICoreWebView2ExperimentalEnvironment10> environment; CHECK_FAILURE(     m_appWindow->GetWebViewEnvironment()>QueryInterface(IID_PPV_ARGS(&environment)));
wil::com_ptr<ICoreWebView2ExperimentalSharedBuffer> sharedBuffer; CHECK_FAILURE(environment->CreateSharedBuffer(bufferSize, &sharedBuffer)); // Add data to shared memory via IStream. wil::com_ptr<IStream> stream; CHECK_FAILURE(sharedBuffer->OpenStream(&stream));
CHECK_FAILURE(stream->Write(data, sizeof(data), nullptr));
PCWSTR additionalDataAsJson = L"{\"myBufferType\":\"bufferType1\"}"; if (fromFrame)
{     m_webviewFrame4->PostSharedBufferToScript(         sharedBuffer.get(), COREWEBVIEW2_SHARED_BUFFER_ACCESS_READ_ONLY,         additionalDataAsJson); } else {     m_webView18->PostSharedBufferToScript(
        sharedBuffer.get(), COREWEBVIEW2_SHARED_BUFFER_ACCESS_READ_ONLY,         additionalDataAsJson); } // Close the one-time shared buffer, to release resources.
sharedBuffer->Close();In the HTML document, subscribe to and handle sharedbufferreceived event.
Next, in the HTML document, subscribe to and then handle the sharedbufferreceived event:
HTMLwindow.chrome.webview.addEventListener("sharedbufferreceived", e => {
    SharedBufferReceived(e);});HTMLlet readOnlySharedBuffer; function ShowReadOnlySharedBuffer() {     if (readOnlySharedBuffer) {
        DisplaySharedBufferData(readOnlySharedBuffer);
    } else {
        // Post a web message to ask host to share the one time read only buffer.         chrome.webview.postMessage("RequestOneTimeShareBuffer");
    } }
function DisplaySharedBufferData(buffer) {     document.getElementById("shared-buffer-data").value =         new TextDecoder().decode(new Uint8Array(buffer)); }
function SharedBufferReceived(e) {     if (e.additionalData && e.additionalData.myBufferType == "bufferType1") 
{         readOnlySharedBuffer = e.getBuffer();
    } else {         sharedBuffer = e.getBuffer();
    }
    DisplaySharedBufferData(e.getBuffer());
}
function ReleaseBuffer(buffer) {     window.chrome.webview.releaseBuffer(buffer);
}Properties
ﾉ Expand table
additional	An object that is the result of parsing the additionalDataAsJson parameter to Data	CoreWebView2.PostSharedBufferToScript as a JSON string. This property will be
undefined if additionalDataAsJson is nullptr or the empty string.sourceThe source of the event is the chrome.webview object.Methods
ﾉ Expand table
get	Returns an ArrayBuffer object with the backing content from the shared buffer passed
Buffer() to CoreWebView2.PostSharedBufferToScript. If CoreWebView2.PostSharedBufferToScript was called with the buffer set to ReadOnly, then only read access is allowed to the buffer. If you try to modify the content in a read-only buffer, it will cause an access violation in the WebView renderer process and crash the renderer process.
Property Details
additionalData
An object that is the result of parsing the additionalDataAsJson parameter to CoreWebView2.PostSharedBufferToScript as a JSON string. This property will be undefined if additionalDataAsJson is nullptr or the empty string.
TypeScriptadditionalData: any;Property Value any
source
The source of the event is the chrome.webview object.
TypeScriptsource: WebView;Property Value
WebView
Method Details
getBuffer()
Returns an ArrayBuffer object with the backing content from the shared buffer passed to CoreWebView2.PostSharedBufferToScript. If
CoreWebView2.PostSharedBufferToScript was called with the buffer set to ReadOnly, then only read access is allowed to the buffer. If you try to modify the content in a read-only buffer, it will cause an access violation in the WebView renderer process and crash the renderer process.
TypeScriptgetBuffer(): ArrayBuffer;Returns
ArrayBuffer
An ArrayBuffer over the shared buffer passed to CoreWebView2.PostSharedBufferToScript.

Feedback
Was this page helpful? 
WebView class
Reference
Package: WebView2Script
window.chrome.webview is the class to access the WebView2-specific APIs that are
available to the script running within WebView2 Runtime.
Extends EventTarget
Properties
ﾉ Expand table
host	Contains asynchronous proxies for all host objects added via
Objects	CoreWebView2.AddHostObjectToScript as well as options to configure those proxies, and the container for synchronous proxies.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, an asynchronous proxy for object is available to your web-side code, by using
chrome.webview.hostObjects.myObject.
Methods
ﾉ Expand table
addEvent
Listener(type, listener, options)The standard EventTarget.addEventListener method. Use it to subscribe to the message event or sharedbufferreceived event. The message event receives messages posted from the WebView2 host via
CoreWebView2.PostWebMessageAsJson or
CoreWebView2.PostWebMessageAsString. The sharedbufferreceived event receives shared buffers posted from the WebView2 host via
CoreWebView2.PostSharedBufferToScript. See
CoreWebView2.PostWebMessageAsJson( Win32/C++, .NET, WinRT).post
Message(message)When the page calls postMessage, the message parameter is converted to JSON and is posted asynchronously to the WebView2 host process. This will result in either the CoreWebView2.WebMessageReceived event or the CoreWebView2Frame.WebMessageReceived event being raised, depending on if postMessage is called from the top-level document in the WebView2 or from a child frame. See CoreWebView2.WebMessageReceived( Win32/C++,.NET, WinRT). See CoreWebView2Frame.WebMessageReceived( Win32/C++, .NET, WinRT).postMessageWith
Additional Objects(message, additionalObjects)When the page calls postMessageWithAdditionalObjects, the message parameter is sent to WebView2 in the same fashion as 'postMessage'. Objects passed as 'additionalObjects' are converted to their native types and will be available in the
CoreWebView2WebMessageReceivedEventArgs.AdditionalObjects property.release Buffer(buffer)Call with the ArrayBuffer from the chrome.webview.sharedbufferreceived event to release the underlying shared memory resource.removeEvent Listener(type, listener, options)The standard EventTarget.removeEventListener method. Use it to unsubscribe to the message or sharedbufferreceived event.Property Details
hostObjects
Contains asynchronous proxies for all host objects added via
CoreWebView2.AddHostObjectToScript as well as options to configure those proxies, and the container for synchronous proxies.
If you call coreWebView2.AddHostObjectToScript("myObject", object); in your native code, an asynchronous proxy for object is available to your web-side code, by using chrome.webview.hostObjects.myObject.
TypeScripthostObjects: HostObjectsAsyncRoot;Property Value
HostObjectsAsyncRoot
Examples
For example, suppose you have a COM object with the following interface:
[uuid(3a14c9c0-bc3e-453f-a314-4ce4a0ec81d8), object, local] interface IHostObjectSample : IUnknown{
    // Demonstrate basic method call with some parameters and a return value.
    HRESULT MethodWithParametersAndReturnValue([in] BSTR stringParameter, 
[in] INT integerParameter, [out, retval] BSTR* stringResult);
    // Demonstrate getting and setting a property.
    [propget] HRESULT Property([out, retval] BSTR* stringResult);
    [propput] HRESULT Property([in] BSTR stringValue);
    [propget] HRESULT IndexedProperty(INT index, [out, retval] BSTR * stringResult);
    [propput] HRESULT IndexedProperty(INT index, [in] BSTR stringValue);
    // Demonstrate native calling back into JavaScript.     HRESULT CallCallbackAsynchronously([in] IDispatch* callbackParameter);
    // Demonstrate a property which uses Date types
    [propget] HRESULT DateProperty([out, retval] DATE * dateResult);
    [propput] HRESULT DateProperty([in] DATE dateValue);
    // Creates a date object on the native side and sets the DateProperty to it.
    HRESULT CreateNativeDate();
};Add an instance of this interface into your JavaScript with AddHostObjectToScript. In this case, name it sample.
In the native host app code:
C++VARIANT remoteObjectAsVariant = {}; m_hostObject.query_to<IDispatch>(&remoteObjectAsVariant.pdispVal); remoteObjectAsVariant.vt = VT_DISPATCH;
// We can call AddHostObjectToScript multiple times in a row without // calling RemoveHostObject first. This will replace the previous object // with the new object. In our case, this is the same object, and everything 
// is fine. CHECK_FAILURE(     m_webView->AddHostObjectToScript(L"sample", &remoteObjectAsVariant)); remoteObjectAsVariant.pdispVal->Release();In the HTML document, use the COM object using chrome.webview.hostObjects.sample.
HTML

document.getElementById("getPropertyAsyncButton").addEventListener("click ", async () => {     const propertyValue = await chrome.webview.hostObjects.sample.property;     document.getElementById("getPropertyAsyncOutput").textContent = propertyValue; });
document.getElementById("getPropertySyncButton").addEventListener("click" , () => {     const propertyValue = chrome.webview.hostObjects.sync.sample.property;     document.getElementById("getPropertySyncOutput").textContent = propertyValue; });
document.getElementById("setPropertyAsyncButton").addEventListener("click ", async () => {     const propertyValue = document.getElementById("setPropertyAsyncInput").value;
    // The following line will work but it will return immediately before the property value has actually been set.
    // If you need to set the property and wait for the property to change value, use the setHostProperty function.
    chrome.webview.hostObjects.sample.property = propertyValue;     document.getElementById("setPropertyAsyncOutput").textContent = 
"Set"; });
document.getElementById("setPropertyExplicitAsyncButton").addEventListene r("click", async () => {     const propertyValue = document.getElementById("setPropertyExplicitAsyncInput").value;
    // If you care about waiting until the property has actually changed value, use the setHostProperty function.
    await chrome.webview.hostObjects.sample.setHostProperty("property", propertyValue);     document.getElementById("setPropertyExplicitAsyncOutput").textContent 
= "Set"; });
document.getElementById("setPropertySyncButton").addEventListener("click" , () => {     const propertyValue = document.getElementById("setPropertySyncInput").value;     chrome.webview.hostObjects.sync.sample.property = propertyValue;     document.getElementById("setPropertySyncOutput").textContent = "Set";
});
document.getElementById("getIndexedPropertyAsyncButton").addEventListener ("click", async () => {     const index = parseInt(document.getElementById("getIndexedPropertyAsyncParam").value);     const resultValue = await 
chrome.webview.hostObjects.sample.IndexedProperty[index];     document.getElementById("getIndexedPropertyAsyncOutput").textContent 
= resultValue; }); document.getElementById("setIndexedPropertyAsyncButton").addEventListener ("click", async () => {     const index = parseInt(document.getElementById("setIndexedPropertyAsyncParam1").value);     const value = document.getElementById("setIndexedPropertyAsyncParam2").value;;     chrome.webview.hostObjects.sample.IndexedProperty[index] = value;     document.getElementById("setIndexedPropertyAsyncOutput").textContent 
= "Set"; }); document.getElementById("invokeMethodAsyncButton").addEventListener("clic k", async () => {     const paramValue1 = document.getElementById("invokeMethodAsyncParam1").value;     const paramValue2 = parseInt(document.getElementById("invokeMethodAsyncParam2").value);     const resultValue = await chrome.webview.hostObjects.sample.MethodWithParametersAndReturnValue(para mValue1, paramValue2);     document.getElementById("invokeMethodAsyncOutput").textContent = resultValue; });
document.getElementById("invokeMethodSyncButton").addEventListener("click ", () => {     const paramValue1 = document.getElementById("invokeMethodSyncParam1").value;     const paramValue2 = parseInt(document.getElementById("invokeMethodSyncParam2").value);     const resultValue = chrome.webview.hostObjects.sync.sample.MethodWithParametersAndReturnValue (paramValue1, paramValue2);     document.getElementById("invokeMethodSyncOutput").textContent = resultValue; });
let callbackCount = 0; document.getElementById("invokeCallbackButton").addEventListener("click", async () => {     chrome.webview.hostObjects.sample.CallCallbackAsynchronously(() => {         document.getElementById("invokeCallbackOutput").textContent = 
"Native object called the callback " + (++callbackCount) + " time(s).";
    });
});
// Date property document.getElementById("setDateButton").addEventListener("click", () => {     chrome.webview.hostObjects.options.shouldSerializeDates = true;     chrome.webview.hostObjects.sync.sample.dateProperty = new Date();     document.getElementById("dateOutput").textContent = "sample.dateProperty: " + chrome.webview.hostObjects.sync.sample.dateProperty; }); document.getElementById("createRemoteDateButton").addEventListener("click ", () => {     chrome.webview.hostObjects.sync.sample.createNativeDate();     document.getElementById("dateOutput").textContent = 
"sample.dateProperty: " + chrome.webview.hostObjects.sync.sample.dateProperty; });
Method Details
addEventListener(type, listener, options)
The standard EventTarget.addEventListener method. Use it to subscribe to the message event or sharedbufferreceived event. The message event receives messages
posted from the WebView2 host via CoreWebView2.PostWebMessageAsJson or
CoreWebView2.PostWebMessageAsString. The sharedbufferreceived event receives shared buffers posted from the WebView2 host via
CoreWebView2.PostSharedBufferToScript. See
CoreWebView2.PostWebMessageAsJson( Win32/C++, .NET, WinRT).
TypeScriptaddEventListener(type: string, listener: 
EventListenerOrEventListenerObject, options?: boolean | 
AddEventListenerOptions): void;Parameters type string
The name of the event to subscribe to. Valid values are message, and sharedbufferreceived.
 listener EventListenerOrEventListenerObject The callback to invoke when the event is raised.
 options boolean | AddEventListenerOptions Options to control how the event is handled.
Returns
void
postMessage(message)
When the page calls postMessage, the message parameter is converted to JSON and is posted asynchronously to the WebView2 host process. This will result in either the
CoreWebView2.WebMessageReceived event or the
CoreWebView2Frame.WebMessageReceived event being raised, depending on if postMessage is called from the top-level document in the WebView2 or from a child
frame. See CoreWebView2.WebMessageReceived( Win32/C++, .NET, WinRT). See CoreWebView2Frame.WebMessageReceived( Win32/C++, .NET, WinRT).
TypeScriptpostMessage(message: any) : void;Parameters message any
The message to send to the WebView2 host. This can be any object that can be serialized to JSON.
Returns
void
Remarks
Examples
Post a message to the CoreWebView2:
JavaScriptconst inTopLevelFrame = (window === window.parent); if (inTopLevelFrame) {
    // The message can be any JSON serializable object.     window.chrome.webview.postMessage({         myMessage: 'Hello from the script!',         otherValue: 1}
    );    // A simple string is an example of a JSON serializable object.     window.chrome.webview.postMessage("example"); }
postMessageWithAdditionalObjects(message, additional Objects)
When the page calls postMessageWithAdditionalObjects, the message parameter is sent to WebView2 in the same fashion as 'postMessage'. Objects passed as 'additionalObjects' are converted to their native types and will be available in the CoreWebView2WebMessageReceivedEventArgs.AdditionalObjects property.
TypeScriptpostMessageWithAdditionalObjects(message: any, additionalObjects: 
ArrayLike<any>) : void;Parameters message any
The message to send to the WebView2 host. This can be any object that can be serialized to JSON.
additionalObjects ArrayLike<any>
A sequence of DOM objects that have native representations in WebView2. This parameter needs to be ArrayLike. The following DOM types are mapped to native:
ﾉ Expand table
DOMWin32.NETWinRTFileICoreWebView2FileSystem.IO.FileInfoWindows.Storage.StorageFilenull or undefined entries will be passed as null type in WebView2. Otherwise if an
invalid or unsupported object is passed via this API, an exception will be thrown and the message will fail to post.
Returns
void
Remarks
Examples
Post a message that includes File objects from an input element to the CoreWebView2:
JavaScriptconst input = document.getElementById('files'); input.addEventListener('change', function() {
    // Note that postMessageWithAdditionalObjects does not accept a single object,
    // but only accepts an ArrayLike object.
    // However, input.files is type FileList, which is already an 
ArrayLike object so
    // no conversion to array is needed.     const currentFiles = input.files;     chrome.webview.postMessageWithAdditionalObjects("FilesDropped",         currentFiles);
});releaseBuffer(buffer)
Call with the ArrayBuffer from the chrome.webview.sharedbufferreceived event to release the underlying shared memory resource.
TypeScriptreleaseBuffer(buffer: ArrayBuffer): void;Parameters buffer ArrayBuffer
An ArrayBuffer from the chrome.webview.sharedbufferreceived event.
Returns
void
removeEventListener(type, listener, options)
The standard EventTarget.removeEventListener method. Use it to unsubscribe to the message or sharedbufferreceived event.
TypeScriptremoveEventListener(type: string, listener: 
EventListenerOrEventListenerObject, options?: boolean | 
EventListenerOptions): void;Parameters type string
The name of the event to unsubscribe from. Valid values are message and sharedbufferreceived.
 listener EventListenerOrEventListenerObject The callback to remove from the event.
options boolean | EventListenerOptions
Options to control how the event is handled.
Returns
void

Feedback
Was this page helpful? 
WebView2 end-user FAQ
Article • 04/03/2023
This Frequently Asked Questions (FAQ) page is for end users, to explain the WebView2 or msedgewebview2.exe processes that are listed in Task Manager. See also Contact the WebView2 team.
What is WebView2?
WebView2 is a way for app developers to embed web content (such as HTML, JavaScript, and CSS) in Windows applications. By including the WebView2 control in an app, a developer can write code for a website or web app, and then reuse that web code in their Windows application, saving time and effort. See Introduction to Microsoft Edge WebView2.
What's the purpose of the WebView2 executable?
WebView2 (msedgewebview2.exe) is a Microsoft product that is updated automatically (by using the Evergreen distribution method) to ensure that your applications have the latest feature support and security fixes.
Most people will see WebView2 used by Widgets, Teams, Office, Outlook, Weather, and many more applications. Any application can use WebView2.
What are the WebView2 processes that are running?
WebView2 follows the process model that's used in the Chromium browser engine of Microsoft Edge, described in Process Model and Site Isolation. Having functionality broken up into multiple processes help reliability, security, and performance. Each process performs a certain responsibility, and can do that work uninterrupted, even if one of the other processes hits a problem.
There are normally a few processes:
The WebView2 manager.
A GPU process.
Utility processes, such as network or audio, depending on the content.
 Renderer processes.
Your machine will have one set of processes for each app that uses WebView2, and typically one renderer process for each WebView2 control that's in the app, similar to how you have one renderer process per tab in a browser. For details, see Process model for WebView2 apps.
What memory and CPU resources does WebView2 use?
In most cases, any extra memory or CPU usage is due to how WebView2 is being used, not WebView2 itself. If the application is rendering non-optimized web content, then the WebView2 control might consume more resources. Task Manager will normally show the processes grouped by parent, but that view is sometimes incorrect if you sort by a column other than Name.
WebView2 processes are displayed in Task Manager's Processes tab as WebView2, grouped by parent app. For example, the WebView2 app from Get started with
WebView2 in Win32 apps is listed in Task Manager's Processes tab as follows.
In Windows 10 and early versions of Windows 11, the Processes tab only lists the name of the app that uses WebView2:

In the latest Windows 11 versions, the Processes tab lists each WebView2 process:

In the Details tab, the WebView2 processes are listed as msedgewebview2.exe, and are grouped together rather than grouped by parent app:

You can also use Microsoft's Process Explorer tool. If you find that an app is consistently causing heavy resource usage, contact the support for that app to report the resource usage.
Will uninstalling Microsoft Edge make WebView2 stop working?
No. Microsoft Edge can be uninstalled without causing a problem for WebView2. When both Microsoft Edge and WebView2 are installed, the Microsoft Edge installer links the applications together, to avoid using extra disk space.
Why was WebView2 re-installed after I uninstalled it?
WebView2 is pre-installed on Windows 11 and is installed on most Windows 10 devices. See Delivering the Microsoft Edge WebView2 Runtime to Windows 10 Consumers.
Many apps that are built on WebView2 perform checks to re-install WebView2 when the app is installed or launched. Enterprises can also push WebView2 to devices that they manage.
See also
Introduction to Microsoft Edge WebView2
Contact the WebView2 team

Feedback
Was this page helpful? 

Contact the WebView2 team
Article • 03/01/2022
Contact the Microsoft Edge WebView2 team and share your feedback to help build richer WebView2 experiences.
Submit feature requests or bugs in the WebView2Feedback repo
To submit feature suggestions or bugs about the WebView2 control, or to search for known issues, use the WebView2Feedback repo. The WebView2Feedback repo is a place for developers to share tips or best practices, report feedback, or search existing issues for WebView2.
File a documentation issue
To enter a GitHub issue from within a documentation article, in the Feedback section at the bottom of an article, select the This page button. Or, you can file an issue	 against the Microsoft Edge Developer documentation directly in the edge-developer repo.
Subscribe to the WebView2Announcements repo
To get the latest news, API proposals, and SDK Release announcements, subscribe to the

Feedback
Was this page helpful? 
Test and automation in Microsoft Edge
Article • 10/31/2024
There are many tools to automate your testing of Microsoft Edge:
ﾉ Expand table
ToolDescriptionDevTools
ProtocolInstrument, inspect, debug, and profile browsers including Microsoft Edge.Origin trialsTry out experimental APIs on live sites for a limited period of time.PlaywrightThe Playwright library provides cross-browser automation through a single API.PuppeteerThe Puppeteer library provides a high-level API to control browsers, including Microsoft Edge, using the DevTools Protocol.WebDriverAutomates testing in Microsoft Edge by simulating user interaction. Provides advantages over JavaScript unit tests.webhintChecks your code for best practices and common errors, to test and improve accessibility, performance, cross-browser and PWA compatibility, and security of your site.These tools are described below.
DevTools Protocol
Use the DevTools Protocol to instrument, inspect, debug, and profile browsers, including
Microsoft Edge. By building Microsoft Edge on the Chromium open-source project, the Microsoft Edge DevTools Protocol matches the APIs of the Chrome DevTools Protocol.
For information about how Microsoft Edge uses the Chromium open-source project, see Microsoft Edge and Chromium Open Source: Our Intent.
See DevTools Protocol.
Origin trials
Use origin trials to try out experimental APIs on your own live site for a limited period of time. When using origin trials, users of Microsoft Edge that visit your site can run code that uses experimental APIs.
To see a list of the available origin trials and register your origin to try out any of the origin trials, see Microsoft Edge Origin Trials.
You can provide feedback to browser feature engineers and the web standards community about the design of the feature's API, your use-cases, or your experience with using the feature's API, by using the Issues tab in the browser feature's repo.
See Use origin trials in Microsoft Edge.
Playwright
The Playwright library provides cross-browser automation through a single API. Playwright enables cross-browser web automation that is evergreen, capable, reliable, and fast.
Playwright launches browsers as headless, by default. Headless browsers don't display a UI; so generally you use the command line - however, you can also configure Playwright to run the full Microsoft Edge UI.
See Use Playwright to automate and test in Microsoft Edge.
Puppeteer
The Puppeteer library provides a high-level API to control Chromium-based browsers, including Microsoft Edge, using the DevTools Protocol.
Puppeteer launches headless browsers by default. Headless browsers don't display a UI, so you must use the command line. You can also configure Puppeteer to run full (nonheadless) Microsoft Edge.
With Microsoft Edge, you can use puppeteer-core, a lightweight version of Puppeteer that launches an existing browser installation, like Microsoft Edge.
See Puppeteer overview.
WebDriver
WebDriver allows you to automate Microsoft Edge by simulating user interaction. Tests that use WebDriver have some advantages over JavaScript unit tests that run in the browser:
 Accesses functionality and information that's not available to JavaScript running in browsers.
Simulates user events or OS-level events more accurately than JavaScript unit tests.
Manages multiple windows, tabs, and webpages in a single test session.
Runs multiple sessions of Microsoft Edge on a specific machine.
See Use WebDriver to automate Microsoft Edge.
webhint extension for Visual Studio Code
Use webhint, a customizable linting tool, to improve the accessibility, performance, cross-browser compatibility, PWA compatibility, and security of your site. The webhint extension checks your code for best practices and common errors.
See webhint extension for Visual Studio Code.

Feedback
Was this page helpful?  Yes  No

DevTools Protocol
Article • 02/13/2023
Use the DevTools Protocol to instrument, inspect, debug, and profile browsers, including
Microsoft Edge. By building Microsoft Edge on the Chromium open-source project, the Microsoft Edge DevTools Protocol matches the APIs of the Chrome DevTools Protocol. For information about how Microsoft Edge uses the Chromium open-source project, see Microsoft Edge and Chromium Open Source: Our Intent.
See Microsoft Edge DevTools Protocol overview.

Use origin trials in Microsoft Edge
Article • 12/11/2024
Use origin trials to try out experimental APIs on your own live site for a limited period of time. When using origin trials, users of Microsoft Edge that visit your site can run code that uses experimental APIs.
To see a list of the available origin trials and register your origin to try out any of the origin trials, see Microsoft Edge Origin Trials. To assess the suitability of using the experimental APIs on your website, check the minimum version requirements for Microsoft Edge, and check the trial expiration date.
You can provide feedback to browser feature engineers and the web standards community about the design of the feature's API, your use-cases, or your experience with using the feature's API, by using the Issues tab in the browser feature's repo.
How the origin trial token works
The origin-trials mechanism allows a user of your webpage to use the origin trial's experimental feature API in their Microsoft Edge browser, despite the feature's off-bydefault state. The user's Microsoft Edge browser detects the origin trial's token, and then automatically turns on the browser's feature flag that corresponds to the origin trial for which the token is valid. The user doesn't need to set any edge://flags in Microsoft Edge.
To support using an origin trial's experimental APIs in your website:
1. Register the origin domain that you want to use the experimental feature on (for example, https://example.com), and then an origin trial token is generated for you.
2. Copy the token to your webpage within a <head>/<meta> element, or in an OriginTrial HTTP server response header.
3. When a Microsoft Edge user visits your webpage and the browser finds an origintrial token, the browser turns on the associated origin-trial feature.
Registering for an origin trial
To register for an origin trial:
1. Go to Microsoft Edge Origin Trials.
To sign up for the Ad Selection API origin trial, instead see Sign up for the Ad Selection API.
2. Select an active trial.
3. Click the I Accept the Terms of Use button.
4. If you are prompted to, sign in. For example, sign in to GitHub, and then authorize the Microsoft Edge Origin Trials page to use the account sign-in.
The New Origin Trial Registration form opens:

You can configure the origin trial token to support any of the following:
 A single domain, such as https://example.com, without supporting its subdomains.
 A single subdomain, such as https://beta.example.com.
A domain, such as https://example.com, and its subdomains, such as https://beta.example.com.
Trailing paths and query parameters aren't supported. If a URI is entered that has a trailing path or a query parameter, such as https://example.com/path/new-feature, the root domain (such as https://example.com) or subdomain will be registered, ignoring any trailing path or query parameters.
6. Set the Enable token for subdomains? toggle.
 To enable using the origin trial at a domain (such as https://example.com) without supporting its subdomains (such as https://beta.example.com), make sure the Enable token for subdomains? toggle is turned off.
To enable using the origin trial only at a specific subdomain (such as https://beta.example.com), make sure the Enable token for subdomains? toggle is turned off.
 To enable using the origin trial at a domain (such as https://example.com) and its subdomains (such as https://beta.example.com), turn on the Enable token for subdomains? toggle.
7. Click the Submit button.
An origin trial token is generated, and is displayed in the Registrations section near the New Origin Trial Registration form:

8. Click the Copy button, and then paste the origin trial token into a safe place, noting which domain it's for. You can also view this information in this webpage later.
Using the origin trial token at your website
Use the token at your website in either of the following ways:
Option 1: A <meta> tag within the <head> element of a webpage
Within the <head> element of a webpage, include the following <meta> tag:
<meta http-equiv="origin-trial" content="EXAMPLE_TOKEN"> Replace EXAMPLE_TOKEN by your token.
Option 2: An HTTP header in your HTTP server response
In your HTTP server response, add the following HTTP header:
Origin-Trial: EXAMPLE_TOKEN
Replace EXAMPLE_TOKEN by your token.
Opting out of an origin trial experiment
To opt out of an experiment (origin trial) that you're enrolled in, remove the origin trial token from the <meta> tag or from the server response headers.
Performing feature detection and providing graceful fallback
Treat origin trials as experimental. As a best practice, in your website code, perform feature detection and provide graceful fallback for these cases:
If the experimental feature API isn't available in the user's browser.
If the origin-trial token expires.
If the Microsoft Edge feature team ends the origin trial.
See Implementing feature detection at MDN.
Testing an origin trial at localhost
To test an origin-trial feature at localhost, go to edge://flags and turn on the appropriate feature flag.
The mechanism that detects and uses Microsoft Edge origin-trial tokens is only supported for SSL-enabled domains, not for localhost.
Renewing an origin trial token
Origin trial tokens expire in 6 weeks, by default. When the origin trial token expires, you must renew the token, which means generating a fresh, new token for this origin trial.
You can renew the token before it expires.
To renew an origin trial token:
1. Go to Microsoft Edge Origin Trials.
For the Ad Selection API origin trial, instead see Sign up for the Ad Selection API.
2. In the My Registered Trials section, select an origin trial.
3. In the Registrations section, in a token row that contains an Expired badge, click the Renew button:

A fresh token is generated and displayed.
4. In the row that contains the new token, click the Copy button, and then paste the fresh token into your code.
Duration of an origin trial
An origin trial may last until the planned expiration date, or may end early.
Scheduled expiration date
After you register for a trial, your token remains valid until the trial expiration date shown on the origin trial's informational card. After the origin trial's expiration date, the token will no longer function, and the feature that's associated with the origin trial will be considered ready to ship, or the feature will be withheld for further development.
Early end
A Microsoft Edge feature team may decide to end an experiment early, before the trial expiration date; for example:
If a security incident is caused by the feature.
If the feature team has collected enough feedback and has concluded that the currently proposed API doesn't meet the needs of web developers, and a major redesign needs to happen.
If an experiment ends early, the feature team that owns the origin trial sends emails to all developers who are enrolled in the experiment.
Providing feedback about an origin trial
Please provide feedback about the experimental feature. The Issues tab of the feature's GitHub repo allows public discourse about the usability and stability of the feature.
To provide feedback about an origin trial:
1. Go to Microsoft Edge Origin Trials.
2. Select an active trial.
3. Click the Feedback button. The Issues tab of the product's GitHub repo opens.
4. View the issues.
5. If a new issue is needed, click the New issue button.
For the Ad Selection API origin trial, instead see Provide feedback about the origin trial in Sign up for the Ad Selection API.
See also
 Microsoft Edge Origin Trials - Developer.microsoft.com.
Ad Selection API:
Sign up for the Ad Selection API
Microsoft Edge Origin Trials - portal at Github.io, for the Ad Selection API origin trial only.
External:

Feedback
Was this page helpful? 

Use Playwright to automate and test in Microsoft Edge
Article • 06/07/2023
The Playwright library provides cross-browser automation through a single API.
Playwright is a Node.js library to automate Chromium, Firefox, and WebKit with a single API. Playwright is built to enable cross-browser web automation that is evergreen, capable, reliable, and fast. Because Microsoft Edge is built on the opensource Chromium web platform, Playwright is also able to automate Microsoft Edge.
Playwright launches headless browsers by default. Headless browsers don't display a UI, so instead you must use the command line. You can also configure Playwright to run full (non-headless) Microsoft Edge as well.
Install Playwright and browsers

Consolenpm i -D @playwright/testTo install browsers, run the following command, which downloads Chromium, Firefox, and WebKit:
Consolenpx playwright install Run a basic test
The approach used by Playwright will be familiar to users of other browser-testing frameworks, such as WebDriver or Puppeteer. You can create an instance of the browser, open a page in the browser, and then manipulate the page by using the Playwright
API.
Playwright Test, which is Playwright's test-runner, launches a browser and context for you. An isolated page is then passed into every test, as shown in the following, basic test:
TypeScript// tests/foo.spec.ts import { test, expect } from '@playwright/test';
test('basic test', async ({ page }) => {   await page.goto('https://playwright.dev/');   const title = page.locator('.navbar__inner .navbar__title');   await expect(title).toHaveText('Playwright');
});Now run your tests, as follows:
Consolenpx playwright testFor more information about running tests, see Playwright > Getting started.
Run tests in Microsoft Edge
To run your tests in Microsoft Edge, you need to create a config file for Playwright Test, such as playwright.config.ts. Inside the config file, create one project, using Microsoft Edge.
TypeScript// playwright.config.ts
import { PlaywrightTestConfig } from '@playwright/test';
const config: PlaywrightTestConfig = {   projects: [
    {       name: 'Microsoft Edge',       use: {
        // Supported Microsoft Edge channels are: msedge, msedge-beta, msedge-dev, msedge-canary        channel: 'msedge',
      },
    },
  ], }; export default configIf Microsoft Edge isn't already installed on your system, install it through Playwright, as follows:
Consolenpx playwright install msedgeWhen using the above playwright.config.ts file, Playwright Test uses Microsoft Edge to run your tests, as follows:
Consolenpx playwright test --headedUse Playwright as a library
You can also consume Playwright as a library, as shown in the following code. This approach allows you to use a different test-runner.
JavaScript// example.js const playwright = require('playwright');
(async () => {   const browser = await playwright.chromium.launch({     channel: 'msedge',
  });   const context = await browser.newContext();   const page = await context.newPage();   await page.goto('https://www.microsoft.com/edge');   await page.screenshot({ path: 'example.png' });
  await browser.close();
})();
JavaScript  const browser = await playwright.firefox.launch({WebKit:
JavaScript  const browser = await playwright.webkit.launch({For more information about Playwright and Playwright Test, go to the Playwright website. Check out the Playwright repo on GitHub. To share your feedback on automating and testing your website or app with Playwright, file an issue.
See also
 Use Playwright to automate and test in WebView2

Feedback
Was this page helpful?  Yes  No

Puppeteer overview
Article • 11/26/2024
The Puppeteer library provides a high-level API to control Chromium-based browsers, including Microsoft Edge, by using the DevTools Protocol.
Puppeteer launches headless browsers by default. Headless browsers don't display a user interface (UI), so you must use the command line. You can also configure Puppeteer to run full (non-headless) Microsoft Edge.
By default, when you install Puppeteer, the installer downloads a recent version of Chromium, the open-source browser that Microsoft Edge is also built upon	.
If you have Microsoft Edge installed, you can use puppeteer-core	. puppeteer-core is a lightweight version of Puppeteer that launches an existing browser installation, like Microsoft Edge. To download Microsoft Edge, go to Download Microsoft Edge Insider Channels.
Puppeteer is a Node library.
Installing puppeteer-core
You can add puppeteer-core to your website or app by using one of the following commands:
shellnpm i puppeteer-coreshellyarn add puppeteer-coreLaunch Microsoft Edge with puppeteer-core
puppeteer-core is similar to other browser-testing-frameworks, such as WebDriver. You
create an instance of the browser, open a webpage, and then manipulate the webpage by using the Puppeteer API.
To use puppeteer-core to launch Microsoft Edge:
1. puppeteer-core requires Node v8.9.0 or later. Make sure you have a compatible version of Node.js. To do this, run node -v from the command line. Also, the example below uses async/await, which is only supported in Node v7.6.0 or later.
2. In the following code sample, puppeteer-core launches Microsoft Edge, goes to https://www.microsoft.com/edge/download/insider, and saves a screenshot as example.png. Copy the following code snippet and save it as example.js:
JavaScriptconst puppeteer = require('puppeteer-core');
(async () => {   const browser = await puppeteer.launch({
    executablePath: 'C:\\Program Files (x86)\\Microsoft\\Edge 
Dev\\Application\\msedge.exe'
  });   const page = await browser.newPage();   await page.goto('https://www.microsoft.com/edge/download/insider');   await page.screenshot({path: 'example.png'});
  await browser.close();
})();3. Follow the next steps to find the executable path and then change executablePath to point to your installation of Microsoft Edge. For example, on macOS, the executablePath for Microsoft Edge Canary should be set to /Applications/Microsoft\ Edge\ Canary.app/.
4. To find the executablePath, a simple manual approach is to go to edge://version and copy the Executable path on that page.
5. Or, to programmatically find the executable path, first install the edge-paths package by running one of the following commands:
shellnpm i edge-pathsshellyarn add edge-paths6. Then, if you're using edge-paths to find the executable path, run code like the following sample. It uses the edge-paths package to programmatically find the path to your installation of Microsoft Edge on your OS:
JavaScriptconst edgePaths = require("edge-paths"); const EDGE_PATH = edgePaths.getEdgePath();7. Now that you've found the executable path (either manually or programmatically), in example.js, set executablePath: EDGE_PATH. Save your changes.
8. Run example.js from the command line:
shellnode example.jspuppeteer-core launches Microsoft Edge, goes to
https://www.microsoft.com/edge/download/insider, and saves a screenshot of the webpage. You can customize the screenshot size by calling page.setViewport().

The preceding example demonstrates basic automation and testing scenarios that you can cover using Puppeteer and puppeteer-core. For more information about Puppeteer and how it works, check out Puppeteer	.
See also
Local articles
WebDriver
Contact the Microsoft Edge DevTools team to send feedback about using Puppeteer, puppeteer-core, and Microsoft Edge.
Chrome DevTools Protocol (CDP) in Overview of WebView2 APIs
Use the Chrome DevTools Protocol (CDP) in WebView2 apps
Archive
 WebDriver (EdgeHTML)
Blog posts
 Microsoft Edge: Making the web better through more open source collaboration on Microsoft Experience Blog
Tools
Download Microsoft Edge Insider Channels
Chromium on The Chromium Projects
Node.js Puppeteer puppeteer vs. puppeteer-core page.setViewport() on Puppeteer
Protocols
 Chrome DevTools Protocol Viewer
Info
 Headless browser on Wikipedia
Feedback
Was this page helpful? 

Use WebDriver to automate Microsoft Edge
Article • 12/12/2024
WebDriver allows you to automate Microsoft Edge by simulating user interaction. Tests that use WebDriver have some advantages over JavaScript unit tests that run in the browser:
 WebDriver accesses functionality and information that's not available to JavaScript running in browsers.
 WebDriver simulates user events or OS-level events more accurately than JavaScript unit tests.
WebDriver manages multiple windows, tabs, and webpages in a single test session.
WebDriver runs multiple sessions of Microsoft Edge on a specific machine.
This article provides raw code samples, and not complete tests. This article doesn't provide a complete how-to for getting started with Selenium WebDriver, but covers only the Microsoft Edge-specific portions of the process. This includes obtaining Microsoft Edge WebDriver and setting Microsoft Edge-specific options in code.
Relationship between WebDriver and other software
To automate Microsoft Edge with WebDriver to simulate user interaction, you need three components:
Microsoft Edge.
Microsoft Edge WebDriver.
A WebDriver testing framework.
The functional relationship between these components is as follows:
ﾉ Expand table
TechnologyRoleWebDriverA W3C standard for a platform- and language-neutral wire protocol. This protocol allows out-of-process programs to remotely instruct the behavior of web browsers.Technology	RoleMicrosoft Edge	Microsoft's implementation of the WebDriver protocol specifically for Microsoft
WebDriver	Edge. Test authors write tests that use WebDriver commands that Microsoft Edge WebDriver receives. Microsoft Edge WebDriver is then responsible for communicating that command to the browser.A WebDriver	Test authors use a testing framework to write end-to-end tests and automate testing	browsers. Provides a language-specific interface that translates your code into framework	commands that are sent to Microsoft Edge WebDriver. WebDriver testing frameworks exist for all major platforms and languages. One such framework is Selenium WebDriver.Internet	An open-source implementation of the WebDriver protocol specifically for Explorer Driver	Internet Explorer. To run legacy end-to-end tests for Internet Explorer Mode, we recommend using Internet Explorer Driver.Microsoft	The previous, browser-specific driver for Microsoft Edge (EdgeHTML), which is WebDriver	also known as Microsoft Edge Legacy.
(legacy)The following sections describe how to get started with WebDriver for Microsoft Edge.
Download Microsoft Edge WebDriver
To begin writing automated tests, make sure the Microsoft Edge WebDriver version you install matches your version of Microsoft Edge. The first three parts of the four-part version number must match.
Download and install a version of Microsoft Edge WebDriver that matches your browser version, as follows:
1. Go to edge://settings/help and note your version of Microsoft Edge, a four-part number:

2. Go to Microsoft Edge WebDriver.
3. In the Downloads section of the page, click a platform button (such as x64) under a version number that matches your version number of Microsoft Edge:

The first three parts of the four-part version number must match, between Microsoft Edge and Microsoft Edge WebDriver. For example, the following versions of Microsoft Edge and Microsoft Edge WebDriver will work together, because the first three numbers are the same:
128.0.2739.79
128.0.2739.84
To download older versions, click the Go to full directory button below the Recent versions section.
4. After the download completes, extract the msedgedriver executable to your preferred location. Add the folder where the executable is located to your PATH environment variable.
You must install both a browser driver (Microsoft Edge WebDriver), and a WebDriver testing framework (such as Selenium WebDriver), as described in Choose a WebDriver testing framework below. These are separate components.
Choose a WebDriver testing framework
After downloading Microsoft Edge WebDriver, the last component you must download is a WebDriver testing framework. Test authors use WebDriver testing frameworks to write end-to-end tests and automate browsers. A WebDriver testing framework provides a language-specific interface that translates your code into commands that Microsoft Edge WebDriver runs in Microsoft Edge. WebDriver testing frameworks exist for all major platforms and languages, such as Python, Java, C#, Ruby, and JavaScript.
Microsoft Edge WebDriver can be used with any WebDriver framework. This article provides instructions for using the Selenium WebDriver framework, but you can use any library, framework, and programming language that supports WebDriver.
Selenium WebDriver is one popular implementation of a WebDriver framework. Selenium is a cross-browser automation library that's language-agnostic and testframework agnostic. This article uses Selenium WebDriver only as an illustrative example, and because it fulfills most users' needs. If you use Selenium to automate Microsoft Edge, you must use Selenium 4; Selenium 3 is no longer supported.
To accomplish the same tasks using a WebDriver testing framework other than Selenium WebDriver, consult the official documentation for your framework of choice.
Using Selenium WebDriver
One possible WebDriver framework you can use is Selenium WebDriver, which is part of the Selenium suite of tools. Selenium WebDriver is an open-source testing framework that can be used on any platform, and provides language bindings for Java, Python 3, C#, Ruby, and JavaScript.
If you use Selenium to automate Microsoft Edge, you must use Selenium 4; Selenium 3 is no longer supported.
For detailed instructions on installing Selenium for your preferred language and development environment, see Selenium's documentation about Installing a Selenium library.
Automate Microsoft Edge with WebDriver
To automate a browser using WebDriver, you must first start a WebDriver session by using a WebDriver testing framework. A WebDriver session is a single running instance of a browser that's controlled through WebDriver commands.
Start a WebDriver session to launch a new browser instance. The launched browser instance remains open until you close the WebDriver session.
The following section walks you through using Selenium 4 to start a WebDriver session with Microsoft Edge.

Automate Microsoft Edge
Selenium uses the EdgeDriver class to manage a Microsoft Edge session. The following code:
1. Starts a Microsoft Edge session.
2. Instructs Microsoft Edge to go to Bing.
3. Searches for "WebDriver".
4. Sleeps for a few seconds so you can see the results.
To get started automating Microsoft Edge with WebDriver, copy and paste the code snippet for your preferred language:

                var element = driver.FindElement(By.Id("sb_form_q"));                 element.SendKeys("WebDriver");                 element.Submit();
                Thread.Sleep(5000);             }             finally             {                 driver.Quit();
            }
        }
    }
}Manage and configure the Microsoft Edge WebDriver service
When you create a new EdgeDriver object to start a Microsoft Edge session, Selenium launches a new Microsoft Edge WebDriver process that the EdgeDriver object communicates with. The Microsoft Edge WebDriver process is closed when you call the
EdgeDriver object's Quit method. Letting each EdgeDriver object manage its own driver process can be inefficient if you have many tests, because each test must wait for a new driver process to launch. Instead, you can create a single Microsoft Edge WebDriver process and then reuse it for multiple tests.
Selenium uses the EdgeDriverService class to manage an Microsoft Edge WebDriver process. You can create an EdgeDriverService once before running your tests, and then pass this EdgeDriverService object to the EdgeDriver constructor when creating a new
EdgeDriver object. When you pass an EdgeDriverService to the EdgeDriver constructor, the EdgeDriver object will use this EdgeDriverService, instead of creating a new one.
You can also use EdgeDriverService to configure command-line options for the Microsoft Edge WebDriver process, as shown below.
The following snippet creates a new EdgeDriverService and enables verbose log output:

Configure Microsoft Edge Options
You can pass an EdgeOptions object to the EdgeDriver constructor to configure extra options for the Microsoft Edge browser process. The following section shows how to use
EdgeOptions for some common scenarios. For a full list of options that are supported, see Capabilities and EdgeOptions.
Choose Specific Browser Binaries
You can start a WebDriver session with specific Microsoft Edge binaries. For example, you can run tests using the Microsoft Edge preview channels, such as Microsoft Edge Beta, Dev, or Canary, as follows:

Pass extra command-line arguments
You can use EdgeOptions to configure command-line arguments that will be passed to the Microsoft Edge browser process when a session is created. For example, you can configure the browser to run in headless mode, as follows:

Other WebDriver installation options
Docker
If you use Docker, run the following command to download a pre-configured image that has Microsoft Edge and Microsoft Edge WebDriver pre-installed.
Consoledocker run -d -p 9515:9515 mcr.microsoft.com/msedge/msedgedriverFor more information, see the msedgedriver container on Docker Hub.
Application Guard
Trusted sites that use Microsoft Defender Application Guard can be automated using
Microsoft Edge WebDriver. Microsoft Defender Application Guard is also called Application Guard, for short.
Untrusted sites that use Application Guard cannot be automated or manipulated using Microsoft Edge WebDriver. Application Guard launches untrusted sites in a container, and this container doesn't expose the remote debugging port that Microsoft Edge WebDriver needs to communicate with the site.
Your enterprise administrator defines what are trusted sites, including cloud resources and internal networks. Sites that aren't in the trusted sites list are considered untrusted. Microsoft Edge WebDriver can automate both InPrivate windows, and sites in the trusted sites list.
For more information about Application Guard, see:
Microsoft Edge support for Microsoft Defender Application Guard.
Microsoft Defender Application Guard overview.
Opt out of diagnostic data collection
By default, Microsoft Edge WebDriver sends diagnostic data such as the status of the New Session	 WebDriver command to Microsoft. To turn off diagnostic data collection for Microsoft Edge WebDriver, set the MSEDGEDRIVER_TELEMETRY_OPTOUT environment variable to 1. For more information about the data that Microsoft Edge WebDriver collects, see Microsoft Edge WebDriver in Microsoft Edge Privacy Whitepaper.
Legacy Microsoft WebDriver for EdgeHTML
Microsoft WebDriver is the legacy WebDriver implementation for EdgeHTML-based Microsoft Edge. Microsoft WebDriver was distributed as an optional Windows component, because legacy Microsoft Edge (EdgeHTML) was updated with the OS. Microsoft WebDriver isn't compatible with the latest, Chromium-based versions of Microsoft Edge. Microsoft WebDriver is still made available for developers who have written WebDriver-based tests for UWP apps, because these rely on EdgeHTML, but Microsoft WebDriver is no longer recommended.
See WebDriver (EdgeHTML).
Troubleshooting
These are troubleshooting considerations when using WebDriver to automate Microsoft Edge.
Developer Tools Availability policy
If your IT admin has set the DeveloperToolsAvailability policy to 2, Microsoft Edge
WebDriver is blocked from driving Microsoft Edge, because the driver uses Microsoft Edge DevTools. To automate Microsoft Edge, make sure the DeveloperToolsAvailability policy is set to 0 or 1.
Using the Visual Studio template
If you're using the Microsoft Edge WebDriver template that's provided with Visual Studio, which creates a simple test project, make sure you've done the following:
Download Microsoft Edge WebDriver and make sure it's available in the PATH. Add the WebDriver framework (such as the Selenium.WebDriver NuGet package) to the project.
After you do these steps, the example test that navigates to Bing should complete successfully.
Error due to Selenium Tools for Microsoft Edge
If you get the following error when you try to create a new EdgeDriver instance:
System.MissingMethodException: 'Method not found:
'OpenQA.Selenium.Remote.DesiredCapabilities
OpenQA.Selenium.DriverOptions.GenerateDesiredCapabilities(Boolean)', see Upgrading from Selenium 3 to Selenium 4 below.
Upgrading from Selenium 3 to Selenium 4
If you used Selenium Tools for Microsoft Edge to add Microsoft Edge support to Selenium 3 browser tests, update your tests to Selenium 4, as follows:
1. Remove Selenium Tools for Microsoft Edge from your project.
2. Update your tests to use the built-in EdgeDriver and related classes that Selenium
4 provides instead. You must upgrade any existing Selenium 3 tests to Selenium 4.
To learn more about upgrading to Selenium 4, see Upgrade to Selenium 4.
3. Remove all usages of the EdgeOptions.UseChromium property. This property no longer exists in Selenium 4, because Selenium 4 supports only Microsoft Edge (Chromium browser engine).
Selenium 3 is not supported
To use WebDriver to automate Microsoft Edge, if you use Selenium, make sure you are using Selenium 4. Selenium 3 is not supported.
All new projects that use Selenium must use Selenium 4. To use WebDriver to automate Microsoft Edge, if you use Selenium, make sure you are using Selenium 4. Selenium 3 is no longer supported.
Selenium Tools for Microsoft Edge no longer used
Selenium 4 doesn't require Selenium Tools for Microsoft Edge. Selenium Tools for Microsoft Edge was for Selenium 3 only.
Don't use Selenium 4 with Selenium Tools for Microsoft Edge, because Selenium 4 already has built-in support for Microsoft Edge. If you try to use Selenium Tools for Microsoft Edge, when you try to create a new EdgeDriver instance, you get the following error: System.MissingMethodException: 'Method not found:
'OpenQA.Selenium.Remote.DesiredCapabilities
OpenQA.Selenium.DriverOptions.GenerateDesiredCapabilities(Boolean)'. If you're using Selenium 4 and get this error, remove Microsoft.Edge.SeleniumTools from your project, and make sure you're using the official EdgeOptions and EdgeDriver classes from the OpenQA.Selenium.Edge namespace.
See also
 The Selenium Browser Automation Project - Information about WebDriver in the context of Selenium, and how to write automated WebDriver tests using Selenium.
Selenium.WebDriver NuGet package.
Contact the Microsoft Edge WebDriver team to send feedback about using
WebDriver, WebDriver testing frameworks (such as Selenium), and Microsoft Edge.

Feedback
Was this page helpful? 

Use Internet Explorer Driver to automate IE mode in Microsoft Edge
Article • 06/14/2023
If you have business-critical legacy websites or apps, you may need to test your content in Internet Explorer (IE) mode in Microsoft Edge. This article describes how to get started with Internet Explorer Driver (IEDriver) to automate IE mode in Microsoft Edge.
IE mode in Microsoft Edge is a feature for organizations that still need Internet Explorer 11 for backward compatibility for legacy websites or apps. To learn more about IE mode, read What is Internet Explorer (IE) mode?
Starting June 15, 2022, Internet Explorer 11 will no longer be supported on certain versions of Windows 10. For more information, read Internet Explorer 11 desktop app retirement FAQ.
Download Internet Explorer Driver (IEDriver)
To begin automating tests in IE mode in Microsoft Edge, download IEDriver. Make sure that the version of IEDriver that you download is 4.0.0.0 or greater.
Required Configuration
To configure IEDriver, Windows, and Microsoft Edge correctly, complete the requirements for Selenium's required configuration.
Place the driver executable in the PATH
The driver executable needs to be placed in the PATH; see IE Driver Server. The top of that page reads: "The standalone server executable must be downloaded from the Downloads page and placed in your PATH."
If the driver location isn't included in the PATH, you must set the driver location using the Java system property webdriver.ie.driver or some other way.
Automate IE mode in Microsoft Edge
The following sections walk you through using Selenium to automate IE mode in Microsoft Edge.
This article provides instructions for using the Selenium framework, but you can use any library, framework, and programming language that supports WebDriver. To accomplish the same tasks using another framework, consult the documentation for your framework of choice.
To launch Microsoft Edge in IE mode with IEDriver:
1. Define InternetExplorerOptions with additional properties that point to the Microsoft Edge browser.
2. Start an instance of InternetExplorerDriver and pass it InternetExplorerOptions.
IEDriver launches Microsoft Edge and then loads your web content in IE mode.
The next section shows the complete sample, and then the subsequent sections focus on each of the main steps that are listed above.
The complete sample
The following sample launches Microsoft Edge in IE mode, navigates to bing.com, and then searches for "WebDriver".

{     class Program
    {         static void Main(string[] args)
        {             var ieOptions = new InternetExplorerOptions();             ieOptions.AttachToEdgeChrome = true;             //change the path accordingly             ieOptions.EdgeExecutablePath = "C:/Program Files 
(x86)/Microsoft/Edge/Application/msedge.exe";
            var driver = new InternetExplorerDriver(ieOptions);             driver.Url = "https://bing.com";
            driver.FindElement(By.Id("sb_form_q")).SendKeys("WebDriver");             driver.FindElement(By.Id("sb_form")).Submit();
            driver.Quit();
        }
    }
}The following sections explain the steps in this sample in more detail.
Define InternetExplorerOptions with additional properties for Microsoft Edge
Define InternetExplorerOptions with additional properties that point to the Microsoft Edge browser.

Start IEDriver
Start IEDriver. IEDriver launches Microsoft Edge and then loads your web content in IE mode.

Known limitations
This section covers known scenarios that previously worked with IEDriver and the IE11 desktop application but require workarounds when using IEDriver with Microsoft Edge in IE mode.
Opening a new window
If your test code creates a new browser window using one of the following methods, you may need to add a short wait operation afterwards to ensure that IEDriver has detected the new window:
Opening a new window by calling window.open from <script> in the page.
	Opening a new window by using the WebDriver New Window	 command.
To ensure the new window has been created successfully and IEDriver has detected it, you must continuously check the result of the Get Window Handles command until it contains a handle to the new window.
The following sample demonstrates a possible way to wait for new window handles to be detected when opening new windows.

After the Click method is called on a button that opens a new window, the test code must wait until driver.WindowHandles contains the new window handle.
C#var initialHandleCount = driver.WindowHandles.Count; driver.FindElement(By.Id("<Id of the button that will open a new window>")).Click(); var newHandles = driver.WindowHandles;
while (newHandles.Count == initialHandleCount)
{     newHandles = driver.WindowHandles;
}Creating tabs and switching between tabs
If your test code switches between multiple tabs in the same Microsoft Edge window, tabs that become inactive may not be included in the list of handles returned by Get Window Handles. In the Internet Explorer 11 desktop application, IEDriver will return handles for all of the tabs in IE, regardless of activation state.
When using Microsoft Edge in IE mode, if your test switches focus away from a certain tab and you would like to be able to switch back to that tab later, you must store a copy of the tab's window handle.
See also
 Use WebDriver to automate Microsoft Edge - An overview of automating Microsoft Edge with the WebDriver protocol.
 Selenium documentation - Information about WebDriver in the context of Selenium, and how to write automated WebDriver tests using Selenium.
 Contact the Microsoft Edge DevTools team to send feedback about using
WebDriver, WebDriver testing frameworks (such as Selenium), and Microsoft Edge.

Feedback
Was this page helpful? 
Capabilities and EdgeOptions
Article • 05/12/2023
Capabilities are options that you can use to customize and configure an EdgeDriver session. To learn about starting a new EdgeDriver session, see Automating Microsoft Edge. This article describes all supported capabilities for Microsoft Edge and provides details about passing the capabilities to EdgeDriver sessions.
Capabilities are passed to a WebDriver session as a JSON map, but it is not necessary or recommended to set them this way. WebDriver testing frameworks (such as Selenium) provide language bindings which typically have convenience methods so you don't need to configure the JSON map yourself. For example, Selenium configures capabilities through the EdgeOptions class.
To learn more about how to configure capabilities, consult the documentation for your preferred WebDriver testing framework. For more information, see Choose a WebDriver testing framework.
Using the EdgeOptions class
Create an instance of EdgeOptions, which provides convenience methods to set Microsoft Edge-specific capabilities. After you configure the EdgeOptions object, pass EdgeOptions into the EdgeDriver constructor.
C#var options = new EdgeOptions(); options.AddExtensions("/path/to/extension.crx"); var driver = new EdgeDriver(options);To use capabilities that don't have an associated convenience method, use the
AddAdditionalEdgeOption method. You must pass the full name of the capability and a value with the correct type. For the full list of accepted capabilities and value types, see EdgeOptions object.
C#options.AddAdditionalEdgeOption("wdpAddress", "remotehost:50080");Recognized Capabilities
For standard capabilities that EdgeDriver accepts, see Selenium documentation and the W3C WebDriver standard	. This article only lists capabilities specific to Microsoft Edge.
EdgeOptions object
Most Microsoft Edge-specific capabilities are exposed through the EdgeOptions object. In some languages, the capabilities are implemented by the EdgeOptions class. In other languages, the capabilities are stored under the ms:edgeOptions dictionary in DesiredCapabilities.
ﾉ Expand table
CapabilityTypeDetailsargslist of stringsList of command-line arguments to pass to the Microsoft Edge process on launch. Arguments with an associated value should be separated by an = sign (for example, ['start-maximized',
'user-data-dir=/tmp/temp_profile']). If you're launching a WebView2 app, then these arguments are passed to your app instead of the underlying Microsoft Edge browser process. To pass arguments to the browser process when launching a WebView2 app, use webviewOptions.additionalBrowserArguments instead.binarystringPath to the Microsoft Edge binary to use (on macOS, the path should be the actual binary, not just the app. for example,
/Applications/Microsoft Edge.app/Contents/MacOS/Microsoft Edge).debuggerAddressstringAn address of a debugger server to which to connect, in the form of hostname/ip:port, for example 127.0.0.1:38947.detachbooleanDefault value = false. If false, Microsoft Edge quits when the WebDriver service shuts down, even if the WebDriver local end hasn't closed the session. If true, Microsoft Edge only quits if the
WebDriver local end closes the session. If true, and the WebDriver local end doesn't close the session, EdgeDriver doesn't clean up the temporary user data folder used by the Microsoft Edge instance.excludeSwitcheslist of stringsList of Microsoft Edge command line switches to exclude that EdgeDriver by default passes when starting Microsoft Edge.
Avoid the -- prefix for switches.
CapabilityTypeDetailsextensionslist of stringsA list of extensions to install on startup. Each item in the list should be a base-64 encoded packed extension (.crx).localStatedictionaryA dictionary with each entry consisting of the name of the preference and the value. The preferences are applied to the Local State file in the user data folder.minidumpPathstringDirectory to store Microsoft Edge minidumps. (Supported only on Linux.)mobileEmulationdictionaryA dictionary with either a value for deviceName, or values for deviceMetrics and userAgent.perfLoggingPrefsdictionaryAn optional dictionary that specifies performance logging preferences. For more information, see perfLoggingPrefs object.prefsdictionaryA dictionary with each entry consisting of the name of the preference and the value. The preferences are only applied to the user profile in use. For examples, see the Preferences file in the user data folder of Microsoft Edge.wdpAddressstringAn address of a Windows Device Portal server to connect to, in the form of hostname/ip:port, for example 127.0.0.1:50080. For more information, see Remote Debugging - Windows 10 devices.wdpPasswordstringOptional password to use when connecting to a Windows Device Portal server. Required if the server has authentication enabled.wdpUsernamestringOptional user name to use when connecting to a Windows Device Portal server. Required if the server has authentication enabled.wdpProcessIdintegerThe required process ID to use if attaching to a running
WebView2 UWP app, for example 36590. This information can be found in browserProcessId on http://<Device Portal URL>/msedge.webviewOptionsdictionaryAn optional dictionary that can be used to configure the WebView2 environment when launching a WebView2 app. For more information, see webviewOptions object.windowsAppstringApplication user model ID of a Microsoft Edge app package to launch, for example
Microsoft.MicrosoftEdge.Stable_8wekyb3d8bbwe!MSEDGE. Use windowsApp instead of binary when connecting to a Windows 10X device or emulator using Windows Device Portal.windowTypeslist of stringsA list of window types that are displayed in the list of window handles. For access to Android webview elements, includeCapabilityTypeDetailswebview in the list.perfLoggingPrefs object
The perfLoggingPrefs dictionary has the following format. All keys are optional.
ﾉ Expand table
KeyTypeDefault valueDetailsbufferUsageReportingIntervalpositive integer1000The requested number of milliseconds between DevTools trace buffer usage events. For example, if 1000, then once per second, DevTools reports how full the trace buffer is. If a report indicates the buffer usage is 100%, a warning is issued.enableNetworkbooleantrueTo collect (or not collect) events from Network domain.enablePagebooleantrueTo collect (or not collect) events from Page domain.traceCategoriesstring(empty)A comma-separated string of Microsoft Edge tracing categories for which trace events should be collected. An unspecified or empty string disables tracing.webviewOptions object
The webviewOptions dictionary is used to configure the WebView2 environment when launching a WebView2 app. It has the following format. All keys are optional.
ﾉ Expand table
KeyTypeDefault valueDetailsbrowserExecutableFolderstring(empty)Path to a folder containing a fixed version WebView2 runtime to use. For more information about using a fixed version runtime distribution with WebView2, seeKeyTypeDefault valueDetailsDistribute a WebView2 app and the WebView2 Runtime.userDataFolderstring(empty)Path to the user data folder that WebView2 will use. If userDataFolder isn't specified, Microsoft Edge WebDriver will create a temporary user data folder. For more information about managing the user data folder with WebView2, see Manage the user data folder.additionalBrowserArgumentslist of stringsList of command-line arguments that WebView2 will pass to the browser process on launch. Arguments with an associated value should be separated by an = sign (for example, ['start-maximized', 'loglevel=0']).releaseChannelPreferencestringPreferred WebView2 evergreen runtime distribution to use. Can be "stable" or "canary".Returned capabilities
The following list contains all of the Microsoft Edge-specific capabilities that EdgeDriver returns when you create a new session.
ﾉ Expand table
CapabilityTypeDetailsmsedge.msedgedriverVersionstringThe version of EdgeDriver.msedge.userDataDirstringThe path to the user data folder used by the Microsoft Edge instance.
Feedback
Was this page helpful? 
Contact the Microsoft Edge WebDriver team
Article • 03/21/2022
Send your feedback to help improve Microsoft Edge WebDriver. Contact the Microsoft Edge WebDriver team to submit feature requests or bug reports of issues about automating Microsoft Edge using WebDriver and WebDriver testing frameworks.
Submit feature requests or bugs in the Edge WebDriver feedback repo
To report a bug or to request a new feature in Microsoft Edge WebDriver, use the Edge WebDriver repo. This repo is a place for developers to share tips or best practices, report feedback, or search for existing issues with Microsoft Edge WebDriver.
File a documentation issue
To report a bug with the Microsoft Edge WebDriver documentation, in the Feedback section at the bottom of an article, select the This page button.

Feedback
Was this page helpful?  Yes  No

webhint extension for Visual Studio Code
Article • 02/13/2023
Note: As of April 2022, the webhint extension for Visual Studio Code is no longer being maintained. See Microsoft Edge DevTools extension for Visual Studio Code.
webhint is a customizable linting tool, to improve the accessibility, performance, cross-browser compatibility, PWA compatibility, and security of your site. The webhint extension checks your code for best practices and common errors.

Development tips for Microsoft Edge
Article • 10/08/2024
There are many tips and tricks to be aware of when building websites or web apps that work in Microsoft Edge, including:
 Testing for coming changes that could impact compatibility of your website with Microsoft Edge.
Moving users to Microsoft Edge from Internet Explorer.
Configuring tracking prevention in Microsoft Edge.
Detecting Microsoft Edge from your website.
Developing experiences for the sidebar in Microsoft Edge.
Detecting Windows 11 by using User-Agent Client Hints.
Customizing the password reveal button.
Viewing formatted JSON responses and files in browser tabs.
These aspects of developing for, and with, Microsoft Edge are described below.
Site compatibility-impacting changes coming to Microsoft Edge
This article lists the schedule of changes for Microsoft Edge and the Chromium project. It also highlights any differences and high-impact changes which the Microsoft Edge team is tracking especially closely.
The web platform is a collection of technologies used for building webpages, including HTML, CSS, JavaScript, and many other open standards. The web platform constantly evolves to improve the user experience, security, and privacy. In some cases, changes may affect the functionality of existing webpages.
See Site compatibility-impacting changes coming to Microsoft Edge.
Move users to Microsoft Edge from Internet Explorer
When an Internet Explorer user visits an incompatible public website, the user may be informed by the website that the website is incompatible with Internet Explorer, and that the user must switch to a more up-to-date browser in order to use the website properly.
To minimize disruptions, Microsoft Edge supports a new capability that automatically redirects users. When an Internet Explorer user goes to a website that's incompatible with Internet Explorer, Windows can automatically redirect the user to Microsoft Edge.
Only websites that are part of the Need Microsoft Edge list are redirected.
See Move users to Microsoft Edge from Internet Explorer.
Tracking prevention in Microsoft Edge
The tracking prevention feature in Microsoft Edge protects users from online tracking by restricting the ability of trackers to access browser-based storage as well as the network.
The tracking prevention feature is built to uphold the Microsoft Edge browser privacy promise, while also ensuring that there is no impact by default to website compatibility or the economic viability of the web.
See Tracking prevention in Microsoft Edge.
Detect Microsoft Edge from your website
Microsoft Edge enables your website to retrieve user agent information. You use the user agent information to present webpages correctly for each user's browser. Browsers provide mechanisms for websites to detect browser information such as brand, version number, and host operating system.
 User-Agent Client Hints are an improved mechanism for retrieving browser information.
 User-Agent strings are legacy; they are outdated and have a history of causing website compatibility problems.
You may want to provide different experiences to users based on their browser. If you include steps about how to configure Microsoft Edge or another browser for use with your site, you may want to detect the browser and then show the appropriate content.
See Detect Microsoft Edge from your website.
Develop experiences for the sidebar in Microsoft Edge
The sidebar in Microsoft Edge is a persistent pane located on the side of the browser, which coexists with the primary content of the browser. The sidebar allows users to easily access popular websites and utilities alongside their browser tabs. The content in the sidebar augments the user's primary task by enabling side-by-side browsing and minimizing the need to switch contexts between browser tabs. With the sidebar in Microsoft Edge, users can access the productivity tools they need, while staying in their workflow.
As a developer, you can leverage the sidebar for your own experiences in two ways:
By adapting your existing Progressive Web App (PWA) to run in the sidebar.
By making use of the Sidebar API in your Microsoft Edge extension.
See Develop experiences for the sidebar in Microsoft Edge.
Detect Windows 11 using User-Agent Client
Hints
Websites can differentiate between users on Windows 11 and Windows 10 by using User-Agent Client Hints (UA-CH). The User-Agent Client Hints format is used by browsers to provide user agent information to websites.
Websites can use the user agent information that's sent from the browser to detect information such as:
The browser brand.
The browser version number.
The device platform on which the browser is running.
There are two approaches for sites to access user agent information:
User-Agent strings (legacy).
User-Agent Client Hints (recommended).
See Detect Windows 11 using User-Agent Client Hints.
Customize the password reveal button
The password input control in Microsoft Edge includes a password reveal button. To make sure that the password is entered correctly, a user can click the password reveal button or press Alt+F8, to show the characters in the password field. You can remove the password reveal control, or customize the control styling.
See Customize the password reveal button.
Display regional versions of your site, based on OS settings
Microsoft Edge provides operating system (OS) regional preference information to help website authors create regional experiences on their website, when viewing your site using Microsoft Edge. This feature allows website authors to deliver value to users who specifically change their regional preferences in the OS to reflect their personal preferences.
See Display regional versions of your site, based on OS settings.
View formatted JSON responses or files
Microsoft Edge includes the JSON viewer, a tool that automatically reformats and highlights the JSON data shown in a browser to make it easier to read.
Formatting and highlighting JSON data is useful because sometimes a web server responds to HTTP requests by returning data encoded as JSON. JSON data can be difficult to read when it's formatted as a single long, concatenated line of text. The same can occur when opening a JSON file from disk. The JSON viewer reformats JSON server responses and local files, and indicates any lines that have syntax errors.
See View formatted JSON responses or files.
Sign up for the Ad Selection API
The Ad Selection API provides user-relevant ads on your site without using third-party cookies. The Ad Selection API can be used by:
 Sellers running a supply-side platform (SSP), who can use the API to provide higher-quality ads for their publishers.
 Buyers running a demand-side platform (DSP), who can use the API to improve the effectiveness of advertising campaigns.
See Sign up for the Ad Selection API.

Feedback
Was this page helpful?  Yes  No
Microsoft Edge 133 web platform release notes (Feb. 2025)
Article • 02/04/2025
The following are the new web platform features and updates in Microsoft Edge 133, which releases on February 6, 2025.
To stay up-to-date and get the latest web platform features, download an Insiders version of Microsoft Edge, such as Canary, Dev, or Beta; see Become a Microsoft Edge Insider.
Edge DevTools
For Edge DevTools, see What's New in Microsoft Edge DevTools.
WebView2
For WebView2, see Release Notes for the WebView2 SDK.
Web platform features
Enabled features
Animation.overallProgress
Adds an overallProgress property to the Animation JavaScript class.
This property provides a convenient and consistent representation of how far along an animation has advanced across its iterations and regardless of the nature of its timeline.
Atomics.pause
Adds the Atomics.pause method, to hint to the CPU that the current code is executing a spinlock.
CSP hash reporting for scripts
Complex web applications often need to keep a record of the subresources that they download, for security purposes. In particular, upcoming industry standards and best practices (such as PCI-DSS v4) require that web applications keep an inventory of all the scripts they download and execute.
This feature builds on Content Security Policy (CSP) and the Reporting API to report the URLs and hashes of all the script resources that the document loads.
CSS :open pseudo-class
The :open pseudo-class matches <dialog> and <details> when they are in their open state, and matches <select> and <input> when they are in modes which have a picker and the picker is showing.
CSS scroll state container queries
Use container queries to style descendants of containers based on their scroll state.
The query container is either a scroll container, or an element affected by the scroll position of a scroll container. The following states can be queried:
stuck: A sticky positioned container is stuck to one of the edges of the scroll box.
snapped: A scroll snap aligned container is currently snapped horizontally or
vertically. scrollable: Whether a scroll container can be scrolled in a queried direction.
A new container-type: scroll-state lets containers to be queried.
For example:
css#sticky {   position: sticky;
  container-type: scroll-state;
}
@container scroll-state(stuck: top) {
  #sticky-child { font-size: 75% }
}CSS advanced attr() function
Implement the augmentation to attr() that's specified in CSS Level 5, which allows types besides <string>, and allows usage in all CSS properties (besides pseudo-element content).
Example:
HTML<style>   div {      background-color: attr(data-foo type(<color>), red);
  }
</style>
<div data-foo="blue">test</div>CSS text-box , text-box-trim , and text-box-edge properties
To achieve optical balance of text content, the text-box-trim and text-box-edge properties, along with the text-box shorthand property, make finer control of vertical alignment of text possible.
The text-box-trim property specifies the sides to trim (above or below). The text-boxedge property specifies how the edge should be trimmed.
These properties allow you to control vertical spacing precisely, by using the font metrics.
ideographic and ideographic-ink, two values for the text-box-edge property for Chinese, Japanese, and Korean (CJK) characters are deferred to a future release.
DOM state-preserving Move
This feature adds a DOM primitive (moveBefore) that allows moving an element around in a DOM tree, without resetting the element's state. This function is available on ParentNode nodes, such as Element, Document, and DocumentFragment.
When moving an element instead of removing or inserting an element, state such as the following is preserved:
<iframe> elements remain loaded.
The active element retains focus.
Popovers and dialogs remain open.
CSS transitions and animations continue to run.
Expose the attributionsrc attribute on <area>
For Attribution Reporting, the attributionsrc attribute was already unintentionally processed on <area> elements, due to code shared with <a>, which intentionally supported that attribute.
For completeness, the attribute on <area> is exposed with identical syntax and semantics to <a>, and without changing the previous processing. When an <area> tag with an attributionsrc attribute is navigated, the foreground request may register navigation sources and, if the attribute is non-empty, one or more background requests will likewise be able to register navigation sources.
Expose coarsened cross-origin renderTime in element timing and Largest Contentful Paint (LCP) regardless of the Timing-Allow-Origin (TAO) header
All element-timing and LCP performance entries would have a non-zero renderTime, even if they are cross-origin without a Timing-Allow-Origin header. All presentation timestamps (renderTime, paint timing start time, and event timing end time) will be coarsened to a multiple of 4ms, to reduce the risk of reading cross-origin image information.
The FileSystemObserver interface
The FileSystemObserver interface notifies websites of changes to the file system. Sites observe changes to files and directories, to which the user has previously granted permission, in the user's local device (as specified in WICG/file-system-access) or in the Bucket File System (as specified in whatwg/fs), and are notified of basic change info, such as the change type.
Multiple import maps
Import maps currently must load before any ES module, and there can only be a single import map per document. That makes import maps fragile and potentially slow to use in real-life scenarios: any module that loads before import maps breaks the entire app, and in apps with many modules, import maps become a large blocking resource, because the entire map for all possible modules needs to load first.
This feature enables multiple import maps per document, by merging import maps in a consistent and deterministic way.
Popover invoker and anchor positioning improvements
This change corresponds to the following related set of changes:
1. Add an imperative way to set invoker relationships between popovers:
popover.showPopover({source}).
2. Invoker relationships create implicit anchor element references.
A popover nested inside an invoker shouldn't re-invoke it Clicking on a nested popover doesn't re-invoke the same popover.
In the following example, clicking the button properly activates the popover. However, clicking on the popover itself after that should not close the popover. Previously, the popover was closed this case, because the popover click bubbled up to the <button> and activated the invoker, which closed the popover.
HTML<button popovertarget=foo>Activate
  <div popover id=foo>Clicking me shouldn't close me</div>
</button>Resource timing: revert responseStart change and introduce firstResponseHeadersStart Resource timing:
responseStart returns the first response, either early hints (interim) or final.
The final response headers (2xx/4xx/5xx) time is exposed as finalResponseHeadersStart.
Storage access headers
Offers an alternate way for authenticated embeds to opt in for unpartitioned cookies. These headers indicate whether unpartitioned cookies are (or can be) included in a given network request. These headers also allow servers to activate storage-access permissions that they've already been granted. Providing an alternative way to activate the storage-access permission allows usage by non-iframe resources, and can reduce latency for authenticated embeds.
Support creating a ClipboardItem with Promise<DOMString>
ClipboardItem is the input to the async clipboard write method. The ClipboardItem constructor now accepts string values in addition to BLOBs. ClipboardItemData can be a BLOB; a string; or a Promise that resolves to either a BLOB or a string.
Web Authentication API: the getClientCapabilities() method of PublicKeyCredential
The getClientCapabilities() method enables determining which WebAuthn features are supported by the user's client. This method returns a list of supported capabilities, allowing you to tailor authentication experiences and workflows based on the client's specific functionality.
WebAssembly memory64 proposal
The memory64 proposal adds support for linear WebAssembly memories larger than 2^32 bits. This proposal provides no new instructions, but instead extends the existing instructions to allow 64-bit indexes for memories and tables.
WebGPU: 1-component vertex formats (and unorm8x4-bgra )
Adds additional vertex formats that weren't present in the initial release of WebGPU, due to lack of support, or old macOS versions that are no longer supported by any browser. The 1-component vertex formats let the application request only the necessary data, when previously, the application had to request at least 2x more data for 8-bit and
16-bit data types. The unorm8x4-bgra format makes it slightly more convenient to load BGRA-encoded vertex colors while keeping the same shader.
X25519 algorithm of the Web Cryptography API
The X25519 algorithm provides tools to perform key agreement by using the X25519 function that's specified in RFC7748. The X25519 algorithm identifier can be used in the SubtleCrypto interface to access the implemented operations: generateKey,
importKey, exportKey, deriveKey, and deriveBits.
popover=hint
The Popover API specifies the behavior for two values of the popover attribute: auto and manual. This feature describes a third value, popover=hint. Hints, which are most often associated with tooltip-type behaviors, have slightly different behaviors. The main difference is that a hint is subordinate to autos when opening nested stacks of popovers. So, it is possible to open an unrelated hint popover while an existing stack of auto popovers stays open. The canonical example is that a <select> picker is open (popover=auto) and a hover-triggered tooltip (popover=hint) is shown. That action does not close the <select> picker.
Deprecated and removed features
Deprecate WebGPU limit maxInterStageShaderComponents
The maxInterStageShaderComponents limit is being removed, due to a combination of factors:
 Redundancy with maxInterStageShaderVariables: This limit already serves a similar purpose: controlling the amount of data passed between shader stages.
 Minor discrepancies: There are slight differences in how the two limits are calculated, but these differences are minor, and can be effectively managed within the maxInterStageShaderVariables limit.
 Simplification: Removing maxInterStageShaderComponents streamlines the shader interface and reduces complexity for developers. Instead of managing two separate limits (that both apply simultaneously, but with subtle differences), you can focus on maxInterStageShaderVariables, which is more appropriately named, and comprehensive.
Remove <link rel=prefetch> five-minute rule
Previously, when a resource was prefetched by using <link rel=prefetch>, its cache semantics (specifically, max-age and no-cache) were ignored for the first use within 5 minutes, to avoid refetching. Now, this special case has been removed, and normal HTTP cache semantics are used.
This means that to benefit from <link rel=prefetch>, you need to include appropriate caching headers (that is, Cache-Control or Expires).
This also affects the nonstandard <link rel=prerender>.
This fixes a bug with speculation rules prefetch, where non-2xx responses were cached. This doesn't require caching headers for speculation rules prefetch, because such headers are intended for navigational prefetching, and thus have different caching needs than the normal HTTP cache.
Origin trials
The following are new experimental APIs which you can try on your own live website for a limited time. To learn more about origin trials, see Use origin trials in Microsoft Edge.
To see the full list of available origin trials, see Microsoft Edge Origin Trials.
Microsoft Edge-only origin trials
Digital Goods API
Expires on 3/31/2025.
The Digital Goods API allows a web application to get information about its digital products and the user's purchases managed by a digital store. The user agent abstracts connections to the store, and the Payment Request API is used to make purchases.
Explainer
Feedback
Register
Web App LocalFolder Access
Expires on 3/31/2025.
Allows Microsoft Store-installed Progressive Web Apps (PWAs) to access file content that was previously stored in the WinRT ApplicationData.LocalFolder folder by an earlier, UWP version of the application.
Explainer
Feedback
Register
HTML+IDL handwriting attribute
Expires on 6/14/2025.
Granular per-document and per-element control over which content should allow or disallow handwriting input.
Explainer
Feedback
Register
Acquisition Info API Expires on 6/30/2025.
Supports 3P acquisition attribution for Progressive Web Apps (PWAs) that were acquired through an app store or directly from the browser.
Explainer
Feedback
Register
New Chromium origin trials
Reference Target for Cross-Root ARIA
Expires on 6/10/2025.
The Reference Target API allows ID-based references, particularly from elements and
ARIA properties, to refer to elements inside shadow roots, which are frequently used in Web Components. This fills a frequently-cited gap in Web Components accessibility.
Explainer
Feedback
Register
DisableThirdPartyStoragePartitioning3
Expires on 9/16/2025.
This is a general-purpose deprecation trial that allows a top-level site to opt into unpartitioned storage, service workers, and communication APIs, for third-party contexts that are embedded in its site. This gives sites more time for testing and migrating to solutions that don't require partitioned storage.
Explainer
Feedback
Register
Background Page Freeze Opt-Out
Expires on 9/16/2025.
This trial allows a page to opt-out from background page freezing. In Chromium 133, a tab that was backgrounded for more than 5 minutes may be frozen if it is CPU-intensive and Energy Saver is active, unless opted-out. An origin trial opt-out is provided while new Web APIs are being developed, to opt-out pages for specific use cases.


Feedback
Was this page helpful?  Yes  No

Site compatibility-impacting changes coming to Microsoft Edge
Article • 06/21/2024
This article lists the schedule of changes for Microsoft Edge and the Chromium project. It also highlights any differences and high-impact changes which the Microsoft Edge team is tracking especially closely.
The web platform is a collection of technologies used for building webpages, including HTML, CSS, JavaScript, and many other open standards. The web platform constantly evolves to improve the user experience, security, and privacy. In some cases, these changes may affect the functionality of existing webpages.
For functionality and compatibility reasons, Microsoft Edge adopts nearly all of the Chromium project's changes to the web platform. However, Microsoft retains full control of the Microsoft Edge browser and may defer or reject changes. The Microsoft Edge team decides if the change benefits browser users.
For information about upcoming Chromium project web platform changes, see Chrome Platform Status Release timeline.
Check this article often as the Microsoft Edge team updates this article as thinking evolves, timelines solidify, and new changes are announced.
Differences from the Chromium schedule, and high-impact changes
This table lists:
 Changes where the rollout schedule for Microsoft Edge differs from the upstream Chromium project.

ChangeStable channelExperimentationAdditional informationInsecure downloads over
HTTPFuture release (TBD)When a user tries to download potentially dangerous content from an HTTP site, the user will receive a UI warning, such as "Insecure download blocked." The user will still have an option to proceed and download the item. Admins can use the
InsecureContentAllowedForUrls policy to specify HTTP sites for which the warning will be suppressed. Admins can use the
InsecureDownloadWarnings feature flag to test the impact of this upcoming feature.Deprecate unload eventFuture release (TBD)Introduces a new Permission-Policy to allow creating unload event listeners. The default policy is allow, but the default policy will gradually be migrated to deny, such that unload handlers stop firing on pages, unless a page explicitly opts in to re-enable them. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see Intent to Deprecate:
Deprecate unload event.Removal of cross-origin subframe JavaScript dialogsFuture release (TBD)Removes window.alert, window.prompt, and window.confirm from cross-origin iframes. This change is happening in the Chromium project, on which Microsoft
Edge is based. For more information, see
Intent to Remove: Cross origin subframe JS Dialogs.Deprecate textprediction attributev133Removes support for the textprediction HTML attribute, which is a nonstandard attribute that's used to enable or disablethe browser-based Text Prediction feature for long-form text inputs. Instead, use the standardized writingsuggestions attribute, which functions similarly to
textprediction, but also applies to other
writing-assistance features that browsers may provide. Sites that explicitly set textprediction to true or false can
instead set writingsuggestions to the same value. For more information, see

ChangeStable channelExperimentationAdditional informationWriting suggestions in the HTML specification.Removal of Token Binding supportv127, v130Token Binding uses cryptographic certificates on both ends of the TLS connection in an attempt to close the security gap of bearer tokens, which may be lost or stolen. The enterprise policy AllowTokenBindingsForUrls will no longer be supported, as of v127. Support for the Token Binding protocol will be removed in v130.Removal of mutation eventsv127Removes support for mutation events in
Chromium. Use the MutationObserver API instead. See Intent to Deprecate:
Mutation Events.Removal of Web
SQLv124Fully removes Web SQL support. In prior releases, Web SQL support was disabled by default but could be re-enabled via the WebSQLAccess policy. After this change, there is no longer any mechanism to enable Web SQL support. This change is happening in the
Chromium project, on which Microsoft
Edge is based. For more information, see
Intent to Deprecate and Remove Web
SQL.Added support for AVIF and AV1 file formatsv121Microsoft Edge now supports the AVIF and AV1 file formats, which offer better compression and higher quality images and videos. Users can enjoy faster loading times and better quality media on websites.Ignore modifications to document.domain by defaultv119The document.domain property historically could be set to relax the same-origin policy and allow subdomains from a site to interact. This behavior will be disabled by default such that setting the document.domain property will have no
effect. For more information and workarounds, see Microsoft Edge will disable modifying document.domain.Notation for browser versions
This article uses the following notation for browser release numbers.
ﾉ Expand table
NotationDescriptionv123The feature or change ships in Microsoft Edge version 123.v123 (Chrome+1)The feature or change ships in Microsoft Edge version 123, which is one release after the feature or change ships in Chrome version 122.v123 (Chrome+2)The feature or change ships in Microsoft Edge version 123, which is two releases after the feature or change ships in Chrome version 121.Beta v123The feature or change ships in version 123 of the Beta preview channel of Microsoft Edge.Dev v123The feature or change ships in version 123 of the Dev preview channel of Microsoft Edge.Canary v123The feature or change ships in version 123 of the Canary preview channel of Microsoft Edge.
Feedback
Was this page helpful?  Yes  No

Move users to Microsoft Edge from Internet Explorer
Article • 06/14/2023
Many modern websites have designs that are incompatible with Internet Explorer. When an Internet Explorer user visits an incompatible public website, the user may be instructed by the website that the website is incompatible with Internet Explorer, and that the user must switch to a more modern browser in order to use the website.
To minimize disruptions, Microsoft Edge supports a new capability that automatically redirects users. When an Internet Explorer user goes to a website that's incompatible with Internet Explorer, Windows can automatically redirect the user to Microsoft Edge.
Only websites that are part of the Need Microsoft Edge list are redirected.
Redirection experience
On redirection to Microsoft Edge, the user is shown the one-time dialog in the next screenshot. The dialog provides the user with the following information:
It explains why the website is being redirected.
It prompts the user for consent to copy browsing data and preferences from Internet Explorer to Microsoft Edge.
The following browsing data is imported:
Favorites
Passwords
Search engines
Open tabs
History
Settings
Cookies
The Home Page
Browsing notification and prompt to import data and preferences:

If the user doesn't consent by selecting the Always bring over my browsing data and preferences from Internet Explorer checkbox, the user may choose Continue browsing to continue the browsing session.
Finally, a website incompatibility banner is displayed under the address bar for each redirection. An example of a website incompatibility banner is displayed in following figure.

The website incompatibility banner provides the following details to the user.
Recommends that the user to switch to Microsoft Edge.
Offers to set Microsoft Edge as the default browser.
Gives the user the option to explore Microsoft Edge.
When a website is redirected from Internet Explorer to Microsoft Edge, one of the following actions occurs.
If the active Internet Explorer tab had no prior content, it is closed.
 If the active Internet Explorer tab had prior content, it navigates to the Microsoft support page that explains why the website was redirected to Microsoft Edge
Request an update to the Internet Explorer compatibility list
The Internet Explorer compatibility list is an XML file on microsoft.com. The list is regularly updated in response to user and website developer requests to have websites added or removed. Updates to the list are automatically downloaded to user machines.
Email the following information to ietoedge@microsoft.com for your website to be added or removed from the Internet Explorer compatibility list.
Owner name
Corporate title
Email address
Company name
Street address
Website address
The Internet Explorer compatibility list is usually updated within a week. If you experience wait times greater than one week, we may be working through an outage.


Tracking prevention in Microsoft Edge
Article • 09/24/2024
The tracking prevention feature in Microsoft Edge protects users from online tracking by restricting the ability of trackers to access browser-based storage as well as the network.
The tracking prevention feature is built to uphold the Microsoft Edge browser privacy promise, while also ensuring that there is no impact by default to website compatibility or the economic viability of the web.
See also:
Welcome to Microsoft Edge - A smarter way to protect
Microsoft Edge Privacy Whitepaper
Levels of tracking prevention
Microsoft Edge currently offers users three levels of tracking prevention, which are selected by navigating to

1. Basic - The least restrictive level of tracking prevention that is designed for users who enjoy personalized advertisements and who don't mind being tracked on the web. Basic only protects users against malicious trackers such as fingerprinters and cryptominers.
2. Balanced (Default) - The default level of tracking prevention that is designed for users who want to see less personalized advertisements while minimizing the risk of compatibility issues as they browse the web. Balanced aims to block trackers from sites that users never engage with.
3. Strict - The most restrictive level of tracking prevention that is designed for users who are okay trading website compatibility for maximum privacy.
The tracking prevention feature in Microsoft Edge is made up of three main components that work together to determine whether a specific resource from a website should be classified as a tracker and blocked. The components are as follows:
Classification - The way Microsoft Edge determines whether a URL belongs to a tracker.
Enforcement - The actions taken to protect Microsoft Edge users from URLs classified as trackers.
Mitigations - The mechanisms provided to ensure user-specified favorite sites still work, while offering strong default protection.
Each of the components are explored and explained in detail on this page.
Classification
The first component of the tracking prevention feature in Microsoft Edge is classification. To classify online trackers and group them into categories, Microsoft Edge uses the disconnect.me website's open source Tracker Protection lists	. The Tracker Protection lists are delivered via the Trust Protection Lists component, which is listed in edge://components. After being downloaded, the lists are stored on disk where you can use them to determine whether or how a particular URL is classified.
To determine if a URL is considered a tracker by the classification system in Microsoft Edge, a series of host names are checked, starting with an exact match and then proceeding to check for partial matches for up to four labels beyond the top-level domain. If any of the host names in the series match with a host name on the disconnect.me website's Tracker Protection lists, Microsoft Edge proceeds with evaluating enforcement actions to prevent users from being tracked.
Example

Enforcement
To provide protection from tracking actions on the web, Microsoft Edge takes two enforcement actions against classified trackers:
 Restrict storage access - If a known tracking resource tries to access any web storage where it may try to persist data about the user, Microsoft Edge blocks that access. This includes restricting the ability for that tracker to get or set cookies as well as access storage APIs such as IndexedDB and localStorage.
 Block resource loads - If a known tracking resource is being loaded on a website, Microsoft Edge may block that load before the request reaches the network depending on compatibility impact of the load and the tracking prevention setting a user has set. Blocked loads may include tracking scripts, pixels, iframes, and more. This prevents any data potentially being sent to the tracking domain and may even improve load times and page performance as a side effect.
A user may choose the page info flyout icon on the left side of the address bar to find out which trackers were blocked on a specific page:

How the enforcements are applied depends on what level of tracking prevention the user selected and the mitigations that may apply.
Mitigations
To ensure that web compatibility is preserved as much as possible, Microsoft Edge has three mitigations to help balance enforcements in specific situations:
The Org Relationship mitigation
The Org Engagement mitigation
The CompatExceptions list
The concept of an Organization (Org)
The disconnect.me website maintains an entities.json list that defines groups of URLs that are owned by the same parent organization/company. The tracking prevention feature in Microsoft Edge uses the entities.json list in both the Org Relationship mitigation and the Org Engagement mitigation, to minimize
the occurrence of compatibility issues caused by tracking prevention affecting cross-organizational requests.
The Org Relationship mitigation
Several popular websites maintain both websites and Content Delivery Networks (CDNs) to serve static resources and content to those sites. To ensure that these types of scenarios aren't affected by tracking prevention, Microsoft Edge exempts a site from tracking prevention when the site is making third-party requests to other sites owned by the same parent organization (as defined in the disconnect.me entities.json list).
Example
An organization named Org1 owns the domains org1.test and org1-cdn.test, as defined in the disconnect.me entities.json list. Imagine that org1-cdn.test is classified as a tracker and would normally have tracking prevention enforcements applied to it. If a user visits https://org1.test and the site tries to load a resource from https://org1-cdn.test, Microsoft Edge doesn't take any enforcement actions against requests made to org1-cdn.test even though it isn't a first-party URL. If another URL that isn't part of the
Org1 organization tries to load that same resource, however, then the request would be subject to enforcements, because it isn't part of the same organization.
Even though this relaxes tracking prevention enforcements for sites that belong to the same organization, it is unlikely that this introduces a high amount of privacy risk, since such organizations are able to determine which sites/resources you have accessed on https://org1.test as well https://org1-cdn.test using internal back-end data.
The Org Engagement mitigation
The Org Engagement mitigation was created to minimize compatibility risks introduced by tracking prevention by ensuring that sites owned by organizations that users sufficiently engage with continue to work as expected across the web. It makes use of the Site Engagement Service to relax enforcements whenever a user has established an ongoing relationship (currently defined by a site engagement score of 4.1 or greater) with a given site.
The Org Engagement mitigation is currently only applied in Balanced mode, so that Microsoft Edge is offering the highest possible protections for users who have opted into Strict.
Example
An organization named Social Org owns the domains social.example and social-videos.example.
Users are considered to have a relationship with Social Org if they have established a site engagement score of 4.1 or greater with any one of domains owned by Social Org.
If another site, https://content-embedder.example, includes third-party content (say an embedded video from social-videos.example) from any of the domains owned by Social Org that would normally be restricted by
tracking prevention enforcements, the site is exempt from tracking prevention enforcements as long as the user's site engagement score with domains owned by Social Org is maintained above the threshold.
If a site doesn't belong to an organization, a user must establish a site engagement score of 4.1 or greater with it directly before any storage access/resource load blocks imposed by tracking prevention are relaxed.
The CompatExceptions list
Based on recent user feedback Microsoft received, Microsoft Edge maintains a small list of sites (most of which are in the Disconnect Content category) that were breaking due to tracking prevention despite having the above two mitigations in place. Sites on this list are exempt from tracking prevention enforcements. The list can be found on disk at the locations described below. Users may override entries on it using the Block option in edge://settings/content/cookies.
To avoid maintaining this list moving forwards, Microsoft is currently working on the Storage Access API in the open-source codebase. The Storage Access API gives site developers a way to request storage access from users directly, providing users with more transparency into how their privacy settings are affecting their browsing experience, and giving site developers controls to quickly and intuitively unblock themselves.
After the Storage Access API is implemented, Microsoft will deprecate the CompatExceptions list and reach out to the affected sites both to make them aware of the issues, and to request that they use the Storage Access API moving forward.
Current tracking prevention behavior
The following are the enforcement actions and mitigations that are applied to each category of classified tracker in Microsoft Edge:
ﾉ Expand table
LevelAdvertizingAnalyticsContentCryptominingFingerprintingSocialOtherSame Org
MitigationOrg
Engagement
MitigationBasic---BB--EnabledN/ABalancedS-SBBSSEnabledEnabledStrictBBSBBBBEnabledDisabledAbout the table:
The column headers are the categories of trackers as defined by the tracking protection list categories that are listed in disconnect.me services.json.
The left column lists the three levels of tracking prevention in Microsoft Edge (Basic, Balanced, and
Strict).
S indicates that storage access is blocked.
B indicates that both storage access and resource loads (such as network requests) are blocked.
A hyphen (-) indicates that no block is applied to either storage access or resource loads.
The Org Engagement mitigation doesn't apply to the Cryptomining or Fingerprinting categories.
Strict mode blocks more resource loads than Balanced. The blocking of more resource loads may result in Strict mode appearing to block less tracking requests than Balanced since the trackers making the requests are never loaded.
The Fingerprinting column in Current tracking prevention behavior refers to trackers that are on the Fingerprinting list in addition to another list. Trackers that appear on solely on the Fingerprinting list are considered non-malicious fingerprinters and aren't blocked.
InPrivate behavior
By default, InPrivate windows in Microsoft Edge use the same tracking prevention settings as regular windows.
To always apply the "Strict" level of tracking prevention to InPrivate windows:
1. Go to edge://settings/privacy.
2. Click Always use "Strict" tracking prevention when browsing InPrivate.
Determining whether/how a particular URL is classified
To determine whether a specific URL is classified as a known tracker:
1. Open DevTools and open the Console tool.
2. Refresh the webpage.
You may want to clear Cookies and other site data first to reset site engagement scores and ensure a completely clean slate.
3. Look for any messages that read Tracking Prevention blocked access to storage for <URL>. You can expand the messages to see the individual URLs that were blocked.
4. If you need to determine which category a specific blocked site is in, the easiest way to do this is to search for it in the disconnect.me services.json list. The entries are alphabetized, so scrolling to the top of a block of site entries enables you to find the specific category for a particular site.
Access tracking prevention lists stored on disk
If you need to access the tracking prevention lists that are stored on disk, each may be found in one of two locations:
Component-based updates - The lists that are downloaded from the "Trust Protection Lists" component Windows: %LOCALAPPDATA%\Microsoft\Edge <OptionalChannelName>\User Data\Trust Protection Lists macOS: ~/Library/Application Support/Microsoft Edge <OptionalChannelName>/Trust Protection Lists
Installation directory - The lists that are bundled with the Microsoft Edge Installer. If you selected a different installation directory, your exact paths may be different.

Blocking or allowing specific trackers for debugging purposes
Microsoft Edge only exposes an option to disable tracking prevention enforcements from running on a specified site. This option is accessed via the page info flyout, or through the
edge://settings/privacy/trackingPreventionExceptions page.
The Block and Allow options on the edge://settings/content/cookies page can be used to allow or deny specific domains access to storage such as cookies and other browser storage mechanisms. This is useful for debugging site issues that are caused by tracking prevention enforcements blocking access to storage for a specific site.
See also
Welcome to Microsoft Edge - A smarter way to protect
Microsoft Edge Privacy Whitepaper
Storage Access API

Feedback
Was this page helpful?  Yes  No

Detecting Microsoft Edge from your website
Article • 01/05/2024
Microsoft Edge enables your website to retrieve user agent information. You use the user agent information to present webpages correctly for each user's browser. Browsers provide mechanisms for websites to detect browser information such as brand, version number, and host operating system.
 User-Agent Client Hints are the best way to retrieve browser information. See User-Agent Client Hints, below.
 User-Agent strings are a legacy way to retrieve browser information. They are outdated and have a history of causing website compatibility problems. See UserAgent strings, below.
You may want to provide different experiences to users based on their browser. For example, if you include steps about how to configure Microsoft Edge or another browser for use with your site, you may want to detect the browser and then show the appropriate content.
Mechanisms for browser detection:
ﾉ Expand table
MechanismServer-sideClient-sideUser-Agent Client Hints
(recommended)Sec-CH-UA HTTPS headernavigator.userAgentData JavaScript methodUser-Agent string (legacy)User-Agent HTTPS headernavigator.userAgent JavaScript methodFeature detection
Microsoft recommends detecting whether a feature is supported in your browser whenever possible, instead of detecting the browser.
If you must detect browsers, Microsoft recommends using User-Agent Client Hints, as follows, together with feature detection.
User-Agent Client Hints
Microsoft Edge supports User-Agent Client Hints.
User-Agent Client Hints is a method that addresses privacy concerns while allowing web pages to detect browser information such as browser name, version number, platform, and more. Soon the User-Agent string will be frozen and deprecated by various browsers. For example, the Chrome Platform Status site describes the change in Feature:
Reduce User Agent string information.
Employ User-Agent Client Hints when you want to:
Determine if new browser activity is from the expected user. Customize hints or instructions if the user is new to this site.
Don't use User-Agent Client Hints to:
Block unsupported browsers.
Restrict access to features on your site.
For more information, see the specification at W3C Community Group Draft Report:
User-Agent Client Hints.
User-Agent Client Hints HTTPS header
When Microsoft Edge sends an HTTPS request to a server, it sends a set of low-entropy User-Agent Client Hints headers. For more information, see Low entropy hint table. If the server requires more granular information about the browser, its response includes an Accept-CH header. The value of that response header is a comma-separated list of all the Client Hints request headers the server wants from the browser, such as Accept-CH:
Sec-CH-UA-Full-Version,Sec-CH-UA-Platform-Version. The next Microsoft Edge HTTPS request to the server will include the specified User-Agent Client Hints headers.
By default, Microsoft Edge sends the Sec-CH-UA, Sec-CH-UA-Mobile, and Sec-CH-UAPlatform request headers in the following format.
httpsSec-CH-UA: "Chromium";v="92", "Microsoft Edge";v="92", "Placeholder;Browser 
Brand";v="99"
Sec-CH-UA-Mobile: ?0
Sec-CH-UA-Platform: "Windows"The following table shows all available hints request headers with sample values.
ﾉ Expand table
User-Agent request headerExample User-Agent response valueSec-CH-UA"Not_A Brand";v="8", "Chromium";v="120", "Microsoft
Edge";v="120"Sec-CH-UA-Mobile?0Sec-CH-UA-Full-Version120.0.2210.91Sec-CH-UA-PlatformWindowsSec-CH-UA-Platform-
Version15.0.0Sec-CH-UA-Archx86Sec-CH-UA-Bitness64Sec-CH-UA-ModelSurface ProUser-Agent Client Hints are only sent over secure connections using HTTPS.
User-Agent Client Hints JavaScript API
You can access User-Agent Client Hints by using JavaScript on the client side. When you call the default navigator.userAgentData, it returns the following response.
JSON{
  "brands": [
    {
      "brand": "Not_A Brand",
      "version":"8"
    },
    {
      "brand": "Chromium",
      "version":"120"
    },
    {
      "brand": "Microsoft Edge",
      "version":"120"
    }
  ],
  "mobile": false,  "platform": "Windows"
}
To send a request for more detailed information such as platform, use the following code:
JavaScriptnavigator.userAgentData.getHighEntropyValues([
  "architecture",
  "platform",
  "platformVersion",
  "uaFullVersion" ]).then(ua => {   console.log(ua)
});The response has the following format:
JavaScript{
  "architecture": "x86",
  "brands": [
    {
      "brand": "Not_A Brand",
      "version": "8"
    },
    {
      "brand": "Chromium",
      "version": "120"
    },
    {
      "brand": "Microsoft Edge",
      "version": "120"
    }
  ],
  "mobile": false,
  "platform": "Windows",
  "platformVersion": "15.0.0",
  "uaFullVersion": "120.0.2210.91"
}For more information, see NavigatorUAData: getHighEntropyValues() method on
MDN. platformVersion Hint
The operating system version token in the User-Agent header hasn't been updated for Windows 11, and still reports Windows NT 10.0.
To distinguish between Windows 10 and Windows 11, request the platformVersion client hint in Microsoft Edge. Values between and including 1.0.0 and 12.0.0 represent releases of Windows 10, while values of 14.0.0 or later represent releases of Windows 11.
Combine User-Agent Client Hints with feature detection
Combining User-Agent Client Hints with feature detection is an effective way to deliver compatible web content. Microsoft recommends using this pattern to:
Improve code maintainability.
Reduce code fragility.
Reduce code breakage from changes to the User-Agent string.
If you need to check for a Chrome-like browser, Microsoft recommends detecting Chromium, which is the engine that powers Microsoft Edge.
Use this method to verify the Chromium brand and apply detection to all affected Chromium-based browsers:
JavaScriptfunction isChromium() {   for (brand_version_pair of navigator.userAgentData.brands) {     if (brand_version_pair.brand == "Chromium"){       return true;
    }   }   return false;
}Use the above method to avoid hard-coding checks for brands at specific indices.
Display orders of brand names can change over time.
If you can't use feature detection	, don't use a hardcoded list of known Chromiumbased browsers for verification. Examples of hardcoded browser names include
Microsoft Edge and Google Chrome. Feature detection may not be available, because a fix for a Chromium bug in later versions must be avoided and the affected browsers are difficult to detect.
User-Agent strings
User-Agent strings are outdated and have a long history of causing website compatibility issues.
Wherever possible, Microsoft recommends minimizing use of Microsoft Edge browser detection logic based on the User-Agent string. If you have a good reason to detect the browser, the Microsoft Edge team recommends using User-Agent Client Hints as the primary detection logic. User-Agent Client Hints also reduces the complexity of browser detection code.
For legacy reference, the following information was included in User-Agent string.
On Windows, the User-Agent HTTP request header includes:
Mozilla/5.0 (Windows NT 10.0; Win64; x64)
AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/120.0.0.0
Safari/537.36
Edg/120.0.0.0On Android, the User-Agent HTTP request header includes:
Mozilla/5.0 (Linux; Android 10; K)
AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/120.0.0.0
Mobile Safari/537.36
EdgA/120.0.0.0The response value from navigator.userAgent method uses the following format:
JavaScript"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like 
Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0"Platform identifiers change based on the operating system, and version numbers increment over time. The format is the same as the Chromium user agent with the addition of a new Edg token at the end. Microsoft chose the Edg token to avoid compatibility issues caused by Edge string, which was previously used for the legacy Microsoft Edge browser based on EdgeHTML. The Edg token is also consistent with existing tokens used for iOS and Android.
Identifiers for Microsoft Edge on various platforms
On desktop operating systems, Microsoft Edge is commonly identified by the Edg token in the User-Agent string. However, a different token for Microsoft Edge is used on some device platforms, as follows:
ﾉ Expand table
PlatformIdentifier tokenDesktop (Windows/Mac/Linux)EdgiPhone/iPadEdgiOSAndroid (Mobile/tablet)EdgAMicrosoft Edge Legacy is no longer supported. See the Microsoft Edge Legacy section for details.
Map the User-Agent string to an expanded browser name
Map the User-Agent string tokens to human-readable browser names to use in code. This practice is common across the web. When you map the Edg token to a browser name, Microsoft recommends using a different name than the one used for the legacy Microsoft EdgeHTML browser, to avoid accidentally applying legacy workarounds that don't apply to Chromium-based browsers.
User-Agent overrides
Sometimes, a website doesn't recognize the Microsoft Edge user agent. As a result, a set of the features of the website may not work correctly. When Microsoft is notified about the types of issues, Microsoft contacts you (a website owner) and informs you about the updated user agent.
You may need more time to update and test the user agent detection logic for your website to address the issues reported by Microsoft. To maximize compatibility for your users, the Microsoft Edge Beta and Stable channels use a list of user agent overrides. Use the user agent overrides while you update your website. The list of user agent overrides is provided by Microsoft.
The overrides specify new user agent values that Microsoft Edge sends instead of the default user agent for specific websites. To display the list of user agent overrides that are currently applied:
1. Open the Microsoft Edge Beta or Stable channel.
2. Go to edge://compat/useragent.
The Microsoft Edge Canary and Dev channels don't currently receive user agent overrides. The Microsoft Edge Canary and Dev channels provide environments that use the default Microsoft Edge user agent. Use the Microsoft Edge Canary and Dev channels to reproduce issues on your website caused by the default Microsoft Edge user agent.
To turn off user agent overrides in the Microsoft Edge Beta or Stable channels:
1. Open a command prompt. For example, enter cmd in the Windows search text box and select the Command Prompt app.
2. Copy the following code:
shell--disable-domain-action-user-agent-override3. Run the Microsoft Edge app using the copied code as follows:
shell{path/to/microsoft/edge.ext} --disable-domain-action-user-agentoverrideMicrosoft Edge Legacy
Legacy browser considerations:
 The Microsoft Edge Legacy browser is no longer supported. See the blog post New Microsoft Edge to replace Microsoft Edge Legacy.
Microsoft Edge Legacy was only available on Windows 10.
Of all the User-Agent mechanisms described in this article, the only supported browser-specific mechanism for Microsoft Edge Legacy is User-Agent string.
 The User-Agent string for Microsoft Edge Legacy includes the Edge token.
A fully formed example of a Microsoft Edge Legacy User-Agent string: Mozilla/5.0
(Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)
Chrome/70.0.3538.102 Safari/537.36 Edge/18.19582
See also
Detect Windows 11 using User-Agent Client Hints

Develop experiences for the sidebar in Microsoft Edge
Article • 08/07/2023
The sidebar in Microsoft Edge is a persistent pane located on the side of the browser, which coexists with the primary content of the browser. The sidebar allows users to easily access popular websites and utilities alongside their browser tabs. The content in the sidebar augments the user's primary task by enabling side-by-side browsing and minimizing the need to switch contexts between browser tabs. By using the sidebar in Microsoft Edge, users can access the productivity tools they need while staying in their workflow.

As a developer, you can leverage the sidebar for your own experiences in two ways:
By adapting your existing Progressive Web App (PWA) to run in the sidebar.
By making use of the Sidebar API in your Microsoft Edge extension.
Choose the right approach
The two different ways in which you can leverage the sidebar are designed to meet different developer needs. The following are the key differences between sidebar apps and sidebar extensions:
ﾉ Expand table
AspectSidebar appSidebar extensionTerm
definitionA Progressive Web App (PWA) that runs in the sidebar.A Microsoft Edge extension that displays content in the sidebar.DistributionLike a website, the app is hosted on the app's web server.The extension is distributed through the Microsoft Edge Add-ons website.CapabilitiesThe app can make use of all web APIs and features, as well as PWA capabilities such as offline support, push, or file system access.The extension can make use of powerful extension APIs, such as reading or modifying the current page.ContextThe app runs in its own web context, separate from the main tab.The extension can access the current webpage and modify the webpage via the extension's content script.InstallationThe user installs the app by interacting with the sidebar when visiting the app's website.The extension is installed by the user from the Microsoft Edge Add-ons website.User experienceThe app has its own icon in the sidebar. Clicking the icon opens the sidebar if it was closed and displays the app's contents.The user experience depends on the extension. The extension can open the sidebar depending on the websites the user visits in the browser.Technologies usedWeb development and PWA. See Overview of Progressive Web Apps (PWAs).Extension development. See Overview of Microsoft Edge extensions.Sidebar apps
Sidebar apps allow you to adapt your existing Progressive Web App (PWA) to securely run alongside other browser tabs for a side-by-side co-browsing experience. This approach is a great choice for web developers who want to offer companion experiences including social, messaging, or media apps that don't require advanced extensions capabilities.
The sidebar app infrastructure helps users discover and install sidebar apps as they browse the web, providing great discoverability for your app just by making a simple change to your web application manifest file. Sidebar apps are a great option if you want to reuse your existing web app for the sidebar in Microsoft Edge and make full use of the web capabilities that are available to PWAs.
To learn more about PWAs and how to create them, see Overview of Progressive Web
Apps (PWAs). And to learn more about adapting your existing PWA to the sidebar in Microsoft Edge, see Build a PWA for the sidebar in Microsoft Edge.
Sidebar extensions
Microsoft Edge extensions (add-ons) can optionally use the sidebar API to show a custom UI in the sidebar in Microsoft Edge. This is in addition to the other places extensions also appear in, such as in the Microsoft Edge toolbar, or as popups.
If your app's experience relies on powerful extensions APIs, for example to read or modify the current page, then a sidebar extension provides these capabilities. Users can find and install these extensions through the Microsoft Edge Add-ons website. The Microsoft Edge team continues to evolve these sidebar extensibility models and welcomes your feedback. To leave feedback, create a new issue on the repo, or search for existing issues and join existing conversations.
To learn more about Microsoft Edge extensions and how to create them, see Overview of Microsoft Edge extensions. And to learn more about using the sidebar API in your extension, see Develop an extension for the Microsoft Edge sidebar.

Feedback
Was this page helpful?  Yes  No

Detect Windows 11 and CPU architecture using User-Agent Client Hints
Article • 05/12/2023
Websites can differentiate between users on Windows 11 and Windows 10, and detect the CPU architecture of the device, by using User-Agent Client Hints (UA-CH). The UserAgent Client Hints format is used by browsers to provide user agent information to websites.
Websites can also use the user agent information that's sent from the browser to detect information such as:
The browser brand.
The browser version number.
The device platform on which the browser is running.
There are two approaches for sites to access user agent information:
User-Agent strings (legacy).
User-Agent Client Hints (recommended).
For details about these two approaches, see Detecting Microsoft Edge from your website.
In Microsoft Edge (and also in Google Chrome), sites can differentiate between users on
Windows 11 and Windows 10, and can detect the CPU architecture of the device, via User-Agent Client Hints (UA-CH). This information can be found in the following UA-CH request headers:
ﾉ Expand table
Header fieldValues that indicate Windows
10Values that indicate Windows
11Sec-CH-UA-PlatformWindowsWindowsSec-CH-UA-Platform-
Versionvalues between 1.0.0 and
10.0.013.0.0 and aboveUser-Agent strings won't be updated to differentiate between Windows 11 and
Windows 10, or to differentiate between CPU architectures. We don't recommend using
User-Agent strings to retrieve user agent data. Browsers that don't support User-Agent Client Hints won't be able to differentiate between Windows 11 and Windows 10, or between CPU architectures.
Browsers that support User-Agent Client Hints
The following table shows which browsers support differentiating between Windows 11 and Windows 10, and between different CPU architectures.
ﾉ Expand table
BrowserSupports differentiation via User-Agent Client Hints?Microsoft EdgeYesChromeYesOperaYesFirefoxNoInternet Explorer 11NoSample code for detecting Windows 11
The following code detects Windows 11:
JavaScriptnavigator.userAgentData.getHighEntropyValues(["platformVersion"])
 .then(ua => {    if (navigator.userAgentData.platform === "Windows") {      const majorPlatformVersion = parseInt(ua.platformVersion.split('.')
[0]);      if (majorPlatformVersion >= 13) {        console.log("Windows 11 or later");
      }       else if (majorPlatformVersion > 0) {         console.log("Windows 10");
      }       else {         console.log("Before Windows 10");
      }    }    else {      console.log("Not running on Windows");
   } });
Sample code for detecting ARM or x86
Use detection of CPU architecture to have your website automatically download the version of your app that's built specifically for the user's CPU.
CPU detection is particularly helpful for ARM-based devices, so that a customer using an ARM device automatically downloads the native ARM version of an application. This prevents the user from inadvertently installing an app that's built for x86, and then experiencing reduced performance due to emulation.
The following code detects CPU architecture:
JavaScriptnavigator.userAgentData.getHighEntropyValues(["architecture", "bitness"])
 .then(ua => {    if (navigator.userAgentData.platform === "Windows") {      if (ua.architecture === 'x86') {        if (ua.bitness === '64') {          console.log("x86_64");
       }        else if (ua.bitness === '32') {          console.log("x86");
       }      }      else if (ua.architecture === 'arm') {        if (ua.bitness === '64') {          console.log("ARM64");
       }        else if (ua.bitness === '32') {          console.log("ARM32");
       }
     }    }    else {      console.log("Not running on Windows");
   }  });Optimizing detection performance with
Critical-CH
Currently, website servers must send the Accept-CH response header to the browser client to request higher entropy fields not sent in the Sec-CH-UA header by default. The following diagram shows the browser sending request headers to the server including
ua-platform.
Accept-CH header to reissue the request header immediately, without the need for a page reload. The following diagram shows the browser sending request headers to the server including user agent: <UA string> and receiving response headers including
Accept-CH: sec-ch-ua-platform and Critical-CH: sec-ch-ua-platform. The browser then sends request headers to the server immediately.

optimized performance.
Remember that Critical-CH and Accept-CH preferences persist until session cookies are cleared, or until a user clears site data or cookies for a given origin. For more information about Critical-CH, refer to Client Hint Reliability.
Detecting specific Windows versions
The definition of the platform versions returned by the navigator.userAgentData.getHighEntropyValues API for the "platformVersion" hint (and
via the Sec-CH-UA-Platform-Version header) is specified in the User-Agent Client Hints Draft Community Group Report	. On Windows 10 and higher, the value is based on the Windows.Foundation.UniversalApiContract version.
To detect specific versions of Windows, use the following values for platformVersion in User-Agent Client Hints:
ﾉ Expand table

VersionFirst version component of the platformVersionWin7/8/8.10Win10 15071Win10 15112Win10 16073Win10 17034Win10 17095Win10 18036Win10 18097Win10 19038Win10 19098Win10 200410Win10 20H210Win10 21H110Win10 21H210Win1113+Customize the password reveal button
Article • 03/28/2023
The password input type in Microsoft Edge includes a password reveal button. To make sure that the password is entered correctly, a user can click the password reveal button or press Alt+F8, to show the characters in the password field. You can remove the password reveal control, or customize the control styling.
By default, the password reveal button is turned off, so that in the password field, dots replace the characters entered by the user. The password reveal button appears to the right of the password field, as an eye-shaped icon:

When the user clicks the password reveal button to turn it on, the password text is revealed, and the eye icon changes to have a slash over it:

By default, the password reveal button is inserted into the Shadow DOM of all HTML input elements that have the type set to "password". Starting with Microsoft Edge Version 87, users or enterprises can disable this feature globally. Web designers and developers should expect most Microsoft Edge users to have the default experience.
Remove the password reveal control
As the webpage author, you can completely remove the password reveal button, by targeting the ::-ms-reveal pseudo-element:
css::-ms-reveal {     display: none;
}However, you should consider taking advantage of the password reveal button. The native password reveal button has important security measures built into the behavior.
Customize the control style
Instead of fully removing the control, you can instead modify the styling of the password reveal button to better match the visual language of the website. The following snippet provides an example of such styling:
css
::-ms-reveal {     border: 1px solid transparent;     border-radius: 50%;     box-shadow: 0 0 3px currentColor;
}
Keep the following things in mind when you style the password reveal button:
 The eye icon implements as a background image. To add a background color to the password reveal button, use the CSS background-color property instead of the
background shorthand property.
Visibility of the control
The password reveal button is unavailable until the user enters text into the password field. To help keep the user's password entry secure, the browser suppresses the button in the following scenarios:
 If focus moves away from the password field, the browser removes the password reveal button.
 If scripts modify the password field, the browser removes the password reveal button.
If the password reveal button is removed, the user must delete the contents of the password field to make the password reveal button appear again. This behavior prevents someone from making a minor adjustment to display the password, should the user step away from an unlocked device.
The password reveal button is unavailable if the password field is autofilled by using the password manager.

Display regional versions of your site, based on OS settings
Article • 04/18/2023
Microsoft Edge provides operating system (OS) regional preference information to help website authors create regional experiences on their website, when viewing your site using Microsoft Edge. This feature allows website authors to deliver value to users who specifically change their regional preferences in the OS to reflect their personal preferences.
Users want to see dates, times, numbers, and other formatting printed according to their preferences. For example, the US geographic region translates 7/2/2022 into July
2nd, 2022. Another geographic region could translate that same date into February 7, 2022 because they read the month and day inversely.
Regional format
To reflect a user's regional preferences for how data is displayed (such as the date), Microsoft Edge has an option in the Language section of Settings: the Share additional OS regional format menu.

Granting access to this setting allows websites to have visibility into more user's specific regional preferences than was previously possible. Users that change their OS regional preferences may now see their preferences reflected automatically in more websites.
OS regional data display codes
The user's formatting preferences are abstracted into a simple regional code, which is used by web applications to infer the various details noted above about dates, times, and other formatting preferences.
Websites can use the built-in Internationalization API with a regional code to properly format information into the user's preferences. The Internationalization API can save lots of MB of data transfer over the network, keeping websites small and allowing them to quickly and easily adapt to different regions.
In general, the website's internationalization user experiences are only as good as the regional code that they're able to determine for the current user.
A regional code is a two-letter language code followed by a hyphen and a two-letter region code. Microsoft Edge uses ICU to understand regional codes. ICU is an implementation of the Unicode standard's Internationalization API. For more information, see ICU-TC Home Page.
To set the user's language preferences, Microsoft Edge gets the default values from the
OS when it is first installed. The user can then change the language preferences in edge://settings/languages and sort them in priority order.
The UI, HTTP header, and API interact as follows:
ﾉ Expand table
Language or region dataUser impactPreferred languages in the Settings > Languages pageThe language selected for rendering Microsoft Edge. This language/region is also used for formatting values such as date, time, and numbers.accept-language HTTP headerA list of regional codes (as defined in Settings > Languages > Preferred languages) that's sent to the server to allow a website to display the right language. Microsoft Edge sends the regional codes in the order that's specified in edge://settings/languages.navigator.language API
(and similar)Code inserted into a website that allows the browsers to display the correct regional formatting (as defined in Settings > Languages > Preferred languages) for user input and other content produced locally.Regional data display options
Users have three options on Microsoft Edge to select the level of information their browser will share about their regions:
Limited (default)
Always (not recommended)
Never
Limited
The default, recommended value is Limited. This setting uses only valid combinations of the user's current Microsoft Edge preferred language and the user's chosen OS regional preference. Limited ensures that for language processing, websites will provide a consistent language experience (not mixing languages in unpredictable combinations).
The Limited option compares the language part of the regional code that is derived from the browser's current preferred display language, and the regional code coming from the OS setting, and if the language parts match and if the resulting regional code is a valid combination, will provide the regional code to websites as the default locale.
If the OS-specified regional language doesn't match Microsoft Edge's preferred language, the Limited option will act as if Never was selected and will fall back to the regional code derived from the browser's preferred display language.
Note: the Limited option is similar to current Firefox behavior for exposing the OS regional code, as described in Regional Preferences - Firefox Source Docs documentation (mozilla.org).
Always
If Always (not recommended) is selected, the user's OS regional preferences will be provided to the website without any limitations or restrictions. The user may be exposed to fingerprinting and to website compatibility problems (inconsistent use of language and formatting). See below "Avoiding potential misuse" section.)
Never
Users can disable the sharing of OS regional information by selecting Never. The Never option still allows websites to read regional information, but does block any specific OS regional customizations that the user has made from being exposed to website content.
Instead, the browser's preferred display language is used to derive a default region.
Policy controls
A related new policy in Microsoft Edge, DefaultShareAdditionalOSRegionSetting, provides a setting for corporate or enterprise-level default configurations. This setting accepts an integer with the following potential values:
ﾉ Expand table
NumberDescription0Limited1Always2NeverIn addition, an older policy, ApplicationLocaleValue, sets the Microsoft Edge locale and locks it to prevent users from changing it.
Avoiding potential misuse
We believe that Limited is the right option for most users. Limited respects the user's regional preferences while introducing the least amount of risk of the website misusing this information.
Fingerprinting entropy
OS regional information could be misused to compromise the user's privacy. The regional information would help hackers establish fingerprinting entropy. In combination with many other pre-existing bits of entropy in the platform today, the user could be uniquely identified leading to more potential secondary harm.
While a user's region and language are already available via the web platform, users generally fall into well-recognized regional codes that are similar across geographies. Because the sample sizes are so large, the risk of any specific regional code standing out is small, and thus the risk is small. If the user changes their OS preferences to a unique language + region, websites may be able to identify the anomaly in a population, and uniquely identify the associated user.
Content presentation
The OS regional information can also be misused and lead to inconsistency of a website's language presentation. Microsoft Edge provides multiple language and regional APIs to websites developers. Websites may process regional information in one place, while deriving language preferences from another.
When the language and regional information is self-consistent, then it doesn't really matter which APIs the website uses to assemble its content presentation. However, if a website reads the language information from multiple APIs and those APIs return different language codes, then the website may inadvertently start to mix-and-match regional preferences, resulting in strange user experiences. For example, phrasing that mixes languages and regional preferences together, such as "Email sent on miércoles, 5 de enero de 2021".
Developer details
The new setting to Share additional OS regional format directly impacts the JavaScript
Intl object's default regional value and all other JavaScript APIs that use the default region (such as the Date constructor).
When the Intl object's constructors (such as DateTimeFormat) are provided with an existing regional code, their behavior is unchanged. However, when a specific regional code isn't provided, the constructors will use the default regional code. The new user preference also affects other date and time formatting APIs that rely on the default regional code, such as Date.
For example, a DateTimeFormat can be created with the user's default regional code (and inspected) via the following expression:
JavaScriptIntl.DateTimeFormat().resolvedOptions().localeOther areas in the platform, such as the accept-languages header sent via HTTP/HTTPS
GET requests to the server, and the navigator.language and navigator.languages APIs, aren't impacted by the regional information that's shared by the OS.

Feedback
Was this page helpful? 

View formatted JSON responses or files
Article • 04/09/2024
Use the JSON viewer to automatically format and syntax highlight JSON responses and files in browser tabs.
The JSON viewer changes the returned JSON data to make it easier to read. Sometimes a web server responds to HTTP requests by returning data encoded as JSON. JSON data can be difficult to read when it's formatted as a single long, concatenated line of text.
The same can occur when opening a JSON file from disk.
The JSON viewer improves readability of JSON data in several ways:
The JSON syntax is highlighted with different colors.
Object properties are displayed on their own lines and indented.
Objects can be collapsed or expanded.
The JSON viewer matches your operating system's dark or light theme.

Supported scenarios
The JSON viewer is not supported in windows that are opened by using the window.open JavaScript method. In windows opened with window.open, JSON data is
displayed as a single line of text, without formatting or syntax highlighting.
View reformatted JSON server responses
To view a JSON response from a web server as reformatted JSON:
1. Open a new tab or window in Microsoft Edge.
2. Type a URL that returns JSON data in the address bar. For example, use this sample JSON response: https://microsoftedge.github.io/Demos/json-dummy-data/256KBmin.json.
You can find more samples of JSON responses at MicrosoftEdge / Demos > jsondummy-data.
3. Microsoft Edge detects that the returned data is JSON and formats it automatically:

View reformatted JSON files
To view a JSON file stored on your device as reformatted JSON:
1. Open a new tab or window in Microsoft Edge.
2. Press Ctrl+O on Windows and Linux, or Command+O on macOS, and then select a JSON file.
3. Microsoft Edge detects that the file contains JSON data and formats it automatically:

Detect invalid JSON data
JSON data can sometimes be invalid. For example, the following patterns are invalid in JSON:
Omitting double quotes around a key name.
Having a trailing comma after the last key/value pair.
The JSON viewer applies syntax highlighting to invalid JSON. However, the JSON viewer doesn't format the content, and you can't collapse or expand objects.
You can find information about the invalid syntax in the Console tool, where the JSON viewer reports errors.
To view invalid JSON data:
1. Open a new tab or window in Microsoft Edge.
2. In the Address bar, go to a URL that returns invalid JSON data. For example, use this sample invalid JSON response: https://microsoftedge.github.io/Demos/jsondummy-data/missing-colon.json.
You can find other invalid samples of JSON responses at MicrosoftEdge / Demos > json-dummy-data.
3. Microsoft Edge detects that the file contains invalid JSON data, and colorizes the JSON listing, but doesn't wrap or otherwise reformat the JSON listing. The fact that the JSON isn't wrapped indicates there's malformed JSON.
4. Open the Console tool by pressing Ctrl+Shift+J (Windows, Linux) or Command+Option+J (macOS).
A JavaScript error indicates where the JSON syntax error is located:

5. In a code editor, such as Microsoft Visual Studio Code, go to the indicated column number to inspect the JSON:

Search the JSON data
To search for text within the JSON data, use the JSON viewer's Find feature, as follows:
1. View a JSON response or file in the JSON viewer.
2. Click anywhere in the formatted JSON data, to put focus in the JSON data.
3. Press Ctrl+F (Windows, Linux) or Command+F (macOS). The search toolbar appears at the top of the JSON viewer:

4. In the Find text box, start typing the text you want to search for. As you type, the JSON viewer highlights all of the occurrences of the text string in the JSON data.
To stop the search, click the Cancel button in the JSON viewer's toolbar.
Move through the search results
To move to the next or previous search result, after results were found, click the Next or Previous buttons in the search toolbar. The currently selected search result is highlighted in a different color:

Modify the type of search
The search toolbar contains Match Case, Regexp, and By Word checkboxes, to modify the type of search:

Perform a case-sensitive search
By default, the search is case-insensitive. For example, a search on hello matches
Hello, HELLO, hello, or any string that contains the characters hello with any casing.
To make the search case-sensitive, select the Match Case checkbox in the search toolbar.
Search by a regular expression
By default, the search string is treated as a literal string.
To search by using a regular expression, select the Regexp checkbox in the search toolbar.
Search by whole word only
By default, the search is not restricted to finding just the whole, isolated word surrounded by spaces. For example, a search on hello matches hello, hello-world, and world-hello, or any string that contains the sequence of characters hello.
To restrict the search to match only the string surrounded by spaces, without adjacent letters, select the By Word checkbox in the search toolbar.

Feedback
Was this page helpful? 
Sign up for the Ad Selection API
Article • 11/05/2024
The Ad Selection API provides user-relevant ads on your site without using third-party cookies. See Ad Selection Overview in the privacy-preserving-ads repo.
The Ad Selection API can be used by:
 Sellers running a supply-side platform (SSP), who can use the API to provide higher-quality ads for their publishers.
 Buyers running a demand-side platform (DSP), who can use the API to improve the effectiveness of advertising campaigns.
To get started using the Ad Selection API and test out the end-to-end flow, sign up for the limited preview of the Ad Selection API.
As a seller operating a supply-side platform or a buyer operating a demand-side platform, use this guide to:
Sign up for the Ad Selection API limited preview by registering for the origin trial.
Complete the API attestation by publishing your attestations JSON file.
Set up an evaluation environment with a supported cloud provider.
View the Ad Selection API documentation.
Prepare your User-Defined Functions (UDFs).
Deploy your services to Azure.
Test the Ad Selection API on your site.
Attestation enrollment and alpha sign-up
When and where is the preview available?
Microsoft Edge versions starting with 130.0.2808.0 have support for the Ad Selection API in a limited, developer opt-in preview outside of the European Economic Area (EEA) and the United Kingdom (UK).
Flags for testing
To change the Ad Selection API platform features on your developer machine, use the Ad Selection API testing flags at edge://flags#edge-ad-selection-api:

The Ad Selection API flag enables the Ad Selection API and associated features such as:
Attribution Reporting.
Fenced Frames.
Shared Storage.
Private Aggregation.
Sign-up and attestation requirements and process
Developers interested in alpha testing can join the origin trial for the Ad Selection API. This origin trial enables end-to-end testing of Ad Selection API features, covering both the API usage and the deployment of secure container images.
For each top-level domain that you intend to use with the Ad Selection API, fill in the Origin Trial Registration form for that domain, and then submit the form.
To sign up for the Ad Selection API origin trial for a domain:
1. Open Ad Selection API Origin Trial Registration in Microsoft Edge in a new window or tab.
2. Click the Start now button.
3. Read and agree to the terms of use, and then click the Next button. The Ad Selection API Origin Trial Registration form opens:

4. In the Domain text box, enter a single top-level domain:
You can configure the origin trial to support any of the following:
 A single domain, such as https://example.com, without supporting its subdomains.
A single subdomain, such as https://beta.example.com.
A domain, such as https://example.com, and its subdomains, such as https://beta.example.com.
Trailing paths and query parameters aren't supported. If a URI is entered that has a trailing path or a query parameter, such as https://example.com/path/new-feature, the root domain (such as https://example.com) or subdomain will be registered, ignoring any trailing path or query parameters.
5. In the Subdomain Support section, select the Yes or No option button:
 To use the origin trial at a domain (such as https://example.com) without supporting its subdomains (such as https://beta.example.com), select No.
To use the origin trial only at a specific subdomain (such as https://beta.example.com), select No.
To use the origin trial at a domain (such as https://example.com) and its subdomains (such as https://beta.example.com), select Yes.
6. In the Email Address text box, provide a valid developer contact for the domain.
7. Click the Submit button.
An origin trial token is generated for the top-level domain and is sent to you.
8. Create a file that's named ad-selection-attestations.json, and host the file at the top-level domain, in the /.well-known/ directory. For example: https://contoso.example/.well-known/ad-selection-attestations.json
The ad-selection-attestations.json file must be published within 30 days of receiving the OT token. Hosting this JSON file is required, in order to complete your attestation and allow your code to access the Ad Selection API, to test the Ad Selection API with supported Microsoft Edge clients.
Example JSON file
The attestations JSON file must be named ad-selection-attestations.json, and must conform to the following standards below. The following is an example of an adselection-attestations.json file:
JSON{
    "ad_selection_api_attestations": [
        {
            "attestation_parser_version": "2",
            "attestation_version": "2",
            "privacy_policy": [
                "https://contoso.example/privacy/"
            ],
            "ownership_token": "<Your Unique Token Here>",
            "enrollment_site": "https://contoso.example/",
            "platform_attestations": [
                {
                    "platform": "edge",
                    "attestations": {
                        "ad_selection_api": {                            "ServiceNotUsedForIdentifyingUserAcrossSites": true/false
                        },
                        "attribution_reporting_api": {
                            "ServiceNotUsedForIdentifyingUserAcrossSites": true/false
                        },
                        "shared_storage_api": {
                            "ServiceNotUsedForIdentifyingUserAcrossSites": true/false
                        },
                        "private_aggregation_api": {
                            "ServiceNotUsedForIdentifyingUserAcrossSites": true/false
                        }
                    }
                },
                {
                    "platform": "android",
                    "attestations": {}
                }
            ]
        }
    ]
}
Important fields and values
 The ad-selection-attestations.json file must include the origin trial token that was generated and sent to you for this top-level domain. "ownership_token": is the origin trial token that was generated when registering this domain for the Ad Selection API origin trial.
In the "platform_attestations": section, "platform": must be "edge" or "android".
The file must include a list of APIs (features that are associated with the Ad Services API). In the "platform_attestations": section, valid members of "attestations":
are the following:
"ad_selection_api": - The main API, for private auction logic.
"attribution_reporting_api": - Attribution reporting.
"shared_storage_api": - Shared storage.
"private_aggregation_api": - Private aggregation.
Requirements:
Each "..._api": entry must have a single field,
"ServiceNotUsedForIdentifyingUserAcrossSites":, with either a true or
false value. true means that this service is not used for identifying the user
across sites. false means that this service is used for identifying the user across sites.
Deploy the Ad Selection API services
The Ad Selection API uses a trusted execution environment (TEE) to provide a level of assurance for data integrity, data confidentiality, and code integrity; see Confidential Computing: Hardware-Based Trusted Execution for Applications and Data. Services provided by the Ad Selection API must run in a TEE to secure the data used by these services.
Ad Selection Services running in a TEE should be deployed on a cloud platform that supports the necessary security features. Initially, services can be deployed in Azure by using confidential ACI containers; see Confidential containers on Azure Container Instances.
The Ad Selection API provides different services that need to be deployed by sellers or buyers.
Images for deploying services
Add your User-Defined Functions (UDFs) within the provided images of services. The User-Defined Functions can run custom business logic. The User-Defined Functions run in private containers within the deployed services.
Each image defines one service. Some images don't contain UDFs, and consist entirely of predefined code. Some images contain UDFs, as functions with an empty body or starter code, that are the relevant User-Defined Functions for that service. Fill in the bodies of the User-Defined Functions in these images with your own custom code.
Microsoft provides an image for each service, which can be deployed on a cloud provider. These are the public images that must be used for deployment. Only official images from Microsoft are able to run private auctions.
Images for deployment:
Sellers
Ad Selection Seller Front End Service
Ad Selection Auction Service
Buyers
Ad Selection Buyer Front End Service
Ad Selection Bidding Service
Ad Selection K-Anonymity Service
Sellers and buyers
Ad Selection Key Value Service
Services for sellers
ﾉ Expand table
ServiceDescriptionSellerFrontEndProvides a /SelectAd HTTPS endpoint, which receives requests from the seller's untrusted ad service to initiate the Protected Audience auction flow.AuctionProvides a /ScoreAds endpoint, which receives requests from the SellerFrontEnd service, containing bids that are participating in the auction. Responds with a score value that the SellerFrontEnd service uses to choose the winner.Key/ValueReceives requests from the SellerFrontEnd service, which contain lookup keys from buyers' bids (such as ad_render_urls). Returns real-time scoring signals that are required for the auction. Runs in Bring Your Own Service (BYOS) mode, so the seller does not need to deploy this service in a trusted execution environment (TEE), and can instead use the image that's provided by Microsoft.Services for buyers
ﾉ Expand table
ServiceDescriptionBuyerFrontEndProvides a /GetBids endpoint, which receives requests from the SellerFrontEnd service to initiate the bidding flow.BiddingProvides a /GenerateBids endpoint, which receives requests from the
BuyerFrontEnd service to handle the bidding and generate a bid. Generates a bid, chooses the winner, and selects the banner to be rendered.Key/ValueReceives requests from the BuyerFrontEnd service and returns real-time buyer data required for bidding, corresponding to lookup keys from Interest Groups. Such a request happens once per workflow. Runs in Bring Your Own Service (BYOS) mode.Bidding
Selection &
Key/ValueReceives requests from the Bidding service to select and return additional ad banners (candidates) that can participate in bidding. The Bidding Selection & Key/Value service can also return additional signals that are needed for bidding. The Bidding service may send multiple requests to the BiddingServiceDescriptionSelection & Key/Value service, or may choose not to send any requests, because the Bidding Selection & Key/Value service is optional. The Bidding Selection & Key/Value service must be deployed in a trusted execution environment (TEE).K-AnonymityCollects k-anonymity counters and checks that the winning ad creative passes the k-anonymity check.User-Defined Functions
Sellers and buyers need to provide their own custom code as User-Defined Functions (UDFs) that run in private containers within the deployed services. These User-Defined Functions can execute custom business logic.
Each buyer or seller can deploy multiple instances of a given service, such as:
SellerFrontEnd and Auction.
BuyerFrontend, Bidding, and K-Anonymity.
Some of these services take an input which is a JavaScript worklet that defines UserDefined Functions.
User-Defined Functions for sellers
ﾉ Expand table
UDFService in which the UDF runsDescriptionscoreAd()AuctionGenerates a score for each buyer's bid, or rejects the bid. This score is then used by the SellerFrontEnd service, to choose a winner from among all buyers.reportResult()SellerFrontEndFor event-level reporting. Runs in the SellerFrontEnd service after the final winner has been chosen. Notifies the seller about the winning bidder, and provides the bid value.User-Defined Functions for buyers
ﾉ Expand table
UDFService in which the UDF runsDescriptiongenerateBids()BiddingGenerates a bid, and chooses the banner that will be shown.reportWin()SellerFrontEndFor event-level reporting. Runs in the SellerFrontEnd service, if the buyer's bid wins the auction. Notifies the buyer that they have won the auction, and generates notification URLs that will be triggered later, such as during banner rendering or other client events.getValues()Bidding Selection
& Key/ValueRuns in the Bidding Selection & Key/Value service, if the buyer uses that service. Allows for custom code execution for data lookup and selection.Deployment guide
To deploy the Ad Selection API service to Azure:
1. Create an Azure account and create a subscription at Microsoft Azure.
2. Choose the Confidential ACO containers option.
3. Go to Terraform deployment scripts in a new window or tab, and then download the Terraform deployment scripts and view the deployment documentation. Note: Make sure the hash of the image you downloaded matches the hash in the script you download.
4. The Terraform scripts already include links to public images that are provided by Microsoft. Choose the required services and deploy them by following the steps in the included readme.md.
a. Set any specific flags for your environment, including auction worklet locations.
b. Configure all prerequisites and prepare all tools for deployment.
c. Create Azure Resources and run the Terraform script that finishes deployment.
5. Develop worklets including user-defined-function (UDF) and start Ad Selection API services.
Use the Ad Selection API on your website
To start using the Ad Selection API, sellers and buyers need to modify their websites' JavaScript code that's run when the browser is Microsoft Edge.
 Sellers: To run private auctions, fetch interest groups, and do reporting, update your code on publishers' websites.
 Buyers: To create interest groups and store them in the browser, update the code on your advertising partners' websites. You can use the delegation mechanism to restrict and allow Interest Group creation on third-party domains.
To learn more about which API methods are available and to view example code, see Ad Selection API details.
Provide feedback about the origin trial
To provide feedback about the Ad Selection API origin trial, create a new issue on the WICG/privacy-preserving-ads GitHub repo:
 To view existing issues, go to the Issues tab of the WICG/privacy-preserving-ads repo.
 To submit a new issue, go to the new issue form.
See also
Origin trials:
Ad Selection API Origin Trial Registration in Microsoft Edge Use origin trials in Microsoft Edge
Design and technical documents:
Ad Selection Overview
Ad Selection API Proposal Ad Selection API details
Images for deployment:
Sellers
Ad Selection Seller Front End Service
Ad Selection Auction Service
Buyers
Ad Selection Buyer Front End Service
Ad Selection Bidding Service
Ad Selection K-Anonymity Service
Sellers and buyers
Ad Selection Key Value Service
Deployment scripts:
 Terraform deployment scripts
Trusted execution environment (TEE):
 Confidential Computing: Hardware-Based Trusted Execution for Applications and Data
Azure:
Microsoft Azure
Confidential containers on Azure Container Instances

Feedback
Was this page helpful?  Yes  No

Microsoft Edge IDE integration
Article • 10/19/2022
Various features of Microsoft tools provide integration of development using Microsoft Edge, Visual Studio Code, and Visual Studio, to develop your products, webpages, and web apps that use and work with full integration in Microsoft Edge.
Microsoft Edge DevTools extension for Visual Studio Code
The Microsoft Edge DevTools extension for Visual Studio Code lets you use the Elements tool and Network tool of the Microsoft Edge browser from within Visual Studio Code.
Without leaving Visual Studio Code, use Microsoft Edge DevTools to attach to an instance or launch an instance of Microsoft Edge, and then:
View the runtime HTML structure.
Change the webpage layout.
Change CSS styles and fix styling issues.
Read console messages.
View network requests.
See Microsoft Edge DevTools extension for Visual Studio Code.
Open source files in Visual Studio Code
The Open source files in Visual Studio Code experiment allows you to use Microsoft Edge DevTools, but then edit your files in Visual Studio Code instead of in the code editor of the DevTools Sources tool.
When you use this experiment, if you use Visual Studio Code and you use DevTools to change your CSS rules, you no longer have to use the code editor in the Sources tool of DevTools. You can simply use the code editor in Visual Studio Code. When you turn on this experiment, local files will get a different treatment.
See Opening source files in Visual Studio Code.
Debug Microsoft Edge in Visual Studio Code
Visual Studio Code includes a built-in debugger for Microsoft Edge, which can launch the browser or attach to an already running browser.
This built-in debugger lets you debug your front-end JavaScript code line-by-line and see console.log() statements directly from Visual Studio Code.
See Debug Microsoft Edge in Visual Studio Code.
The webhint extension for Visual Studio Code
Use webhint, a customizable linting tool, to improve the functionality of your site, including:
Accessibility.
Performance.
Cross-browser compatibility.
PWA compatibility.
Security.
webhint checks your code for best practices and common errors. Identify and fix problems in your files, including HTML, CSS, JavaScript, and TypeScript. Hints appear as wavy underlines in the text editor, and are summarized in the Problems pane.
Note: As of April 2022, the webhint extension for Visual Studio Code is no longer being maintained. See Microsoft Edge DevTools extension for Visual Studio Code.
Visual Studio for web development
Microsoft Visual Studio is an integrated development environment (IDE). Use it to edit, debug, build, and publish your web apps. It's a feature-rich program that can be used for many aspects of your web development.
In addition to the standard editor and debugger that most IDEs provide, Visual Studio includes features to ease your development process, including:
Compilers.
Code completion tools.
Graphical designers.
And many more features.
See Visual Studio for web development.
DevTools extension for Visual Studio Code
Article • 10/19/2022
The Microsoft Edge DevTools extension for Visual Studio Code lets you use the Microsoft Edge Browser and Developer Tools to develop webpages and web apps right from within the Visual Studio Code IDE.
Visual Studio Code includes built-in support for JavaScript, TypeScript, and Node.js, so it's a great tool for web developers. Visual Studio Code is a lightweight but powerful source code editor that's available for Windows, Linux, and macOS.
See Microsoft Edge DevTools extension for Visual Studio Code.

Opening source files in Visual Studio Code
Article • 07/12/2023
The Open source files in Visual Studio Code experiment allows you to use Microsoft Edge DevTools, but then edit your files in Visual Studio Code instead of in the code editor of the DevTools Sources tool.
When you use this experiment, if you use Visual Studio Code and you use DevTools to change your CSS rules, you no longer have to use the code editor in the Sources tool of DevTools. You can simply use the code editor in Visual Studio Code. When you turn on this experiment, local files will get a different treatment.
Setting up editing local files in Visual Studio Code
First, select DevTools > Settings > Experiments > Open source files in Visual Studio Code, and then re-start DevTools.
With this experiment enabled, suppose that in Microsoft Edge, you go to a local server (such as http://localhost or http://127.0.0.1), or open a local file.
When you open DevTools, you are prompted to identify your root folder. You can opt out by selecting Close (x) or selecting the Don't show again button. You can get more information by selecting the Learn more link.

If you select the Set root folder button, the operating system prompts you to navigate to the folder and select it.

After you select a root folder, you need to grant DevTools full access to the folder. Above the toolbar, a prompt with Allow or Deny buttons asks you whether to grant permission to DevTools to access the folder.

After you grant permission, the folder you select is added as a Workspace in DevTools, in the Filesystem tab of the Sources tool. This means that any file you edit in DevTools now opens in Microsoft Visual Studio Code instead of in the Sources tool. As an indicator, we show a linked icon next to the file name. In this example, we'll select the base.css link in the Styles tool.
DevTools opens an instance of Visual Studio Code and shows all the files in the root folder. DevTools also opens the file you've selected, scrolled to the correct line of the CSS selector.

Any changes that you make to the file in DevTools will now be synced to Visual Studio Code. For example, if you change the background to be green for the styles of the body, the same CSS rule will automatically be added to the base.css file in the code editor of Visual Studio Code.

Changing the workspace settings
To change the behavior of the Open source files in Visual Studio Code experiment, go to the DevTools Settings page by clicking Settings (the gear icon) or pressing Shift+?, and then select the Workspace page:

The Settings > Workspace page lists your workspaces, along with the following configuration options:
ﾉ Expand table
UI controlDescriptionOpen source files in Visual Studio Code checkboxSets whether to open source files in Visual Studio Code.Save DevTools changes to disk checkboxAutomatically saves DevTools changes to disk.Folder exclude pattern text boxAutomatically excludes folders from a workspace folder.Add button next to Excluded foldersExcludes a folder from a specific workspace.Add folder buttonAdds an additional workspace.Debug Microsoft Edge in Visual Studio Code
Article • 01/25/2022
Visual Studio Code includes a built-in debugger for Microsoft Edge, which can launch the browser or attach to an already running browser.
This built-in debugger lets you debug your front-end JavaScript code line-by-line and see console.log() statements directly from Visual Studio Code.
For more information, see Browser debugging in VS Code.
Send your feedback by filing an issue in the vscode-js-debug repository.
You can also inspect HTML and CSS using DevTools from within Visual Studio Code. To learn more, see Browser debugging with Microsoft Edge Devtools integration in Visual Studio Code.

Visual Studio for web development
Article • 09/24/2024
Microsoft Visual Studio is an integrated development environment (IDE). Use it to edit, debug, build, and publish your web apps. Visual Studio is a feature-rich program that can be used for many aspects of your web development.
In addition to the standard editor and debugger that most IDEs provide, Visual Studio includes features to ease your development process, including:
Compilers.
Code completion tools.
Graphical designers.
And many more features.
If you aren't already using Visual Studio, go to Download Visual Studio to download it.
Currently, Visual Studio 2019 supports debugging JavaScript in Microsoft Edge for your
ASP.NET Framework and ASP.NET Core apps. To use Visual Studio to debug Microsoft Edge, do the following steps.
Launch Microsoft Edge
Follow the steps in this section to use Visual Studio to do the following:
Build your ASP.NET and ASP.NET Core app.
Start a web server.
Launch Microsoft Edge.
Connect the Visual Studio debugger with a single button.
The simplified workflow allows you to debug JavaScript that runs in Microsoft Edge directly from your IDE.
Create a new ASP.NET Core web app
First, create a new ASP.NET Core web app, as follows:
1. Open Visual Studio 2019 and select Create a new project.
2. In the search box on the next screen, enter react.
3. Select ASP.NET Core with React.js from the list of templates and then Next.

This React.js template specifies how to integrate React.js with an ASP.NET Core app.
You've now created a project for an ASP.NET Core web app.
Launch Microsoft Edge from Visual Studio
Next, run and debug the ASP.NET Core web app project in Visual Studio, as follows:
1. Open ClientApp/src/components/Counter.js.
2. Select the dropdown list next to the green Play button and IIS Express.

3. Select Script Debugging > Enabled.

4. In the same dropdown list, select Web Browser > the preview channel of Microsoft Edge that you want Visual Studio to launch, such as Microsoft Edge Canary, Dev, or
Beta. If you aren't already using one of the Microsoft Edge preview channels, go to Become a Microsoft Edge Insider to download one.


Debug JavaScript code that's running in Microsoft Edge
1. Switch back to Visual Studio to set a breakpoint.
2. In Counter.js, set a breakpoint on Line 13 by selecting the gutter next to the line.

3. Switch back to the instance of Microsoft Edge that Visual Studio launched.
4. Select Counter in the navigation menu at the top of the webpage and then select Increment.

Visual Studio now pauses the runtime of the JavaScript running in Microsoft Edge and you can step through the script line-by-line.

In the above approach, you launched Microsoft Edge from Visual Studio. Alternatively, you can an attach the Visual Studio debugger to an instance of Microsoft Edge that's already running, as described below.
The example was just a minor demonstration of the functionality available in Visual
Studio. For more information about the functionality in Visual Studio 2019, see the Visual Studio documentation.
Attach Visual Studio debugger to a running instance of Microsoft Edge
To attach the Visual Studio debugger to an instance of Microsoft Edge that's already running:
1. Make sure that there are no running instances of Microsoft Edge.
2. From your command line, run the following command:
Consolestart msedge --remote-debugging-port=92223. In Visual Studio, select Debug > Attach to Process or Ctrl+Alt+P.

4. In the Attach to Process dialog, set Connection type to Chrome devtools protocol websocket (no authentication).
5. In the Connecting target text box, type http://localhost:9222/ and then press Enter.
6. Review the list of open tabs you have in Microsoft Edge listed out in the Available processes section.

7. Select the tab you want to debug from the list, and then select Attach.
8. In the Select Code Type dialog, select JavaScript (Microsoft Edge - Chromium) and select OK.
The Visual Studio debugger is now attached to Microsoft Edge. You can pause the running of JavaScript, set breakpoints, and view console.log() statements directly in the Debug Output window in Visual Studio.
Edge DevTools extension for Visual Studio
Debug your ASP.NET projects in Visual Studio with the Edge Developer Tools. You can embed the Microsoft Edge Developer Tools in Microsoft Visual Studio to debug your ASP.NET projects live. Download the Microsoft Edge Developers Tools for Visual Studio (PREVIEW) from the Visual Studio Marketplace.
To use the extension:
1. Make sure Visual Studio 2022 and the ASP.NET workload are installed.
2. Set up Web Live Preview as the default Web Forms Designer, as described in the above page.
3. Open an ASP.NET project.
4. Open a webpage of the project in the Design window.
5. In the upper left of the Design window, click the Open Edge DevTools () button:

Edge DevTools for Visual Studio opens, with the Elements tool selected:

The Network tool is also open by default:

The Inspect tool (	) and Toggle screencast (	) are available, and the More Tools (	) menu offers the Issues tool, the Network conditions tool, and the Network request blocking tool:

See also:
Find and fix problems using the Issues tool
Network conditions tool
Network request blocking tool
Edge Developer Tools for Visual Studio (Preview), at Visual Studio DevBlogs. Microsoft Edge DevTools extension for Visual Studio in What's New in DevTools (Microsoft Edge 99).
Getting in touch with the Microsoft Visual Studio team
The Microsoft Visual Studio and Microsoft Edge teams wants to learn more about how you work with JavaScript in Visual Studio. To send your feedback, select the Send
Feedback icon in Visual Studio, or tweet @VisualStudio and @EdgeDevTools
See also
 Microsoft Edge DevTools extension for Visual Studio in What's New in DevTools (Microsoft Edge 99).
Find and fix problems using the Issues tool
Network conditions tool
Network request blocking tool
External:
Visual Studio
Download Visual Studio
Become a Microsoft Edge Insider
Microsoft Edge Developers Tools for Visual Studio (PREVIEW) at Visual Studio Marketplace.

Feedback
Was this page helpful?  Yes  No

Accessibility in Microsoft Edge
Article • 12/07/2023
Development of your webpages, web apps, and web-enabled products is robustly supported through the extensive Accessibility features in Microsoft Edge and its tooling ecosystem.
"The impact of disability is radically changed on the Web because the Web removes barriers to communication and interaction that many people face in the physical world." - W3C Standards for Web Design and Applications: Accessibility
The World Health Organization defines disability as "a mismatch in interaction between the features of a person's body and the features of the environment in which they live". Disabilities range from situational disabilities, like limited mobility while holding a baby or bright sunlight on a phone, to other physical, auditory, visual, or agerelated impairments.
Designing websites and other technologies for inclusion creates an experience enjoyable by every person. Inclusive design and web accessibility empowers and assists everyone to use the web.
The articles in this Accessibility section present some best practices, code samples, and further resources for you to learn more about designing, building, and testing accessible websites in Microsoft Edge.
Microsoft Edge DevTools
Microsoft Edge DevTools is built into the Microsoft Edge browser, and includes many accessibility-testing features, to test aspects of webpages including:
Alt-text for images, and screen reader support.
Keyboard support.
Text contrast.
Usability with vision deficiencies.
Usability when the browser is narrow.
See:
 Accessibility-testing features - a list of accessibility aspects to test and the corresponding DevTools features.
Microsoft UI Automation API
In Microsoft Edge, we introduced the UI Automation API (UIA API). This change to UI automation was a major investment in browser accessibility. The UI Automation API lays the foundation for a more inclusive web experience for users who depend on assistive technology in Windows 10 or later.
The Microsoft UI Automation API is an accessibility framework that enables Windows applications to provide and consume programmatic information about user interfaces (UIs). It provides programmatic access to most UI elements on the desktop. It enables assistive technology products, such as screen readers, to provide information about the
UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI.
The Microsoft Windows UI Automation blog has posts about the Windows Automation API.
The accessibility system in Microsoft Edge inherently supports modern web standards including ARIA, HTML5, and CSS3. The following diagram of the simplified browser pipeline follows webpage content into an accessible presentation layer:

The Microsoft Edge team works with the W3C and other browser vendors on an ongoing basis to ensure that new web platform features have sufficient built-in accessibility.
For information on which new HTML features are accessibly supported by Microsoft Edge, see HTML5Accessibility.
See also
Microsoft Edge:
Designing accessible websites
  Resources about building accessible websites Resources for accessibility testing W3C articles:
W3C Web Accessibility Initiative (WAI) Getting Started with Web Accessibility
Designing for Inclusion
Tutorials and presentations

Designing accessible websites
Article • 03/28/2023
Create a webpage design that's usable by all people, no matter their mouse or keyboard preference, age, education, geographic location, language, or disability.
People using technology and browsing the web have a wide range of abilities and preferences. As you design your website, keep in mind the following key accessibility scenarios.
Screen readers
Users who are blind or who have low vision rely on screen readers to interpret and interact with the UI of your app. Interpreting involves reading the UI element names, roles, and values. Interacting with the UI involves moving the focus from one element to another and invoking functionality such as clicking a UI element.
Keyboard accessibility
Many accessibility users rely on the keyboard to navigate and operate the UI by:
Moving focus among elements by pressing the Tab key or Shift+Tab keys.
Navigating in container elements such as lists, grids, and tree views by using the arrow keys.
Invoking actions by pressing the Enter key or Spacebar.
Using shortcut keys to efficiently access other app functionality.
Accessible visual experience
Users who have low vision need a sufficient text contrast ratio for text content, and a good visual experience with high contrast themes overall. Users who are color blind need information to be conveyed in ways other than through color.
Many common accessibility issues on the web can be solved through good coding practice. The Web Content Accessibility Guidelines (WCAG) 2.0 documentation provides techniques and best practices to help you design more accessible dynamic web applications. For more information, go to Resources about building accessible websites.
Resources
 Designing for Inclusion - Designing for Inclusion by the W3C Web Accessibility Initiative provides resources to help you better understand users with disabilities and how to design your website with them in mind.
 Designing inclusive software - Designing inclusive software discusses Microsoft design principles and practices for the Universal Windows Platform (UWP).
 How People with Disabilities Use the Web - This resource by the W3C introduces how people with disabilities, including people with age-related impairments, use the Web.
 Inclusive Design Toolkit - Microsoft developed the Inclusive Design Toolkit to show how human diversity can create better design constraints and how to connect seemingly niche solutions to broader markets.

Resources about building accessible websites
Article • 01/18/2023
The web is filled with dynamic and complex websites, applications, and user interfaces built using a combination of HTML, CSS, and JavaScript. However, when designed and built without accessibility in mind, these complex websites are difficult to use by people who rely on assistive technologies to browse the web.
Building websites that are accessible to people with disabilities requires semantic information about the user interface. Accessible websites allow assistive technologies, like screen readers, to convey the necessary information to help people with a range of abilities use the website.
Visit HTML5Accessibility for information on which new HTML5 features are accessibly supported by Microsoft Edge.
How accessibility works
Assistive technologies add capabilities that computers don't usually have. For example, a user who has low vision might use their keyboard in combination with assistive technology such as a screen reader, rather than directly using the browser with the mouse and screen.
For applications on Microsoft platforms and on the web, the assistive technology interacts with any combination of:
Microsoft UI Automation.
An application-specific object model such as the Document Object Model (DOM) in Microsoft Edge.
For web developers, certain HTML elements are mapped to UI Automation objects, so in selecting those HTML elements, the developer can use the accessibility properties and events built in to those elements. While developing your website, you usually only need to make sure that the API is correctly written to, or that the appropriate element is specified, for the application to be accessible.
Check out ARIA and UI automation in Microsoft Edge for more information. Accessible Universal Windows Platform (UWP) apps are explained at Accessibility in Windows Dev Center.
Many common accessibility issues with dynamic content can be addressed by good coding practice. The WCAG 2.0 documentation includes many techniques and best practices to help you create more accessible dynamic web applications. Even when coded properly, however, dynamic content isn't necessarily accessible. Accessible Rich Internet Applications (ARIA) helps overcome this issue.
For more information on web accessibility, check out the Introduction to Web Accessibility by the Web Accessibility Initiative (WAI).
ARIA
The Accessible Rich Internet Applications (ARIA) specification by the W3C's Web Accessibility Initiative defines as a syntax for making dynamic web content and custom user interfaces accessible to all people. ARIA extends HTML by using additional attributes (roles, properties, and states) that are designed to convey custom semantics. These attributes are used by browsers to pass along the controls' state and role to the accessibility API.
Roles, properties, and states
ARIA roles are set on elements using the role attribute to give assistive technologies and accessibility APIs information about the element. For example, the below <li> element is assigned role="menuitem" to signify that it's an item in a menu.
HTML<li role="menuitem">Home</li>ARIA states and properties are aria-prefixed attributes that provide specific information about an object to help form the definition of the nature of roles. Properties are attributes that are essential to the nature of an object, like aria-readonly and ariahaspopup. Changing a property affects the meaning of the object.
In the example below, the property aria-haspopup="true" is set on a <li> menu item to signify that it has a popup:
HTML<li role="menuitem" aria-haspopup="true">Open</li>States don't change the nature of the object, but represent information that's associated with the object, or user interaction with the object, like aria-hidden or aria-checked. For example, the state aria-checked="false" in the example below represents that the checkbox is cleared, rather than selected:
HTML<div role="checkbox" aria-checked="false">Accept</div>To see a full list of roles, properties, and states, go to The Roles Model at W3C.
Assistive technology compatibility testing
Verifying that the website you are building works with real assistive technologies is the best way to ensure that you provide a good experience for users with disabilities. Since many assistive technologies make use of the keyboard, testing the keyboard accessibility of your website is a good place to start.
Keyboard compatibility testing validates that users have access to all interactive controls without requiring a mouse. Microsoft Accessibility Insights for Web is a browser extension for Microsoft Edge and Chrome that guides you and reveals several common issues.
Once you are confident that your website works well with a keyboard, try it with other assistive technologies, such as screen readers. This testing can uncover issues in the following:
Your HTML, ARIA, and CSS.
The level of support of an assistive technology for a feature or technique.
Different browsers might map elements to the platform accessibility APIs differently than Microsoft Edge maps them. While building your interface, it's important to consider each difference.
WebAIM conducts surveys with screen reader and low vision users that help you decide which assistive technologies and browsers to test.
Learning how to test
Assistive technologies are sophisticated tools. Don't assume that you're able to immediately start testing with an assistive technology without first learning about how it works. Learning to test with a screen reader has an especially steep learning curve. A novice user of screen readers might think that a screen reader has a bug, while the issue might actually be an error in using the screen reader.
Testing with Screen Readers at WebAIM provides more information about learning to test with assistive technologies.
Testing locally
Most devices include assistive technology that is built-in to the OS. Microsoft Windows includes the Windows Narrator	 screen reader and Windows Magnifier	. 3rd party assistive technologies like NVDA	, FreedomscientificSoftwareJaws	, and ZoomText are available to download. Apple macOS includes the VoiceOver	 screen reader. And iOS, Android, and Linux all support a variety of assistive technologies.
Testing in virtual machines and emulators
Under macOS, if you want to test with an assistive technology only available for Windows, like Windows Narrator or NVDA, create a Windows virtual machine.
Android Studio includes an emulator that for you to test assistive technologies in the Android Accessibility Suite. Follow the instructions to set up a virtual device and start the emulator, then install Android Accessibility Suite from the GooglePlay store.

Cloud-based testing tools
If an assistive technology isn't available on your OS or you not possible to install one on a virtual machine or emulator, cloud-based assistive technology testing tools are the next best thing.
 Assistiv Labs (a commercial product) enables you to manually test with assistive technologies through any modern web browser. Select an assistive technology and browser and it connects you with a virtual machine, emulator, or real device that you can interact with.
See also Cloud-based emulators and simulators.
Resources for accessibility basics
These are projects and initiatives for accessibility.
The A11Y project
The A11Y Project	 is a community-driven effort to make web accessibility easier. Check out The A11Y Project	 site to learn about basic accessibility principles, their accessible pattern and widget library	, and their resources on accessibility software, blogs, books, and tools.
Web Accessibility Initiative (WAI)
The W3C Web Accessibility Initiative (WAI) is an effort to help improve the accessibility of the web. Their site provides a variety of resources for Getting Started with Web Accessibility, Designing for Inclusion, tutorials and presentations, and more.
Accessibility blogs
These are blogs about accessibility.
TPGi, LLC
TPGi, LLC provides consulting and technology solutions to organizations around the world to ensure that their clients reach all audiences effectively and efficiently, while meeting governmental and international standards. Their blog covers topics like web accessibility best practices, accessibility tools, and accessibility trends.
Level Access
Level Access is a digital accessibility firm supporting their clients in developing and deploying accessible products and services. Their blog addresses topics like ARIA best practices, accessibility trends, webinars, and more.
Accessible examples
These are libraries and examples for accessibility.
ally.js - Tutorials
JavaScript library to help modern web applications with accessibility concerns by making accessibility simpler. For more information, go to ally.js - Tutorials.
OpenAjax examples
The OpenAjax Alliance website is an excellent resource for verifying the rules for WAIARIA and provides a number of examples of WAI-ARIA implementations.
Patterns
The A11Y Project offers a library of accessible widgets and patterns like menus, buttons, tooltips, and more. For more information, go to Patterns.
Accessibility techniques and tools
These are techniques and tools for improving accessibility.
Accessibility: Creating accessible extension icons for Microsoft
Edge
Get guidance on creating accessible extensions icons for Microsoft Edge. For more information, go to Accessibility: Creating accessible extension icons for Microsoft Edge.
Accessible Name and Description: Computation and Mappings 1.1
This W3C mapping document explains how browsers determine name and descriptions of accessible objects from web content languages and expose them in accessibility APIs. For more information, go to Accessible Name and Description: Computation and Mappings 1.1.
Accessibility Evaluation Resources
Accessibility Evaluation Resources is a multi-page resource by the W3C that outlines different approaches for evaluating websites for accessibility. For more information, go to Accessibility Evaluation Resources.
Assistive technology compatibility tests
Test results showing how different content types and standards behave in assistive technologies (AT) like screen readers. For more information, go to Assistive technology compatibility tests.
Building accessible websites just got a lot easier
This .NET Web Development and Tools blog post describes the Visual Studio extension Web Accessibility Checker	. For more information, go to Building accessible websites just got a lot easier	.
Core Accessibility API Mappings 1.1
This W3C mapping document explains how the semantics of web content languages are exposed to accessibility APIs. For more information, go to Core Accessibility API Mappings 1.1.
Easy Checks - A First Review of Web Accessibility
A series of quick checks by the WAI that help you assess the accessibility of a web page.
For more information, go to Easy Checks - A First Review of Web Accessibility.
How to Meet WCAG 2.0
A quick reference to Web Content Accessibility Guidelines (WCAG) 2.0 requirements
(success criteria) and techniques. For more information, go to How to Meet WCAG 2.0.
HTML Accessibility API Mappings 1.0
This W3C mappings document explains how HTML5.1 element and attributes map to platform accessibility APIs. For more information, go to HTML Accessibility API Mappings 1.0.
Quick Tips
A list of quick web development tips for accessibility by The A11Y Project. For more information, go to Quick Tips.
Site Scan
The Site Scan tool on Microsoft Edge Dev Center checks for out-of-date libraries, layout issues, and accessibility issues. For more information, go to Site Scan.
Techniques for WCAG 2.0
Techniques from the W3C that provide guidance for web developers on meeting Web Content Accessibility Guidelines (WCAG) 2.0 success criteria. For more information, go to Techniques for WCAG 2.0.
Tips on Developing for Web Accessibility
Tips from the W3C on developing web content that is more accessible to people with disabilities. For more information, go to Tips on Developing for Web Accessibility.
WAI-ARIA Authoring Practices 1.1
A document by the W3C that provides readers with an understanding of how to use WAI-ARIA 1.1 and recommends approaches to make widgets, navigation, and behaviors accessible using WAI-ARIA roles, states, and properties. For more information, go to WAI-ARIA Authoring Practices 1.1.
WAI Guidelines and Techniques
A series of web accessibility guidelines and standards developed by the WAI. For more information, go to WAI Guidelines and Techniques.
Web Accessibility Evaluation Tools List
A list of web accessibility evaluation tools to help determine if websites meet accessibility guidelines. For more information, go to Web Accessibility Evaluation Tools List.
Web Accessibility Perspectives: Explore the Impact and Benefits for Everyone
A series of short situational videos by the W3C about the impact of accessibility and the benefits for everyone. For more information, go to Web Accessibility Perspectives:
Explore the Impact and Benefits for Everyone
Feedback
Was this page helpful?  Yes  No

ARIA and UI automation in Microsoft Edge
Article • 01/25/2022
The W3C defines Accessible Rich Internet Applications (ARIA) as a syntax for making dynamic web content and custom UI accessible. Microsoft Edge recognizes the ARIA role, state, and property information and exposes it to assistive technologies, which in turn can use the Microsoft UI Automation APIs to retrieve the information.
Visit HTML5Accessibility for information on which new HTML5 features are accessibly supported by Microsoft Edge.
The Microsoft Edge rendering engine builds an accessible projection of web pages, conforming to the following W3C specifications.
Mapping HTML elements to ARIA and UI Automation objects
The HTML Accessibility API Mappings specification defines how HTML elements and attributes map to ARIA and UI Automation objects.
Working draft - stable version of the specification.
Editor's draft - work in progress. Note that while this spec has the latest changes, the changes may not be available in Microsoft Edge yet.
Building the accessibility tree and mapping ARIA elements to UI Automation objects
The Core Accessibility API Mappings specification defines general principles for building the accessibility tree and mapping ARIA elements and attributes to UI Automation objects.
Working draft - stable version of the specification.
Editor's draft - work in progress. Note that while this spec has the latest changes, the changes may not be available in Microsoft Edge yet.
Computing descriptions of accessible objects given the HTML and ARIA elements
The Accessible Name and Description: Computation and API Mappings specification defines how to compute the name and description of accessible objects, given the HTML and given the ARIA elements and attribute values that are available for the accessible elements.
Working draft - stable version of the specification.
Editor's draft - work in progress. Note that while this spec has the latest changes, the changes may not be available in Microsoft Edge yet.
See also
 Building a more accessible web platform - A blog post about the accessibility architecture in Microsoft Edge.
 Building a more accessible user experience with HTML5 and UIA - Examples of how markup defines the experience of navigating with assistive technologies such as screen readers, and examples of how the architecture improves the end user's experience.
Resources for accessibility testing
Article • 02/07/2024
Accessibility testing is a form of usability testing to verify your website is usable by all people. Check out the W3C page Evaluating Web Accessibility Overview for information on when testing should be done, testing requirements, and who should test your site.
Use the following tools and testing procedures to evaluate your website for accessibility.
Accessibility testing features in DevTools
DevTools includes accessibility-testing features, such as tools that automatically generate accessibility reports for a webpage, including the Issues tool and the Lighthouse tool.
To learn more about the accessibility testing features of DevTools, see Accessibilitytesting features.
Additional manual accessibility testing
DevTools also supports manual accessibility testing, such as:
Inspect different parts of the page by using the Inspect tool.
Use the keyboard to navigate the page.
Look for issues that arise when interacting with the page.
Look for issues related to changes in display, such as making the window narrow.
You might need to perform additional checks to ensure your website is usable by people with different needs, such as:
Testing when zoomed-in.
Testing with screen readers.
Testing with voice recognition.
Testing in high-contrast mode.
Use testers who have different accessibility needs
Ideally, have testers with different accessibility needs do manual accessibility testing.
Automated tools can't find all the accessibility problems of a website, because many of the barriers show up only during interactive use. None of the accessibility-testing features can replace testing with people that use assistive technologies and following a plan to check for all the required tests.
Use Accessibility Insights
You can also use the assessment feature of Accessibility Insights to measure your website's compliance with the Web Content Accessibility Guidelines (WCAG) 2.2 Level AA success criteria. To learn more, see Assessment in Accessibility Insights for Web.
External articles and websites
 Assistive technology compatibility tests - Test results showing how different content types and standards behave in assistive technologies (AT) such as screen readers.
 HTML5Accessibility - This site tests which new HTML5 features are accessibly supported by major browsers.
 webhint - Use webhint to check for out-of-date libraries, security improvements, performance problems, and accessibility issues.
 Web Accessibility Evaluation Tools List - A list of web accessibility evaluation tools to help determine if websites meet accessibility guidelines.
The Web Accessibility Initiative (WAI)
 Accessibility Evaluation Resources - Approaches for evaluating websites for accessibility.
 Easy Checks - A First Review of Web Accessibility - Quick checks that help you assess the accessibility of a web page.
 How to Meet WCAG 2.0 - A quick reference to Web Content Accessibility Guidelines (WCAG), requirements, success criteria, and techniques.
Introduction to the Microsoft DualEngine API
Article • 01/19/2024
Use the Microsoft DualEngine API to embed and control an Internet Explorer instance within your app. The DualEngine API provides a browsing experience that's equivalent to a normal Internet Explorer tab, to provide increased compatibility with legacy websites.
The DualEngine API differs from similar APIs like the Web Browser Control, and requires distinct development work.
See also:
 Getting started with the DualEngine API
Supported platforms
The following programming environments are supported:
 Win32 C/C++
DualEngine APIs can be used on the following versions of Windows:
Windows 11
Windows 10
Windows Server 2022
See also
Getting started with the DualEngine API
Creating a DualEngine adapter plugin DLL
Launching Internet Explorer
DualEngine Win32 C++ Reference

Getting started with the DualEngine API
Article • 02/28/2024
This article walks you through the steps to start using the DualEngine API.
Step 1: Get access to the DualEngine Limited
Access Feature
The DualEngine API is part of a Limited Access Feature. For more information or to request an unlock token, contact Microsoft Support.
The DualEngine LAF is handled somewhat atypically; for details, see Unlock the Limited Access Feature in Creating a DualEngine adapter plugin DLL.
Step 2: Download the DualEngine API header
The DualEngine API is a COM interface that's only officially supported via C++, and is not part of the normal Windows SDK. Therefore, you must download the DualEngine API header dualengine.h, and then include it in your adapter DLL project.
Step 3: Making an adapter DLL
The DualEngine API is accessed by providing a plugin DLL to Internet Explorer at launch. Internet Explorer loads the DLL on startup, calls some exports on the DLL, and provides you with the objects that you need in order to access the API. See Creating a DualEngine adapter plugin DLL.
Step 4: Launching Internet Explorer
Finally, Internet Explorer must be launched and told where and how to load the adapter that you created. This can be done by launching Internet Explorer with the correct command-line arguments, as follows:
C:\Program Files\Internet Explorer\iexplore.exe -
DualEngineAdapter=C:\temp\TestApp\TestAdapter.dll -DualEnginePipe=784 
APPID:TESTAPPFor more information about these command-line arguments, see Launching Internet Explorer.
At this point, Internet Explorer is now running your adapter code, which can now access the DualEngine API. To see what functionality is available, explore DualEngine Win32 C++ Reference.

Creating a DualEngine adapter plugin DLL
Article • 01/19/2024
The DualEngine API can only be used from inside the Internet Explorer process.
Therefore, to use the DualEngine API, you must create a plugin DLL that Internet Explorer loads. This DLL hosts your code that uses the DualEngine API, as well as any code that's needed for communicating with your main application; that's why it's referred to as the adapter.
To have Internet Explorer successfully load your DLL, do the following.
Unlock the Limited Access Feature
The DualEngine API is a Limited Access Feature (LAF); that is, a feature that needs to be unlocked before it can be used. For more information about implementation, see LimitedAccessFeatures Class. To request an unlock token, contact Microsoft Support.
The DualEngine API is not a typical LAF, in that
Windows.ApplicationModel.TryUnlockFeature is not used to unlock the feature. This is because LAF typically uses the application identity of the calling process to grant access, and as a plugin DLL, this will always be Internet Explorer. Therefore, to unlock the API, you need to call DualEngineSessionFactory::TryUnlockFeature.
In addition, the identity of your application must be provided to Internet Explorer via a specific resource string that's set in your DLL. You can set the value in your resource file as follows:
C++IDENTITY LIMITEDACCESSFEATURE { L"ExampleApp_6v1kqc8g0gcae" }Your specific identity string will be provided to you by Microsoft when LAF access is granted.
Implement function exports
Your adapter DLL must implement the following function exports:
DualEngineInitialize
DualEngineReady
These exports are called by Internet Explorer when loading your DLL. They provide you with the factory objects for creating DualEngine API objects.
These exports are called from the main thread of the Internet Explorer process, so doing any long-term processing inside the exports will halt Internet Explorer. Therefore, to handle any long-running work, you should create a new thread.
DualEngineInitialize
C++HRESULT APIENTRY DualEngineInitialize(DualEngineSessionFactory* pSessionFactory, PCWSTR pipeName)Parameters
pSessionFactory The factory object to use to access the DualEngine API. pipeName A string that was passed in to Internet Explorer via the -DualEnginePipe
command-line flag.
This export is called immediately after Internet Explorer successfully loads the DLL. This is your first chance to set up anything necessary for your application.
This is where you would typically set up communication between the adapter DLL and your host app. The pipeName string is provided for this purpose. Despite its name, the
pipeName string doesn't need to be a pipe name; it's simply a string that's passed to
your adapter based on the value of the -DualEnginePipe command-line flag that Internet Explorer was launched with, and has no other semantic meaning.
Although the pSessionFactory object is provided in this call, it's not valid to call
GetVersionedBrowserSession yet, because at this point, Internet Explorer isn't ready to create Sessions.
DualEngineReady
C++HRESULT APIENTRY DualEngineReady()This export is called after Internet Explorer has finished all of its initial setup and the API is ready to use. It's now possible to call GetVersionedBrowserSession and get the Session object, assuming a successful call to TryUnlockFeature has been made.
Bypass signing the adapter DLL
Internet Explorer has a requirement that for an adapter DLL to be loaded, it must be signed with a trusted signature. For testing and development purposes, this check can be bypassed, by turning on TestSigning for the device that you're testing on, as follows:
Windows Command PromptBcdedit.exe -set TESTSIGNING ON
Launching Internet Explorer
Article • 01/19/2024
After you've built your adapter DLL, you must launch Internet Explorer such that it is aware that it is being used for the DualEngine API, as follows.
Required command-line arguments
The following command-line arguments must be present in order to launch Internet Explorer in the correct way to use the DualEngine API.
DualEngineAdapter
-DualEngineAdapter=<full-path-to-adapter-dll>
Indicates the path to the DualEngine API adapter DLL to load. For information on how to write an adapter DLL, see Creating a DualEngine adapter plugin DLL.
DualEnginePipe
-DualEnginePipe=<pipe-string>
This argument provides a string that is eventually passed to the adapter DLL via the
DualEngineInitialize export. This can be used to pass a pipe name to your adapter code in order to bootstrap communication between your adapter and main application. Although DualEnginePipe is a required command-line parameter, it's only used if it's passed to your code through DualEngineInitialize. Therefore, despite its name, this need not be a pipe name; it can be any arbitrary string that you require.
APPID
APPID:<your-app-id>
This argument provides the Application User Model ID of your application. This ID is used to associate the Internet Explorer process with your application, for a number of Windows Shell features. For more information, see Application User Model IDs.
Optional command-line arguments
The following command-line argument is optional, to adjust Internet Explorer's behavior for the Dual Engine API.
DualEngineVersion
-DualEngineVersion=<force_version_number>
Forces Internet Explorer to instantiate DualEngine objects of the provided version, if it can. This will block the creation of DualEngine objects that don't match the provided version number, even if this version of Internet Explorer supports this version.
Diagnosing launch issues
There are a number of reasons that Internet Explorer may fail when launching. If this occurs before or while loading your DLL, it can be difficult to determine the exact reason and communicate it back to your application. Therefore, if Internet Explorer fails to launch while launching it for DualEngine use, get detailed error handling information by checking the StartupFailurePoint registry value.
StartupFailurePoint
HKCU\SOFTWARE\Microsoft\Internet Explorer\EdgeIntegration\StartupFailurePoint
Contains a DWORD that indicates the location of the failure in the DualEngine startup path.
The DWORD maps to the following reasons:
ﾉ Expand table
DWORDReason0No failure.1Unused.2Unused.3The version specified by the DualEngineVersion argument was 0.4Failed to canonicalize the path passed in via DualEngineAdapter; see the StartupFailureHresult.5Unused.DWORDReason6Unused.7LoadLibrary failed for the provided adapter DLL; see the StartupFailureHresult.8Could not find DualEngineInitialize in the adapter DLL.9The call to DualEngineInitialize failed; see the StartupFailureHresult.10Failed to set the provided Application User Model ID; see the StartupFailureHresult.11DLL failed signature check.12Unused.13DLL did not have IDENTITY LIMITEDACCESSFEATURE resource.StartupFailureHresult
HKCU\Software\Microsoft\Internet Explorer\EdgeIntegration\StartupFailureHresult
Contains a DWORD that's the failing HRESULT from the StartupFailurePoint, if there was a StartupFailureHresult. To see whether a given reason provides a StartupFailureHresult, see the above table.

DualEngine Win32 C++ Reference

The Microsoft DualEngine API enables you to host and control an Internet Explorer instance within your app. For more information, see Introduction to the Microsoft DualEngine API and Getting started with the DualEngine API.
Globals
 Globals
Interfaces
DualEngineSessionFactory
IDualEngine20BrowserSessionObserver
IDualEngine20BrowserSession
IDualEngine20BrowserObserver
IDualEngine20Browser
Structs
ACCELERATOR
CryptDataBlob
DualEngineCookie
DualEngineNewWindowOptions tagSentinelEntryInfo VisibleListUpdateEntry
Videos about web development with Microsoft Edge
Article • 06/20/2024
Discover and learn about new Microsoft Edge web development technologies and products including DevTools, web platform APIs and features, Progressive Web Apps, and WebView2.
This page contains links to short videos, each focused on just one feature and including a demo.
Microsoft publishes new videos on a regular basis on the Microsoft Edge YouTube channel, and they are also listed below.
Click on a thumbnail from the following list to watch the corresponding video on YouTube.
Microsoft Edge channel at YouTube
You can find all videos about development using Microsoft Edge at the Microsoft Edge (@MSFTEdge) channel at YouTube.
The Microsoft Edge channel includes the following playlists:
Developer
What's New in DevTools
Extensions
Explain DevTools Console errors using Copilot in Edge

The Console and Sources tools in Microsoft Edge DevTools now integrate with Copilot in Microsoft Edge to help you understand errors and source code. Use this feature to get help with debugging your code.
See also:
 Explain Console errors and warnings using Copilot in Edge
The JSON viewer

The JSON viewer automatically formats and highlights JSON responses and files in browser tabs. When your web server responds to HTTP requests with data encoded as JSON, this data isn't always easy to read and is sometimes returned as one line of text. The JSON viewer changes the returned data to make it easier to read. The JSON syntax is highlighted with different colors, object properties are displayed on their own lines and indented, and objects can be collapsed or expanded.
See also:
 View formatted JSON responses or files
Microsoft Edge | What's New in DevTools 113
and 114
July 24, 2023


Covers:
The Crash Analyzer tool.
Aggregate CSS selector stats.
Warnings for CSS properties that trigger layout.
Memory tool improvements.
Accessibility improvements.
Better high-contrast mode support in the DevTools extension for VS Code. console.table().
See also:
What's New in DevTools (Microsoft Edge 114)
What's New in DevTools (Microsoft Edge 113)
Microsoft Edge | What's New in DevTools 112

Covers:
Unminified JS names for OOPIFs in the Performance tool.
Non-simple CSS selectors in the CSS Overview tool.
Code folding in the JSON viewer.
Improvements in the DevTools UI.
New markers for logpoints and conditional breakpoints.
How to change themes in DevTools.
See also:
What's New in DevTools (Microsoft Edge 112)
Analyze CSS selector performance during Recalculate Style events - CSS selector stats.
 View formatted JSON responses or files
Microsoft Edge | What's New in DevTools 111

Covers:
Remotely debug web content on Xbox and HoloLens devices.
Unminified file and function names in the Performance tool.
Can copy the CSS Selector Stats table to Excel.
Rendering emulation features in the Device Mode toolbar.
Better Elements tool sidebar.
Better Quick View accessibility.
High-definition color features.
Customize the Network tool's columns.
See also:
What's New in DevTools (Microsoft Edge 111)
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Microsoft Edge | What's New in DevTools 110
February 16, 2023

Covers:
Faster heap snapshot recordings.
Improved customization of Focus Mode (DevTools UI).
Accessibility and contrast themes improvements.
Automatic in-place pretty-printing in the Sources tool.
Simulate prefers-color-scheme.
See also:
What's New in DevTools (Microsoft Edge 110)
Overview of DevTools
Microsoft Edge | What's New in DevTools 109

Covers:
Enhanced traces to share memory and performance recordings.
Selector Stats in the Performance tool.
Track garbage-collected (GC'd) objects in the Memory tool.
Heap Snapshot visualizer extension.
Redesigned Quick View panel in Focus Mode.
New commands for the Styles panes.
Inspecting elements.
See also:
What's New in DevTools (Microsoft Edge 109)
Share enhanced performance and memory traces
Analyze CSS selector performance during Recalculate Style events - selector stats. Investigate memory allocation, with reduced garbage ("Include objects" checkboxes) in Speed up JavaScript runtime ("Allocation sampling" profiling type).
Trash talk: the Orinoco garbage collector Heap Snapshot visualizer extension.
Microsoft Edge | What's New in DevTools 108

Improved navigation in Command Palette.
High-contrast mode fixes.
Disabled JavaScript warning.
See inactive CSS properties.
New documentation to create your own tools.
WebDriver available on macOS on Apple M1.
Use Detached Elements to find DOM leaks.
See also:
What's New in DevTools (Microsoft Edge 108)
Create a DevTools extension, adding a custom tool tab and panel
The heap snapshot file format
Microsoft Edge WebDriver - download Edge WebDriver.
Microsoft Edge | What's New in DevTools 107
November 8, 2022

Covers:
Text labels in the Focus Mode DevTools UI.
New shortcut for Command Palette.
Large heap snapshots in the Memory tool.
High-contrast mode fixes.
Switch off "search as you type".
Automate WebView2 with Playwright.
Customize shortcuts.
See also:
 What's New in DevTools (Microsoft Edge 107)
Microsoft Edge | Learn to Use the Network Tool

Learn to use the Network tool in Microsoft Edge DevTools.
Covers:
Why the Network tool in DevTools is essential for web developers.
How websites get the information they need from the internet to get displayed in the web browser.
When to use the Network tool.
A tour of the Network tool UI.

Displaying requests in the Network tool.
Viewing the details for a request/response.
Customizing the Network tool.
Sorting, filtering, and searching requests.
Investigating performance issues.
Blocking requests and exporting as HAR files.
Editing and resending requests.
See also:
 Inspect network activity
Microsoft Edge | What's New in DevTools 106

The Command Palette experiment.
Quick Fix issues in the Edge DevTools VS Code extension.
DevTools uses less disk space.
Better accessibility in Focus Mode (DevTools UI), and high-contrast bug fix.
Deprecated Chromium Light/Dark themes.
New interactions track in the Performance tool.
Using Snippets.
See also:
 What's New in DevTools (Microsoft Edge 106)
Microsoft Edge | What's New in DevTools 105
September 6, 2022

Covers:
PWA protocol handling debugging.
Focus Mode improvements.
Focus Mode bug fixes.
Improved Network and Issues tools reliability.
Live edit function code while debugging.
Using log points.
See also:
 What's New in DevTools 105
Understand the DevTools user interface

This slightly older (September 2022) video shows the legacy UI for DevTools:
Instead of the Activity Bar, the video shows the main toolbar.
Instead of the Quick View panel, the video shows the Drawer at bottom of DevTools.
Covers:
 The UI structure of DevTools, with the main toolbar and panel at top, and the Drawer toolbar and panel at bottom.
 How the Microsoft Edge DevTools UI is organized.
What the main parts of the DevTools interface do.
What tools are available.
The Inspect tool.
Device Emulation mode.
Tools in the main toolbar or in the Drawer.
The More tabs button.
The More tools button to see all 30+ tools.
Closing tools.
Reordering tools in the main toolbar.
The Drawer and its toolbar.
Moving tools between the main toolbar and Drawer toolbar.
How to restore the default settings.
See also:
Overview of DevTools
About the list of tools
Microsoft Edge | What's New in DevTools 104

Rendering/accessibility bug fixes.
Composited layers are now in the 3D View tool, and the Layers tool was removed.
Group files in the Sources tool.
Find where nodes get slotted in web components.
Where to find more information.
How to change where the Activity Bar is placed.
See also:
What's New in DevTools 104
Debug the web in 3D with the 3D View tool - blog post.

Microsoft Edge | What's New in DevTools 103

Redesigned Welcome tool.
New color picker.
New memory heap snapshot node types.
High contrast mode bug fix.
Open any HTML page in the VS Code extension.
See also:
 What's New in DevTools 103
Debug the web in 3D

The 3D View tool in Microsoft Edge DevTools provides a 3-dimensional representation of the webpage you're inspecting. Use the 3D View tool to debug common web development problems, such as:
Deeply nested DOM nodes.
Out-of-document elements.
Unwanted scrollbars.
Z-index stacking issues.
Composited layers performance.
See also:
Navigate webpage layers, z-index, and DOM using the 3D View tool Debug the web in 3D with the 3D View tool - blog post.
Use your preferred language in Microsoft Edge
DevTools

How to select the UI language that's most comfortable to you for coding and debugging. Microsoft Edge DevTools supports 13+ different languages.
See also:
 Change DevTools language settings
Microsoft Edge | What's New in DevTools 102

 Visual Studio Code.
Heap Snapshot Export.
Cycles Internal Nodes.
Help Icon.
Issues Fixed.
See also:
 What's New in DevTools 102
Fully style the drop-down part of a HTML
<select> with the new <selectmenu> element
Styling <select> elements has been challenging. The experimental <selectmenu> (or
<selectlist>) element promises to overcome the remaining limitations by enabling web developers to style all parts of the element.
June 2024 update: This new element is still experimental. The <selectmenu> element was renamed to <selectlist> in 2023.
See also:
Open UI's <selectlist> demos
Styling <select> elements for real - blog post about styling <select> elements and the <selectmenu> element.
Advanced issues filtering in Edge DevTools and
VSCode
May 20, 2022


Every web product has issues. The Microsoft Edge DevTools Issues tool analyzes the current webpage and reports issues grouped by type including accessibility, compatibility, performance, and more.
The Microsoft Edge DevTools extension for Visual Studio Code makes issues available in your source code directly.
Released products can have issues. Based on your feedback, we added useful ways to filter issues. You can disable issues coming from third-party libraries, and choose which browsers to view issues about.
See also:
Find and fix problems using the Issues tool
Inline and live issue analysis in the DevTools extension for VS Code
Create a scroll-linked animation without
JavaScript

Learn about the CSS scroll-linked animations feature and how it can be used to create a reading progress indicator on a webpage, without using JavaScript. This is a feature of the web platform as a whole, not only Microsoft Edge.
As of July 21, 2023, this feature is no longer experimental, and is now supported in
Microsoft Edge without a flag. From 2022 description: CSS scroll-linked animations is an experimental feature in Microsoft Edge; to try this feature, go to edge://flags and then enable the Experimental Web Platform features setting.
See also:
Reader demo - demo app that's shown in the video.
Source code for Reader demo
CSS scroll-driven animations at MDN.
@scroll-timeline at MDN: original page about the experimental CSS scroll-linked animations feature.
Customizing Microsoft Edge Developer Tools and quick feature access

Learn how to customize DevTools to fit your needs. Covers:
Dock or undock DevTools.
Open new tools.
Close tools that you don't need.
Move tools in the bottom Drawer (now the Quick View panel).
Customize the text size.
Customize the theme.
Use the Command Menu keyboard shortcuts to quickly customize DevTools.
See also:
Overview of DevTools
Run commands in the Command Menu
Highlight text on the web with the CSS Custom
Highlighting API
April 28, 2022

Styling ranges of text on the web is very useful but has historically been a complicated thing to do.
The CSS Custom Highlight API is the future of highlighting text ranges on the Web. This API provides web developers with JavaScript and CSS features that make it easier and more efficient to style any range of text.
See also:
 CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web
Microsoft Edge | What's New in DevTools 101

Using the Console.
Source Maps Cache.
Status Text Column.
Switching Themes.
See also:
What's New in DevTools 101
Console integration: https://aka.ms/ConsoleIntegration
 Network Columns: https://aka.ms/NetworkColumns
Microsoft Edge | What's New in DevTools 100

Covers:
The Microsoft Edge Developer Tools repo, to submit feedback and ideas.
Added Czech and Vietnamese languages for DevTools UI.
In the Memory tool, filter heap snapshots by node type.
The Network tool has a Fulfilled By column, showing service worker or cache.
The links from an imported performance profile use source maps from Azure Artifacts symbol server to map back to your familiar original source code.
See also:
What's New in DevTools 100
DevTools feedback repo
Microsoft Edge | What's New in DevTools 99

Covers:
 Azure Artifacts Symbol Server and sourcemaps.
Improved Layers pane in the 3D View tool.
Use sourcemaps to unminify performance profiles.
Live ASP.NET debugging in DevTools for Visual Studio.
Accessibility in Network Console tool and 3D View tool.
See also:
 What's New in DevTools 99
Automatic image descriptions in Microsoft
Edge

Microsoft Edge provides auto-generated alt text for images that don't include it. Autogenerated alt text helps users of assistive technology such as screen readers discover the meaning or intent of an images on the web.
Many people who are blind or low-vision experience the web primarily through a screen reader: an assistive technology that reads the content of each page aloud. Screen readers depend on having image labels (alternative text or "alt text") provided that allows them to describe visual content - like images and charts - so the user can understand the full content of the page. Alt text is critical for making the web accessible, yet it's often overlooked. More than half of the images processed by screen readers are missing alt text.
See also:
 Appears to say: Microsoft Edge now provides auto-generated image labels blog post
Microsoft Edge | What's New in DevTools 98
February 23, 2022

Emulate Forced Colors mode.
Activity icons in the Performance tool event log have tooltips.
Shallow sizes in the Memory tool are represented as decimal values.
In the Network tool, the Search box resizes as needed.
In the Application tool, UI is aligned correctly.
Updates for the Chromium browser engine.
See also:
 What's New in DevTools 98
Microsoft Edge | What's New in DevTools 97

Covers:
The Detached Elements tool is available by default.
The 3D View tool supports changing color themes in DevTools.
Focus Mode (DevTools UI) improvements.
DevTools extension for VS Code has additional features.
See also:
What's New in DevTools 97
Refresh the device list: https://aka.ms/RefreshDeviceList
Autocomplete with Edit as HTML https://aka.ms/AutocompleteEditHTML
Improved debugging experience: https://aka.ms/NewDebugging
Debug memory leaks with the Microsoft Edge
Detached Elements tool

To debug DOM memory leaks, use either:
 The Detached Elements tool. Detached nodes have a link to the associated JavaScript code.
 The Detached elements profiling type in the Memory tool.
The Detached Elements tool helps you investigate and resolve DOM memory leaks.
Memory leaks occur when the JavaScript code of an application retains more and more objects in memory instead of releasing them for the browser to garbage-collect. We built the Detached Elements tool with the Microsoft Teams developers, and it has already helped us find and fix memory leaks across many of our own websites and apps.
See also:
Debug DOM memory leaks by using the Detached Elements tool
Debug memory leaks with the Microsoft Edge Detached Elements tool - blog post.
Microsoft Edge | What's New in DevTools 96
December 9, 2021

New DevTools UI: Focus Mode.
The Console tool can be in both the top and bottom panels of DevTools.
The Sources tool notifies you when sourcemaps can't be loaded.
Clicking a dropdown's triangle icon opens the menu.
Opening source files in Visual Studio Code integrates with the Sources tool.
See also:
What's New in DevTools 96
Microsoft Edge DevTools extension for Visual Studio Code
Microsoft Edge | What's New in DevTools 95

Covers:
Search Web icon for all error and warning messages.
Improved access for defining User-Agent Client Hints.
Console filters display grouped messages.
See also:
 What's New in DevTools 95
Microsoft Edge | The EyeDropper API

The Microsoft Edge team specified and implemented the new EyeDropper API in collaboration with the Chromium open-source project. Provide feedback at Issues WICG/eyedropper | github.com.
Many creative applications enable users to pick colors from parts of an app window or even from the entire screen, typically using an eyedropper metaphor. The EyeDropper API enables authors to use a browser-supplied eyedropper in the construction of custom color pickers on the web.
See also:
Picking colors of any pixel on the screen with the EyeDropper API | web.dev
EyeDropper API - Web APIs | MDN developer.mozilla.org
Microsoft Edge | What's New in DevTools 94

Search for Console errors on the web.
Breakpoint icons are displayed when using Visual Studio Code themes.
 DevTools extension for Visual Studio Code includes the latest tools, theme support, and helpful links. JavaScript Debugger connection to remote workspaces.
Update: Starting with Microsoft Edge 131, the Visual Studio Code themes feature is removed, and such themes revert to the default themes:
Light+ Dark+
See also:
What's New in DevTools 94
Keyboard shortcuts - Navigating DevTools with a keyboard.
Microsoft Edge | What's New in DevTools 93

DevTools UI.
Debug DOM node memory leaks with the Detached Elements tool.
Change Display Language.
Copy CSS declarations in the Elements tool's Styles pane for CSS-in-JS libraries.
Easier customization of User-Agent Client Hints.
Screen readers announce errors, warnings, and issues displayed in the toolbar and Console.
Copy as PowerShell in the Network tool includes cookies.
The Visual Studio Code debugger integrates with the DevTools Extension for VS Code.
See also:
 What's New in DevTools (Microsoft Edge 93)
Microsoft Edge | State of the Platform

Microsoft Edge brings a compelling and consistent platform and tools for developers. As our legacy browsers phase out of support, Edge will soon be the only supported browser from Microsoft on Windows 10. Learn about the latest across the Edge platform, tools, and web apps.
Covers:
Delegated Ink Trails.
New Web Capabilities for developers.
Run on OS login.
Microsoft Edge Tools for VS Code.
See also:
The future of Internet Explorer on Windows 10 is in Microsoft Edge - IE mode.
Adopt Microsoft Edge with FastTrack
"Microsoft Edge: State of the Platform": Session Resources
Ignite | March 2021 | Igniting the Web Apps Story

Progressive Web Apps (PWA) are supported in Microsoft Edge, and they represent an opportunity to enhance discoverability and engagement with your application. New capabilities of the Web platform. How these modern Web applications integrate seamlessly with Microsoft Windows.
Covers:
The ability to modernize.
Joint efforts to empower the Web platform.
Microsoft Edge and the Chromium browser engine. Microsoft Edge and web capabilities (Project Fugu).
Making PWAs shine on Windows.
Best-in-class reach.
Install a website as an app.
Get involved with PWAs on Windows.
See also:
 Overview of Progressive Web Apps (PWAs)
Ignite | September 2020 | The latest in developer tooling

Microsoft Edge developer tools help make web development, testing, and automation easier. Learn how we prioritize accessibility in our tooling and applications, and how we help to empower others to do the same.
Covers:
DevTools extension for VS Code.
Cross-browser testing and automation. Selenium, WebDriver, Puppeteer, Playwright, and CI/CD via Docker containers.
 Collaboration on the Chromium browser engine. How to contribute.
Localized UI in developer tools. Accessibility in developer tools.
See also:
 Microsoft Edge DevTools documentation
See also
YouTube:
Microsoft Edge (@MSFTEdge) channel at YouTube Developer	 - playlist.
	What's New in DevTools	 - playlist.
	Extensions	 - playlist.
Feedback
Was this page helpful?  Yes  No
Microsoft Edge Privacy Whitepaper
Article • 09/05/2024
Our browser privacy promise is to provide you with the protection, transparency, control, and respect you deserve. To uphold commitments to give you transparency into Microsoft products, the Microsoft Edge team provides this privacy whitepaper. It explains how Microsoft Edge features and services work and how each may affect your privacy. The goal of the Microsoft Edge team is to give you a full understanding of how your data is used, how to control the different features, and how to manage your collected data. After reading this document, you will have the information needed to make the right privacy decisions for you.
This document provides links to go to Microsoft Edge settings and other pages. The shortcuts URLs start with edge:// such as edge://favorites and edge://settings/privacy. To go to the pages, type the bolded text directly into the Microsoft Edge address bar. The pages are only viewable in Microsoft Edge.
This whitepaper focuses on the desktop version of Microsoft Edge. Parts of the document may include features or experiences that aren't available for all users. This whitepaper also discusses features and services that exist in the product today, but subject to change in the future. Microsoft practices data collection minimization. Your data is kept for the minimum amount of time. Retention times vary depending on the feature or service and may change over time.
Address bar and suggestions
The Address bar allows you to enter website URLs and search the web. By default, the Address bar provides search and site suggestions using the characters you type. Suggestions come from your favorites, browsing history, previous searches, and default search provider.

To speed up browsing and searching, characters that you type into the Address bar are immediately sent to your default search provider. The search provider returns suggested search queries as you type.
The following information is sent to your default search provider:
A list of Address bar entries, categorized as a URL, search, or unknown.
Which suggestion you select.
The position of the selection.
Other Address bar data.
If your search provider is Bing, a resettable identifier that's unique to your browser is sent with the data. This helps Bing understand the search query and query session. Other autosuggest service identifiers are sent to your default search engine, to complete the search suggestions. Your IP address and cookies are sent to your default search provider, to increase the relevance of the search results.
When you select the Address bar, a signal is sent to your default search provider. The signal tells the provider to prepare suggestions. The typed characters and search queries aren't sent to Microsoft unless your search provider is Bing.
Controlling whether typed characters are sent
You can control whether typed characters are sent to your default search provider to provide search and site suggestions. To enable or disable sending your typed characters in the Address bar to your default search provider:
1. Select Settings and more () > Settings > Privacy, search, and services.
2. In the Services section, select Address bar and search > Search suggestions and filters, and then turn on the Show me search and site suggestions using my typed characters toggle:

If you turn off that toggle, your typed characters are no longer sent to your default search provider, but your search queries are still sent to your default search provider, to provide search results.
Microsoft Search in Bing
If you're signed into Microsoft Edge using your work or school account (Microsoft Entra ID account), your typed-in characters are sent to Microsoft Search in Bing, in addition to being sent to your default search engine. As you type, Microsoft Search in Bing returns work- or school-related results and cross-device suggested queries to you.
Your administrator can choose to turn on or off the work- or school-related results or query suggestions entirely for your organization, by using the
AddressBarMicrosoftSearchInBingProviderEnabled Microsoft Search in Bing (MSB) policy. If your administrator turns off the AddressBarMicrosoftSearchInBingProviderEnabled policy:
You won't see work- or school- related results from Microsoft Search in Bing.
You won't see query suggestions from other devices on which you installed Microsoft Edge. (Regardless of the policy setting, you will see query suggestions from your default search engine that you previously searched on the present device.)
Preventing sending information about suggested queries
To prevent sending information about suggested queries to Microsoft, select Settings and more () > Settings > Privacy, search, and services, and then in the Search and service improvement section, turn off the toggle Help improve Microsoft products by sending the results from searches on the web. Even if this setting is on, information about suggested queries is not associated with you or your device.
Sensitive information that's not sent
If Microsoft Edge detects typing in the Address bar that might contain sensitive information, Microsoft Edge doesn't send the typed text. Sensitive information includes:
Authentication credentials.
Local file names.
URL data that's normally encrypted.
Enabling collecting Address bar diagnostic data
You can configure Microsoft Edge to collect diagnostic data about the Address bar. Collected data includes the number of offered queries for all search providers. To enable collecting diagnostic data, select Settings and more () > Settings > Privacy, search, and services, and then in the Personalization & advertising section, turn on the setting Allow Microsoft to save your browsing activity including history, usage, favorites, web content, and other browsing data to personalize Microsoft Edge and Microsoft services like ads, search, shopping and news.
Deleting data
Typed characters and the websites that you visit are stored locally on the device, per profile. To delete that data, select Settings and more () > Settings > Privacy, search, and services, and then in the Delete browsing data section, click the Choose what to clear button; then in the Delete browsing data dialog, click the Clear now button.
If Bing is your default search provider and you are signed in, you can delete your searches by using the Microsoft Privacy dashboard. To clear your browsing history and delete websites from appearing as suggestions in the Address bar: select Settings and more () > Settings > Privacy, search, and services, and then in the Delete browsing data section, click the Choose what to clear button; then in the Delete browsing data dialog, click the Clear now button. You can delete the data that Microsoft collects from the Address bar and search suggestions features on Windows 10 and later: open Start > Settings > Privacy > Diagnostics & feedback, and then in Delete diagnostic data, select Delete. All other data is deleted after 36 months.
You can also delete your search query history (end-user opt out), from Bing. See Suggested searches based on your search history in Find what you need with Microsoft Search.
To delete history data from both Microsoft Edge and the server, for an individual suggestion result, in the list in the Address bar, click X to the right of a Recent searches history item:

Account-specific search functions
Account-specific search functions are available if you are signed in to Microsoft Edge with a Microsoft work or school account, and Microsoft Search is available. Microsoft may send an anonymous token with your query, to provide account-specific functions, such as results specific to your company.
All data is transmitted securely over HTTPS. If Bing is your default search provider, the searches and typed characters are saved for up to six months.
Single-word search
If you search for a single word in the Address bar, Microsoft Edge may send the single word to your DNS server. If the single word corresponds to a host on your network, Microsoft Edge may try to connect to the corresponding host. For example, if your router uses the hostname router and you type router in the Address bar, you can either go to https://router, or search for the word router.
This single word is not sent to your default search engine. This feature isn't controlled by the Show me search and site suggestions using my typed characters setting.
Changing your default search provider
To change your default search engine, go to edge://settings/search, and then use the Search engine used in the address bar dropdown list.
Data that's collected by other search providers follows the privacy policy of that company.
How the Address bar is affected by InPrivate and Guest mode
If you're browsing while using InPrivate or Guest mode, your autosuggestions are turned off.
InPrivate shows suggestions from your local browsing, such as browsing history and past searches. When using InPrivate, no typed characters are sent to your default search engine.
Guest mode doesn't display any suggestions or send typed characters to your default search engine.
Autofill
Autofill in Microsoft Edge lets you save form entry data. Form entry data includes passwords, payment information, addresses, and other data such as birthdays. When you visit a site and start to fill out a form, Microsoft Edge uses form fill information to match your saved autofill data to the form. Microsoft Edge offers form entry data you previously saved when you open similar forms. Passwords and credit card information are only saved with your explicit permission for each password and card.
Addresses and other form entries are saved by default. To control saving and autofill of address and other form data, go to edge://settings/profiles. Select Personal info and toggle the Save and fill personal info setting.
Microsoft Edge uses machine learning (ML) to enhance the autofill experience by providing smarter, context-aware suggestions, making form-filling more efficient. The ML model processes form metadata and historical autofill data to generate intelligent recommendations, reducing repetitive tasks and streamlining the user experience, while ensuring privacy and security. To enable or disable this feature, go to edge://wallet/settings, navigate to the Personal info section, and toggle the Enable
machine learning powered autofill suggestions setting.
You can prevent Microsoft Edge from prompting you to save passwords. Go to edge://settings/passwords. Toggle off the Offer to save passwords setting. You can
prevent Microsoft Edge from using autofill for saved passwords and delete saved passwords. Go to edge://settings/passwords and select Saved passwords. To delete all autofill data, go to edge://settings/clearBrowserData, select Autofill form data, select the desired time range, and then select Clear now.
If you are signed in and syncing, your autofill data is synced across all versions of Microsoft Edge where you are signed in with the same credentials. When syncing, all autofill data is stored on encrypted Microsoft servers. The autofill data stored on Microsoft servers is used only for sync purposes. You can turn off syncing of your autofill data. Go to edge://settings/profiles/sync and turn off the Basic info toggle. If sync is on for autofill, deleting autofill data from a device while you are signed in to Microsoft Edge removes the data from all other devices that you are signed in to with the same credentials.
When you visit a webpage and submit a form, Microsoft Edge sends information about the form to the Microsoft form fill service. This information includes a hash of the hostname and autofill entry types. For example, text box 1 expects an email address, text box 2 expects a password, and so on. No user-entered information or user identifiers are sent to the service. The information helps Microsoft Edge correctly identify forms across different webpages. The data is used to help match your saved autofill data to the form.
In Guest mode, autofill is not available and new autofill entries aren't added. For InPrivate mode, Microsoft Edge offers autofill entries, but new autofill entries aren't added.
Cast
Cast in Microsoft Edge lets you display your media to another screen using Google Cast. To access Cast, open Settings and more (...) > More tools > Cast media to device. Cast relies on the Media Router extension not automatically installed with Microsoft Edge.
When you first use Cast, Microsoft Edge prompts for permission to install the Media Router extension.
Select restart to install the Media Router extensions from the Chrome Web Store. On startup and at regular intervals, Microsoft Edge sends update requests to the Chrome Web Store. Update requests include basic data about your version of Microsoft Edge.
Regular updates keep the Media Router extension up to date.
Google may collect some data associated with the Media Router extension. To uninstall the Media Router extension, go to edge://flags#edge-on-demand-media-router and disable the feature. Uninstalling also stops updates from the Chrome Web Store. The extension is hidden and does not appear on the Installed extensions list. For the Installed extensions list, go to edge://extensions.
Collections
The Collections feature in Microsoft Edge allows you to save web pages, text, images, and videos from the web. You can organize the content based on the projects, events, and interests that matter to you. You can also save notes in your collections and add notes to individual items as well. Collections uses the Microsoft Edge Entity Extraction service to enrich the content that you collect by including thumbnails and metadata, such as price and star rating. For more information, see Entity extraction below.
The Collections feature is not available in Guest mode or Kids Mode.
Collections storage and feature availability depend on your Microsoft Edge Sign-in and Sync settings.
Signed in with a personal account
When you sign in to Microsoft Edge with a personal Microsoft Account (MSA), your collections, saved items, notes, and images are automatically saved on Microsoft cloud for free. You can access your collections from Microsoft Edge on any device where you're signed in. You can even view and manage your collections online in any browser by visiting the Collections portal at Bing.com. Collections also enhance your experience with a personalized interest feed, if your personalization settings support this feature.
If you want to disable Collections for a signed-in profile using a personal account, go to edge://settings/privacy, scroll down to the Services section, and then turn off the
toggle for Show Collections and follow content creators in Microsoft Edge.
When you sign in with a personal account and Sync for Collections is disabled, all collections data is stored locally on the device, organized per Microsoft Edge profile.
You cannot access Collections from an InPrivate window while signed in with a personal account.
Signed in with a work or school account
If you're signed in with a work or school account and are syncing Collections, your collections, saved items, notes, and images are synced across devices. If you want to stop syncing your Collections, you can turn off Sync for Collections from
edge://settings/profiles/sync.
When you sign in with a work or school account and Sync for Collections is disabled, all collections data is stored locally on the device, organized per Microsoft Edge profile.
You can access Collections from an InPrivate window while signed in with a work or school account.
Signed-out
When you don't sign in to Microsoft Edge, all collections data is stored locally on the device, organized per Microsoft Edge profile.
You can access Collections from an InPrivate window when using a signed-out profile.
Compose
The Compose tool helps you draft text within the Microsoft Edge Sidebar, or rewrite selected text on any webpage.
Use Compose to draft text within the Edge Sidebar
In the Copilot pane, the Compose tool uses AI to write for you, starting from a short prompt and Tone, Format, and Length selections.
Text that's generated by Compose can be copied, or inserted directly into the webpage.
To access the Compose tool, in the upper right of Microsoft Edge, click the Copilot () button, and then select Compose. Or, use the Ctrl+Shift+. keyboard shortcut.
To change settings for the sidebar or Copilot pane, select Settings and more () > Sidebar > App and notification settings > Copilot.
Use Compose to rewrite selected text on any webpage
The Compose tool can help rephrase what you've written, and iterate using the same Tone, Format, and Length selections.
To access the Compose tool directly in a webpage, highlight text longer than five words in any input text field, and then click the Rewrite with Copilot button. Or, press Alt+I.
The Compose tool might not be available on some webpages or for certain input fields.
To disable the Compose tool for all webpages, select Settings and more () > Languages, and then turn off the Collaborate with Copilot as you write on the web setting.
Privacy and data protections for Compose
Text that you've highlighted or inputted for Compose is sent to Microsoft after you click the Rewrite or Generate button, not while you're selecting text. Each request contains the input prompt text, formatting selections, and IDs that are associated with your Microsoft Edge profile and device, to reference for subsequent requests. Requests for Compose are sent over a secure HTTPS connection.
For enterprises, additional options for data protection are available for Compose. See Privacy and protections in the Microsoft Copilot documentation.
Copilot in Microsoft Edge
In Copilot in Microsoft Edge, you can ask complex questions, find comprehensive answers, get summarized information, and find inspiration to build upon, in a side-byside view, with no need to flip between tabs.
To open Copilot in Microsoft Edge, click the Copilot () button in the upper right of the Microsoft Edge toolbar. Or, use the Ctrl+Shift+. keyboard shortcut.
Data and consent used by Copilot in Microsoft Edge
Microsoft Edge determines what data to send to Copilot based on your query and your consent to share data with Microsoft. For questions that don't need browsing context, such as "Help me plan a trip to Cannon Beach", Microsoft Edge shares the URL, the page title, your query, and previous conversation history to help Copilot answer your query effectively.
For questions that need browsing context, such as when you ask Copilot to summarize a large page of text or a video, Microsoft Edge asks for your permission to access page information.
When you grant permission to share page information, Microsoft Edge sends the full browsing context in addition to your query to Copilot, to help generate a meaningful response. Microsoft Edge sends the full browsing context only for public pages that are on the Bing index.
To modify this permission, in Microsoft Edge, select > Settings and more () > Settings > Sidebar > App and notification settings > Copilot, and then use the Allow Copilot to read context clues on the web toggle.
Duration of storage of conversation history
Conversation history is a history of all queries and responses from Copilot. Conversation history is stored until you choose to delete it. This is independent of whether you use Copilot in Bing, Copilot in Microsoft Edge, or the Copilot page at copilot.microsoft.com.
 Page content is not stored. (Page content includes a video transcript, for a video.)
To delete all of your conversations with Copilot, in your Privacy Dashboard, select Browsing and search > Copilot activity history > Clear all.
Our commitment to responsible AI
Copilot has numerous protective measures in place that are constantly evolving. See The new Bing: Our approach to Responsible AI.
Glossary of terms for Copilot
ﾉ Expand table
TermDefinitionqueryA question that you type in the Ask me anything text box in Copilot.Bing indexA list of website URLs that are publicly available on the internet for Bing to search.Bing index pageAny website URL that is publicly available on the internet for Bing to search and can be reached via a URL that starts with http:// or https://.non-Bing index pageAny webpage or local file that is not available publicly for Bing to search, but is open in Microsoft Edge.groundingCentering the response that's provided to your query or prompt on high-ranking content from the web, and providing links to websites so that you can learn more. Bing ranks web search content by heavily weighting features such as relevance, quality, credibility, and freshness.responseThe text that Copilot in Bing outputs in response to a prompt. Synonyms:
completion, generation, answer.conversation historyA combination of your query and response in the Copilot format.browsing contextThe page URL and page content that's open in the active tab of the Microsoft Edge browser. These could be webpages, local PDFs, Microsoft Word documents, or other local files. For example, you can ask Summarize this page while you're browsing a long topic or webpage. Copilot in Microsoft Edge uses the page context (such as the page URL) and the page content to summarize the topic.TermDefinitionpage informationThe webpage content, or the content of the document, that's open in the active tab of the Microsoft Edge browser.Crashes
If optional diagnostic data, including crash reports, are turned on, diagnostic data is collected when Microsoft Edge crashes or closes unexpectedly. The diagnostic data is used to diagnose and fix problems with Microsoft Edge and other Microsoft products and services.

Collected diagnostic data is in the form of crash dumps, which contain device and software state captured at the time Microsoft Edge crashed or closed. The crash dump contains information about what was happening at the time of the problem. Information such as the website you were visiting at the time of the crash or your CPU usage may be included in the diagnostic data. If crash reporting is turned on, the crash dump is stored locally on the device and sent to Microsoft using an encrypted link.
Each crash dump contains an identifier unique to the device and a resettable identifier unique to your browser. It also includes extra diagnostic data such as the URL, CPU usage, and network usage, to help identify the problem. The extra diagnostic data helps Microsoft determine how many devices are encountering the problem and the severity.
Crash dumps are stored on secure Microsoft servers for up to 30 days, and then deleted.
You can request to delete the diagnostic data on Windows 10 and later devices. Open
Start > Settings > Privacy > Diagnostics & feedback. In Delete diagnostic data, select Delete. Collected crash information, such as a count of crash types, are stored for reporting and product improvement purposes.
You can clear the crash diagnostic data stored locally on a device. Go to edge://crashes and select the Clear all button.
To turn off crash diagnostic data collection on Windows 10 and later, open Start > Settings > Privacy and select Diagnostics & feedback. For versions of Microsoft Edge on all other platforms, go to edge://settings/privacy and turn off the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. You can manage diagnostic data collection at the enterprise level. See group policies managed by your organization.
Developer tools
Microsoft Edge Developer Tools help with website debugging and testing. Open Settings and more (...) > More tools and select Developer tools. When you turn on certain features in Developer Tools, Microsoft Edge requests modules from Microsoft servers and downloads them to your device. The request is sent over a secure HTTPS connection and contains a non-unique identifier representing the version of Microsoft Edge. Specific experiences that require remote download include 3D View and the Elements tool Accessibility pane. Webhint integration requires a remote module that is automatically requested when you open Developer Tools.
Diagnostic data
Microsoft uses diagnostic data to improve products and services. Diagnostic data is also used to keep products secure, up to date, and performing as expected. Microsoft believes in and practices information collection minimization. We strive to gather only the information we need, and to store it for only as long as needed to improve products and services.
Microsoft Edge collects a set of required diagnostic data needed to keep the product secure, up to date, and performing properly. The required diagnostic data includes device connectivity, configuration information, software setup, and inventory. Microsoft uses this diagnostic data to troubleshoot issues and keep Microsoft products and services reliable, secure, and operating normally. For more information about diagnostic data on managed devices, see Configure Windows diagnostic data in your organization and Microsoft Edge diagnostic data group policy.

You may also choose to share optional diagnostic data. As you use Microsoft Edge features and services, or other applications that use the Microsoft Edge web platform, Microsoft Edge sends optional diagnostic data about how you use those features and the websites you visit. With your permission, this optional diagnostic data is sent to Microsoft to improve products and services for everyone. This data is not collected or stored with your Microsoft account.
Optional diagnostic data includes feature usage, performance data, site load times, memory usage, and websites you visit. For example, if you choose a website as a favorite, optional diagnostic data is sent. It includes that the favorite button was selected, and a favorite was successfully added, but not which site was set as a favorite.
Information about websites you visit in Microsoft Edge helps us understand how quickly sites load and increases the relevance of search results for all users. The data includes information about the website such as the URL of the page you visit, website metrics, title of the page, how you accessed the page, information about the content of the page, and other relevant information about the page navigation.
Diagnostic data is sent using HTTPS and stored on Microsoft servers. On Windows devices, diagnostic data is sent with an identifier unique to your device. On other devices, the diagnostic data is associated with a resettable identifier unique to your browser. The identifier is randomly generated and does not contain your personal information.
The Microsoft Edge team respects the sensitivity of diagnostic data by restricting data access or removing personal information. To reset the identifier unique to your browser on Windows 10 and later devices, select Start > Settings > Privacy > Diagnostics & feedback, and then select Delete under Delete diagnostic data, or change your setting under Diagnostic data from Full to Basic or turn off Optional diagnostic data.
On other platforms, to generate a new resettable identifier (ID) that is unique to your browser, go to edge://settings/privacy and turn off the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. The reset (ID) functionality may be different for devices managed with group policies set by your organization.
If you're using Windows 10 version 1803 (April 2018 Update) or later, to view product data shared with Microsoft in the Diagnostic Data Viewer, select Start > Settings > Privacy > Diagnostics & feedback, and then select Open Diagnostic Data Viewer under View diagnostic data.
For other platforms or versions of Windows 10 version 1803 and earlier, go to edge://data-viewer to view diagnostic data. To view the data that's periodically sent to Microsoft since the last time the viewer was opened, go to edge://data-viewer. To see what data has been sent to Microsoft for your specific session, refresh the viewer. The data used to populate edge://data-viewer is stored locally on the device. To clear the data in the viewer, close the edge://data-viewer tab.
To help us improve Microsoft products and services, diagnostic data is aggregated, with personal identifiers removed, and stored for up to two years. Because the diagnostic data is not collected from or stored with your Microsoft account, the diagnostic data may not be viewed or deleted from your Microsoft privacy dashboard. To delete the diagnostic data on Windows 10 and later, select Start > Settings > Privacy > Diagnostics & feedback, and then select Delete under Delete diagnostic data. The delete diagnostic data functionality is only supported on Windows 10 version 1803 or later. For more information, see Diagnostics, feedback, and privacy in Windows 10 and later.
For Microsoft Edge on Windows 10 and later, sending Optional diagnostic data is determined by your Windows diagnostic data setting. The setting is reflected in
edge://settings/privacy. Change the Windows settings by going to Start > Settings > Privacy > Diagnostics & feedback. On all other platforms, to control the collection of diagnostic data, go to edge://settings/privacy and turn on or off Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports. The setting is used for all profiles associated with the installation of Microsoft Edge on your device. The setting is not synced across devices. The setting applies to InPrivate browsing and Guest mode. Information about websites you visit is never sent while browsing InPrivate or in Guest mode. If your device is managed with group policies set by your organization, it is described in edge://settings/privacy.
As of March 6, 2024, Microsoft Edge diagnostic data is collected separately from
Windows diagnostic data on Windows 10 (version 22H2 and newer) and Windows 11
(version 23H2 and newer) devices in the European Economic Area. For these versions of
Windows, the diagnostic data setting for Microsoft Edge is controlled through edge://settings/privacy, rather than being a Windows setting that's reflected there.
Digital Rights Management and Media Licenses
When a website offers media content that is protected by Digital Rights Management (DRM), Microsoft Edge uses a secure playback pipeline to make sure the content is not improperly viewed or copied. As part of the feature, Microsoft Edge may store DRMrelated data on your device, including a unique identifier and media licenses. Microsoft Edge may also transmit the unique identifier to a media licensing server specified by the content provider. When you use the website, Microsoft Edge retrieves the DRM information to make sure you have permission to use the content. The data helps to validate access to the protected content and ensure a seamless media experience.
Microsoft Edge supports DRM using the Encrypted Media Extensions API (EME API) for
HTML5 sites. The EME API allows websites to communicate with a DRM provider called a Content Decryption Module (CDM). Different DRM systems, such as Widevine by Google or PlayReady by Microsoft, may be supported by the CDM implementation of the developer. Content providers may choose to support one or more potential DRM systems. Providers may use the function of the EME API to decide which DRM system to use for a specific client. For more information about EME privacy, see Encrypted Media Extensions Privacy.
Microsoft Edge supports PlayReady DRM only on Windows 10 and later. PlayReady is a DRM implementation to deliver media experiences such as 4K video and Dolby Atmos audio. Microsoft Edge uses the Windows Platform Media Foundation APIs to support PlayReady. To validate access to protected content, Microsoft Edge uses the Windows 10 or Windows 11 operating system. Windows uses a unique identifier (ID) and communicates the ID with the PlayReady service. All EME, CDM, and browser data for PlayReady that persists on the device is stored and maintained on Microsoft Edge. For more information about PlayReady, see Simple End to End System.
Microsoft Edge supports Widevine by Google DRM and the option is on by default. Microsoft Edge periodically fetches updates for Widevine from Google servers. The use of Widevine may include communications to Google. To opt-out of using Widevine in Microsoft Edge, go to edge://flags/#edge-widevine-drm and turn off the Widevine DRM setting. Widevine has the capability to create a unique device identifier and transmit it to Google. For more specific information on Widevine and privacy, see the Google privacy policy.
Microsoft Edge supports the Flash Access DRM by Adobe, which is used by some sites instead of HTML5. You are prompted to allow Adobe Flash when a site requests it. When a site uses the Flash Access DRM by Adobe, Microsoft Edge gives Adobe access to a unique device identifier. You can clear and reset any locally stored instances of the identifier. Go to edge://settings/privacy. In Clear browsing data. select Choose what to clear, select the checkbox for Cookies and other site data, and select Clear now to remove any stored identifiers. To stop Adobe Flash DRM from ever being used, go to
edge://settings/content/flash.
When you request access to encrypted HTML5 media such as an online movie, Microsoft Edge creates a license request to decrypt the media. The CDM in use creates the license request containing a request ID. The request is sent to the license server. No part of the license request contains any personal data, and the license request is not stored on the device.
When returning the media license, a media identifier is created which is unique to the user and the site. The ID is not shared between sites and is different for each site. A session ID, used to identify a playback session, is sent with the media identifier to decrypt the media. The media identifier is stored locally on the device and may be stored with the content provider.
To control DRM and content protections, go to edge://settings/content/protectedContent. Toggle the Allow sites to play protected
content (recommended) and Allow identifiers for protected content (computer restart may be required) settings.
 The Allow sites to play protected content setting controls playback for CDMbased DRM systems such as PlayReady and Widevine, but not for non-CDM-based systems like Flash Access DRM. To manage Flash site permissions, go to edge://settings/content/flash. Turning off the setting causes media functions to
stop working properly.
 Turning off the Allow identifiers for protected content setting prevents the creation of identifiers for Flash Access DRM and prevents Widevine from periodically fetching updates from Google. Turning off the setting may cause media functions on some sites to stop working properly.
Do Not Track
You can enable Do Not Track on Microsoft Edge. Go to edge://settings/privacy. Turn on the Send "Do Not Track" requests setting. If you enable the Do Not Track feature, Microsoft Edge sends a DNT:1 HTTP header with your outgoing HTTP, HTTPS, and SPDY browsing traffic requests. This feature tells websites you visit not to use trackers. However, enabling the Send "Do Not Track" requests setting does not guarantee that the websites aren't able to track you. Some sites may honor the request by showing you ads not based on any previous browsing. Microsoft Edge does not control whether or not the request is honored. You can help prevent websites from tracking you. Go to edge://settings/privacy. Change the Tracking prevention setting to Balanced or Strict.
When you use Guest mode, Microsoft Edge does not send Do Not Track requests. When you use InPrivate browsing, Microsoft Edge only sends Do Not Track requests if the Send "Do Not Track" requests setting is turned on for the profile you are using.
Downloads
Microsoft Edge lets you download files safely and securely. To choose where files are downloaded on your device, go to edge://settings/downloads. If SmartScreen is enabled, information about your file, such as the file name and URL, are sent to SmartScreen to check the reputation of the file. The reputation check helps you avoid accidentally downloading known malware that is known to hurt your device. To change SmartScreen settings, go to edge://settings/privacy and toggle SmartScreen. For more information about SmartScreen, see the SmartScreen section.
To view the history of your previous downloads, go to edge://downloads. To clear your browsing data and delete your download history, go to
edge://settings/clearBrowserData. Deleting your download history from Microsoft Edge does not remove the files from your device. Deleting downloaded files from your device does not remove the files from your download history. When you use InPrivate browsing or Guest mode, the download history from the session is cleared when you close the InPrivate or Guest windows. The files remain saved on the device.
Enterprise security and compliance
Microsoft Edge supports a variety of first-party enterprise security and compliance features, including:
ﾉ Expand table
FeatureArticleWindows Information ProtectionProtect your enterprise data using Windows Information
Protection (WIP)Microsoft Defender Application
GuardMicrosoft Defender Application Guard overviewMicrosoft Endpoint Data Loss
Prevention (DLP)Learn about Endpoint data loss preventionMicrosoft Defender for Cloud Apps
(Preview)Session policiesMicrosoft Insider Risk ManagementInsider risk managementMicrosoft Edge management serviceMicrosoft Edge management serviceThese features become functional only on enterprise-managed devices by acquiring the right license for the feature or by the administrator deploying specific policies on the device.
When these enterprise features are on, the browser sends auditing and diagnostic data to the administrator as per the feature's requirement to function, manage or diagnose properly. This data collection is controlled by the enterprise administrator and end user is not able to opt-out.
Please contact your enterprise administrator to understand your company's policies for such data collection.
Entity extraction
Microsoft Edge uses entity extraction templates that are specific to a list of supported websites to identify the name, price, ratings, primary image, and other data about the item being collected locally. When creating the collection, no user identifiers or other data are sent to Microsoft services.
If you want to delete such templates stored on the device, go to edge://settings/clearBrowserData, select the desired time range and type of data, and
then click the Clear now button.
Extensions and Microsoft Edge Add-ons
You may install extensions in Microsoft Edge to add functions to the browser. When you install an extension from the Microsoft Edge Add-ons website or another extension store, Microsoft collects information about the extension to help developers and Microsoft understand how the extension is used. Microsoft Edge collects aggregated data including the number of times an extension was downloaded and information about how it is performing, such as crash data. Microsoft shares the aggregated data with the developers of the extension.
Comments and reviews from users are public on the Add-ons website and are also shared with the developers. If you are signed in to Microsoft Edge, installed extensions from the Microsoft Edge Add-ons website are associated with your account to provide extension recommendations. The data is used in aggregate to understand the popularity of extensions.
You can sync extensions and preferences across all your signed-in syncing versions of Microsoft Edge. Go to edge://settings/profiles/sync, and select the Sign in to sync data button.
Installing extensions is optional. To uninstall any extension at any time, go to edge://extensions. When an extension is installed, it specifies what user data it needs to
access. Microsoft Edge asks for your permission before installing the extension. Make sure an extension is credible and secure before installing it. Review the privacy policy of the developer for the specific extension.
Extensions are updated using the Microsoft Edge update service. Microsoft Edge sends a list of installed extensions to the update service to check for updates. If you install an extension from the Chrome Web Store, requests are sent to the Chrome Web Store at regular intervals to check for extension updates. The extension identifier, extension version, and information about Microsoft Edge are included in the request for updates. You can stop requests to the Chrome Web Store. Go to edge://extensions. Turn off the From other sources toggle to uninstall extensions.
You can import extensions from other browsers like Google Chrome. If an imported extension is available in the Microsoft Edge Add-ons website, Microsoft Edge automatically installs the extension from the Microsoft Edge Add-ons website. If you previously had the extension turned on, Microsoft Edge automatically turns it on for you.
If an extension is not available from the Microsoft Edge Add-ons website, Microsoft Edge locally copies and installs your extension from Google Chrome without turning it on or connecting to the Chrome Web Store. Microsoft Edge asks for your permission to turn on the extension and to allow extensions from other stores. If you granted permission, Microsoft Edge allows installation of extensions from other stores and updates to your extensions using the Chrome Web Store. You can control the option to allow extensions from other stores. Go to edge://extensions. Toggle the Allow extensions from other stores setting.
Family safety
Microsoft offers tools to help families stay connected and keep kids safer on Windows, Xbox, and Android devices running Microsoft Launcher.
Within a family group, there are family settings that should be enabled for children while using Microsoft Edge. The family group organizer must enable the settings for users in the group. The three main features offered to a family group are web filtering, activity reporting, and safe search.
Web filtering protects children in the family group from going to mature websites or websites blocked by the family organizer.
Activity reporting records information about the websites children visit. Records also include searches, screen time, devices used, and attempt to visit blocked sites. The family group organizer may see the information at family.microsoft.com. The data is collected, encrypted in transit, sent to Microsoft, and stored on secure Microsoft storage servers. The data is collected with the child's Microsoft account so it may be properly managed. Activity reports are stored on family.microsoft.com for up to 30 days and then deleted after.
Safe search adds a safe keyword to the header request to search engines. Bing reads the safe keyword and filters search results returned to the child. Other search engines may return filtered results due to the keyword. All of the child's searches are collected and made available for the family organizer to view in activity reports or at family.microsoft.com. The data is collected with the child's Microsoft account so it may be properly managed.
The child account's health status is also monitored. When a child needs to take action to log back into their account, such as when a password has changed or expired, their parent is informed. This data is collected, encrypted in transit, and sent to Microsoft and stored on secure Microsoft storage servers. The account health status is stored on family.microsoft.com for up to 30 days and then is deleted afterwards.
The child's browsing data is stored on secure Microsoft servers and made available to parents for up to 30 days, then immediately deleted. The data may be deleted at any time from the Microsoft privacy dashboard. To clear browsing data stored locally on a device, go to edge://settings/clearBrowserData. Choose a Time range, select checkboxes as needed, then select Clear now.
Collecting child browsing data and sharing it with the family group organizer requires two things. 1.) The child must be signed in to Windows 10 and later with a Microsoft account. 2.) The activity reporting setting must be turned on by the family organizer. The child does not need to be signed in to Microsoft Edge to collect browsing data. If family safety features aren't available on your version of Windows, update to the most recent version of Windows.
Guest mode and InPrivate browsing aren't available if web filtering or activity reporting is turned on.
The family group organizer may stop the data collection from the family safety portal. For more information about Microsoft family safety features, see What is a Microsoft family group?
Find on page
Use the "Find on page" feature to search a webpage for key words. In a webpage, press Ctrl+F (Windows, Linux) or Command+F (macOS). Or, click Settings (..), and then select Find on page. A search box opens. Enter a word, phrase, or other string into this search box. As you type, all occurrences of the string in the page are highlighted. You can then move through the search results by clicking the Previous result and Next result buttons.
By default, the Include related matches in Find on page feature allows Find on page to find other related matches, including synonyms and alternate spellings.
When the Include related matches in Find on page toggle is turned on, Microsoft Edge sends the text of the webpage, your search terms, and a service token to a Microsoft cloud service over a secure HTTPS connection. The service token doesn't contain any user-identifiable information. A Microsoft cloud service then processes the text to find results on the page that are related to your search. The webpage text and search terms that are sent to Microsoft are deleted immediately after processing occurs.
Related matches in Find on page aren't available when using InPrivate browsing.
To stop Microsoft Edge from finding related matches in Find on page:
1. Select Settings and more (...) > Settings > Privacy, search, and services, and then scroll down to the Services section. Or, go to edge://settings/privacy, and then scroll down to the Services section.
2. Turn off the Include related matches in Find on page toggle.
Geolocation
While you browse the web, websites can request your device's location from Microsoft Edge. Data about your device's location can be either precise or imprecise. For example, a precise location is needed to provide driving directions to or from your specific location. An imprecise location might be used to provide search results, news, and weather relevant to your general area.
Microsoft Edge supports the Geolocation API, which provides websites access to your device's location. By default, Microsoft Edge asks for your permission before granting a site access to your precise location. To manage site permissions or to always block sites from accessing your precise location, go to edge://settings/content/location.
Microsoft Edge provides the site with a location using your device's location services when they're turned on. For more information about how to enable location services on Windows, see Windows location service and privacy. If your device's location services are turned off, Microsoft Edge tries to estimate your location by sending local network information (which might contain nearby Wi-Fi access point information and your device's IP address) to a Microsoft service.
When the site you are on has access to your location, Microsoft Edge shows a location icon in the address bar. You can select this icon to get more information and to manage the location access permissions for this site.

Microsoft Edge doesn't collect or store the location data that is shared with the site, and generates a new random identifier for each request.
When you browse the web using InPrivate, the Ask and Block permissions, which control accessing your precise location, are inherited from the profile that you used to open the InPrivate window. However, the Allow permissions are not automatically inherited, and Microsoft Edge asks for your permission again before granting the site access to your precise location. In Guest mode, Microsoft Edge always asks for permission before granting a site access to your precise location.
History
History supports views to display images of your web navigations and enhance your history experience. All history data is stored locally on the device, and is organized per Microsoft Edge profile. Images are saved for the duration the history exists (90 days).
If you want Microsoft Edge not to capture images for your history, select the Turn off images button in the history hub. Or, go to edge://settings/privacy, scroll down to the Services section, and then turn off the toggle for Save screenshots of site for History.
All previously saved images will be erased.
Image descriptions
When browsing the web in Microsoft Edge, screen reader users may encounter images that are not annotated with alt text. Without alt text to describe these images, they are effectively invisible to screen reader users. When Image Descriptions is turned on,
Microsoft Edge will detect these images without alt text and send them to Azure Cognitive Services to generate captions. The generated captions are then announced to screen reader users. Even when Get image descriptions from Microsoft for screen readers is turned on, images are only sent to the service when a screen reader (or other assistive technology) is connected to Microsoft Edge.
Only raw image data is sent to Azure Cognitive Services. Images are sent un-encrypted, to reduce latency. No user identifiers are included in the requests to the service. Images aren't stored or saved on Microsoft servers; images are discarded immediately after the captions are generated.
To control Image Descriptions, go to edge://settings/accessibility. Toggle the Get image descriptions from Microsoft for screen readers setting.
Image Descriptions can be turned on for the current web page without enabling for all web pages. While using a screen reader, right-click the webpage, and select Get image descriptions from Microsoft > Just once. The current web page will be scanned for all images without alt text and send those to the service for descriptions. The Image Description feature will remain off for other pages and future browsing.
Import browser data
Microsoft Edge offers an interactive and seamless experience when you launch the browser for the first time. You can import your browser data to Microsoft Edge from another browser. The data includes your favorites, browsing history, cookies, autofill data, extensions, settings, and other browsing data.
With your confirmation, Microsoft Edge imports browser data from other browsers such as Google Chrome, Mozilla Firefox, or Internet Explorer. Microsoft Edge imports data from your most used browser as defined by your operating system. If you choose to regularly import your browsing data, browsing data will be imported each time Microsoft Edge is launched.
Importing your data is completed locally on your device and is stored locally. The imported data is sent to Microsoft only after you do at least one of the following actions:
 Sign into Microsoft Edge with a Microsoft account, and turn on sync'ing of your browsing data across all signed-in devices.
 In Microsoft Edge settings, turn on the toggle Privacy, search, and services > Personalization & advertising > Allow Microsoft to save your browsing activity including history, usage, favorites, web content, and other browsing data to personalize Microsoft Edge and Microsoft services like ads, search, shopping and news.
You can manage your browsing history that's stored on Microsoft servers by visiting https://account.microsoft.com.
You can manage your import preferences any time from edge://settings/profiles/importBrowsingData.

When importing extensions, if the extension is not available on the Microsoft Edge Addons website, Microsoft Edge imports a local copy and asks for permission before starting. The permissions for some of the extensions may have changed. To review the extension permissions, go to edge://extensions.
Your browsing data from older versions of Microsoft Edge is automatically imported when you update Microsoft Edge.
Install and update
You may download and install Microsoft Edge on platforms such as Windows and macOS. Microsoft Edge uses the updater service to keep your version of Microsoft Edge up to date and secure.
When you install or update Microsoft Edge, device information is sent to Microsoft. Device information includes your release channel, basic hardware information, update identifiers, an identifier unique to your device, and a resettable identifier unique to your browser. The IP address of the device is sent to the updater service, but the last decimal is scrubbed for added privacy protection. During each browsing session, a new randomly generated token is created to install updated versions of Microsoft Edge. The token is not associated with any personal information and is only used for the installation and update process and to improve the updater service.
Microsoft Edge pings the Microsoft Edge updater service about the progress of installation and update. If an installation or update fails and crash reporting is turned on, a log is created and sent to Microsoft. For more information about sending crash reports to Microsoft, see the Crashes section. Microsoft collects information about how you downloaded Microsoft Edge, the success of the installation, and any uninstalls to better understand the success of Microsoft Edge downloads.
Automatic updates are turned on by default for all Microsoft Edge users. On all platforms, Microsoft Edge checks for updates on startup and periodically while running. On macOS devices, Microsoft AutoUpdate checks for updates for Microsoft products periodically as well. More controls and configurations are available for organizations. For more information about controls and configurations, see Update.
Internet Explorer mode
Microsoft Edge offers a simplified experience with the integration of Internet Explorer
(IE). Microsoft Edge only supports IE 11, and IE mode is only available on Windows. The IE mode feature is available for organizations through group policies. The administrator chooses to open certain sites in IE mode in Microsoft Edge.

Microsoft Edge downloads the list of sites from a location defined by the administrator through a policy, and caches the file that determines which sites must be opened in IE mode. Depending on your Windows or IE 11 settings, Microsoft Edge collects diagnostic data about the use of IE mode. Collected data includes which sites users visit, performance data, reliability data, and feature usage data. On Windows 10 and later, the diagnostic data is collected according to your Windows Diagnostic data setting. On Windows 8.1, website information is collected if the user has opted into the Flip Ahead or Suggested Sites feature in IE. IE mode may not follow the same data collection settings in the Microsoft Edge Privacy settings.
If your administrator turned on Enterprise Site Discovery, browsing history data is collected periodically to help administrators review the sites that users visit and ensure that system upgrades continue to support those sites. For more information about Enterprise Site Discovery in IE11, see Collect data using Enterprise Site Discovery.
Non-enterprise users on Windows devices may also access IE mode. To turn on IE mode, go to edge://settings/defaultBrowser and select the Allow sites to be reloaded in
Internet Explorer mode setting. To open tabs in IE mode, open Settings and more (...) >
More tools and select Reload in Internet Explorer mode. After you turn on IE mode, Microsoft Edge periodically requests a list of unsupported sites from a Microsoft service.
The request is sent over HTTPS and does not contain any identifiers.
Internet Explorer browsing data is stored locally in Microsoft Edge and Internet Explorer. To delete browsing data while browsing in IE mode, go to edge://settings/privacy and clear the data from both Clear browsing data and Clear browsing data for Internet Explorer.
Intrusive ads
To provide a better browsing experience, Microsoft Edge offers to block advertisements from loading on sites that show intrusive or misleading ads. When Ads Blocking is turned on, Microsoft Edge periodically downloads from Microsoft servers the most recent list of sites that show intrusive or misleading ads and stores it locally on your device. No user identifiers are included in the download request. If you visit a site that is on the list, Microsoft Edge blocks all ads on the site and you should see the Ads blocked message. To allow ads for the site, go to edge://settings/content/ads and change the settings. Other than downloading the list of sites with intrusive ads, the Ads Blocking feature does not send additional information to Microsoft or request additional information from Microsoft while you are browsing the web.
Jump list
The jump list in Microsoft Edge lets you easily find your most recently closed sites. Hover on the Microsoft Edge icon in the task bar and right-click. The last three closed tabs are stored locally for each profile. To delete sites from the jump list in Windows 10 and later, right-click the site, and then select Remove from this list.
You can clear or change the display of your recently closed tabs in the jump list. Go to edge://settings/privacy, and select the Choose what to clear every time you close the
browser setting. When using an InPrivate window, Microsoft Edge does not add closed tab information to the jump list. When using Guest mode, the jump list is not available. For more information about clearing your browsing data, see View and delete browser history in Microsoft Edge.
Kids Mode
Kids Mode is a convenient browsing mode designed for kids inside Microsoft Edge. With the kid-friendly features and safety guardrails in place, Kids Mode is a great place for children to safely explore the web. Kids Mode includes features like custom browser themes, kid-friendly content, browsing based on an allowlist, Bing SafeSearch set to strict, and a password requirement to exit. Kids Mode doesn't require a child account or profile, therefore you aren't able to sign into Kids Mode.

Browsing in Kids Mode is limited to a default list of kid-friendly websites. Upon navigation, the website is compared to a local list of allowed websites. The websites visited in Kids Mode are not viewable on family.microsoft.com since the browsing in Kids Mode is not associated with any account. Allowed website exceptions may be added through the profile in which Kids Mode was launched. Those exceptions are synced to the profile in which Kids Mode was launched, if that user is signed in.
To enhance the Kids Mode experience, Microsoft Edge adds a safe keyword to the header request to Microsoft Bing and Microsoft News. The safe keyword helps filter out inappropriate search results and news. Kids Mode sets preferences for Microsoft Edge settings such as setting tracking prevention to Strict to block most trackers on websites. Clear browsing data on close has also been turned on which clears things like Cookies and other website data when Kids Mode closes. To clear browsing data at any time within Kids Mode, complete the following actions.
1. Choose Settings > Privacy.
2. Choose Choose what to clear.
Kids Mode does not collect data for personalization of the news feed or other Microsoft services. You may not change the privacy settings for Kids Mode. Other settings like Windows Defender SmartScreen and diagnostic data are configured according to the profile in which Kids Mode was launched. For more information about diagnostic data about how you use the browser and Windows Defender SmartScreen, see the Diagnostic Data and SmartScreen sections.
Microsoft Edge WebDriver
Microsoft Edge WebDriver allows developers to drive the Microsoft Edge browser using the WebDriver protocol. The Microsoft Edge WebDriver is an executable file
msedgedriver.exe separate from Microsoft Edge. Developers can call the driver from
client code, such as a test script. By default, Microsoft Edge WebDriver sends diagnostic data such as the status of the New Session WebDriver command to Microsoft. To turn off the diagnostic data collection for Microsoft Edge WebDriver, set the
MSEDGEDRIVER_TELEMETRY_OPTOUT environment variable to 1. For more information about
Microsoft Edge WebDriver, see Use WebDriver to automate Microsoft Edge automation.
Network time
Microsoft Edge uses a Microsoft network time service to track time from an external source such as a time server. At random intervals or when Microsoft Edge encounters an expired SSL certificate, Microsoft Edge may send requests to Microsoft to obtain the time from a trusted source. The requests occur more frequently if Microsoft Edge detects the system clock is inaccurate. A system clock inaccuracy happens if the user changes the time on the operating system and that conflicts with the correct time zone.
The Microsoft network time service is used to get the Coordinated Universal Time (UTC).
The requests contain no cookies or user identifiers, and no data is logged.
New tab page
Microsoft Edge provides an engaging and user-centric new tab page with a search box powered by Bing. Microsoft Edge also provides quick link tiles for the sites you visit most frequently, and relevant content from Microsoft News or Microsoft 365. You can change the appearance of the new tab page by selecting the customize button. Your new tab page preferences are set for each profile and stored locally on your device. The preferences aren't synced across devices.
To speed up load times for the Microsoft Edge new tab page, the page may be loaded in the background. The content that is loaded might include cookies, if you allow cookies.
You can turn off background loading for the Microsoft new tab page. Go to edge://settings/newTabPage and turn off the Preload the new tab page for a faster experience setting.

Microsoft News
To tailor content to your interactions and preferences, the new tab page in Microsoft Edge stores cookies with randomly generated identifiers on the device. A scrubbed version of your IP address is also used to tailor the content to your general region. TO clear the cookies that persist on your device, go to edge://settings/siteData.
To prevent ads from being personalized, see Ad settings	 on the Microsoft privacy dashboard. Turn off the See personalized ads in your browser setting. To turn off the quick link tiles, open customize button > Custom and turn off the Show quick links setting. Microsoft Edge uses your local browsing history to personalize the quick link tiles. You can delete or create new tiles. The data is only stored locally on the device, per profile.
The search box on the new tab page runs a Bing search based on the query you type. To automatically provide search suggestions and results, Microsoft Edge shares your typed characters, search query, IP address, and search identifiers with Bing. The search box may be configured with group policies to provide search results from Microsoft Search. The results can include information from your organization such as documents and intranet content. To provide an integrated search experience, Microsoft Edge stores cookies locally on the device.
If you are signed in to Microsoft Edge with your Microsoft account, you may manage your browsing activity associated with the new tab page from the Microsoft privacy dashboard.
Microsoft Edge collects diagnostic data about how you use the new tab page, such as interactions with the search box and selections on quick link tiles. To enable collection of diagnostic data about how you use the new tab page, go to edge://settings/privacy and turn on the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. The browser sends diagnostic data about how you use the Microsoft News page to Microsoft to help understand user interactions with news content and improve Microsoft products. You may turn off Microsoft News content by selecting the customize button on the new tab page. News data is sent to Microsoft using HTTPS and stored for up to 13 months, after which it is aggregated and the personal identifiers are removed.
The new tab page also lets you set a custom image as the background. The image is stored locally on the device and may be deleted by removing the image or uploading a new image. No information about the image is sent to Microsoft.
Microsoft 365
If you are signed in to Microsoft Edge with a work or school account, your organization may turn on Microsoft 365 as an option for page content on the new tab page. The feature is currently available only for commercial customers under the Microsoft Online
Services Terms (OST). For more information about privacy for Microsoft 365, see Overview of privacy controls for Microsoft 365 Apps for enterprise.
InPrivate browsing and Guest mode offer alternative new tab page experiences.
On startup
Microsoft Edge lets you pick up your browsing where you left off. It opens your last open tabs from your previous browsing session, including session cookies. This feature remains available on startup to restore tabs from your previous session and keep you signed in to sites you visited. You can configure Microsoft to edge display the open tabs from your previous browsing session. Go to edge://settings/onStartup and turn on the
Continue where you left off setting. If you select the Continue where you left off setting and clear browsing data each time you close the browser, the data you specified is deleted but the URL persists for the next session.
You may set Microsoft Edge to open specific pages on startup. The pages you specify are stored locally on your device and are profile-specific. If you turned on sync for settings, the specified pages are synced across all versions of Microsoft Edge where you are signed-in. To enable syncing your settings, go to edge://settings/profiles/sync and turn on Settings.
InPrivate and Guest mode tabs aren't restored on startup.
Password Monitor
Microsoft Edge is committed to keeping you safe on the web. If you are signed in to Microsoft Edge, Password Monitor alerts you if your credentials have been exposed in a third-party data breach. If Password Monitor is turned on, your saved credentials are hashed and encrypted locally on your device.
Saved credentials are sent to Microsoft servers over HTTPS, and compared against an encrypted list of known breached credentials. Your account identifier is securely sent along with your hashed and encrypted credentials to the Password Monitor service.
If a credential is found in the list of known breached credentials, Microsoft sends an encrypted response back to your version of Microsoft Edge. The message warns you that your credential was detected as part of a hack or breach. No data is stored on Microsoft servers after the check is complete.
The feature is only available for users signed in to Microsoft Edge. Microsoft Edge asks for your permission to turn on Password Monitor. To manage Password Monitor, go to
edge://passwords.
Payments
Microsoft Edge helps you be more productive by letting you save your payment info to your browser profile and offering to automatically fill in payment forms with the info when you need it while browsing. When you encounter a similar payment form, Microsoft Edge offers to fill in the form with the saved info. Credit cards and other payment info is only saved with your explicit permission.
Microsoft Edge asks you if you want to store your payment info if payment autofill is turned on. The info is encrypted locally on your device. To delete saved payment information, go to edge://settings/payments. When you delete saved payment info, the info no longer appears as an autofill suggestion. To not save any payment information, go to edge://settings/payments and turn off the feature.
Microsoft Edge lets you save your payment information to your browser profile. Microsoft Edge offers to automatically fill in payment forms when needed. Whenever you encounter a similar payment form, Microsoft Edge offers to fill in the form. Credit card and other payment information are only saved with your explicit permission.
Microsoft Edge asks you if you want to store your payment information if payment autofill is turned on. The information is encrypted locally on your device. To manage payment information, go to edge://settings/payments. When you delete saved payment information, it no longer appears as an autofill suggestion.
Microsoft Edge also supports saving your payment information to your Microsoft account if you are signed in and syncing, which makes the information available across devices. To save payment information to your Microsoft account, credit card verification (CVV) may be required, depending on your current region. CVV is only used for authorization and will not be stored by Microsoft.
Microsoft Edge supports the PaymentRequest API. The API lets you pay for purchases with payment information you previously saved using autofill. The PaymentRequest API allows the merchant to request the following information: credit card number, credit card expiration, full name, billing address, email address, phone number, and shipping address. The API tells the merchant that you have credit card information saved, but does not share any information with the merchant unless you allow it. To turn off the Payments feature, go to edge://settings/privacy.
If you previously saved payment information to your Microsoft account, it is also available for autofill in the browser. Payment information stored in your Microsoft account syncs across devices. If you previously made any Xbox or Microsoft Store purchases, you may already have payment information saved to your Microsoft account. During payment autofill, a card from your Microsoft account is masked and is only fully revealed after two-factor authentication. The masking provides added security when retrieving your payment information.
The feature is only available for users with a non-child Microsoft account. The feature is not available for users signed into Microsoft Edge with a work or school account.
Personalization
If you allow personalization, the Microsoft Edge team collects and uses your Microsoft
Edge browsing history to personalize experiences and advertising on Bing, Microsoft News, and other Microsoft services. Personalization provides more relevant and useful search results, ads, and news content. For example, if the Microsoft Edge team determines based on your browsing that you prefer a particular store, the ads you see may be for that store. Similarly, if you frequently look at travel blogs and read travel articles, your news feed may include news content about traveling.
The personalization feature is only available for users with a non-child Microsoft account. The feature is not available for users signed in to Microsoft Edge with a work or school account.
Your browsing history is collected and used for personalization only if all four conditions are met.
You are signed in to a non-child Microsoft account.
You gave permission for the collection and use of the data for personalization. Your group policies managed by an organization (employer, school, and so on) allow personalization.
 You not using the browser in Guest or InPrivate modes.
Your browsing history and other data are transferred over HTTPS and attached to your Microsoft account information. Your browsing history is stored on secure Microsoft servers. You may view and delete previously shared browsing history by going to the Microsoft privacy dashboard. Your browsing history is stored on secure Microsoft servers for up to 180 days. After 180 days, the data is deleted and not used for personalization.
You may modify your interests or opt-out of personalized ads from the Ad settings on the Microsoft privacy dashboard.
Opting out of personalized ads on the Microsoft privacy dashboard does not turn off the collection and use of your browsing history for personalization of search results and content in your news feed. You can turn off the collection and use of your Microsoft
Edge browsing history for personalized search results and news. Go to edge://settings/privacy. In Personalize your web experience turn off the Improve
your web experience by allowing Microsoft to use your browsing history from the account for personalizing advertising, search, news and other Microsoft services setting. If you stop sharing the data, Microsoft no longer collects and uses your browsing history to personalize ads, search results, and news. For more information about personalization in Microsoft Edge, see Microsoft Edge browsing history for personalized advertising and experiences.
Print
Microsoft Edge lets you print webpages, PDF files, or other content using devices and applications. When you print to a printer, application, or PDF, Microsoft Edge sends the commands and file information to the operating system of your device. The information is not sent to Microsoft. All data sent to the operating system of your device for printing is deleted immediately after printing is completed or canceled. To change your printing destination, go to edge://settings/printing.
You may also print webpages and files to a PDF using Microsoft Print to PDF, which does not send any data about the file back to Microsoft. Any annotations made to the PDF file are saved locally to the file.
Profiles
Profiles in Microsoft Edge allow you to separate your browsing data into independent profiles. Data associated with one profile is separate from data associated with other profiles. Your personal favorites and history, for example, aren't synchronized with your work account if you set each up in different profiles.
However, users can easily switch between existing profiles in Microsoft Edge without the need for passwords. If users have access to the same device, users may create another profile on the same version of Microsoft Edge without the permission of the current profile owner. Removing the profile from Microsoft Edge settings permanently deletes browsing data for the specific profile stored on the device, such as browsing history, favorites, form fill data, and passwords. Data synced to your account may still be stored in the Microsoft cloud and may be cleared from the Microsoft privacy dashboard.
Guest mode
Guest mode is a temporary instance of a fresh profile. It allows you to browse on another user's device without modifying the signed-in profile. Browsing data from Guest mode such as favorites, browsing history, passwords, and form fill data does not persist after you close all Guest mode windows. Downloaded files are stored on the device, but the history of the downloads is deleted.
Guest mode allows you to browse the web without being signed in to other sites automatically. Microsoft Edge does not send websites any information to indicate that the user is browsing in Guest mode. When you use Guest mode, permission to collect diagnostic data about how you use the browser and websites you visit is taken from the profile of Microsoft Edge from which the Guest mode session was launched. All browsing data for the specific Guest mode session is cleared after all Guest windows are closed.
InPrivate browsing
InPrivate browsing is a private browsing mode. No browsing history, download history, cookies and site data, nor form fill data are remembered. Microsoft Edge saves downloaded files and any new favorites created while browsing InPrivate.
By default, while browsing InPrivate, Microsoft does not collect any information about websites you visit for product improvement purposes. Your school, workplace, or internet service provider may still be able to see your browsing activity.
Browsing data for the specific InPrivate session is cleared after all InPrivate windows are closed. When using the Windows Input Method Editor (IME) keyboard for typing and inking, data may be collected to improve language recognition and suggestion capabilities.
To stop inking and typing data from being collected by Microsoft while using the
Windows IME keyboard during InPrivate and normal browsing, open Start > Settings > Privacy, and then turn off Inking & typing personalization. For more information about InPrivate browsing, see Browse InPrivate in Microsoft Edge.
Data privacy when using a work profile
When a user is signed in with a work profile, the user's organization has access to the following data:
The identity of the user in the profile.
The user's operating system, browser, and browser version.
The URLs that are accessed by the user.
The file names of files that the user attempts to download or upload.
The content of files that the user attempts to download or upload.
Any attempted actions by the user, such as cut, copy, print, download, or upload.
For example, when a user is signed in with the work profile user1@contoso.com, Contoso can see this data.
Read aloud
Microsoft Edge offers Read aloud, which reads the content of a webpage to the user. To start Read aloud, right-click the webpage or open Settings and more (...) and select Read aloud. Read aloud offers multiple voices to read the webpage content. If you are using voices that are installed on Windows 10 and later	 under the Time & Language section of Windows Settings and want to clear the local cache for any voices you previously used, go to edge://settings/clearBrowserData.
When you start Read aloud, Microsoft Edge uses the Web Speech API. Depending on the voice you select, the contents of the page are converted from text to speech using either a platform-supplied, client-side library (for example, one specific to your operating system) or a server-side library powered by Azure Cognitive Services.
If your content is converted to speech using a client-side library, no information is sent to Microsoft servers. If your content is converted to speech using Azure Cognitive Services (as indicated by the word "Online" in any of the voice names), the text, along with a randomly generated token, is sent to Microsoft. Once conversion is complete, the service returns the spoken text in an audio file to your device. All data is encrypted while being transferred from your device to Microsoft and vice versa. The text that is sent to Microsoft and the audio file that is generated are both deleted immediately after conversion occurs; no other data about your web content is stored for any period of time.
Releasing new functionality
To improve Microsoft Edge, the Microsoft Edge team is always learning from users. As part of the learning, some users may experience a new function before it is made available to everyone.
To enable new functions for randomly selected users, Microsoft Edge regularly sends required information about your operating system, channel, version, country or region, and other device configuration data to the Microsoft Edge configuration service. The data is sent with a resettable identifier unique to your browser. Data is transmitted to the service over HTTPS. The data is used for receiving updates to enable new functionality, to keep Microsoft Edge up to date and performing properly, and to improve Microsoft products and services.
More controls and configurations are available for organizations. For more information about controls and configurations for organizations, see Microsoft Edge configurations and experimentation.
As a user, you aren't able to turn off the browser updates controlled or configured by your organization. You can control whether your product usage data is sent to Microsoft. Go to edge://settings/privacy, and change the Optional diagnostic data settings.
Microsoft developers need to understand how new functions affect Microsoft Edge and Microsoft services. Microsoft Edge sends a resettable identifier unique to your browser and a functions tag that encodes which new functions were enabled for Microsoft Edge and Microsoft services. New functions help build the best experiences and the best browser for everyone.
The functions tag is not unique to your installation of Microsoft Edge. The tag is shared across all Microsoft Edge instances that share the same set of new functions. Microsoft Edge sends the information via HTTPS to Microsoft services. The browser does not send the information when you browse InPrivate or in Guest mode. You can prevent the data from being sent. Go to edge://settings/privacy, and turn off the Help improve
Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. For more information about how to reset the identifier unique to your browser, see the Diagnostic data about how you use the browser section.
Resolve navigation errors
If Microsoft Edge detects SSL connection timeouts, certificate errors, or other network issues that may be caused by a captive portal, it sends a request to
http://edge.microsoft.com/captiveportal/generate_204 and checks the response code. Captive portals include a Wi-Fi network at a hotel or airport. If the request is redirected to another URL, Microsoft Edge opens the URL in a new tab, assuming that it is a sign-in page. Requests to the captive portal detection page are a stateless service. Requests aren't logged, and cookies aren't sent or saved. On Windows platforms, Microsoft Edge uses a Windows captive portal service. Otherwise, the Microsoft Edge captive portal service is used. You can turn off the service. Go to edge://settings/privacy, and turn off the Use a web service to help resolve navigation errors setting.
Rewards
Microsoft Rewards (the "Program") enables you to earn redeemable points for activities such as qualified searches, acquisitions, and other offers from Microsoft. These points can then be redeemed for gift cards or non-profit donations or automatic contributions to subscriptions. Microsoft Edge has built-in support for all existing avenues for earning points, and also introduces new and exclusive means to earn more points. You can track your points, and you can stay up-to-date with limited period offers to get the most out of the program.
For non-members, Microsoft Edge presents personalized joining offers based on the page you're on. Once you engage and choose to enroll, Microsoft Edge uses your Microsoft account identity to sign you up and start the rewards service. The rewards service automatically adds points to your account for searching, playing, and shopping on Microsoft Edge. Microsoft Edge doesn't send your personal information or browsing data to any third-party services.
The Rewards dashboard (rewards.bing.com):

Rewards is an opt-in program. To turn off all Rewards experiences and data sharing, go to edge://settings/profiles/rewards, and turn off the Earn Microsoft Rewards in Microsoft Edge setting.

Offers may vary by market.
How to earn
Microsoft Edge provides the greatest number of avenues to earn rewards points while browsing the web.
A search is the act of an individual user manually entering text for the good faith purpose of obtaining Bing search results for the user's own research purposes, and does not include any query that's entered by a bot, macro, or other automated or fraudulent means of any kind ("Search").
An acquisition is the process of purchasing goods or downloading and acquiring a license for digital content from Microsoft, whether free or paid ("Acquisition"). Rewards points are not offered for every purchase from Microsoft. Microsoft may offer additional opportunities to earn points from time to time, and each point-earning offer will not be available in perpetuity.
Redeeming your points
To redeem your points or contribute points to a listed nonprofit organization, go to the redeem page. You can also sign up for automatic contributions to non-profit organizations through a giving program.
Cancelling your participation
If you no longer want to participate in the Microsoft Rewards program, follow the instructions on the opt out page. If you opt out, you will immediately lose all of your available points.
See also:
Learn about Microsoft Rewards.
The Microsoft Rewards section in the Microsoft Services Agreement.
Search results data for product improvement
In order to improve your experience in Microsoft Edge, Microsoft Bing, Microsoft News, and other Microsoft services, when the setting for this feature is enabled, Microsoft Edge will collect and use data from your web searches in Microsoft Edge. Microsoft will use your search results activity to make everyone's web and search experience better, more relevant, and useful. The data Microsoft collects is from searches you do across the web, including sites Microsoft doesn't own or operate.
 Microsoft Edge will scrub and de-identify the data by removing data identifying the person or device from which it was collected.
 Microsoft doesn't use any information we collect to personalize or provide ads to you.
 The data Microsoft collects is never associated with your account or your device.
 This data collection and setting is not available on managed devices.
The data Microsoft collects may include the search query, the search results that are displayed to you, and the interaction you have with those search results, such as the links you click. Microsoft may also collect demographic data.
To manage the collection and use of your search results activity for product improvement:
1. Open Microsoft Edge.
2. Select Settings and more > Settings.
3. Select Privacy, search, and services.
4. Under Search and service improvement, turn on or off the setting for Help improve Microsoft products by sending the results from searches on the web.
If you stop sharing your data, Microsoft may continue to use previously collected search results data, but it will still be de-identified and not associated with you or your device.
Secure DNS
When navigating to a website, the browser needs to look up the network address, such as 93.184.216.34, to resolve the host name, such as example.com. Secure DNS performs this lookup using a service over an HTTPS connection to the DNS service provider. Secure DNS protects the lookups from modification or eavesdropping by attackers on the network.
By default, your current DNS service provider is used to avoid disruptions to your browsing. Not all service providers offer secure DNS. To avoid delays in browsing, if the secure DNS connection fails, Microsoft Edge attempts a DNS lookup with your current DNS service provider that is not encrypted.
Microsoft Edge allows you to use a specific secure DNS provider. If a secure DNS provider is selected, then Microsoft Edge does not fall back to regular DNS lookup if the secure lookup fails. You can control your secure DNS settings in
edge://setting/privacy.
Secure DNS is off by default for managed machines that are part of an organization. It can be configured using administrative policies. InPrivate browsing uses the secure DNS setting of the profile from which the InPrivate session was launched. Guest mode will always use your current service provider.
Shopping
Microsoft Edge helps you find coupons, rebates, and better prices while shopping online. To help you find coupons or the best price while shopping online, Microsoft Edge downloads a list of shopping domains locally to the client from the Microsoft shopping service.
When you go to a website, or save an item to your Collections, Microsoft Edge locally determines if the website you're on is a shopping domain or product detail webpage. If the website is identified as a shopping webpage, Microsoft Edge sends the URL with personal data removed to the Microsoft shopping service.
Microsoft also sends the product price, product image, product name, ratings, and reviews, along with information about Microsoft Edge and your operating system version to the service. The data is sent over HTTPS with a randomly generated identifier and cookies if cookies are allowed.
The Microsoft Edge shopping feature requires sharing of cookie information with Bing.
For example, the cookies may be used for debugging, fraud detection, and analytics. The Microsoft shopping service returns prices from other retailers, historical price trends, and any available coupons for that website.
To help you find and keep track of coupons in your inbox, Microsoft Edge may optionally scan your connected email account for coupons in promotional emails. The Microsoft shopping service extracts coupons from promotional emails that are sent by supported retailers. The extracted coupons are stored and managed by the Microsoft shopping service and are accessible to you. Inbox coupons don't appear when using Guest mode or InPrivate.
The following steps assume that you have already connected your inbox.
To control which retailers' emails are scanned by Microsoft Edge:
1. In Microsoft Edge, click the Settings and more (...) button, and then select Shopping. The Shopping sidebar appears.
2. Click the Your Shopping tab.
3. In the Inbox coupons card, click the Settings (...) button:

4. In the Retailers in your inbox section, expand the section for a retailer, and then turn the toggle on or off:

To turn off Inbox coupons:
1. On the Shopping sidebar, click the Your Shopping tab.
2. In the Inbox coupons card, click the Settings (...) button.
3. Select an email account, and then click the Settings link.
4. Click the Disconnect email button.
When you're applying coupons, cookies are stored on your device to correctly attribute the coupon provider. Cookies are saved by Microsoft-trusted coupon providers only after a coupon is successfully applied on the cart. After the coupons are applied, information about the success of the coupons is sent back to the Microsoft shopping service to help understand which coupons succeeded or failed.
Data sent to the Microsoft shopping service is sent over HTTPS with a randomly generated identifier that changes per coupon lookup. Microsoft Edge partners with Bing Shopping to provide coupons relevant to the user's query. In some instances, Microsoft may receive revenue for use of the coupons. Whether a revenue share payment may be received is not factored into the ranking of coupons shown to users.

If you visit a shopping domain and you are an existing Bing Rebates user, Microsoft Edge sends the domain along with cookies to the Microsoft shopping service to retrieve your Bing Rebates profile and cash back offers for the domain. If you choose to activate cash back, Microsoft Edge sends your URL to the Microsoft shopping service to receive an affiliate URL. Cookies may be stored on your device to correctly attribute the rebates provider.
The shopping service is turned on by default for all users. To change the shopping setting in Microsoft Edge, complete the following actions.
1. Go to edge://settings/privacy.
2. Turn off the Save time and money with Shopping in Microsoft Edge setting.
InPrivate browsing uses the shopping setting of the profile that launched the InPrivate session.
Sign in and Identity
Signing in to Microsoft Edge provides many features to make the browser more productive. To sign in seamlessly when you first launch Microsoft Edge, it attempts to detect your identity from the operating system. If Microsoft Edge detects your identity from the operating system but you do not want to remain signed in to Microsoft Edge, go to edge://settings/profiles and either sign out or remove your profile.
If a new identity is added to the operating system and your Microsoft Edge profile does not currently have an identity, Microsoft Edge adds the specific identity to your profile. If you sign into Microsoft Edge with a Microsoft account or a work or school account and do not have an identity on your Windows profile, the account is added to your Windows profile unless you choose to not add it to Windows while signing in.
Being signed in to Microsoft Edge enables single sign-on. You are automatically signed in to certain websites such as Bing, and other identity-powered experiences such as Sync. If you want to limit automatic sign-in to Microsoft sites such as Bing, you may sign out of the browser.
To sign into specific sites again using your user name and password or clear your cookies, go to edge://settings/privacy. For more information about clearing browsing data, see View and delete browser history in Microsoft Edge.
To prevent any identity from being associated with Microsoft Edge, remove your Microsoft Edge profile or sign out of Microsoft Edge. To delete all data associated with your Microsoft Edge profile from your device, you must remove your Microsoft Edge profile. Deleting all data does not delete previously synced data associated with the identity.
Your identity in Microsoft Edge on macOS is shared between Microsoft apps. A shared identity allows you to sign into a Microsoft app without having to separately enter your credentials if you are signed in to another Microsoft app on the device. On macOS, you aren't automatically signed in to Microsoft Edge based on your authentication state in another Microsoft app. When you try to sign into Microsoft Edge, it offers to use the credentials from another Microsoft app on the device to sign into Microsoft Edge seamlessly. Similarly, when you are signed in to an account to Microsoft Edge, if you try to sign into other Microsoft apps, your Microsoft Edge credentials may be used to help you sign into the other Microsoft app on the device without requiring you to enter your credentials again.
You aren't able to sign into Microsoft Edge when using Guest mode or InPrivate.
SmartScreen
SmartScreen is designed to help you safely browse the web. When you go to websites or download files, SmartScreen checks the reputation of the URL or file. If SmartScreen determines that the site or file is malicious, it blocks you from going to the site or downloading the file.

As you browse the web, SmartScreen categorizes websites and downloads as top traffic, dangerous, or unknown. Top traffic is popular sites that SmartScreen has determined are trustworthy. If you go to a site marked as dangerous, SmartScreen immediately blocks you from accessing the site. When you go to an unknown site, SmartScreen checks the reputation to determine if you should access the site.
SmartScreen uses three types of reputation checks.
1. SmartScreen checks the URL of sites you visit against a local list to determine if the site is part of top traffic or is a known dangerous site. When you visit a top traffic site, SmartScreen does not send the URL to the SmartScreen service. If the URL is on the local list of dangerous sites, SmartScreen blocks it, which prevents any portion of the malicious web content from loading. Microsoft Edge periodically downloads an updated list of top traffic and dangerous sites to the device.
2. SmartScreen performs a synchronous reputation check of the URL. SmartScreen checks on all URLs that aren't categorized as top traffic. Microsoft Edge passes the URL, relevant information about the site, an identifier unique to your device, and general location information to the SmartScreen service to determine the safety of the site. The information provided by Microsoft Edge allows the service to identify new dangerous sites and stay up to date with the latest security threats. The results of URL checks are stored locally on the device and are automatically cleared at the end of the browser session. All requests to the SmartScreen service are made with HTTPS encryption.
3. SmartScreen checks downloaded files to help prevent harm to your device. SmartScreen performs a binary file reputation check synchronously as your download completes. Microsoft Edge sends information about the file such as the file hash, file name, download URI, and an identifier unique to your device to SmartScreen to perform the reputation check. All SmartScreen requests are made with HTTPS encryption. The SmartScreen service sends back the result of the check, which allows the file to either fully download or not. The results are stored locally on the device.
The SmartScreen service stores data about the reputation checks and builds a database of known malicious URLs and files. The data is stored on secure Microsoft servers and is used only for Microsoft security services. The data is never used to identify or target you in any way. Clearing your browsing cache clears all locally stored SmartScreen URL data. Clearing your download history removes any locally stored SmartScreen data about file downloads.
SmartScreen is turned on by default for Microsoft Edge. To disable SmartScreen, go to edge://settings/privacy and under Security turn off the Microsoft Defender
SmartScreen setting. The setting is the same for all profiles associated with the installation of Microsoft Edge on your device. The setting is not synced across devices. The setting applies to InPrivate browsing and Guest mode. If your device is managed with group policies set by your organization, the setting is reflected in Microsoft Edge.
To view the setting, go to edge://settings/privacy. For more information about SmartScreen, see SmartScreen: FAQ	.
Optionally, SmartScreen checks the URLs of files you download to see if any are categorized as potentially unwanted apps. Blocking potentially unwanted apps helps deliver more productive, performant, and delightful Windows experiences. The setting is turned off by default and is only available on Windows 10 and later devices. To enable the feature, go to edge://settings/privacy and turn on the Block potentially unwanted apps setting. For more information about how potentially unwanted apps are categorized, see Potentially unwanted application (PUA). For more information about how to configure the setting, see Detect and block potentially unwanted applications.
Speech recognition
To convert your speech into text, Microsoft Edge supports the Web Speech API. If a website includes a web feature that requires capture and translation of your speech to text and requests access to your microphone, Microsoft Edge sends the captured audio to a Microsoft service where it is translated into text. The recorded audio is sent with a randomly generated token over a secure HTTPS connection to the Microsoft Azure Cognitive Services. The recorded audio content is not stored for any purposes. The text is sent back to your device and then sent to the website.
To turn off speech translated to text, you may deny microphone access from any site that prompts for permission. To turn off the Microphone permission for all sites, go to
edge://settings/content/microphone.
Suggest similar sites
To help resolve URL typos in the address bar that result in a website error, Microsoft
Edge may recommend a corrected URL. When a website navigation error occurs, Microsoft Edge sends the domain of the web address to the Microsoft service to suggest a corrected URL. Microsoft Edge does not include identifiers or tokens with the domain. If the service finds a suggestion, it returns the suggested URL. Microsoft stores the incorrect domain, and suggested domain, to help improve the service. To help you go to the correct sites, the feature is turned on by default. To turn off the feature, go to edge://settings/privacy and under the Services turn off the Suggest similar sites
when a website can't be found setting.
Support nonprofits
Microsoft Edge allows you to support nonprofit organizations using Microsoft Rewards points or cash while browsing. When you are signed in to Microsoft Edge with your Microsoft account and navigate to a nonprofit website, the Support nonprofits icon appears on the right side of the Address bar. You can then click this icon to donate to the nonprofit organization.

opportunities to support causes and nonprofits you care about setting.
Supporting nonprofits is not available when using InPrivate or Guest modes.
Sync
Signing into Microsoft Edge with a Microsoft account will enable syncing your browsing data across all signed-in versions of Microsoft Edge. You can sync your browsing history, favorites, settings, form fill data including addresses and more, passwords, extensions, open tabs, and collections. Each synced data type may be turned on or off individually.
Favorites include any tabs you previously set aside in previous versions of Microsoft Edge, which sync along with the rest of your favorites. Deleted or modified favorites or other data from one signed-in version of Microsoft Edge sync to all other signed-in versions of Microsoft Edge where sync is turned on. To manage sync configurations, go to edge://settings/profiles/sync. Your sync settings may be managed by your organization.

For sync to function, all device connectivity and configuration data needed to provide the sync experience is sent to Microsoft. Sync data includes the name of your device, make, and model. To delete sync data, see Microsoft device dashboard. To manage your synced favorites, go to edge://favorites. To manage all other data types, go to
edge://settings/profiles.
When you sign into Microsoft Edge with your Microsoft account or work or school account, Microsoft Edge will store your preferences for your data privacy settings in Microsoft's servers. Microsoft Edge will only use the stored settings to make it easier for you to migrate your experience when you start using Microsoft Edge on a different device, or when you sign in to Microsoft Edge.
All synced data is encrypted in transit over HTTPS when transferred between the browser and Microsoft servers. The synced data is also stored in an encrypted state in Microsoft servers. Sensitive data types such as addresses and passwords are further encrypted on the device before being synced. If you are using a work or school account, all data types are further encrypted before being synced using Microsoft Purview Information Protection. All other synced data types are stored until you delete the data, the account is deleted, or the account becomes inactive. An account ID is attached to all synced data, as the ID is necessary to perform sync across multiple devices.
InPrivate and Guest mode browsing data does not sync to your Microsoft account. However, favorites created during InPrivate sessions are synced across your signed-in versions of Microsoft Edge.
Tab organization
Microsoft Edge offers helpful suggestions on how to organize tabs to save you time and keep you focused on the web content you care about. These suggestions augment the Tab Grouping feature that's built into Microsoft Edge.
When two or more tabs are grouped together, Microsoft Edge sends information about the tabs, including the Title and URL, to the Tabs service over HTTPS. This information is used to generate a relevant name for the Tab Group.
You can also choose to have Microsoft Edge auto-group all of your tabs, by using the
Group Similar Tabs feature from the Tab Action menu. In addition to the Title and URL, Microsoft Edge also sends information about which tabs opened another tab, and a timestamp of when a tab was opened. This additional data allows the service to more accurately suggest Tab Groups, to organize your tabs.
All tab information that's sent to Microsoft is deleted immediately after processing occurs. No data is stored for any period of time.
The Microsoft Edge Tab organization behavior is turned on by default. To turn this behavior off, go to edge://settings/privacy and under Services turn off the Let Microsoft Edge help keep your tabs organized setting:

When the Tab Organization service is turned off, new Tab groups are given a generic name such as Group 1, and you can then rename the Tab group to be more descriptive. The option to automatically Group Similar Tabs within the Tab Action Menu will be turned off.
See also:
 Tab groups
Tips and recommendations
Microsoft Edge wants to provide you with relevant tips and recommendations to get the best experience using the browser. Microsoft Edge uses available device connectivity and configuration data to provide relevant tips and recommendations. This data will consist of your operating system, locale, browser settings, and other device connectivity and configuration data. This data is sent over a secure HTTPS connection with a resettable identifier unique to your browser. For Windows 10 and later devices while Microsoft Edge is being set up, we honor tailored experiences in Windows. Learn more about tailored experiences in Windows.
This data is not sent during InPrivate browsing or Guest mode.
Tracking prevention
Microsoft Edge is designed to detect and block known trackers. Users may choose from three levels of tracking prevention: Basic, Balanced, and Strict. To protect user privacy, Balanced is selected by default. Microsoft Edge detects trackers before any are loaded on the page by using an open-source list of known trackers. The list is downloaded to the device periodically as the list is updated. The number of trackers blocked and names of those trackers are stored locally on the device for statistical purposes. To clear the data, go to edge://settings/privacy/blockedTrackers. The detection and blocking of trackers occurs locally on the device. To disable tracking prevention, go to edge://settings/privacy. For more information about Tracking prevention, see Learn
about tracking prevention in Microsoft Edge.
You may turn off list updates using the following group policy, Enable component updates in Microsoft Edge.

Translate
In Microsoft Edge, you can browse the web and translate webpages into a language of your choice. Microsoft Edge uses Microsoft Translator to translate web pages. This feature at first uses a library on your device that samples certain visible portions of a webpage to detect the original language. If the detected language is not one of your preferred languages, Microsoft Edge offers to translate the webpage to your preferred language or another language you choose. You can then translate the page by selecting Translate. You can autotranslate all pages in that language by choosing the Always translate the pages from <a language> checkbox.
Microsoft Edge does not translate a webpage without your permission. If you do decide to translate, Microsoft Edge sends the text of the webpage you want to translate, along with the to and from language and a service token to Microsoft Translator over a secure HTTPS connection. The service token doesn't contain any user identifiable information. Microsoft Translator then processes the text to remove any identifiers (such as email or phone number) and stores the text for service improvement purposes. The details of this communication are covered under Microsoft Privacy Statement - Microsoft privacy.
If you want to stop Microsoft Edge from offering to translate webpages, complete the following steps.
1. Go to edge://settings/languages.
2. Turn off the Offer to translate pages that aren't in a language you read toggle and close the webpage.
Web apps and Pinned sites
Microsoft Edge lets you install web apps made by website developers and pin your favorite sites.
When you pin a site, it is added to your taskbar or dock. The data is stored locally on your device. For some sites, information about whether the site has been pinned is shared with the site, so the site knows not to prompt to pin. You may manage your pinned sites from the taskbar or dock. Pinned sites open in Microsoft Edge windows and use the same site permissions and diagnostic data settings as the specific version of Microsoft Edge.
WebView
Microsoft Edge WebView controls allow app developers to host web content in native applications on Windows 7, Windows 10, and later; and selected non-Windows platforms. The applications hosting the WebView2 instance may send diagnostic data with its own identifier to Microsoft. Diagnostic data can include how you use the Microsoft Edge, and sites you visit.
To enable diagnostic data collection, go to edge://settings/privacy. Turn on the
Optional diagnostic data setting. To turn off diagnostic data collection for Microsoft
Edge on Windows 10 and later, open Start > Settings > Privacy and select Diagnostics
& feedback. To turn off diagnostic data collection for all other platforms, go to edge://settings/privacy. Turn off the Help improve Microsoft products by sending
optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. The applications hosting Microsoft Edge WebView may collect other data that is governed by the data collection management of the developer and relevant privacy policies.
Workspaces
The Microsoft Edge Workspaces feature allows you to easily organize and share your browsing tasks with collaborators via customizable, shareable browsing windows. Each workspace shares favorites, a set of workspace tabs, and history, all created and curated by you and your collaborators. Workspace data is automatically saved, kept up-to-date, and stored in OneDrive/SharePoint.
Microsoft Edge Workspaces shares tabs, favorites, and history with collaborators in realtime. Collaborators' profile pictures are used to indicate which workspace tab they are using and which workspace tabs they have opened, changed, or closed. Collaborators cannot see how you interact with a webpage (workspaces don't screen-share).
Collaborators cannot see password-protected content unless they sign in and they have access via their own credentials. Microsoft Edge Workspaces doesn't store or share browsing data from non-workspace browsing sessions. If you leave a workspace, the stored contents remain available for other collaborators. If you delete a workspace, the stored contents are deleted for all collaborators.
Microsoft Edge Workspaces is only available for enterprise customers who are signed into Microsoft Edge with a Microsoft Entra ID account. Workspaces aren't available when using Guest mode or InPrivate browsing.
Writing assistance
To help you write faster and with fewer mistakes on the web, Microsoft Edge provides writing assistance tools, including spell checking, grammar checking, and text prediction.
By default, Microsoft Edge provides spelling and grammar checking using Microsoft Editor. When using Microsoft Editor, Microsoft Edge sends your typed text and a service token to a Microsoft cloud service over a secure HTTPS connection. The service token doesn't contain any user-identifiable information. A Microsoft cloud service then processes the text to detect spelling and grammar errors in your text. All your typed text that's sent to Microsoft is deleted immediately after processing occurs. No data is stored for any period of time.
If you select Basic instead of Microsoft Editor, Microsoft Edge will perform only local spellchecking on the device, and no data will be sent to the cloud for spellchecking services.
To use Basic spelling and grammar checking:
1. Go to edge://settings/languages.
2. In the Use writing assistance section, select Basic.
To turn off all spelling and grammar capabilities:
1. Go to edge://settings/languages.
2. Turn off the Use writing assistance toggle.
Languages
When you add a new language to Microsoft Edge, the browser downloads the dictionary for the new language to the device over HTTPS. The dictionary is used for the basic spellcheck service or for languages that aren't supported by Microsoft Editor spelling and grammar checking. Deleting the language from your Microsoft Edge settings deletes the dictionary from the device.
Text prediction
Microsoft Edge automatically provides word and sentence predictions in certain text boxes on the web. These predictions are only visible to you and are not inserted into the text box until you press Tab or the Right Arrow key to accept them. Password fields will not offer text predictions.
To turn off text predictions in Microsoft Edge:
1. Go to edge://settings/languages.
2. Turn off the Use text prediction toggle.
If the Use text prediction toggle is turned on, Microsoft Edge sends the text in the text box, your top language from the browser setting, and a text box identifier to a Microsoft cloud service over a secure HTTPS connection. The text box identifier is not associated with your account. The Microsoft cloud service processes the text to generate a relevant text prediction. Typed characters and text predictions are cached for up to 30 days, for service quality and performance improvement purposes only.
If you are browsing while using InPrivate or Guest mode, text prediction is turned off.
Text prediction does not run when you are editing a password field.
If your device is managed by using group policies set by your organization, the feature may be disabled depending on the administrator's policies of your organization.
Text prediction is only available in select languages and regions.
Windows Ink
Windows Ink allows you to write with a digital pen directly into an input field on Windows 11 touch devices. This helps you stay in your workflow by reducing the need to switch back and forth between the keyboard and a digital pen. Supported fields include text boxes, contenteditable elements, and the Address bar. Password fields are not supported.
Windows Ink supports the following writing tasks:
ﾉ Expand table
TaskHow to accomplishBeforeAfterInsert textWrite in or near the text box.Delete textScribble over the words that you want to delete.Add
spaceDraw a vertical line where you want a space to be inserted.Remove spaceDraw a vertical line on the space that you want to remove.Select textDraw a horizontal line across the text to select.Add
newlineDraw a "backwards L" at the end of a line of text.Aggregate feature usage data is collected to measure frequency of usage and latency.
Text that you've inputted and personal identifiers are not sent to Microsoft.
To opt out of Windows Ink for Microsoft Edge, go to edge://settings/content/HandwritingToText, and then in the Site permissions > Handwriting To Text section, turn off the Turn handwriting into text on input fields toggle.
To disable Windows Ink for an entire Windows device, go to Settings > Bluetooth & devices > Pen & Windows Ink > Shell Handwriting, and then turn off the Use your handwriting to enter text toggle.
Thank you!
Microsoft Edge is made possible by the Chromium open-source project and other open-source software. To view all of the software credits, go to edge://credits. Google Chrome Privacy Whitepaper was used as a source for gathering related information about the Chromium open-source project.
Getting in touch with the Microsoft Edge team
The Microsoft Edge team is always listening to customers and values your feedback. To provide feedback in Microsoft Edge, open Settings and more > Help and feedback and select Send feedback. For Progressive Web Apps (PWAs), open Settings and more (...) and select Send feedback to Microsoft. Provide details about the feedback, but all other information is optional.
If an email is detected from your Microsoft Edge profile, it is pre-populated with the URL of the current site and relevant diagnostic data. The diagnostic data can include data about Microsoft Edge features you turned on and your browser use. You may optionally include a screenshot, files from your device, and recording of your browser may also be optionally included. If you provide optional content, it can include personal data. The data is only used for diagnostic and product improvement purposes.
User feedback is securely sent to Microsoft using HTTPS and stored on secure Microsoft servers. If you include your email address and the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting is turned on in your Microsoft Edge privacy settings, an identifier unique to your browser installation on your device is associated with your feedback. If you're signed in to Microsoft Edge with your Microsoft account, your feedback is associated with your account. All diagnostic data, including diagnostic logs, recordings, and attachments, are stored for up to 30 days. The remaining feedback data, including an optional screenshot, is stored for up to 15 months. Make a request to delete your feedback if you provided an email with your feedback item.

The Web We Want initiative
Article • 03/20/2023
The Web We Want initiative is a cross-browser, open initiative focused on identifying missing features and functionalities in the web platform for potential development as web standards or browser features.
If you build for the web, you inevitably run into problems. Perhaps there's no way to achieve an aspect of your design with CSS, or it may require an incredible amount of experimenting with CSS. Maybe there's a device feature you want to tap into using JavaScript, or there's a needed Developer Tools feature that can make your job easier.
The Web We Want initiative is the place to let browser vendors and standards groups know what you think is missing from the web platform. Here's how you can get involved:
 Navigate to The Web We Want website and submit web platform or developer tools features.
 View the list of submitted Wants to upvote existing Wants that you need, which helps us prioritize them.
 Join in the discussions to provide feedback, link to resources, and otherwise help usher a Want into reality.
Stay in touch by following the initiative on Twitter	 or LinkedIn (direct link: https://www.linkedin.com/company/the-web-we-want; requires sign in) to keep up-
to-date on what's in development, or to participate in surveys that help us prioritize submitted Wants.
Examples of Wants that have been delivered as features
We've successfully shipped a few Wants into DevTools, such as:
Source Order Viewer The Want.
The docs: Test keyboard support using the Source Order Viewer.
3D View
Navigate z-index, DOM, and layers using the 3D View tool - similar to what was in the Firefox DevTools.
There are also other Wants that have previous proposals in standards groups. Join us in driving the future of the web forward with the Web We Want!
















































































































Output

Output



Output

















































































































2. 	Application
) button, or else the More Tools (
3. 	Background Services section, select 

5. 



5. 





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































