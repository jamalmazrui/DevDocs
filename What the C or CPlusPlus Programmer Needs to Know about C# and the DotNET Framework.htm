<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>.NET Book Zero</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 1 6 1 0 1 1 1 1 1;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 1 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Yu Gothic";
	panose-1:2 11 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:DengXian;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Palatino Linotype";
	panose-1:2 4 5 2 5 5 5 3 3 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Aptos Display";}
@font-face
	{font-family:Aptos;}
@font-face
	{font-family:"Segoe UI Emoji";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"Bookman Old Style";
	panose-1:2 5 6 4 5 5 5 2 2 4;}
@font-face
	{font-family:"Segoe UI Symbol";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.5pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:103%;
	font-size:12.0pt;
	font-family:"Bookman Old Style",serif;
	color:black;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:.1pt;
	margin-bottom:20.25pt;
	margin-left:.5pt;
	text-align:center;
	text-indent:-.5pt;
	line-height:112%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	color:black;
	font-style:italic;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	background:silver;
	font-size:14.0pt;
	font-family:"Bookman Old Style",serif;
	color:black;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:0in;
	margin-right:.1pt;
	margin-bottom:20.25pt;
	margin-left:.5pt;
	text-align:center;
	text-indent:-.5pt;
	line-height:112%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Arial",sans-serif;
	color:black;
	font-style:italic;}
h4
	{mso-style-link:"Heading 4 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.15pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial",sans-serif;
	color:black;}
h5
	{mso-style-link:"Heading 5 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:4.05pt;
	margin-left:0in;
	line-height:107%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Arial",sans-serif;
	color:black;
	font-style:italic;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{margin-top:0in;
	margin-right:1.5pt;
	margin-bottom:5.5pt;
	margin-left:13.25pt;
	text-indent:-.5pt;
	line-height:103%;
	font-size:12.0pt;
	font-family:"Bookman Old Style",serif;
	color:black;}
span.Heading5Char
	{mso-style-name:"Heading 5 Char";
	mso-style-link:"Heading 5";
	font-family:"Arial",sans-serif;
	color:black;
	font-weight:bold;
	font-style:italic;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Bookman Old Style",serif;
	color:black;
	font-weight:bold;}
span.Heading4Char
	{mso-style-name:"Heading 4 Char";
	mso-style-link:"Heading 4";
	font-family:"Arial",sans-serif;
	color:black;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Arial",sans-serif;
	color:black;
	font-weight:bold;
	font-style:italic;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Arial",sans-serif;
	color:black;
	font-weight:bold;
	font-style:italic;}
span.msoIns
	{mso-style-name:"";
	text-decoration:underline;
	color:#65B4B4;}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:#FF4B4B;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:8.5in 11.0in;
	margin:74.7pt 89.9pt 41.9pt 1.25in;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:8.5in 11.0in;
	margin:1.0in 86.05pt 1.0in 1.25in;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:8.5in 11.0in;
	margin:1.0in 89.95pt 72.15pt 1.25in;}
div.WordSection3
	{page:WordSection3;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.7pt;
margin-left:31.7pt;text-indent:0in;line-height:107%'><span style='font-size:
48.0pt;line-height:107%'>.NET Book Zero </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:22.7pt;
margin-left:14.5pt;text-indent:2.05pt;line-height:98%'><span style='font-size:
20.0pt;line-height:98%'>What the C or C++ Programmer Needs to Know about C# and
the .NET Framework </span></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:11.05pt;
margin-bottom:4.95pt;margin-left:11.55pt;text-align:center;line-height:106%'>by
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:22.6pt;margin-bottom:
327.5pt;margin-left:143.9pt;text-indent:26.75pt;line-height:142%'>Charles
Petzold <a href="http://www.charlespetzold.com/"><span style='color:blue'>www.charlespetzold.com</span></a><a
href="http://www.charlespetzold.com/"><span style='color:black;text-decoration:
none'> </span></a></p>

<p class=MsoNormal style='margin-left:-.75pt;text-indent:0in'>Version 1.1,
January 1, 2007                       © Charles Petzold, 2006-2007 </p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:.15pt;
margin-bottom:18.75pt;margin-left:0in;text-align:center;text-indent:0in;
line-height:107%'><span style='font-size:16.0pt;line-height:107%'>Table of
Contents </span></p>

<p class=MsoToc1><a href="#_Toc369915"><span style='color:black;text-decoration:
none'>Chapter 1. Why This Book?.................................................................. </span><span style='color:black;text-decoration:none'>2 </span></a></p>

<p class=MsoToc1><a href="#_Toc369916"><span style='color:black;text-decoration:
none'>Chapter 2. Why .NET?.......................................................................... </span><span style='color:black;text-decoration:none'>5 </span></a></p>

<p class=MsoToc1><a href="#_Toc369917"><span style='color:black;text-decoration:
none'>Chapter 3. Runtimes and SDKs........................................................... </span><span style='color:black;text-decoration:none'>7 </span></a></p>

<p class=MsoToc1><a href="#_Toc369918"><span style='color:black;text-decoration:
none'>Chapter 4. Edit, Compile, Run, Disassemble..................................... </span><span style='color:black;text-decoration:none'>11 </span></a></p>

<p class=MsoToc1><a href="#_Toc369919"><span style='color:black;text-decoration:
none'>Chapter 5. Strings and the Console.................................................... </span><span style='color:black;text-decoration:none'>22 </span></a></p>

<p class=MsoToc1><a href="#_Toc369920"><span style='color:black;text-decoration:
none'>Chapter 6. Primitive Data Types......................................................... </span><span style='color:black;text-decoration:none'>51 </span></a></p>

<p class=MsoToc1><a href="#_Toc369921"><span style='color:black;text-decoration:
none'>Chapter 7. Operators and Expressions............................................... </span><span style='color:black;text-decoration:none'>68 </span></a></p>

<p class=MsoToc1><a href="#_Toc369922"><span style='color:black;text-decoration:
none'>Chapter 8. Selection and Iteration...................................................... </span><span style='color:black;text-decoration:none'>75 </span></a></p>

<p class=MsoToc1><a href="#_Toc369923"><span style='color:black;text-decoration:
none'>Chapter 9. The Stack and the Heap................................................... </span><span style='color:black;text-decoration:none'>83 </span></a></p>

<p class=MsoToc1><a href="#_Toc369924"><span style='color:black;text-decoration:
none'>Chapter 10. Arrays............................................................................. </span><span style='color:black;text-decoration:none'>88 </span></a></p>

<p class=MsoToc1><a href="#_Toc369925"><span style='color:black;text-decoration:
none'>Chapter 11. Methods and Fields........................................................ </span><span style='color:black;text-decoration:none'>95 </span></a></p>

<p class=MsoToc1><a href="#_Toc369926"><span style='color:black;text-decoration:
none'>Chapter 12. Exception Handling...................................................... </span><span style='color:black;text-decoration:none'>108 </span></a></p>

<p class=MsoToc1><a href="#_Toc369927"><span style='color:black;text-decoration:
none'>Chapter 13. Classes, Structures, and Objects.................................. </span><span style='color:black;text-decoration:none'>117 </span></a></p>

<p class=MsoToc1><a href="#_Toc369928"><span style='color:black;text-decoration:
none'>Chapter 14. Instance Methods......................................................... </span><span style='color:black;text-decoration:none'>126 </span></a></p>

<p class=MsoToc1><a href="#_Toc369929"><span style='color:black;text-decoration:
none'>Chapter 15. Constructors................................................................. </span><span style='color:black;text-decoration:none'>135 </span></a></p>

<p class=MsoToc1><a href="#_Toc369930"><span style='color:black;text-decoration:
none'>Chapter 16. Concepts of Equality..................................................... </span><span style='color:black;text-decoration:none'>144 </span></a></p>

<p class=MsoToc1><a href="#_Toc369931"><span style='color:black;text-decoration:
none'>Chapter 17. Fields and Properties.................................................... </span><span style='color:black;text-decoration:none'>153 </span></a></p>

<p class=MsoToc1><a href="#_Toc369932"><span style='color:black;text-decoration:
none'>Chapter 18. Inheritance................................................................... </span><span style='color:black;text-decoration:none'>166 </span></a></p>

<p class=MsoToc1><a href="#_Toc369933"><span style='color:black;text-decoration:
none'>Chapter 19. Virtuality...................................................................... </span><span style='color:black;text-decoration:none'>175 </span></a></p>

<p class=MsoToc1><a href="#_Toc369934"><span style='color:black;text-decoration:
none'>Chapter 20. Operator Overloading.................................................... </span><span style='color:black;text-decoration:none'>191 </span></a></p>

<p class=MsoToc1><a href="#_Toc369935"><span style='color:black;text-decoration:
none'>Chapter 21. Interfaces...................................................................... </span><span style='color:black;text-decoration:none'>202 </span></a></p>

<p class=MsoToc1><a href="#_Toc369936"><span style='color:black;text-decoration:
none'>Chapter 22. Interoperability............................................................. </span><span style='color:black;text-decoration:none'>206 </span></a></p>

<p class=MsoToc1><a href="#_Toc369937"><span style='color:black;text-decoration:
none'>Chapter 23. Dates and Times........................................................... </span><span style='color:black;text-decoration:none'>210 </span></a></p>

<p class=MsoToc1><a href="#_Toc369938"><span style='color:black;text-decoration:
none'>Chapter 24. Events and Delegates.................................................... </span><span style='color:black;text-decoration:none'>221 </span></a></p>

<p class=MsoToc1><a href="#_Toc369939"><span style='color:black;text-decoration:
none'>Chapter 25. Files and Streams......................................................... </span><span style='color:black;text-decoration:none'>226 </span></a></p>

<p class=MsoToc1><a href="#_Toc369940"><span style='color:black;text-decoration:
none'>Chapter 26. String Theory................................................................ </span><span style='color:black;text-decoration:none'>250 </span></a></p>

<p class=MsoToc1><a href="#_Toc369941"><span style='color:black;text-decoration:
none'>Chapter 27. Generics....................................................................... </span><span style='color:black;text-decoration:none'>253 </span></a></p>

<p class=MsoToc1><a href="#_Toc369942"><span style='color:black;text-decoration:
none'>Chapter 28. Nullable Types.............................................................. </span><span style='color:black;text-decoration:none'>259 </span></a></p>

<p class=MsoNormal>&nbsp;</p>

<h1 style='margin-top:0in;margin-right:.2pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369915">Chapter 1. Why This Book? </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Some books have a Chapter Zero. Thats the chapter with the
stuff the reader needs to know before reading Chapter One. Chapter Zero might
be a refresher course in subjects the reader once knew but has now forgotten,
or it might be a quick-and-dirty summary of prerequisites for the rest of the
book. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>This book originated as a Chapter Zero in my book <i>Applications
= Code + </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:3.1pt;margin-bottom:4.1pt;
margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;line-height:
115%'><i>Markup: A Guide to the Microsoft Windows Presentation Foundation</i>
(Microsoft Press, 2006), which is about the new Windows client programming
platform thats part of Microsoft .NET 3.0 and Microsoft Windows Vista.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I wanted <i>Applications = Code + Markup</i> to focus
almost exclusively on the Windows Presentation Foundation. I knew there was
enough to cover without going into the basics of general .NET programming and
C#. Yet, I wasnt sure how much .NET my readers would know. I started writing a
Chapter Zero for the book that would summarize all the basics of .NET and C#
for the C and C++ programmers who might be coming to .NET for the very first
time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>It soon became evident that this Chapter Zero would be very
long. It occurred to me that I could extract the material and make it a book on
its own. And so I did and this is it. What you have in your hands (or are
reading on a screen) is an introduction to C# and those topics in .NET that are
typically found in all .NET programming. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# is a modern type-safe and object-oriented programming
language based on the syntax of C and (to a certain extent) C++ and Java. Even
if youre an experienced C++ programmer, you might be in for a few surprises.
You may think you know the difference between a <i>class</i> and a <i>struct</i>,
for example, but the difference between a <i>class</i> and a <i>struct</i> in
C# is completely different from C++. (That difference is actually one of the
lamest features of C++ and one of the most profound features of C#.) For that
reason and others, I approach object-oriented programming concepts in this book
almost as if youre learning about them for the very first time.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, I do expect you to have some programming
experience with a C-family language. If youre learning C# as a first
programming language, you might be better off with a slower, gentler
introduction, such as my book <i>Programming in the Key of C#: A Primer for
Aspiring Programmers</i> (Microsoft Press, 2003). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The contents of <i>.NET Book Zero</i> are copyrighted by
me, but the book is freely distributable. You can give it to whomever you want.
You can make copies. You can print it out and give it away. But you cant
charge for it, and you cant modify it, and you cant use any part of this book
in another work without my permission. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If youd like to reference this book on your own Web site,
I ask that you do so using a link to the page on my Web site where this book is
found. That page is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://www.charlespetzold.com/dotnet"><i><span style='color:blue'>http://www.charlespetzold.com/dotnet</span></i></a><a
href="http://www.charlespetzold.com/dotnet"><i><span style='color:black;
text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thats the page where people can find the latest version of
the book and download the source code I show in the pages that follow. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you like this book, perhaps youd like to read some
other books Ive written. Come to my web site, <a
href="http://www.charlespetzold.com/"><span style='color:blue'>www.charlespetzold.com</span></a><a
href="http://www.charlespetzold.com/"><span style='color:black;text-decoration:
none'> </span></a>and check them out. These other books arent free, alas. They
will cost you money. But you will be pleased to know that I receive a small
percentage of the price you pay for each book. That money helps me pay my rent
and feed myself, and enables me to write more books in the future. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In writing this book, Ive drawn upon some of my earlier
writing about C# and the .NET Framework. Some of the earlier chapters are
revisions of Chapter 1 in <i>Programming Microsoft Windows with C#</i>
(Microsoft Press, 2001), which is an introduction to Windows Forms programming.
Some of the later chapters were drawn from appendices of that book. The
chapters specific to the object-oriented programming aspects of C# were drawn
from my book <i>Programming in the Key of C#</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As a .NET programmer, youll probably specialize in a
particular aspect of .NET, and youll likely buy a couple books on that
subject. But there are two essential books that every C# and .NET programmer
should have. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The first essential book is <i>The C# Programming Language</i>
by Anders </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Hejlsberg, Scott Wiltamuth, and Peter Golde (2<sup>nd</sup>
edition, AddisonWesley, 2006). This book is the official technical
specification of the C# language. It is certainly not a tutorial for learning
the language, but a great book to read <i>after</i> youve become adept at C#
programming. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Downloadable versions of <i>The C# Programming Language</i>
are available under the title <i>C# Language Specification</i> from this Web
page: <a href="http://msdn2.microsoft.com/en-us/vcsharp/aa336809.aspx"><i><span
style='color:blue'>http://msdn2.microsoft.com/en</span></i></a><a
href="http://msdn2.microsoft.com/en-us/vcsharp/aa336809.aspx"><i><span
style='color:blue'>-</span></i></a><a
href="http://msdn2.microsoft.com/en-us/vcsharp/aa336809.aspx"><i><span
style='color:blue'>us/vcsharp/aa336809.aspx</span></i></a><a
href="http://msdn2.microsoft.com/en-us/vcsharp/aa336809.aspx"><i><span
style='color:black;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because the online title <i>C# Language Specification</i>
is actually more accurate than the book title <i>The C# Programming Language</i>,
I will refer to the online title rather than the book title when I sometimes
refer to the book using chapter and section numbers. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The second essential .NET book is Jeffrey Richters <i>CLR
via C#</i> (Microsoft </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Press, 2006), which is actually the second edition of <i>Applied
Microsoft .NET Framework Programming</i>. There are many subtle and interesting
aspects of .NET programming that Richters book explores in much more depth
than youll find in the pages ahead that Ive written. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In <i>.NET Book Zero</i> and my other books, I tend to
focus more on the C# language and the .NET Framework class libraries rather
than Microsoft Visual Studio. As you probably know, Visual Studio is the
primary programming environment for creating .NET applications. You might want
to supplement your C# and .NET studies with a book specific to Visual Studio. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because this book is intended to teach C# and the rudiments
of .NET, much of the code I show in the pages ahead targets the traditional
(and largely obsolete) command line using character-mode programming
interfaces. I am well aware that youll probably eventually be coding for
graphical environments, and that you might consider learning about
character-mode programming to be a complete waste of your time. This is not so.
The character-formatting techniques you learn here are directly applicable to
graphical programming as well. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:6.8pt;
margin-left:-.25pt'>This book is written in tutorial style, which means that it
is intended to be read sequentially. The reader is encouraged to type in the
programs as they are encountered in the book, to run them, and experiment with
them. </p>

<p class=MsoNormal style='margin-left:-.75pt;text-indent:0in'>                    *
                                     *                                      * </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Version 1.0 of this book was posted to <i>www.charlespetzold.com/dotnet</i>
on December 4, 2006. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Version 1.1 was posted on January 1, 2007. It incorporated
many minor corrections reported by Larry Danielle, Paul Dougherty, Paul Duggan,
David Evans, Thorsten Franz, Konstantin Korobkov, Tyson Maxwell, Ryan McFarren<span
style='font-size:10.0pt;line-height:103%;font-family:"Arial",sans-serif'>, and </span>Larry
Smith. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-left:.6pt'><a name="_Toc369916">Chapter 2. Why .NET? </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The Microsoft .NET Framework (which Ill often refer to
with the simpler term .NET) is a collection of software technologies that began
emerging from Microsoft Corporation around the turn of the century. The first
version of .NET was released early in 2002, and version 1.1 came out in 2003.
Version 2.0 was released late in 2005, and Version 3.0 followed in late 2006. A
good overview of the .NET releases can be found in the Wikipedia entry on the
Microsoft .NET Framework: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://en.wikipedia.org/wiki/.NET_Framework"><i><span style='color:blue'>http://en.wikipedia.org/wiki/.NET_Framework</span></i></a><a
href="http://en.wikipedia.org/wiki/.NET_Framework"><i><span style='color:black;
text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>From the end-users perspective, .NET is fairly invisible.
The savvier user might feel enlightened to know that .NET is basically a
collection of dynamic link libraries. These DLLs might already be installed
along with Windows XP on a new machine, or they might be installed during the
process of installing an application that uses .NET. The latest version of
WindowsMicrosoft Windows Vistaincludes the .NET Framework 3.0 as an intrinsic
part of its architecture.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>From the programmers perspective, .NET is a huge class
library that contains everything you need to write Web applications or client
applicationsthe type of programs sometimes called &#8213;regular old Windows
apps.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you are a programmer, and you write (or want to write)
Web applications or Windows client applications, and you havent yet started
exploring .NET, then reading this book is a good move. Congratulations on
getting started! </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can program for .NET in a variety of programming
languages. However, any language you use for .NET programming must meet a set
of minimum requirements to order to use the .NET class libraries. These
requirements are known as the .NET Common Language Specification or CLS.
Related to the CLS is the .NET Common Type System (CTS) which defines the basic
data types (such as integer, floating point, and string) that .NET languages
support. The CLS and CTS are in turn part of the Common Language Infrastructure
(CLI). The CLI is an ISO standard and an ECMA standard. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When you compile one of your .NET programs, the program is
generally compiled to a processor-independent intermediate language that
resembles machine code.  This intermediate language was once called Microsoft
Intermediate Language (MSIL), and its still often known by that name.
Sometimes its just called IL. But the most proper term is now the Common
Intermediate Language (CIL). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When a .NET program is run on a particular machine, the CIL
is compiled to the native code of the processor by a just-in-time (JIT)
compiler. This two-stage compilation potentially allows for portability among
various platforms and processors.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>The just-in-time compilation is performed by the .NET
Common Language Runtime (CLR), which is part of the .NET system installed on
end-users machines. The CLR manages the execution of .NET programs, and can
prevent programs from causing damage to the users machine. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thus, when you are programming for .NET you are said to be
writing &#8213;managed code.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>One important aspect of managed code involves the
management of memory. As object-oriented programming and class libraries have
become more complex over recent years, common problems have arisen involving
memory allocation. Very often its not clear who is responsible for freeing a
particular memory block. For that reason, the CLR implements garbage
collection. The CLR can determine if a particular block of memory can no longer
be referenced by a program, and then free such blocks of memory if required. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Microsoft makes available several languages to the .NET
programmer. Which one you use is mostly a matter of personal taste. Some people
program for .NET using Visual Basic .NET. Others use Managed C++, more formally
known now as C++/CLI. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, most .NET programmers have come to know and love
C#, the programming language designed in conjunction with .NET largely under
the guidance of Anders Hejlsberg. Thats the language Ill be describing in the
pages that follow. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# incorporates much of the basic expression and statement
syntax of C, and has a rather cleaner object-oriented programming syntax than
C++. The big difference that veteran programmers will discover is that C# does
not require you to mess around with pointers. Traditional C-like pointers are
supported in C# syntax, but they are normally relegated to interoperability
with existing code. (I wont be discussing C# pointers in this book; if you
want that information, you can find it elsewhere.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Rather than pointers, the .NET and C# programmer works with
&#8213;references,&#8214; and these references are usually implied rather than
being syntactically explicit. It is part of becoming a good C# programmer that
you learn when you are working with a reference and when you are not. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>It is never too early to start learning the C# and .NET
mantra: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Classes are reference types;
structures are value types. </i></p>

<h1 style='margin-left:.6pt'><a name="_Toc369917">Chapter 3. Runtimes and SDKs </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To run .NET programs on your machine, youll need to have
some software installed that is variously known as the .NET
&#8213;runtime&#8214; or &#8213;runtime components&#8214; or
&#8213;redistributable&#8214; or &#8213;redistributable package.&#8214; The
term &#8213;redistributable&#8214; means that a software developer like
yourself can distribute the .NET runtime if its part of an installation for an
application that requires the .NET Framework to run. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll need the .NET runtime components to run .NET
programs. To develop .NET programs on your machine, youll also need to install
the .NET Framework Software Development Kit (SDK). Both the runtime and the SDK
are free and both are generally downloadable from the same or related Web
pages. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To determine what versions of .NET (if any) are currently
installed on your machine, the following Knowledge Base article can help: <a
href="http://support.microsoft.com/kb/318785"><i><span style='color:blue'>http://support.microsoft.com/kb/318785</span></i></a><a
href="http://support.microsoft.com/kb/318785"><i><span style='color:black;
text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For installations of the .NET Framework 1.1 and the SDK, go
to this page: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://msdn2.microsoft.com/netframework/aa569264.aspx"><i><span
style='color:blue'>http://msdn2.microsoft.com/netframework/aa569264.aspx</span></i></a><a
href="http://msdn2.microsoft.com/netframework/aa569264.aspx"><i><span
style='color:black;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although this page includes a redistributable for .NET 1.1,
it is recommended that end users install the .NET 1.1 runtime components as
part of a Windows update. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.75pt;margin-bottom:
0in;margin-left:-.25pt;line-height:141%'>For the .NET Framework 2.0, go here: <a
href="http://msdn2.microsoft.com/netframework/aa731542.aspx"><i><span
style='color:blue'>http://msdn2.microsoft.com/netframework/aa731542.aspx</span></i></a><a
href="http://msdn2.microsoft.com/netframework/aa731542.aspx"><i><span
style='color:black;text-decoration:none'> </span></i></a>For the .NET Framework
3.0, go here: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://msdn2.microsoft.com/windowsvista/aa904955.aspx"><i><span
style='color:blue'>http://msdn2.microsoft.com/windowsvista/aa904955.aspx</span></i></a><a
href="http://msdn2.microsoft.com/windowsvista/aa904955.aspx"><i><span
style='color:black;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The SDK is referred to on this page as the &#8213;Windows
SDK.&#8214; As of this writing, .NET version 3.0 is fairly recent, but it is
likely to become the &#8213;standard&#8214; version of .NET because it is built
into Microsoft Windows Vista. However, you may want to target a lesser version
of .NET if you know that its supported by an existing user base. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The most recent version of Microsoft Visual Studio is
Visual Studio 2005, which incorporates the .NET Framework 2.0 SDK. The next
version of Visual Studio will incorporate the .NET Framework 3.0 SDK.
Meanwhile, if you want to do .NET 3.0 programming with Visual Studio, youll
need to install the 3.0 SDK along with Visual Studio 2005. If you need to
program for a specific subsystem of .NET 3.0 (such as the Windows Presentation
Foundation or the Windows Communication Foundation or the Windows Workflow Foundation)
you can install extensions to Visual Studio 2005. These are available as links
from the .NET Framework 3.0 page. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Microsoft also makes available a free Visual C# 2005
Express Edition that you can download here: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://msdn.microsoft.com/vstudio/express/visualcsharp"><i><span
style='color:blue'>http://msdn.microsoft.com/vstudio/express/visualcsharp</span></i></a><a
href="http://msdn.microsoft.com/vstudio/express/visualcsharp"><i><span
style='color:black;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>This package installs the .NET 2.0 runtime and a good chunk
of the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>SDK. (You can install the 2.0 SDK in addition to the Visual
C# Express Edition.) The installation asks if you want to install MSDN, which
stands for Microsoft Developer Network and refers to documentation that
includes the .NET class libraries. Youll very likely want to install this
documentation. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Strictly speaking, you dont need either Visual Studio or
Visual C# to program for .NET. The .NET Framework SDK comes with a commandline
version of the C# compiler, and you can use that. However, Visual Studio and
Visual C# simplify several aspects of .NET programming. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Besides the compiler itself, perhaps the most important
part of the SDK is the documentation of the .NET class libraries. When you
install one of the SDKs, the SDK itself appears on the Windows start menu, and
a Documentation item appears within that group. (If youve only installed
Visual C# 2005 Express Edition, you can bring up the documentation by selecting
Contents from the Help menu of Visual C#.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The .NET documentation is displayed by the Document
Explorer application. On the left side of the Document Explorer window is a
pane that you can switch between Content and Index views with a tab at the
bottom. The pane on the right side shows information on the selected item. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:11.45pt;
margin-left:-.25pt'>Select the Content tab. I want you to find the
documentation of the .NET class libraries. If youve installed the .NET 1.1
SDK, youre looking for the Class Library heading in the following hierarchy: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.6pt;
margin-left:36.5pt'>.NET Framework SDK </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in'><span style='font-size:11.0pt;line-height:
103%;font-family:"Calibri",sans-serif'>                </span>          Reference
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.6pt;
margin-left:0in;text-indent:0in'><span style='font-size:11.0pt;line-height:
103%;font-family:"Calibri",sans-serif'>                </span>                    Class
Library </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:11.3pt;
margin-left:-.25pt'>With a later SDK, the hierarchy is a bit shorter: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:231.4pt;margin-bottom:
11.55pt;margin-left:36.5pt'>.NET Framework SDK    Class Library </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Or: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:181.5pt;margin-bottom:
11.55pt;margin-left:36.5pt'>.NET Framework Development          Class Library </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When you find it, youll know it by the large list of
entries. Many of the early entries begin with the word <i>Microsoft</i>. The
later entries begin with the word <i>System</i>. What youre seeing here is the
basic class documentation of the .NET Framework, and youll be spending lots of
time with it. You can also access the .NET Framework documentation online at
this page: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://msdn2.microsoft.com/library/aa388745.aspx"><i><span
style='color:blue'>http://msdn2.microsoft.com/library/aa388745.aspx</span></i></a><a
href="http://msdn2.microsoft.com/library/aa388745.aspx"><i><span
style='color:black;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The top-level entries in this long list that begin with the
words <i>Microsoft</i> or <i>System</i> are known as <i>namespaces</i>. The
namespaces serve to separate the .NET Framework into functional groups. For
example, <i>System.Windows.Forms</i> is the basic namespace for Windows Forms.
Namespaces also help avoid problems resulting from duplicate class names. The
.NET Framework can have different classes with the same names. If these classes
are in different namespaces, theres no name clash. There are three classes
named <i>Timer</i>, for example, all in different namespaces. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Some of these namespaces will become an intimate part of
your life; others youll probably never get to know. As the popular tee-shirt
says, &#8213;So many .NET namespaces so little time.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The most important namespace is <i>System</i>, and thats
the namespace Ill be referring to most in this book. A few other namespaces
are often useful, even in traditional character-mode programs. The <i>System.Globalization</i>
namespace contains classes that help you tailor your programs to an
international market. The <i>System.Collections</i> and <i>System.Collections.Generic</i>
contain classes that help you store information in familiar collections such as
queues, stacks, and dictionaries. The <i>System.IO</i> namespace contains essential
classes for working with files and streams, and <i>System.Xml</i> supplements
those classes for working with XML.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you open one of these namespaces in the documentation,
youll see a number of <i>types</i> defined in the namespace. Most of these
types are classes. Some are structures. Others are interfaces, enumerations,
and delegates. Youll learn more about these five types in the pages ahead. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Open up a class or structure, and youll see <i>members</i>
of that type. These members can include constructors, fields, methods,
properties, and events, which youll also learn more about in the pages ahead. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Whenever youre doing .NET programming (or whenever youre
reading this book or any other .NET programming book) youll probably want to
have the .NET documentation open and ready for browsing.  </p>

</div>

<span style='font-size:12.0pt;line-height:103%;font-family:"Bookman Old Style",serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection2>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To quickly find a particular item in the class
documentation, click the Index tab in the left pane. In the Look For field,
enter what youre looking for: &#8213;Timer class,&#8214; for example. Select
&#8213;about Timer class&#8214; in the list. Over at the right on the bottom,
youll see the three <i>Timer</i> classes with their namespaces in parentheses.
Select the one you want, and the first page of the class documentation will
appear. You can then click the Sync With Table Of Contents button on the
toolbar to get back to the Contents view and continue exploring the particular
class. (In the .NET Framework 1.1 SDK, it works a little differently. There is
no separate pane for index results; the three <i>Timer</i> classes are listed
separately in the index.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Besides providing all the class documentation of the .NET
Framework, another important role of the .NET Framework documentation is the
teaching of humility. You will never, ever, come close to any type of
familiarity with the entire .NET class library. (But you can always try.) </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:3.9pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369918">Chapter 4. Edit, Compile, Run, Disassemble </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.25pt;
margin-left:-.25pt'>A file containing C# code generally has the filename
extension .cs for &#8213;C Sharp.&#8214; Heres a simple example (the boldfaced
filename at the top is not part of the program): </p>

<h2 style='margin-top:0in;margin-right:14.35pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>FirstProgram.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//---------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// FirstProgram.cs (c) 2006 by Charles
Petzold </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//---------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>class FirstProgram </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public static void Main()  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    {  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        System.Console.WriteLine(&quot;Hello,
Microsoft .NET Framework!&quot;);  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.65pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Lets first try to create, compile, and run this program,
and then Ill discuss its structure and contents. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although youll probably eventually use Microsoft Visual
Studio to develop .NET programs, thats not your only option. You can actually
edit, compile, and run .NET programs from the MS-DOS command line. In many
respects, compiling a C# program on the command line is quite similar to the
way you might have compiled a C program on the command line two decades ago. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Compiling .NET programs on the MS-DOS command line might
seem like an odd and eccentric practice in modern graphical environments like
Windows, but I think its important for the beginning .NET programmer to try it
just once. At the very least, youll be disabused of the notion that you need
the powerful resources of Visual Studio to compile every .NET program youll
ever write. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>(Some information in this chapter does not apply to the
.NET 1.1 SDK. If thats what youre using, youll want to select the Tools item
in the Microsoft .NET Framework SDK v1.1 entry in the Windows start menu for
information about the command line, the IL disassembler, and the IL assembler.)
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Both Visual Studio 2005 and the .NET 2.0 and 3.0 SDKs
create entries in the Windows start menu for running command-line windows. This
is what you should use. Its harder to use the regular Windows Command Prompt
window for compilations because it doesnt have the proper environment
variables set so that MS-DOS can locate the C# compiler. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.7pt;margin-bottom:7.8pt;
margin-left:-.25pt'>If you run one of these command-line windows, you can then
navigate to a particular directory where you want to store your programs. On
the command line, type <span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>notepad </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>and Windows Notepad will run. Or, you can type a filename
as an argument to Windows Notepad like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>notepad firstprogram.cs </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Then Notepad will ask you if you want to create that file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In Notepad, type in the program shown above. C# is a
case-sensitive language. Make sure that you type the words <i>class</i>, <i>public</i>,
<i>static</i>, and <i>void</i> entirely in lowercase. Make sure you type the
words <i>Main</i>, <i>System</i>, and <i>Console</i>, with an initial capital
but the rest in lower-case. Make sure that <i>WriteLine</i> has an initial
capital and an embedded capital. You can type <i>FirstProgram</i> whatever way
you want (or you can use a different name), but dont embed a blank in the name
and dont begin the name with a number. You dont need to include the lines
that begin with double slashes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Save the file from Notepad with the name firstprogram.cs,
or something else if you prefer. (You dont need to exit Notepad at this point,
but you do need to save the file.) Then, on the command-line, run the C#
compiler, which is a program named csc.exe: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>csc firstprogram.cs </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The C# compiler reads your source code and (if all is well)
emits a file named firstprogram.exe, which you can run like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>firstprogram </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The program displays a text greeting and then terminates. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.6pt;margin-bottom:7.7pt;
margin-left:-.25pt'>I mentioned in the second chapter that a .NET executable
actually contains Common Intermediate Language (CIL) code. The .NET SDK
includes a tool called the IL Disassembler (ildasm.exe) that disassembles a
.NET executable and shows you the CIL statements. From the Windows start menu,
find the SDK group, and then a tool named IL Disassembler. Run it. Or, just
enter <span style='font-size:10.0pt;line-height:103%;font-family:Consolas'>ildasm
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>on the command line. From the File Open dialog box,
navigate to the directory youve been using, and load FirstProgram.exe. Open
the <i>FirstProgram</i> class and double-click <i>Main</i>. Thats your program
in CIL. The <i>ldstr</i> command loads a text string on the stack, and then a <i>call</i>
command calls <i>System.Console.WriteLine</i> (but with a syntax more
reminiscent of C++) to display the string. When you run the program, the .NET
Common Language Runtime (CLR) compiles the CIL into machine code appropriate
for your particular processor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If learning CIL appeals to you, you can discover more about
it here: </p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:15.55pt;
margin-bottom:0in;margin-left:0in;text-align:center;text-indent:0in;line-height:
107%'><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue'>http://www.ecma</span></i></a><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue'>-</span></i></a><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue'>international.org/publications/standards</span></i></a><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:108.5pt;line-height:107%'><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue'>/Ecma</span></i></a><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue'>-</span></i></a><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:blue'>335.htm</span></i></a><a
href="http://www.ecma-international.org/publications/standards/Ecma-335.htm"><i><span
style='color:black;text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The .NET SDK includes an assembler program for CIL named
ilasm.exe. Programs written directly in CIL are just as managed and just as
portable as programs written in C#. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, most .NET programmers dont know any CIL at all,
and even fewer know enough CIL to be able to actually code in it. However, it
is sometimes instructive and revealing to examine the CIL that the C# compiler
emits, and in this book Ill occasionally call your attention to it. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now lets jump from command-line programming to the
opposite extreme by running Visual Studio 2005 or Visual C# 2005 Express
Edition. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>From the menu select File, then New and Project. In Visual
Studio, first select Visual C# and Windows at the left. In either edition,
select Empty Project on the right. Give the project a name (FirstProgram, lets
say). In Visual Studio, youll need to select a directory location for the
project and uncheck the Create Directory For Solution checkbox. In Visual C#
Express Edition, you select the directory when you save the project. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the Solution Explorer on the right, right-click the
FirstProgram project and select Add and New Item. (Or, select Add New Item from
the Project menu.) Select Code File and give the file a name of
FirstProgram.cs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now type in the program shown above. As you type, youll
see that Visual Studio trys to anticipate what you need. When you type <i>System</i>
and a period, for example, it will give you a list of types in that namespace,
and when you type <i>Console</i> and a period, youll get a list of members of
the <i>Console</i> class. This is Visual Studios Intellisense, and you might
come to find it addictive, and then hate yourself from relying on it so much.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can compile and run the program by selecting Start
Without Debugging from the Debug menu or by pressing Ctrl-F5. The program will
compile and run in a command-line window. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What youve done here is to create a Visual Studio <i>project</i>
named FirstProgram, which occupies the FirstProgram directory. A project
generally creates a single executable file or a single dynamic link library.
(In Visual Studio, multiple related projects can also be bundled into <i>solutions</i>.)
A project can contain one or more C# source code files. In the simplest case, a
project contains one C# file, and for convenience the C# file is generally
given the same name as the project but with a .cs extension. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Back on the command line or in Windows Explorer, you can
see that Visual Studio has created a project file in the FirstProgram directory
named FirstProgram.csproj. This is an XML file that references the .cs file and
contains all the other information Visual Studio needs to maintain the project
and compile it. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>During compilation, Visual Studio has also created some
intermediate files in a subdirectory of FirstProgram named <i>obj</i>. The
executable file is found in <i>bin</i> in a subdirectory named either <i>Release</i>
or <i>Debug</i> depending on the configuration youve chosen in Visual Studio. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If youre running .NET 3.0, go back to the command line.
Make sure the FirstProgram.csproj file is in the current directory and run: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>msbuild firstprogram.csproj </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The MSBuild program will compile the project and (by
default) deposit the executable file in the <i>bin\Debug</i> directory. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The MSBuild program became necessary in .NET 3.0 partially
because Windows Presentation Foundation programs can be built from both C#
files and XAML (Extensible Application Markup Language) files. The MSBuild
program invokes the C# compiler and other tools to assemble an entire
executable. You can write your own .csproj project files, if you want. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Between the extremes of the command prompt and Visual
Studio are other .NET programming tools, such as my own KeyOfCSharp.exe, which
you can download here: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://www.charlespetzold.com/keycs"><i><span style='color:blue'>http://www.charlespetzold.com/keycs</span></i></a><a
href="http://www.charlespetzold.com/keycs"><i><span style='color:black;
text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you want to run the sample programs shown in this book
without typing them in, you can download all the source code from the same page
where you found this book: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a
href="http://www.charlespetzold.com/dotnet"><i><span style='color:blue'>http://www.charlespetzold.com/dotnet</span></i></a><a
href="http://www.charlespetzold.com/dotnet"><i><span style='color:black;
text-decoration:none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, youll better accustom your brain and fingers to
C# code by typing in the code yourself.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Lets look at the program listing again: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:145.25pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:145.25pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>FirstProgram.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//---------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//
  FirstProgram.cs (c) 2006 by Charles Petzold </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//---------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:328.65pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'> class FirstProgram </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main()  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    {  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  System.Console.WriteLine(&quot;Hello, Microsoft .NET Framework!&quot;);  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At the top are a few single-line comments beginning with
the familiar double slashes. C# also supports multi-line or partial-line
comments delimited by /* and */. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>All code in a C# program must be in either a class or a
structure. This particular program defines a class (denoted by the keyword <i>class</i>)
named <i>FirstProgram</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class FirstProgram </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // contents of the class </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>Curly brackets delimit the contents of the class. You can
change that class to a structure using the keyword <i>struct</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>struct FirstProgram </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>   // contents of the structure </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The program will compile and run the same. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>It is common to define the class or structure with the <i>public</i>
keyword: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public class FirstProgram </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // contents of the class </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, using the <i>public</i> keyword with a class is
not generally required in program code. (There are some cases where it is
required.) The <i>public</i> keyword applied to a class is generally found much
more in code that contributes to dynamic link libraries. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When creating this project in Visual Studio, Ive used a
project name that is the same as the C# file name, which is the same as the
name of the class defined in that file. None of these name matches is required.
In fact, a C# file can contain multiple class definitions, none of which match
the file name. A class can also be split between multiple files, none of whose
names need match the class name. None of these names need to be the same as the
project name. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Just to avoid confusion, I generally like to restrict my C#
source code files to just a single class and structure, and to use a file name
that matches the class or structure name. (But I sometimes break this rule in
this book.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the <i>FirstProgram</i> class (or structure) is a single
method named <i>Main</i>. The entry point to a C# program is always a method
named <i>Main</i>, and it must have an initial capital. C# is a case-sensitive
language. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Main</i> method is defined with the <i>public</i>
and <i>static</i> keywords: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // contents of the method </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>public</i> keyword indicates that the method is
visible from outside the class in which it is defined. The <i>public</i>
keyword is not actually required for the <i>Main</i> method, and the program
will compile and run fine without it. Sometimes I use <i>public</i> with <i>Main</i>
and sometimes not. Its a mystery. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>static</i> keyword means that this method is
associated with the class itself rather than an instance of that class. A class
is basically an ice cream dispenser, and instances of the class are sundaes.
Unfortunately, this simple program isnt making any sundaes. There is no <i>instance</i>
keyword, however, because <i>static</i> methods are generally the exception
rather than the rule. The world has many more sundaes than ice cream
dispensers, and generally sundaes are more interesting.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This particular <i>Main</i> method has no parameters 
indicated by the empty parentheses following <i>Main</i>and doesnt return
anything to the caller, indicated by the keyword <i>void</i>. (You can also
define <i>Main</i> to have a parameter that is an array of text strings, which
are set to the commandline arguments of the program. <i>Main</i> can also
return an integer as a termination code. See the <i>C# Language Specification</i>,
§3.1 for details.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The body of a method is delimited by curly brackets. The
entire body of this <i>Main</i> method is the statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.Console.WriteLine(&quot;Hello, Microsoft .NET
Framework!&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As in C and C++, statements in C# are terminated by
semicolons. This statement is a method call. The argument is a string literal
enclosed in double-quotation marks. String literals in C# are restricted to a
single line. In other words, the two quotation marks delimiting the string must
appear on the same line. (If you need to break up a long string on multiple
lines, you can concatenate multiple string literals using the plus operator, as
Ill demonstrate in the next chapter.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Although string literals must appear on one line, C# can
otherwise be freely formatted. This is allowed: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:289.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class      FirstProgram                 {
public               static       void                  Main </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        ( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                       ) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>  System </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                   . </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>         Console </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>      . </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>          WriteLine </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                   ( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>  &quot;Hello, Microsoft .NET Framework!&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>              ) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>               ; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:297.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:139%'><span
style='font-size:10.0pt;line-height:139%;font-family:Consolas'>              } </span>So
is this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class FirstProgram{public static void Main( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:28.95pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>){System.Console.WriteLine(&quot;Hello,
Microsoft .NET Framework!&quot;);}} </span>If you code like this, however,
nobody will be your friend. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.85pt;
margin-left:-.25pt'>FirstProgram doesnt do much except make a call to a method
named <i>System.Console.WriteLine</i>. Thats a fully-qualified method name.
Like romance novelists, methods in the .NET Framework generally have three
names: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:90.65pt;margin-bottom:
.15pt;margin-left:.5in;text-indent:-.25in;line-height:162%'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><i>System</i> is a namespace. <span style='font-family:"Courier New"'>o</span><span
style='font-family:"Arial",sans-serif'> </span><i>Console</i> is a class in
that namespace. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:90.65pt;margin-bottom:
5.5pt;margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>WriteLine</i>
is a method in that class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In the .NET class documentation youll find that the <i>Console</i>
class actually has many methods named <i>WriteLine</i>. These various versions
of the <i>WriteLine</i> method are known as <i>overloads</i>. The one Im using
in this particular program is defined like so (eliminating line breaks provided
in the documentation): </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static void WriteLine(string value) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Theres that keyword <i>static</i> again, and what it means
here is that <i>WriteLine</i> is a method associated with the <i>Console</i>
class rather than an instance of the <i>Console</i> class. The <i>static</i>
keyword means the method must be referenced by prefacing it with the name of
the class in which its defined, separated by a period. The class is prefaced
with the namespace in which the class is defined, also separated with a period.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:6.85pt;
margin-left:-.25pt'>Where is the code for <i>System.Console.WriteLine</i>.
which is the code that actually puts the text on the console? If you look at
the first page of the documentation for the <i>Console</i> class, youll see
near the top the following: </p>

<p class=MsoNormal style='margin-left:-.75pt;text-indent:0in'>          <b>Assembly:</b>
mscorlib (in mscorlib.dll) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This indicates that the code for the <i>Console</i> class
is located in an assembly named mscorlib. An assembly can consist of multiple
files, but in this case its only one file, which is the dynamic link library
mscorlib.dll. The mscorlib.dll file is very important in .NET. The file name at
one time stood for &#8213;Microsoft Common Object Runtime Library&#8214; but
now it stands for &#8213;Multilanguage Standard Common Object Runtime
Library.&#8214; This is the main DLL for class libraries in .NET, and it
contains all the basic .NET classes and structures.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you know, when you compile a C or C++ program, you
generally need an <i>#include</i> directive at the top that references a header
file. The include file provides function prototypes to the compiler.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The C# compiler does not need header files. During
compilation, the C# compiler access the mscorlib.dll file directly and obtains
information from metadata in that file concerning all the classes and other
types defined therein. The C# compiler is able to establish that mscorlib.dll
does indeed contain a class named <i>Console</i> in a namespace named <i>System</i>
with a method named <i>WriteLine</i> that accepts a single argument of type <i>string</i>.
The C# compiler can determine that the <i>WriteLine</i> call is valid, and the
compiler establishes a reference to the mscorlib assembly in the executable. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Intellisense also works by referencing mscorlib.dll and
getting information from the DLL about the namespaces, types, and members. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you probably know, compiling a C or C++ program is just
the first step in creating an executable. You must then (either explicitly or
implicitly) run a linker that accesses library files. Traditionally, code in
the standard runtime libraries is inserted right into the executable. For code
in DLLs, only references are inserted. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The C# compiler doesnt require library files. Because the
compiler is already accessing the actual DLL, it can insert references to that
DLL into the executable. At the time the program is run, the CLR links the
program with the actual method call in mscorlib.dll. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Many of the basic classes and structures are included in
mscorlib.dll. As you go beyond the command line, youll start encountering
classes that are stored in other DLLs. For example, classes in the <i>System.Windows.Forms</i>
namespace are stored in the assembly system.windows.forms, which is the DLL
system.windows.forms.dll. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The C# compiler will access mscorlib.dll by default, but
for other DLLs, youll need to tell the compiler the assembly in which the
classes are located. These are known as <i>references</i>. In Visual Studio,
right click References under the project name in the Solution Explorer, and
select Add Reference. Or, select Add Reference from the Project menu. (For the
command line compiler, you specify references with the /r compiler switch.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>It may seem like a big bother to type <i>System.Console.WriteLine</i>
just to display a line of text, and thats why the C# language supports a
directive that reduces your typing a bit. This program is functionally
equivalent to the program shown earlier: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:157.0pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:157.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SecondProgram.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// SecondProgram.cs (c) 2006 by
  Charles Petzold //---------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  SecondProgram </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Hello, Microsoft .NET Framework!&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Console.WriteLine</i> call is no longer prceded with
the <i>System</i> namespace. This is made possible by the line near the top
that begins with the keyword <i>using</i>. This line is called a <i>directive</i>
because its not, strictly speaking, a statement. It must appear before any
type definition in the file, such as a class. The <i>using</i> directive
basically tells the C# compiler that if it cant find a static method named <i>Console.WriteLine</i>,
it should try appending <i>System</i> to the front to make <i>System.Console.WriteLine</i>
and try looking for that. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, the <i>using</i> directive hasnt exactly
reduced the size of the program, but if you had very many <i>WriteLine</i>
calls, it certainly would. All the sample programs from now on will have a <i>using</i>
directive for the <i>System</i> namespace and occasionally other namespaces as
well. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>using</i> directive is not like a header file, and
its not like a library file. It doesnt reference a file. The <i>using</i>
directive only indicates a namespace, and having <i>using</i> directives is
never required in a C# program. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>A slightly different form of the <i>using</i> directive
defines an alias that lets you decrease your repetitive typing even more. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:156.85pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:156.85pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>ThirdProgram.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.85pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//---------------------------------------------
  // ThirdProgram.cs (c) 2006 by Charles Petzold
  //--------------------------------------------- using C = System.Console; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  ThirdProgram </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  C.WriteLine(&quot;Hello, Microsoft .NET Framework!&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now any reference to the <i>System.Console</i> class can be
shortened to just a capital <i>C</i>. Thats about as succinct as youre going
to get here. (The next step would involve defining your own short-named method
that then calls <i>WriteLine</i>.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I need to warn you how limited the alias facility is: The <i>using</i>
directive does <i>not</i> perform a substitution of <i>System.Console</i> for
any and all occurrences of a capital C in your code. In the <i>using</i>
directive, the right side of the equals sign must be a namespace or type, and
this particular example only comes into play if the compiler cannot find a
class named <i>C</i> with a method named <i>WriteLine</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Also keep in mind that C# culture does not encourage the
use of techniques like this to make your code look more obscure than it should
be. The use of this form of the <i>using</i> statement is primarily for a
situation where you need to reference classes with the same name from two
different namespaces. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For example, suppose you purchase two helpful class
libraries in the form of DLLs from Bovary Enterprises and Karenina Software.
Both these libraries contain a class named <i>SuperString</i> that is
implemented entirely differently in each DLL but is useful to you in both
versions. Using both <i>SuperString</i> clases is not a problem because both
companies defined unique namespace names for their classes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The people at Bovary put their <i>SuperString</i> class in
a namespace named <i>BovaryEnterprises.VeryUsefulLibrary</i>. Yes, the
namespace contains an embedded period, and its in accordance with accepted
practices. The company name goes first, followed by a product name. The code
developed at Bovary looked something like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>namespace BoveryEnterprises.VeryUsefulLibrary </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public class SuperString </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.35pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The clever programmers at Karenina also used the accepted
naming convention and put their <i>SuperString</i> class in the namespace <i>KareninaSoftware.HandyDandyLibrary</i>. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>So, when using both these DLLs in your own program, you can
reference either <i>SuperString</i> class simply by using the fully-qualified
name, which is either </p>

<p class=MsoNormal style='margin-top:0in;margin-right:120.2pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>BovaryEnterprises.VeryUsefulLibrary.SuperString
</span>or: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>KareninaSoftware.HandyDandyLibrary.SuperString </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>And heres where the alias form of the <i>using</i>
directive comes into play. To simplify your typing, you can include the
following two <i>using</i> directives in your program: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:97.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>using Emma = BovaryEnterprises.VeryUsefulLibrary; using
Anna = KareninaSoftware.HandyDandyLibrary; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Now you can refer to the two classes as </p>

<p class=MsoNormal style='margin-top:0in;margin-right:280.3pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Emma.SuperString </span>and: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Anna.SuperString </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you are writing code for a DLL, and particularly if you
intend to make this DLL available to others, you should put everything in a
namespace that identifies your company and product. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can also use namespace definitions in your non-DLL
program code, but here its not so vital. For the first couple of .NET
programming books I wrote, I didnt use namespaces at all in my programs. In my
recent book on the Windows Presentation Foundation, I used namespaces in my
program code that consisted of my name followed by the project name. I did this
for two reasons. Most importantly, when integrating C# code with XAML, it helps
for the program code to be in a namespace. Also, when one project references
code from another project (as I do in my WPF book), the namespace helps
identify where the referenced code comes from. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following program shows how you can put your own
program code inside a namespace definition. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:192.0pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:192.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>FourthProgram.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:147.35pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------------
  // FourthProgram.cs (c) 2006 by Charles Petzold
  //---------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>namespace
  Petzold.FourthProgram </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    class
  FourthProgram </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            Console.WriteLine(&quot;Hello,
  Microsoft .NET Framework!&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, in this little book, thats the last youll see of
a namespace definition. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:4.0pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369919">Chapter 5. Strings and the Console </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In the previous chapter, the argument passed to the <i>Console.WriteLine</i>
method looked like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>&quot;Hello, Microsoft .NET Framework&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>That is known as a string literal. It consists of a bunch
of characters delimited by double quotation marks. The characters are Unicode,
which means that each character is represented by a 16-bit number. (More
information about Unicode can be found at <a href="http://www.unicode.org/"><i><span
style='color:blue'>www.unicode.org</span></i></a><a
href="http://www.unicode.org/"><span style='color:black;text-decoration:none'>.</span></a>)
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>As in C and C++, the backslash character is interpreted as
an escape character, and the character that follows is treated specially. This
allows the embedding of characters in a character string that would otherwise
not be possible. The following table shows the supported escape sequences with
their Unicode equivalents in hexadecimal. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=591
 style='width:442.9pt;margin-left:-5.4pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Escape
  Sequence </b></p>
  </td>
  <td width=197 valign=top style='width:2.05in;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Result
  </b></p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Unicode
  Encoding </b></p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\0 </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Null </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x0000
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\a </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Alert
  (beep) </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x0007
  </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\b </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Backspace
  </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x0008
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\t </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Horizontal
  tab </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x0009
  </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\n </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>New
  line </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x000A
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\v </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Vertical
  tab (printing) </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x000B
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\f </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Form
  feed (printing) </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x000C
  </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\r </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Carriage
  return </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x000D
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\&quot;
  </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Double
  quote </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x0022
  </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\' </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Single
  quote </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x0027
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\\ </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Backslash
  </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0x005C
  </p>
  </td>
 </tr>
 <tr style='height:37.7pt'>
  <td width=197 valign=top style='width:147.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 5.75pt 0in 5.4pt;height:37.7pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.75pt;
  margin-left:0in;text-indent:0in;line-height:107%'>\uABCD </p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>\xABCD
  </p>
  </td>
  <td width=197 valign=top style='width:2.05in;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:37.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Unicode
  character </p>
  </td>
  <td width=197 valign=top style='width:147.65pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 5.75pt 0in 5.4pt;height:37.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0xABCD
  </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Ive never found it necessary to precede a single quote
mark with a backslash in a string. (Youll need to do so when defining a
character literal because character literals are delimited by single quote
marks.) The last entry in the table indicates how you can embed arbitrary
Unicode characters in a character string. The ABCD characters stand for any
4digit hexadecimal number. For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>&quot;Hello, Microsoft\x00AE .NET Framework&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now the word &#8213;Microsoft&#8214; is followed by a ®
symbol to make the lawyers happy. However, the console doesnt support
non-ASCII characters very well, so if you actually make this change in the
program from the last chapter, it will probably show up simply as a lower-case
&#8215;r.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>If you really, really, really want to see your program
display an ® symbol, you can abandon the console and write a small Windows
Forms program. Windows Forms is a Windows client platform supported under all
versions of .NET. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:156.85pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:156.85pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>TextWithUnicodeChar.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.35pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------------------
  // TextWithUnicodeChar.cs (c) 2006 by Charles Petzold
  //---------------------------------------------------- using
  System.Windows.Forms; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  TextWithUnicodeChar </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        MessageBox.Show(&quot;Hello,
  Microsoft\x00AE .NET Framework&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'><i>Show</i> is a static method in the <i>MessageBox</i>
class, which is in the <i>System.Windows.Forms</i> namespace. Without the <i>using</i>
directive, youd have to call this method with the horrific fully-qualified
name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.Windows.Forms.MessageBox.Show( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>            &quot;Hello, Microsoft\x00AE .NET Framework&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The Windows Forms classes are in the System.Windows.Forms
assembly, which is the System.Windows.Forms.dll file. To compile this program
you need a reference to that assembly. In Visual Studio in the Solution
Explorer, right click References and then Add Reference. (Or select Add
Reference from the Project menu.) In the Add Reference dialog box, select the
.NET tab and the System.Windows.Forms assembly. When compiling on the command
line, use the /r switch to specify other assemblies. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>MessageBox.Show</i> method displays a Windows
message box with an OK button. When you click the OK button, the message box
disappears from the screen, <i>MessageBox.Show</i> returns, and the program
terminates. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although the Windows Forms program correctly displays the ®
symbol, keep in mind that not every font supports every Unicode character.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can also use Unicode escape sequences in variable
names. See the <i>C# Language Specification</i>, §2.4.1 for details.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In some cases you might want to encode a string literal
with several backslashes. This is common with directory paths: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>&quot;\\Documents and Settings\\Charles\\Favorites&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can alternatively use a type of string literal known as
the <i>verbatim</i> string literal. You preface the first double quote with an
@ sign: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>@&quot;\Documents and Settings\Charles\Favorites&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The backslash ceases to be an escape character so you only
need one backslash for each separator. None of the normal escape sequences are
allowed. If you need to embed a double quote in the string, use two double
quotes in a row. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>@&quot;The symbol \ is called a
&quot;&quot;backslash&quot;&quot;&quot; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Verbatim strings can begin on one line and continue to the
next, although the resultant string will have embedded carriage return and line
feed characters. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Unlike C and C++, C# supports a <i>string</i> data type for
storing strings. Within a method such as <i>Main</i> you can declare a variable
of type <i>string</i> using a declaration statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>All variables must be declared before they are used.
Variable names generally begin with letters or an underscore, and can also
contain numbers, but the rules for what Unicode characters are allowed in a
variable name are quite complex. (See the<i> C# Language Specification</i>,
§2.4.2.) Certainly the variable name doesnt have to begin with the letters <i>str</i>,
but I like to do that because it reminds me that this is a <i>string</i>
variable. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can optionally initialize that string when you declare
it: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str = &quot;This is an initialized string&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Or you can set the value of the string after its declared
with an assignment statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>str = &quot;This is an assigned string&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Theres no difference between initializing a string in a
declaration statement and assigning it immediately after the declaration
statement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can declare multiple string variables in a single
declaration statement by separating them with commas: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str1, str2, str3; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can initialize all or some of these variables: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str1, str2 = &quot;initialized&quot;, str3; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Until a string variable is assigned a value, it is
considered to be uninitialized, and the C# compiler will not allow that
variable to be used. Heres an illegal sequence of statements: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(str); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt;line-height:141%'>The C# will complain about the &#8213;Use
of unassigned local variable &#8215;str.&#8214; You can set a <i>string</i>
variable to an empty string: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str = &quot;&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or you can set the <i>string</i> variable to the C# keyword
<i>null</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string str = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In either case, the variable is now considered to be
initialized, but in two distinctly different ways. In the first case, the <i>str</i>
variable refers to a string that happens to have no characters. In the second
case, the <i>str</i> variable is considered to have a <i>null</i> reference,
which means that it doesnt refer to anything. In either case, <i>Console.WriteLine</i>
will just display nothing for that string. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Heres a complete program that uses an initialized string
in <i>Main</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        string strDisplay = &quot;Hello, Microsoft .NET
Framework&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>string</i> variable must be declared and set before
its used. This code is no good: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        string strDisplay = &quot;Hello, Microsoft .NET
Framework&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Youll get an compiler error message saying &#8213;The name
&#8215;strDisplay does not exist in the current context.&#8214; This code is
no good either: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        string strDisplay; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:92.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        System.Console.WriteLine(strDisplay);        
strDisplay = &quot;Hello, Microsoft .NET Framework&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The variable is declared but its uninitialized at the time
<i>WriteLine</i> is called. The compiler error message is &#8213;Use of
unassigned local variable &#8215;strDisplay.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>strDisplay</i> variable is known as a <i>local</i>
variable because it is declared within a method (in this case <i>Main</i>), and
the variable is only visible within that method. You can also declare a
variable outside of <i>Main</i> but within the class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static string strDisplay = &quot;Hello, Microsoft .NET
Framework&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>strDisplay</i> variable is now known as a <i>field</i>,
and it is potentially accessible to any method within the <i>Program</i> class.
Both <i>strDisplay</i> and <i>Main</i> are considered members of the class.
Notice that <i>strDisplay</i> is declared as <i>static</i>, meaning it is part
of the class itself rather than an instance of the class. The program could
refer to <i>strDisplay</i> by prefacing it with the class name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.Console.WriteLine(Program.strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>It doesnt matter where inside the class the <i>strDisplay</i>
field is declared. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>This will work fine as well: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:366.95pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:31.5pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    static string strDisplay = &quot;Hello, Microsoft
.NET Framework&quot;; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.55pt;margin-bottom:
3.15pt;margin-left:-.25pt'>This might look a little strange because in the
context of the whole class <i>strDisplay</i> is declared after its used, but
that rule only applies to local variables. Both <i>Main</i> and <i>strDisplay</i>
are members of the class, and the ordering of members usually doesnt matter.
(However, if one field is set from the value of another field, then the
ordering <i>does</i> matter.) You can also declare a field but set its value in
a method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        strDisplay = &quot;Hello, Microsoft .NET Framework&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:240.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }      static string strDisplay; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you leave out the assignment statement in <i>Main</i>,
the program will still compile and run fine, but nothing will be displayed. If
theyre not explicitly initialized, fields are always implicitly initialized to
zero values. A <i>string</i> field (and other reference types) is initialized
to <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>But you cant have assignment statements outside of
methods. This code doesnt compile at all: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static string strDisplay; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    strDisplay = &quot;Hello, Microsoft .NET Framework&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The compiler error message is &#8213;Invalid token
&#8215;= in class, struct, or interface member declaration,&#8214; meaning
that when the C# compiler was parsing the program, everything appeared OK until
it got to the equal sign. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can use the same name for fields and local variables: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static string strDisplay = &quot;This is a field&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        string strDisplay = &quot;This is a local variable&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Within <i>Main</i>, the local variable takes precedence and
the program will display &#8213;This is a local variable.&#8214; However,
because the field seems to serve no purpose in this program, the C# compiler
will emit a warning message that says &#8213;The private field
&#8215;Program.strDisplay is assigned but its value is never used.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>That warning message suggests how you can access the field
rather than the local variable: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Program </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static string strDisplay = &quot;This is a field&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        string strDisplay = &quot;This is a local variable&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        System.Console.WriteLine(Program.strDisplay); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that <i>strDisplay</i> is now prefaced with the
class name in the <i>WriteLine</i> call. The program displays &#8213;This is a
field,&#8214; But the compiler now complains with a warning message that
&#8213;The variable &#8215;strDisplay is assigned but its value is never
used.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If you look at the documentation for the <i>Console</i>
class, and particularly the <i>WriteLine</i> method, youll find lots of
different versions. The one that weve been implicitly using is the one defined
like this (in C# syntax): </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>void</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>WriteLine</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>(</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>string</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>value) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>This method displays the string passed as an argument and
then skips to the next line. The <i>void</i> keyword indicates that the method
returns nothing to the caller. Exploring the <i>Console</i> class further,
youll also find a method named <i>Write</i>, and a version of the <i>Write</i>
method defined like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>void</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>Write</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>(</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>string</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>value) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>Write</i> method displays its argument but does not
skip to the next line. Theres also a version of <i>WriteLine</i> that does
nothing <i>but</i> skip to the next line: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>void</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Void.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>WriteLine() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Theres no parameterless version of <i>Write</i> because it
wouldnt do anything at all. You can rewrite the guts of FirstProgram so it
looks like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.Write(&quot;Hello, &quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:135.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.Write(&quot;Microsoft &quot;);
Console.Write(&quot;.NET &quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:130.45pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.Write(&quot;Framework!&quot;);
Console.WriteLine(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that the first three strings end with a space so the
words are still nicely separated. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you look further in the <i>Console</i> documentation,
youll discover a method named <i>ReadLine</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>string</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>ReadLine() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.3pt;
margin-left:-.25pt'>This method has no parameter, but it returns a <i>string</i>.
This method obtains text typed by the user and then returns it to the program.
You can store this return value in a string variable and then later display it.
</p>

<h2 style='margin-top:0in;margin-right:14.35pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>GetTheUsersName.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//------------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// GetTheUsersName.cs (c) 2006 by
Charles Petzold //------------------------------------------------ using
System; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>class GetTheUsersName </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        Console.Write(&quot;Type your
name and press Enter: &quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        string strName =
Console.ReadLine(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        Console.Write(&quot;Your name is
&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        Console.WriteLine(strName); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.65pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice how the first <i>Console.Write</i> call is used to
display the prompt. No new line is displayed and the cursor sits one space from
the colon. The <i>Console.ReadLine</i> call echos typed characters to the
console but does not return until the user presses Enter, which also causes the
cursor to skip to the next line. The combination of <i>Console.Write</i> and <i>Console.WriteLine</i>
then prints the information in a single line. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can concatenate multiple strings using the plus
operator, which means that those two last statements could have been written
like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;Your name is &quot; + strName); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>A string literal must appear on a single line (except for
verbatim strings, which can straddle multiple lines), so the concatenation
operator is a good way to combine strings that are too long to fit comfortably
on a single line. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:238.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:238.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Limerick.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// Limerick.cs (c) 2006 by
  Charles Petzold //----------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class Limerick
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        string
  strLimerick = </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  &quot;There once was a coder named Otto\r\n&quot; + </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            &quot;Who
  had a peculiar motto:\r\n&quot; + </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  &quot;    \&quot;The goto is king,\r\n&quot; + </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  &quot;    To thee I sing!\&quot;\r\n&quot; + </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>            &quot;Maybe that's
  why he's often quite blotto.\r\n&quot;;  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(strLimerick); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the escape sequences for the embedded double quote
marks in the third and fourth lines, and also that each of the five lines is
terminated with escape sequences for a carriage return and line feed, which is
the customary way to terminate lines in MS-DOS environments and Windows.
Because the last line has a carriage return and line feed, and the entire
string is displayed with <i>Console.WriteLine</i>, a blank line will appear
after the end of the limerick. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the documentation of the <i>Console</i> class, the <i>Write</i>,
<i>WriteLine</i>, and <i>ReadLine</i> methods all appear in the section labeled
&#8213;Methods.&#8214; Youll also see a section labeled
&#8213;Properties.&#8214; If you have the SDK installed for the .NET Framework
1.0 or 1.1, youll only see a few items under that heading. For versions 2.0
and above, however, youll see a lot more. Lets examine a few of these items. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Heres how the property named <i>Title</i> is documented in
C# syntax: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>string</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>Title { get; set; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Like the methods in <i>Console</i>, this property is <i>public</i>,
which means that we can access the <i>Title</i> property from outside the <i>Console</i>
class, such as one of our programs. The property is also <i>static</i>, which
means that well actually be referring to it as <i>Console.Title</i>. Each
property has a type, and the type of this <i>Title</i> property is <i>string</i>.
Within curly brackets appear the words <i>get</i> and <i>set</i>. This means
that the property can be both read (&#8213;get&#8214;) and set. When you write
your own properties (which Ill get to in Chapter 17), youll see how these
words <i>get</i> and <i>set</i> figure in the property definition. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Console.Title</i> property is
&#8213;gettable,&#8214; which means that you can obtain and store the value of
the property like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string strTitle = Console.Title; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Or, you can pass <i>Console.Title</i> to <i>WriteLine</i>
to display the value of the property: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(Console.Title); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you put this code at the top of Limerick.cs, it will
display the same title as displayed in the titlebar of the console window in
which Limerick runs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Title</i> property is also &#8213;settable,&#8214;
which means you can put the following statement in Limerick.cs: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.Title = &quot;Limerick&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This title will then appear at the top of the console
window. (However, if youre compiling and running on the command line, the
title will only be changed for the duration the program is running, which is a
very short time. You might want to put a <i>Console.ReadLine</i> call at the
bottom of the program to actually see the new title take effect.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you can see, the syntax involved in getting and setting <i>Title</i>
makes it look like a field. But its not that simple. Although properties
certainly resemble fields in use, properties are actually implemented with
code. There is actual code being executed when you obtain or set a property. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you insert statements to access and change <i>Title</i>
in the Limerick program, and then you look at the executable with the IL
Disassembler, youll see that <i>Title</i> has magically changed to the method
calls <i>get_Title</i> and <i>set_Title</i>. Although properties have the
syntax of fields, they are implemented in the <i>Console</i> class as methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Console</i> class also defines properties named <i>BackgroundColor</i>
and <i>ForegroundColor</i>. These two properties are also gettable and
settable, but the type of the properties is <i>ConsoleColor</i>. What on earth
is <i>ConsoleColor</i>? If you look a little further in the <i>System</i>
namespace documention, you will indeed see a page entitled &#8213;ConsoleColor
Enumeration.&#8214;  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'><i>ConsoleColor</i> is an enumeration, which means that it
has a collection of members that have been associated with integers. In C#,
enumerations are strongly typed, and the enumeration member has to be prefaced
with the enumeration name. Heres how you set the <i>Background</i> and <i>Foreground</i>
colors in a program: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.0pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.BackgroundColor = ConsoleColor.Yellow;
Console.ForegroundColor = ConsoleColor.Blue; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Using enumerations in C# involves a little more typing than
you may be accustomed to, but there is very little room for confusion or
blunders. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you put those <i>Background</i> and <i>Foreground</i>
statements at the top of Limerick.cs, the results wont be very attractive
because only the characters displayed by the program will be rendered with
these new colors. After setting the colors, you probably want to clear the
console screen with a call to the static method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.Clear(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The Limerick.cs file terminates every line with the
characters &#8215;\r and &#8215;\n, which denote a carriage return and line
feed. A &#8215;\n works by itself to skip to the next line, but a &#8215;\r
by itself causes the next line to overwrite the terminated line. As you might
know, the next-line character varies by the operating system platform, and if
you really want to help your programs achieve some kind of platform
independence, you might consider using instead the static property <i>Environment.NewLine</i>.
Thats the static <i>NewLine</i> property in the <i>Environment</i> class,
which is also part of the <i>System</i> namespace. This property is intended to
be appropriate for the particular environment on which the program is running. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>The <i>Environment.NewLine</i> property is documented in C#
syntax like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>string</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_String.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>NewLine { get; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The type is <i>string</i>, but the property is get only.
You cannot set the <i>Environment.NewLine</i> property. Heres how you might
use it in Limerick.cs: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>&quot;There once was a coder named Otto&quot; + Environment.NewLine +
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thats not exactly a pleasant solution if you have to
repeat it five times. Instead, you might begin by defining a local variable
just for the new-line sequence: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string NL = Environment.NewLine; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Or you might define <i>NL</i> as a field if you need it in
more than one method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Either way you can then refer to <i>NL</i> at the end of
each line: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:130.15pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>&quot;There once was a coder
named Otto&quot; + NL + </span>Much better! </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>C# also defines a <i>char</i> type for storing a single
16-bit Unicode character. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>But strictly speaking, <i>char</i> is not a numeric type as
it is in C and C++. There is no such thing as a signed <i>char</i> or an
unsigned <i>char</i>. A character literal is defined with single quotation
marks, and all the escape sequences shown earlier in this chapter are valid: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>char chBackSlash = '\\'; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>You can concatenate <i>char</i> variables with <i>string</i>
variables or literal strings: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string strDirectory = &quot;C:&quot; + chBackSlash +
&quot;Windows&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>You can also concatenate strings and integers. Heres an
example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.25pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>Console.WriteLine(&quot;Schubert
was &quot; + 31 + &quot; when he died.&quot;); </span>That will display as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Schubert was 31 when he died. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Whats going on behind the scenes here is actually a bit
more involved than you might imagine, but I dont want to give away the secret
just yet.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As in C and C++, the basic integral data type in C# is the <i>int</i>.
You can declare and initialize an <i>int</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int age = 31; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can then concatenate that variable with the string: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;Schubert was &quot; + age + &quot; when he
died.&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The result is the same as before. You might try performing
a calculation in the <i>Console.WriteLine</i> statement using the years in
which Schubert was born and died: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;Schubert was &quot; + 1828 - 1797 + &quot;
when he died.&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This will <i>not</i> work. C# (like C and C++) evaluates
additive operators like plus and minus from left to right. The first plus sign
causes the number 1828 to be concatenated to the string &#8213;Schubert was
&#8214; and the result is &#8213;Schubert was 1828&#8214;. Then theres a minus
sign, and thats a problem because we now have a string minus a number.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>A simple set of parentheses around the calculation will
help: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;Schubert was &quot; + (1828  1797) + &quot;
when he died.&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The subtraction is now performed first and the result is
concatenated with the strings. You can even start with the number, as in this
variation in Yoda syntax: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:72.45pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Console.WriteLine(31 + &quot;
when he died Schubert was.&quot;); </span>This will work as well: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(1828  1797 + &quot; when he died Schubert
was.&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As in C and C++, the standard floating-point data type in
C# is the <i>double</i>. Heres a declared and initialized <i>double</i>, and a
statement that displays the value: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>double onethird = 1 / 3.0; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;One divided by three equals &quot; +
onethird); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>As youll note, the expression thats set to the variable <i>onethird</i>
is <i>not</i> written as 1 divided by 3. Like C and C++, C# interprets numeric
literals without decimal points as integers, and integer division is performed
with truncation, so the result would be zero. Expressing one of the two numbers
as a floating-point literal causes the other to be converted to floating point
for the division. The <i>WriteLine</i> statement displays: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>One divided by three equals 0.333333333333333 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Math</i> class is the <i>System</i> namespace
contains a collection of static methods that mostly perform logarithmic and
trigonometric calculations. The <i>Math</i> class also contains two constant
fields named <i>PI</i> and <i>E</i>, which are of type <i>double</i>. Heres a
statement using <i>Math.PI</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.2pt;margin-bottom:.9pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
35.5pt;line-height:119%'><span style='font-size:10.0pt;line-height:119%;
font-family:Consolas'>Console.WriteLine(&quot;A circle's circumference divided
by its diameter is &quot;                   + Math.PI); </span>That statement
displays: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A circle's circumference divided by its diameter is 3.14159265358979 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Im sure that some programmers want to know: How does C#
store strings? Are strings terminated with zero characters as they are in C and
C++, or something else? And the answer is: Something else. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>string</i> keyword is C# is actually an alias for a
class in the <i>System</i> namespace named <i>String</i>. Notice the difference
in case: The C# keyword is <i>string</i> but the class is <i>String</i>. In any
C# program, you can replace the word <i>string</i> with <i>System.String</i>
and the program will be exactly the same: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.String str = &quot;Just a string&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>If you have a <i>using</i> directive for the <i>System</i>
namespace, you can replace <i>string</i> with <i>String</i> and use the two
forms interchangeably: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>String str = &quot;Another string&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>What you <i>cannot</i> do is refer to the <i>System.string</i>
class (notice the lowercase <i>string</i>): </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.string str = &quot;Not a workable string&quot;;    // Wont
work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because <i>string</i> is an alias for <i>System.String</i>,
that translates as <i>System.System.String</i>, which does not exist. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Similarly, the <i>char</i> data type is an alias for the
structure <i>System.Char</i>, and the <i>int</i> data type is an alias for the
structure <i>System.Int32</i>, and <i>double</i> is an alias for <i>System.Double</i>.
As Jeffrey Richter points out (<i>CLR via C#</i>, page 119), its as if every
C# program contained <i>using</i> directives like the following: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.45pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>using string = System.String; using char = System.Char;
using int = System.Int32; using double = System.Double; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And so forth. (There are more basic data types than just
these four.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The more profound repercussion is this: Any <i>string</i>
variable can also be termed &#8213;an object of type <i>String</i>&#8214; or
&#8213;an instance of the <i>String</i> class.&#8214; And the <i>String</i>
class itself provides many goodies. As you explore the documentation of the <i>String</i>
class youll discover many methods with quasifamiliar names: <i>Substring</i>, <i>LastIndexOf</i>,
<i>ToLower</i>, <i>ToUpper</i>, and many more. All these methods perform
various manipulations of strings. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>String</i> class also has two important properties.
The <i>Length</i> property is defined like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>int</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>Length { get; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This property is of type <i>int</i>, and it is get-only.
But the big difference compared with the other properties youve seen so far is
the absence of the <i>static</i> keyword. <i>Length</i> is not a static
property of the <i>String</i> class. <i>Length</i> is, instead, an <i>instance</i>
property, which means that it applies to a particular <i>string</i> variable
rather than to the <i>String</i> class. In the big scheme of things, instance
properties (and instance methods) are much more common than static properties
and static methodsso much so that properties and methods are instance by
default. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You dont preface the <i>Length</i> property with the <i>String</i>
class name. You dont use the expression <i>String.Length</i>. What could that
possibly mean? Instead, you use the <i>Length</i> property with an instance of
the <i>String</i> classwhat we have been casually calling a <i>string</i>
variable: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.85pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string strMyString = &quot;This is my string&quot;;
Console.WriteLine(strMyString.Length); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The expression <i>strMyString.Length</i> returns the length
of the string, in this case the number 17.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Length</i> does not return information about the ice
cream dispenser that is the <i>String</i> class. <i>Length</i> measures the
size of an individual sundae. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can also apply the <i>Length</i> property to a string
literal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:186.2pt;margin-bottom:
5.5pt;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>&quot;This is a
string literal&quot;.Length </span>That expression has a value of 24. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>String</i> class has two properties, and the other
property seems to be named <i>Chars</i>. Indeed, in some programming languages
you might actually use that property name. However, in the C# representation of
the <i>Chars</i> property declaration, youll see the following: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Char.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Char.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>char</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Char.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>this </span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>[</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>int</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>index] { get; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.8pt;
margin-left:-.25pt'>The word <i>Chars</i> does not appear in this declaration.
Instead, we see a property that seems to have a name of <i>this</i>, and the
property is of type <i>char</i>. But <i>this</i> is actually a C# keyword, and
in this context its a rather special syntax. This declaration defines an <i>indexer</i>
for the <i>String</i> class, which indicates that you can use square brackets
to index a string variable and obtain its characters. For example, the
expression <span style='font-size:10.0pt;line-height:103%;font-family:Consolas'>strMyString[0]
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>returns the first character of the <i>strMyString</i>,
which, as defined above is the character &#8215;T.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The syntax is the same as indexing a C or C++ array (and
actually the same as indexing an array in C#). Indexing begins at 0, so the
expression <i>strMyString[5]</i> is the 6<sup>th</sup> character of the string,
or &#8215;i'. You can also index string literals: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>&quot;This is a string literal&quot;[15] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Thats the character &#8215;g. The index can range from 0
to one less than the <i>Length</i> property of the string. Heres a little
program that demonstrates the <i>Length</i> and indexer properties. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:250.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.05pt 5.75pt 0in 1.45pt;height:250.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StringProperties.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// StringProperties.cs (c) 2006
  by Charles Petzold //------------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StringProperties </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.95pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.Write(&quot;Enter some text: &quot;);         string strEntered =
  Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;The text you entered has &quot; + strEntered.Length
  +  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                         
  &quot; characters&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.WriteLine(&quot;The first character is &quot; +
  strEntered[0]);         Console.WriteLine(&quot;The last character is &quot;
  +  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                                   
  strEntered[strEntered.Length - 1]); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Of course, because you are an inquisitive person, youll
want to see what happens when you press the Enter key without typing any text
at all. The <i>Console.ReadLine</i> method returns an empty string in that
case, the <i>Length</i> property of an empty string is 0, but the first
indexer, which is <i>strEntered[0]</i>, has a little problem because theres no
character for it to return. Youll probably get a dialog box informing you of a
problem, and then some text in the console window that begins like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Unhandled Exception: System.IndexOutOfRangeException: Index was
outside the bounds of the array. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The fully-qualified StringProperties.cs filename will also
be displayed in this message, and a line number where the problem occurred.
That line number might be exact if youre compiling in Debug mode, or it might
only refer to the method in which it occurred. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At any rate, the program gracefully terminated. It didnt
hang, or display a bunch of funny characters to the screen, or bring down
Windows along with it. Notice that the message says &#8213;Unhandled
Exception,&#8214; which implies that theres a way for you, the programmer, to
write code that handles this problem without terminating the program. (Youll
see how to handle exceptions in Chapter 12.) <i>IndexOutOfRangeException</i> is
a class in the <i>System</i> namespace, and its one of several classes for
various types of exceptions a program might encounter. Ill be using these
class names to refer to common exceptions. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The exception message indicates that the &#8213;Index was
outside the bounds of the array,&#8214; and that might prompt you to ask: Is a <i>string</i>
really just an array of characters? Definitely not in the same sense that C and
C++ strings are arrays of characters. The big difference is implied in the
definition of the indexer: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public</span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Char.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Char.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>char</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Char.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>this </span><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>[</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'>int</span></a><a
href="ms-help://MS.MSSDK.1033/MS.NETFX30SDK.1033/cpref7/html/T_System_Int32.htm"><span
style='font-size:10.0pt;line-height:103%;font-family:Consolas;color:black;
text-decoration:none'> </span></a><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>index] { get; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>This property is get-only. Code like this is simply not
allowed: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>strMyString[5] = 'a';    // Can't do it! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Once a string is created, you cant change the individual
characters. Nor is there any method in the <i>String</i> class that can change
the characters of the string. The string is said to be <i>immutable</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>What does this mean? Well, what it certainly does <i>not</i>
imply is a prohibittion against setting a string variable to another string.
This code is perfectly legal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:223.95pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>string str = &quot;first string&quot;; str = &quot;second
string&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But thats really the <i>only</i> way you can change the
contents of a <i>string</i> variable. You have to set the variable to a
different string rather than changing the characters of the existing string. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Because strings are immutable, certain operations common in
C and C++ are no longer possible in C#. For example, Microsoft C and C++
include a library function named <i>_strupr</i> that converts a string to
uppercase. In a C program, if <i>pMyCString</i> is a pointer to <i>char</i> or
an array of <i>char</i>, youd use <i>_strupr</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>_strupr(pMyCString); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>_strupr</i> function takes each character in <i>pMyCString</i>
and converts it to upper-case and stores it back in the same place. The <i>_strupr</i>
function returns a pointer to the converted string, but its the same pointer
passed to the function. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The equivalent method of the <i>String</i> class is <i>ToUpper</i>.
But for a string instance named <i>strMyCSharpString</i> you cant just call
the method like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>strMyCSharpString.ToUpper();    // Wont do anything! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Syntactically, this statement is valid, but it has no
effect on the <i>strMyCSharpString</i> variable. Strings are immutable and
hence the characters of <i>strMyCSharpString</i> cant be altered. The <i>ToUpper</i>
method actually creates a new string. You need to assign the return value of <i>ToUpper</i>
to a string variable: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string strMyUpperCaseString = strMyCSharpString.ToUpper(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Or you could assign the return value to the same string
variable: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>strMyCSharpString = strMyCSharpString.ToUpper(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the second case, the original string (the one containing
lowercase letters) still exists, but since its probably no longer referenced
anywhere in the program, it becomes eligible for garbage collection. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:134.95pt;margin-bottom:
1.8pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>So, suppose you
have a string defined like so <span style='font-size:10.0pt;line-height:152%;
font-family:Consolas'>string str = &quot;abcdifg&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>and you want to change the fifth character to an &#8215;e.
You know you cant do it this way: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>str[4] = 'e';    // Won't work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>The indexer is get-only. So how <i>do</i> you do it? There
are a couple possible approaches, which you can dig up by searching through the
<i>String</i> documentation. The method call <span style='font-size:10.0pt;
line-height:115%;font-family:Consolas'>str = str.Replace('i', 'e'); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.05pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>returns a string where <i>all</i> the occurrences of
&#8215;i have been replaced with &#8215;e . Notice the return value from <i>Replace</i>
is assigned to the same varaiable that went into the method. Alternatively, you
can first call <i>Remove</i> to create a new string with one or more characters
removed at a specified index with a specified length. For example, the call <span
style='font-size:10.0pt;line-height:115%;font-family:Consolas'>str =
str.Remove(4, 1); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>removes one character at the fourth position (the
&#8215;i). You can then call <i>Insert</i> to insert a new string, which in
this case is a single character: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>str = str.Insert(4, &quot;e&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or you can do both jobs in one statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>str = str.Remove(4, 1).Insert(4, &quot;e&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Despite the use of a single <i>string</i> variable named <i>str</i>,
the two method calls in this last statement create two additional strings, and
the quoted &#8213;e&#8214; is yet another string. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or you can patch together a new string from substrings: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>str = str.Substring(0, 4) + &quot;e&quot; + str.Substring(5); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now that I have you looking through the documentation for
the <i>String</i> class, youll notice it includes a section labeled
&#8213;String Constructor.&#8214; Constructors serve to create and initialize
objects. In use, a constructor requires the keyword <i>new</i> followed by the
class name itself and possible arguments in parentheses. Heres a declaration
of a <i>string</i> variable that uses one of the constructors defined by the <i>String</i>
class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string strAtSigns = new string('@', 15); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can use either the lowercase <i>string</i> keyword or
the uppercase <i>String</i> class when calling a constructor. This particular
constructor is defined with a <i>char</i> as the first parameter and an <i>int</i>
as the second parameter. It creates a string containing 15 occurrences of the @
character, which is enough for a charm bracelet: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>@@@@@@@@@@@@@@@ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Many of the string constructors create strings based on
pointers, but one handy one creates a string from an array of characters. This
constructor suggests yet another approach to replacing a character in a
particular string. You can convert the string into a character array, set the
appropriate element of the array, and then construct a new string based on the
character array. In C#, array variables are declared by following the type of
the array with empty double brackets: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:212.9pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>char[] buffer = str.ToCharArray(); buffer[4] = 'e'; str =
new string(buffer); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>That array syntax may seem a little strange to the C and
C++ programmer, but Ill discuss it in detail in Chapter 10. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As Ive mentioned, just as <i>string</i> is an alias for
the <i>System.String</i> class, the <i>char</i>, <i>int</i>, and <i>double</i>
keywords in C# are also aliases. But these are not aliases for classes in the <i>System</i>
namespace. Instead, theyre aliases for <i>structures</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The difference between classes and structures will become
more apparent in later chapters. But in many ways classes and structures are
similar, and instead of saying &#8213;this is my <i>int</i> variable,&#8214;
you can instead say &#8213;this is an instance of the <i>Int32</i>
structure&#8214; or &#8213;this is an object of type <i>Int32</i>&#8214; or
&#8213;this is an <i>Int32</i> object.&#8214; It makes the humble thing sound
just a little bit more important.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.55pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>Although you wont see any constructors listed in the
documentation for the <i>Int32</i> and <i>Double</i> structures, both
structures have default parameterless constructors that return zero values of
the object. So, instead of initializing an <i>int</i> like this <span
style='font-size:10.0pt;line-height:115%;font-family:Consolas'>int index = 0; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>you can do it like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:258.55pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>int index = new int(); </span>Or
this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:209.15pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>System.Int32 index = new int(); </span>Or
this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int index = new System.Int32(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Or, if you have a <i>using</i> directive for the <i>System</i>
namespace, like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Int32 index = new Int32(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Or any other combination. All those declarations are
equivalent. Beginning in .NET 2.0, you can also use the <i>default</i> keyword
to obtain the default value of an <i>int</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int index = default(int); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you saw in the documentation of the <i>String</i> class,
there seems to be lots of good reasons why the <i>string</i> data type is an
alias for a class. But is there any reason that the <i>int</i> and <i>double</i>
types are aliases for the <i>Int32</i> and <i>Double</i> structures? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Oh, yes. Both structures have instance methods named <i>ToString</i>
that convert the object to a string. In fact, every single class and structure
in the .NET Frameworkincluding those that you will create yourselfhas an
instance method named <i>ToString</i>. This is because the <i>System.Object</i>
class (also known by its C# alias <i>object</i>) defines a method named <i>ToString</i>.
The <i>System.Object</i> class is the grand matriarch of every .NET class and
structure, and they all inherit this wonderful <i>ToString</i> method, and many
classes and structures tailor <i>ToString</i> to their own requirements. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Consider the following code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:256.9pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int i = 55; string str = i.ToString(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>ToString</i> method converts the <i>int</i> variable
to a <i>string</i>, which in this case is the string &#8213;55&#8214;. You can
even apply <i>ToString</i> to a integer literal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>12345.ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>That <i>ToString</i> call returns the string
&#8213;12345&#8214;. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And this is how the concatenation of <i>string</i> objects
with non-<i>string</i> objects works. If a <i>string</i> variable or literal is
on either side of a plus sign, and if a non-<i>string</i> is on the other side,
then the non-<i>string</i> object is converted to a <i>string</i> by a call to
its <i>ToString</i> method. It works every time!  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Earlier I showed how to use the static <i>NewLine</i>
property from the <i>Environment</i> class. The <i>Environment</i> class has
some other goodies that can give your program information about the machine on
which its running. Heres a program that shows just a couple of these items. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:297.4pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 0in 0in 1.45pt;height:297.4pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>ShowEnvironmentStuff.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.6pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-----------------------------------------------------
  // ShowEnvironmentStuff.cs (c) 2006 by Charles Petzold
  //----------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  ShowEnvironmentStuff </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;My Documents is actually &quot; + </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));        
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  msec = Environment.TickCount; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:81.6pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.WriteLine(&quot;Windows has been running for &quot;
  +                           msec + &quot; milliseconds&quot;); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>        Console.WriteLine(&quot;\tor
  &quot; + msec / 3600000.0 + &quot; hours&quot;);         Console.WriteLine();
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;You are running &quot; + Environment.OSVersion); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;\tand .NET version &quot; + Environment.Version); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The program begins by obtaining the actual directory
referred to as <i>My Documents</i>. This is available through a static <i>Environment.GetFolderPath</i>
method, which returns a <i>string</i>. The argument is a member of the <i>SpecialFolder</i>
enumeration, but the <i>SpecialFolder</i> enumeration is actually defined
within the <i>Environment</i> class, which is why the lengthy member name is <i>Environment.SpecialFolder.MyDocuments</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The static <i>Environment.TickCount</i> property returns an
<i>int</i> indicating the the number of milliseconds that the current Windows
session has been running. One <i>WriteLine</i> call in the program displays
this value directly while the other divides it by 3600000.0 to get the
floating-point value in hours.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>When I ran this program under Windows XP, the first two
sections of the program displayed the following information: </p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:8.8pt;
margin-bottom:0in;margin-left:25.5pt;text-align:right;line-height:104%'><span
style='font-size:10.0pt;line-height:104%;font-family:Consolas'>My Documents is
actually C:\Documents and Settings\Charles\My Documents </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:108.5pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Windows has been running for 16729593
milliseconds         or 4.64710916666667 hours </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>When I ran the program under a Windows Vista partition, the
first item displayed as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>My Documents is actually H:\Users\Charles\Documents </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The last section of the program displays two static
properties named <i>Environment.OSVersion</i> and <i>Environment.Version</i>.
The <i>Version</i> property is documented as returning an object of type <i>Version</i>,
which is a class defined in the <i>System</i> namespace. It may be a bit
confusing that a property named <i>Version</i> returns an object of type <i>Version</i>,
but that naming convention is quite common in .NET. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Version</i> class (also defined in the <i>System</i>
namespace) has four crucial <i>int</i> properties named <i>Major</i>, <i>Minor</i>,
<i>Build</i>, and <i>Revision</i>. The <i>ToString</i> method defined by the <i>Version</i>
class nicely displays these four numbers separated by periods, just as weve
come to expect version numbers to be displayed. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>The <i>Environment.OSVersion</i> property returns an object
of type <i>OperatingSystem</i>. The crucial properties of the <i>OperatingSystem</i>
class are <i>Platform</i> (which is a member of the <i>PlatformID</i>
enumeration), <i>Version</i> (which is an object of type <i>Version</i>), and <i>ServicePack</i>,
which is a string. Again, the <i>ToString</i> method nicely renders this
information in a readable form, so that the last section of the
ShowEnvironmentStuff program displays the information (when I ran it under
Windows XP): </p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.0pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>You are running Microsoft Windows NT 5.1.2600 Service
Pack 2         and .NET version 2.0.50727.42 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Under Windows Vista, the program reported: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:130.45pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>You are running Microsoft Windows NT 6.0.6000         and
.NET version 2.0.50727.312 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If you want to be a little more explicit about the objects
returned from the <i>OSVersion</i> and <i>Version</i> properties, you can do
this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Version vers = Environment.Version; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>OperatingSystem opsys = Environment.OSVersion; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;You are running &quot; + opsys); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;\tand .NET version &quot; + vers); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Here, <i>vers</i> is declared as an object of type <i>Version</i>,
and <i>opsys</i> is declared as an object of type <i>OperatingSystem</i>, which
are the types of the objects returned from <i>Envionment.Version</i> and <i>Environment.OSVersion</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Learning about C# generally begins with the static <i>Main</i>
method and static methods of the <i>Console</i> class, but static methods and
properties are generally the exception rather than the rule. In general, a
program deals with instances of classes and structures.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The only reason <i>Console</i> is entirely static is
because to any application, there is only one <i>Console</i>. If an application
could create multiple consoles, then the <i>Console</i> class would have a
constructor that returned an instance of the <i>Console</i> class, and <i>WriteLine</i>
would be an instance method. Youd precede <i>WriteLine</i> with one of the
instances of the <i>Console</i> class to indicate on which console you want to
display the text. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Environment</i>, also, is a collection of static methods
and properties because to any application, there is only one operating system
environment and machine on which its running. (However, the properties of <i>Environment</i>
return instances of other classes.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>In .NET 1.0, it was actually possible to create instances
of the <i>Console</i> and <i>Environment</i> classes using a <i>new</i>
expression like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console cons = new Console();    // Doesn't work any more. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>But that no longer works. Both <i>Console</i> and <i>Environment</i>
contain nothing but static methods and properties so the class definitions
themselves also contain the <i>static</i> keyword: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static class Console </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:361.3pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because you cant create an instance of the <i>Console</i>
class, you cant call the <i>ToString</i> method in <i>Console</i> because <i>ToString</i>
is always an instance method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although the <i>Int32</i> and <i>Double</i> structures are
primarily for working with <i>int</i>, and <i>double</i> instances, these
structures also have some static members. In particular, these structures have
static methods named <i>Parse</i> that convert strings into numbers. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The static <i>Int32.Parse</i> method accepts a <i>string</i>
argument and returns an object of type <i>Int32</i>. The <i>Parse</i> method is
pretty much the opposite of <i>ToString</i>. As you know by now, <i>ToString</i>
is an instance method because it applies to a particular integer. You must have
an integereither a variable or a literal or perhaps the return value of a
methodto call the <i>ToString</i> method of the <i>Int32</i> struture: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:256.9pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int i = 275; string str = i.ToString(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'><i>Int32.Parse</i> is a static method. You use this method
by specifying the <i>Int32</i> structure to the left of the method name. You
dont need to have an integer around to call <i>Int32.Parse</i>. The method
creates an integer for you: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:262.45pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>string str = &quot;275&quot;; int i = Int32.Parse(str); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because <i>int</i> is an alias for <i>System.Int32</i>, you
can actually call <i>Parse</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i = int.Parse(str); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although its perfectly legal, it sure looks peculiar. I
prefer using the actual class or structure name when calling static methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>System.Double</i> structure has a static method
named <i>Parse</i> as well, and the <i>Parse</i> methods in both structures
have overloads that accept a member of the <i>NumberStyles</i> enumeration to
govern the type of input <i>Parse</i> will accept. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a program that uses <i>Double.Parse</i> with a
static method from the all-static <i>Math</i> class to calculate powers. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:238.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:238.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Exponentiation.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// Exponentiation.cs (c) 2006 by
  Charles Petzold //----------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Exponentiation </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;Enter the base: &quot;); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:108.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        double number =
  Double.Parse(Console.ReadLine());  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;Enter the power: &quot;); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        double power =
  Double.Parse(Console.ReadLine());  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(number + &quot; to the &quot; + power + &quot; power equals
  &quot; + </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                         
  Math.Pow(number, power)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that in both cases the argument to <i>Double.Parse</i>
is a call to <i>Console.ReadLine</i>, which returns a <i>string</i> that is
then passed to the <i>Parse</i> method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you type something in that <i>Parse</i> cant handle,
youll get a <i>FormatException</i>. You can either trap that exception, or you
can use an alternative method named <i>TryParse</i> that doesnt raise an
exception for improper input. (Ill describe both approaches in Chapter 12.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Some of the common classes and structures defined in the
.NET <i>Framework</i> define multiple versions of the <i>ToString</i> method.
The <i>Double</i> structure, for example, defines four different <i>ToString</i>
methods: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:92.2pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>string ToString() string ToString(string format) string
ToString(IFormatProvider provider) string ToString(string format,
IFormatProvider provider) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The second version of the <i>ToString</i> method allows you
to use a formatting string that consists of a letter optionally followed by a
number. For example, if <i>num</i> is a variable of type <i>double</i>, then </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>num.ToString(&quot;F3&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>displays <i>num</i> in &#8213;fixed-point&#8214; style with
three decimal places. The following program demonstrates some of the options
you have in displaying numbers. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:320.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:320.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>NumericFormatting.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------------
  // NumericFormatting.cs (c) 2006 by Charles Petzold
  //-------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  NumericFormatting </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Currency    C3: &quot; +
  Math.PI.ToString(&quot;C3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Exponential E3: &quot; +
  Math.PI.ToString(&quot;E3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Fixed-Point F3: &quot; +
  Math.PI.ToString(&quot;F3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;General     G3: &quot; +
  Math.PI.ToString(&quot;G3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Number      N3: &quot; +
  Math.PI.ToString(&quot;N3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Percent     P3: &quot; +
  Math.PI.ToString(&quot;P3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.WriteLine(&quot;Round-Trip  R3: &quot; +
  Math.PI.ToString(&quot;R3&quot;));         Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Fixed-Point F3: &quot; +
  12345678.9.ToString(&quot;F3&quot;)); </span></p>
  <p class=MsoNormal align=center style='margin:0in;text-align:center;
  text-indent:0in;line-height:normal'><span style='font-size:10.0pt;font-family:
  Consolas'>        Console.WriteLine(&quot;General     G3: &quot; +
  12345678.9.ToString(&quot;G3&quot;));        
  Console.WriteLine(&quot;Number      N3: &quot; +
  12345678.9.ToString(&quot;N3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Decimal     D3: &quot; +
  55.ToString(&quot;D3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.WriteLine(&quot;General     G3: &quot; +
  55.ToString(&quot;G3&quot;));         Console.WriteLine(&quot;Hexadecimal X3:
  &quot; + 55.ToString(&quot;X3&quot;)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The first seven statements display &#960; and the following
results appear when you run this program with your region set to the United
States: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Currency    C3: $3.142 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Exponential E3: 3.142E+000 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:240.35pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Fixed-Point F3: 3.142 General     G3: 3.14 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Number      N3: 3.142 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Percent     P3: 314.159 % </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Round-Trip  R3: 3.1415926535897931 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In many cases, the number you provide in the formatting
string indicates the number of decimal places. The exception is General
formatting, in which case the number indicates the total number of digits
displayed. General formatting will use either Exponential or Fixed-Point
formatting, depending which one is most economical for the particular number.
If you use the parameterless version of <i>ToString</i>, it is equivalent to
&#8213;G&#8214;. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you can see, the Round-Trip formatting ignores the
number in the formatting string, and creates a string that can be passed to <i>Parse</i>
to get the original number back. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The next three statements in the program show what happens
with a number with more digits to the left of the decimal point: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Fixed-Point F3: 12345678.900 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>General     G3: 1.23E+07 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Number      N3: 12,345,678.900 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this case, General formatting uses the Exponential
format because its more economical. The Number formatting string inserts
commas as thousands separators (or whatever is regionally appropriate). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Two of the formatting optionsDecimal and Hexadecimalare
for use only with integers. Both insert zeros to the left of the number if
necessary to make it as wide as the number you specify in the formatting
string: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:251.3pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Decimal     D3: 055 General     G3: 55 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Hexadecimal X3: 037 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you change the number following the D or X to 1, youll
probably be happy to note that no actual digits are stripped from the result.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you go into the Control Panel and invoke the Regional
and Language Options applet, you can change some settingsfor example, the
currency symbol and the thousands separatorthat affect how <i>ToString</i>
displays the number. By default, <i>ToString</i> uses the regional settings,
but this behavior may be undesirable in some cases. You might want to display
currency in dollars or euros <i>regardless</i> of the users regional settings.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>This option is made possible by the third and fourth
overloads of the <i>ToString</i> method, which have the following syntax: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:91.9pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>string ToString(IFormatProvider provider) string
ToString(string format, IFormatProvider provider) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you look in the documentation of the <i>System</i>
namespace, youll find <i>IFormatProvider</i> is identified as an <i>interface</i>. 
(By convention, all interfaces in the .NET Framework begin with the capital
letter I.) Youll also see that <i>IFormatProvider</i> has one method defined,
which is named <i>GetFormat</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Interfaces contain no code of their own. Somewhere within
the source code for the .NET Framework, <i>IFormatProvider</i> is probably
defined in its entirety like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public interface IFormatProvider </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    object GetFormat(Type formatType); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What actually must be passed to the <i>ToString</i> method
is an instance of a class that <i>implements</i> the <i>IFormatProvider</i> interface,
and by that it is meant that the class contains a method named <i>GetFormat</i>
defined in the same way as the signature in <i>IFormatProvider</i>, but which
has actual code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For the job of formatting numbers, the relevant class that
implements the <i>IFormatProvider</i> interface is named <i>NumberFormatInfo</i>,
and its defined in the <i>System.Globalization</i> namespace. To refer to the <i>NumberFormatInfo</i>
class in your program, youll either need to preface the class name with <i>System.Globalization</i>,
or provide a <i>using</i> directive for <i>System.Globalization</i>. (Ill
assume the latter.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To customize the formatting of numbers by <i>ToString</i>,
you need an instance of the <i>NumberFormatInfo</i> class. If you look at the
properties of this class, youll see stuff like <i>CurrencySymbol</i>, <i>CurrencyDecimalSeparator</i>,
and <i>PercentSymbol</i>. All these properties are settable and gettable. This
means that you can create an object of type <i>NumberFormatInfo</i>, set the
properties to whatever you want, and then pass that object to <i>ToString</i>
to get the desired result. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can create an object of type <i>NumberFormatInfo</i>
using the parameterless constructor defined by the class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:113.45pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:139%'><span
style='font-size:10.0pt;line-height:139%;font-family:Consolas'>NumberFormatInfo
info = new NumberFormatInfo(); </span>You can then set some of the properties
like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:69.95pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>info.CurrencySymbol = &quot;\x20AC&quot;;
info.CurrencyPositivePattern = 3; info.CurrencyNegativePattern = 8; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The Unicode character 0x20AC is the symbol for the Euro. If
you look at the documentation of <i>CurrencyPositivePattern</i>, youll see
that a value of 3 means that the currency symbol is to be displayed after the
number and separated by a space. A <i>CurrencyNegativePattern</i> of 8 means
that the symbol will appear in the same place for negative numbers, but a
negative sign will appear in front of the number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There are other ways to get instances of the <i>NumberFormatInfo</i>
class without explicitly using the constructor. The <i>NumberFormatInfo</i>
class has two static methods named <i>CurrentInfo</i> and <i>InvariantInfo</i>
that return instances of the <i>NumberFormatInfo</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>It might sound a little peculiar that static methods of a
class return instances of the class, but its perfectly legitimate. Heres what
the syntax might look like: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>NumberFormatInfo info = NumberFormatInfo.CurrentInfo; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>CurrentInfo</i> is a static property of the <i>NumberFormatInfo</i>
class, so it must be prefaced with the name of the class. It is get-only, and
it returns an object of type <i>NumberFormatInfo</i>, which you can then save
in a variable of type <i>NumberFormatInfo</i>. The code for the <i>CurrentInfo</i>
property obviously invokes the <i>NumberFormatInfo</i> constructor to create an
instance of the class. Then it sets a bunch of instance properties on the
object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The static <i>NumberFormatInfo.CurrentInfo</i> property
returns a <i>NumberFormatInfo</i> object with settings that are applicable for
your particular culture as youve indicated in the Control Panel. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Similarly, the static <i>NumberFormatInfo.InvariantInfo</i>
property returns an instance of <i>NumberFormatInfo</i> initialized with
&#8213;invariant&#8214; settings, that is, settings that do not depend on any
particular culture, and which will be the same regardless of the machine on
which the program is running. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>NumberFormatInfo</i> constructor creates a <i>NumberFormatInfo</i>
instance initialized with invariant information. It is quite likely that the
static <i>NumberFormatInfo.InvariantInfo</i> property is implemented by a
simple call to the constructor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you want to call <i>ToString</i> with an object of type <i>NumberFormatInfo</i>,
you can simply pass <i>NumberFormatInfo.InvariantInfo</i> or <i>NumberFormatInfo.CurrentInfo</i>
directly to the <i>ToString</i> method. (If you use a simpler form of <i>ToString</i>,
<i>NumberFormatInfo.CurrentInfo</i> is used by default.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following program displays a number in a currency
format with </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>NumberFormatInfo.InvarientInfo</i> (which uses a
currency symbol of ¤), <i>NumberFormatInfo.CurrentInfo</i> (which will use the
currency symbol youve indicated in the Control Panel), and a custom version
that displays the Euro symbol (which, unfortunately, does not render on the
console and shows up as a question mark). </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:285.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.05pt 5.75pt 0in 1.45pt;height:285.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>CurrencyFormatting.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:119.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//---------------------------------------------------
  // CurrencyFormatting.cs (c) 2006 by Charles Petzold
  //--------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>using
  System.Globalization; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  CurrencyFormatting </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        double
  money = 1234567.89; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;InvariantInfo: &quot; +  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:64.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  money.ToString(&quot;C&quot;, NumberFormatInfo.InvariantInfo));  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;CurrentInfo:   &quot; +  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:75.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  money.ToString(&quot;C&quot;, NumberFormatInfo.CurrentInfo));          </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        NumberFormatInfo
  info = new NumberFormatInfo(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:196.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        info.CurrencySymbol =
  &quot;\x20AC&quot;;         info.CurrencyPositivePattern = 3;        
  info.CurrencyNegativePattern = 8;  </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:205.9pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        Console.WriteLine(&quot;Custom
Info:   &quot; + money.ToString(&quot;C&quot;, info)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:205.9pt;margin-bottom:
7.85pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the <i>using</i> directive for the <i>System.Globalization</i>
namespace. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>I know you really, really want to see the Euro symbol, so
lets put this basic logic into a small Windows Forms program. For this next
project, youll need to add a reference of System.Windows.Forms.dll.  </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:391.25pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:391.25pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>CurrencyFormattingMessageBox.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-------------------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.25pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//
  CurrencyFormattingMessageBox.cs (c) 2006 by Charles Petzold
  //------------------------------------------------------------- using System;
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:246.25pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>using System.Globalization;
  using System.Windows.Forms; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  CurrencyFormatting </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:202.4pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        double money =
  1234567.89;         string strDisplay; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  strDisplay = &quot;InvariantInfo: &quot; + </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>            money.ToString(&quot;C&quot;,
  NumberFormatInfo.InvariantInfo) +             Environment.NewLine; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  strDisplay += &quot;CurrentInfo: &quot; +  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  money.ToString(&quot;C&quot;, NumberFormatInfo.CurrentInfo) + </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Environment.NewLine; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  NumberFormatInfo info = new NumberFormatInfo(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:54.15pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        info.CurrencySymbol =
  &quot;\x20AC&quot;;         info.CurrencyPositivePattern = 3;        
  info.CurrencyNegativePattern = 8; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.35pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        strDisplay +=
  &quot;Custom Info: &quot; + money.ToString(&quot;C&quot;, info);  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  MessageBox.Show(strDisplay, &quot;Currency Formatting&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the <i>using</i> directive for <i>System.Windows.Forms</i>.
In this program, the <i>strDisplay</i> variable appears three times on the left
of assignment and compound assignment statements, and becomes the first
argument to the <i>MessageBox.Show</i> static method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>ToString</i> is certainly a powerful tool for
formatting. But in general practice a somewhat different approach is used that
is very similar to the C and C++ <i>printf</i> function. The first argument to <i>Console.WriteLine</i>
is a formatting string, and subsequent arguments are the items to be displayed.
For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;{0} times {1} equals {2}&quot;, A, B, A * B);
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In the formatting string, the numbers surrounded by curly
brackets are placeholders. The numbers correspond to the subsequent arguments,
where 0 is the first of the subsequent arguments, 1 is the second, and so
forth. The placeholder numbers in the formatting string dont have to be in
numeric order: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:47.45pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Console.WriteLine(&quot;{2}
equals {0} times {1}&quot;, A, B, A * B); </span>You can repeat a particular
placeholder number: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;{0} times {0} equals {1}&quot;, A, A * A); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>You can skip placeholder numbers. In the following case,
the variables <i>C</i>, <i>D</i>, and <i>E</i> are ignored and dont get
displayed: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;{1} times {2} equals {4}&quot;, C, A, B, D, A
* B, E); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The only restriction is that the number of subsequent
arguments must be greater than the highest placeholder number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you need to display curly braces within the formatting
string, use a pair of curly braces: {{ or }} will be interpreted as a
displayable symbol. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>To control the formatting of the individual arguments, you
follow the placeholder number with a colon and the same formatting string you
would pass to the <i>ToString</i> method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:10.0pt;
line-height:140%;font-family:Consolas'>Console.WriteLine(&quot;{0:N2} times
{1:N2} equals {2:N4}&quot;, A, B, A * B); </span>Basically, this statement is
equivalent to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(A.ToString(&quot;N2&quot;) + &quot; times &quot; +
B.ToString(&quot;N2&quot;) + </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                  &quot; equals &quot; + (A *
B).ToString(&quot;N4&quot;)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can also control the width of the field allowed for the
string returned from <i>ToString</i>. You do this by following the placeholder
number with a comma and a field width in characters: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.6pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.WriteLine(&quot;{0,5:N2} times {1,5:N2} equals
{2,10:N4}&quot;,                    A, B, A * B); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>What youre indicating here is a <i>minimum</i> field
width. The method wont truncate the result of <i>ToString</i>. In this
example, A and B will be displayed in a field of at least 5 characters width,
and the product with 10 characters width. The number is right justified in the
field, and spaces are used to pad to the left. For left justification, use a
negative field width: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:26.15pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.WriteLine(&quot;{0,-5:N2} times {1,-5:N2} equals
{2,-10:N4}&quot;,                    A, B, A * B); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>These field widths are useful for aligning numbers in
columns when displaying multiple rows. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As youve seen, the <i>ToString</i> methods of the
individual classes and structures are responsible for the bulk of the
formatting job. The rest of it isnt really handled by <i>Console.WriteLine</i>.
When you use a formatting string, <i>Console.WriteLine</i> just hands the job
over to another static method named <i>String.Format</i>. If <i>Console.WriteLine</i>
is the C# version of <i>printf</i>, then <i>String.Format</i> is the C# version
of <i>sprintf</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>So, even if you never write another console program for the
rest of your life, you probably will still make use of <i>String.Format</i> for
formatting objects for display. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:4.0pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369920">Chapter 6. Primitive Data Types </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>As youve seen C# supports data types of <i>string</i>, <i>char</i>,
<i>int</i>, and <i>double</i>. This chapter takes a more methodical approach to
these and the other primitive data types supported by C# and the CLR. </p>

<h4 style='margin-left:-.25pt'>Integers </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Like C and C++, C# supports integral data types named <i>short</i>,
<i>int</i>, and <i>long</i>. But almost immediately, the differences between
C/C++ and C# start to become apparent. The C and C++ standards impose <i>minimum</i>
bit widths for the three integral data types, but C# fixes them precisely. The
C# <i>short</i> is always 16 bits wide, the <i>int</i> is 32 bits wide, and the
<i>long</i> is 64 bits wide.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>short</i>, <i>int</i>, and <i>long</i> are signed
integers stored in standard twos complement format. The <i>short</i> can range
in value from -32,768 through 32,767, the <i>int</i> from -2,147,483,648
through 2,147,483,647, and the long from -9,223,372,036,854,775,808 to
9,223,372,036,854,775,807. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Within a method like <i>Main</i>, you can declare an <i>int</i>
named <i>i</i> (for example) with the declaration statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>This statement essentially allocates 4 bytes of space on
the stack to store the value of <i>i</i>. However, at this point, <i>i</i> is
uninitialized, and any attempt to refer to its value will provoke the C#
compiler to report a problem. For example, the C# compiler wont allow this
code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(i); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>After <i>i</i> is declared, you can assign it a value: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>i = 545; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or, you can initialize <i>i</i> in its declaration
statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i = 545; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In either case, the number 545 is an integer literal that
is normally assumed to be of type <i>int</i>, except that the C# compiler will
bend the rules a bit if you assign the literal to a <i>short</i>, for example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>short s = 545; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can assign the value of an <i>int</i> to a <i>long</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>long l = i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>This is known as an <i>implicit</i> cast. The <i>int</i> is
converted to a <i>long</i> without difficulty. Similarly, you can assign a <i>short</i>
to an <i>int</i> or a <i>long</i> without a cast. However, going the other way
would be a problem because the value of the <i>long</i> might exceed the
capability of the <i>int</i>, so an explicit cast is required: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>i = (int)l; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although theres obviously no problem in this particular
example, in the general case the value of the <i>long</i> would be truncated to
fit in an <i>int</i>. Similarly, you need an explicit cast to assign a <i>long</i>
to a <i>short</i>, or an <i>int</i> to a <i>short</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# also supports unsigned integral data types, but the word
&#8213;unsigned&#8214; is not a keyword as it is in C and C++. The three
unsigned integral data types are named <i>ushort</i>, <i>uint</i>, and <i>ulong</i>.
The <i>ushort</i> ranges in value from 0 through 65,535; the <i>uint</i> from 0
through 4,294,967,295, and the <i>ulong</i> from 0 through
18,446,744,073,709,551,615. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can assign a <i>ushort</i> to a <i>uint</i> or a <i>ulong</i>
without an explicit cast, or a <i>uint</i> to a <i>ulong</i> without an
explicit cast because nothing bad can ever happen. You can also assign a <i>ushort</i>
to an <i>int</i>, or a <i>uint</i> to a <i>long</i> without an explicit cast.
Again, the recipient can accommodate all possible values of the source. But
explicit casts are required anywhere the value may not survive. For example,
setting an <i>int</i> to a <i>uint</i>, or a <i>uint</i> to an <i>int</i> always
requires an explicit cast. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Numeric literals are generally assumed to be of type <i>int</i>,
except if the number is too big for an <i>int</i>, in which case, the C#
compiler assumes (progressively) that its actually a <i>uint</i>, <i>long</i>,
or <i>ulong</i>. You can be more specific by applying a suffix of <i>U</i> or <i>u</i>
(for unsigned) or <i>L</i> or <i>l</i> (for <i>long</i>) or a combination of <i>U</i>
or <i>u</i> and <i>L</i> or <i>l</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can represent hexadecimal numbers by proceeding the
digits with a 0x or 0X: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int hex = 0x4AbC; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You cant express octal or binary literals in C#. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>long</i> and <i>ulong</i> types are 64-bits wide,
the <i>int</i> and <i>uint</i> types are 32bit wide, and the <i>short</i> and <i>ushort</i>
types are 16-bit wide. C# also supports two 8-bit integral types, but the
naming convention is reversed. The <i>byte</i> is an unsigned 8-bit type
capable of storing values from 0 through 255. The <i>sbyte</i> is the signed
8-bit type capable of storing values from -128 to 127. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Implicit casts are allowed for converting <i>byte</i> to <i>short</i>,
<i>ushort</i>, <i>int</i>, <i>uint</i>, <i>long</i>, and <i>ulong</i>; and from
<i>sbyte</i> to <i>short</i>, <i>int</i>, and <i>long</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>A program can also declare constants: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>const int a = 17; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A data type must follow the <i>const</i> keyword, and the
constant must be initialized in the declaration statement. You can declare a <i>const</i>
either locally to a method or as a field. If you declare a <i>const</i> as a
field, do not use the <i>static</i> keyword with <i>const</i>. Constants are
implicitly static, that is, they dont vary by instance. The <i>Math.PI</i>
field is a <i>const</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>Constants are sometimes treated as variables that cannot be
varied, but they are actually quite different from variables. Constants do not
occupy storage during runtime. They are always evaluated at compile time and
substituted into code. For example, if the constant <i>a</i> has been defined
as shown above, the statement <span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>int b = a + 18; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>is equivalent to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int b = 17 + 18; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The initialized value of a <i>const</i> must be available
at compile time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If a program divides an integer by zero, a <i>DivideByZeroException</i>
will be raised. If a program contains an expression that divides an integer by
a literal 0 or a <i>const</i> with a value of 0, the C# compiler is alert
enough to flag that as a compile error. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>By default, no exception is raised when integer overflow or
underflow occurs. For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i = 50000; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(i * i); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>That statement will print the value -1794967296 (and if you
dont know why its negative, you can refer to Chapter 13 of my book <i>Code:
The Hidden Language of Computer Hardware and Software</i> or Chapter 8 of <i>Programming
in the Key of C#</i>). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If youd prefer that your integer arithmetic is checked for
overflow and underflowperhaps just during program developmentyou can set a
compiler switch. When compiling on the command line, use the switch: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>/checked+ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In Visual Studio, bring up Project Properties, select the
Build tab, click the Advanced button, and check the checkbox labeled
&#8213;Check for arithmetic overflow/underflow&#8214;. Now any overflow or
underflow raises an <i>OverflowException</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can also perform overflow/underflow checking on
individual expressions or groups of statement using the <i>checked</i> keyword.
For example, this statement performs checking on just one expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>B = checked(5 * A); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.4pt;
margin-left:-.25pt'>If you have turned on overflow/underflow checking with the
compiler switch, you can turn it off for individual expressions with the <i>unchecked</i>
keyword. Perhaps you need to keep a particular expression unchecked because you
use overflow deliberately here: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>B = unchecked(5 * A); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can also perform overflow/underflow checking for a
particular block of statements: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>checked </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:46.25pt;text-indent:-11.0pt'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>A<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:10.0pt;line-height:103%;font-family:Consolas'>+=
1000000; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:46.25pt;text-indent:-11.0pt'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>B<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:10.0pt;line-height:103%;font-family:Consolas'>=
B * A; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Similarly, you can turn off checking for a particular block
of statements. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>Just keep in mind that the most efficient code is that in
which overflow and underflow are not checked during runtime. </p>

<h4 style='margin-left:-.25pt'>Integers and the .NET Framework </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>byte</i>, <i>sbyte</i>, <i>short</i>, <i>ushort</i>,
<i>int</i>, <i>uint</i>, <i>long</i>, and <i>ulong</i> keywords are aliases for
structures in the .NET Framework class library. For example, if you look in the
documentation of the <i>System</i> namespace, youll find a structure named <i>Int32</i>.
This is the structure that corresponds to the unsigned 32-bit <i>int</i>. You
can alternatively define an <i>int</i> named <i>i</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.Int32 i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Or, if you have a <i>using</i> directive for the <i>System</i>
namespace, you can use this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Int32 i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Anywhere you use <i>int</i>, you can alternatively use <i>System.Int32</i>
or (if the <i>using</i> directive exists) <i>Int32</i>. Jeff Richter actually
recommends that C# programmers use the .NET structure names. (See <i>CLR via C#</i>,
page 119.) As youll discover, you sometimes need to refer to types by the
structure name, and it helps if youve become accustomed to those names to
begin with. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following table shows the eight integral data types and
their corresponding structures in the .NET Framework: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=591
 style='width:442.9pt;margin-left:-5.4pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>C#
  Alias </b></p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>.NET Structure </b></p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Description
  </b></p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>CLS Compliant? </b></p>
  </td>
 </tr>
 <tr style='height:20.55pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>sbyte </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.SByte
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Signed
  8-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>No </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>byte </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.Byte
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Unsigned
  8-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Yes </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>short </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.Int16
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Signed
  16-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Yes </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>ushort
  </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.UInt16
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Unsigned 16-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>No </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>int </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.Int32
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Signed
  32-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Yes </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>uint </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.UInt32
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Unsigned 32-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>No </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>long </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.Int64
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Signed
  64-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Yes </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=91 valign=top style='width:.95in;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>ulong </p>
  </td>
  <td width=144 valign=top style='width:108.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>System.UInt64
  </p>
  </td>
  <td width=204 valign=top style='width:153.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Unsigned 64-bit integer </p>
  </td>
  <td width=151 valign=top style='width:113.45pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 2.4pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>No </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the last column Ive indicated if the particular data
type is compliant with the Common Language Specification (CLS). The CLS
specifies a minimum standard for programming languages used in conjunction with
.NET. The CLS does not require programming languages to implement signed 8-bit
integers, or unsigned 16, 32, or 64 bit integers. What this means is that a
particular programming language can be CLS compliant without implementing these
data types.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There is no reason why you shouldnt use these data types
in your C# programs. <i>However</i>, if you are writing code for a dynamic link
library, then you should certainly avoid these data types to define public
fields, or as parameters or return values from public methods, or as types of
public properties. Methods in the DLL should not have <i>uint</i> arguments or
return <i>uint</i> values because that would prohibit the method from being
used by a program written in a language that does not implement the <i>UInt32</i>
data type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Does defining these data types as structures in the .NET
Framework offer any benefits? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Yes. The <i>ToString</i> method defined in the <i>Int32</i>
structure is particularly tailored for formatting integers, for example. Also,
each of the structures for the numeric data types defines public <i>const</i>
fields named <i>MinValue</i> and <i>MaxValue</i>. The <i>Int16</i> structure
defines:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:157.95pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>public const short MinValue = -32768; public const short
MaxValue = 32767; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can refer to these fields in your programs by prefacing
them with the <i>Int16</i> structure name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(Int16.MinValue); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you didnt have a <i>using</i> directive for the <i>System</i>
namespace, this statement would have to be: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>System.Console.WriteLine(System.Int16.MinValue); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can use the fully-qualified name even if you have a <i>using</i>
directive for <i>System</i> namespace. You can also preface the fields with the
<i>short</i> alias: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2in;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(short.MinValue); </span></p>

<h4 style='margin-left:-.25pt'>Boolean Data Types </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# defines a <i>bool</i> data type, which is an alias for
the <i>System.Boolean</i> structure. A <i>bool</i> variable can have one of two
possible values, which are equivalent to the C# keywords <i>true</i> and <i>false</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>One of the naming conventions that has emerged in the .NET
Framework is that Boolean methods and properties often begin with the word <i>Is</i>.
Local fields or variables might begin with a lower-case <i>is</i>, like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>bool isGreatDay = true; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As youll discover in the next chapter, several common C#
operators return <i>bool</i> values. These are the equality operators (== and
!=) and the relational operators (&lt;, &gt;, &lt;=, and &gt;=). You can use
the logical operators (&amp;, |, and ^) and the conditional operators
(&amp;&amp; and ||) with <i>bool</i> values. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.25pt;
margin-left:-.25pt'>The Boolean structure defines a <i>ToString</i> method that
displays the words &#8213;True&#8214; or &#8213;False&#8214;, and a <i>Parse</i>
method that implements a case-insensitive conversion of strings of
&#8213;true&#8214; or &#8213;false&#8214; to <i>bool</i> values. </p>

<h4 style='margin-left:-.25pt'>Character and String Data Type </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Like C and C++, C# defines a data type named <i>char</i>,
but strictly speaking, <i>char</i> is not an integral data type in C#. Although
you can easily convert between <i>char</i> and integral data types, there is no
such thing as a signed <i>char</i> or an unsigned <i>char</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>char</i> data type in C# is an alias for the <i>System.Char</i>
structure. A program can specify a single literal character using single
quotation marks: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>char ch = 'A'; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Converting a <i>char</i> variable to an integer requires
casting: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i = (char) ch; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>In C# the <i>char</i> stores one Unicode character, which
requires 16 bits. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Character variables thus have numeric values from 0x0000 to
0xFFFF. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>As with string literals, the backslash is an escape
character. The following declaration statement initializes the character
variable to the Greek capital omega (&#937;): </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>char omega = '\x03A9'; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Or, you can cast an integer to a <i>char</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>char omega = (char) 0x03A9; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As you know, in C or C++, you can use functions declared in
the ctype.h header file to determine whether a particular character is a
letter, number, control character, or whatever. In C#, you use static methods
defined in the <i>Char</i> structure: <i>IsControl</i>, <i>IsSeparator</i>, <i>IsWhiteSpace</i>,
<i>IsPunctuation</i>, <i>IsSymbol</i>, <i>IsDigit</i>, <i>IsNumber</i>, <i>IsLetter</i>,
<i>IsUpper</i>, <i>IsLower</i>, <i>IsLetterOrDigit</i>, <i>IsSurrogate</i>. These
methods come in two versions, one which has a single parameter of type <i>char</i>,
and the other which accepts a <i>string</i> and an index. The call </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Char.IsControl(str[index]); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>is equivalent to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Char.IsControl(str, index); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>All these method return <i>bool</i> values. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>string</i> data type is an alias for the <i>System.String</i>
class. A string is a consecutive collection of <i>char</i> objects. The <i>Length</i>
property defined by the <i>String</i> class indicates the number of characters
in a string. An indexer obtains individual characters. The <i>String</i> class
defines a multitude of methods for working with strings, which you can explore
on your own. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.85pt;margin-bottom:
1.35pt;margin-left:-.25pt;line-height:126%'>Because strings are immutable, it
is easy to write code that looks very innocent but which is very inefficient.
See Chapter 26 for problems and solutions. <b><span style='font-size:13.0pt;
line-height:126%;font-family:"Arial",sans-serif'>Floating Point </span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Like C and C++, C# supports floating point data types named
<i>float</i> and <i>double</i> that correspond to the single-precision and
double-precision specifications defined in ANSI/IEEI Std 754-1985, the <i>IEEE
Standard for Binary Floating-Point Arithmetic</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:245.9pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>double num1 = 576.34;  float num2 = 34.89f; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>By default, the C# compiler will assume that any numeric
literal with a decimal point is a <i>double</i>. If you want it instead to be a
<i>float</i>, you must use an <i>F</i> or <i>f</i> suffix, as is shown in the
second declaration statement. You can use a <i>D</i> or <i>d</i> suffix to
explicitly indicate a <i>double</i>. At least one digit must be specified after
the decimal point. You can use a capital or lowercase E to indicate an
exponent: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.85pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>double num1 = 5.7634E2;  float num2 = 3489.0e-2f; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>float</i> type is an alias for the <i>System.Single</i>
structure, and the <i>double</i> type is an alias for the <i>System.Double</i>
structure. (Notice that the C# data type is <i>float</i> but the structure is
named <i>Single</i>.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A <i>float</i> value consists of a 24-bit signed mantissa
and an 8-bit signed exponent. The precision is approximately seven decimal
digits. Values range from </p>

<p class=MsoNormal style='margin-top:0in;margin-right:295.15pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:150%'><span style='font-size:
10.0pt;line-height:150%;font-family:Consolas'>-3.402823 × 10<sup>38</sup> </span>to:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:9.05pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>3.402823 × 10<sup>38</sup> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.75pt;
margin-left:-.25pt'>The smallest possible float value greater than 0 is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:9.95pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>1.401298 × 10<sup>-45</sup> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can obtain these three values from the <i>MinValue</i>,
<i>MaxValue</i>, and <i>Epsilon</i> constant fields defined in the <i>Single</i>
structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:4.3pt;
margin-left:-.25pt'>A <i>double</i> value consists of a 53-bit signed mantissa
and an 11-bit signed exponent. The precision is approximately 15 to 16 decimal
digits. Values range from </p>

<p class=MsoNormal style='margin-top:0in;margin-right:247.65pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:152%'><span style='font-size:
10.0pt;line-height:152%;font-family:Consolas'>-1.79769313486232 × 10<sup>308</sup>
</span>to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:9.85pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>1.79769313486232 × 10<sup>308</sup> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:2.8pt;
margin-left:-.25pt'>The smallest possible <i>double</i> value greater than 0
is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:10.85pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>4.9465645841247 × 10<sup>-324</sup> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>MinValue</i>, <i>MaxValue</i>, and <i>Epsilon</i>
fields are also defined in the <i>Double</i> structure.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Implicit casting is allowed from <i>float</i> to <i>double</i>,
and from any integral type to <i>float</i> or <i>double</i>. Explicit casting
is required from <i>double</i> to <i>float</i>, or from <i>double</i> or <i>float</i>
to any integral type. In arithmetical expressions that mix <i>float</i> and
integral types, integers are converted to <i>float</i> for the calculation. If
the expressions involve <i>double</i>, any integers or <i>float</i> values will
be converted to <i>double</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Heres some code that divides a floating-point number by
zero: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:284.45pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>double d1 = 1; double d2 = 0; double d3 = d1 / d2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If these were integers, a <i>DivideByZeroException</i>
would be raised. But these are IEEE floating-point numbers. An exception is not
raised. Floating-point operations <i>never</i> raise exceptions in C#. Instead,
in this case <i>d3</i> takes on a special value. If you use <i>Console.WriteLine</i>
to display <i>d3</i>, it will display the word </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Infinity </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>If you change the initialization of <i>d1</i> to -1, <i>Console.WriteLine</i>
will display: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>-Infinity </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In the IEEE standard, positive infinity and negative
infinity are legitimate values of floating-point numbers. You can even perform
arithmetic on infinite values. For example, the expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:323.3pt;margin-bottom:
.35pt;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>1 / d3 </span>equals
0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you change the initialization of <i>d1</i> in the
preceding code to 0, then <i>d3</i> will equal a value known as <i>Not a Number</i>,
which is abbreviated as <i>NaN</i> and pronounced &#8213;nan.&#8214; Heres how
<i>Console.WriteLine</i> displays a NaN: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>NaN </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can create a NaN by adding positive infinity to
negative infinity or by a number of other calculations. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Both the <i>Single</i> and <i>Double</i> structures have
static methods named <i>IsInfinity</i>, <i>IsPositiveInfinity</i>, <i>IsNegativeInfinity</i>,
and <i>IsNaN</i> to determine whether a particular <i>float</i> or <i>double</i>
value is infinity or NaN. These methods require a floating-point argument and
return a <i>bool</i>. For example, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:80.45pt;margin-bottom:
.15pt;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>Double.IsInfinity(d)
</span>returns <i>true</i> if <i>d</i> is either positive infinity or negative
infinity. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The <i>Single</i> and <i>Double</i> structures also have
constant fields named </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>PositiveInfinity</i>, <i>NegativeInfinity</i>, and <i>NaN</i>
to represent these values. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>These values correspond to specific bit patterns in the IEEE
standard. However, these bit patterns are not unique, so it is not recommended
that you use these fields for comparison operations. For example, even if <i>d</i>
is a NaN, the operation <span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>d == Double.NaN </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>will return <i>false</i> if the bit pattern of <i>d</i>
does not correspond exactly with that of <i>Double.NaN</i>. Use the static
methods for determining the status of particular numbers: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Double.IsNaN(d) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Much confusion surrounds the floating-point remainder
operation. The C# remainder or modulus operator (%) is defined for all numeric
types. (In C, the modulus operator is not defined for <i>float</i> and <i>double</i>,
and the <i>fmod</i> function must be used instead.) Heres a C# statement using
<i>double</i> numbers with the remainder operator: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>result = dividend % divisor; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:19.6pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>The sign of <i>result</i> is the same as the sign of <i>dividend</i>,
and <i>result</i> can be calculated with the formula <span style='font-size:
10.0pt;line-height:115%;font-family:Consolas'>result = dividend  n * divisor </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>where <i>n</i> is the largest possible integer less than or
equal to <i>divided</i> / <i>divisor</i>. For example, the expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:25.85pt;margin-bottom:
3.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>4.5 % 1.25 </span>equals 0.75. (The expression 4.5 /
1.25 equals 3.6, so <i>n</i> equals 3. The quantity 4.5 minus (3 times 1.25)
equals 0.75. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The IEEE standard defines a remainder a little differently,
where <i>n</i> is the integer <i>closest</i> to <i>dividend</i> / <i>divisor</i>.
You can obtain a remainder in accordance with the IEEE standard using the
static <i>Math.IEEERemainder</i> method. The expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
6.35pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>Math.IEEERemainder(4.5, 1.25) </span>equals -0.5.
Thats because 4.5 / 1.25 equals 3.6, and the closest integer to 3.6 is 4. When
<i>n</i> equals 4, the quantity 4.5 minus (4 times 1.25) equals -0.5. </p>

<h4 style='margin-left:-.25pt'>Decimal Data Type </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# also defines a <i>decimal</i> data type that offers
about 28 decimal digits of precision. The <i>decimal</i> is useful for storing
and calculating numbers with a fixed number of decimal points, such as money
and interest rates.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In my book <i>Programming in the Key of C#</i>, I
deliberately covered <i>decimal</i> before floating point. I think its
important for new programmers to use <i>decimal</i> for most applications
involving non-integral data types, particularly when the calculations involve
money. The C and C++ languages were not developed in a tradition that valued
adequate tools for financial applications. The <i>decimal</i> is an attempt to
correct that historical deficiency. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>decimal</i> data type is an alias for the <i>System.Decimal</i>
structure. For <i>decimal</i> more than any of the other numeric data types,
that structure is of vital importance because <i>decimal</i> is not supported
by Common Intermediate Language. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What does that mean? CIL supports integral types and the
two floating point types directly, but not the <i>decimal</i> type. When you
write C# code to multiply two <i>double</i> values, for example, the C#
compiler generates intermediate language to push the two values on the stack,
followed by a CIL <i>mul</i> instruction. At runtime, this intermediate
language is converted into machine code that uses the math coprocessor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But there is no CIL <i>mul</i> instruction for <i>decimal</i>.
Instead, <i>decimal</i> is supported almost entirely through the <i>System.Decimal</i>
structure. When you write C# code to multiply two <i>decimal</i> numbers, the
multiplication is actually performed by the <i>op_Multiply</i> method defined
by the <i>Decimal</i> structure. (This method name refers to an overload of the
multiplication operator defined by the <i>Decimal</i> class. I discuss operator
overloading in Chapter 20.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Although the CIL does not directly support the <i>decimal</i>
data type, it is nonetheless part of the Common Language Specification. A .NET
language must support the <i>Decimal</i> structure, but this support can be
fairly minimal. In C#, it amounts to little more than recognizing decimal
literals, which are denoted with an <i>m</i> or <i>M</i> suffix: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m = 55.23m; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Leaving out the <i>m</i> will result in a compile error.
The literal will be assumed to be a <i>double</i>, and there are no implicit
conversions between the floating point types and <i>decimal</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Calculations involving <i>decimal</i> cannot be controlled
using the <i>checked</i> and <i>unchecked</i> keywords or the related compiler
switch. Calculations that result in overflow or underflow always raise an <i>OverflowException</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>decimal</i> type uses 16 bytes (128 bits) to store
each value, which is twice as many bits as the <i>double</i>. The 128 bits
break down into a 96-bit integral part, a 1-bit sign, and a scaling factor that
can range from 0 through 28. (Twenty-six bits are unused.) Mathematically, the
scaling factor is a negative power of 10 and indicates the number of decimal
places in the number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:6.8pt;
margin-left:-.25pt'>Dont confuse the decimal type with a binary-coded decimal
(BCD) type found in some programming languages. A BCD type stores each decimal
digit using 4 bits. The <i>decimal</i> type stores the entire number in binary.
For example, a decimal equal to 12.34 is stored as the integer 0x4D2 (or
decimal 1,234) with a scaling factor of 2, which denotes a multiplication by 10<sup>-2</sup>.
A BCD encoding of 12.34 would store the number as 0x1234. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>As long as a number has 28 significant decimal digits (or
fewer) and 28 decimal places (or fewer), the <i>decimal</i> data type stores
the number exactly. This is not true with floating point! If you define a <i>float</i>
equal to 12.34, its essentially stored as the value 0xC570A4 (or 12,939,428)
divided by 0x100000 (or 1,048,576), which is only <i>approximately</i> 12.34. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Even if you define a <i>double</i> equal to 12.34, its
stored as the value </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>0x18AE147AE147AE (or 6,946,802,425,218,990) divided by
0x2000000000000 (or 562,949,953,421,312), which again only approximately equals
12.34. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And thats why you should use <i>decimal</i> when youre
performing calculations where you dont want pennies to mysteriously crop up
and disappear. The floating-point data types are great for scientific and
engineering applications but often undesirable for financial ones. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Implicit conversions are allowed from all the integer types
to <i>decimal</i>, and its easy to see why. Explicit casts are required going
the other way, and a runtime <i>OverflowException</i> will result if the
decimal number is too large to fit in the destination integral type. Explicit
casts are required from either floating-point type to <i>decimal</i> because
the exponents of floatingpoint allow values unrepresentable by <i>decimal</i>.
Explicit casts are also required for conversions from <i>decimal</i> to either
floating-point type because <i>decimal</i> allows greater precision. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>decimal</i> type also includes constructors that
accept an integral or floating-point data type. These are mostly for languages
that dont explicitly support <i>decimal</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If you want to explore <i>decimal</i> a bit, you can make
use of another constructor that lets you put together a <i>decimal</i> from its
constituent parts: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m = new decimal(low, middle, high, isNegative, scale); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The first three arguments are defined as <i>int</i> but are
treated as if they were unsigned integers. (If they were defined as unsigned
integers, this constructor wouldnt be CLS compliant.) The three 32-bit values
become the 96-bit integral part of the <i>decimal</i>. The <i>isNegative</i>
parameter is a <i>bool</i> indicating if the number is negative. The <i>scale</i>
argument can range from 0 to 28 to indicate the number of decimal points. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:201.95pt;margin-bottom:
2.05pt;margin-left:.5in;text-indent:-.5in;line-height:152%'>The expression <span
style='font-size:10.0pt;line-height:152%;font-family:Consolas'>new
decimal(1234567, 0, 0, false, 5) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.85pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>creates the <i>decimal</i> number 12.34567. The largest
positive <i>decimal</i> number is <span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>new decimal(-1, -1, -1, false, 0) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>or 79,228,162,514,264,337,593,543,950,335, which you can
also obtain from the <i>Decimal.MaxValue</i> field. The smallest decimal number
closest to </p>

<p class=MsoNormal style='margin-top:0in;margin-right:25.1pt;margin-bottom:
3.5pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>0 is  <span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>new decimal(1, 0, 0, false, 28) </span>or
0.0000000000000000000000000001 or 1 × 10<sup>-28</sup>. If you divide this
number by 2 in a C# program, the result is 0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>It is also possible to obtain the bits used to store a <i>decimal</i>
value using the static <i>GetBits</i> method. This method returns an array of
four integers. To get the four <i>int</i> values that make up a <i>decimal</i>,
you need to declare an array of type <i>int</i> and call <i>Decimal.GetBits</i>
with a <i>decimal</i> argument: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int[] A = Decimal.GetBits(m); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The first, second, and third elements of the array (that
is, <i>A[0]</i>, <i>A[1]</i>, and <i>A[2]</i>) are the low, medium, and high
components of the 96-bit unsigned integer.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The fourth element contains the sign and the scaling
factor. Bits 0 through 15 are 0; bits 16 through 23 contains a scaling factor
between 0 and 28; bits 24 through 30 are 0; and bit 31 is 0 for positive and 1
for negative. In other words, if <i>A[3]</i> is negative, the decimal number is
negative. The scaling factor is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>(A[3] &gt;&gt; 16) &amp; 0xFF </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>Almost everyone who has worked extensively with
floating-point can recall incidences in which a calculated number that should
have been 4.55 (for example) is often stored as 4.549999 or 4.550001. The <i>decimal</i>
representation is much better behaved. Suppose <i>m1</i> is defined like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m1 = 12.34m; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Internally <i>m1</i> has an integer part of 1234 and a
scaling factor of 2. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Suppose <i>m2</i> is defined like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m2 = 56.789m; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The integer part is 56789 and the scaling factor is 3. Now
add these two numbers: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m3 = m1 + m2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Conceptually, the integer part of <i>m1</i> is multiplied
by 10 (to get 12340), and the scaling factor is set to 3. Now the integer parts
can be added directly: 12340 plus 56789 equals 69129 with a scaling factor of
3. The actual number is 69.129. Everything is exact. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Now multiply the two numbers: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m4 = m1 * m2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The two integral parts are multiplied (1234 times 56789
equals 70,776,626), and the scaling factors are added (2 plus 3 equals 5). The
actual numeric result is 700.77626. Again, the calculation is exact. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>When dividing well, division is messy no matter how you do
it. But for the most part, when using <i>decimal</i>, you can have much greater
confidence in the precision and accuracy of your results. </p>

<h4 style='margin-left:-.25pt'>Math Class </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:22.2pt;
margin-left:-.25pt'>The <i>Math</i> class in the <i>System</i> namespace
consists entirely of a collection of static methods and the two constant
fields. The two fields of type <i>double</i> are named <i>PI</i> and <i>E</i>. <i>Math.PI</i>
is the ratio of the circumference of a circle to its diameter, or
3.14159265358979. <i>Math.E</i> is the limit of  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:37.35pt;line-height:107%'><span style='font-family:"Segoe UI Symbol",sans-serif'>&#61670;&#61671;</span><span
style='font-family:"Times New Roman",serif'>1</span><span style='font-family:
"Segoe UI Symbol",sans-serif'>&#61483; </span><span style='font-size:11.0pt;
line-height:107%;font-family:"Calibri",sans-serif'><img border=0 width=11
height=1 id="Group 307516"
src="What%20the%20C%20or%20CPlusPlus%20Programmer%20Needs%20to%20Know%20about%20C%23%20and%20the%20DotNET%20Framework_files/image001.gif"></span><span
style='font-family:"Times New Roman",serif'>1</span><span style='font-family:
"Segoe UI Symbol",sans-serif'>&#61686;&#61687;</span><i><sup><span
style='font-size:11.0pt;line-height:107%;font-family:"Times New Roman",serif'>n</span></sup></i><sub><span
style='font-size:18.5pt;line-height:107%'> </span></sub></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.15pt;
margin-left:37.35pt;line-height:107%'><span style='font-family:"Segoe UI Symbol",sans-serif'>&#61672;
</span><i><span style='font-family:"Times New Roman",serif'>n</span></i><span
style='font-family:"Segoe UI Symbol",sans-serif'>&#61688;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>as <i>n</i> approaches infinity, or 2.71828182845905. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Most of the methods in the <i>Math</i> class are defined
only for <i>double</i> values. However, some methods are defined for integer
and <i>decimal</i> values as well. The <i>Max</i> and <i>Min</i> methods both
accept two arguments of the same numeric type and return the maximum or
minimum, respectively. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Abs</i> and <i>Sign</i> methods are defined for
floating-point types, <i>decimal</i> types, and signed integer types. The <i>Abs</i>
method returns the absolute value of the argument. The <i>Sign</i> method
returns an <i>int</i>: 1 if the argument is positive, 1 if the argument is
negative, and 0 if the argument is 0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Abs</i> method is the only method of the <i>Math</i>
class that can raise an exception, and then only for integral arguments, and
only for one particular value of each integral type, namely the value stored in
the <i>MinValue</i> field. The method call: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>short s = Math.Abs(Int16.MinValue); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>raises an <i>OverflowException</i> because <i>Int16.MinValue</i>
is 32,768 and 32,768 cant be represented by a <i>short</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>BigMul</i> and <i>DivRem</i> methods were introduced
in .NET 2.0 and are defined for integers. <i>BigMul</i> accepts two <i>int</i>
arguments and returns a <i>long</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>long l = Math.BigMul(i1, i1); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>You can get the same result if you first cast one of the
arguments to a <i>long</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>long l = (long)i1 * i2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>DivRem</i> method is defined for both <i>int</i> and
<i>long</i>. In both cases, it has three arguments and one return value of the
same type. The return value is the integer division of the first two arguments.
The third argument receives the remainder. For example, if <i>a</i>, <i>b</i>, <i>c</i>,
and <i>d</i> are all defined as <i>int</i> (or all defined as <i>long</i>) then
you call <i>DivRem</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>c = Math.DivRem(a, b, out d); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>a</i> and <i>b</i> variables must be initialized
before calling the method, but <i>d</i> does not. The <i>c</i> variable
receives the result of the integer division, and <i>d</i> get the remainder.
Notice the <i>out</i> keyword that indicates that <i>d</i> is being passed by
reference to the method and then set from the method. Ill have more to say
about <i>out</i> in Chapter 11. The <i>DivRem</i> method is functionally
identical to the code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:334.0pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>c = a / b; d = a % b; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>Floor</i> and <i>Ceiling</i> methods are defined for
<i>double</i> arguments only. <i>Floor</i> returns the largest whole number
less than or equal to the argument. <i>Ceiling</i> returns the smallest whole
number greater than or equal to the argument. The call </p>

<p class=MsoNormal style='margin-top:0in;margin-right:268.3pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Floor(3.5) </span>returns 3,
and  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.0pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>Math.Ceiling(3.5)
</span>returns 4. The same rules apply to negative numbers. The call </p>

<p class=MsoNormal style='margin-top:0in;margin-right:262.75pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Floor(-3.5) </span>returns
4, and  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:251.75pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Ceiling(-3.5) </span>returns
3.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Floor</i> method returns the nearest whole number in
the direction of negative infinity, and thats why its sometimes also known as
&#8213;rounding toward negative infinity&#8214;; likewise, <i>Ceiling</i> is
sometimes known as &#8213;rounding toward positive infinity.&#8214;  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Its also possible to round toward 0, which is to obtain
the nearest whole number closest to 0. You round toward 0 by casting to an
integer. The expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:301.3pt;margin-bottom:
.1pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:140%'><span style='font-size:10.0pt;line-height:
140%;font-family:Consolas'>(int) 3.5 </span>returns 3, and  <span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>(int) -3.5 </span>returns
3. Rounding toward 0 is commonly known as &#8213;truncation.&#8214;  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Round</i> method is defined for both <i>double</i>
and <i>decimal</i>. The version with a single argument returns the whole number
nearest to the argument. If the argument to <i>Round</i> is midway between two
whole numbers, the return value is the nearest even number. For example, the
call </p>

<p class=MsoNormal style='margin-top:0in;margin-right:268.3pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>Math.Round(4.5) </span>returns 4,
and </p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.15pt;margin-bottom:
5.5pt;margin-left:-.75pt;text-indent:.5in'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>Math.Round(5.5) </span>returns 6.
Although the return value is always a whole number, the type of the return
value is the same as the type of the argument (<i>double</i> or <i>decimal</i>).
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you prefer the convention where numbers ending in .5
always round up, add 0.5 to the number you wish to round and truncate. Or, you
can use one of the new overloads of <i>Round</i> introduced in .NET 2.0 that
have an enumeration argument: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:130.75pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Round(4.5,
MidpointRounding.ToEven) </span>returns 4 but </p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.8pt;margin-bottom:
3.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>Math.Round(4.5, MidpointRounding.AwayFromZero) </span>returns
5. These enumeration values only affect the result when the number is midway
between two integers. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can optionally supply an integer to <i>Round</i> that
indicates the number of decimal places in the return value. For example, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:17.6pt;margin-bottom:
1.6pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>Math.Round(5.285, 2) </span>returns 5.28.  And in
.NET 2.0 and later you can supply an integer and an enumeration value. The call
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.25pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>Math.Round(5.285, 2,
MidpointRounding.AwayFromZero) </span>returns 5.29. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Three methods of the <i>Math</i> class involve powers. The
first is <i>Pow</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:257.5pt;margin-bottom:
1.65pt;margin-left:0in;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>Math.Pow(base,
power) </span>The method returns: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.75pt;
margin-left:0in;text-indent:0in;line-height:107%'>          <i><span
style='font-family:"Times New Roman",serif'>base</span></i><i><span
style='font-size:7.0pt;line-height:107%;font-family:"Times New Roman",serif'>power</span></i>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The method returns <i>NaN</i>, <i>NegativeInfinity</i>, or <i>PositiveInfinity</i>
in some cases. See the documentation for details. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>The expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:302.15pt;margin-bottom:
5.5pt;margin-left:-.75pt;text-indent:.5in;line-height:139%'><span
style='font-size:10.0pt;line-height:139%;font-family:Consolas'>Math.Exp(power) </span>is
equivalent to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:245.6pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Pow(Math.E, power) </span>and
the expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:296.6pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>Math.Sqrt(value)
</span>is equivalent to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Math.Pow(value, 0.5) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>Math</i> class has three methods that calculate
logarithms. The expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:291.1pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Log10(value) </span>is
equivalent to </p>

<p class=MsoNormal style='margin-top:0in;margin-right:267.55pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Math.Log(value, 10) </span>and </p>

<p class=MsoNormal style='margin-top:0in;margin-right:302.15pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>Math.Log(value) </span>is
equivalent to  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Math.Log(value, Math.E); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The three basic trigonometric functions <i>Math.Sin</i>, <i>Math.Cos</i>,
and <i>Math.Tan</i> require that angles be specified in radians. There are
2&#960; radians in 360 degrees. If <i>angle</i> is in degrees, call <i>Math.Sin</i>
like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Math.Sin(Math.PI * angle / 180) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Math.Sin</i> and <i>Math.Cos</i> methods return
values ranging from 1 to 1. In theory, the <i>Math.Tan</i> method should
return infinity at &#960;/2 (90 degrees) and 3&#960;/2 (270 degrees) but it
returns very large values instead. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The inverse trigonometric functions return angles in
radians. The following table shows the return values for proper ranges of
arguments: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=422
 style='width:316.85pt;margin-left:.8in;border-collapse:collapse'>
 <tr style='height:20.5pt'>
  <td width=148 valign=top style='width:111.25pt;border:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Method
  </b></p>
  </td>
  <td width=118 valign=top style='width:88.6pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Argument
  </b></p>
  </td>
  <td width=156 valign=top style='width:117.0pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Return
  Value </b></p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=148 valign=top style='width:111.25pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Math.Asin(value) </p>
  </td>
  <td width=118 valign=top style='width:88.6pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>1 through 1 </p>
  </td>
  <td width=156 valign=top style='width:117.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>&#960;/2 through &#960;/2 </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=148 valign=top style='width:111.25pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Math.Acos(value) </p>
  </td>
  <td width=118 valign=top style='width:88.6pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>1 through 1 </p>
  </td>
  <td width=156 valign=top style='width:117.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&#960;
  through 0 </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=148 valign=top style='width:111.25pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Math.Atan(value) </p>
  </td>
  <td width=118 valign=top style='width:88.6pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>&#8734; through &#8734; </p>
  </td>
  <td width=156 valign=top style='width:117.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>&#960;/2 through &#960;/2 </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=148 valign=top style='width:111.25pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Math.Atan(y,
  x) </p>
  </td>
  <td width=118 valign=top style='width:88.6pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>&#8734; through &#8734; </p>
  </td>
  <td width=156 valign=top style='width:117.0pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&#960;
  through &#960; </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To convert the return value to degrees, multiply by 180 and
divide by &#960;. The <i>Asin</i> and <i>Acos</i> methods return NaN if the
argument is not in the proper range. The <i>Atan2</i> method uses the sign of
the two arguments to determine the quandrant of the angle: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=368
 style='width:276.05pt;margin-left:78.0pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=112 valign=top style='width:84.05pt;border:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>y Argument </b></p>
  </td>
  <td width=112 valign=top style='width:83.75pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>x Argument </b></p>
  </td>
  <td width=144 valign=top style='width:108.25pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Return
  Value </b></p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=112 valign=top style='width:84.05pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Positive
  </p>
  </td>
  <td width=112 valign=top style='width:83.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Positive
  </p>
  </td>
  <td width=144 valign=top style='width:108.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0
  through &#960;/2 </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=112 valign=top style='width:84.05pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Positive
  </p>
  </td>
  <td width=112 valign=top style='width:83.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Negative
  </p>
  </td>
  <td width=144 valign=top style='width:108.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&#960;/2
  through &#960; </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=112 valign=top style='width:84.05pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Negative
  </p>
  </td>
  <td width=112 valign=top style='width:83.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Negative
  </p>
  </td>
  <td width=144 valign=top style='width:108.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>&#960; through &#960;/2 </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=112 valign=top style='width:84.05pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Negative
  </p>
  </td>
  <td width=112 valign=top style='width:83.75pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Positive
  </p>
  </td>
  <td width=144 valign=top style='width:108.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&#960;/2
  through 0 </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Less commonly used are the hyperbolic trigonometric
functions <i>Math.Sinh</i>, <i>Math.Cosh</i>, and <i>Math.Tanh</i>. Angle
arguments are in hyperbolic radians. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.9pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:4.2pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369921">Chapter 7. Operators and Expressions </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following table is so important that you might want to
print out an extra copy of this page: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=553
 style='width:414.45pt;margin-left:-5.4pt;border-collapse:collapse'>
 <tr style='height:31.3pt'>
  <td width=553 colspan=3 style='width:414.45pt;border:solid black 1.0pt;
  padding:8.9pt 1.45pt 0in 5.4pt;height:31.3pt'>
  <p class=MsoNormal align=center style='margin-top:0in;margin-right:4.4pt;
  margin-bottom:0in;margin-left:0in;text-align:center;text-indent:0in;
  line-height:107%'><b><span style='font-size:16.0pt;line-height:107%'>Operator
  Precedence and Associativity </span></b></p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Category
  </b></p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Operators
  </b></p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>Associativity </b></p>
  </td>
 </tr>
 <tr style='height:46.7pt'>
  <td width=146 valign=top style='width:109.2pt;border:solid black 1.0pt;
  border-top:none;padding:8.9pt 1.45pt 0in 5.4pt;height:46.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Primary
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:46.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>(x) 
  x.y  f(x)  a[x]  x++  x--  new typeof  sizeof  checked  unchecked </p>
  </td>
  <td width=123 valign=top style='width:92.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:8.9pt 1.45pt 0in 5.4pt;height:46.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Unary </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>+  - 
  !  ~  ++x  --x  (T)x </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Multiplicative
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>*  / 
  % </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Additive
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>+  - </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Shift </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&lt;&lt; 
  &gt;&gt; </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Relational
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&lt; 
  &gt;  &lt;=  &gt;=  is  as </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.55pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Equality
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>==  !=
  </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Logical
  AND </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&amp; </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Logical
  XOR </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>^ </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Logical
  OR </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>| </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>Conditional AND </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&amp;&amp;
  </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Conditional
  OR </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>|| </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Left
  to right </p>
  </td>
 </tr>
 <tr style='height:26.65pt'>
  <td width=146 style='width:109.2pt;border:solid black 1.0pt;border-top:none;
  padding:8.9pt 1.45pt 0in 5.4pt;height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Conditional
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>?: </p>
  </td>
  <td width=123 style='width:92.05pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:26.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Right
  to left </p>
  </td>
 </tr>
 <tr style='height:46.7pt'>
  <td width=146 valign=top style='width:109.2pt;border:solid black 1.0pt;
  border-top:none;padding:8.9pt 1.45pt 0in 5.4pt;height:46.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Assignment
  </p>
  </td>
  <td width=284 style='width:213.15pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:8.9pt 1.45pt 0in 5.4pt;
  height:46.7pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
  margin-left:0in;text-indent:0in;line-height:107%'>=  *=  /=  %=  +=  -=   </p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&lt;&lt;= 
  &gt;&gt;=  &amp;=  ^=  |=  ?? </p>
  </td>
  <td width=123 valign=top style='width:92.05pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:8.9pt 1.45pt 0in 5.4pt;height:46.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Right
  to left </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Veteran C programmers will recognize this as a variation of
a table on page 49 in the first edition of Brian Kernighan and Dennis Ritchies
<i>The C Programming Language</i> (Prentice-Hall, 1978). The C# version of the
table appears in §7.2.1 of the<i> C# Language Specification</i>. The comma
operator in C and C++ is not supported in C#. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>When working with C#, it is advantageous to think in terms
of operators and expressions rather than statements. Operators are generally
symbols or small words that cause changes to variables, or which use the values
of a variable or multiple variables to produce a single result. An expression
involves one or more operators. For example,  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.4pt;margin-bottom:3.9pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
.5in;line-height:115%'><span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>A + B </span>is an expression. Its not a statement, even
if you put a semicolon after it. (C# doesnt allow the addition operator to be
used by itself as a statement because the statement doesnt do anything.) The
table shown above indicates how the C# compiler evaluates complex expressions. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>For example, if you mix a multiplicative operator and an
additive operator in the same statement, the multiplicative operator will be
evaluated first. In the statement </p>

<p class=MsoNormal style='margin-top:0in;margin-right:126.3pt;margin-bottom:
.1pt;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>C = A + B * 5; </span>the
multiplication occurs first and then the addition.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If two operators have the same precedence, then the order
is governed by the associativity. For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>C = A / B * 5; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Both are multiplicative operators. The division occurs
first, followed by the multiplication. All associativity is left to right
except for the conditional and assignment operators. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If the default precedence and associativity is not what you
want, you can use parentheses to change it: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>C = (A + B) * 5; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now the addition occurs first. The pair of parentheses is
considered an operator, and it is the first operator listed in the Primary
operators row. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Approaching C# in terms of expressions and operators is
helpful in understanding whats going on here: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(C = A + B); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.35pt;
margin-left:-.25pt'>Some languages wont let you do that because assignment is
not considered an operator like the plus sign. (Visual Basic .NET, for example,
will interpret the equal sign as an equality operator.) In C#, the addition is
evaluated first. As you can see in the chart, Additive operators have higher
precedence than Assignment operators. The result of the addition operation then
becomes the right hand side of the assignment operation. The equal sign sets
the variable on the left equal to the value on the right. Alsoand this is
crucial in the examplethe assignment operation has a result, and that result
is the new value of the variable on the left. That result is the value passed
to the <i>Console.WriteLine</i> method. </p>

<h4 style='margin-left:-.25pt'>Primary Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youve already seen many of the operators in the first row
of the table: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <b>(x)</b> operator symbolizes parentheses, which can
surround an expression to change the order of precedence or associativity.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <b>x.y</b> operator symbolizes the period, which youve
seen separate namespace names, class and structure names, and method, field,
and property names.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <b>f(x)</b> operator symbolizes method calls (where
&#8215;f stands for &#8213;function,&#8214; of course).  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <b>a[x]</b> operator symbolizes array access and
indexing, such as with strings. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <b>x++</b> and <b>x--</b> operators symbolize the
post-increment and postdecrement operators. The variable is incremented or
decremented, but only after the variable is used in an expression. For example,
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int A = 55; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:152.4pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.WriteLine(A++); Console.WriteLine(A); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The first <i>Console.WriteLine</i> displays 55 because
thats the value before the incrementation. The second <i>Console.WriteLine</i>
displays 56. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>Youve also seen the <b>new</b> operator, as well as <b>checked</b>
and <b>unchecked</b>. Ill discuss <b>typeof</b> in Chapter 19. I wont be
discussing <b>sizeof</b> in this book. </p>

<h4 style='margin-left:-.25pt'>Unary Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>These operators are called &#8213;unary&#8214; because they
have only one argument, which always appears to the right of the operator. The <b>+</b>
operator is defined for all numeric types but normally does nothing. For
example, the expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:53.35pt;margin-bottom:
5.5pt;margin-left:-.75pt;text-indent:.5in'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>+A </span>is just <i>A</i>. However, the
operator could be overridden by a class or structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The result of the <b></b> operator is the negative of a
number. (The operator doesnt change the variable itself.)  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <b>!</b> operator is logical negation and is defined
only for <i>bool</i>. When applied to a <i>true</i> value, the result is <i>false</i>,
and when applied to <i>false</i>, the result is <i>true</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <b>~</b> is the bitwise complement operator and is
defined only for <i>int</i>, <i>uint</i>, <i>long</i>, and <i>ulong</i>. The
operator results in an integer of the same type in which all the bits have been
flipped from 0 to 1, and from 1 to 0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The pre-increment and post-increment operators are
symbolized by <b>++x</b> and <b>--x</b>. The variable is incremented or
decremented, and thats also the result of the operation. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>The operator <b>(T)x</b> symbolizes casting. C# is much
stricter than C with regard to casting. If you need to convert from one data
type to another beyond what C# allows, the <i>Convert</i> class (defined in the
<i>System</i> namespace) provides many methods that probably do what you want. 
</p>

<h4 style='margin-left:-.25pt'>Multiplicative and Arithmetic Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>The multiplicative and arithmetic operators are defined for
all numeric data types. The addition operator is also defined for <i>string</i>.
Unlike C and C++, the remainder operator is defined for <i>float</i> and <i>double</i>,
as I discussed in the previous chapter. </p>

<h4 style='margin-left:-.25pt'>Shift Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The shift operators shift an integer (on the left of the
operator) by a specified number of bits (the operand on the right). The <b>&lt;&lt;</b>
operator is a left shift; the <b>&gt;&gt;</b> operator is a right shift. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The operand on the left must be an <i>int</i>, <i>uint</i>,
<i>long</i>, or <i>ulong</i>. The operand on the right must be an <i>int</i>.
When shifting an <i>int</i> or <i>uint</i>, only the bottom 5 bits of the
operand on the right are used; when shifting a <i>long</i> or <i>ulong</i>,
only the bottom 6 bits of the right operand are used. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>When an <i>int</i> or <i>long</i> is shifted right, the
shift is arithmetic. That is, the vacated high-order bits are set to the sign
bit.  </p>

<h4 style='margin-left:-.25pt'>Relational Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The first four relational operators, <b>&lt;</b>, <b>&gt;</b>,
<b>&lt;=</b>, and <b>&gt;=</b> are defined for all numeric types and return a <i>bool</i>
value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.15pt;
margin-left:-.25pt'>The two type-testing operators <i>is</i> and <i>as</i> will
be discussed in Chapter 19. </p>

<h4 style='margin-left:-.25pt'>Equality Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The two equality operators <b>==</b> and <b>!=</b> are
defined for all numeric types. They return a <i>bool</i> value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There are some special considerations for the equality
operators, which I discuss in Chapter 16. For now, you might be pleased to know
that the equality operators work with <i>string</i> objects. Two strings are
considered equal if they have the same length and corresponding characters. The
comparison is case-sensitive. Other types of comparisons are possible with
methods defined by the <i>String</i> class. </p>

<h4 style='margin-left:-.25pt'>Logical Operators and Conditional Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I want to discuss the two AND and OR operators in some
detail because they can cause some confusion among C and C++ programmers. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <b>&amp;</b>, <b>^</b>, and <b>|</b> operators are
termed the <i>logical</i> AND, XOR, and OR. (In C, these are called the <i>bitwise</i>
operators.) In C# these operators are defined for both integral data types and <i>bool</i>.
For integral data types, they function as bitwise operators, the same as in C.
For example, the expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:278.75pt;margin-bottom:
.35pt;margin-left:-.75pt;text-indent:.5in;line-height:139%'><span
style='font-size:10.0pt;line-height:139%;font-family:Consolas'>0x03 | 0x05 </span>evaluates
as 0x07.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For <i>bool</i> data types, the logical operators evaluate
to a <i>bool</i> result. The result of the logical AND operator is <i>true</i>
only if both operands are <i>true</i>. The result of the logical XOR is <i>true</i>
only if one operand is <i>true</i> and the other is <i>false</i>. The result of
the logical OR is <i>true</i> if either of the operands is <i>true</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In C, the <b>&amp;&amp;</b> and <b>||</b> operators are
known as <i>logical</i> operators. In C#, theyre termed <i>conditional</i> AND
and OR, and they are defined only for <i>bool</i> data types. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>C programmers are accustomed to using the &amp;&amp; and ||
operators in expressions like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A != 0 &amp;&amp; B &gt; 5 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C programmers also know that if the first expression
evaluates as <i>false</i> (that is, if A equal 0), then the second expression
isnt evaluated. Its important to know this because the second expression
could involve an assignment or a function call. Similarly, when you use the ||
operator, the second expression isnt evaluated if the first expression is <i>true</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In C# you use the &amp;&amp; and || operators in the same
way you use them in C. These operators are called the <i>conditional</i> AND
and OR because the second operand is evaluated only if necessary. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In C#, you can use the &amp; and | operators in the same
way as &amp;&amp; and ||, as in this example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A != 0 &amp; B &gt; 5 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When you use the &amp; and | operators in this way in C#,
both expressions are evaluated regardless of the outcome of the first
expression. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The statement using &amp; rather than &amp;&amp; is
certainly legal in C, and it works the same way as in C#, but most C
programmers would probably write such a statement only in error. The statement
looks wrong to many C programmers because theyve trained themselves to treat
the &amp; as the bitwise AND and the &amp;&amp; as the logical AND. But in C
the result of a relational or logical expression is an <i>int</i> that has a
value of 1 if the expression is <i>true</i> and 0 otherwise. Thats why the
bitwise AND operation works here. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>A C programmer might make the original statement involving
the &amp;&amp; operator a little more concise by writing it like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A &amp;&amp; B &gt;= 5 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This works fine in C because C treats any nonzero
expression as being <i>true</i>. In C#, however, this statement is illegal
because the &amp;&amp; operator is defined only for <i>bool</i> data types. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Where the C programmer gets into big trouble is using the
bitwise AND operator in the shortened form of the expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A &amp; B &gt;= 5 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>B</i> equals 7, then the expression on the right is
evalulated as the value 1. If <i>A</i> is equal to 1 or 3 or any odd number,
then the bitwise AND operation yields 1 and the total expression evaluates as <i>true</i>.
If A is 0 or 2 or any even number, then the bitwise AND operation yields 0 and
the total expression evalulates as <i>false</i>. Its likely that none of these
results are what the programmer intended, and this is precisely why the C
programmer has such a distressed reaction to seeing bitwise AND and OR
operators in logical expressions. (In C# this statement is illegal because
integers and <i>bool</i> values cant be mixed in the logical AND, XOR, and OR
statements.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Suppose you have an integer variable named <i>year</i> and
you wish to calculate a <i>bool</i> named <i>isLeapYear</i>. Leap years are
generally those years divisible by 4, except that years divisible by 100 are
not leap years, except if the year is also divisible by 400. You could do it
this way: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:10.0pt;
line-height:140%;font-family:Consolas'>bool isLeapYear = year % 4 == 0
&amp;&amp; (year % 100 != 0 || year % 400 == 0); </span>The first expression to
be evaluated is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>year % 4 == 0 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.15pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>That expression will be <i>true</i> only if year is equally
divisible by 4. The expression <span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>year &amp; 3 == 0 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>would also do the job. The single ampersand is a bitwise
AND in this expression, and the result is 0 only if <i>year</i> is equally
divisible by 4. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Either way, three-quarters of all years are eliminated
immediately. Because the next operator is a conditional AND, the rest of the
expression doesnt even get evaluated for three-quarters of all years. The
remainder of the expression is enclosed in parentheses: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>(year % 100 != 0 || year % 400 == 0) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>This expression is evaluated only if <i>year</i> is
divisible by 4. It is intended to eliminate those years divisible by 100 but
not divisible by 400. This expression is <i>true</i> if <i>year</i> is
divisible by 400, or if <i>year</i> is not divisible by 100. </p>

<h4 style='margin-left:-.25pt'>Conditional Operator </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The conditional operator, which is symbolized by <b>?:</b>
in the table, is the only ternary operator, which means it has three operands: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A ? B : C </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The expression <i>A</i> must resolve to a <i>bool</i>. The
result of the operation is <i>B</i> if <i>A</i> is <i>true</i>, and <i>C</i> if
<i>A</i> is <i>false</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>The use of this operator is customarily restricted to
special occasions, such as this code that appends an &#8215;s to some text
only if the value being displayed is not equal to 1: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:75.65pt;margin-bottom:
14.55pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.WriteLine(&quot;Please deposit {0}
dollar{1}.&quot;,                   dollars, dollars == 1 ? '' : 's'); </span></p>

<h4 style='margin-left:-.25pt'>Assignment Operators </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Assignment is a binary operation, and the result of an
assignment expression is the value being assigned. Assignment is evaluated
right to left, making possible statements like this one: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5pt;margin-bottom:7.55pt;
margin-left:28.3pt;text-indent:-11.05pt'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>A<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span><span style='font-size:10.0pt;line-height:103%;font-family:Consolas'>=
B = 3; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5pt;margin-bottom:5.5pt;
margin-left:28.3pt;text-indent:-11.05pt'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>B<span style='font:7.0pt "Times New Roman"'>&nbsp;
</span></span>is assigned the value 3, and that is also the result of the
assignment expression. That result is then assigned to <i>A</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Like C and C++, C# also supports the popular compound
assignment operators for addition, subtraction, multiply, divide, remainder,
shift, and AND, OR, and XOR in both their bitwise and logical interpretations. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The final operator listed in the table is <b>??</b>, called
the <i>null coalescing operator</i>, which Ill describe in Chapter 27. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:3.9pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369922">Chapter 8. Selection and Iteration </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>C# supports the same selection, iteration, and flow control
statements used in C and C++, but generally with some restrictions. These
restrictions are not severe and generally are intended to help you avoid common
coding bugs. In this chapter Ill discuss statements built around the <i>if</i>,
<i>else</i>, <i>switch</i>, <i>case</i>, <i>default</i>, <i>do</i>, <i>while</i>,
<i>for</i>, <i>foreach</i>, <i>in</i>, <i>break</i>, <i>continue</i>, and <i>goto</i>
keywords. </p>

<h4 style='margin-left:-.25pt'>Selection Statements </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The basic selection statement involves the <i>if</i> and <i>else</i>
keywords. The keyword <i>if</i> must be followed by a Boolean expression in
parentheses. The statement that follows is executed if the Boolean expression
resolves to <i>true</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.9pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>if (a &lt; 5)     b += 27; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The requirement that the parentheses contain a Boolean
expression eliminates a whole class of common C bugs. Almost every C and C++
programmer has committed the common pitfall of mistakenly using an assignment
as the test expression when a comparison was intended: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (a = 5) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The C# compiler flags this statement as an error, and
youll probably be thankful it does. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:35.3pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>Of course, no compiler can offer full protection against
programmer sleepiness. In one early C# program I wrote, I defined a <i>bool</i>
variable named <i>trigger</i>, but instead of writing the statement  <span
style='font-size:10.0pt;line-height:115%;font-family:Consolas'>if (trigger) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>for some reason I wanted to be a little more explicit and
wanted to type this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (trigger == true) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Instead, I typed this instead: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (trigger = true) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>trigger</i> is defined as a <i>bool</i> this is a
perfectly valid statement in C# but obviously didnt do what I wanted. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If more than one statement should be executed, you can
group them as a block of statements in curly brackets: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>if (a &lt; 5) {     b += 27;     c = 0; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Some programmers prefer putting the first curly bracket at
the end of the line containing the <i>if</i> keyword; thats allowed, of
course.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The <i>if</i> statement can include an <i>else</i> clause: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.9pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>if (a &lt; 5)     b += 27; else     b -= 7; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Even if the <i>if</i> or <i>else</i> clause is followed by
single statements, some programmers prefer enclosing the single statement in
curly brackets. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:334.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>if (a &lt; 5) { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    b += 27; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:339.4pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>} else {     b -= 7; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can nest <i>if</i> statements, and its often common
that an <i>else</i> clause consists of nothing but another entire <i>if</i>
statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:334.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>if (a &lt; 5) { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:366.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>     } else  { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:312.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    if (a &gt; 5)     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>             }     else     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>         </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The statements in the second <i>else</i> clause are
intended to be executed if <i>a</i> equals 5. Because the <i>if</i> statement
inside the first else clause is a single statement, the curly brackets can be
removed and the second <i>if</i> keyword can be moved to the same line as the
first <i>else</i>, as shown in this common form: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:334.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>if (a &lt; 5) { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>     </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>else if (a &gt; 5) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:367.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>     } else { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>     </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The curly brackets and the statements within the curly
brackets are called a <i>block</i>. (See the <i>C# Language Specification</i>,
§8.2) You can declare new variables within the block, but they are only visible
within the block and all nested blocks.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>You cant declare a variable with the same name as one
already declared in a parent block, for example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:240.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int A; ... {     int A;    // Not allowed! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The error message on the second declaration is: &#8213;A
local variable named &#8215;A cannot be declared in this scope because it
would give a different meaning to &#8215;A, which is already used in a
&#8215;parent or current scope to denote something else.&#8214; Again, this
restriction helps avoid common bugs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>However, declaring variables with the same name in sibling
blocks <i>is</i> allowed: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.95pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     int A; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:246.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    ... } ... {     int A;    // No problem! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>switch</i> and <i>case</i> construction in C# has a
restriction not present in C. In C and C++ you can do this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.95pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>switch(a) { case 3:     b = 7; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:119.7pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>                // Fall through isnt allowed in C# case
4:     c = 3;     break; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>default:     b = 2;     c = 4;     break; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In C or C++, in the case where <i>a</i> is equal to 3, one
statement is executed and then execution falls through to the case where <i>a</i>
is equal to 4. That may be what you intended, or you may have forgotten to type
in a <i>break</i> statement. To help you avoid bugs like that, the C# compiler
will report an error. C# allows a case to fall through to the next case only
when the case contains no statements. This is allowed in C#: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>switch (a) { case 3: case 4:     b = 7;     c = 3;    
break;  default:     b = 2;     c = 4;     break; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>To compensate for the restriction against fall-through, C#
allows you to use a <i>goto</i> statement at the end of a case to branch to
another case. This is a legal C# implemention of the illegal <i>switch</i>
block shown earlier: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>switch(a) { case 3:     b = 7;     goto case
4;                  case 4:     c = 3;     break;  default:     b = 2;     c =
4;     break; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You dont need the final <i>break</i> at the end of a <i>case</i>
if the <i>goto</i> is there instead. You can also branch to the default <i>case</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>switch(a) { case 1:     b = 2;     goto case
3;                  case 2:     c = 7;     goto default; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:312.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'> case 3:     c = 5;     break;  default:     b = 2;    
goto case 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The expression in the <i>switch</i> statement must resolve
to any integer type, <i>char</i>, <i>string</i>, or an enumeration, and must
match the type in the case labels. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can indeed use a <i>string</i> variable in the <i>switch</i>
statement and compare it to literal strings in the <i>case</i> statements: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>switch (strCity) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:311.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{ case &quot;Boston&quot;:          break;  case
&quot;New York&quot;: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:3.95in;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>         break;  case &quot;San Francisco&quot;: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:344.95pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>         break;  default:          break; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.35pt;
margin-left:-.25pt'>Of course, this is exactly the type of thing that causes
performanceobsessed C and C++ programmers to cringe. All those <i>string</i>
comparisons simply <i>cannot</i> be very efficient. In fact, because of a
technique known as <i>string interning</i> (which involves a table of all the
unique strings used in a program), its a lot faster than you might think. </p>

<h4 style='margin-left:-.25pt'>Iteration Statements </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>C# also supports the <i>while</i> statement for repeating a
group of statements while a condition is <i>true</i>. You can test a
conditional at the top of a block </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>while (a &lt; 5) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>     </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>or at the bottom of a block: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.9pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>do { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:322.9pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>     } while (a &lt; 5); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As with the <i>if</i> statement, the expression in
parentheses must resolve to a <i>bool</i>. In the second example, the block is
executed at least once regardless of the value of <i>a</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>while</i> or <i>do</i> block can contain a <i>break</i>
statement, in which case execution continues with the first statement after the
<i>while</i> or <i>do</i> block. The block can also contain a <i>continue</i>
statement, which skips the remainder of the statements and goes back to the
top. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The <i>for</i> statement looks the same as in C and C++: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>for (i = 0; i &lt; 100; i++) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>     </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Within the parentheses, the first part is an initializer
thats executed before anything in the loop. The second part is a Boolean
expression. The contents of the block are executed only if that expression is <i>true</i>.
The last part is executed at the end of the block. If <i>A</i>, <i>B</i>, and <i>C</i>
are expressions, the statement </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>for (A; B; C) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:294.3pt;margin-bottom:
2.85pt;margin-left:-.75pt;text-indent:.5in'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>     } </span>is roughly equivalent to:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:350.4pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>A; while (B) { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>     </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    C; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I say &#8213;roughly&#8214; because the <i>for</i> block
might contain a <i>continue</i> statement to skip the rest of the block and
start with the next iteration. However, the <i>C</i> expression will still be
executed in that case, whereas it would not in the <i>while</i> statement. The <i>for</i>
block can contain a <i>break</i> statement to exit the block. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As in C++, its very common for C# programmers to define
the iteration variable right in the <i>for</i> statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>for (float a = 0; a &lt; 10.5f; a += 0.1f) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>     </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The variable <i>a</i> is only valid within the <i>for</i>
statement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>A handy addition to the iteration statements that C#
inherited from C and C++ is the <i>foreach</i> statement, which C# picked up
from Visual Basic. Ill show you some examples of <i>foreach</i> in the Chapter
10, which discusses arrays. The <i>foreach</i> statement also works with other
types of collections, and with strings. Suppose you wanted to display all the
characters of a string named <i>str</i>, each on a separate line. With a <i>for</i>
loop the code looks like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:53.8pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>for (int i = 0; i &lt; str.Length; i++)    
Console.WriteLine(str[i]); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The foreach statement is considerably simpler: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:141.7pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>foreach (char ch in str)     Console.WriteLine(ch); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The parentheses consist of the definition of a variable
named <i>ch</i> of type <i>char</i>; this variable must match the type of the
elements in the array or collection. This is followed by the keyword <i>in</i>
followed by the variable containing the elements. You can use <i>break</i> and <i>continue</i>
statements within a <i>foreach</i> block. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Within the <i>foreach</i> block, the iteration variable is
read-only. This is rather obvious in the case of strings (because strings are
enumerable anyway) but in Chapter 10 youll see that you <i>cannot</i> use the <i>foreach</i>
statement to initialize the elements of arrays. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.35pt;
margin-left:-.25pt'>The <i>foreach</i> statement requires a collection that
supports a particular method, as laboriously described in the <i>C# Language
Specification</i>, §8.8.4. In a practical sense, it can be said that the <i>foreach</i>
statement works with collections that implement the <i>IEnumerable</i>
interface. </p>

<h4 style='margin-left:-.25pt'>Jump Statements </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>C# Language Specification</i>, §8.9 defines the
category of jump statements as including <i>break</i>, <i>continue</i>, and <i>return</i>.
Ill discuss <i>return</i> in more detail in Chapter 11. This category also
includes <i>throw</i>, which Ill describe in Chapter 12, and finally <i>goto</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Youve already seen how to use the <i>goto</i> in a <i>switch</i>
statement. You can also use <i>goto</i> to branch to a label. A label is
defined with an identifier followed by a colon: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>NowhereElseToGo: </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.65pt;margin-bottom:
5.5pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>You can branch to
the statement at that label with the statement <span style='font-size:10.0pt;
line-height:152%;font-family:Consolas'>goto NowhereElseToGo; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Labels have scopes just like variables, and the label must
be in the same block or a parent block as the <i>goto</i> statement. In other
words, you cant jump into the middle of a block. You can jump out of a block,
but not into a block. <br clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:4.1pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369923">Chapter 9. The Stack and the Heap </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>We program in high-level languages for several reasons.
Perhaps we prefer that the code we write be compilable for multiple processors
or platforms. Perhaps we prefer block structure rather than jumps. And perhaps
we prefer solving problems strictly through an abstract quasimathematical
algorithmic language without taking machine architecture into account. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In real life, however, it is rarely possible to design an
efficient programming language or programming interface that lets the
programmer remain entirely ignorant of machine or system architecture. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Such is certainly the case with C#. C# doesnt require the
programmer to mess around with pointers, but that doesnt mean that pointers
can be entirely banished from the programmers mind. In fact, a very important
aspect of C# involves the different way in which instances of classes and
instances of structures are stored in memory. This difference is summed up in
the following statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:5.25pt;
margin-left:35.75pt;line-height:103%'><i>Classes are reference types;
structures are value types. </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If programming languages had mantras, that would be the C#
mantra. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you probably know, one common form of memory storage is
the <i>stack</i>. In very simple computer architecturesCP/M, for example, or a
.com executable running under MS-DOSthe program code itself sits at the bottom
of a 64K block of memory, and the stack pointer is initially set to the very
top of the memory block. The assembly language PUSH instruction decrements the
stack pointer and places data at the location addressed by the stack pointer.
The POP instruction retrieves an item from the stack and increments the stack
pointer. The stack also comes into play when a CALL instruction executes. A
pointer to the next instruction is pushed on the stack so that a RET
instruction can pop the instruction pointer off the stack and resume execution
at the instruction following the CALL.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If items A, B, and C are pushed on the stack in that order,
then they are popped from the stack in the order C, B, and A. The stack is thus
known as a last-in-first-out (LIFO) memory storage. An LIFO storage mechanism
is necessary to implement nested function calls. Each function can also use the
stack for storing local variables without interfering with other functions.
Because the stack traditionally starts at the high end of memory, it can
arbitrarily grow in size. The only problem occurs when the stack gets so big it
collides with program code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In todays environments, the word &#8213;stack&#8214; is
used to refer to any LIFO memory storage, and stacks can pretty much grow as
large as they want without getting entangled with program code. Stacks dont
have to grow from the top of memory, although they are often still envisioned
that way. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Every thread of execution running under Windows has its own
stack. The stack is used for storing return addresses during function calls,
for passing arguments to function calls, and for storing local variables in
each function. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>C# is similar. Consider a <i>Main</i> method in a C#
program that declares two <i>int</i> variables, a <i>long</i> and a <i>string</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:328.4pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     int A, B;     long C;     string D; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When a method begins execution, memory on the stack is
reserved to store all variables declared in the method, and the memory for
these variables is freed when the method reaches its end. In this example, the <i>A</i>
and <i>B</i> variables both require 4 bytes of storage on the stack, and the <i>C</i>
variable requires 8 bytes. But now we have a problem. Exactly how many bytes
are needed to store a <i>string</i>? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>It depends. Strings can be long and strings can be short,
and it is simply not possible to anticipate exactly how much memory is required
for a particular string, particular when the program can have statements like
this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>D = Console.ReadLine(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For this reason, the string itself is not stored on the
stack. Instead, as the program is running, the memory for the string is
allocated from an area known as the <i>heap</i>, and more specifically, in a <i>local
heap</i> that is private to the process. The heap is a general-purpose area of
storage organized so that chunks of memory of any size can be allocated and
freed at random during program execution. (Even nicer is a heap with two levels
of indirection that can be compacted if it becomes excessively fragmented.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Every program running under Windows has its own local heap;
the heap is shared among all threads in the program. (The stack and heap are
also different in regard to prepositions: We say that something is stored <i>on</i>
the stack but <i>in</i> the heap.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this example, the string itself is stored in the heap.
However, the <i>string</i> variable itself must be stored on the stack. Whats
actually stored on the stack is a reference to the location of the string in
the heap: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=528
 style='width:396.35pt;margin-left:26.65pt;border-collapse:collapse'>
 <tr style='height:167.4pt'>
  <td width=176 valign=top style='width:131.8pt;padding:0in 0in 0in 0in;
  height:167.4pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
  border=0 width=171 height=224
  src="What%20the%20C%20or%20CPlusPlus%20Programmer%20Needs%20to%20Know%20about%20C%23%20and%20the%20DotNET%20Framework_files/image002.gif"></span></p>
  </td>
  <td width=353 valign=top style='width:264.55pt;padding:0in 0in 0in 0in;
  height:167.4pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:513.0pt;margin-bottom:
  0in;margin-left:-248.45pt;text-indent:0in;line-height:107%'>&nbsp;</p>
  <table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=348
   style='width:261.0pt;margin-left:3.55pt;border-collapse:collapse'>
   <tr style='height:27.0pt'>
    <td width=348 style='width:261.0pt;border:solid black 1.0pt;padding:0in 5.75pt 0in 9.9pt;
    height:27.0pt'>
    <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>To
    be, or not to be, that is the question </p>
    </td>
   </tr>
  </table>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.0pt;
  margin-left:0in;text-indent:0in;line-height:107%'></p>
  </td>
 </tr>
</table>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:2.0pt;margin-left:26.65pt;text-align:right;text-indent:0in;
line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The string can be as small or as large as it needs to be,
but the space on the stack required for the reference remains the same. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What is this reference exactly? In the C# documentation
its often referred to in a rather vague way, but its probably something very
close to a memory address, and thus not very dissimilar from a traditional
pointer. However, there are major differences between references and pointers.
The reference is <i>managed</i>, and the memory it references is known as the <i>managed
heap</i>. The program cant manipulate or perform any arithmetic on this
reference. And, most importantly, if a memory block allocated from the heap no
longer has any references pointing to it, that memory block becomes eligible
for garbage collection. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Heres that C# mantra again: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:5.4pt;
margin-left:35.75pt;line-height:103%'><i>Classes are reference types;
structures are value types. </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Structures are value types. Weve already encountered
several structures. All the numeric types in C# are aliases for structures in
the .NET Framework. The C# value types include <i>sbyte</i>, <i>byte</i>, <i>short</i>,
<i>ushort</i>, <i>int</i>, <i>uint</i>, <i>long</i>, <i>ulong</i>, <i>float</i>,
<i>double</i>, <i>decimal</i>, <i>char</i>, and <i>bool</i>. When you declare
variables of these types, the actual numeric values are stored on the stack.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Classes are reference types. The <i>string</i> type is an
alias for the <i>System.String</i> class. Its a class. A reference type is
stored on the stack as a reference to an area of memory allocated from the
heap. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:5.4pt;
margin-left:35.75pt;line-height:103%'><i>Classes are reference types;
structures are value types. </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This difference was established for purposes of efficiency.
Heap allocations take time, particularly when theres no more memory in the
heap, and the heap manager needs to compact the heap or begin garbage
collection. It makes no sense to store something as small as an <i>int</i> in
the heap when youll probably need as much memory on the stack to store the
reference as to store the <i>int</i> itself. The stack lets an <i>int</i> value
be stored quickly and retrieved quickly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But the stack is not appropriate for objects that might
vary in size, such as <i>string</i> variables. The stack is certainly not
appropriate for arrays, which Ill cover in the next chapter. And the stack is
not quite suited for some aspects of object-oriented programming. It is often
convenient to refer to an instance of a particular class as an instance of an
ancestor class. This works best when the object is actually a reference to
memory in the heap rather than an area on the stack. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Its possible for a string literal to consist of two quote
signs with no characters between them: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>D = &quot;&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A string with no characters is referred to as an <i>empty</i>
string. Even though the string has no characters, memory is still allocated
from the heap to store information about the string, including the fact that it
has no characters. The <i>Length</i> property would reveal this fact: The
expression <i>D.Length</i> would equal 0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>D</i> were first assigned a return value from <i>Console.ReadLine</i>
(as shown in the code earlier in this chapter) and then assigned an empty
string, what happens to the memory allocated from the heap for the original
string? That string is still in the heap, but theres no longer any reference
to it, which means its taking up unnecessary space that could be used for
something else. It becomes eligible for garbage collection. This memory will
not be freed immediately, but sometime in the future as the program is running,
and particularly if memory gets scarce, the unreferenced memory in the heap
will be freed and made available for future allocations. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>You can also assign <i>D</i> a special value, which is the
keyword <i>null</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>D = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The keyword <i>null</i> essentially means &#8213;no
reference.&#8214; Instead of storing a reference to something in the heap, the
variable <i>D</i> is now storing a zero value. A string variable that does not
reference any heap memory is called a <i>null</i> string. If you tried to
determine the length of such a string using <i>D.Length</i>, youd raise a <i>NullReferenceException</i>.
There is nothing to determine the length of. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can use <i>null</i> with equality and inequality
operators. If D is a <i>null</i> string, then then the expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.15pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>D == null </span>is <i>true</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The code shown at the beginning of this chapter declared a <i>string</i>
variable without setting it to anything: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string D; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this case, space has been reserved on the stack for the
variable <i>D</i>, but it is considered to be uninitialized. It doesnt even
equal <i>null</i> at this point.   </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>null</i> string and the empty string may initially
seem pretty similar but you can see now that theyre quite different. When a <i>string</i>
variable equals <i>null</i>, the value stored on the stack is 0, which doesnt
reference any memory in the heap. When a <i>string</i> variable equals the
empty string, memory has been allocated from the heap to store the string, but
the string is 0 characters in length. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You cannot set a value type (such as an <i>int</i> or a <i>double</i>)
to <i>null</i>. Null values only make sense for reference types. (However, C#
2.0 lets you define &#8213;nullable&#8214; value types, as Ill discuss in
Chapter 28.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:4.0pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369924">Chapter 10. Arrays </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Arrays are ordered collections of objects of the same type.
Each object in the array is referred to as an <i>element</i> of the array. A
particular element is associated with an index of the array, which is an
integer ranging from zero to one less than the size of the array. (In other
words, C# has zerobased array indexing.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>C# lets you define an array of any type. The simplest array
declaration is a one-dimensional array. This code defines <i>A</i> to be an
array of type <i>int</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int[] A; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>In an array declaration statement, the square brackets
follow the element type, and they must be empty. <i>A</i> is a reference and
space on the stack is reserved for storing <i>A</i>. However, at this point A
is uninitialized. Because A is a reference, you can set it to <i>null</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now <i>A</i> is no longer uninitialized, but no memory has
been allocated for storing the elements of the array. Allocating memory for the
array requires a <i>new</i> expression, which looks like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A = new int[100]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another set of square brackets appear, but now they contain
the desired number of elements in the array. The <i>new</i> expression here
allocates sufficient memory in the managed heap for 100 32-bit integers and
returns a reference to that memory block, which is then stored in <i>A</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can declare the array variable and initialize it in the
same statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int[] A = new int[100]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Memory allocated from the heap is always initialized to
zero. Thus, all the elements of the array have an initialized value of zero.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can reference one of the elements in the array using
the array name and an index in square brackets: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(A[55]); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because all the array elements have been initialized to
zero, this statement will display the value zero. If you use a negative index,
or an index equal to or greater than the number of elements in the array,
youll raise an <i>IndexOutOfRangeException</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>You can fill the elements of an array with whatever means
is convenient. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A <i>for</i> loop is common: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:212.95pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>for (int i = 0; i &lt; 100; i++)     A[i] = i * i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Any array is implicitly an object of type <i>System.Array</i>,
and you can use properties and methods defined by the <i>Array</i> class with
arrays. Perhaps the most important property of the <i>Array</i> class is <i>Length</i>,
which indicates the number of elements in the array. Heres a more generalized
way to fill an integer array with squares: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:185.45pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>for (int i = 0; i &lt; A.Length; i++)     A[i] = i * i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this example, <i>A.Length</i> is the value 100. As with
the same-named property of the <i>String</i> class, the <i>Length</i> property
is read-only.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can access all the elements of an array sequentially in
a <i>foreach</i> statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:169.3pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>foreach (int i in A)     Console.WriteLine(i); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, you cannot initialize the elements of an array in
a <i>foreach</i> statement because you need to set the value of the iteration
variable and thats not allowed. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Later on in the program, you might set <i>A</i> to a
different <i>new</i> expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A = new int[20]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Enough memory is allocated from the managed heap for 20
elements, and the reference to that memory is returned and stored in <i>A</i>. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But what happens to the original block of memory that was
allocated for the 100 integers? There is no <i>delete</i> or <i>free</i>
operator in C#. If the original block of memory is no longer referenced by
anything else in the program, it becomes eligible for garbage collection. At
some point, the Common Language Runtime will free up the memory originally
allocated for the array. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The number of elements in an array can be determined at
runtime: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:157.9pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Console.Write(&quot;Enter the array size: &quot;); int
num = Int32.Parse(Console.ReadLine()); double D = new double[num]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Obviously, this feature eliminates any need for C-type
memory allocation functions such as <i>malloc</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In some cases, when writing a program you might know both
the size of the array and the elements it should contain. In that case you can
initialize the array when creating it: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>double[] D = new double[3] { 3.14, 2.17, 100 }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The number of initializers must equal the declared size of
the array. If youre initializing the array, you can leave out the size of the
array because its determined from the number of initializers: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>double[] D = new double[] { 3.14, 2.17, 100 }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Notice the empty square brackets in the <i>new</i>
expression. You can even leave out the <i>new</i> expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>double[] D = { 3.14, 2.17, 100 }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>This shortcut is available only in the statement that
declares the array variable. You cant do something like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>double[] D; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>D = { 3.14, 2.17, 100 };    // Wont work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Its possible to declare multiple array variables in a
single declaration statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal[] sales, commissions, bonuses; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can allocate memory for all of these arrays, or only
some of them, and even initialize elements of one or more of the arrays in the
same declaration statement, but it might get so messy that youll want to split
it into several declarations. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Heres a declaration statement that allocates memory for an
array of strings: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string[] strs = new string[10]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>That <i>new</i> expression allocates enough memory from the
heap for ten strings. However, because <i>String</i> is a class, and classes
are reference types, the <i>new</i> expression really allocates enough memory
from the heap for ten <i>references</i>. Heap memory is always initialized to
zero, which means that the ten elements of the array are effectively set to <i>null</i>.
The expression <span style='font-size:10.0pt;line-height:115%;font-family:Consolas'>strs[5]
== null </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>returns <i>true</i>. Although these references are
initially <i>null</i>, eventually they will probably reference actual strings
that are themselves stored in the heap. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:17.6pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>Understanding array creation and initialization is sometimes
clarified if you look at it in terms of expressions. The expression <span
style='font-size:10.0pt;line-height:115%;font-family:Consolas'>new string[4] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>allocates enough memory for an array of four strings and
returns a reference to that memory. If the element type were a value type (such
as <i>int</i> or <i>decimal</i>), each element would be initialized to 0.
Because the element type here is a reference type (specifically <i>string</i>),
each element is initialized to <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Heres another expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new string[]{ &quot;North&quot;, &quot;East&quot;, &quot;South&quot;,
&quot;West&quot; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This expression allocates memory for an array of four
strings. Each element of the array is another reference to the actual string. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Now heres an interesting expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new string[] { &quot;North&quot;, &quot;East&quot;,
&quot;South&quot;, &quot;West&quot; } [2] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Its the same as the previous expression except that it
also includes an array index at the end. If you check the Operator Precedence
and Associativity table at the back of this book, youll see that the keyword <i>new</i>
and array indexing (indicated by <i>a[x]</i>) have the same precedence and are
associated from left to right. The index essentially chooses one of the
elements of the array. This expression evaluates to the string
&#8213;South&#8214;. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>This means that if you need to use a little array just
once, you dont need to declare an array variable. Heres a statement that
displays one of the four compass points based on the variable <i>dir</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.Write(new string[] { &quot;North&quot;, &quot;East&quot;,
&quot;South&quot;, &quot;West&quot; } [dir]); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The array is created in the course of the execution of this
statement and then becomes eligible for garbage collection. I certainly would
avoid putting a statement like this in any kind of loop or a method thats
frequently called, but for a one-time execution, its certainly elegant. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>C# provides two types of multi-dimensional arrays. The
simplest type of multi-dimensional array is declared using a single set of
square brackets, and commas indicate multiple dimensions. Here are declarations
of onedimensional, two-dimensional, and three-dimensional arrays: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.4pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int[] one; int[,] two;  int[,,] three; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can allocate memory for these arrays using <i>new</i>
expressions that contain the size of each dimension separated by commas: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:262.45pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>one = new int[15]; two = new int[3, 6]; three = new
int[8, 5, 3]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Or, you could include the <i>new</i> expression in the
declaration.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You reference an element of the array with indices
separated by commas: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>three[i, j, k] = 39; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this example the variable <i>i</i> must be in the range
0 through 7, <i>j</i> must be 0 through 4, and <i>k</i> must be 0, 1 or 2. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Length</i> property reports the total number of
elements in the array, which is equal to the product of the sizes of each
dimension. For example, <i>three.Length</i> returns 120. The <i>Rank</i>
property indicates the number of dimensions: <i>three.Rank</i> returns 3. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:20.95pt;margin-bottom:
7.8pt;margin-left:-.25pt'>If you need the number of elements in a particular
dimension, you can use the <i>GetLength</i> method of the <i>Array</i> class.
The argument is a zerobased dimension. For example, <span style='font-size:
10.0pt;line-height:103%;font-family:Consolas'>three.GetLength(1) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>returns the size of the second dimension of <i>three</i>,
which is 5. The <i>Array</i> class also contains methods for sorting and
searching arrays. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Multidimensional arrays seem to be less common in
object-oriented programming than in traditional procedural programming. Its
probably more common in object-oriented programming to have singledimensional
arrays of objects, where the objects themselves encapsulate multiple items. But
some &#8213;real-life&#8214; examples of multidimensional arrays do exist. If
you were unfortunate enough to be working on a program involving United States
senators, for example, the following array would help store their names: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:149.85pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>string[,] senators = new
string[50,2]; </span>Thats 50 states and 2 senators each. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Initializing the elements of multidimensional arrays in a <i>new</i>
expression requires a precise use of curly brackets. Heres another
threedimensional array thats a bit smaller than the previous one: </p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:53.4pt;
margin-bottom:0in;margin-left:25.5pt;text-align:right;line-height:104%'><span
style='font-size:10.0pt;line-height:104%;font-family:Consolas'>int[,,] arr =
new int[3, 2, 4] {{{ 8, 3, 4, 2}, { 7, 4, 1,
2}},                                 {{ 2, 7, 3, 6}, { 5, 1, 9, 0}}, </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                                {{ 0, 4, 9, 7}, { 3, 9, 8, 5}}}; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The first four initialization values are <i>arr[0,0,0]</i>
through <i>arr[0,0,3]</i>, the second four values are <i>arr[0,1,0]</i> through
<i>arr[0,1,3]</i>, and so forth. The last four values are arr[2,1,0] through
arr[2,1,3]. The <i>Rank</i> property of this array returns 3; the <i>Length</i>
property returns 24. You can shorten the array initialization to </p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:81.0pt;
margin-bottom:0in;margin-left:25.5pt;text-align:right;line-height:104%'><span
style='font-size:10.0pt;line-height:104%;font-family:Consolas'>int[,,] arr =
new int[,,] {{{ 8, 3, 4, 2}, { 7, 4, 1, 2}},                            {{ 2,
7, 3, 6}, { 5, 1, 9, 0}}, </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.7pt;margin-bottom:
1.6pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>                           {{ 0, 4, 9, 7}, { 3, 9,
8, 5}}}; </span>without explicitly specifying the number of elements in each
dimension, or you can leave out the <i>new</i> expression entirely:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:130.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int[,,] arr = {{{ 8, 3, 4, 2}, { 7, 4, 1,
2}},                {{ 2, 7, 3, 6}, { 5, 1, 9, 0}}, </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>               {{ 0, 4, 9, 7}, { 3, 9, 8, 5}}}; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# also supports arrays of arrays, which are essentially
arrays in which the elements are themselves arrays. These are referred to as <i>jagged
arrays</i> because the size of the second dimension (and possibly subsequent
dimensions) is not constant. The size of each dimension is different depending
on the index of the previous dimension. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>For example, suppose you want to declare an array for
storing all the family members of your four closest friends. These families
range in size from two people to eight people. You could certainly declare a
normal two-dimensional array sufficient for the largest family: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string[,] normalArray = new string[4, 8]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But that approach wastes some space. Not all of your four
friends families have eight people. (And if the wasted space of this example
seems meager, how about an array similar to the <i>senators</i> array but for
members of the House of Representatives? Depending on the state, the number of
representatives ranges from 1 to 53.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Because a jagged array is essentially an array of arrays,
creating the array requires multiple <i>new</i> expressions. Heres the
declaration and the first <i>new</i> expression for the array that stores your
four friends family members: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string[][] jaggedArray = new string[4][]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Notice the use of multiple square brackets. Next you need
four additional new statements for each of the four families: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:147.0pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>jaggedArray[0] = new string[5]; jaggedArray[1] = new
string[2]; jaggedArray[2] = new string[8]; jaggedArray[3] = new string[4]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Each of these <i>new</i> expression indicates the number of
members in that family. The family sizes range from two to eight. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At this point, you can access <i>jaggedArray[0][0]</i>
through <i>jaggedArray[0][4]</i> for the five members of the first family. The
two members of the second family are stored in <i>jaggedArray[1][0]</i> and <i>jaggedArray[1][1]</i>.
And so forth. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:214.4pt;margin-bottom:
2.05pt;margin-left:.5in;text-indent:-.5in;line-height:152%'>An assignment such
as  <span style='font-size:10.0pt;line-height:152%;font-family:Consolas'>jaggedArray[3]
= new string[4]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>shown above can also include initializations for that
family: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>jaggedArray[3] = new string[4] { &quot;Jack&quot;, &quot;Diane&quot;,
&quot;Bobby&quot;, &quot;Sally&quot; }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:26.5pt;margin-bottom:
2.05pt;margin-left:.5in;text-indent:-.5in;line-height:152%'>or, a tiny bit
simpler, <span style='font-size:10.0pt;line-height:152%;font-family:Consolas'>jaggedArray[3]
= new string[] { &quot;Jack&quot;, &quot;Diane&quot;, &quot;Bobby&quot;,
&quot;Sally&quot; }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>You can also initialize the whole array in the original
declaration. The initialization includes all the <i>new</i> expressions: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string[][] jaggedArray = new string[4][] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:9.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        new string[] { &quot;Jill&quot;,
&quot;Alice&quot;, &quot;Billy&quot;, &quot;Judy&quot;, &quot;Sammy&quot;
},         new string[] { &quot;James&quot;, &quot;Ellen&quot; }, </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.4pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        new string[] { &quot;Steve&quot;,
&quot;Sue&quot;, &quot;Bernie&quot;, &quot;Rich&quot;,                        
&quot;Chris&quot;, &quot;Erika&quot;, &quot;Michelle&quot;, &quot;Alyssa&quot;
},         new string[] { &quot;Jack&quot;, &quot;Diane&quot;,
&quot;Bobby&quot;, &quot;Sally&quot; }     }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because this is a declaration, the first <i>new</i>
expression can be eliminated, but the rest are required. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:4.15pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369925">Chapter 11. Methods and Fields </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When a certain block of code needs to be executed multiple
times while a program is running, it is common to put it in a loop. If the same
block of code must be executed from different parts of the program, it is
common to isolate it in a unit called in various languages a subroutine or
function, but which in C# is called <i>method</i>. Every C# program must
contain a method named <i>Main</i>. All but the most trivial C# programs
contain additional methods as well. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>For example, suppose you need to write a program that asks
the user to type in some information, perhaps a first name, last name, and age.
Each of the three items requires a call to <i>Console.Write</i> to displays a
prompt such as &#8213;Enter your first name.&#8214; Each of the three items
requires a call to <i>Console.ReadLine</i> to obtain the information the user
types. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres an approach where everything is in the <i>Main</i>
method </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:297.55pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:297.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Interrogation1.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// Interrogation1.cs (c) 2006 by
  Charles Petzold //----------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Interrogation1 </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:119.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.Write(&quot;Enter your first name: &quot;);         string
  strFirstName = Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.45pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        Console.Write(&quot;Enter
  your last name: &quot;);         string strLastName = Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.45pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.Write(&quot;Enter your age: &quot;);         string strAge =
  Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;First name: &quot; + strFirstName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Last name: &quot; + strLastName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Age: &quot; + strAge); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, in a real program, the age wouldnt be stored in
a <i>string</i>. It would be stored as an integer, which means thered be a
call to <i>Int32.Parse</i>, but Im trying to keep this simple. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Rather than calling <i>Console.Write</i> three times to
display a prompt, and <i>Console.ReadLine</i> three times to obtain what the
user types, it would be more convenient for the <i>Main</i> method to call
another method three times. Perhaps this method is called <i>GetInfo</i>. The
first part of <i>Main</i> might be simplified to look something like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:58.9pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>string strFirstName = GetInfo(&quot;Enter your first
name: &quot;); string strLastName = GetInfo(&quot;Enter your last name:
&quot;); string strAge = GetInfo(&quot;Enter your age: &quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Heres a <i>GetInfo</i> method that does the grunt work: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static string GetInfo(string strPrompt) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:169.25pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    Console.Write(strPrompt);     string strReturn =
Console.ReadLine();     return strReturn;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Like <i>Main</i>, the <i>GetInfo</i> method must be static.
(Non-static methods will make their appearance in Chapter 13.) Following the <i>static</i>
keyword is <i>string</i>, which is the return value of the <i>GetInfo</i>
method. If a method has a return type other than <i>void</i>, all code paths
within the method must terminate with a <i>return</i> statement that returns an
object of the proper type. (A method with a <i>void</i> return type can have a <i>return</i>
statement by itself to end execution of the method.) The parameter is also a
string, called <i>strPrompt</i> within the method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>GetInfo</i> method displays the prompt, and stores
the return value of <i>Console.ReadLine</i> in <i>strReturn</i>, which it then
returns. As with C and C++, the return value does not have to be in
parentheses, although many programmers tend to use them: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>return (strReturn); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>strReturn</i> variable is local to <i>GetInfo</i>,
and is only visible within <i>GetInfo</i> after its declaration. The method
could actually be simplified a little by combining the last two statements and
eliminate the <i>strReturn</i> variable entirely: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>return Console.ReadLine(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Perhaps youre not quite sure you want to terminate each of
the prompts with a colon. Perhaps you suspect you may want to change it to a
little arrow. In that case, you might write the first statement of <i>GetInfo</i>
like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:194.95pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Console.Write(strPrompt + &quot;:
&quot;); </span>And call <i>GetInfo</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:55.75pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>string strFirstName =
GetInfo(&quot;Enter your first name&quot;); </span>Heres the whole program
with these changes. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:344.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:344.35pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Interrogation2.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// Interrogation2.cs (c) 2006 by
  Charles Petzold //----------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Interrogation2 </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:53.9pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        string
  strFirstName = GetInfo(&quot;Enter your first name&quot;);         string
  strLastName = GetInfo(&quot;Enter your last name&quot;);         string
  strAge = GetInfo(&quot;Enter your age&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  ShowInfo(strFirstName, strLastName, strAge); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  string GetInfo(string strPrompt) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:169.4pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        Console.Write(strPrompt
  + &quot;: &quot;);         return Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void ShowInfo(string strFirstName, string strSurName,  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                        
  string strYearsOld) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;First name: &quot; + strFirstName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Last name: &quot; + strSurName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Age: &quot; + strYearsOld); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Ive also added a second method called <i>ShowInfo</i> that
displays the information. Although <i>ShowInfo</i> is only called once from <i>Main</i>,
that doesnt necessarily prohibit it from being a separate method. <i>ShowInfo</i>
has three parameters but a <i>void</i> return value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The order of methods in a class doesnt matter. Methods
dont have to be declared before they are referenced. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Two of the parameters to <i>ShowInfo</i> have slightly
different names than the string variables defined in <i>Main</i>. It doesnt
matter whether theyre the same or different. The variables defined in <i>Main</i>
arent visible in <i>ShowInfo</i>, and the <i>ShowInfo</i> parameters arent
visible in <i>Main</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Both <i>GetInfo</i> and <i>ShowInfo</i> are static. The <i>Main</i>
method can refer to these methods by just their names, but it could also
preface the method name with the class name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>string strFirstName = Interrogation2.GetInfo(&quot;Enter your first
name&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'><i>ShowInfo</i> has a parameter for each of the items it
needs to display. Theres nothing really wrong with this approach until you
want to start adding more items to the list of information you obtain. For each
new item youll need another string variable, of course, and another call to </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>GetInfo</i>, and youll need to add a line to <i>ShowInfo</i>
to display the new item. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll also need to add another parameter to <i>ShowInfo</i>,
which means youll have to change the method itself, and the call to that
method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And what if it gets to the point where youre asking the
user for twenty pieces of information? Youll need to have twenty arguments to <i>ShowInfo</i>
and you have to be very careful that your call to <i>ShowInfo</i> has all the
arguments in the correct order. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Another approach would be to save the users responses as
fields. As you know, fields look like local variables, except they are not
defined inside a method. They are defined inside the class but outside of all
methods, and they can be accessed by any method in the class. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:367.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:367.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Interrogation3.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// Interrogation3.cs (c) 2006 by
  Charles Petzold //----------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Interrogation3 </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  string strFirstName, strLastName, strAge; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        strFirstName =
  GetInfo(&quot;Enter your first name&quot;);         strLastName =
  GetInfo(&quot;Enter your last name&quot;);         strAge =
  GetInfo(&quot;Enter your age&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  ShowInfo(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  string GetInfo(string strPrompt) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:169.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        Console.Write(strPrompt
  + &quot;: &quot;);         return Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void ShowInfo() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Console.WriteLine(&quot;First
  name: &quot; + strFirstName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Last name: &quot; + strLastName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Age: &quot; + strAge); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the three fields of type <i>string</i> declared at
the top of the <i>Interrogation3</i> class. Although its common to put fields
at the top of a class, they dont need to be there; they can just as well be at
the bottom of the class after all the methods, or even between two methods, or
scattered among the methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now <i>ShowInfo</i> has no parameters, and the three
statements in <i>ShowInfo</i> refer to the fields set in the <i>Main</i>
method. With each additional item, youll need to make three changes: a new
field, a new call to <i>GetInfo</i>, and a new line in <i>ShowInfo</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Youre still not sure about the colon at the end of the
prompt, but you know that if you change it, youll also want to change the
three statements in <i>ShowInfo</i> likewise. It would be nice to define this
character sequence just once, and use it wherever needed. You could make that a
field as well: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static string strDelimiter = &quot;: &quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>And then you can change the <i>Console.Write</i> statement
in <i>GetInfo</i> and the three statements in <i>ShowInfo</i> like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;First name&quot; + strDelimiter +
strFirstName); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>This is pretty good, but theres another change you might
consider. The field named <i>strDelimiter</i> is never changed during the time
the program is running. In fact, you want to make sure that its never changed.
You want to prevent yourself (or someone else) from modifying the program and
adding code that inadvertently changes <i>strDelimiter</i>. One way to do this
is to add a modifier named <i>readonly</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static readonly string strDelimiter = &quot;: &quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:3.9pt;margin-bottom:3.25pt;
margin-left:-.25pt'>The order of the <i>static</i> and <i>readonly</i> keywords
doesnt matter, but they both must precede the type of the field, which is <i>string</i>.
With the <i>readonly</i> modifier, any code that tries to change the value of <i>strDelimiter</i>
will be flagged by the C# compiler as an error. (Thats not entirely true. A
constructor can change the value, as youll see in Chapter 17.) Another
possibility is this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>const string strDelimiter = &quot;: &quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A constant must be initialized in its declaration
statement. A <i>const</i> is implicitly static. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There is a big difference between <i>const</i> and <i>static
readonly</i>: A <i>const</i> is evaluated during compilation and the value is
substituted wherever its used. A <i>static readonly</i> field is evaluated at
runtime. But in practice theyre pretty much the same. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In C and C++ you can have a local variable defined as <i>static</i>,
and that variable will retain its value between function calls. That option is
not available in C#. You can have a local <i>const</i>, however, which is a
constant whose visibility is restricted to a method. But the <i>readonly</i>
modifier is applicable only for fields, and cant be used for local variables. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In C#, as in C++, you can have multiple methods with the
same name. These are known as overloads. These multiple methods must be
distinguished by having a different number of arguments, or arguments with
different types. In C#, you cant have two methods in the same class with the
same name that differ only by the return type. </p>

</div>

<span style='font-size:12.0pt;line-height:103%;font-family:"Bookman Old Style",serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection3>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres yet another version of the Interrogation program
that has a parameterless method named <i>GetInfo</i> that calls the parametered
versions of <i>GetInfo</i>: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:414.65pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:414.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Interrogation4.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//
  Interrogation4.cs (c) 2006 by Charles Petzold
  //----------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Interrogation4 </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    const
  string strDelimiter = &quot;: &quot;; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  string strFirstName, strLastName, strAge; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  GetInfo(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  ShowInfo(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void GetInfo() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.45pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  strFirstName = GetInfo(&quot;Enter your first name&quot;);         strLastName
  = GetInfo(&quot;Enter your last name&quot;);         strAge =
  GetInfo(&quot;Enter your age&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  string GetInfo(string strPrompt) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.45pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  Console.Write(strPrompt + strDelimiter);         return Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void ShowInfo() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;First name&quot; + strDelimiter + strFirstName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Last name&quot; + strDelimiter + strLastName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Age&quot; + strDelimiter + strAge); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Sometimes the choice of which overloaded method to call can
be tricky for the C# compiler. For example, suppose there are two methods with
the same name, but one has a <i>long</i> parameter and the other has a <i>double</i>
parameter. Some code calls the method with an <i>int</i> argument. Which method
does C# choose? Overload resolution is described in the <i>C# Language
Specification</i>, §7.4.2. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The next step in this Interrogation series of programs
might be to define a new class named <i>Person</i> with instance fields of <i>strFirstName</i>,
<i>strLastName</i>, and <i>strAge</i>, and jump right into object-oriented
programming. But lets hold off on that for another chapter or so, and explore
some other method-related issues. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Arguments to methods are normally passed by value, which
means that the following program displays 22 rather than 55: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:227.2pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:227.2pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PassByValue.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------
  // PassByValue.cs (c) 2006 by Charles Petzold
  //-------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  PassByValue </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:230.0pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        int i =
  22;         AlterInteger(i); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(i); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void AlterInteger(int i) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        i =
  55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.85pt;
margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:"Courier New"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When a method such as <i>AlterInteger</i> is executing, its
stack contains space for all the parameters to the method (in this case just
one <i>int</i>) and all its local variables (in this case, none). As <i>AlterInteger</i>
is called from <i>Main</i>, a copy of the argument passed to <i>AlterInteger</i>
is stored on the stack for <i>AlterInteger</i> to use. <i>AlterInteger</i>
refers to a copy of the integer rather than to the integer referenced by <i>Main</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, there are times when you would rather be able to
pass a number or other object to a method by reference, so that any changes
made to the object within the method are reflected in the value after the
method has ended. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>You can do this using the <i>ref</i> keyword, as
demonstrated in the following program. This program displays 55. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:168.65pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:168.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PassByReference.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:136.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//------------------------------------------------
  // PassByReference.cs (c) 2006 by Charles Petzold
  //------------------------------------------------ using System; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:312.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'> class PassByReference </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int i
  = 22; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  AlterInteger(ref i); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:257.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(i);     } </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    static void AlterInteger(ref int i) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    {         i = 55; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.65pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that the <i>ref</i> keyword is required both in the
declaration of the method and when the method is called. This double
requirement is just to prevent you, the programmer, from making mistakes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Inside <i>AlterInteger</i>, the stack contains a reference
rather than the integer itself. That reference is to the original integer in <i>Main</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The C# language also supports a similar keyword named <i>out</i>.
(You saw out in the Math.DivRem method in Chapter 6. Youll see it again in the
TryParse method in Chapter 12.) When compiled to intermediate language, the <i>ref</i>
and <i>out</i> keywords are identical. However, when you use <i>ref</i>, the C#
compiler requires that the variable whose reference youre using has already
been initialized. When using <i>out</i>, the variable doesnt have to be
initialized.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:97.95pt;margin-bottom:
1.8pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>For example, in
the preceding program, if you change <span style='font-size:10.0pt;line-height:
152%;font-family:Consolas'>int i = 22; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:362.95pt;margin-bottom:
2.05pt;margin-left:.5in;text-indent:-.5in;line-height:152%'>to <span
style='font-size:10.0pt;line-height:152%;font-family:Consolas'>int i; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>then the program will no longer compile because the
variable has not been initialized when the method is called. If you change the
two occurrences of <i>ref</i> to <i>out</i>, C# will obligingly compile the
code. However, now try changing <i>AlterInteger</i> to this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static void AlterInteger(out int i) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    i += 33; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This has now become unacceptable to the C# compiler because
the body of the method implies that the parameter has already been set before
the method is called. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you dont use the <i>ref</i> or <i>out</i> keywords,
then arguments to methods are passed by value. Essentially, a copy of the
object is made and placed on the stack for the method to use. If this object is
a reference type (that is, an array, or an instance of a class) then a copy of
the reference is made for use by the method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>So, if a parameter is a reference type, then the value
passed to the method is actually a reference, as the following program
demonstrates. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:238.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:238.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PassArrayByValue.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// PassArrayByValue.cs (c) 2006
  by Charles Petzold //------------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  PassArrayByValue </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.55pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        int[]
  arr = new int[10];         arr[0] = 22;         AlterInteger(arr); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Console.WriteLine(arr[0]);
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void AlterInteger(int[] arr) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        arr[0]
  = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This program creates an array of integers and sets the
first element to 22. Then it passes this array to <i>AlterInteger</i>. However,
that doesnt mean the entire array is copied on the stack. The array is a
reference, so only a copy of that reference is made for use by the <i>AlterInteger</i>
method. Even though its a copy of the reference, both references access the
same heap memory. <i>AlterInteger</i> is able to change an element of the
original array. The program displays 55. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Now, add the following statement to the bottom of <i>AlterInteger</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>arr = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The program still works as before. The method is only
setting its copy of the <i>arr</i> reference to <i>null</i>, so <i>Main</i>
still has its original <i>arr</i> reference and nothing bad happens. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Now lets add the <i>ref</i> keyword to the method
parameter, and see what happens. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:157.0pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:157.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PassArrayByReference.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// PassArrayByReference.cs (c)
  2006 by Charles Petzold
  //----------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  PassArrayByReference </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        int[] arr = new
  int[10];         arr[0] = 22; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  AlterInteger(ref arr); </span></p>
  </td>
 </tr>
 <tr style='height:93.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:93.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(arr[0]); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void AlterInteger(ref int[] arr) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:290.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        arr[0] = 55;        
  arr = new int[5]; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now the <i>arr</i> reference itself declared in <i>Main</i>
is passed by reference, so that the method is able to alter the <i>arr</i>
itself in <i>Main</i> rather than just elements of the array. The method sets <i>arr</i>
to a new array, and each element of a nearly allocated array has an initialized
value of 0. The program displays the number 0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The difference between value types and reference types in
C# may take some getting accustomed to. Experimentation is encouraged. Ill
explore this topic more in Chapter 16. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The previous two program demonstate that you can pass whole
arrays to methods. The methods can then determine the size of the arrays with
the <i>Length</i> property and examine or change the array elements. However, a
method declared with an array parameter can be a bit more versatile with the <i>params</i>
keyword, as the following program demonstrates. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:285.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:285.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PassParamsArray.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:119.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// PassParamsArray.cs (c) 2006
  by Charles Petzold //------------------------------------------------ using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  PassParamsArray </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int[]
  arr = { 22, 33, 55, 100, 10, 2 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(AddUpArray(arr)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Console.WriteLine(AddUpArray(22,
  33, 55, 100, 10, 2)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static int
  AddUpArray(params int[] arr) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  sum = 0; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:240.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        foreach (int i in
  arr)             sum += i; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  sum; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Without the <i>params</i> keyword, the method would be able
to accept an argument that is an array of integers, add up the elements, and
return the sum. With the keyword <i>params</i>, another option becomes
available: A list of integers can simply be passed to the method, as
demonstrated by the second call to <i>AddUpArray</i> (in the second <i>WriteLine</i>).
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Behind the scenes, the list of integers is made into an
array, so theres definitely no performance advantage to providing a variable
list of arguments. There must be no more than one <i>params</i> parameter to a
method, and it must be the last parameter. These rules are obvious if you
consider the confusion that might result without them. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The most generalized form of <i>Console.WriteLine</i> and <i>String.Format</i>
use a <i>params</i> parameter for the list of objects after the formatting
string. Both classes also provide methods with one, two, or three objects
following the formatting string to prevent behind-the-scenes array creation
when only a couple items are being formatted. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As Ive discussed, when a method begins execution, space on
the stack is reserved for all the local variables in the method. For an array,
the amount of space needed on the stack is the size of a reference. If the
declaration of the array also includes element initialization, the compiler
generates code that allocates memory from the heap and initializes all the
element values in the array one by one.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If the array is declared in <i>Main</i>, the array creation
and initialization occur once when the program starts up. But suppose the array
is in another method. Heres a little method that calculates a day-of-year
value based on one-based month and day parameters (ignoring leap years); </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static int DayOfYear(int month, int day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:66.35pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    int[] daysCumulative = { 0, 31, 59, 90, 120,
151,                              181, 212, 243, 273, 304, 334 }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:148.65pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return cumulativeDays[month - 1] + day; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>For example the expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:99.5pt;margin-bottom:
.7pt;margin-left:-.75pt;text-indent:.5in;line-height:139%'><span
style='font-size:10.0pt;line-height:139%;font-family:Consolas'>DayOfYear(5, 10)
</span>returns the day-of-year value for May 10<sup>th</sup>, which is 130. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A program might be going through a file and calling this
method hundreds or thousands or even millions of times. Each and every time the
<i>DayOfYear</i> method is called, the array must be allocated from the heap
and initialized. After the method exits, the block of memory allocated from the
heap is no longer referenced and becomes eligible for garbage collection.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The whole process seems to cry out for some kind of
constant array. However, you cant declare an array using <i>const</i>.
Constants can be set only to values available at compile time. An array
requires a <i>new</i> operation, and <i>new</i> operations occur at runtime. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What you <i>can</i> do, however, is define the array as <i>static</i>,
which means that it is initialized only once. But then you cant have the array
inside the method in which its used. The array must be a field. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The following program defines two <i>DayOfYear</i> methods,
one of which uses an array inside the method, and another which uses a static
array outside the method. The program also uses the <i>Random</i> class to
generate random numbers, and the <i>Stopwatch</i> class to measure the time it
takes for 10 million calculations to occur. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The <i>Stopwatch</i> class in this project is in the <i>System.Diagnostics</i>
namespace, and its in the System assembly, which is System.dll, so youll need
a reference to that library. In the Solution Explorer in Visual Studio, right
click References, select Add Reference from the menu, and find System. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:438.05pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:438.05pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>TestArrayInitialization.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.4pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------------------
  // TestArrayInitialization.cs (c) 2006 by Charles Petzold //--------------------------------------------------------
  using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>using
  System.Diagnostics; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  TestArrayInitialization </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    const int
  iterations = 10000000; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.65pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>     static int[]
  daysCumulativeDays = { 0, 31, 59, 90, 120,
  151,                                     181, 212, 243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Stopwatch watch = new Stopwatch(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Random
  rand = new Random(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; iterations; i++) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  DayOfYear1(rand.Next(1, 13), rand.Next(1, 29)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Stop(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Local array:  &quot; + watch.Elapsed); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:224.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:100%'><span style='font-size:
  10.0pt;line-height:100%;font-family:Consolas'>        watch.Reset();        
  watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; iterations; i++) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  DayOfYear2(rand.Next(1, 13), rand.Next(1, 29)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Stop(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:86.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.WriteLine(&quot;Static array: &quot; + watch.Elapsed);     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  </td>
 </tr>
 <tr style='height:152.2pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:152.2pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static int
  DayOfYear1(int month, int day) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:76.1pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        int[] daysCumulative1 =
  { 0, 31, 59, 90, 120, 151,                                  181, 212, 243,
  273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  daysCumulative1[month - 1] + day; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:394.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    }  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static int
  DayOfYear2(int month, int day) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  daysCumulativeDays[month - 1] + day; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The array defined inside the method is faster than you
might anticipate. Fortunately array initialization is optimized, so you can
keep locally used arrays inside of methods and not worry <i>too</i> much. <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:.15pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369926">Chapter 12. Exception Handling </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# supports structured exception handling. As youve
experienced, exceptions occur during runtime and are identified by classes,
such as the <i>DivideByZeroException</i> class. Most of the basic exception
classes can be found in the <i>System</i> namespace; some are explicitly listed
in the <i>C# Language Specification</i>, §16.4. Often the documentation of
various classes, methods, and properties indicate exactly what exceptions can
be raised. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.75pt;
margin-left:-.25pt'>For example, the static <i>Double.Parse</i> method
indicates it can raise three types of exceptions: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:8.35pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>FormatException</i>
if the argument is not in the correct format. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.6pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>OverflowException</i>
if the resultant number is smaller than <i>Double.MinValue</i> or larger than <i>Double.MaxValue</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.65pt;
margin-left:.5in;text-indent:-.25in;line-height:107%'><span style='font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>ArgumentNullException</i>
if the <i>string</i> argument to the method is <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For example, the string &#8213;5.45E400&#8214; passed to <i>Double.Parse</i>
would rasie an <i>OverflowException</i> because the exponent is too large. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If youd prefer that such problems are handled gracefully
by your program rather than by the Common Language Runtime, you can enclose the
call to <i>Double.Parse</i> in a <i>try</i> block, which is followed by a <i>catch</i>
clause that deals with the exception: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>double input; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:374.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'> try { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    input = Double.Parse(Console.ReadLine()); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>} catch </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:71.75pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    Console.WriteLine(&quot;You typed an invalid
number&quot;);     input = Double.NaN; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that <i>input</i> variable is declared before the <i>try</i>
block. If its declared within the <i>try</i> block, then it wouldnt be
available outside the <i>try</i> block, and couldnt be referred to elsewhere. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>Double.Parse</i> succeeds in converting the input
string into a <i>double</i>, execution continues at the next statement
following the <i>catch</i> block. If <i>Parse</i> throws an exception, the the <i>catch</i>
block catches it. The code in the catch block is executed, and then normal
execution resumes with the code following the <i>catch</i> block. This
particular <i>catch</i> block displays a message and then sets <i>input</i> to
NaN. (You could also initialize <i>input</i> to NaN in the declaration
statement and leave out this assignment.) Presumably, the code that follows the
<i>catch</i> block checks the value of <i>input</i> for a NaN value and
requests the user to re-enter the number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>In a real-life program that reads numeric values from the
user, youll probably put the <i>try</i> and <i>catch</i> blocks in a <i>do</i>
loop and keep asking the user to re-enter the values until <i>Parse</i>
properly returns, as the following program demonstrates. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:473.1pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:473.1pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>InputDoubles.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//---------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:136.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// InputDoubles.cs (c) 2006 by
  Charles Petzold //--------------------------------------------- using System;
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  InputDoubles </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:103.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        double num =
  GetDouble(&quot;Enter the base: &quot;);         double exp =
  GetDouble(&quot;Enter the exponent: &quot;);        
  Console.WriteLine(&quot;{0} to the power of {1} is
  {2}&quot;,                     num, exp, Math.Pow(num, exp)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  double GetDouble(string strPrompt) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        double
  input = Double.NaN; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:372.7pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         do </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.Write(strPrompt); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:345.25pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>            
  try             { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  input = Double.Parse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:323.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>            }             catch
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  Console.WriteLine(&quot;You typed an invalid number!&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  Console.WriteLine(&quot;Please try again.&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:345.3pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>            }         } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        while
  (Double.IsNaN(input)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  input; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Its important to recognize that if <i>Parse</i> throws an
exception, the <i>Parse</i> method doesnt actually return to the program the
way it normally does. Execution leaps from somewhere deep inside the <i>Parse</i>
method to the <i>catch</i> clause. In this program, if you dont initialize the
value of <i>input</i> in the declaration statement (or explicitly set <i>input</i>
to a value before calling <i>Double.Parse</i>), then <i>input</i> will be
uninitialized in the <i>catch</i> block. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>catch</i> clause in the InputDouble program is known
as a <i>general catch</i> clause. It will catch any exception raised in the <i>try</i>
block. You can instead indicate that a <i>catch</i> clause apply only to a
specific type of exception. For example, heres a little variation of the basic
<i>try</i> statement that includes a specific <i>catch</i> clause: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>try </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Statement or statements to try </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>catch (System.Exception exc) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Error processing </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>catch</i> keyword is followed by parentheses and a
variable declaration that makes it look a bit like a parameter list to a
method. <i>Exception</i> is a class in the <i>System</i> namespaceyou can
leave out the <i>System</i> preface if you have a <i>using</i> directive for <i>System</i>,
of courseand <i>exc</i> (which you can name whatever you want) is declared to
be an object of type <i>Exception</i>. Within the <i>catch</i> block, you can
use this <i>Exception</i> object to obtain more information about the error.
You can display the <i>Message</i> property of the object like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(exc.Message); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>For the InputDouble program, the <i>Message</i> property
will be either the string </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Input string was not in a correct format. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>if the user types letters rather than numbers (for
example), or: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Value was either too large or too small for a Double. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This error can be raised if the number is typed in
scientific notation with too large or too small an exponent. You may prefer
displaying messages like these to the user rather than making up your own. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>If you pass the <i>Exception</i> object directly to <i>WriteLine</i>
as </p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.3pt;margin-bottom:5.5pt;
margin-left:-.75pt;text-indent:.5in'><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>Console.WriteLine(exc); </span>youll effectively
call the <i>ToString</i> method of the <i>Exception</i> class, which displays
detailed information, including a stack trace. This is very useful during
program development. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although the <i>catch</i> clause with the <i>Exception</i>
object is classified as a specific <i>catch</i> clause, its really just as
generalized as the general <i>catch</i> clause. Thats because all the
different exception classes (such as <i>DivideByZeroException</i> and <i>OverflowException</i>)
are defined in a class hierarchy with <i>Exception</i> at the top. (Actually,
as Jeff Richter notes in <i>CLR via C#</i>, pages 426-427, its possible for
CIL code to throw exceptions not derived from <i>Exception</i>.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Earlier I indicated the various exceptions that <i>Double.Parse</i>
can raise. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>You can get very specific in the way you handle each of
these exception: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:368.65pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>try { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    input = Double.Parse(Console.ReadLine()); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>catch (FormatException exc) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Handle format exceptions </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>catch (OverflowException exc) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Handle overflow exceptions </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>catch (ArgumentNullException exc) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Handle null argument exceptions </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>catch (Exception exc) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:148.65pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    // Handle all other exceptions (if any) } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>catch</i> clauses are examined in sequence for the
first one that matches the exception. The final <i>catch</i> clause can
alternatively be a general clause with no parameter. At any rate, if youre
examining individual types of exceptions, you should always include a general <i>catch</i>
clause or a <i>catch</i> clause using <i>Exception</i> at the end to process
all the exceptions that are not handled individually. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In this particular example, the penultimate <i>catch</i>
clauses should never be executed because <i>Console.ReadLine</i> never returns <i>null</i>.
But including non-functional <i>catch</i> clauses never hurts, even if it just
contains the statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.5pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>Console.WriteLine(&quot;This
statement should never be executed&quot;); </span>Its surprising how often you
see such messages! </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The <i>try</i> block in this example actually has two
method calls: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.75pt;
margin-left:-.25pt'><i>Console.ReadLine</i> is executed first, and then <i>Double.Parse</i>.
It is possible for <i>Console.ReadLine</i> to raise three types of exceptions: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:8.5pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>IOException</i>
if an input error occurs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.75pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>OutOfMemoryException</i>
if not enough memory is available to store the <i>string</i> object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:4.95pt;
margin-left:.5in;text-indent:-.25in;line-height:106%'><span style='font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>ArgumentOutOfRangeException</i>
if the number of characters typed by the user is greater than <i>Int32.MaxValue</i>
or 2,147,483,647. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, it is <i>extremely</i> improbable that <i>Console.ReadLine</i>
will raise any of these three exceptions, and only someone whos extremely
obsessivecompulsive (or fatally pessimistic) will enclose every <i>Console.ReadLine</i>
statement in a <i>try</i> block. But its useful to keep in mind that any
allocation of memory might raise an exception. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Theres a third clause, called the <i>finally</i> clause,
that you can use in the <i>try</i> statement. The <i>finally</i> clause comes
after all the <i>catch</i> clauses, like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>finally </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Statements in finally block </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The statements in the <i>finally</i> clause are guaranteed
to execute following the execution of the <i>try</i> clause (if no exception is
thrown) or the relevant <i>catch</i> clause.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At first, the <i>finally</i> clause doesnt seem necessary.
If you want code executed after <i>try</i> and <i>catch</i>, why cant you
simply put it after the <i>catch</i> clause itself? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The answer is simple: The <i>try</i> or <i>catch</i> clause
could contain a <i>return</i> statement to return control to the calling method
or (if the method is <i>Main</i>) to terminate the program. In that case, the
statements following the last <i>catch</i> clause of the <i>try</i> statement
would not be executed. Thats where the <i>finally</i> clause helps out. If the
<i>try</i> or <i>catch</i> clause contains a <i>return</i> statement, the
statements in the <i>finally</i> clause are guaranteed to execute regardless.
Its also possible to exit a <i>try</i> or <i>catch</i> clause with a <i>goto</i>
or a <i>throw</i> statement, which Ill describe shortly. The statements in the
<i>finally</i> clause execute in those cases as well. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You generally use a <i>finally</i> clause for clean up. A <i>finally</i>
clause might close a file, for example.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Its possible to have a <i>finally</i> clause following a <i>try</i>
clause but with no <i>catch</i> clause. In this case, the user is notified of
the error as if the program did not handle the exception, but the <i>finally</i>
clause is executed before the program is terminated. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Besides catching exceptions, you should also know how to
throw them. If youre writing a method that might encounter problems of various
sorts, generally youll want the method to throw an exception to notify the
code calling the method of these problems. The <i>throw</i> statement can be as
simple as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>throw; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But this simple form of the <i>throw</i> statement can be
used only in a <i>catch</i> block to rethrow the exception. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Otherwise, you must supply an argument, which is an
instance of the <i>Exception</i> class or any class that is derived from <i>Exception</i>,
including classes you write yourself. Heres the simplest case: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>throw new Exception(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>But thats being unnecessarily vague about the type of
error that occurred. Try to use one of the more specific exceptions. Very often
youll find a descendent of <i>Exception</i> in the <i>System</i> namespace
that comes close to what you want. For example, if your method has a <i>string</i>
parameter and the method cant work if a <i>null</i> argument is passed, youll
probably have code that looks like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (strInput == null) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    throw new ArgumentNullException(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Its also possible to pass a <i>string</i> argument to the <i>ArgumentNullException</i>
constructor, perhaps to indicate the particular method parameter that caused
the problem: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>throw new ArgumentNullException(&quot;Input string&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>That string you pass becomes part of the exception message
in a <i>catch</i> clause. Instead of the <i>Message</i> property being </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Value cannot be null. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>it will be: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Value cannot be null. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Parameter name: Input string </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As soon as a <i>throw</i> statement executes, the method is
finished. No further code will be executed. If <i>throw</i> is executed as part
of an <i>if</i> statement, it makes no sense to have an <i>else</i> clause: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (strInput == null) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    throw new ArgumentNullException(); else </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:154.15pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    // Do stuff if exception is not thrown } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can simply follow the <i>if</i> statement containing
the <i>throw</i> with the other code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (strInput == null) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    throw new ArgumentNullException(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>// Do stuff if exception is not thrown </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Lets write our own <i>Parse</i> method for unsigned
integers. Restricting it to unsigned integers simplifies the logic because
negative signs wont be allowed. The method will throw the same three
exceptions as the normal <i>Parse</i> method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:522.05pt;margin-bottom:
0in;margin-left:-1.25in;text-indent:0in;line-height:107%'>&nbsp;</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:637.05pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:637.05pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>MethodWithThrows.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// MethodWithThrows.cs (c) 2006
  by Charles Petzold //------------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  MethodWithThrows </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        uint
  input; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;Enter an unsigned integer: &quot;); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        
  try         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  input = MyParse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(&quot;You entered {0}&quot;, input); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        catch
  (Exception exc) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(exc.Message); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:367.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        }     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  uint MyParse(string str) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:273.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        uint result =
  0;         int i = 0; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        // If argument is null,
  throw an exception.         if (str == null) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            throw
  new ArgumentNullException(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:218.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        // Get rid of white
  space.         str = str.Trim(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        //
  Check if there's at least one character. </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (str.Length == 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  throw new FormatException();  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:81.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        // Loop through all the
  characters in the string.         while (i &lt; str.Length) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            //
  If the next character's not a digit, throw exception. </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:185.95pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>            if
  (!Char.IsDigit(str, i))                 throw new FormatException(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:37.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>            // Accumulate the
  next digit (notice &quot;checked&quot;).             result = checked(10 *
  result + (uint) str[i] - (uint) '0'); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:328.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>            i++;         } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  result; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.7pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>MyParse</i> method trims off any white space using
the <i>Trim</i> method of the <i>String</i> class and then uses a <i>while</i>
statement to loop through all the characters in the string. If a character
passes the <i>IsDigit</i> test, the method multiplies result by 10 and adds the
new digit converted from Unicode to its numeric value. <i>MyParse</i> doesnt
explicitly throw an <i>OverflowException</i>; instead, it performs the
calculation in a <i>checked</i> statement to generate the normal <i>OverflowException</i>.
The <i>Main</i> method lets you experiment with <i>MyParse</i> and catches any
exceptions it may throw. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although <i>Parse</i> certainly provides a good example for
exception handling, you actually have an alternative. All the numeric types
also support a method named <i>TryParse</i>. This method doesnt raise
exceptions. Instead, it returns a <i>bool</i> indicating if the <i>string</i>
was successfully parsed. If so, the number is returned as an argument defined
using the <i>out</i> keyword. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres the InputDoubles program converted to use <i>TryParse</i>:
</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:367.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:367.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>InputDoublesWithTryParse.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//---------------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:70.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// InputDoublesWithTryParse.cs
  (c) 2006 by Charles Petzold
  //--------------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  InputDoublesWithTryParse </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:103.85pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        double
  num = GetDouble(&quot;Enter the base: &quot;);         double exp =
  GetDouble(&quot;Enter the exponent: &quot;);        
  Console.WriteLine(&quot;{0} to the power of {1} is
  {2}&quot;,                     num, exp, Math.Pow(num, exp)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  double GetDouble(string strPrompt) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        double
  input; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(strPrompt); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:70.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        while
  (!Double.TryParse(Console.ReadLine(), out input))         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(&quot;You typed an invalid number!&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(&quot;Please try again: &quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.Write(strPrompt); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  input; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
style='font-size:10.0pt;line-height:107%;font-family:"Courier New"'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that the <i>while</i> statement uses the return
value from <i>Double.TryParse</i> as its Boolean argument. Also notice the
second argument to the <i>TryParse</i> method includes the <i>out</i> keyword. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>TryParse</i> method is particularly handy in
graphical environments such as Windows Forms. For example, suppose you have a
dialog box with an OK button named <i>btnOK</i> and a <i>TextBox</i> named <i>txtbox</i>
for the user to enter a floating-point number. You can install a <i>TextChanged</i>
event handler for the <i>TextBox</i> and whenever the text changes, you make
the following call: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>btnOK.Enabled = Double.TryParse(txtbox.Text, out input); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thus, the OK button isnt even enabled until the <i>TextBox</i>
has proper input. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:.05pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369927">Chapter 13. Classes, Structures, and Objects </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although the .NET Framework defines many classes and
structures including those that support the basic data types of C# such as <i>int</i>
and <i>string</i>object-oriented languages such as C# allow you, the
programmer, to define your own classes and structures. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Very often, programs of various sorts must deal with
calendar dates. Its easy enough to define three integers in your program that
you can set to represent a date: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int year, month, day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, if you have a method that must deal with this date
in some way, the method would require three parameters. Suppose you want to
write a method that determines the number of days between two dates. That
method requires six parameters. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For these reasons and others, it is probably much more
convenient to deal with a particular date as a single entity rather than three
separate numbers. This convenience is a primary impetus behind object-oriented
programming. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You might assume that the .NET Framework already defines a
class or structure to represent dates, and you would be correct. The <i>DateTime</i>
structure in the <i>System</i> namespace is very important in .NET programming,
which is why I devote Chapter 23 to it. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But for this exercisewhich begins in this chapter and
continues in several subsequent chaptersId like to assume that <i>DateTime</i>
does not exist. Or perhaps, youve decided that youd rather use an alternative
to <i>DateTime</i> that you know inside and out. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Before the era of object-oriented programming, many
languages allowed programmers to consolidate several variables into entities
sometimes referred to as <i>programmer-defined</i> data types, or <i>compound</i>
data types, but very often named <i>structures</i>. Heres a C structure to
represent a date: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:319.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>struct Date {     int year;     int month;     int day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>}; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The keyword <i>struct</i> is followed by the name of the
structure. The body of the structure is enclosed in curly brackets. This
particular structure contains three members, all of which are fields, and all
of which are of type <i>int</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can define a <i>Date</i> structure the same way in C#,
but it wouldnt be very useful. If a structure contains only fields, the fields
need to be accessible from outside the structure, and for that reason they must
be preceded by the <i>public</i> keyword: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:324.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>struct Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:247.7pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    public int year;     public int month;     public int
day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>The keyword <i>public</i> is known as an <i>access modifier</i>
and allows the fields to be accessed from code outside the structure. If you
want, you can consolidate all three fields in a single declaration: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:324.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>struct Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public int year, month, day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>public</i> access modifier applies to all three
fields. (However, you cant use the C++ syntax for applying the <i>public</i>
modifier to multiple fields.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Also important is the fact that these three fields do not
include the <i>static</i> keyword, which means these are instance fields rather
than static fields. There is no <i>instance</i> keyword; members of a class or
structure not defined as static are instance by default.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Weve had frequent contact with both static methods and
instance methods. The expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>i.ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>invokes an instance method that applies to a particular
integeran instance of the Int32 structure. The expression </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.7pt;margin-bottom:
5.5pt;margin-left:-.75pt;text-indent:.5in'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>Int32.Parse(str) </span>invokes a static
method. Static methods are always prefaced with the class or structure name to
which they belong. You dont need an actual integer (otherwise known as an
instance of the <i>Int32</i> structure) to call <i>Parse</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Youve also had encounters with static fields, such as the <i>PI</i>
field in the <i>Math</i> class. (Actually <i>PI</i> is a constant, but a
constant field is also implicitly static.) You refer to a static field by
prefacing it with the class name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Math.PI </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Instance fields are different. You cannot refer to an
instance field by prefacing it with the class or structure name. For example,
you cant reference the <i>year</i> field of the <i>Date</i> structure by
prefacing it with the name of the structure: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date.year = 1969;    // Won't work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Instead, you must first create an instance of the <i>Date</i>
structure, which you can do by declaring a variable of type <i>Date</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateMoonWalk; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Often when naming instances of classes or structures, I use
a variable name that begins with the lower-case class or structure name, or an
abbreviation of that name. You can refer to the variable <i>dateMoonWalk</i> is
&#8213;an instance of the <i>Date</i> structure&#8214; or &#8213;an object of
type <i>Date</i>.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Once you have declared a <i>Date</i> object, you can refer
to the fields of that object by prefacing the field with the variable name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.4pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>dateMoonWalk.year = 1969; </span>Or:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.85pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;The year of the first moon walk was &quot;
+                   dateMoonWalk.year); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a complete program that defines the <i>Date</i> structure,
sets its fields, and then displays the information. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:320.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:320.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SimpleDateStructureDemo.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.4pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------------------
  // SimpleDateStructureDemo.cs (c) 2006 by Charles Petzold
  //-------------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>struct Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:279.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    public int year;     public
  int month;     public int day; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:416.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  SimpleDateStructureDemo </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:246.5pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>         dateMoonWalk.year
  = 1969;         dateMoonWalk.month = 7;         dateMoonWalk.day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Moon walk: {0}/{1}/{2}&quot;,  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  dateMoonWalk.month, dateMoonWalk.day, dateMoonWalk.year); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This file contains the definition of the <i>Date</i>
structure and the definition of a class named <i>SimpleDateStructureDemo</i>
that contains a <i>Main</i> method that refers to the <i>Date</i> structure.
The order of these two definitions doesnt matter. The <i>Date</i> structure
doesnt have to be defined before the <i>SimpleDateStructureDemo</i> class.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The structure and the class could also be defined in
separate files, but the two files must be part of the same project. If you
develop a class or structure that youd like to reuse in multiple projects,
putting that class or structure in its own file is crucial. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can even define the <i>Date</i> structure inside the <i>SimpleDateStructureDemo</i>
class (but not inside the <i>Main</i> method). The result might look something
like this:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class SimpleDateStructureDemo </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:302.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    struct Date     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:225.65pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        public int year;         public int
month;         public int day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:363.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, this <i>Date</i> structure would only be
accessible from code inside the <i>SimpleDateStructureDemo</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The code in the <i>Main</i> method illustrates some
unstated &#8213;rules&#8214; about using the <i>Date</i> structure. Both the <i>month</i>
and <i>day</i> fields are one-based rather than zero-based. The <i>month</i>
value ranges from 1 to 12 for January through December. The <i>day</i> value is
the familiar day of the month. Of course, this simple <i>Date</i> structure has
no way of enforcing these rules, but that will be a later enhancement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Im also going to set another rule that will come into play
later: The <i>year</i> field shall refer to years in the common era of the
Gregorian calendar. The Gregorian calendar was established by Pope Gregory XIII
in 1582 and eventually adopted by much of the rest of the Western world to
replace the Julian calendar in effect since the days of Julius Caesar. The
Julian calendar had leap years every four years. In the Gregorian calendar,
years divisible by 100 are not leap years, except if the year is also divisible
by 400. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As you can see, you can declare instances of the <i>Date</i>
structure as easily as you define instances of the <i>Int32</i> structure: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateApollo11Launch, dateMoonWalk, dateApollo11SplashDown; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, it is not possible (yet) to define an initial
value for the structure right in the declaration statement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>SimpleDateStructureDemo</i> program declares an
object of type <i>Date</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateMoonWalk; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Alternatively, it could initialize the <i>Date</i>
structure with a declaration that uses a <i>new</i> expression like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateMoonWalk = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Or, following the simple declaration, you can set <i>dateMoonWalk</i>
to the <i>new</i> expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dateMoonWalk = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In either case, the <i>new</i> expression returns a <i>Date</i>
structure has all its fields set to zero. In this expression, it has the effect
of initializing <i>dateMoonWalk</i> to these zero values. The <i>new</i>
expression essentially &#8213;zeroes out&#8214; the object. If the structure
happened to include fields that were reference types (<i>string</i>, for
example), those fields would be set to <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Obviously the SimpleDateStructureDemo program doesnt
require a <i>new</i> expression when defining the <i>Date</i> object. The
program compiles and runs just fine. Thats because the program sets each field
of the <i>Date</i> object before accessing that field. A field that is not
explicitly seteither through a <i>new</i> expression or through an assignment
statementis considered to be uninitialized and the C# compiler wont let you
access that field. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As your structures start getting larger and more complex,
the C# compiler cant always determine whether a particular field has been set
or not. Its a good idea to get into the habit of using a <i>new</i> expression
when defining instances of structures.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In this particular program, if you use a <i>new</i>
expression but dont set the fields explicitly, the date will be displayed as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>0/0/0 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>That date is invalid. Its an invalid month, and invalid
day, and an invalid year. There is no year zero. The year before 1 A.D. is 1
B.C.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If at all possible, you should define your structures so
that the default valuewhich is the value the object gets when its zeroed-out
by the <i>new</i> expressionis valid and, moreover, represents something akin
to zero for the particular object. In theory, the default value for such a <i>Date</i>
structure should probably be the date January 1 in the year 1, but it doesnt
seem quite possible to do that (yet). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can define an array of <i>Date</i> structures using a <i>new</i>
expression with the data type followed by an array size in square brackets: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date[] dates = new Date[5]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>This particular <i>new</i> expression allocates memory in
the heap sufficient to store five <i>Date</i> objects. Each <i>Date</i> object
has three fields of four bytes each, so thats a total of 60 bytes. (Some
overhead is also required.) You can set a particular element of this array like
so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:219.95pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>dates[3].year = 1969; dates[3].month = 7; dates[3].day =
20; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And you can display the fields similarly. You index the
array with square brackets, and then refer to a field of that element with a
period and the field name. In the table of Operator Precedence and
Associativity, both array indexing (symbolized by <i>a[x]</i> in the table) and
the dot operator (<i>x.y</i>) have the same precedence and associate left to
right. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following is basically the same program as
SimpleDateStructureDemo except that <i>Date</i> is defined as a class rather
than a structure. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:320.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:320.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SimpleDateClassDemo.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//----------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:97.8pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//
  SimpleDateClassDemo.cs (c) 2006 by Charles Petzold
  //---------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:279.4pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    public int year;     public
  int month;     public int day; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:416.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  SimpleDateClassProgram </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk = new Date(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:164.1pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        dateMoonWalk.year =
  1969;         dateMoonWalk.month = 7;         dateMoonWalk.day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Moon walk: {0}/{1}/{2}&quot;,  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  dateMoonWalk.month, dateMoonWalk.day, dateMoonWalk.year); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>A class is a reference type. When you simply declare a
variable using a class like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:30.55pt;margin-bottom:
3.55pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>Date dateMoonWalk; </span>then <i>dateMoonWalk</i>
is considered to be uninitialized. It doesnt even equal <i>null</i>. No memory
has been allocated from the heap. You cant assign anything to the fields
because there is no memory to hold the values. Before you use <i>dateMoonWalk</i>
at all you must use the <i>new</i> operator to create a new instance of the <i>Date</i>
class. You can do this either in the declaration statement itself </p>

<p class=MsoNormal style='margin-top:0in;margin-right:208.15pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Date dateMoonWalk = new Date(); </span>or
in an assignment statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dateMoonWalk = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In either case, sufficient memory is allocated from the
heap for an instance of the <i>Date</i> class. (Its 12 bytes plus overhead.)
Because heap memory is automatically set to zero, all the fields of the
instance are effectively set to zero. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can also declare an array of <i>Date</i> objects: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date[] dates; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.5pt;margin-bottom:6.35pt;
margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;line-height:
115%'>At this point the <i>dates</i> array is uninitialized. You can allocate
memory for the array using a <i>new</i> expression by itself <span
style='font-size:10.0pt;line-height:115%;font-family:Consolas'>dates = new
Date[5]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>or right in the declaration statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date[] dates = new Date[5]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When <i>Date</i> was a structure, the <i>new</i> expression
allocated memory from the heap sufficient for 5 instances of the structure.
When <i>Date</i> is a class, memory is allocated from the heap sufficient for 5
<i>references</i>. Each of these references is initialized to <i>null</i>. What
you now have is an array of 5 <i>null</i> references. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Before you can use any element of this array, you must use
a <i>new</i> expression for that element: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dates[0] = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Most likely, youll allocate memory for each element of the
array in a <i>for</i> loop: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:137.7pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>for (int i = 0; i &lt; dates.Length; i++)     dates[i] =
new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You cant use <i>foreach</i> for this job because the array
elements are readonly in the body of the <i>foreach</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Heres another way to declare, create, and initialize an
array of <i>Date</i> objects when <i>Date</i> is a class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:22.3pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date[] dates = new Date[5] { new Date(), new Date(), new
Date(),                              new Date(), new Date() }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As usual, you can leave out the first <i>new</i> expression
when you initialize the array in the declaration statement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Lets review. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Within a method such as <i>Main</i> you can declare an
object of type <i>Date</i> like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateMoonWalk; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Regardless whether <i>Date</i> is a class or a structure,
space for <i>dateMoonWalk</i> is set aside on the stack. If <i>Date</i> is a
structure, the space on the stack is the size of the structure, which is 12
bytes. If <i>Date</i> is a class, the space on the stack is the size of a
reference. In each case, the object is uninitialized. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Only if <i>Date</i> is a class can you assign <i>dateMoonWalk</i>
a <i>null</i> reference: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dateMoonWalk = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The object is no longer uninitialized, but it doesnt refer
to anything. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>You can also use the <i>new</i> operator with the object: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dateMoonWalk = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>Date</i> is a structure, then the fields of the
structure are all set to zero. The object is now initialized. If <i>Date</i> is
a class, then memory is allocated from the heap sufficient to store a <i>Date</i>
object. The heap memory is set to zero, effectively setting the fields of the
class to zero. The object is now initialized. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can also declare an array of <i>Date</i> objects: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date[] dates; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Space on the stack is set aside for a reference. The <i>dates</i>
array is a reference regardless whether <i>Date</i> is a class or a structure.
It is unitialized.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Arrays themselves are always stored in the heap. You use
the <i>new</i> operator to allocate this heap memory: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dates = new Date[27]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>Date</i> is a structure, then sufficient memory is
allocated from the heap to store 27 instances of the <i>Date</i> structure,
with 12 bytes each. Each of these instances is zeroed-out and considered
initialized. If <i>Date</i> is a class, memory is allocated to store 27
references. Each element of the array is effectively initialized to <i>null</i>
and must be allocated individually with a <i>new</i> expression. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Instances of structures require less memory and less
overhead than instances of classes, and require much less activity when arrays
are involved. Structures are suitable for <i>light-weight</i> objects,
particularly objects that are similar to numbers in some way. Whenever you need
a new class or structure that has just a few fields, you should probably make
it a structure, especially if you expect to be creating arrays of the objects. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, there are certainly trade-offs. As youll see in
the chapters ahead, structures have some distinct drawbacks. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:.25pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369928">Chapter 14. Instance Methods </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>One common task when working with dates is calculating
day-of-year values, which is the number of days from the beginning of the year
to a particular day. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>One part of this job is determining whether a year is a
leap year or not. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>This static method does that job: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static bool IsLeapYear(int year) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.65pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return year % 4 == 0 &amp;&amp; (year % 100 != 0 ||
year % 400 == 0); } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Chapter 11 showed a static <i>DayOfYear</i> method that
ignored leap years. The method used a static array named <i>daysCumulative</i>
to simplify the job: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:49.8pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>static int[] daysCumulative = { 0, 31, 59, 90, 120,
151,                                 181, 212, 243, 273, 304, 334 }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static int DayOfYear(int month, int day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return daysCumulative[month - 1] + day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.1pt;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As we discovered in that chapter, its better to declare
initialized arrays as static fields rather than local variables so they only
get initialized once. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>DayOfYear</i> method is fairly easy to alter to take
account of leap years. All thats necessary is to add 1 when the year is a leap
year and the month is March or later: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static int DayOfYear(int year, int month, int day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:115.7pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return daysCumulative[month - 1] + day +        
(month &gt; 2 &amp;&amp; IsLeapYear(year) ? 1 : 0); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.15pt;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that an extra parameter had to be added for the
year, and that the method makes use of the <i>IsLeapYear</i> method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, one of the reasons we originally decided it might
be best to treat dates as single entities is to avoid having three parameters
to methods like <i>DayOfYear</i>. It would be much better having just one
parameter of type <i>Date</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static int DayOfYear(Date dateParam) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:22.75pt;margin-bottom:
6.2pt;margin-left:.5in;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:119%'><span style='font-size:10.0pt;line-height:
119%;font-family:Consolas'>    return daysCumulative[dateParam.month - 1] +
dateParam.day +         (dateParam.month &gt; 2 &amp;&amp;
IsLeapYear(dateParam.year) ? 1 : 0); } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now, rather than referring to the year, month, and day
parameters to the method, it refers to <i>dateParam.year</i>, <i>dateParam.month</i>,
and <i>dateParam.day</i>. Unfortunately, simplifying the parameter list seems
to make the body of the method more complex. Dont worryitll shrink back down
in size before the end of this chapter. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Lets put all this stuff in a working program. The program
is called StructureAndMethodsOne because it is the first in a three-part series
that evolves from traditional procedural programming to object-oriented
programming. This program declares <i>Date</i> as a structure, but nothing in
this chapter depends on that. You can change <i>Date</i> to a class and all the
programs in this chapter will work the same. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:414.65pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 48.65pt 0in 1.45pt;height:414.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StructureAndMethodsOne.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:54.9pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------------------
  // StructureAndMethodsOne.cs (c) 2006 by Charles Petzold
  //------------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>struct Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:236.55pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    public int year;     public
  int month;     public int day; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:373.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StructureAndMethodsOne </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk = new Date(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:203.6pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         dateMoonWalk.year =
  1969;         dateMoonWalk.month = 7;         dateMoonWalk.day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:normal'><span style='font-size:10.0pt;font-family:
  Consolas'>        Console.WriteLine(&quot;Moon walk: {0}/{1}/{2} Day of Year:
  {3}&quot;,              dateMoonWalk.month, dateMoonWalk.day,
  dateMoonWalk.year, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  DayOfYear(dateMoonWalk)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  bool IsLeapYear(int year) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:6.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        return year % 4 == 0
  &amp;&amp; (year % 100 != 0 || year % 400 == 0);     }  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:16.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    static int[] daysCumulative
  = { 0, 31, 59, 90, 120, 151,                                     181, 212,
  243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    static int DayOfYear(Date dateParam)
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        return
daysCumulative[dateParam.month - 1] + dateParam.day +            
(dateParam.month &gt; 2 &amp;&amp; IsLeapYear(dateParam.year) ? 1 : 0); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.55pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The <i>Date</i> structure is the same as the one in the
previous chapter. All </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Ive done is add one static field and two static methods to
the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>StructureAndMethods</i> class to calculate the
day-of-year for a particular <i>Date</i> object. The call to <i>DayOfYear</i>
occurs in the <i>Console.WriteLine</i> call in <i>Main</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There is nothing really wrong with this program, but
theres not much that couldnt also be done in C. One of the objectives of
object-oriented programming is to write code that is reusable, and perhaps even
accessible from a dynamic link library. If we have a structure named <i>Date</i>,
then it helps if that structure itself contains methods that involve these
dates. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>C doesnt allow putting code in a structure, but
object-oriented languages like C++ and C# allow classes and structures to
contain both code and data. (Of course, you know this already, because classes
that contain methods like <i>Main</i> can also contain fields.) </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:320.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:320.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StructureAndMethodsTwo.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:97.8pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------------------
  // StructureAndMethodsTwo.cs (c) 2006 by Charles Petzold
  //------------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>struct Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:279.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    public int year;     public
  int month;     public int day; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool IsLeapYear(int year) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.95pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        return
  year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0);     }  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.65pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    static
  int[] daysCumulative = { 0, 31, 59, 90, 120,
  151,                                     181, 212, 243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static int DayOfYear(Date dateParam) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>        return
  daysCumulative[dateParam.month - 1] + dateParam.day +            
  (dateParam.month &gt; 2 &amp;&amp; IsLeapYear(dateParam.year) ? 1 : 0); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  </td>
 </tr>
 <tr style='height:175.7pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:175.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StructureAndMethodsTwo </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk = new Date(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:203.6pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         dateMoonWalk.year =
  1969;         dateMoonWalk.month = 7;         dateMoonWalk.day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-align:justify;text-justify:inter-ideograph;text-indent:
  0in;line-height:99%'><span style='font-size:10.0pt;line-height:99%;
  font-family:Consolas'>        Console.WriteLine(&quot;Moon walk: {0}/{1}/{2}
  Day of Year: {3}&quot;,              dateMoonWalk.month, dateMoonWalk.day,
  dateMoonWalk.year, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Date.DayOfYear(dateMoonWalk)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This is really quite similar to the first version of the
program except that stuff has been moved around. I cut and pasted the two
static methods and static field into the <i>Date</i> structure themselves.
Because the <i>DayOfYear</i> method needs to be accessed from outside the class
I gave it a <i>public</i> modifier. I also gave <i>IsLeapYear</i> a <i>public</i>
modifier just in case anyone wants to use that one. But <i>daysCumulative</i> I
left private under the assumption that this array wouldnt be very important to
external classes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You might notice that <i>IsLeapYear</i> has a parameter
that is the same name as one of the fields. Thats OK. Within the method, <i>year</i>
refers to the method parameter.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The only real difference in <i>Main</i> is how the <i>DayOfYear</i>
method is called. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>When it was in the same class as <i>Main</i>, it was called
like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DayOfYear(dateMoonWalk) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Now its a static method in the <i>Date</i> structure so
when called from outside the structure, it must be prefaced with the structure
name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date.DayOfYear(dateMoonWalk) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, <i>DayOfYear</i> can still refer to <i>IsLeapYear</i>
without prefacing it with the structure name because the two methods are in the
same structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.25pt;
margin-left:-.25pt'>The next enhancement to the program certainly simplifies
it. This enhancement changes <i>DayOfYear</i> from a static method to an
instance method. Moving the static <i>DayOfYear</i> method into the <i>Date</i>
structure was only the preliminary step to this much more important change. </p>

<h2 style='margin-top:0in;margin-right:7.15pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>StructureAndMethodsThree.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//---------------------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// StructureAndMethodsThree.cs (c) 2006
by Charles Petzold //---------------------------------------------------------
using System; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:421.65pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:421.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>struct Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:279.45pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    public int
  year;     public int month;     public int day; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool IsLeapYear(int year) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.95pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        return year % 4 == 0
  &amp;&amp; (year % 100 != 0 || year % 400 == 0);     }  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.65pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    static int[] DaysCumulative
  = { 0, 31, 59, 90, 120, 151,                                     181, 212,
  243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  DayOfYear() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        return
  DaysCumulative[month - 1] + day +             (month &gt; 2 &amp;&amp;
  IsLeapYear(year) ? 1 : 0); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:416.75pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StructureAndMethodsThree </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk = new Date(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:246.5pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         dateMoonWalk.year =
  1969;         dateMoonWalk.month = 7;         dateMoonWalk.day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.05pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>        Console.WriteLine(&quot;Moon
  walk: {0}/{1}/{2} Day of Year: {3}&quot;,              dateMoonWalk.month,
  dateMoonWalk.day, dateMoonWalk.year,             dateMoonWalk.DayOfYear()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The static version of <i>DayOfYear</i> in the previous
program calculated a day-of-year value based on a <i>Date</i> parameter to the
method. It needed this parameter to reference the three fields of the
particular <i>Date</i> structure for which its calculating a day-of-year
value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The instance version of <i>DayOfYear</i> has no parameter;
instead, it refers directly to the three instance fields of the structure.
Notice how much the <i>DayOfYear</i> code has been simplified: Rather than <i>dateParam.month</i>,
it can now simply reference <i>month</i>. Any instance method in a class or
structure has direct access to the instance fields of that class or structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Now look at <i>Main</i>. Previously <i>Main</i> had to call
the static <i>DayOfYear</i> method by specifying the <i>Date</i> structure in
which the method is declared, and passing a <i>Date</i> object to the method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date.DayOfYear(dateMoonWalk) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The new version calls the parameterless <i>DayOfYear</i>
method using the <i>Date</i> instance: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dateMoonWalk.DayOfYear() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>DayOfYear</i> method basically needs the same
information it did beforea year, a month, and a day. In the static version, it
was getting this information through the method parameter. The instance version
of the method is always called based on a particular instance of the structure
so the method can access the structure instance fields directly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This code change also brings about a change in perspective.
Previously <i>Main</i> was asking the <i>DayOfYear</i> method in the <i>Date</i>
structure to calculate a day-of-year value for a particular instance of <i>Date</i>.
Now the <i>Main</i> method is asking the <i>Date</i> instance named <i>dateMoonWalk</i>
to calculate its own day-of-year value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Ive kept <i>IsLeapYear</i> a static method just for some
variety. Perhaps a static <i>IsLeapYear</i> method might be useful if a program
wanted to determine if a particular year were a leap year without actually
creating an instance of the <i>Date</i> structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Any instance method in a class or structure can access
instance fields in the class or structure; also, any instance method can call
any other instance method in the class or structure. Any instance method can
also access static fields and call any static method in the class or structure.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, you cant go the other way. A static method <i>cannot</i>
access instance fields in the same class or structure, and a static method
cannot call instance methods. (Well, actually, a static method <i>can</i> call
an instance method or access instance fields, but only if that static method
has access to an instance of the classlike <i>DayOfYear</i> in the <i>StructureAndMethodsTwo</i>
program. In general, thats not the case.) A static method cant access
instance fields or call instance methods because an instance of the class
doesnt even have to exist when a static method is called. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>The first instance method you encountered in this book was <i>ToString</i>.
As you discovered, its possible for a program to pass any object to <i>Console.WriteLine</i>
and the <i>ToString</i> method provides some kind of text representation of the
object. You might be curious to try this with the <i>Date</i> structure by
inserting the statement </p>

<p class=MsoNormal style='margin-top:0in;margin-right:142.1pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Console.WriteLine(dateMoonWalk.ToString());
</span>or just: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(dateMoonWalk); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>In either case, youll get the string </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>which is nothing more nor less than the name of the <i>Date</i>
structure. The <i>Date</i> structure certainly seems to have a <i>ToString</i>
method, but at the moment its not doing anything very interesting. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Every class and every structure in the .NET
Frameworkincluding those classes and structure you write yourselfhas a <i>ToString</i>
method. The ubiquity of <i>ToString</i> is made possible through inheritance,
which is one of the primary characteristics of object-oriented programming.
When one class inherits (or <i>derives</i>) from another class, the new class
acquires all the non-private fields and methods of the class it inherits from,
and it can add its own fields and methods to the mix. The class that a new
class derives from is called the <i>base</i> class, and <i>base</i> is also a
C# keyword. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>One of the primary differences between classes and
structures involves inheritance. Classes can inherit from other classes, but a
structure exists mostly in isolation. A structure cannot explicitly inherit
from anything else, and nothing can inherit from a structure.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>All classes and structures derive from the grand matriarch
of the .NET Framework, <i>System.Object</i>. In C#, the keyword <i>object</i>
is an alias for <i>System.Object</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another important class in the <i>System</i> namespace is <i>System.ValueType</i>,
which inherits directly from <i>System.Object</i>. Although structures cant
explicitly inherit from anything else, all structures implicitly derive from <i>System.ValueType</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The techniques and implications of inheritance will become
more evident in the chapters ahead. For now, you should know that the <i>ToString</i>
method exists in all classes and structures because its defined in the <i>System.Object</i>
class like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public virtual string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Actually, just so you wont think the default
implementation of <i>ToString</i> is a long sophisticated chunk of code, I
wouldnt be surprised if it were implemented like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public virtual string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return GetType().FullName; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>GetType</i> is another method defined by <i>System.Object</i>.
It returns an object of type <i>Type</i>, and <i>FullName</i> is a property of
the <i>Type</i> class that returns the namespace and name of the type.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>At any rate, take note of the <i>virtual</i> keyword. This
keyword means that any class or structure can provide a custom-made <i>ToString</i>
method that supersedes the one declared in <i>System.Object</i>. This is known
as <i>overriding</i> the method, and you do it using the <i>override</i>
keyword. To provide a custom <i>ToString</i> method, you declare it like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public override string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Everything else about the methodthe existence of the <i>public</i>
keyword, the return value of <i>string</i>, and the absence of parametersmust
be the same. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>virtual</i> and <i>override</i> keywords are closely
related. A <i>virtual</i> method in one class can be superseded by an <i>override</i>
method in a derived class. Ill have more to say about this in Chapter 19. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>A custom <i>ToString</i> method must return an object of
type <i>string</i>, and frequently it uses the <i>String.Format</i> static
method for formatting data for display. Heres a new version of the <i>Date</i>
structure with such a <i>ToString</i> method. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:344.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 4.6pt 0in 1.45pt;height:344.35pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StructureWithToString.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//------------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:86.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// StructureWithToString.cs (c)
  2006 by Charles Petzold
  //------------------------------------------------------ using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>struct Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:273.95pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    public int
  year = 1;     public int month;     public int day; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool IsLeapYear(int year) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.95pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        return year % 4 == 0
  &amp;&amp; (year % 100 != 0 || year % 400 == 0);     }  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.65pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    static int[] daysCumulative
  = { 0, 31, 59, 90, 120, 151,                                     181, 212,
  243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  DayOfYear() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:100%'><span style='font-size:
  10.0pt;line-height:100%;font-family:Consolas'>        return
  daysCumulative[month - 1] + day +             (month &gt; 2 &amp;&amp;
  IsLeapYear(year) ? 1 : 0); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:10.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>    }      static string[]
  strMonths = { &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;,
  &quot;Apr&quot;, &quot;May&quot;,
  &quot;Jun&quot;,                                   &quot;Jul&quot;,
  &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;}; 
  </span></p>
  </td>
 </tr>
 <tr style='height:234.15pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 4.6pt 0in 1.45pt;height:234.15pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override string ToString() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:10.0pt;line-height:
  107%;font-family:Consolas'>        return String.Format(&quot;{0} {1}
  {2}&quot;, day, strMonths[month - 1], year); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:417.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StructureWithToString </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk = new Date(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:247.65pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        
  dateMoonWalk.year = 1969;         dateMoonWalk.month = 7;        
  dateMoonWalk.day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:11.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        Console.WriteLine(&quot;Moon
  walk: {0}, Day of Year: {1}&quot;,              dateMoonWalk,
  dateMoonWalk.DayOfYear()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>ToString</i> is an instance method, of course, so it can
refer directly to the fields of the <i>Date</i> structure. It also makes use of
a static array of month names, and chooses to format the date in the European
fashion. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now <i>Main</i> can display the date just by passing an
instance such as <i>dateMoonWalk</i> to <i>Console.WriteLine</i>. <i>Console.WriteLine</i>
passes the object to <i>String.Format</i>, which calls the objects <i>ToString</i>
method, which also calls <i>String.Format</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>But the problem with invalid dates is getting much more
critical. Try the two statements: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateDefault = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(dateDefault); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>ToString</i> method of <i>Date</i> now throws an
exception because it attempts to access <i>strMonths</i> with an index of 1. <i>DayOfYear</i>
has a similar problem. That might suggest to you that <i>ToString</i> or <i>DayOfYear</i>
is at fault and must be fixed. But thats not so. The problem occurs much
earlier, when <i>Date</i> allows an invalid date to be created in the first
place. We must prevent that from happening. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.9pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369929">Chapter 15. Constructors </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Consider this expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new Date() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What this expression actually does depends on whether <i>Date</i>
is a structure or a class. If <i>Date</i> is a class, the <i>new</i> operator
allocates memory from the heap sufficient to store an object of type <i>Date</i>.
This memory must be sufficient for all the instance fields defined in the
class. The memory allocation causes these fields to be set to zero, which
causes all value-type fields to be set to zero, and all reference-type fields
to be set to <i>null</i>. The <i>new</i> operator returns a reference to the
memory in the heap. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.15pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>If <i>Date</i> is a structure, the <i>new</i> expression
returns a <i>Date</i> object with all its fields set to zero, but the <i>new</i>
expression by itself doesnt really do much of anything.  If <i>dt</i> is an
object of type <i>Date</i>, then the expression <span style='font-size:10.0pt;
line-height:115%;font-family:Consolas'>dt = new Date() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>effectively sets all the fields of <i>dt</i> to zero or <i>null</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In either case, this behavior has been causing problems. We
want a newly created <i>Date</i> object to represent a date of 1/1/1 rather
than 0/0/0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>One way to fix this problem is to simply initialize the
fields in the declaration statements: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:225.65pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    public int year = 1;     public int month = 1;    
public int day = 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now a little more happens during the <i>new</i> expression.
After the memory for the instance has been allocated from the heap, the three
fields are all initialized to 1. Its a valid date. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The only problem is that you can initialize fields only for
a class. If <i>Date</i> is a structure, then fields are always initialized to
zero or <i>null</i>, and you cant override that behavior. Try it and youll
get an error message that says you &#8213;cannot have instance field
initializers in structs.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This prohibition is part of the reduced overhead involved
with structures. For an individual structure, it may not seem like much, but it
really makes a difference when a program creates an array based on a structure
type. Its much faster to allocate a block of heap memory thats initialized to
zero, rather than to initialize each and every element of the array to specific
field settings, particularly considering that some of these fields could be <i>reference</i>
types set to <i>new</i> expressions themselves. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, arrays based on classes work much differently.
Each element of the array is initialized to <i>null</i> and must be created
with another <i>new</i> expression. Only then is memory allocated for each
element and the fields are initialized. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>There is another approach to object initialization thats
much more generalized than just setting fields. You can initialize fields and
perform other arbitrary initialization in special methods known as <i>constructors</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Constructors are so called because they construct the
object. Constructors are methods that are executed automatically when an object
is created.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In class or structure definitions, constructors look much
like other methods but with two unique characteristics: First, they have the
same name as the class itself. In a class or structure named <i>Date</i>, a
constructor has the name <i>Date</i>. Secondly, constructors have no return
value.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Heres that <i>new</i> expression again: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new Date() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The right side of that expression looks like a call to a
method named <i>Date</i> with no arguments. Thats a constructor. Heres a
skeleton of a <i>Date</i> class containing a constructor that initializes the
three fields to 1: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    int year, month, day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public Date() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:297.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         year = 1;         month = 1;         day =
1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        ...     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>Date</i> were a regular method, it would have a
return type between the <i>public</i> keyword and the method name. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A constructor with no parameters is known as a <i>parameterless</i>
constructor. And heres another difference between classes and structures: You
cant declare a parameterless constructor in a structure. (Again, this
prohibition exists primarily to speed up array creation involving structure
types.) So now you see two ways of initializing fields in a class, but neither
of them works in a structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In a class, you can initialize some fields in the
declaration statements and some fields in a constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:297.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class Date {     int year;     int month = 4;     int day
= 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public Date() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:297.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         year = 1;         month = 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        ...     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Theres really no difference between these two ways of
initializing fields. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The constructor that the C# compiler generates (which has
the name <i>.ctor</i> when you examine it in the IL Disassembler) first
contains CIL code that sets the fields in accordance with their declaration
statements, and then CIL code for the C# code you explicitly put in body of the
constructor. In this odd example, the <i>month</i> field ends up as the value
1.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The constructor is required to be <i>public</i> if you want
to allow code external to the class to create objects. If not, you can define
the constructor as <i>private</i> or just leave off the <i>public</i> modifier.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Besides the parameterless constructor, its also possible
to declare constructors that include parameters. These can be very useful for
object initialization. For example, so far weve been creating an initializing
a <i>Date</i> object like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:176.0pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date dateMoonWalk = new Date(); dateMoonWalk.year = 1969;
dateMoonWalk.month = 7; dateMoonWalk.day = 20; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>With a parametered constructor, you can conceivably do it
like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateMoonWalk = new Date(1969, 7, 20); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Again, the expression on the right looks like a method
call, and it essentially is. The constructor has three parameters. Without any
consistency checking, it might be defined like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    int year, month, day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public Date(int yearInit, int monthInit, int dayInit) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:253.25pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        year = yearInit;         month =
monthInit;         day = dayInit;     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can declare a parametered constructor in either a class
or a structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>I gave the three parameters to the constructor slightly
different names than the fields just so theres no confusion. You can actually
use the same names, and doing that is usually easier than making up slightly
different names. To distinguish fields from the parameters, you preface the
field names with the keyword <i>this</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    int year, month, day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public Date(int year, int month, int day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:247.7pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        this.year = year;         this.month =
month;         this.day = day;     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Within instance methods in a class or structure, the
keyword <i>this</i> refers to the current object. You can actually preface all
references to instance fields and instance methods with <i>this</i> and a
period, but obviously its not required. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>By providing a constructor with multiple parameters in your
classes and structures, youre giving programmers who use that class or
structure a convenient way to create objects. However, the multi-parameter
constructor isnt quite as safe as forcing programmers to set the fields
explicitly. If all the parameters are the same type, its easy to mix them </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>up. (On the other hand, someone using the class or
structure might forget to set a field.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>C# Language Specification</i>, §10.10.4 states,
&#8213;If a class contains no instance constructor declarations, a default
instance constructor is automatically provided.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>By &#8213;default instance constructor&#8214; the <i>C#
Language Specification</i> is referring to the default parameterless
constructor. We know this is true because the versions of the <i>Date</i> class
and structure in earlier chapters contained no instance constructor
declarations, but they still seemed to contain a parameterless constructor
anyway. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>But this statement from the <i>C# Language Specification</i>
has another profound implication: If you explicitly declare a parametered
constructor in your class, then the default parameterless constructor
disappears. Youd be able to create a <i>Date</i> object like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:198.55pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:139%'><span
style='font-size:10.0pt;line-height:139%;font-family:Consolas'>Date dt = new
Date(2007, 3, 5); </span>But you couldnt do it like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dt = new Date(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youd get the compile error &#8213;No overload for method
&#8215;Date takes &#8215;0 arguments.&#8214; If you declare parametered
constructors, you also need to explicitly include a parameterless constructor
if you want objects to be created using a parameterless constructor. You may
not. You may want to prevent objects from being created with a parameterless
constructor. Its your choice. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>With structures, it doesnt matter if you declare a bunch
of constructors with parameters or not. C# continues to provide a public
parameterless constructor and theres nothing you can do to make it go away.
The implication is simple: You can always create an array of a structure type
because structures always have a parameterless constructor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Parametered constructors are particularly useful when
youre declaring an array of initialized objects. Heres some code that is
certainly explicit about which fields of which array elements are being set: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date[] dates = new Date[3]; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:275.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'> dates[0] = new Date(); dates[0].year = 2007;
dates[0].month = 2; dates[0].day = 2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:275.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'> dates[1] = new Date(); dates[1].year = 2007;
dates[1].month = 8; dates[1].day = 29; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:275.15pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'> dates[2] = new Date(); dates[2].year = 2007;
dates[2].month = 10; dates[2].day = 22 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If <i>Date</i> were a structure, the first <i>new</i>
expression would be required but the others would not. But the real concision
comes when <i>Date</i> has a parametered constructor. Each element of the array
could be set in a single statement: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.75in;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date[] dates = new Date[3]; dates[0] = new Date(2007, 2,
2); dates[1] = new Date(2007, 8, 29); dates[2] = new Date(2007, 10, 22); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or the three elements can be initialized during array
creation: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.75pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date[] dates = { new Date(2007, 2, 2), new Date(2007, 8,
29),                  new Date(2007, 10, 22) }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What you <i>cannot</i> do in C# is initialize an array by
just listing the values of the fields as you can in C or C++. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following program contains a parameterless constructor
that initializes the date to 1/1/1, and a constructor with three parameters
that performs extensive consistency checking, which now rather dominates the
code. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:496.5pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:496.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>ConsistencyChecking.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------------------
  // ConsistencyChecking.cs (c) 2006 by Charles Petzold
  //---------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:279.45pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    public int
  year;     public int month;     public int day; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Parameterless
  constructor     public Date() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:306.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        year = 1;         month
  = 1;         day = 1; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Parametered constructor </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  Date(int year, int month, int day) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (year &lt; 1) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            throw
  new ArgumentOutOfRangeException(&quot;Year&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (month &lt; 1 || month &gt; 12) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  throw new ArgumentOutOfRangeException(&quot;Month&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (day &lt; 1 || day &gt; 31) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  throw new ArgumentOutOfRangeException(&quot;Day&quot;); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:136.75pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>         if
  (day == 31 &amp;&amp; (month == 4 || month == 6 ||             month == 9 ||
  month == 11)) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  throw new ArgumentOutOfRangeException(&quot;Day&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (month == 2 &amp;&amp; day &gt; 29) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  throw new ArgumentOutOfRangeException(&quot;Day&quot;); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.7pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>         if (month == 2
  &amp;&amp; day == 29 &amp;&amp; !IsLeapYear(year))             throw new
  ArgumentOutOfRangeException(&quot;Day&quot;);  </span></p>
  </td>
 </tr>
 <tr style='height:445.05pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:445.05pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:229.9pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  this.year = year;         this.month = month;         this.day = day; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:394.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    }  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool IsLeapYear(int year) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.95pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        return
  year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0);     }  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.35pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    static int[] daysCumulative
  = { 0, 31, 59, 90, 120, 151,                                     181, 212,
  243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  DayOfYear() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.45pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        return
  daysCumulative[month - 1] + day +             (month &gt; 2 &amp;&amp;
  IsLeapYear(year) ? 1 : 0); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:10.2pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    }      static string[]
  strMonths = { &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;,
  &quot;Apr&quot;, &quot;May&quot;,
  &quot;Jun&quot;,                                   &quot;Jul&quot;,
  &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;,
  &quot;Dec&quot;}; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override string ToString() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:76.1pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        return
  String.Format(&quot;{0} {1} {2}&quot;, day,             strMonths[month - 1],
  year); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:416.75pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  ConsistencyChecking </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateDefault = new Date(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Default Date: {0}&quot;, dateDefault); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A constructor has no return value. If a constructor
encounters a problem and cant continue, it has little choice but to raise an
exception. For this constructor, I decided that the <i>ArgumentOutOfRangeException</i>
seemed to best describe the problem. To help in diagnosis, Ive provided the
exception constructors with arguments indicating whether the year, month, or
day was the primary culprit. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, if youre providing a class to other
programmers, youll want to clearly document that a constructor can raise an
exception if the input is not valid. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the constructors use of the <i>IsLeapYear</i>
method. If <i>IsLeapYear</i> were an instance method rather than a static
method, the constructor might still be able to use it, but only with some
caution. As youll note, when the constructor calls <i>IsLeapYear</i>, it has
not yet set the <i>year</i> field, so an instance version of <i>IsLeapYear</i>
would use the value of <i>year</i> when the object was first allocated from the
heap, and that would be 0. Be very, very cautious when calling instance methods
from constructors. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If a class or structure has multiple constructors, they can
make use of each other, but in a very special way. For example, suppose you
want to have an additional <i>Date</i> constructor with just one parameter: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dateNewYearsDay = new Date(2008); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You might want this constructor to make a <i>Date</i>
object for January 1 of that year. If youd prefer not to duplicate some of the
code already in the three-parameter constructor, you can define this new
constructor like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public Date(int year) : this(year, 1, 1) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the colon following the parameter list. The colon is
followed by something resembling a method call, but with the word <i>this</i>
with three arguments. This actually refers to the three-parameter constructor
called with <i>month</i> and <i>day</i> values of 1. Before executing the body
of the oneparameter constructor (if any), this three-parameter constructor is
called.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A call from one constructor to another is called a <i>constructor
initializer</i>, and its the only way one constructor can make direct use of
another constructor. If you need more flexible ways of sharing code among
constructors, you can define some methods (probably static methods) in the
class specifically for common initialization tasks that multiple constructors
need to perform. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I mentioned earlier that the C# compiler generates code
that it inserts into the constructor to initialize instance fields. That
generated code is always executed first in any constructor. Next is the call to
the constructor initializer, followed by the actual code in the body of the
constructor.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If your class contains many constructors, each of the
compiled constructors will contain identical CIL code to set the instance
fields to their initialized values. To avoid this duplicated code, you might
want to <i>not</i> initialize the fields in their declaration statements and
instead initialize them in the parameterless constructor. The parametered
constructors can then execute the code in the parameterless constructor through
a constructor initializer. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The opposite approach makes more sense for the <i>Date</i>
class. The parameterless constructor can use the parametered constructor by
including a constructor initializer: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public Date() : this(1, 1, 1) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you dont explicitly provide a constructor initializer,
the constructor calls the parameterless constructor in the base class, which is
the class that your class derives from. (Ill discuss this process more in
Chapter 18.) In effect, every constructor calls one (and only one) constructor
initializer before executing the code in the body of the constructor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>A class or structure can contain one <i>static</i>
constructor, which must have no parameters. The declaration of the static
constructor must include the <i>static</i> keyword but no other modifier. A
static constructor in the <i>Date</i> class might look like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static Date() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>The code in the static constructor is guaranteed to execute
before any instance constructor, and before any static member in the class is
accessed. Even if you dont explicitly include a static constructor, one is
generated in intermediate language to initialize static members, such as the
static arrays in the <i>Date</i> class. In CIL, the static constructor shows up
with the name <i>.cctor</i>. (The instance constructors have the names </p>

<p class=MsoNormal style='margin-bottom:5.4pt;line-height:103%'><i>.ctor</i>.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The static constructor is a good place to perform
initialization of static fields if a declaration statement isnt quite
adequate. I use static constructors in a WPF program named ClockStrip, the
source code of which is available for downloading from <i>www.charlespetzold.com/wpf</i>.
One of these static constructors accesses the Windows registry to obtain
time-zone information for all the time zones of the world. Another static
constructor assembles a collection of locations and their time zones around the
world. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:.2pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369930">Chapter 16. Concepts of Equality </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Before continuing with the <i>Date</i> class, it might be
useful to explore in more depth the differences between classes (reference
types) and structures (value types). As you know, C# supports an equality
operator </p>

<p class=MsoNormal style='margin-top:0in;margin-right:272.2pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>A == B </span>and
an inequality operator: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A != B </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The equality operator returns <i>true</i> if the two
operands are equal; the inequality operator returns <i>true</i> if the two
operands are not equal. These operators work with numeric types as well as <i>char</i>,
<i>bool</i>, and <i>string</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Every class and structure includes a method named <i>Equals</i>.
This method is defined by the <i>System.Object</i> class as a virtual method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public virtual bool Equals(object obj) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The method is inherited by all other classes and
structures, including those that you define. You can use <i>Equals</i> with two
strings to determine if they represent the same character string. The
comparison is case sensitive. For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:242.0pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>string str = &quot;abc&quot;; bool b1 =
str.Equals(&quot;abc&quot;); bool b2 = str.Equals(&quot;Abc&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In this code, <i>b1</i> is set to <i>true</i> but <i>b2</i>
is set to <i>false</i>. You can also use <i>Equals</i> with integers: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:253.05pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int i1 = 55, i2 = 55; bool b3 = i1.Equals(i2); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this code, <i>b3</i> is set to <i>true</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.3pt;
margin-left:-.25pt'>Because <i>Equals</i> is inherited by all other classes and
structures, its helpful to see how it works with classes and structures that
you define yourself. Heres a little class named <i>PointClass</i> that
contains two public fields named <i>x</i> and <i>y</i>, perhaps to represent a
two-dimensional coordinate point. </p>

<h2 style='margin-top:0in;margin-right:14.35pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>PointClass.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//-------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// PointClass.cs (c) 2006 by Charles
Petzold //------------------------------------------- class PointClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public int x, y; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.1pt;
margin-left:-.25pt'>And heres a structure that defines the same two fields. </p>

<h2 style='margin-top:0in;margin-right:14.35pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>PointStruct.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//--------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// PointStruct.cs (c) 2006 by Charles
Petzold //-------------------------------------------- struct PointStruct </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.7pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public int x, y; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The EqualsTest project includes both those files and
EqualsText.cs, shown below. (To add additional source code files to a project
in Visual Studio, just right click the project name in the solution explorer,
and choose Add and then New Item from the menu. Or, pick Add New Item from the
Project menu.) </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:344.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:344.35pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>EqualsTest.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:147.25pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//
  EqualsTest.cs (c) 2006 by Charles Petzold
  //------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  EqualsTest </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointStruct ps1 = new
  PointStruct();         ps1.x = ps1.y = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointStruct ps2 = new
  PointStruct();         ps2.x = ps2.y = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        PointClass pc1 = new
  PointClass();         pc1.x = pc1.y = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        PointClass pc2 = new
  PointClass();         pc2.x = pc2.y = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;ps1.Equals(ps2) results in &quot; + ps1.Equals(ps2));
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;ps1.Equals(pc1) results in &quot; + ps1.Equals(pc1));
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;pc1.Equals(pc2) results in &quot; + pc1.Equals(pc2));
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;pc1 == pc2 results in &quot; + (pc1 == pc2)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        //
  Console.WriteLine(&quot;ps1 == ps2 results in &quot; + (ps1 == ps2)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Main</i> method creates two <i>PointStruct</i>
objects named <i>ps1</i> and <i>ps2</i>, and two <i>PointClass</i> objects
named <i>pc1</i> and <i>pc2</i>, and sets all the fields to 55. It then
compares them using the <i>Equals</i> method and (for the two classes only) the
equality operator. Heres what the program displays: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:198.1pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>ps1.Equals(ps2) results in True ps1.Equals(pc1) results
in False pc1.Equals(pc2) results in False pc1 == pc2 results in False </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The first <i>Equals</i> call compares the two structures,
and this call returns <i>true</i>. That should make us happy that two
structures with their fields set to the same value are considered to be equal. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The second <i>Equals</i> call compares one of the
structures with one of the classes, and it returns <i>false</i>. Maybe it just
doesnt make sense to compare two objects of different types.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The third <i>Equals</i> call compares the two instances of
the <i>PointClass</i> class, and here is revealed something rather disturbing. <i>Equals</i>
returns <i>false</i>, even though the two objects appear to be identical.
Moreover, comparing the two objects with the equality operator also returns <i>false</i>.
Why is this? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A class is a reference type. What are <i>pc1</i> and <i>pc2</i>
really? They are references to memory blocks that have been allocated in the
heap. The two objects might contain identical information but they are separate
and distinct. The references are not equal. For that reason, the <i>Equals</i>
method in <i>Object</i> (which <i>PointClass</i> inherits) returns <i>false</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>ValueType</i> class (which is the implicit base
class of all structures) overrides the <i>Equals</i> method, so thats the one
that applies to all structures. <i>ValueType</i> implements its own concept of <i>Equals</i>
to perform a different type of comparison that involves the actual fields of
the object. If the two objects are instances of the same structure, and all the
fields are equal, then <i>Equals</i> returns <i>true</i>. This is called a <i>bitwise</i>
equality test.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can use the equality operator with classes, and it
returns the same value as the <i>Equals</i> method. The default equality
operator implements reference equality. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The equality and inequality operators are not implemented
for structure types. If you want a structure to implement the equality and
inequality operators, youll have to define them yourself, as I demonstrate in
Chapter 20. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This different notion of equality also implies a
distinction between reference types and value types that involves their
application. Structures are best suited for creating objects that are somewhat
numeric-like. Two coordinate points with the same <i>x</i> and <i>y</i> values
should certainly be treated as equal. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, suppose youre dealing with objects that represent
people. You define fields to store the persons name, birth date, height, and
weight. If two people have the same name, birth date, height, and weight, are
they the same person? Not necessarily, and perhaps the fact that these two
people are represented by two different objects tells you that these are
actually two separate people. (However, if the two objects had the same value
in the <i>SocialSecurityNumber</i> field, then they probably do represent the
same person and should probably be treated as equal.) Similarly, if two
graphical buttons have the same text, and the same size, and the same location
on the screen, are they equal? Are they the same button? No. If theyre two
different objects, then theyre two different buttons, and one is sitting on
top of the other. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Whenever you create a class or structure, you should give
some thought to the concept of equality. If your concept doesnt match the
default implementation, then you can override the <i>Equals</i> method. (Ill
show you how shortly.) You can also define equality and inequality operators as
Ill demonstrate in Chapter 20. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Consider the <i>String</i> class. Because <i>String</i> is
a class, the <i>Equals</i> method and equality operators would normally
implement reference equality. But <i>String</i> overrides this method and the
equality operators so they perform comparisons of the character strings rather
than comparisons of the references. This type of comparison is more valuable to
us. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>A related difference between classes and structures
involves assignment. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Suppose you define two integers like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int i1 = 22, i2 = 33; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>First you set <i>i1</i> equal to <i>i2</i>, and then you
set <i>i2</i> to something else: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.55pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>i1 = i2; i2 = 55; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What does <i>i1</i> equal? Obviously 33, the value it
obtained when it was assigned the original value of <i>i2</i>. But sometimes
assignment isnt quite as intuitive, because sometimes assignment involves
references. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Heres another project named AssignmentTest. The
AssignmentTest.cs file is shown below, but this project also makes use of the
PointClass.cs and PointStruct.cs files from the EqualityTest project.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.25pt;
margin-left:-.25pt'>If youre typing these files in yourself, you probably
dont want multiple copies of the files hanging around. Instead, you want the
AssignmentTest project to have links to the existing files. In Visual Studio,
you can rightclick the project name in the solution explorer, and choose Add
and Existing Item from the menu. Or pick Add Existing Item from the Project
menu. Navigate to the EqualityTest directory, pick the files you want links to,
click the arrow next to the OK button, and pick Add As Link. </p>

<h2 style='margin-top:0in;margin-right:7.15pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>AssignmentTest.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//-----------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// AssignmentTest.cs (c) 2006 by Charles
Petzold //----------------------------------------------- using System; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:374.7pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:374.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  AssignmentTest </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointStruct ps1 = new
  PointStruct();         ps1.x = ps1.y = 22; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointStruct ps2 = new
  PointStruct();         ps2.x = ps2.y = 33; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        ps1 =
  ps2; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        ps2.x
  = ps2.y = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;ps1 is ({0}, {1})&quot;, ps1.x, ps1.y); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Console.WriteLine(&quot;ps2
  is ({0}, {1})&quot;, ps2.x, ps2.y); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:9.9pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.WriteLine(&quot;ps1.Equals(ps2) results in &quot; +
  ps1.Equals(ps2));  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        PointClass pc1 = new
  PointClass();         pc1.x = pc1.y = 22; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointClass pc2 = new
  PointClass();         pc2.x = pc2.y = 33; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        pc1 =
  pc2; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        pc2.x
  = pc2.y = 55; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;pc1 is ({0}, {1})&quot;, pc1.x, pc1.y); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;pc2 is ({0}, {1})&quot;, pc2.x, pc2.y); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;pc1.Equals(pc2) results in &quot; + pc1.Equals(pc2));
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;pc1 == pc2 results in &quot; + (pc1 == pc2)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The first half of <i>Main</i> roughly parallels the example
I just showed with integers, but with two structures named <i>ps1</i> and <i>ps2</i>.
The two fields of <i>ps1</i> are first both assigned 22, and the two fields of <i>ps2</i>
get 33. Then <i>ps1</i> is set to <i>ps2</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ps1 = ps2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The two fields of <i>ps2</i> are then assigned 55. What
does <i>ps1</i> equal? Heres what the program reports: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.05in;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>ps1 is (33, 33) ps2 is (55, 55) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ps1.Equals(ps2) results in False </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The two fields of <i>ps1</i> are both the values obtained
when <i>ps1</i> was assigned from <i>ps2</i>, rather than the values later set
to <i>ps2</i>. The code works the same as with the integers. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The second half of <i>Main</i> contains parallel code but
using <i>PointClass</i> rather than <i>PointStruct</i>. Two objects named <i>pc1</i>
and <i>pc2</i> are created and assigned values, and <i>pc1</i> is set to <i>pc2</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>pc1 = pc2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The program then assigns 55 to the two fields of pc2, and
displays the results: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.05in;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>pc1 is (55, 55) pc2 is (55, 55) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:203.6pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>pc1.Equals(pc2) results in True pc1 == pc2 results in
True </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What happened here? Why does <i>pc1</i> have the same
values later assigned to <i>pc2</i>? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:18.95pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>A class is a reference type. The <i>pc1</i> and <i>pc2</i>
variables are references to memory blocks allocated in the heap. Following the
assignment statement <span style='font-size:10.0pt;line-height:115%;font-family:
Consolas'>pc1 = pc2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>both <i>pc1</i> and <i>pc2</i> store the same reference,
and hence refer to the same memory block. Whatever you do to the fields of <i>pc1</i>
also affects the fields of <i>pc2</i>; likewise, any change to the fields of <i>pc2</i>
also affects the fields of <i>pc1</i>. The <i>pc1</i> reference equals the <i>pc2</i>
reference, as the program demonstrates at the end by using the <i>Equals</i>
method and equality operator. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Because <i>PointStruct</i> is a structure, the statement </p>

<p class=MsoNormal style='margin-top:0in;margin-right:19.45pt;margin-bottom:
1.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>PointStruct ps1 = new PointStruct(); </span>does not
result in any memory allocations from the heap. The <i>ps1</i> variable is
stored on the stack and the <i>new</i> operator simply sets all its fields
equal to 0 or <i>null</i>. In contrast, the statement </p>

<p class=MsoNormal style='margin-top:0in;margin-right:119.55pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:.5in;line-height:140%'><span
style='font-size:10.0pt;line-height:140%;font-family:Consolas'>PointClass pc1 =
new PointClass(); </span>causes a memory allocation from the heap. Similarly, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:3.1pt;margin-bottom:2.7pt;
margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;text-indent:
.5in;line-height:146%'><span style='font-size:10.0pt;line-height:146%;
font-family:Consolas'>PointClass pc2 = new PointClass(); </span>requires
another memory allocation. Following the assignment statement <span
style='font-size:10.0pt;line-height:146%;font-family:Consolas'>pc1 = pc2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>both variables are the same value and refer to the second
block of memory allocated from the heap. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>What happens to the first block of memory? It seems to be
orphaned, and in this simple program, it is. All the references to that first
block of memory are now gone. There is no way for the program to get back that
reference. The block therefore becomes eligible for garbage collection. The
system can free the memory block if necessary to obtain more memory space. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another related issue involves objects passed to method
calls. The following program also has links to the PointClass.cs and
PointStruct.cs files and defines methods that change the values of the class
and structure fields. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:391.15pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:391.15pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>MethodCallTest.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// MethodCallTest.cs (c) 2006 by
  Charles Petzold //----------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  MethodCallTest </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointStruct ps = new
  PointStruct();         ps.x = ps.y = 22; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>        Console.WriteLine(&quot;Before
  method: ps is ({0}, {1})&quot;, ps.x, ps.y);         ChangeStructure(ps); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:20.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.WriteLine(&quot;After method:  ps is ({0}, {1})&quot;, ps.x, ps.y);  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:174.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        PointClass pc = new
  PointClass();         pc.x = pc.y = 22; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>        Console.WriteLine(&quot;Before
  method: pc is ({0}, {1})&quot;, pc.x, pc.y);         ChangeClass(pc); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;After method:  pc is ({0}, {1})&quot;, pc.x, pc.y); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void ChangeStructure(PointStruct ps) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        ps.x =
  ps.y = 33; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void ChangeClass(PointClass pc) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        pc.x =
  pc.y = 33; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>When exploring arrays, you discovered that methods can
change elements of an array passed to the method. Methods can also change
fields of classes but not fields of structures. The program displays the
results: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Before method: ps is (22, 22) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>After method:  ps is (22, 22) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Before method: pc is (22, 22) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>After method:  pc is (33, 33) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When a program passes an object to a method in preparation
for a method call, what happens depends on whether the object is based on a
class or a structure. If the object is a value type, a bitwise copy is made for
use by the method. If the object is a reference type, the reference itself is
copied for use by the method. The method can use this reference to change any
field of the class. These changes affect the original object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In both cases, the method is always working with a copy.
Its a bitwise copy for a value type, and a copy of the reference for a
reference type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>ChangeClass</i> method in the MethodCallTest program
might even conclude by setting the parameter to <i>null</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static void ChangeClass(PointClass pc) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:264.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    pc.x = pc.y = 33;     pc = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The program will work the same. The original reference
stored in <i>Main</i> is not affected because the method gets a copy of that
reference. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, you can write a method that changes the fields
of a structure by defining the parameter with the <i>ref</i> or <i>out</i> keyword.
This causes the structure to be passed by reference rather than value. It
actually improves efficiency for large value types because the entire structure
doesnt need to be copied to the stack, only a reference. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Assignment, method calls, and tests for equality all work a
little differently for objects based on structures or classes. Underlying these
differences is an important fact regarding the <i>new</i> operator.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>For classes, a call to the <i>new</i> operator is required
to create a new instance of the class. The <i>new</i> operator initiates some
very serious activity. The <i>new</i> operator allocates memory from the heap
to store the object and calls one of the classs constructors. This is not
something you want happening arbitrarily, and usually it does not. For example:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:148.55pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>PointClass pc1 = new PointClass(); PointClass pc2 = pc1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Theres only one <i>new</i> expression in this code, so
only one instance of <i>PointClass</i> is created. Both <i>pc1</i> and <i>pc2</i>
refer to that single instance. The following code is much different because it
creates two distinct objects: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>PointClass pc1 = new PointClass(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>PointClass pc2 = new PointClass(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Similarly, a <i>new</i> operation doesnt occur when an
object is passed to a method. The method is working with the same object passed
to it.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This whole issue becomes crucial when you start working
with classes with constructors that do more than just initialize a few fields.
Some classes have constructors that open disk files in preparation for reading
or writing, for example. You dont want the same file reopened if you happen to
pass the object to a method. When working with user interface objects such as
buttons or dialog boxes, you certainly dont want new objects being created
when you pass them to a method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Creating a new instance of a class is often serious
business, and thats why it doesnt usually happen without you, the programmer,
knowing about it. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Creating a new instance of a structure is much less
serious. This code involving a structure </p>

<p class=MsoNormal style='margin-top:0in;margin-right:143.55pt;margin-bottom:
.9pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:35.5pt;line-height:119%'><span style='font-size:10.0pt;line-height:
119%;font-family:Consolas'>PointStruct ps1 = new PointStruct(); PointStruct ps2
= ps1; </span>is equivalent to code that has two <i>new</i> operators: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>PointStruct ps1 = new PointStruct(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>PointStruct ps2 = new PointStruct(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>These two little blocks of code are equivalent because the
parameterless constructor of a structure only initializes all the structure
fields to zero or <i>null</i>. And it can <i>never</i> do anything else. You
arent allowed to initialize the fields of a structure to non-zero values or
write your own parameterless constructor. That privilege is reserved for
classes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369931">Chapter 17. Fields and Properties </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Classes and structures have several types of members, most
notably fields, methods, constructors, and properties. Youve already
encountered several properties in this book, but I havent yet emphasized how
important theyve become in the vast scheme of .NET. When C# first emerged from
Microsoft, properties seemed like merely a syntactical convenience for
programmers. In recent years, properties have evolved into an extremely
important feature of the .NET Framework. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Properties have become vitally important mostly because XML
has become important. In recent programming interfaces such as the Windows
Presentation Foundation (WPF), programmers can even use an XML-based Extensible
Application Markup Language (XAML) is defining layout of windows and controls. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Heres a little WPF code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:181.65pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Button btn = new Button(); btn.Foreground =
Brushes.LightSeaGreen; btn.FontSize = 32; btn.Content = &quot;Hello,
WPF!&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Notice the use of a parameterless constructor followed by
code that sets three properties of the <i>Button</i> class. Heres the
equivalent in XAML: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.85pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>&lt;Button Foreground=&quot;LightSeaGreen&quot;
FontSize=&quot;32&quot;          Content=&quot;Hello, WPF!&quot; /&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This translation between code and XAML is so easy and
straightforward primarily because <i>Button</i> has a parameterless constructor
and defines properties to set the color, font size, and content. Imagine the
translation mess if <i>Button</i> had only a parametered constructor, and if it
had various methods rather than properties to set its characteristics. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Lets put some properties in the <i>Date</i> class. We
definitely need <i>something</i> to fix it, because despite the consistency
checks implemented in the three-parameter constructor of the <i>Date</i> class
in Chapter 15, the class is still not safe from invalid dates. A program using
the class can create a valid date using one of the constructors and then make
the date invalid simply by setting a field or two: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:187.05pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date dt = new Date(2007, 2, 2); dt.day = 31; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This is possible because the fields are public. If you
dont want the fields in a class to be changed by programs using the class, you
should make them private: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:258.45pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>private int year; private int month; private int day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Because <i>private</i> is the default, you can simply
remove the access modifier entirely: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:324.6pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>int year; int month; int day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>That solves the invalid date problem, but at a severe cost.
Code that happens to encounter a <i>Date</i> object cant even determine what
date is represented by the object! (Well, thats not entirely true. Some code
could call <i>ToString</i> and then examine the string thats returned to
figure out the date.) A better solution is to make the fields <i>public</i> but
also to mark them as read-only: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:220.05pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>public readonly int year; public readonly int month;
public readonly int day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>readonly</i> modifier can only be used on fields.
Unless youre working with a structure, you can initialize a read-only field in
the declaration: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public readonly int year = 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can also set a read-only field in a constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>class Date { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public readonly int year, month day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public Date(int year, int month, int day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        this.year = year; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        ...     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But after the constructor finishes, a read-only field is
fixed and cannot be changed.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Using <i>readonly</i> on the fields essentially makes the <i>Date</i>
object immutable. You set the value at creation, and then youre stuck with it.
Thats not necessarily a bad thing. An immutable object may be exactly what you
need in some cases. The <i>DateTime</i> structure in the .NET Framework is
immutable. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>By now youve seen several modifiers you can use with
fields and methods. These modifiers always appear before the type of the field
or the return type of the method, but they can be in any order among
themselves. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The access modifiers youve seen are <i>public</i> and <i>private</i>.
(There are actually three more access modifiers<i>protected</i>, <i>internal</i>,
and <i>internal protected</i>.) These five modifiers are mutually exclusive and
indicate whether a field or method is accessible from outside the class (or
structure) or whether its use is restricted to inside the class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>static</i> modifier indicates that the field or
method is associated with the class (or structure) rather than an instance of
the class. You refer to a static field or method by prefacing it with the class
or structure name. You refer to an instance field or method by prefacing it
with an object name. A static method cannot refer to an instance field in the
same class or structure, and cannot call an instance method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can use <i>const</i> to create a constant. Its not
quite correct to say that a constant is a field. (The <i>C# Language
Specification</i> discusses them in two separate sections, §10.3 and §10.4.
However, in the .NET Framework class library documentation, constants are
listed under the category of Fields.) As with local constants (that is,
constants declared inside of methods), the value of a constant must be set in
the declaration, and it must be available at compile time. The value of a
constant cannot be changed by code. You cannot use the <i>static</i> keyword
with constants, but constants are inherently static and shared among all
instances of the class. If a constant field is <i>public</i>, you can refer to
it from outside the class by prefacing it with the class name. <i>Math.PI</i>
is a constant. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>readonly</i> modifier is valid only with fields. The
value of a read-only field must be set in the declaration or by a constructor.
After the conclusion of the constructor, a read-only field cannot be modified. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>static</i>, <i>const</i>, and <i>readonly</i>
modifiers are somewhat related: A constant has only a single value regardless
of the instance, so a constant is inherently static. A <i>readonly</i> field is
generally an instance field, but after a constructor finishes execution, it
becomes similar to a constant in that it cannot be changed. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>There are times when you want to declare a constant, but
the value is not available at compile time. This is the case if youre trying
to set a constant using a <i>new</i> expression: </p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:0in;
margin-bottom:7.1pt;margin-left:3.4pt;text-align:center;line-height:107%'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'>const Date
dateSputnik = new Date(1957, 10, 4);     // Wont work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Expression using <i>new</i> can be executed only at
runtime. The <i>C# Language Specification</i>, §10.4.2.1 has the solution: Use <i>static
readonly</i> rather than <i>const</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static readonly Date dateSputnik = new Date(1957, 10, 4); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, this guarantees only that <i>dateSputnik</i>
cannot be set to another <i>Date</i> object; it does not guarantee that the
Date object referenced by  <i>dateSputnik</i> is immune from being changed
itself, unless it defined in such a way to be immutable. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You may be happy with immutable <i>Date</i> objects with <i>readonly</i>
fields that cannot be changed after the constructor terminates. But you may
want a <i>Date</i> object that can later change. If so, lets pursue a
different approach. Lets keep the fields private, but lets provide methods in
the class that can access and change the private fields. The methods that
change the private fields can also perform consistency checking and prevent the
creation of invalid dates. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Traditionally, such methods begin with the words <i>Set</i>
and <i>Get</i>. Heres a public <i>SetYear</i> method to change the private <i>year</i>
field: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public void SetYear(int year) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    if (year &lt; 1) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        throw new ArgumentOutOfRangeException(&quot;Year&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    this.year = year; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The method is public. The field is private. Theres
actually a problem with this consistency check that Ill discuss shortly. For
now, Im sure you get the general idea: The <i>Set</i> method can contain code
to safeguard against invalid dates. The <i>GetYear</i> method is quite simple: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public int GetYear() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return year; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The two methods are somewhat symmetrical. The <i>SetYear</i>
method has a single <i>int</i> argument and no return value, indicated by the
keyword <i>void</i>. The <i>GetYear</i> method has no argument but returns <i>int</i>.
Likewise, you could also write <i>SetMonth</i>, <i>GetMonth</i>, <i>SetDay</i>,
and <i>GetDay</i> methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now you can either create a <i>Date</i> object using the
three-parameter constructor, or you can create a <i>Date</i> object using the
parameterless constructor and then call the <i>Set</i> methods: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:132.1pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date dateSputnik = new Date(); dateSputnik.SetYear(1957);
dateSputnik.SetMonth(10); dateSputnik.SetDay(4); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Likewise, you could access the year, month, and day using <i>GetYear</i>,
<i>GetMonth</i>, and <i>GetDay</i> methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But like I said, thats the <i>traditional</i> approach.
When programming in C# you can instead use properties, which are a little
cleaner, a little easier, and a little prettier. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Like methods and fields and constructors, properties are
members of classes and structures. Weve already encountered some properties of
the basic data types. The <i>Length</i> property of the <i>String</i> class
indicates the number of characters in the string. The <i>Array</i> class
defines both a <i>Length</i> property and a <i>Rank</i> property. All these
properties happen to be readonly, but properties that you declare in your
classes and structures dont have to be. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In use, properties look exactly like fields. Heres how you
might define a <i>Date</i> object using properties named <i>Year</i>, <i>Month</i>,
and <i>Day</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:181.55pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Date dateSputnik = new Date(); dateSputnik.Year = 1957;
dateSputnik.Month = 10; dateSputnik.Day = 4; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Property names are often capitalized. Just as you can set
properties as if they were fields, you can access properties as if they were
fields: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(&quot;Sputnik was launched in &quot; +
dateSputnik.Year); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Both pieces of code are more attractive and readable than
the equivalent code using <i>Set</i> and <i>Get</i> methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And yet, properties contain code, so they are just as
powerful as <i>Set</i> and <i>Get</i> methods. For this reason, properties are
often called &#8213;smart&#8214; fields because they can add a little code (for
consistency and validity checks) to setting and accessing fields. Often a
public property is associated with a private field (sometimes called a
&#8213;backing field&#8214;) but thats not a requirement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Property declarations have a special syntax in C# that
distinguishes them from both methods and fields. Heres a declaration of a <i>Year</i>
property that is functionally equivalent to the <i>SetYear</i> and <i>GetYear</i>
methods I showed earlier: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public int Year </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     set     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        if (value &lt; 1) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>            throw new ArgumentOutOfRangeException(&quot;Year&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:280.65pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>         year = value; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.55pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }     get     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return year; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The property declaration begins with an optional access
modifier. Properties are very often <i>public</i>. Properties can also include
the <i>static</i> modifier or any other modifier used with methods. The type of
the property follows. Here its <i>int</i>. Thats both the type of the
argument to the earlier <i>SetYear</i> method and the return type of the <i>GetYear</i>
method. That symmetry is how both methods can be combined into a single
property. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The name of the property is <i>Year</i>. A left curly
bracket follows. Thats how the compiler knows its not a method or a field. If
<i>Year</i> were a method, it would be followed by a left parenthesis. If <i>Year</i>
were a field, it would be followed by a comma, equal sign, or semicolon.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Within the outer set of curly brackets are one or two
sections (called <i>accessors</i>) that begin with the words <i>get</i> and <i>set</i>.
Often both sections are present. If only a <i>get</i> accessor is present, the
property is read-only. (You might want to say &#8213;get only&#8214; or
&#8213;gettable&#8214; instead so everyone knows youre talking about
properties.) A property can have only a <i>set</i> accessor, but thats rather
rare. The words <i>get</i> and <i>set</i> are not considered C# keywords
because you can use the words as variable names. They have a special meaning
only in this particular place in the property declaration. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Within the body of the property declaration, <i>set</i> and
<i>get</i> are both followed by another set of curly brackets. In the <i>set</i>
accessor, the special word <i>value</i> refers to the value being set to the
property; the <i>get</i> accessor must have a <i>return</i> statement to return
a value. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Properties are not actually part of the Common Language
Specification (CLS) nor are they implemented in intermediate language. When you
declare a property named <i>Year</i>, for example, the C# compiler fabricates
methods named <i>set_Year</i> and <i>get_Year</i> that contain the property
code. If you use a language that does not support properties (such as C++),
youll have to refer to properties using these method names. You cant have
method names in your C# class that duplicate the names that the compiler generates.
(See the <i>C# Language Specification</i>, §10.2.7.1.) If you declare a <i>Year</i>
property, you cant also declare a method named <i>get_Year</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Programmers experienced in .NET have pretty much come to
the conclusion that instance fields should always be private, and that public
access to these private fields should be through public properties that guard
against invalid values. Public properties always have capitalized names;
private fields often have names that begin with lowercase letters, or perhaps
underscores. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>I havent shown code yet for the <i>Month</i> and <i>Day</i>
properties, partially because Im not happy with the code I showed you for the <i>Year</i>
property. I mentioned it had a problem. Suppose you create a <i>Date</i> object
like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dt = new Date(2008, 2, 29); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Thats a valid date because 2008 is a leap year. But
suppose the <i>Year</i> property is now set to something else: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dt.Year = 2007; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thats now an invalid date, but the <i>Year</i> property as
written above didnt catch the problem. Heres a better <i>Year</i> property: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public int Year </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     set     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.75pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        if (value &lt; 1 || (!IsLeapYear(value)
&amp;&amp; Month == 2
&amp;&amp;                                                  Day ==
29))             throw new ArgumentOutOfRangeException(&quot;Year&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        year = value; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.55pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }     get     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return year; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Even with this enhanced <i>Year</i> property, some
consistency-checking problems will persist. Heres that leap-day date again: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dt = new Date(2008, 2, 29); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Now the program sets three properties to something else: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:285.95pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>dt.Year = 2007; dt.Month = 3; dt.Day = 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The intention is clear from the code that the resultant
date is valid, and yet as soon as the <i>Year</i> property is set, an exception
will be raised. Rearrange the order of the statements and nobody will complain:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:291.5pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>dt.Month = 3; dt.Day = 1; dt.Year = 2007; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This problem is not solvable. If you want to provide public
properties that allow a program to set a new date, and you want to prevent
invalid dates, some sequences of code wont work in the order theyre written.
But the worst that can be said is that the code is overprotective. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.4pt;
margin-left:-.25pt'>The following file is devoted solely to a class named <i>Date</i>.
This is the final version of <i>Date</i> so its in its own file (named
Date.cs) and can be used by other programs. The class contains <i>Year</i>, <i>Month</i>,
and <i>Day</i> properties. I like to arrange my classes so they begin with
private fields, and the public properties follow. These are followed by
constructors and then methods. Among these methods is a static method named <i>IsConsistent</i>
that all three properties use to prevent the occurrence of invalid dates. </p>

<h2 style='margin-left:-.25pt'>Date.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;line-height:
103%;font-family:Consolas'>//------------------------------------- // Date.cs
(c) 2006 by Charles Petzold //------------------------------------- using
System; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:522.05pt;margin-bottom:
0in;margin-left:-1.25in;text-indent:0in;line-height:107%'>&nbsp;</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:620.6pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:620.6pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:312.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    // Private fields     int
  year = 1;     int month = 1;     int day = 1; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:257.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Public properties    
  public int Year </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    {        
  set         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            if
  (!IsConsistent(value, Month, Day)) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  throw new ArgumentOutOfRangeException(&quot;Year&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  year = value; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:356.3pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  }         get         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  return year;  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:394.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    }  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  Month </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    {        
  set         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            if
  (!IsConsistent(Year, value, Day)) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  throw new ArgumentOutOfRangeException(&quot;Month = &quot; + value); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  month = value; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:356.3pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  }         get         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  return month;  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:394.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    }  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  Day </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    {         set         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            if
  (!IsConsistent(Year, Month, value)) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  throw new ArgumentOutOfRangeException(&quot;Day&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  day = value; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:356.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        }         get         {
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  return day;  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:522.05pt;margin-bottom:
0in;margin-left:-1.25in;text-indent:0in;line-height:107%'>&nbsp;</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:644.15pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:644.15pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Parameterless
  constructor     public Date() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Parametered constructor </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  Date(int year, int month, int day) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Year =
  year; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Month
  = month; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Day =
  day; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    // Private
  method used by the properties </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  bool IsConsistent(int year, int month, int day) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:273.95pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        if (year &lt;
  1)             return false; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:191.45pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        if (month &lt; 1 ||
  month &gt; 12)             return false; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.4pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        if (day &lt; 1 || day
  &gt; 31)             return false; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:131.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         if (day == 31
  &amp;&amp; (month == 4 || month == 6 ||                            month == 9
  || month == 11))             return false; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:196.85pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        if
  (month == 2 &amp;&amp; day &gt; 29)             return false; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:75.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        if (month == 2
  &amp;&amp; day == 29 &amp;&amp; !IsLeapYear(year))             return false; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  true; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    // Public
  properties </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool IsLeapYear(int year) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        return year % 4 == 0
  &amp;&amp; (year % 100 != 0 || year % 400 == 0);     }  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.65pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:100%'><span style='font-size:
  10.0pt;line-height:100%;font-family:Consolas'>    static int[] daysCumulative
  = { 0, 31, 59, 90, 120, 151,                                     181, 212,
  243, 273, 304, 334 }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  DayOfYear() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        return
  daysCumulative[Month - 1] + Day +             (Month &gt; 2 &amp;&amp;
  IsLeapYear(Year) ? 1 : 0); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:10.2pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>    }      static string[]
  strMonths = { &quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;,
  &quot;Apr&quot;, &quot;May&quot;,
  &quot;Jun&quot;,                                   &quot;Jul&quot;,
  &quot;Aug&quot;, &quot;Sep&quot;, &quot;Oct&quot;, &quot;Nov&quot;,
  &quot;Dec&quot;}; </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public override string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        return String.Format(&quot;{0}
{1} {2}&quot;, Day,              strMonths[Month - 1], Year); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.65pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that the three-parameter constructor sets the
properties rather than the fields. Even the <i>set</i> accessors of the
properties refer to the other properties rather than access the fields. This is
not a requirement. Methods in a class can use either the class properties or
the fields themselves. But youll see shortly why I like to structure my classes
so that field accesses are kept to a minimum. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a simple program to test out the <i>Date</i> class: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:238.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:238.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PropertyTest.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//---------------------------------------------
  // PropertyTest.cs (c) 2006 by Charles Petzold
  //--------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  PropertyTest </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Date
  dateMoonWalk = new Date(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:164.1pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  dateMoonWalk.Year = 1969;         dateMoonWalk.Month = 7;        
  dateMoonWalk.Day = 20; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:10.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        Console.WriteLine(&quot;Moon
  walk: {0}, Day of Year: {1}&quot;,              dateMoonWalk,
  dateMoonWalk.DayOfYear()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Both Date.cs and PropertyTest.cs are part of the
PropertyTest project. You can experiment with other dates to make sure the
class is working as it should. Of course, in a real program, any code that has
the potential of causing <i>Date</i> to raise an exception should be put in a <i>try</i>
block. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Sometimes its not clear whether a particular chunk of code
should be a method or a property. Properties are often considered <i>characteristics</i>
of an object, whereas methods often perform <i>actions</i>. If the object
itself is a noun, a property is an adjective and a method is a verb. If you can
associate the words <i>get</i> and <i>set</i> with a method, you probably want
to make it a property. Id be inclined to make <i>DayOfYear</i> a read-only
property, for example. The only real rule is this: If it needs a parameter to
get the value or an extra parameter to set the value, its got to be a method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When we first embarked on the idea of encapsulating a date,
we explored implementing it as a class or a structure. It soon became clear
that using a structure had distinct problems. When an object is created from a
structure using a parameterless constructor, there is no way to initialize the
fields to anything but 0 or <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Lets ask ourselves the question again: How can we
implement <i>Date</i> as a structure and prevent an invalid date when the
parameterless constructor is used to create the object? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Big hint: The <i>get</i> accessor of a property doesnt
necessarily have to return simply the value of a field. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>get</i> accessor <i>could</i> return the value of
the field <i>plus one</i>. In other words, the private <i>year</i>, <i>month</i>,
and <i>day</i> fields could be zero-based, but the public <i>Year</i>, <i>Month</i>,
and <i>Day</i> properties could be one-based. Heres a revised <i>Year</i>
property that uses this technique: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public int Year </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     set     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        if (!IsConsistent(value, Month, Day)) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>            throw new ArgumentOutOfRangeException(&quot;Year&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        year = value - 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.55pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }     get     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return year + 1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The only difference is that the <i>set</i> accessor sets
the <i>year</i> field to <i>value</i> minus one, and the <i>get</i> accessor
returns the <i>year</i> field plus one. The default <i>year</i> field is 0 but
the <i>Year</i> property returns 1.  Properties provide a type of buffer around
fields so you can make the internals of a class or structure different from how
it looks from outside. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Suppose you wanted to make the days of the month available
as a public property. You could define a public static property of type <i>string</i>
array and simply return the entire array of month names: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static string[] MonthNames </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     get     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return strMonths; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Then, if a program wanted the abbreviated name for January,
for example, the expression would be <i>Date.MonthNames[0]</i>. It seems as if
the property returns the whole array, but its really only returning a
reference to the array, which is then indexed by the code accessing the
property. (The <i>DateTimeFormatInfo</i> class in the <i>System.Globalization</i>
namespace has a <i>MonthNames</i> property that returns a string array but the
month names are specific to a particular culture and language.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Its also possible for a class to have a special member
called an <i>indexer</i> that is declared somewhat like a property. An indexer
is intended for classes or structure that store collections of items, so its
not quite appropriate for the <i>Date</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But just suppose that you have a particular application
that for a particular <i>Date</i> object named <i>dt</i>, for example, it is
sometimes convenient to refer to the property <i>dt.Year</i> as <i>dt[0]</i>,
and refer to the property <i>dt.Month</i> as <i>dt[1]</i>, and the property <i>dt.Day</i>
as <i>dt[2]</i>. You actually want to index the object as if it were an array. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Heres how such an indexer would look: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public int this[int i] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     get     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:286.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        switch (i)         { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:214.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        case 0: return Year;         case 1: return
Month;         case 2: return Day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        default: throw ArgumentOutOfRangeException(&quot;index =
&quot; + i); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that the declaration of the indexer begins by
resembling a property named <i>this</i>, which is then followed by square
brackets containing the value of the indexer. As implemented here, this is a
read-only indexer, but you could come up with <i>set</i> logic as well if you
wanted.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can have multiple indexers if the index is a different
type. It doesnt have to be an integer. This one lets you specify a text index:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public int this[string str] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     get     { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        switch (str.ToLower()) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:187.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        case &quot;year&quot;: return Year;         case
&quot;month&quot;: return Month;         case &quot;day&quot;: return Day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        default: throw ArgumentOutOfRangeException(&quot;index =
&quot; + i); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>With an indexer like this, if <i>dt</i> is an object of
type <i>Date</i>, then <i>dt[&quot;MONTH&quot;]</i> obtains the month. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the .NET documentation, indexers often show up as the
property name <i>Item</i>. (In the <i>String</i> class, the name is <i>Chars</i>.)
When programming in C#, you never use that name to refer to indexers. You
simply index the object. As with properties, C# fabricates indexers by creating
methods named <i>get_Item</i> and <i>set_Item</i>. <br clear=all
style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:.25pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369932">Chapter 18. Inheritance </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>No class is an island. All classes are related to each
other in some way. All classes automatically have methods named <i>ToString</i>
and <i>Equals</i> because these two methods are defined in the class <i>System.Object</i>,
a class also referred to by the C# keyword <i>object</i>. All other classes
contain the <i>ToString</i> and <i>Equals</i> methods because all classes
ultimately <i>derive</i> (or <i>inherit</i>) from <i>System.Object</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Inheritance is one of the primary features of
object-oriented programming. When a new class derives from an existing class
(or <i>subclasses</i> an existing class), it inherits all the non-private
methods, properties, and fields declared in the existing class. The new class
can then extend the existing class by adding to or replacing those methods,
properties, and fields. The process is cumulative. A class contains all the
non-private methods, properties, and fields declared in itself and all its
ancestor classes going back to <i>System.Object</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Its all about reusing code. Inheritance provides a
structured way to reuse code thats already been written, but inheritance also
provides a way to alter or enhance the code in ways that make it more useful or
convenient. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The ability to inherit is one of the big differences
between classes and structures. Structures do not allow inheritance. All
structures implicitly derive from <i>System.ValueType</i>, which itself derives
from <i>System.Object</i>. But you cant define a class that inherits from a
structure, or define a structure that inherits from another structure. Once you
define a structure, thats the end of the line. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There are many reasons why youd want to use inheritance.
Suppose you have a class thats fine for most of your requirements, but it
needs just a few little changes. Even if you have access to the source code,
you might not want to change the original class. Maybe the class is working
well in some other application, and you wisely respect the &#8213;if it aint
broke dont fix it&#8214; rule. Or perhaps you dont have access to the code.
Maybe the class is available only in compiled form in a dynamic link library. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>(Another reason to use inheritance that may seem a bit lame
is this: Suppose youre writing a book about object-oriented programming. In
the previous chapter youve just presented a complete class named <i>Date</i>,
and now youd like to add a few features to it. Why make the previous class
even longer than it is if you can just derive from it and show the new features
that way?) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But mostly inheritance is used as an architectural
mechanism that allows programmers to avoid duplicating code. Often a programmer
will see that a particular job requires several classes. With further work and
design, it appears that two of these classes might be able share about 75
percent of their code. It makes sense for one of these classes to inherit from
the other, perhaps replacing a method or two, perhaps adding a method or two,
whatevers required. Object-oriented design is an art (and a science) in
itself, and this book will only scratch the surface. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>With any luck, programmers who have come before you have
used their skills to create object-oriented libraries that exhibit an
intelligent structure of inheritance. If youll be writing Windows applications
using the Windows Presentation Foundation, youll be working a lot with <i>controls</i>,
which are visual user interface objects such as buttons, scrollbars, and so
forth. These controls are declared in a vast hierarchy of inheritance, just a
little bit of which is shown here: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Control </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     ContentControl
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          Label
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          ButtonBase
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               Button
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               RepeatButton
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               ToggleButton
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>                    CheckBox
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>                    RadioButton
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     RangeBase
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          ScrollBar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          ProgressBar
</i></p>

<p class=MsoNormal style='margin-left:0in;text-indent:0in;line-height:103%'><span
style='font-size:11.0pt;line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          Slider
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This format is a standard way of showing inheritance. Each
additional level of indentation shows another level of inheritance. For
example, <i>ContentControl</i> derives from <i>Control</i>, and both <i>Label</i>
and <i>ButtonBase</i> derive from <i>ContentControl</i>. (Not shown is the fact
that <i>Control</i> derives from <i>FrameworkElement</i>, which derives from <i>UIElement</i>,
which derives from <i>Visual</i>, which derives from <i>DependencyObject</i>,
which derives from <i>DispatcherObject</i>, which derives from <i>Object</i>.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Typically, as classes derive from other classes, they get
less generalized and more specific. The Windows Presentation Foundation lets
you subclass from the existing controls to make them even more specificfor
example, a button that always has red italic text. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this chapter Ill be creating a class named <i>ExtendedDate</i>
that derives from the final <i>Date</i> class shown in the previous chapter.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The simplest subclassing syntax is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class ExtendedDate: Date </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The name of the <i>ExtendedDate</i> class is followed by a
colon and then the name of the class that its subclassing, in this case <i>Date</i>.
<i>Date</i> is known as the base class to <i>ExtendedDate</i>. Many programmers
put a space before the colon but its not required. If you dont indicate a
base class when youre declaring a class, then the class is assumed to derive
from <i>object</i>. A class can inherit from only one other class. Multiple
inheritancea feature of some object-oriented languages in which a class can
inherit from multiple classesis not supported by C#. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>With the simple declaration of <i>ExtendedDate</i>, a new
class has been defined that contains all the non-private methods, properties,
and fields in <i>Date</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>What <i>ExtendedDate</i> does <i>not</i> inherit from <i>Date</i>
are the constructors. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Constructors are not inherited. I repeat: Constructors are <i>not</i>
inherited. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Because the simple <i>ExtendedDate</i> class shown above
does not inherit any of the constructors in <i>Date</i>, C# automatically
provides a parameterless constructor. This constructor allows you to create an <i>ExtendedDate</i>
object like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ExtendedDate exdt = new ExtendedDate(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can then use the <i>Year</i>, <i>Month</i>, and <i>Day</i>
properties that <i>ExtendedDate</i> inherits from <i>Date</i>. But you cannot
use the threeparameter constructor declared in <i>Date</i> to create an <i>ExtendedDate</i>
object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If youd like to provide a three-parameter constructor in <i>ExtendedDate</i>,
you must explicitly declare it. Once you do that, then C# no longer
automatically provides a parameterless constructor, so youll probably want to
provide one was well. Heres a version of <i>ExtendedDate</i> that has the same
constructors as <i>Date</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class ExtendedDate: Date </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public ExtendedDate() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {     } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public ExtendedDate(int year, int month, int day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        Year = year; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        Month = month; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        Day = day; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Notice that the three-parameter constructor refers to the
three properties defined by <i>Date</i>. Thats fine because <i>ExtendedDate</i>
has inherited those properties. But a better way to declare the three-parameter
constructor in <i>ExtendedDate</i> is for it to make use of the three-paremeter
constructor in <i>Date</i>. This requires a special syntax: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class ExtendedDate: Date </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public ExtendedDate() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:94.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {     }     public ExtendedDate(int year, int month,
int day) :                    base(year, month, day) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the colon following the parameter list. This colon
is followed by the keyword <i>base</i>, which refers to the base class of <i>Date</i>.
The <i>base</i> keyword is followed by three arguments in parentheses, so it
refers to the threeparameter constructor in <i>Date</i>. When the
three-parameter <i>ExtendedDate</i> constructor executes, the three-parameter
constructor in <i>Date</i> is called first, and then execution continues with
the code in the body of the <i>ExtendedDate</i> constructor (if any). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I showed you a feature similar to this in Chapter 15 but
using the keyword <i>this</i> rather than <i>base</i>. Collectively, these
constructor calls are called <i>constructor initializers</i>. A constructor
initializer causes another constructor in the same class or the base class to
be executed before the code in the body of the constructor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Only one constructor initializer is allowed per
constructor. If you dont provide one, then one is provided for you that calls
the parameterless constructor in the base class. In other words, youll never
need to provide a constructor initializer of <i>base()</i>. That initializer is
generated automatically if you dont provide an alternative. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Imagine a series of classes: <i>Instrument</i> derives from
<i>object</i>, and <i>Woodwind</i> derives from <i>Instrument</i> and <i>Oboe</i>
derives from <i>Woodwind</i>. All these classes have parameterless constructors
with no explicit constructor initializers. When you create an object of type <i>Oboe</i>,
the constructor in <i>Oboe</i> first executes the parameterless constructor in <i>Woodwind</i>,
which first executes the parameterless constructor in <i>Instrument</i>, which
first executes the parameterless constructor in <i>object</i>, which doesnt
actually do anything. The final result in this chain of nested constructor
calls is that all the parameterless constructors are executed beginning with <i>object</i>,
then <i>Instrument</i>, then <i>Woodwind</i>, and finally <i>Oboe</i>. This
happens even if youre using a constructor in <i>Oboe</i> with parameters. If
that constructor has no explicit constructor initializer, the parameterless
constructors in <i>object</i>, <i>Instrument</i>, and <i>Woodwind</i> are
executed before the constructor code in <i>Oboe</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In summary, a constructor with no explicit constructor
initializer automatically executes the parameterless constructor in the base
class first. If a constructor includes a constructor initializer (either <i>base</i>
or <i>this</i>) then that constructor is executed. Nothing else happens
automatically.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In particular, a constructor with parameters does <i>not</i>
automatically execute the parameterless constructor in the <i>same</i> class
unless you specifically tell it to with a constructor initializer of <i>this()</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Heres another way to think of it: Whenever your program
creates an object, the parameterless constructor in <i>System.Object</i> is
always executed first, followed by at least one constructor in every descendent
of <i>object</i> leading up to the class that youre using to create the
object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Whats interesting is that you can never <i>prevent</i>
execution of some constructor in the base class. Think about it: If you want to
prevent a constructor from calling the parameterless constructor in the base
class, you must provide a constructor initializer. If you dont want <i>any</i>
constructor in the base class to execute, you must specify a constructor
initializer that uses <i>this</i> rather than <i>base</i>. But you cant do
that for every constructor in your class. Youll end up with a circular chain
of constructor calls, which by common sense (and the <i>C# Language
Specification</i>, §10.10.1) is prohibited. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Its important for some constructor in the base class to
always be executed because thats how fields are initialized. Every constructor
actually begins first by setting the values of fields that have been
initialized in their declarations. Then another constructor is executed, either
explicitly (with a constructor initializer) or implicitly with a call to the
parameterless constructor in the base class. If a constructor in the base class
were never called, then the fields in the base class wouldnt be initialized,
and that would probably cause problems. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following program contains the simple definition of <i>ExtendedDate</i>
that declares two constructors that call the corresponding constructor in the
base class. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:133.45pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:133.45pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Inheritance.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.3pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------
  // Inheritance.cs (c) 2006 by Charles Petzold
  //-------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:290.25pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'> class ExtendedDate : Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  ExtendedDate() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  </td>
 </tr>
 <tr style='height:187.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:187.35pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:37.55pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    public ExtendedDate(int
  iYear, int iMonth, int iDay) :                                  base(iYear,
  iMonth, iDay) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:416.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Inheritance </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.35pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        ExtendedDate
  dateMoonWalk = new ExtendedDate(1969, 7, 20);  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:10.05pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.WriteLine(&quot;Moon walk: {0}, Day of Year: {1}&quot;,             
  dateMoonWalk, dateMoonWalk.DayOfYear()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because <i>ExtendedDate</i> derives from <i>Date</i>, the
Inheritance project must include a link to the Date.cs file from the last
chapter.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Date</i> class contains constructors, methods, and
properties with access modifiers of <i>public</i>, and also one method (<i>IsConsistent</i>)
and three fields with no access modifiers, which is the same as an access
modifier of <i>private</i>. The <i>public</i> access modifier allows members of
the class to be accessed from other classes. The <i>private</i> modifier
prohibits access outside the class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>These restrictions also apply to derived classes. The <i>ExtendedDate</i>
class can access the public <i>Year</i>, <i>Month</i>, and <i>Day</i>
properties defined by <i>Date</i>, but has no access to the private <i>year</i>,
<i>month</i>, or <i>day</i> fields in <i>Date</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Between the two extremes of <i>public</i> and <i>private</i>
is <i>protected</i>. A method, property, or field declared as <i>protected</i>
is accessible in the class in which its declared (of course) and also in any
class that derives from that class. If <i>Date</i> had a method, property, or
field declared as <i>protected</i>, it would normally not be accessible from
outside the <i>Date</i> class, but it would be accessible to <i>ExtendedDate</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Using <i>public</i>, <i>private</i>, and <i>protected</i> in
an intelligent manner takes some thought and practice. Sometimes beginning
programmers want to declare everything as <i>public</i> so that every class can
access everything in every other class. (Microsoft Visual Basic actually
fosters this attitude because everything is <i>public</i> by default.) But as a
rule, classes should have a minimum of public methods. Its much easier to
debug a class if other classes have a limited number of ways to affect it or
access it. When youre debugging, youre sometimes like a detective solving a
crime and its helpful to say &#8213;The perpetrator could only have entered
through this door or that window.&#8214; Too many public members violates the
concept of hiding data and prevents the class from being a black box of code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Declaring something as <i>protected</i> means that youre
giving some thought to what may be useful to inherited classes. Often the fact
that something needs to be protected is revealed only when you actually get
down to coding some methods or properties in the derived class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The file that follows contains a version of <i>ExtendedDate</i>
that does more than just redefine the constructors. This class includes a new
property named <i>CommonEraDay</i>. This property returns the number of days
since the beginning of the Common Era. The date 1/1/1 has a <i>CommonEraDay</i>
property of 1. The property also has a <i>set</i> accessor. ExtendedDate.cs is
part of a project named CommonEraDayTest, which also requires a link to the
Date.cs file. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:496.5pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 0in 0in 1.45pt;height:496.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>ExtendedDate.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.65pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//---------------------------------------------
  // ExtendedDate.cs (c) 2006 by Charles Petzold
  //--------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  ExtendedDate: Date </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:65.2pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    // Constructors just execute
  constructors in base class.     public ExtendedDate() </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:120.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    {     }     public
  ExtendedDate(int iYear, int iMonth, int iDay):                     
  base(iYear, iMonth, iDay) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:400.55pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    }  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // CommonEraDay sets/gets
  number of days since beginning of common era.     public int CommonEraDay </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:372.95pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    {        
  get         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  return DaysBeforeYear() + DayOfYear(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:362.1pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        }         set </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><span style='font-size:10.0pt;line-height:
  107%;font-family:Consolas'>            Day = 1;    // Prevent any
  inconsistencies during the calculation. </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:60.2pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>            //
  Year calculation if leap years were every four years.             Year =
  (int)((value - .125m) / 365.25m) + 1;             int iDayOfYear = value -
  DaysBeforeYear();  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:54.25pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>            // Adjust for leap
  year anomalies every hundred years.             if (iDayOfYear &gt;
  (IsLeapYear(Year) ? 366 : 365)) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  iDayOfYear -= IsLeapYear(Year) ? 366 : 365; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  Year++; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            //
  Find the Month and Day </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.65pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>            for (Month = 12;
  Month &gt; 0; Month--)             { </span></p>
  </td>
 </tr>
 <tr style='height:199.15pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 0in 0in 1.45pt;height:199.15pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  if (iDayOfYear &gt;= DayOfYear()) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:86.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>                    Day =
  iDayOfYear - DayOfYear() + 1;                     break; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:103.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Private method for use
  by CommonEraDay property.     int DaysBeforeYear() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  iYear = Year - 1; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  (int) (365.25m * iYear) - iYear / 100 + iYear / 400; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The code that supports the <i>CommonEraDay</i> property
assumes that the leap year rules we currently observe were in effect from the
beginning of the Common Era. In reality, much of the Western world celebrated
leap years every four years without exception until the introduction of the
Gregorian calendar in 1582. To reorient the calendar to compensate for the
damage caused by the Julian calendar, 10 days were skipped. The date October 4,
1582 was followed by October 15, 1582. Algorithms that account for the switch
from the Julian calendar to the Gregorian calendar are truly messy. (See
Chapter 5 of Jean Meeuss <i>Astronomical Algorithms</i>, Willmann-Bell, 1991
for a taste of whats involved.) My simplified approach isnt quite as bad, but
its not perfect. Fortunately, it doesnt conk out until the year 48,702. Dont
worry if you dont quite get it. The nitty-gritties of the calculation arent
really the point of this exercise. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The CommonEraDayTest project concludes with the
CommonEraDayTest.cs file, which uses <i>ExtendedDate</i> to calculate a
difference between two dates. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:180.4pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:180.4pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>CommonEraDayTest.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------------
  // CommonEraDayTest.cs (c) 2006 by Charles Petzold //-------------------------------------------------
  using System; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:306.7pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'> class CommonEraDayTest </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:97.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.Write(&quot;Enter the year of your birth: &quot;);         int year =
  Int32.Parse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;And the month: &quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  month = Int32.Parse(Console.ReadLine()); </span></p>
  </td>
 </tr>
 <tr style='height:292.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:292.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;And the day: &quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  day = Int32.Parse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        ExtendedDate
  exdtBirthday = new ExtendedDate(year, month, day);         ExtendedDate
  exdtMoonWalk = new ExtendedDate(1969, 7, 20); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:109.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>         int daysElapsed =
  exdtMoonWalk.CommonEraDay -                                 
  exdtBirthday.CommonEraDay; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:262.85pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>         if
  (daysElapsed &gt; 0)             Console.WriteLine( </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>                &quot;You were born
  {0:N0} days before the moon walk.&quot;,                 daysElapsed); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:241.0pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>         else if (daysElapsed
  == 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine( </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;You were born on the day of the moon walk.&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        else </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine( </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;You were born {0:N0} days after the moon walk.&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  -daysElapsed); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This program calculates the difference between two dates by
subtracting their <i>CommonEraDay</i> properties. Wouldnt it be nice just to
subtract one <i>object</i> from the other? That will become a reality in
Chapter 20. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:.05pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369933">Chapter 19. Virtuality </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you saw in Chapter 16, concepts of equality that might
have once been intuitively clear become somewhat muddied when classes are
involved. Inheritance raises its own issues regarding equality and assignment.
To what extent are classes that are related by inheritance equivalent to each
other? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>It turns out that object-oriented languages like C#
provides some interesting features related to inheritance that culminate in the
convenience and versatility of virtual methods. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The most basic of these features involves conversion. In
particular C# provides implicit conversions from any object to any ancestral
type. To explore these conversions, Ill use as an example the <i>ExtendedDate</i>
class from the previous chapter. As youll recall, this class derived from the <i>Date</i>
class in Chapter 17, and the <i>Date</i> class implicitly derives from <i>System.Object</i>,
also known by the C# keyword <i>object</i>. Both <i>object</i> and <i>Date</i>
are ancestral types to <i>ExtendedDate</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>This code creates an object of type <i>ExtendedDate</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ExtendedDate exdt = new ExtendedDate(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>C# provides an implicit conversion from <i>exdt</i> to an
object of any ancestral type. This means that you can assign <i>exdt</i> to an
object declared to be of type <i>Date</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Date dt = exdt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>No new object is created by this statement. The only object
were dealing with was created by the <i>new</i> expression in the preceding
statement. That expression created an object of type <i>ExtendedDate</i> in the
heap and returned a reference to it. Now the <i>dt</i> variable refers to the
same object. This expression returns <i>true</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>exdt == dt </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# allows a conversion from type <i>ExtendedDate</i> to
type <i>Date</i> for two reasons:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>First, objects of type <i>ExtendedDate</i> and objects of
type <i>Date</i> are references, and all references are the same size. The
compiler has reserved space on the stack for both <i>exdt</i> and <i>dt</i>,
and in both cases this space is sufficient to store a reference. Theres no
practical problem in copying a reference from one slot on the stack to another.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Secondly, in this particular case, C# allows the conversion
because </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'><i>ExtendedDate</i> derives from <i>Date</i>. In a very
real sense, an <i>ExtendedDate</i> object qualifies as a <i>Date</i> object
because anything a <i>Date</i> object can do, an <i>ExtendedDate</i> object can
also do. For example, this expression is no problem: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dt.DayOfYear() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although <i>dt</i> really stores an <i>ExtendedDate</i>
object, <i>ExtendedDate</i> has inherited the <i>DayOfYear</i> method from <i>Date</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>But this expression is a problem: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dt.CommonEraDay </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Even though in our little example the <i>dt</i> variable is
really storing an </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>ExtendedDate</i> object, and <i>ExtendedDate</i>
supports the <i>CommonEraDay</i> property, the C# compiler will <i>not</i> let
this expression pass. The <i>dt</i> variable is declared as an object of type <i>Date</i>,
and the <i>Date</i> class does not have a <i>CommonEraDay</i> property. C#
considers this expression an error. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Assigning an object to a variable of an ancestral type is
sometimes known as <i>upcasting</i>, even though you dont need an explicit
cast. The conversion is implicit and always allowed. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Just as you can assign an object of type <i>ExtendedDate</i>
to a <i>Date</i> variable, you can declare a variable of type <i>object</i> and
assign an <i>ExtendedDate</i> object to it: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>object obj = exdt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can assign any object to this <i>obj</i> variable
because every object is created from a class or structure that derives from <i>object</i>.
Every object is an <i>object</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>obj</i> variable to which weve assigned the <i>ExtendedDate</i>
object still &#8213;knows&#8214; its true nature. That information is part of
whats stored in the heap along with the instance fields of the object itself.
For example, you can pass <i>obj</i> to the <i>Console.WriteLine</i> method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(obj); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll see the date displayed. <i>Console.WriteLine</i>
effectively calls the <i>ToString</i> method of <i>obj</i>, and thats valid
because <i>System.Object</i> defined the <i>ToString</i> method to begin with. <i>Date</i>
redefined the <i>ToString</i> method to display the date, and <i>ExtendedDate</i>
inherited that redefined <i>ToString</i> method. That the correct <i>ToString</i>
method gets called is part of the pleasures associated with declaring and
overriding virtual methods. Thats what this chapter is all about. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>Some of the following code may be a little confusing, so I
want to distinguish between a variables <i>declared</i> type and its <i>actual</i>
type. Consider the <i>obj</i> variable thats been assigned an instance of the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>ExtendedDate</i> class. Its declared type is <i>object</i>
but its actual type is <i>ExtendedDate</i>. A variables declared type never
changes, and in my examples the name of the variable will indicate what that
is. A variables actual type can change as the variable is assigned different
objects. However, a variables actual type cant be just anything. It is always
the declared type or a descendant of its declared type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>C# provides an implicit conversion from any object to any
ancestral type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Going the other way (<i>downcasting</i>, as its called)
requires an explicit cast: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ExtendedDate exdt2 = (ExtendedDate) obj; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Even if <i>obj</i> were never assigned an object of type <i>ExtendedDate</i>,
the C# compiler would still allow this cast. Because <i>ExtendedDate</i> is
derived from <i>object</i>, <i>obj</i> could conceivably be storing an object
of type <i>ExtendedDate</i>, so the C# compiler awards that cast and assignment
statement its good programming seal of approval. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, theres still runtime to consider. If at runtime <i>obj</i>
is not actually an <i>ExtendedDate</i> object (or an instance of a class
derived from <i>ExtendedDate</i>, if such a class existed) then the assignment
statement throws an <i>InvalidCastException</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If the actual type of <i>obj</i> is truly <i>ExtendedDate</i>,
then you can cast it and access a property in a single expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>((ExtendedDate) obj).CommonEraDay </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The double parentheses are needed because casting is a
unary operation and the period is a primary operation that has higher
precedence than the unary operation. Without the parentheses that extend around
<i>obj</i>, the cast would seem to be applied to the value returned from the <i>CommonEraDay</i>
property. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can also cast <i>obj</i> to a <i>Date</i> object to
access a property or call a method declared in <i>Date</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>((Date) obj).DayOfYear() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Calling <i>DayOfYear</i> would also work if you cast <i>obj</i>
to <i>ExtendedDate</i>. But you wouldnt be able to cast <i>obj</i> to a class
that derives from <i>ExtendedDate</i> (if such a class existed). That cast
would fail at runtime, and it makes sense that it should, because a class that
derives from <i>ExtendedDate</i> can do more than <i>ExtendedDate</i> and the
actual type of <i>obj</i> is just <i>ExtendedDate</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If <i>obj</i> isnt actually an instance of <i>ExtendedDate</i>
(or a class that derives from <i>ExtendedDate</i>) and you try to cast it to an
<i>ExtendedDate</i> object, youll raise an exception. To avoid raising an
exception, you can use the <i>as</i> operator instead: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ExtendedDate exdt2 = obj as ExtendedDate; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>as</i> operator is similar to casting except that it
doesnt raise an exception if <i>obj</i> is not an <i>ExtendedDate</i> object.
In that case, the <i>as</i> operator returns <i>null</i>. (You cant use <i>as</i>
to cast value types.) Programs that use the <i>as</i> operator should be
prepared for a <i>null</i> result and check for it in code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (exdt2 != null) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>It is also possible for a program to determine the actual
type of an object before the program tries to cast it. The <i>System.Object</i>
class implements a method named <i>GetType</i> that is inherited by all classes
and structures. <i>GetType</i> returns an object of type <i>Type</i>. I know
that sounds funny, but the <i>System</i> namespace includes a class named <i>Type</i>,
and thats what <i>GetType</i> returns: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Type typeObjVariable = obj.GetType(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Type</i> class has numerous properties and methods
that a program can use to obtain information about the class of which <i>obj</i>
is an instance, including all its properties, methods, and so forth. <i>GetType</i>
will raise a <i>NullReferenceException</i> if its applied to a <i>null</i>
object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>C# also supports an operator named <i>typeof</i> that you
can apply to classes, structures, enumerations, and so forth. You do not use <i>typeof</i>
with objects. Like <i>GetType</i>, the <i>typeof</i> operator returns an object
of type <i>Type</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Type typeExtendedDateClass = typeof(ExtendedDate); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>The documentation of the <i>Type</i> class in the .NET
Framework says &#8213;A Type object that represents a type is unique; that is,
two Type object references refer to the same object if and only if they
represent the same type. This allows  for comparison of Type objects using
reference equality.&#8214; This means that you can use the equality operator
with <i>Type</i> objects. The expression <span style='font-size:10.0pt;
line-height:115%;font-family:Consolas'>obj.GetType() == typeof(ExtendedDate) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.35in;margin-bottom:6.35pt;
margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;line-height:
115%'>is <i>true</i> if the actual type of <i>obj</i> is <i>ExtendedDate</i>.
If that is so, however, then the expression <span style='font-size:10.0pt;
line-height:115%;font-family:Consolas'>obj.GetType() == typeof(Date) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>returns <i>false</i>, despite the fact that <i>ExtendedDate</i>
derives from <i>Date</i> and you can cast <i>obj</i> to a <i>Date</i> object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Take a moment to nail down the difference between <i>GetType</i>
and <i>typeof</i>. Both return objects of type <i>Type</i>. But <i>GetType</i>
is an instance method that you call for a particular object whereas <i>typeof</i>
is a C# operator that you apply to a type such as a structure or class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can also determine whether an object is a particular
type using the <i>is</i> operator. Just as with the <i>as</i> operator, an
object always appears on the left of the <i>is</i> operator, and a type appears
on the right. The expression <span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>obj is ExtendedDate </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>returns <i>true</i> if <i>obj</i> is actually an instance
of <i>ExtendedDate</i>. One advantage of <i>is</i> over the comparison
involving <i>GetType</i> is that <i>is</i> wont raise an exception if <i>obj</i>
is <i>null</i>. It will simply return <i>false</i>. Another advantage (for most
applications) is that it will return <i>true</i> for any class that <i>ExtendedDate</i>
derives from. If <i>obj</i> is actually an instance of <i>ExtendedDate</i>,
this expression also returns <i>true</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>obj is Date </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>is</i> operator returns <i>true</i> for any type
where the object on the left can be cast to the type on the right. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can also use the <i>is</i> operator to determine
whether the actual type of the object implements a particular interface. For
example, the <i>foreach</i> statement works with any class that implements the <i>IEnumerable</i>
interface. (To implement an interface means to include all methods that the
interface declares.) If you want to determine if a particular object is an
instance of a class that implements the <i>IEnumerable</i> interface, you can
use the following expression: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>obj is IEnumerable </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>Sytem.Object</i> class defines several methods that
are inherited by every class and structure. In Chapter 14 you saw how a class
can include a <i>ToString</i> method to provide a text representation of an
object. The <i>ToString</i> method is declared as a virtual method in <i>System.Object</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public virtual string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>To override the <i>ToString</i> method in your own class,
you use the <i>override</i> keyword: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public override string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Only methods and properties can be declared as <i>virtual</i>.
Fields cannot. Any derived class can override a virtual method or property. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>virtual</i> keyword is used for method and
properties that are <i>intended</i> to be overridden. (Besides <i>ToString</i>
youll see in the next chapter how a class can override the virtual <i>Equals</i>
and <i>GetHashCode</i> methods also declared in <i>System.Object</i>.) You
cant change a methods accessibility (that is, change the method from <i>public</i>
to <i>private</i>) or return type when you override a virtual method. Any
virtual method overridden with <i>override</i> remains a virtual method for
further descendent classes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There will be times when youll derive a class from an
existing class and youll want to provide a new version of a method or property
that is <i>not</i> declared as virtual. Or maybe youll want to change a
methods declared access from <i>protected</i> to <i>public</i> or the other
way around. Or perhaps you need to change the return type of a method. Any
member in a base classand that includes fields as well as methods and
propertiescan be redefined in a derived class using the keyword <i>new</i>.
This is sometimes known as <i>hiding</i> the base member. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Interestingly enough, the <i>new</i> keyword is not
strictly required, but the compiler will warn you about its omission. The
warning is intended to be helpful, of course. The compiler is trying to prevent
you from hiding a member of the base class inadvertently. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If necessary, methods or properties in a derived class can
make use of overridden methods in the base class by prefacing the method or
property name with the keyword <i>base</i>. (See the <i>SoundEngineer</i> class
later in this chapter for an example.) Of course, a class can reference methods
in its base class that it inherits but does not override simply with the method
name. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The <i>override</i> and <i>new</i> keywords have
significantly different effects, as this short program demonstrates. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:355.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:355.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>InheritedMethods.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------------
  // InheritedMethods.cs (c) 2006 by Charles Petzold
  //------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  BaseClass </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  virtual void VirtualMethod() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Console.WriteLine(&quot;VirtualMethod
  in BaseClass&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  void NonVirtualMethod() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;NonVirtualMethod in BaseClass&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:416.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>}  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  DerivedClass : BaseClass </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override void VirtualMethod() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;VirtualMethod in DerivedClass&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public new
  void NonVirtualMethod() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;NonVirtualMethod in DerivedClass&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  </td>
 </tr>
 <tr style='height:128.8pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:128.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  InheritedMethods </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  DerivedClass dc = new DerivedClass(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  BaseClass bc = dc; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:262.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        
  bc.VirtualMethod();         bc.NonVirtualMethod(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The listing begins with the definition of <i>BaseClass</i>,
a class with one virtual method and one non-virtual method. Both methods simply
display some text indicating what and where they are. <i>DerivedClass</i>
derives from <i>BaseClass</i> and overrides the virtual method with the <i>override</i>
keyword and the non-virtual method with the <i>new</i> keyword. The <i>Main</i>
method creates an instance of <i>DerivedClass</i> and then assigns it to an
object of type <i>BaseClass</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:137.6pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>DerivedClass dc = new DerivedClass(); BaseClass bc = dc; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The declared type of <i>bc</i> is <i>BaseClass</i>, but the
actual type is <i>DerivedClass</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Next, <i>Main</i> calls the two methods using <i>bc</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:165.0pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>bc.VirtualMethod(); bc.NonVirtualMethod(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The results displayed by the program are interesting and
reveal most of what you need to know about virtual methods: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>VirtualMethod in DerivedClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>NonVirtualMethod in BaseClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Despite the fact that the program calls these two methods
with a variable declared as type <i>BaseClass</i>, the actual type of the
object is <i>DerivedClass</i>. Any virtual methods you call will be those in <i>DerivedClass</i>,
which is the actual type. The nonvirtual method is different. The method thats
called is based on the declared type, not the actual type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This characteristic of virtual methods is sometimes called <i>polymorphism</i>,
a word derived from the Greek for &#8213;many forms.&#8214; Virtual methods
take on many forms as they are overridden in descendent classes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Suppose <i>dt</i> is an instance of the <i>Date</i> class.
Consider the following method call: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Console.WriteLine(dt); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you search through the .NET Framework documentation of
all the overloads of <i>Console.WriteLine</i>, you wont find one that accepts
a <i>Date</i> argument. How could there be? But there <i>is</i> an overload of <i>WriteLine</i>
that accepts an argument of type <i>object</i>. When you call <i>Console.WriteLine</i>
with an argument of type <i>Date</i>, the C# compiler determines that the <i>WriteLine</i>
overload that comes closest is the one that has an argument of type <i>object</i>.
Its acceptable because implicit casts are allowed from <i>Date</i> to <i>object</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Somewhere in the body of the <i>WriteLine</i> method (or
the <i>String.Format</i> method that <i>WriteLine</i> uses), the <i>ToString</i>
method of the <i>object</i> parameter gets called. Because the actual type of
the parameter is <i>Date</i>, and because <i>ToString</i> is a virtual method,
the version of <i>ToString</i> that gets executed is the one in the <i>Date</i>
class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The difference between virtual and nonvirtual methods may
become clearer when you consider the role of the compiler. Suppose your program
contains a declaration of an object: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>SomeClass someObject; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Or perhaps <i>someObject</i> appears in a parameter list to
a method. Later on, your code contains the following method call: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>someObject.SomeMethod(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But theres a little problem here. The <i>someObject</i>
variable might be an instance of <i>SomeClass</i> like its declared, or it
might be an instance of a class that derives from <i>SomeClass</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Whats the compiler to do? (The description that follows is
more conceptual than an accurate account of the compilers actions.) The first
thing it does is examine the declaration of <i>SomeMethod</i> in <i>SomeClass</i>.
If <i>SomeMethod</i> is not part of <i>SomeClass</i>, the compiler examines the
class that <i>SomeClass</i> inherits from, and so forth, until it finds <i>SomeMethod</i>.
(If the compiler never finds <i>SomeMethod</i>, then thats a compile error.)
Once the compiler finds <i>SomeMethod</i>, it checks whether the method is
virtual; that is, does it have a <i>virtual</i> modifier or does it have an <i>override</i>
modifier to override a virtual method in an ancestral class? If the method is
not virtual, the compiler has it easy. The compiler knows exactly which method
should be invoked when <i>SomeMethod</i> is called for <i>someObject</i>. Its
the one thats declared right in <i>SomeClass</i> or the one that <i>SomeClass</i>
inherits. The compiler can match up the code with the precise method call. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>If <i>SomeMethod</i> is a virtual method, however, the
compiler has a problem. The compiler doesnt have enough information to figure
out which version of <i>SomeMethod</i> should be invoked. It depends on the
actual type of <i>someObject</i> and, in general, thats not known at compile
time. The actual type of <i>someObject</i> is known only when the program is
run and <i>SomeMethod</i> is called. Only at runtime can the correct version of
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>SomeMethod</i> be invoked. Only at runtime can that call
to <i>Tostring</i> in <i>Console.WriteLine</i> be hooked up to the appropriate <i>ToString</i>
method. The process of hooking up a method call with a virtual method is known
as <i>late binding</i> because it takes place while the program is actually
running. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:20.4pt;margin-bottom:
5.5pt;margin-left:-.25pt;line-height:126%'>Virtual methods are an essential
part of object-oriented programming. Without virtual methods, an expression
such as <span style='font-size:10.0pt;line-height:126%;font-family:Consolas'>obj.ToString()
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>would be worthless. But because virtual methods require
some additional overhead at runtime, they shouldnt be used indiscriminately. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll probably want to use virtual methods in situations
where you have a general case, and then variations on that general case, and
you want to use the same property or method names with these variations, but
you want the implementations to be different. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>For example, heres a general case that contains a virtual
method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class BaseClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public virtual int DoSomething() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         ...     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The first variation derives from <i>BaseClass</i> and
overrides the virtual method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class FirstVariation: BaseClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public override int DoSomething() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         ...     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The second variation does likewise: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class SecondVariation: BaseClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public override int DoSomething() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         ...     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can make as many of these descendent classes as you
want. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because <i>FirstVariation</i> and <i>SecondVariation</i>
derive from <i>BaseClass</i>, objects of these types can be converted to
objects of type <i>BaseClass</i> without casting. The implications of this
simple fact are astonishing: You can store objects of type <i>FirstVariation</i>
and <i>SecondVariation</i> in an array of type <i>BaseClass</i>. Or you can
pass these objects to a method that has a <i>BaseClass</i> parameter. Even
though youre treating these objects as if they were <i>BaseClass</i> objects,
whenever you call <i>DoSomething</i>, the version of <i>DoSomething</i> in <i>FirstVariation</i>
or <i>SecondVariation</i> will execute. You can always determine what the
actual type of the object is by calling the <i>GetType</i> method, but you may
find it convenient to treat these objects uniformly without worrying about the
actual type. And, you can later define additional descendents of <i>BaseClass</i>
with minimal impact to the rest of your code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>For a more concrete example, lets look at an orchestra
that pays its musicians a flat $100 per performance (public funding of the arts
being what it is). Heres a simple class containing a constructor to store the
musicians name, a read-only property to obtain the musicians name, and a <i>CalculatePay</i>
method that returns the decimal value 100. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:355.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:355.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Musician.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:174.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-----------------------------------------
  // Musician.cs (c) 2006 by Charles Petzold
  //----------------------------------------- class Musician </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:279.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Private field     string
  strName; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:268.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Public property     public
  string Name </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>    {        
  get         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  return strName; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Constructor </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  Musician(string strName) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  this.strName = strName; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    // Virtual
  Method </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  virtual decimal CalculatePay() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  100; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.25pt;
margin-left:-.25pt'>Notice that <i>CalculatePay</i> is a virtual method. Its
virtual because not every musician is paid $100. The harp players, for example,
are paid based on the weight of their harps. </p>

<h2 style='margin-top:0in;margin-right:14.35pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>Harp.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//-------------------------------------
// Harp.cs (c) 2006 by Charles Petzold </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//------------------------------------- </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>class Harp: Musician </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    int weight; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public Harp(string strName, int
weight): base(strName) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        this.weight = weight; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public override decimal
CalculatePay() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        return 1.5m * weight; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.55pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Harp</i> class subclasses the <i>Musician</i> class.
It declares its own constructor for both a name and a harp weight and then uses
a constructor initializer to execute the constructor in <i>Musician</i> to
store the harpists name. The <i>Harp</i> class itself stores the weight of the
harp. The new <i>CalculatePay</i> method has an <i>override</i> modifier and
implements its own pay formula. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Violinists are paid a little more than the other musicians,
but theyre also penalized if they break a string during performance. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:203.8pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:203.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Violin.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:185.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//---------------------------------------
  // Violin.cs (c) 2006 by Charles Petzold
  //--------------------------------------- class Violin: Musician </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    int
  numBrokenStrings; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  Violin(string strName, int numBrokenStrings): base(strName) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  this.numBrokenStrings = numBrokenStrings; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override decimal CalculatePay() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  125 - 50 * numBrokenStrings; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The French horn is a notoriously difficult instrument, and
the players are paid based on the number of correct notes and flubbed notes. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:98.4pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 4.6pt 0in 1.45pt;height:98.4pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>FrenchHorn.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------
  // FrenchHorn.cs (c) 2006 by Charles Petzold
  //------------------------------------------- class FrenchHorn: Musician </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>    int numGoodNotes,
  numFlubbedNotes;  </span></p>
  </td>
 </tr>
 <tr style='height:128.8pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 4.6pt 0in 1.45pt;height:128.8pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    public FrenchHorn(string
  strName, int numGoodNotes, int numFlubbedNotes):         base(strName) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:88.15pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        this.numGoodNotes =
  numGoodNotes;         this.numFlubbedNotes = numFlubbedNotes; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override decimal CalculatePay() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  1.5m * numGoodNotes + 0.75m * numFlubbedNotes; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Somehow the sound engineer has managed to get paid 125
percent of whatever the generic musician gets paid. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:168.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:168.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SoundEngineer.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// SoundEngineer.cs (c) 2006 by
  Charles Petzold //---------------------------------------------- class
  SoundEngineer: Musician </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  SoundEngineer(string strName): base(strName) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:389.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    {     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override decimal CalculatePay() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  1.25m * base.CalculatePay(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the use of the <i>base</i> keyword to reference the <i>CalculatePay</i>
method in the <i>Musician</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>All these classes are part of the PayTheMusicians project,
which also contains the following class with the <i>Main</i> method. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:227.3pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:227.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>PayTheMusicians.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:119.75pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//
  PayTheMusicians.cs (c) 2006 by Charles Petzold
  //------------------------------------------------ using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  PayTheMusicians </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Musician[]
  musicians =  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:164.1pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>                new
  Musician(&quot;Leonard&quot;),                 new Harp(&quot;Sam&quot;,
  62),                 new Violin(&quot;Sydney&quot;, 0),                 new
  FrenchHorn(&quot;Janet&quot;, 46, 23), </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:196.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>                new
  Musician(&quot;Chuck&quot;),                 new Harp(&quot;Arien&quot;,
  78),                 new Violin(&quot;Jason&quot;, 2), </span></p>
  </td>
 </tr>
 <tr style='height:105.4pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:105.4pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>                new
  FrenchHorn(&quot;Deirdre&quot;, 52, 25),                 new
  SoundEngineer(&quot;Fitz&quot;) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            };
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  foreach (Musician mus in musicians) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:43.0pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>           
  Console.WriteLine(&quot;Pay {0} the amount of {1:C}&quot;,                
  mus.Name, mus.CalculatePay()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The program creates nine objects based on <i>Musician</i> and
its descendents, and stores all these object in an array of type <i>Musician</i>.
Despite the fact that five different classes are involved here, a single array
stores them all. The <i>foreach</i> statement then loops through the array,
displaying the musicians name using the <i>Name</i> property and calling the <i>CalculatePay</i>
method. The results reveal that each musician gets paid a correct (if not quite
appropriate) amount: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Leonard the amount of $100.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Sam the amount of $93.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Sydney the amount of $125.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Janet the amount of $86.25 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Chuck the amount of $100.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Arien the amount of $117.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pay Jason the amount of $25.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:198.1pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Pay Deirdre the amount of $96.75 Pay Fitz the amount of
$125.00 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Obviously theres a lot going on behind the scenes here.
Without virtual methods, tailoring calculations like this would probably
require a bunch of <i>if</i> statements or a <i>switch</i>. With virtual
methods, we get the same effect in a much cleaner way. You can easily add
alternate pay scales by declaring new classes that derive from <i>Musician</i>.
You dont have to touch the <i>foreach</i> loop or any other code that
manipulates objects of type <i>Musician</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Eventually, all the musicians might have special pay
scales, and then you really wont be creating objects of type <i>Musician</i>
at all. In that case, you can use the <i>abstract</i> modifier for the <i>Musician</i>
class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>abstract class Musician </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>An abstract class cant be instantiated, which means the C#
compiler wont allow a <i>new</i> expression involving an <i>abstract</i>
class. However, you can still declare a variable of type <i>Musician</i>, and
you can still have an array of type <i>Musician</i>. Everything else about the
program would remain the same. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If a descendent of <i>Musician</i> doesnt override the <i>CalculatePay</i>
method, the descendent ends up with the version of <i>CalculatePay</i> defined
in <i>Musician</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>It could be that you want to declare <i>Musician</i> as an <i>abstract</i>
class and also force every descendent of <i>Musician</i> to implement its own <i>CalculatePay</i>
method. In that case, you can also use the <i>abstract</i> keyword for the <i>CalculatePay</i>
method in <i>Musician</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public abstract decimal CalculatePay(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>An abstract method (or property) is implicitly virtual.
Becaue this method is never called, it has no body. In such a situation, a call
from the <i>CalculatePay</i> method in a derived class to the base class method
(such as in the <i>SoundEngineer</i> class) would not be allowed. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A real-life example of an abstract class with abstract
methods is the <i>Calendar</i> class used in conjunction with the <i>DateTime</i>
structure. Ill discuss this class in Chapter 23. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The opposite of an abstract class is a sealed class. An
abstract class must be subclassed to have any value to a program; a sealed
class cannot be subclassed. Some classes that contain only static fields,
methods, and properties, such as <i>Console</i>, <i>Convert</i>, and <i>Math</i>,
are declared as static classes, which are implicitly sealed. Structures are
also implicitly sealed. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>And by now you should understand why inheritance isnt
allowed for structures. For just one crazy moment, lets suppose you could
derive one structure from another. Lets suppose you have <i>MyStruct1</i>
which defines two integer fields and <i>MyStruct2</i> that derives from <i>MyStruct1</i>
and defines two more integer fields. Now declare an instance of <i>MyStruct1</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>MyStruct1 ms1 = new MyStruct1(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As you know, <i>ms1</i> occupies 64 bytes on the stack. Now
declare an instance of <i>MyStruct2</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>MyStruct2 ms2 = new MyStruct2(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>This instance of <i>MyStruct2</i> requires 128 bytes on the
stack. So what happens when you take advance of upcasting and assign <i>ms2</i>
to <i>ms1</i>? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ms1 = ms2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thats a legal assignment for classes because it copies a
reference from one variable to another. But such an assignment for structures
would require copying 128 bytes on the stack to an area that can only fit 64
bytes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And thats why inheritance isnt allowed for structures. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But thats not to imply that <i>upcasting</i> isnt allowed
for structures. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At the outset of this chapter, I noted that C# allows
implicit conversions of objects to any ancestral type. Because every object
ultimately derives from <i>object</i>, a variable declared as type <i>object</i>
can be assigned any object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>An array of type <i>object</i> can store any object. A
method with an <i>object</i> parameter (such as <i>WriteLine</i>) can be passed
any object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'><i>Any</i> object. Even value types such as <i>int</i>, <i>decimal</i>,
<i>bool</i> and whatever structures you declare. For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:236.5pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>decimal pi = 3.14159m; object obj = pi; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Is this right? The more you study these two simple (and
completely legal) statements, the stranger they may seem. To store <i>pi</i>,
the C# compiler allocates 16 bytes on the stack. For <i>obj</i>, the C#
compiler allocates enough space on the stack to store a reference. Normally <i>obj</i>
would be a reference to memory allocated from the heap, but the absence of a <i>new</i>
expression here seems to indicate that no heap memory has been allocated. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>So how can a reference like <i>obj</i> store a 16-byte <i>decimal</i>?
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The answer is a little behind-the-scenes trick known as
&#8213;boxing.&#8214; Whenever a value type is assigned to a variable of type <i>object</i>,
memory is allocated from the heap sufficient to store that value type. In this
example, thats 16 bytes for the <i>decimal</i> value plus whatever overhead is
required to store the objects type. The <i>decimal</i> value is then copied
from the stack into the heap. Thats how the <i>obj</i> variable can refer to
the <i>decimal</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>At some point you might want to get the object back: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>decimal m = (decimal) obj; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The value type is then <i>unboxed</i>. The value is
extracted from the heap and copied back to the stack. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Boxing and unboxing take some time and could affect the
performance of your programs. For that reason, you should be alert and wary of
any code in which you are converting many value types to <i>object</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a little test program that reveals the performance
hit of boxing. It contains two methods named <i>AddIntegers</i> and <i>AddObjects</i>,
and calls each of those methods 100,000,000 times with random arguments. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:156.85pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:156.85pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>TestBoxingHit.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:147.35pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------------
  // TestBoxingHit.cs (c) 2006 by Charles Petzold
  //---------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>using
  System.Diagnostics; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  TestBoxingHit </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:196.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        const int reps =
  100000000;         Random rand = new Random(); </span></p>
  </td>
 </tr>
 <tr style='height:339.65pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:339.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Stopwatch watch = new Stopwatch(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:64.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        // Test method that
  doesn't involve boxing.         watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; reps; i++) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:153.15pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>           
  AddIntegers(rand.Next(), rand.Next());         watch.Stop();  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:15.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.WriteLine(&quot;Method call with no boxing: &quot; + watch.Elapsed); 
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:164.2pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        // Test method with
  boxing and unboxing.         watch.Reset();         watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; reps; i++) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:81.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  AddObjects(rand.Next(), rand.Next());         watch.Stop(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>        Console.WriteLine(&quot;Method
  call with boxing and unboxing: &quot; +                             
  watch.Elapsed); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static int
  AddIntegers(int i1, int i2) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  i1 + i2; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static int
  AddObjects(object obj1, object obj2) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  (int)obj1 + (int)obj2; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>AddIntegers</i> method requires no boxing or
unboxing. The <i>AddObjects</i> method requires two boxing operations when the
method is called and two unboxing operations inside the method. On my pokey
machine, the <i>AddIntegers</i> calls takes a total of about 5 seconds, but the
<i>AddObjects</i> calls require about 13 seconds. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you have a method like <i>AddObjects</i> that has an <i>object</i>
parameter and youre passing many value types to that method, consider writing
overloads specifically for those value types. Take a look at <i>WriteLine</i>. <i>WriteLine</i>
has overloads for all the C# basic types besides the version with the <i>object</i>
parameter. <i>Writeline</i> tries to avoid boxing, and you should as well. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.9pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:.2pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369934">Chapter 20. Operator Overloading </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>CommonEraDay</i> property introduced in the <i>ExtendedDate</i>
class in Chapter 18 provides a way to find the number of days between any two
dates: Just subtract the <i>CommonEraDay</i> properties. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>But it might be even more convenient to just subtract one <i>Date</i>
object from another: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int numDays = dateMoonLanding  dateYourBirthday; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Thats subtraction, but what about addition? Does it make
sense to add two dates? Well, not really. But it makes a whole lot of sense to
add a date and an integer. The calculation would tell you what date was a
certain number of days after a particular date: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dateTenThousandDaysOld = dateYourBirthday + 10000; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This is known as operator overloading, and its a common
feature of object-oriented languages. Any class or structure that you define
can specify how the standard C# operators such as plus and minus are supposed
to work on objects of that type. The <i>String</i> class, for examples, defines
addition as a concatenation operator. (Of course, youre not <i>required</i> to
define operators for your classes; operator overloading is easily abused, so
try to come up with a good justification for every operator you overload.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The operators that a class or structure can overload are
listed in the <i>C# Language Specification</i>, §7.2.2 and §10.9. The
overloadable unary operators are +, , !, ~ ++, --, <i>true</i>, and <i>false</i>.
The overloadable binary operators are the arithmetic operators (+, , *, /, and
%), the logical and bitwise operators (&amp;, |, and ^), the equality operators
(== and !=), the relational operators (&lt;, &lt;=, &gt;, and &gt;=), and the
shift operators (&lt;&lt; and &gt;&gt;). Because the compound assignment
operators (such as +=) are defined in terms of the corresponding binary
operators, you get those for free. You cant overload the conditional operators
&amp;&amp; and ||, but they will be applicable for your class if you define
&amp; and | as well as <i>true</i> and <i>false</i>. See the <i>C# Language
Specification</i>, §7.11.2, for details. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At the end of this chapter Ill show you a complete class
named <i>SuperDate</i> that derives from <i>ExtendedDate</i> and defines a
bunch of C# operators, so the examples Ill show you will refer to <i>SuperDate</i>
objects. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Operator declarations look a lot like method declarations.
They always include the modifiers <i>public</i> and <i>static</i> followed by
the keyword <i>operator</i> followed by the operator itself. For a binary
operator like subtraction, there are two parameters, which are the object to
the left of the minus sign and the object on the right of the minus sign. At
least one of the parameters must be the same type as the class. For this
reason, you never need a <i>new</i> modifier when declaring an operator thats
already declared in an ancestral class. The operands in the two declarations
can never be the same, so they constitute distinct methods. Operators are never
declared as virtual. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Heres the definition of the subtraction operator. The two
parameters are objects of type <i>SuperDate</i> and the subtraction operator
returns an <i>int</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static int operator - (SuperDate sdLeft, SuperDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:88.15pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return sdLeft.CommonEraDay - sdRight.CommonEraDay; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>With an operator like this defined, youll be able to
subtract one <i>SuperDate</i> object from another and get the number of days
between the two dates. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When translating the <i>SuperDate</i> class to Intermediate
Language, the C# compiler fabricates a static method named <i>op_Subtraction</i>
that implements the subtraction operator. This is also the name that youll see
in the .NET Framework class library documentation for classes and structures
that define their own operators. (Look at the documentation for the <i>System.Decimal</i>
structure, for example.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The Common Language Specification does not require that
languages recognize operations such as plus and minus between non-basic types.
This becomes an issue if you put the <i>SuperDate</i> class in a dynamic link
library where it is accessible by any .NET language. In languages that do not
allow the subtraction operator between arbitrary objects, the programmer must
use the <i>op_Subtraction</i> method instead: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>op_Subtraction(sdYourBirthday, sdMoonWalk) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This is not particularly attractive. Moreover, somebody
might want to incorporate the <i>SuperDate</i> class in a scripting language
that refers to operations with common names such as <i>Add</i> and <i>Subtract</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For these reasons, it is recommended that when implementing
operator overloading, you also define static methods named <i>Add</i>, <i>Subtract</i>,
<i>Multiply</i>, <i>Divide</i>, and so forth that also implement these
operations. Look to the <i>Decimal</i> structure for guidance. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>To implement these methods, you might first define a static
<i>Subtract</i> method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static int Subtract(SuperDate sdLeft, SuperDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:88.15pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return sdLeft.CommonEraDay - sdRight.CommonEraDay; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can then define the subtraction operator in terms of <i>Subtract</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static int operator - (SuperDate sdLeft, SuperDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return Subtract(sdLeft, sdRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Or you can do it the other way around by defining <i>Subtract</i>
in terms of the subtraction operator. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>For the addition operator, you might first define an <i>Add</i>
method that adds a <i>SuperDate</i> object and an integer to return another <i>SuperDate</i>
object. Heres how the method would look: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate Add(SuperDate sdLeft, int daysRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>This <i>Add</i> method needs to return an object of type <i>SuperDate</i>,
so it must create an object of that type. It sounds a bit odd for a class to
create an object of the class type, but theres no problem for a static method
to do so. Heres a possible implementation of the <i>Add</i> method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate Add(SuperDate sdLeft, int daysRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    SuperDate sdReturn = new SuperDate(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.75pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    sdReturn.CommonEraDay = sdLeft.CommonEraDay +
daysRight;     return sdReturn; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The method begins by creating an object of type <i>SuperDate</i>
and then setting the objects <i>CommonEraDay</i> property to the calculated
value of the addition. The method then returns that object. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Add</i> method would be even easier if <i>SuperDate</i>
had an additional constructorone that creates a <i>SuperDate</i> object based
on an argument indicating the common era day: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public SuperDate(int dayCommonEra) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    CommonEraDay = dayCommonEra; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Now the body of the <i>Add</i> method can be written in one
line: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate Add(SuperDate sdLeft, int daysRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:66.2pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return new SuperDate(sdLeft.CommonEraDay +
daysRight); } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>You can then define the plus operator in terms of the <i>Add</i>
method: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate operator + (SuperDate sdLeft, int daysRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return Add(sdLeft, daysRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Addition between a date and an integer is commutative, of
course, but the C# compiler doesnt know that. When you want to define a
commutative operation between two different types, you need two declarations of
the operator to account for commutativity. Heres the second <i>Add</i> method
and the second addition operator. Notice that the second <i>Add</i> method is
written in terms of the first one: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate Add(int daysLeft, SuperDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return Add(sdRight, daysLeft); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate operator + (int daysLeft, SuperDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return Add(daysLeft, sdRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now that youve implemented addition, you might want to
reconsider subtraction. Besides subtracting one date from another, it makes
sense to subtract an integer from a date: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate Subtract(int SuperDate sdLeft, int daysRight)
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return new SuperDate(sdLeft.CommonEraDay - daysRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate operator - (int SuperDate sdLeft, int
daysRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return Subtract(sdLeft, daysRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>But it doesnt make sense to subtract a date from an
integer. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can also declare the two unary increment and decrement
operators for <i>SuperDate</i>. There are no standard names for these
operators, so you can just define the operations directly. Heres the
increment: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static SuperDate operator ++ (SuperDate sd) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:132.1pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return new SuperDate(sd.CommonEraDay + 1); } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The decrement is similar. Theres a temptation when
defining the increment and decrement to alter the parameter in the body of the
method. Dont do it, or the operators wont work correctly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.5pt;
margin-left:-.25pt'>Youll probably also want an equality operator. Although
equality operators always return a <i>bool</i>, you still need to indicate the
return type: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static bool operator == (SuperDate sdLeft, superDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:82.65pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return sdLeft.CommonEraDay == sdRight.CommonEraDay; }
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A class that includes a declaration of the equality
operator must also include the inequality operator, which you can define in
terms of equality: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static bool operator != (SuperDate sdLeft, superDate sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return !(sdLeft == sdRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>Similarly, you can declare a relational operator: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static bool operator &lt; (SuperDate sdLeft, SuperDate
sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:88.15pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return sdLeft.CommonEraDay &lt; sdRight.CommonEraDay;
} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can then declare the opposite relational operator using
logical negation: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static bool operator &gt;= (SuperDate sdLeft, SuperDate
sdRight) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return !(sdLeft &lt; sdRight); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll want to declare the greater-than operator and the
less-than-orequal-to operator similarly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>If you declare equality and inequality operators, youll
get a warning message from the C# compiler about your failure to also declare
overrides for the virtual <i>Equals</i> and <i>GetHashCode</i> methods defined
in <i>System.Object</i>. As youll recall from Chapter 16, the <i>Equals</i>
method in </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>System.Object</i> implements reference equality; the <i>Equals</i>
method in <i>System.ValueType</i> (from which all structures derive) implements
bitwise equality, also known as value equality. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Although <i>SuperDate</i> is a class, you want the <i>Equals</i>
method to return <i>true</i> when comparing two days that have the same <i>CommonEraDay</i>
property. The documentation of the <i>Equals</i> method in the <i>System.Object</i>
class indicates that the method must not raise an exception. In particular, if
the argument to <i>Equals</i> is <i>null</i> or not of the correct type, <i>Equals</i>
should simply return <i>false</i>. Heres a rather lengthy <i>Equals</i> method
for <i>SuperDate</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public override bool Equals(object obj) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:77.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    if (obj == null) || GetType() !=
obj.GetType())         return false; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.95pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    SuperDate sd = (SuperDate) obj;     return
CommonEraDay == sd.CommonEraDay; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Heres a simpler implementation that makes use of the
equality operator already declared in <i>SuperDate</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public override bool Equals(object obj) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:82.65pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    return obj is SuperDate &amp;&amp; this ==
(SuperDate) obj; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If <i>SuperDate</i> were a structure rather than a class,
this method would involve a boxing and unboxing operation, and those are to be
avoided. You can also define an overload of the <i>Equals</i> method whose
argument is explicitly a <i>SuperDate</i> object: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public bool Equals(SuperDate sd) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return this == sd; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'><i>System.Object</i> also defines a static <i>Equals</i>
method where the two parameters are both of type <i>Object</i>. Again, if <i>SuperDate</i>
were a structure rather than a class, calling that method for two objects of
type <i>SuperDate</i> would involve boxing, so you probably want to supplement
that static method with one that has two explicit <i>SuperDate</i> parameters: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static bool Equals(SuperDate sd1, SuperDate sd2) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return sd1 == sd2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The other virtual method in <i>System.Object</i> that the
C# compiler wants you to override is <i>GetHashCode</i>, which returns a 32-bit
integer. A hash code is a number that programs can use to assist in storing and
retrieving objects. Two objects that are equal according to the <i>Equals</i>
method must return the same integer from <i>GetHashCode</i>. However, unequal
objects need not return unique hash codes. (Its certainly <i>preferable</i>,
but its not required, and its not even possible in the general case. If the
class or structure is capable of more than 2<sup>32</sup> unique objectswhich
is the case for <i>long</i>, <i>double</i>, and <i>decimal</i>then there are
more unique objects than possible return values of <i>GetHashCode</i>.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In general, <i>GetHashCode</i> usually performs some kind
of operation on the fields of the class or structure. For example, for a <i>Point</i>
structure that contains integer <i>x</i> and <i>y</i> fields, <i>GetHashCode</i>
might return <i>x</i> ^ <i>y</i>. With the <i>SuperDate</i> object weve lucked
out. A <i>SuperDate</i> object can be represented by a unique integer, which is
the <i>CommonEraDay</i> property. <i>GetHashCode</i> can be implemented as
simply as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public override int GetHashCode() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return CommonEraDay; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Do you want implicit or explicit conversion between <i>SuperDate</i>
objects and integers? Id shy away from implicit conversion, but explicit
conversion using casting seems reasonable to me. The syntax for declaring
explicit conversions involves the <i>explicit</i> keyword. Heres a method that
allows an <i>explicit</i> conversion from a <i>SuperDate</i> to an <i>int</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static explicit operator int (SuperDate sd) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return sd.CommonEraDay; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Similarly, this declaration allows explicit conversions
from integers to <i>SuperDate</i> objects: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public static explicit operator SuperDate(int dayCommonEra) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return new SuperDate(dayCommonEra); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youd use the keyword <i>implicit</i> to declare implicit
conversions. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres the <i>SuperDate</i> class containing all the
operators Ive described in this chapter. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:414.55pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:414.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SuperDate.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:169.35pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//------------------------------------------
  // SuperDate.cs (c) 2006 by Charles Petzold //------------------------------------------
  using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>partial class
  SuperDate: ExtendedDate </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:284.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    // Constructors     public
  SuperDate() </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:389.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    {     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  SuperDate(int year, int mon, int day): base(year, mon, day) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:389.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    {     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  SuperDate(int dayCommonEra) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  CommonEraDay = dayCommonEra; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Equality operators </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool operator == (SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  sdLeft.CommonEraDay == sdRight.CommonEraDay; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool operator != (SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  !(sdLeft == sdRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Relational operators </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool operator &lt; (SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:97.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        return
  sdLeft.CommonEraDay &lt; sdRight.CommonEraDay;     } </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:522.05pt;margin-bottom:
0in;margin-left:-1.25in;text-indent:0in;line-height:107%'>&nbsp;</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:609.0pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:609.0pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool operator &gt; (SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  sdLeft.CommonEraDay &gt; sdRight.CommonEraDay; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static bool operator &lt;= (SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  !(sdLeft &gt; sdRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public static
  bool operator &gt;= (SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  !(sdLeft &lt; sdRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Arithmetic operators </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate Add(SuperDate sdLeft, int daysRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  new SuperDate(sdLeft.CommonEraDay + daysRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate operator +(SuperDate sdLeft, int daysRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  Add(sdLeft, daysRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate Add(int daysLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  sdRight + daysLeft; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate operator +(int daysLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  Add(sdRight, daysLeft); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static int Subtract(SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  sdLeft.CommonEraDay - sdRight.CommonEraDay; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static int operator -(SuperDate sdLeft, SuperDate sdRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  Subtract(sdLeft, sdRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate Subtract(SuperDate sdLeft, int daysRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  new SuperDate(sdLeft.CommonEraDay - daysRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate operator -(SuperDate sdLeft, int daysRight) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  Subtract(sdLeft, daysRight); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    // Unary
  operators </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate operator ++ (SuperDate sd) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:141.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        return new
  SuperDate(sd.CommonEraDay + 1);     } </span></p>
  </td>
 </tr>
 <tr style='height:292.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:292.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate operator -- (SuperDate sd) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  new SuperDate(sd.CommonEraDay - 1); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    //
  Explicit casts </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static explicit operator int (SuperDate sd) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  sd.CommonEraDay; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static explicit operator SuperDate (int daysCommonEra) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  new SuperDate(daysCommonEra); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:147.4pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    // Overrides of methods in
  System.Object     public override bool Equals(object obj) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  obj is SuperDate &amp;&amp; this == (SuperDate) obj; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  override int GetHashCode() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  CommonEraDay; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The following OperatorTest program is similar to the
CommonEraTest program in the last chapter, but it uses a few of the operators
declared in <i>SuperDate</i>. OperatorTest compares and subtracts the objects
directly. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:262.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:262.35pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>OperatorTest.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:152.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//---------------------------------------------
  // OperatorTest.cs (c) 2006 by Charles Petzold
  //--------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  OperatorTest </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:97.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>       
  Console.Write(&quot;Enter the year of your birth: &quot;);         int iYear
  = Int32.Parse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;And the month: &quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  iMonth = Int32.Parse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.Write(&quot;And the day: &quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        int
  iDay = Int32.Parse(Console.ReadLine()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:65.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        SuperDate sdBirthday =
  new SuperDate(iYear, iMonth, iDay);         SuperDate sdMoonWalk = new
  SuperDate(1969, 7, 20);  </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        if (sdBirthday &gt; sdMoonWalk) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>            Console.WriteLine( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>                &quot;You were born
{0:N0} days after the moon walk.&quot;,                 sdBirthday -
sdMoonWalk); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        else if (sdBirthday ==
sdMoonWalk) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>            Console.WriteLine( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>                &quot;You were born on
the day of the moon walk.&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        else </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>            Console.WriteLine( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>                &quot;You were born
{0:N0} days before the moon walk.&quot;,                 sdMoonWalk -
sdBirthday); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.7pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The OperatorTest project must contain SuperDate.cs as well
as links to Date.cs and ExtendedDate.cs. Obviously the program doesnt perform
an exhaustive test of all the operators in the <i>SuperDate</i> class, but its
a start. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You might have noticed the <i>partial</i> keyword at the
very beginning of the definition of <i>SuperDate</i>. That keyword indicates
that the <i>SuperDate</i> class might be more than just this one file. Parts of
the <i>SuperDate</i> class might be defined in other files. For this chapter,
however, <i>SuperDate</i> actually <i>is</i> just this one file. Youre allowed
to use the <i>partial</i> keyword when the entire class is present. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Why am I suddenly introducting the <i>partial</i> keyword
when I dont need it? The problem is this:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the past several chapters Ive been using the <i>Date</i>,
<i>ExtendedDate</i>, and <i>SuperDate</i> classes to demonstrate not only
inheritance, but other aspects of object-oriented programming. Over the course
of these chapters, I progressively added methods, constructors, properties, and
operators to these classes. It was very convenient to use inheritance to break
up the material into separate classes. Without inheritance, the size and
contents of the overall class would have been too much to tackle in one big
chapter. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In the real world, inheritance is not often used to
restrict the size of a class to something short enough to be discussed in the
chapter of a book. In fact, youd probably use a structure rather than a class
to represent a date. (If I were to do it over again, the only field in my <i>Date</i>
structure would be a zero-based Common Era day.) Structures are more closely
associated with objects that have particular numeric values; therefore
operating overloading is <i>much</i> more common in structures than in classes.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Structures cannot be inherited, and thats actually an
advantage when the structure contains operator declarations. Operators in
classes can be problematic when the class is inherited. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>For example, suppose you define another class named <i>HyperDate</i>
that inherits from <i>SuperDate</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class HyperDate: SuperDate </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // Nothing here yet. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>In a program, you declare a <i>HyperDate</i> object like
this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>HyperDate hdSputnik = new HyperDate(1957, 10, 4); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>HyperDate</i> inherits all the methods and operations
declared in </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'><i>SuperDate</i>, but some of them are no longer quite as
easy to use. Try this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>HyperDate hd = hdSputnik + 7;    // Wont work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>The statement makes use of the addition operator declared
in <i>SuperDate</i>. The appropriate overload has two parameters, a <i>SuperDate</i>
object and an integer. Passing a <i>HyperDate</i> object to the addition
operator in <i>SuperDate</i> is no problem because a <i>HyperDate</i> can be
implicitly converted to a </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>SuperDate</i>. The problem is the return value, which is
assigned to the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>HyperDate</i> object. The return value of the addition
operator is a </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>SuperDate</i>, and there is no implicit or explicit
conversion from a <i>SuperDate</i> object to a <i>HyperDate</i>. To make such a
statement work, <i>HyperDate</i> would have to declare its own addition
operator. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And thats why the next chapter will not define a <i>HyperDate</i>
class. But the next chapter will build on <i>SuperDate</i> and add another
interesting feature. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-left:.6pt'><a name="_Toc369935">Chapter 21. Interfaces </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Suppose you have an array of <i>SuperDate</i> objects from
the previous chapter and you want to sort them. You could write a sorting
algorithm yourself (which would certainly be a good exercise) or you can use
one of the static <i>Sort</i> methods of the <i>Array</i> class. But to use <i>Sort</i>,
the elements of the array must implement the <i>IComparable</i> interface. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>What does it mean to &#8213;implement the <i>IComparable</i>
interface&#8214;? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'><i>IComparable</i> is defined in the <i>System</i>
namespace, probably as simply as this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public interface IComparable </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    int CompareTo(object obj); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>It starts off looking like a class or structure named <i>IComparable</i>,
except that instead of <i>class</i> or <i>struct</i> the keyword <i>interface</i>
appears. Then theres a method named <i>CompareTo</i> that has an <i>object</i>
parameter and returns an <i>int</i>, but the method has no body.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Interfaces are entirely overhead! They contain no code. All
interfaces defined in the .NET Framework begin with a capital <i>I</i>, but
thats just a convention. You can name your own interfaces anything you like. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.75pt;
margin-left:-.25pt'>An interface is generally a collection of methods without
bodies, although interfaces can also contain other types of members such as
properties (which must also have empty bodies). The <i>IComparable</i>
interface has a single method named <i>CompareTo</i> that returns an <i>int</i>.
The documentation of <i>CompareTo</i> provides a set of rules: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.6pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>If the instance
is less than the parameter, <i>CompareTo</i> returns a negative number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:8.5pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>If the instance
is equal to the parameter, <i>CompareTo</i> returns 0. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.8pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>If the instance
is greater than the parameter, <i>CompareTo</i> returns a positive number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:8.35pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>If the
parameter is <i>null</i>, <i>CompareTo</i> returns a positive number. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>If the
parameter is the wrong type, <i>CompareTo</i> throws an <i>ArgumentException</i>. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll notice that all the basic numeric types and the <i>String</i>
class implement the <i>IComparable</i> interface. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.4pt;
margin-left:-.25pt'>To make <i>SuperDate</i> implement the <i>IComparable</i>
interface, you start at the very top of the <i>SuperDate</i> class declaration
and list <i>IComparable</i> along with <i>ExtendedDate</i>, which is the class
that <i>SuperDate</i> inherits from: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class SuperDate: ExtendedDate, IComparable </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A class can derive from only one other class, but a class
(or structure) can implement multiple interfaces, which must be separated by
commas. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A class that implements an interface must include all the
methods in that interface. To implement the <i>IComparable</i> interface, <i>SuperDate</i>
must declare a <i>CompareTo</i> method in accordance with the rules listed
earlier.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a file named SuperDate2.cs that contains a partial
class definition of <i>SuperDate</i> that implements the <i>IComparable</i>
interface by including the <i>CompareTo</i> method. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:227.2pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.05pt 5.75pt 0in 1.45pt;height:227.2pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SuperDate2.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------
  // SuperDate2.cs (c) 2006 by Charles Petzold
  //------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>partial class
  SuperDate : ExtendedDate, IComparable </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public int
  CompareTo(object obj) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:257.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        if (obj ==
  null)             return 1; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (!(obj is SuperDate)) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  throw new ArgumentException(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  this - (SuperDate)obj; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This file is intended to supplement the partial <i>SuperDate</i>
class definition in the SuperDate.cs file from the last chapter. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>One reason for implementing <i>IComparable</i> is to easily
sort arrays using the static <i>Array.Sort</i> method. Because arrays can
contain any type of object, <i>Sort</i> needs some way to determine if one
element of the array is less than, equal to, or greater than another element. <i>Sort</i>
cant figure that out on its own. For that reason, <i>Sort</i> requires that
its argument be an array whose elements implement the <i>IComparable</i>
interface. What the <i>Sort</i> method <i>really</i> wants is to call <i>CompareTo</i>
on the elements of the array. Thats the only way <i>Sort</i> knows how to sort
an array of objects its not familiar with. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Lets try it out. The following program contains an array
of famous composers alphabetized by last name. A corresponding array of <i>SuperDate</i>
objects contains the birth dates of these composers. The program sorts the
arrays by birth date and displays the results.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The DateSorting project includes SuperDate2.cs and
DateSorting.cs and has links to Date.cs, ExtendedDate.cs, and SuperDate.cs. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:543.45pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:543.45pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>DateSorting.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.8pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------
  // DateSorting.cs (c) 2006 by Charles Pezold //-------------------------------------------
  using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  DateSorting </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  string[] strComposers =  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;John Adams&quot;,         &quot;Johann Sebastian Bach&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Bela Bartok&quot;,        &quot;Ludwig van Beethoven&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Hector Berlioz&quot;,     &quot;Pierre Boulez&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Johannes Brahms&quot;,    &quot;Benjamin Britten&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Aaron Copland&quot;,      &quot;Claude Debussy&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Philip Glass&quot;,       &quot;George Frideric Handel&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Franz Joseph Haydn&quot;, &quot;Gustav Mahler&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Claudio Monteverdi&quot;, &quot;Wolfgang Amadeus Mozart&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Sergei Prokofiev&quot;,   &quot;Steve Reich&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Franz Schubert&quot;,     &quot;Igor Stravinsky&quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  &quot;Richard Wagner&quot;,     &quot;Anton Webern&quot; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            };
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  SuperDate[] sdBirthDates = </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:21.0pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>               
  new SuperDate(1947, 2, 15),  new SuperDate(1685, 3, 21),                 new
  SuperDate(1881, 3, 25),  new SuperDate(1770, 12, 17),                 new
  SuperDate(1803, 12, 11), new SuperDate(1925, 3, 26),                 new
  SuperDate(1833, 5, 7),   new SuperDate(1913, 11, 22),                 new
  SuperDate(1900, 11, 14), new SuperDate(1862, 8, 22),                 new
  SuperDate(1937, 1, 31),  new SuperDate(1685, 2, 23),                 new
  SuperDate(1732, 3, 31),  new SuperDate(1860, 7, 7),                 new
  SuperDate(1567, 5, 15),  new SuperDate(1756, 1, 27),                 new
  SuperDate(1891, 4, 23),  new SuperDate(1936, 10, 3),                 new
  SuperDate(1797, 1, 31),  new SuperDate(1882, 6, 17),                 new
  SuperDate(1813, 5, 22),  new SuperDate(1883, 12, 3)             }; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Array.Sort(sdBirthDates, strComposers); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:136.7pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         for (int i = 0; i &lt;
  strComposers.Length; i++)             Console.WriteLine(&quot;{0} was born on
  {1}.&quot;,                 strComposers[i], sdBirthDates[i]); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>Array</i> class contains many overloads of the
static <i>Sort</i> method. The simplest version simply sorts a single array,
which is not quite good enough for this program. We need the second simplest
sort, which has <i>two</i> array arguments.  The <i>Sort</i> method rearranges
both arrays in the same way based on a sort of the elements in the first array.
When two arrays are used in such a way, the elements of the first array are
sometimes referred to as <i>keys</i>. Heres the result: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Claudio Monteverdi was born on 15 May 1567. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>George Frideric Handel was born on 23 Feb 1685. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Johann Sebastian Bach was born on 21 Mar 1685. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Franz Joseph Haydn was born on 31 Mar 1732. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Wolfgang Amadeus Mozart was born on 27 Jan 1756. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Ludwig van Beethoven was born on 17 Dec 1770. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Franz Schubert was born on 31 Jan 1797. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Hector Berlioz was born on 11 Dec 1803. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Richard Wagner was born on 22 May 1813. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:143.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Johannes Brahms was born on 7 May 1833. Gustav Mahler was
born on 7 Jul 1860. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Claude Debussy was born on 22 Aug 1862. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Bela Bartok was born on 25 Mar 1881. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Igor Stravinsky was born on 17 Jun 1882. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Anton Webern was born on 3 Dec 1883. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:137.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>Sergei Prokofiev was born on 23 Apr 1891. Aaron Copland
was born on 14 Nov 1900. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Benjamin Britten was born on 22 Nov 1913. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Pierre Boulez was born on 26 Mar 1925. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Steve Reich was born on 3 Oct 1936. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Philip Glass was born on 31 Jan 1937. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>John Adams was born on 15 Feb 1947. </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Try swapping the order of the arguments to the <i>Array.Sort</i>
method like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Array.Sort(strComposers, sdBirthDates); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Recompile and run the program. The <i>String</i> class also
implements the <i>IComparable</i> interface, and now the composers are sorted
by name, albeit by the first name rather than the last name. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To sort by last name, youll probably want a class or
structure (named <i>Name</i>, for example), which has two <i>String</i>
properties named <i>FirstName</i> and <i>LastName</i>, and which also
implements the <i>IComparable</i> interface. The <i>CompareTo</i> method in <i>Name</i>
would make use of the <i>CompareTo</i> method of the <i>LastName</i> property. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>If youre using .NET 2.0 or later, youll also notice that
besides the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>IComparable interface, the documentation also lists
something called the &#8213;IComparable Generic Interface.&#8214; Ill discuss
generics in Chapter 27. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:.2pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369936">Chapter 22. Interoperability </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>There may come a time when youre writing a .NET class and
you need something thats provided by the Windows application programming
interface (API) but which isnt available in any .NET class. Or, maybe you have
a bunch of dynamic link libraries (DLLs) that werent written in .NET but which
youd like to use in your .NET programs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The example Im going to show you in this chapter does <i>not</i>
fit into any of those categories, but it will demonstrate anyway using <i>platform
invoke</i> (sometimes appreviated <i>PInvoke</i>), which lets you get at Win32
API functions from your .NET programs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although you can use interoperability from any C# program,
generally youll want to tuck the code away in a class and provide a
&#8213;wrapper&#8214; for it. In this example, Im going to extend <i>SuperDate</i>
once again and provide a static method named <i>Today</i> that returns a <i>SuperDate</i>
object for todays date. The .NET <i>DateTime</i> structure provides a static
property named <i>Now</i> that provides this information but Im going to
ignore that and instead call the Win32 <i>GetSystemTime</i> function, passing
to it a SYSTEMTIME structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Many of the classes you use for interoperability are
defined in the <i>System.Runtime.InteropServices</i> namespace, so youll
probably want a <i>using</i> directive for that namespace.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>GetSystemTime</i> function is defined in C syntax in
the Win32 documentation like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>void GetSystemTime(LPSYSTEMTIME lpSystemTime); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The single argument is a pointer to a SYSTEMTIME structure.
The SYSTEMTIME structure is defined in C syntax like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>typedef struct _SYSTEMTIME  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wYear; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wMonth; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wDayOfWeek; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wDay; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wHour; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wMinute; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wSecond; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    WORD wMilliseconds; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} SYSTEMTIME, *PSYSTEMTIME; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The WORD type definition is a 16-bit unsigned integer. The
first step is to define a class or structure that resembles this C structure,
but using C# syntax. Heres a possibility: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>[StructLayout(LayoutKind.Sequential)] class SystemTime </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:220.35pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    public ushort wYear;     public ushort wMonth;    
public ushort wDayOfWeek;     public ushort wDay;     public ushort wHour;    
public ushort wMinute;     public ushort wSecond;     public ushort
wMilliseconds; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Ive kept the same field names but made them <i>ushort</i>
and <i>public</i>. I made this a class rather than a structure with a name of <i>SystemTime</i>.
Before the class definition is some information in square brackets. This is
known as an <i>attribute</i>. Attributes are information you can attach to a
type or member of a type. The information is stored as metadata along with the
compiled code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>StructLayoutAttribute</i> is a class defined in the <i>System.Runtime.InteropServices</i>
namespace and is used to describe how the fields of the class or structure
should be interpreted. You could supply <i>LayoutKind.Explicit</i> and then
give byte offsets for all the fields. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Your code also needs a declaration of the Win32 function
you need to call, in this case <i>GetSystemTime</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>[DllImport(&quot;kernel32.dll&quot;)] </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static extern void GetSystemTime(SystemTime st); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the <i>extern</i> keyword, which means that its
external to the program. The attribute indicates the dynamic link library in
which the function is stored. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a partial <i>SuperDate</i> class that contains a
static method named <i>Today</i> that calls <i>GetSystemTime</i>. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:192.05pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:192.05pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SuperDate3.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.8pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//-------------------------------------------
  // SuperDate3.cs (c) 2006 by Charles Petzold
  //------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>using
  System.Runtime.InteropServices; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>partial class
  SuperDate </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:169.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>   
  [StructLayout(LayoutKind.Sequential)]     class SystemTime </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:235.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        public ushort
  wYear;         public ushort wMonth;         public ushort
  wDayOfWeek;         public ushort wDay; </span></p>
  </td>
 </tr>
 <tr style='height:187.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:187.35pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:230.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        public ushort
  wHour;         public ushort wMinute;         public ushort wSecond;        
  public ushort wMilliseconds; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>   
  [DllImport(&quot;kernel32.dll&quot;)] </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  extern void GetSystemTime(SystemTime st); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static SuperDate Today() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:43.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        SystemTime systime =
  new SystemTime();         GetSystemTime(systime); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  new SuperDate(systime.wYear, systime.wMonth, systime.wDay); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Today</i> method creates a new object of type <i>SystemTime</i>,
calls the Win32 <i>GetSystemTime</i> function, and then creates a <i>SuperDate</i>
object from fields of the <i>SystemTime</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a program that uses this static method to display
todays date. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:168.6pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:168.6pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>GetTodaysDate.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// GetTodaysDate.cs (c) 2006 by
  Charles Petzold //---------------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  GetTodaysDate </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  SuperDate sdToday = SuperDate.Today(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(&quot;Today's date is &quot; + sdToday); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The GetTodaysDate project also includes the previous <i>SuperDate</i>
files, ExtendedDate.cs, and Date.cs. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In SuperDate3.cs, you can alternatively define <i>SystemTime</i>
as a structure rather than a class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>struct SystemTime </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In that case, you want to pass a reference to the structure
to the <i>GetSystemTime</i> function: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>static extern void GetSystemTime(out SystemTime st); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Notice the use of the <i>out</i> keyword, which means that
a reference is passed to the function, but the object doesnt have to be
initialized first. The first two statements of <i>Today</i> could then be: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>SystemTime systime; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>GetSystemTime(out systime); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you need help defining signatures for Win32 structures
and function calls for use with <i>PInvoke</i>, youll be pleased to know that
theres a Wiki that contains much useful information: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.8pt;
margin-left:35.75pt;line-height:107%'><a href="http://www.pinvoke.net/"><i><span
style='color:blue'>http://www.pinvoke.net</span></i></a><a
href="http://www.pinvoke.net/"><i><span style='color:black;text-decoration:
none'> </span></i></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now that youve seen how you can implement your own class
to store dates, lets examine how the designers of the .NET Framework did it. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-left:.6pt'><a name="_Toc369937">Chapter 23. Dates and Times </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Throughout the .NET Framework, a particular moment in time
is represented by an object of type <i>DateTime</i>, a structure defined in the
<i>System</i> namespace. You generally create an object of type <i>DateTime</i>
in one of two ways. You can use one of the constructors of <i>DateTime</i> to
create an object representing a particular date and time, or you can use one of
three properties (<i>Now</i>, <i>UtcNow</i>, and <i>Today</i>) to create a <i>DateTime</i>
object representing the current time or date. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Heres one of the <i>DateTime</i> constructors: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dt = new DateTime(2007, 8, 29, 15, 30, 0); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The six arguments of the constructor are the year, month,
date, hour, minute, and second. This constructor specifies a time and date of
3:30 PM on August 29, 2007.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>DateTime</i> constructors are also defined to specify
just the year, month, and day, or to include milliseconds along with the time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The year argument can range from 1 through 9999, the month
can range from 1 through 12, the day can range from 1 to 31, the hour can range
from 0 through 23, the minute and second arguments can range from 0 through 59,
and the milliseconds argument can range from 0 through 999. Anything outside
these ranges raises an <i>ArgumentOutOfRangeException</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>DateTime</i> structure defines two static read-only
fields of type <i>DateTime</i> named <i>MinValue</i> (representing midnight on
January 1 in the year 1) and <i>MaxValue</i> (one millisecond prior to midnight
on January 1 in the year 10,000). If you create a <i>DateTime</i> object with a
parameterless constructor, it will represent a date and time equal to <i>DateTime.MinValue</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>DateTime</i> constructor also throws an exception if
the combination of year, month, and day arguments isnt consistent. A month
argument of 2 and a day of 29 is acceptable only for a leap year. The <i>DateTime</i>
structure uses leap year rules associated with the Gregorian calendar, which
was instituted by Pope Gregory XIII in 1582 and eventually adopted worldwide in
the years and centuries that followed. In the Gregorian calendar, a year is a
leap year if it is divisible by 4 but not divisible by 100 unless it is
divisible by 400. The year 1900 was not a leap year, but the year 2000 was.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The calendar in effect prior to the adaptation of the
Gregorian calendar is now known as the Julian calendar, which was introduced
during the reign of Julius Caesar. Leap years were celebrated every four years
without exception. The <i>DateTime</i> constructor observes Gregorian leap year
rules even for years preceding the invention of the Gregorian calendar. There
is no way to use <i>DateTime</i> to specify years prior to the Common Era. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>DateTime</i> defines nine get-only properties of type <i>Int32</i>
that indicate the date and time represented by the <i>DateTime</i> object.
These properties are named <i>Year</i>, <i>Month</i>, <i>Day</i>, <i>Hour</i>, <i>Minute</i>,
<i>Second</i>, <i>Millisecond</i>, <i>DayOfWeek</i> (with values ranging from 0
for Sunday through 6 for Saturday), and <i>DayOfYear</i> (which values ranging
from 1 through 366). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Let me emphasize that these properties are get-only. Once
created, a <i>DateTime</i> object is immutable.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'><i>DateTime</i> includes three static properties that let
you create an object of type <i>DateTime</i> representing the current date and
time. The <i>Now</i> property creates a <i>DateTime</i> object with the current
local date and time: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dtLocal = DateTime.Now; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The static <i>Today</i> property creates a <i>DateTime</i>
object with the current local date but with the <i>Hour</i>, <i>Minute</i>, <i>Second</i>,
and <i>Millisecond</i> properties all set to zero: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.6pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>DateTime dateToday =
DateTime.Today; </span>This code is equivalent to: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dateToday = DateTime.Now.Date; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Date</i> instance property creates a new <i>DateTime</i>
object based on an existing <i>DateTime</i> object but with the <i>Hour</i>, <i>Minute</i>,
<i>Second</i>, and <i>Millisecond</i> properties set to zero. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The static <i>UtcNow</i> property returns a <i>DateTime</i>
property for the current date and time in Coordinated Universal Time (UTC): </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dtUtc = DateTime.UtcNow; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you know, governments around the world have defined
numerous time zones so that local time is calculated as hour or half-hour
offsets from UTC, which is basically what was once called Greenwich Mean Time
(GMT). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Greenwich, England, has played an important role in the
evolution of time standards because it is the site of the Royal Greenwich
Observatory (RGO), which was founded in 1675 to develop techniques of
astronomical navigation for ships at sea. In the 1760s, the observatory began
publishing nautical almanacs that for convenience placed the prime meridian
(the line of 0° longitude) at Greenwich. This system of meridians was
eventually agreed upon as a world standard in 1884, although the French
continued to use Paris as the prime meridian until 1911. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Greenwich Mean Time began in 1833 when the observatory
started dropping a ball that was visible to ships in the Thames every day at
1:00 p.m. In the 1840s, GMT was declared the standard time for all of Great
Britain to replace various time zones that had developed over the years. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>These days, the use of the term Coordinated Universal Time
is considered more scientifically correct than Greenwich Mean Time. Coordinated
Universal Time is abbreviated UTC as something of a compromise between the
English word orderwhich would imply the abbreviation CUTand the French <i>Temps
Universel Coordonné</i>, which would have the abbreviation TUC. By
international agreement since 1972, UTC is the same all of the world.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The length of a UTC second is based on an atomic standard
rather than astronomical observations. Because the rotation of the earth has
been gradually slowing down, occasionally it is necessary to adjust UTC to keep
it in sync with astronomical solar time. This is done with the introduction of
leap seconds. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The system date and time that Windows maintains is UTC
rather than local time, and these days that time is usually set (and
automatically corrected) from an Internet time server. Windows also maintains a
current time zone, which the user sets from the Date/Time properties dialog
opened from the Control Panel or by double-clicking the time on the Windows
taskbar. Whenever a Windows application requires a local time, that time is
calculated from UTC based on the current time zone. Maintaining the system time
in UTC rather than local time (as was once the case) makes it easier for
Windows to adjust for changes in time zone or daylight saving time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Daylight saving time is that quaint custom observed in many
locales of changing the clocks twice a year. The principle behind it is simple:
As the summer solstice approaches, the sun is rising earlier and setting later,
so its no big deal to get out of bed a little earlier and enjoy even more sun
in the evening. Some countries observe daylight saving time and some dont and
those that observe it frequently begin and end it on different dates. Even
within some countries, notably the United State, daylight saving time is
implemented inconsistently, sometimes even within the same state. The Date/Time
properties dialog lets a user specify whether Windows is to automatically
adjust for daylight saving time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In .NET 1.X, there was nothing in the <i>DateTime</i>
structure that implied whether a particular <i>DateTime</i> object represented
UTC or local time. A program using this structure had to keep track of that
particular information itself. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In .NET 2.0, a new get-only property was introduced in the <i>DateTime</i>
structure named <i>Kind</i>, of type <i>DateTimeKind</i>, an enumeration that
contains the three members <i>Unspecified</i>, <i>Local</i>, and <i>Utc</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you create a <i>DateTime</i> object using the static <i>Now</i>
or <i>Today</i> properties, the <i>Kind</i> property will equal <i>DateTimeKind.Local</i>.
In contrast, the static <i>DateTime.UtcNow</i> property returns a <i>DateTime</i>
object with the <i>Kind</i> property set to <i>DateTimeKind.Utc</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>If you create a <i>DateTime</i> object using the
constructor shown above: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
1.65pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:.5in;line-height:115%'><span style='font-size:10.0pt;line-height:
115%;font-family:Consolas'>DateTime dt = new DateTime(2007, 8, 29, 15, 30, 0); </span>then
the <i>Kind</i> property is set to <i>DateTimeKind.Unspecified</i>. However,
.NET 2.0 also introduced additional constructors that let you specify the kind
of time: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dtLocal = new DateTime(2007, 8, 29, 15, 30,
0,                                 DateTimeKind.Local); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This <i>DateTime</i> object will have a <i>Kind</i>
property of <i>DateTimeKind.Local</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>DateTime</i> defines two instance methods named <i>ToLocalTime</i>
and </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'><i>ToUniversalTime</i> that convert between UTC and local
time. For example:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dtUtc = dtLocal.ToUniversalTime(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>ToLocalTime</i> and <i>ToUniversalTime</i> methods
examine the <i>Kind</i> property of the <i>DateTime</i> object and do not
perform a conversion if the time is already of the desired kind. For example,
consider the following code: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dtNew = dt.ToLocalTime(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If the <i>Kind</i> property of dt equals <i>DateTimeKind.Unspecified</i>
or <i>DateTimeKind.Utc</i>, then the <i>ToLocalTime</i> method returns a local
time under the assumption that <i>dt</i> represents a <i>Utc</i> time. However,
if the <i>Kind</i> property of <i>dt</i> is <i>DateTimeKind.Local</i>, then <i>ToLocalTime</i>
returns the same time as encoded in <i>dt</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Like all the properties of <i>DateTime</i>, the <i>Kind</i>
property is get-only. If you need to change the <i>Kind</i> property of a
particular <i>DateTime</i> object, you can use the static <i>SpecifyKind</i>
method to create a new <i>DateTime</i> object: </p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:11.15pt;
margin-bottom:13.8pt;margin-left:3.4pt;text-align:center;line-height:107%'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'>DateTime dtLocal
= DateTime.SpecifyKind(dt, DateTimeKind.Local);  </span></p>

<h4 style='margin-left:-.25pt'>Tick Counts </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another way of representing date and time is by a number of
100nanosecond clock ticks. Internally, the <i>DateTime</i> structure stores the
date and time as the number of ticks since midnight, January 1, of the Common
Era year 1. This value can be obtained from the get-only <i>Ticks</i> property
of type <i>long</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>For a <i>DateTime</i> object representing midnight on the
date January 1, 2001, the <i>Ticks</i> property returns the value
631,139,040,000,000,000. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>There are 10,000 ticks in a millisecond, 10,000,000 ticks
in a second, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>600,000,000 ticks in a minute, 36,000,000,000 ticks in an
hour, and 864,000,000,000 ticks in a day. That means that 730,485 days have
elapsed in those 2000 years, for an average of 365.2425 days per year. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The value of 365.2425 days per year is correct for the
Gregorian calendar. Most years have 365 days. An extra day every four year add
0.25 to the average days per year. Excluding an extra day every 100 years
lessens the average days per year by 0.01. Including an extra day every 400
years increases the average days per year by 0.0025. In other words, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>365 + ¼ - 1/100 + 1/400 = 365.2425 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.25pt;
margin-left:-.25pt'>The <i>DateTime</i> structure defines a constructor that
lets you create a <i>DateTime</i> object from the number of ticks since the
date 1/1/1. An additional constructor includes a <i>DateTimeKind</i> argument. </p>

<h4 style='margin-left:-.25pt'><i>DateTime</i> Calculations and <i>TimeSpan</i>
</h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>DateTime</i> structure contains a number of methods
and overloaded operators that let you perform calculations on dates and times.
The comparison operators (==, !=, &lt;, &gt;, &lt;=, and &gt;=) are all valid
for <i>DateTime</i> objects. Addition and subtraction are also supported.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you subtract one <i>DateTime</i> object from another,
the result is an object of type <i>TimeSpan</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>TimeSpan ts = dt1  dt2; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>TimeSpan</i> is another structure defined in the <i>System</i>
namespace that represents an elapsed time in units of 100-nanoseconds, which
are the same units as the <i>Ticks</i> property of <i>DateTime</i>. <i>TimeSpan</i>
also has a <i>Ticks</i> property, and a constructor that accepts an argument in
units of 100nanoseconds. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The <i>Ticks</i> properties in <i>DateTime</i> and <i>TimeSpan</i>
may seem similar, but its important to keep them distinct. The <i>Ticks</i>
property of <i>DateTime</i> is always the number of 100-nanosecond intervals
since January 1, 1 C.E. A <i>TimeSpan</i> object represents a period of elapsed
time, so the <i>Ticks</i> property of is the number of 100-nanoseconds between
two points in time. The following expression, which involves an implicit <i>TimeSpan</i>
object on the right side of the equality operator, always returns <i>true</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dt.Ticks == (dt  DateTime.MinValue).Ticks </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Ticks</i> property of a <i>TimeSpan</i> object can
be negative; the <i>Ticks</i> property of <i>DateTime</i> is always
non-negative.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>TimeSpan</i> defines several constructors that let you
specify a certain number of days, hours, minutes, seconds, and milliseconds.
For example, the following constructor returns a <i>TimeSpan</i> object
representing a duration of 40 days, 30 hours, 20 minutes, and 10 seconds: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>TimeSpan ts = new TimeSpan(40, 30, 20, 10); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>There are no TimeSpan constructors involving months or
years because months and years dont have a fixed number of days. The values in
the <i>TimeSpan</i> constructors indicate a certain number of days, a number of
hours, and so forth. They arent restricted like the values in the <i>DateTime</i>
constructors, and they can be negative. The following statement is perfectly
legal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>TimeSpan ts = new TimeSpan(4000, 3000, 2000, 1000); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>TimeSpan</i> defines ten get-only properties besides <i>Ticks</i>.
Regardless of the arguments passed to <i>TimeSpan</i> object, the <i>Days</i>
property is a whole number of days. The <i>Hours</i> property ranges from 0
through 23; the <i>Minutes</i> and <i>Seconds</i> properties range from 0
through 59, and the <i>Milliseconds</i> property ranges from 0 through 999. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>The remaining five <i>TimeSpan</i> properties are all of
type <i>double</i> and provide the <i>TimeSpan</i> object in whatever units you
want. The properties are named <i>TotalDays</i>, <i>TotalHours</i>, <i>TotalMinutes</i>,
<i>TotalSeconds</i>, and <i>TotalMilliseconds</i>. The values are calculated by
dividing the <i>Ticks</i> property by constant fields named <i>TicksPerDay</i>,
<i>TicksPerHour</i>, and so forth. </p>

<h4 style='margin-left:-.25pt'>Calendars Around the World </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Four <i>DateTime</i> constructors have arguments of type <i>Calendar</i>,
for example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new DateTime(year, month, day, cal); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The final argument is of type <i>Calendar</i> and indicates
how the <i>year</i>, <i>month</i>, and <i>day</i> arguments are to be
interpreted. Constructors without the <i>Calendar</i> argument are assumed to
refer to dates in the Gregorian calendar. These other constructors allow the
arguments to refer to dates in other calendars. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Calendar</i> is an abstract class defined in the <i>System.Globalization</i>
namespace, which also includes classes that derive from <i>Calendar</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Object </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     Calendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          EastAsianLunisolarCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          GregorianCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          HebrewCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          HijriCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          JapaneseCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          JulianCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          KoreanCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          PersianCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          TaiwanCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          ThaiBuddhistCalendar
</i></p>

<p class=MsoNormal style='margin-left:0in;text-indent:0in;line-height:103%'><span
style='font-size:11.0pt;line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          UmAlQuraCalendar
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:30.45pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>When you include a <i>Calendar</i> object as the last
argument to the <i>DateTime</i> constructor, different consistency rules are
applicable. For example, <span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>new DateTime(1900, 2, 29) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.35pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>generates an exception because 1900 isnt a leap year in the
Gregorian calendar. However, <span style='font-size:10.0pt;line-height:115%;
font-family:Consolas'>new DateTime(1900, 2, 29, new JulianCalendar()) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>doesnt cause an exception because in the Julian calendar
every year divisible by 4 is a leap year. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Moveover, if you actually create that <i>DateTime</i>
object using the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>JulianCalendar</i> object and then look at the
individual properties of the DateTime structure, youll find that <i>Month</i>
equals 3 (March) and Day equals 13. The <i>Year</i>, <i>Month</i>, and <i>Day</i>
properties of the <i>DateTime</i> structure always represent dates in the
Gregorian calendar. The constructor effectively converts a date in a particular
calendar into a tick count; the <i>DateTime</i> properties convert from that
tick count to dates in the Gregorian calendar. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>The original adoption of the Gregorian calendar caused the
date after October 4, 1582 to be October 15, 1582, effectively skipping 10
days. If you call <span style='font-size:10.0pt;line-height:115%;font-family:
Consolas'>new DateTime(1582, 10, 5, new JulianCalendar()) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>the resultant <i>Month</i> property of the <i>DateTime</i>
object will be 10 and the <i>Day</i> property will indeed by 15. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:137.6pt;margin-bottom:
1.45pt;margin-left:.5in;text-indent:-.5in;line-height:152%'>It gets more
interesting. Suppose you call <span style='font-size:10.0pt;line-height:152%;
font-family:Consolas'>new DateTime(5762, 5, 20, new HebrewCalendar()) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thats the 20<sup>th</sup> day in the month of Shevat in
the year 5762 of the Hebrew calendar. The resultant <i>DateTime</i> structure
has a <i>Year</i> property of 2002, and <i>Month</i> and <i>Day</i> properties
both equal to 2. Basically what you have here is a conversion from the Hebrew
calendar to the Gregorian calendar. When the last argument to the <i>DateTime</i>
constructor is a <i>HebrewCalendar</i> object, the <i>Month</i> argument can be
set to 13 in some years. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Similarly, you can specify a date in the Islamic calendar: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.35pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new DateTime(1422, 11, 20, new HijriCalendar()) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Thats the 20<sup>th</sup> day of the month of Dhul-Qadah
in the year 1422. Again, the resultant <i>DateTime</i> structure has a <i>Year</i>
property of 2002 and <i>Month</i> and <i>Day</i> properties both equal to 2. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>To convert from a Gregorian date to another calendar, you
need to create an instance of the particular calendar, for example, </p>

<p class=MsoNormal style='margin-top:0in;margin-right:132.1pt;margin-bottom:
.9pt;margin-left:-.75pt;text-align:justify;text-justify:inter-ideograph;
text-indent:35.5pt;line-height:119%'><span style='font-size:10.0pt;line-height:
119%;font-family:Consolas'>HebrewCalendar hebrewcal = new HebrewCalendar();
HijriCalendar hijrical = new HijriCalendar(); </span>Youll also need a <i>DateTime</i>
object: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dt = new DateTime(2002, 2, 2); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.8pt;
margin-left:-.25pt'>To convert this Gregorian date into a date in the Hebrew or
Islamic calendar, call the <i>GetYear</i>, <i>GetMonth</i>, and <i>GetDayOfMonth</i>
methods defined by <i>Calendar</i> and inherited by <i>HebrewCalendar</i> and <i>HijriCalendar</i>,
passing to them the <i>DateTime</i> object to be converted. For example, the
expression <span style='font-size:10.0pt;line-height:103%;font-family:Consolas'>hijrical.GetYear(dt)
</span></p>

<h4 style='margin-top:0in;margin-right:297.85pt;margin-bottom:0in;margin-left:
-.25pt;line-height:179%'><span style='font-size:12.0pt;line-height:179%;
font-family:"Bookman Old Style",serif;font-weight:normal'>returns 1422. </span>A
Readable Rendition </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Some of the most important methods in <i>DateTime</i> are
those that format the date and time into human-readable form. The <i>DateTime</i>
formatting includes the users preferred cultural settings, including
separators and month names and day-of-the-week names in the users language. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When displaying dates and times, you generally want
formatting to be culturally specific. However, sometimes thats undesirable.
Sometimes dates and times must be embedded in documents that must be viewed by
people in multiple cultures or merged with similar documents. In this case, a
program should use a consistent date and time format, perhaps in accordance
with some international standard. In the jargon of the .NET Framework, such
formats are said to be <i>culture-invariant</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>ToString</i> method define by <i>DateTime</i> has a
no-argument version, of course, but also overloads that accept a formatting
string, or an instance of a class that implements the <i>IFormatProvider</i>
interface, or both. For formatting <i>DateTime</i> objects, the appropriate
class that implements <i>IFormatProvider</i> is <i>DateTimeFormatInfo</i>,
which is in the <i>System.Globalization</i> namespace. <i>DateTimeFormatInfo</i>
has two static properties named <i>CurrentInfo</i> and <i>InvariantInfo</i>
that returns instances of <i>DateTimeFormatInfo</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.4pt;
margin-left:-.25pt'>The following program show combinations of formatting
strings and <i>DateTimeFormatInfo</i> objects to format the current date and
time. </p>

<h2 style='margin-top:0in;margin-right:62.3pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>DateAndTimeFormatting.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:62.3pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//------------------------------------------------------
// DateAndTimeFormatting.cs (c) 2006 by Charles Petzold
//------------------------------------------------------ using System; using
System.Globalization; </span></p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:281.1pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 21.05pt 0in 1.45pt;height:281.1pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  DateAndTimeFormatting </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  DateTime dt = DateTime.Now; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        ShowFormatting(DateTimeFormatInfo.InvariantInfo,
  &quot;InvariantInfo&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  ShowFormatting(DateTimeFormatInfo.CurrentInfo, &quot;CurrentInfo&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-align:justify;text-justify:inter-ideograph;text-indent:
  0in;line-height:99%'><span style='font-size:10.0pt;line-height:99%;
  font-family:Consolas'>    static void ShowFormatting(DateTimeFormatInfo
  format, string strLabel)     { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(strLabel); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(new string('-', strLabel.Length)); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:44.45pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        
  string[] strFormats = {&quot;d&quot;, &quot;D&quot;, &quot;f&quot;,
  &quot;F&quot;, &quot;g&quot;, &quot;G&quot;,
  &quot;m&quot;,                                 &quot;r&quot;, &quot;s&quot;,
  &quot;t&quot;, &quot;T&quot;, &quot;u&quot;, &quot;U&quot;, &quot;y&quot; }; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:126.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         foreach (string
  strFormat in strFormats)             Console.WriteLine(&quot;{0}: {1}&quot;,
  strFormat, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                             
  dt.ToString(strFormat, format)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Notice the <i>strFormats</i> array in the <i>ShowFormatting</i>
method. That array contains the formatting strings you can use in the <i>ToString</i>
method. (You can use those same letters in the placeholders in the formatting
string of <i>Console.WriteLine</i>.) The program first shows the formatting for
<i>DateTimeFormatInfo.InvariantInfo</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:308.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>InvariantInfo ------------- d: 12/02/2006 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:187.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>D: Saturday, 02 December 2006 f: Saturday, 02 December
2006 16:48 F: Saturday, 02 December 2006 16:48:43 g: 12/02/2006 16:48 G:
12/02/2006 16:48:43 m: December 02 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:220.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>r: Sat, 02 Dec 2006 16:48:43 GMT s: 2006-12-02T16:48:43
t: 16:48 T: 16:48:43 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>u: 2006-12-02 16:48:43Z </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:170.6pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>U: Saturday, 02 December 2006 21:48:43 y: 2006 December </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>I have my regional settings set for American English, so
the following formatting is shown for <i>DateTimeFormatInfo.CurrentInfo</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:319.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>CurrentInfo ----------- d: 12/2/2006 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>D: Saturday, December 02, 2006 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:170.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>f: Saturday, December 02, 2006 4:48 PM F: Saturday,
December 02, 2006 4:48:43 PM </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:269.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>g: 12/2/2006 4:48 PM G: 12/2/2006 4:48:43 PM m: December
02 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:220.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>r: Sat, 02 Dec 2006 16:48:43 GMT s: 2006-12-02T16:48:43
t: 4:48 PM T: 4:48:43 PM u: 2006-12-02 16:48:43Z </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:154.05pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>U: Saturday, December 02, 2006 9:48:43 PM y: December,
2006 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The letters are mnemonics of sorts: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=174
 style='width:130.35pt;margin-left:150.85pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>Letter </b></p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>Mnemonic </b></p>
  </td>
 </tr>
 <tr style='height:20.55pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>d </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Date </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>f </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Full </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>g </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>General
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>m </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>month/day </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>r </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>RFC </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>s </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>sortable
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>t </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>time </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>u </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>universal
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=65 valign=top style='width:48.95pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>y </p>
  </td>
  <td width=109 valign=top style='width:81.4pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'>year/month </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When the uppercase and lowercase letters produce different
result (such as <i>d</i> and <i>D</i>)the uppercase letter produces a longer
string. For the <i>r</i>, <i>R</i>, <i>s</i>, or <i>u</i> formatting strings,
the results are the same regardless of the second argument to <i>ToString</i>.
(You can also define your own formatting.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>ToString</i> method with a <i>null</i> or an absent
formatting string argument is the same as <i>G</i>. <i>ToString</i> without a <i>DateTimeFormatInfo</i>
argument is the same as <i>DateTimeFormatInfo.CurrentInfo</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>Using <i>r</i> or <i>R</i> results in the RFC 1123 format.
(RFC stands for Request for Comments. RFCs are documentations of Internet
standards and are obtainable from many sources, including the Web site of the
Internet Engineering Task Force, <a href="http://www.ietf.org/"><i><span
style='color:blue'>http://www.ietf.org</span></i></a><a
href="http://www.ietf.org/"><span style='color:black;text-decoration:none'>.</span></a>)
The <i>s</i> format is known as </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>ISO 8601 format, and is intended to be universal and easily
sortable. The <i>T</i> in the center is known as a <i>time designator</i> and
separates the date and time. Dates that begin with months or days of the month
cant be sorted quite as easily. The <i>u</i> format is similar to <i>s</i>
except that the time designator is missing and the string ends with a <i>Z</i>.
In military and radio circles, UTC is sometimes known as <i>Zulu time</i>, Zulu
being used to represent <i>Z</i>, and <i>Z</i> referring to zero degrees of
longitude. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>U</i> format option performs a conversion to UTC if
the <i>DateTime</i> value is a local time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.85pt;
margin-left:-.25pt'>The <i>DateTime</i> structure has four other convenient
culture-specific formatting methods: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:54.4pt;margin-bottom:
0in;margin-left:.5in;text-indent:-.25in;line-height:163%'><span
style='font-family:"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span><i>ToShortDateString</i> is equivalent to <i>d</i> formatting. <span
style='font-family:"Courier New"'>o</span><span style='font-family:"Arial",sans-serif'>
</span><i>ToLongDateString</i> is equivalent to <i>D</i> formatting. <span
style='font-family:"Courier New"'>o</span><span style='font-family:"Arial",sans-serif'>
</span><i>ToShortTimeString</i> is equivalent to <i>t</i> formatting. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:54.4pt;margin-bottom:
5.5pt;margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>ToLongTimeString</i>
is equivalent to <i>T</i> formatting. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now go into your Regional Options dialog and change the
locale to France. The <i>InvariantInfo</i> formatting is the same, but the <i>CurrentInfo</i>
results are demonstrably different: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:319.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>CurrentInfo ----------- d: 02/12/2006 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:209.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>D: samedi 2 décembre 2006 f: samedi 2 décembre 2006 17:07
F: samedi 2 décembre 2006 17:07:24 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:275.0pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>g: 02/12/2006 17:07 G: 02/12/2006 17:07:24 m: 2 décembre </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:203.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>r: Sat, 02 Dec 2006 17:07:24 GMT s: 2006-12-02T17:07:24 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>t: 17:07 T: 17:07:24 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>u: 2006-12-02 17:07:24Z </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:192.6pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>U: samedi 2 décembre 2006 22:07:24 y: décembre 2006 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369938">Chapter 24. Events and Delegates </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Suppose you have a scenario with two classes with the names
of <i>A</i> and <i>B</i>. Class <i>A</i> has the job of getting information and
delivering it to class <i>B</i>. How do you do it? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>One approach might be to have class <i>B</i> periodically
check a Boolean property in class <i>A</i> named <i>GotNewInformation</i>. If <i>GotNewInformation</i>
is true, then class <i>B</i> can call the method in <i>A</i> named <i>GetInformation</i>.
This is a technique known as <i>polling</i>, and its considered rather
wasteful in terms of resources. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A better approach would be for class <i>A</i> to call a
particular method in <i>B</i>, named perhaps <i>TheNewStuffIsReady</i>. But
that means that class <i>B</i> is required to have a method named <i>TheNewStuffIsReady</i>
whenever it needs to interact with class <i>A</i>. Perhaps there are other
activities <i>B</i> needs to do with <i>A</i> that dont involve this transfer
of information. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A mechanism for dealing with scenarios such as these is
built into .NET and is known as the <i>event</i>. The event is a type-safe
mechanism essentially for defining call-back functions. It is considered
type-safe because the call-back function must have a specific signature defined
by a <i>delegate</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this scenario, class <i>A</i> would define an event, and
class <i>B</i> would define a method to function as an event handler. Class <i>B</i>
registers this event handler with class <i>A</i>s event, and then class <i>A</i>
effectively calls that event handler whenever it has new information that might
be of interest to class <i>B</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Lets look at the different parts: Class <i>A</i> would
define a public <i>event</i> member as simply as this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public event EventHandler InformationAlert; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The name of this event is <i>InformationAlert</i>. It is
associated with a delegate named <i>EventHandler</i>, which is defined in the
.NET Framework. Look in the <i>System</i> namespace, and youll see <i>EventHandler</i>
defined like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public delegate void EventHandler(Object sender, EventArgs e); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>EventArgs</i> is a class defined in the <i>System</i>
namespace, and it is the base class for many derived classes that are used in
connection with events. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The delegate defines a signature for an event handler that
is associated with the <i>InformationAlert</i> event. Class <i>B</i> declares a
method to function as an event handler like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>void MyInformationAlertHandler(object sender, EventArgs e) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    // process the event </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Class <i>B</i> can name this event handler whatever it
wants, but it must have the same return type (<i>void</i>, in this case) and
the same parameters as the <i>EventHandler</i> delegate. Although naming the <i>EventArgs</i>
parameter <i>e</i> has become common, you can really name it whatever you want.
(I prefer <i>args</i> myself.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Now <i>B</i> has a method that is suitable for handling
event notifications from <i>A</i>. Class <i>B</i> must also register the event
handler with <i>A</i>. Ill assume here that <i>a</i> is an instance of the <i>A</i>
class created by class <i>B</i>. <i>B</i> &#8213;installs&#8214; or
&#8213;registers&#8214; the event handler with a special syntax like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>a.InformationAlert += new EventHandler(MyInformationAlertHandler); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The instance of the class that defined the event is
followed by a period and the event name, and then the compound assignment
operator, followed by the delegate constructor and the name of the event
handler. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now, whenever class <i>A</i> has new information, it
&#8213;raises&#8214; or &#8213;fires&#8214; the <i>InformationAlert</i> event
with code like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (InformationAlert != null) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    InformationAlert(this, new EventArgs()); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>InformationAlert</i> will be <i>null</i> if there arent
any event handlers registered with this event. If there are registered event
handlers (and there could be more than one), class <i>A</i> effectively calls
all those event handlers with the statement that follows. The two parameters
that follow <i>InformationAlert</i> become the two parameters to the event
handlers. The first is the object firing the event, and the second is an
instance of type <i>EventArgs</i>. (If more information must be delivered to
the event handler, then a class that derives from <i>EventArgs</i> would be
used instead, and a different delegate would be associated with the event.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When class <i>A</i> fires the <i>InformationAlert</i>
event, then the <i>MyInformationAlertHandler</i> method in class <i>B</i> is
called. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>At any time, class <i>B</i> can unregister the event
handler using code like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>a.InformationAlert -= new EventHandler(MyInformationAlertHandler); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice this time that the compound assignment operator is
for subtraction. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>In .NET 2.0, the syntax for registering and unregistering
event handlers was simplified somewhat. Rather than registering an event
handler like this </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>a.InformationAlert += new EventHandler(MyInformationAlertHandler); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>you can now just use the method name: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>a.InformationAlert += MyInformationAlertHandler; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, <i>MyInformationAlertHandler</i> must still be
defined in accordance with the <i>EventHandler</i> delegate. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Events arent used much in character-mode programming, but
theyre used extensively in graphical interfaces. The keyboard, the mouse, all
types of controls and menuseverything generates events, and event handling is
one of the necessary skills in programming for graphical interfaces. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Regardless, lets try to put an event handler in a
character-mode program. The class Ive chosen is the <i>Timer</i> class from
the <i>System.Timers</i> namespace. The <i>Timer</i> class serves to
periodically notify a class when a period time of elapsed. It does this with an
event handler defined like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public event ElapsedEventHandler Elapsed; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The event is named <i>Elapsed</i>, and it is associated
with a delegate named <i>ElapsedEventHandler</i> and defined in the <i>System.Timers</i>
namespace like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.8pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public delegate void ElapsedEventHandler(Object
sender,                                           ElapsedEventArgs e) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>ElapsedEventArgs</i> class is also defined in <i>System.Timers</i>,
and defines a <i>SignalTime</i> property, which is the <i>DateTime</i> object
when the event was raised. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a program that creates an object of type <i>Timer</i>
and installs an event handler to be notified every second. This program
requires a reference to the System.dll assembly. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:227.3pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:227.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SetTimer.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//-----------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:191.7pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// SetTimer.cs (c) 2006 by
  Charles Petzold //----------------------------------------- using System;
  using System.Timers; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class SetTimer
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:207.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        Timer tmr = new
  Timer();         tmr.Elapsed += TimerTickHandler;         tmr.Interval =
  1000;         tmr.Enabled = true; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:196.8pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>        tmr.Elapsed -=
  TimerTickHandler;     } </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    static void TimerTickHandler(object
sender, ElapsedEventArgs args) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        Console.Write(&quot;\r{0}
&quot;, args.SignalTime.ToLongTimeString()); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.65pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Main</i> method creates an object of type <i>Timer</i>,
and installs a handler for the <i>Elapsed</i> event. The <i>TimerTickHandler</i>
method is defined in accordance with the <i>ElapsedEventHandler</i> delegate.
The <i>Interval</i> is set for 1 second, and the timer is enabled. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>At this point, <i>TimerTickHandler</i> is called every
second by the <i>Timer</i> object. If this method needed to, it could get
access to the <i>Timer</i> object raising the event by casting the <i>sender</i>
parameter to a <i>Timer</i> object. But this handler just uses the <i>SignalTime</i>
property of the <i>ElapsedEventArgs</i> parameter to display the current time.
The use of a carriage return makes the new time overwrite the old time. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When the user presses the Enter key, the <i>Console.ReadLine</i>
method returns and the program terminates. Uninstalling the event handler is
not strictly necessary here, but it cant hurt. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Beginning in .NET 2.0, it is possible to define anonymous
methods for use with events. Rather than declaring a method for the event
handler, you put the event handling code in the statement where you normally
install the handler. Heres a demonstration of this technique. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:262.35pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:262.35pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>SetTimerWithAnonymousMethod.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//------------------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:87.2pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//
  SetTimerWithAnonymousMethod.cs (c) 2006 by Charles Petzold //------------------------------------------------------------
  using System; using System.Timers; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class SetTimer
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        Timer
  tmr = new Timer(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:37.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        tmr.Elapsed +=
  delegate(object sender, ElapsedEventArgs args)         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.Write(&quot;\r{0} &quot;, args.SignalTime.ToLongTimeString()); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        }; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:207.85pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        tmr.Interval =
  1000;         tmr.Enabled = true; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The compound assignment statement is followed by the
keyword <i>delegate</i> and the parameters of the delegate in parentheses.
Curly brackets delimit the body of the anonymous method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If you dont need the parameters to the event handler, you
can simplify this even more: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>tmr.Elapsed += delegate </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.1pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    Console.Write(&quot;\r{0} &quot;,
DateTime.Now.ToLongTimeString()); }; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now the code uses the static <i>DateTime.Now</i> property
to obtain the current time rather than the <i>SignalTime</i> property of <i>ElapsedEventArgs</i>,
so the two parameters to the method can be eliminated. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although anonymous methods are sometimes convenient,
theyre not the most aesthetically attractive feature of the C# language and
can be tricky to use when they access local variables of the method in which
they appear. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:.05pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369939">Chapter 25. Files and Streams </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>System.IO</i> namespace provides essential support
for file input and output of both binary files and text files. However, if
those text files you need to read and write are actually XML files, then youll
probably be happier using higher-level classes in the <i>System.Xml</i>
namespace. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For the C programmer whose main arsenal of file I/O tools
consists of library functions such as <i>fopen</i>, <i>fread</i>, <i>fwrite</i>,
and <i>fprintf</i>, the <i>System.IO</i> namespace can seem excessively
convoluted and complex. This chapter is intended to guide you through <i>System.IO</i>
so that you can get a sense of the important classes and the rationale for its
complexity. There are some shortcuts for reading entire files, but I wont show
them to you until the very end of the chapter. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This chapter takes a rather roundabout path through <i>System.IO</i>
that might not at first seem to be entirely rational, so let me summarize here:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The first file I/O class Ill describe is <i>FileStream</i>,
which lets you read and write bytes or arrays of bytes. This is the lowest
level file I/O youll probably want to perform. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Next Ill cover classes that read and write text files and
streams. These classes are <i>StreamReader</i> and <i>StreamWriter</i>, and
some related files.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Then Ill get back to binary files with <i>BinaryReader</i>
and <i>BinaryWriter</i>. I discuss these classes after the text I/O classes
because they incorporate reading and writing strings as well as other C# data
types. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Then its time to attack the file system and directories
with classes like <i>Environment</i>, <i>Path</i>, <i>DirectoryInfo</i>, <i>Directory</i>,
<i>FileInfo</i>, and <i>File</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>Finally, Ill show how the <i>File</i> class offers some
higher-level methods for working with whole files. </p>

<h4 style='margin-left:-.25pt'>Overview of Streams </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The .NET Framework distinguishes between files and streams.
A <i>file</i> is a collection of data stored on a disk with a name and (often)
a directory path. When you open a file for reading or writing, it becomes a <i>stream</i>.
A stream is something on which you can perform read and write operations. But
streams encompass more than just open disk files. Data coming over a network is
a stream, and you can also create a stream in memory. In a console application,
keyboard input and text output are also streams. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Stream</i> is an abstract class defined in the <i>System.IO</i>
namespace. This class hierarchy shows the most important classes that derive
from <i>Stream</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Object </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     MarshalByRefObject
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.75pt;
margin-left:0in;text-indent:0in'><span style='font-size:11.0pt;line-height:
103%;font-family:"Calibri",sans-serif'>                </span><i>          Stream</i>
(abstract)<i> </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               BufferedStream
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               FileStream
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               MemoryStream
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:5.4pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               NetworkStream
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In general, a stream is an object that lets you read bytes,
write bytes, and seek to a particular location. However, not all streams let
you perform all these operations. The <i>Stream</i> class defines four bool
properties named <i>CanRead</i>, <i>CanWrite</i>, <i>CanSeek</i>, and <i>CanTimeout</i>. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>CanRead</i> is <i>true</i>, you can call <i>ReadByte</i>
on the <i>Stream</i> object to read a single byte, or <i>Read</i> to read
multiple bytes into a <i>byte</i> array. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>CanWrite</i> is <i>true</i>, you can call <i>WriteByte</i>
to write a single byte to the stream, or <i>Write</i> to write multiple bytes
from a <i>byte</i> array. The <i>Flush</i> method writes any buffered output to
the stream. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>CanSeek</i> is <i>true</i> (which is the case for a
stream based on a file) you can use the <i>Length</i> property to obtain the
length of the stream, and you can use the <i>Position</i> property to obtain
the current position or set the current position. Both properties are of type <i>long</i>.
You can also use the <i>Seek</i> method with an offset combined with a member
of the <i>SeekOrigin</i> enumeration (<i>Begin</i>, <i>Current</i>, or <i>End</i>).
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If both <i>CanWrite</i> and <i>CanSeek</i> are <i>true</i>,
you can call the <i>SetLength</i> method to set a new length of the stream. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>CanTimeout</i> is <i>true</i> (which can be the case
for a network stream), then the <i>ReadTimeout</i> and <i>WriteTimeout</i>
properties let you obtain or specify the timeout values. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can use the <i>BeginRead</i>, <i>EndRead</i>, <i>BeginWrite</i>,
and <i>EndWrite</i> methods to read or write the stream asynchronously. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.15pt;
margin-left:-.25pt'>The <i>Close</i> method closes the stream. </p>

<h5><span style='font-style:normal'>The </span>FileStream<span
style='font-style:normal'> Class </span></h5>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>FileStream</i> class derives from <i>Stream</i> and
performs the most rudimentary file I/O. If you want to restrict yourself to
learning just one class in the <i>System.IO</i> namespace, this is the one
youll need. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To open an existing file, or create a new file, you create
an object of type <i>FileStream</i> using one of the constructors that begins
with a <i>string</i> argument indicating the filename. Other constructors let
you open files based on operating system file handles; these are useful for
interfacing with existing code. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>For pure .NET programs, however, the simplest constructor
requires two arguments, which results in opening a file for both reading and
writing. The first argument is the filename, and the second argument is a
member of the <i>FileMode</i> enumeration: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=591
 style='width:442.9pt;margin-left:-5.4pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Member
  </b></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>Value </b></p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Caveats
  </b></p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.CreateNew
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>1 </p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Fails
  if file exists. </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.Create
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>2 </p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Delete
  file contents if file already exists </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.Open
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>3 </p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Fails
  if file does not exist </p>
  </td>
 </tr>
 <tr style='height:20.55pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><i>FileMode.OpenOrCreate </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>4 </p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.55pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Creates
  new file if file does not exist </p>
  </td>
 </tr>
 <tr style='height:34.7pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.Truncate
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>5 </p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Fails
  if file does not exist; deletes contents of file </p>
  </td>
 </tr>
 <tr style='height:48.85pt'>
  <td width=197 valign=top style='width:148.1pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:48.85pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.Append
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:48.85pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>6 </p>
  </td>
  <td width=332 valign=top style='width:249.3pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:48.85pt'>
  <p class=MsoNormal style='margin-top:0in;margin-right:.05pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'>Fails if file is opened
  for reading; creates new file if file does not exist; seeks to end of file </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The constructor fails by raising an exception such as <i>IOException</i>
or <i>FileNotFoundException</i>. Almost always you should call the <i>FileStream</i>
constructor in a <i>try</i> block to gracefully recover from any problems
regarding the presumed existence or non-existence of the file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>In addition to the required two constructor arguments, you
can supply a third argument, which is a member of the <i>FileAccess</i>
enumeration: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=591
 style='width:442.9pt;margin-left:-5.4pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=180 valign=top style='width:134.65pt;border:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Member
  </b></p>
  </td>
  <td width=60 valign=top style='width:45.35pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>Value </b></p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Description
  </b></p>
  </td>
 </tr>
 <tr style='height:48.7pt'>
  <td width=180 valign=top style='width:134.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:48.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileAccess.Read
  </i></p>
  </td>
  <td width=60 valign=top style='width:45.35pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:48.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>1 </p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:48.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Fails
  for <i>FileMode.CreateNew</i>, </p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.Create</i>,
  <i>FileMode.Truncate</i>, or </p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileMode.Append</i>
  </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=180 valign=top style='width:134.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileAccess.Write
  </i></p>
  </td>
  <td width=60 valign=top style='width:45.35pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>2 </p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Fails
  if file is read-only </p>
  </td>
 </tr>
 <tr style='height:34.7pt'>
  <td width=180 valign=top style='width:134.65pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.3pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><i>FileAccess.ReadWrite </i></p>
  </td>
  <td width=60 valign=top style='width:45.35pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>3 </p>
  </td>
  <td width=350 valign=top style='width:262.85pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.3pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Fails
  for <i>FileMode.Append</i> or if file is readonly </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Theres only one case where a <i>FileAccess</i> argument is
required: when you open a file with <i>FileMode.Append</i>, the constructor
fails if the file is opened for reading. Because files are opened for reading
and writing by default, the following constructor always fails: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new FileStream(strFileName, FileMode.Append) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>To use <i>FileMode.Append</i>, you must include an argument
of <i>FileAccess.Write</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new FileStream(strFileName, FileMode.Append, FileAccess.Write) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Unless you specify a <i>FileShare</i> argument, the file is
open for exclusive use by your process. No other process (or the same process)
can open the same file. Moreover, if any other process already has the file
open and you dont specify a <i>FileShare</i> argument, the <i>FileStream</i>
constructor will fail. The <i>FileShare</i> argument lets you be more specific
about the sharing: </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=591
 style='width:442.9pt;margin-left:-5.4pt;border-collapse:collapse'>
 <tr style='height:20.65pt'>
  <td width=172 valign=top style='width:129.15pt;border:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Member
  </b></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><b>Value </b></p>
  </td>
  <td width=358 valign=top style='width:268.25pt;border:solid black 1.0pt;
  border-left:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b>Description
  </b></p>
  </td>
 </tr>
 <tr style='height:34.7pt'>
  <td width=172 valign=top style='width:129.15pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileShare.None
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>0 </p>
  </td>
  <td width=358 valign=top style='width:268.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:34.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Allow
  other processes no access to the file; default </p>
  </td>
 </tr>
 <tr style='height:20.5pt'>
  <td width=172 valign=top style='width:129.15pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileShare.Read
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>1 </p>
  </td>
  <td width=358 valign=top style='width:268.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Allow
  other processes to read the file </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=172 valign=top style='width:129.15pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><i>FileShare.Write
  </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>2 </p>
  </td>
  <td width=358 valign=top style='width:268.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Allow
  other processes to write to the file </p>
  </td>
 </tr>
 <tr style='height:20.65pt'>
  <td width=172 valign=top style='width:129.15pt;border:solid black 1.0pt;
  border-top:none;padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:107%'><i>FileShare.ReadWrite </i></p>
  </td>
  <td width=61 valign=top style='width:45.5pt;border-top:none;border-left:none;
  border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;padding:5.9pt 1.45pt 0in 5.4pt;
  height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>3 </p>
  </td>
  <td width=358 valign=top style='width:268.25pt;border-top:none;border-left:
  none;border-bottom:solid black 1.0pt;border-right:solid black 1.0pt;
  padding:5.9pt 1.45pt 0in 5.4pt;height:20.65pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>Allow
  other processes full access to the file </p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When you only need to read from a file, its common to
allow other processes to read from it as well; in other words, <i>FileAccess.Read</i>
should usually be accompanied by <i>FileShare.Read</i>. This courtesy goes both
ways: if another process has a file open with <i>FileAccess.Read</i> and <i>FileShare.Read</i>,
your process wont be able to open it unless you specify both flags as well.
The <i>FileStream</i> class defines <i>Lock</i> and <i>Unlock</i> methods for
accessing shared files. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Once you open a file using one of the <i>FileStream</i>
constructors, you have access to the properties and methods defined by the <i>Stream</i>
class that I described above. The <i>CanRead</i> and <i>CanWrite</i> properties
will depend on the <i>FileAccess</i> value you specified.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>CanSeek</i> property is always <i>true</i> for open
files, which means that the <i>Length</i> and <i>Position</i> properties are
valid. The <i>Length</i> property is readonly; the <i>Position</i> property is
read/write. Both properties are of type <i>long</i>, which means they allow
file sizes of up to 9 terabytes (9 × 10<sup>9</sup> bytes). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:33.15pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>You can set the <i>Position</i> property to seek to any point
in the file. For example, you can seek to the 100<sup>th</sup> byte in the file
<span style='font-size:10.0pt;line-height:115%;font-family:Consolas'>fs.Position
= 100; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:21.5pt;margin-bottom:
2.05pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>You can seek to
the end of the file (for appending, perhaps) <span style='font-size:10.0pt;
line-height:152%;font-family:Consolas'>fs.Position = fs.Length; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Seek</i> method is similar to the file-seeking
functions in C. The <i>SeekOrigin</i> enumeration (with values of <i>Begin</i>,
<i>Current</i>, and <i>End</i>) indicate where the offset argument is measured
from. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can read individual bytes with <i>ReadByte</i> or
multiple bytes into an array with <i>Read</i>. Both return <i>int</i> values,
but with different meanings: <i>ReadByte</i> normally returns the next byte
from the file cast to an <i>int</i> without sign extension. For example, the
bytes 0xFF becomes the integer 0x000000FF or 255. A return value of 1
indicates an attempt to read past the end of the file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The <i>Read</i> method requires an array of type <i>byte</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:137.6pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>byte[] buffer = new byte[1000]; fs.Read(buffer, 0,
buffer.Length); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The second argument is an offset into the buffer, and the
third argument is the number of bytes to read. <i>Read</i> returns the number
of bytes actually read, which for files is the same as the third argument to <i>Read</i>
unless its gotten to the end of the file. A return value of 0 indicates that
there are no more bytes to be read. For other types of streams, <i>Read</i> can
return a value less than the third argument, but always at least 1 unless the
entire stream has been read. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>WriteByte</i> and <i>Write</i> methods are similar. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Despite what may or may not happen as a result of garbage
collection on the <i>FileStream</i> object, you should always explicitly call
the <i>Close</i> method for any files you open. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'><i>FileStream</i> is an excellent choice for a traditional
hex-dump program. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:367.75pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:367.75pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>HexDump.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:148.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------
  // HexDump.cs (c) 2006 by Charles Petzold
  //---------------------------------------- using System; using System.IO; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class HexDump </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static int Main(string[] strArgs) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (strArgs.Length &gt; 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  foreach (string strFileName in strArgs) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  DumpFile(strFileName); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:302.5pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        }         else         {
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  string strFileName; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:302.45pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>             do
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:6.0pt;margin-bottom:
  0in;margin-left:0in;text-align:justify;text-justify:inter-ideograph;
  text-indent:0in;line-height:99%'><span style='font-size:10.0pt;line-height:
  99%;font-family:Consolas'>                Console.Write(&quot;Enter filename
  (or Enter to end): &quot;);                 strFileName =
  Console.ReadLine();                 if (strFileName.Length &gt; 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                   
  DumpFile(strFileName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  while (strFileName.Length &gt; 0); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  0; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  </td>
 </tr>
 <tr style='height:597.2pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:597.2pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    protected
  static void DumpFile(string strFileName) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  FileStream fs; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>         try         { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:10.0pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>            fs = new
  FileStream(strFileName, FileMode.Open,                                
  FileAccess.Read, FileShare.Read); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        catch
  (Exception exc) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:59.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  Console.WriteLine(&quot;HexDump: {0}&quot;, exc.Message);             return;
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(strFileName); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:235.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        DumpStream(fs);        
  fs.Close(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void DumpStream(Stream stream) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:224.55pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        byte[] buffer = new
  byte[16];         long addr = 0;         int count; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        while
  ((count = stream.Read(buffer, 0, 16)) &gt; 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.5pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  Console.WriteLine(ComposeLine(addr, buffer, count));             addr += 16; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:367.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        }     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  string ComposeLine(long addr, byte[] buffer, int count) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        string
  str = String.Format(&quot;{0:X4}-{1:X4}  &quot;, </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                           
  (uint)addr / 65536, (ushort)addr); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; 16; i++) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:251.95pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        {             str += (i
  &lt; count) ? </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:26.5pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>                          
  String.Format(&quot;{0:X2}&quot;, buffer[i]) : &quot;  &quot;;            
  str += (i == 7 &amp;&amp; count &gt; 7) ? &quot;-&quot; : &quot; &quot;; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        str +=
  &quot; &quot;; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; 16; i++) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:31.9pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>            char ch = (i &lt;
  count) ? Convert.ToChar(buffer[i]) : ' ';             str +=
  Char.IsControl(ch) ? &quot;.&quot; : ch.ToString(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        return
  str; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This program uses the version of <i>Main</i> that has a
single argument, which is an array of strings, each of which is a command-line
argument to the program. Unlike the <i>Main</i> function in C, the <i>Main</i>
method in C# doesnt include an argument count and also doesnt include the
program name among the arguments. Wildcards are not automatically expanded.
(Ill get to that job later in this chapter.) If there are no arguments, then
the program requests a filename. If youre running the program from Visual
Studio, then hexdump.exe will work as an argument. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Once HexDump successfully opens each file, the program uses
the <i>Read</i> method to read 16-byte chunks from the file, and then HexDumps
<i>ComposeLine</i> method displays them.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although <i>FileStream</i> is the most essential class in <i>System.IO</i>
for reading and writing files, for most cases it will prove to be inadequate.
The problem is that C# is not nearly as flexible as C in casting. For example,
a C programmer might read a series of bytes into an array, and then use
pointers into this array to cast them into other data types. You cant do this
in C#, and youd probably need to manually assemble other data types from their
constituent bytes.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>So, unless reading and writing arrays of bytes is entirely
satisfactory to you, you probably cant limit your knowledge of file I/O to the
<i>FileStream</i> class. Youll probably use <i>StreamReader</i> and <i>StreamWriter</i>
for reading and writing text files, and <i>BinaryReader</i> and <i>BinaryWriter</i>
for reading and writing binary files of types other than byte arrays. </p>

<h4 style='margin-left:-.25pt'>Text File I/O </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Certainly one important type of file is the text file,
which consists entirely of lines of text separated by end-of-line markers. The <i>System.IO</i>
namespace has specific classes to read and write text files. Heres the class
hierarchy: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Object </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     MarshalByRefObject
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.75pt;
margin-left:0in;text-indent:0in'><span style='font-size:11.0pt;line-height:
103%;font-family:"Calibri",sans-serif'>                </span><i>          TextReader</i>
(abstract)<i> </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               StreamReader
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               StringReader
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.75pt;
margin-left:0in;text-indent:0in'><span style='font-size:11.0pt;line-height:
103%;font-family:"Calibri",sans-serif'>                </span><i>          TextWriter</i>
(abstract)<i> </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               StreamWriter
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               StringWriter
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:5.45pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Although these classes are not descended from <i>Stream</i>,
they certainly make use of the <i>Stream</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The two classes Im going to focus on here are <i>StreamReader</i>
and <i>StreamWriter</i>, which are designed for reading and writing text files
or text streams. The two other non-abstract classes are <i>StringReader</i> and
<i>StringWriter</i>, which are not strictly file I/O classes, but use similar
methods to read to and write from strings. Ill discuss these classes towards
the end of the next chapter. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Text may seem to be a very simple form of data storage, but
in recent years text has assumed a layer of complexity as a result of the
increased use of Unicode. Although the C# <i>char</i> and <i>string</i> data
types store text as Unicode characters, in most cases you probably do <i>not</i>
want to write text as 16-bit characters, particularly if programs reading the
files are expecting to encounter ASCII or one of the more efficient encodings
of Unicode. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>Fortunately, the <i>StreamWriter</i> class lets you have
control over how the Unicode strings in your C# program are converted for
storage in a file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You assert this control via classes defined in the <i>System.Text</i>
namespace. Similarly, <i>StreamReader</i> lets your program read text files in
various formats and convert the text from the files to Unicode strings in your
program. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Lets look at <i>StreamWriter</i> first. You use this class
to write to new or existing text files. <i>StreamWriter</i> has four
constructors that let you specify a filename: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:11.75pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>new StreamWriter(string filename) new StreamWriter(string
filename, bool append) new StreamWriter(string filename, bool append, Encoding
enc) new StreamWriter(string filename, bool append, Encoding enc, int size) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>These constructors open a file for writing, probably using
a <i>FileStream</i> constructor. By default, if the file exists its contents
will be destroyed. Set the second argument to <i>true</i> to avoid that. The <i>size</i>
argument is a buffer size. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Three other <i>StreamWriter</i> constructors use an
existing <i>Stream</i> object: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:104.6pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>new StreamWriter(Stream strm) new StreamWriter(Stream
strm, Encoding enc) new StreamWriter(Stream strm, Encoding enc, int size) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you use a constructor without an <i>Encoding</i>
argument, the resultant <i>StreamWriter</i> object will not store strings to
the file in a Unicode format with two bytes per character. Nor will it convert
your strings to ASCII. Instead, the <i>StreamWriter</i> uses a popular encoding
format known as UTF-8. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>If you want to specify an <i>Encoding</i> argument, you
need an object of type <i>Encoding</i>, which is a class defined in the <i>System.Text</i>
namespace. Its easiest (and in most cases, sufficient) to use one of the
static properties of the <i>Encoding</i> class to obtain this object: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.Default </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.Unicode </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.BigEndianUnicode </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.UTF8 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.UTF7 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.ASCII </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Encoding</i> argument to <i>StreamWriter</i> can
also be an instance of one of the classes in <i>System.Text</i> that derive
from <i>Encoding</i>, which are <i>ASCIIEncoding</i>, <i>UnicodeEncoding</i>, <i>UTF7Encoding</i>,
and <i>UTF8Encoding</i>. The constructors for these classes often have a few
options, so you may want to check them out if the static properties arent
doing precisely what you want. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When you specify an encoding of <i>Encoding.Unicode</i>,
each character is written to the file in two bytes with the least significant
byte first, in accordance with the so-called little-endian architecture of
Intel microprocessors. The file or stream begins with the bytes 0xFF and 0xFE,
which correspond to the Unicode character 0xFEFF, which is defined in the
Unicode standard as the byte order mark (BOM). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>An encoding of <i>Encoding.BigEndianUnicode</i> stores the
most significant bytes of each character first. The file or stream begins with
the bytes </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>0xFE and 0xFF, which also correspond to the Unicode
character 0xFEFF. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The Unicode character 0xFFFE is intentially undefined so
that applications can determine the byte ordering of a Unicode file from its
first two bytes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>(Readers unsure whether little-endian or big-endian
microprocessor architectures are superior should consult Jonathan Swifts <i>Gullivers
Travels</i>, Part I, Chapter 4.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>If you want to store strings in Unicode but you dont want
the byte order marks emitted, you can instead obtain an <i>Encoding</i>
argument for the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'><i>StreamWriter</i> constructor by creating an object of
type <i>UnicodeEncoding</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:74.9pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>new UnicodeEncoding(isBigEndian,
includeByteOrderMark) </span>Set the two Boolean arguments accordingly. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>UTF-8 is a character encoding designed to represent Unicode
characters without using any zero bytes (and hence, to be C and UNIX friendly).
UTF stands for <i>UCS Transformation Format</i>. UCS stands for <i>Universal
Character Set</i>, which is another name for ISO 10646, a characterencoding
standard with which Unicode is compatible. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In UTF-8, each Unicode character is translated to a
sequence of 1 to 6 non-zero bytes. Unicode characters in the ASCII range (0x000
through 0x007F) are translated directly to single-byte values. Thus, Unicode
strings that contain only ASCII are translated to ASCII files. UTF-8 is
documented in RFC 2279. (RFC stands for Request for Comments. RFCs are
documentations of Internet standards and are obtainable from many sources,
including the Web site of the Internet Engineering Task Force, <a
href="http://www.ietf.org/"><i><span style='color:blue'>http://www.ietf.org</span></i></a><a
href="http://www.ietf.org/"><span style='color:black;text-decoration:none'>.</span></a>)
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>When you specify <i>Encoding.UTF8</i>, the <i>StreamWriter</i>
class converts the </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.2pt;
margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;line-height:
115%'>Unicode text strings to UTF-8. In addition, it writes the three bytes
0xEF, 0xBB, and 0xBF to the beginning of the file or stream. These bytes are
the Unicode BOM converted to UTF-8. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you want to use UTF-8 encoding but you dont want those
three bytes emitted, dont use <i>Encoding.UTF8</i>. Use <i>Encoding.Default</i>
instead or one of the constructors that dont have an <i>Encoding</i> argument.
These options also provide UTF-8 encoding, but the three identification bytes
are not emitted. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:20.4pt;margin-bottom:
6.35pt;margin-left:-.25pt;text-align:justify;text-justify:inter-ideograph;
line-height:115%'>Alternatively, you can create an object of type <i>UTF8Encoding</i>
and pass that object as the argument to <i>StreamWriter</i>. Use <span
style='font-size:10.0pt;line-height:115%;font-family:Consolas'>new
UTF8Encoding() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:269.6pt;margin-bottom:
1.75pt;margin-left:.5in;text-indent:-.5in;line-height:153%'>or <span
style='font-size:10.0pt;line-height:153%;font-family:Consolas'>new
UTF8Encoding(false) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:197.35pt;margin-bottom:
1.8pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>to suppress the
three bytes, and use <span style='font-size:10.0pt;line-height:152%;font-family:
Consolas'>new UTF8Encoding(true) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>to emit the identification bytes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>UTF-7 is documented in RFC 2152. Unicode characters are
translated to a sequence of bytes that always have a high bit of 0. UTF-7 is
intended for environments in which only 7-bit values can be used, such as
e-mail. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Use <i>Encoding.UTF7</i> in the <i>StreamWriter</i>
constructor for UTF-7 encoding. No identification bytes are involved with
UTF-7. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>When you specify an encoding of <i>Encoding.ASCII</i>, the
resultant file or stream contains only ASCII characters, that is, characters in
the range 0x00 through 0x7F. Any Unicode character not in this range is
converted to a question mark (ASCII code 0x3F). This is the only encoding in
which data is actually lost. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Another important option is a text file that contains only
characters from the Windows ANSI character set (characters 0x00 through 0xFF)
in a one-byte-per-character format. You can't use <i>Encoding.ASCII</i> because
characters 0x80 through 0xFF will be replaced by question marks. And you can't
use <i>Encoding.UTF8</i> because characters 0x80 through 0xFF will be written
to the file as a pair of bytes. In such a case you need to obtain an <i>Encoding</i>
object using the static <i>GetEncoding</i> method of the <i>Encoding</i> class
with an argument of 1252 (the code page identifier for the Windows character
set). This is the argument you pass to the <i>StreamWriter</i> constructor:  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Encoding.GetEncoding(1252)  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>StreamWriter</i> class has a few handy properties.
The get-only <i>BaseStream</i> property returns either the <i>Stream</i> object
you used to create the <i>StreamWriter</i> object, or the <i>Stream</i> object
that the <i>StreamWriter</i> class created based on the filename you supplied.
If the base stream supports seeking, you can use that object to perform seeking
operations on the stream.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Encoding</i> property of <i>StreamWriter</i> is the <i>Encoding</i>
object you specified in the constructor, or a <i>UTF8Encoding</i> object
otherwise. Setting the <i>AutoFlush</i> property to <i>true</i> performs a
flush of the buffer after every write. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>NewLine</i> property is inherited from <i>TextWriter</i>.
By default, its the string &#8213;\r\n&#8214; (carriage return and line feed),
but you can change it to &#8213;\n&#8214; instead. Anything else, and the files
wont be properly readable by <i>StreamReader</i> objects. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The versatility of the <i>StreamWriter</i> class becomes
apparent when you look at the multitude of <i>Write</i> and <i>WriteLine</i>
methods that the class inherits from <i>TextWriter</i>. These methods parallel
those in the <i>Console</i> class but instead write text to a file. The <i>WriteLine</i>
methods end with writing a newline character; the <i>Write</i> methods do not.
Also included are versions with formatting strings. The <i>StreamWriter</i>
method also inherits <i>Flush</i> and <i>Close</i> methods from <i>TextWriter</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a little program that appends text to the same file
every time you run the program. Youll find the file in the same directory as
the StreamWriterDemo.exe file. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:227.2pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:227.2pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StreamWriterDemo.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:142.25pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------------
  // StreamWriterDemo.csn (c) 2006 by Charles Petzold
  //-------------------------------------------------- using System; using
  System.IO; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StreamWriterDemo </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         
  StreamWriter sw = new StreamWriter(&quot;StreamWriterDemo.txt&quot;, true); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
  margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:10.0pt;
  line-height:99%;font-family:Consolas'>          sw.WriteLine(&quot;You ran
  the StreamWriterDemo program on {0}&quot;,                       
  DateTime.Now); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         
  sw.Close(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice the <i>true</i> argument to the constructor,
indicating that the existing file will be appended. The Unicode string in the <i>WriteLine</i>
statement are converted to UTF-8, but the program doesnt use any non-ASCII
characters, so the file will appear to be ASCII.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>StreamReader</i> class is for reading text files or
streams. Here are file constructors for opening a text file for reading: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.6pt;margin-bottom:7.8pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>new StreamWriter(string filename); new StreamWriter(string filename,
Encoding enc); new StreamWriter(string filename, bool detect); new
StreamWriter(string filename, Encoding enc, bool detect); new
StreamWriter(string filename, Encoding enc, bool detect, int size); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>An additional set of five constructors create a <i>StreamReader</i>
object based on an existing stream: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:27.7pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>new StreamWriter(Stream strm); new StreamWriter(Stream
strm, Encoding enc); new StreamWriter(Stream strm, bool detect); new
StreamWriter(Stream strm, Encoding enc, bool detect); new StreamWriter(Stream
strm, Encoding enc, bool detect, int size); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you set the <i>detect</i> argument to <i>true</i>, the
constructor will attempt to determine the encoding of the file from the first
two or three bytes. Or you can specify the encoding explicitly. If you set <i>detect</i>
to <i>true</i> and also specify an encoding, the constructor will use the
specified encoding only if it cant detect the encoding of the file. (For
example, ASCII and UTF-7 cant be differentiated by inspection because they
dont begin with a BOM and both contain only bytes in the range 0x00 to 0x7F.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>StreamReader</i> class contains get-only properties <i>BaseStream</i>
and <i>CurrentEncoding</i>. The latter property may change between the time the
object is constructed and the first read operation performed on the file
because the object obtains knowledge of the identification bytes only after the
first read. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can read a text file character-by-character using the <i>Peek</i>
and <i>Read</i> methods defined by <i>StreamReader</i>. Both return the next
character in the stream or 1 if the end of the stream has been reached. You
must explicitly cast the return value to a <i>char</i> if the return value is
not 1. Or, you can read multiple characters into an array of type <i>char</i>.
This <i>Read</i> overload returns the number of characters read into the array
or 0 if the end of the stream has been reached. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>It is more common with text files to read entire lines
rather than individual characters. The <i>ReadLine</i> method reads the next
line up to the next end-of-line marker, and strips the end-of-line characters
from the resultant string. The method returns a zero-length character string if
the line of text contains only an end-of-line marker; the method returns <i>null</i>
if the end of the stream has been reached. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>ReadToEnd</i> returns everything from the current
position to the end of the file. The method returns <i>null</i> if the end of
the stream has been reached. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>Heres a program that asks you for a URI of an HTML file
(or other text file) on the Web. (An HTTP prefix must be included.) It obtains
a <i>Stream</i> for that file using some boilerplate code involving the <i>WebRequest</i>
and <i>WebResponse</i> classes. It then constructs a <i>StreamReader</i> object
from that stream, uses <i>ReadLine</i> to read each line, and then displays
each line using <i>Console.WriteLine</i> with a line number. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:590.25pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:590.25pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>HtmlDump.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:191.6pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>//-----------------------------------------
  // HtmlDump.cs (c) 2006 by Charles Petzold
  //----------------------------------------- using System; using System.IO;
  using System.Net; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class HtmlDump
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:174.9pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>       
  Console.Write(&quot;Enter a URI: &quot;);         string strUri =
  Console.ReadLine(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        if (strUri.Length ==
  0)             return; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  WebRequest webreq; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  WebResponse webres; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:5.1in;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>         try        
  { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:130.95pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>            webreq =
  WebRequest.Create(strUri);             webres = webreq.GetResponse(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        catch
  (Exception exc) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:53.95pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>           
  Console.WriteLine(&quot;HtmlDump: {0}&quot;, exc.Message);            
  return; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        if
  (webres.ContentType.Substring(0, 4) != &quot;text&quot;) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:9.9pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>           
  Console.WriteLine(&quot;HtmlDump: URI must be a text
  type.&quot;);             return; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:125.75pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        Stream stream =
  webres.GetResponseStream();         StreamReader strrdr = new
  StreamReader(stream);         string strLine;         int line = 1; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        while
  ((strLine = strrdr.ReadLine()) != null) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.WriteLine(&quot;{0:D5}: {1}&quot;, line++, strLine); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:257.35pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>        stream.Close();        
  return; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<h4 style='margin-left:-.25pt'> Binary File I/O </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Any file thats not a text file is a binary file. Ive
already discussed the <i>FileStream</i> class, which lets you read and write
files in bytes and byte arrays. But most binary files consist of other data
types. Unless you want to write code that constructs and deconstructs integers
and other types from their constituent bytes, youll want to take advantage of
the <i>BinaryReader</i> and <i>BinaryWriter</i> classes, both of which are
derived from <i>Object</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Object </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     BinaryReader
</i></p>

<p class=MsoNormal style='margin-left:0in;text-indent:0in;line-height:103%'><span
style='font-size:11.0pt;line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     BinaryWriter
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For both classes, the constructors require a <i>Stream</i>
object. (This is later available from the get-only <i>BaseStream</i> property.)
Optionally, you can also include an <i>Encoding</i> argument in the constructor
for use if the file contains embedded strings.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>BinaryWriter</i> class includes 18 overloads of the <i>Write</i>
method. Sixteen of these overloads have just one argument, which is an object
of type <i>bool</i>, <i>byte</i>, <i>sbyte</i>, <i>byte[]</i>, <i>char</i>, <i>char[]</i>,
<i>string</i>, <i>short</i>, <i>ushort</i>, <i>int</i>, <i>uint</i>, <i>long</i>,
<i>ulong</i>, <i>float</i>, <i>double</i>, or <i>decimal</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>These <i>Write</i> methods do not store any information
about the type of the data. Each type uses as many bytes as necessary. For
example, a <i>float</i> is stored in 4 bytes. A <i>bool</i> requires 1 byte.
The sizes of arrays are not stored. A 256-element <i>byte</i> array is stored
in 256 bytes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Strings stored in the file are preceded by the byte length
stored as a 7-bit encoded integer. (The 7-bit integer encoding uses as many
bytes as necessary to store an integer in 7-bit chunks. The first byte of
storage is the lowest 7 bits of the integer, and so forth. The high bit of each
byte is 1 if there are more bytes. The <i>BinaryWriter</i> class includes a
protected method named <i>Write7BitEncodedInt</i> that performs this encoding.)
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In addition, two <i>Write</i> methods let you write
multiple bytes or characters from a <i>byte</i> or <i>char</i> array. The <i>BinaryWriter</i>
class includes a <i>Seek</i> method, a <i>Flush</i> method, and a <i>Close</i> method
that closes the underlying stream that the <i>BinaryWriter</i> is based on. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>BinaryReader</i> class has individual methods to
read all the various types: <i>ReadBoolean</i>, <i>ReadByte</i>, <i>ReadBytes</i>
(for an array), <i>ReadSByte</i>, and so forth. These methods throw an
exception of type <i>EndOfStreamException</i> if the end of the stream has been
reached.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In most cases, your program will have an intimate knowledge
of a binary form its accessing, so it can normally avoid end-of-stream
conditions. However, for maximum protection, you should put your read
statements in <i>try</i> blocks in case you encounter a corrupted file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.2pt;
margin-left:-.25pt'>The <i>PeekChar</i> and <i>Read</i> methods return the next
<i>char</i> in the file. UTF-8 encoding is assumed if you dont specify an
encoding in the constructor. The methods return 1 if the end of the stream has
been reached.  </p>

<h4 style='margin-left:-.25pt'>The Environment Class </h4>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Environment</i> class in the <i>System</i> namespace
has a method named <i>GetLogicalDrives</i> that returns a <i>string</i> array
of all the drives on the users system in the form &#8213;A:\&#8214;,
&#8213;C:\&#8214;, and so forth. In .NET 2.0, this method became pretty much
obsolete with the introduction of the <i>DriveInfo</i> class in the <i>System.IO</i>
namespace. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>You can create an object of type <i>DriveInfo</i> using a
constructor whose argument is a drive letter: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DriveInfo info = new DriveInfo(&quot;C&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>However, youll probably have more use for the static <i>GetDrives</i>
method that returns an array of <i>DriveInfo</i> objects, one for each drive on
the system: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DriveInfo[] infos = DriveInfo.GetDrives(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The <i>DriveType</i> property of <i>DriveInfo</i> is a
member of the <i>DriveType</i> enumeration, which has members like <i>Removable</i>,
<i>Fixed</i>, and <i>CDRom</i>. The <i>DriveInfo</i> class has other
properties, most of which are demonstrated by this little program that displays
information about all the drives on your system. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:297.4pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:297.4pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>GetMyDrives.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:174.8pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//--------------------------------------------
  // GetMyDrives.cs (c) 2006 by Charles Petzold
  //-------------------------------------------- using System; using System.IO;
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  GetMyDrives </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  DriveInfo[] infos = DriveInfo.GetDrives(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  foreach (DriveInfo info in infos) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  Console.Write(&quot;{0} {1}, &quot;, info.Name, info.DriveType); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            if
  (info.IsReady) </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:20.7pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>               
  Console.WriteLine(&quot;Label: {0}, Format: {1}, Size:
  {2:N0}&quot;,                                   info.VolumeLabel,
  info.DriveFormat,                                   
  info.TotalSize);             else </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>               
  Console.WriteLine(&quot;Not ready&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.7pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Notice that the program checks the <i>IsReady</i> property
before attempting to display information that requires the system to access the
drive. Without that check, some of the properties could raise exceptions if the
drive is not ready. On the system Im using as I write this, the program
displays the following information: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>A:\ Removable, Not ready </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>C:\ Fixed, Label: Windows XP Pro, Format: NTFS, Size: 52,427,898,880 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>D:\ Fixed, Label: Available, Format: NTFS, Size: 52,427,898,880 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>E:\ Removable, Not ready </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>F:\ CDRom, Not ready </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>G:\ CDRom, Not ready </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.55pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>H:\ Fixed, Label: Windows Vista, Format: NTFS, Size:
32,570,863,616 I:\ Removable, Label: BOOKS, Format: FAT, Size: 1,041,989,632 </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The Fixed drives are all partitions on a single hard drive.
The second CDRom drive is actually a DVD drive, although <i>DriveInfo</i>
doesnt distinguish that. The A drive is a largely unused floppy drive, of
course; the E drive is a built-in Iomega Zip drive (also largely unused these
days), and I is a USB flash drive, and one of my most valuable possessions. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The static <i>Environment.GetFolderPath</i> method was
demonstrated in Chapter 5 to display the current users actual directory
corresponding to the alias My Documents. The argument to <i>GetFolderPath</i>
is a member of the <i>Environment.SpecialFolder</i> enumeration. For My
Documents, the enumeration member is <i>Personal</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>This <i>SpecialFolder</i> enumeration is rather odd in that
it is defined within the <i>Environment</i> class. Instead of calling <i>GetFolderPath</i>
like this </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Environment.GetFolderPath(SpecialFolder.Personal)    // Won't work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>you need to preface <i>SpecialFolder</i> with the class in
which its defined: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Environment.GetFolderPath(Environment.SpecialFolder.Personal) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Fortunately, this type of organization of classes and
enumerations is rare. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.25pt;
margin-left:-.25pt'>The following program uses the static <i>Enum.GetValues</i>
method to obtain an array of all the members of the <i>Environment.SpecialFolder</i>
enumeration in an array. It then uses <i>foreach</i> to loop through the array
and display the directory associated with each member of the enumeration. </p>

<h2 style='margin-top:0in;margin-right:7.15pt;margin-bottom:0in;margin-left:
-.25pt;margin-bottom:.0001pt'>ShowSpecialFolders.cs </h2>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>//---------------------------------------------------
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>// ShowSpecialFolders.cs (c) 2006 by
Charles Petzold //--------------------------------------------------- using
System; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.15pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>class ShowSpecialFolders </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    static void Main() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        Environment.SpecialFolder[]
folders = (Environment.SpecialFolder[])                         Enum.GetValues(typeof(Environment.SpecialFolder));
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
0in;margin-left:-.75pt;text-indent:0in;line-height:107%;background:silver'><span
style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>        foreach
(Environment.SpecialFolder folder in folders) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>            Console.WriteLine(&quot;{0}:
{1}&quot;, folder,  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>                             
Environment.GetFolderPath(folder)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.65pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Environment</i> class has a get-only <i>SystemDirectory</i>
property that returns the same directory as <i>GetFolderPath</i> with the <i>Environment.SpecialFolder.System</i>
argument. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The static <i>Environment.CurrentDirectory</i> property
lets a program obtain or set the current drive and directory for the
application. When setting the directory, you can use a relative directory path,
including the &#8213;..&#8214; string to indicate the parent directory. To
change to the root directory of another drive, use the drive letter like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2in;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Environment.CurrentDirectory = &quot;D:\\&quot;; </span></p>

<h3 align=left style='margin-top:0in;margin-right:0in;margin-bottom:4.15pt;
margin-left:-.25pt;text-align:left;line-height:107%'><span style='font-size:
13.0pt;line-height:107%;font-style:normal'>File and Path Name Parsing </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Sometimes you need to parse and scan filenames and path
names. Your program may have a fully qualified filename and you may need just
the directory or the drive.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Path</i> class defined in the <i>System.IO</i>
namespace consists solely of static methods and static read-only fields that
ease jobs like this. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.75pt;
margin-left:-.25pt'>Several static methods of the <i>Path</i> class accept a
path name argument in the form of a <i>string</i> and return information about
it: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.6pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.IsPathRooted</i>
tells you if the path name begins with a drive or a backslash. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:.5in;text-indent:-.25in;line-height:164%'><span style='font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.HasExtension</i>
tells you if the filename has an extension. <span style='font-family:"Courier New"'>o</span><span
style='font-family:"Arial",sans-serif'> </span><i>Path.GetFileName</i> returns
just the filename part of the file path. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.65pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.GetFileNameWithoutExtension</i>
returns the filename without the extension. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:8.5pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.GetExtension</i>
returns just the filename extension. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.75pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.GetDirectoryName</i>
returns just the directory path of the file path. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.65pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.GetFullPath</i>
possibly prepends the current drive and directory to the file path. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span><i>Path.GetPathRoot</i>
obtains the initial drive or backslash (if any). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>None of these methods require that the path or file
actually exist. Theyre really just performing some string parsing and
manipulation, possibly in combination with the current drive and directory. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Path.Combine</i> method has two arguments. The
method combines a path name (the first argument) with a path and/or filename
(the second argument). Use <i>Path.Combine</i> rather than string concatenation
for this job. Otherwise, you have to worry about whether a backslash is at the
end of the first argument or the beginning of the second.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Path.ChangeExtension</i> method also has two
arguments: a path name or filename, and a new extension, including a period.
Set the second argument to <i>null</i> to remove an extension. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Three methods return appropriate directories for storing
temporary data. The <i>TempPath</i> returns a directory name, and both <i>GetTempFileName</i>
and <i>GetRandomFileName</i> return fully qualified unique filenames. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:23.05pt;margin-bottom:
0in;margin-left:-.25pt;line-height:139%'>The read-only fields of the <i>Path</i>
class store characters used in file and path names. <b><span style='font-size:
13.0pt;line-height:139%;font-family:"Arial",sans-serif'>Parallel Classes </span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another common file I/O job is obtaining lists of all files
and subdirectories in a particular directory. Historically, this job has always
been a bit awkward. The standard libraries associated with the C programming
language didnt include such a facility, probably because UNIX directory lists
were text files that programs could directly access and parse. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Four classes provide you with information about files and
directories: <i>Directory</i>, <i>File</i>, <i>DirectoryInfo</i>, and <i>FileInfo</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:35.75pt;line-height:103%'><i>Object </i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     Directory
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     File
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>     MarshalByRefObject
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>          FileSystemInfo</i>
(abstract) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.65pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               DirectoryInfo
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:5.4pt;
margin-left:0in;text-indent:0in;line-height:103%'><span style='font-size:11.0pt;
line-height:103%;font-family:"Calibri",sans-serif'>                </span><i>               FileInfo
</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Directory</i> and <i>File</i> classes are declared
as static, meaning they contain only static methods. In contrast, <i>DirectoryInfo</i>
and <i>FileInfo</i> contain <i>no</i> static properties or methods. You must
create an object of type <i>DirectoryInfo</i> or <i>FileInfo</i> to use these
classes. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As the names suggest, both <i>Directory</i> and <i>DirectoryInfo</i>
provide similar methods, except that the <i>Directory</i> methods are static
and require an argument that is a directory name. The <i>DirectoryInfo</i>
properties and methods are not static; the constructor argument indicates the
directory name to which the properties and methods apply. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Similarly, the <i>File</i> and <i>FileInfo</i> classes
provide similar methods, except that you indicate a particular filename in the
static <i>File</i> methods and you create an instance of <i>FileInfo</i> by
specifying a filename in the <i>FileInfo</i> constructor. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>If you need information about a particular file, you may
wonder whether its best to use <i>File</i> or <i>FileInfo</i> (or similarly
for directories, whether to use <i>Directory</i> or <i>DirectoryInfo</i>). If
you need only one item of information, its probably easiest to use the static
classes. But if you need multiple items, it makes more sense to create an
object of type <i>FileInfo</i> or <i>DirectoryInfo</i> and then use the
instance properties and methods. But dont feel pressured to use one class in
preference to the other. </p>

<h3 align=left style='margin-top:0in;margin-right:0in;margin-bottom:4.15pt;
margin-left:-.25pt;text-align:left;line-height:107%'><span style='font-size:
13.0pt;line-height:107%;font-style:normal'>Working with Directories </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>To use any of the properties or methods of the <i>DirectoryInfo</i>
class, you need a <i>DirectoryInfo</i> object. One way you obtain such an
object is by using the <i>DirectoryInfo</i> constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DirectoryInfo dirinfo = new DirectoryInfo(strPath); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The directory doesnt have to exist. Indeed, if you want to
create a new directory, creating an object of type <i>DirectoryInfo</i> is a
first step. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>After creating an object of type <i>DirectoryInfo</i>, you
can determine whether the directory exists with the <i>Exists</i> property.
Even if the directory does not exist, you can obtain information about it as if
it did exist, such as the <i>Name</i> (just the subdirectory), <i>FullName</i>
(the fully-qualified directory), and <i>Extension</i>, if any. The <i>Parent</i>
and <i>Root</i> properties both return objects of type <i>DirectoryInfo</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A few of the properties in <i>DirectoryInfo</i> are also
duplicated as static methods in the <i>Directory</i> class. These are <i>Exists</i>,
<i>GetDirectoryRoot</i>, and <i>GetParent</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can create a <i>DirectoryInfo</i> object based on a
directory that doesnt exist. You can then create that directory on the disk by
calling the <i>Create</i> method. You can also call <i>CreateSubdirectory</i>
on the directory: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DirectoryInfo subdir = dirinfo.CreateSubdirectory(strSubPath); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>CreateSubdirectory</i> returns another <i>DirectoryInfo</i>
object with information about the new directory. If the indicated directory
already exists, no exception is thrown. The directory name used to create the <i>DirectoryInfo</i>
object (or passed to the <i>CreateSubdirectory</i> method) can contain multiple
levels of directory names. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If the directory doesnt exist when you create the <i>DirectoryInfo</i>
object and then you call <i>Create</i>, the <i>Exists</i> property wont
suddenly become <i>true</i>. You must call the <i>Refresh</i> method to refresh
the <i>DirectoryInfo</i> information. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Directory</i> class also has a static method to
create a new directory. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Both <i>Directory</i> and <i>DirectoryInfo</i> have methods
named <i>Delete</i> to remove a directory. Both classes have overloads of <i>Delete</i>
that let you specify a <i>bool</i> argument that indicates whether you want the
deletion to include all files and subdirectories as well. Otherwise, the
directory must be empty or an exception will be thrown. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'><i>DirectoryInfo</i> has four read-write properties that
let you obtain the <i>Attributes</i>, <i>CreationTime</i>, <i>LastAccessTime</i>,
and <i>LastWriteTime</i> of the directory. (Except for <i>Attributes</i>, these
properties are duplicated by static methods in the <i>Directory</i> class.) The
<i>Attributes</i> property is a bitwise combination of members of the <i>FileAttributes</i>
enumeration. Each member of this enumeration has a fairly familiar name like <i>ReadOnly</i>,
<i>Hidden</i>, <i>System</i>, <i>Directory</i>, <i>Archive</i> and so forth,
and the numerical value of each member is a power of two. Youll want to use
the bitwise AND operator to test whether a bit is set. If <i>dirinfo</i> is an
object of type <i>DirectoryInfo</i>, then the following expression is non-zero:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>dirinfo.Attributes &amp; FileAttributes.Directory </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You can move a directory and its contents to another
location on the same disk with the <i>MoveTo</i> method of <i>DirectoryInfo</i>
or the static <i>Directory.Move</i> method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The remaining methods of <i>Directory</i> and <i>DirectoryInfo</i>
I want to discuss here all obtain an array of files or subdirectories in a
directory, or only those files or directories that match a specified pattern
using wildcards (question marks and asterisks). </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The static methods of the <i>Directory</i> class all return
arrays of strings. <i>Directory.GetDirectories</i> requires a directory path
and an optional search pattern and returns an array of all subdirectories in
the specified directory. Similarly, <i>Directory.GetFiles</i> returns an array
of files in the directory. <i>Directory.GetFileSystemEntries</i> returns
subdirectories and files. This last method has limited use. Because all you get
is an array of strings, you probably wont be able to immediately tell which is
a subdirectory and which is a file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>DirectoryInfo</i> class has similar instance
methods. However, these methods do <i>not</i> return arrays of strings. The <i>GetDirectories</i>
method returns an array of <i>DirectoryInfo</i> objects: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DirectoryInfo[] subdirs = GetDirectories(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Similarly, the <i>GetFiles</i> method returns an array of <i>FileInfo</i>
objects, and the <i>GetFileSystemInfos</i> method returns an array of <i>FileSystemInfo</i>
objects. This last method returns both subdirectories and files, but you can
immediately tell which is which by examining the <i>FileAttributes.Directory</i>
bit in the <i>Attributes</i> property. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>These methods allow us to enhance the HexDump program shown
earlier </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>so that it works with wildcard file specifications. Heres
WildCardHexDump. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:578.6pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:578.6pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>WildCardHexDump.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//----------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:164.25pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// WildCardHexDump.cs © 2001 by
  Charles Petzold //---------------------------------------------- using
  System; using System.IO; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  WildCardHexDump: HexDump </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     public
  new static int Main(string[] strArgs) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         if
  (strArgs.Length &gt; 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            
  foreach (string strFileName in strArgs) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                
  ExpandWildCard(strFileName); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:345.3pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>        
  }          else          { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>            
  string strFileName; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:345.25pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>              do </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>             {
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:48.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>                
  Console.Write(&quot;Enter filename (or Enter to end):
  &quot;);                  strFileName = Console.ReadLine();                 
  if (strFileName.Length &gt; 0)                     
  ExpandWildCard(strFileName); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>             }
  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>             while
  (strFileName.Length &gt; 0); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        
  return 0; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     static
  void ExpandWildCard(string strWildCard) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         
  string[] strFiles;  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:356.15pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>          
  try           { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>              
  strFiles = Directory.GetFiles(strWildCard); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:328.7pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>          }          
  catch            {                try                { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>                    string
  strDir  = Path.GetDirectoryName(strWildCard);                     string
  strFile = Path.GetFileName(strWildCard); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:92.7pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:107%'><span style='font-size:
  10.0pt;line-height:107%;font-family:Consolas'>                    if (strDir
  == null || strDir.Length == 0)                          strDir =
  &quot;.&quot;;  </span></p>
  </td>
 </tr>
 <tr style='height:175.7pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  1.7pt 5.75pt 0in 1.45pt;height:175.7pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>                   
  strFiles = Directory.GetFiles(strDir, strFile); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:306.9pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>               }               
  catch </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>              
  { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>                   
  Console.WriteLine(strWildCard + &quot;: No Files
  found!&quot;);                     return; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:328.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>               }           } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>          if
  (strFiles.Length == 0) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>              
  Console.WriteLine(strWildCard + &quot;: No files found!&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>         
  foreach(string strFile in strFiles) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>              
  DumpFile(strFile); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>     } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>WildCardHexDump</i> class derives from the <i>HexDump</i>
class, so the project requires a link to HexDump.cs. Because <i>WildCardHexDump</i>
has its own <i>Main</i> method, the method requires a <i>new</i> keyword to
avoid a warning message from the C# compiler. Also, you need to indicate to the
C# compiler which <i>Main</i> method is the actual entry point to the program.
You do this by bringing up the Project Properties page in Visual Studio,
selecting the Application tab at the left, and in the Startup Object dropdown,
selecting <i>WildCardHexDump</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:12.3pt;
margin-left:-.25pt'>Besides normal wildcards, I wanted to be able to specify
just a directory name as an argument. For example, I wanted C:\ to be the
equivalent of C:\*.*. The <i>ExpandWildCard</i> method begins by attempting to
obtain all the files for the particular argument with a call to <i>Directory.GetFiles</i>.
This call will work if <i>strWildCard</i> specifies only a directory.
Otherwise, it throws an exception, and thats why its in a <i>try</i> block.
The <i>catch</i> block assumes that the command-line argument has path and
filename components, and it obtains these components using the static <i>GetDirectoryName</i>
and <i>GetFileName</i> methods of <i>Path</i>. However, the <i>GetFiles</i>
method of <i>Directory</i> doesnt want a first argument that is <i>null</i> or
an empty string. Before calling <i>GetFiles</i>, the program avoids that
problem by setting the path name to &#8213;.&#8214;, which indicates the
current directory. </p>

<h3 align=left style='margin-top:0in;margin-right:0in;margin-bottom:4.15pt;
margin-left:-.25pt;text-align:left;line-height:107%'><span style='font-size:
13.0pt;line-height:107%;font-style:normal'>File Manipulation and Information </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Like the <i>Directory</i> and <i>DirectoryInfo</i> classes,
the <i>File</i> and <i>FileInfo</i> classes are very similar and share a great
deal of functionality. Like the <i>Directory</i> class, the <i>File</i> class
is static and consists entirely of static methods. The first argument to every
method is a string that indicates a filename. The <i>FileInfo</i> class
inherits from <i>FileSystemInfo</i>. You create an object of type <i>FileInfo</i>
based on a filename that could include a full or relative directory path: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileInfo fileinfo = new FileInfo(strFileName); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The file doesnt have to exist. You can determine whether
the file exists and obtain some other information about the file using
read-only properties <i>Exists</i>, <i>Name</i>, <i>FullName</i>, <i>Extension</i>,
<i>DirectoryName</i> (which returns a string), <i>Directory</i> (which returns
a <i>DirectoryInfo</i> object), and <i>Length</i>. Only the <i>Exists</i>
property is duplicated by a method in the <i>File</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>FileInfo</i> has gettable and settable properties <i>Attributes</i>,
<i>CreationTime</i>, <i>LastAccessTime</i>, and <i>LastWriteTime</i>. These
properties are duplicated by static methods in the <i>File</i> class. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>CopyTo</i>, <i>MoveTo</i>, and <i>Delete</i> methods
of <i>FileInfo</i> are duplicated by <i>Copy</i>, <i>Move</i>, and <i>Delete</i>
methods in <i>File</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>File</i> class also contains a collection of methods
that create new files or open existing files. These methods are handy if youve
obtained an array of <i>FileInfo</i> objects from a <i>GetFiles</i> call on a <i>DirectoryInfo</i>
object and you want to poke your nose into each and every file. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If <i>fileinfo</i> is an object of type <i>FileInfo</i>,
the following methods all return open <i>FileStream</i> objects. In these
calls, <i>mode</i> is a member of the <i>FileMode</i> enumeration, <i>access</i>
is a member of the <i>FileAccess</i> enumeration, and <i>share</i> is a member
of the <i>FileShare</i> enumeration. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileStream fstream = fileinfo.Create(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileStream fstream = fileinfo.Open(mode); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileStream fstream = fileinfo.Open(mode, access); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileStream fstream = fileinfo.Open(mode, access, share); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileStream fstream = fileinfo.OpenRead(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>FileStream fstream = fileinfo.OpenWrite(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>The following methods create or open text files: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>StreamWriter writer = fileinfo.CreateText(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:82.5pt;margin-bottom:
7.7pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>StreamWriter writer = fileinfo.AppendText(); StreamReader
reader = fileinfo.OpenText(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>File</i> class has similar static methods, each of
which requires a filename as its first argument. However, these static methods
dont provide any real advantage over using the appropriate constructors of the
<i>FileStream</i>, <i>StreamReader</i>, or <i>StreamWriter</i> classes. Indeed,
the very presence of these static methods in the <i>File</i> class was one of
the aspects of the entire <i>System.IO</i> namespace I initially found the most
confusing. It didnt (and still doesnt) make sense to use a class like <i>File</i>
merely to obtain an object of type <i>FileStream</i> so that you can then use <i>FileStream</i>
properties and methods. Its easier to stick to a single class if thats
sufficient for your purposes. </p>

<h3 align=left style='margin-top:0in;margin-right:0in;margin-bottom:4.15pt;
margin-left:-.25pt;text-align:left;line-height:107%'><span style='font-size:
13.0pt;line-height:107%;font-style:normal'>File Class Shortcuts </span></h3>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, in .NET 2.0 some additional static methods were
added to the <i>File</i> class that make a whole <i>lot</i> of sense. These
methods let you open, read from (or write to), and close a file, all in one
statement. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Here are static methods that read entire files: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:99.1pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>byte[] buffer = File.ReadAllBytes(strPathName); string
strFile = File.ReadAllText(strPathName); string[] strLines =
File.ReadAllLines(strPathName); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The two methods that read text files also let you specify
an optional <i>Encoding</i> argument. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>In the following methods, <i>buffer</i> is a <i>byte</i>
array and <i>lines</i> is a <i>string</i> array.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>File.WriteAllBytes(strPathName, buffer); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>File.WriteAllText(strPathname, strFileText); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.8pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>File.AppendAllText(strPathName, strAppendText);
File.WriteAllLines(strPathName, lines); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The three methods that involve text files let you specify
an optional <i>Encoding</i> argument. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If you have a need to replace an entire file and, in the
process, make the existing file into a backup copy, youll also want to explore
the <i>File.Replace</i> method, also new in .NET 2.0. <br clear=all
style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:.05pt;margin-bottom:20.25pt;margin-left:
.6pt'><a name="_Toc369940">Chapter 26. String Theory </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Once a C# string is created, neither the length nor the
individual characters that make up the string can be changed. A C# string is
thus said to be <i>immutable</i>. Whenever you need to change a string in some
way, you must create another string. Many members of the <i>String</i> class
create new strings based on existing strings. Many methods and properties
throughout the .NET Framework create and return strings. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>You may wonder if theres a performance penalty associated
with frequent re-creation of <i>String</i> objects. Consider the following
program, which uses the addition compound assignment operator in 10,000
string-appending operations to construct a large string. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:297.5pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:297.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StringAppend.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//---------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:136.3pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//
  StringAppend.cs (c) 2006 by Charles Petzold
  //--------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>using
  System.Diagnostics; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StringAppend </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    const int
  iterations = 10000; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:158.45pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        Stopwatch watch = new
  Stopwatch();         string str = String.Empty; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; iterations; i++) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  str += &quot;abcdefghijklmnopqurstuvxyz\r\n&quot;; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Stop(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(watch.ElapsedMilliseconds); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The program uses the <i>Stopwatch</i> class from the <i>System.Diagnostics</i>
namespace to calculate an elapsed time. The stopwatch is started before the <i>for</i>
loop, stopped afterwards, and then the elapsed time in milliseconds is
displayed. (The <i>Stopwatch</i> class requires a reference to the System.dll
assembly.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Each string-appending operation causes a new <i>string</i>
object to be created, which requires another memory allocation. Each previous
string is marked for garbage collection. How fast this program runs depends on
how fast your machine is. My pokey machine requires about 8 seconds. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>A better solution in this case is the appropriately named <i>StringBuilder</i>
class, defined in the <i>System.Text</i> namespace. Unlike the string
maintained by the <i>String</i> class, the string maintained by <i>StringBuilder</i>
can be altered. <i>StringBuilder</i> dynamically reallocates the memory used
for the string. Whenever the size of the string is about to exceed the size of
the memory buffer, the buffer is doubled in size. To convert a <i>StringBuilder</i>
object to a <i>String</i> object, call the <i>ToString</i> method. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Heres a revised version of the program using <i>StringBuilder</i>.
</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:309.15pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:309.15pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StringBuilderAppend.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.35pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------------------
  // StringBuilderAppend.cs (c) 2006 by Charles Petzold
  //---------------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:257.3pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>using System.Diagnostics; using
  System.Text; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StringBuilderAppend </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    const int
  iterations = 10000; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        StringBuilder
  builder = new StringBuilder(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.5pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  Stopwatch watch = new Stopwatch();         watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; iterations; i++) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  builder.Append(&quot;abcdefghijklmnopqurstuvxyz\r\n&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        string
  str = builder.ToString(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Stop(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(watch.ElapsedMilliseconds); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Youll probably find that this program does its work a
thousand times faster than the previous program. On my machine, it required 4
milliseconds. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another efficient approach is to use the <i>StringWriter</i>
class defined in the <i>System.IO</i> namespace. As I indicated in Chapter 25,
both <i>StringWriter</i> and <i>StreamWriter</i> (which you use for writing to
text files) derive from the abstract <i>TextWriter</i> class. Like <i>StringBuilder</i>,
<i>StringWriter</i> assembles a composite string. The big advantage with <i>StringWriter</i>
is that you can use the whole array of <i>Write</i> and <i>WriteLine</i>
methods defined in the <i>TextWriter</i> class. Heres a sample program that
performs the same task as the previous two programs but using a <i>StringWriter</i>
object. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:309.15pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:309.15pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>StringWriterAppend.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//---------------------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:103.35pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>// StringWriterAppend.cs (c)
  2006 by Charles Petzold //---------------------------------------------------
  using System; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:257.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>using System.Diagnostics; using
  System.IO; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  StringWriterAppend </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    const int
  iterations = 10000; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    public
  static void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.5pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        StringWriter writer =
  new StringWriter();         Stopwatch watch = new Stopwatch();        
  watch.Start(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        for
  (int i = 0; i &lt; iterations; i++) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>           
  writer.WriteLine(&quot;abcdefghijklmnopqurstuvxyz&quot;); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        string
  str = writer.ToString(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  watch.Stop(); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(watch.ElapsedMilliseconds); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The speed of this program is comparable to
StringBuilderAppend. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Theres a lesson in all this. As operating systems,
programming languages, class libraries, and frameworks provide an ever
increasingly higher level of abstraction, we programmers can sometimes lose
sight of all the mechanisms going on beneath the surface. What looks like a
simple addition in code can actually involve many layers of low-level activity.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

<h1 style='margin-left:.6pt'><a name="_Toc369941">Chapter 27. Generics </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>C# generics were introduced with C# 2.0, and use a syntax
that is similar to the C++ template. Generics help make classes more versatile
by letting them be customized for different data types. In certain
circumstances, generics preserve strong typing in places where it might
otherwise have to be abandoned. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Suppose youre designing a two-dimensional graphics
programming system, and you want the programmer using your system to express
coordinate points in two different ways. You want integer coordinates for
performance, but floating-point coordinates for precision. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>You might start out designing two different classes. Heres
an extremely early version of the <i>IntegerPoint</i> class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class IntegerPoint </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:264.15pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    public int X;     public int Y; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public double DistanceTo(IntegerPoint pt) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return Math.Sqrt((X - pt.X) * (X - pt.X) +  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                         (Y - pt.Y) * (Y - pt.Y)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, you know that eventually youll have public
properties named <i>X</i> and <i>Y</i>, and private fields named, perhaps, <i>x</i>
and <i>y</i>, and youll want constructors, and probably other properties and
methods. But this is how you start. Notice that the <i>DistanceTo</i> method
has a parameter of another <i>IntegerPoint</i> object and calculates the
distance between the two points using the Pythagorean Theorem </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>You also create a class named <i>DoublePoint</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class DoublePoint </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:247.7pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    public double X;     public double Y; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public double DistanceTo(DoublePoint pt) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return Math.Sqrt((X - pt.X) * (X - pt.X) +  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                         (Y - pt.Y) * (Y - pt.Y)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In this class the two fields are declared as type <i>double</i>,
and the parameter to <i>DistanceTo</i> is a <i>DoublePoint</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Even at this stage, you know that these two classes are
going to be pretty similar except for the data types, and youd prefer not to
duplicate a lot of code. The solution is to make a generic <i>Point</i> class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Point&lt;T&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:313.65pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     public T X;     public T Y; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public double DistanceTo(Point&lt;T&gt; pt) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>To make a generic class, you follow the name of the class
with angle brackets enclosing a placeholder that is commonly named <i>T</i> for
&#8213;type,&#8214; although you can name it whatever you want. This is called
a <i>type parameter</i>. Notice that the two fields are now of type <i>T</i>,
and the parameter to the <i>DistanceTo</i> method is an object of type <i>Point&lt;T&gt;</i>.
However, the return value from <i>DistanceTo</i> is still a <i>double</i>
because thats the return value from the <i>Math.Sqrt</i> method used for the
calculation. (You can also define generic structures and generic interfaces.) </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>To declare a <i>Point</i> object where the coordinates are
integers, you use: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Point&lt;int&gt; pti; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>In declaring objects of the generic <i>Point</i> class you
must follow the class name with an actual type in angle brackets, in this case <i>int</i>.
You can also supply a <i>new</i> expression because the class has a default
parameterless constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Point&lt;int&gt; pti = new Point&lt;int&gt;(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The class name with the type in angle brackets is part of
the <i>new</i> expression as well. In this case, the fields of the <i>pti</i>
object are of type <i>int</i>, and you can assign these fields integer values: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:302.55pt;margin-bottom:
7.8pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>pti.X = 26; pti.Y = 14; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You can declare a <i>Point</i> object where the coordinates
are <i>double</i> values using: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Point&lt;double&gt; ptd; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Now the type of the <i>X</i> and <i>Y</i> fields are <i>double</i>,
and you can assign the fields <i>double</i> values: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:286.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>ptd.X = 13.25; ptd.Y = 3E-1; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can even declare a <i>Point</i> object where the
coordinates are <i>object</i> values: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Point&lt;object&gt; pto; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Of course, its not clear at all what exactly this means.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>I havent yet shown you the body of the <i>DistanceTo</i>
method in the generic <i>Point</i> class, because therein is a big problem. The
<i>DistanceTo</i> method requires that values of <i>X</i> and <i>Y</i> be
subtracted from each other. What is the type of <i>X</i> and <i>Y</i>? Well,
its whatever type goes in the angle brackets when an object of the generic <i>Point</i>
class is declared. It could be <i>int</i>. It could be <i>double</i>. It could
be <i>DateTime</i>. It could be <i>FileStream</i>. It could be <i>object</i>.
Do all these types support the subtraction operator? No, they do not, and
thats why the C# compiler will not allow you to write a <i>DistanceTo</i>
method like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public double DistanceTo(Point&lt;T&gt; pt)    // Won't work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return Math.Sqrt((X - pt.X) * (X - pt.X) +  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:132.1pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>                     (Y - pt.Y) * (Y - pt.Y)); } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>X</i> and <i>Y</i> can be any type, then this code is
syntactically incorrect, because it cannot be executed for any arbitrary type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Because the argument to the <i>Math.Sqrt</i> method is of
type <i>double</i>, you might consider casting <i>X</i> and <i>Y</i> to type <i>double</i>
in this method. That wont work either, because you cant cast an arbitrary
object to <i>double</i>. But youre on the right track. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>To help solve problems such as these, C# generics support <i>constraints</i>,
which restrict the class to certain types. The constraints use the <i>where</i>
keyword. For example, you can restrict the type parameter to </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'><i>SomeBaseClass</i> and all classes that derive from <i>SomeBaseClass</i>
with the following syntax: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Point&lt;T&gt; where T: SomeBaseClass </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:70.85pt;margin-bottom:
1.8pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>You can restrict
the type parameter to value types using <span style='font-size:10.0pt;
line-height:152%;font-family:Consolas'>class Point&lt;T&gt; where T: struct </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Or you can use the word <i>class</i> to restrict the type
parameter to reference types. You can even require that the type parameter have
a parameterless constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Point&lt;T&gt; where T: new() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Or you can constrain the type parameter to a class that has
a parameterless constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Point&lt;T&gt; where T: class, new() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>None of these solve our problem. For example, there is no
constraint that lets you indicate that the type supports the subtraction
operator. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>However, you <i>can</i> indicate that <i>T</i> implements a
particular interface (or multiple interfaces), and this is the feature thats
going to come to our rescue. Take a look at the <i>IConvertible</i> interface
defined in the <i>System</i> namespace. Classes or structures that implement
this interface must support a bunch of methods for converting to the basic
types, and in particular, <i>ToDouble</i>. All the basic typesand some other
types as well implement the <i>IConvertible</i> interface. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.25pt;
margin-left:-.25pt'>The generic <i>Point</i> class can include an <i>IConvertible</i>
constraint like so: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>class Point&lt;T&gt; where T:IConvertible </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now the compiler knows that any object of type <i>T</i> has
a method named <i>ToDouble</i>, and you can write the <i>DistanceTo</i> method
like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public double DistanceTo(Point&lt;T&gt; pt) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:-.45pt;margin-bottom:
6.2pt;margin-left:.5in;text-align:justify;text-justify:inter-ideograph;
text-indent:0in;line-height:119%'><span style='font-size:10.0pt;line-height:
119%;font-family:Consolas'>    return Math.Sqrt(Math.Pow(X.ToDouble(fmt) -
pt.X.ToDouble(fmt), 2) +                      Math.Pow(Y.ToDouble(fmt) -
pt.Y.ToDouble(fmt), 2)); } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>The <i>fmt</i> argument to the <i>ToDouble</i> methods must
be an object of a type that implements the <i>IFormatProvider</i> interface,
and in this case on object </p>

<p class=MsoNormal style='margin-bottom:5.6pt;line-height:103%'>of type <i>NumberFormatInfo</i>
is suitable, such as <i>NumberFormatInfo.CurrentInfo</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>And here is the generic <i>Point</i> class. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:320.95pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.0pt 5.75pt 0in 1.45pt;height:320.95pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>Point.cs </span></b></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>//--------------------------------------
  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:174.75pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>// Point.cs (c)
  2006 by Charles Petzold //-------------------------------------- using
  System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>using
  System.Globalization; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  Point&lt;T&gt; where T:IConvertible </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:306.95pt;margin-bottom:
  .1pt;margin-left:0in;text-indent:0in;line-height:99%'><span style='font-size:
  10.0pt;line-height:99%;font-family:Consolas'>    public T X;     public T Y; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:114.3pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    NumberFormatInfo fmt =
  NumberFormatInfo.CurrentInfo;  </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Parameterless
  Constructor     public Point() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:11.0pt;text-indent:-11.0pt;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>X<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>= default(T); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:11.0pt;text-indent:-11.0pt;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>Y<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>= default(T); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:213.4pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>    // Two-Parameter
  Constructor     public Point(T x, T y) </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:11.0pt;text-indent:-11.0pt;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>X<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>= x; </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
  margin-left:11.0pt;text-indent:-11.0pt;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>Y<span
  style='font:7.0pt "Times New Roman"'>&nbsp; </span></span><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>= y; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    public double
DistanceTo(Point&lt;T&gt; pt) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    { </span></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:14.35pt;
margin-bottom:0in;margin-left:-.75pt;text-align:right;text-indent:0in;
line-height:normal;background:silver'><span style='font-size:10.0pt;font-family:
Consolas'>        return Math.Sqrt(Math.Pow(X.ToDouble(fmt) -
pt.X.ToDouble(fmt), 2) +                          Math.Pow(Y.ToDouble(fmt) -
pt.Y.ToDouble(fmt), 2)); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
.2pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
7.55pt;margin-left:-.25pt;background:silver'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Ive also added a parameterless constructor and a
two-parameter constructor to show you what those look like. The parameterless
constructor really wants to set the two fields to zero, but it cannot. Instead,
it uses a <i>default</i> operator that sets value types to their zero values
and reference types to <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The Point.cs file is part of the GenericPoints projects,
which also includes the following file to test out the generic <i>Point</i>
class. </p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=580
 style='width:434.95pt;margin-left:-1.45pt;border-collapse:collapse'>
 <tr style='height:344.3pt'>
  <td width=580 valign=top style='width:434.95pt;background:silver;padding:
  3.05pt 5.75pt 0in 1.45pt;height:344.3pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><b><span
  style='font-size:14.0pt;line-height:107%'>GenericPoints.cs </span></b></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:147.35pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>//----------------------------------------------
  // GenericPoints.cs (c) 2006 by Charles Petzold
  //---------------------------------------------- using System; </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>class
  GenericPoints </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>{ </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    static
  void Main() </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    { </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        //
  Points based on integers </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Point&lt;int&gt; pti1 = new Point&lt;int&gt;(); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:163.85pt;margin-bottom:
  .15pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  Point&lt;int&gt; pti2 = new Point&lt;int&gt;(5, 3);  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(pti1.DistanceTo(pti2)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        //
  Points based on doubles </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Point&lt;double&gt; ptd1 = new Point&lt;double&gt;(13.5, 15); </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:97.85pt;margin-bottom:
  0in;margin-left:0in;text-indent:0in;line-height:normal'><span
  style='font-size:10.0pt;font-family:Consolas'>        Point&lt;double&gt;
  ptd2 = new Point&lt;double&gt;(3.54, 5E-1);  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(ptd2.DistanceTo(ptd1)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'> </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>        //
  Points based on strings </span></p>
  <p class=MsoNormal style='margin-top:0in;margin-right:103.25pt;margin-bottom:
  .05pt;margin-left:0in;text-indent:0in;line-height:99%'><span
  style='font-size:10.0pt;line-height:99%;font-family:Consolas'>       
  Point&lt;string&gt; pts1 = new Point&lt;string&gt;(&quot;34&quot;,
  &quot;27&quot;);         Point&lt;string&gt; pts2 = new
  Point&lt;string&gt;(&quot;0&quot;, &quot;0&quot;);  </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>       
  Console.WriteLine(pts1.DistanceTo(pts2)); </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>    } </span></p>
  <p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'><span
  style='font-size:10.0pt;line-height:107%;font-family:Consolas'>} </span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The program creates two objects of type <i>Point&lt;int&gt;</i>,
two objects of type </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Point&lt;double&gt;</i>, andamazingly enoughtwo
objects of type <i>Point&lt;string&gt;</i>. Yes, the <i>String</i> class also
implements the <i>IConvertible</i> interface, and includes a method named <i>ToDouble</i>
that undoubtedly calls <i>Double.Parse</i>. You can also declare objects of
type <i>Point&lt;DateTime&gt;</i> because <i>DateTime</i> implements <i>IConvertible</i>
as well. But <i>Point&lt;Object&gt;</i> wont work. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Where generics had the biggest impact in the .NET Framework
is with the <i>System.Collections</i> namespace. With .NET 2.0, that namespace
has been largely superseded by the <i>System.Collection.Generic</i> namespace,
which includes generic versions of <i>Queue</i>, <i>Stack</i>, <i>Dictionary</i>,
<i>SortedList</i>, and <i>List</i> (which is the generic version of <i>ArrayList</i>).
These versions provide type safety that the non-generic versions do not, and
are now preferred for most applications. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>For example, if you need to maintain a collection of <i>DateTime</i>
objects, and you cant use an array because the number youll eventually need
cannot be determined, you can use a generic List class: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>List&lt;DateTime&gt; lst = new List&lt;DateTime&gt;(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>All the methods such as <i>Add</i> will require that the
parameter be of type <i>DateTime</i>, and the indexer is also of type <i>DateTime</i>. 
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>As generic classes such as Dictionary demonstrate, it is
possible to have multiple types in a generic class definition: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public class Dictionary&lt;TKey, TValue&gt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Dictionary</i> implements many interfaces, including <i>IDictionary&lt;TKey,
TValue&gt;</i>. </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> <br
clear=all style='page-break-before:always'>
</p>

<h1 style='margin-left:.6pt'><a name="_Toc369942">Chapter 28. Nullable Types </a></h1>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Classes are reference types and structures are value types.
An instance of any class can take on a <i>null</i> value, but an instance of a
structure cannot. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>For many applications, this distinction (and the resultant
limitation) works just fine. But sometimes it would be nice to have just a
little bit more information to accompany our value types.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>For example, suppose our database application calls a
method named </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'><i>Fish</i> to fish something out of a database. The item
cant be found, so the <i>Fish</i> method returns <i>null</i>. The <i>null</i>
value basically means &#8213;its not there&#8214; or &#8213;I cant find
it.&#8214; This scheme works fine if the <i>Fish</i> method is searching for an
instance of a class. But suppose the <i>Fish</i> method is looking for an
instance of a value type, perhaps a <i>DateTime</i> satisfying particular
criteria. The <i>Fish</i> method cant return <i>null</i> because <i>DateTime</i>
is a structure. The best it can do is return some pre-defined <i>DateTime</i>
value that represents the case where &#8213;its not there,&#8214; perhaps <i>DateTime.MinValue</i>
or <i>DateTime.MaxValue</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Another example: Youre accessing some XML where a <i>Count</i>
attribute is normally set to an integer. However, the <i>Count</i> attribute is
optional, and its absence means that the <i>Count</i> is &#8213;not
applicable&#8214; for this particular case. How do you store the value of <i>Count</i>
in your program? You cant just make it an <i>int</i> because youre not taking
account of the &#8213;not applicable&#8214; case. You might create a <i>bool</i>
named <i>CountIsApplicable</i>, but it would be even nicer having the
&#8213;not applicable&#8214; case somehow stored in the same variable as the <i>Count</i>
itself. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:0in;
margin-left:-.25pt'>This is the rationale behind &#8213;nullable&#8214; types,
which were implemented in .NET 2.0. Any value type<i>int</i>, <i>bool</i>, <i>DateTime</i>,
or any structure that you definecan be made into a &#8213;nullable,&#8214; and
heres where it gets bit confusing: When a value type is made into a nullable,
it actually <i>doesnt</i> mean that the object can have a <i>null</i> value.
It only <i>seems</i> to have that capability when youre coding in C#. In
actuality, the value type is merely associated with a <i>bool</i> that
indicates if the value is present or if &#8213;its not there.&#8214;
Syntactically, the &#8213;its not there&#8214; case is treated in C# as a <i>null</i>.
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>This will all become more evident as we probe deeper into
nullable types. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>Nullable types have already been put to use: In the Windows
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Presentation Foundation, the <i>IsChecked</i> property of
the <i>CheckBox</i> control is a nullable <i>bool</i>, which means that it can
be <i>true</i>, <i>false</i>, or <i>null</i>. The <i>null</i> value indicates
the &#8213;indeterminate&#8214; state for a tri-state <i>CheckBox</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I also found a nullable type to be convenient when I was
writing my WPF book. I wanted to represent birthdates and death dates as <i>DateTime</i>
objects, but I also wanted a way to indicate that someone was still alive. I
used a nullable <i>DateTime</i> for the death date, where a <i>null</i> value
basically means &#8213;non-applicable.&#8214; </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:7.85pt;
margin-left:-.25pt'>The implementation of nullable types in .NET 2.0 and C#
required changes to three areas: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.1pt;
margin-left:.5in;text-indent:-.25in;line-height:163%'><span style='font-family:
"Courier New"'>o<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>A
<i>Nullable</i> generic structure was added to the <i>System</i> namespace. <span
style='font-family:"Courier New"'>o</span><span style='font-family:"Arial",sans-serif'>
</span>C# needed to recognize nullable types in some cases. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:.5in;text-indent:-.25in'><span style='font-family:"Courier New"'>o<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>The CLR needed
to recognize nullable types for boxing. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>I will cover these changes in the order I listed them,
which I think is the clearest approach, although the initial syntax may look a
bit clunky. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>I am not privy to the internals of .NET, but I am fairly
confident that the core functionality of the <i>Nullable</i> generic structure
looks something like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public struct Nullable&lt;T&gt; where T : struct    // Pure
supposition </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:297.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    T value;     bool hasValue; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:242.25pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    // Constructor     public Nullable(T value) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:198.2pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        this.value = value;         hasValue = true; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:209.2pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    // Read-Only Properties     public bool HasValue </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        get { return hasValue; } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public T Value </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:335.5pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    {         get          { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>            if (!HasValue) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                throw new InvalidOperationException( </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>                            &quot;Nullable object must have a
value&quot;);             return value;  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.55pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        }     }     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Notice that the underlying type is restricted to value
types. The <i>Nullable</i> generic structure has a default empty parameterless
constructor, of course, as well as a parametered constructor. It has two public
read-only properties named <i>HasValue</i> and <i>Value</i>.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Lets create an object of type nullable <i>DateTime</i>
using the parameterless constructor: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Nullable&lt;DateTime&gt; ndt = new Nullable&lt;DateTime&gt;(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Ive named this variable <i>ndt</i> to stand for
&#8213;nullable <i>DateTime</i>.&#8214; Because the parameterless constructor
is used here, the <i>hasValue</i> field has its default value of <i>false</i>,
and <i>HasValue</i> also returns <i>false</i>. Any attempt to access the <i>Value</i>
parameter raises an <i>InvalidOperationException</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Now lets use the other constructor. If were creating a
nullable <i>DateTime</i>, the constructor requires a <i>DateTime</i> argument: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Nullable&lt;DateTime&gt; ndt = new
Nullable&lt;DateTime&gt;(DateTime.Now); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>Now <i>ndt.HasValue</i> equals <i>true</i>, and <i>ndt.Value</i>
returns an object of type <i>DateTime</i>. If youre writing code that must
deal with an object of type nullable <i>DateTime</i>, you might write code that
looks something like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (ndt.HasValue) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.6pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    Console.WriteLine(ndt.Value.Year); else </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    Console.WriteLine(&quot;Year not available&quot;); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>Or, you might want to extract the actual <i>DateTime</i>
object from the nullable <i>DateTime</i> object and then use that: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (ndt.HasValue) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:88.3pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    DateTime dt = ndt.Value;    
Console.WriteLine(dt.Year); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Nullable</i> generic structure also defines an
implicit cast and an explicit cast to ease some of the syntax: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public struct Nullable&lt;T&gt; where T : struct    // Pure
supposition </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ...  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public static implicit operator Nullable&lt;T&gt;(T value) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return new Nullable&lt;T&gt;(value); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public static explicit operator T(Nullable&lt;T&gt; value) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return value.Value; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:363.1pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:346.55pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    ... } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>The implicit cast allows you to set an object of a nullable
type directly from the underlying type. In the example of the nullable <i>DateTime</i>,
you can do this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ndt = DateTime.Now; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Going the other way is more problematic: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dt = ndt;     // Wont work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>There is no implicit cast for assigning a nullable <i>DateTime</i>
to a <i>DateTime</i>, and its easy to see why: The assignment wont work if <i>ndt.HasValue</i>
is <i>false</i>. When assigning a nullable to a non-nullable, an explicit cast
is required: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.6pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dt = (DateTime) ndt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Now the programmers intention is clear, and it is assumed
the programmer knows what shes doing. If <i>ndt.HasValue</i> is, in fact, <i>false</i>,
the statement will raise an <i>InvalidOperationException</i> when the <i>Value</i>
property is accessed in code for the explicit cast. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The <i>Nullable</i> structure also has two versions of a
method named <i>GetValueOrDefault</i> that may be handy in some cases. Like the
<i>Value</i> property, this method returns an object of the underlying type,
but it does not raise an exception if <i>HasValue</i> is <i>false</i>. Instead,
it returns the default value of the underlying type.  </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dt = ndt.GetValueOrDefault(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>ndt.HasValue</i> is <i>true</i>, the method returns <i>ndt.Value</i>.
Otherwise, the method returns a new instance of <i>DateTime</i> created with a
parameterless constructor, which is <i>DateTime.MinValue</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>An overload of the <i>GetValueOrDefault</i> method lets you
specify the value returned if the object is <i>null</i>. For example: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.65pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>DateTime dt =
ndt.GetValueOrDefault(new DateTime(1900, 1, 1)); </span>Now if <i>ndt.HasValue</i>
is <i>false</i>, <i>dt</i> is set to the date January 1, 1900. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>I suspect that <i>GetValueOrDefault</i> is implemented
something like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public struct Nullable&lt;T&gt; where T : struct    // Pure
supposition </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ...  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public T GetValueOrDefault() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return HasValue ? Value : new T(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public T GetValueOrDefault(T defaultValue) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:126.7pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        return HasValue ? Value : defaultValue;     } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>     ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.3pt;
margin-left:-.25pt'>You probably want to be able to pass an instance of a
nullable to <i>ToString</i> and have something reasonable happen. You can do
that because the <i>Nullable</i> generic structure overrides <i>ToString</i>. <i>GetHashCode</i>
is also overridden: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public struct Nullable&lt;T&gt; where T : struct    // Pure
supposition </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ...  </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public override string ToString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return HasValue ? Value.ToString() : &quot;&quot;; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    public override int GetHashCode() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return HasValue ? Value.GetHashCode() : 0; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.45pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }      ... </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:198.05pt;margin-bottom:
2.05pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>Notice that the
expression <span style='font-size:10.0pt;line-height:152%;font-family:Consolas'>ndt.ToString()
</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:126.3pt;margin-bottom:
2.05pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>is perfectly
valid but the expression <span style='font-size:10.0pt;line-height:152%;
font-family:Consolas'>ndt.ToString(&quot;D&quot;)    // No good! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>is not. Nor is: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>ndt.ToLongDateString()    // No good! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>If you want to use anything but the default parameterless <i>ToString</i>
method, you need to access the <i>Value</i> property: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:110.0pt;margin-bottom:
7.85pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>ndt.Value.ToString(&quot;D&quot;)
ndt.Value.ToLongDateString() </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>The <i>Nullable</i> structure also overrides the <i>Equals</i>
method. Two objects of the same nullable type are considered equal only if
their <i>HasValue</i> properties are equal, and if <i>HasValue</i> is <i>true</i>,
if their <i>Value</i> properties are equal: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>public struct Nullable&lt;T&gt; where T : struct    // Pure
supposition </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.95pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>{     ...     public override bool Equals(object obj) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:143.2pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        if (obj.GetType() != GetType())            
return false; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        Nullable&lt;T&gt; nt = (Nullable&lt;T&gt;)obj; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:159.75pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>        if (nt.HasValue != HasValue)             return
false; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:.5in;text-indent:0in;line-height:107%'><span style='font-size:10.0pt;
line-height:107%;font-family:Consolas'> </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        return HasValue &amp;&amp; Value.Equals(nt.Value); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>And thats the end of my re-creation of the generic <i>Nullable</i>
structure, and at this point you might wonder why its named <i>Nullable</i>.
Have you seen any <i>null</i> keywords around? <i>Nullable</i> is a structure,
and no instance of a structure can be <i>null</i>, and the underlying type of <i>Nullable</i>
is also a structure. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>So where does <i>null</i> come into the picture? </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>Thats what the C# compiler adds to the equation. I dont
know exactly how much C# gets involved with nullable types, but if you do some
experimentation and look at the CIL, youll see for yourself that an assignment
statement like </p>

<p class=MsoNormal style='margin-top:0in;margin-right:169.4pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:139%'><span style='font-size:
10.0pt;line-height:139%;font-family:Consolas'>Nullable&lt;DateTime&gt; ndt =
null; </span>generates the same CIL as: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>Nullable&lt;DateTime&gt; ndt = new Nullable&lt;DateTime&gt;(); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The object really isnt being set to <i>null</i>! Its
merely being recreated so its </p>

<p class=MsoNormal style='margin-top:0in;margin-right:12.25pt;margin-bottom:
2.05pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'><i>HasValue</i>
property returns <i>false</i>. Similarly, C# treats the expression <span
style='font-size:10.0pt;line-height:152%;font-family:Consolas'>ndt == null </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>as if you really used the code </p>

<p class=MsoNormal style='margin-top:0in;margin-right:10.3pt;margin-bottom:
5.5pt;margin-left:-.75pt;text-indent:.5in'><span style='font-size:10.0pt;
line-height:103%;font-family:Consolas'>!ndt.HasValue </span>and similarly for
code where you use not-equals and <i>null</i>. Basically, the C# compiler lets
you treat the condition where <i>HasValue</i> is <i>null</i> as if the object
itself were <i>null</i>. Even though it obviously isnt. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>The C# compiler also fiddles with less-than and
greater-than comparisons by generating code that calls <i>GetValueOrDefault</i>
on both objects. (But if either but not both of the operands have <i>HasValue</i>
properties of <i>false</i>, any less-than or greater-than comparison returns <i>false</i>.)
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:.55pt;
margin-left:-.25pt'>The C# compiler also simplifies the syntax for defining a
nullable type. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Rather than </p>

<p class=MsoNormal style='margin-top:0in;margin-right:242.7pt;margin-bottom:
.2pt;margin-left:0in;text-indent:.5in;line-height:140%'><span style='font-size:
10.0pt;line-height:140%;font-family:Consolas'>Nullable&lt;DateTime&gt; ndt; </span>you
can use the alias: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime? ndt; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>You dont need to use any of the constructors, properties,
and methods provided by the <i>Nullable</i> class, and you can instead use
simplified C# syntax instead. This statement defines a nullable <i>bool</i> and
sets it to <i>null</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.7pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>bool? nb = null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or you can set it to a non-<i>null</i> value: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>bool? nb = true; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Or you can set it from a non-nullable <i>bool</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>bool? nb = IsEnabled; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>You can test the object against <i>null</i>, and you can
use it in expressions with casting: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (nb != null) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    if ((bool)nb) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        ... // true case </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:341.05pt;margin-bottom:
.2pt;margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;
font-family:Consolas'>    }     else </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    { </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>        ... // false case </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    } </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.15pt;
margin-left:-.25pt'>Notice that you can put a nullable <i>bool</i> in an <i>if</i>
statement directly: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>if (nb)    // Wont work! </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>A new operator has been added to C# to help work with
nullable types. This is the <i>null coalescing operator</i>, which consists of
a pair of question marks. Suppose <i>ndt</i> is a nullable <i>DateTime</i>
object. You can assign an object of type DateTime like this: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>DateTime dt = ndt ?? new DateTime(2007, 1, 1); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>If <i>ndt</i> is not <i>null</i>, then <i>dt</i> is set to <i>ndt.Value</i>.
Otherwise, <i>ndt</i> is set to a <i>DateTime</i> object of January 1, 2007. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>Besides the <i>Nullable</i> generic structure, the <i>System</i>
class also contains a <i>Nullable</i> class. This is a static class that you
can use to compare two objects based on nullable types, and it also has a
static method named <i>GetUnderlyingType</i> that you can use in connection
with reflection. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.35pt;
margin-left:-.25pt'>At first it was believed that nullable types could be
implemented without any changes to the Common Language Runtime. But that proved
not to be the case. Suppose you have a nullable <i>int</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.65pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>int? ni; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:3.45pt;
margin-left:-.25pt'>And then theres code that might set <i>ni</i> to a value
or might set it to <i>null</i>, and then <i>ni</i> is cast to an object of type
<i>object</i>: </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>object obj = ni; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:31.95pt;margin-bottom:
1.8pt;margin-left:35.25pt;text-indent:-.5in;line-height:152%'>Or perhaps this
casting happens when <i>ni</i> is passed to a method <span style='font-size:
10.0pt;line-height:152%;font-family:Consolas'>bool IsNull = TestForNull(ni); </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>and the method is defined with an argument of type <i>object</i>:
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>bool TestForNull(object obj) </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>{ </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:.2pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>    return obj == null; </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2pt;margin-bottom:7.55pt;
margin-left:35.75pt'><span style='font-size:10.0pt;line-height:103%;font-family:
Consolas'>} </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>In either case, a boxing operation occurs, and the way the
CLR works, boxed value types are never <i>null</i>. So even if <i>ni</i> is set
to <i>null</i>, when its cast to <i>obj</i>, <i>obj</i> is non-<i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:.75pt;margin-bottom:5.5pt;
margin-left:-.25pt'>As you might imagine, this behavior was considered
undesirable, so the CLR was changed. Now when an instance of a nullable type is
cast to an object of type <i>object</i>, and the <i>HasValue</i> property is <i>false</i>,
the object of type <i>object</i> will be <i>null</i>. </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.9pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.75pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:4.85pt;
margin-left:0in;text-indent:0in;line-height:107%'> </p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'> </p>

</div>

</body>

</html>
