<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>Regular Expression HOWTO</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.7pt;
	margin-left:47.3pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-.5pt;
	line-height:107%;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;
	color:black;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.3pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:14.5pt;
	font-family:"Calibri",sans-serif;
	color:#20435C;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:.05in;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;
	color:#20435C;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:.9pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:9.0pt;
	font-family:"Times New Roman",serif;
	color:black;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Times New Roman",serif;
	color:black;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri",sans-serif;
	color:#20435C;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri",sans-serif;
	color:#20435C;
	font-weight:bold;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.4pt 1.0in 70.0pt 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:17.95pt;margin-left:0in;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=603 height=1 id="Group 24468"
src="Regular%20Expression%20HOWTO_files/image001.gif"></span></p>

<p class=MsoNormal align=right style='margin:0in;text-align:right;text-indent:
0in'><b><span style='font-size:25.0pt;line-height:107%;font-family:"Calibri",sans-serif'>Regular
Expression HOWTO</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:.05pt;
margin-bottom:28.95pt;margin-left:0in;text-align:right;text-indent:0in'><b><i><span
style='font-size:12.0pt;line-height:107%;font-family:"Calibri",sans-serif'>Release
3.13.2</span></i></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:25.6pt;margin-left:0in;text-align:right;text-indent:0in'><b><span
style='font-size:14.5pt;line-height:107%;font-family:"Calibri",sans-serif'>Guido
van Rossum and the Python development team</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.7pt;
margin-bottom:4.55pt;margin-left:.5pt;text-align:right;line-height:110%'><b><span
style='font-family:"Calibri",sans-serif'>February 15, 2025</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.7pt;
margin-bottom:0in;margin-left:.5pt;text-align:right;line-height:110%'><b><span
style='font-family:"Calibri",sans-serif'>Python Software Foundation</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.7pt;
margin-bottom:20.25pt;margin-left:.5pt;text-align:right;line-height:110%'><b><span
style='font-family:"Calibri",sans-serif'>Email: docs@python.org</span></b></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:3.8pt;margin-left:
-.25pt;text-indent:0in'>Contents</h1>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>Introduction  </span>2</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>Simple Patterns           </span>2</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Matching Characters </span>. . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      2</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Repeating Things      </span>. . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  3</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>Using Regular Expressions      </span>4</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Compiling Regular Expressions </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             4</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>The Backslash Plague              </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Performing Matches </span>. . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    5</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>3.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Module-Level Functions </span>. . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>3.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Compilation Flags </span>. . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     7</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>More Pattern Power  </span>9</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>More Metacharacters                </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      9</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Grouping    </span>. . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         11</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Non-capturing and Named Groups        </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      12</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Lookahead Assertions </span>. . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   13</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>Modifying Strings       </span>14</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Splitting Strings        </span>. . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
.               14</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>5.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Search and Replace  </span>. . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    15</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>Common Problems     </span>16</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>6.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Use String Methods  </span>. . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    17</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>6.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>match() versus search()            </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        17</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>6.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Greedy versus Non-Greedy     </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             17</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt'><span
style='line-height:107%;color:#355F7C'>6.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='color:#355F7C'>Using re.VERBOSE </span>. . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    18</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:2.95pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt'><b><span
style='line-height:107%;color:#355F7C'>7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span></b><b><span style='color:#355F7C'>Feedback       </span>18</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:22.4pt;margin-left:0in;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=603 height=1 id="Group 24469"
src="Regular%20Expression%20HOWTO_files/image001.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:25.4pt;text-align:left'><b>Author</b></p>

<p class=MsoNormal>A.M. Kuchling &lt;<span style='color:#377063'>amk@amk.ca</span>&gt;</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.05pt;margin-left:.1in;text-align:left'><b>Abstract</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:29.95pt;
margin-left:7.95pt'><span style='position:relative;z-index:-1895825408'><span
style='left:0px;position:absolute;left:0px;top:-35px;width:602px;height:73px'><img
width=602 height=73 src="Regular%20Expression%20HOWTO_files/image002.gif"></span></span>This
document is an introductory tutorial to using regular expressions in Python
with the <span style='font-size:9.0pt;line-height:107%'>re </span>module. It
provides a gentler introduction than the corresponding section in the Library
Reference.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Introduction</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Regular expressions (called REs,
or regexes, or regex patterns) are essentially a tiny, highly specialized
programming language embedded inside Python and made available through the <span
style='font-size:9.0pt;line-height:107%'>re </span>module. Using this little
language, you specify the rules for the set of possible strings that you want
to match; this set might contain English sentences, or e-mail addresses, or TeX
commands, or anything you like. You can then ask questions such as Does this
string match the pattern?, or Is there a match for the pattern anywhere in
this string?. You can also use REs to modify a string or to split it apart in
various ways.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Regular expression patterns are
compiled into a series of bytecodes which are then executed by a matching
engine written in C. For advanced use, it may be necessary to pay careful
attention to how the engine will execute a given RE, and write the RE in a
certain way in order to produce bytecode that runs faster. Optimization isnt
covered in this document, because it requires that you have a good
understanding of the matching engines internals.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.35pt;
margin-left:-.25pt'>The regular expression language is relatively small and
restricted, so not all possible string processing tasks can be done using
regular expressions. There are also tasks that <i>can </i>be done with regular
expressions, but the expressions turn out to be very complicated. In these
cases, you may be better off writing Python code to do the processing; while
Python code will be slower than an elaborate regular expression, it will also
probably be more understandable.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Simple
Patterns</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Well start by learning about the
simplest possible regular expressions. Since regular expressions are used to
operate on strings, well begin with the most common task: matching characters.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.25pt;
margin-left:-.25pt'>For a detailed explanation of the computer science
underlying regular expressions (deterministic and nondeterministic finite
automata), you can refer to almost any textbook on writing compilers.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Matching Characters</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Most letters and characters will
simply match themselves. For example, the regular expression <span
style='font-size:9.0pt;line-height:107%'>test </span>will match the string <span
style='font-size:9.0pt;line-height:107%'>test </span>exactly. (You can enable a
case-insensitive mode that would let this RE match <span style='font-size:9.0pt;
line-height:107%'>Test </span>or <span style='font-size:9.0pt;line-height:107%'>TEST
</span>as well; more about this later.)</p>

<p class=MsoNormal style='margin-left:-.25pt'>There are exceptions to this
rule; some characters are special <i>metacharacters</i>, and dont match
themselves. Instead, they signal that some out-of-the-ordinary thing should be
matched, or they affect other portions of the RE by repeating them or changing
their meaning. Much of this document is devoted to discussing various metacharacters
and what they do.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Heres a complete list of the metacharacters; their
meanings will be discussed in the rest of this HOWTO.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=25 src="Regular%20Expression%20HOWTO_files/image003.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The first metacharacters well
look at are <span style='font-size:9.0pt;line-height:107%'>[ </span>and <span
style='font-size:9.0pt;line-height:107%'>]</span>. Theyre used for specifying
a character class, which is a set of characters that you wish to match.
Characters can be listed individually, or a range of characters can be
indicated by giving two characters and separating them by a <span
style='font-size:9.0pt;line-height:107%'>'-'</span>. For example, <span
style='font-size:9.0pt;line-height:107%'>[abc] </span>will match any of the
characters <span style='font-size:9.0pt;line-height:107%'>a</span>, <span
style='font-size:9.0pt;line-height:107%'>b</span>, or <span style='font-size:
9.0pt;line-height:107%'>c</span>; this is the same as <span style='font-size:
9.0pt;line-height:107%'>[a-c]</span>, which uses a range to express the same
set of characters. If you wanted to match only lowercase letters, your RE would
be <span style='font-size:9.0pt;line-height:107%'>[a-z]</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Metacharacters (except <span
style='font-size:9.0pt;line-height:107%'>\</span>) are not active inside
classes. For example, <span style='font-size:9.0pt;line-height:107%'>[akm$] </span>will
match any of the characters <span style='font-size:9.0pt;line-height:107%'>'a'</span>,
<span style='font-size:9.0pt;line-height:107%'>'k'</span>, <span
style='font-size:9.0pt;line-height:107%'>'m'</span>, or <span style='font-size:
9.0pt;line-height:107%'>'$'</span>; <span style='font-size:9.0pt;line-height:
107%'>'$' </span>is usually a metacharacter, but inside a character class its
stripped of its special nature.</p>

<p class=MsoNormal style='margin-left:-.25pt'>You can match the characters not
listed within the class by <i>complementing </i>the set. This is indicated by
including a <span style='font-size:9.0pt;line-height:107%'>'^' </span>as the
first character of the class. For example, <span style='font-size:9.0pt;
line-height:107%'>[^5] </span>will match any character except <span
style='font-size:9.0pt;line-height:107%'>'5'</span>. If the caret appears
elsewhere in a character class, it does not have special meaning. For example: <span
style='font-size:9.0pt;line-height:107%'>[5^] </span>will match either a <span
style='font-size:9.0pt;line-height:107%'>'5' </span>or a <span
style='font-size:9.0pt;line-height:107%'>'^'</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Perhaps the most important
metacharacter is the backslash, <span style='font-size:9.0pt;line-height:107%'>\</span>.
As in Python string literals, the backslash can be followed by various
characters to signal various special sequences. Its also used to escape all
the metacharacters so you can still match them in patterns; for example, if you
need to match a <span style='font-size:9.0pt;line-height:107%'>[ </span>or <span
style='font-size:9.0pt;line-height:107%'>\</span>, you can precede them with a
backslash to remove their special meaning: <span style='font-size:9.0pt;
line-height:107%'>\[ </span>or <span style='font-size:9.0pt;line-height:107%'>\\</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Some of the special sequences
beginning with <span style='font-size:9.0pt;line-height:107%'>'\' </span>represent
predefined sets of characters that are often useful, such as the set of digits,
the set of letters, or the set of anything that isnt whitespace.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Lets take an example: <span
style='font-size:9.0pt;line-height:107%'>\w </span>matches any alphanumeric
character. If the regex pattern is expressed in bytes, this is equivalent to
the class <span style='font-size:9.0pt;line-height:107%'>[a-zA-Z0-9_]</span>.
If the regex pattern is a string, <span style='font-size:9.0pt;line-height:
107%'>\w </span>will match all the characters marked as letters in the Unicode
database provided by the <span style='font-size:9.0pt;line-height:107%'>unicodedata
</span>module. You can use the more restricted definition of <span
style='font-size:9.0pt;line-height:107%'>\w </span>in a string pattern by
supplying the <span style='font-size:9.0pt;line-height:107%'>re.ASCII </span>flag
when compiling the regular expression.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The following list of special
sequences isnt complete. For a complete list of sequences and expanded class
definitions for Unicode string patterns, see the last part of Regular
Expression Syntax in the Standard Library reference. In general, the Unicode
versions match any character thats in the appropriate category in the Unicode
database.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>\d</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches any decimal digit; this
is equivalent to the class <span style='font-size:9.0pt;line-height:107%'>[0-9]</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>\D</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches any non-digit character;
this is equivalent to the class <span style='font-size:9.0pt;line-height:107%'>[^0-9]</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>\s</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches any whitespace character;
this is equivalent to the class <span style='font-size:9.0pt;line-height:107%'>[
\t\n\r\f\v]</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>\S</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches any non-whitespace
character; this is equivalent to the class <span style='font-size:9.0pt;
line-height:107%'>[^ \t\n\r\f\v]</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>\w</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches any alphanumeric
character; this is equivalent to the class <span style='font-size:9.0pt;
line-height:107%'>[a-zA-Z0-9_]</span>.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt'>\W</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Matches any non-alphanumeric
character; this is equivalent to the class <span style='font-size:9.0pt;
line-height:107%'>[^a-zA-Z0-9_]</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>These sequences can be included
inside a character class. For example, <span style='font-size:9.0pt;line-height:
107%'>[\s,.] </span>is a character class that will match any whitespace
character, or <span style='font-size:9.0pt;line-height:107%'>',' </span>or <span
style='font-size:9.0pt;line-height:107%'>'.'</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.7pt;
margin-left:-.25pt'>The final metacharacter in this section is <span
style='font-size:9.0pt;line-height:107%'>.</span>. It matches anything except a
newline character, and theres an alternate mode (<span style='font-size:9.0pt;
line-height:107%'>re.DOTALL</span>) where it will match even a newline. <span
style='font-size:9.0pt;line-height:107%'>. </span>is often used where you want
to match any character.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Repeating Things</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Being able to match varying sets
of characters is the first thing regular expressions can do that isnt already
possible with the methods available on strings. However, if that was the only
additional capability of regexes, they wouldnt be much of an advance. Another
capability is that you can specify that portions of the RE must be repeated a
certain number of times.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The first metacharacter for
repeating things that well look at is <span style='font-size:9.0pt;line-height:
107%'>*</span>. <span style='font-size:9.0pt;line-height:107%'>* </span>doesnt
match the literal character <span style='font-size:9.0pt;line-height:107%'>'*'</span>;
instead, it specifies that the previous character can be matched zero or more
times, instead of exactly once.</p>

<p class=MsoNormal style='margin-left:-.25pt'>For example, <span
style='font-size:9.0pt;line-height:107%'>ca*t </span>will match <span
style='font-size:9.0pt;line-height:107%'>'ct' </span>(0 <span style='font-size:
9.0pt;line-height:107%'>'a' </span>characters), <span style='font-size:9.0pt;
line-height:107%'>'cat' </span>(1 <span style='font-size:9.0pt;line-height:
107%'>'a'</span>), <span style='font-size:9.0pt;line-height:107%'>'caaat' </span>(3
<span style='font-size:9.0pt;line-height:107%'>'a' </span>characters), and so
forth.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Repetitions such as <span
style='font-size:9.0pt;line-height:107%'>* </span>are <i>greedy</i>; when
repeating a RE, the matching engine will try to repeat it as many times as
possible. If later portions of the pattern dont match, the matching engine
will then back up and try again with fewer repetitions.</p>

<p class=MsoNormal style='margin-left:-.25pt'>A step-by-step example will make
this more obvious. Lets consider the expression <span style='font-size:9.0pt;
line-height:107%'>a[bcd]*b</span>. This matches the letter <span
style='font-size:9.0pt;line-height:107%'>'a'</span>, zero or more letters from
the class <span style='font-size:9.0pt;line-height:107%'>[bcd]</span>, and
finally ends with a <span style='font-size:9.0pt;line-height:107%'>'b'</span>.
Now imagine matching this RE against the string <span style='font-size:9.0pt;
line-height:107%'>'abcbd'</span>.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=587
 style='width:439.9pt;margin-left:5.7pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=43 valign=top style='width:32.2pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Step</span></p>
  </td>
  <td width=66 valign=top style='width:49.4pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Matched</span></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Explanation</span></p>
  </td>
 </tr>
 <tr style='height:14.55pt'>
  <td width=43 valign=top style='width:32.2pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>1</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>a</span></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>The <span style='font-size:9.0pt;line-height:107%'>a </span>in the RE
  matches.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=43 valign=top style='width:32.2pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>2</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>abcbd</span></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>The engine matches <span style='font-size:9.0pt;line-height:107%'>[bcd]*</span>,
  going as far as it can, which is to the end of the string.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=43 valign=top style='width:32.2pt;background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>3</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><i>Failure</i></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;background:#EBEBEB;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>The engine tries to match <span style='font-size:9.0pt;line-height:107%'>b</span>,
  but the current position is at the end of the string, so it fails.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=43 valign=top style='width:32.2pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>4</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>abcb</span></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Back up, so that <span style='font-size:9.0pt;line-height:107%'>[bcd]* </span>matches
  one less character.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=43 valign=top style='width:32.2pt;background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>5</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><i>Failure</i></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;background:#EBEBEB;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Try <span style='font-size:9.0pt;line-height:107%'>b </span>again, but
  the current position is at the last character, which is a <span
  style='font-size:9.0pt;line-height:107%'>'d'</span>.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=43 valign=top style='width:32.2pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>6</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>abc</span></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Back up again, so that <span style='font-size:9.0pt;line-height:107%'>[bcd]*
  </span>is only matching <span style='font-size:9.0pt;line-height:107%'>bc</span>.</p>
  </td>
 </tr>
 <tr style='height:13.15pt'>
  <td width=43 valign=top style='width:32.2pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'>6</p>
  </td>
  <td width=66 valign=top style='width:49.4pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>abcb</span></p>
  </td>
  <td width=478 valign=top style='width:358.3pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Try <span style='font-size:9.0pt;line-height:107%'>b </span>again. This
  time the character at the current position is <span style='font-size:9.0pt;
  line-height:107%'>'b'</span>, so it succeeds.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-left:-.25pt'>The end of the RE has now been
reached, and it has matched <span style='font-size:9.0pt;line-height:107%'>'abcb'</span>.
This demonstrates how the matching engine goes as far as it can at first, and
if no match is found it will then progressively back up and retry the rest of
the RE again and again. It will back up until it has tried zero matches for <span
style='font-size:9.0pt;line-height:107%'>[bcd]*</span>, and if that
subsequently fails, the engine will conclude that the string doesnt match the
RE at all.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Another repeating metacharacter
is <span style='font-size:9.0pt;line-height:107%'>+</span>, which matches one
or more times. Pay careful attention to the difference between <span
style='font-size:9.0pt;line-height:107%'>* </span>and <span style='font-size:
9.0pt;line-height:107%'>+</span>; <span style='font-size:9.0pt;line-height:
107%'>* </span>matches <i>zero </i>or more times, so whatevers being repeated
may not be present at all, while <span style='font-size:9.0pt;line-height:107%'>+
</span>requires at least <i>one </i>occurrence. To use a similar example, <span
style='font-size:9.0pt;line-height:107%'>ca+t </span>will match <span
style='font-size:9.0pt;line-height:107%'>'cat' </span>(1 <span
style='font-size:9.0pt;line-height:107%'>'a'</span>), <span style='font-size:
9.0pt;line-height:107%'>'caaat' </span>(3 <span style='font-size:9.0pt;
line-height:107%'>'a'</span>s), but wont match <span style='font-size:9.0pt;
line-height:107%'>'ct'</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>There are two more repeating
operators or quantifiers. The question mark character, <span style='font-size:
9.0pt;line-height:107%'>?</span>, matches either once or zero times; you can
think of it as marking something as being optional. For example, <span
style='font-size:9.0pt;line-height:107%'>home-?brew </span>matches either <span
style='font-size:9.0pt;line-height:107%'>'homebrew' </span>or <span
style='font-size:9.0pt;line-height:107%'>'home-brew'</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The most complicated quantifier
is <span style='font-size:9.0pt;line-height:107%'>{m,n}</span>, where <i>m </i>and
<i>n </i>are decimal integers. This quantifier means there must be at least <i>m
</i>repetitions, and at most <i>n</i>. For example, <span style='font-size:
9.0pt;line-height:107%'>a/{1,3}b </span>will match <span style='font-size:9.0pt;
line-height:107%'>'a/b'</span>, <span style='font-size:9.0pt;line-height:107%'>'a//b'</span>,
and <span style='font-size:9.0pt;line-height:107%'>'a///b'</span>. It wont
match <span style='font-size:9.0pt;line-height:107%'>'ab'</span>, which has no
slashes, or <span style='font-size:9.0pt;line-height:107%'>'a////b'</span>,
which has four.</p>

<p class=MsoNormal style='margin-left:-.25pt'>You can omit either <i>m </i>or <i>n</i>;
in that case, a reasonable value is assumed for the missing value. Omitting <i>m
</i>is interpreted as a lower limit of 0, while omitting <i>n </i>results in an
upper bound of infinity.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The simplest case <span
style='font-size:9.0pt;line-height:107%'>{m} </span>matches the preceding item
exactly <i>m </i>times. For example, <span style='font-size:9.0pt;line-height:
107%'>a/{2}b </span>will only match <span style='font-size:9.0pt;line-height:
107%'>'a//b'</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.4pt;
margin-left:-.25pt'>Readers of a reductionist bent may notice that the three
other quantifiers can all be expressed using this notation. <span
style='font-size:9.0pt;line-height:107%'>{0,} </span>is the same as <span
style='font-size:9.0pt;line-height:107%'>*</span>, <span style='font-size:9.0pt;
line-height:107%'>{1,} </span>is equivalent to <span style='font-size:9.0pt;
line-height:107%'>+</span>, and <span style='font-size:9.0pt;line-height:107%'>{0,1}
</span>is the same as <span style='font-size:9.0pt;line-height:107%'>?</span>.
Its better to use <span style='font-size:9.0pt;line-height:107%'>*</span>, <span
style='font-size:9.0pt;line-height:107%'>+</span>, or <span style='font-size:
9.0pt;line-height:107%'>? </span>when you can, simply because theyre shorter
and easier to read.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Using
Regular Expressions</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.3pt;
margin-left:-.25pt'>Now that weve looked at some simple regular expressions,
how do we actually use them in Python? The <span style='font-size:9.0pt;
line-height:107%'>re </span>module provides an interface to the regular
expression engine, allowing you to compile REs into objects and then perform
matches with them.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Compiling Regular Expressions</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Regular expressions are compiled into pattern objects,
which have methods for various operations such as searching for pattern matches
or performing string substitutions.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=73 src="Regular%20Expression%20HOWTO_files/image004.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'><span style='font-size:9.0pt;line-height:107%'>re.compile()
</span>also accepts an optional <i>flags </i>argument, used to enable various
special features and syntax variations. Well go over the available settings
later, but for now a single example will do:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=25 src="Regular%20Expression%20HOWTO_files/image005.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The RE is passed to <span
style='font-size:9.0pt;line-height:107%'>re.compile() </span>as a string. REs
are handled as strings because regular expressions arent part of the core
Python language, and no special syntax was created for expressing them. (There
are applications that dont need REs at all, so theres no need to bloat the
language specification by including them.) Instead, the <span style='font-size:
9.0pt;line-height:107%'>re </span>module is simply a C extension module
included with Python, just like the <span style='font-size:9.0pt;line-height:
107%'>socket </span>or <span style='font-size:9.0pt;line-height:107%'>zlib </span>modules.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.3pt;
margin-left:-.25pt'>Putting REs in strings keeps the Python language simpler,
but has one disadvantage which is the topic of the next section.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>The Backslash Plague</h2>

<p class=MsoNormal style='margin-left:-.25pt'>As stated earlier, regular
expressions use the backslash character (<span style='font-size:9.0pt;
line-height:107%'>'\'</span>) to indicate special forms or to allow special
characters to be used without invoking their special meaning. This conflicts
with Pythons usage of the same character for the same purpose in string
literals.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Lets say you want to write a RE
that matches the string <span style='font-size:9.0pt;line-height:107%'>\section</span>,
which might be found in a LaTeX file. To figure out what to write in the
program code, start with the desired string to be matched. Next, you must
escape any backslashes and other metacharacters by preceding them with a
backslash, resulting in the string <span style='font-size:9.0pt;line-height:
107%'>\\section</span>. The resulting string that must be passed to <span
style='font-size:9.0pt;line-height:107%'>re.compile() </span>must be <span
style='font-size:9.0pt;line-height:107%'>\\section</span>. However, to express
this as a Python string literal, both backslashes must be escaped <i>again</i>.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=330
 style='width:247.4pt;margin-left:101.95pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=109 valign=top style='width:82.0pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Characters</span></p>
  </td>
  <td width=221 valign=top style='width:165.4pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Stage</span></p>
  </td>
 </tr>
 <tr style='height:14.55pt'>
  <td width=109 valign=top style='width:82.0pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>\section</span></p>
  </td>
  <td width=221 valign=top style='width:165.4pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Text string to be matched</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=109 valign=top style='width:82.0pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>\\section</span></p>
  </td>
  <td width=221 valign=top style='width:165.4pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Escaped backslash for <span style='font-size:9.0pt;line-height:107%'>re.compile()</span></p>
  </td>
 </tr>
 <tr style='height:13.15pt'>
  <td width=109 valign=top style='width:82.0pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>&quot;\\\\section&quot;</span></p>
  </td>
  <td width=221 valign=top style='width:165.4pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Escaped backslashes for a string literal</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-left:-.25pt'>In short, to match a literal
backslash, one has to write <span style='font-size:9.0pt;line-height:107%'>'\\\\'
</span>as the RE string, because the regular expression must be <span
style='font-size:9.0pt;line-height:107%'>\\</span>, and each backslash must be
expressed as <span style='font-size:9.0pt;line-height:107%'>\\ </span>inside a
regular Python string literal. In REs that feature backslashes repeatedly, this
leads to lots of repeated backslashes and makes the resulting strings difficult
to understand.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The solution is to use Pythons
raw string notation for regular expressions; backslashes are not handled in any
special way in a string literal prefixed with <span style='font-size:9.0pt;
line-height:107%'>'r'</span>, so <span style='font-size:9.0pt;line-height:107%'>r&quot;\n&quot;
</span>is a two-character string containing <span style='font-size:9.0pt;
line-height:107%'>'\' </span>and <span style='font-size:9.0pt;line-height:107%'>'n'</span>,
while <span style='font-size:9.0pt;line-height:107%'>&quot;\n&quot; </span>is a
one-character string containing a newline. Regular expressions will often be
written in Python code using this raw string notation.</p>

<p class=MsoNormal style='margin-left:-.25pt'>In addition, special escape
sequences that are valid in regular expressions, but not valid as Python string
literals, now result in a <span style='font-size:9.0pt;line-height:107%'>DeprecationWarning
</span>and will eventually become a <span style='font-size:9.0pt;line-height:
107%'>SyntaxError</span>, which means the sequences will be invalid if raw
string notation or escaping the backslashes isnt used.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=211
 style='width:158.6pt;margin-left:146.35pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=109 valign=top style='width:82.0pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:1.2pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Regular String</span></p>
  </td>
  <td width=102 valign=top style='width:76.6pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:1.2pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Raw string</span></p>
  </td>
 </tr>
 <tr style='height:14.55pt'>
  <td width=109 valign=top style='width:82.0pt;border:none;background:#EBEBEB;
  padding:1.2pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>&quot;ab*&quot;</span></p>
  </td>
  <td width=102 valign=top style='width:76.6pt;border:none;background:#EBEBEB;
  padding:1.2pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>r&quot;ab*&quot;</span></p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=109 valign=top style='width:82.0pt;background:#FAFAFA;padding:1.2pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>&quot;\\\\section&quot;</span></p>
  </td>
  <td width=102 valign=top style='width:76.6pt;background:#FAFAFA;padding:1.2pt 5.75pt 0in 6.0pt;
  height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>r&quot;\\section&quot;</span></p>
  </td>
 </tr>
 <tr style='height:13.15pt'>
  <td width=109 valign=top style='width:82.0pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:1.2pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>&quot;\\w+\\s+\\1&quot;</span></p>
  </td>
  <td width=102 valign=top style='width:76.6pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:1.2pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-size:9.0pt;line-height:107%'>r&quot;\w+\s+\1&quot;</span></p>
  </td>
 </tr>
</table>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Performing Matches</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Once you have an object
representing a compiled regular expression, what do you do with it? Pattern
objects have several methods and attributes. Only the most significant ones
will be covered here; consult the <span style='font-size:9.0pt;line-height:
107%'>re </span>docs for a complete listing.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=512
 style='width:383.95pt;margin-left:33.65pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=111 valign=top style='width:83.55pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Method/Attribute</span></p>
  </td>
  <td width=400 valign=top style='width:300.35pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Purpose</span></p>
  </td>
 </tr>
 <tr style='height:14.55pt'>
  <td width=111 valign=top style='width:83.55pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>match()</span></p>
  </td>
  <td width=400 valign=top style='width:300.35pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Determine if the RE matches at the beginning of the string.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=111 valign=top style='width:83.55pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>search()</span></p>
  </td>
  <td width=400 valign=top style='width:300.35pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Scan through a string, looking for any location where this RE matches.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=111 valign=top style='width:83.55pt;background:#EBEBEB;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>findall()</span></p>
  </td>
  <td width=400 valign=top style='width:300.35pt;background:#EBEBEB;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Find all substrings where the RE matches, and returns them as a list.</p>
  </td>
 </tr>
 <tr style='height:13.15pt'>
  <td width=111 valign=top style='width:83.55pt;border:none;border-bottom:solid black 1.0pt;
  background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>finditer()</span></p>
  </td>
  <td width=400 valign=top style='width:300.35pt;border:none;border-bottom:
  solid black 1.0pt;background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;
  height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Find all substrings where the RE matches, and returns them as an
  iterator.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-left:-.25pt'><span style='font-size:9.0pt;
line-height:107%'>match() </span>and <span style='font-size:9.0pt;line-height:
107%'>search() </span>return <span style='font-size:9.0pt;line-height:107%'>None
</span>if no match can be found. If theyre successful, a match object instance
is returned, containing information about the match: where it starts and ends,
the substring it matched, and more.</p>

<p class=MsoNormal style='margin-left:-.25pt'>You can learn about this by
interactively experimenting with the <span style='font-size:9.0pt;line-height:
107%'>re </span>module.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>This HOWTO uses the standard Python interpreter for its
examples. First, run the Python interpreter, import the <span style='font-size:
9.0pt;line-height:107%'>re </span>module, and compile a RE:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=73 src="Regular%20Expression%20HOWTO_files/image006.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.2pt;
margin-left:-.25pt'>Now, you can try matching various strings against the RE <span
style='font-size:9.0pt;line-height:107%'>[a-z]+</span>. An empty string
shouldnt match at all, since <span style='font-size:9.0pt;line-height:107%'>+ </span>means
one or more repetitions. <span style='font-size:9.0pt;line-height:107%'>match()
</span>should return <span style='font-size:9.0pt;line-height:107%'>None </span>in
this case, which will cause the interpreter to print no output. You can
explicitly print the result of <span style='font-size:9.0pt;line-height:107%'>match()
</span>to make this clear.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image007.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Now, lets try it on a string that it should match, such as
<span style='font-size:9.0pt;line-height:107%'>tempo</span>. In this case, <span
style='font-size:9.0pt;line-height:107%'>match() </span>will return a match
object, so you should store the result in a variable for later use.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image008.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Now you can query the match
object for information about the matching string. Match object instances also
have several methods and attributes; the most important ones are:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=458
 style='width:343.75pt;margin-left:53.75pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=111 valign=top style='width:83.55pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Method/Attribute</span></p>
  </td>
  <td width=347 valign=top style='width:260.2pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Purpose</span></p>
  </td>
 </tr>
 <tr style='height:14.55pt'>
  <td width=111 valign=top style='width:83.55pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>group()</span></p>
  </td>
  <td width=347 valign=top style='width:260.2pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Return the string matched by the RE</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=111 valign=top style='width:83.55pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>start()</span></p>
  </td>
  <td width=347 valign=top style='width:260.2pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Return the starting position of the match</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=111 valign=top style='width:83.55pt;background:#EBEBEB;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>end()</span></p>
  </td>
  <td width=347 valign=top style='width:260.2pt;background:#EBEBEB;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Return the ending position of the match</p>
  </td>
 </tr>
 <tr style='height:13.15pt'>
  <td width=111 valign=top style='width:83.55pt;border:none;border-bottom:solid black 1.0pt;
  background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>span()</span></p>
  </td>
  <td width=347 valign=top style='width:260.2pt;border:none;border-bottom:solid black 1.0pt;
  background:#FAFAFA;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Return a tuple containing the (start, end) positions of the match</p>
  </td>
 </tr>
</table>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Trying these methods will soon clarify their meaning:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.15pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=105 src="Regular%20Expression%20HOWTO_files/image009.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:-.25pt'><span style='font-size:9.0pt;line-height:107%'>group() </span>returns
the substring that was matched by the RE. <span style='font-size:9.0pt;
line-height:107%'>start() </span>and <span style='font-size:9.0pt;line-height:
107%'>end() </span>return the starting and ending index of the match. <span
style='font-size:9.0pt;line-height:107%'>span() </span>returns both start and
end indexes in a single tuple. Since the <span style='font-size:9.0pt;
line-height:107%'>match() </span>method only checks if the RE matches at the
start of a string, <span style='font-size:9.0pt;line-height:107%'>start() </span>will
always be zero. However, the <span style='font-size:9.0pt;line-height:107%'>search()
</span>method of patterns scans through the string, so the match may not start
at zero in that case.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=137 src="Regular%20Expression%20HOWTO_files/image010.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>In actual programs, the most
common style is to store the match object in a variable, and then check if it
was <span style='font-size:9.0pt;line-height:107%'>None</span>. This usually
looks like:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=105 src="Regular%20Expression%20HOWTO_files/image011.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Two pattern methods return all of the matches for a
pattern. <span style='font-size:9.0pt;line-height:107%'>findall() </span>returns
a list of matching strings:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=612 height=57 src="Regular%20Expression%20HOWTO_files/image012.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The <span style='font-size:9.0pt;
line-height:107%'>r </span>prefix, making the literal a raw string literal, is
needed in this example because escape sequences in a normal cooked string
literal that are not recognized by Python, as opposed to regular expressions,
now result in a <span style='font-size:9.0pt;line-height:107%'>DeprecationWarning
</span>and will eventually become a <span style='font-size:9.0pt;line-height:
107%'>SyntaxError</span>. See <i><span style='color:#355F7C'>The Backslash
Plague</span></i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'><span style='font-size:9.0pt;line-height:107%'>findall() </span>has
to create the entire list before it can be returned as the result. The <span
style='font-size:9.0pt;line-height:107%'>finditer() </span>method returns a
sequence of match object instances as an iterator:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:18.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=153 src="Regular%20Expression%20HOWTO_files/image013.gif"></span></p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Module-Level Functions</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:-.25pt'>You dont have to create a pattern object and call its
methods; the <span style='font-size:9.0pt;line-height:107%'>re </span>module
also provides top-level functions called <span style='font-size:9.0pt;
line-height:107%'>match()</span>, <span style='font-size:9.0pt;line-height:
107%'>search()</span>, <span style='font-size:9.0pt;line-height:107%'>findall()</span>,
<span style='font-size:9.0pt;line-height:107%'>sub()</span>, and so forth.
These functions take the same arguments as the corresponding pattern method
with the RE string added as the first argument, and still return either <span
style='font-size:9.0pt;line-height:107%'>None </span>or a match object
instance.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=73 src="Regular%20Expression%20HOWTO_files/image014.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Under the hood, these functions
simply create a pattern object for you and call the appropriate method on it.
They also store the compiled object in a cache, so future calls using the same
RE wont need to parse the pattern again and again.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.3pt;
margin-left:-.25pt'>Should you use these module-level functions, or should you
get the pattern and call its methods yourself? If youre accessing a regex
within a loop, pre-compiling it will save a few function calls. Outside of
loops, theres not much difference thanks to the internal cache.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Compilation Flags</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Compilation flags let you modify
some aspects of how regular expressions work. Flags are available in the <span
style='font-size:9.0pt;line-height:107%'>re </span>module under two names, a
long name such as <span style='font-size:9.0pt;line-height:107%'>IGNORECASE </span>and
a short, one-letter form such as <span style='font-size:9.0pt;line-height:107%'>I</span>.
(If youre familiar with Perls pattern modifiers, the one-letter forms use the
same letters; the short form of <span style='font-size:9.0pt;line-height:107%'>re.VERBOSE
</span>is <span style='font-size:9.0pt;line-height:107%'>re.X</span>, for
example.) Multiple flags can be specified by bitwise OR-ing them; <span
style='font-size:9.0pt;line-height:107%'>re.I | re.M </span>sets both the <span
style='font-size:9.0pt;line-height:107%'>I </span>and <span style='font-size:
9.0pt;line-height:107%'>M </span>flags, for example.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Heres a table of the available
flags, followed by a more detailed explanation of each one.</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=602
 style='width:451.5pt;margin-left:-.1pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=134 valign=top style='width:100.2pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.95pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Flag</span></p>
  </td>
  <td width=468 valign=top style='width:351.3pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.95pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Meaning</span></p>
  </td>
 </tr>
 <tr style='height:26.5pt'>
  <td width=134 valign=top style='width:100.2pt;border:none;background:#EBEBEB;
  padding:.4pt 5.95pt 0in 6.0pt;height:26.5pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>ASCII</span>, <span
  style='font-size:9.0pt;line-height:107%'>A</span></p>
  </td>
  <td width=468 valign=top style='width:351.3pt;border:none;background:#EBEBEB;
  padding:.4pt 5.95pt 0in 6.0pt;height:26.5pt'>
  <p class=MsoNormal style='margin:0in;text-indent:0in'>Makes several escapes
  like <span style='font-size:9.0pt;line-height:107%'>\w</span>, <span
  style='font-size:9.0pt;line-height:107%'>\b</span>, <span style='font-size:
  9.0pt;line-height:107%'>\s </span>and <span style='font-size:9.0pt;
  line-height:107%'>\d </span>match only on ASCII characters with the
  respective property.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=134 valign=top style='width:100.2pt;background:#FAFAFA;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>DOTALL</span>, <span
  style='font-size:9.0pt;line-height:107%'>S</span></p>
  </td>
  <td width=468 valign=top style='width:351.3pt;background:#FAFAFA;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Make <span style='font-size:9.0pt;line-height:107%'>. </span>match any
  character, including newlines.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=134 valign=top style='width:100.2pt;background:#EBEBEB;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>IGNORECASE</span>, <span
  style='font-size:9.0pt;line-height:107%'>I</span></p>
  </td>
  <td width=468 valign=top style='width:351.3pt;background:#EBEBEB;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Do case-insensitive matches.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=134 valign=top style='width:100.2pt;background:#FAFAFA;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>LOCALE</span>, <span
  style='font-size:9.0pt;line-height:107%'>L</span></p>
  </td>
  <td width=468 valign=top style='width:351.3pt;background:#FAFAFA;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Do a locale-aware match.</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=134 valign=top style='width:100.2pt;background:#EBEBEB;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>MULTILINE</span>, <span
  style='font-size:9.0pt;line-height:107%'>M</span></p>
  </td>
  <td width=468 valign=top style='width:351.3pt;background:#EBEBEB;padding:
  .4pt 5.95pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Multi-line matching, affecting <span style='font-size:9.0pt;line-height:
  107%'>^ </span>and <span style='font-size:9.0pt;line-height:107%'>$</span>.</p>
  </td>
 </tr>
 <tr style='height:25.1pt'>
  <td width=134 valign=top style='width:100.2pt;border:none;border-bottom:solid black 1.0pt;
  background:#FAFAFA;padding:.4pt 5.95pt 0in 6.0pt;height:25.1pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>VERBOSE</span>, <span
  style='font-size:9.0pt;line-height:107%'>X </span>(for extended)</p>
  </td>
  <td width=468 valign=top style='width:351.3pt;border:none;border-bottom:solid black 1.0pt;
  background:#FAFAFA;padding:.4pt 5.95pt 0in 6.0pt;height:25.1pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Enable verbose REs, which can be organized more cleanly and
  understandably.</p>
  </td>
 </tr>
</table>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt;line-height:139%'><span style='font-weight:normal'>re.</span>I <span
style='font-weight:normal'>re.</span>IGNORECASE</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Perform case-insensitive
matching; character class and literal strings will match letters by ignoring
case. For example, <span style='font-size:9.0pt;line-height:107%'>[A-Z] </span>will
match lowercase letters, too. Full Unicode matching also works unless the <span
style='font-size:9.0pt;line-height:107%'>ASCII </span>flag is used to disable
non-ASCII matches. When the Unicode patterns <span style='font-size:9.0pt;
line-height:107%'>[a-z] </span>or <span style='font-size:9.0pt;line-height:
107%'>[A-Z] </span>are used in combination with the <span style='font-size:
9.0pt;line-height:107%'>IGNORECASE </span>flag, they will match the 52 ASCII
letters and 4 additional non-ASCII letters: &#304; (U+0130, Latin capital
letter I with dot above), &#305; (U+0131, Latin small letter dotless i),
&#383; (U+017F, Latin small letter long s) and &#8490; (U+212A, Kelvin
sign). <span style='font-size:9.0pt;line-height:107%'>Spam </span>will match <span
style='font-size:9.0pt;line-height:107%'>'Spam'</span>, <span style='font-size:
9.0pt;line-height:107%'>'spam'</span>, <span style='font-size:9.0pt;line-height:
107%'>'spAM'</span>, or <span style='font-size:9.0pt;line-height:107%'>'&#383;pam'
</span>(the latter is matched only in Unicode mode). This lowercasing doesnt
take the current locale into account; it will if you also set the <span
style='font-size:9.0pt;line-height:107%'>LOCALE </span>flag.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt;line-height:139%'><span style='font-weight:normal'>re.</span>L <span
style='font-weight:normal'>re.</span>LOCALE</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Make <span style='font-size:9.0pt;
line-height:107%'>\w</span>, <span style='font-size:9.0pt;line-height:107%'>\W</span>,
<span style='font-size:9.0pt;line-height:107%'>\b</span>, <span
style='font-size:9.0pt;line-height:107%'>\B </span>and case-insensitive
matching dependent on the current locale instead of the Unicode database.</p>

<p class=MsoNormal style='margin-left:25.4pt'>Locales are a feature of the C
library intended to help in writing programs that take account of language
differences. For example, if youre processing encoded French text, youd want
to be able to write <span style='font-size:9.0pt;line-height:107%'>\w+ </span>to
match words, but <span style='font-size:9.0pt;line-height:107%'>\w </span>only
matches the character class <span style='font-size:9.0pt;line-height:107%'>[A-Za-z]
</span>in bytes patterns; it wont match bytes corresponding to <span
style='font-size:9.0pt;line-height:107%'>é </span>or <span style='font-size:
9.0pt;line-height:107%'>ç</span>. If your system is configured properly and a
French locale is selected, certain C functions will tell the program that the
byte corresponding to <span style='font-size:9.0pt;line-height:107%'>é </span>should
also be considered a letter. Setting the <span style='font-size:9.0pt;
line-height:107%'>LOCALE </span>flag when compiling a regular expression will
cause the resulting compiled object to use these C functions for <span
style='font-size:9.0pt;line-height:107%'>\w</span>; this is slower, but also
enables <span style='font-size:9.0pt;line-height:107%'>\w+ </span>to match
French words as youd expect. The use of this flag is discouraged in Python 3
as the locale mechanism is very unreliable, it only handles one culture at a
time, and it only works with 8-bit locales. Unicode matching is already enabled
by default in Python 3 for Unicode (str) patterns, and it is able to handle
different locales/languages.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt;line-height:139%'><span style='font-weight:normal'>re.</span>M <span
style='font-weight:normal'>re.</span>MULTILINE</h3>

<p class=MsoNormal style='margin-left:25.4pt'>(<span style='font-size:9.0pt;
line-height:107%'>^ </span>and <span style='font-size:9.0pt;line-height:107%'>$
</span>havent been explained yet; theyll be introduced in section <i><span
style='color:#355F7C'>More Metacharacters</span></i>.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:3.45pt;
margin-left:-.75pt;text-indent:24.9pt'>Usually <span style='font-size:9.0pt;
line-height:107%'>^ </span>matches only at the beginning of the string, and <span
style='font-size:9.0pt;line-height:107%'>$ </span>matches only at the end of
the string and immediately before the newline (if any) at the end of the
string. When this flag is specified, <span style='font-size:9.0pt;line-height:
107%'>^ </span>matches at the beginning of the string and at the beginning of
each line within the string, immediately following each newline. Similarly, the
<span style='font-size:9.0pt;line-height:107%'>$ </span>metacharacter matches
either at the end of the string and at the end of each line (immediately
preceding each newline). <span style='font-size:9.0pt;line-height:107%'>re.<b>S
</b>re.<b>DOTALL</b></span></p>

<p class=MsoNormal style='margin-left:25.4pt'>Makes the <span style='font-size:
9.0pt;line-height:107%'>'.' </span>special character match any character at
all, including a newline; without this flag, <span style='font-size:9.0pt;
line-height:107%'>'.' </span>will match anything <i>except </i>a newline.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:386.75pt;
margin-bottom:1.05pt;margin-left:-.25pt;text-align:left;line-height:139%'><span
style='font-size:9.0pt;line-height:139%'>re.<b>A </b>re.<b>ASCII</b></span></p>

<p class=MsoNormal style='margin-left:25.4pt'>Make <span style='font-size:9.0pt;
line-height:107%'>\w</span>, <span style='font-size:9.0pt;line-height:107%'>\W</span>,
<span style='font-size:9.0pt;line-height:107%'>\b</span>, <span
style='font-size:9.0pt;line-height:107%'>\B</span>, <span style='font-size:
9.0pt;line-height:107%'>\s </span>and <span style='font-size:9.0pt;line-height:
107%'>\S </span>perform ASCII-only matching instead of full Unicode matching.
This is only meaningful for Unicode patterns, and is ignored for byte patterns.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.05pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%'>re.<b>X</b></span></p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:2.95pt;
margin-left:-.25pt'><span style='font-weight:normal'>re.</span>VERBOSE</h3>

<p class=MsoNormal style='margin-left:25.4pt'>This flag allows you to write
regular expressions that are more readable by granting you more flexibility in
how you can format them. When this flag has been specified, whitespace within
the RE string is ignored, except when the whitespace is in a character class or
preceded by an unescaped backslash; this lets you organize and indent the RE
more clearly. This flag also lets you put comments within a RE that will be
ignored by the engine; comments are marked by a <span style='font-size:9.0pt;
line-height:107%'>'#' </span>thats neither in a character class or preceded by
an unescaped backslash.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:25.4pt'>For example, heres a RE that uses <span style='font-size:
9.0pt;line-height:107%'>re.VERBOSE</span>; see how much easier it is to read?</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:21.5pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=578 height=153 src="Regular%20Expression%20HOWTO_files/image015.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:25.4pt'>Without the verbose setting, the RE would look like this:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:21.5pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=578 height=57 src="Regular%20Expression%20HOWTO_files/image016.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.15pt;
margin-left:25.4pt'>In the above example, Pythons automatic concatenation of
string literals has been used to break up the RE into smaller pieces, but its
still more difficult to understand than the version using <span
style='font-size:9.0pt;line-height:107%'>re.VERBOSE</span>.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>More
Pattern Power</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.6pt;
margin-left:-.25pt'>So far weve only covered a part of the features of regular
expressions. In this section, well cover some new metacharacters, and how to
use groups to retrieve portions of the text that was matched.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>4.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>More Metacharacters</h2>

<p class=MsoNormal style='margin-left:-.25pt'>There are some metacharacters
that we havent covered yet. Most of them will be covered in this section.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Some of the remaining
metacharacters to be discussed are <i>zero-width assertions</i>. They dont
cause the engine to advance through the string; instead, they consume no
characters at all, and simply succeed or fail. For example, <span
style='font-size:9.0pt;line-height:107%'>\b </span>is an assertion that the
current position is located at a word boundary; the position isnt changed by
the <span style='font-size:9.0pt;line-height:107%'>\b </span>at all. This means
that zero-width assertions should never be repeated, because if they match once
at a given location, they can obviously be matched an infinite number of times.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>|</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Alternation, or the or
operator. If <i>A </i>and <i>B </i>are regular expressions, <span
style='font-size:9.0pt;line-height:107%'>A|B </span>will match any string that
matches either <i>A </i>or <i>B</i>. <span style='font-size:9.0pt;line-height:
107%'>| </span>has very low precedence in order to make it work reasonably when
youre alternating multicharacter strings. <span style='font-size:9.0pt;
line-height:107%'>Crow|Servo </span>will match either <span style='font-size:
9.0pt;line-height:107%'>'Crow' </span>or <span style='font-size:9.0pt;
line-height:107%'>'Servo'</span>, not <span style='font-size:9.0pt;line-height:
107%'>'Cro'</span>, a <span style='font-size:9.0pt;line-height:107%'>'w' </span>or
an <span style='font-size:9.0pt;line-height:107%'>'S'</span>, and <span
style='font-size:9.0pt;line-height:107%'>'ervo'</span>.</p>

<p class=MsoNormal style='margin-left:25.4pt'>To match a literal <span
style='font-size:9.0pt;line-height:107%'>'|'</span>, use <span
style='font-size:9.0pt;line-height:107%'>\|</span>, or enclose it inside a
character class, as in <span style='font-size:9.0pt;line-height:107%'>[|]</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>^</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches at the beginning of
lines. Unless the <span style='font-size:9.0pt;line-height:107%'>MULTILINE </span>flag
has been set, this will only match at the beginning of the string. In <span
style='font-size:9.0pt;line-height:107%'>MULTILINE </span>mode, this also
matches immediately after each newline within the string.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.05pt;
margin-left:25.4pt'>For example, if you wish to match the word <span
style='font-size:9.0pt;line-height:107%'>From </span>only at the beginning of a
line, the RE to use is <span style='font-size:9.0pt;line-height:107%'>^From</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:25.4pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%;color:#007021'>print</span><span
style='font-size:9.0pt;line-height:112%'>(re</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>search(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>'^From'</span><span style='font-size:9.0pt;line-height:112%'>, </span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'From Here to Eternity'</span><span
style='font-size:9.0pt;line-height:112%'>))</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:25.4pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>&lt;re.Match object;
span=(0, 4), match='From'&gt;</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:119.75pt;
margin-bottom:.65pt;margin-left:25.4pt;text-align:left;line-height:112%'><span
style='position:relative;z-index:-1895824384'><span style='left:0px;position:
absolute;left:28px;top:-38px;width:578px;height:73px'><img width=578 height=73
src="Regular%20Expression%20HOWTO_files/image017.gif"></span></span><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%;color:#007021'>print</span><span
style='font-size:9.0pt;line-height:112%'>(re</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>search(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>'^From'</span><span style='font-size:9.0pt;line-height:112%'>, </span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'Reciting From Memory'</span><span
style='font-size:9.0pt;line-height:112%'>)) </span><span style='font-size:9.0pt;
line-height:112%;color:#333333'>None</span></p>

<p class=MsoNormal style='margin-left:25.4pt'>To match a literal <span
style='font-size:9.0pt;line-height:107%'>'^'</span>, use <span
style='font-size:9.0pt;line-height:107%'>\^</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>$</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:25.4pt'>Matches at the end of a line, which is defined as either
the end of the string, or any location followed by a newline character.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:21.5pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=578 height=105 src="Regular%20Expression%20HOWTO_files/image018.gif"></span></p>

<p class=MsoNormal style='margin-left:25.4pt'>To match a literal <span
style='font-size:9.0pt;line-height:107%'>'$'</span>, use <span
style='font-size:9.0pt;line-height:107%'>\$ </span>or enclose it inside a
character class, as in <span style='font-size:9.0pt;line-height:107%'>[$]</span>.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt'>\A</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Matches only at the start of the
string. When not in <span style='font-size:9.0pt;line-height:107%'>MULTILINE </span>mode,
<span style='font-size:9.0pt;line-height:107%'>\A </span>and <span
style='font-size:9.0pt;line-height:107%'>^ </span>are effectively the same. In <span
style='font-size:9.0pt;line-height:107%'>MULTILINE </span>mode, theyre
different: <span style='font-size:9.0pt;line-height:107%'>\A </span>still
matches only at the beginning of the string, but <span style='font-size:9.0pt;
line-height:107%'>^ </span>may match at any location inside the string that
follows a newline character.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:365.25pt;
margin-bottom:.9pt;margin-left:-.25pt;text-align:left'><b><span
style='font-size:9.0pt;line-height:107%'>\Z</span></b></p>

<p class=MsoNormal style='margin-left:25.4pt'>Matches only at the end of the
string.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt'>\b</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Word boundary. This is a
zero-width assertion that matches only at the beginning or end of a word. A
word is defined as a sequence of alphanumeric characters, so the end of a word
is indicated by whitespace or a non-alphanumeric character.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:25.4pt'>The following example matches <span style='font-size:9.0pt;
line-height:107%'>class </span>only when its a complete word; it wont match
when its contained inside another word.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:21.5pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=578 height=121 src="Regular%20Expression%20HOWTO_files/image019.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:25.4pt'>There are two subtleties you should remember when using
this special sequence. First, this is the worst collision between Pythons
string literals and regular expression sequences. In Pythons string literals, <span
style='font-size:9.0pt;line-height:107%'>\b </span>is the backspace character,
ASCII value 8. If youre not using raw strings, then Python will convert the <span
style='font-size:9.0pt;line-height:107%'>\b </span>to a backspace, and your RE
wont match as you expect it to. The following example looks the same as our
previous RE, but omits the <span style='font-size:9.0pt;line-height:107%'>'r' </span>in
front of the RE string.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:21.5pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=578 height=89 src="Regular%20Expression%20HOWTO_files/image020.gif"></span></p>

<p class=MsoNormal style='margin-left:25.4pt'>Second, inside a character class,
where theres no use for this assertion, <span style='font-size:9.0pt;
line-height:107%'>\b </span>represents the backspace character, for
compatibility with Pythons string literals.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt'>\B</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Another zero-width assertion,
this is the opposite of <span style='font-size:9.0pt;line-height:107%'>\b</span>,
only matching when the current position is not at a word boundary.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>4.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Grouping</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Frequently you need to obtain more information than just
whether the RE matched or not. Regular expressions are often used to dissect
strings by writing a RE divided into several subgroups which match different
components of interest. For example, an RFC-822 header line is divided into a
header name and a value, separated by a <span style='font-size:9.0pt;
line-height:107%'>':'</span>, like this:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=73 src="Regular%20Expression%20HOWTO_files/image021.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>This can be handled by writing a
regular expression which matches an entire header line, and has one group which
matches the header name, and another group which matches the headers value.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
margin-left:-.25pt'>Groups are marked by the <span style='font-size:9.0pt;
line-height:107%'>'('</span>, <span style='font-size:9.0pt;line-height:107%'>')'
</span>metacharacters. <span style='font-size:9.0pt;line-height:107%'>'(' </span>and
<span style='font-size:9.0pt;line-height:107%'>')' </span>have much the same
meaning as they do in mathematical expressions; they group together the
expressions contained inside them, and you can repeat the contents of a group
with a quantifier, such as <span style='font-size:9.0pt;line-height:107%'>*</span>,
<span style='font-size:9.0pt;line-height:107%'>+</span>, <span
style='font-size:9.0pt;line-height:107%'>?</span>, or <span style='font-size:
9.0pt;line-height:107%'>{m,n}</span>. For example, <span style='font-size:9.0pt;
line-height:107%'>(ab)* </span>will match zero or more repetitions of <span
style='font-size:9.0pt;line-height:107%'>ab</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image022.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Groups indicated with <span style='font-size:9.0pt;
line-height:107%'>'('</span>, <span style='font-size:9.0pt;line-height:107%'>')'
</span>also capture the starting and ending index of the text that they match;
this can be retrieved by passing an argument to <span style='font-size:9.0pt;
line-height:107%'>group()</span>, <span style='font-size:9.0pt;line-height:
107%'>start()</span>, <span style='font-size:9.0pt;line-height:107%'>end()</span>,
and <span style='font-size:9.0pt;line-height:107%'>span()</span>. Groups are
numbered starting with 0. Group 0 is always present; its the whole RE, so
match object methods all have group 0 as their default argument. Later well
see how to express groups that dont capture the span of text that they match.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=105 src="Regular%20Expression%20HOWTO_files/image023.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Subgroups are numbered from left to right, from 1 upward.
Groups can be nested; to determine the number, just count the opening
parenthesis characters, going from left to right.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=137 src="Regular%20Expression%20HOWTO_files/image024.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'><span style='font-size:9.0pt;line-height:107%'>group() </span>can
be passed multiple group numbers at a time, in which case it will return a
tuple containing the corresponding values for those groups.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=41 src="Regular%20Expression%20HOWTO_files/image025.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:107%'>groups()
</span>method returns a tuple containing the strings for all the subgroups,
from 1 up to however many there are.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:0in;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=41 src="Regular%20Expression%20HOWTO_files/image026.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Backreferences in a pattern allow
you to specify that the contents of an earlier capturing group must also be
found at the current location in the string. For example, <span
style='font-size:9.0pt;line-height:107%'>\1 </span>will succeed if the exact
contents of group 1 can be found at the current position, and fails otherwise.
Remember that Pythons string literals also use a backslash followed by numbers
to allow including arbitrary characters in a string, so be sure to use a raw
string when incorporating backreferences in a RE.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>For example, the following RE detects doubled words in a
string.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image027.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.6pt;
margin-left:-.25pt'>Backreferences like this arent often useful for just
searching through a string  there are few text formats which repeat data in
this way  but youll soon find out that theyre <i>very </i>useful when
performing string substitutions.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>4.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Non-capturing and Named Groups</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Elaborate REs may use many
groups, both to capture substrings of interest, and to group and structure the
RE itself. In complex REs, it becomes difficult to keep track of the group
numbers. There are two features which help with this problem. Both of them use
a common syntax for regular expression extensions, so well look at that first.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Perl 5 is well known for its
powerful additions to standard regular expressions. For these new features the
Perl developers couldnt choose new single-keystroke metacharacters or new
special sequences beginning with <span style='font-size:9.0pt;line-height:107%'>\
</span>without making Perls regular expressions confusingly different from
standard REs. If they chose <span style='font-size:9.0pt;line-height:107%'>&amp;
</span>as a new metacharacter, for example, old expressions would be assuming
that <span style='font-size:9.0pt;line-height:107%'>&amp; </span>was a regular
character and wouldnt have escaped it by writing <span style='font-size:9.0pt;
line-height:107%'>\&amp; </span>or <span style='font-size:9.0pt;line-height:
107%'>[&amp;]</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The solution chosen by the Perl
developers was to use <span style='font-size:9.0pt;line-height:107%'>(?...) </span>as
the extension syntax. <span style='font-size:9.0pt;line-height:107%'>? </span>immediately
after a parenthesis was a syntax error because the <span style='font-size:9.0pt;
line-height:107%'>? </span>would have nothing to repeat, so this didnt
introduce any compatibility problems. The characters immediately after the <span
style='font-size:9.0pt;line-height:107%'>? </span>indicate what extension is
being used, so <span style='font-size:9.0pt;line-height:107%'>(?=foo) </span>is
one thing (a positive lookahead assertion) and <span style='font-size:9.0pt;
line-height:107%'>(?:foo) </span>is something else (a non-capturing group
containing the subexpression <span style='font-size:9.0pt;line-height:107%'>foo</span>).</p>

<p class=MsoNormal style='margin-left:-.25pt'>Python supports several of Perls
extensions and adds an extension syntax to Perls extension syntax. If the
first character after the question mark is a <span style='font-size:9.0pt;
line-height:107%'>P</span>, you know that its an extension thats specific to
Python.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Now that weve looked at the
general extension syntax, we can return to the features that simplify working
with groups in complex REs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Sometimes youll want to use a group to denote a part of a
regular expression, but arent interested in retrieving the groups contents.
You can make this fact explicit by using a non-capturing group: <span
style='font-size:9.0pt;line-height:107%'>(?:...)</span>, where you can replace
the <span style='font-size:9.0pt;line-height:107%'>... </span>with any other
regular expression.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=105 src="Regular%20Expression%20HOWTO_files/image028.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Except for the fact that you
cant retrieve the contents of what the group matched, a non-capturing group
behaves exactly the same as a capturing group; you can put anything inside it,
repeat it with a repetition metacharacter such as <span style='font-size:9.0pt;
line-height:107%'>*</span>, and nest it within other groups (capturing or
non-capturing). <span style='font-size:9.0pt;line-height:107%'>(?:...) </span>is
particularly useful when modifying an existing pattern, since you can add new
groups without changing how all the other groups are numbered. It should be
mentioned that theres no performance difference in searching between capturing
and non-capturing groups; neither form is any faster than the other.</p>

<p class=MsoNormal style='margin-left:-.25pt'>A more significant feature is
named groups: instead of referring to them by numbers, groups can be referenced
by a name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The syntax for a named group is one of the Python-specific
extensions: <span style='font-size:9.0pt;line-height:107%'>(?P&lt;name&gt;...)</span>.
<i>name </i>is, obviously, the name of the group. Named groups behave exactly
like capturing groups, and additionally associate a name with a group. The
match object methods that deal with capturing groups all accept either integers
that refer to the group by number or strings that contain the desired groups
name. Named groups are still given numbers, so you can retrieve information
about a group in two ways:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=105 src="Regular%20Expression%20HOWTO_files/image029.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Additionally, you can retrieve named groups as a dictionary
with <span style='font-size:9.0pt;line-height:107%'>groupdict()</span>:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image030.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.9pt;
margin-left:-.25pt'>Named groups are handy because they let you use easily
remembered names, instead of having to remember numbers. Heres an example RE
from the <span style='font-size:9.0pt;line-height:107%'>imaplib </span>module:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:144.65pt;
margin-bottom:.65pt;margin-left:42.3pt;text-align:left;text-indent:-43.05pt;
line-height:112%'><span style='font-size:9.0pt;line-height:112%'>InternalDate </span><span
style='font-size:9.0pt;line-height:112%;color:#666666'>= </span><span
style='font-size:9.0pt;line-height:112%'>re</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>compile(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>r'INTERNALDATE &quot;' r'(?P&lt;day&gt;[
123][0-9])-(?P&lt;mon&gt;[A-Z][a-z][a-z])-'
r'(?P&lt;year&gt;[0-9][0-9][0-9][0-9])'</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:13.45pt;margin-left:43.55pt;text-align:left;line-height:112%'><span
style='position:relative;z-index:-1895823360'><span style='left:0px;position:
absolute;left:-5px;top:-54px;width:611px;height:105px'><img width=611
height=105 src="Regular%20Expression%20HOWTO_files/image031.gif"></span></span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>r'
(?P&lt;hour&gt;[0-9][0-9]):(?P&lt;min&gt;[0-9][0-9]):(?P&lt;sec&gt;[0-9][0-9])'
r' (?P&lt;zonen&gt;[-+])(?P&lt;zoneh&gt;[0-9][0-9])(?P&lt;zonem&gt;[0-9][0-9])'
r'&quot;'</span><span style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Its obviously much easier to
retrieve <span style='font-size:9.0pt;line-height:107%'>m.group('zonem')</span>,
instead of having to remember to retrieve group 9.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.25pt;
margin-left:-.25pt'>The syntax for backreferences in an expression such as <span
style='font-size:9.0pt;line-height:107%'>(...)\1 </span>refers to the number of
the group. Theres naturally a variant that uses the group name instead of the
number. This is another Python extension: <span style='font-size:9.0pt;
line-height:107%'>(?P=name) </span>indicates that the contents of the group
called <i>name </i>should again be matched at the current point. The regular
expression for finding doubled words, <span style='font-size:9.0pt;line-height:
107%'>\b(\w+)\s+\1\b </span>can also be written as <span style='font-size:9.0pt;
line-height:107%'>\b(?P&lt;word&gt;\w+)\s+(?P=word)\b</span>:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:18.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image032.gif"></span></p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>4.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Lookahead Assertions</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Another zero-width assertion is
the lookahead assertion. Lookahead assertions are available in both positive
and negative form, and look like this:</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt'>(?=...)</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Positive lookahead assertion.
This succeeds if the contained regular expression, represented here by <span
style='font-size:9.0pt;line-height:107%'>...</span>, successfully matches at
the current location, and fails otherwise. But, once the contained expression
has been tried, the matching engine doesnt advance at all; the rest of the
pattern is tried right where the assertion started.</p>

<h3 style='margin-top:0in;margin-right:365.25pt;margin-bottom:.9pt;margin-left:
-.25pt'>(?!...)</h3>

<p class=MsoNormal style='margin-left:25.4pt'>Negative lookahead assertion.
This is the opposite of the positive assertion; it succeeds if the contained
expression <i>doesnt </i>match at the current position in the string.</p>

<p class=MsoNormal style='margin-left:-.25pt'>To make this concrete, lets look
at a case where a lookahead is useful. Consider a simple pattern to match a
filename and split it apart into a base name and an extension, separated by a <span
style='font-size:9.0pt;line-height:107%'>.</span>. For example, in <span
style='font-size:9.0pt;line-height:107%'>news.rc</span>, <span
style='font-size:9.0pt;line-height:107%'>news </span>is the base name, and <span
style='font-size:9.0pt;line-height:107%'>rc </span>is the filenames extension.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The pattern to match this is
quite simple:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.65pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%'>.*[.].*$</span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Notice that the <span
style='font-size:9.0pt;line-height:107%'>. </span>needs to be treated specially
because its a metacharacter, so its inside a character class to only match
that specific character. Also notice the trailing <span style='font-size:9.0pt;
line-height:107%'>$</span>; this is added to ensure that all the rest of the
string must be included in the extension. This regular expression matches <span
style='font-size:9.0pt;line-height:107%'>foo.bar </span>and <span
style='font-size:9.0pt;line-height:107%'>autoexec.bat </span>and <span
style='font-size:9.0pt;line-height:107%'>sendmail.cf </span>and <span
style='font-size:9.0pt;line-height:107%'>printers.conf</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Now, consider complicating the
problem a bit; what if you want to match filenames where the extension is not <span
style='font-size:9.0pt;line-height:107%'>bat</span>? Some incorrect attempts:</p>

<p class=MsoNormal style='margin-left:-.25pt'><span style='font-size:9.0pt;
line-height:107%'>.*[.][^b].*$ </span>The first attempt above tries to exclude <span
style='font-size:9.0pt;line-height:107%'>bat </span>by requiring that the first
character of the extension is not a <span style='font-size:9.0pt;line-height:
107%'>b</span>. This is wrong, because the pattern also doesnt match <span
style='font-size:9.0pt;line-height:107%'>foo.bar</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.5pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%'>.*[.]([^b]..|.[^a].|..[^t])$</span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The expression gets messier when
you try to patch up the first solution by requiring one of the following cases
to match: the first character of the extension isnt <span style='font-size:
9.0pt;line-height:107%'>b</span>; the second character isnt <span
style='font-size:9.0pt;line-height:107%'>a</span>; or the third character isnt
<span style='font-size:9.0pt;line-height:107%'>t</span>. This accepts <span
style='font-size:9.0pt;line-height:107%'>foo.bar </span>and rejects <span
style='font-size:9.0pt;line-height:107%'>autoexec.bat</span>, but it requires a
three-letter extension and wont accept a filename with a two-letter extension
such as <span style='font-size:9.0pt;line-height:107%'>sendmail.cf</span>.
Well complicate the pattern again in an effort to fix it.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.5pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%'>.*[.]([^b].?.?|.[^a]?.?|..?[^t]?)$</span></p>

<p class=MsoNormal style='margin-left:-.25pt'>In the third attempt, the second
and third letters are all made optional in order to allow matching extensions
shorter than three characters, such as <span style='font-size:9.0pt;line-height:
107%'>sendmail.cf</span>.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The patterns getting really
complicated now, which makes it hard to read and understand. Worse, if the
problem changes and you want to exclude both <span style='font-size:9.0pt;
line-height:107%'>bat </span>and <span style='font-size:9.0pt;line-height:107%'>exe
</span>as extensions, the pattern would get even more complicated and
confusing.</p>

<p class=MsoNormal style='margin-left:-.25pt'>A negative lookahead cuts through
all this confusion:</p>

<p class=MsoNormal style='margin-left:-.25pt'><span style='font-size:9.0pt;
line-height:107%'>.*[.](?!bat$)[^.]*$ </span>The negative lookahead means: if
the expression <span style='font-size:9.0pt;line-height:107%'>bat </span>doesnt
match at this point, try the rest of the pattern; if <span style='font-size:
9.0pt;line-height:107%'>bat$ </span>does match, the whole pattern will fail.
The trailing <span style='font-size:9.0pt;line-height:107%'>$ </span>is
required to ensure that something like <span style='font-size:9.0pt;line-height:
107%'>sample.batch</span>, where the extension only starts with <span
style='font-size:9.0pt;line-height:107%'>bat</span>, will be allowed. The <span
style='font-size:9.0pt;line-height:107%'>[^.]* </span>makes sure that the
pattern works when there are multiple dots in the filename.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Excluding another filename
extension is now easy; simply add it as an alternative inside the assertion.
The following pattern excludes filenames that end in either <span
style='font-size:9.0pt;line-height:107%'>bat </span>or <span style='font-size:
9.0pt;line-height:107%'>exe</span>:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:22.4pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%'>.*[.](?!bat$|exe$)[^.]*$</span></p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Modifying
Strings</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Up to this point, weve simply
performed searches against a static string. Regular expressions are also
commonly used to modify strings in various ways, using the following pattern
methods:</p>

<table class=TableGrid border=0 cellspacing=0 cellpadding=0 width=598
 style='width:448.8pt;margin-left:1.25pt;border-collapse:collapse'>
 <tr style='height:16.3pt'>
  <td width=111 valign=top style='width:83.55pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-family:"Calibri",sans-serif'>Method/Attribute</span></p>
  </td>
  <td width=487 valign=top style='width:365.2pt;border-top:solid #DBDBDB 3.0pt;
  border-left:none;border-bottom:solid #EBEBEB 3.0pt;border-right:none;
  background:#DBDBDB;padding:.4pt 5.75pt 0in 6.0pt;height:16.3pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'><span style='font-family:"Calibri",sans-serif'>Purpose</span></p>
  </td>
 </tr>
 <tr style='height:14.55pt'>
  <td width=111 valign=top style='width:83.55pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>split()</span></p>
  </td>
  <td width=487 valign=top style='width:365.2pt;border:none;background:#EBEBEB;
  padding:.4pt 5.75pt 0in 6.0pt;height:14.55pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Split the string into a list, splitting it wherever the RE matches</p>
  </td>
 </tr>
 <tr style='height:11.95pt'>
  <td width=111 valign=top style='width:83.55pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>sub()</span></p>
  </td>
  <td width=487 valign=top style='width:365.2pt;background:#FAFAFA;padding:
  .4pt 5.75pt 0in 6.0pt;height:11.95pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Find all substrings where the RE matches, and replace them with a
  different string</p>
  </td>
 </tr>
 <tr style='height:13.15pt'>
  <td width=111 valign=top style='width:83.55pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
  margin-bottom:0in;margin-left:.1pt;text-align:left;text-indent:0in'><span
  style='font-size:9.0pt;line-height:107%'>subn()</span></p>
  </td>
  <td width=487 valign=top style='width:365.2pt;border:none;border-bottom:solid black 1.0pt;
  background:#EBEBEB;padding:.4pt 5.75pt 0in 6.0pt;height:13.15pt'>
  <p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
  0in'>Does the same thing as <span style='font-size:9.0pt;line-height:107%'>sub()</span>,
  but returns the new string and the number of replacements</p>
  </td>
 </tr>
</table>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>5.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Splitting Strings</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.25pt;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:107%'>split() </span>method
of a pattern splits a string apart wherever the RE matches, returning a list of
the pieces. Its similar to the <span style='font-size:9.0pt;line-height:107%'>split()
</span>method of strings but provides much more generality in the delimiters
that you can split by; string <span style='font-size:9.0pt;line-height:107%'>split()
</span>only supports splitting by whitespace or by a fixed string. As youd
expect, theres a module-level <span style='font-size:9.0pt;line-height:107%'>re.split()
</span>function, too.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:-.25pt;text-align:left'><span style='font-size:
9.0pt;line-height:107%'>.<b>split</b>(</span><i>string</i><span
style='font-size:14.5pt;line-height:107%'>[</span>, <i>maxsplit=0 </i><span
style='font-size:14.5pt;line-height:107%'>]</span><span style='font-size:9.0pt;
line-height:107%'>)</span></p>

<p class=MsoNormal style='margin-left:25.4pt'>Split <i>string </i>by the
matches of the regular expression. If capturing parentheses are used in the RE,
then their contents will also be returned as part of the resulting list. If <i>maxsplit
</i>is nonzero, at most <i>maxsplit </i>splits are performed.</p>

<p class=MsoNormal style='margin-left:-.25pt'>You can limit the number of
splits made, by passing a value for <i>maxsplit</i>. When <i>maxsplit </i>is
nonzero, at most <i>maxsplit </i>splits will be made, and the remainder of the
string is returned as the final element of the list. In the following example,
the delimiter is any sequence of non-alphanumeric characters.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.05pt;margin-left:-.25pt;text-align:left;line-height:110%'><b><span
style='font-size:9.0pt;line-height:110%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:110%'>p </span><span style='font-size:9.0pt;
line-height:110%;color:#666666'>= </span><span style='font-size:9.0pt;
line-height:110%'>re</span><span style='font-size:9.0pt;line-height:110%;
color:#666666'>.</span><span style='font-size:9.0pt;line-height:110%'>compile(</span><span
style='font-size:9.0pt;line-height:110%;color:#4070A1'>r'\W+'</span><span
style='font-size:9.0pt;line-height:110%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>p</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>split(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>'This is a test, short and sweet, of split().'</span><span
style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='position:relative;z-index:-1895822336'><span style='left:0px;position:
absolute;left:-5px;top:-38px;width:611px;height:89px'><img width=611 height=89
src="Regular%20Expression%20HOWTO_files/image033.gif"></span></span><span
style='font-size:9.0pt;line-height:110%;color:#333333'>['This', 'is', 'a',
'test', 'short', 'and', 'sweet', 'of', 'split', '']</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>p</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>split(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>'This is a test, short and sweet, of split().'</span><span
style='font-size:9.0pt;line-height:112%'>, </span><span style='font-size:9.0pt;
line-height:112%;color:#217F4F'>3</span><span style='font-size:9.0pt;
line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:13.45pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>['This', 'is', 'a',
'test, short and sweet, of split().']</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Sometimes youre not only interested in what the text
between delimiters is, but also need to know what the delimiter was. If
capturing parentheses are used in the RE, then their values are also returned
as part of the list. Compare the following calls:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=105 src="Regular%20Expression%20HOWTO_files/image034.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.85pt;
margin-left:-.25pt'>The module-level function <span style='font-size:9.0pt;
line-height:107%'>re.split() </span>adds the RE to be used as the first
argument, but is otherwise the same.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>re</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>split(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>r'[\W]+'</span><span style='font-size:9.0pt;line-height:112%'>, </span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'Words, words, words.'</span><span
style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>['Words', 'words',
'words', '']</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>re</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>split(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>r'([\W]+)'</span><span style='font-size:9.0pt;line-height:112%'>,
</span><span style='font-size:9.0pt;line-height:112%;color:#4070A1'>'Words,
words, words.'</span><span style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>['Words', ', ', 'words',
', ', 'words', '.', '']</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><span
style='position:relative;z-index:-1895821312'><span style='left:0px;position:
absolute;left:-5px;top:-70px;width:611px;height:105px'><img width=611
height=105 src="Regular%20Expression%20HOWTO_files/image031.gif"></span></span><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>re</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>split(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>r'[\W]+'</span><span style='font-size:9.0pt;line-height:112%'>, </span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'Words, words, words.'</span><span
style='font-size:9.0pt;line-height:112%'>, </span><span style='font-size:9.0pt;
line-height:112%;color:#217F4F'>1</span><span style='font-size:9.0pt;
line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:24.25pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>['Words', 'words,
words.']</span></p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>5.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Search and Replace</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.95pt;
margin-left:-.25pt'>Another common task is to find all the matches for a
pattern, and replace them with a different string. The <span style='font-size:
9.0pt;line-height:107%'>sub() </span>method takes a replacement value, which
can be either a string or a function, and the string to be processed.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:-.25pt;text-align:left'><span style='font-size:
9.0pt;line-height:107%'>.<b>sub</b>(</span><i>replacement</i>, <i>string</i><span
style='font-size:14.5pt;line-height:107%'>[</span>, <i>count=0 </i><span
style='font-size:14.5pt;line-height:107%'>]</span><span style='font-size:9.0pt;
line-height:107%'>)</span></p>

<p class=MsoNormal style='margin-left:25.4pt'>Returns the string obtained by
replacing the leftmost non-overlapping occurrences of the RE in <i>string </i>by
the replacement <i>replacement</i>. If the pattern isnt found, <i>string </i>is
returned unchanged.</p>

<p class=MsoNormal style='margin-left:25.4pt'>The optional argument <i>count </i>is
the maximum number of pattern occurrences to be replaced; <i>count </i>must be
a non-negative integer. The default value of 0 means to replace all
occurrences.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.85pt;
margin-left:-.25pt'>Heres a simple example of using the <span
style='font-size:9.0pt;line-height:107%'>sub() </span>method. It replaces
colour names with the word <span style='font-size:9.0pt;line-height:107%'>colour</span>:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>p </span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>= </span><span style='font-size:9.0pt;
line-height:112%'>re</span><span style='font-size:9.0pt;line-height:112%;
color:#666666'>.</span><span style='font-size:9.0pt;line-height:112%'>compile(</span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'(blue|white|red)'</span><span
style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>p</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>sub(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>'colour'</span><span style='font-size:9.0pt;line-height:112%'>, </span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'blue socks and red
shoes'</span><span style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>'colour socks and colour
shoes'</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><span
style='position:relative;z-index:-1895820288'><span style='left:0px;position:
absolute;left:-5px;top:-54px;width:611px;height:89px'><img width=611 height=89
src="Regular%20Expression%20HOWTO_files/image033.gif"></span></span><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>p</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>sub(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>'colour'</span><span style='font-size:9.0pt;line-height:112%'>, </span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'blue socks and red
shoes'</span><span style='font-size:9.0pt;line-height:112%'>, count</span><span
style='font-size:9.0pt;line-height:112%;color:#666666'>=</span><span
style='font-size:9.0pt;line-height:112%;color:#217F4F'>1</span><span
style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:13.7pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>'colour socks and red
shoes'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:107%'>subn() </span>method
does the same work, but returns a 2-tuple containing the new string value and
the number of replacements that were performed:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=89 src="Regular%20Expression%20HOWTO_files/image035.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Empty matches are replaced only
when theyre not adjacent to a previous empty match.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=57 src="Regular%20Expression%20HOWTO_files/image036.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:5.75pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:108%'>If <i>replacement </i>is a string, any backslash escapes in
it are processed. That is, <span style='font-size:9.0pt;line-height:108%'>\n </span>is
converted to a single newline character, <span style='font-size:9.0pt;
line-height:108%'>\r </span>is converted to a carriage return, and so forth.
Unknown escapes such as <span style='font-size:9.0pt;line-height:108%'>\&amp; </span>are
left alone. Backreferences, such as <span style='font-size:9.0pt;line-height:
108%'>\6</span>, are replaced with the substring matched by the corresponding
group in the RE. This lets you incorporate portions of the original text in the
resulting replacement string.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.5pt;
margin-left:-.25pt'>This example matches the word <span style='font-size:9.0pt;
line-height:107%'>section </span>followed by a string enclosed in <span
style='font-size:9.0pt;line-height:107%'>{</span>, <span style='font-size:9.0pt;
line-height:107%'>}</span>, and changes <span style='font-size:9.0pt;
line-height:107%'>section </span>to <span style='font-size:9.0pt;line-height:
107%'>subsection</span>:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:1.05pt;margin-left:-.25pt;text-align:left;line-height:110%'><b><span
style='font-size:9.0pt;line-height:110%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:110%'>p </span><span style='font-size:9.0pt;
line-height:110%;color:#666666'>= </span><span style='font-size:9.0pt;
line-height:110%'>re</span><span style='font-size:9.0pt;line-height:110%;
color:#666666'>.</span><span style='font-size:9.0pt;line-height:110%'>compile(</span><span
style='font-size:9.0pt;line-height:110%;color:#4070A1'>'section{ ( [^}]* ) }'</span><span
style='font-size:9.0pt;line-height:110%'>, re</span><span style='font-size:
9.0pt;line-height:110%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:110%'>VERBOSE)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.65pt;margin-left:-.25pt;text-align:left;line-height:112%'><span
style='position:relative;z-index:-1895819264'><span style='left:0px;position:
absolute;left:-5px;top:-22px;width:611px;height:57px'><img width=611 height=57
src="Regular%20Expression%20HOWTO_files/image037.gif"></span></span><b><span
style='font-size:9.0pt;line-height:112%;color:#C75C0A'>&gt;&gt;&gt; </span></b><span
style='font-size:9.0pt;line-height:112%'>p</span><span style='font-size:9.0pt;
line-height:112%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:112%'>sub(</span><span style='font-size:9.0pt;line-height:112%;
color:#4070A1'>r'subsection{\1}'</span><span style='font-size:9.0pt;line-height:
112%'>,</span><span style='font-size:9.0pt;line-height:112%;color:#4070A1'>'section</span><i><span
style='font-size:9.0pt;line-height:112%;color:#70A1D1'>{First} </span></i><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>section</span><i><span
style='font-size:9.0pt;line-height:112%;color:#70A1D1'>{second}</span></i><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>'</span><span
style='font-size:9.0pt;line-height:112%'>)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:13.85pt;margin-left:-.25pt;text-align:left;line-height:110%'><span
style='font-size:9.0pt;line-height:110%;color:#333333'>'subsection{First}
subsection{second}'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:-.25pt'>Theres also a syntax for referring to named groups as
defined by the <span style='font-size:9.0pt;line-height:107%'>(?P&lt;name&gt;...)
</span>syntax. <span style='font-size:9.0pt;line-height:107%'>\g&lt;name&gt; </span>will
use the substring matched by the group named <span style='font-size:9.0pt;
line-height:107%'>name</span>, and <span style='font-size:9.0pt;line-height:
107%'>\g&lt;number&gt; </span>uses the corresponding group number. <span
style='font-size:9.0pt;line-height:107%'>\g&lt;2&gt; </span>is therefore
equivalent to <span style='font-size:9.0pt;line-height:107%'>\2</span>, but
isnt ambiguous in a replacement string such as <span style='font-size:9.0pt;
line-height:107%'>\g&lt;2&gt;0</span>. (<span style='font-size:9.0pt;
line-height:107%'>\20 </span>would be interpreted as a reference to group 20,
not a reference to group 2 followed by the literal character <span
style='font-size:9.0pt;line-height:107%'>'0'</span>.) The following
substitutions are all equivalent, but use all three variations of the replacement
string.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=121 src="Regular%20Expression%20HOWTO_files/image038.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'><i>replacement </i>can also be a
function, which gives you even more control. If <i>replacement </i>is a
function, the function is called for every non-overlapping occurrence of <i>pattern</i>.
On each call, the function is passed a match object argument for the match and
can use this information to compute the desired replacement string and return
it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>In the following example, the replacement function
translates decimals into hexadecimal:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=137 src="Regular%20Expression%20HOWTO_files/image039.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.95pt;
margin-left:-.25pt'>When using the module-level <span style='font-size:9.0pt;
line-height:107%'>re.sub() </span>function, the pattern is passed as the first
argument. The pattern may be provided as an object or as a string; if you need
to specify regular expression flags, you must either use a pattern object as
the first parameter, or use embedded modifiers in the pattern string, e.g. <span
style='font-size:9.0pt;line-height:107%'>sub(&quot;(?i)b+&quot;, &quot;x&quot;,
&quot;bbbb BBBB&quot;) </span>returns <span style='font-size:9.0pt;line-height:
107%'>'x x'</span>.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Common
Problems</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Regular expressions are a
powerful tool for some applications, but in some ways their behaviour isnt
intuitive and at times they dont behave the way you may expect them to. This
section will point out some of the most common pitfalls.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>6.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Use String Methods</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Sometimes using the <span
style='font-size:9.0pt;line-height:107%'>re </span>module is a mistake. If
youre matching a fixed string, or a single character class, and youre not
using any <span style='font-size:9.0pt;line-height:107%'>re </span>features
such as the <span style='font-size:9.0pt;line-height:107%'>IGNORECASE </span>flag,
then the full power of regular expressions may not be required. Strings have
several methods for performing operations with fixed strings and theyre
usually much faster, because the implementation is a single small C loop thats
been optimized for the purpose, instead of the large, more generalized regular
expression engine.</p>

<p class=MsoNormal style='margin-left:-.25pt'>One example might be replacing a
single fixed string with another one; for example, you might replace <span
style='font-size:9.0pt;line-height:107%'>word </span>with <span
style='font-size:9.0pt;line-height:107%'>deed</span>. <span style='font-size:
9.0pt;line-height:107%'>re.sub() </span>seems like the function to use for
this, but consider the <span style='font-size:9.0pt;line-height:107%'>replace()
</span>method. Note that <span style='font-size:9.0pt;line-height:107%'>replace()
</span>will also replace <span style='font-size:9.0pt;line-height:107%'>word </span>inside
words, turning <span style='font-size:9.0pt;line-height:107%'>swordfish </span>into
<span style='font-size:9.0pt;line-height:107%'>sdeedfish</span>, but the naive
RE <span style='font-size:9.0pt;line-height:107%'>word </span>would have done
that, too. (To avoid performing the substitution on parts of words, the pattern
would have to be <span style='font-size:9.0pt;line-height:107%'>\bword\b</span>,
in order to require that <span style='font-size:9.0pt;line-height:107%'>word </span>have
a word boundary on either side. This takes the job beyond <span
style='font-size:9.0pt;line-height:107%'>replace()</span>s abilities.)</p>

<p class=MsoNormal style='margin-left:-.25pt'>Another common task is deleting
every occurrence of a single character from a string or replacing it with
another single character. You might do this with something like <span
style='font-size:9.0pt;line-height:107%'>re.sub('\n', ' ', S)</span>, but <span
style='font-size:9.0pt;line-height:107%'>translate() </span>is capable of doing
both tasks and will be faster than any regular expression operation can be.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.25pt;
margin-left:-.25pt'>In short, before turning to the <span style='font-size:
9.0pt;line-height:107%'>re </span>module, consider whether your problem can be
solved with a faster and simpler string method.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>6.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>match() versus search()</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:107%'>match() </span>function
only checks if the RE matches at the beginning of the string while <span
style='font-size:9.0pt;line-height:107%'>search() </span>will scan forward
through the string for a match. Its important to keep this distinction in
mind. Remember, <span style='font-size:9.0pt;line-height:107%'>match() </span>will
only report a successful match which will start at 0; if the match wouldnt
start at zero, <span style='font-size:9.0pt;line-height:107%'>match() </span>will
<i>not </i>report it.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=73 src="Regular%20Expression%20HOWTO_files/image040.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>On the other hand, <span style='font-size:9.0pt;line-height:
107%'>search() </span>will scan forward through the string, reporting the first
match it finds.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=73 src="Regular%20Expression%20HOWTO_files/image041.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Sometimes youll be tempted to
keep using <span style='font-size:9.0pt;line-height:107%'>re.match()</span>,
and just add <span style='font-size:9.0pt;line-height:107%'>.* </span>to the
front of your RE. Resist this temptation and use <span style='font-size:9.0pt;
line-height:107%'>re.search() </span>instead. The regular expression compiler
does some analysis of REs in order to speed up the process of looking for a
match. One such analysis figures out what the first character of a match must
be; for example, a pattern starting with <span style='font-size:9.0pt;
line-height:107%'>Crow </span>must match starting with a <span
style='font-size:9.0pt;line-height:107%'>'C'</span>. The analysis lets the
engine quickly scan through the string looking for the starting character, only
trying the full match if a <span style='font-size:9.0pt;line-height:107%'>'C' </span>is
found.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.7pt;
margin-left:-.25pt'>Adding <span style='font-size:9.0pt;line-height:107%'>.* </span>defeats
this optimization, requiring scanning to the end of the string and then
backtracking to find a match for the rest of the RE. Use <span
style='font-size:9.0pt;line-height:107%'>re.search() </span>instead.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>6.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Greedy versus Non-Greedy</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>When repeating a regular expression, as in <span
style='font-size:9.0pt;line-height:107%'>a*</span>, the resulting action is to
consume as much of the pattern as possible. This fact often bites you when
youre trying to match a pair of balanced delimiters, such as the angle
brackets surrounding an HTML tag. The naive pattern for matching a single HTML
tag doesnt work because of the greedy nature of <span style='font-size:9.0pt;
line-height:107%'>.*</span>.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:0in;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=612 height=98 src="Regular%20Expression%20HOWTO_files/image042.gif"></span></p>

<p class=MsoNormal align=right style='margin:0in;text-align:right;text-indent:
0in'><span style='font-size:8.0pt;line-height:107%'>(continued from previous
page)</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=40 src="Regular%20Expression%20HOWTO_files/image043.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The RE matches the <span
style='font-size:9.0pt;line-height:107%'>'&lt;' </span>in <span
style='font-size:9.0pt;line-height:107%'>'&lt;html&gt;'</span>, and the <span
style='font-size:9.0pt;line-height:107%'>.* </span>consumes the rest of the
string. Theres still more left in the RE, though, and the <span
style='font-size:9.0pt;line-height:107%'>&gt; </span>cant match at the end of
the string, so the regular expression engine has to backtrack character by
character until it finds a match for the <span style='font-size:9.0pt;
line-height:107%'>&gt;</span>. The final match extends from the <span
style='font-size:9.0pt;line-height:107%'>'&lt;' </span>in <span
style='font-size:9.0pt;line-height:107%'>'&lt;html&gt;' </span>to the <span
style='font-size:9.0pt;line-height:107%'>'&gt;' </span>in <span
style='font-size:9.0pt;line-height:107%'>'&lt;/title&gt;'</span>, which isnt
what you want.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:-.25pt'>In this case, the solution is to use the non-greedy
quantifiers <span style='font-size:9.0pt;line-height:107%'>*?</span>, <span
style='font-size:9.0pt;line-height:107%'>+?</span>, <span style='font-size:
9.0pt;line-height:107%'>??</span>, or <span style='font-size:9.0pt;line-height:
107%'>{m,n}?</span>, which match as <i>little </i>text as possible. In the
above example, the <span style='font-size:9.0pt;line-height:107%'>'&gt;' </span>is
tried immediately after the first <span style='font-size:9.0pt;line-height:
107%'>'&lt;' </span>matches, and when it fails, the engine advances a character
at a time, retrying the <span style='font-size:9.0pt;line-height:107%'>'&gt;' </span>at
every step. This produces just the right result:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=41 src="Regular%20Expression%20HOWTO_files/image044.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:15.5pt;
margin-left:-.25pt'>(Note that parsing HTML or XML with regular expressions is
painful. Quick-and-dirty patterns will handle common cases, but HTML and XML
have special cases that will break the obvious regular expression; by the time
youve written a regular expression that handles all of the possible cases, the
patterns will be <i>very </i>complicated. Use an HTML or XML parser module for
such tasks.)</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>6.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Using re.VERBOSE</h2>

<p class=MsoNormal style='margin-left:-.25pt'>By now youve probably noticed
that regular expressions are a very compact notation, but theyre not terribly
readable. REs of moderate complexity can become lengthy collections of
backslashes, parentheses, and metacharacters, making them difficult to read and
understand.</p>

<p class=MsoNormal style='margin-left:-.25pt'>For such REs, specifying the <span
style='font-size:9.0pt;line-height:107%'>re.VERBOSE </span>flag when compiling
the regular expression can be helpful, because it allows you to format the
regular expression more clearly.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.1pt;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:107%'>re.VERBOSE
</span>flag has several effects. Whitespace in the regular expression that <i>isnt
</i>inside a character class is ignored. This means that an expression such as <span
style='font-size:9.0pt;line-height:107%'>dog | cat </span>is equivalent to the
less readable <span style='font-size:9.0pt;line-height:107%'>dog|cat</span>,
but <span style='font-size:9.0pt;line-height:107%'>[a b] </span>will still
match the characters <span style='font-size:9.0pt;line-height:107%'>'a'</span>,
<span style='font-size:9.0pt;line-height:107%'>'b'</span>, or a space. In
addition, you can also put comments inside a RE; comments extend from a <span
style='font-size:9.0pt;line-height:107%'># </span>character to the next
newline. When used with triple-quoted strings, this enables REs to be formatted
more neatly:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in'><span
style='font-size:11.0pt;line-height:107%;font-family:"Calibri",sans-serif'><img
width=611 height=137 src="Regular%20Expression%20HOWTO_files/image045.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:7.55pt;
margin-left:-.25pt'>This is far more readable than:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:53.2pt;
margin-bottom:.4in;margin-left:-.25pt;text-align:left;line-height:112%'><span
style='position:relative;z-index:-1895818240'><span style='left:0px;position:
absolute;left:-5px;top:-6px;width:611px;height:25px'><img width=611 height=25
src="Regular%20Expression%20HOWTO_files/image046.gif"></span></span><span
style='font-size:9.0pt;line-height:112%'>pat </span><span style='font-size:
9.0pt;line-height:112%;color:#666666'>= </span><span style='font-size:9.0pt;
line-height:112%'>re</span><span style='font-size:9.0pt;line-height:112%;
color:#666666'>.</span><span style='font-size:9.0pt;line-height:112%'>compile(</span><span
style='font-size:9.0pt;line-height:112%;color:#4070A1'>r&quot;\s*(?P&lt;header&gt;[^:]+)\s*:(?P&lt;value&gt;.*?)\s*$&quot;</span><span
style='font-size:9.0pt;line-height:112%'>)</span></p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Feedback</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Regular expressions are a
complicated topic. Did this document help you understand them? Were there parts
that were unclear, or Problems you encountered that werent covered here? If
so, please send suggestions for improvements to the author.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The most complete book on regular
expressions is almost certainly Jeffrey Friedls Mastering Regular Expressions,
published by OReilly. Unfortunately, it exclusively concentrates on Perl and
Javas flavours of regular expressions, and doesnt contain any Python material
at all, so it wont be useful as a reference for programming in Python. (The
first edition covered Pythons now-removed <span style='font-size:9.0pt;
line-height:107%'>regex </span>module, which wont help you much.) Consider
checking it out from your library.</p>

</div>

</body>

</html>
