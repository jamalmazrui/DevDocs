<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Helvetica;
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:Courier;
	panose-1:2 7 4 9 2 2 5 2 4 4;}
@font-face
	{font-family:"Tms Rmn";
	panose-1:2 2 6 3 4 5 5 2 3 4;}
@font-face
	{font-family:Helv;
	panose-1:2 11 6 4 2 2 2 3 2 4;}
@font-face
	{font-family:"New York";
	panose-1:2 4 5 3 6 5 6 2 3 4;}
@font-face
	{font-family:System;
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:Batang;
	panose-1:2 3 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 1 6 1 0 1 1 1 1 1;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:Dotum;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:SimHei;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:MingLiU;
	panose-1:2 1 6 9 0 1 1 1 1 1;}
@font-face
	{font-family:Mincho;
	panose-1:2 2 6 9 4 3 5 8 3 5;}
@font-face
	{font-family:Gulim;
	panose-1:2 11 6 0 0 1 1 1 1 1;}
@font-face
	{font-family:Century;
	panose-1:2 4 6 4 5 5 5 2 3 4;}
@font-face
	{font-family:"Angsana New";
	panose-1:2 2 6 3 5 4 5 2 3 4;}
@font-face
	{font-family:"Cordia New";
	panose-1:2 11 3 4 2 2 2 2 2 4;}
@font-face
	{font-family:Mangal;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Latha;
	panose-1:2 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sylfaen;
	panose-1:1 10 5 2 5 3 6 3 3 3;}
@font-face
	{font-family:Vrinda;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Raavi;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Shruti;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Sendnya;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:Gautami;
	panose-1:2 0 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:Tunga;
	panose-1:0 0 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Estrangelo Edessa";
	panose-1:0 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:"Yu Gothic";
	panose-1:2 11 4 0 0 0 0 0 0 0;}
@font-face
	{font-family:DengXian;
	panose-1:2 1 6 0 3 1 1 1 1 1;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Calibri Light";
	panose-1:2 15 3 2 2 2 4 3 2 4;}
@font-face
	{font-family:"Palatino Linotype";
	panose-1:2 4 5 2 5 5 5 3 3 4;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:"Arial Unicode MS";
	panose-1:2 11 6 4 2 2 2 2 2 4;}
@font-face
	{font-family:"Aptos Display";}
@font-face
	{font-family:Aptos;}
@font-face
	{font-family:"Segoe UI Emoji";
	panose-1:2 11 5 2 4 2 4 2 2 3;}
@font-face
	{font-family:"Gill Sans MT";
	panose-1:2 11 5 2 2 1 4 2 2 3;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:9.05pt;
	margin-left:71.35pt;
	text-indent:-.5pt;
	line-height:112%;
	font-size:10.0pt;
	font-family:"Gill Sans MT",sans-serif;
	color:black;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:8.9pt;
	margin-left:71.35pt;
	text-indent:-.5pt;
	line-height:110%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Gill Sans MT",sans-serif;
	color:black;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:11.15pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:110%;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"Gill Sans MT",sans-serif;
	color:black;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Gill Sans MT",sans-serif;
	color:black;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Gill Sans MT",sans-serif;
	color:black;
	font-weight:bold;}
span.msoIns
	{mso-style-name:"";
	text-decoration:underline;
	color:#65B4B4;}
span.msoDel
	{mso-style-name:"";
	text-decoration:line-through;
	color:#FF4B4B;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:9.25in 7.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
@page WordSection2
	{size:9.25in 7.0in;
	margin:77.15pt 49.7pt 99.4pt 49.3pt;}
div.WordSection2
	{page:WordSection2;}
@page WordSection3
	{size:9.25in 7.0in;
	margin:76.55pt 46.0pt 78.9pt 120.15pt;}
div.WordSection3
	{page:WordSection3;}
@page WordSection4
	{size:9.25in 7.0in;
	margin:41.6pt 45.45pt 82.1pt 49.3pt;}
div.WordSection4
	{page:WordSection4;}
@page WordSection5
	{size:9.25in 7.0in;
	margin:76.6pt 45.9pt 76.65pt 49.3pt;}
div.WordSection5
	{page:WordSection5;}
@page WordSection6
	{size:9.25in 7.0in;
	margin:76.55pt 46.25pt 76.65pt 49.3pt;}
div.WordSection6
	{page:WordSection6;}
@page WordSection7
	{size:9.25in 7.0in;
	margin:76.6pt 2.65pt 78.0pt 49.3pt;}
div.WordSection7
	{page:WordSection7;}
@page WordSection8
	{size:9.25in 7.0in;
	margin:77.05pt 48.5pt 83.3pt 49.3pt;}
div.WordSection8
	{page:WordSection8;}
@page WordSection9
	{size:9.25in 7.0in;
	margin:76.55pt 0in 76.65pt 49.3pt;}
div.WordSection9
	{page:WordSection9;}
@page WordSection10
	{size:9.25in 7.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection10
	{page:WordSection10;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1><span style='font-size:10.0pt;line-height:107%;
font-family:"Gill Sans MT",sans-serif;color:black'><br clear=all
style='page-break-before:always'>
</span>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&nbsp;</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&nbsp;</p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:85.6pt;
margin-left:70.85pt;text-indent:0in;line-height:110%'><b><span
style='font-size:24.0pt;line-height:110%'>Git Community Book</span></b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:70.85pt;text-indent:0in;line-height:107%'><b><span
style='font-size:14.0pt;line-height:107%'>The open Git resource pulled together
by the whole community</span></b></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:3.7pt;margin-left:
70.6pt'>AUTHORS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Thank these guys:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>Alecs King (alecsk@gmail.com), Amos Waterland
(apw@rossby.metr.ou.edu), Andrew Ruder (andy@aeruder.net), Andy Parkins
(andyparkins@gmail.com), Arjen Laarhoven (arjen@yaph.org), Brian Hetro
(whee@smaertness.net), Carl Worth</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(cworth@cworth.org), Christian Meder
(chris@absolutegiganten.org), Dan McGee (dpmcgee@gmail.com), David Kastrup</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(dak@gnu.org), Dmitry V. Levin (ldv@altlinux.org), Francis
Daly (francis@daoine.org), Gerrit Pape (pape@smarden.org), Greg Louis
(glouis@dynamicro.ca), Gustaf Hendeby (hendeby@isy.liu.se), Horst H. von Brand
(vonbrand@inf.utfsm.cl), J.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>Bruce Fields (bfields@fieldses.org), Jakub Narebski
(jnareb@gmail.com), Jim Meyering (jim@meyering.net), Johan Herland</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(johan@herland.net), Johannes Schindelin
(Johannes.Schindelin@gmx.de), Jon Loeliger (jdl@freescale.org), Josh Triplett</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(josh@freedesktop.org), Junio C Hamano (gitster@pobox.com),
Linus Torvalds (torvalds@osdl.org), Lukas Sandström</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(lukass@etek.chalmers.se), Marcus Fritzsch (m@fritschy.de),
Michael Coleman (tutufan@gmail.com), Michael Smith</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(msmith@cbnco.com), Mike Coleman (tutufan@gmail.com),
Miklos Vajna (vmiklos@frugalware.org), Nicolas Pitre</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(nico@cam.org), Oliver Steele (steele@osteele.com), Paolo
Ciarrocchi (paolo.ciarrocchi@gmail.com), Pavel Roskin</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(proski@gnu.org), Ralf Wildenhues (Ralf.Wildenhues@gmx.de),
Robin Rosenberg (robin.rosenberg.lists@dewire.com),</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>Santi Béjar (sbejar@gmail.com), Scott Chacon
(schacon@gmail.com), Sergei Organov (osv@javad.com), Shawn Bohrer</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>(shawn.bohrer@gmail.com), Shawn O. Pearce
(spearce@spearce.org), Steffen Prohaska (prohaska@zib.de), Tom Prince</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>(tom.prince@ualberta.net), William Pursell
(bill.pursell@gmail.com), Yasushi SHOJI (yashi@atmark-techno.com)</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:3.7pt;margin-left:
70.6pt'>MAINTAINER / EDITOR</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Bug this guy:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Scott Chacon (schacon@gmail.com)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:341.4pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 1 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>Introduction</span></b></p>

<h1 style='margin-left:70.6pt'>WELCOME TO GIT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Welcome to Git - the fast, distributed version control
system.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This book is meant to be a starting point for people new to
Git to learn it as quickly and easily as possible.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.75pt;
margin-left:70.6pt'>This book will start out by introducing you to the way Git
stores data, to give you the context for why it is different than other VCS
tools. This is meant to take you about 20 minutes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Next we will cover <b>Basic Git Usage </b>- the commands
you will be using 90% of the time. These should give you a good basis to use
Git comfortably for most of what you're going to use it for. This section
should take you about 30 minutes to read through.</p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection3>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.75pt;
margin-left:.5pt'>Next we will go over <b>Intermediate Git Usage </b>- things
that are slightly more complex, but may replace some of the basic commands you
learned in the first section. This will mostly be tricks and commands that will
feel more comfortable after you know the basic commands.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.75pt;
margin-left:.5pt'>After you have all of that mastered, we will cover <b>Advanced
Git </b>- commands that most people probably don't use very often, but can be
very helpful in certain situations. Learning these commands should round out
your day-to-day git knowledge; you will be a master of the Git!</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.75pt;
margin-left:.5pt'>Now that you know Git, we will then cover <b>Working with Git</b>.
Here we will go over how to use Git in scripts, with deployment tools, with
editors and more. These sections are meant to help you integrate Git into your
environment.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:.5pt'>Lastly, we will have a series of articles on <b>low-level
documentation </b>that may help the Git hackers who want to learn how the
actual internals and protocols work in Git.</p>

<h2>Feedback and Contributing</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.6pt;
margin-left:.5pt'>At any point, if you see a mistake or want to contribute to
the book, you can send me an email at schacon@gmail.com, or you can clone the
source of this book at <a href="http://github.com/schacon/gitbook"><span
style='color:black;text-decoration:none'>http://github.com/schacon/gitbook</span></a>
and send me a patch or a pull-request.</p>

<h2>References</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:.5pt'>Much of this book is pulled together from different sources
and then added to.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:.5pt'>If you would like to read some of the original articles or
resources, please visit them and thank the authors:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><a
href="http://www.kernel.org/pub/software/scm/git/docs/user-manual.html"><span
style='color:black;text-decoration:none'>Git User Manual</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><a
href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial.html"><span
style='color:black;text-decoration:none'>The Git Tutorial</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><a
href="http://www.kernel.org/pub/software/scm/git/docs/gittutorial-2.html"><span
style='color:black;text-decoration:none'>The Git Tutorial pt 2</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><a
href="http://osteele.com/archives/2008/05/my-git-workflow"><span
style='color:black;text-decoration:none'>&quot;My Git Workflow&quot; blog post</span></a></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
.5pt'>THE GIT OBJECT MODEL</h1>

<h2>The SHA</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>All the information needed to represent the history of a
project is stored in files referenced by a 40-digit &quot;object name&quot;
that looks something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>6ff87c4664981e4397625791c8ea3bbb5f2279a3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:.5pt'>You will see these 40-character strings all over the place in
Git. In each case the name is calculated by taking the SHA1 hash of the
contents of the object. The SHA1 hash is a cryptographic hash function. What
that means to us is that it is virtually impossible to find two different
objects with the same name. This has a number of advantages; among others:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>Git can
quickly determine whether two objects are identical or not, just by comparing
names.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>Since
object names are computed the same way in every repository, the same content
stored in two repositories will always be stored under the same name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>Git can
detect errors when it reads an object, by checking that the object's name is
still the SHA1 hash of its contents.</p>

<h2>The Objects</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>Every object consists of three things - a <b>type</b>, a <b>size
</b>and <b>content</b>. The <i>size </i>is simply the size of the contents, the
contents depend on what type of object it is, and there are four different
types of objects: &quot;blob&quot;, &quot;tree&quot;, &quot;commit&quot;, and
&quot;tag&quot;.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>A <b>&quot;blob&quot;
</b>is used to store file data - it is generally a file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>A <b>&quot;tree&quot;
</b>is basically like a directory - it references a bunch of other trees and/or
blobs (i.e. files and subdirectories)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>A <b>&quot;commit&quot;
</b>points to a single tree, marking it as what the project looked like at a
certain point in time. It contains meta-information about that point in time,
such as a timestamp, the author of the changes since the last commit, a pointer
to the previous commit(s), etc.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>A <b>&quot;tag&quot;
</b>is a way to mark a specific commit as special in some way. It is normally
used to tag certain commits as specific releases or something along those
lines.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:.5pt'>Almost all of Git is built around manipulating this simple
structure of four different object types. It is sort of its own little
filesystem that sits on top of your machine's filesystem.</p>

<h2>Different from SVN</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:.5pt'>It is important to note that this is very different from most
SCM systems that you may be familiar with. Subversion, CVS, Perforce, Mercurial
and the like all use <i>Delta Storage </i>systems - they store the differences
between one commit and the next. Git does not do this - it stores a snapshot of
what all the files in your project look like in this tree structure each time
you commit. This is a very important concept to understand when using Git.</p>

<h2>Blob Object</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>A blob generally stores the contents of a file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:0in;text-indent:0in;line-height:107%'><img border=0 width=129
height=132 id="Picture 206" src="GIT%20Book_files/image001.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>You can use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-show.html"><span
style='color:black;text-decoration:none'>git show</span></a> to examine the
contents of any blob. Assuming we have the SHA for a blob, we can examine its
contents like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git show 6ff87c4664</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:158.25pt;margin-bottom:
.15pt;margin-left:15.7pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>Note that the
only valid version of the GPL as far as this project is concerned is _this_
particular version of the license (ie v2, not v2.2 or v3.x or whatever), unless
explicitly otherwise stated.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:.5pt'>A &quot;blob&quot; object is nothing but a chunk of binary
data. It doesn't refer to anything else or have attributes of any kind, not
even a file name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>Since the blob is entirely defined by its data, if two files
in a directory tree (or in multiple different versions of the repository) have
the same contents, they will share the same blob object. The object is totally
independent of its location in the directory tree, and renaming a file does not
change the object that file is associated with.</p>

<h2>Tree Object</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:.5pt'>A tree is a simple object that has a bunch of pointers to
blobs and other trees - it generally represents the contents of a directory or
subdirectory.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:0in;text-indent:0in;line-height:107%'><img border=0 width=130
height=135 id="Picture 232" src="GIT%20Book_files/image002.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>The ever-versatile <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-show.html"><span
style='color:black;text-decoration:none'>git show</span></a> command can also
be used to examine tree objects, but <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-ls-tree.html"><span
style='color:black;text-decoration:none'>git ls-tree</span></a> will give you
more details. Assuming we have the SHA for a tree, we can examine it like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git ls-tree fb3a8bdd0ce</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
63c918c667fa005ff12ad89437f2fdc80926e21c    .gitignore</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
5529b198e8d14decbe4ad99db3f7fb632de0439d    .mailmap</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>040000 tree
2fb783e477100ce076f6bf57e4a6f026013dc745    Documentation</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100755 blob
3c0032cec592a765692234f1cba47dfdcc3a9200    GIT-VERSION-GEN</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
289b046a443c0647624607d471289b2c7dcd470b    INSTALL</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
4eb463797adc693dc168b926b6932ff53f17d0b1    Makefile</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:177.45pt;margin-bottom:
12.5pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
548142c327a6790ff8821d67c2ee1eff7a656b52    README ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>As you can see, a tree object contains a list of entries,
each with a mode, object type, SHA1 name, and name, sorted by name. It
represents the contents of a single directory tree.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.75pt;
margin-left:.5pt'>An object referenced by a tree may be blob, representing the
contents of a file, or another tree, representing the contents of a
subdirectory. Since trees and blobs, like all other objects, are named by the
SHA1 hash of their contents, two trees have the same SHA1 name if and only if
their contents (including, recursively, the contents of all subdirectories) are
identical. This allows git to quickly determine the differences between two
related tree objects, since it can ignore any entries with identical object
names.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.3pt;margin-bottom:
9.05pt;margin-left:.5pt;line-height:204%'>(Note: in the presence of submodules,
trees may also have commits as entries. See the <b>Submodules </b>section.)
Note that the files all have mode 644 or 755: git actually only pays attention
to the executable bit.</p>

<h2>Commit Object</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:.5pt'>The &quot;commit&quot; object links a physical state of a
tree with a description of how we got there and why.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:0in;text-indent:0in;line-height:107%'><img border=0 width=129
height=147 id="Picture 289" src="GIT%20Book_files/image003.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>You can use the --pretty=raw option to <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-show.html"><span
style='color:black;text-decoration:none'>git show</span></a> or <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-log.html"><span
style='color:black;text-decoration:none'>git log</span></a> to examine your
favorite commit:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:263.85pt;margin-bottom:
9.7pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git show -s
--pretty=raw 2be7fcb476 commit 2be7fcb4764f2dbcee52635b91fedb1b3dcf7ab4 tree
fb3a8bdd0ceddd019615af4d57a53f43d8cee2bf parent
257a84d9d02e90447b149af58b271c19405edb6a author Dave Watson
&lt;dwatson@mimvista.com&gt; 1187576872 -0400 committer Junio C Hamano
&lt;gitster@pobox.com&gt; 1187591163 -0700</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:30.1pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Fix misspelling of
'suppress' in docs</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:224.55pt;margin-bottom:
.15pt;margin-left:0in;text-indent:29.6pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>Signed-off-by: Junio C Hamano &lt;gitster@pobox.com&gt; </span>As
you can see, a commit is defined by:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>a <b>tree</b>:
The SHA1 name of a tree object (as defined below), representing the contents of
a directory at a certain point in time.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><b>parent(s)</b>:
The SHA1 name of some number of commits which represent the immediately
previous step(s) in the history of the project. The example above has one
parent; merge commits may have more than one. A commit with no parents is
called a &quot;root&quot; commit, and represents the initial revision of a
project. Each project must have at least one root. A project can also have
multiple roots, though that isn't common (or necessarily a good idea).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>an <b>author</b>:
The name of the person responsible for this change, together with its date.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>a <b>committer</b>:
The name of the person who actually created the commit, with the date it was
done. This may be different from the author; for example, if the author wrote a
patch and emailed it to another person who used the patch to create the commit.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:.15in;
margin-left:40.0pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>a <b>comment
</b>describing this commit.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>Note that a commit does not itself contain any information
about what actually changed; all changes are calculated by comparing the
contents of the tree referred to by this commit with the trees associated with
its parents. In particular, git does not attempt to record file renames
explicitly, though it can identify cases where the existence of the same file
data at changing paths suggests a rename. (See, for example, the -M option to <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>)</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:.5pt'>A commit is usually created by <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html"><span
style='color:black;text-decoration:none'>git commit</span></a>, which creates a
commit whose parent is normally the current HEAD, and whose tree is taken from
the content currently stored in the index.</p>

<h2>The Object Model</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:.5pt'>So, now that we've looked at the 3 main object types (blob,
tree and commit), let's take a quick look at how they all fit together.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>If we had a simple project with the following directory
structure:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:455.85pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;tree .</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- README</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>`-- lib</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:30.1pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- inc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:30.1pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|   `-- tricks.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:30.1pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>`-- mylib.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>2 directories, 3 files</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>And we committed this to a Git repository, it would be
represented like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:0in;text-indent:0in;line-height:107%'><img border=0 width=485
height=396 id="Picture 392" src="GIT%20Book_files/image004.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>You can see that we have created a <b>tree </b>object for
each directory (including the root) and a <b>blob </b>object for each file.
Then we have a <b>commit </b>object to point to the root, so we can track what
our project looked like when it was committed.</p>

<h2 style='margin-bottom:0in'>Tag Object</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:0in;text-indent:0in;line-height:107%'><img border=0 width=129
height=134 id="Picture 408" src="GIT%20Book_files/image005.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>A tag object contains an object name (called simply
'object'), object type, tag name, the name of the person (&quot;tagger&quot;)
who created the tag, and a message, which may contain a signature, as can be
seen using <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-cat-file.html"><span
style='color:black;text-decoration:none'>git cat-file</span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-cat-file.html"><span
style='color:black;text-decoration:none'>:</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file tag v1.5.0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>object
437b1b20df4b356c9342dac8d38849f24ef44f27</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.25pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>type commit
tag v1.5.0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>tagger Junio C Hamano
&lt;junkio@cox.net&gt; 1171411200 +0000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT 1.5.0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-----BEGIN PGP
SIGNATURE-----</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Version: GnuPG v1.4.6
(GNU/Linux)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>iD8DBQBF0lGqwMbZpPMRm5oRAuRiAJ9ohBLd7s2kqjkKlq1qqC57SbnmzQCdG4ui</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>nLE/L9aUXdWeTFPron96DLA=</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>=2E+0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-----END PGP
SIGNATURE-----</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:.5pt'>See the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-tag.html"><span
style='color:black;text-decoration:none'>git tag</span></a> command to learn
how to create and verify tag objects. (Note that <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-tag.html"><span
style='color:black;text-decoration:none'>git tag</span></a> can also be used to
create &quot;lightweight tags&quot;, which are not tag objects at all, but just
simple references whose names begin with &quot;refs/tags/&quot;).</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
.5pt'>GIT DIRECTORY AND WORKING DIRECTORY</h1>

<h2>The Git Directory</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:.5pt'>The 'git directory' is the directory that stores all Git's
history and meta information for your project - including all of the objects
(commits, trees, blobs, tags), all of the pointers to where different branches
are and more.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>There is only one Git Directory per project (as opposed to
one per subdirectory like with SVN or CVS), and that directory is (by default,
though not necessarily) '.git' in the root of your project. If you look at the
contents of that directory, you can see all of your important files:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:431.85pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;tree -L 1
.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- HEAD         # pointer
to your current branch</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- config       # your
configuration preferences</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- description  #
description of your project</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- hooks/       #
pre/post action hooks</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- index        # index
file (see next section)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- logs/        # a
history of where your branches have been</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- objects/     # your
objects (commits, trees, blobs, tags)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>`-- refs/        #
pointers to your branches</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>(there may be some other files/directories in there as well,
but they are not important for now)</p>

<h2>The Working Directory</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:.5pt'>The Git 'working directory' is the directory that holds the
current checkout of the files you are working on. Files in this directory are
often removed or replaced by Git as you switch branches - this is normal. All
your history is stored in the Git Directory; the working directory is simply a
temporary checkout place where you can modify the files until your next commit.</p>

<h1 style='margin-left:.5pt'>THE GIT INDEX</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:.5pt'>The Git index is used as a staging area between your working
directory and your repository. You can use the index to build up a set of
changes that you want to commit together. When you create a commit, what is
committed is what is currently in the index, not what is in your working
directory.</p>

<h2>Looking at the Index</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>The easiest way to see what is in the index is with the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-status.html"><span
style='color:black;text-decoration:none'>git status</span></a> command. When
you run git status, you can see which files are staged (currently in your
index), which are modified but not yet staged, and which are completely
untracked.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git status</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:100.65pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># On branch
master # Your branch is behind 'origin/master' by 11 commits, and can be
fast-forwarded.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.65pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Changes to
be committed:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   (use &quot;git reset
HEAD &lt;file&gt;...&quot; to unstage)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:   daemon.c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.65pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Changed
but not updated: #   (use &quot;git add &lt;file&gt;...&quot; to update what
will be committed)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:   grep.c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:   grep.h</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:403.05pt;margin-bottom:
.15pt;margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Untracked
files:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   (use &quot;git add
&lt;file&gt;...&quot; to include in what will be committed)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   blametree</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   blametree-init</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:10.9pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   git-gui/git-citool</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:.5pt'>If you blow the index away entirely, you generally haven't
lost any information as long as you have the name of the tree that it
described.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:.5pt'>And with that, you should have a pretty good understanding of
the basics of what Git is doing behind the scenes, and why it is a bit
different than most other SCM systems. Don't worry if you don't totally
understand it all right now; we'll revisit all of these topics in the next
sections. Now we're ready to move on to installing, configuring and using Git.</p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection4>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.75pt;
margin-bottom:81.15pt;margin-left:.5pt;text-align:right;line-height:118%'><span
style='font-size:11.0pt;line-height:118%'>Chapter 2: First Time</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:372.5pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 2 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>First Time</span></b></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>INSTALLING GIT</h1>

<h2 style='margin-left:70.6pt'>Installing from Source</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>In short, on a Unix-based system, you can download the Git
source code from the <a href="http://git-scm.com/download"><span
style='color:black;text-decoration:none'>Git Download Page</span></a>, and then
run something along the lines of :</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ make prefix=/usr all ;#
as yourself</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.45pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ make prefix=/usr install
;# as root</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You will need the <a href="http://expat.sourceforge.net/"><span
style='color:black;text-decoration:none'>expat</span></a>, <a
href="http://curl.linux-mirror.org/"><span style='color:black;text-decoration:
none'>curl</span></a>, <a href="http://www.zlib.net/"><span style='color:black;
text-decoration:none'>zlib</span></a>, and <a href="http://www.openssl.org/"><span
style='color:black;text-decoration:none'>openssl</span></a> libraries installed
- though with the possible exception of <i>expat</i>, these will normally
already be there.</p>

<h2 style='margin-left:70.6pt'>Linux</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you are running Linux, you can likely install Git easily
via your native package management system:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ yum install git-core</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ apt-get install git-core</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If that doesn't work, you can download the .deb or .rpm
packages from here:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'><a href="http://kernel.org/pub/software/scm/git/RPMS/"><span
style='color:black;text-decoration:none'>RPM Packages</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'><a
href="http://www.backports.org/debian/pool/main/g/git-core/"><span
style='color:black;text-decoration:none'>Stable Debs</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you prefer to install from source on a Linux system,
this article may be helpful:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'><a
href="http://chrisolsen.org/2008/03/10/installing-git-on-ubuntu/"><span
style='color:black;text-decoration:none'>Article: Installing Git on Ubuntu</span></a></p>

<h2 style='margin-left:70.6pt'>Mac 10.4</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>In both Mac 10.4 and 10.5, you can install Git via <a
href="http://www.macports.org/"><span style='color:black;text-decoration:none'>MacPorts</span></a>,
if you have that installed. If not, you can install it from <a
href="http://www.macports.org/install.php"><span style='color:black;text-decoration:
none'>here</span></a><a href="http://www.macports.org/install.php"><span
style='color:black;text-decoration:none'>.</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Once MacPorts is installed, all you should have to do is:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ sudo port install
git-core</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you prefer to install from source, these articles may be
helpful:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'><a
href="http://rails.wincent.com/wiki/Installing_Git_1.5.2.3_on_Mac_OS_X_Tiger"><span
style='color:black;text-decoration:none'>Article: Installing Git on Tiger</span></a></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.75pt;
margin-bottom:19.55pt;margin-left:.5pt;text-align:right;line-height:118%'><span
style='font-size:11.0pt;line-height:118%'>Chapter 2: First Time</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'><a
href="http://larrytheliquid.com/2007/12/29/compiling-git-and-git-svn-on-osx-tiger/"><span
style='color:black;text-decoration:none'>Article: Installing Git and git-svn on
Tiger from source</span></a></p>

<h2 style='margin-left:70.6pt'>Mac 10.5</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>With Leopard, you can also install via MacPorts, but here
you have the additional option of using a nice installer, which you can
download from here: <a
href="http://code.google.com/p/git-osx-installer/downloads/list?can=3"><span
style='color:black;text-decoration:none'>Git OSX Installer</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you prefer to install it from source, these guides may
be particularly helpful to you :</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'><a
href="http://solutions.treypiepmeier.com/2008/02/25/installing-git-on-os-x-leopard/"><span
style='color:black;text-decoration:none'>Article: Installing Git on OSX Leopard</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'><a
href="http://dysinger.net/2007/12/30/installing-git-on-mac-os-x-105-leopard/"><span
style='color:black;text-decoration:none'>Article: Installing Git on OS 10.5</span></a></p>

<h2 style='margin-left:70.6pt'>Windows</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>On Windows, installing Git is pretty easy. Simply download
and install the <a href="http://code.google.com/p/msysgit/downloads/list"><span
style='color:black;text-decoration:none'>msysGit</span></a> package.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:70.6pt'>See the <i>Git on Windows </i>chapter for a screencast
demonstrating installing and using Git on Windows.</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>SETUP AND INITIALIZATION</h1>

<h2 style='margin-left:70.6pt'>Git Config</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The first thing you're going to want to do is set up your
name and email address for Git to use to sign your commits.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config --global
user.name &quot;Scott Chacon&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.45pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config --global
user.email &quot;schacon@gmail.com&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>That will set up a file in your home directory which may be
used by any of your projects. By default that file is <i>~/.gitconfig </i>and
the contents will look like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:331.6pt;margin-bottom:
12.5pt;margin-left:118.9pt;text-indent:-38.4pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>[user] name = Scott Chacon email = schacon@gmail.com</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you want to override those values for a specific project
(to use a work email address, for example), you can run the <i>git config </i>command
without the <i>--global </i>option while in that project. This will add a
[user] section like the one shown above to the <i>.git/config </i>file in your
project's root directory.</p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection5>

<p class=MsoNormal style='margin-top:0in;margin-right:356.2pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 3 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>Basic Usage</span></b></p>

<h1 style='margin-left:70.6pt'>GETTING A GIT REPOSITORY</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.65pt;
margin-left:70.6pt'>So now that we're all set up, we need a Git repository. We
can do this one of two ways - we can <i>clone </i>one that already exists, or
we can <i>initialize </i>one either from existing files that aren't in source
control yet, or from an empty directory.</p>

<h2 style='margin-left:70.6pt'>Cloning a Repository</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>In order to get a copy of a project, you will need to know
the project's Git URL - the location of the repository. Git can operate over
many different protocols, so it may begin with ssh://, http(s)://, git://, or
just a username (in which case git will assume ssh). Some repositories may be
accessed over more than one protocol. For example, the source code to Git
itself can be cloned either over the git:// protocol:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>git clone
git://git.kernel.org/pub/scm/git/git.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:244.75pt;margin-bottom:
.15pt;margin-left:81.25pt;text-indent:-10.4pt;line-height:226%'>or over http: <span
style='font-size:8.0pt;line-height:226%;font-family:"Calibri",sans-serif;
color:#660000'>git clone http://www.kernel.org/pub/scm/git/git.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>The git:// protocol is faster and more efficient, but
sometimes it is necessary to use http when behind corporate firewalls or what
have you. In either case you should then have a new directory named 'git' that
contains all the Git source code and history - it is basically a complete copy
of what was on the server.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>By default, Git will name the new directory it has checked
out your cloned code into after whatever comes directly before the '.git' in
the path of the cloned project. (ie. <i>git clone
http://git.kernel.org/linux/kernel/git/torvalds/linux-2.6.git </i>will result
in a new directory named 'linux-2.6')</p>

<h2 style='margin-left:70.6pt'>Initializing a New Repository</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Assume you have a tarball named project.tar.gz with your
initial work. You can place it under git revision control as follows.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ tar xzf project.tar.gz</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd project</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git init</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Git will reply</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Initialized empty Git
repository in .git/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>You've now initialized the working directory--you may
notice a new directory created, named &quot;.git&quot;.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>gitcast:c1_init</p>

<h1 style='margin-left:70.6pt'>NORMAL WORKFLOW</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Modify some files, then add their updated contents to the
index:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add file1 file2
file3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You are now ready to commit. You can see what is about to
be committed using <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a> with the --cached
option:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff --cached</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>(Without --cached, <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a> will show you any
changes that you've made but not yet added to the index.) You can also get a
brief summary of the situation with <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-status.html"><span
style='color:black;text-decoration:none'>git status</span></a>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git status</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.75pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># On branch
master # Changes to be committed:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   (use &quot;git reset
HEAD &lt;file&gt;...&quot; to unstage)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:   file1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:   file2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:   file3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you need to make any further adjustments, do so now, and
then add any newly modified content to the index. Finally, commit your changes
with:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>This will again prompt you for a message describing the
change, and then record a new version of the project.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Alternatively, instead of running <span style='font-size:
8.0pt;line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git add </span>beforehand,
you can use</p>

<p class=MsoNormal style='margin-top:0in;margin-right:32.8pt;margin-bottom:
.8pt;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git commit -a </span>which will automatically notice any
modified (but not new) files, add them to the index, and commit, all in one
step.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>A note on commit messages: Though not required, it's a good
idea to begin the commit message with a single short (less than 50 character)
line summarizing the change, followed by a blank line and then a more thorough
description. Tools that turn commits into email, for example, use the first
line on the Subject: line and the rest of the commit message in the body.</p>

<h1 style='margin-left:70.6pt'>Git tracks content not files</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:22.15pt;
margin-left:70.6pt;line-height:140%'>Many revision control systems provide an
&quot;add&quot; command that tells the system to start tracking changes to a
new file. Git's &quot;add&quot; command does something simpler and more
powerful: <span style='font-size:8.0pt;line-height:140%;font-family:"Calibri",sans-serif;
color:#660000'>git add </span>is used both for new and newly modified files,
and in both cases it takes a snapshot of the given files and stages that
content in the index, ready for inclusion in the next commit.
gitcast:c2_normal_workflow</p>

<h1 style='margin-left:70.6pt'>BASIC BRANCHING AND MERGING</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>A single git repository can maintain multiple branches of
development. To create a new branch named &quot;experimental&quot;, use</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git branch experimental</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you now run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git branch</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>you'll get a list of all existing branches:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>experimental</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>* master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The &quot;experimental&quot; branch is the one you just
created, and the &quot;master&quot; branch is a default branch that was created
for you automatically. The asterisk marks the branch you are currently on; type</p>

<p class=MsoNormal style='margin-top:0in;margin-right:41.75pt;margin-bottom:
0in;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git checkout experimental </span>to switch to the experimental
branch. Now edit a file, commit the change, and switch back to the master
branch:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>(edit file)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git checkout master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Check that the change you made is no longer visible, since
it was made on the experimental branch and you're back on the master branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can make a different change on the master branch:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>(edit file)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>at this point the two branches have diverged, with
different changes made in each. To merge the changes made in experimental into
master, run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge experimental</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If the changes don't conflict, you're done. If there are
conflicts, markers will be left in the problematic files showing the conflict;</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>will show this. Once you've edited the files to resolve the
conflicts,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>will commit the result of the merge. Finally,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ gitk</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>will show a nice graphical representation of the resulting
history.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>At this point you could delete the experimental branch with</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git branch -d
experimental</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This command ensures that the changes in the experimental
branch are already in the current branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you develop on a branch crazy-idea, then regret it, you
can always delete the branch with</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git branch -D crazy-idea</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Branches are cheap and easy, so this is a good way to try
something out.</p>

<h2 style='margin-left:70.6pt'>How to merge</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can rejoin two diverging branches of development using <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-merge.html"><span
style='color:black;text-decoration:none'>git merge</span></a>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge branchname</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>merges the changes made in the branch
&quot;branchname&quot; into the current branch. If there are conflicts--for
example, if the same file is modified in two different ways in the remote
branch and the local branch--then you are warned; the output may look something
like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge next</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100% (4/4) done</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Auto-merged file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:177.55pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>CONFLICT
(content): Merge conflict in file.txt Automatic merge failed; fix conflicts and
then commit the result.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Conflict markers are left in the problematic files, and
after you resolve the conflicts manually, you can update the index with the
contents and run git commit, as you normally would when modifying a file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>If you examine the resulting commit using gitk, you will
see that it has two parents: one pointing to the top of the current branch, and
one to the top of the other branch.</p>

<h2 style='margin-left:70.6pt'>Resolving a merge</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>When a merge isn't resolved automatically, git leaves the
index and the working tree in a special state that gives you all the
information you need to help resolve the merge.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Files with conflicts are marked specially in the index, so
until you resolve the problem and update the index, <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html"><span
style='color:black;text-decoration:none'>git commit </span></a>will fail:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:388.75pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit
file.txt: needs merge</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Also, <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-status.html"><span
style='color:black;text-decoration:none'>git status</span></a> will list those
files as &quot;unmerged&quot;, and the files with conflicts will have conflict
markers added, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&lt;&lt;&lt;&lt;&lt;&lt;&lt;
HEAD:file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Hello world</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>=======</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Goodbye</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&gt;&gt;&gt;&gt;&gt;&gt;&gt;
77976da35a11db4580b80ae27e8d65caf5208086:file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>All you need to do is edit the files to resolve the
conflicts, and then</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Note that the commit message will already be filled in for
you with some information about the merge. Normally you can just use this
default message unchanged, but you may add additional commentary of your own if
desired.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>The above is all you need to know to resolve a simple
merge. But git also provides more information to help resolve conflicts:</p>

<h2 style='margin-left:70.6pt'>Undoing a merge</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you get stuck and decide to just give up and throw the
whole mess away, you can always return to the pre-merge state with</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git reset --hard HEAD</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Or, if you've already committed the merge that you want to
throw away,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git reset --hard
ORIG_HEAD</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>However, this last command can be dangerous in some
cases--never throw away a commit if that commit may itself have been merged
into another branch, as doing so may confuse further merges.</p>

<h2 style='margin-left:70.6pt'>Fast-forward merges</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>There is one special case not mentioned above, which is
treated differently. Normally, a merge results in a merge commit with two
parents, one for each of the two lines of development that were merged.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:22.2pt;
margin-left:70.6pt;line-height:139%'>However, if the current branch has not
diverged from the other--so every commit present in the current branch is
already contained in the other--then git just performs a &quot;fast
forward&quot;; the head of the current branch is moved forward to point at the
head of the merged-in branch, without any new commits being created.
gitcast:c6-branch-merge</p>

<h1 style='margin-left:70.6pt'>REVIEWING HISTORY - GIT LOG</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-log.html"><span
style='color:black;text-decoration:none'>git log</span></a> command can show
lists of commits. On its own, it shows all commits reachable from the parent
commit; but you can also make more specific requests:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log v2.5..        #
commits since (not reachable from) v2.5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log test..master  #
commits reachable from master but not test</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log master..test  #
commits reachable from test but not master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log master...test #
commits reachable from either test or</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:197.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#    master, but not both</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log --since=&quot;2
weeks ago&quot; # commits from the last 2 weeks</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log Makefile      #
commits that modify Makefile</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log fs/           #
commits that modify any file under fs/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log -S'foo()'     #
commits that add or remove any file data</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:197.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># matching the string
'foo()'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log --no-merges   #
dont show merge commits</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>And of course you can combine all of these; the following
finds commits since v2.5 which touch the Makefile or any file under fs:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log v2.5.. Makefile
fs/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Git log will show a listing of each commit, with the most
recent commits first, that match the arguments given to the log command.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:230.35pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>commit
f491239170cb1463c7c3cd970862d6de636ba787 Author: Matt McCutchen
&lt;matt@mattmccutchen.net&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:163.15pt;margin-bottom:
.15pt;margin-left:99.7pt;text-indent:-19.2pt;line-height:206%'><span
style='font-size:8.0pt;line-height:206%;font-family:"Calibri",sans-serif;
color:#660000'>Date:   Thu Aug 14 13:37:41 2008 -0400 git format-patch
documentation: clarify what --cover-letter does</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>commit
7950659dc9ef7f2b50b18010622299c508bfdfc3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Author: Eric Raible
&lt;raible@gmail.com&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Date:   Thu Aug 14
10:12:54 2008 -0700</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:172.75pt;margin-bottom:
12.5pt;margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>bash
completion: 'git apply' should use 'fix' not 'strip' Bring completion up to
date with the man page.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also ask git log to show patches:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log -p</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>commit
da9973c6f9600d90e64aac647f3ed22dfd692f70</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Author: Robert Schiele
&lt;rschiele@gmail.com&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:244.75pt;margin-bottom:
.15pt;margin-left:99.7pt;text-indent:-19.2pt;line-height:206%'><span
style='font-size:8.0pt;line-height:206%;font-family:"Calibri",sans-serif;
color:#660000'>Date:   Mon Aug 18 16:17:04 2008 +0200 adapt git-cvsserver
manpage to dash-free syntax</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>diff --git
a/Documentation/git-cvsserver.txt b/Documentation/git-cvsserver.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>index c2d3c90..785779e
100644</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>---
a/Documentation/git-cvsserver.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+++
b/Documentation/git-cvsserver.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:345.55pt;margin-bottom:
9.7pt;margin-left:85.3pt;text-indent:-4.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>@@ -11,7 +11,7 @@ SYNOPSIS SSH:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>[verse]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-export
CVS_SERVER=git-cvsserver</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+export
CVS_SERVER=&quot;git cvsserver&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:191.95pt;margin-bottom:
11.6pt;margin-left:86.55pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>'cvs' -d
:ext:user@server/path/repo.git co &lt;HEAD_name&gt; pserver (/etc/inetd.conf):</span></p>

<h2 style='margin-left:70.6pt'>Log Stats</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you pass the <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>--stat </span>option to
'git log', it will show you which files have changed in that commit and how
many lines were added and removed from each.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log --stat</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>commit
dba9194a49452b5f093b96872e19c91b50e526aa</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Author: Junio C Hamano
&lt;gitster@pobox.com&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Date:   Sun Aug 17
15:44:11 2008 -0700</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Start 1.6.0.X maintenance
series</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Documentation/RelNotes-1.6.0.1.txt
|   15 +++++++++++++++</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>RelNotes                          
|    2 +-</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>2 files changed, 16
insertions(+), 1 deletions(-)</span></p>

<h2 style='margin-left:70.6pt'>Formatting the Log</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also format the log output almost however you want.
The '--pretty' option can take a number of preset formats, such as 'oneline':</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log --pretty=oneline</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>a6b444f570558a5f31ab508dc2a24dc34773825f
dammit, this is the second time this has reverted
49d77f72783e4e9f12d1bbcacc45e7a15c800240 modified index to create refs/heads if
it is not</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>9764edd90cf9a423c9698a2f1e814f16f0111238
Add diff-lcs dependency e1ba1e3ca83d53a2f16b39c453fad33380f8d1cc Add dependency
for Open4</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.5pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0f87b4d9020fff756c18323106b3fd4e2f422135
merged recent changes: * accepts relative alt pat
f0ce7d5979dfb0f415799d086e14a8d2f9653300 updated the Manifest file</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>or you can do 'short' format:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log --pretty=short</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:235.15pt;margin-bottom:
5.05pt;margin-left:81.0pt;line-height:155%'><span style='font-size:8.0pt;
line-height:155%;font-family:"Calibri",sans-serif;color:#660000'>commit
a6b444f570558a5f31ab508dc2a24dc34773825f Author: Scott Chacon
&lt;schacon@gmail.com&gt; dammit, this is the second time this has reverted</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:211.15pt;margin-bottom:
5.05pt;margin-left:81.0pt;line-height:155%'><span style='font-size:8.0pt;
line-height:155%;font-family:"Calibri",sans-serif;color:#660000'>commit
49d77f72783e4e9f12d1bbcacc45e7a15c800240 Author: Scott Chacon
&lt;schacon@gmail.com&gt; modified index to create refs/heads if it is not
there</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>commit
9764edd90cf9a423c9698a2f1e814f16f0111238</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Author: Hans Engel
&lt;engel@engel.uk.to&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Add diff-lcs dependency</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also use 'medium', 'full', 'fuller', 'email' or
'raw'. If those formats aren't exactly what you need, you can also create your
own format with the '--pretty=format' option (see the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-log.html"><span
style='color:black;text-decoration:none'>git log</span></a> docs for all the
formatting options).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log
--pretty=format:'%h was %an, %ar, message: %s'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:23.95pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>a6b444f was
Scott Chacon, 5 days ago, message: dammit, this is the second time this has re
49d77f7 was Scott Chacon, 8 days ago, message: modified index to create
refs/heads if it i</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:124.75pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>9764edd was
Hans Engel, 11 days ago, message: Add diff-lcs dependency e1ba1e3 was Hans
Engel, 11 days ago, message: Add dependency for Open4 0f87b4d was Scott Chacon,
12 days ago, message: merged recent changes:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Another interesting thing you can do is visualize the
commit graph with the '--graph' option, like so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log
--pretty=format:'%h : %s' --graph</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>2d3acf9 : ignore errors from SIGCHLD on trap</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>5e3ee11 : Merge branch 'master' of git://github.com/dustin/grit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:201.55pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>|\ | * 420eac9
: Added a method for getting the current branch.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>| 30e367c : timeout code and tests</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>| 5a09431 : add timeout protection to grit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>| e1193f8 : support for heads with slashes in them</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>d6016bc : require time for xmlschema</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>It will give a pretty nice ASCII representation of the
commit history lines.</p>

<h2 style='margin-left:70.6pt'>Ordering the Log</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>You can also view the log entries in a few different
orders. Note that git log starts with the most recent commit and works
backwards through the parents; however, since git history can contain multiple
independent lines of development, the particular order that commits are listed
in may be somewhat arbitrary.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you want to specify a certain order, you can add an
ordering option to the git log command.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>By default, the commits are shown in reverse chronological
order.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>However, you can also specify '--topo-order', which makes
the commits appear in topological order (i.e. descendant commits are shown
before their parents). If we view the git log for the Grit repo in topo-order,
you can see that the development lines are all grouped together.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log
--pretty=format:'%h : %s' --topo-order --graph</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>*   4a904d7 : Merge branch
'idx2'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|\</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| *   dfeffce : merged in
bryces changes and fixed some testing issues</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| |\</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * 23f4ecf : Clarify
how to get a full count out of Repo#commits</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | *   9d6d250 :
Appropriate time-zone test fix from halorgium</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | |\</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * cec36f7 : Fix the
to_hash test to run in US/Pacific time</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * | decfe7b : fixed
manifest and grit.rb to make correct gemspec</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * | cd27d57 : added
lib/grit/commit_stats.rb to the big list o' files</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * | 823a9d9 : cleared
out errors by adding in Grit::Git#run method</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * |   4eb3bf0 :
resolved merge conflicts, hopefully amicably</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | |\ \</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | d065e76 : empty
commit to push project to runcoderun</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 3fa3284 :
whitespace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | d01cffd :
whitespace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 7c74272 : oops,
update version here too</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 13f8cc3 : push
0.8.3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 06bae5a :
capture stderr and log it if debug is true when running commands</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 0b5bedf : update
history</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | d40e1f0 : some
docs</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | ef8a23c : update
gemspec to include the newly added files to manifest</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 15dd347 : add
missing files to manifest; add grit test</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 3dabb6a : allow
sending debug messages to a user defined logger if provided; tes</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:52.75pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * |
eac1c37 : pull out the date in this assertion and compare as xmlschemaw, to
avoi | | | * | 0a7d387 : Removed debug print.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | | * | 4d6b69c : Fixed
to close opened file description.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also use '--date-order', which orders the commits
primarily by commit date. This option is similar to --topo-order in the sense
that no parent comes before all of its children, but otherwise things are still
ordered in the commit timestamp order. You can see that development lines are
not grouped together here, that they jump around as parallel development
occurred:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log
--pretty=format:'%h : %s' --date-order --graph</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>4a904d7 : Merge branch 'idx2'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|\</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>*<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>| 81a3e0d : updated packfile code to recognize index v2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| *   dfeffce : merged in
bryces changes and fixed some testing issues</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| |\</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | c615d80 : fixed a
log issue</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|/ /</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * 23f4ecf : Clarify how
to get a full count out of Repo#commits</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| *   9d6d250 :
Appropriate time-zone test fix from halorgium</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| |\</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | decfe7b : fixed
manifest and grit.rb to make correct gemspec</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | cd27d57 : added
lib/grit/commit_stats.rb to the big list o' file</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | 823a9d9 : cleared
out errors by adding in Grit::Git#run method</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * |   4eb3bf0 : resolved
merge conflicts, hopefully amicably</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:153.55pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>| |\ \ | * | |
ba23640 : Fix CommitDb errors in test (was this the right fix? | * | | 4d8873e
: test_commit no longer fails if you're not in PDT</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | | b3285ad : Use the
appropriate method to find a first occurrenc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | | 44dda6c : more
cleanly accept separate options for initializin</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | | 839ba9f : needed
to be able to ask Repo.new to work with a bar</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * | d065e76 : empty
commit to push project to runcoderun</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>| | | 791ec6b : updated grit gemspec</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>| | | 756a947 : including code from github updates</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * | 3fa3284 :
whitespace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| | * | d01cffd :
whitespace</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | | a0e4a3d : updated
grit gemspec</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| * | | 7569d0d :
including code from github updates</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.05in;margin-bottom:
14.75pt;margin-left:70.6pt;line-height:203%'>Lastly, you can reverse the order
of the log with the '--reverse' option. gitcast:c4-git-log</p>

<h1 style='margin-left:70.6pt'>COMPARING COMMITS - GIT DIFF</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can generate diffs between any two versions of your
project using <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff master..test</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>That will produce the diff between the tips of the two
branches. If you'd prefer to find the diff from their common ancestor to test,
you can use three dots instead of two:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff master...test</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a> is an incredibly
useful tool for figuring out what has changed between any two points in your
project's history, or to see what people are trying to introduce in new
branches, etc.</p>

<h2 style='margin-left:70.6pt'>What you will commit</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You will commonly use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a> for figuring out
differences between your last commit, your index, and your current working
directory. A common use is to simply run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>which will show you changes in the working directory that
are not yet staged for the next commit. If you want to see what <i>is </i>staged
for the next commit, you can run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff --cached</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>which will show you the difference between the index and
your last commit; what you would be committing if you run &quot;git
commit&quot; without the &quot;-a&quot; option. Lastly, you can run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff HEAD</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>which shows changes in the working directory since your
last commit; what you would be committing if you run &quot;git commit -a&quot;.</p>

<h2 style='margin-left:70.6pt'>More Diff Options</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you want to see how your current working directory
differs from the state of the project in another branch, you can run something
like</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff test</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This will show you what is different between your current
working directory and the snapshot on the 'test' branch. You can also limit the
comparison to a specific file or subdirectory by adding a <i>path limiter</i>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff HEAD -- ./lib</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>That command will show the changes between your current
working directory and the last commit (or, more accurately, the tip of the
current branch), limiting the comparison to files in the 'lib' subdirectory.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you don't want to see the whole patch, you can add the
'--stat' option, which will limit the output to the files that have changed
along with a little text graph depicting how many lines changed in each file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:172.75pt;margin-bottom:
.15pt;margin-left:85.3pt;text-indent:-4.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>$&gt;git diff --stat
layout/book_index_template.html                    |    8
++text/05_Installing_Git/0_Source.markdown           |   14 ++++++
text/05_Installing_Git/1_Linux.markdown            |   17 +++++++
text/05_Installing_Git/2_Mac_104.markdown          |   11 +++++
text/05_Installing_Git/3_Mac_105.markdown          |    8 ++++
text/05_Installing_Git/4_Windows.markdown          |    7 +++
.../1_Getting_a_Git_Repo.markdown                  |    7 +++-</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.../0_
Comparing_Commits_Git_Diff.markdown         |   45 +++++++++++++++++++-</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.../0_
Hosting_Git_gitweb_repoorcz_github.markdown |    4 +-</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>9 files changed, 115
insertions(+), 6 deletions(-)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>Sometimes that makes it easier to see overall what has
changed, to jog your memory.</p>

<h1 style='margin-left:70.6pt'>DISTRIBUTED WORKFLOWS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Suppose that Alice has started a new project with a git
repository in /home/alice/project, and that Bob, who has a home directory on
the same machine, wants to contribute.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Bob begins with:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone
/home/alice/project myrepo</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This creates a new directory &quot;myrepo&quot; containing
a clone of Alice's repository. The clone is on an equal footing with the
original project, possessing its own copy of the original project's history.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Bob then makes some changes and commits them:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>(edit files)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>(repeat as necessary)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>When he's ready, he tells Alice to pull changes from the
repository at /home/bob/myrepo. She does this with:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd /home/alice/project</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git pull
/home/bob/myrepo master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This merges the changes from Bob's &quot;master&quot;
branch into Alice's current branch. If Alice has made her own changes in the
meantime, then she may need to manually fix any conflicts. (Note that the
&quot;master&quot; argument in the above command is actually unnecessary, as it
is the default.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>The &quot;pull&quot; command thus performs two operations:
it fetches changes from a remote branch, then merges them into the current
branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>When you are working in a small closely knit group, it is
not unusual to interact with the same repository over and over again. By
defining 'remote' repository shorthand, you can make it easier:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git remote add bob
/home/bob/myrepo</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>With this, Alice can perform the first operation alone
using the &quot;git fetch&quot; command without merging them with her own
branch, using:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git fetch bob</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Unlike the longhand form, when Alice fetches from Bob using
a remote repository shorthand set up with <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git remote</span>,
what was fetched is stored in a remote tracking branch, in this case <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>bob/master</span>. So after this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:128.65pt;margin-bottom:
.8pt;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git log -p master..bob/master </span>shows a list of all the
changes that Bob made since he branched from Alice's master branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>After examining those changes, Alice could merge the
changes into her master branch:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.5pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge bob/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>merge </span>can also be done
by 'pulling from her own remote tracking branch', like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git pull .
remotes/bob/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Note that git pull always merges into the current branch,
regardless of what else is given on the command line.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Later, Bob can update his repo with Alice's latest changes
using</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git pull</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Note that he doesn't need to give the path to Alice's
repository; when Bob cloned Alice's repository, git stored the location of her
repository in the repository configuration, and that location is used for
pulls:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config --get
remote.origin.url</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>/home/alice/project</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>(The complete configuration created by git-clone is visible
using &quot;git config -l&quot;, and the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html"><span
style='color:black;text-decoration:none'>git config</span></a> man page
explains the meaning of each option.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Git also keeps a pristine copy of Alice's master branch
under the name &quot;origin/master&quot;:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:355.15pt;margin-bottom:
12.5pt;margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>$ git branch -r origin/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If Bob later decides to work from a different host, he can
still perform clones and pulls using the ssh protocol:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone
alice.org:/home/alice/project myrepo</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>Alternatively, git has a native protocol, or can use rsync
or http; see <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-pull.html"><span
style='color:black;text-decoration:none'>git pull</span></a> for details.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Git can also be used in a CVS-like mode, with a central
repository that various users push changes to; see <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-push.html"><span
style='color:black;text-decoration:none'>git push</span></a> and <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitcvs-migration.html"><span
style='color:black;text-decoration:none'>gitcvs-migration</span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/gitcvs-migration.html"><span
style='color:black;text-decoration:none'>.</span></a></p>

<h2 style='margin-left:70.6pt'>Public git repositories</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Another way to submit changes to a project is to tell the
maintainer of that project to pull the changes from your repository using <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-pull.html"><span
style='color:black;text-decoration:none'>git pull.</span></a> This is a way to
get updates from the &quot;main&quot; repository, but it works just as well in
the other direction.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you and the maintainer both have accounts on the same
machine, then you can just pull changes from each other's repositories
directly; commands that accept repository URLs as arguments will also accept a
local directory name:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone
/path/to/repository</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:307.3pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git pull /path/to/other/repository </span>or an ssh URL:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone
ssh://yourhost/~you/repository</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>For projects with few developers, or for synchronizing a
few private repositories, this may be all you need.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>However, the more common way to do this is to maintain a
separate public repository (usually on a different host) for others to pull
changes from. This is usually more convenient, and allows you to cleanly
separate private work in progress from publicly visible work.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You will continue to do your day-to-day work in your
personal repository, but periodically &quot;push&quot; changes from your
personal repository into your public repository, allowing other developers to
pull from that repository. So the flow of changes, in a situation where there
is one other developer with a public repository, looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:197.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>you push</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>your personal repo
------------------&gt; your public repo</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>^                                    
|</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|                                    
|</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>| you
pull                            | they pull</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|                                    
|</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|                                    
|</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:239.95pt;margin-bottom:
21.3pt;margin-left:90.85pt;text-indent:.4in;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>|               they push             V their public repo
&lt;------------------- their repo</span></p>

<h2 style='margin-left:70.6pt'>Pushing changes to a public repository</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Note that exporting via http or git allow other maintainers
to fetch your latest changes, but they do not allow write access. For this, you
will need to update the public repository with the latest changes created in
your private repository.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The simplest way to do this is using <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-push.html"><span
style='color:black;text-decoration:none'>git push</span></a> and ssh; to update
the remote branch named &quot;master&quot; with the latest state of your branch
named &quot;master&quot;, run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push
ssh://yourserver.com/~you/proj.git master:master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>or just</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push
ssh://yourserver.com/~you/proj.git master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>As with git-fetch, git-push will complain if this does not
result in a fast forward; see the following section for details on handling
this case.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Note that the target of a &quot;push&quot; is normally a
bare repository. You can also push to a repository that has a checked-out
working tree, but the working tree will not be updated by the push. This may
lead to unexpected results if the branch you push to is the currently
checked-out branch!</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>As with git-fetch, you may also set up configuration
options to save typing; so, for example, after</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat &gt;&gt;.git/config
&lt;&lt;EOF</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:278.35pt;margin-bottom:
.15pt;margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>[remote &quot;public-repo&quot;] url =
ssh://yourserver.com/~you/proj.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:274.55pt;margin-bottom:
0in;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>EOF </span>you should be able to perform the above push with
just</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push public-repo
master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.65pt;
margin-left:70.6pt'>See the explanations of the remote..url, branch..remote,
and remote..push options in <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html"><span
style='color:black;text-decoration:none'>git config</span></a> for details.</p>

<h2 style='margin-left:70.6pt'>What to do when a push fails</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If a push would not result in a fast forward of the remote
branch, then it will fail with an error like:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:201.55pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>error: remote
'refs/heads/master' is not an ancestor of local  'refs/heads/master'.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:196.75pt;margin-bottom:
5.05pt;margin-left:70.1pt;text-align:justify;text-justify:inter-ideograph;
text-indent:9.9pt;line-height:146%'><span style='font-size:8.0pt;line-height:
146%;font-family:"Calibri",sans-serif;color:#660000'>Maybe you are not
up-to-date and need to pull first? error: failed to push to
'ssh://yourserver.com/~you/proj.git' </span>This can happen, for example, if
you:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:81.6pt;margin-bottom:
.15pt;margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>use `git-reset --hard` to remove already-published commits, or</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:81.6pt;margin-bottom:
12.5pt;margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>-<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>use `git-commit --amend` to replace already-published commits,
or- use `git-rebase` to rebase any already-published commits.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You may force git-push to perform the update anyway by
preceding the branch name with a plus sign:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push
ssh://yourserver.com/~you/proj.git +master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Normally whenever a branch head in a public repository is
modified, it is modified to point to a descendant of the commit that it pointed
to before. By forcing a push in this situation, you break that convention.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Nevertheless, this is a common practice for people that
need a simple way to publish a work-in-progress patch series, and it is an
acceptable compromise as long as you warn other developers that this is how you
intend to manage the branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>It's also possible for a push to fail in this way when
other people have the right to push to the same repository. In that case, the
correct solution is to retry the push after first updating your work: either by
a pull, or by a fetch followed by a rebase; see the next section and <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitcvs-migration.html"><span
style='color:black;text-decoration:none'>gitcvs-migration</span></a> for more.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>gitcast:c8-dist-workflow</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>GIT TAG</h1>

<h2 style='margin-left:70.6pt'>Lightweight Tags</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We can create a tag to refer to a particular commit by
running <a href="http://www.kernel.org/pub/software/scm/git/docs/git-tag.html"><span
style='color:black;text-decoration:none'>git tag</span></a> with no arguments.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git tag stable-1
1b2e1d63ff</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>After that, we can use stable-1 to refer to the commit
1b2e1d63ff.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.7pt;
margin-left:70.6pt'>This creates a &quot;lightweight&quot; tag, basically a
branch that never moves. If you would also like to include a comment with the
tag, and possibly sign it cryptographically, then we can create a <i>tag object
</i>instead.</p>

<h2 style='margin-left:70.6pt'>Tag Objects</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If one of <b>-a</b>, <b>-s</b>, or <b>-u </b>is passed, the
command creates a tag object, and requires the tag message. Unless -m or -F is
given, an editor is started for the user to type in the tag message.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>When this happens, a new object is added to the Git object
database and the tag ref points to that <i>tag object</i>, rather than the
commit itself. The strength of this is that you can sign the tag, so you can
verify that it is the correct commit later. You can create a tag object like
this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git tag -a stable-1
1b2e1d63ff</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>It is actually possible to tag any object, but tagging
commit objects is the most common. (In the Linux kernel source, the first tag
object references a tree, rather than a commit)</p>

<h2 style='margin-left:70.6pt'>Signed Tags</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you have a GPG key setup, you can create signed tags
fairly easily. First, you will probably want to setup your key id in your <i>.git/config
</i>or <i>~.gitconfig </i>file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:350.35pt;margin-bottom:
12.5pt;margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>[user] signingkey = &lt;gpg-key-id&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also set that with</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.45pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config (--global)
user.signingkey &lt;gpg-key-id&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now you can create a signed tag simply by replacing the <b>-a
</b>with a <b>-s</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git tag -s stable-1
1b2e1d63ff</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you don't have your GPG key in your config file, you can
accomplish the same thing this way:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git tag -u
&lt;gpg-key-id&gt; stable-1 1b2e1d63ff</span></p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection6>

<p class=MsoNormal style='margin-top:0in;margin-right:257.1pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 4 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>Intermediate Usage</span></b></p>

<h1 style='margin-left:70.6pt'>IGNORING FILES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:.15in;
margin-left:70.6pt'>A project will often generate files that you do 'not' want
to track with git. This typically includes files generated by a build process
or temporary backup files made by your editor. Of course, 'not' tracking files
with git is just a matter of 'not' calling &quot;<span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git-add</span>&quot;
on them. But it quickly becomes annoying to have these untracked files lying
around; e.g. they make &quot;<span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>git add .</span>&quot; and
&quot;<span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>git commit -a</span>&quot; practically useless, and they keep
showing up in the output of &quot;<span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>git status</span>&quot;.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can tell git to ignore certain files by creating a file
called .gitignore in the top level of your working directory, with contents
such as:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># Lines starting with '#'
are considered comments.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:302.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># Ignore any
file named foo.txt. foo.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># Ignore (generated) html
files,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:268.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*.html #
except foo.html which is maintained by hand.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:345.2pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>!foo.html #
Ignore objects and archives.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>*.[oa]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.65pt;
margin-left:70.6pt'>See <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitignore.html"><span
style='color:black;text-decoration:none'>gitignore</span></a> for a detailed
explanation of the syntax. You can also place .gitignore files in other
directories in your working tree, and they will apply to those directories and
their subdirectories. The <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>.gitignore </span>files can be
added to your repository like any other files (just run <span style='font-size:
8.0pt;line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git add
.gitignore </span>and <span style='font-size:8.0pt;line-height:112%;font-family:
"Calibri",sans-serif;color:#660000'>git commit</span>, as usual), which is
convenient when the exclude patterns (such as patterns matching build output
files) would also make sense for other users who clone your repository.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>If you wish the exclude patterns to affect only certain
repositories (instead of every repository for a given project), you may instead
put them in a file in your repository named .git/info/exclude, or in any file
specified by the <span style='font-size:8.0pt;line-height:112%;font-family:
"Calibri",sans-serif;color:#660000'>core.excludesfile </span>configuration
variable. Some git commands can also take exclude patterns directly on the
command line. See <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitignore.html"><span
style='color:black;text-decoration:none'>gitignore</span></a> for the details.</p>

<h1 style='margin-left:70.6pt'>REBASING</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Suppose that you create a branch &quot;mywork&quot; on a
remote-tracking branch &quot;origin&quot;.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git checkout -b mywork
origin</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=124
height=133 id="Picture 1583" src="GIT%20Book_files/image006.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now you do some work, creating two new commits.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ vi file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ vi otherfile.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:417.2pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit
...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Meanwhile, someone else does some work creating two new
commits on the origin branch too. This means both 'origin' and 'mywork' has
advanced, which means the work has diverged.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=269
height=173 id="Picture 1597" src="GIT%20Book_files/image007.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>At this point, you could use &quot;pull&quot; to merge your
changes back in; the result would create a new merge commit, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=353
height=203 id="Picture 1600" src="GIT%20Book_files/image008.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>However, if you prefer to keep the history in mywork a
simple series of commits without any merges, you may instead choose to use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html"><span
style='color:black;text-decoration:none'>git rebase</span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html"><span
style='color:black;text-decoration:none'>:</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git checkout mywork</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git rebase origin</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>This will remove each of your commits from mywork,
temporarily saving them as patches (in a directory named &quot;.git/
rebase&quot;), update mywork to point at the latest version of origin, then
apply each of the saved patches to the new mywork.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=417
height=204 id="Picture 1614" src="GIT%20Book_files/image009.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>Once the ref ('mywork') is updated to point to the newly
created commit objects, your older commits will be abandoned.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>They will likely be removed if you run a pruning garbage
collection. (see <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-gc.html"><span
style='color:black;text-decoration:none'>git gc</span></a>)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=417
height=173 id="Picture 1630" src="GIT%20Book_files/image010.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>So now we can look at the difference in our history between
running a merge and running a rebase:<br clear=all style='page-break-before:
always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=468
height=415 id="Picture 1637" src="GIT%20Book_files/image011.jpg"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>In the process of the rebase, it may discover conflicts. In
that case it will stop and allow you to fix the conflicts; after fixing
conflicts, use &quot;git-add&quot; to update the index with those contents, and
then, instead of running git-commit, just run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git rebase --continue</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:.15in;
margin-left:70.6pt'>and git will continue applying the rest of the patches.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>At any point you may use the <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>--abort </span>option
to abort this process and return mywork to the state it had before you started
the rebase:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git rebase --abort</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>gitcast:c7-rebase</p>

<h1 style='margin-left:70.6pt'>INTERACTIVE REBASING</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>You can also rebase interactively. This is often used to
re-write your own commit objects before pusing them somewhere. It is an easy
way to split, merge or re-order commits before sharing them with others. You
can also use it to clean up commits you've pulled from someone when applying
them locally.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you have a number of commits that you would like to
somehow modify during the rebase, you can invoke interactive mode by passing a
'-i' or '--interactive' to the 'git rebase' command.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git rebase -i
origin/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This will invoke interactive rebase mode on all the commits
you have made since the last time you have pushed (or merged from the origin
repository).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>To see what commits those are beforehand, you can run log
this way:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log github/master..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Once you run the 'rebase -i' command, you will be thrown
into your editor of choice with something that looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:316.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>pick fc62e55
added file_size pick 9824bf4 fixed little thing pick 21d80a5 added number to
log pick 76b9da6 added the apply command</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>pick c264051 Revert
&quot;added file_size&quot; - not implemented correctly</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># Rebase f408319..b04dc3d
onto f408319</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:436.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Commands:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#  p, pick = use commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#  e, edit = use commit,
but stop for amending</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#  s, squash = use commit,
but meld into previous commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # If you
remove a line here THAT COMMIT WILL BE LOST.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># However, if you remove
everything, the rebase will be aborted.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This means that there are 5 commits since you last pushed
and it gives you one line per commit with the following format:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>(action) (partial-sha)
(short commit message)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Now, you can change the action (which is by default 'pick')
to either 'edit' or 'squash', or just leave it as 'pick'. You can also reorder
the commits just by moving the lines around however you want. Then, when you
exit the editor, git will try to apply the commits however they are now
arranged and do the action specified.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If 'pick' is specified, it will simply try to apply the
patch and save the commit with the same message as before.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If 'squash' is specified, it will combine that commit with
the previous one to create a new commit. This will drop you into your editor
again to merge the commit messages of the two commits it is now squashing
together. So, if you exit the editor with this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.6pt;margin-bottom:
7.85pt;margin-left:70.1pt;text-align:justify;text-justify:inter-ideograph;
text-indent:9.9pt;line-height:121%'><span style='font-size:8.0pt;line-height:
121%;font-family:"Calibri",sans-serif;color:#660000'>pick   fc62e55 added
file_size squash 9824bf4 fixed little thing squash 21d80a5 added number to log
squash 76b9da6 added the apply command squash c264051 Revert &quot;added
file_size&quot; - not implemented correctly </span>Then you will have to create
a single commit message from this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># This is a combination of
5 commits.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># The first commit's
message is:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>added
file_size # This is the 2nd commit message:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>fixed little
thing # This is the 3rd commit message:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>added number
to log # This is the 4th commit message:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>added the
apply command # This is the 5th commit message:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:196.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>Revert
&quot;added file_size&quot; - not implemented correctly This reverts commit
fc62e5543b195f18391886b9f663d5a7eca38e84.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Once you have edited that down into once commit message and
exit the editor, the commit will be saved with your new message.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If 'edit' is specified, it will do the same thing, but then
pause before moving on to the next one and drop you into the command line so
you can amend the commit, or change the commit contents somehow.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you wanted to split a commit, for instance, you would
specify 'edit' for that commit:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.6pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>pick   fc62e55
added file_size pick   9824bf4 fixed little thing edit   21d80a5 added number
to log pick   76b9da6 added the apply command pick   c264051 Revert &quot;added
file_size&quot; - not implemented correctly</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>And then when you get to the command line, you revert that
commit and create two (or more) new ones. Lets say 21d80a5 modified two files,
file1 and file2, and you wanted to split them into seperate commits. You could
do this after the rebase dropped you to the command line :</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git reset HEAD^</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add file1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit 'first part
of split commit'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add file2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit 'second part
of split commit'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git rebase --continue</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>And now instead of 5 commits, you would have 6.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The last useful thing that interactive rebase can do is
drop commits for you. If instead of choosing 'pick', 'squash' or 'edit' for the
commit line, you simply remove the line, it will remove the commit from the
history.</p>

<h1 style='margin-left:70.6pt'>INTERACTIVE ADDING</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Interactive Adding is a really nice way of working with and
visualizing the Git index. To start it up, simply type 'git add -i'. Git will
show you all the modified files you have and their status.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:321.2pt;margin-bottom:
.15pt;margin-left:133.3pt;text-indent:-52.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>$&gt;git add -i staged     unstaged path</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>1:    unchanged       
+4/-0 assets/stylesheets/style.css</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>2:    unchanged     
+23/-11 layout/book_index_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>3:    unchanged       
+7/-7 layout/chapter_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>4:    unchanged       
+3/-3 script/pdf.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5:    unchanged     
+121/-0 text/14_Interactive_Rebasing/0_ Interactive_Rebasing.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>*** Commands ***</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>1: status   2: update   3:
revert   4: add untracked</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5: patch    6: diff     7:
quit     8: help</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>What now&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>In this case, we can see that there are 5 modified files
that have not been added to our index yet (unstaged), and even how many lines
have been added to or removed from each. It then shows us an interactive menu
of what we can do in this mode.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If we want to stage the files, we can type '2' or 'u' for
the update mode. Then I can specify which files I want to stage (add to the
index) by typing in the numbers of the files (in this case, 1-4)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:321.2pt;margin-bottom:
.15pt;margin-left:133.3pt;text-indent:-52.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>What now&gt; 2 staged     unstaged path</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>1:    unchanged       
+4/-0 assets/stylesheets/style.css</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>2:    unchanged     
+23/-11 layout/book_index_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>3:    unchanged       
+7/-7 layout/chapter_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>4:    unchanged       
+3/-3 script/pdf.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5:    unchanged     
+121/-0 text/14_Interactive_Rebasing/0_ Interactive_Rebasing.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:321.2pt;margin-bottom:
.15pt;margin-left:133.3pt;text-indent:-52.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>Update&gt;&gt; 1-4 staged     unstaged path</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>1:    unchanged        +4/-0 assets/stylesheets/style.css</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>2:    unchanged      +23/-11 layout/book_index_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>3:    unchanged        +7/-7 layout/chapter_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>*<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>4:    unchanged        +3/-3 script/pdf.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5:    unchanged     
+121/-0 text/14_Interactive_Rebasing/0_ Interactive_Rebasing.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Update&gt;&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If I hit enter, I will be taken back to the main menu where
I can see that the file status has changed:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:321.2pt;margin-bottom:
.15pt;margin-left:133.3pt;text-indent:-52.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>What now&gt; status staged     unstaged path</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>1:        +4/-0     
nothing assets/stylesheets/style.css</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>2:      +23/-11     
nothing layout/book_index_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>3:        +7/-7     
nothing layout/chapter_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>4:        +3/-3     
nothing script/pdf.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:91.35pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5:    unchanged     
+121/-0 text/14_Interactive_Rebasing/0_ Interactive_Rebasing.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now we can see the first four files are staged and the last
one is still not. This is basically a compressed way to see the same
information we see when we run 'git status' from the command line:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git status</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># On branch
master # Changes to be committed:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   (use &quot;git reset
HEAD &lt;file&gt;...&quot; to unstage)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:  
assets/stylesheets/style.css</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:  
layout/book_index_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:  
layout/chapter_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:  
script/pdf.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:364.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Changed
but not updated: #   (use &quot;git add &lt;file&gt;...&quot; to update what
will be committed)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   modified:  
text/14_Interactive_Rebasing/0_ Interactive_Rebasing.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>There are a number of useful things we can do, including
unstaging files (3: revert), adding untracked files (4: add untracked), and
viewing diffs (6: diff). Those are all pretty straightforward. However, there
is one command that is pretty cool here, which is staging patches (5: patch).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you type '5' or 'p' in the menu, git will show you your
diff patch by patch (or hunk by hunk) and ask if you want to stage each one.
That way you can actually stage for a commit a part of a file edit. If you've
edited a file and want to only commit part of it and not an unfinished part, or
commit documentation or whitespace changes seperate from substantive changes,
you can use 'git add -i' to do so relatively easily.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Here I've staged some changes to the
book_index_template.html file, but not all of them:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:124.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>staged     unstaged path</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>1:        +4/-0     
nothing assets/stylesheets/style.css</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>2:       +20/-7       
+3/-4 layout/book_index_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>3:        +7/-7     
nothing layout/chapter_template.html</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>4:        +3/-3     
nothing script/pdf.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5:    unchanged     
+121/-0 text/14_Interactive_Rebasing/0_ Interactive_Rebasing.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>6:    unchanged      
+85/-0 text/15_Interactive_Adding/0_ Interactive_Adding.markdown</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>When you are done making changes to your index through 'git
add -i', you simply quit (7: quit) and then run 'git commit' to commit the
staged changes. Remember <b>not </b>to run 'git commit -a', which will blow
away all the careful changes you've just made and simply commit everything.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>gitcast:c3_add_interactive</p>

<h1 style='margin-left:70.6pt'>STASHING</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>While you are in the middle of working on something
complicated, you find an unrelated but obvious and trivial bug. You would like
to fix it before continuing. You can use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-stash.html"><span
style='color:black;text-decoration:none'>git stash</span></a> to save the
current state of your work, and after fixing the bug (or, optionally after
doing so on a different branch and then coming back), unstash the
work-in-progress changes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.5pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git stash &quot;work in
progress for foo feature&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This command will save your changes away to the <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>stash</span>, and reset your working tree and the index to match
the tip of your current branch. Then you can make your fix as usual.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>... edit and test ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.7pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a -m
&quot;blorpl: typofix&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>After that, you can go back to what you were working on
with <span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>git stash apply</span>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git stash apply</span></p>

<h2 style='margin-left:70.6pt'>Stash Queue</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>You can also use stashing to queue up stashed changes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you run 'git stash list' you can see which stashes you
have saved:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git stash list</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:100.4pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>stash@{0}: WIP
on book: 51bea1d... fixed images stash@{1}: WIP on master: 9705ae6... changed
the browse code to the official repo</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Then you can apply them individually with 'git stash apply
stash@{1}'. You can clear out the list with 'git stash clear'.</p>

<h1 style='margin-left:70.6pt'>GIT TREEISHES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>There are a number of ways to refer to a particular commit
or tree other than spelling out the entire 40-character sha. In Git, these are
referred to as a 'treeish'.</p>

<h2 style='margin-left:70.6pt'>Partial Sha</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If your commit sha is '<span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>980e3ccdaac54a0d4de358f3fe5d718027d96aae</span>',
git will recognize any of the following identically:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>980e3ccdaac54a0d4de358f3fe5d718027d96aae</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>980e3ccdaac54a0d4</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>980e3cc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>As long as the partial sha is unique - it can't be confused
with another (which is incredibly unlikely if you use at least 5 characters),
git will expand a partial sha for you.</p>

<h2 style='margin-left:70.6pt'>Branch, Remote or Tag Name</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can always use a branch, remote or tag name instead of
a sha, since they are simply pointers anyhow. If your master branch is on the
980e3 commit and you've pushed it to origin and have tagged it 'v1.0', then all
of the following are equivalent:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>980e3ccdaac54a0d4de358f3fe5d718027d96aae</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:302.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>origin/master
refs/remotes/origin/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:378.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>master
refs/heads/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:402.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>v1.0
refs/tags/v1.0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Which means the following will give you identical output:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log refs/tags/v1.0</span></p>

<h2 style='margin-left:70.6pt'>Date Spec</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The Ref Log that git keeps will allow you to do some
relative stuff locally, such as:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:359.6pt;margin-bottom:
2.8pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>master@{yesterday}
master@{1 month ago}</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Which is shorthand for 'where the master branch head was
yesterday', etc. Note that this format can result in different shas on
different computers, even if the master branch is currently pointing to the
same place.</p>

<h2 style='margin-left:70.6pt'>Ordinal Spec</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:145.8pt;margin-bottom:
9.05pt;margin-left:70.6pt;line-height:211%'>This format will give you the Nth
previous value of a particular reference. For example: <span style='font-size:
8.0pt;line-height:211%;font-family:"Calibri",sans-serif;color:#660000'>master@{5}
</span>will give you the 5th prior value of the master head ref.</p>

<h2 style='margin-left:70.6pt'>Carrot Parent</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This will give you the Nth parent of a particular commit.
This format is only useful on merge commits - commit objects that have more
than one direct parent.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>master^2</span></p>

<h2 style='margin-left:70.6pt'>Tilde Spec</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:92.05pt;margin-bottom:
1.85pt;margin-left:70.6pt;line-height:216%'>The tilde spec will give you the
Nth grandparent of a commit object. For example, <span style='font-size:8.0pt;
line-height:216%;font-family:"Calibri",sans-serif;color:#660000'>master~2 </span>will
give us the first parent of the first parent of the commit that master points
to. It is equivalent to: <span style='font-size:8.0pt;line-height:216%;
font-family:"Calibri",sans-serif;color:#660000'>master^^</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can keep doing this, too. The following specs will
point to the same commit:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.0pt;margin-bottom:
21.3pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>master^^^^^^
master~3^~2 master~6</span></p>

<h2 style='margin-left:70.6pt'>Tree Pointer</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:12.4pt;
margin-left:70.6pt;line-height:90%'>This disambiguates a commit from the tree
that it points to. If you want the sha that a commit points to, you can add the
'<sup><span style='font-size:13.0pt;line-height:90%'>{tree}' </span></sup>spec
to the end of it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>master^{tree}</span></p>

<h2 style='margin-left:70.6pt'>Blob Spec</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you want the sha of a particular blob, you can add the
blob path at the end of the treeish, like so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>master:/path/to/file</span></p>

<h2 style='margin-left:70.6pt'>Range</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Finally, you can specify a range of commits with the range
spec. This will give you all the commits between 7b593b5 and 51bea1 (where
51bea1 is most recent), excluding 7b593b5 but including 51bea1:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.45pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>7b593b5..51bea1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This will include every commit <i>since </i>7b593b:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:27.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>7b593b..</span></p>

<h1 style='margin-left:70.6pt'>TRACKING BRANCHES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>A 'tracking branch' in Git is a local branch that is
connected to a remote branch. When you push and pull on that branch, it
automatically pushes and pulls to the remote branch that it is connected with.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Use this if you always pull from the same upstream branch
into the new branch, and if you don't want to use &quot;git pull &quot;
explicitly.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The 'git clone' command automatically sets up a 'master'
branch that is a tracking branch for 'origin/master' - the master branch on the
cloned repository.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:76.85pt;margin-bottom:
0in;margin-left:70.6pt;text-align:justify;text-justify:inter-ideograph;
line-height:211%'>You can create a tracking branch manually by adding the
'--track' option to the 'branch' command in Git. <span style='font-size:8.0pt;
line-height:211%;font-family:"Calibri",sans-serif;color:#660000'>git branch
--track experimental origin/experimental </span>Then when you run:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git pull experimental</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>It will automatically fetch from 'origin' and merge
'origin/experimental' into your local 'experimental' branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>Likewise, when you push to origin, it will push what your
'experimental' points to to origins 'experimental', without having to specify
it.</p>

<h1 style='margin-left:70.6pt'>FINDING WITH GIT GREP</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Finding files with words or phrases in Git is really easy
with the <a href="http://www.kernel.org/pub/software/scm/git/docs/git-grep.html"><span
style='color:black;text-decoration:none'>git grep</span></a> command. It is
possible to do this with the normal unix 'grep' command, but with 'git grep'
you can also search through previous versions of the project without having to
check them out.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>For example, if I wanted to see every place that used the
'xmmap' call in my git.git repository, I could run this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git grep xmmap</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:95.6pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>config.c:              
contents = xmmap(NULL, contents_sz, PROT_READ, diff.c:         s-&gt;data =
xmmap(NULL, s-&gt;size, PROT_READ, MAP_PRIVATE, fd, 0);
git-compat-util.h:extern void *xmmap(void *start, size_t length, int prot, int
fla read-cache.c:   mmap = xmmap(NULL, mmap_size, PROT_READ | PROT_WRITE,
MAP_PRIVATE, refs.c: log_mapped = xmmap(NULL, mapsz, PROT_READ, MAP_PRIVATE,
logfd, 0); sha1_file.c:    map = xmmap(NULL, mapsz, PROT_READ, MAP_PRIVATE, fd,
0); sha1_file.c:    idx_map = xmmap(NULL, idx_size, PROT_READ, MAP_PRIVATE, fd,
0); sha1_file.c:                    win-&gt;base = xmmap(NULL, win-&gt;len,
sha1_file.c:                    map = xmmap(NULL, *size, PROT_READ,
MAP_PRIVATE, f sha1_file.c:            buf = xmmap(NULL, size, PROT_READ,
MAP_PRIVATE, fd, 0); wrapper.c:void *xmmap(void *start, size_t length,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If I wanted to see the line number of each match as well, I
can add the '-n' option:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git grep -n xmmap</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:95.6pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>config.c:1016:         
contents = xmmap(NULL, contents_sz, PROT_READ, diff.c:1833:           
s-&gt;data = xmmap(NULL, s-&gt;size, PROT_READ, MAP_PRIVATE, fd,
git-compat-util.h:291:extern void *xmmap(void *start, size_t length, int prot,
int read-cache.c:1178:      mmap = xmmap(NULL, mmap_size, PROT_READ |
PROT_WRITE, MAP_ refs.c:1345:    log_mapped = xmmap(NULL, mapsz, PROT_READ,
MAP_PRIVATE, logfd, 0); sha1_file.c:377:        map = xmmap(NULL, mapsz,
PROT_READ, MAP_PRIVATE, fd, 0); sha1_file.c:479:        idx_map = xmmap(NULL,
idx_size, PROT_READ, MAP_PRIVATE, fd sha1_file.c:780:                       
win-&gt;base = xmmap(NULL, win-&gt;len, sha1_file.c:1076:                      
map = xmmap(NULL, *size, PROT_READ, MAP_PR sha1_file.c:2393:               buf =
xmmap(NULL, size, PROT_READ, MAP_PRIVATE, fd wrapper.c:89:void *xmmap(void
*start, size_t length,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If we're only interested in the filename, we can pass the
'--name-only' option:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git grep --name-only
xmmap</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:407.6pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>config.c
diff.c git-compat-util.h read-cache.c refs.c sha1_file.c wrapper.c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We could also see how many line matches we have in each
file with the '-c' option:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.0pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git grep
-c xmmap config.c:1 diff.c:1 git-compat-util.h:1 read-cache.c:1 refs.c:1
sha1_file.c:5 wrapper.c:1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now, if I wanted to see where that was used in a specific
version of git, I could add the tag reference to the end, like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git grep xmmap v1.5.0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:52.4pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>v1.5.0:config.c:               
contents = xmmap(NULL, st.st_size, PROT_READ, v1.5.0:diff.c:         
s-&gt;data = xmmap(NULL, s-&gt;size, PROT_READ, MAP_PRIVATE, fd,
v1.5.0:git-compat-util.h:static inline void *xmmap(void *start, size_t length,
v1.5.0:read-cache.c:                    cache_mmap = xmmap(NULL,
cache_mmap_size, v1.5.0:refs.c:  log_mapped = xmmap(NULL, st.st_size,
PROT_READ, MAP_PRIVATE, logfd v1.5.0:sha1_file.c:     map = xmmap(NULL,
st.st_size, PROT_READ, MAP_PRIVATE, fd, v1.5.0:sha1_file.c:     idx_map =
xmmap(NULL, idx_size, PROT_READ, MAP_PRIVATE, fd
v1.5.0:sha1_file.c:                     win-&gt;base = xmmap(NULL, win-&gt;len,
v1.5.0:sha1_file.c:     map = xmmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE,
fd, v1.5.0:sha1_file.c:             buf = xmmap(NULL, size, PROT_READ,
MAP_PRIVATE, fd</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>We can see that there are some differences between the
current lines and these lines in version 1.5.0, one of which is that xmmap is
now used in wrapper.c where it was not back in v1.5.0.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We can also combine search terms in grep. Say we wanted to
search for where SORT_DIRENT is defined in our repository:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:210.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git grep -e
'#define' --and -e SORT_DIRENT builtin-fsck.c:#define SORT_DIRENT 0
builtin-fsck.c:#define SORT_DIRENT 1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We can also search for every file that has <i>both </i>search
terms, but display each line that has <i>either </i>of the terms in those
files:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git grep --all-match -e
'#define' -e SORT_DIRENT</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:210.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-fsck.c:#define
REACHABLE 0x0001 builtin-fsck.c:#define SEEN      0x0002 builtin-fsck.c:#define
ERROR_OBJECT 01 builtin-fsck.c:#define ERROR_REACHABLE 02
builtin-fsck.c:#define SORT_DIRENT 0 builtin-fsck.c:#define
DIRENT_SORT_HINT(de) 0 builtin-fsck.c:#define SORT_DIRENT 1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-fsck.c:#define
DIRENT_SORT_HINT(de) ((de)-&gt;d_ino)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:196.4pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-fsck.c:#define
MAX_SHA1_ENTRIES (1024) builtin-fsck.c: if (SORT_DIRENT)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We can also search for lines that have one term and either
of two other terms, for example, if we wanted to see where we defined constants
that had either PATH or MAX in the name:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git grep -e '#define'
--and \( -e PATH -e MAX \)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>abspath.c:#define MAXDEPTH
5</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-blame.c:#define
MORE_THAN_ONE_PATH      (1u&lt;&lt;13)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-blame.c:#define
MAXSG 16</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-describe.c:#define
MAX_TAGS     (FLAG_BITS - 1)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:254.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>builtin-fetch-pack.c:#define
MAX_IN_VAIN 256 builtin-fsck.c:#define MAX_SHA1_ENTRIES (1024) ...</span></p>

<h1 style='margin-left:70.6pt'>UNDOING IN GIT - RESET, CHECKOUT AND REVERT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Git provides multiple methods for fixing up mistakes as you
are developing. Selecting an appropriate method depends on whether or not you
have committed the mistake, and if you have committed the mistake, whether you
have shared the erroneous commit with anyone else.</p>

<h2 style='margin-left:70.6pt'>Fixing un-committed mistakes</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you've messed up the working tree, but haven't yet
committed your mistake, you can return the entire working tree to the last
committed state with</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git reset --hard HEAD</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:7.75pt;margin-bottom:
4.05pt;margin-left:70.6pt;line-height:155%'>This will throw away any changes
you may have added to the git index and as well as any outstanding changes you
have in your working tree. In other words, it causes the results of &quot;git
diff&quot; and &quot;git diff --cached&quot; to both be empty. If you just want
to restore just one file, say your hello.rb, use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-checkout.html"><span
style='color:black;text-decoration:none'>git checkout</span></a> instead</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git checkout -- hello.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git checkout HEAD
hello.rb</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The first command restores hello.rb to the version in the
index, so that &quot;git diff hello.rb&quot; returns no differences. The second
command will restore hello.rb to the version in the HEAD revision, so that both
&quot;git diff hello.rb&quot; and &quot;git diff -cached hello.rb&quot; return
no differences.</p>

<h2 style='margin-left:70.6pt'>Fixing committed mistakes</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you make a commit that you later wish you hadn't, there
are two fundamentally different ways to fix the problem:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:110.85pt;text-indent:-15.2pt'><span style='line-height:112%'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>You can
create a new commit that undoes whatever was done by the old commit. This is
the correct thing if your mistake has already been made public.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:110.85pt;text-indent:-15.2pt'><span style='line-height:112%'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>You can
go back and modify the old commit. You should never do this if you have already
made the history public; git does not normally expect the &quot;history&quot;
of a project to change, and cannot correctly perform repeated merges from a
branch that has had its history changed.</p>

<h1 style='margin-left:70.6pt'>Fixing a mistake with a new commit</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Creating a new commit that reverts an earlier change is
very easy; just pass the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-revert.html"><span
style='color:black;text-decoration:none'>git revert</span></a> command a
reference to the bad commit; for example, to revert the most recent commit:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git revert HEAD</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This will create a new commit which undoes the change in
HEAD. You will be given a chance to edit the commit message for the new commit.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also revert an earlier change, for example, the
next-to-last:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git revert HEAD^</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>In this case git will attempt to undo the old change while
leaving intact any changes made since then. If more recent changes overlap with
the changes to be reverted, then you will be asked to fix conflicts manually,
just as in the case of resolving a merge.</p>

<h1 style='margin-left:70.6pt'>Fixing a mistake by modifying a commit</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you have just committed something but realize you need
to fix up that commit, recent versions of <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html"><span
style='color:black;text-decoration:none'>git commit</span></a> support an <b>--amend
</b>flag which instructs git to replace the HEAD commit with a new one, based
on the current contents of the index. This gives you an opportunity to add
files that you forgot to add or correct typos in a commit message, prior to
pushing the change out for the world to see.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>If you find a mistake in an older commit, but still one
that you have not yet published to the world, you use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-rebase.html"><span
style='color:black;text-decoration:none'>git rebase</span></a> in interactive
mode, with &quot;git rebase -i&quot; marking the change that requires
correction with <b>edit</b>. This will allow you to amend the commit during the
rebasing process.</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>MAINTAINING GIT</h1>

<h2 style='margin-left:70.6pt'>Ensuring good performance</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>On large repositories, git depends on compression to keep
the history information from taking up too much space on disk or in memory.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This compression is not performed automatically. Therefore
you should occasionally run <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-gc.html"><span
style='color:black;text-decoration:none'>git gc</span></a>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git gc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>to recompress the archive. This can be very time-consuming,
so you may prefer to run git-gc when you are not doing other work.</p>

<h2 style='margin-left:70.6pt'>Ensuring reliability</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-fsck.html"><span
style='color:black;text-decoration:none'>git fsck</span></a> command runs a
number of self-consistency checks on the repository, and reports on any
problems. This may take some time. The most common warning by far is about
&quot;dangling&quot; objects:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git fsck</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:215.6pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>dangling
commit 7281251ddd2a61e38657c827739c57015671a6b3 dangling commit
2706a059f258c6b245f298dc4ff2ccd30ec21a63 dangling commit
13472b7c4b80851a1bc551779171dcb03655e9b5 dangling blob
218761f9d90712d37a9c5e36f406f92202db07eb dangling commit bf093535a34a4d35731aa2bd90fe6b176302f14f
dangling commit 8e4bec7f2ddaa268bef999853c25755452100f8e dangling tree
d50bb86186bf27b681d25af89d3b5b68382e4085 dangling tree
b24c2473f1fd3d91352a624795be026d64c8841f ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>Dangling objects are not a problem. At worst they may take
up a little extra disk space. They can sometimes provide a last-resort method
for recovering lost work.</p>

<h1 style='margin-left:70.6pt'>SETTING UP A PUBLIC REPOSITORY</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Assume your personal repository is in the directory ~/proj.
We first create a new clone of the repository and tell gitdaemon that it is
meant to be public:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone --bare ~/proj
proj.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ touch
proj.git/git-daemon-export-ok</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The resulting directory proj.git contains a
&quot;bare&quot; git repository--it is just the contents of the
&quot;.git&quot; directory, without any files checked out around it.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Next, copy proj.git to the server where you plan to host
the public repository. You can use scp, rsync, or whatever is most convenient.</p>

<h2 style='margin-left:70.6pt'>Exporting a git repository via the git protocol</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This is the preferred method.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If someone else administers the server, they should tell
you what directory to put the repository in, and what git:// URL it will appear
at.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Otherwise, all you need to do is start <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-daemon.html"><span
style='color:black;text-decoration:none'>git daemon</span></a>; it will listen
on port 9418. By default, it will allow access to any directory that looks like
a git directory and contains the magic file git-daemon-export-ok. Passing some
directory paths as git-daemon arguments will further restrict the exports to those
paths.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>You can also run git-daemon as an inetd service; see the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-daemon.html"><span
style='color:black;text-decoration:none'>git daemon</span></a> man page for
details. (See especially the examples section.)</p>

<h2 style='margin-left:70.6pt'>Exporting a git repository via http</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>The git protocol gives better performance and reliability,
but on a host with a web server set up, http exports may be simpler to set up.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>All you need to do is place the newly created bare git
repository in a directory that is exported by the web server, and make some
adjustments to give web clients some extra information they need:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ mv proj.git
/home/you/public_html/proj.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd proj.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git --bare
update-server-info</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ chmod a+x
hooks/post-update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>(For an explanation of the last two lines, see <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-update-server-info.html"><span
style='color:black;text-decoration:none'>git update-server-info</span></a> and <a
href="http://www.kernel.org/pub/software/scm/git/docs/githooks.html"><span
style='color:black;text-decoration:none'>githooks</span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/githooks.html"><span
style='color:black;text-decoration:none'>.</span></a>)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Advertise the URL of proj.git. Anybody else should then be
able to clone or pull from that URL, for example with a command line like:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:27.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone
http://yourserver.com/~you/proj.git</span></p>

<h1 style='margin-left:70.6pt'>SETTING UP A PRIVATE REPOSITORY</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>If you need to setup a private repository and want to do so
locally, rather than using a hosted solution, you have a number of options.</p>

<h2 style='margin-left:70.6pt'>Repo Access over SSH</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Generally, the easiest solution is to simply use Git over
SSH. If users already have ssh accounts on a machine, you can put the git
repository anywhere on the box that they have access to and let them access it
over normal ssh logins. For example, say you have a repository you want to
host. You can export it as a bare repo and then scp it onto your server like
so:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone --bare
/home/user/myrepo/.git /tmp/myrepo.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ scp -r /tmp/myrepo.git
myserver.com:/opt/git/myrepo.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Then someone else with an ssh account on myserver.com can
clone via:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone
myserver.com:/opt/git/myrepo.git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Which will simply prompt them for thier ssh password or use
thier public key, however they have ssh authentication setup.</p>

<h2 style='margin-left:70.6pt'>Multiple User Access using Gitosis</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you don't want to setup seperate accounts for every
user, you can use a tool called Gitosis. In gitosis, there is an
authorized_keys file that contains the public keys of everyone authorized to
access the repository, and then everyone uses the 'git' user to do pushes and
pulls.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'><a
href="http://www.urbanpuddle.com/articles/2008/07/11/installing-git-on-a-server-ubuntu-or-debian"><span
style='color:black;text-decoration:none'>Installing and Setting up Gitosis</span></a></p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection7>

<p class=MsoNormal style='margin-top:0in;margin-right:378.25pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 5 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>Advanced Git</span></b></p>

<h1 style='margin-left:70.6pt'>CREATING NEW EMPTY BRANCHES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:41.9pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Ocasionally, you may want to keep branches in your
repository that do not share an ancestor with your normal code. Some examples
of this might be generated documentation or something along those lines. If you
want to create a new branch head that does not use your current codebase as a
parent, you can create an empty branch like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>git symbolic-ref HEAD
refs/heads/newbranch</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:456.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>rm .git/index
git clean -fdx</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.4in;margin-bottom:.15pt;
margin-left:70.85pt;text-indent:10.4pt;line-height:134%'><span
style='font-size:8.0pt;line-height:134%;font-family:"Calibri",sans-serif;
color:#660000'>&lt;do work&gt; git add your files git commit -m 'Initial
commit' </span>gitcast:c9-empty-branch</p>

<h1 style='margin-left:70.6pt'>MODIFYING YOUR HISTORY</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:275.25pt;margin-bottom:
14.9pt;margin-left:70.6pt;line-height:203%'>Interactive rebasing is a good way
to modify individual commits. <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-filter-branch.html"><span
style='color:black;text-decoration:none'>git filter-branch</span></a> is a good
way to edit commits en masse.</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>ADVANCED BRANCHING AND MERGING</h1>

<h2 style='margin-left:70.6pt'>Getting conflict-resolution help during a merge</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:24.15pt;margin-bottom:
9.05pt;margin-left:70.6pt'>All of the changes that git was able to merge
automatically are already added to the index file, so <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a> shows only the
conflicts. It uses an unusual syntax:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.2in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff diff --cc
file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>index
802992c,2b60207..0000000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>--- a/file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+++ b/file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>@@@ -1,1 -1,1 +1,5 @@@</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>++&lt;&lt;&lt;&lt;&lt;&lt;&lt;
HEAD:file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:86.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+Hello world</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>++=======</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+ Goodbye</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>++&gt;&gt;&gt;&gt;&gt;&gt;&gt;
77976da35a11db4580b80ae27e8d65caf5208086:file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.95pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Recall that the commit which will be committed after
we resolve this conflict will have two parents instead of the usual one: one
parent will be HEAD, the tip of the current branch; the other will be the tip
of the other branch, which is stored temporarily in MERGE_HEAD.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.75pt;margin-bottom:
9.05pt;margin-left:70.6pt'>During the merge, the index holds three versions of
each file. Each of these three &quot;file stages&quot; represents a different
version of the file:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:182.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git show
:1:file.txt  # the file in a common ancestor of both branches $ git show
:2:file.txt  # the version from HEAD.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git show :3:file.txt  #
the version from MERGE_HEAD.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.5pt;margin-bottom:
10.7pt;margin-left:70.6pt'>When you ask <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='color:black;text-decoration:none'>git diff</span></a> to show the
conflicts, it runs a three-way diff between the conflicted merge results in the
work tree with stages 2 and 3 to show only hunks whose contents come from both
sides, mixed (in other words, when a hunk's merge results come only from stage
2, that part is not conflicting and is not shown. Same for stage 3).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.25pt;margin-bottom:
9.05pt;margin-left:70.6pt'>The diff above shows the differences between the
working-tree version of file.txt and the stage 2 and stage 3 versions. So
instead of preceding each line by a single &quot;+&quot; or &quot;-&quot;, it
now uses two columns: the first column is used for differences between the
first parent and the working directory copy, and the second for differences
between the second parent and the working directory copy. (See the
&quot;COMBINED DIFF FORMAT&quot; section of <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff-files.html"><span
style='color:black;text-decoration:none'>git diff-files</span></a> for a
details of the format.) After resolving the conflict in the obvious way (but
before updating the index), the diff will look like:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.2in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff diff --cc
file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>index
802992c,2b60207..0000000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>--- a/file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+++ b/file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>@@@ -1,1 -1,1 +1,1 @@@</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>- Hello world</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-Goodbye</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>++Goodbye world</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:34.2pt;margin-bottom:
9.05pt;margin-left:70.6pt'>This shows that our resolved version deleted
&quot;Hello world&quot; from the first parent, deleted &quot;Goodbye&quot; from
the second parent, and added &quot;Goodbye world&quot;, which was previously
absent from both.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Some special diff options allow diffing the working
directory against any of these stages:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff -1
file.txt      # diff against stage 1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff --base
file.txt  # same as the above</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff -2
file.txt      # diff against stage 2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff --ours
file.txt  # same as the above</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:283.2pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff -3
file.txt      # diff against stage 3 $ git diff --theirs file.txt    # same as
the above.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-log.html"><span
style='color:black;text-decoration:none'>git log</span></a> and <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitk.html"><span
style='color:black;text-decoration:none'>gitk</span></a> commands also provide
special help for merges:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git log --merge</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ gitk --merge</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>These will display all commits which exist only on HEAD or
on MERGE_HEAD, and which touch an unmerged file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>You may also use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-mergetool.html"><span
style='color:black;text-decoration:none'>git mergetool,</span></a> which lets
you merge the unmerged files using external tools such as emacs or kdiff3.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Each time you resolve the conflicts in a file and update
the index:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:67.55pt;margin-bottom:
9.05pt;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git add file.txt </span>the different stages of that file will
be &quot;collapsed&quot;, after which git-diff will (by default) no longer show
diffs for that file.</p>

<h2 style='margin-left:70.6pt'>Multiway Merge</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can merge several heads at one time by simply listing
them on the same <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-merge.html"><span
style='color:black;text-decoration:none'>git merge</span></a> command. For
instance,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge scott/master
rick/master tom/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>is the equivalent of:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge scott/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge rick/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge tom/master</span></p>

<h2 style='margin-left:70.6pt'>Subtree</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:.6in;margin-bottom:10.7pt;
margin-left:70.6pt'>There are situations where you want to include contents in
your project from an independently developed project. You can just pull from
the other project as long as there are no conflicting paths.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.2pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The problematic case is when there are conflicting
files. Potential candidates are Makefiles and other standard filenames. You
could merge these files but probably you do not want to. A better solution for
this problem can be to merge the project as its own subdirectory. This is not
supported by the recursive merge strategy, so just pulling won't work.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>What you want is the subtree merge strategy, which helps
you in such a situation.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.7pt;margin-bottom:
10.7pt;margin-left:70.6pt'>In this example, let's say you have the repository
at /path/to/B (but it can be an URL as well, if you want). You want to merge
the master branch of that repository to the dir-B subdirectory in your current
branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Here is the command sequence you need:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git remote add -f
Bproject /path/to/B (1)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git merge -s ours
--no-commit Bproject/master (2)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git read-tree
--prefix=dir-B/ -u Bproject/master (3)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -m
&quot;Merge B project as our subdirectory&quot; (4)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git pull -s subtree
Bproject master (5)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.9pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The benefit of using subtree merge is that it
requires less administrative burden from the users of your repository. It works
with older (before Git v1.5.2) clients and you have the code right after clone.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.9pt;margin-bottom:
10.7pt;margin-left:70.6pt'>However if you use submodules then you can choose
not to transfer the submodule objects. This may be a problem with the subtree
merge.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Also, in case you make changes to the other project, it is
easier to submit changes if you just use submodules.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:70.6pt'>(from <a
href="http://www.kernel.org/pub/software/scm/git/docs/howto/using-merge-subtree.html"><span
style='color:black;text-decoration:none'>Using Subtree Merge</span></a>)</p>

<h1 style='margin-left:70.6pt'>FINDING ISSUES - GIT BISECT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:40.4pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Suppose version 2.6.18 of your project worked, but
the version at &quot;master&quot; crashes. Sometimes the best way to find the
cause of such a regression is to perform a brute-force search through the
project's history to find the particular commit that caused the problem. The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html"><span
style='color:black;text-decoration:none'>git bisect</span></a> command can help
you do this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git bisect start</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git bisect good v2.6.18</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git bisect bad master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Bisecting: 3537 revisions
left to test after this</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>[65934a9a028b88e83e2b0f8b36618fe503349f8e]
BLOCK: Make USB storage depend on SCSI rather than selecting it [try </span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.35pt;margin-bottom:
9.05pt;margin-left:70.6pt'>If you run &quot;git branch&quot; at this point,
you'll see that git has temporarily moved you to a new branch named
&quot;bisect&quot;. This branch points to a commit (with commit id 65934...)
that is reachable from &quot;master&quot; but not from v2.6.18. Compile and
test it, and see whether it crashes. Assume it does crash. Then:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git bisect bad</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Bisecting: 1769 revisions
left to test after this</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>[7eff82c8b1511017ae605f0c99ac275a7e21b867]
i2c-core: Drop useless bitmaskings</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:18.6pt;margin-bottom:
10.7pt;margin-left:70.6pt'>checks out an older version. Continue like this,
telling git at each stage whether the version it gives you is good or bad, and
notice that the number of revisions left to test is cut approximately in half
each time.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.55pt;margin-bottom:
9.05pt;margin-left:70.6pt'>After about 13 tests (in this case), it will output
the commit id of the guilty commit. You can then examine the commit with <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-show.html"><span
style='color:black;text-decoration:none'>git show</span></a>, find out who
wrote it, and mail them your bug report with the commit id. Finally, run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:174.05pt;margin-bottom:
.8pt;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git bisect reset </span>to return you to the branch you were
on before and delete the temporary &quot;bisect&quot; branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.35pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Note that the version which git-bisect checks out
for you at each point is just a suggestion, and you're free to try a different
version if you think it would be a good idea. For example, occasionally you may
land on a commit that broke something unrelated; run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git bisect visualize</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.55pt;margin-bottom:
9.05pt;margin-left:70.6pt'>which will run gitk and label the commit it chose
with a marker that says &quot;bisect&quot;. Choose a safe-looking commit
nearby, note its commit id, and check it out with:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git reset --hard
fb47ddb2db...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>then test, run &quot;bisect good&quot; or &quot;bisect
bad&quot; as appropriate, and continue.</p>

<h1 style='margin-left:70.6pt'>FINDING ISSUES - GIT BLAME</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:13.15pt;margin-bottom:
9.05pt;margin-left:70.6pt'>The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-blame.html"><span
style='color:black;text-decoration:none'>git blame</span></a> command is really
helpful for figuring out who changed which sections of a file. If you simple
run 'git blame [filename]' you'll get an output of the entire file with the
last commit sha, date and author for every line in the file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git blame
sha1_file.c ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0fcfd160 (Linus Torvalds 
2005-04-18 13:04:43 -0700    8)  */</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:134.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>0fcfd160
(Linus Torvalds  2005-04-18 13:04:43 -0700    9) #include &quot;cache.h&quot;
1f688557 (Junio C Hamano  2005-06-27 03:35:33 -0700   10) #include
&quot;delta.h&quot; a733cb60 (Linus Torvalds  2005-06-28 14:21:02 -0700   11)
#include &quot;pack.h&quot; 8e440259 (Peter Eriksen   2006-04-02 14:44:09
+0200   12) #include &quot;blob.h&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>8e440259 (Peter Eriksen  
2006-04-02 14:44:09 +0200   13) #include &quot;commit.h&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>8e440259 (Peter Eriksen  
2006-04-02 14:44:09 +0200   14) #include &quot;tag.h&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2in;margin-bottom:12.5pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>8e440259 (Peter Eriksen  
2006-04-02 14:44:09 +0200   15) #include &quot;tree.h&quot; f35a6d3b (Linus
Torvalds  2007-04-09 21:20:29 -0700   16) #include &quot;refs.h&quot; 70f5d5d3
(Nicolas Pitre   2008-02-28 00:25:19 -0500   17) #include &quot;pack-revindex.h&quot;628522ec
(Junio C Hamano    ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This is often helpful if a file had a line reverted or a
mistake that broke the build to help you see who changed that line last.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>You can also specify a start and end line for the blame:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git blame -L 160,+10
sha1_file.c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:2.8in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>ace1534d (Junio C Hamano
2005-05-07 00:38:04 -0700       160)} ace1534d (Junio C Hamano 2005-05-07
00:38:04 -0700       161) 0fcfd160 (Linus Torvalds 2005-04-18 13:04:43
-0700       162)/*</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0fcfd160 (Linus Torvalds
2005-04-18 13:04:43 -0700       163) * NOTE! This returns a statically allocate</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>790296fd (Jim Meyering  
2008-01-03 15:18:07 +0100       164) * careful about using it. Do an
&quot;xstrdup()</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0fcfd160 (Linus Torvalds
2005-04-18 13:04:43 -0700       165) * filename.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>ace1534d (Junio C Hamano
2005-05-07 00:38:04 -0700       166) *</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>ace1534d (Junio C Hamano
2005-05-07 00:38:04 -0700       167) * Also note that this returns the location
ace1534d (Junio C Hamano 2005-05-07 00:38:04 -0700       168) * SHA1 file can
happen from any alternate d19938ab (Junio C Hamano 2005-05-09 17:57:56 -0700      
169) * DB_ENVIRONMENT environment variable if i</span></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>GIT AND EMAIL</h1>

<h2 style='margin-left:70.6pt'>Submitting patches to a project</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>If you just have a few changes, the simplest way to submit
them may just be to send them as patches in email:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>First, use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-format-patch.html"><span
style='color:black;text-decoration:none'>git format-patch;</span></a> for
example:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git format-patch origin</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>will produce a numbered series of files in the current
directory, one for each patch in the current branch but not in origin/</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>HEAD.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:39.55pt;margin-bottom:
19.5pt;margin-left:70.6pt'>You can then import these into your mail client and
send them by hand. However, if you have a lot to send at once, you may prefer
to use the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-send-email.html"><span
style='color:black;text-decoration:none'>git send-email</span></a> script to
automate the process. Consult the mailing list for your project first to
determine how they prefer such patches be handled.</p>

<h2 style='margin-left:70.6pt'>Importing patches to a project</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:32.55pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Git also provides a tool called <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-am.html"><span
style='color:black;text-decoration:none'>git am</span></a> (am stands for
&quot;apply mailbox&quot;), for importing such an emailed series of patches.
Just save all of the patch-containing messages, in order, into a single mailbox
file, say &quot;patches.mbox&quot;, then run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git am -3 patches.mbox</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.95pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Git will apply each patch in order; if any conflicts
are found, it will stop, and you can manually fix the conflicts and resolve the
merge. (The &quot;-3&quot; option tells git to perform a merge; if you would
prefer it just to abort and leave your tree and index untouched, you may omit
that option.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Once the index is updated with the results of the conflict
resolution, instead of creating a new commit, just run</p>

<p class=MsoNormal style='margin-top:0in;margin-right:133.05pt;margin-bottom:
.8pt;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git am --resolved </span>and git will create the commit for
you and continue applying the remaining patches from the mailbox.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:31.0pt;margin-bottom:
25.45pt;margin-left:70.6pt'>The final result will be a series of commits, one
for each patch in the original mailbox, with authorship and commit log message
each taken from the message containing each patch.</p>

<h1 style='margin-left:70.6pt'>CUSTOMIZING GIT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html"><span
style='color:black;text-decoration:none'>git config</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:70.6pt;line-height:110%'><b>Changing your Editor</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config --global
core.editor emacs</span></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>Adding Aliases</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config --global
alias.last 'cat-file commit HEAD'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git last</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:249.6pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:129%'><span style='font-size:8.0pt;
line-height:129%;font-family:"Calibri",sans-serif;color:#660000'>tree
c85fbd1996b8e7e5eda1288b56042c0cdb91836b parent
cdc9a0a28173b6ba4aca00eb34f5aabb39980735 author Scott Chacon
&lt;schacon@gmail.com&gt; 1220473867 -0700 committer Scott Chacon
&lt;schacon@gmail.com&gt; 1220473867 -0700 fixed a weird formatting problem</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:249.6pt;margin-bottom:
20.95pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file
commit HEAD tree c85fbd1996b8e7e5eda1288b56042c0cdb91836b parent
cdc9a0a28173b6ba4aca00eb34f5aabb39980735 author Scott Chacon
&lt;schacon@gmail.com&gt; 1220473867 -0700 committer Scott Chacon
&lt;schacon@gmail.com&gt; 1220473867 -0700 fixed a weird formatting problem</span></p>

<h2 style='margin-left:70.6pt'>Adding Color</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>See all color.* options in the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html"><span
style='color:black;text-decoration:none'>git config</span></a> docs</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config color.branch
auto</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config color.diff
auto</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config
color.interactive auto</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config color.status
auto</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Or, you can set all of them on with the color.ui option:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config color.ui true</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:70.6pt;line-height:110%'><b>Commit Template</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config
commit.template '/etc/git-commit-template'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;
margin-left:70.6pt;line-height:110%'><b>Log Format</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git config format.pretty
oneline</span></p>

<h2 style='margin-left:70.6pt'>Other Config Options</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:70.6pt'>There are also a number of interesting options for packing,
gc-ing, merging, remotes, branches, http transport, diffs, paging, whitespace
and more. If you want to tweak these, check out the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-config.html"><span
style='color:black;text-decoration:none'>git config</span></a> docs.</p>

<h1 style='margin-left:70.6pt'>GIT HOOKS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:41.75pt;margin-bottom:
19.5pt;margin-left:70.6pt'>Hooks are little scripts you can place in
$GIT_DIR/hooks directory to trigger action at certain points. When git-init is
run, a handful example hooks are copied in the hooks directory of the new
repository, but by default they are all disabled. To enable a hook, rename it
by removing its .sample suffix.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>applypatch-msg</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/applypatch-msg</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by git-am script. It takes a
single parameter, the name of the file that holds the proposed commit log
message. Exiting with non-zero status causes git-am to abort before applying
the patch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.15pt;margin-bottom:
19.5pt;margin-left:70.6pt'>The hook is allowed to edit the message file in
place, and can be used to normalize the message into some project standard
format (if the project has one). It can also be used to refuse the commit after
inspecting the message file. The default applypatch-msg hook, when enabled,
runs the commit-msg hook, if the latter is enabled.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>pre-applypatch</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/pre-applypatch</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by git-am. It takes no
parameter, and is invoked after the patch is applied, but before a commit is
made. If it exits with non-zero status, then the working tree will not be
committed after applying the patch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>It can be used to inspect the current working tree and
refuse to make a commit if it does not pass certain test. The default
pre-applypatch hook, when enabled, runs the pre-commit hook, if the latter is
enabled.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>post-applypatch</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/post-applypatch</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This hook is invoked by 'git-am'. It takes no parameter,
and is invoked after the patch is applied and a commit is made.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>This hook is meant primarily for notification, and cannot
affect the outcome of 'git-am'.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>pre-commit</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.55pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/pre-commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by 'git-commit', and can be
bypassed with <span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>\--no-verify </span>option. It takes no parameter, and is
invoked before obtaining the proposed commit log message and making a commit.
Exiting with non-zero status from this script causes the 'git-commit' to abort.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.55pt;margin-bottom:
10.85pt;margin-left:70.6pt'>The default 'pre-commit' hook, when enabled,
catches introduction of lines with trailing whitespaces and aborts the commit
when such a line is found.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:31.25pt;margin-bottom:
9.05pt;margin-left:70.6pt'>All the 'git-commit' hooks are invoked with the
environment variable <span style='font-size:8.0pt;line-height:112%;font-family:
"Calibri",sans-serif;color:#660000'>GIT_EDITOR=: </span>if the command will not
bring up an editor to modify the commit message.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.1pt;
margin-left:70.6pt'>Here is an example of a Ruby script that runs RSpec tests
before allowing a commit.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:225.55pt;margin-bottom:
.1pt;margin-left:81.2pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>html_path </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#036A07'>&quot;spec_results.html&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.35pt;
margin-left:81.0pt;line-height:105%'><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#036A07'>`spec -f h:</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#26B31A'>#{html_path} </span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#036A07'>-f p spec` </span><span
style='font-size:8.5pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0066FF'>#run the spec. send progress to screen. save html results to
html_path</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:333.6pt;margin-bottom:
0in;margin-left:81.0pt;line-height:105%'><span style='font-size:8.5pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0066FF'>#find out how
many errors were found </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>html </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:blue'>= </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>open</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(html_path).</span><span style='font-size:
8.0pt;line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>read</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
9.9pt;margin-left:81.75pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>examples </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif'>html.</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#0000A2'>match</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>/(</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#26B31A'>\d</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>+) examples/</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif'>)[</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>0</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>].</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>to_i </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:blue'>rescue </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>0 </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>failures </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:blue'>= </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>html.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>match</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#036A07'>/(</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#26B31A'>\d</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#036A07'>+) failures/</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>)[</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>0</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>].</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>to_i </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>rescue </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:mediumblue'>0 </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>pending
</span><span style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif'>html.</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#0000A2'>match</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>/(</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#26B31A'>\d</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>+) pending/</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>)[</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>0</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>].</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>to_i </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:blue'>rescue </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:263.95pt;margin-bottom:
.1pt;margin-left:90.15pt;text-indent:-9.45pt;line-height:105%'><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>if </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif'>failures.</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#0000A2'>zero? </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>puts </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>&quot;0 failures! </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#26B31A'>#{examples} </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>run, </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#26B31A'>#{pending} </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>pending&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:472.3pt;margin-bottom:
.15pt;margin-left:81.2pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:blue'>else</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:225.55pt;margin-bottom:
.1pt;margin-left:91.35pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>puts </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>&quot;</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#26B31A'>\a</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>DID NOT COMMIT YOUR FILES!&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:225.55pt;margin-bottom:
.1pt;margin-left:91.35pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>puts </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>&quot;View spec results at </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#26B31A'>#{</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#6D79DE'>File</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#26B31A'>.</span><span style='font-size:
8.0pt;line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>expand_path</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#26B31A'>(html_path)}</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#036A07'>&quot; </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>puts</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:196.75pt;margin-bottom:
0in;margin-left:90.85pt;text-indent:0in;line-height:103%'><span
style='font-size:8.0pt;line-height:103%;font-family:"Calibri",sans-serif'>puts </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Calibri",sans-serif;
color:#036A07'>&quot;</span><span style='font-size:8.0pt;line-height:103%;
font-family:"Calibri",sans-serif;color:#26B31A'>#{failures} </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Calibri",sans-serif;
color:#036A07'>failures! </span><span style='font-size:8.0pt;line-height:103%;
font-family:"Calibri",sans-serif;color:#26B31A'>#{examples} </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Calibri",sans-serif;
color:#036A07'>run, </span><span style='font-size:8.0pt;line-height:103%;
font-family:"Calibri",sans-serif;color:#26B31A'>#{pending} </span><span
style='font-size:8.0pt;line-height:103%;font-family:"Calibri",sans-serif;
color:#036A07'>pending&quot; </span><span style='font-size:8.0pt;line-height:
103%;font-family:"Calibri",sans-serif'>exit </span><span style='font-size:8.0pt;
line-height:103%;font-family:"Calibri",sans-serif;color:mediumblue'>1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:472.3pt;margin-bottom:
21.2pt;margin-left:81.2pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:blue'>end</span></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>prepare-commit-msg</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/prepare-commit-msg</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This hook is invoked by 'git-commit' right after preparing
the default log message, and before the editor is started.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:30.85pt;margin-bottom:
10.5pt;margin-left:70.6pt'>It takes one to three parameters. The first is the
name of the file that the commit log message. The second is the source of the
commit message, and can be: <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>message </span>(if a <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>-m </span>or <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>-F </span>option was given); <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>template </span>(if a <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>-t </span>option was given
or the configuration option <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>commit.template </span>is set);
<span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>merge </span>(if the commit is a merge or a <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>.git/MERGE_MSG </span>file exists); <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>squash </span>(if
a <span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>.git/SQUASH_MSG </span>file exists); or <span style='font-size:
8.0pt;line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>commit</span>,
followed by a commit SHA1 (if a <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>-c</span>, <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>-C </span>or <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>\--amend </span>option was
given).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>If the exit status is non-zero, 'git-commit' will abort.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:32.15pt;margin-bottom:
11.05pt;margin-left:70.6pt'>The purpose of the hook is to edit the message file
in place, and it is not suppressed by the <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>\--no-verify </span>option.
A nonzero exit means a failure of the hook and aborts the commit. It should not
be used as replacement for pre-commit hook.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:34.5pt;margin-bottom:
19.5pt;margin-left:70.6pt'>The sample <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>prepare-commit-msg </span>hook
that comes with git comments out the <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>Conflicts: </span>part of
a merge's commit message.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>commit-msg</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.55pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/commit-msg</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.0pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by 'git-commit', and can be
bypassed with <span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>\--no-verify </span>option. It takes a single parameter, the
name of the file that holds the proposed commit log message. Exiting with
non-zero status causes the 'git-commit' to abort.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.15pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The hook is allowed to edit the message file in
place, and can be used to normalize the message into some project standard
format (if the project has one). It can also be used to refuse the commit after
inspecting the message file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.25pt;margin-bottom:
19.5pt;margin-left:70.6pt'>The default 'commit-msg' hook, when enabled, detects
duplicate &quot;Signed-off-by&quot; lines, and aborts the commit if one is
found.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>post-commit</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/post-commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This hook is invoked by 'git-commit'. It takes no
parameter, and is invoked after a commit is made.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>This hook is meant primarily for notification, and cannot
affect the outcome of 'git-commit'.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>pre-rebase</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/pre-rebase</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>This hook is called by 'git-rebase' and can be used to
prevent a branch from getting rebased.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>post-checkout</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/post-checkout</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:70.6pt'>This hook is invoked when a 'git-checkout' is run after
having updated the worktree. The hook is given three parameters:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.9pt;margin-bottom:
10.7pt;margin-left:70.6pt'>the ref of the previous HEAD, the ref of the new
HEAD (which may or may not have changed), and a flag indicating whether the
checkout was a branch checkout (changing branches, flag=1) or a file checkout
(retrieving a file from the index, flag=0). This hook cannot affect the outcome
of 'git-checkout'.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.65pt;margin-bottom:
19.5pt;margin-left:70.6pt'>This hook can be used to perform repository validity
checks, auto-display differences from the previous HEAD if different, or set
working dir metadata properties.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>post-merge</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/post-merge</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:15.8pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by 'git-merge', which happens
when a 'git-pull' is done on a local repository. The hook takes a single
parameter, a status flag specifying whether or not the merge being done was a
squash merge. This hook cannot affect the outcome of 'git-merge' and is not
executed, if the merge failed due to conflicts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.95pt;margin-bottom:
19.5pt;margin-left:70.6pt'>This hook can be used in conjunction with a
corresponding pre-commit hook to save and restore any form of metadata
associated with the working tree (eg: permissions/ownership, ACLS, etc). See
contrib/hooks/setgitperms.perl for an example of how to do this.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>pre-receive</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/pre-receive</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by 'git-receive-pack' on the
remote repository, which happens when a 'git-push' is done on a local
repository. Just before starting to update refs on the remote repository, the
pre-receive hook is invoked. Its exit status determines the success or failure
of the update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:23.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook executes once for the receive operation.
It takes no arguments, but for each ref to be updated it receives on standard
input a line of the format:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:11.1pt;
margin-left:70.6pt'>SP SP LF</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.45pt;margin-bottom:
10.85pt;margin-left:70.6pt'>where <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>&lt;old-value&gt; </span>is
the old object name stored in the ref, <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>&lt;new-value&gt; </span>is
the new object name to be stored in the ref and <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>&lt;ref-name&gt;
</span>is the full name of the ref. When creating a new ref, <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>&lt;old-value&gt; </span>is 40 <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>0</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.55pt;margin-bottom:
9.05pt;margin-left:70.6pt'>If the hook exits with non-zero status, none of the
refs will be updated. If the hook exits with zero, updating of individual refs
can still be prevented by the &lt;&lt;update,'update'&gt;&gt; hook.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.8pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Both standard output and standard error output are
forwarded to 'git-send-pack' on the other end, so you can simply <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>echo </span>messages for the user.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>If you wrote it in Ruby, you might get the args this way:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
12.6pt;margin-left:81.75pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>rev_old, rev_new, ref </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#318495'>STDIN</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>read</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>.</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>split</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>&quot; &quot;</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif'>)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Or in a bash script, something like this would work:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#!/bin/sh</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'># &lt;oldrev&gt;
&lt;newrev&gt; &lt;refname&gt;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># update a
blame tree while read oldrev newrev ref</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.6in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>do echo &quot;STARTING [$oldrev $newrev $ref]&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>for path in `git diff-tree
-r $oldrev..$newrev | awk '{print $6}'`</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>do</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:110.55pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>echo &quot;git update-ref
refs/blametree/$ref/$path $newrev&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:3.4in;margin-bottom:.15pt;
margin-left:100.45pt;text-indent:9.6pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>`git update-ref refs/blametree/$ref/$path $newrev` done</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.2pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>done</span></p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>update</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.15pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by 'git-receive-pack' on the
remote repository, which happens when a 'git-push' is done on a local
repository. Just before updating the ref on the remote repository, the update
hook is invoked. Its exit status determines the success or failure of the ref
update.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The hook executes once for each ref to be updated, and
takes three parameters:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>the name
of the ref being updated,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>the old
object name stored in the ref,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>and the
new objectname to be stored in the ref.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:34.15pt;margin-bottom:
10.7pt;margin-left:70.6pt'>A zero exit from the update hook allows the ref to
be updated. Exiting with a non-zero status prevents 'git-receive-pack' from
updating that ref.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.95pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook can be used to prevent 'forced' update on
certain refs by making sure that the object name is a commit object that is a
descendant of the commit object named by the old object name. That is, to
enforce a &quot;fast forward only&quot; policy.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:29.05pt;margin-bottom:
10.7pt;margin-left:70.6pt'>It could also be used to log the old..new status.
However, it does not know the entire set of branches, so it would end up firing
one e-mail per ref when used naively, though. The
&lt;&lt;post-receive,'post-receive'&gt;&gt; hook is more suited to that.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.7pt;margin-bottom:
10.75pt;margin-left:70.6pt'>Another use suggested on the mailing list is to use
this hook to implement access control which is finer grained than the one based
on filesystem group.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.8pt;margin-bottom:10.95pt;
margin-left:70.6pt'>Both standard output and standard error output are
forwarded to 'git-send-pack' on the other end, so you can simply <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>echo </span>messages for the user.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.95pt;margin-bottom:
19.5pt;margin-left:70.6pt'>The default 'update' hook, when enabled--and with <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>hooks.allowunannotated </span>config option turned on--prevents
unannotated tags to be pushed.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>post-receive</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/post-receive</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.75pt;margin-bottom:
9.05pt;margin-left:70.6pt'>This hook is invoked by 'git-receive-pack' on the
remote repository, which happens when a 'git-push' is done on a local
repository. It executes on the remote repository once after all the refs have
been updated.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This hook executes once for the receive operation. It takes
no arguments, but gets the same information as the
&lt;&lt;prereceive,'pre-receive'&gt;&gt; hook does on its standard input.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This hook does not affect the outcome of
'git-receive-pack', as it is called after the real work is done.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.85pt;margin-bottom:
10.75pt;margin-left:70.6pt'>This supersedes the
&lt;&lt;post-update,'post-update'&gt;&gt; hook in that it gets both old and new
values of all the refs in addition to their names.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.8pt;margin-bottom:11.05pt;
margin-left:70.6pt'>Both standard output and standard error output are
forwarded to 'git-send-pack' on the other end, so you can simply <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>echo </span>messages for the user.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:8.75pt;margin-bottom:
19.5pt;margin-left:70.6pt'>The default 'post-receive' hook is empty, but there
is a sample script <span style='font-size:8.0pt;line-height:112%;font-family:
"Calibri",sans-serif;color:#660000'>post-receive-email </span>provided in the <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>contrib/hooks </span>directory in git distribution, which
implements sending commit emails.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>post-update</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/post-update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:16.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>This hook is invoked by 'git-receive-pack' on the
remote repository, which happens when a 'git-push' is done on a local
repository. It executes on the remote repository once after all the refs have
been updated.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>It takes a variable number of parameters, each of which is
the name of ref that was actually updated.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This hook is meant primarily for notification, and cannot
affect the outcome of 'git-receive-pack'.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.35pt;margin-bottom:
9.05pt;margin-left:70.6pt'>The 'post-update' hook can tell what are the heads
that were pushed, but it does not know what their original and updated values
are, so it is a poor place to do log old..new. The
&lt;&lt;post-receive,'post-receive'&gt;&gt; hook does get both original and
updated values of the refs. You might consider it instead if you need them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.0pt;margin-bottom:
10.75pt;margin-left:70.6pt'>When enabled, the default 'post-update' hook runs
'git-update-server-info' to keep the information used by dumb transports (e.g.,
HTTP) up-to-date. If you are publishing a git repository that is accessible via
HTTP, you should probably enable this hook.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.8pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Both standard output and standard error output are
forwarded to 'git-send-pack' on the other end, so you can simply <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>echo </span>messages for the user.</p>

<h2 style='margin-top:0in;margin-right:0in;margin-bottom:6.0pt;margin-left:
70.6pt'>pre-auto-gc</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/hooks/pre-auto-gc</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:30.1pt;margin-bottom:
19.5pt;margin-left:70.6pt'>This hook is invoked by 'git-gc --auto'. It takes no
parameter, and exiting with non-zero status from this script causes the 'git-gc
--auto' to abort.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.15pt;
margin-left:70.6pt;line-height:110%'><b>References</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:70.6pt'><a
href="http://www.kernel.org/pub/software/scm/git/docs/githooks.html"><span
style='color:black;text-decoration:none'>Git Hooks</span></a> *
http://probablycorey.wordpress.com/2008/03/07/git-hooks-make-me-giddy/</p>

<h1 style='margin-left:70.6pt'>RECOVERING CORRUPTED OBJECTS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'><a
href="http://programblings.com/2008/06/07/the-illustrated-guide-to-recovering-lost-commits-with-git"><span
style='color:black;text-decoration:none'>Recovering Lost Commits Blog Post</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'><a
href="http://www.kernel.org/pub/software/scm/git/docs/howto/recover-corrupted-blob-object.txt"><span
style='color:black;text-decoration:none'>Recovering Corrupted Blobs by Linus</span></a></p>

<h1 style='margin-left:70.6pt'>SUBMODULES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:38.25pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Large projects are often composed of smaller,
self-contained modules. For example, an embedded Linux distribution's source
tree would include every piece of software in the distribution with some local
modifications; a movie player might need to build against a specific,
known-working version of a decompression library; several independent programs
might all share the same build scripts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.8pt;margin-bottom:
10.7pt;margin-left:70.6pt'>With centralized revision control systems this is
often accomplished by including every module in one single repository.
Developers can check out all modules or only the modules they need to work
with. They can even modify files across several modules in a single commit
while moving things around or updating APIs and translations.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:25.25pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Git does not allow partial checkouts, so duplicating
this approach in Git would force developers to keep a local copy of modules
they are not interested in touching. Commits in an enormous checkout would be
slower than you'd expect as Git would have to scan every directory for changes.
If modules have a lot of local history, clones would take forever.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:33.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>On the plus side, distributed revision control
systems can much better integrate with external sources. In a centralized
model, a single arbitrary snapshot of the external project is exported from its
own revision control and then imported into the local revision control on a
vendor branch. All the history is hidden. With distributed revision control you
can clone the entire external history and much more easily follow development
and re-merge local changes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.6pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Git's submodule support allows a repository to
contain, as a subdirectory, a checkout of an external project. Submodules
maintain their own identity; the submodule support just stores the submodule
repository location and commit ID, so other developers who clone the containing
project (&quot;superproject&quot;) can easily clone all the submodules at the
same revision. Partial checkouts of the superproject are possible: you can tell
Git to clone none, some or all of the submodules.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.2in;margin-bottom:9.05pt;
margin-left:70.6pt'>The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-submodule.html"><span
style='color:black;text-decoration:none'>git submodule</span></a> command is
available since Git 1.5.3. Users with Git 1.5.2 can look up the submodule
commits in the repository and manually check them out; earlier versions won't
recognize the submodules at all.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:35.0pt;margin-bottom:
9.05pt;margin-left:70.6pt'>To see how submodule support works, create (for
example) four example repositories that can be used later as a submodule:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ mkdir ~/git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd ~/git</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ for i in a b c d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.6in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>do mkdir $i cd $i git init</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:379.2pt;margin-bottom:
.15pt;margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>echo
&quot;module $i&quot; &gt; $i.txt git add $i.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.2in;margin-bottom:12.5pt;
margin-left:80.5pt;text-indent:19.2pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>git
commit -m &quot;Initial commit, submodule $i&quot; cd .. done</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now create the superproject and add all the submodules:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ mkdir super</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd super</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git init</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ for i in a b c d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:5.2in;margin-bottom:.15pt;
margin-left:99.7pt;text-indent:-19.2pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>do git submodule add ~/git/$i $i</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>done</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:11.2pt;
margin-left:70.6pt'>NOTE: Do not use local URLs here if you plan to publish
your superproject!</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>See what files <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>git-submodule </span>created:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ ls -a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.  ..  .git  .gitmodules 
a  b  c  d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.95pt;
margin-left:70.6pt'>The <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>git-submodule add </span>command
does a couple of things:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>It clones
the submodule under the current directory and by default checks out the master
branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>It adds
the submodule's clone path to the <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitmodules.html"><span
style='color:black;text-decoration:none'>gitmodules</span></a> file and adds
this file to the index, ready to be committed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>It adds
the submodule's current commit ID to the index, ready to be committed.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Commit the superproject:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:286.7pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git commit -m &quot;Add submodules a, b, c and d.&quot; </span>Now
clone the superproject:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd ..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git clone super cloned</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd cloned</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The submodule directories are there, but they're empty:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:484.8pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ ls -a a . 
..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git submodule status</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-d266b9873ad50488163457f025db7cdd9683d88b
a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-e81d457da15309b4fef4249aba9b50187999670d
b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-c1536a972b9affea0f16e0680ba87332dc059146
c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-d96249ff5d57de5de093e6baff9e0aafa5276a74
d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.6pt;margin-bottom:
11.1pt;margin-left:70.6pt'>NOTE: The commit object names shown above would be
different for you, but they should match the HEAD commit object names of your
repositories. You can check it by running <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git ls-remote
../git/a</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.8pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Pulling down the submodules is a two-step process.
First run <span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>git submodule init </span>to add the submodule repository URLs
to <span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>.git/config</span>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.65pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git submodule init</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now use <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>git-submodule update </span>to
clone the repositories and check out the commits specified in the superproject:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git submodule update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ ls -a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:13.1pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.  ..  .git  a.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.75pt;margin-bottom:
9.05pt;margin-left:70.6pt'>One major difference between <span style='font-size:
8.0pt;line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git-submodule
update </span>and <span style='font-size:8.0pt;line-height:112%;font-family:
"Calibri",sans-serif;color:#660000'>git-submodule add </span>is that <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>git-submodule update </span>checks out a specific commit, rather
than the tip of a branch. It's like checking out a tag: the head is detached,
so you're not working on a branch.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git branch</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:441.6pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>* (no branch)
master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.25pt;margin-bottom:
9.05pt;margin-left:70.6pt'>If you want to make a change within a submodule and
you have a detached head, then you should create or checkout a branch, make
your changes, publish the change within the submodule, and then update the
superproject to reference the new commit:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:422.55pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git checkout master </span>or</p>

<p class=MsoNormal style='margin-top:0in;margin-right:399.5pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git checkout -b fix-up </span>then</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ echo &quot;adding a line
again&quot; &gt;&gt; a.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a -m
&quot;Updated the submodule from within the superproject.&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:480.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push $
cd ..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:6.2in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git diff diff --git a/a
b/a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>index d266b98..261dfac
160000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>--- a/a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+++ b/a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>@@ -1 +1 @@</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>-Subproject commit
d266b9873ad50488163457f025db7cdd9683d88b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>+Subproject commit
261dfac35cb99d380eb966e102c1197139f7fa24</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -m
&quot;Updated submodule a.&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.85pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.75pt;
margin-left:70.6pt'>You have to run <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>git submodule update </span>after
<span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>git pull </span>if you want to update submodules, too.</p>

<h2 style='margin-left:70.6pt'>Pitfalls with submodules</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:23.3pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Always publish the submodule change before
publishing the change to the superproject that references it. If you forget to
publish the submodule change, others won't be able to clone the repository:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd ~/git/super/a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ echo i added another
line to this file &gt;&gt; a.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:312.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit
-a -m &quot;doing it wrong this time&quot; $ cd ..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -m
&quot;Updated submodule a again.&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git push</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd ~/git/cloned</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git pull</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:62.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git
submodule update error: pathspec '261dfac35cb99d380eb966e102c1197139f7fa24' did
not match any file(s) known to git.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Did you forget to 'git
add'?</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Unable to checkout
'261dfac35cb99d380eb966e102c1197139f7fa24' in submodule path 'a'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.8pt;margin-bottom:
9.05pt;margin-left:70.6pt'>If you are staging an updated submodule for commit
manually, be careful to not add a trailing slash when specifying the path. With
the slash appended, Git will assume you are removing the submodule and checking
that directory's contents into the containing repository.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd ~/git/super/a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ echo i added another
line to this file &gt;&gt; a.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:312.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit
-a -m &quot;doing it wrong this time&quot; $ cd ..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add a/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git status</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># On branch
master # Changes to be committed:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   (use &quot;git reset
HEAD &lt;file&gt;...&quot; to unstage)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#       deleted:    a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#       new file:  
a/a.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:427.2pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Modified
submodules:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # * a
aa5c351...0000000 (1):</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   &lt; Initial commit,
submodule a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>To fix the index after performing this operation, reset the
changes and then add the submodule without the trailing slash.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git reset HEAD A</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git add a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git status</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:408.0pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># On branch
master # Changes to be committed: #   (use &quot;git reset HEAD
&lt;file&gt;...&quot; to unstage)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#       modified:   a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:427.2pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # Modified
submodules:</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:398.4pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'># # * a
aa5c351...8d3ba36 (1):</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#   &gt; doing it wrong
this time</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>#</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.95pt;
margin-left:70.6pt'>You also should not rewind branches in a submodule beyond
commits that were ever recorded in any superproject.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.45pt;margin-bottom:
9.05pt;margin-left:70.6pt'>It's not safe to run <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>git submodule
update </span>if you've made and committed changes within a submodule without
checking out a branch first. They will be silently overwritten:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:451.2pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat a.txt
module a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ echo line added from
private2 &gt;&gt; a.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:4.2in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git commit -a -m
&quot;line added inside private2&quot; $ cd ..</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git submodule update</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>Submodule path 'a':
checked out 'd266b9873ad50488163457f025db7cdd9683d88b'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cd a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:451.2pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat a.txt
module a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>NOTE: The changes are still visible in the submodule's
reflog.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This is not the case if you did not commit your changes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>gitcast:c11-git-submodules</p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection8>

<p class=MsoNormal style='margin-top:0in;margin-right:283.7pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 6 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>Working with Git</span></b></p>

<h1 style='margin-left:70.6pt'>GIT ON WINDOWS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:363.1pt;margin-bottom:
14.75pt;margin-left:70.6pt;line-height:203%'>(mSysGit) gitcast:c10-windows-git</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>DEPLOYING WITH GIT</h1>

<h2 style='margin-left:70.6pt'>Capistrano and Git</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'><a href="http://github.com/guides/deploying-with-capistrano"><span
style='color:black;text-decoration:none'>GitHub Guide on Deploying with Cap</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'><a href="http://www.vimeo.com/369095"><span
style='color:black;text-decoration:none'>Git and Capistrano Screencast</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:23.65pt;
margin-left:70.6pt;line-height:110%'><b><span style='font-size:12.0pt;
line-height:110%'>SUBVERSION INTEGRATION</span></b></p>

<h1 style='margin-left:70.6pt'>SCM MIGRATION</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>So you've made the decision to move away from your existing
system and convert your whole project to Git. How can you do that easily?</p>

<h2 style='margin-left:70.6pt'>Importing Subversion</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Git comes with a script called git-svn that has a clone
command that will import a subversion repository into a new git repository.
There is also a free tool on the GitHub service that will do this for you.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git-svn clone
http://my-project.googlecode.com/svn/trunk new-project</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>This will give you a new Git repository with all the
history of the original Subversion repo. This takes a pretty good amount of
time, generally, since it starts with version 1 and checks out and commits
locally every single revision one by one.</p>

<h2 style='margin-left:70.6pt'>Importing Perforce</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>In contrib/fast-import you will find the git-p4 script,
which is a Python script that will import a Perforce repository for you.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$
~/git.git/contrib/fast-import/git-p4 clone //depot/project/main@all myproject</span></p>

<h2 style='margin-left:70.6pt'>Importing Others</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>These are other SCMs that listed high on the Git Survey,
should find import docs for them. !!TODO!!</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>CVS</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>Mercurial
(hg)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>Bazaar-NG</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:0in;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>Darcs</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>ClearCase</p>

<h1 style='margin-left:70.6pt'>GRAPHICAL GIT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Git has a couple of fairly popular Graphial User Interfaces
that can read and/or maniplulate Git repositories.</p>

<h2 style='margin-left:70.6pt'>Bundled GUIs</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:5.6pt;
margin-left:70.6pt;line-height:155%'>Git comes with two major GUI programs
written in Tcl/Tk. Gitk is a repository browser and commit history
visualization tool. <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitk.html"><span
style='color:black;text-decoration:none'>gitk</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-gui.html"><span
style='color:black;text-decoration:none'>git gui</span></a> is a tool that
helps you visualize the index operations, like add, remove and commit. It won't
do everything you can do on the command line, but for many of the basic
operations, it's pretty good.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-gui.html"><span
style='color:black;text-decoration:none'>git gui</span></a></p>

<h2 style='margin-left:70.6pt'>Third Party Projects</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>For Mac users, there are <a href="http://gitx.frim.nl/"><span
style='color:black;text-decoration:none'>GitX</span></a> and <a
href="http://github.com/Caged/gitnub/wikis"><span style='color:black;
text-decoration:none'>GitNub</span></a></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:70.6pt'>For Linux or other Qt users, there is <a
href="http://digilander.libero.it/mcostalba/"><span style='color:black;
text-decoration:none'>QGit</span></a></p>

<h1 style='margin-left:70.6pt'>HOSTED GIT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:435.35pt;margin-bottom:
14.75pt;margin-left:70.6pt;line-height:203%'>github repoorcz</p>

<h1 style='margin-left:70.6pt'>ALTERNATIVE USES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>ContentDistribution</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>TicGit</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:17.7pt;margin-left:
70.6pt'>SCRIPTING AND GIT</h1>

<h2 style='margin-left:70.6pt'>Ruby and Git</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:453.5pt;margin-bottom:
9.05pt;margin-left:70.6pt;line-height:203%'>grit jgit + jruby</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:19.7pt;
margin-left:70.6pt;line-height:110%'><b>PHP and Git</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.15pt;
margin-left:70.6pt;line-height:110%'><b>Python and Git</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>pygit</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.15pt;
margin-left:70.6pt;line-height:110%'><b>Perl and Git</b></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>perlgit</p>

<h1 style='margin-left:70.6pt'>GIT AND EDITORS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:433.65pt;margin-bottom:
0in;margin-left:70.6pt;line-height:203%'>textmate eclipse netbeans</p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection9>

<p class=MsoNormal style='margin-top:0in;margin-right:263.35pt;margin-bottom:
59.65pt;margin-left:70.6pt;text-indent:-71.35pt;line-height:110%'><b><span
style='font-size:12.0pt;line-height:110%'>Chapter 7 </span></b><b><span
style='font-size:24.0pt;line-height:110%'>Internals and Plumbing</span></b></p>

<h1 style='margin-left:70.6pt'>HOW GIT STORES OBJECTS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>This chapter goes into detail about how Git physically
stores objects.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.05pt;margin-bottom:
10.7pt;margin-left:70.6pt'>All objects are stored as compressed contents by
their sha values. They contain the object type, size and contents in a gzipped
format.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>There are two formats that Git keeps objects in - loose
objects and packed objects.</p>

<h2 style='margin-left:70.6pt'>Loose Objects</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:46.0pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Loose objects are the simpler format. It is simply
the compressed data stored in a single file on disk. Every object written to a
seperate file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.3pt;margin-bottom:
9.05pt;margin-left:70.6pt'>If the sha of your object is <span style='font-size:
8.0pt;line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>ab04d884140f7b0cf8bbf86d6883869f16a46f65</span>,
then the file will be stored in the following path:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_DIR/objects/ab/04d884140f7b0cf8bbf86d6883869f16a46f65</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:30.75pt;margin-bottom:
10.7pt;margin-left:70.6pt'>It pulls the first two characters off and uses that
as the subdirectory, so that there are never too many objects in one directory.
The actual file name is the remaining 38 characters.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The easiest way to describe exactly how the object data is
stored is this Ruby implementation of object storage:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:81.2pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:blue'>def </span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#0000A2'>put_raw_object</span><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif'>(</span><span style='font-size:8.5pt;
line-height:107%;font-family:"Calibri",sans-serif'>content,type</span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif'>)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
9.8pt;margin-left:90.8pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>size </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif'>content.</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:#0000A2'>length</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>to_s</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:225.85pt;margin-bottom:
9.9pt;margin-left:91.35pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>header </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#036A07'>&quot;</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#26B31A'>#{type}
#{size}\</span><span style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>0&quot; </span><span style='font-size:8.5pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#0066FF'>#type(space)size(null byte) </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>store
</span><span style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif'>header </span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif;color:blue'>+ </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
9.9pt;margin-left:90.8pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>sha1 </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#6D79DE'>Digest</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>::</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>SHA1</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>.</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>hexdigest</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(store)
path </span><span style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#318495'>@git_dir </span><span style='font-size:
8.0pt;line-height:105%;font-family:"Calibri",sans-serif;color:blue'>+ </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>'/' </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:blue'>+ </span><span style='font-size:
8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>sha1[</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>0</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>...</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>2</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>] </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>+ </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#036A07'>'/' </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:blue'>+ </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>sha1[</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>2</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>..</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>40</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
.1pt;margin-left:90.8pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:blue'>if !</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#6D79DE'>File</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>.</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>exists?</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(path)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
9.8pt;margin-left:100.95pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>content </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#6D79DE'>Zlib</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>::</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>Deflate</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>.</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>deflate</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(store)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
.1pt;margin-left:101.15pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#6D79DE'>FileUtils</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>mkdir_p</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#318495'>@directory</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>+</span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#036A07'>'/'</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:blue'>+</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>sha1[</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>0</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>...</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>2</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>])</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
.1pt;margin-left:101.15pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#6D79DE'>File</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>open</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(path, </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#036A07'>'w'</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>) </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>do </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif'>|</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif;color:#318495'>f</span><span style='font-size:
8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>|</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:261.05pt;margin-bottom:
.1pt;margin-left:110.55pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>f.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>write </span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>content</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:472.3pt;margin-bottom:
.15pt;margin-left:101.15pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:blue'>end</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:472.3pt;margin-bottom:
.15pt;margin-left:80.7pt;text-indent:9.6pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:blue'>end return </span><span style='font-size:8.0pt;line-height:107%;
font-family:"Calibri",sans-serif'>sha1 </span><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:blue'>end</span></p>

<h2 style='margin-left:70.6pt'>Packed Objects</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:38.5pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The other format for object storage is the packfile.
Since Git stores each version of each file as a seperate object, it can get
pretty inefficient. Imagine having a file several thousand lines long and
changing a single line. Git will store the second file in it's entirety, which
is a great big waste of space.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.0pt;margin-bottom:
10.7pt;margin-left:70.6pt'>In order to save that space, Git utilizes the
packfile. This is a format where Git will only save the part that has changed
in the second file, with a pointer to the file it is similar to.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:47.05pt;margin-bottom:
10.7pt;margin-left:70.6pt'>When objects are written to disk, it is often in the
loose format, since that format is less expensive to access. However,
eventually you'll want to save the space by packing up the objects - this is
done with the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-gc.html"><span
style='color:black;text-decoration:none'>git gc</span></a> command. It will use
a rather complicated heuristic to determine which files are likely most similar
and base the deltas off that analysis. There can be multiple packfiles, they
can be repacked if neccesary (<a
href="http://www.kernel.org/pub/software/scm/git/docs/git-repack.html"><span
style='color:black;text-decoration:none'>git repack</span></a>) or unpacked
back into loose files (<a
href="http://www.kernel.org/pub/software/scm/git/docs/git-unpack-objects.html"><span
style='color:black;text-decoration:none'>git unpack-objects</span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-unpack-objects.html"><span
style='color:black;text-decoration:none'>) </span></a>relatively easily.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.65pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Git will also write out an index file for each
packfile that is much smaller and contains offsets into the packfile to more
quickly find specific objects by sha.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>The actual details of the packfile implementation are found
in the Packfile chapter a little later on.</p>

<h1 style='margin-left:70.6pt'>BROWSING GIT OBJECTS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:31.95pt;margin-bottom:
9.05pt;margin-left:70.6pt'>We can ask git about particular objects with the
cat-file command. Note that you can shorten the shas to only a few characters
to save yourself typing all 40 hex digits:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git-cat-file -t 54196cc2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git-cat-file commit
54196cc2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>tree
92b8b694ffb1675e5975148e1121810081dbdffe</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:161.05pt;margin-bottom:
7.85pt;margin-left:81.0pt;line-height:155%'><span style='font-size:8.0pt;
line-height:155%;font-family:"Calibri",sans-serif;color:#660000'>author J.
Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500 committer J.
Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500 initial
commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.45pt;margin-bottom:
9.05pt;margin-left:70.6pt'>A tree can refer to one or more &quot;blob&quot;
objects, each corresponding to a file. In addition, a tree can also refer to
other tree objects, thus creating a directory hierarchy. You can examine the
contents of any tree using ls-tree (remember that a long enough initial portion
of the SHA1 will also work):</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git ls-tree 92b8b694</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Thus we see that this tree has one file in it. The SHA1
hash is a reference to that file's data:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:391.45pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file
-t 3b18e512 blob</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>A &quot;blob&quot; is just file data, which we can also
examine with cat-file:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.05pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file
blob 3b18e512 hello world</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.5pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Note that this is the old file data; so the object
that git named in its response to the initial tree was a tree with a snapshot
of the directory state that was recorded by the first commit.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>All of these objects are stored under their SHA1 names
inside the git directory:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ find .git/objects/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/pack</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/info</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/3b</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/92</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/54</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/a0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/a0/423896973644771497bdc03eb99d5281615b51</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/d0</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:204.25pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>.git/objects/c4
.git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:28.1pt;margin-bottom:
10.7pt;margin-left:70.6pt'>and the contents of these files is just the
compressed data plus a header identifying their length and their type. The type
is either a blob, a tree, a commit, or a tag.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The simplest commit to find is the HEAD commit, which we
can find from .git/HEAD:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:429.85pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat
.git/HEAD ref: refs/heads/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:36.1pt;margin-bottom:
9.05pt;margin-left:70.6pt'>As you can see, this tells us which branch we're
currently on, and it tells us this by naming a file under the .git directory,
which itself contains a SHA1 name referring to a commit object, which we can
examine with cat-file:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat
.git/refs/heads/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>c4d59f390b9cfd4318117afde11d601c1085f241</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file -t c4d59f39</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>commit</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file commit
c4d59f39</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:290.65pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>tree
d0492b368b66bdabf2ac1fd8c92b39d3db916e59 parent
54196cc2703dc165cbd373a65a4dcf22d50ae7f7</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>author J. Bruce Fields
&lt;bfields@puzzle.fieldses.org&gt; 1143418702 -0500</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:175.45pt;margin-bottom:
2.8pt;margin-left:81.0pt;line-height:206%'><span style='font-size:8.0pt;
line-height:206%;font-family:"Calibri",sans-serif;color:#660000'>committer J.
Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143418702 -0500 add emphasis</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The &quot;tree&quot; object here refers to the new state of
the tree:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git ls-tree d0492b36</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
a0423896973644771497bdc03eb99d5281615b51    file.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:377.05pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git cat-file
blob a0423896 hello world!</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>and the &quot;parent&quot; object refers to the previous
commit:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:319.45pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git-cat-file
commit 54196cc2 tree 92b8b694ffb1675e5975148e1121810081dbdffe</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:161.05pt;margin-bottom:
27.25pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>author J.
Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500 committer J.
Bruce Fields &lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500</span></p>

<h1 style='margin-left:70.6pt'>GIT REFERENCES</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:41.25pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Branches, remote-tracking branches, and tags are all
references to commits. All references are named with a slashseparated path name
starting with &quot;refs&quot;; the names we've been using so far are actually
shorthand:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>The branch &quot;test&quot; is short for
&quot;refs/heads/test&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>The tag &quot;v2.6.18&quot; is short for
&quot;refs/tags/v2.6.18&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:90.1pt;text-indent:-9.6pt;line-height:107%'><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>&quot;origin/master&quot; is short for
&quot;refs/remotes/origin/master&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>The full name is occasionally useful if, for example, there
ever exists a tag and a branch with the same name. (Newly created refs are
actually stored in the .git/refs directory, under the path given by their name.
However, for efficiency reasons they may also be packed together in a single
file; see <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-pack-refs.html"><span
style='color:black;text-decoration:none'>git pack-refs</span></a>).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:19.85pt;margin-bottom:
10.7pt;margin-left:70.6pt'>As another useful shortcut, the &quot;HEAD&quot; of
a repository can be referred to just using the name of that repository. So, for
example, &quot;origin&quot; is usually a shortcut for the HEAD branch in the
repository &quot;origin&quot;.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:34.0pt;margin-bottom:
19.65pt;margin-left:70.6pt'>For the complete list of paths which git checks for
references, and the order it uses to decide which to choose when there are
multiple references with the same shorthand name, see the &quot;SPECIFYING
REVISIONS&quot; section of <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html"><span
style='color:black;text-decoration:none'>git rev-parse</span></a>.</p>

<h2 style='margin-left:70.6pt'>Showing commits unique to a given branch</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:42.2pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Suppose you would like to see all the commits
reachable from the branch head named &quot;master&quot; but not from any other
head in your repository.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We can list all the heads in this repository with <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-show-ref.html"><span
style='color:black;text-decoration:none'>git show-ref</span></a>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git show-ref --heads</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:69.85pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>bf62196b5e363d73353a9dcf094c59595f3153b7
refs/heads/core-tutorial db768d5504c1bb46f63ee9d6e1772bd047e05bf9
refs/heads/maint a07157ac624b2524a059a3414e99f6f44bebc1e7 refs/heads/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>24dbc180ea14dc1aebe09f14c8ecf32010690627
refs/heads/tutorial-2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>1e87486ae06626c2f31eaa63d26fc0fd646c8af2
refs/heads/tutorial-fixes</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>We can get just the branch-head names, and remove
&quot;master&quot;, with the help of the standard utilities cut and grep:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git show-ref --heads |
cut -d' ' -f2 | grep -v '^refs/heads/master'</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:357.85pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>refs/heads/core-tutorial
refs/heads/maint refs/heads/tutorial-2 refs/heads/tutorial-fixes</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>And then we can ask to see all the commits reachable from
master but not from these other heads:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:223.45pt;margin-bottom:
12.5pt;margin-left:157.3pt;text-indent:-76.8pt;line-height:107%'><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>$ gitk master --not $( git show-ref --heads | cut -d' ' -f2 |
grep -v '^refs/heads/master' )</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.1pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Obviously, endless variations are possible; for
example, to see all commits reachable from some head but not from any tag in
the repository:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.5pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ gitk $( git show-ref
--heads ) --not  $( git show-ref --tags )</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:70.6pt'>(See <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html"><span
style='color:black;text-decoration:none'>git rev-parse</span></a> for
explanations of commit-selecting syntax such as <span style='font-size:8.0pt;
line-height:112%;font-family:"Calibri",sans-serif;color:#660000'>--not</span>.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>(!!update-ref!!)</p>

<h1 style='margin-left:70.6pt'>THE GIT INDEX</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:27.05pt;margin-bottom:
9.05pt;margin-left:70.6pt'>The index is a binary file (generally kept in
.git/index) containing a sorted list of path names, each with permissions and
the SHA1 of a blob object; <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-ls-files.html"><span
style='color:black;text-decoration:none'>git ls-files</span></a> can show you
the contents of the index:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git ls-files --stage</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
63c918c667fa005ff12ad89437f2fdc80926e21c 0   .gitignore</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
5529b198e8d14decbe4ad99db3f7fb632de0439d 0   .mailmap</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
6ff87c4664981e4397625791c8ea3bbb5f2279a3 0   COPYING</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
a37b2152bd26be2c2289e1f57a292534a51a93c7 0   Documentation/.gitignore</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:165.85pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>100644
fbefe9a45b00a54b58d94d06eca48b03d40a50e0 0   Documentation/Makefile ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
2511aef8d89ab52be5ec6a5e46236b4b6bcd07ea 0   xdiff/xtypes.h</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
2ade97b2574a9f77e7ae4002a4e07a6a38e46d07 0   xdiff/xutils.c</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644
d5de8292e05e7c36c4b68857c1cf9855e3d2f70a 0   xdiff/xutils.h</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:39.9pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Note that in older documentation you may see the
index called the &quot;current directory cache&quot; or just the
&quot;cache&quot;. It has three important properties:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.85pt;text-indent:-15.2pt'><span style='line-height:112%'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>The index
contains all the information necessary to generate a single (uniquely
determined) tree object.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.2pt;margin-bottom:
10.7pt;margin-left:111.35pt'>For example, running <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-commit.html"><span
style='color:black;text-decoration:none'>git commit</span></a> generates this
tree object from the index, stores it in the object database, and uses it as
the tree object associated with the new commit.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.85pt;text-indent:-15.2pt'><span style='line-height:112%'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>The index
enables fast comparisons between the tree object it defines and the working
tree.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.85pt;margin-bottom:
10.7pt;margin-left:111.35pt'>It does this by storing some additional data for
each entry (such as the last modified time). This data is not displayed above,
and is not stored in the created tree object, but it can be used to determine
quickly which files in the working directory differ from what was stored in the
index, and thus save git from having to read all of the data from such files to
look for changes.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:110.85pt;text-indent:-15.2pt'><span style='line-height:112%'>3.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>It can
efficiently represent information about merge conflicts between different tree
objects, allowing each pathname to be associated with sufficient information
about the trees involved that you can create a three-way merge between them.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.85pt;margin-bottom:
.15in;margin-left:111.35pt'>During a merge, the index can store multiple
versions of a single file (called &quot;stages&quot;). The third column in the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-ls-files.html"><span
style='color:black;text-decoration:none'>git </span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-ls-files.html"><span
style='color:black;text-decoration:none'>ls-files</span></a> output above is
the stage number, and will take on values other than 0 for files with merge
conflicts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.45pt;
margin-left:70.6pt'>The index is thus a sort of temporary staging area, which
is filled with a tree which you are in the process of working on.</p>

<h1 style='margin-left:70.6pt'>THE PACKFILE</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This chapter explains in detail, down to the bits, how the
packfile and pack index files are formatted.</p>

<h2 style='margin-left:70.6pt'>The Packfile Index</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>First off, we have the packfile index, which is basically
just a series of bookmarks into a packfile.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.4pt;margin-bottom:
10.7pt;margin-left:70.6pt'>There are two versions of the packfile index -
version one, which is the default in versions of Git earlier than 1.6, and
version two, which is the default from 1.6 forward, but which can be read by
Git versions going back to 1.5.2, and has been further backported to 1.4.4.5 if
you are still on the 1.4 series.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.3pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Version 2 also includes a CRC checksum of each
object so compressed data can be copied directly from pack to pack during
repacking without undetected data corruption. Version 2 indexes can also handle
packfiles larger than 4 Gb.<br clear=all style='page-break-before:always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=490
height=399 id="Picture 4113" src="GIT%20Book_files/image012.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.5pt;margin-bottom:
11.2pt;margin-left:70.6pt;text-align:justify;text-justify:inter-ideograph;
line-height:107%'>In both formats, the fanout table is simply a way to find the
offset of a particular sha faster within the index file. The offset/ sha1[]
tables are sorted by sha1[] values (this is to allow binary search of this
table), and fanout[] table points at the offset/ sha1[] table in a specific way
(so that part of the latter table that covers all hashes that start with a
given byte can be found to avoid 8 iterations of the binary search).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:14.35pt;margin-bottom:
10.7pt;margin-left:70.6pt'>In version 1, the offsets and shas are in the same
space, where in version two, there are seperate tables for the shas, crc
checksums and offsets. At the end of both files are checksum shas for both the
index file and the packfile it references.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:26.45pt;margin-bottom:
19.5pt;margin-left:70.6pt'>Importantly, packfile indexes are <i>not </i>neccesary
to extract objects from a packfile, they are simply used to <i>quickly </i>retrieve
individual objects from a pack. The packfile format is used in upload-pack and
receieve-pack programs (push and fetch protocols) to transfer objects and there
is no index used then - it can be built after the fact by scanning the
packfile.</p>

<h2 style='margin-left:70.6pt'>The Packfile Format</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:45.6pt;margin-bottom:
9.05pt;margin-left:70.6pt'>The packfile itself is a very simple format. There
is a header, a series of packed objects (each with it's own header and body)
and then a checksum trailer. The first four bytes is the string 'PACK', which
is sort of used to make sure you're getting the start of the packfile
correctly. This is followed by a 4-byte packfile version number and then a
4-byte number of entries in that file. In Ruby, you might read the header data
like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:81.2pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:blue'>def </span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#0000A2'>read_pack_header</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:329.0pt;margin-bottom:
.1pt;margin-left:90.8pt;line-height:105%'><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>sig </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#318495'>@session</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>recv</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>4</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>) ver
</span><span style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:blue'>= </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:#318495'>@session</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif'>.</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>recv</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>4</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>).</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#0000A2'>unpack</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>(</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#036A07'>&quot;N&quot;</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>)[</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>0</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>] entries </span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:blue'>= </span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#318495'>@session</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>.</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>recv</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:mediumblue'>4</span><span style='font-size:8.0pt;line-height:105%;
font-family:"Calibri",sans-serif'>).</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:#0000A2'>unpack</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>(</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif;
color:#036A07'>&quot;N&quot;</span><span style='font-size:8.0pt;line-height:
105%;font-family:"Calibri",sans-serif'>)[</span><span style='font-size:8.0pt;
line-height:105%;font-family:"Calibri",sans-serif;color:mediumblue'>0</span><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>]</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:420.25pt;margin-bottom:
12.7pt;margin-left:81.45pt;text-indent:9.45pt;line-height:105%'><span
style='font-size:8.0pt;line-height:105%;font-family:"Calibri",sans-serif'>[sig,
ver, entries] </span><span style='font-size:8.0pt;line-height:105%;font-family:
"Calibri",sans-serif;color:blue'>end</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:25.5pt;margin-bottom:
9.05pt;margin-left:70.6pt'>After that, you get a series of packed objects, in
order of thier SHAs which each consist of an object header and object contents.
At the end of the packfile is a 20-byte SHA1 sum of all the shas (in sorted
order) in that packfile.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=411
height=437 id="Picture 4205" src="GIT%20Book_files/image013.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:42.1pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The object header is a series of one or more 1 byte
(8 bit) hunks that specify the type of object the following data is, and the
size of the data when expanded. Each byte is really 7 bits of data, with the
first bit being used to say if that hunk is the last one or not before the data
starts. If the first bit is a 1, you will read another byte, otherwise the data
starts next. The first 3 bits in the first byte specifies the type of data,
according to the table below.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>(Currently, of the 8 values that can be expressed with 3
bits (0-7), 0 (000) is 'undefined' and 5 (101) is not yet used.)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:48.0pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Here, we can see an example of a header of two
bytes, where the first specifies that the following data is a commit, and the
remainder of the first and the last 7 bits of the second specifies that the
data will be 144 bytes when expanded.<br clear=all style='page-break-before:
always'>
</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.6pt;
margin-left:70.85pt;text-indent:0in;line-height:107%'><img border=0 width=446
height=375 id="Picture 4225" src="GIT%20Book_files/image014.gif"></p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.6pt;margin-bottom:
9.05pt;margin-left:70.6pt'>It is important to note that the size specified in
the header data is not the size of the data that actually follows, but the size
of that data <i>when expanded</i>. This is why the offsets in the packfile
index are so useful, otherwise you have to expand every object just to tell
when the next header starts.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.85pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The data part is just zlib stream for non-delta
object types; for the two delta object representations, the data portion
contains something that identifies which base object this delta representation
depends on, and the delta to apply on the base object to resurrect this object.
<span style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>ref-delta </span>uses 20-byte hash of the base object at the
beginning of data, while <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>ofsdelta </span>stores an
offset within the same packfile to identify the base object. In either case,
two important constraints a reimplementor must adhere to are:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>delta
representation must be based on some other object within the same packfile;</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:25.6pt;
margin-left:110.9pt;text-indent:-11.55pt'><span style='line-height:112%'><span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp; </span></span>the base
object must be of the same underlying type (blob, tree, commit or tag);</p>

<h1 style='margin-left:111.35pt'>RAW GIT</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:39.55pt;margin-bottom:
19.5pt;margin-left:70.6pt'>Here we will take a look at how to manipulate git at
a more raw level, in case you would like to write a tool that generates new
blobs, trees or commits in a more artificial way. If you want to write a script
that uses more low-level git plumbing to do something new, here are some of the
tools you'll need.</p>

<h2 style='margin-left:70.6pt'>Creating Blobs</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:46.65pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Creating a blob in your Git repository and getting a
SHA back is pretty easy. The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-hash-object.html"><span
style='color:black;text-decoration:none'>git hash-object</span></a> command is
all you'll need. To create a blob object from an existing file, just run it
with the '-w' option (which tells it to write the blob, not just compute the
SHA).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git hash-object -w
myfile.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>6ff87c4664981e4397625791c8ea3bbb5f2279a3</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git hash-object -w
myfile2.txt</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>3bb0e8592a41ae3185ee32266c860714980dbed7</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>The STDOUT output of the command will the the SHA of the
blob that was created.</p>

<h2 style='margin-left:70.6pt'>Creating Trees</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:43.4pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Now lets say you want to create a tree from your new
objects. The <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-mktree.html"><span
style='color:black;text-decoration:none'>git mktree</span></a> command makes it
pretty simple to generate new tree objects from <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-ls-tree.html"><span
style='color:black;text-decoration:none'>git ls-tree</span></a> formatted
output. For example, if you write the following to a file named '/tmp/
tree.txt' :</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
6ff87c4664981e4397625791c8ea3bbb5f2279a3    file1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
3bb0e8592a41ae3185ee32266c860714980dbed7    file2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.6pt;margin-bottom:
9.05pt;margin-left:70.6pt'>and then piped that through the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-mktree.html"><span
style='color:black;text-decoration:none'>git mktree</span></a> command, Git
will write a new tree to the object database and give you back the new sha of
that tree.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:185.05pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat
/tmp/tree.txt | git mk-tree f66a66ab6a7bfe86d52a66516ace212efa00fe1f</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:37.35pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Then, we can take that and make it a subdirectory of
yet another tree, and so on. If we wanted to create a new tree with that one as
a subtree, we just create a new file (/tmp/newtree.txt) with our new SHA as a
tree in it:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
6ff87c4664981e4397625791c8ea3bbb5f2279a3    file1-copy</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:209.1pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>040000 tree f66a66ab6a7bfe86d52a66516ace212efa00fe1f   
our_files </span>and then use <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-mk-tree.html"><span
style='color:black;text-decoration:none'>git mk-tree</span></a> again:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ cat /tmp/newtree.txt |
git mk-tree</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>5bac6559179bd543a024d6d187692343e2d8ae83</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>And we now have an artificial directory structure in Git
that looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- file1-copy</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>`-- our_files</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>|-- file1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:100.95pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>`-- file2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:106.3pt;margin-bottom:
9.05pt;margin-left:70.1pt;text-indent:10.4pt;line-height:197%'><span
style='font-size:8.0pt;line-height:197%;font-family:"Calibri",sans-serif;
color:#660000'>1 directory, 3 files </span>without that structure ever having
actually existed on disk. Plus, we have a SHA (<span style='font-size:8.0pt;
line-height:197%;font-family:"Calibri",sans-serif;color:#660000'>5bac6559</span>)
that points to it.</p>

<h2 style='margin-left:70.6pt'>Rearranging Trees</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:42.1pt;margin-bottom:
10.7pt;margin-left:70.6pt'>We can also do tree manipulation by combining trees
into new structures using the index file. As a simple example, let's take the
tree we just created and make a new tree that has two copies of our <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>5bac6559 </span>tree in it using a temporary index file. (You
can do this by resetting the GIT_INDEX_FILE environment variable or on the
command line)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:24.15pt;margin-bottom:
9.05pt;margin-left:70.6pt'>First, we read the tree into our index file under a
new prefix using the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-read-tree.html"><span
style='color:black;text-decoration:none'>git read-tree</span></a> command, and
then write the index contents as a tree using the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-write-tree.html"><span
style='color:black;text-decoration:none'>git write-tree</span></a> command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ export
GIT_INDEX_FILE=/tmp/index</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git read-tree
--prefix=copy1/  5bac6559</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git read-tree
--prefix=copy2/  5bac6559</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git write-tree</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:9.6pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>bb2fa6de7625322322382215d9ea78cfe76508c1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$&gt;git ls-tree bb2fa</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>040000 tree
5bac6559179bd543a024d6d187692343e2d8ae83    copy1</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>040000 tree
5bac6559179bd543a024d6d187692343e2d8ae83    copy2</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:38.0pt;margin-bottom:
9.05pt;margin-left:70.6pt'>So now we can see that we've created a new tree just
from index manipulation. You can also do interesting merge operations and such
in a temporary index this way - see the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-read-tree.html"><span
style='color:black;text-decoration:none'>git read-tree</span></a> docs for more
information.</p>

<h2 style='margin-left:70.6pt'>Creating Commits</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:26.9pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Now that we have a tree SHA, we can create a commit
object that points to it. We can do this using the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-commit-tree.html"><span
style='color:black;text-decoration:none'>git commit-tree </span></a>command.
Most of the data that goes into the commit has to be set as environment
variables, so you'll want to set the following:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_AUTHOR_NAME</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_AUTHOR_EMAIL</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_AUTHOR_DATE</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_COMMITTER_NAME</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_COMMITTER_EMAIL</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GIT_COMMITTER_DATE</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:39.55pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Then you will need to write your commit message to a
file or somehow pipe it into the command through STDIN. Then, you can create
your commit object based on the tree sha we have.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:161.05pt;margin-bottom:
12.5pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$ git
commit-tree bb2fa &lt; /tmp/message a5f85ba5875917319471dfd98dfc636c1dc65650</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:44.65pt;margin-bottom:
19.5pt;margin-left:70.6pt'>If you want to specify one or more parent commits,
simply add the shas on the command line with a '-p' option before each. The SHA
of the new commit object will be returned via STDOUT.</p>

<h2 style='margin-left:70.6pt'>Updating a Branch Ref</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:35.05pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Now that we have a new commit object SHA, we can
update a branch to point to it if we want to. Lets say we want to update our
'master' branch to point to the new commit we just created - we would use the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-update-ref.html"><span
style='color:black;text-decoration:none'>git update-ref</span></a> command:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>$ git update-ref
refs/heads/master a5f85ba5875917319471dfd98dfc636c1dc65650</span></p>

<h1 style='margin-left:70.6pt'>TRANSFER PROTOCOLS</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>Here we will go over how clients and servers talk to each
other to transfer Git data around.</p>

<h2 style='margin-left:70.6pt'>Fetching Data over HTTP</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:45.0pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Fetching over an http/s URL will make Git use a
slightly dumber protocol. In this case, all of the logic is entirely on the
client side. The server requires no special setup - any static webserver will
work fine if the git directory you are fetching from is in the webserver path.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:46.85pt;margin-bottom:
9.05pt;margin-left:70.6pt'>In order for this to work, you do need to run a
single command on the server repo everytime anything is updated, though - <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-update-server-info.html"><span
style='color:black;text-decoration:none'>git update-server-info,</span></a>
which updates the objects/info/packs and info/refs files to list which refs and
packfiles are available, since you can't do a listing over http. When that
command is run, the objects/info/packs file looks something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>P
pack-ce2bd34abc3d8ebc5922dc81b2e1f30bf17c10cc.pack</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>P
pack-7ad5f5d05f5e20025898c95296fe4b9c861246d8.pack</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>So that if the fetch can't find a loose file, it can try
these packfiles. The info/refs file will look something like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>184063c9b594f8968d61a686b2f6052779551613   
refs/heads/development</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>32aae7aef7a412d62192f710f2130302997ec883   
refs/heads/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:34.15pt;margin-bottom:
.15in;margin-left:70.6pt'>Then when you fetch from this repo, it will start
with these refs and walk the commit objects until the client has all the
objects that it needs.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:22.85pt;margin-bottom:
9.05pt;margin-left:70.6pt'>For instance, if you ask to fetch the master branch,
it will see that master is pointing to <span style='font-size:8.0pt;line-height:
112%;font-family:"Calibri",sans-serif;color:#660000'>32aae7ae </span>and that
your master is pointing to <span style='font-size:8.0pt;line-height:112%;
font-family:"Calibri",sans-serif;color:#660000'>ab04d88</span>, so you need <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>32aae7ae</span>. You fetch that object</p>

<p class=MsoNormal style='margin-top:0in;margin-right:160.3pt;margin-bottom:
5.05pt;margin-left:70.1pt;text-align:justify;text-justify:inter-ideograph;
text-indent:9.9pt;line-height:146%'><span style='font-size:8.0pt;line-height:
146%;font-family:"Calibri",sans-serif;color:#660000'>CONNECT
http://myserver.com GET
/git/myproject.git/objects/32/aae7aef7a412d62192f710f2130302997ec883 - 200 </span>and
it looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:247.45pt;margin-bottom:
5.05pt;margin-left:70.1pt;text-align:justify;text-justify:inter-ideograph;
text-indent:9.9pt;line-height:146%'><span style='font-size:8.0pt;line-height:
146%;font-family:"Calibri",sans-serif;color:#660000'>tree
aa176fb83a47d00386be237b450fb9dfb5be251a parent
bd71cad2d597d0f1827d4a3f67bb96a646f02889 author Scott Chacon
&lt;schacon@gmail.com&gt; 1220463037 -0700 committer Scott Chacon
&lt;schacon@gmail.com&gt; 1220463037 -0700 added chapters on private repo setup,
scm migration, raw git </span>So now it fetches the tree <span
style='font-size:8.0pt;line-height:146%;font-family:"Calibri",sans-serif;
color:#660000'>aa176fb8</span>:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:137.3pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>GET
/git/myproject.git/objects/aa/176fb83a47d00386be237b450fb9dfb5be251a - 200 </span>which
looks like this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
6ff87c4664981e4397625791c8ea3bbb5f2279a3    COPYING</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>100644 blob
97b51a6d3685b093cfb345c9e79516e5099a13fb    README</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:218.15pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>100644 blob 9d1b23b8660817e4a74006f15fae86e2a508c573    Rakefile
</span>So then it fetches those objects:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GET
/git/myproject.git/objects/6f/f87c4664981e4397625791c8ea3bbb5f2279a3 - 200</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GET
/git/myproject.git/objects/97/b51a6d3685b093cfb345c9e79516e5099a13fb - 200</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GET
/git/myproject.git/objects/9d/1b23b8660817e4a74006f15fae86e2a508c573 - 200</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:32.95pt;margin-bottom:
9.05pt;margin-left:70.6pt'>It actually does this with Curl, and can open up
multiple parallel threads to speed up this process. When it's done recursing
the tree pointed to by the commit, it fetches the next parent.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>GET
/git/myproject.git/objects/bd/71cad2d597d0f1827d4a3f67bb96a646f02889 - 200</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>Now in this case, the commit that comes back looks like
this:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:252.25pt;margin-bottom:
10.45pt;margin-left:81.0pt;line-height:129%'><span style='font-size:8.0pt;
line-height:129%;font-family:"Calibri",sans-serif;color:#660000'>tree
b4cc00cf8546edd4fcf29defc3aec14de53e6cf8 parent
ab04d884140f7b0cf8bbf86d6883869f16a46f65 author Scott Chacon
&lt;schacon@gmail.com&gt; 1220421161 -0700 committer Scott Chacon
&lt;schacon@gmail.com&gt; 1220421161 -0700 added chapters on the packfile and
how git stores objects</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:47.2pt;margin-bottom:
.15in;margin-left:70.6pt'>and we can see that the parent, <span
style='font-size:8.0pt;line-height:112%;font-family:"Calibri",sans-serif;
color:#660000'>ab04d88 </span>is where our master branch is currently pointing.
So, we recursively fetch this tree and then stop, since we know we have
everything before this point. You can force Git to double check that we have
everything with the '--recover' option. See <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-http-fetch.html"><span
style='color:black;text-decoration:none'>git http-fetch</span></a> for more
information.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.3pt;margin-bottom:
10.7pt;margin-left:70.6pt'>If one of the loose object fetches fails, Git will
download the packfile indexes looking for the sha that it needs, then download
that packfile.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>It is important if you are running a git server that serves
repos this way to implement a post-receive hook that runs the 'git
update-server-info' command each time or there will be confusion.</p>

<h2 style='margin-left:70.6pt'>Fetching Data with Upload Pack</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:42.25pt;margin-bottom:
.15in;margin-left:70.6pt'>For the smarter protocols, fetching objects is much
more efficient. A socket is opened, either over ssh or over port 9418 (in the
case of the git:// protocol), and the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-fetch-pack.html"><span
style='color:black;text-decoration:none'>git fetch-pack</span></a> command on
the client begins communicating with a forked <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-upload-pack.html"><span
style='color:black;text-decoration:none'>git </span></a><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-upload-pack.html"><span
style='color:black;text-decoration:none'>upload-pack</span></a> process on the
server.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.1pt;margin-bottom:
9.05pt;margin-left:70.6pt'>Then the server will tell the client which SHAs it
has for each ref, and the client figures out what it needs and responds with a
list of SHAs it wants and already has.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:47.15pt;margin-bottom:
10.7pt;margin-left:70.6pt'>At this point, the server will generate a packfile
with all the objects that the client needs and begin streaming it down to the
client.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:70.6pt'>Let's look at an example.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The client connects and sends the request header. The clone
command</p>

<p class=MsoNormal style='margin-top:0in;margin-right:296.3pt;margin-bottom:
.15pt;margin-left:70.85pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git clone git://myserver.com/project.git </span>produces the
following request:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0032git-upload-pack
/project.git\000host=myserver.com\000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:43.5pt;margin-bottom:
10.7pt;margin-left:70.6pt'>The first four bytes contain the hex length of the
line (including 4 byte line length and trailing newline if present). Following
are the command and arguments. This is followed by a null byte and then the
host information. The request is terminated by a null byte.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The request is processed and turned into a call to
git-upload-pack:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:307.2pt;margin-bottom:
0in;margin-left:70.1pt;text-indent:10.4pt;line-height:196%'><span
style='font-size:8.0pt;line-height:196%;font-family:"Calibri",sans-serif;
color:#660000'>$ git-upload-pack /path/to/repos/project.git </span>This
immediately returns information of the repo:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>007c74730d410fcb6603ace96f1dc55ea6196122532d
HEAD\000multi_ack thin-pack side-band side-band-64k ofs-delta shall</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>003e7d1665144a3a975c05f1f43902ddaf084e784dbe
refs/heads/debug</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>003d5a3f6be755bbb7deae50065988cbfa1ffa9ab68a
refs/heads/dist</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>003e7e47fe2bd8d01d481f44d7af0531bd93d3b21c01
refs/heads/local</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>003f74730d410fcb6603ace96f1dc55ea6196122532d
refs/heads/master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0000</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:45.25pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Each line starts with a four byte line length
declaration in hex. The section is terminated by a line length declaration of
0000.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>This is sent back to the client verbatim. The client
responds with another request:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0054want
74730d410fcb6603ace96f1dc55ea6196122532d multi_ack side-band-64k ofs-delta</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0032want
7d1665144a3a975c05f1f43902ddaf084e784dbe</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0032want
5a3f6be755bbb7deae50065988cbfa1ffa9ab68a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0032want
7e47fe2bd8d01d481f44d7af0531bd93d3b21c01</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>0032want
74730d410fcb6603ace96f1dc55ea6196122532d</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>00000009done</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:70.6pt'>The is sent to the open git-upload-pack process which then
streams out the final response:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;0008NAK\n&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;0023\002Counting
objects: 2797, done.\n&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002b\002Compressing
objects:   0% (1/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002c\002Compressing
objects:   1% (12/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002c\002Compressing
objects:   2% (24/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002c\002Compressing
objects:   3% (36/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002c\002Compressing
objects:   4% (48/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002c\002Compressing
objects:   5% (59/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;002c\002Compressing
objects:   6% (71/1177)   \r&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:89.05pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;0053\002Compressing
objects:   7% (83/1177)   \rCompressing objects:   8% (95/1177)   \r&quot; ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;005b\002Compressing
objects: 100% (1177/1177)   \rCompressing objects: 100% (1177/1177),
done.\n&quot;
&quot;2004\001PACK\000\000\000\002\000\000\n\355\225\017x\234\235\216K\n\302&quot;...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:309.85pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;2005\001\360\204{\225\376\330\345]z2673&quot;...
...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:228.25pt;margin-bottom:
.15pt;margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;0037\002Total
2797 (delta 1799), reused 2360 (delta 1529)\n&quot; ...</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:81.0pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;&lt;\276\255L\273s\005\001w0006\001[0000&quot;</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:19.5pt;
margin-left:70.6pt'>See the Packfile chapter previously for the actual format
of the packfile data in the response.</p>

<h2 style='margin-left:70.6pt'>Pushing Data</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:47.3pt;margin-bottom:
10.7pt;margin-left:70.6pt'>Pushing data over the git and ssh protocols is
similar, but simpler. Basically what happens is the client requests a
receivepack instance, which is started up if the client has access, then the
server returns all the ref head shas it has again and the client generates a
packfile of everything the server needs (generally only if what is on the
server is a direct ancestor of what it is pushing) and sends that packfile
upstream, where the server either stores it on disk and builds an index for it,
or unpacks it (if there aren't many objects in it)</p>

<p class=MsoNormal style='margin-top:0in;margin-right:40.4pt;margin-bottom:
25.45pt;margin-left:70.6pt'>This entire process is accomplished through the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-send-pack.html"><span
style='color:black;text-decoration:none'>git send-pack</span></a> command on
the client, which is invoked by <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-push.html"><span
style='color:black;text-decoration:none'>git push</span></a> and the <a
href="http://www.kernel.org/pub/software/scm/git/docs/git-receive-pack.html"><span
style='color:black;text-decoration:none'>git receive-pack</span></a> command on
the server side, which is invoked by the ssh connect process or git daemon (if
it's an open push server).</p>

<h1 style='margin-left:70.6pt'>GLOSSARY</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:254.9pt;margin-bottom:
10.85pt;margin-left:70.6pt'>Here we have the meanings of some terms used into
Git context. These terms were entirely copied from <a
href="http://www.kernel.org/pub/software/scm/git/docs/gitglossary.html"><span
style='color:black;text-decoration:none'>Git Glossary</span></a>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>alternate object database</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Via the alternates mechanism, a repository</p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>can inherit
part of its object database from another object database, which is called
&quot;alternate&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>bare repository</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A bare repository is normally an appropriately</p>

<p class=MsoNormal style='margin-top:0in;margin-right:239.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>named
directory with a `.git` suffix that does not have a locally checked-out copy of
any of the files under</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>revision control. That is,
all of the `git`</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>administrative and control
files that would normally be present in the</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>hidden `.git`
sub-directory are directly present in the</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>`repository.git` directory
instead,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:152.95pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>and no other
files are present and checked out. Usually publishers of public repositories
make bare repositories available.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>blob object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>Untyped object, e.g. the contents of a file.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>branch</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A &quot;branch&quot; is an active line of development. The
most recent</p>

<p class=MsoNormal style='margin-top:0in;margin-right:220.15pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>commit on a
branch is referred to as the tip of that branch.  The tip of the branch is
referenced by a branch head, which moves forward as additional development</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:292.15pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>is done on the
branch.  A single git repository can track an arbitrary number of branches, but
your working tree is</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>associated
with just one of them (the &quot;current&quot; or &quot;checked out&quot;
branch), and HEAD points to that branch.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>cache</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Obsolete for: index.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>chain</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A list of objects, where each object in the list contains</p>

<p class=MsoNormal style='margin-top:0in;margin-right:191.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>a reference to
its successor (for example, the successor of a commit could be one of its
parents).</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>changeset</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>BitKeeper/cvsps speak for &quot;commit&quot;. Since git
does not</p>

<p class=MsoNormal style='margin-top:0in;margin-right:109.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>store changes,
but states, it really does not make sense to use the term
&quot;changesets&quot; with git.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>checkout</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The action of updating all or part of the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>working tree with a tree
object</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:301.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>or blob from
the object database, and updating the index and HEAD if the whole working tree
has been pointed at a new branch.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>cherry-picking</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>In SCM jargon, &quot;cherry pick&quot; means to choose a
subset of</p>

<p class=MsoNormal style='margin-top:0in;margin-right:152.95pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>changes out of
a series of changes (typically commits) and record them as a new series of
changes on top of a different codebase. In GIT, this is performed by the
&quot;git cherry-pick&quot; command to extract the change introduced by an
existing commit and to record it based on the tip of the current branch as a
new commit.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>clean</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A working tree is clean, if it</p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>corresponds to
the revision referenced by the current head. Also see &quot;dirty&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>commit</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>As a noun: A single point in the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:205.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>git history;
the entire history of a project is represented as a set of interrelated
commits.  The word &quot;commit&quot; is often used by git in the same places
other revision control systems use the words &quot;revision&quot; or
&quot;version&quot;.  Also used as a short hand for commit object.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>As a verb: The action of storing a new snapshot of the
project's</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>state in the git history,
by creating a new commit representing the current</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:325.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>state of the
index and advancing HEAD to point at the new commit.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>commit object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>An object which contains the information about a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:248.95pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>particular
revision, such as parents, committer, author, date and the tree object which
corresponds</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>to the top
directory of the stored revision.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>core git</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:219.05pt;margin-bottom:
.85pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>Fundamental
data structures and utilities of git. Exposes only limited <span
style='font-size:8.0pt;line-height:226%;font-family:"Calibri",sans-serif;
color:#660000'>source code management tools.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>DAG</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Directed acyclic graph. The commit objects form a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>directed acyclic graph,
because they have parents (directed), and the</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>graph of
commit objects is acyclic (there is no chain which begins and ends with the
same object).</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>dangling object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>An unreachable object which is not</p>

<p class=MsoNormal style='margin-top:0in;margin-right:244.15pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>reachable even
from other unreachable objects; a dangling object has no references to it from
any reference or object in the repository.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>detached HEAD</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Normally the HEAD stores the name of a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:210.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>branch. 
However, git also allows you to check out an arbitrary commit that isn't
necessarily the tip of any particular branch.  In this case HEAD is said to be
&quot;detached&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>dircache</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.85pt;
margin-left:93.85pt'>You are <i>waaaaay </i>behind. See index.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>directory</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:396.4pt;margin-bottom:
.05pt;margin-left:70.1pt;text-indent:22.5pt;line-height:203%'>The list you get
with &quot;ls&quot; :-) <i>dirty</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A working tree is said to be &quot;dirty&quot; if</p>

<p class=MsoNormal style='margin-top:0in;margin-right:143.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>it contains
modifications which have not been committed to the current branch.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>ent</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Favorite synonym to &quot;tree-ish&quot; by some total
geeks. See</p>

<p class=MsoNormal style='margin-top:0in;margin-right:143.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>`http://en.wikipedia.org/wiki/Ent_(Middle-earth)`
for an in-depth explanation. Avoid this term, not to confuse people.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>evil merge</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>An evil merge is a merge that introduces changes that</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:12.4pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>do not appear in any
parent.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>fast forward</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A fast-forward is a special type of merge where you have a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.55pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>revision and
you are &quot;merging&quot; another branch's changes that happen to be a
descendant of what you have. In such these cases, you do not make a new merge</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:292.15pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>commit but
instead just update to his revision. This will happen frequently on a</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>tracking
branch of a remote repository.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>fetch</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Fetching a branch means to get the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:311.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>branch's head
ref from a remote repository, to find out which objects are missing from the
local object database, and to get them, too.  See also </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git fetch</span></a><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>file system</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Linus Torvalds originally designed git to be a user space
file system,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:124.15pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>i.e. the
infrastructure to hold files and directories. That ensured the efficiency and
speed of git.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>git archive</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>Synonym for repository (for arch people).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>grafts</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Grafts enables two otherwise different lines of
development to be joined</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>together by recording fake
ancestry information for commits. This way</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:234.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>you can make
git pretend the set of parents a commit has is different from what was recorded
when the commit was created. Configured via the `.git/info/grafts` file.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>hash</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>In git's context, synonym to object name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>head</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A named reference to the commit at the tip of a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>branch.  Heads are stored
in</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:215.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>`$GIT_DIR/refs/heads/`,
except when using packed refs. (See </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-pack-refs.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git pack-refs</span></a><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>.)</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>HEAD</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The current branch. In more detail: Your working tree is
normally derived</p>

<p class=MsoNormal style='margin-top:0in;margin-right:143.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>from the state
of the tree referred to by HEAD.  HEAD is a reference to one of the heads in
your repository, except when using a detached HEAD, in which case it may
reference an arbitrary commit.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>head ref</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>A synonym for head.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>hook</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>During the normal execution of several git commands,
call-outs are made</p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>to optional
scripts that allow a developer to add functionality or checking. Typically, the
hooks allow for a command to be pre-verified and potentially aborted, and allow
for a post-notification after the</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:186.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>operation is
done. The hook scripts are found in the `$GIT_DIR/hooks/` directory, and are
enabled by simply removing the `.sample` suffix from the filename. In earlier
versions of git you had to make them executable.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>index</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A collection of files with stat information, whose
contents are stored</p>

<p class=MsoNormal style='margin-top:0in;margin-right:191.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>as objects.
The index is a stored version of your working tree. Truth be told, it can also
contain a second, and even</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:258.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>a third
version of a working tree, which are used when merging.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>index entry</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The information regarding a particular file, stored in the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:268.15pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>index. An
index entry can be unmerged, if a merge was started, but not yet finished (i.e.
if the index contains multiple versions of that file).</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>master</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The default development branch. Whenever you</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>create a git repository, a
branch named</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:205.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;master&quot;
is created, and becomes the active branch. In most cases, this contains the
local development, though that is purely by convention and is not required.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>merge</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>As a verb: To bring the contents of another</p>

<p class=MsoNormal style='margin-top:0in;margin-right:205.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>branch
(possibly from an external repository) into the current branch.  In the case
where the merged-in branch is from a different repository, this is done by
first fetching the remote branch and then merging the result into the current
branch.  This combination of fetch and merge operations is called a pull. 
Merging is performed by an automatic process that identifies changes made since
the branches diverged, and then applies all those changes together.  In cases
where changes conflict, manual intervention may be required to complete the
merge.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>As a noun: unless it is a fast forward, a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:191.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>successful
merge results in the creation of a new commit representing the result of the
merge, and having as parents the tips of the merged branches. This commit is
referred to as a &quot;merge commit&quot;, or sometimes just a
&quot;merge&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The unit of storage in git. It is uniquely identified by
the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:296.95pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>SHA1&gt; of
its contents. Consequently, an object can not be changed.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>object database</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Stores a set of &quot;objects&quot;, and an individual
object is</p>

<p class=MsoNormal style='margin-top:0in;margin-right:253.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>identified by
its object name. The objects usually live in `$GIT_DIR/objects/`.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>object identifier</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>Synonym for object name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>object name</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The unique identifier of an object. The hash</p>

<p class=MsoNormal style='margin-top:0in;margin-right:181.75pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>of the
object's contents using the Secure Hash Algorithm 1 and usually represented by
the 40 character hexadecimal encoding of the hash of the object.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>object type</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:224.3pt;margin-bottom:
.9pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>One of the
identifiers &quot;commit&quot;, &quot;tree&quot;, &quot;tag&quot; or
&quot;blob&quot; describing the <span style='font-size:8.0pt;line-height:226%;
font-family:"Calibri",sans-serif;color:#660000'>type of an object.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>octopus</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:257.6pt;margin-bottom:
.9pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>To merge more
than two branches. Also denotes an <span style='font-size:8.0pt;line-height:
226%;font-family:"Calibri",sans-serif;color:#660000'>intelligent predator.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>origin</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The default upstream repository. Most projects have</p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>at least one
upstream project which they track. By default 'origin' is used for that
purpose. New upstream updates will be fetched into remote tracking branches
named origin/name-of-upstream-branch, which you can see using &quot;`git branch
-r`&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>pack</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:216.85pt;margin-bottom:
.85pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>A set of
objects which have been compressed into one file (to save space <span
style='font-size:8.0pt;line-height:226%;font-family:"Calibri",sans-serif;
color:#660000'>or to transmit them efficiently).</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>pack index</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The list of identifiers, and other information, of the
objects in a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:210.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>pack, to
assist in efficiently accessing the contents of a pack.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>parent</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A commit object contains a (possibly empty) list</p>

<p class=MsoNormal style='margin-top:0in;margin-right:157.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>of the logical
predecessor(s) in the line of development, i.e. its parents.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>pickaxe</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>The term pickaxe refers to an option to the diffcore</p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>routines that
help select changes that add or delete a given text string. With the
`--pickaxe-all` option, it can be used to view the full</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:253.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>changeset that
introduced or removed, say, a particular line of text. See </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-diff.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git diff</span></a><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>plumbing</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>Cute name for core git.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>porcelain</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Cute name for programs and program suites depending on</p>

<p class=MsoNormal style='margin-top:0in;margin-right:287.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>core git,
presenting a high level access to core git. Porcelains expose more of a SCM
interface than the plumbing.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>pull</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:347.9pt;margin-bottom:
.85pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>Pulling a
branch means to fetch it and <span style='font-size:8.0pt;line-height:226%;
font-family:"Calibri",sans-serif;color:#660000'>merge it.  See also </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-pull.html"><span
style='font-size:8.0pt;line-height:226%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git pull</span></a><span style='font-size:
8.0pt;line-height:226%;font-family:"Calibri",sans-serif;color:#660000'>.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>push</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Pushing a branch means to get the branch's</p>

<p class=MsoNormal style='margin-top:0in;margin-right:239.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>head ref from
a remote repository, find out if it is a direct ancestor to the branch's local</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:287.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>head ref, and
in that case, putting all objects, which are reachable from the local head ref,
and which are missing from the remote</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>repository,
into the remote object database, and updating the remote head ref. If the
remote head is not an ancestor to the local head, the push fails.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>reachable</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>All of the ancestors of a given commit are said to be</p>

<p class=MsoNormal style='margin-top:0in;margin-right:239.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>&quot;reachable&quot;
from that commit. More generally, one object is reachable from another if we
can reach the one from the other by a chain</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>that follows tags to
whatever they tag,</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:330.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>commits to
their parents or trees, and trees to the trees or blobs that they contain.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>rebase</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>To reapply a series of changes from a branch to a</p>

<p class=MsoNormal style='margin-top:0in;margin-right:268.15pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>different
base, and reset the head of that branch to the result.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>ref</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A 40-byte hex representation of a SHA1 or a name that</p>

<p class=MsoNormal style='margin-top:0in;margin-right:186.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>denotes a
particular object. These may be stored in `$GIT_DIR/refs/`.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>reflog</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A reflog shows the local &quot;history&quot; of a ref. In
other words,</p>

<p class=MsoNormal style='margin-top:0in;margin-right:196.15pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>it can tell
you what the 3rd last revision in _this_ repository was, and what was the
current state in _this_ repository, yesterday 9:14pm.  See </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-reflog.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git reflog</span></a><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif'> </span><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>for details.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>refspec</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A &quot;refspec&quot; is used by fetch and</p>

<p class=MsoNormal style='margin-top:0in;margin-right:220.15pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>push to
describe the mapping between remote ref and local ref. They are combined with a
colon in the format &lt;src&gt;:&lt;dst&gt;, preceded by an optional plus sign,
+.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>For example: `git fetch
$URL</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>refs/heads/master:refs/heads/origin`
means &quot;grab the master</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:306.55pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>branch head
from the $URL and store it as my origin branch head&quot;. And `git push</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:205.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>$URL
refs/heads/master:refs/heads/to-upstream` means &quot;publish my master branch
head as to-upstream branch at $URL&quot;. See also </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-push.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git push</span></a><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>repository</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A collection of refs together with an</p>

<p class=MsoNormal style='margin-top:0in;margin-right:210.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>object
database containing all objects which are reachable from the refs, possibly
accompanied by meta data from one or more porcelains. A repository can share an
object database with other repositories via alternates mechanism.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>resolve</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:274.8pt;margin-bottom:
.9pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>The action of
fixing up manually what a failed automatic <span style='font-size:8.0pt;
line-height:226%;font-family:"Calibri",sans-serif;color:#660000'>merge left
behind.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>revision</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A particular state of files and directories which was
stored in the</p>

<p class=MsoNormal style='margin-top:0in;margin-right:301.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>object
database. It is referenced by a commit object.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>rewind</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:270.7pt;margin-bottom:
.9pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>To throw away
part of the development, i.e. to assign the <span style='font-size:8.0pt;
line-height:226%;font-family:"Calibri",sans-serif;color:#660000'>head to an
earlier revision.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>SCM</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>Source code management (tool).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>SHA1</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:10.7pt;
margin-left:93.85pt'>Synonym for object name.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>shallow repository</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A shallow repository has an incomplete</p>

<p class=MsoNormal style='margin-top:0in;margin-right:167.35pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>history some
of whose commits have parents cauterized away (in other words, git is told to
pretend that these commits do not have the parents, even though they are
recorded in the commit object). This is sometimes useful when you are
interested only in the recent history of a project even though the real history
recorded in the</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.7pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>upstream is
much larger. A shallow repository is created by giving the `--depth` option to </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-clone.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git clone</span></a><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>, and
its history can be later deepened with </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-fetch.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git fetch</span></a><span style='font-size:
8.0pt;line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>symref</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>Symbolic reference: instead of containing the SHA1</p>

<p class=MsoNormal style='margin-top:0in;margin-right:162.55pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>id itself, it
is of the format 'ref: refs/some/thing' and when referenced, it recursively
dereferences to this reference.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:239.35pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>'HEAD' is a
prime example of a symref. Symbolic references are manipulated with the </span><a
href="http://www.kernel.org/pub/software/scm/git/docs/git-symbolic-ref.html"><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:black;text-decoration:none'>git symbolic-ref </span></a><span
style='font-size:8.0pt;line-height:107%;font-family:"Calibri",sans-serif;
color:#660000'>command.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>tag</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A ref pointing to a tag or</p>

<p class=MsoNormal style='margin-top:0in;margin-right:224.95pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>commit object.
In contrast to a head, a tag is not changed by a commit. Tags (not tag objects)
are stored in `$GIT_DIR/refs/tags/`. A git tag has nothing to do with a Lisp
tag (which would be called an object type in git's context). A tag is most
typically used to mark a particular point in the commit ancestry chain.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>tag object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>An object containing a ref pointing to</p>

<p class=MsoNormal style='margin-top:0in;margin-right:224.95pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>another
object, which can contain a message just like a commit object. It can also
contain a (PGP) signature, in which case it is called a &quot;signed tag
object&quot;.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>topic branch</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A regular git branch that is used by a developer to</p>

<p class=MsoNormal style='margin-top:0in;margin-right:162.55pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>identify a
conceptual line of development. Since branches are very easy and inexpensive,
it is often desirable to have several small branches that each contain very
well defined concepts or small incremental yet related changes.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>tracking branch</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A regular git branch that is used to follow changes from</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>another repository. A
tracking</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.15pt;
margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;line-height:
107%;font-family:"Calibri",sans-serif;color:#660000'>branch should not contain
direct modifications or have local commits</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:253.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>made to it. A
tracking branch can usually be identified as the right-hand-side ref in a Pull:
refspec.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>tree</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:172.15pt;margin-bottom:
.15pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>Either a
working tree, or a tree object together with the dependent <span
style='font-size:8.0pt;line-height:226%;font-family:"Calibri",sans-serif;
color:#660000'>blob and tree objects (i.e. a stored representation of a working
tree).</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>tree object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>An object containing a list of file names and modes along</p>

<p class=MsoNormal style='margin-top:0in;margin-right:229.75pt;margin-bottom:
12.5pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>with refs to
the associated blob and/or tree objects. A tree is equivalent to a directory.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>tree-ish</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:1.4pt;margin-bottom:9.05pt;
margin-left:93.85pt'>A ref pointing to either a commit object, a tree object,
or a tag</p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:272.95pt;
margin-bottom:12.45pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'><span style='font-size:8.0pt;line-height:107%;font-family:
"Calibri",sans-serif;color:#660000'>object pointing to a tag or commit or tree
object.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>unmerged index</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:356.7pt;margin-bottom:
.9pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>An index which
contains unmerged <span style='font-size:8.0pt;line-height:226%;font-family:
"Calibri",sans-serif;color:#660000'>index entries.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>unreachable object</i></p>

<p class=MsoNormal style='margin-top:0in;margin-right:327.35pt;margin-bottom:
.9pt;margin-left:103.75pt;text-indent:-10.4pt;line-height:226%'>An object which
is not reachable from a <span style='font-size:8.0pt;line-height:226%;
font-family:"Calibri",sans-serif;color:#660000'>branch, tag, or any other
reference.</span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:11.2pt;
margin-left:70.6pt;line-height:107%'><i>working tree</i></p>

<p class=MsoNormal align=center style='margin-top:0in;margin-right:201.85pt;
margin-bottom:9.45pt;margin-left:0in;text-align:center;text-indent:0in;
line-height:107%'>The tree of actual checked out files. The working tree is</p>

<p class=MsoNormal style='margin-top:0in;margin-right:258.55pt;margin-bottom:
.15pt;margin-left:104.25pt;line-height:107%'><span style='font-size:8.0pt;
line-height:107%;font-family:"Calibri",sans-serif;color:#660000'>normally equal
to the HEAD plus any local changes that you have made but not yet committed.</span></p>

</div>

<span style='font-size:10.0pt;line-height:112%;font-family:"Gill Sans MT",sans-serif;
color:black'><br clear=all style='page-break-before:always'>
</span>

<div class=WordSection10><br clear=all style='page-break-before:always'>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&nbsp;</p>

<p class=MsoNormal style='margin:0in;text-indent:0in;line-height:107%'>&nbsp;</p>

</div>

</body>

</html>
