<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 15 (filtered)">
<title>Unicode HOWTO</title>
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:5.65pt;
	margin-left:47.3pt;
	text-align:justify;
	text-justify:inter-ideograph;
	text-indent:-.5pt;
	line-height:108%;
	font-size:10.0pt;
	font-family:"Times New Roman",serif;
	color:black;}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.2pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:14.5pt;
	font-family:"Calibri",sans-serif;
	color:#20435C;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:3.65pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:12.0pt;
	font-family:"Calibri",sans-serif;
	color:#20435C;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:5.75pt;
	margin-left:.5pt;
	text-indent:-.5pt;
	line-height:107%;
	page-break-after:avoid;
	font-size:10.0pt;
	font-family:"Calibri",sans-serif;
	color:#20435C;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Calibri",sans-serif;
	color:#20435C;
	font-weight:bold;}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Calibri",sans-serif;
	color:#20435C;
	font-weight:bold;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Calibri",sans-serif;
	color:#20435C;
	font-weight:bold;}
.MsoChpDefault
	{font-size:12.0pt;}
.MsoPapDefault
	{margin-bottom:8.0pt;
	line-height:115%;}
 /* Page Definitions */
 @page WordSection1
	{size:595.3pt 841.9pt;
	margin:72.4pt 1.0in 75.25pt 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US style='word-wrap:break-word'>

<div class=WordSection1>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:17.95pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img width=603 height=1 id="Group 11950"
src="Unicode%20HOWTO_files/image001.gif"></span></p>

<p class=MsoNormal align=right style='margin:0in;text-align:right;text-indent:
0in;line-height:107%'><b><span style='font-size:25.0pt;line-height:107%;
font-family:"Calibri",sans-serif'>Unicode HOWTO</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:28.95pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'><b><i><span style='font-size:12.0pt;line-height:107%;
font-family:"Calibri",sans-serif'>Release 3.13.2</span></i></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:0in;
margin-bottom:25.6pt;margin-left:0in;text-align:right;text-indent:0in;
line-height:107%'><b><span style='font-size:14.5pt;line-height:107%;font-family:
"Calibri",sans-serif'>Guido van Rossum and the Python development team</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.75pt;
margin-bottom:4.55pt;margin-left:.5pt;text-align:right;line-height:110%'><b><span
style='font-family:"Calibri",sans-serif'>February 15, 2025</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.75pt;
margin-bottom:0in;margin-left:.5pt;text-align:right;line-height:110%'><b><span
style='font-family:"Calibri",sans-serif'>Python Software Foundation</span></b></p>

<p class=MsoNormal align=right style='margin-top:0in;margin-right:-.75pt;
margin-bottom:20.25pt;margin-left:.5pt;text-align:right;line-height:110%'><b><span
style='font-family:"Calibri",sans-serif'>Email: docs@python.org</span></b></p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:3.8pt;margin-left:
-.25pt;text-indent:0in'>Contents</h1>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt;
line-height:107%'><b><span style='line-height:107%;color:#355F7C'>1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='color:#355F7C'>Introduction to Unicode            </span>1</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>1.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Definitions </span>. . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . . .         1</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>1.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Encodings </span>. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .           2</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>1.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>References </span>. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .          3</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt;
line-height:107%'><b><span style='line-height:107%;color:#355F7C'>2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='color:#355F7C'>Python’s Unicode Support        </span>3</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>The String Type </span>. . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .       4</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Converting to Bytes  </span>. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .    5</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Unicode Literals in Python Source Code             </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            5</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Unicode Properties   </span>. . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .    6</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.5<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Comparing Strings </span>. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .    6</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.6<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Unicode Regular Expressions </span>. . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . .               8</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>2.7<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>References </span>. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .          8</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt;
line-height:107%'><b><span style='line-height:107%;color:#355F7C'>3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='color:#355F7C'>Reading and Writing Unicode Data      </span>8</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>3.1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Unicode filenames </span>. . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .     9</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>3.2<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>Tips for Writing Unicode-aware Programs           </span>.
. . . . . . . . . . . . . . . . . . . . . . . . . . . . .               10</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:22.9pt;text-align:left;text-indent:-22.9pt;
line-height:107%'><span style='line-height:107%;color:#355F7C'>3.3<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span
style='color:#355F7C'>References </span>. . . . . . . . . . . . . . . . . . . .
. . . . . . . . . . . . . . . . . . . . . . . . . . .          11</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:14.95pt;text-align:left;text-indent:-14.95pt;
line-height:107%'><b><span style='line-height:107%;color:#355F7C'>4<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span></b><b><span
style='color:#355F7C'>Acknowledgements     </span>11</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:8.0pt;margin-left:0in;text-align:left;text-indent:0in;line-height:
107%'><b><span style='color:#355F7C'>Index                                                                                                                                                                                         </span>12</b></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:22.4pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img width=603 height=1 id="Group 11951"
src="Unicode%20HOWTO_files/image001.gif"></span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:0in;margin-left:24.9pt;text-align:left;text-indent:0in;
line-height:107%'><b>Release</b></p>

<p class=MsoNormal>1.12</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.45pt;
margin-left:-.25pt'>This HOWTO discusses Python’s support for the Unicode
specification for representing textual data, and explains various problems that
people commonly encounter when trying to work with Unicode.</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:8.35pt;margin-left:
.2in;text-indent:-15.15pt'><span style='line-height:107%'>1<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Introduction
to Unicode</h1>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>1.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Definitions</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Today’s programs need to be able
to handle a wide variety of characters. Applications are often
internationalized to display messages and output in a variety of
user-selectable languages; the same program might need to output an error
message in English, French, Japanese, Hebrew, or Russian. Web content can be
written in any of these languages and can also include a variety of emoji
symbols. Python’s string type uses the Unicode Standard for representing
characters, which lets Python programs work with all these different possible
characters.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:7.55pt;margin-left:0in;text-align:left;text-indent:0in;
line-height:105%'>Unicode (<a href="https://www.unicode.org/"><span
style='color:#377063;text-decoration:none'>https://www.unicode.org/</span></a>)
is a specification that aims to list every character used by human languages
and give each character its own unique code. The Unicode specifications are
continually revised and updated to add new languages and symbols.</p>

<p class=MsoNormal style='margin-left:-.25pt'>A <b>character </b>is the
smallest possible component of a text. ‘A’, ‘B’, ‘C’, etc., are all different
characters. So are ‘E&#768;’ and ‘I’. Characters vary depending on the language
or context you’re talking about. For example, there’s a character for&#769;
“Roman Numeral One”, ‘&#8544;’, that’s separate from the uppercase letter ‘I’.
They’ll usually look the same, but these are two different characters that have
different meanings.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The Unicode standard describes
how characters are represented by <b>code points</b>. A code point value is an
integer in the range 0 to 0x10FFFF (about 1.1 million values, the <a
href="https://www.unicode.org/versions/latest/#Summary"><span style='color:
#377063;text-decoration:none'>actual number assigned</span></a><span
style='color:#377063'> </span>is less than that). In the standard and in this
document, a code point is written using the notation <span style='font-size:
9.0pt;line-height:108%'>U+265E </span>to mean the character with value <span
style='font-size:9.0pt;line-height:108%'>0x265e </span>(9,822 in decimal).</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The Unicode standard contains a lot of tables listing
characters and their corresponding code points:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=248
src="Unicode%20HOWTO_files/image002.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Strictly, these definitions imply
that it’s meaningless to say ‘this is character <span style='font-size:9.0pt;
line-height:108%'>U+265E</span>’. <span style='font-size:9.0pt;line-height:
108%'>U+265E </span>is a code point, which represents some particular
character; in this case, it represents the character ‘BLACK CHESS KNIGHT’,
‘&#9822;’. In informal contexts, this distinction between code points and
characters will sometimes be forgotten.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.25pt;
margin-left:-.25pt'>A character is represented on a screen or on paper by a set
of graphical elements that’s called a <b>glyph</b>. The glyph for an uppercase
A, for example, is two diagonal strokes and a horizontal stroke, though the
exact details will depend on the font being used. Most Python code doesn’t need
to worry about glyphs; figuring out the correct glyph to display is generally
the job of a GUI toolkit or a terminal’s font renderer.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>1.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Encodings</h2>

<p class=MsoNormal style='margin-left:-.25pt'>To summarize the previous
section: a Unicode string is a sequence of code points, which are numbers from
0 through <span style='font-size:9.0pt;line-height:108%'>0x10FFFF </span>(1,114,111
decimal). This sequence of code points needs to be represented in memory as a
set of <b>code units</b>, and <b>code units </b>are then mapped to 8-bit bytes.
The rules for translating a Unicode string into a sequence of bytes are called
a <b>character encoding</b>, or just an <b>encoding</b>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.45pt;
margin-left:-.25pt'>The first encoding you might think of is using 32-bit
integers as the code unit, and then using the CPU’s representation of 32-bit
integers. In this representation, the string “Python” might look like this:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.8pt;margin-left:0in;text-align:left;text-indent:0in;line-height:
109%'><span style='font-size:11.0pt;line-height:109%;font-family:"Calibri",sans-serif'>       </span><span
style='font-size:9.0pt;line-height:109%'>P                          y                           t                           h                           o                           n</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.8pt;margin-left:-.25pt;text-align:left;line-height:109%'><span
style='position:relative;z-index:-1895825408'><span style='left:0px;position:
absolute;left:-5px;top:-22px;width:611px;height:57px'><img width=611 height=57
src="Unicode%20HOWTO_files/image003.gif"></span></span><span style='font-size:
9.0pt;line-height:109%'>0x50 00 00 00 79 00 00 00 74 00 00 00 68 00 00 00 6f 00
00 00 6e 00 00 00</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:13.55pt;margin-left:16.65pt;text-align:left;line-height:109%'><span
style='font-size:9.0pt;line-height:109%'>0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
16 17 18 19 20 21 22 23</span></p>

<p class=MsoNormal style='margin-left:-.25pt'>This representation is
straightforward but using it presents a number of problems.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>It’s not portable; different processors order the bytes
differently.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>It’s very wasteful of space. In most texts, the majority of the
code points are less than 127, or less than 255, so a lot of space is occupied
by <span style='font-size:9.0pt;line-height:108%'>0x00 </span>bytes. The above
string takes 24 bytes compared to the 6 bytes needed for an ASCII
representation. Increased RAM usage doesn’t matter too much (desktop computers
have gigabytes of RAM, and strings aren’t usually that large), but expanding
our usage of disk and network bandwidth by a factor of 4 is intolerable.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>It’s not compatible with existing C functions such as <span
style='font-size:9.0pt;line-height:108%'>strlen()</span>, so a new family of
wide string functions would need to be used.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Therefore this encoding isn’t
used very much, and people instead choose other encodings that are more
efficient and convenient, such as UTF-8.</p>

<p class=MsoNormal style='margin-left:-.25pt'>UTF-8 is one of the most commonly
used encodings, and Python often defaults to using it. UTF stands for “Unicode
Transformation Format”, and the ‘8’ means that 8-bit values are used in the
encoding. (There are also UTF-16 and UTF-32 encodings, but they are less
frequently used than UTF-8.) UTF-8 uses the following rules:</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>If the code point is &lt; 128, it’s represented by the
corresponding byte value.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>If the code point is &gt;= 128, it’s turned into a sequence of
two, three, or four bytes, where each byte of the sequence is between 128 and
255.</p>

<p class=MsoNormal style='margin-left:-.25pt'>UTF-8 has several convenient
properties:</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>1.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>It can handle any Unicode code point.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>2.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>A Unicode string is turned into a sequence of bytes that contains
embedded zero bytes only where they represent the null character (U+0000). This
means that UTF-8 strings can be processed by C functions such as <span
style='font-size:9.0pt;line-height:108%'>strcpy() </span>and sent through
protocols that can’t handle zero bytes for anything other than end-of-string
markers.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>3.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>A string of ASCII text is also valid UTF-8 text.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>4.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>UTF-8 is fairly compact; the majority of commonly used characters
can be represented with one or two bytes.</p>

<p class=MsoNormal style='margin-left:24.9pt;text-indent:-12.45pt'><span
style='line-height:108%'>5.<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;
</span></span>If bytes are corrupted or lost, it’s possible to determine the
start of the next UTF-8-encoded code point and resynchronize. It’s also
unlikely that random 8-bit data will look like valid UTF-8.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.25pt;
margin-left:24.9pt;text-indent:-12.45pt'><span style='line-height:108%'>6.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp; </span></span>UTF-8 is a byte
oriented encoding. The encoding specifies that each character is represented by
a specific sequence of one or more bytes. This avoids the byte-ordering issues
that can occur with integer and word oriented encodings, like UTF-16 and UTF-32,
where the sequence of bytes varies depending on the hardware on which the
string was encoded.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>1.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>References</h2>

<p class=MsoNormal style='margin-left:-.25pt'>The <a
href="https://www.unicode.org/"><span style='color:#377063;text-decoration:
none'>Unicode Consortium site</span></a><span style='color:#377063'> </span>has
character charts, a glossary, and PDF versions of the Unicode specification. Be
prepared for some difficult reading. <a href="https://www.unicode.org/history/"><span
style='color:#377063;text-decoration:none'>A chronology</span></a><span
style='color:#377063'> </span>of the origin and development of Unicode is also
available on the site.</p>

<p class=MsoNormal style='margin-left:-.25pt'>On the Computerphile Youtube
channel, Tom Scott briefly <a href="https://www.youtube.com/watch?v=MijmeoH9LT4"><span
style='color:#377063;text-decoration:none'>discusses the history of Unicode and
UTF-8</span></a><span style='color:#377063'> </span>(9 minutes 36 seconds).</p>

<p class=MsoNormal style='margin-left:-.25pt'>To help understand the standard,
Jukka Korpela has written <a href="https://jkorpela.fi/unicode/guide.html"><span
style='color:#377063;text-decoration:none'>an introductory guide</span></a><span
style='color:#377063'> </span>to reading the Unicode character tables.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Another <a
href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/"><span
style='color:#377063;text-decoration:none'>good introductory article</span></a><span
style='color:#377063'> </span>was written by Joel Spolsky. If this introduction
didn’t make things clear to you, you should try reading this alternate article
before continuing.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.8pt;
margin-left:-.25pt'>Wikipedia entries are often helpful; see the entries for “<a
href="https://en.wikipedia.org/wiki/Character_encoding"><span style='color:
#377063;text-decoration:none'>character encoding</span></a>” and <a
href="https://en.wikipedia.org/wiki/UTF-8"><span style='color:#377063;
text-decoration:none'>UTF-8</span></a>, for example.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Python’s
Unicode Support</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Now that you’ve learned the
rudiments of Unicode, we can look at Python’s Unicode features.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>The String Type</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Since Python 3.0, the language’s <span
style='font-size:9.0pt;line-height:108%'>str </span>type contains Unicode
characters, meaning any string created using <span style='font-size:9.0pt;
line-height:108%'>&quot;unicode rocks!&quot;</span>, <span style='font-size:
9.0pt;line-height:108%'>'unicode rocks!'</span>, or the triple-quoted string
syntax is stored as Unicode.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The default encoding for Python source code is UTF-8, so
you can simply include a Unicode character in a string literal:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=105
src="Unicode%20HOWTO_files/image004.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Side note: Python 3 also supports using Unicode characters
in identifiers:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=57
src="Unicode%20HOWTO_files/image005.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>If you can’t enter a particular character in your editor or
want to keep the source code ASCII-only for some reason, you can also use
escape sequences in string literals. (Depending on your system, you may see the
actual capital-delta glyph instead of a u escape.)</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=105
src="Unicode%20HOWTO_files/image006.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>In addition, one can create a
string using the <span style='font-size:9.0pt;line-height:108%'>decode() </span>method
of <span style='font-size:9.0pt;line-height:108%'>bytes</span>. This method
takes an <i>encoding </i>argument, such as <span style='font-size:9.0pt;
line-height:108%'>UTF-8</span>, and optionally an <i>errors </i>argument.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.35pt;
margin-left:-.25pt'>The <i>errors </i>argument specifies the response when the
input string can’t be converted according to the encoding’s rules. Legal values
for this argument are <span style='font-size:9.0pt;line-height:108%'>'strict' </span>(raise
a <span style='font-size:9.0pt;line-height:108%'>UnicodeDecodeError </span>exception),
<span style='font-size:9.0pt;line-height:108%'>'replace' </span>(use <span
style='font-size:9.0pt;line-height:108%'>U+FFFD</span>, <span style='font-size:
9.0pt;line-height:108%'>REPLACEMENT CHARACTER</span>), <span style='font-size:
9.0pt;line-height:108%'>'ignore' </span>(just leave the character out of the
Unicode result), or <span style='font-size:9.0pt;line-height:108%'>'backslashreplace'
</span>(inserts a <span style='font-size:9.0pt;line-height:108%'>\xNN </span>escape
sequence). The following examples show the differences:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=184
src="Unicode%20HOWTO_files/image007.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Encodings are specified as
strings containing the encoding’s name. Python comes with roughly 100 different
encodings; see the Python Library Reference at standard-encodings for a list.
Some encodings have multiple names; for example, <span style='font-size:9.0pt;
line-height:108%'>'latin-1'</span>, <span style='font-size:9.0pt;line-height:
108%'>'iso_8859_1' </span>and <span style='font-size:9.0pt;line-height:108%'>'8859</span>’
are all synonyms for the same encoding.</p>

<p class=MsoNormal style='margin-left:-.25pt'>One-character Unicode strings can
also be created with the <span style='font-size:9.0pt;line-height:108%'>chr() </span>built-in
function, which takes integers and returns a Unicode string of length 1 that
contains the corresponding code point. The reverse operation is the built-in <span
style='font-size:9.0pt;line-height:108%'>ord() </span>function that takes a
one-character Unicode string and returns the code point value:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:18.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=73
src="Unicode%20HOWTO_files/image008.gif"></span></p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Converting to Bytes</h2>

<p class=MsoNormal style='margin-left:-.25pt'>The opposite method of <span
style='font-size:9.0pt;line-height:108%'>bytes.decode() </span>is <span
style='font-size:9.0pt;line-height:108%'>str.encode()</span>, which returns a <span
style='font-size:9.0pt;line-height:108%'>bytes </span>representation of the
Unicode string, encoded in the requested <i>encoding</i>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:1.5pt;
margin-left:-.25pt'>The <i>errors </i>parameter is the same as the parameter of
the <span style='font-size:9.0pt;line-height:108%'>decode() </span>method but
supports a few more possible handlers. As well as <span style='font-size:9.0pt;
line-height:108%'>'strict'</span>, <span style='font-size:9.0pt;line-height:
108%'>'ignore'</span>, and <span style='font-size:9.0pt;line-height:108%'>'replace'
</span>(which in this case inserts a question mark instead of the unencodable
character), there is also <span style='font-size:9.0pt;line-height:108%'>'xmlcharrefreplace'
</span>(inserts an XML character reference), <span style='font-size:9.0pt;
line-height:108%'>backslashreplace </span>(inserts a <span style='font-size:
9.0pt;line-height:108%'>\uNNNN </span>escape sequence) and <span
style='font-size:9.0pt;line-height:108%'>namereplace </span>(inserts a <span
style='font-size:9.0pt;line-height:108%'>\N{...} </span>escape sequence). The
following example shows the different results:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=296
src="Unicode%20HOWTO_files/image009.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.25pt;
margin-left:-.25pt'>The low-level routines for registering and accessing the
available encodings are found in the <span style='font-size:9.0pt;line-height:
108%'>codecs </span>module. Implementing new encodings also requires
understanding the <span style='font-size:9.0pt;line-height:108%'>codecs </span>module.
However, the encoding and decoding functions returned by this module are
usually more low-level than is comfortable, and writing new encodings is a
specialized task, so the module won’t be covered in this HOWTO.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Unicode Literals in Python Source Code</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:.05pt;
margin-left:-.25pt'>In Python source code, specific Unicode code points can be
written using the <span style='font-size:9.0pt;line-height:108%'>\u </span>escape
sequence, which is followed by four hex digits giving the code point. The <span
style='font-size:9.0pt;line-height:108%'>\U </span>escape sequence is similar,
but expects eight hex digits, not four:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=105
src="Unicode%20HOWTO_files/image010.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Using escape sequences for code
points greater than 127 is fine in small doses, but becomes an annoyance if
you’re using many accented characters, as you would in a program with messages
in French or some other accent-using language. You can also assemble strings
using the <span style='font-size:9.0pt;line-height:108%'>chr() </span>built-in
function, but this is even more tedious.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Ideally, you’d want to be able to
write literals in your language’s natural encoding. You could then edit Python
source code with your favorite editor which would display the accented
characters naturally, and have the right characters used at runtime.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Python supports writing source code in UTF-8 by default,
but you can use almost any encoding if you declare the encoding being used.
This is done by including a special comment as either the first or second line
of the source file:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=89
src="Unicode%20HOWTO_files/image011.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The syntax is inspired by Emacs’s
notation for specifying variables local to a file. Emacs supports many
different variables, but Python only supports ‘coding’. The <span
style='font-size:9.0pt;line-height:108%'>-*- </span>symbols indicate to Emacs
that the comment is special; they have no significance to Python but are a
convention. Python looks for <span style='font-size:9.0pt;line-height:108%'>coding:
name </span>or <span style='font-size:9.0pt;line-height:108%'>coding=name </span>in
the comment.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.65pt;
margin-left:-.25pt'>If you don’t include such a comment, the default encoding
used will be UTF-8 as already mentioned. See also <a
href="https://peps.python.org/pep-0263/"><b><span style='color:#377063;
text-decoration:none'>PEP </span></b></a><a
href="https://peps.python.org/pep-0263/"><b><span style='color:#377063;
text-decoration:none'>263</span></b></a><b><span style='color:#377063'> </span></b>for
more information.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Unicode Properties</h2>

<p class=MsoNormal style='margin-left:-.25pt'>The Unicode specification
includes a database of information about code points. For each defined code
point, the information includes the character’s name, its category, the numeric
value if applicable (for characters representing numeric concepts such as the
Roman numerals, fractions such as one-third and four-fifths, etc.). There are
also display-related properties, such as how to use the code point in
bidirectional text.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The following program displays some information about
several characters, and prints the numeric value of one particular character:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=168
src="Unicode%20HOWTO_files/image012.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>When run, this prints:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=105
src="Unicode%20HOWTO_files/image013.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.65pt;
margin-left:-.25pt'>The category codes are abbreviations describing the nature
of the character. These are grouped into categories such as “Letter”, “Number”,
“Punctuation”, or “Symbol”, which in turn are broken up into subcategories. To
take the codes from the above output, <span style='font-size:9.0pt;line-height:
108%'>'Ll' </span>means ‘Letter, lowercase’, <span style='font-size:9.0pt;
line-height:108%'>'No' </span>means “Number, other”, <span style='font-size:
9.0pt;line-height:108%'>'Mn' </span>is “Mark, nonspacing”, and <span
style='font-size:9.0pt;line-height:108%'>'So' </span>is “Symbol, other”. See <a
href="https://www.unicode.org/reports/tr44/#General_Category_Values"><span
style='color:#377063;text-decoration:none'>the General Category Values section
of the Unicode Character </span></a><a
href="https://www.unicode.org/reports/tr44/#General_Category_Values"><span
style='color:#377063;text-decoration:none'>Database documentation</span></a><span
style='color:#377063'> </span>for a list of category codes.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.5<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Comparing Strings</h2>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Unicode adds some complication to comparing strings,
because the same set of characters can be represented by different sequences of
code points. For example, a letter like ‘e&#770;’ can be represented as a
single code point U+00EA, or as U+0065 U+0302, which is the code point for ‘e’
followed by a code point for ‘COMBINING CIRCUMFLEX ACCENT’. These will produce
the same output when printed, but one is a string of length 1 and the other is
of length</p>

<p class=MsoNormal style='margin-left:-.25pt'>2.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>One tool for a case-insensitive comparison is the <span
style='font-size:9.0pt;line-height:108%'>casefold() </span>string method that
converts a string to a caseinsensitive form following an algorithm described by
the Unicode Standard. This algorithm has special handling for characters such
as the German letter ‘ß’ (code point U+00DF), which becomes the pair of lowercase
letters ‘ss’.</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.2pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=57
src="Unicode%20HOWTO_files/image014.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>A second tool is the <span style='font-size:9.0pt;
line-height:108%'>unicodedata </span>module’s <span style='font-size:9.0pt;
line-height:108%'>normalize() </span>function that converts strings to one of
several normal forms, where letters followed by a combining character are
replaced with single characters. <span style='font-size:9.0pt;line-height:108%'>normalize()
</span>can be used to perform string comparisons that won’t falsely report
inequality if two strings use combining characters differently:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=216
src="Unicode%20HOWTO_files/image015.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>When run, this outputs:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.05pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=73
src="Unicode%20HOWTO_files/image016.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The first argument to the <span
style='font-size:9.0pt;line-height:108%'>normalize() </span>function is a
string giving the desired normalization form, which can be one of ‘NFC’,
‘NFKC’, ‘NFD’, and ‘NFKD’.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The Unicode Standard also specifies how to do caseless
comparisons:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.15pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=216
src="Unicode%20HOWTO_files/image017.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>This will print <span
style='font-size:9.0pt;line-height:108%'>True</span>. (Why is <span
style='font-size:9.0pt;line-height:108%'>NFD() </span>invoked twice? Because
there are a few characters that make <span style='font-size:9.0pt;line-height:
108%'>casefold() </span>return a non-normalized string, so the result needs to
be normalized again. See section 3.13 of the Unicode Standard for a discussion
and an example.)</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.6<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Unicode Regular Expressions</h2>

<p class=MsoNormal style='margin-left:-.25pt'>The regular expressions supported
by the <span style='font-size:9.0pt;line-height:108%'>re </span>module can be
provided either as bytes or strings. Some of the special character sequences
such as <span style='font-size:9.0pt;line-height:108%'>\d </span>and <span
style='font-size:9.0pt;line-height:108%'>\w </span>have different meanings
depending on whether the pattern is supplied as bytes or a string. For example,
<span style='font-size:9.0pt;line-height:108%'>\d </span>will match the
characters <span style='font-size:9.0pt;line-height:108%'>[0-9] </span>in bytes
but in strings will match any character that’s in the <span style='font-size:
9.0pt;line-height:108%'>'Nd' </span>category.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The string in this example has the number 57 written in
both Thai and Arabic numerals:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:2.25pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=131
src="Unicode%20HOWTO_files/image018.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'><span style='font-size:9.0pt;
line-height:108%'>compile()</span>, <span style='font-size:9.0pt;line-height:
108%'>\d+ </span>will match the substring “57” instead.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.65pt;
margin-left:-.25pt'>Similarly, <span style='font-size:9.0pt;line-height:108%'>\w
</span>matches a wide variety of Unicode characters but only <span
style='font-size:9.0pt;line-height:108%'>[a-zA-Z0-9_] </span>in bytes or if <span
style='font-size:9.0pt;line-height:108%'>re.ASCII </span>is supplied, and <span
style='font-size:9.0pt;line-height:108%'>\s </span>will match either Unicode
whitespace characters or <span style='font-size:9.0pt;line-height:108%'>[
\t\n\r\f\v]</span>.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>2.7<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>References</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Some good alternative discussions
of Python’s Unicode support are:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:6.05pt;margin-left:24.9pt;text-align:left;text-indent:-8.95pt;
line-height:107%'><span style='line-height:107%'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><a
href="https://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html"><span
style='color:#377063;text-decoration:none'>Processing Text Files in Python</span></a><span
style='color:#377063'> </span><a
href="https://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html"><span
style='color:#377063;text-decoration:none'>3</span></a>, by Nick Coghlan.</p>

<p class=MsoNormal align=left style='margin-left:24.9pt;text-align:left;
text-indent:-8.95pt'><span style='line-height:108%'>•<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;
</span></span><a href="https://nedbatchelder.com/text/unipain.html"><span
style='color:#377063;text-decoration:none'>Pragmatic Unicode</span></a>, a
PyCon 2012 presentation by Ned Batchelder.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The <span style='font-size:9.0pt;
line-height:108%'>str </span>type is described in the Python library reference
at textseq.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The documentation for the <span
style='font-size:9.0pt;line-height:108%'>unicodedata </span>module.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The documentation for the <span
style='font-size:9.0pt;line-height:108%'>codecs </span>module.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.85pt;
margin-left:-.25pt'>Marc-Andre&#769; Lemburg gave <a
href="https://downloads.egenix.com/python/Unicode-EPC2002-Talk.pdf"><span
style='color:#377063;text-decoration:none'>a presentation titled “Python and
Unicode” (PDF slides)</span></a><span style='color:#377063'> </span>at
EuroPython 2002. The slides are an excellent overview of the design of Python
2’s Unicode features (where the Unicode string type is called <span
style='font-size:9.0pt;line-height:108%'>unicode </span>and literals start with
<span style='font-size:9.0pt;line-height:108%'>u</span>).</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Reading
and Writing Unicode Data</h1>

<p class=MsoNormal style='margin-left:-.25pt'>Once you’ve written some code
that works with Unicode data, the next problem is input/output. How do you get
Unicode strings into your program, and how do you convert Unicode into a form
suitable for storage or transmission?</p>

<p class=MsoNormal style='margin-left:-.25pt'>It’s possible that you may not
need to do anything depending on your input sources and output destinations;
you should check whether the libraries used in your application support Unicode
natively. XML parsers often return Unicode data, for example. Many relational
databases also support Unicode-valued columns and can return Unicode values
from an SQL query.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Unicode data is usually converted
to a particular encoding before it gets written to disk or sent over a socket.
It’s possible to do all the work yourself: open a file, read an 8-bit bytes
object from it, and convert the bytes with <span style='font-size:9.0pt;
line-height:108%'>bytes. decode(encoding)</span>. However, the manual approach
is not recommended.</p>

<p class=MsoNormal style='margin-left:-.25pt'>One problem is the multi-byte
nature of encodings; one Unicode character can be represented by several bytes.
If you want to read the file in arbitrary-sized chunks (say, 1024 or 4096
bytes), you need to write error-handling code to catch the case where only part
of the bytes encoding a single Unicode character are read at the end of a
chunk. One solution would be to read the entire file into memory and then
perform the decoding, but that prevents you from working with files that are
extremely large; if you need to read a 2 GiB file, you need 2 GiB of RAM.
(More, really, since for at least a moment you’d need to have both the encoded
string and its Unicode version in memory.)</p>

<p class=MsoNormal style='margin-left:-.25pt'>The solution would be to use the
low-level decoding interface to catch the case of partial coding sequences. The
work of implementing this has already been done for you: the built-in <span
style='font-size:9.0pt;line-height:108%'>open() </span>function can return a
file-like object that assumes the file’s contents are in a specified encoding
and accepts Unicode parameters for methods such as <span style='font-size:9.0pt;
line-height:108%'>read() </span>and <span style='font-size:9.0pt;line-height:
108%'>write()</span>. This works through <span style='font-size:9.0pt;
line-height:108%'>open()</span>’s <i>encoding </i>and <i>errors </i>parameters
which are interpreted just like those in <span style='font-size:9.0pt;
line-height:108%'>str.encode() </span>and <span style='font-size:9.0pt;
line-height:108%'>bytes.decode()</span>.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>Reading Unicode from a file is therefore simple:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=57
src="Unicode%20HOWTO_files/image019.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>It’s also possible to open files in update mode, allowing
both reading and writing:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.0pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=73
src="Unicode%20HOWTO_files/image020.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The Unicode character <span style='font-size:9.0pt;
line-height:108%'>U+FEFF </span>is used as a byte-order mark (BOM), and is
often written as the first character of a file in order to assist with
autodetection of the file’s byte ordering. Some encodings, such as UTF-16,
expect a BOM to be present at the start of a file; when such an encoding is
used, the BOM will be automatically written as the first character and will be
silently dropped when the file is read. There are variants of these encodings,
such as ‘utf-16-le’ and ‘utf-16-be’ for little-endian and big-endian encodings,
that specify one particular byte ordering and don’t skip the</p>

<p class=MsoNormal style='margin-left:-.25pt'>BOM.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.3pt;
margin-left:-.25pt'>In some areas, it is also convention to use a “BOM” at the
start of UTF-8 encoded files; the name is misleading since UTF-8 is not
byte-order dependent. The mark simply announces that the file is encoded in
UTF-8. For reading such files, use the ‘utf-8-sig’ codec to automatically skip
the mark if present.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.1<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Unicode filenames</h2>

<p class=MsoNormal style='margin-left:-.25pt'>Most of the operating systems in
common use today support filenames that contain arbitrary Unicode characters.
Usually this is implemented by converting the Unicode string into some encoding
that varies depending on the system. Today Python is converging on using UTF-8:
Python on MacOS has used UTF-8 for several versions, and Python 3.6 switched to
using UTF-8 on Windows as well. On Unix systems, there will only be a
filesystem encoding. if you’ve set the <span style='font-size:9.0pt;line-height:
108%'>LANG </span>or <span style='font-size:9.0pt;line-height:108%'>LC_CTYPE </span>environment
variables; if you haven’t, the default encoding is again UTF-8.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:108%'>sys.getfilesystemencoding()
</span>function returns the encoding to use on your current system, in case you
want to do the encoding manually, but there’s not much reason to bother. When
opening a file for reading or writing, you can usually just provide the Unicode
string as the filename, and it will be automatically converted to the right
encoding for you:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:10.1pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=57
src="Unicode%20HOWTO_files/image021.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>Functions in the <span
style='font-size:9.0pt;line-height:108%'>os </span>module such as <span
style='font-size:9.0pt;line-height:108%'>os.stat() </span>will also accept
Unicode filenames.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:108%'>os.listdir()
</span>function returns filenames, which raises an issue: should it return the
Unicode version of filenames, or should it return bytes containing the encoded
versions? <span style='font-size:9.0pt;line-height:108%'>os.listdir() </span>can
do both, depending on whether you provided the directory path as bytes or a
Unicode string. If you pass a Unicode string as the path, filenames will be
decoded using the filesystem’s encoding and a list of Unicode strings will be
returned, while passing a byte path will return the filenames as bytes. For
example, assuming the default filesystem encoding is UTF-8, running the
following program:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:0in;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=121
src="Unicode%20HOWTO_files/image022.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>will produce the following output:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:9.95pt;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=57
src="Unicode%20HOWTO_files/image023.gif"></span></p>

<p class=MsoNormal style='margin-left:-.25pt'>The first list contains
UTF-8-encoded filenames, and the second list contains the Unicode versions.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.3pt;
margin-left:-.25pt'>Note that on most occasions, you should can just stick with
using Unicode with these APIs. The bytes APIs should only be used on systems
where undecodable file names can be present; that’s pretty much only Unix
systems now.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.2<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>Tips for Writing Unicode-aware Programs</h2>

<p class=MsoNormal style='margin-left:-.25pt'>This section provides some
suggestions on writing software that deals with Unicode.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The most important tip is:</p>

<p class=MsoNormal style='margin-top:0in;margin-right:.15in;margin-bottom:5.65pt;
margin-left:25.4pt'>Software should only work with Unicode strings internally,
decoding the input data as soon as possible and encoding the output only at the
end.</p>

<p class=MsoNormal style='margin-left:-.25pt'>If you attempt to write
processing functions that accept both Unicode and byte strings, you will find
your program vulnerable to bugs wherever you combine the two different kinds of
strings. There is no automatic encoding or decoding: if you do e.g. <span
style='font-size:9.0pt;line-height:108%'>str + bytes</span>, a <span
style='font-size:9.0pt;line-height:108%'>TypeError </span>will be raised.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:14.1pt;
margin-left:-.25pt'>When using data coming from a web browser or some other
untrusted source, a common technique is to check for illegal characters in a
string before using the string in a generated command line or storing it in a
database. If you’re doing this, be careful to check the decoded string, not the
encoded bytes data; some encodings may have interesting properties, such as not
being bijective or not being fully ASCII-compatible. This is especially true if
the input data also specifies the encoding, since the attacker can then choose
a clever way to hide malicious text in the encoded bytestream.</p>

<h3 style='margin-left:-.25pt'>Converting Between File Encodings</h3>

<p class=MsoNormal style='margin-left:-.25pt'>The <span style='font-size:9.0pt;
line-height:108%'>StreamRecoder </span>class can transparently convert between
encodings, taking a stream that returns data in encoding #1 and behaving like a
stream returning data in encoding #2.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:8.4pt;
margin-left:-.25pt'>For example, if you have an input file <i>f </i>that’s in
Latin-1, you can wrap it with a <span style='font-size:9.0pt;line-height:108%'>StreamRecoder
</span>to return bytes encoded in UTF-8:</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:.8pt;margin-left:-.25pt;text-align:left;line-height:109%'><span
style='font-size:9.0pt;line-height:109%'>new_f </span><span style='font-size:
9.0pt;line-height:109%;color:#666666'>= </span><span style='font-size:9.0pt;
line-height:109%'>codecs</span><span style='font-size:9.0pt;line-height:109%;
color:#666666'>.</span><span style='font-size:9.0pt;line-height:109%'>StreamRecoder(f,</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:133.9pt;
margin-bottom:11.95pt;margin-left:21.25pt;text-align:left;line-height:115%'><span
style='position:relative;z-index:-1895824384'><span style='left:0px;position:
absolute;left:-5px;top:-22px;width:611px;height:121px'><img width=611
height=121 src="Unicode%20HOWTO_files/image024.gif"></span></span><i><span
style='font-size:9.0pt;line-height:115%;color:#407F8F'># en/decoder: used by
read() to encode its results and # by write() to decode its input. </span></i><span
style='font-size:9.0pt;line-height:115%'>codecs</span><span style='font-size:
9.0pt;line-height:115%;color:#666666'>.</span><span style='font-size:9.0pt;
line-height:115%'>getencoder(</span><span style='font-size:9.0pt;line-height:
115%;color:#4070A1'>'utf-8'</span><span style='font-size:9.0pt;line-height:
115%'>), codecs</span><span style='font-size:9.0pt;line-height:115%;color:#666666'>.</span><span
style='font-size:9.0pt;line-height:115%'>getdecoder(</span><span
style='font-size:9.0pt;line-height:115%;color:#4070A1'>'utf-8'</span><span
style='font-size:9.0pt;line-height:115%'>),</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:0in;
margin-bottom:21.55pt;margin-left:21.25pt;text-align:left;line-height:115%'><i><span
style='font-size:9.0pt;line-height:115%;color:#407F8F'># reader/writer: used to
read and write to the stream. </span></i><span style='font-size:9.0pt;
line-height:115%'>codecs</span><span style='font-size:9.0pt;line-height:115%;
color:#666666'>.</span><span style='font-size:9.0pt;line-height:115%'>getreader(</span><span
style='font-size:9.0pt;line-height:115%;color:#4070A1'>'latin-1'</span><span
style='font-size:9.0pt;line-height:115%'>), codecs</span><span
style='font-size:9.0pt;line-height:115%;color:#666666'>.</span><span
style='font-size:9.0pt;line-height:115%'>getwriter(</span><span
style='font-size:9.0pt;line-height:115%;color:#4070A1'>'latin-1'</span><span
style='font-size:9.0pt;line-height:115%'>) )</span></p>

<h3 style='margin-left:-.25pt'>Files in an Unknown Encoding</h3>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:0in;
margin-left:-.25pt'>What can you do if you need to make a change to a file, but
don’t know the file’s encoding? If you know the encoding is ASCII-compatible
and only want to examine or modify the ASCII parts, you can open the file with
the</p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:-3.35pt;
margin-bottom:0in;margin-left:-3.4pt;text-align:left;text-indent:0in;
line-height:107%'><span style='font-size:11.0pt;line-height:107%;font-family:
"Calibri",sans-serif'><img border=0 width=611 height=159
src="Unicode%20HOWTO_files/image025.gif"></span></p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:16.2pt;
margin-left:-.25pt'>The <span style='font-size:9.0pt;line-height:108%'>surrogateescape
</span>error handler will decode any non-ASCII bytes as code points in a
special range running from U+DC80 to U+DCFF. These code points will then turn
back into the same bytes when the <span style='font-size:9.0pt;line-height:
108%'>surrogateescape </span>error handler is used to encode the data and write
it back out.</p>

<h2 style='margin-left:21.5pt;text-indent:-22.25pt'>3.3<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;
</span>References</h2>

<p class=MsoNormal style='margin-left:-.25pt'>One section of <a
href="https://pyvideo.org/video/289/pycon-2010--mastering-python-3-i-o"><span
style='color:#377063;text-decoration:none'>Mastering Python 3 Input/Output</span></a>,
a PyCon 2010 talk by David Beazley, discusses text processing and binary data
handling.</p>

<p class=MsoNormal style='margin-left:-.25pt'>The <a
href="https://downloads.egenix.com/python/LSM2005-Developing-Unicode-aware-applications-in-Python.pdf"><span
style='color:#377063;text-decoration:none'>PDF slides for Marc-Andre&#769;
Lemburg’s presentation “Writing Unicode-aware Applications in Python”</span></a><span
style='color:#377063'> </span>discuss questions of character encodings as well
as how to internationalize and localize an application. These slides cover
Python 2.x only.</p>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:21.35pt;
margin-left:-.25pt'><a
href="https://pyvideo.org/video/1768/the-guts-of-unicode-in-python"><span
style='color:#377063;text-decoration:none'>The Guts of Unicode in Python</span></a><span
style='color:#377063'> </span>is a PyCon 2013 talk by Benjamin Peterson that
discusses the internal Unicode representation in Python 3.3.</p>

<h1 style='margin-left:.2in;text-indent:-15.15pt'><span style='line-height:
107%'>4<span style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp; </span></span>Acknowledgements</h1>

<p class=MsoNormal style='margin-top:0in;margin-right:0in;margin-bottom:6.9pt;
margin-left:-.25pt'>The initial draft of this document was written by Andrew
Kuchling. It has since been revised further by Alexander Belopolsky, Georg
Brandl, Andrew Kuchling, and Ezio Melotti.</p>

<p class=MsoNormal style='margin-left:-.25pt'>Thanks to the following people
who have noted errors or offered suggestions on this article: E&#769;ric
Araujo, Nicholas Bastin, Nick Coghlan, Marius Gedminas, Kent Johnson, Ken
Krugler, Marc-Andre&#769; Lemburg, Martin von Lo&#776;wis, Terry J. Reedy, Serhiy
Storchaka, Eryk Sun, Chad Whitacre, Graham Wideman.<br clear=all
style='page-break-before:always'>
</p>

<h1 style='margin-top:0in;margin-right:0in;margin-bottom:7.25pt;margin-left:
-.25pt;text-indent:0in'>Index</h1>

<p class=MsoNormal align=left style='margin:0in;text-align:left;text-indent:
0in;line-height:107%'><span style='font-size:14.5pt;line-height:107%;
font-family:"Calibri",sans-serif'>P</span></p>

<p class=MsoNormal align=left style='margin-top:0in;margin-right:284.5pt;
margin-bottom:.8pt;margin-left:19.2pt;text-align:left;text-indent:-19.95pt;
line-height:109%'><span style='font-size:9.0pt;line-height:109%'>Python
Enhancement Proposals PEP 263</span>, <span style='color:#355F7C'>6</span></p>

</div>

</body>

</html>
