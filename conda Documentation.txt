
conda Documentation
Release 4.6.0
Continuum Analytics
Jan 28, 2019



Contents

1 User guide	3
2 Conda Commands	65
3 Conda Configuration	81
4 Conda Python API	91
5 Release notes	99
6 Command reference	177
7 Glossary	179
Python Module Index	183
i
ii

conda Documentation, Release 4.6.0

Package, dependency and environment management for any language-Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN
Conda is an open source package management system and environment management system that runs on Windows, macOS and Linux. Conda quickly installs, runs and updates packages and their dependencies. Conda easily creates, saves, loads and switches between environments on your local computer. It was created for Python programs, but it can package and distribute software for any language.
Conda as a package manager helps you find and install packages. If you need a package that requires a different version of Python, you do not need to switch to a different environment manager, because conda is also an environment manager. With just a few commands, you can set up a totally separate environment to run that different version of Python, while continuing to run your usual version of Python in your normal environment.
In its default configuration, conda can install and manage the thousand packages at repo.continuum.io that are built, reviewed and maintained by Anaconda(r).
Conda can be combined with continuous integration systems such as Travis CI and AppVeyor to provide frequent, automated testing of your code.
The conda package and environment manager is included in all versions of Anaconda(r), Miniconda and Anaconda Repository. Conda is also included in Anaconda Enterprise , which provides on-site enterprise package and environment management for Python, R, Node.js, Java and other application stacks. Conda is also available on PyPI, although that approach may not be as up to date.
Contents
Contents
CHAPTER 1

User guide

1.1 Overview
This page provides an overview of how to use conda. For an overview of what conda is and what it does, please see the front page.
The quickest way to start using conda is to go through the 20-minute Getting started with conda guide.
The conda command is the primary interface for managing installations of various packages. It can:
• Query and search the Anaconda package index and current Anaconda installation.
• Create new conda environments.
• Install and update packages into existing conda environments.
TIP: You can abbreviate many frequently used command options that are preceded by 2 dashes (--) to just 1 dash and the first letter of the option. So --name and -n are the same, and --envs and -e are the same.
For full usage of each command, including abbreviations, see Command reference. You can see the same information at the command line by viewing the command-line help.
1.2 Concepts
• Conda directory structure
• Conda environments
• Conda packages

1.2.1 Conda directory structure
This section describes the conda system directory structure.
ROOT_DIR
The directory that Anaconda or Miniconda was installed into.
EXAMPLES:
/opt/Anaconda#LinuxC:\Anaconda#Windows/pkgs
Also referred to as PKGS_DIR. This directory contains decompressed packages, ready to be linked in conda environments. Each package resides in a subdirectory corresponding to its canonical name.
/envs
The system location for additional conda environments to be created.
The following subdirectories comprise the default Anaconda environment:
/bin
/include
/lib
/share
Other conda environments usually contain the same subdirectories as the default environment.
1.2.2 Conda environments
A conda environment is a directory that contains a specific collection of conda packages that you have installed. For example, you may have one environment with NumPy 1.7 and its dependencies, and another environment with NumPy 1.6 for legacy testing. If you change one environment, your other environments are not affected. You can easily activate or deactivate environments, which is how you switch between them. You can also share your environment with someone by giving them a copy of your environment.yaml file. For more information, see Managing environments.
1.2.3 Conda packages
A conda package is a compressed tarball file that contains system-level libraries, Python or other modules, executable programs and other components. Conda keeps track of the dependencies between packages and platforms.
Conda packages are downloaded from remote channels, which are URLs to directories containing conda packages. The conda command searches a default set of channels, and packages are automatically downloaded and updated from http://repo.continuum.io/pkgs/. You can modify what remote channels are automatically searched. You might want to do this to maintain a private or internal channel. For details, see Channel locations (channels). See also Managing packages.
The conda package format is identical across platforms and operating systems.
To install conda packages, in the Terminal or an Anaconda Prompt, run:
conda install [packagename]
NOTE: Replace [packagename] with the desired package name.
A conda package includes a link to a tarball or bzipped tar archive, with the extension ".tar.bz2", which contains metadata under the info/ directory and a collection of files that are installed directly into an install prefix.
During the install process, files are extracted into the install prefix, except for files in the info/ directory. Installing the files of a conda package into an environment can be thought of as changing the directory to an environment, and then downloading and extracting the .zip file and its dependencies-all with the single conda install [packagename] command.
1.3 Getting started with conda
Conda is a powerful package manager and environment manager that you use with command line commands at the Anaconda Prompt for Windows, or in a Terminal window for macOS or Linux.
This 20-minute guide to getting started with conda lets you try out the major features of conda. You should understand how conda works when you finish this guide.
SEE ALSO: Getting started with Anaconda Navigator, a graphical user interface that lets you use conda in a weblike interface without having to enter manual commands. Compare the Getting started guides for each to see which program you prefer.
1.3.1 Before you start
You should have already installed Anaconda.
1.3.2 Contents
• Starting conda on Windows, macOS or Linux. 2 MINUTES
• Managing conda. Verify that Anaconda is installed and check that conda is updated to the current version. 3 MINUTES
• Managing environments. Create environments and move easily between them. 5 MINUTES
• Managing Python. Create an environment that has a different version of Python. 5 MINUTES
• Managing packages. Find packages available for you to install. Install packages. 5 MINUTES
TOTAL TIME: 20 MINUTES
1.3.3 Starting conda
Windows
• From the Start menu, search for and open "Anaconda Prompt".
1.3. Getting started with conda

On Windows, all commands below are typed into the Anaconda Prompt window.
MacOS
• Open Launchpad, then click the Terminal icon.
On macOS, all commands below are typed into the Terminal window.
Linux
• Open a Terminal window.
On Linux, all commands below are typed into the Terminal window.
1.3.4 Managing conda
Verify that conda is installed and running on your system by typing:
conda --version
Conda displays the number of the version that you have installed. You do not need to navigate to the Anaconda directory.
EXAMPLE: conda 4.4.9
NOTE: If you get an error message, make sure you closed and re-opened the Terminal window after installing, or do it now. Then verify that you are logged into the same user account that you used to install Anaconda or Miniconda.
Update conda to the current version. Type the following:
conda update conda
Conda compares versions and then displays what is available to install.
If a newer version of conda is available, type y to update:
Proceed ([y]/n)? y
TIP: We recommend that you always keep conda updated to the latest version.
1.3.5 Managing Environments
Conda allows you to to create separate environments containing files, packages and their dependencies that will not interact with other environments.
When you begin using conda, you already have a default environment named base. You don't want to put programs into your base environment, though. Create separate environments to keep your programs isolated from each other.
1. Create a new environment and install a package in it.
We will name the environment snowflakes and install the package BioPython. At the Anaconda Prompt or in your Terminal window, type the following:
conda create --name snowflakes biopython
Conda checks to see what additional packages ("dependencies") Biopython will need, and asks if you want to proceed:
Proceed ([y]/n)? y
Type "y" and press Enter to proceed.
2. To use, or "activate" the new environment, type the following:
• Windows: activate snowflakes
• Linux and macOS: source activate snowflakes
Now that you are in your snowflakes environment, any conda commands you type will go to that environment until you deactivate it.
3. To see a list of all your environments, type:
conda info --envs
A list of environments appears, similar to the following:
conda environments:
	base	/home/username/Anaconda3
	snowflakes	* /home/username/Anaconda3/envs/snowflakesTIP: The active environment is the one with an asterisk (*).
4. Change your current environment back to the default (base):
• Windows: deactivate
• Linux, macOS: source deactivate
TIP: When the environment is deactivated, its name is no longer shown in your prompt, and the asterisk (*) returns to base. To verify, you can repeat the conda info --envs command.
1.3. Getting started with conda
1.3.6 Managing Python
When you create a new environment, conda installs the same Python version you used when you downloaded and installed Anaconda. If you want to use a different version of Python, for example Python 3.5, simply create a new environment and specify the version of Python that you want.
1. Create a new environment named "snakes" that contains Python 3.5:
conda create --name snakes python=3.5
When conda asks if you want to proceed, type "y" and press Enter.
2. Activate the new environment:
• Windows: activate snakes
• Linux, macOS: source activate snakes
3. Verify that the snakes environment has been added and is active:
conda info --envs
Conda displays the list of all environments with an asterisk (*) after the name of the active environment:
# conda environments:
# base/home/username/anaconda3snakes	*/home/username/anaconda3/envs/snakessnowflakes/home/username/anaconda3/envs/snowflakesThe active environment is also displayed in front of your prompt in (parentheses) or [brackets] like this:
(snakes) $
4. Verify which version of Python is in your current environment:
python --version
5. Deactivate the snakes environment and return to base environment:
• Windows: deactivate
• Linux, macOS: source deactivate
1.3.7 Managing packages
In this section, you check which packages you have installed, check which are available and look for a specific package and install it.
1. To find a package you have already installed, first activate the environment you want to search. Look above for the commands to activate your snakes environment.
2. Check to see if a package you have not installed named "beautifulsoup4" is available from the Anaconda repository (must be connected to the Internet):
conda search beautifulsoup4
Conda displays a list of all packages with that name on the Anaconda repository, so we know it is available.
3. Install this package into the current environment:
conda install beautifulsoup4
4. Check to see if the newly installed program is in this environment:
conda list
1.3.8 More information
• Conda cheat sheet.
• Full documentation- https://conda.io/docs/ .
• Free community support- https://groups.google.com/a/anaconda.com/forum/#!forum/anaconda .
• Paid support options- https://www.anaconda.com/support/ .
1.4 Installation
• System requirements
• Regular installation
• Installing in silent mode
• Installing conda on a system that has other Python installations or packages
The fastest way to obtain conda is to install Miniconda, a mini version of Anaconda that includes only conda and its dependencies. If you prefer to have conda plus over 720 open source packages, install Anaconda.
We recommend you install Anaconda for the local user, which does not require administrator permissions and is the most robust type of installation. You can also install Anaconda system wide, which does require administrator permissions.
For information on using our graphical installers for Windows or macOS, see the instructions for installing Anaconda.
1.4.1 System requirements
• 32- or 64-bit computer.
• For Miniconda-400 MB disk space.
• For Anaconda-Minimum 3 GB disk space to download and install.
• Windows, macOS or Linux.
• Python 2.7, 3.4, 3.5 or 3.6.
• pycosat.
• PyYaml.
• Requests.
NOTE: You do not need administrative or root permissions to install Anaconda if you select a user-writable install location.
1.4. Installation
1.4.2 Regular installation
Follow the instructions for your operating system:
• Windows.
• macOS.
• Linux.
1.4.3 Installing in silent mode
You can use silent installation of Miniconda or Anaconda for deployment or testing or building services such as Travis CI and AppVeyor.
Follow the silent-mode instructions for your operating system:
• Windows.
• macOS.
• Linux.
1.4.4 Installing conda on a system that has other Python installations or packages
You do not need to uninstall other Python installations or packages in order to use conda. Even if you already have a system Python, another Python installation from a source such as the macOS Homebrew package manager and globally installed packages from pip such as pandas and NumPy, you do not need to uninstall, remove, or change any of them before using conda.
Install Anaconda or Miniconda normally, and let the installer add the conda installation of Python to your PATH environment variable. There is no need to set the PYTHONPATH environment variable.
To see if the conda installation of Python is in your PATH variable:
• On macOS and Linux, open the Terminal and run-echo $PATH.
• On Windows, open an Anaconda Prompt and run-echo %PATH%.
To see which Python installation is currently set as the default:
• On macOS and Linux, open the Terminal and run-which python.
• On Windows, open an Anaconda Prompt and run-where python.
To see which packages are installed in your current conda environment and their version numbers, in your Terminal window or an Anaconda Prompt, run conda list.
Downloading conda
• Anaconda or Miniconda?
• Choosing a version of Anaconda or Miniconda
• GUI versus command line installer
• Choosing a version of Python
• Cryptographic hash verification
You have 3 conda download options:
• Download Anaconda-free.
• Download Miniconda-free.
• Purchase Anaconda Enterprise.
You can download any of these 3 options with legacy Python 2.7 or current Python 3.
You can also choose a version with a GUI or a command line installer.
TIP: If you are unsure of which option to download, choose the most recent version of Anaconda3, which includes Python 3.6, the most recent version of Python. If you are on Windows or macOS, choose the version with the GUI installer.
Anaconda or Miniconda?
Choose Anaconda if you:
• Are new to conda or Python.
• Like the convenience of having Python and over 150 scientific packages automatically installed at once.
• Have the time and disk space-a few minutes and 300 MB.
• Do not want to individually install each of the packages you want to use.
Choose Miniconda if you:
• Do not mind installing each of the packages you want to use individually.
• Do not have time or disk space to install over 150 packages at once.
• Want fast access to Python and the conda commands and you wish to sort out the other programs later.
Choosing a version of Anaconda or Miniconda
• Whether you use Anaconda or Miniconda, select the most recent version.
• Select an older version from the archive only if you are testing or need an older version for a specific purpose.
• To use conda on Windows XP, select Anaconda 2.3.0 and see Using conda on Windows XP with or without a proxy.
GUI versus command line installer
Both GUI and command line installers are available for Windows, macOS and Linux:
• If you do not wish to enter commands in a Terminal window, choose the GUI installer.
• If GUIs slow you down, choose the command line version.
Choosing a version of Python
• The last version of Python 2 is 2.7, which is included with Anaconda and Miniconda.
• The newest stable version of Python is 3.6, which is included with Anaconda3 and Miniconda3.
1.4. Installation
• You can easily set up additional versions of Python such as 3.5 by downloading any version and creating a new environment with just a few clicks. See Getting started with conda.
Cryptographic hash verification
MD5 checksums are available for Miniconda and both MD5 and SHA-256 checksums are available for Anaconda.
Download the installer file and before installing verify it as follows:
• macOS: In iTerm or a Terminal window enter md5 filename or shasum -a 256 filename.
  NOTE: Replace filename with the actual path and name of the downloaded installer file. • Linux: In a Terminal window enter md5sum filename or sha256sum filename.
NOTE: Replace filename with the actual path and name of the downloaded installer file.
• Windows:
- If you have PowerShell V4 or later:
Open a PowerShell console and verify the file as follows:
Get-FileHash filename -Algorithm MD5
or:
Get-FileHash filename -Algorithm SHA256
NOTE: Replace "filename" with the actual path and name of the downloaded file.
- If you don't have PowerShell V4 or later:
Use the free online verifier tool on the Microsoft website.
1. Download the file and extract it.
2. Open a Command Prompt window.
3. Navigate to the file.
4. Run one of the following commands:
* For MD5:
Start-PsFCIV -Path C:\path\to\file.ext -HashAlgorithm MD5 -Online
* For SHA256:
Start-PsFCIV -Path C:\path\to\file.ext -HashAlgorithm SHA256 -Online
NOTE: In both commands, replace C:\path\to\file.ext with the actual path, filename and extension.
Installing on Windows
1. Download the installer:
• Miniconda installer for Windows.
• Anaconda installer for Windows.
2. Double-click the .exe file.
3. Follow the instructions on the screen.
If you are unsure about any setting, accept the defaults. You can change them later.
When installation is finished, from the Start menu, open the Anaconda Prompt.
4. Test your installation.
Installing in silent mode
NOTE: The following instructions are for Miniconda. For Anaconda, substitute Anaconda for Miniconda in all of the commands.
To run the the Windows installer for Miniconda in silent mode, use the /S argument. The following optional arguments are supported:
• /InstallationType=[JustMe|AllUsers]-Default is''JustMe''.
• /AddToPath=[0|1]-Default is 1'
• /RegisterPython=[0|1]-Make this the system's default Python. 0 indicates JustMe, which is the default. 1 indicates AllUsers.
• /S-Install in silent mode.
• /D=<installation path>-Destination installation path. Must be the last argument. Do not wrap in quotation marks. Required if you use /S.
All arguments are case-sensitive.
EXAMPLE: The following command installs Miniconda for the current user without registering Python as the system's default:
start /wait "" Miniconda4-latest-Windows-x86_64.exe /InstallationType=JustMe / ,→RegisterPython=0 /S /D=%UserProfile%\Miniconda3
Updating conda
1. Open your Anaconda Prompt from the start menu.
2. Navigate to the anaconda directory.
3. Run conda update conda.
Uninstalling conda
1. In the Windows Control Panel, click Add or Remove Program.
2. Select Python X.X (Miniconda), where X.X is your version of Python.
3. Click Remove Program.
NOTE: Removing a program is different in Windows 10.
1.4. Installation
Installing on macOS
1. Download the installer:
• Miniconda installer for macOS.
• Anaconda installer for macOS.
2. Install:
• Miniconda-In your Terminal window, run:
bash Miniconda3-latest-MacOSX-x86_64.sh
• Anaconda-Double-click the .pkg file.
3. Follow the prompts on the installer screens.
If you are unsure about any setting, accept the defaults. You can change them later.
4. To make the changes take effect, close and then re-open your Terminal window.
5. Test your installation.
Installing in silent mode
NOTE: The following instructions are for Miniconda. For Anaconda, substitute Anaconda for Miniconda in all of the commands.
To run the silent installation of Miniconda for macOS or Linux, specify the -b and -p arguments of the bash installer. The following arguments are supported:
• -b-Batch mode with no PATH modifications to ~/.bashrc. Assumes that you agree to the license agreement.
Does not edit the .bashrc or .bash_profile files.
• -p-Installation prefix/path.
• -f-Force installation even if prefix -p already exists.
EXAMPLE:
wget https://repo.continuum.io/miniconda/Miniconda3-3.7.0-Linux-x86_64.sh -O ~/
 ,→miniconda.sh bash ~/miniconda.sh -b -p $HOME/miniconda export PATH="$HOME/miniconda/bin:$PATH"NOTE: This sets the PATH only for the current session, not permanently. Trying to use conda when conda is not in your PATH causes errors such as "command not found."
In each new bash session, before using conda, set the PATH and run the activation scripts of your conda packages by running:
source $HOME/miniconda/bin/activate
NOTE: Replace $HOME/miniconda/bin/activate with the path to the activate script in your conda installation.
To set the PATH permanently, you can add a line to your .bashrc file. However, this makes it possible to use conda without running the activation scripts of your conda packages, which may produce errors.
EXAMPLE:
export PATH="$HOME/miniconda/bin:$PATH"
Updating Anaconda or Miniconda
1. Open a Terminal window.
2. Navigate to the anaconda directory.
3. Run conda update conda.
Uninstalling Anaconda or Miniconda
1. Open a Terminal window.
2. Remove the entire Miniconda install directory with:
rm -rf ~/miniconda
3. You may also:
4. OPTIONAL: Edit ~/.bash_profile to remove the Miniconda directory from your PATH environment variable.
5. Remove the following hidden file and folders that may have been created in the home directory:
• .condarc file
• .conda directory
• .continuum directory
By running:
rm -rf ~/.condarc ~/.conda ~/.continuum
Installing on Linux
1. Download the installer:
• Miniconda installer for Linux.
• Anaconda installer for Linux.
2. In your Terminal window, run:
• Miniconda:
bash Miniconda3-latest-Linux-x86_64.sh
• Anaconda:
bash Anaconda-latest-Linux-x86_64.sh
3. Follow the prompts on the installer screens.
If you are unsure about any setting, accept the defaults. You can change them later.
4. To make the changes take effect, close and then re-open your Terminal window.
1.4. Installation
5. Test your installation.
Using with fish shell
To use conda with fish shell, add the following line in your fish.config file:
source (conda info --root)/etc/fish/conf.d/conda.fish
Installing in silent mode
See the instructions for installing in silent mode on macOS.
Updating Anaconda or Miniconda
1. Open a Terminal window.
2. Run conda update conda.
Uninstalling Anaconda or Miniconda
1. Open a Terminal window.
2. Remove the entire miniconda install directory with:
rm -rf ~/miniconda
3. OPTIONAL: Edit ~/.bash_profile to remove the Miniconda directory from your PATH environment variable.
4. OPTIONAL: Remove the following hidden file and folders that may have been created in the home directory:
• .condarc file
• .conda directory
• .continuum directory
By running:
rm -rf ~/.condarc ~/.conda ~/.continuum
Testing your installation
To test your installation, in your Terminal window or Anaconda Prompt, run the command conda list.
For a successful installation, a list of installed packages appears.

1.5 Configuration
1.5.1 Using the .condarc conda configuration file
• Overview
• General configuration
- Channel locations (channels)
- Allow other channels (allow_other_channels)
- Default channels (default_channels)
- Update conda automatically (auto_update_conda)
- Always yes (always_yes)
- Show channel URLs (show_channel_urls)
- Change command prompt (changeps1)
- Add pip as Python dependency (add_pip_as_python_dependency)
- Use pip (use_pip)
- Configure conda for use behind a proxy server (proxy_servers)
- SSL verification (ssl_verify)
- Offline mode only (offline)
• Advanced configuration
- Disallow soft-linking (allow_softlinks)
- Set a channel alias (channel_alias)
- Always add packages by default (create_default_packages)
- Track features (track_features)
- Disable updating of dependencies (update_dependencies)
- Disallow installation of specific packages (disallow)
- Add Anaconda.org token to automatically see private packages (add_anaconda_token)
- Specify environment directories (envs_dirs)
- Specify package directories (pkgs_dirs)
• Conda build configuration
- Specify conda build output root directory (root-dir)
- Specify conda build build folder (conda-build 3.16.3+) (output_folder)
- Automatically upload conda build packages to Anaconda.org (anaconda_upload)
- Token to be used for Anaconda.org uploads (conda-build 3.0+) (anaconda_token)
- Limit build output verbosity (conda-build 3.0+) (quiet)
- Disable filename hashing (conda-build 3.0+) (filename_hashing)- Disable recipe and package verification (conda-build 3.0+) (no_verify)
- Disable per-build folder creation (conda-build 3.0+) (set_build_id)
- Skip building packages that already exist (conda-build 3.0+) (skip_existing)
- Omit recipe from package (conda-build 3.0+) (include_recipe)
- Disable activation of environments during build/test (conda-build 3.0+) (activate)
- Disable long prefix during test (conda-build 3.16.3+) (long_test_prefix)
- PyPI upload settings (conda-build 3.0+) (pypirc)
- PyPI repository to upload to (conda-build 3.0+) (pypi_repository)
• Expansion of environment variables
• Obtaining information from the .condarc fileOverview
The conda configuration file, .condarc, is an optional runtime configuration file that allows advanced users to configure various aspects of conda, such as which channels it searches for packages, proxy settings and environment directories.
The .condarc file is not included by default, but it is automatically created in your home directory the first time you run the conda config command.
A .condarc file may also be located in the root environment, in which case it overrides any in the home directory.
NOTE: A .condarc file can also be used in an administrator-controlled installation to override the users' configuration. See Administering a multi-user conda installation.
The .condarc configuration file follows simple YAML syntax.
The .condarc file can change many parameters, including:
• Where conda looks for packages.
• If and how conda uses a proxy server.
• Where conda lists known environments.
• Whether to update the bash prompt with the current activated environment name.
• Whether user-built packages should be uploaded to Anaconda.org.
• Default packages or features to include in new environments.
To create or modify a .condarc file, use the conda config command or use a text editor to create a new file named .condarc and save it to your user home directory or root directory.
EXAMPLE:
conda config --add channels conda-forge
You can also download a sample .condarc file to edit in your editor and save to your user home directory or root directory.
To set configuration options, edit the .condarc file directly or use the conda config --set command.
EXAMPLE: To set the auto_update_conda option to False, run:
conda config --set auto_update_conda False
For a complete list of conda config commands, see the command reference. The same list is available at the Terminal or Anaconda Prompt by running conda config --help.
TIP: Conda supports tab completion with external packages instead of internal configuration.
General configuration
Channel locations (channels)
Listing channel locations in the .condarc file overrides conda defaults, causing conda to search only the channels listed here, in the order given.
Use defaults to automatically include all default channels. Non-URL channels are interpreted as Anaconda.org user names. You can change this by modifying the channel_alias as described in Set a channel alias (channel_alias).
The default is just defaults.
EXAMPLE:
channels:
- <anaconda_dot_org_username>
- http://some.custom/channel
- file:///some/local/directory
- defaultsTo select channels for a single environment, put a .condarc file in the root directory of that environment (or use the --env option when using conda config).
EXAMPLE: If you have installed Miniconda with Python 3 in your home directory and the environment is named "flowers", the path may be:
~/miniconda3/envs/flowers/.condarc
Allow other channels (allow_other_channels)
The system-level .condarc file may specify a set of allowed channels, and it may allow users to install packages from other channels with the boolean flag allow_other_channels. The default is True.
If allow_other_channels is set to False, only those channels explicitly specified in the system .condarc file are allowed:
allow_other_channels: False
When allow_other_channels is set to True or not specified, each user has access to the default channels and to any channels that the user specifies in their local .condarc file. When allow_other_channels is set to false, if the user specifies other channels, the other channels are blocked, and the user receives a message reporting that channels are blocked. For more information, see Example administrator-controlled installation.
If the system .condarc file specifies a channel_alias, it overrides any channel aliases set in a user's .condarc file. See Set a channel alias (channel_alias).
Default channels (default_channels)
Normally the defaults channel points to several channels at the repo.continuum.io repository, but if default_channels is defined, it sets the new list of default channels. This is especially useful for air gap and enterprise installations:
default_channels:
- <anaconda_dot_org_username>
- http://some.custom/channel
- file:///some/local/directoryUpdate conda automatically (auto_update_conda)
When True, conda updates itself any time a user updates or installs a package in the root environment. When False, conda updates itself only if the user manually issues a conda update command. The default is True.
EXAMPLE:
auto_update_conda: False
Always yes (always_yes)
Choose the yes option whenever asked to proceed, such as when installing. Same as using the --yes flag at the command line. The default is False.
EXAMPLE:
always_yes: True
Show channel URLs (show_channel_urls)
Show channel URLs when displaying what is going to be downloaded and in conda list. The default is False.
EXAMPLE:
show_channel_urls: True
Change command prompt (changeps1)
When using activate, change the command prompt from $PS1 to include the activated environment. The default is True. EXAMPLE:
changeps1: False
Add pip as Python dependency (add_pip_as_python_dependency)
Add pip, wheel and setuptools as dependencies of Python. This ensures that pip, wheel and setuptools are always installed any time Python is installed. The default is True.
EXAMPLE:
add_pip_as_python_dependency: False
Use pip (use_pip)
Use pip when listing packages with conda list. This does not affect any conda command or functionality other than the output of the command conda list. The default is True.
EXAMPLE:
use_pip: False
Configure conda for use behind a proxy server (proxy_servers)
By default, proxy settings are pulled from the HTTP_PROXY and HTTPS_PROXY environment variables or the system. Setting them here overrides that default:
proxy_servers:
http: http://user:pass@corp.com:8080 https: https://user:pass@corp.com:8080To give a proxy for a specific scheme and host, use the scheme://hostname form for the key. This matches for any request to the given scheme and exact host name:
proxy_servers:
'http://10.20.1.128': 'http://10.10.1.10:5323'If you do not include the user name and password or if authentication fails, conda prompts for a user name and password.
If your password contains special characters, you need escape them as described in Percent-encoding reserved characters , on Wikipedia.
Be careful not to use http when you mean https or https when you mean http.
SSL verification (ssl_verify)
If you are behind a proxy that does SSL inspection such as a Cisco IronPort Web Security Appliance (WSA), you may need to use ssl_verify to override the SSL verification settings.
By default this variable is True, which means that SSL verification is used and conda verifies certificates for SSL connections. Setting this variable to False disables the connection's normal security and is not recommended:
ssl_verify: False
You can also set ssl_verify to a string path to a certificate, which can be used to verify SSL connections:
ssl_verify: corp.crt
Offline mode only (offline)
Filters out all channel URLs that do not use the file:// protocol. The default is False.
EXAMPLE:
offline: True
Advanced configuration
Disallow soft-linking (allow_softlinks)
When allow_softlinks is True, conda uses hard-links when possible and soft-links-symlinks-when hard-links are not possible, such as when installing on a different file system than the one that the package cache is on.
When allow_softlinks is False, conda still uses hard-links when possible, but when it is not possible, conda copies files. Individual packages can override this option, specifying that certain files should never be soft-linked.
The default is True.
EXAMPLE:
allow_softlinks: False
Set a channel alias (channel_alias)
Whenever you use the -c or --channel flag to give conda a channel name that is not a URL, conda prepends the channel_alias to the name that it was given. The default channel_alias is https://conda.anaconda.org/.
EXAMPLE: The command:
conda install --channel asmeurer <package>
is the same as:
conda install --channel https://conda.anaconda.org/asmeurer <package>
You can set channel_alias to your own repository.
EXAMPLE: To set channel_alias to your repository at https://yourrepo.com:
channel_alias: https://your.repo/
On Windows, you must include a slash ("/") at the end of the URL:
EXAMPLE: https://your.repo/conda/
When channel_alias set to your repository at https://yourrepo.com:
conda install --channel jsmith <package>
is the same as:
conda install --channel https://yourrepo.com/jsmith <package>
Always add packages by default (create_default_packages)
When creating new environments, add the specified packages by default. The default packages are installed in every environment you create. You can override this option at the command prompt with the --no-default-packages flag. The default is to not include any packages.
EXAMPLE:
create_default_packages:
- pip
- ipython
- scipy=0.15.0Track features (track_features)
Enable certain features to be tracked by default. The default is to not track any features. This is similar to adding mkl to the create_default_packages list.
EXAMPLE:
track_features:
- mklDisable updating of dependencies (update_dependencies)
By default, conda install updates the given package to the latest version, and installs any dependencies necessary for that package. However if dependencies that satisfy the package's requirements are already installed, conda will not update those packages to the latest version.
In this case, if you would prefer that conda update all dependencies to the latest version that is compatible with the environment, set update_dependencies to True:
update_dependencies: False
NOTE: Conda still ensures that dependency specifications are satisfied. Thus, some dependencies may still be updated or, conversely, this may prevent packages given at the command line from being updated to their latest versions. You can always specify versions at the command line to force conda to install a given version, such as conda install numpy=1.9.3.
To avoid updating only specific packages in an environment, a better option may be to pin them. For more information, see Preventing packages from updating (pinning).
Disallow installation of specific packages (disallow)
Disallow the installation of certain packages. The default is to allow installation of all packages.
EXAMPLE:
disallow:
- anacondaAdd Anaconda.org token to automatically see private packages (add_anaconda_token)
When the channel alias is Anaconda.org or an Anaconda Server GUI, you can set the system configuration so that users automatically see private packages. Anaconda.org was formerly known as binstar.org. This uses the Anaconda command-line client, which you can install with conda install anaconda-client, to automatically add the token to the channel URLs.
The default is True.
EXAMPLE:
add_anaconda_token: False
NOTE: Even when set to True, this setting is enabled only if the Anaconda command-line client is installed and you are logged in with the anaconda login command.
Specify environment directories (envs_dirs)
Specify directories in which environments are located. If this key is set, the root prefix envs_dir is not used unless explicitly included. This key also determines where the package caches are located.
For each envs here, envs/pkgs is used as the pkgs cache, except for the standard envs directory in the root directory, for which the normal root_dir/pkgs is used.
EXAMPLE:
envs_dirs:
- ~/my-envs
- /opt/anaconda/envsThe CONDA_ENVS_PATH environment variable overwrites this setting:
• For macOS and Linux: CONDA_ENVS_PATH=~/my-envs:/opt/anaconda/envs
• For Windows: set CONDA_ENVS_PATH=C:\Users\joe\envs;C:\Anaconda\envs
Specify package directories (pkgs_dirs)
Specify directories in which packages are located. If this key is set, the root prefix pkgs_dirs is not used unless explicitly included.
EXAMPLE:
pkgs_dirs:
- /opt/anaconda/pkgsThe CONDA_PKGS_DIRS environment variable overwrites this setting:
• For macOS and Linux: CONDA_PKGS_DIRS=/opt/anaconda/pkgs
• For Windows: set CONDA_PKGS_DIRS=C:\Anaconda\pkgs
Conda build configuration
Specify conda build output root directory (root-dir)
Build output root directory. You can also set this with the CONDA_BLD_PATH environment variable. The default is
<CONDA_PREFIX>/conda-bld/. If you do not have write permissions to <CONDA_PREFIX>/conda-bld/ , the default is ~/conda-bld/ .
EXAMPLE:
conda-build:
root-dir: ~/conda-buildsSpecify conda build build folder (conda-build 3.16.3+) (output_folder)
Folder to dump output package to. Packages are moved here if build or test succeeds. If unset, the output folder corresponds to the same directory as the root build directory (root-dir).
conda-build:
output_folder: conda-bldAutomatically upload conda build packages to Anaconda.org (anaconda_upload)
Automatically upload packages built with conda build to Anaconda.org. The default is False.
EXAMPLE:
anaconda_upload: True
Token to be used for Anaconda.org uploads (conda-build 3.0+) (anaconda_token)
Tokens are a means of authenticating with anaconda.org without logging in. You can pass your token to condabuild with this condarc setting, or with a CLI argument. This is unset by default. Setting it implicitly enables anaconda_upload.
conda-build:
anaconda_token: gobbledygookLimit build output verbosity (conda-build 3.0+) (quiet)
Conda-build's output verbosity can be reduced with the quiet setting. For more verbosity use the CLI flag --debug.
conda-build:
quiet: trueDisable filename hashing (conda-build 3.0+) (filename_hashing)
Conda-build 3 adds hashes to filenames to allow greater customization of dependency versions. disruptive, you can disable the hashing with the following config entry:If you find thisconda-build:
filename_hashing: falseNOTE: conda-build does no checking when clobbering packages. If you utilize conda-build 3's build matrices with a build configuration that is not reflected in the build string, packages will be missing due to clobbering.
Disable recipe and package verification (conda-build 3.0+) (no_verify)
By default, conda-build uses conda-verify to ensure that your recipe and package meet some minimum sanity checks. You can disable these:
conda-build:
no_verify: trueDisable per-build folder creation (conda-build 3.0+) (set_build_id)
By default, conda-build creates a new folder for each build, named for the package name plus a timestamp. This allows you to do multiple builds at once. If you have issues with long paths, you may need to disable this behavior. You should first try to change the build output root directory with the root-dir setting described above, but fall back to this as necessary:
conda-build:
set_build_id: falseSkip building packages that already exist (conda-build 3.0+) (skip_existing)
By default, conda-build builds all recipes that you specify. You can instead skip recipes that are already built. A recipe is skipped if and only if all of its outputs are available on your currently configured channels.
conda-build:
skip_existing: trueOmit recipe from package (conda-build 3.0+) (include_recipe)
By default, conda-build includes the recipe that was used to build the package. If this contains sensitive or proprietary information, you can omit the recipe.
conda-build:
include_recipe: falseNOTE: If you do not include the recipe, you cannot use conda-build to test the package after the build completes. This means that you cannot split your build and test steps across two distinct CLI commands (conda build --notest recipe and conda build -t recipe). If you need to omit the recipe and split your steps, your only option is to remove the recipe files from the tarball artifacts after your test step. Conda-build does not provide tools for doing that.
Disable activation of environments during build/test (conda-build 3.0+) (activate)
By default, conda-build activates the build and test environments prior to executing the build or test scripts. This adds necessary PATH entries, and also runs any activate.d scripts you may have. If you disable activation, the PATH will still be modified, but the activate.d scripts will not run. This is not recommended, but some people prefer this.
conda-build:
activate: falseDisable long prefix during test (conda-build 3.16.3+) (long_test_prefix)
By default, conda-build uses a long prefix for the test prefix. If you have recipes that fail in long prefixes but would still like to test them in short prefixes, you can disable the long test prefix. This is not recommended.
conda-build:
long_test_prefix: falseThe default is true.
PyPI upload settings (conda-build 3.0+) (pypirc)
Unset by default. If you have wheel outputs in your recipe, conda-build will try to upload them to the PyPI repository specified by the pypi_repository setting using credentials from this file path.
conda-build:
pypirc: ~/.pypircPyPI repository to upload to (conda-build 3.0+) (pypi_repository)
Unset by default. If you have wheel outputs in your recipe, conda-build will try to upload them to this PyPI repository using credentials from the file specified by the pypirc setting.
conda-build:
pypi_repository: pypiExpansion of environment variables
Conda expands environment variables in a subset of configuration settings. These are:
• envs_dirs
• pkgs_dirs
• ssl_verify
• client_cert
• client_cert_key
• proxy_servers
• channels
• custom_channels
• custom_multichannels
• default_channels
• migrated_custom_channels
• whitelist_channels
This allows you to e.g. store the credentials of a private repository in an environment variable, like so:
channels:
- https://${USERNAME}:${PASSWORD}@my.private.conda.channelObtaining information from the .condarc file
NOTE: It may be necessary to add the "force" option -f to the following commands.
To get all keys and their values:
conda config --get
To get the value of a specific key, such as channels:
conda config --get channels
To add a new value, such as http://conda.anaconda.org/mutirri, to a specific key, such as channels:
conda config --add channels http://conda.anaconda.org/mutirri
To remove an existing value, such as http://conda.anaconda.org/mutirri from a specific key, such as channels:
conda config --remove channels http://conda.anaconda.org/mutirri
To remove a key, such as channels, and all of its values:
conda config --remove-key channels
To configure channels and their priority for a single environment, make a .condarc file in the root directory of that environment.
1.5.2 Sample .condarc file
# This is a sample .condarc file.
# It adds the r Anaconda.org channel and enables # the show_channel_urls option.
# channel locations. These override conda defaults, i.e., conda will # search *only* the channels listed here, in the order given.
# Use "defaults" to automatically include all default channels.
# Non-url channels will be interpreted as Anaconda.org usernames # (this can be changed by modifying the channel_alias key; see below).
# The default is just 'defaults'.
channels:
- r
- defaults
# Show channel URLs when displaying what is going to be downloaded # and in 'conda list'. The default is False. show_channel_urls: True
# For more information about this file see:
# https://conda.io/docs/user-guide/configuration/use-condarc.html1.5.3 Administering a multi-user conda installation
By default, conda and all packages it installs, including Anaconda, are installed locally with a user-specific configuration. Administrative privileges are not required, and no upstream files or other users are affected by the installation.
You can make conda and any number of packages available to a group of 1 or more users, while preventing these users from installing unwanted packages with conda:
1. Install conda and the allowed packages, if any, in a location that is under administrator control and accessible to users.
2. Create a .condarc system configuration file in the root directory of the installation. This system-level configuration file will override any user-level configuration files installed by the user.
Each user accesses the central conda installation, which reads settings from the user .condarc configuration file located in their home directory. The path to the user file is the same as the root environment prefix displayed by conda info, as shown in User configuration file below. The user .condarc file is limited by the system .condarc file.
System configuration settings are commonly used in a system .condarc file but may also be used in a user . condarc file. All user configuration settings may also be used in a system .condarc file.
For information about settings in the .condarc file, see Using the .condarc conda configuration file.
Example administrator-controlled installation
The following example describes how to view the system configuration file, review the settings, compare it to a user's configuration file and determine what happens when the user attempts to access a file from a blocked channel. It then describes how the user must modify their configuration file to access the channels allowed by the administrator.
System configuration file
1. The system configuration file must be in the top-level conda installation directory. Check the path where conda is located:
$ which conda
/tmp/miniconda/bin/conda
2. View the contents of the .condarc file in the administrator's directory:
cat /tmp/miniconda/.condarc
The following administrative .condarc file sets allow_other_channels to False, and it specifies that users may download packages only from the admin channel:
$ cat /tmp/miniconda/.condarc allow_other_channels : false channel_alias: https://conda.anaconda.org/ channels:
- admin
NOTE: The admin channel can also be expressed as https://conda.anaconda.org/admin/
Because allow_other_channels is False and the channel defaults are not explicitly specified, users are disallowed from downloading packages from the default channels. You can check this in the next procedure.
User configuration file
1. Check the location of the user's conda installation:
$ conda info
Current conda install:
. . .
channel URLs : http://repo.continuum.io/pkgs/free/osx-64/
http://repo.continuum.io/pkgs/pro/osx-64/
config file : /Users/gergely/.condarcThe conda info command shows that conda is using the user's .condarc file, located at /Users/ gergely/.condarc and that the default channels such as repo.continuum.io are listed as channel URLs.
2. View the contents of the administrative .condarc file in the directory that was located in step 1:
$ cat ~/.condarc channels:
- defaultsThis user's .condarc file specifies only the default channels, but the administrator config file has blocked default channels by specifying that only admin is allowed. If this user attempts to search for a package in the default channels, they get a message telling them what channels are allowed:
$ conda search flask Fetching package metadata: Error: URL 'http://repo.continuum.io/pkgs/pro/osx-64/' not in allowed channels. Allowed channels are:
- https://conda.anaconda.org/admin/osx-64/
This error message tells the user to add the admin channel to their configuration file.
3. The user must edit their local .condarc configuration file to access the package through the admin channel:
channels:
- admin
The user can now search for packages in the allowed admin channel.
1.5.4 Enabling tab completion
Conda versions up to 4.3 supports tab completion in bash shells via the argcomplete package. Tab completion is deprecated starting with version 4.4. See issue #415.
To enable tab completion:
1. Make sure that argcomplete is installed:
conda install argcomplete
2. Add the following code to your bash profile:
eval "$(register-python-argcomplete conda)"
3. Test it:
1. Open a new Terminal window or an Anaconda Prompt.
2. Type: conda ins, and then press the Tab key.
The command completes to:
conda install
To get tab completion in zsh, see conda-zsh-completion.
1.5.5 Using conda on Windows XP with or without a proxy
Although Windows XP mainstream support and Extended Support from Microsoft have ended, and Windows XP is no longer one of the target systems supported by Anaconda, some users have had success using Anaconda on Windows XP with the methods described on this page.
Anaconda 2.3.0 is the last version of Python 3-based Anaconda to support Windows XP. Anaconda 2.4 and later have a version of Python 3 built with Visual Studio 2015, which by default does not support Windows XP.
You can install Anaconda 2.3.0 and then update it with conda update conda and conda update --all. Download Anaconda3-2.3.0-Windows-x86.exe at https://repo.continuum.io/archive/. Install it in any location, such as C:\Anaconda.
Using a proxy with Windows XP
To configure conda for use behind a corporate proxy that uses proxy auto-config (PAC) files and SSL certificates for secure connections:
1. Find a proxy server address from the PAC file:
1. Open Internet Explorer.
2. From the Tools menu, select Internet Options, and then click the Connections tab.
3. On the Connections tab, click the LAN Settings button.
4. In the LAN Settings dialog box, copy the address under the Use automatic configuration script checkbox.
5. Click the Cancel button to close the LAN settings.
6. Click the Cancel button to close the Internet Options.
7. Paste the address into the Internet Explorer address bar, then press the Enter key.
8. In the PAC file that opens, search for return until you find what looks like a proxy IP or DNS address with the port number, which may take some time in a long file.
9. Copy the address and port number.
2. Follow the .condarc instructions to create a file named .condarc in your home directory or the installation directory, such as C:\Anaconda\.condarc.
3. Follow the .condarc proxy server instructions to add proxy information to the .condarc file.
If you decide to include any passwords, be aware of transformations that can affect special characters.
EXAMPLE: This example shows proxy information with passwords:
proxy_servers:
http: http://user:pass@corp.com:8080 https: https://user:pass@corp.com:8080
ssl_verify: FalseIf you include proxy information without passwords, you will be asked to answer authentication prompts at the command line.
EXAMPLE: This example shows proxy information without passwords:
proxy_servers:
http: http://corp.com:8080 https: https://corp.com:8080
ssl_verify: FalseOnce the proxy is configured, you can run conda update conda and then create and manage environments with the Anaconda Launcher GUI.
Some packages such as flask-login may not be available through conda, so you may need to use pip to install them:
1. To use pip securely over https:
pip install --trusted-host pypi.python.org package-name
2. If the secure https proxy fails, you can force pip to use an insecure http proxy instead:
pip install --index-url=http://pypi.python.org/simple/ --trusted-host pypi.python. ,→org package-name
1.5.6 Disabling SSL verification
Using conda with SSL is strongly recommended, but it is possible to disable SSL and it may be necessary to disable SSL in certain cases.
Some corporate environments use proxy services that use Man-In-The-Middle (MITM) attacks to sniff encrypted traffic. These services can interfere with SSL connections such as those used by conda and pip to download packages from repositories such as PyPI.
If you encounter this interference, you should set up the proxy service's certificates so that the requests package used by conda can recognize and use the certificates.
For cases where this is not possible, conda-build versions 3.0.31 and higher have an option that disables SSL certificate verification and allows this traffic to continue. conda skeleton pypi can disable SSL verification when pulling packages from a PyPI server over HTTPS.
WARNING: This option causes your computer to download and execute arbitrary code over a connection that it cannot verify as secure. This option is not recommended. Use this option only if necessary. Use this option at your own risk.
To disable SSL verification when using conda skeleton pypi, set the SSL_NO_VERIFY environment variable to either 1 or True (case insensitive).
On *nix systems:
SSL_NO_VERIFY=1 conda skeleton pypi a_package
And on Windows systems:
set SSL_NO_VERIFY=1 conda skeleton pypi a_package set SSL_NO_VERIFY=

We recommend that you unset this environment variable immediately after use. If it is not unset, some other tools may recognize it and incorrectly use unverified SSL connections.
Using this option will cause requests to emit warnings to STDERR about insecure settings. If you know that what you're doing is safe, or have been advised by your IT department that what you're doing is safe, you may ignore these warnings.
1.6 Tasks
1.6.1 Managing conda
• Verifying that conda is installed
• Determining your conda version
• Updating conda to the current version
Verifying that conda is installed
To verify that conda is installed, in your Terminal window or an Anaconda Prompt, run:
conda --version
Conda responds with the version number that you have installed, such as conda 3.11.0.
If you get an error message, make sure of the following:
• You are logged into the same user account that you used to install Anaconda or Miniconda.
• You are in a directory that Anaconda or Miniconda can find.
• You have closed and re-opened the Terminal window after installing conda.
Determining your conda version
In addition to the conda --version command explained above, you can determine what conda version is installed by running one of the following commands in your Terminal window or an Anaconda Prompt:
conda info
OR
conda -V
Updating conda to the current version
To update conda, in your Terminal window or an Anaconda Prompt, run:
conda update conda
Conda compares versions and reports what is available to install. It also tells you about other packages that will be automatically updated or changed with the update. If conda reports that a newer version is available, type y to update:
Proceed ([y]/n)? y
1.6.2 Managing environments
• Creating an environment with commands
• Creating an environment from an environment.yml file
• Cloning an environment
• Building identical conda environments
• Activating an environment
• Deactivating an environment
• Determining your current environment
• Viewing a list of your environments
• Viewing a list of the packages in an environment
• Using pip in an environment
• Saving environment variables
• Sharing an environment
• Removing an environment
With conda, you can create, export, list, remove and update environments that have different versions of Python and/or packages installed in them. Switching or moving between environments is called activating the environment. You can also share an environment file.
NOTE: There are many options available for the commands described on this page. For details, see Command reference.
Creating an environment with commands
TIP: By default, environments are installed into the envs directory in your conda directory. Run conda create --help for information on specifying a different path.
Use the Terminal or an Anaconda Prompt for the following steps.
1. To create an environment:
conda create --name myenv
NOTE: Replace myenv with the environment name.
2. When conda asks you to proceed, type y:
proceed ([y]/n)?
This creates the myenv environment in /envs/. This environment uses the same version of Python that you are currently using, because you did not specify a version.
To create an environment with a specific version of Python:
conda create -n myenv python=3.4
To create an environment with a specific package:
conda create -n myenv scipy
OR:
conda create -n myenv python conda install -n myenv scipy
To create an environment with a specific version of a package:
conda create -n myenv scipy=0.15.0
OR:
conda create -n myenv python conda install -n myenv scipy=0.15.0
To create an environment with a specific version of Python and multiple packages:
conda create -n myenv python=3.4 scipy=0.15.0 astroid babel
TIP: Install all the programs that you want in this environment at the same time. Installing 1 program at a time can lead to dependency conflicts.
To automatically install pip or another program every time a new environment is created, add the default programs to the create_default_packages section of your .condarc configuration file. The default packages are installed every time you create a new environment. If you do not want the default packages installed in a particular environment, use the --no-default-packages flag:
conda create --no-default-packages -n myenv python
TIP: You can add much more to the conda create command. For details, run conda create --help.
Creating an environment from an environment.yml file
Use the Terminal or an Anaconda Prompt for the following steps.
1. Create the environment from the environment.yml file:
conda env create -f environment.yml
The first line of the yml file sets the new environment's name. For details see Creating an environment file manually.
1. Activate the new environment:
   • Windows: activate myenv
   • macOS and Linux: source activate myenv NOTE: Replace myenv with the name of the environment.
2. Verify that the new environment was installed correctly:
conda list
Cloning an environment
Use the Terminal or an Anaconda Prompt for the following steps. You can make an exact copy of an environment by creating a clone of it:
conda create --name myclone --clone myenv
NOTE: Replace myclone with the name of the new environment. Replace myenv with the name of the existing environment that you want to copy.
To verify that the copy was made:
conda info --envs
In the environments list that displays, you should see both the source environment and the new copy.
Building identical conda environments
You can use explicit specification files to build an identical conda environment on the same operating system platform, either on the same machine or on a different machine.
Use the Terminal or an Anaconda Prompt for the following steps.
1. Run conda list --explicit to produce a spec list such as:
# This file may be used to create an environment using:
# $ conda create --name <env> --file <this file>
# platform: osx-64 @EXPLICIT
https://repo.continuum.io/pkgs/free/osx-64/mkl-11.3.3-0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/numpy-1.11.1-py35_0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/openssl-1.0.2h-1.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/pip-8.1.2-py35_0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/python-3.5.2-0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/readline-6.2-2.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/setuptools-25.1.6-py35_0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/sqlite-3.13.0-0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/tk-8.5.18-0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/wheel-0.29.0-py35_0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/xz-5.2.2-0.tar.bz2 https://repo.continuum.io/pkgs/free/osx-64/zlib-1.2.8-3.tar.bz2
2. To create this spec list as a file in the current working directory, run:
conda list --explicit > spec-file.txt
NOTE: You can use spec-file.txt as the filename or replace it with a filename of your choice.
An explicit spec file is not usually cross platform, and therefore has a comment at the top such as # platform: osx-64 showing the platform where it was created. This platform is the one where this spec file is known to work. On other platforms, the packages specified might not be available or dependencies might be missing for some of the key packages already in the spec.
To use the spec file to create an identical environment on the same machine or another machine:
conda create --name myenv --file spec-file.txt
To use the spec file to install its listed packages into an existing environment:
conda install --name myenv --file spec-file.txt
Conda does not check architecture or dependencies when installing from a spec file. To ensure that the packages work correctly, make sure that the file was created from a working environment, and use it on the same architecture, operating system and platform, such as linux-64 or osx-64.
Activating an environment
To activate an environment:
   • On Windows, in your Anaconda Prompt, run activate myenv
   • On macOS and Linux, in your Terminal Window, run source activate myenv Conda prepends the path name myenv onto your system command.
Deactivating an environment
To deactivate an environment:
• On Windows, in your Anaconda Prompt, run deactivate
• On macOS and Linux, in your Terminal Window, run source deactivate
Conda removes the path name myenv from your system command.
TIP: In Windows, it is good practice to deactivate one environment before activating another.
Determining your current environment
Use the Terminal or an Anaconda Prompt for the following steps.
By default, the active environment-the one you are currently using-is shown in parentheses () or brackets [] at the beginning of your command prompt:
(myenv) $
If you do not see this, run:
conda info --envs
In the environments list that displays, your current environment is highlighted with an asterisk (*). By default, the command prompt is set to show the name of the active environment. To disable this option:
conda config --set changeps1 false
To re-enable this option:
conda config --set changeps1 true
Viewing a list of your environments
To see a list of all of your environments, in your Terminal window or an Anaconda Prompt, run:
conda info --envs
OR
conda env list
A list similar to the following is displayed:
conda environments:
myenv/home/username/miniconda/envs/myenvsnowflakes/home/username/miniconda/envs/snowflakesbunnies/home/username/miniconda/envs/bunniesViewing a list of the packages in an environment
To see a list of all packages installed in a specific environment:
• If the environment is not activated, in your Terminal window or an Anaconda Prompt, run:
conda list -n myenv
• If the environment is activated, in your Terminal window or an Anaconda Prompt, run:
conda list
To see if a specific package is installed in an environment, in your Terminal window or an Anaconda Prompt, run:
conda list -n myenv scipy
Using pip in an environment
To use pip in your environment, in your Terminal window or an Anaconda Prompt, run:
conda install -n myenv pip source activate myenv pip <pip_subcommand>
Saving environment variables
Conda environments can include saved environment variables.
Suppose you want an environment "analytics" to store both a secret key needed to log in to a server and a path to a configuration file. The sections below explain how to write a script named env_vars to do this on Windows and macOS or Linux.
This type of script file can be part of a conda package, in which case these environment variables become active when an environment containing that package is activated.
You can name these scripts anything you like. However, multiple packages may create script files, so be sure to use descriptive names that are not used by other packages. One popular option is to give the script a name in the form packagename-scriptname.sh, or on Windows, packagename-scriptname.bat.
Windows
1. Locate the directory for the conda environment in your Anaconda Prompt by running in the command shell %CONDA_PREFIX%.
2. Enter that directory and create these subdirectories and files:
cd %CONDA_PREFIX% mkdir .\etc\conda\activate.d mkdir .\etc\conda\deactivate.d type NUL > .\etc\conda\activate.d\env_vars.bat type NUL > .\etc\conda\deactivate.d\env_vars.bat
3. Edit .\etc\conda\activate.d\env_vars.bat as follows:
set MY_KEY='secret-key-value' set MY_FILE=C:\path\to\my\file
4. Edit .\etc\conda\deactivate.d\env_vars.bat as follows:
set MY_KEY= set MY_FILE=
When you run activate analytics, the environment variables MY_KEY and MY_FILE are set to the values you wrote into the file. When you run deactivate, those variables are erased.
macOS and Linux
1. Locate the directory for the conda environment in your Terminal window by running in the terminal echo $CONDA_PREFIX.
2. Enter that directory and create these subdirectories and files:
cd $CONDA_PREFIX mkdir -p ./etc/conda/activate.d mkdir -p ./etc/conda/deactivate.d touch ./etc/conda/activate.d/env_vars.sh touch ./etc/conda/deactivate.d/env_vars.sh
3. Edit ./etc/conda/activate.d/env_vars.sh as follows:
#!/bin/sh
export MY_KEY='secret-key-value' export MY_FILE=/path/to/my/file/
4. Edit ./etc/conda/deactivate.d/env_vars.sh as follows:
#!/bin/sh
unset MY_KEY unset MY_FILE
When you run source activate analytics, the environment variables MY_KEY and MY_FILE are set to the values you wrote into the file. When you run source deactivate, those variables are erased.
Sharing an environment
You may want to share your environment with someone else-for example, so they can re-create a test that you have done. To allow them to quickly reproduce your environment, with all of its packages and versions, give them a copy of your environment.yml file.
Exporting the environment file
NOTE: If you already have an environment.yml file in your current directory, it will be overwritten during this task.
1. Activate the environment to export:
• On Windows, in your Anaconda Prompt, run activate myenv
• On macOS and Linux, in your Terminal window, run source activate myenv
NOTE: Replace myenv with the name of the environment.
2. Export your active environment to a new file:
conda env export > environment.yml
NOTE: This file handles both the environment's pip packages and conda packages.
3. Email or copy the exported environment.yml file to the other person.
Creating an environment file manually
You can create an environment file manually to share with others.
EXAMPLE: A simple environment file:
name: stats dependencies:
- numpy
- pandasEXAMPLE: A more complex environment file:
name: stats2 channels:
 - javascript dependencies:
 - python=3.4 # or 2.7
 - bokeh=0.9.2
 - numpy=1.9.*
 - nodejs=0.10.*
 - flask - pip:
 - Flask-TestingYou can exclude the default channels by adding nodefaults to the channels list.
channels:
- javascript
- nodefaultsThis is equivalent to passing the --override-channels option to most conda commands.
Adding nodefaults to the channels list in environment.yml is similar to removing defaults from the channels list in the .condarc file. However, changing environment.yml affects only one of your conda environments while changing .condarc affects them all.
For details on creating an environment from this environment.yml file, see Creating an environment from an environment.yml file.
Removing an environment
To remove an environment, in your Terminal window or an Anaconda Prompt, run:
conda remove --name myenv --all
(You may instead use conda env remove --name myenv.)
To verify that the environment was removed, in your Terminal window or an Anaconda Prompt, run:
conda info --envs
The environments list that displays should not show the removed environment.
1.6.3 Managing channels
Different channels can have the same package, so conda must handle these channel collisions.
There will be no channel collisions if you use only the defaults channel. There will also be no channel collisions if all of the channels you use only contain packages that do not exist in any of the other channels in your list. The way conda resolves these collisions matters only when you have multiple channels in your channel list that host the same package.
Before conda 4.1.0
Before conda 4.1.0 was released on June 14, 2016, when two channels hosted packages with the same name, conda installed the package with the highest version number. If there were two packages with the same version number, conda installed the one with the highest build number. Only if both the version numbers and build numbers were identical did the channel ordering make a difference. This approach had 3 problems:
• Build numbers from different channels are not comparable. Channel A could do nightly builds while Channel B does weekly builds, so build 2 from Channel B could be newer than build 4 from Channel A.
• Users could not specify a preferred channel. You might consider Channel B more reliable than Channel A and prefer to get packages from that channel even if the B version is older than the package in Channel A. Conda provided no way to choose that behavior. Only version and build numbers mattered.
• Build numbers conflicted. This is an effect of the other 2 problems. Assume you were happily using package Alpha from Channel A and package Bravo from Channel B. The provider from Channel B then added a version of Alpha with a very high build number. Your conda updates would start installing new versions of Alpha from Channel B whether you wanted that or not. This could cause unintentional problems and a risk of deliberate attacks.
After conda 4.1.0
By default, conda now prefers packages from a higher priority channel over any version from a lower priority channel. Therefore, you can now safely put channels at the bottom of your channel list to provide additional packages that are not in the default channels, and still be confident that these channels will not override the core package set.
Conda collects all of the packages with the same name across all listed channels and processes them as follows:
1. Sorts packages from highest to lowest channel priority.
2. Sorts tied packages-same channel priority-from highest to lowest version number.
3. Sorts still-tied packages-same channel priority and same version-from highest to lowest build number.
4. Installs the first package on the sorted list that satisfies the installation specifications.
To make conda use the old method and install the newest version of a package in any listed channel:
• Add channel_priority: false to your .condarc file.
OR
• Run the equivalent command:
conda config --set channel_priority false
Conda then sorts as follows:
1. Sorts the package list from highest to lowest version number.
2. Sorts tied packages from highest to lowest channel priority.
3. Sorts tied packages from highest to lowest build number.
Because build numbers from different channels are not comparable, build number still comes after channel priority.
The following command adds the channel "new_channel" to the top of the channel list, making it the highest priority:
conda config --add channels new_channel
Conda now has an equivalent command:
conda config --prepend channels new_channel
Conda also now has a command that adds the new channel to the bottom of the channel list, making it the lowest priority:
conda config --append channels new_channel
1.6.4 Creating custom channels
Channels are the path that conda takes to look for packages. The easiest way to use and manage custom channels is to use a private or public repository on Anaconda.org, formerly known as Binstar.org. If you designate your Anaconda.org repository as private, then only you and those you grant access can access your private repository.
If you do not wish to upload your packages to the Internet, you can build a custom repository served either through a web server or locally using a file:// URL.
To create a custom channel:
1. If you have not yet used conda build, install conda build:
conda install conda-build
2. Organize all the packages in subdirectories for the platforms you wish to serve:
 channel/ linux-64/ package-1.0-0.tar.bz2 linux-32/ package-1.0-0.tar.bz2
osx-64/ package-1.0-0.tar.bz2
win-64/ package-1.0-0.tar.bz2
win-32/ package-1.0-0.tar.bz2
3. Run conda index on each of the platform subdirectories:
conda index channel/linux-64 channel/osx-64
The conda index command generates a file repodata.json, saved to each repository directory, which conda uses to get the metadata for the packages in the channel.
NOTE: Each time you add or modify a package in the channel, you must rerun conda index for conda to see the update.
4. To test custom channels, serve the custom channel using a web server or using a file:// url to the channel directory. Test by sending a search command to the custom channel.
EXAMPLE: If you want a file in the custom channel location /opt/channel/linux-64/, search for files in that location:
conda search -c file://opt/channel/ --override-channels
NOTE: The channel URL does not include the platform, as conda automatically detects and adds the platform.
NOTE: The option --override-channels ensures that conda searches only your specified channel and no other channels, such as default channels or any other channels you may have listed in your .condarc file.
If you have set up your private repository correctly, you get the following output:
Fetching package metadata: . . . .
This is followed by a list of the conda packages found. This verifies that you have set up and indexed your private repository successfully.
1.6.5 Managing packages
• Searching for packages
• Installing packages
• Installing packages from Anaconda.org
• Installing non-conda packages
• Installing commercial packages
• Viewing a list of installed packages
• Updating packages
• Preventing packages from updating (pinning)
• Removing packages
NOTE: There are many options available for the commands described on this page. For details, see Command reference.
Searching for packages
Use the Terminal or an Anaconda Prompt for the following steps.
To see if a specific package such as SciPy is available for installation:
conda search scipy
To see if a specific package such as SciPy is available for installation from Anaconda.org:
conda search --override-channels --channel defaults scipy
To see if a specific package, such as iminuit, exists in a specific channel, such as http://conda.anaconda.org/mutirri, and is available for installation:
conda search --override-channels --channel http://conda.anaconda.org/mutirri iminuit
Installing packages
Use the Terminal or an Anaconda Prompt for the following steps.
To install a specific package such as SciPy into an existing environment "myenv":
conda install --name myenv scipy
If you do not specify the environment name, which in this example is done by --name myenv, the package installs into the current environment:
conda install scipy
To install a specific version of a package such as SciPy:
conda install scipy=0.15.0
To install multiple packages at once, such as SciPy and cURL:
conda install scipy curl
NOTE: It is best to install all packages at once, so that all of the dependencies are installed at the same time.
To install multiple packages at once and specify the version of the package:
conda install scipy=0.15.0 curl=7.26.0
To install a package for a specific Python version:
conda install scipy=0.15.0 curl=7.26.0 -n py34_env
If you want to use a specific Python version, it is best to use an environment with that version. For more information, see Troubleshooting.
Installing packages from Anaconda.org
Packages that are not available using conda install can be obtained from Anaconda.org. Formerly Binstar.org, Anaconda.org, is a package management service for both public and private package repositories. Anaconda.org is an Anaconda product, just like Anaconda and Miniconda.
To install a package from Anaconda.org:
1. In a browser, go to http://anaconda.org.
2. To find the package named bottleneck, type bottleneck in the top-left box named Search Packages.
3. Find the package that you want and click it to go to the detail page.
The detail page displays the name of the channel. In this example it is the "pandas" channel.
4. Now that you know the channel name, use the conda install command to install the package. In your Terminal window or an Anaconda Prompt, run:
conda install -c pandas bottleneck
This command tells conda to install the bottleneck package from the pandas channel on Anaconda.org.
5. To check that the package is installed, in your Terminal window or an Anaconda Prompt, run:
conda list
A list of packages appears, including bottleneck.
NOTE: For information on installing packages from multiple channels, see Managing channels.
Installing non-conda packages
If a package is not available from conda or Anaconda.org, you may be able to find and install the package with another package manager like pip.
Pip packages do not have all the features of conda packages, and we recommend first trying to install any package with conda. If the package is unavailable through conda, try installing it with pip. The differences between pip and conda packages cause certain unavoidable limits in compatibility, but conda works hard to be as compatible with pip as possible.
NOTE: Both pip and conda are included in Anaconda and Miniconda, so you do not need to install them separately.
NOTE: Conda environments replace virtualenv, so there is no need to activate a virtualenv before using pip.
It is possible to have pip installed outside a conda environment or inside a conda environment.
To gain the benefits of conda integration, be sure to install pip inside the currently active conda environment, and then install packages with that instance of pip. The command conda list shows packages installed this way, with a label showing that they were installed with pip.
You can install pip in the current conda environment with the command conda install pip, as discussed in Using pip in an environment.
If there are instances of pip installed both inside and outside the current conda environment, the instance of pip installed inside the current conda environment is used.
To install a non-conda package:
1. Activate the environment where you want to put the program:
• On Windows, in your Anaconda Prompt, run activate myenv.
• On macOS and Linux,in your Terminal window, run source activate myenv.
2. To use pip to install a program such as See, in your Terminal window or an Anaconda Prompt, run:
pip install see
3. To verify the package was installed, in your Terminal window or an Anaconda Prompt, run:
conda list
If the package is not shown, install pip as described in Using pip in an environment and try these commands again.
Installing commercial packages
Installing a commercial package such as IOPro is the same as installing any other package. In your Terminal window or an Anaconda Prompt, run:
conda install --name myenv iopro
This command installs a free trial of one of Anaconda's commercial packages called IOPro, which can speed up your Python processing. Except for academic use, this free trial expires after 30 days.
Viewing a list of installed packages
Use the Terminal or an Anaconda Prompt for the following steps.
To list all of the packages in the active environment:
conda list
To list all of the packages in a deactivated environment:
conda list -n myenv
Updating packages
Use conda update command to check to see if a new update is available. If conda tells you an update is available, you can then choose whether or not to install it.
Use the Terminal or an Anaconda Prompt for the following steps.
To update a specific package:
conda update biopython
To update Python:
conda update python
To update conda itself:
conda update conda
NOTE: Conda updates to the highest version in its series, so Python 2.7 updates to the highest available in the 2.x series and 3.6 updates to the highest available in the 3.x series.
To update the Anaconda metapackage:
conda update conda conda update anaconda
Regardless of what package you are updating, conda compares versions and then reports what is available to install. If no updates are available, conda reports "All requested packages are already installed."
If a newer version of your package is available and you wish to update it, type y to update:
Proceed ([y]/n)? y
Preventing packages from updating (pinning)
Pinning a package specification in an environment prevents packages listed in the pinned file from being updated.
In the environment's conda-meta directory, add a file named pinned that includes a list of the packages that you do not want updated.
EXAMPLE: The file below forces NumPy to stay on the 1.7 series, which is any version that starts with 1.7, and forces SciPy to stay at exactly version 0.14.2:
numpy 1.7.* scipy ==0.14.2
With this pinned file, conda update numpy keeps NumPy at 1.7.1, and conda install scipy=0.15.0 causes an error.
Use the --no-pin flag to override the update restriction on a package. In the Terminal or an Anaconda Prompt, run:
conda update numpy --no-pin
Because the pinned specs are included with each conda install, subsequent conda update commands without --no-pin will revert NumPy back to the 1.7 series.
Removing packages
Use the Terminal or an Anaconda Prompt for the following steps. To remove a package such as SciPy in an environment such as myenv:
conda remove -n myenv scipy
To remove a package such as SciPy in the current environment:
conda remove scipy
To remove multiple packages at once, such as SciPy and cURL:
conda remove scipy curl
To confirm that a package has been removed:
conda list
1.6.6 Managing Python
• Viewing a list of available Python versions
• Installing a different version of Python
• Using a different version of Python
• Updating or upgrading Python
Conda treats Python the same as any other package, so it is easy to manage and update multiple installations.
Anaconda supports Python 2.7, 3.4, 3.5 and 3.6. The default is Python 2.7 or 3.6, depending on which installer you used:
• For the installers "Anaconda" and "Miniconda," the default is 2.7.
• For the installers "Anaconda3" or "Miniconda3," the default is 3.6.
Viewing a list of available Python versions
To list the versions of Python that are available to install, in your Terminal window or an Anaconda Prompt, run:
conda search python
This lists all packages whose names contain the text python.
To list only the packages whose full name is exactly python, add the --full-name option. In your Terminal window or an Anaconda Prompt, run:
conda search --full-name python
Installing a different version of Python
To install a different version of Python without overwriting the current version, create a new environment and install the second Python version into it:
1. Create the new environment:
• To create the new environment for Python 3.6, in your Terminal window or an Anaconda Prompt, run:
conda create -n py36 python=3.6 anaconda
NOTE: Replace py36 with the name of the environment you want to create. anaconda is the metapackage that includes all of the Python packages comprising the Anaconda distribution. python=3.6 is the package and version you want to install in this new environment. This could be any package, such as numpy=1.7, or multiple packages.
• To create the new environment for Python 2.7, in your Terminal window or an Anaconda Prompt, run:
conda create -n py27 python=2.7 anaconda
2. Activate the new environment.
3. Verify that the new environment is your current environment.
4. To verify that the current environment uses the new Python version, in your Terminal window or an Anaconda Prompt, run:
python --version
Using a different version of Python
To switch to an environment that has different version of Python, activate the environment.
Updating or upgrading Python
Use the Terminal or an Anaconda Prompt for the following steps.
If you are in an environment with Python version 3.4.2, the following command updates Python to the latest version in the 3.4 branch:
conda update python
The following command upgrades Python to another branch-3.6-by installing that version of Python:
conda install python=3.6
1.6.7 Using conda with Travis CI
• The .travis.yml file
• Supporting packages that do not have official builds
• Building a conda recipe • AppVeyor
If you are already using Travis CI, using conda is a preferable alternative to using apt-get and pip to install packages. The Debian repos provided by Travis may not include packages for all versions of Python or may not be updated as quickly. Installing such packages with pip may also be undesirable, as this can take a long time, which can consume a large portion of the 50 minutes that Travis allows for each build. Using conda also lets you test the building of conda recipes on Travis.
This page describes how to use conda to test a Python package on Travis CI. However, you can use conda with any language, not just Python.
The .travis.yml file
The following code sample shows how to modify the .travis.yml file to use Miniconda for a project that supports Python 2.7, 3.5 and 3.6:
language: python python:
# We don't actually use the Travis Python, but this keeps it organized.
- "2.7"
- "3.5"
- "3.6" install:
- sudo apt-get update
# We do this conditionally because it saves us some downloading if the # version is the same.
- if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O
,→miniconda.sh; else wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O
,→miniconda.sh; fi
- bash miniconda.sh -b -p $HOME/miniconda
- export PATH="$HOME/miniconda/bin:$PATH"
- hash -r
- conda config --set always_yes yes --set changeps1 no
- conda update -q conda
# Useful for debugging any issues with conda
- conda info -a
# Replace dep1 dep2 ... with your dependencies
- conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION dep1 dep2 ...
- source activate test-environment
- python setup.py install
script:
# Your test script goes hereNOTE: For information about the basic configuration for Travis CI, see Building a Python Project.
Supporting packages that do not have official builds
To support a package that does not have official Anaconda builds:
1. Build the package yourself.
2. Add it to an Anaconda.org channel.
3. Add the following line to the install steps in .travis.yml so that it finds the packages on that channel:
- conda config --add channels your_Anaconda_dot_org_username
NOTE: Replace your_Anaconda_dot_org_username with your user name.
Building a conda recipe
If you support official conda packages for your project, you may want to use conda build in Travis, so the building of your recipe is tested as well.
1. Include the conda recipe in the same directory as your source code.
2. In your .travis.yml file, replace the following line:

- python setup.py install
with these lines:
- conda build your-conda-recipe
- conda install your-package --use-local
AppVeyor
AppVeyor is a continuous build service for Windows built on Azure and is an alternative to using Travis CI with conda.
For	an	example	project	building	conda	packages	on	AppVeyor,	see	https://github.com/rmcgibbo/ python-appveyor-conda-example.
1.6.8 Viewing command-line help
To see a list of supported conda commands, in your Terminal window or an Anaconda Prompt, run:
conda --help
OR
conda -h
To get help for a specific command, type the command name followed by --help.
EXAMPLE: To see help for the create command, in your Terminal window or an Anaconda Prompt, run:
conda create -h
NOTE: You can see the same command help in Command reference.
1.7 Cheat sheet
See the conda cheat sheet PDF (1 MB) for a single-page summary of the most important information about using conda.
1.8 Troubleshooting
• SSL connection errors
• Permission denied errors during installation
• Permission denied errors after using sudo conda command
• Already installed error message
• Conda reports that a package is installed, but it appears not to be
• pkg_resources.DistributionNotFound: conda==3.6.1-6-gb31b0d4-dirty
1.7. Cheat sheet
• macOS error "ValueError unknown locale: UTF-8"
• AttributeError or missing getproxies
• Shell commands open from the wrong location
• Programs fail due to invoking conda Python instead of system Python
• UnsatisfiableSpecifications error
• Package installation fails from a specific channel
• Conda automatically upgrades to unwanted version
• ValidationError: Invalid value for timestamp
• Unicode error after installing Python 2
1.8.1 SSL connection errors
Cause
Installing packages may produce a "connection failed" error if you do not have the certificates for a secure connection to the package repository.
Solution
Pip can use the --trusted-host option to indicate that the URL of the repository is trusted:
pip install --trusted-host pypi.org
Conda has three similar options.
1. The option --insecure or -k ignores certificate validation errors for all hosts.
Running conda create --help shows:
Networking Options:
-k, --insecureAllow conda to perform "insecure" SSL connections and transfers. Equivalent to setting 'ssl_verify' to 'false'.2. The configuration option ssl_verify can be set to False.
Running conda config --describe ssl_verify shows:
# # ssl_verify (bool, str)
# #	aliases: verify_ssl
# #	Conda verifies SSL certificates for HTTPS requests, just like a web
# #	browser. By default, SSL verification is enabled, and conda operations # #	will fail if a required url's certificate cannot be verified. Setting
# #	ssl_verify to False disables certification verification. The value for
# #	ssl_verify can also be (1) a path to a CA bundle file, or (2) a path # #	to a directory containing certificates of trusted CA.
# #
# ssl_verify: true
Running conda config --set ssl_verify false modifies ~/.condarc and sets the -k flag for all future conda operations performed by that user. Running conda config --help shows other configuration scope options.
When using conda config, the user's conda configuration file at ~/.condarc is used by default. The flag --system will instead write to the system configuration file for all users at <CONDA_BASE_ENV>/ .condarc. The flag --env will instead write to the active conda environment's configuration file at
<PATH_TO_ACTIVE_CONDA_ENV>/.condarc. If --env is used and no environment is active, the user configuration file is used.
3. The configuration option ssl_verify can be used to install new certificates.
Running conda config --describe ssl_verify shows:
# # ssl_verify (bool, str)
# #	aliases: verify_ssl
# #	Conda verifies SSL certificates for HTTPS requests, just like a web
# #	browser. By default, SSL verification is enabled, and conda operations # #	will fail if a required url's certificate cannot be verified. Setting
# #	ssl_verify to False disables certification verification. The value for
# #	ssl_verify can also be (1) a path to a CA bundle file, or (2) a path # #	to a directory containing certificates of trusted CA.
# #
# ssl_verify: true
Your network administrator can give you a certificate bundle for your network's firewall. Then ssl_verify can be set to the path of that certificate authority (CA) bundle, and package installation operations will complete without connection errors.
When using conda config, the user's conda configuration file at ~/.condarc is used by default. The flag --system will instead write to the system configuration file for all users at <CONDA_BASE_ENV>/ .condarc. The flag --env will instead write to the active conda environment's configuration file at
<PATH_TO_ACTIVE_CONDA_ENV>/.condarc. If --env is used and no environment is active, the user configuration file is used.
1.8.2 Permission denied errors during installation
Cause
The umask command determines the mask settings that control how file permissions are set for newly created files. If you have a very restrictive umask, such as 077, you get "permission denied" errors.
Solution
Set a less restrictive umask before calling conda commands. Conda was intended as a user space tool, but often users need to use it in a global environment. One place this can go awry is with restrictive file permissions. Conda creates links when you install files that have to be read by others on the system.
To give yourself full permissions for files and directories, but prevent the group and other users from having access:
1. Before installing, set the umask to 007.
2. Install conda.
3. Return the umask to the original setting:
umask 007 conda install umask 077
For more information on umask, see http://en.wikipedia.org/wiki/Umask.
1.8.3 Permission denied errors after using sudo conda command
Solution
Once you run conda with sudo, you must use sudo forever. We recommend that you NEVER run conda with sudo.
1.8.4 Already installed error message
Cause
If you are trying to fix conda problems without removing the current installation and you try to reinstall Miniconda or Anaconda to fix it, you get an error message that Miniconda or Anaconda is already installed, and you cannot continue.
Solution
Install using the -force option.
Download and install the appropriate Miniconda for your operating system from the Miniconda download page using the force option --force or -f:
bash Miniconda3-latest-MacOSX-x86_64.sh -f
NOTE: Substitute the appropriate filename and version for your operating system.
NOTE: Be sure that you install to the same install location as your existing install so it overwrites the core conda files and does not install a duplicate in a new folder.
1.8.5 Conda reports that a package is installed, but it appears not to be
Sometimes conda claims that a package is already installed, but it does not appear to be, for example, a Python package that gives ImportError.
There are several possible causes for this problem, each with its own solution.
Cause
You are not in the same conda environment as your package.
Solution
1. Make sure that you are in the same conda environment as your package. The conda info command tells you what environment is currently active-under default environment.
2. Verify that you are using the Python from the correct environment by running:
import sys print(sys.prefix)
Cause
For Python packages, you have set the PYTHONPATH or PYTHONHOME variable. These environment variables cause Python to load files from locations other than the standard ones. Conda works best when these environment variables are not set, as their typical use cases are obviated by conda environments and a common issue is that they cause Python to pick up the wrong versions or broken versions of a library.
Solution
For Python packages, make sure you have not set the PYTHONPATH or PYTHONHOME variables. The command conda info -a displays the values of these environment variables.
• To unset these environment variables temporarily for the current Terminal session, run unset PYTHONPATH.
• To unset them permanently, check for lines in the files:
- If you use bash-~/.bashrc, ~/.bash_profile, ~/.profile.
- If you use zsh-~/.zshrc'.
- If you use PowerShell on Windows, the file output by $PROFILE .
Cause
You have site-specific directories or, for Python, you have so-called site-specific files. These are typically located in ~/.local on Linux and macOS. For a full description of the locations of site-specific packages, see PEP 370. As with PYTHONPATH, Python may try importing packages from this directory, which can cause issues.
Solution
For Python packages, remove site-specific directories and site-specific files.
Cause
For C libraries, the following environment variables have been set:
• macOS-DYLD_LIBRARY_PATH.
• Linux-LD_LIBRARY_PATH.
These act similarly to PYTHONPATH for Python. If they are set, they can cause libraries to be loaded from locations other than the conda environment. Conda environments obviate most use cases for these variables. The command conda info -a shows what these are set to.
Solution
Unset DYLD_LIBRARY_PATH or LD_LIBRARY_PATH.
Cause
Occasionally, an installed package becomes corrupted. Conda works by unpacking the packages in the pkgs directory and then hard-linking them to the environment. Sometimes these get corrupted, breaking all environments that use them, and also any additional environments, since the same files are hard-linked each time.
Solution
Run the command conda install -f to unarchive the package again and relink it. It also does an md5 verification on the package. Usually if this is different, it is because your channels have changed and there is a different package with the same name, version, and build number.
NOTE: This breaks the links to any other environments that already had this package installed, so you have to reinstall it there, too. It also means that running conda install -f a lot can use up a lot of disk space if you have a lot of environments.
NOTE: The -f flag to conda install (--force) implies --no-deps, so conda install -f package does not reinstall any of the dependencies of package.
1.8.6 pkg_resources.DistributionNotFound: conda==3.6.1-6-gb31b0d4-dirty
Cause
The local version of conda needs updating.
Solution
Force reinstall conda. A useful way to work off the development version of conda is to run python setup.py develop on a checkout of the conda git repository. However, if you are not regularly running git pull, it is a good idea to un-develop, as you will otherwise not get any regular updates to conda. The normal way to do this is to run python setup.py develop -u.
However, this command does not replace the conda script itself. With other packages, this is not an issue, as you can just reinstall them with conda, but conda cannot be used if conda is installed.
The fix is to use the ./bin/conda executable in the conda git repository to force reinstall conda, that is, run ./ bin/conda install -f conda. You can then verify with conda info that you have the latest version of conda, and not a git checkout-the version should not include any hashes.
1.8.7 macOS error "ValueError unknown locale: UTF-8"
Cause
This is a bug in the macOS Terminal app that shows up only in certain locales. Locales are country-language combinations.
Solution
1. Open Terminal in /Applications/Utilities
2. Clear the Set locale environment variables on startup checkbox.

This sets your LANG environment variable to be empty. This may cause Terminal use to incorrect settings for your locale. The locale command in Terminal tells you what settings are used.
To use the correct language, add a line to your bash profile, which is typically ~/.profile:
export LANG=your-lang
NOTE: Replace your-lang with the correct locale specifier for your language.
The command locale -a displays all the specifiers. For example, the language code for US English is en_US. UTF-8. The locale affects what translations are used when they are available and also how dates, currencies and decimals are formatted.
1.8.8 AttributeError or missing getproxies
When running a command such as conda update ipython, you may get an AttributeError: 'module' object has no attribute 'getproxies'.
Cause
This can be caused by an old version of requests or by having the PYTHONPATH environment variable set.
Solution
Update requests and be sure PYTHONPATH is not set:
1. Run conda info -a to show the requests version and various environment variables such as PYTHONPATH.
2. Update the requests version with pip install -U requests.
3. Clear PYTHONPATH:
• On Windows, clear it the environment variable settings.
• On macOS and Linux, clear it by removing it from the bash profile and restarting the shell.
1.8.9 Shell commands open from the wrong location
When you run a command within a conda environment, conda does not access the correct package executable.
Cause
In both bash and zsh, when you enter a command, the shell searches the paths in PATH one by one until it finds the command. The shell then caches the location, which is called hashing in shell terminology. When you run command again, the shell does not have to search the PATH again.
The problem is that before you installed the program, you ran a command which loaded and hashed another version of that program in some other location on the PATH, such as /usr/bin. Then you installed the program using conda install, but the shell still had the old instance hashed.
Solution
Reactivate the environment or run hash -r (in bash) or rehash (in zsh).
When you run source activate, conda automatically runs hash -r in bash and rehash in zsh to clear the hashed commands, so conda finds things in the new path on the PATH. But there is no way to do this when conda install is run because the command must be run inside the shell itself, meaning either you have to run the command yourself or use source a file that contains the command.
This is a relatively rare problem, since this happens only in the following circumstances:
1. You activate an environment or use the root environment, and then run a command from somewhere else.
2. Then you conda install a program, and then try to run the program again without running activate or deactivate.
The command type command_name always tells you exactly what is being run. This is better than which command_name, which ignores hashed commands and searches the PATH directly. The hash is reset by source activate, or by hash -r in bash or rehash in zsh.
1.8.10 Programs fail due to invoking conda Python instead of system Python
Cause
After installing Anaconda or Miniconda, programs that run python switch from invoking the system Python to invoking the Python in the root conda environment. If these programs rely on the system Python to have certain configurations or dependencies that are not in the root conda environment Python, the programs may crash. For example, some users of the Cinnamon desktop environment on Linux Mint have reported these crashes.
Solution
Edit your .bash_profile and .bashrc files so that the conda binary directory, such as ~/miniconda3/bin, is no longer added to the PATH environment variable. You can still run condaactivate and deactivate by using their full path names, such as ~/miniconda3/bin/conda.
You may also create a folder with symbolic links to conda, activate and deactivate, and then edit your . bash_profile or .bashrc file to add this folder to your PATH. If you do this, running python will invoke the system Python, but running conda commands, source activate MyEnv, source activate root, or source deactivate will work normally.
After running source activate to activate any environment, including after running source activate root, running python will invoke the Python in the active conda environment.
1.8.11 UnsatisfiableSpecifications error
Cause
Some conda package installation specifications are impossible to satisfy. For example, conda create -n tmp python=3 wxpython=3 produces an "Unsatisfiable Specifications" error because wxPython 3 depends on Python 2.7, so the specification to install Python 3 conflicts with the specification to install wxPython 3.
When an unsatisfiable request is made to conda, conda shows a message such as this one:
The following specifications were found to be in conflict:
- python 3*
- wxpython 3* -> python 2.7* Use "conda info <package>" to see the dependencies for each package.
This indicates that the specification to install wxpython 3 depends on installing Python 2.7, which conflicts with the specification to install python 3.
Solution
Use "conda info wxpython" or "conda info wxpython=3" to show information about this package and its dependencies:
wxpython 3.0 py27_0 ------------------file name	: wxpython-3.0-py27_0.tar.bz2
name	: wxpython version	: 3.0
build number: 0 build string: py27_0 channel	: defaults
size	: 34.1 MB date	: 2014-01-10 fn	: wxpython-3.0-py27_0.tar.bz2
license_family: Other md5	: adc6285edfd29a28224c410a39d4bdad priority	: 2 schannel	: defaults url	: https://repo.continuum.io/pkgs/free/osx-64/wxpython-3.0-py27_0.tar.bz2 dependencies: python 2.7* python.appBy examining the dependencies of each package, you should be able to determine why the installation request produced a conflict and modify the request so it can be satisfied without conflicts. In this example, you could install wxPython with Python 2.7:
conda create -n tmp python=2.7 wxpython=3
1.8.12 Package installation fails from a specific channel
Cause
Sometimes it is necessary to install a specific version from a specific channel because that version is not available from the default channel.
Solution
The following example describes the problem in detail and its solution.
Suppose you have a specific need to install the Python cx_freeze module with Python 3.4. A first step is to create a Python 3.4 environment:
conda create -n py34 python=3.4
Using this environment you should first attempt:
conda install -n py34 cx_freeze
However, when you do this you get the following error:
Using Anaconda Cloud api site https://api.anaconda.org Fetching package metadata .........
Solving package specifications: .
Error: Package missing in current osx-64 channels:
- cx_freeze
You can search for packages on anaconda.org with
anaconda search -t conda cx_freezeThe message indicates that cx_freeze cannot be found in the default package channels. However, there may be a community-created version available and you can search for it by running the following command:
$ anaconda search -t conda cx_freeze
Using Anaconda Cloud api site https://api.anaconda.org Run 'anaconda show <USER/PACKAGE>' to get more details:
Packages:
	Name	| Version | Package Types	| Platforms
	------------------------- |	------ | --------------- | ---------------
inso/cx_freeze	|	4.3.3 | conda	| linux-64 pyzo/cx_freeze	|	4.3.3 | conda	| linux-64, win-32, win-
,→64, linux-32, osx-64
: http://cx-freeze.sourceforge.net/
	silg2/cx_freeze	|	4.3.4 | conda	| linux-64
: create standalone executables from Python
,→scripts
	takluyver/cx_freeze	|	4.3.3 | conda	| linux-64
Found 4 packagesIn this example, there are 4 different places that you could try to get the package. None of them are officially supported or endorsed by Anaconda, but members of the conda community have provided many valuable packages. If you want to go with public opinion, then the web interface provides more information:
Notice that the pyzo organization has by far the most downloads, so you might choose to use their package. If so, you can add their organization's channel by specifying it on the command line:
$ conda create -c pyzo -n cxfreeze_py34 cx_freeze python=3.4
Using Anaconda Cloud api site https://api.anaconda.org Fetching package metadata: ..........
Solving package specifications: .........
Package plan for installation in environment /Users/ijstokes/anaconda/envs/cxfreeze_ ,→py34:(continues on next page)


(continued from previous page)
The following packages will be downloaded:
	package	|	build
---------------------------|-----------------
cx_freeze-4.3.3 | py34_4 1.8 MB setuptools-20.7.0 | py34_0 459 KB
------------------------------------------------------------
	Total:	2.3 MB
The following NEW packages will be INSTALLED:
cx_freeze: 4.3.3-py34_4 openssl:	1.0.2h-0 pip:	8.1.1-py34_1 python:	3.4.4-0 readline:	6.2-2 setuptools: 20.7.0-py34_0 sqlite:	3.9.2-0
	tk:	8.5.18-0
	wheel:	0.29.0-py34_0
xz: 5.0.5-1 zlib: 1.2.8-0Now you have a software environment sandbox created with Python 3.4 and cx_freeze.
1.8.13 Conda automatically upgrades to unwanted version
When making a python package for an app, you create an environment for the app from a file req.txt that sets a certain version, such as python=2.7.9. However, when you conda install your package, it automatically upgrades to a later version, such as 2.7.10.
Cause
If you make a conda package for the app using conda build, you can set dependencies with specific version numbers. The requirements lines that say - python could be - python ==2.7.9 instead. It is important to have 1 space before the == operator and no space after.
Solution
Exercise caution when coding version requirements.
1.8.14 ValidationError: Invalid value for timestamp
Cause
This happens when certain packages are installed with conda 4.3.28, and then conda is downgraded to 4.3.27 or earlier.
Solution
See https://github.com/conda/conda/issues/6096.
1.8. Troubleshooting
1.8.15 Unicode error after installing Python 2
Example: UnicodeDecodeError: 'ascii' codec can't decode byte 0xd3 in position 1: ordinal not in range(128)
Cause
Python 2 is incapable of handling unicode properly, especially on Windows. In this case, if any character in your PATH env. var contains anything that is not ASCII then you see this exception.
Solution
Remove all non-ASCII from PATH or switch to Python 3.

CHAPTER 2

Conda Commands

2.1 conda create
Create a new conda environment from a list of specified packages. To use the created environment, use 'source activate envname' look in that directory first. This command requires either the -n NAME or -p PREFIX option.
Options:
usage: conda create [-h] [--clone ENV] [-n ENVIRONMENT | -p PATH] [-c CHANNEL]
[--use-local] [--override-channels]
[--strict-channel-priority] [--no-channel-priority]
[--no-deps | --only-deps] [--no-pin] [--copy] [-C] [-k]
[--offline] [-d] [--json] [-q] [-v] [-y] [--download-only]
[--show-channel-urls] [--file FILE]
[--no-default-packages]
[package_spec [package_spec ...]]2.1.1 Positional Arguments
	package_spec	Packages to install or update in the conda environment.
2.1.2 Named Arguments
--clonePath to (or name of) existing local environment.--fileRead package versions from the given file. Repeated file specifications can be passed (e.g. -file=file1 -file=file2).2.1.3 Target Environment Specification
	-n, --name	Name of environment.

	-p, --prefix	Full path to environment location (i.e. prefix).
2.1.4 Channel Customization
-c, --channel Additional channel to search for packages. These are URLs searched in the order they are given (including file:// for local directories). Then, the defaults or channels from .condarc are searched (unless -override-channels is given). You can use 'defaults' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is http://conda.anaconda.org/.
	--use-local	Use locally built packages. Identical to '-c local'.
--override-channels Do not search default or .condarc channels. Requires -channel.
2.1.5 Solver Mode Modifiers
--strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.
--no-channel-priority Package version takes precedence over channel priority. Overrides the value given by conda config -show channel_priority.
--no-depsDo not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk.--only-depsOnly install dependencies.--no-pinIgnore pinned file.	--no-default-packages	Ignore create_default_packages in the .condarc file.
2.1.6 Package Linking and Install-time Options
	--copy	Install all packages using copies instead of hard- or soft-linking.
2.1.7 Networking Options
-C, --use-index-cache Use cache of channel index files, even if it has expired.
-k, --insecure Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting 'ssl_verify' to 'false'.
	--offline	Offline mode. Don't connect to the Internet.
2.1.8 Output, Prompt, and Flow Control Options
-d, --dry-runOnly display what would have been done.--jsonReport all output as json. Suitable for using conda programmatically.-q, --quietDo not display progress bar.-v, --verboseCan be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.	-y, --yes	Do not ask for confirmation.
--download-only Solve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.
--show-channel-urls Show	channel	urls.	Overrides	the	value	given	by conda config -show show_channel_urls.
Examples:
conda create -n myenv sqlite
2.2 conda install
Installs a list of packages into a specified conda environment.
This command accepts a list of package specifications (e.g, bitarray=0.8) and installs a set of packages consistent with those specifications and compatible with the underlying environment. If full compatibility cannot be assured, an error is reported and the environment is not changed.
Conda attempts to install the newest versions of the requested packages. To accomplish this, it may update some packages that are already installed, or install additional packages. To prevent existing packages from updating, use the -freeze-installed option. This may force conda to install older versions of the requested packages, and it does not prevent additional dependency packages from being installed.
If you wish to skip dependency checking altogether, use the '-no-deps' option. This may result in an environment with incompatible packages, so this option must be used with great caution.
conda can also be called with a list of explicit conda package filenames (e.g. ./lxml-3.2.0-py27_0.tar.bz2). Using conda in this mode implies the -no-deps option, and should likewise be used with great caution. Explicit filenames and package specifications cannot be mixed in a single command.
Options:
usage: conda install [-h] [--revision REVISION] [-n ENVIRONMENT | -p PATH]
[-c CHANNEL] [--use-local] [--override-channels]
[--strict-channel-priority] [--no-channel-priority]
[--no-deps | --only-deps] [--no-pin] [--copy] [-C] [-k]
[--offline] [-d] [--json] [-q] [-v] [-y]
[--download-only] [--show-channel-urls] [--file FILE]
[--prune] [--force-reinstall]
[--freeze-installed | --update-deps | -S | --update-all]
[-m] [--clobber]
[package_spec [package_spec ...]]2.2.1 Positional Arguments
	package_spec	Packages to install or update in the conda environment.
2.2.2 Named Arguments
	--revision	Revert to the specified REVISION.
	--file	Read package versions from the given file. Repeated file specifications can be
passed (e.g. -file=file1 -file=file2).
2.2. conda install
2.2.3 Target Environment Specification
-n, --nameName of environment.-p, --prefixFull path to environment location (i.e. prefix).2.2.4 Channel Customization
-c, --channel Additional channel to search for packages. These are URLs searched in the order they are given (including file:// for local directories). Then, the defaults or channels from .condarc are searched (unless -override-channels is given). You can use 'defaults' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is http://conda.anaconda.org/.
	--use-local	Use locally built packages. Identical to '-c local'.
--override-channels Do not search default or .condarc channels. Requires -channel.
2.2.5 Solver Mode Modifiers
--strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.
--no-channel-priority Package version takes precedence over channel priority. Overrides the value given by conda config -show channel_priority.
--no-depsDo not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk.--only-depsOnly install dependencies.--no-pinIgnore pinned file.--pruneRemove packages that have previously been brought into the environment to satisfy dependencies of user-requested packages, but are no longer needed.--force-reinstallEnsure that any user-requested package for the current operation is uninstalled and reinstalled, even if that package already exists in the environment.--freeze-installed, --no-update-deps Do not update or change already-installed dependencies.
	--update-deps	Update dependencies.
-S, --satisfied-skip-solve Exit early and do not run the solver if the requested specs are satisfied. Also skips aggressive updates as configured by 'aggressive_update_packages'. Similar to the default behavior of 'pip install'.
	--update-all, --all	Update all installed packages in the environment.
2.2.6 Package Linking and Install-time Options
--copyInstall all packages using copies instead of hard- or soft-linking.-m, --mkdirCreate the environment directory if necessary.--clobberAllow clobbering of overlapping file paths within packages, and suppress related warnings.2.2.7 Networking Options
-C, --use-index-cache Use cache of channel index files, even if it has expired.
-k, --insecure Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting 'ssl_verify' to 'false'.
	--offline	Offline mode. Don't connect to the Internet.
2.2.8 Output, Prompt, and Flow Control Options
-d, --dry-runOnly display what would have been done.--jsonReport all output as json. Suitable for using conda programmatically.-q, --quietDo not display progress bar.-v, --verboseCan be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.-y, --yesDo not ask for confirmation.--download-onlySolve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.--show-channel-urls Show	channel	urls.	Overrides	the	value	given	by conda config -show show_channel_urls.
Examples:
conda install -n myenv scipy
2.3 conda update
Updates conda packages to the latest compatible version.
This command accepts a list of package names and updates them to the latest versions that are compatible with all other packages in the environment.
Conda attempts to install the newest versions of the requested packages. To accomplish this, it may update some packages that are already installed, or install additional packages. To prevent existing packages from updating, use the -no-update-deps option. This may force conda to install older versions of the requested packages, and it does not prevent additional dependency packages from being installed.
Options:
usage: conda update [-h] [-n ENVIRONMENT | -p PATH] [-c CHANNEL] [--use-local]
[--override-channels] [--strict-channel-priority]
[--no-channel-priority] [--no-deps | --only-deps]
[--no-pin] [--copy] [-C] [-k] [--offline] [-d] [--json]
[-q] [-v] [-y] [--download-only] [--show-channel-urls]
[--file FILE] [--prune] [--force-reinstall]
[--freeze-installed | --update-deps | -S | --update-all]
[--clobber]
[package_spec [package_spec ...]]2.3. conda update
2.3.1 Positional Arguments
	package_spec	Packages to install or update in the conda environment.
2.3.2 Named Arguments
	--file	Read package versions from the given file. Repeated file specifications can be
passed (e.g. -file=file1 -file=file2).
2.3.3 Target Environment Specification
-n, --nameName of environment.-p, --prefixFull path to environment location (i.e. prefix).2.3.4 Channel Customization
-c, --channel Additional channel to search for packages. These are URLs searched in the order they are given (including file:// for local directories). Then, the defaults or channels from .condarc are searched (unless -override-channels is given). You can use 'defaults' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is http://conda.anaconda.org/.
	--use-local	Use locally built packages. Identical to '-c local'.
--override-channels Do not search default or .condarc channels. Requires -channel.
2.3.5 Solver Mode Modifiers
--strict-channel-priority Packages in lower priority channels are not considered if a package with the same name appears in a higher priority channel.
--no-channel-priority Package version takes precedence over channel priority. Overrides the value given by conda config -show channel_priority.
--no-depsDo not install, update, remove, or change dependencies. This WILL lead to broken environments and inconsistent behavior. Use at your own risk.--only-depsOnly install dependencies.--no-pinIgnore pinned file.--pruneRemove packages that have previously been brought into the environment to satisfy dependencies of user-requested packages, but are no longer needed.--force-reinstallEnsure that any user-requested package for the current operation is uninstalled and reinstalled, even if that package already exists in the environment.--freeze-installed, --no-update-deps Do not update or change already-installed dependencies.
	--update-deps	Update dependencies.
-S, --satisfied-skip-solve Exit early and do not run the solver if the requested specs are satisfied. Also skips aggressive updates as configured by 'aggressive_update_packages'. Similar to the default behavior of 'pip install'.
	--update-all, --all	Update all installed packages in the environment.
2.3.6 Package Linking and Install-time Options
--copyInstall all packages using copies instead of hard- or soft-linking.--clobberAllow clobbering of overlapping file paths within packages, and suppress related warnings.2.3.7 Networking Options
-C, --use-index-cache Use cache of channel index files, even if it has expired.
-k, --insecure Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting 'ssl_verify' to 'false'.
	--offline	Offline mode. Don't connect to the Internet.
2.3.8 Output, Prompt, and Flow Control Options
-d, --dry-runOnly display what would have been done.--jsonReport all output as json. Suitable for using conda programmatically.-q, --quietDo not display progress bar.-v, --verboseCan be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.-y, --yesDo not ask for confirmation.--download-onlySolve an environment and ensure package caches are populated, but exit prior to unlinking and linking packages into the prefix.--show-channel-urls Show	channel	urls.	Overrides	the	value	given	by conda config -show show_channel_urls.
Examples:
conda update -n myenv scipy
2.4 conda remove
Remove a list of packages from a specified conda environment.
This command will also remove any package that depends on any of the specified packages as well-unless a replacement can be found without that dependency. If you wish to skip this dependency checking and remove just the requested packages, add the '-force' option. Note however that this may result in a broken environment, so use this with caution.
Options:
usage: conda remove [-h] [-n ENVIRONMENT | -p PATH] [-c CHANNEL] [--use-local]
[--override-channels] [--all] [--features]
[--force-remove] [--no-pin] [--prune] [-C] [-k](continues on next page)
2.4. conda remove
(continued from previous page)
[--offline] [-d] [--json] [-q] [-v] [-y]
[package_name [package_name ...]]
2.4.1 Positional Arguments
	package_name	Package names to remove from the environment.
2.4.2 Target Environment Specification
-n, --nameName of environment.-p, --prefixFull path to environment location (i.e. prefix).2.4.3 Channel Customization
-c, --channel Additional channel to search for packages. These are URLs searched in the order they are given (including file:// for local directories). Then, the defaults or channels from .condarc are searched (unless -override-channels is given). You can use 'defaults' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is http://conda.anaconda.org/.
	--use-local	Use locally built packages. Identical to '-c local'.
--override-channels Do not search default or .condarc channels. Requires -channel.
2.4.4 Solver Mode Modifiers
	--all	Remove all packages, i.e., the entire environment.
	--features	Remove features (instead of packages).
--force-remove, --force Forces removal of a package without removing packages that depend on it. Using this option will usually leave your environment in a broken and inconsistent state.
--no-pinIgnore pinned file.--pruneRemove packages that have previously been brought into the environment to satisfy dependencies of user-requested packages, but are no longer needed.2.4.5 Networking Options
-C, --use-index-cache Use cache of channel index files, even if it has expired.
-k, --insecure Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting 'ssl_verify' to 'false'.
	--offline	Offline mode. Don't connect to the Internet.
2.4.6 Output, Prompt, and Flow Control Options
-d, --dry-runOnly display what would have been done.--jsonReport all output as json. Suitable for using conda programmatically.-q, --quietDo not display progress bar.-v, --verboseCan be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.-y, --yesDo not ask for confirmation.Examples:
conda remove -n myenv scipy
2.5 conda info
Display information about current conda install.
Options:
usage: conda info [-h] [--json] [-v] [-q] [-a] [--base] [-e] [-s]
[--unsafe-channels]2.5.1 Named Arguments
	-a, --all	Show all information.
	--base	Display base environment path.
	-e, --envs	List all known conda environments.
	-s, --system	List environment variables.
	--unsafe-channels	Display list of channels with tokens exposed.
2.5.2 Output, Prompt, and Flow Control Options
--jsonReport all output as json. Suitable for using conda programmatically.-v, --verboseUse once for info, twice for debug, three times for trace.-q, --quietDo not display progress bar.2.6 conda search
Search for packages and display associated information. The input is a MatchSpec, a query language for conda packages. See examples below.
Options:
usage: conda search [-h] [--envs] [-i] [--subdir SUBDIR] [-c CHANNEL]
[--use-local] [--override-channels] [-C] [-k] [--offline]
[--json] [-v] [-q]2.5. conda info
2.6.1 Named Arguments
--envs Search all of the current user's environments. If run as Administrator (on Windows) or UID 0 (on unix), search all known environments on the system.
	-i, --info	Provide detailed information about each package.
--subdir, --platform	Search the given subdir. Should be formatted like 'osx-64', 'linux-32', 'win-64', and so on. The default is to search the current platform.
2.6.2 Channel Customization
-c, --channel Additional channel to search for packages. These are URLs searched in the order they are given (including file:// for local directories). Then, the defaults or channels from .condarc are searched (unless -override-channels is given). You can use 'defaults' to get the default packages for conda. You can also use any name and the .condarc channel_alias value will be prepended. The default channel_alias is http://conda.anaconda.org/.
	--use-local	Use locally built packages. Identical to '-c local'.
--override-channels Do not search default or .condarc channels. Requires -channel.
2.6.3 Networking Options
-C, --use-index-cache Use cache of channel index files, even if it has expired.
-k, --insecure Allow conda to perform "insecure" SSL connections and transfers. Equivalent to setting 'ssl_verify' to 'false'.
	--offline	Offline mode. Don't connect to the Internet.
2.6.4 Output, Prompt, and Flow Control Options
--jsonReport all output as json. Suitable for using conda programmatically.-v, --verboseUse once for info, twice for debug, three times for trace.-q, --quietDo not display progress bar.Examples:
Search for a specific package named 'scikit-learn':
conda search scikit-learn
Search for packages containing 'scikit' in the package name:
conda search scikit
Note that your shell may expand '*' before handing the command over to conda. Therefore it is sometimes necessary to use single or double quotes around the query.
conda search 'scikit' conda search "*scikit"
Search for packages for 64-bit Linux (by default, packages for your current platform are shown):
conda search numpy[subdir=linux-64]
Search for a specific version of a package:
conda search 'numpy>=1.12'
Search for a package on a specific channel conda search conda-forge::numpy conda search 'numpy[channel=conda-forge, subdir=osx-64]'
2.7 conda config
Modify configuration values in .condarc. This is modeled after the git config command. Writes to the user .condarc file (/home/docs/.condarc) by default.
Options:
usage: conda config [-h] [--json] [-v] [-q] [--system | --env | --file FILE]
[--show [SHOW [SHOW ...]] | --show-sources | --validate |
--describe [DESCRIBE [DESCRIBE ...]] | --write-default]
[--get [KEY [KEY ...]] | --append KEY VALUE | --prepend
KEY VALUE | --set KEY VALUE | --remove KEY VALUE |
--remove-key KEY | --stdin]2.7.1 Output, Prompt, and Flow Control Options
--jsonReport all output as json. Suitable for using conda programmatically.-v, --verboseUse once for info, twice for debug, three times for trace.-q, --quietDo not display progress bar.2.7.2 Config File Location Selection
Without one of these flags, the user config file at '/home/docs/.condarc' is used.
--systemWrite to the system .condarc file at '/home/docs/checkouts/readthedocs.org/user_builds/continuumioconda/envs/4.6.0/.condarc'.--envWrite to the active conda environment .condarc file (<no active environment>). If no environment is active, write to the user config file (/home/docs/.condarc).--fileWrite to the given file.2.7.3 Config Subcommands
--showDisplay configuration values as calculated and compiled. If no arguments given, show information for all configuration values.--show-sourcesDisplay all identified configuration sources.--validateValidate all configuration sources.--describeDescribe given configuration parameters. If no arguments given, show information for all configuration parameters.--write-defaultWrite the default configuration to a file. Equivalent to conda config -describe >~/.condarc.
2.7. conda config
2.7.4 Config Modifiers
--getGet a configuration value.--appendAdd one configuration value to the end of a list key.--prepend, --addAdd one configuration value to the beginning of a list key.--setSet a boolean or string key--removeRemove a configuration value from a list key. This removes all instances of the value.--remove-keyRemove a configuration key (and all its values).--stdinApply configuration information given in yaml format piped through stdin.See conda config -describe or https://conda.io/docs/config.html for details on all the options that can go in .condarc.
Examples:
Display all configuration values as calculated and compiled:
conda config -show
Display all identified configuration sources: conda config -show-sources
Describe all available configuration options:
conda config -describe
Add the conda-canary channel:
conda config -add channels conda-canary
Set the output verbosity to level 3 (highest) for the current activate environment:
conda config -set verbosity 3 -env
Add the 'conda-forge' channel as a backup to 'defaults':
conda config -append channels conda-forge
2.8 conda list
List linked packages in a conda environment.
Options:
usage: conda list [-h] [-n ENVIRONMENT | -p PATH] [--json] [-v] [-q]
[--show-channel-urls] [-c] [-f] [--explicit] [--md5] [-e]
[-r] [--no-pip]
[regex]2.8.1 Positional Arguments
	regex	List only packages matching this regular expression.
2.8.2 Named Arguments
--show-channel-urls Show	channel	urls.	Overrides	the	value	given	by conda config -show show_channel_urls.
-c, --canonicalOutput canonical names of packages only. Implies -no-pip.-f, --full-nameOnly search for full names, i.e., ^<regex>$.--explicitList explicitly all installed conda packaged with URL (output may be used by conda create -file).--md5Add MD5 hashsum when using -explicit-e, --exportOutput requirement string only (output may be used by conda create -file).-r, --revisionsList the revision history and exit.--no-pipDo not include pip-only installed packages.2.8.3 Target Environment Specification
-n, --nameName of environment.-p, --prefixFull path to environment location (i.e. prefix).2.8.4 Output, Prompt, and Flow Control Options
--jsonReport all output as json. Suitable for using conda programmatically.-v, --verboseUse once for info, twice for debug, three times for trace.-q, --quietDo not display progress bar.Examples:
List all packages in the current environment:
conda list
List all packages installed into the environment 'myenv':
conda list -n myenv
Save packages for future use:
conda list -export > package-list.txt
Reinstall packages from an export file:
conda create -n myenv -file package-list.txt
2.9 conda clean
Remove unused packages and caches.
Options:
usage: conda clean [-h] [-a] [-i] [-l] [-p] [-t] [-f] [-d] [--json] [-q] [-v]
[-y]2.9. conda clean
2.9.1 Removal Targets
-a, --allRemove index cache, lock files, unused cache packages, and tarballs.-i, --index-cacheRemove index cache.-l, --lockRemove all conda lock files.-p, --packagesRemove unused packages from writable package caches. WARNING: This does not check for packages installed using symlinks back to the package cache.-t, --tarballsRemove cached package tarballs.-f, --force-pkgs-dirsRemove all writable package caches. This option is not included with the -all flag. WARNING: This will break environments with packages installed using symlinks back to the package cache.2.9.2 Output, Prompt, and Flow Control Options
-d, --dry-runOnly display what would have been done.--jsonReport all output as json. Suitable for using conda programmatically.-q, --quietDo not display progress bar.-v, --verboseCan be used multiple times. Once for INFO, twice for DEBUG, three times for TRACE.-y, --yesDo not ask for confirmation.Examples:
conda clean -tarballs
2.10 conda package
Low-level conda package utility. (EXPERIMENTAL) Options:
usage: conda package [-h] [-n ENVIRONMENT | -p PATH] [-w PATH [PATH ...]] [-r]
[-u] [--pkg-name PKG_NAME] [--pkg-version PKG_VERSION]
[--pkg-build PKG_BUILD]2.10.1 Named Arguments
-w, --whichGiven some PATH print which conda package the file came from.-r, --resetRemove all untracked files and exit.-u, --untrackedDisplay all untracked files and exit.--pkg-namePackage name of the created package.--pkg-versionPackage version of the created package.--pkg-buildPackage build number of the created package.2.10.2 Target Environment Specification
	-n, --name	Name of environment.
	-p, --prefix	Full path to environment location (i.e. prefix).
2.10. conda package


CHAPTER 3

Conda Configuration

# ######################################################
# ##	Channel Configuration	##
# ######################################################
# # channels (sequence: str)
# #	aliases: channel
# #	env var string delimiter: ','
# #	The list of conda channels to include for relevant operations.
# # # channels:
#	- defaults
# # channel_alias (str)
# #	The prepended url location to associate with channel names.
# #
# channel_alias: https://conda.anaconda.org
# # default_channels (sequence: str)
# #	env var string delimiter: ','
# #	The list of channel names and/or urls used for the 'defaults' # #	multichannel.
# # # default_channels:
#	- https://repo.anaconda.com/pkgs/main
#	- https://repo.anaconda.com/pkgs/free
#	- https://repo.anaconda.com/pkgs/r
# # override_channels_enabled (bool)
# #	Permit use of the --overide-channels command-line flag.
# #
# override_channels_enabled: true
# # whitelist_channels (sequence: str)
# #	env var string delimiter: ','
# #The exclusive list of channels allowed to be used on the system. Use# #of any other channels will result in an error. If conda-build channels# #are to be allowed, along with the --use-local command line flag, be# #sure to include the 'local' channel in the list. If the list is empty# #or left undefined, no channel exclusions will be enforced.# #
# whitelist_channels: []
# # custom_channels (map: str)
# #A map of key-value pairs where the key is a channel name and the value# #is a channel location. Channels defined here override the default# #'channel_alias' value. The channel name (key) is not included in the# #channel location (value). For example, to override the location of# #the 'conda-forge' channel where the url to repodata is# #https://anaconda-repo.dev/packages/conda-forge/linux-64/repodata.json,# #add an entry 'conda-forge: https://anaconda-repo.dev/packages'.# #
# custom_channels:
#	pkgs/pro: https://repo.anaconda.com
# # custom_multichannels (map: list)
# #A multichannel is a metachannel composed of multiple channels. The two# #reserved multichannels are 'defaults' and 'local'. The 'defaults'# #multichannel is customized using the 'default_channels' parameter. The# #'local' multichannel is a list of file:// channel locations where# #conda-build stashes successfully-built packages. Other multichannels# #can be defined with custom_multichannels, where the key is the# #multichannel name and the value is a list of channel names and/or# #channel urls.# #
# custom_multichannels: {}
# # migrated_channel_aliases (sequence: str)
# #env var string delimiter: ','# #A list of previously-used channel_alias values. Useful when switching# #between different Anaconda Repository instances.# #
# migrated_channel_aliases: []
# # migrated_custom_channels (map: str)
# #	A map of key-value pairs where the key is a channel name and the value # #	is the previous location of the channel.
# #
# migrated_custom_channels: {}
# # add_anaconda_token (bool)
# #aliases: add_binstar_token# #In conjunction with the anaconda command-line client (installed with# #`conda install anaconda-client`), and following logging into an# #Anaconda Server API site using `anaconda login`, automatically apply a# #matching private token to enable access to private packages and# #channels.# #
# add_anaconda_token: true
# # allow_non_channel_urls (bool)
# #	Warn, but do not fail, when conda detects a channel url is not a valid # #	channel.
# #
# allow_non_channel_urls: false
# ######################################################
# ##	Basic Conda Configuration	##
# ######################################################
# # env_prompt (str)
# #Template for prompt modification based on the active environment.# #Currently supported template variables are '{prefix}', '{name}', and# #'{default_env}'. '{prefix}' is the absolute path to the active# #environment. '{name}' is the basename of the active environment# #prefix. '{default_env}' holds the value of '{name}' if the active# #environment is a conda named environment ('-n' flag), or otherwise# #holds the value of '{prefix}'. Templating uses python's str.format()# #method.# #
# env_prompt: '({default_env}) '
# # envs_dirs (sequence: str)
# #aliases: envs_path# #env var string delimiter: ':'# #The list of directories to search for named environments. When# #creating a new named environment, the environment will be placed in# #the first writable location.# #
# envs_dirs: []
# # pkgs_dirs (sequence: str)
# #env var string delimiter: ','# #The list of directories where locally-available packages are linked# #from at install time. Packages not locally available are downloaded# #and extracted into the first writable directory.# #
# pkgs_dirs: []
# ######################################################
# ##	Network Configuration	##
# ######################################################
# # client_ssl_cert (NoneType, str)
# #aliases: client_cert# #A path to a single file containing a private key and certificate (e.g.# #.pem file). Alternately, use client_ssl_cert_key in conjuction with# #client_ssl_cert for individual files.# #
# client_ssl_cert:
# # client_ssl_cert_key (NoneType, str)
# #	aliases: client_cert_key
# #	Used in conjunction with client_ssl_cert for a matching key file.
# #
# client_ssl_cert_key:
# # local_repodata_ttl (bool, int)
# #For a value of False or 0, always fetch remote repodata (HTTP 304# #responses respected). For a value of True or 1, respect the HTTP# #Cache-Control max-age header. Any other positive integer values is the# #number of seconds to locally cache repodata before checking the remote# #server for an update.# #
# local_repodata_ttl: 1
# # offline (bool)
# #	Restrict conda to cached download content and file:// based urls.
# #
# offline: false
# # proxy_servers (map: NoneType, str)
# #A mapping to enable proxy settings. Keys can be either (1) a# #scheme://hostname form, which will match any request to the given# #scheme and exact hostname, or (2) just a scheme, which will match# #requests to that scheme. Values are are the actual proxy server, and# #are of the form 'scheme://[user:password@]host[:port]'. The optional# #'user:password' inclusion enables HTTP Basic Auth with your proxy.# #
# proxy_servers: {}
# # remote_connect_timeout_secs (float)
# #	The number seconds conda will wait for your client to establish a # #	connection to a remote url resource.
# #
# remote_connect_timeout_secs: 9.15
# # remote_max_retries (int)
# #	The maximum number of retries each HTTP connection should attempt.
# #
# remote_max_retries: 3
# # remote_read_timeout_secs (float)
# #Once conda has connected to a remote resource and sent an HTTP# #request, the read timeout is the number of seconds conda will wait for# #the server to send a response.# #
# remote_read_timeout_secs: 60.0
# # ssl_verify (bool, str)
# #aliases: verify_ssl# #Conda verifies SSL certificates for HTTPS requests, just like a web# #browser. By default, SSL verification is enabled, and conda operations# #will fail if a required url's certificate cannot be verified. Setting# #ssl_verify to False disables certification verification. The value for# #ssl_verify can also be (1) a path to a CA bundle file, or (2) a path# #to a directory containing certificates of trusted CA.# #
# ssl_verify: true
# ######################################################
# ##	Solver Configuration	##
# ######################################################

# # aggressive_update_packages (sequence: str)
# #env var string delimiter: ','# #A list of packages that, if installed, are always updated to the# #latest possible version.# #
# aggressive_update_packages:
#- ca-certificates#- certifi#- openssl# # auto_update_conda (bool)
# #aliases: self_update# #Automatically update conda when a newer or higher priority version is# #detected.# #
# auto_update_conda: true
# # channel_priority (ChannelPriority)
# #Accepts values of 'strict', 'flexible', and 'disabled'. The default# #value is 'flexible'. With strict channel priority, packages in lower# #priority channels are not considered if a package with the same name# #appears in a higher priority channel. With flexible channel priority,# #the solver may reach into lower priority channels to fulfill# #dependencies, rather than raising an unsatisfiable error. With channel# #priority disabled, package version takes precedence, and the# #configured priority of channels is used only to break ties. In# #previous versions of conda, this parameter was configured as either# #True or False. True is now an alias to 'flexible'.# #
# channel_priority: flexible
# # create_default_packages (sequence: str)
# #	env var string delimiter: ','
# #	Packages that are by default added to a newly created environments.
# #
# create_default_packages: []
# # disallowed_packages (sequence: str)
# #aliases: disallow# #env var string delimiter: '&'# #Package specifications to disallow installing. The default is to allow# #all packages.# #
# disallowed_packages: []
# # pinned_packages (sequence: str)
# #env var string delimiter: '&'# #A list of package specs to pin for every environment resolution. This# #parameter is in BETA, and its behavior may change in a future release.# #
# pinned_packages: []
# # track_features (sequence: str)
# #	env var string delimiter: ','
# #	A list of features that are tracked by default. An entry here is similar to adding an entry to the create_default_packages list.
# track_features: []
# # prune (bool)
# #Remove packages that have previously been brought into an environment# #to satisfy dependencies of user-requested packages, but are no longer# #needed.# #
# prune: false
# # force_reinstall (bool)
# #Ensure that any user-requested package for the current operation is# #uninstalled and reinstalled, even if that package already exists in# #the environment.# #
# force_reinstall: false
# ######################################################
# ## Package Linking and Install-time Configuration ##
# ######################################################
# # allow_softlinks (bool)
# #When allow_softlinks is True, conda uses hard-links when possible, and# #soft-links (symlinks) when hard-links are not possible, such as when# #installing on a different filesystem than the one that the package# #cache is on. When allow_softlinks is False, conda still uses hard-# #links when possible, but when it is not possible, conda copies files.# #Individual packages can override this setting, specifying that certain# #files should never be soft-linked (see the no_link option in the build# #recipe documentation).# #
# allow_softlinks: false
# # always_copy (bool)
# #aliases: copy# #Register a preference that files be copied into a prefix during# #install rather than hard-linked.# #
# always_copy: false
# # always_softlink (bool)
# #aliases: softlink# #Register a preference that files be soft-linked (symlinked) into a# #prefix during install rather than hard-linked. The link source is the# #'pkgs_dir' package cache from where the package is being linked.# #WARNING: Using this option can result in corruption of long-lived# #conda environments. Package caches are *caches*, which means there is# #some churn and invalidation. With this option, the contents of# #environments can be switched out (or erased) via operations on other# #environments.# #
# always_softlink: false
# # path_conflict (PathConflict)
# #	The method by which conda handle's conflicting/overlapping paths during a create, install, or update operation. The value must be one
       of 'clobber', 'warn', or 'prevent'. The '--clobber' command-line flag # #	or clobber configuration parameter overrides path_conflict set to # #	'prevent'.
# #
# path_conflict: clobber
# # rollback_enabled (bool)
# #	Should any error occur during an unlink/link transaction, revert any # #	disk mutations made to that point in the transaction.
# #
# rollback_enabled: true
# # safety_checks (SafetyChecks)
# #	Enforce available safety guarantees during package installation. The # #	value must be one of 'enabled', 'warn', or 'disabled'.
# #
# safety_checks: warn
# # extra_safety_checks (bool)
# #	Spend extra time validating package contents. Currently, runs sha256 # #	verification on every file within each package during installation.
# #
# extra_safety_checks: false
# # shortcuts (bool)
# #	Allow packages to create OS-specific shortcuts (e.g. in the Windows # #	Start Menu) at install time.
# #
# shortcuts: true
# # non_admin_enabled (bool)
# #	Allows completion of conda's create, install, update, and remove
# #	operations, for non-privileged (non-root or non-administrator) users.
# #
# non_admin_enabled: true
# ######################################################
# ##	Conda-build Configuration	##
# ######################################################
# # bld_path (str)
# #The location where conda-build will put built packages. Same as# #'croot', but 'croot' takes precedence when both are defined. Also used# #in construction of the 'local' multichannel.# #
# bld_path: ''
# # croot (str)
# #The location where conda-build will put built packages. Same as# #'bld_path', but 'croot' takes precedence when both are defined. Also# #used in construction of the 'local' multichannel.# #
# croot: ''
# # anaconda_upload (NoneType, bool) aliases: binstar_upload

Automatically upload packages built with conda build to anaconda.org.
# #
# anaconda_upload:
# # conda_build (map: str)
# #	aliases: conda-build
# #	General configuration parameters for conda-build.
# #
# conda_build: {}
# ######################################################
# ## Output, Prompt, and Flow Control Configuration ##
# ######################################################
# # always_yes (NoneType, bool)
# #aliases: yes# #Automatically choose the 'yes' option whenever asked to proceed with a# #conda operation, such as when running `conda install`.# #
# always_yes:
# # auto_activate_base (bool)
# #	Automatically activate the base environment during shell # #	initialization.
# #
# auto_activate_base: true
# # changeps1 (bool)
# #	When using activate, change the command prompt ($PS1) to include the # #	activated environment.
# #
# changeps1: true
# # json (bool)
# #	Ensure all output written to stdout is structured json.
# #
# json: false
# # notify_outdated_conda (bool)
# #	Notify if a newer version of conda is detected during a create, # #	install, update, or remove operation.
# #
# notify_outdated_conda: true
# # quiet (bool)
# #	Disable progress bar display and other output.
# #
# quiet: false
# # report_errors (NoneType, bool)
# #Opt in, or opt out, of automatic error reporting to core maintainers.# #Error reports are anonymous, with only the error stack trace and# #information given by `conda info` being sent.# #
# report_errors:

# # show_channel_urls (NoneType, bool)
# #	Show channel URLs when displaying what is going to be downloaded. # #
# show_channel_urls:
# # verbosity (int)
	# #	aliases: verbose
	# #	Sets output log level. 0 is warn. 1 is info. 2 is debug. 3 is trace.
# #
# verbosity: 0



CHAPTER 4

Conda Python API

As of conda 4.4, conda can be installed in any environment, not just environments with names starting with _ (underscore). That change was made, in part, so that conda can be used as a python library. There are three supported public modules. We support
import conda.cli.python_api. import conda.api import conda.exports The first two should have very long-term stability. The third is guaranteed to be stable throughout the lifetime of a feature release series-i.e. minor version number.
As of conda 4.5, we do not support pip install conda. However, we are considering that as a supported bootstrap method in the future.
4.1 conda.api.Solver
class conda.core.solve.DepsModifier
Flags to enable alternate handling of dependencies.
NOT_SET = 'not_set'
NO_DEPS = 'no_deps'
ONLY_DEPS = 'only_deps'
class conda.core.solve.Solver(prefix,	channels,	subdirs=(),	specs_to_add=(),
specs_to_remove=())
A high-level API to conda's solving logic. Three public methods are provided to access a solution in various forms.
• solve_final_state()
• solve_for_diff()
• solve_for_transaction()
solve_final_state(update_modifier=<auxlib._Null object>, deps_modifier=<auxlib._Null object>, prune=<auxlib._Null object>, ignore_pinned=<auxlib._Null object>, force_remove=<auxlib._Null object>) Gives the final, solved state of the environment.
Parameters
• update_modifier (UpdateModifier) - An optional flag directing how updates are handled regarding packages already existing in the environment.
• deps_modifier (DepsModifier) - An optional flag indicating special solver handling for dependencies. The default solver behavior is to be as conservative as possible with dependency updates (in the case the dependency already exists in the environment), while still ensuring all dependencies are satisfied. Options include
- NO_DEPS
- ONLY_DEPS
- UPDATE_DEPS
- UPDATE_DEPS_ONLY_DEPS
- FREEZE_INSTALLED
• prune (bool) - If True, the solution will not contain packages that were previously brought into the environment as dependencies but are no longer required as dependencies and are not user-requested.
• ignore_pinned (bool) - If True, the solution will ignore pinned package configuration for the prefix.
• force_remove (bool) - Forces removal of a package without removing packages that depend on it.
Returns In sorted dependency order from roots to leaves, the package references for the solved state of the environment.
Return type Tuple[PackageRef]
solve_for_diff(update_modifier=<auxlib._Null	object>,	deps_modifier=<auxlib._Null	object>,	prune=<auxlib._Null	object>,	ignore_pinned=<auxlib._Null	object>, force_remove=<auxlib._Null object>, force_reinstall=<auxlib._Null object>) Gives the package references to remove from an environment, followed by the package references to add to an environment. Parameters
• deps_modifier (DepsModifier) - See solve_final_state().
• prune (bool) - See solve_final_state().
• ignore_pinned (bool) - See solve_final_state().
• force_remove (bool) - See solve_final_state().
• force_reinstall (bool) -
For requested specs_to_add that are already satisfied in the environment, instructs the solver to remove the package and spec from the environment, and then add it back-possibly with the exact package instance modified, depending on the spec exactness.
Returns A two-tuple of PackageRef sequences. The first is the group of packages to remove from the environment, in sorted dependency order from leaves to roots. The second is the group of packages to add to the environment, in sorted dependency order from roots to leaves.
Return type Tuple[PackageRef], Tuple[PackageRef]
solve_for_transaction(update_modifier=<auxlib._Null object>, deps_modifier=<auxlib._Null object>, prune=<auxlib._Null object>, ignore_pinned=<auxlib._Null object>,	force_remove=<auxlib._Null	object>, force_reinstall=<auxlib._Null object>)
Gives an UnlinkLinkTransaction instance that can be used to execute the solution on an environment. Parameters
• deps_modifier (DepsModifier) - See solve_final_state().
• prune (bool) - See solve_final_state().
• ignore_pinned (bool) - See solve_final_state().
• force_remove (bool) - See solve_final_state().
• force_reinstall (bool) - See solve_for_diff().
Returns
Return type UnlinkLinkTransaction
4.2 conda.api.python_api
class conda.cli.python_api.Commands
CLEAN = 'clean'
CONFIG = 'config'
CREATE = 'create'
HELP = 'help'
INFO = 'info'
INSTALL = 'install'
LIST = 'list'
REMOVE = 'remove'
SEARCH = 'search'
UPDATE = 'update'
conda.cli.python_api.run_command(command, *arguments, **kwargs)
Runs a conda command in-process with a given set of command-line interface arguments.
Differences from the command-line interface: Always uses -yes flag, thus does not ask for confirmation.
Parameters
• command - one of the Commands.X
• *arguments - instructions you would normally pass to the conda comamnd on the command line see below for examples
4.2. conda.api.python_api
• **kwargs - special instructions for programmatic overrides use_exception_handler: defaults to False. False will let the code calling
run_command handle all exceptions. True won't raise when an exception has occured, and instead give a non-zero return code
search_path: an optional non-standard search path for configuration information
that overrides the default SEARCH_PATH
stdout: Define capture behavior for stream sys.stdout. Defaults to STRING. STRING captures as a string. None leaves stream untouched. Otherwise redirect to file-like object stdout.
stderr: Define capture behavior for stream sys.stderr. Defaults to STRING. STRING captures as a string. None leaves stream untouched. STDOUT redirects to stdout target and returns None as stderr value. Otherwise redirect to file-like object stderr.
Returns: a tuple of stdout, stderr, and return_code. stdout, stderr are either strings, None or the corresponding file-like function argument.
Examples
>> run_command(Commands.CREATE, "-n newenv python=3 flask", use_exception_handler=True) >> run_command(Commands.CREATE, "-n newenv", "python=3", "flask") >> run_command(Commands.CREATE, ["-n newenv", "python=3", "flask"], search_path=())
4.3 conda.api
class conda.api.Solver(prefix, channels, subdirs=(), specs_to_add=(), specs_to_remove=()) Beta While in beta, expect both major and minor changes across minor releases.
A high-level API to conda's solving logic. Three public methods are provided to access a solution in various forms.
• solve_final_state()
• solve_for_diff()
• solve_for_transaction()
solve_final_state(update_modifier=<auxlib._Null object>, deps_modifier=<auxlib._Null object>, prune=<auxlib._Null object>, ignore_pinned=<auxlib._Null object>, force_remove=<auxlib._Null object>)
Beta While in beta, expect both major and minor changes across minor releases.
Gives the final, solved state of the environment.
Parameters
• deps_modifier (DepsModifier) - An optional flag indicating special solver handling for dependencies. The default solver behavior is to be as conservative as possible with dependency updates (in the case the dependency already exists in the environment), while still ensuring all dependencies are satisfied. Options include
- NO_DEPS
- ONLY_DEPS
- UPDATE_DEPS
- UPDATE_DEPS_ONLY_DEPS
- FREEZE_INSTALLED
• prune (bool) - If True, the solution will not contain packages that were previously brought into the environment as dependencies but are no longer required as dependencies and are not user-requested.
• ignore_pinned (bool) - If True, the solution will ignore pinned package configuration for the prefix.
• force_remove (bool) - Forces removal of a package without removing packages that depend on it.
Returns In sorted dependency order from roots to leaves, the package references for the solved state of the environment.
Return type Tuple[PackageRef]
solve_for_diff(update_modifier=<auxlib._Null	object>,	deps_modifier=<auxlib._Null	object>,	prune=<auxlib._Null	object>,	ignore_pinned=<auxlib._Null	object>, force_remove=<auxlib._Null object>, force_reinstall=False)
Beta While in beta, expect both major and minor changes across minor releases.
Gives the package references to remove from an environment, followed by the package references to add to an environment. Parameters
• deps_modifier (DepsModifier) - See solve_final_state().
• prune (bool) - See solve_final_state().
• ignore_pinned (bool) - See solve_final_state().
• force_remove (bool) - See solve_final_state().
• force_reinstall (bool) - For requested specs_to_add that are already satisfied in the environment, instructs the solver to remove the package and spec from the environment, and then add it back-possibly with the exact package instance modified, depending on the spec exactness.
Returns A two-tuple of PackageRef sequences. The first is the group of packages to remove from the environment, in sorted dependency order from leaves to roots. The second is the group of packages to add to the environment, in sorted dependency order from roots to leaves.
Return type Tuple[PackageRef], Tuple[PackageRef]
solve_for_transaction(update_modifier=<auxlib._Null object>, deps_modifier=<auxlib._Null
                      object>, prune=<auxlib._Null object>, ignore_pinned=<auxlib._Null object>, force_remove=<auxlib._Null object>, force_reinstall=False) Beta While in beta, expect both major and minor changes across minor releases.
Gives an UnlinkLinkTransaction instance that can be used to execute the solution on an environment. Parameters
• deps_modifier (DepsModifier) - See solve_final_state().
• prune (bool) - See solve_final_state().
• ignore_pinned (bool) - See solve_final_state().
• force_remove (bool) - See solve_final_state().
• force_reinstall (bool) - See solve_for_diff().
4.3. conda.api
Returns
Return type UnlinkLinkTransaction
class conda.api.SubdirData(channel)
Beta While in beta, expect both major and minor changes across minor releases.
High-level management and usage of repodata.json for subdirs.
iter_records()
Beta While in beta, expect both major and minor changes across minor releases.
Returns
A generator over all records contained in the repodata.json instance. Warning: this is a generator that is exhausted on first use.
Return type Iterable[PackageRecord]
query(package_ref_or_match_spec)
Beta While in beta, expect both major and minor changes across minor releases.
Run a query against this specific instance of repodata.
Parameters package_ref_or_match_spec (PackageRef or MatchSpec or str) - Either an exact PackageRef to match against, or a MatchSpec query object. A str will be turned into a MatchSpec automatically.
Returns Tuple[PackageRecord]
static query_all(package_ref_or_match_spec, channels=None, subdirs=None) Beta While in beta, expect both major and minor changes across minor releases.
Run a query against all repodata instances in channel/subdir matrix.
Parameters
• package_ref_or_match_spec (PackageRef or MatchSpec or str) - Either an exact PackageRef to match against, or a MatchSpec query object. A str will be turned into a MatchSpec automatically.
• channels (Iterable[Channel or str] or None) - An iterable of urls for channels or Channel objects. If None, will fall back to context.channels.
• subdirs (Iterable[str] or None) - If None, will fall back to context.subdirs.
Returns Tuple[PackageRecord]
reload()
Beta While in beta, expect both major and minor changes across minor releases.
Update the instance with new information. Backing information (i.e. repodata.json) is lazily downloaded/loaded on first use by the other methods of this class. You should only use this method if you are sure you have outdated data.
Returns SubdirData
class conda.api.PackageCacheData(pkgs_dir)
Beta While in beta, expect both major and minor changes across minor releases.
High-level management and usage of package caches.
static first_writable(pkgs_dirs=None)
Beta While in beta, expect both major and minor changes across minor releases.
Get an instance object for the first writable package cache.
Parameters pkgs_dirs (Iterable[str]) - If None, will fall back to context.pkgs_dirs.
Returns An instance for the first writable package cache.
Return type PackageCacheData
get(package_ref, default=<auxlib._Null object>)
Beta While in beta, expect both major and minor changes across minor releases.
Parameters
• package_ref (PackageRef) - A PackageRef instance representing the key for the PackageCacheRecord being sought.
• default - The default value to return if the record does not exist. If not specified and no record exists, KeyError is raised.
Returns PackageCacheRecord
is_writable
Beta While in beta, expect both major and minor changes across minor releases.
Indicates if the package cache location is writable or read-only.
Returns bool
iter_records()
Beta While in beta, expect both major and minor changes across minor releases.
Returns
A generator over all records contained in the package cache instance. Warning: this is a generator that is exhausted on first use.
Return type Iterable[PackageCacheRecord]
query(package_ref_or_match_spec)
Beta While in beta, expect both major and minor changes across minor releases.
Run a query against this specific package cache instance.
Parameters package_ref_or_match_spec (PackageRef or MatchSpec or str) - Either an exact PackageRef to match against, or a MatchSpec query object. A str will be turned into a MatchSpec automatically.
Returns Tuple[PackageCacheRecord]
static query_all(package_ref_or_match_spec, pkgs_dirs=None)
Beta While in beta, expect both major and minor changes across minor releases.
Run a query against all package caches.
Parameters
• package_ref_or_match_spec (PackageRef or MatchSpec or str) - Either an exact PackageRef to match against, or a MatchSpec query object. A str will be turned into a MatchSpec automatically.
• pkgs_dirs (Iterable[str] or None)	-	If	None,	will	fall	back	to	context.pkgs_dirs.
Returns Tuple[PackageCacheRecord]
reload()
Beta While in beta, expect both major and minor changes across minor releases.
4.3. conda.api
Update the instance with new information. Backing information (i.e. contents of the pkgs_dir) is lazily loaded on first use by the other methods of this class. You should only use this method if you are sure you have outdated data.
Returns PackageCacheData
class conda.api.PrefixData(prefix_path)
Beta While in beta, expect both major and minor changes across minor releases.
High-level management and usage of conda environment prefixes.
get(package_ref, default=<auxlib._Null object>)
Beta While in beta, expect both major and minor changes across minor releases.
Parameters
• package_ref (PackageRef) - A PackageRef instance representing the key for the PrefixRecord being sought.
• default - The default value to return if the record does not exist. If not specified and no record exists, KeyError is raised.
Returns PrefixRecord
is_writable
Beta While in beta, expect both major and minor changes across minor releases.
Indicates if the prefix is writable or read-only.
Returns True if the prefix is writable. False if read-only. None if the prefix does not exist as a conda environment.
Return type bool or None
iter_records()
Beta While in beta, expect both major and minor changes across minor releases.
Returns
   A generator over all records contained in the prefix. Warning: this is a generator that is exhausted on first use. Return type Iterable[PrefixRecord]
query(package_ref_or_match_spec)
Beta While in beta, expect both major and minor changes across minor releases.
Run a query against this specific prefix instance.
Parameters package_ref_or_match_spec (PackageRef or MatchSpec or str) - Either an exact PackageRef to match against, or a MatchSpec query object. A str will be turned into a MatchSpec automatically.
Returns Tuple[PrefixRecord]
reload()
Beta While in beta, expect both major and minor changes across minor releases.
Update the instance with new information. Backing information (i.e. contents of the conda-meta directory) is lazily loaded on first use by the other methods of this class. You should only use this method if you are sure you have outdated data.
Returns PrefixData

CHAPTER 5

Release notes

This information is drawn from the GitHub conda project changelog: https://github.com/conda/conda/blob/master/
CHANGELOG.md
5.1 4.6.0 (unreleased)
5.1.1 New Feature Highlights
• resolve #7053 preview support for conda operability with pip (#7067, #7370, #7710)
• conda initialize (#6518, #7388, #7629)
• resolve #7194 add '-stack' flag to 'conda activate'; remove max_shlvl config (#7195, #7226, #7233)
• resolve #7087 add non-conda-installed python packages into PrefixData (#7067, #7370)
• resolve #2682 add 'conda run' preview support (#7320, #7625)
• resolve #626 conda wrapper for PowerShell (#7794)
5.1.2 Deprecations/Breaking Changes
• resolve #6915 remove 'conda env attach' and 'conda env upload' (#6916)
• resolve #7061 remove pkgs/pro from defaults (#7162)
• resolve #7078 add deprecation warnings for 'conda.cli.activate', 'conda.compat', and 'conda.install' (#7079)
• resolve #7194 add '-stack' flag to 'conda activate'; remove max_shlvl config (#7195)
• resolve #6979, #7086 remove Dist from majority of project (#7216, #7252)
• fix #7362 remove -license from conda info and related code paths (#7386)
• resolve #7309 deprecate 'conda info package_name' (#7310)
• remove 'conda clean -source-cache' and defer to conda-build (#7731)
• resolve #7724 move windows package cache and envs dirs back to .conda directory (#7725)
5.1.3 Improvements
• import speedups (#7122)
• -help cleanup (#7120)
• fish autocompletion for conda env (#7101)
• remove reference to 'system' channel (#7163)
• add http error body to debug information (#7160)
• warn creating env name with space is not supported (#7168)
• support complete MatchSpec syntax in environment.yml files (#7178)
• resolve #4274 add option to remove an existing environment with 'conda create' (#7133)
• add ability for conda prompt customization via 'env_prompt' config param (#7047)
• resolve #7063 add license and license_family to MatchSpec for 'conda search' (#7064)
• resolve #7189 progress bar formatting improvement (#7191)
• raise log level for errors to error (#7229)
• add to conda.exports (#7217)
• resolve #6845 add option -S / -satisfied-skip-solve to exit early for satisfied specs (#7291)
• add NoBaseEnvironmentError and DirectoryNotACondaEnvironmentError (#7378)
• replace menuinst subprocessing by ctypes win elevation (4.6.0a3) (#7426)
• bump minimum requests version to stable, unbundled release (#7528)
• resolve #7591 updates and improvements from namespace PR for 4.6 (#7599)
• resolve #7592 compatibility shims (#7606)
• user-agent context refactor (#7630)
• solver performance improvements with benchmarks in common.logic (#7676)
• enable fuzzy-not-equal version constraint for pip interop (#7711)
• add -d short option for -dry-run (#7719)
• add -force-pkgs-dirs option to conda clean (#7719)
• address #7709 ensure -update-deps unlocks specs from previous user requests (#7719)
• add package timestamp information to output of 'conda search -info' (#7722)
• resolve #7336 'conda search' tries "fuzzy match" before showing PackagesNotFound (#7722)
• resolve #7656 strict channel priority via 'channel_priority' config option or -strict-channel-priority CLI flag (#7729)
• performance improvement to cache __hash__ value on PackageRecord (#7715)
• resolve #7764 change name of 'condacmd' dir to 'condabin'; use on all platforms (#7773)
• resolve #7782 implement PEP-440 '~=' compatible release operator (#7783)
5.1.4 Bug Fixes
• fix #7107 verify hangs when a package is corrupted (#7131)
• fix #7145 progress bar uses stderr instead of stdout (#7146)
• fix typo in conda.fish (#7152)
• fix #2154 conda remove should complain if requested removals don't exist (#7135)
• fix #7094 exit early for -dry-run with explicit and clone (#7096)
• fix activation script sort order (#7176)
• fix #7109 incorrect chown with sudo (#7180)
• fix #7210 add suppressed -mkdir back to 'conda create' (fix for 4.6.0a1) (#7211)
• fix #5681 conda env create / update when -file does not exist (#7385)
• resolve #7375 enable conda config -set update_modifier (#7377)
• fix #5885 improve conda env error messages and add extra tests (#7395)
• msys2 path conversion (#7389)
• fix autocompletion in fish (#7575)
• fix #3982 following 4.4 activation refactor (#7607)
• fix #7242 configuration load error message (#7243)
• fix conda env compatibility with pip 18 (#7612)
• fix #7184 remove conflicting specs to find solution to user's active request (#7719)
• fix #7706 add condacmd dir to cmd.exe path on first activation (#7735)
• fix #7761 spec handling errors in 4.6.0b0 (#7780)
• fix #7770 'conda list regex' only applies regex to package name (#7784)
5.1.5 Non-User-Facing Changes
• resolve #6595 use OO inheritance in activate.py (#7049)
• resolve #7220 pep8 project renamed to pycodestyle (#7221)
• proxy test routine (#7308)
• add .mailmap and .cla-signers (#7361)
• add copyright headers (#7367)
• rename common.platform to common.os and split among windows, linux, and unix utils (#7396)
• fix windows test failures when symlink not available (#7369)
• test building conda using conda-build (#7251)
• solver test metadata updates (#7664)
• explicitly add Mapping, Sequence to common.compat (#7677)
• add debug messages to communicate solver stages (#7803)
• add undocumented sat_solver config parameter (#7811)
5.1. 4.6.0 (unreleased)
5.1.6 Preview Releases
• 4.6.0a1 at d5bec21d1f64c3bc66c2999cfc690681e9c46177 on 2018-04-20
• 4.6.0a2 at c467517ca652371ebc4224f0d49315b7ec225108 on 2018-05-01
• 4.6.0b0 at 21a24f02b2687d0895de04664a4ec23ccc75c33a on 2018-09-07
5.1.7 Contributors
• @cgranade
• @fabioz
• @goanpeca
• @jesse• @kalefranz
• @mandeep
• @mbargull
• @msarahan
• @ohadravid
5.2 4.5.11 (2018-08-21)
5.2.1 Improvements
• resolve #7672 compatibility with ruamel.yaml 0.15.54 (#7675)
5.2.2 Contributors
• @CJ-Wright
• @mbargull
5.3 4.5.10 (2018-08-13)
5.3.1 Bug Fixes
• fix conda env compatibility with pip 18 (#7627)
• fix py37 compat 4.5.x (#7641)
• fix #7451 don't print name, version, and size if unknown (#7648)
• replace glob with fnmatch in PrefixData (#7645)
5.3.2 Contributors
• @jesse-
• @nehaljwani
5.4 4.5.9 (2018-07-30)
5.4.1 Improvements
• resolve #7522 prevent conda from scheduling downgrades (#7598)
• allow skipping feature maximization in resolver (#7601)
5.4.2 Bug Fixes
• fix #7559 symlink stat in localfs adapter (#7561)
• fix #7486 activate with no PATH set (#7562)
• resolve #7522 prevent conda from scheduling downgrades (#7598)
5.4.3 Contributors
• @kalefranz
• @loriab
5.5 4.5.8 (2018-07-10)
5.5.1 Bug Fixes
• fix #7524 should_bypass_proxies for requests 2.13.0 and earlier (#7525)
5.5.2 Contributors
• @kalefranz
5.6 4.5.7 (2018-07-09)
5.6.1 Improvements
• resolve #7423 add upgrade error for unsupported repodata_version (#7415)
• raise CondaUpgradeError for conda version downgrades on environments (#7517)
5.4. 4.5.9 (2018-07-30)
5.6.2 Bug Fixes
• fix #7505 temp directory for UnlinkLinkTransaction should be in target prefix (#7516)
• fix #7506 requests monkeypatch fallback for old requests versions (#7515)
5.6.3 Contributors
• @kalefranz
• @nehaljwani
5.7 4.5.6 (2018-07-06)
5.7.1 Bug Fixes
• resolve #7473 py37 support (#7499)
• fix #7494 History spec parsing edge cases (#7500)
• fix requests 2.19 incompatibility with NO_PROXY env var (#7498)
• resolve #7372 disable http error uploads and CI cleanup (#7498, #7501)
5.7.2 Contributors
• @kalefranz
5.8 4.5.5 (2018-06-29)
5.8.1 Bug Fixes
• fix #7165 conda version check should be restricted to channel conda is from (#7289, #7303)
• fix #7341 ValueError n cannot be negative (#7360)
• fix #6691 fix history file parsing containing comma-joined version specs (#7418)
• fix msys2 path conversion (#7471)
5.8.2 Contributors
• @goanpeca
• @kalefranz
• @mingwandroid
• @mbargull
5.9 4.5.4 (2018-05-14)
5.9.1 Improvements
• resolve #7189 progress bar improvement (#7191 via #7274)
5.9.2 Bug Fixes
• fix twofold tarball extraction, improve progress update (#7275)
• fix #7253 always respect copy LinkType (#7269)
5.9.3 Contributors
• @jakirkham
• @kalefranz
• @mbargull
5.10 4.5.3 (2018-05-07)
5.10.1 Bug Fixes
• fix #7240 conda's configuration context is not initialized in conda.exports (#7244)
5.11 4.5.2 (2018-04-27)
5.11.1 Bug Fixes
• fix #7107 verify hangs when a package is corrupted (#7223)
• fix #7094 exit early for -dry-run with explicit and clone (#7224)
• fix activation/deactivation script sort order (#7225)
5.12 4.5.1 (2018-04-13)
5.12.1 Improvements
• resolve #7075 add anaconda.org search message to PackagesNotFoundError (#7076)
• add CondaError details to auto-upload reports (#7060)
5.9. 4.5.4 (2018-05-14)
5.12.2 Bug Fixes
• fix #6703,#6981 index out of bound when running deactivate on fish shell (#6993)
• properly close over $_CONDA_EXE variable (#7004)
• fix condarc map parsing with comments (#7021)
• fix #6919 csh prompt (#7041)
• add _file_created attribute (#7054)
• fix handling of non-ascii characters in custom_multichannels (#7050)
• fix #6877 handle non-zero return in CSH (#7042)
• fix #7040 update tqdm to version 4.22.0 (#7157)
5.13 4.5.0 (2018-03-20)
5.13.1 New Feature Highlights
• A new flag, '-envs', has been added to 'conda search'. In this mode, 'conda search' will look for the package query in existing conda environments on your system. If ran as UID 0 (i.e. root) on unix systems or as an Administrator user on Windows, all known conda environments for all users on the system will be searched. For example, 'conda search -envs openssl' will show the openssl version and environment location for all condainstalled openssl packages.
5.13.2 Deprecations/Breaking Changes
• resolve #6886 transition defaults from repo.continuum.io to repo.anaconda.com (#6887)
• resolve #6192 deprecate 'conda help' in favor of -help CLI flag (#6918)
• resolve #6894 add http errors to auto-uploaded error reports (#6895)
5.13.3 Improvements
• resolve #6791 conda search -envs (#6794)
• preserve exit status in fish shell (#6760)
• resolve #6810 add CONDA_EXE environment variable to activate (#6923)
• resolve #6695 outdated conda warning respects -quiet flag (#6935)
• add instructions to activate default environment (#6944)
5.13.4 API
• resolve #5610 add PrefixData, SubdirData, and PackageCacheData to conda/api.py (#6922)
5.13.5 Bug Fixes
• channel matchspec fixes (#6893)
• fix #6930 add missing return statement to S3Adapter (#6931)
• fix #5802, #6736 enforce disallowed_packages configuration parameter (#6932)
• fix #6860 infinite recursion in resolve.py for empty track_features (#6928)
• set encoding for PY2 stdout/stderr (#6951)
• fix #6821 non-deterministic behavior from MatchSpec merge clobbering (#6956)
• fix #6904 logic errors in prefix graph data structure (#6929)
5.13.6 Non-User-Facing Changes
• fix several lgtm.com flags (#6757, #6883)
• cleanups and refactors for conda 4.5 (#6889)
• unify location of record types in conda/models/records.py (#6924)
• resolve #6952 memoize url search in package cache loading (#6957)
5.14 4.4.11 (2018-02-23)
5.14.1 Improvements
• resolve #6582 swallow_broken_pipe context manager and Spinner refactor (#6616)
• resolve #6882 document max_shlvl (#6892)
• resolve #6733 make empty env vars sequence-safe for sequence parameters (#6741)
• resolve #6900 don't record conda skeleton environments in environments.txt (#6908)
5.14.2 Bug Fixes
• fix potential error in ensure_pad(); add more tests (#6817)
• fix #6840 handle error return values in conda.sh (#6850)
• use conda.gateways.disk for misc.py imports (#6870)
• fix #6672 don't update conda during conda-env operations (#6773)
• fix #6811 don't attempt copy/remove fallback for rename failures (#6867)
• fix #6667 aliased posix commands (#6669)
• fix #6816 fish environment autocomplete (#6885)
• fix #6880 build_number comparison not functional in match_spec (#6881)
• fix #6910 sort key prioritizes build string over build number (#6911)
• fix #6914, #6691 conda can fail to update packages even though newer versions exist (#6921)
• fix #6899 handle Unicode output in activate commands (#6909)
5.14. 4.4.11 (2018-02-23)
5.15 4.4.10 (2018-02-09)
5.15.1 Bug Fixes
• fix #6837 require at least futures 3.0.0 (#6855)
• fix #6852 ensure temporary path is writable (#6856)
• fix #6833 improve feature mismatch metric (via 4.3.34 #6853)
5.16 4.4.9 (2018-02-06)
5.16.1 Improvements
• resolve #6632 display package removal plan when deleting an env (#6801)
5.16.2 Bug Fixes
• fix #6531 don't drop credentials for conda-build workaround (#6798)
• fix external command execution issue (#6789)
• fix #5792 conda env export error common in path (#6795)
• fix #6390 add CorruptedEnvironmentError (#6778)
• fix #5884 allow -insecure CLI flag without contradicting meaning of ssl_verify (#6782)
• fix MatchSpec.match() accepting dict (#6808)
• fix broken Anaconda Prompt for users with spaces in paths (#6825)
• JSONDecodeError was added in Python 3.5 (#6848)
• fix #6796 update PATH/prompt on reactivate (#6828)
• fix #6401 non-ascii characters on windows using expanduser (#6847)
• fix #6824 import installers before invoking any (#6849)
5.17 4.4.8 (2018-01-25)
5.17.1 Improvements
• allow falsey values for default_python to avoid pinning python (#6682)
• resolve #6700 add message for no space left on device (#6709)
• make variable 'sourced' local for posix shells (#6726)
• add column headers to conda list results (#5726)
5.17.2 Bug Fixes
• fix #6713 allow parenthesis in prefix path for conda.bat (#6722)
• fix #6684 -force message (#6723)
• fix #6693 KeyError with '-update-deps' (#6694)
• fix aggressive_update_packages availability (#6727)
• fix #6745 don't truncate channel priority map in conda installer (#6746)
• add workaround for system Python usage by lsb_release (#6769)
• fix #6624 can't start new thread (#6653)
• fix #6628 'conda install -rev' in conda 4.4 (#6724)
• fix #6707 FileNotFoundError when extracting tarball (#6708)
• fix #6704 unexpected token in conda.bat (#6710)
• fix #6208 return for no pip in environment (#6784)
• fix #6457 env var cleanup (#6790)
• fix #6645 escape paths for argparse help (#6779)
• fix #6739 handle unicode in environment variables for py2 activate (#6777)
• fix #6618 RepresenterError with 'conda config -set' (#6619)
• fix #6699 suppress memory error upload reports (#6776)
• fix #6770 CRLF for cmd.exe (#6775)
• fix #6514 add message for case-insensitive filesystem errors (#6764)
• fix #6537 AttributeError value for url not set (#6754)
• fix #6748 only warn if unable to register environment due to EACCES (#6752)
5.18 4.4.7 (2018-01-08)
5.18.1 Improvements
• resolve #6650 add upgrade message for unicode errors in python 2 (#6651)
5.18.2 Bug Fixes
• fix #6643 difference between == and exact_match_ (#6647)
• fix #6620 KeyError(u'CONDA_PREFIX',) (#6652)
• fix #6661 remove env from environments.txt (#6662)
• fix #6629 'conda update -name' AssertionError (#6656)
• fix #6630 repodata AssertionError (#6657)
• fix #6626 add setuptools as constrained dependency (#6654)
• fix #6659 conda list explicit should be dependency sorted (#6671)
5.18. 4.4.7 (2018-01-08)
• fix #6665 KeyError for channel '<unknown>' (#6668, #6673)
• fix #6627 AttributeError on 'conda activate' (#6655)
5.19 4.4.6 (2017-12-31)
5.19.1 Bug Fixes
• fix #6612 do not assume Anaconda Python on Windows nor Librarybin hack (#6615)
• recipe test improvements and associated bug fixes (#6614)
5.20 4.4.5 (2017-12-29)
5.20.1 Bug Fixes
• fix #6577, #6580 single quote in PS1 (#6585)
• fix #6584 os.getcwd() FileNotFound (#6589)
• fix #6592 deactivate command order (#6602)
• fix #6579 python not recognized as command (#6588)
• fix #6572 cached repodata PermissionsError (#6573)
• change instances of 'root' to 'base' (#6598)
• fix #6607 use subprocess rather than execv for conda command extensions (#6609)
• fix #6581 git-bash activation (#6587)
• fix #6599 space in path to base prefix (#6608)
5.21 4.4.4 (2017-12-24)
5.21.1 Improvements
• add SUDO_ env vars to info reports (#6563)
• add additional information to the #6546 exception (#6551)
5.21.2 Bug Fixes
• fix #6548 'conda update' installs packages not in prefix #6550
• fix #6546 update after creating an empty env (#6568)
• fix #6557 conda list FileNotFoundError (#6558)
• fix #6554 package cache FileNotFoundError (#6555)
• fix #6529 yaml parse error (#6560)
• fix #6562 repodata_record.json permissions error stack trace (#6564)
• fix #6520 -use-local flag (#6526)
5.22 4.4.3 (2017-12-22)
5.22.1 Improvements
• adjust error report message (#6534)
5.22.2 Bug Fixes
• fix #6530 package cache JsonDecodeError / ValueError (#6533)
• fix #6538 BrokenPipeError (#6540)
• fix #6532 remove anaconda metapackage hack (#6539)
• fix #6536 'conda env export' for old versions of pip (#6535)
• fix #6541 py2 and unicode in environments.txt (#6542)
5.22.3 Non-User-Facing Changes
• regression tests for #6512 (#6515)
5.23 4.4.2 (2017-12-22)
5.23.1 Deprecations/Breaking Changes
• resolve #6523 don't prune with -update-all (#6524)
5.23.2 Bug Fixes
• fix #6508 environments.txt permissions error stack trace (#6511)
• fix #6522 error message formatted incorrectly (#6525)
• fix #6516 hold channels over from get_index to install_actions (#6517)
5.24 4.4.1 (2017-12-21)
5.24.1 Bug Fixes
• fix #6512 reactivate does not accept arguments (#6513)
5.22. 4.4.3 (2017-12-22)
5.25 4.4.0 (2017-12-20)
5.25.1 Recommended change to enable conda in your shell
With the release of conda 4.4, we recommend a change to how the conda command is made available to your shell environment. All the old methods still work as before, but you'll need the new method to enable the new conda activate and conda deactivate commands.
For the "Anaconda Prompt" on Windows, there is no change.
For Bourne shell derivatives (bash, zsh, dash, etc.), you likely currently have a line similar to:
export PATH="/opt/conda/bin:$PATH"
in your ~/.bashrc file (or ~/.bash_profile file on macOS). The effect of this line is that your base environment is put on PATH, but without actually activating that environment. (In 4.4 we've renamed the 'root' environment to the 'base' environment.) With conda 4.4, we recommend removing the line where the PATH environment variable is modified, and replacing it with:
. /opt/conda/etc/profile.d/conda.sh conda activate base
In the above, it's assumed that /opt/conda is the location where you installed miniconda or Anaconda. It may also be something like ~/Anaconda3 or ~/miniconda2.
For system-wide conda installs, to make the conda command available to all users, rather than manipulating individual ~/.bashrc (or ~/.bash_profile) files for each user, just execute once:
$ sudo ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
This will make the conda command itself available to all users, but conda's base (root) environment will not be activated by default. Users will still need to run conda activate base to put the base environment on PATH and gain access to the executables in the base environment.
After updating to conda 4.4, we also recommend pinning conda to a specific channel. For example, executing the command:
$ conda config --system --add pinned_packages conda-canary::conda
will make sure that whenever conda is installed or changed in an environment, the source of the package is always being pulled from the conda-canary channel. This will be useful for people who use conda-forge, to prevent conda from flipping back and forth between 4.3 and 4.4.
5.25.2 New Feature Highlights
• conda activate: The logic and mechanisms underlying environment activation have been reworked. With conda 4.4, conda activate and conda deactivate are now the preferred commands for activating and deactivating environments. You'll find they are much more snappy than the source activate and source deactivate commands from previous conda versions. The conda activate command also has advantages of (1) being universal across all OSes, shells, and platforms, and (2) not having path collisions with scripts from other packages like python virtualenv's activate script.
• constrained, optional dependencies: Conda now allows a package to constrain versions of other packages installed alongside it, even if those constrained packages are not themselves hard dependencies for that package. In other words, it lets a package specify that, if another package ends up being installed into an environment, it must at least conform to a certain version specification. In effect, constrained dependencies are a type of

"reverse" dependency. It gives a tool to a parent package to exclude other packages from an environment that might otherwise want to depend on it.
Constrained optional dependencies are supported starting with conda-build 3.0 (via conda/conda-build#2001). A new run_constrained keyword, which takes a list of package specs similar to the run keyword, is recognized under the requirements section of meta.yaml. For backward compatibility with versions of conda older than 4.4, a requirement may be listed in both the run and the run_constrained section. In that case older versions of conda will see the package as a hard dependency, while conda 4.4 will understand that the package is meant to be optional.
Optional, constrained dependencies end up in repodata.json under a constrains keyword, parallel to the depends keyword for a package's hard dependencies.
• enhanced package query language: Conda has a built-in query language for searching for and matching packages, what we often refer to as MatchSpec. The MatchSpec is what users input on the command line when they specify packages for create, install, update, and remove operations. With this release, MatchSpec (rather than a regex) becomes the default input for conda search. We have also substantially enhanced our MatchSpec query language.
For example:
conda install conda-forge::python
is now a valid command, which specifies that regardless of the active list of channel priorities, the python package itself should come from the conda-forge channel. As before, the difference between python=3.5 and python==3.5 is that the first contains a "fuzzy" version while the second contains an exact version. The fuzzy spec will match all python packages with versions >=3.5 and <3.6. The exact spec will match only python packages with version 3.5, 3.5.0, 3.5.0.0, etc. The canonical string form for a MatchSpec is thus:
(channel::)name(version(build_string))
which should feel natural to experienced conda users. Specifications however are often necessarily more complicated than this simple form can support, and for these situations we've extended the specification to include an optional square bracket [] component containing comma-separated key-value pairs to allow matching on most any field contained in a package's metadata. Take, for example:
conda search 'conda-forge/linux-64::*[md5=e42a03f799131d5af4196ce31a1084a7]' --
,→info
which results in information for the single package:
cytoolz 0.8.2 py35_0 --------------------
file name	: cytoolz-0.8.2-py35_0.tar.bz2
name	: cytoolz version	: 0.8.2
build string: py35_0 build number: 0
size	: 1.1 MB arch	: x86_64
platform	: Platform.linux license	: BSD 3-Clause subdir	: linux-64
url	: https://conda.anaconda.org/conda-forge/linux-64/cytoolz-0.8.2-py35_
,→0.tar.bz2
md5	: e42a03f799131d5af4196ce31a1084a7 dependencies:(continues on next page)
(continued from previous page)
- python 3.5*
- toolz >=0.8.0
The square bracket notation can also be used for any field that we match on outside the package name, and will override information given in the "simple form" position. To give a contrived example, python==3.5[version='>=2.7,<2.8'] will match 2.7.* versions and not 3.5.
• environments track user-requested state: Building on our enhanced MatchSpec query language, conda environments now also track and differentiate (a) packages added to an environment because of an explicit user request from (b) packages brought into an environment to satisfy dependencies. For example, executing:
conda install conda-forge::scikit-learn
will confine all future changes to the scikit-learn package in the environment to the conda-forge channel, until the spec is changed again. A subsequent command conda install scikit-learn=0.18 would drop the conda-forge channel restriction from the package. And in this case, scikit-learn is the only user-defined spec, so the solver chooses dependencies from all configured channels and all available versions.
• errors posted to core maintainers: In previous versions of conda, unexpected errors resulted in a request for users to consider posting the error as a new issue on conda's github issue tracker. In conda 4.4, we've implemented a system for users to opt-in to sending that same error report via an HTTP POST request directly to the core maintainers.
When an unexpected error is encountered, users are prompted with the error report followed by a [y/N] input. Users can elect to send the report, with 'no' being the default response. Users can also permanently opt-in or opt-out, thereby skipping the prompt altogether, using the boolean report_errors configuration parameter.
• various UI improvements: To push through some of the big leaps with transactions in conda 4.3, we accepted some regressions on progress bars and other user interface features. All of those indicators of progress, and more, have been brought back and further improved.
• aggressive updates: Conda now supports an aggressive_update_packages configuration parameter that holds a sequence of MatchSpec strings, in addition to the pinned_packages configuration parameter. Currently, the default value contains the packages ca-certificates, certifi, and openssl. When manipulating configuration with the conda config command, use of the -system and -env flags will be especially helpful here. For example:
conda config --add aggressive_update_packages defaults::pyopenssl --system
would ensure that, system-wide, solves on all environments enforce using the latest version of pyopenssl from the defaults channel.
`conda config --add pinned_packages python=2.7 --env`
would lock all solves for the current active environment to python versions matching 2.7.*.
• other configuration improvements: In addition to conda config -describe, which shows detailed descriptions and default values for all available configuration parameters, we have a new conda config -write-default command. This new command simply writes the contents of conda config -describe to a condarc file, which is a great starter template. Without additional arguments, the command will write to the .condarc file in the user's home directory. The command also works with the -system, -env, and -file flags to write the contents to alternate locations.
Conda exposes a tremendous amount of flexibility via configuration. For more information, The Conda Configuration Engine for Power Users blog post is a good resource.
5.25.3 Deprecations/Breaking Changes
• the conda 'root' environment is now generally referred to as the 'base' environment
• Conda 4.4 now warns when available information about per-path sha256 sums and file sizes do not match the recorded information. The warning is scheduled to be an error in conda 4.5. Behavior is configurable via the safety_checks configuration parameter.
• remove support for with_features_depends (#5191)
• resolve #5468 remove -alt-hint from CLI API (#5469)
• resolve #5834 change default value of 'allow_softlinks' from True to False (#5835)
• resolve #5842 add deprecation warnings for 'conda env upload' and 'conda env attach' (#5843)
5.25.4 API
• Add Solver from conda.core.solver with three methods to conda.api (4.4.0rc1) (#5838)
5.25.5 Improvements
• constrained, optional dependencies (#4982)
• conda shell function (#5044, #5141, #5162, #5169, #5182, #5210, #5482)
• resolve #5160 conda xontrib plugin (#5157)
• resolve #1543 add support and tests for -no-deps and -only-deps (#5265)
• resolve #988 allow channel name to be part of the package name spec (#5365, #5791)
• resolve #5530 add ability for users to choose to post unexpected errors to core maintainers (#5531, #5571, #5585)
• Solver, UI, History, and Other (#5546, #5583, #5740)
• improve 'conda search' to leverage new MatchSpec query language (#5597)
• filter out unwritable package caches from conda clean command (#4620)
• envs_manager, requested spec history, declarative solve, and private env tests (#4676, #5114, #5094, #5145, #5492)
• make python entry point format match pip entry points (#5010)
• resolve #5113 clean up CLI imports to improve process startup time (#4799)
• resolve #5121 add features/track_features support for MatchSpec (#5054)
• resolve #4671 hold verify backoff count in transaction context (#5122)
• resolve #5078 record package metadata after tarball extraction (#5148)
• resolve #3580 support stacking environments (#5159)
• resolve #3763, #4378 allow pip requirements.txt syntax in environment files (#3969)
• resolve #5147 add 'config files' to conda info (#5269)
• use -format=json to parse list of pip packages (#5205)
• resolve #1427 remove startswith '.' environment name constraint (#5284)
• link packages from extracted tarballs when tarball is gone (#5289)
• resolve #2511 accept config information from stdin (#5309)
• resolve #4302 add ability to set map parameters with conda config (#5310)
• resolve #5256 enable conda config -get for all primitive parameters (#5312)
• resolve #1992 add short flag -C for -use-index-cache (#5314)
• resolve #2173 add -quiet option to conda clean (#5313)
• resolve #5358 conda should exec to subcommands, not subprocess (#5359)
• resolve #5411 add 'conda config -write-default' (#5412)
• resolve #5081 make pinned packages optional dependencies (#5414)
• resolve #5430 eliminate current deprecation warnings (#5422)
• resolve #5470 make stdout/stderr capture in python_api customizable (#5471)
• logging simplifications/improvements (#5547, #5578)
• update license information (#5568)
• enable threadpool use for repodata collection by default (#5546, #5587)
• conda info now raises PackagesNotFoundError (#5655)
• index building optimizations (#5776)
• fix #5811 change safety_checks default to 'warn' for conda 4.4 (4.4.0rc1) (#5824)
• add constrained dependencies to conda's own recipe (4.4.0rc1) (#5823)
• clean up parser imports (4.4.0rc2) (#5844)
• resolve #5983 add -download-only flag to create, install, and update (4.4.0rc2) (#5988)
• add ca-certificates and certifi to aggressive_update_packages default (4.4.0rc2) (#5994)
• use environments.txt to list all known environments (4.4.0rc2) (#6313)
• resolve #5417 ensure unlink order is correctly sorted (4.4.0) (#6364)
• resolve #5370 index is only prefix and cache in -offline mode (4.4.0) (#6371)
• reduce redundant sys call during file copying (4.4.0rc3) (#6421)
• enable aggressive_update_packages (4.4.0rc3) (#6392)
• default conda.sh to dash if otherwise can't detect (4.4.0rc3) (#6414)
• canonicalize package names when comparing with pip (4.4.0rc3) (#6438)
• add target prefix override configuration parameter (4.4.0rc3) (#6413)
• resolve #6194 warn when conda is outdated (4.4.0rc3) (#6370)
• add information to displayed error report (4.4.0rc3) (#6437)
• csh wrapper (4.4.0) (#6463)
• resolve #5158 -override-channels (4.4.0) (#6467)
• fish update for conda 4.4 (4.4.0) (#6475, #6502)
• skip an unnecessary environments.txt rewrite (4.4.0) (#6495)
5.25.6 Bug Fixes
• fix some conda-build compatibility issues (#5089)
• resolve #5123 export toposort (#5124)
• fix #5132 signal handler can only be used in main thread (#5133)
• fix orphaned -clobber parser arg (#5188)
• fix #3814 don't remove directory that's not a conda environment (#5204)
• fix #4468 _license stack trace (#5206)
• fix #4987 conda update -all no longer displays full list of packages (#5228)
• fix #3489 don't error on remove -all if environment doesn't exist (#5231)
• fix #1509 bash doesn't need full path for pre/post link/unlink scripts on unix (#5252)
• fix #462 add regression test (#5286)
• fix #5288 confirmation prompt doesn't accept no (#5291)
• fix #1713 'conda package -w' is case dependent on Windows (#5308)
• fix #5371 try falling back to pip's vendored requests if no requests available (#5372)
• fix #5356 skip root logger configuration (#5380)
• fix #5466 scrambled URL of non-alias channel with token (#5467)
• fix #5444 environment.yml file not found (#5475)
• fix #3200 use proper unbound checks in bash code and test (#5476)
• invalidate PrefixData cache on rm_rf for conda-build (#5491, #5499)
• fix exception when generating JSON output (#5628)
• fix target prefix determination (#5642)
• use proxy to avoid segfaults (#5716)
• fix #5790 incorrect activation message (4.4.0rc1) (#5820)
• fix #5808 assertion error when loading package cache (4.4.0rc1) (#5815)
• fix #5809 _pip_install_via_requirements got an unexpected keyword argument 'prune' (4.4.0rc1) (#5814)
• fix #5811 change safety_checks default to 'warn' for conda 4.4 (4.4.0rc1) (#5824)
• fix #5825 -json output format (4.4.0rc1) (#5831)
• fix force_reinstall for case when packages aren't actually installed (4.4.0rc1) (#5836)
• fix #5680 empty pip subsection error in environment.yml (4.4.0rc2) (#6275)
• fix #5852 bad tokens from history crash conda installs (4.4.0rc2) (#6076)
• fix #5827 no error message on invalid command (4.4.0rc2) (#6352)
• fix exception handler for 'conda activate' (4.4.0rc2) (#6365)
• fix #6173 double prompt immediately after conda 4.4 upgrade (4.4.0rc2) (#6351)
• fix #6181 keep existing pythons pinned to minor version (4.4.0rc2) (#6363)
• fix #6201 incorrect subdir shown for conda search when package not found (4.4.0rc2) (#6367)
• fix #6045 help message and zsh shift (4.4.0rc3) (#6368)
• fix noarch python package resintall (4.4.0rc3) (#6394)
• fix #6366 shell activation message (4.4.0rc3) (#6369)
• fix #6429 AttributeError on 'conda remove' (4.4.0rc3) (#6434)
• fix #6449 problems with 'conda info -envs' (#6451)
• add debug exception for #6430 (4.4.0rc3) (#6435)
• fix #6441 NotImplementedError on 'conda list' (4.4.0rc3) (#6442)
• fix #6445 scale back directory activation in PWD (4.4.0rc3) (#6447)
• fix #6283 no-deps for conda update case (4.4.0rc3) (#6448)
• fix #6419 set PS1 in python code (4.4.0rc3) (#6446)
• fix #6466 sp_dir doesn't exist (#6470)
• fix #6350 -update-all removes too many packages (4.4.0) (#6491)
• fix #6057 unlink-link order for python noarch packages on windows 4.4.x (4.4.0) (#6494)
5.25.7 Non-User-Facing Changes
• eliminate index modification in Resolve init (#4333)
• new MatchSpec implementation (#4158, #5517)
• update conda.recipe for 4.4 (#5086)
• resolve #5118 organization and cleanup for 4.4 release (#5115)
• remove unused disk space check instructions (#5167)
• localfs adapter tests (#5181)
• extra config command tests (#5185)
• add coverage for confirm (#5203)
• clean up FileNotFoundError and DirectoryNotFoundError (#5237)
• add assertion that a path only has a single hard link before rewriting prefixes (#5305)
• remove pycrypto as requirement on windows (#5326)
• import cleanup, dead code removal, coverage improvements, and other housekeeping (#5472, #5474, #5480)
• rename CondaFileNotFoundError to PathNotFoundError (#5521)
• work toward repodata API (#5267)
• rename PackageNotFoundError to PackagesNotFoundError and fix message formatting (#5602)
• update conda 4.4 bld.bat windows recipe (#5573)
• remove last remnant of CondaEnvRuntimeError (#5643)
• fix typo (4.4.0rc2) (#6043)
• replace Travis-CI with CircleCI (4.4.0rc2) (#6345)
• key-value features (#5645); reverted in 4.4.0rc2 (#6347, #6492)
• resolve #6431 always add env_vars to info_dict (4.4.0rc3) (#6436)

• move shell inside conda directory (4.4.0) (#6479)
• remove dead code (4.4.0) (#6489)
5.26 4.3.34 (2018-02-09)
5.26.1 Bug Fixes
• fix #6833 improve feature mismatch metric (#6853)
5.27 4.3.33 (2018-01-24)
5.27.1 Bug Fixes
• fix #6718 broken 'conda install -rev' (#6719)
• fix #6765 adjust the feature score assigned to packages not installed (#6766)
5.28 4.3.32 (2018-01-10)
5.28.1 Improvements
• resolve #6711 fall back to copy/unlink for EINVAL, EXDEV rename failures (#6712)
5.28.2 Bug Fixes
• fix #6057 unlink-link order for python noarch packages on windows (#6277)
• fix #6509 custom_channels incorrect in 'conda config -show' (#6510)
5.29 4.3.31 (2017-12-15)
5.29.1 Improvements
• add delete_trash to conda_env create (#6299)
5.29.2 Bug Fixes
• fix #6023 assertion error for temp file (#6154)
• fix #6220 -no-builds flag for 'conda env export' (#6221)
• fix #6271 timestamp prioritization results in undesirable race-condition (#6279)
5.26. 4.3.34 (2018-02-09)
5.29.3 Non-User-Facing Changes
• fix two failing integration tests after anaconda.org API change (#6182)
• resolve #6243 mark root as not writable when sys.prefix is not a conda environment (#6274)
• add timing instrumentation (#6458)
5.30 4.3.30 (2017-10-17)
5.30.1 Improvements
• address #6056 add additional proxy variables to 'conda info -all' (#6083)
5.30.2 Bug Fixes
• address #6164 move add_defaults_to_specs after augment_specs (#6172)
• fix #6057 add additional detail for message 'cannot link source that does not exist' (#6082)
• fix #6084 setting default_channels from CLI raises NotImplementedError (#6085)
5.31 4.3.29 (2017-10-09)
5.31.1 Bug Fixes
• fix #6096 coerce to millisecond timestamps (#6131)
5.32 4.3.28 (2017-10-06)
5.32.1 Bug Fixes
• fix #5854 remove imports of pkg_resources (#5991)
• fix millisecond timestamps (#6001)
5.33 4.3.27 (2017-09-18)
5.33.1 Bug Fixes
• fix #5980 always delete_prefix_from_linked_data in rm_rf (#5982)
5.34 4.3.26 (2017-09-15)
5.34.1 Deprecations/Breaking Changes
• resolve #5922 prioritize channels within multi-channels (#5923)
• add https://repo.continuum.io/pkgs/main to defaults multi-channel (#5931)
5.34.2 Improvements
• add a channel priority minimization pass to solver logic (#5859)
• invoke cmd.exe with /D for pre/post link/unlink scripts (#5926)
• add boto3 use to s3 adapter (#5949)
5.34.3 Bug Fixes
• always remove linked prefix entry with rm_rf (#5846)
• resolve #5920 bump repodata pickle version (#5921)
• fix msys2 activate and deactivate (#5950)
5.35 4.3.25 (2017-08-16)
5.35.1 Deprecations/Breaking Changes
• resolve #5834 change default value of 'allow_softlinks' from True to False (#5839)
5.35.2 Improvements
• add non-admin check to optionally disable non-privileged operation (#5724)
• add extra warning message to always_softlink configuration option (#5826)
5.35.3 Bug Fixes
• fix #5763 channel url string splitting error (#5764)
• fix regex for repodata _mod and _etag (#5795)
• fix uncaught OSError for missing device (#5830)
5.36 4.3.24 (2017-07-31)
5.36.1 Bug Fixes
• fix #5708 package priority sort order (#5733)
5.34. 4.3.26 (2017-09-15)
5.37 2017-07-21 4.3.23
5.37.1 Improvements
• resolve #5391 PackageNotFound and NoPackagesFoundError clean up (#5506)
5.37.2 Bug Fixes
• fix #5525 too many Nones in CondaHttpError (#5526)
• fix #5508 assertion failure after test file not cleaned up (#5533)
• fix #5523 catch OSError when home directory doesn't exist (#5549)
• fix #5574 traceback formatting (#5580)
• fix #5554 logger configuration levels (#5555)
• fix #5649 create_default_packages configuration (#5703)
5.38 2017-06-12 4.3.22
5.38.1 Improvements
• resolve #5428 clean up cli import in conda 4.3.x (#5429)
• resolve #5302 add warning when creating environment with space in path (#5477)
• for ftp connections, ignore host IP from PASV as it is often wrong (#5489)
• expose common race condition exceptions in exports for conda-build (#5498)
5.38.2 Bug Fixes
• fix #5451 conda clean -json bug (#5452)
• fix #5400 confusing deactivate message (#5473)
• fix #5459 custom subdir channel parsing (#5478)
• fix #5483 problem with setuptools / pkg_resources import (#5496)
5.39 2017-05-25 4.3.21
5.39.1 Bug Fixes
• fix #5420 conda-env update error (#5421)
• fix #5425 is admin on win int not callable (#5426)
5.40 2017-05-23 4.3.20
5.40.1 Improvements
• resolve #5217 skip user confirm in python_api, force always_yes (#5404)
5.40.2 Bug Fixes
• fix #5367 conda info always shows 'unknown' for admin indicator on Windows (#5368)
• fix #5248 drop plan description information that might not alwasy be accurate (#5373)
• fix #5378 duplicate log messages (#5379)
• fix #5298 record has 'build', not 'build_string' (#5382)
• fix #5384 silence logging info to avoid interfering with JSON output (#5393)
• fix #5356 skip root/conda logger init for cli.python_api (#5405)
5.40.3 Non-User-Facing Changes
• avoid persistent state after channel priority test (#5392)
• resolve #5402 add regression test for #5384 (#5403)
• clean up inner function definition inside for loop (#5406)
5.41 2017-05-18 4.3.19
5.41.1 Improvements
• resolve #3689 better error messaging for missing anaconda-client (#5276)
• resolve #4795 conda env export lacks -p flag (#5275)
• resolve #5315 add alias verify_ssl for ssl_verify (#5316)
• resolve #3399 add netrc existence/location to 'conda info' (#5333)
• resolve #3810 add -prefix to conda env update (#5335)
5.41.2 Bug Fixes
• fix #5272 conda env export ugliness under python2 (#5273)
• fix #4596 warning message from pip on conda env export (#5274)
• fix #4986 -yes not functioning for conda clean (#5311)
• fix #5329 unicode errors on Windows (#5328, #5357)
• fix sys_prefix_unfollowed for Python 3 (#5334)
• fix #5341 -json flag with conda-env (#5342)
• fix 5321 ensure variable PROMPT is set in activate.bat (#5351)
5.40. 2017-05-23 4.3.20
5.41.3 Non-User-Facing Changes
• test conda 4.3 with requests 2.14.2 (#5281)
• remove pycrypto as requirement on windows (#5325)
• fix typo avaialble -> available (#5345)
• fix test failures related to menuinst update (#5344, #5362)
5.42 2017-05-09 4.3.18
5.42.1 Improvements
• resolve #4224 warn when pysocks isn't installed (#5226)
• resolve #5229 add -insecure flag to skip ssl verification (#5230)
• resolve #4151 add admin indicator to conda info on windows (#5241)
5.42.2 Bug Fixes
• fix #5152 conda info spacing (#5166)
• fix -use-index-cache actually hitting the index cache (#5134)
• backport LinkPathAction verify from 4.4 (#5171)
• fix #5184 stack trace on invalid map configuration parameter (#5186)
• fix #5189 stack trace on invalid sequence config param (#5192)
• add support for the linux-aarch64 platform (#5190)
• fix repodata fetch with the -offline flag (#5146)
• fix #1773 conda remove spell checking (#5176)
• fix #3470 reduce excessive error messages (#5195)
• fix #1597 make extra sure -dry-run doesn't take any actions (#5201)
• fix #3470 extra newlines around exceptions (#5200)
• fix #5214 install messages for 'nothing_to_do' case (#5216)
• fix #598 stack trace for condarc write permission denied (#5232)
• fix #4960 extra information when exception can't be displayed (#5236)
• fix #4974 no matching dist in linked data for prefix (#5239)
• fix #5258 give correct element types for conda config -describe (#5259)
• fix #4911 separate shutil.copy2 into copy and copystat (#5261)
5.42.3 Non-User-Facing Changes
• resolve #5138 add test of rm_rf of symlinked files (#4373)
• resolve #4516 add extra trace-level logging (#5249, #5250)
• add tests for -update-deps flag (#5264)
5.43 2017-04-24 4.3.17
5.43.1 Improvements
• fall back to copy if hardlink fails (#5002)
• add timestamp metadata for tiebreaking conda-build 3 hashed packages (#5018)
• resolve #5034 add subdirs configuration parameter (#5030)
• resolve #5081 make pinned packages optional/constrained dependencies (#5088)
• resolve #5108 improve behavior and add tests for spaces in paths (#4786)
5.43.2 Bug Fixes
• quote prefix paths for locations with spaces (#5009)
• remove binstar logger configuration overrides (#4989)
• fix #4969 error in DirectoryNotFoundError (#4990)
• fix #4998 pinned string format (#5011)
• fix #5039 collecting main_info shouldn't fail on requests import (#5090)
• fix #5055 improve bad token message for anaconda.org (#5091)
• fix #5033 only re-register valid signal handlers (#5092)
• fix #5028 imports in main_list (#5093)
• fix #5073 allow client_ssl_cert{_key} to be of type None (#5096)
• fix #4671 backoff for package validate race condition (#5098)
• fix #5022 gnu_get_libc_version => linux_get_libc_version (#5099)
• fix #4849 package name match bug (#5103)
• fixes #5102 allow proxy_servers to be of type None (#5107)
• fix #5111 incorrect typify for str + NoneType (#5112)
5.43.3 Non-User-Facing Changes
• resolve #5012 remove CondaRuntimeError and RuntimeError (#4818)
• full audit ensuring relative import paths within project (#5090)
• resolve #5116 refactor conda/cli/activate.py to help menuinst (#4406)
5.43. 2017-04-24 4.3.17
5.44 2017-03-30 4.3.16
5.44.1 Improvements
• additions to configuration SEARCH_PATH to improve consistency (#4966)
• add 'conda config -describe' and extra config documentation (#4913)
• enable packaging pinning in condarc using pinned_packages config parameter as beta feature (#4921, #4964)
5.44.2 Bug Fixes
• fix #4914 handle directory creation on top of file paths (#4922)
• fix #3982 issue with CONDA_ENV and using powerline (#4925)
• fix #2611 update instructions on how to source conda.fish (#4924)
• fix #4860 missing information on package not found error (#4935)
• fix #4944 command not found error error (#4963)
5.45 2017-03-20 4.3.15
5.45.1 Improvements
• allow pkgs_dirs to be configured using conda config (#4895)
5.45.2 Bug Fixes
• remove incorrect elision of delete_prefix_from_linked_data() (#4814)
• fix envs_dirs order for read-only root prefix (#4821)
• fix break-point in conda clean (#4801)
• fix long shebangs when creating entry points (#4828)
• fix spelling and typos (#4868, #4869)
• fix #4840 TypeError reduce() of empty sequence with no initial value (#4843)
• fix zos subdir (#4875)
• fix exceptions triggered during activate (#4873)
5.46 2017-03-03 4.3.14
5.46.1 Improvements
• use cPickle in place of pickle for repodata (#4717)
• ignore pyc compile failure (#4719)
• use conda.exe for windows entry point executable (#4716, #4720)
• localize use of conda_signal_handler (#4730)
• add skip_safety_checks configuration parameter (#4767)
• never symlink executables using ORIGIN (#4625)
• set activate.bat codepage to CP_ACP (#4558)
5.46.2 Bug Fixes
• fix #4777 package cache initialization speed (#4778)
• fix #4703 menuinst PathNotFoundException (#4709)
• ignore permissions error if user_site can't be read (#4710)
• fix #4694 don't import requests directly in models (#4711)
• fix #4715 include resources directory in recipe (#4716)
• fix CondaHttpError for URLs that contain '%' (#4769)
• bug fixes for preferred envs (#4678)
• fix #4745 check for info/index.json with package is_extracted (#4776)
• make sure url gets included in CondaHTTPError (#4779)
• fix #4757 map-type configs set to None (#4774)
• fix #4788 partial package extraction (#4789)
5.46.3 Non-User-Facing Changes
• test coverage improvement (#4607)
• CI configuration improvements (#4713, #4773, #4775)
• allow sha256 to be None (#4759)
• add cache_fn_url to exports (#4729)
• add unicode paths for PY3 integration tests (#4760)
• additional unit tests (#4728, #4783)
• fix conda-build compatibility and tests (#4785)
5.47 2017-02-17 4.3.13
5.47.1 Improvements
• resolve #4636 environment variable expansion for pkgs_dirs (#4637)
• link, symlink, islink, and readlink for Windows (#4652, #4661)
• add extra information to CondaHTTPError (#4638, #4672)
5.47. 2017-02-17 4.3.13
5.47.2 Bug Fixes
• maximize requested builds after feature determination (#4647)
• fix #4649 incorrect assert statement concerning package cache directory (#4651)
• multi-user mode bug fixes (#4663)
5.47.3 Non-User-Facing Changes
• path_actions unit tests (#4654)
• remove dead code (#4369, #4655, #4660)
• separate repodata logic from index into a new core/repodata.py module (#4669)
5.48 2017-02-14 4.3.12
5.48.1 Improvements
• prepare conda for uploading to pypi (#4619)
• better general http error message (#4627)
• disable old python noarch warning (#4576)
5.48.2 Bug Fixes
• fix UnicodeDecodeError for ensure_text_type (#4585)
• fix determination of if file path is writable (#4604)
• fix #4592 BufferError cannot close exported pointers exist (#4628)
• fix run_script current working directory (#4629)
• fix pkgs_dirs permissions regression (#4626)
5.48.3 Non-User-Facing Changes
• fixes for tests when conda-bld directory doesn't exist (#4606)
• use requirements.txt and Makefile for travis-ci setup (#4600, #4633)
• remove hasattr use from compat functions (#4634)
5.49 2017-02-09 4.3.11
5.49.1 Bug Fixes
• fix attribute error in add_defaults_to_specs (#4577)
5.50 2017-02-07 4.3.10
5.50.1 Improvements
• remove .json from pickle path (#4498)
• improve empty repodata noarch warning and error messages (#4499)
• don't add python and lua as default specs for private envs (#4529, #4533)
• let default_python be None (#4547, #4550)
5.50.2 Bug Fixes
• fix #4513 null pointer exception for channel without noarch (#4518)
• fix ssl_verify set type (#4517)
• fix bug for windows multiuser (#4524)
• fix clone with noarch python packages (#4535)
• fix ipv6 for python 2.7 on Windows (#4554)
5.50.3 Non-User-Facing Changes
• separate integration tests with a marker (#4532)
5.51 2017-01-31 4.3.9
5.51.1 Improvements
• improve repodata caching for performance (#4478, #4488)
• expand scope of packages included by bad_installed (#4402)
• silence pre-link warning for old noarch (#4451)
• add configuration to optionally require noarch repodata (#4450)
• improve conda subprocessing (#4447)
• respect info/link.json (#4482)
5.51.2 Bug Fixes
• fix #4398 'hard' was used for link type at one point (#4409)
• fixed "No matches for wildcard '$activate_d/*.fish'" warning (#4415)
• print correct activate/deactivate message for fish shell (#4423)
• fix 'Dist' object has no attribute 'fn' (#4424)
• fix noarch generic and add additional integration test (#4431)
• fix #4425 unknown encoding (#4433)
5.50. 2017-02-07 4.3.10
5.51.3 Non-User-Facing Changes
• fail CI on conda-build fail (#4405)
• run doctests (#4414)
• make index record mutable again (#4461)
• additional test for conda list -json (#4480)
5.52 2017-01-23 4.3.8
5.52.1 Bug Fixes
• fix #4309 ignore EXDEV error for directory renames (#4392)
• fix #4393 by force-renaming certain backup files if the path already exists (#4397)
5.53 2017-01-20 4.3.7
5.53.1 Bug Fixes
• actually revert json output for leaky plan (#4383)
• fix not raising on pre/post-link error (#4382)
• fix find_commands and find_executable for symlinks (#4387)
5.54 2017-01-18 4.3.6
5.54.1 Bug Fixes
• fix 'Uncaught backoff with errno 41' warning on windows (#4366)
• revert json output for leaky plan (#4349)
• audit os.environ setting (#4360)
• fix #4324 using old dist string instead of dist object (#4361)
• fix #4351 infinite recursion via code in #4120 (#4370)
• fix #4368 conda -h (#4367)
• workaround for symlink race conditions on activate (#4346)
5.55 2017-01-17 4.3.5
5.55.1 Improvements
• add exception message for corrupt repodata (#4315)
5.55.2 Bug Fixes
• fix package not being found in cache after download (#4297)
• fix logic for Content-Length mismatch (#4311, #4326)
• use unicode_escape after etag regex instead of utf-8 (#4325)
• fix #4323 central condarc file being ignored (#4327)
• fix #4316 a bug in deactivate (#4316)
• pass target_prefix as env_prefix regardless of is_unlink (#4332)
• pass positional argument 'context' to BasicClobberError (#4335)
5.55.3 Non-User-Facing Changes
• additional package pinning tests (#4317)
5.56 2017-01-13 4.3.4
5.56.1 Improvements
• vendor url parsing from urllib3 (#4289)
5.56.2 Bug Fixes
• fix some bugs in windows multi-user support (#4277)
• fix problems with channels of type <unknown> (#4290)
• include aliases for first command-line argument (#4279)
• fix for multi-line FTP status codes (#4276)
5.56.3 Non-User-Facing Changes
• make arch in IndexRecord a StringField instead of EnumField
• improve conda-build compatibility (#4266)
5.57 2017-01-10 4.3.3
5.57.1 Improvements
• respect Cache-Control max-age header for repodata (#4220)
• add 'local_repodata_ttl' configurability (#4240)
• remove questionable "nothing to install" logic (#4237)
• relax channel noarch requirement for 4.3; warn now, raise in future feature release (#4238)
5.56. 2017-01-13 4.3.4

add additional info to setup.py warning message (#4258)
5.57.2 Bug Fixes
• remove features properly (#4236)
• do not use IFS to find activate/deactivate scripts to source (#4239)
• fix #4235 print message to stderr (#4241)
• fix relative path to python in activate.bat (#4242)
• fix args.channel references (#4245, #4246)
• ensure cache_fn_url right pad (#4255)
• fix #4256 subprocess calls must have env wrapped in str (#4259)
5.58 2017-01-06 4.3.2
5.58.1 Deprecations/Breaking Changes
• Further refine conda channels specification. To verify if the url of a channel represents a valid conda channel, we check that noarch/repodata.json and/or noarch/repodata.json.bz2 exist, even if empty. (#3739)
5.58.2 Improvements
• add new 'path_conflict' and 'clobber' configuration options (#4119)
• separate fetch/extract pass for explicit URLs (#4125)
• update conda homepage to conda.io (#4180)
5.58.3 Bug Fixes
• fix pre/post unlink/link scripts (#4113)
• fix package version regex and bug in create_link (#4132)
• fix history tracking (#4143)
• fix index creation order (#4131)
• fix #4152 conda env export failure (#4175)
• fix #3779 channel UNC path encoding errors on windows (#4190)
• fix progress bar (#4191)
• use context.channels instead of args.channel (#4199)
• don't use local cached repodata for file:// urls (#4209)
5.58.4 Non-User-Facing Changes
• xfail anaconda token test if local token is found (#4124)
• fix open-ended test failures relating to python 3.6 release (#4145)
• extend timebomb for test_multi_channel_export (#4169)
• don't unlink dists that aren't in the index (#4130)
• add python 3.6 and new conda-build test targets (#4194)
5.59 2016-12-19 4.3.1
5.59.1 Improvements
• additional pre-transaction validation (#4090)
• export FileMode enum for conda-build (#4080)
• memoize disk permissions tests (#4091)
• local caching of repodata without remote server calls; new 'repodata_timeout_secs' configuration parameter
(#4094)
• performance tuning (#4104)
• add additional fields to dist object serialization (#4102)
5.59.2 Bug Fixes
• fix a noarch install bug on windows (#4071)
• fix a spec mismatch that resulted in python versions getting mixed during packaging (#4079)
• fix rollback linked record (#4092)
• fix #4097 keep split in PREFIX_PLACEHOLDER (#4100)
5.60 2016-12-14 4.3.0 Safety
5.60.1 New Features
• Unlink and Link Packages in a Single Transaction: In the past, conda hasn't always been safe and defensive with its disk-mutating actions. It has gleefully clobbered existing files, and mid-operation failures leave environments completely broken. In some of the most severe examples, conda can appear to "uninstall itself." With this release, the unlinking and linking of packages for an executed command is done in a single transaction. If a failure occurs for any reason while conda is mutating files on disk, the environment will be returned its previous state. While we've implemented some pre-transaction checks (verifying package integrity for example), it's impossible to anticipate every failure mechanism. In some circumstances, OS file permissions cannot be fully known until an operation is attempted and fails. And conda itself is not without bugs. Moving forward, unforeseeable failures won't be catastrophic. (#3833, #4030)
5.59. 2016-12-19 4.3.1
Progressive Fetch and Extract Transactions: Like package unlinking and linking, the download and extract phases of package handling have also been given transaction-like behavior. The distinction is the rollback on error is limited to a single package. Rather than rolling back the download and extract operation for all packages, the single-package rollback prevents the need for having to re-download every package if an error is encountered. (#4021, #4030)
• Generic- and Python-Type Noarch/Universal Packages: Along with conda-build 2.1.0, a noarch/universal type for python packages is officially supported. These are much like universal python wheels. Files in a python noarch package are linked into a prefix just like any other conda package, with the following additional features: 1. conda maps the site-packages directory to the correct location for the python version in the environment,
2. conda maps the python-scripts directory to either $PREFIX/bin or $PREFIX/Scripts depending on platform,
3. conda creates the python entry points specified in the conda-build recipe, and
4. conda compiles pyc files at install time when prefix write permissions are guaranteed.
Python noarch packages must be "fully universal." They cannot have OS- or python version-specific dependencies. They cannot have OS- or python version-specific "scripts" files. If these features are needed, traditional conda packages must be used. (#3712)
• Multi-User Package Caches: While the on-disk package cache structure has been preserved, the core logic implementing package cache handling has had a complete overhaul. Writable and read-only package caches are fully supported. (#4021)
• Python API Module: An oft requested feature is the ability to use conda as a python library, obviating the need to "shell out" to another python process. Conda 4.3 includes a conda.cli.python_api module that facilitates this use case. While we maintain the user-facing command-line interface, conda commands can be executed in-process. There is also a conda.exports module to facilitate longer-term usage of conda as a library across conda conda releases. However, conda's python code is considered internal and private, subject to change at any time across releases. At the moment, conda will not install itself into environments other than its original install environment. (#4028)
• Remove All Locks: Locking has never been fully effective in conda, and it often created a false sense of security. In this release, multi-user package cache support has been implemented for improved safety by hardlinking packages in read-only caches to the user's primary user package cache. Still, users are cautioned that undefined behavior can result when conda is running in multiple process and operating on the same package caches and/or environments. (#3862)
5.60.2 Deprecations/Breaking Changes
• Conda now has the ability to refuse to clobber existing files that are not within the unlink instructions of the transaction. This behavior is configurable via the path_conflict configuration option, which has three possible values: clobber, warn, and prevent. In 4.3, the default value will be clobber. That will give package maintainers time to correct current incompatibilities within their package ecosystem. In 4.4, the default will switch to warn, which means these operations continue to clobber, but the warning messages are displayed. In 4.5, the default value will switch to prevent. As we tighten up the path_conflict constraint, a new command line flag -clobber will loosen it back up on an ad hoc basis. Using -clobber overrides the setting for path_conflict to effectively be clobber for that operation.
• Conda signed packages have been removed in 4.3. Vulnerabilities existed. An illusion of security is worse than not having the feature at all. We will be incorporating The Update Framework into conda in a future feature release. (#4064)
• Conda 4.4 will drop support for older versions of conda-build.
5.60.3 Improvements
• create a new "trace" log level enabled by -v -v -v or -vvv (#3833)
• allow conda to be installed with pip, but only when used as a library/dependency (#4028)
• the 'r' channel is now part of defaults (#3677)
• private environment support for conda (#3988)
• support v1 info/paths.json file (#3927, #3943)
• support v1 info/package_metadata.json (#4030)
• improved solver hint detection, simplified filtering (#3597)
• cache VersionOrder objects to improve performance (#3596)
• fix documentation and typos (#3526, #3572, #3627)
• add multikey configuration validation (#3432)
• some Fish autocompletions (#2519)
• reduce priority for packages removed from the index (#3703)
• add user-agent, uid, gid to conda info (#3671)
• add conda.exports module (#3429)
• make http timeouts configurable (#3832)
• add a pkgs_dirs config parameter (#3691)
• add an 'always_softlink' option (#3870, #3876)
• pre-checks for diskspace, etc for fetch and extract #(4007)
• address #3879 don't print activate message when quiet config is enabled (#3886)
• add zos-z subdir (#4060)
• add elapsed time to HTTP errors (#3942)
5.60.4 Bug Fixes
• account for the Windows Python 2.7 os.environ unicode aversion (#3363)
• fix link field in record object (#3424)
• anaconda api token bug fix; additional tests (#3673)
• fix #3667 unicode literals and unicode decode (#3682)
• add conda-env entrypoint (#3743)
• fix #3807 json dump on conda config --show --json (#3811)
• fix #3801 location of temporary hard links of index.json (#3813)
• fix invalid yml example (#3849)
• add arm platforms back to subdirs (#3852)
• fix #3771 better error message for assertion errors (#3802)
• fix #3999 spaces in shebang replacement (#4008)
5.60. 2016-12-14 4.3.0 Safety
config -show-sources shouldn't show force by default (#3891)
• fix #3881 don't install conda-env in clones of root (#3899)
• conda-build dist compatibility (#3909)
5.60.5 Non-User-Facing Changes
• remove unnecessary eval (#3428)
• remove dead install_tar function (#3641)
• apply PEP-8 to conda-env (#3653)
• refactor dist into an object (#3616)
• vendor appdirs; remove conda's dependency on anaconda-client import (#3675)
• revert boto patch from #2380 (#3676)
• move and update ROOT_NO_RM (#3697)
• integration tests for conda clean (#3695, #3699)
• disable coverage on s3 and ftp requests adapters (#3696, #3701)
• github repo hygiene (#3705, #3706)
• major install refactor (#3712)
• remove test timebombs (#4012)
• LinkType refactor (#3882)
• move CrossPlatformStLink and make available as export (#3887)
• make Record immutable (#3965)
• project housekeeping (#3994, #4065)
• context-dependent setup.py files (#4057)
5.61 2017-01-10 4.2.15
5.61.1 Improvements
• use 'post' instead of 'dev' for commits according to PEP-440 (#4234)
• do not use IFS to find activate/deactivate scripts to source (#4243)
• fix relative path to python in activate.bat (#4244)
5.61.2 Bug Fixes
• replace sed with python for activate and deactivate #4257
5.62 2017-01-07 4.2.14
5.62.1 Improvements
• use install.rm_rf for TemporaryDirectory cleanup (#3425)
• improve handling of local dependency information (#2107)
• add default channels to exports for Windows Linux and macOS (#4103)
• make subdir configurable (#4178)
5.62.2 Bug Fixes
• fix conda/install.py single-file behavior (#3854)
• fix the api->conda substitution (#3456)
• fix silent directory removal (#3730)
• fix location of temporary hard links of index.json (#3975)
• fix potential errors in multi-channel export and offline clone (#3995)
• fix auxlib/packaging, git hashes are not limited to 7 characters (#4189)
• fix compatibility with requests >=2.12, add pyopenssl as dependency (#4059)
• fix #3287 activate in 4.1-4.2.3 clobbers non-conda PATH changes (#4211)
5.62.3 Non-User-Facing Changes
• fix open-ended test failures relating to python 3.6 release (#4166)
• allow args passed to cli.main() (#4193, #4200, #4201)
• test against python 3.6 (#4197)
5.63 2016-11-22 4.2.13
5.63.1 Deprecations/Breaking Changes
• show warning message for pre-link scripts (#3727)
• error and exit for install of packages that require conda minimum version 4.3 (#3726)
5.63.2 Improvements
• double/extend http timeouts (#3831)
• let descriptive http errors cover more http exceptions (#3834)
• backport some conda-build configuration (#3875)
5.62. 2017-01-07 4.2.14

5.63.3 Bug Fixes
• fix conda/install.py single-file behavior (#3854)
• fix the api->conda substitution (#3456)
• fix silent directory removal (#3730)
• fix #3910 null check for is_url (#3931)
5.63.4 Non-User-Facing Changes
• flake8 E116, E121, & E123 enabled (#3883)
5.64 2016-11-02 4.2.12
5.64.1 Bug Fixes
• fix #3732, #3471, #3744 CONDA_BLD_PATH (#3747)
• fix #3717 allow no-name channels (#3748)
• fix #3738 move conda-env to ruamel_yaml (#3740)
• fix conda-env entry point (#3745 via #3743)
• fix again #3664 trash emptying (#3746)
5.65 2016-10-23 4.2.11
5.65.1 Improvements
• only try once for windows trash removal (#3698)
5.65.2 Bug Fixes
• fix anaconda api token bug (#3674)
• fix #3646 FileMode enum comparison (#3683)
• fix #3517 conda install --mkdir (#3684)
• fix #3560 hack anaconda token coverup on conda info (#3686)
• fix #3469 alias envs_path to envs_dirs (#3685)
5.66 2016-10-18 4.2.10
5.66.1 Improvements
• add json output for conda info -s (#3588)
• ignore certain binary prefixes on windows (#3539)
• allow conda config files to have .yaml extensions or 'condarc' anywhere in filename (#3633)
5.66.2 Bug Fixes
• fix conda-build's handle_proxy_407 import (#3666)
• fix #3442, #3459, #3481, #3531, #3548 multiple networking and auth issues (#3550)
• add back linux-ppc64le subdir support (#3584)
• fix #3600 ensure links are removed when unlinking (#3625)
• fix #3602 search channels by platform (#3629)
• fix duplicated packages when updating environment (#3563)
• fix #3590 exception when parsing invalid yaml (#3593 via #3634)
• fix #3655 a string decoding error (#3656)
5.66.3 Non-User-Facing Changes
• backport conda.exports module to 4.2.x (#3654)
• travis-ci OSX fix (#3615 via #3657)
5.67 2016-09-27 4.2.9
5.67.1 Bug Fixes
• fix #3536 conda-env messaging to stdout with --json flag (#3537)
• fix #3525 writing to sys.stdout with --json flag for post-link scripts (#3538)
• fix #3492 make NULL falsey with python 3 (#3524)
5.68 2016-09-26 4.2.8
5.68.1 Improvements
• add "error" key back to json error output (#3523)
5.68.2 Bug Fixes
• fix #3453 conda fails with create_default_packages (#3454)
• fix #3455 --dry-run fails (#3457)
• dial down error messages for rm_rf (#3522)
• fix #3467 AttributeError encountered for map config parameter validation (#3521)
5.67. 2016-09-27 4.2.9
5.69 2016-09-16 4.2.7
5.69.1 Deprecations/Breaking Changes
• revert to 4.1.x behavior of conda list --export (#3450, #3451)
5.69.2 Bug Fixes
• don't add binstar token if it's given in the channel spec (#3427, #3440, #3444)
• fix #3433 failure to remove broken symlinks (#3436)
5.69.3 Non-User-Facing Changes
• use install.rm_rf for TemporaryDirectory cleanup (#3425)
5.70 2016-09-14 4.2.6
5.70.1 Improvements
• add support for client TLS certificates (#3419)
• address #3267 allow migration of channel_alias (#3410)
• conda-env version matches conda version (#3422)
5.70.2 Bug Fixes
• fix #3409 unsatisfiable dependency error message (#3412)
• fix #3408 quiet rm_rf (#3413)
• fix #3407 padding error messaging (#3416)
• account for the Windows Python 2.7 os.environ unicode aversion (#3363 via #3420)
5.71 2016-09-08 4.2.5
5.71.1 Deprecations/Breaking Changes
• partially revert #3041 giving conda config -add previous -prepend behavior (#3364 via #3370)
• partially revert #2760 adding back conda package command (#3398)
5.71.2 Improvements
• order output of conda config --show; make --json friendly (#3384 via #3386)
• clean the pid based lock on exception (#3325)
• improve file removal on all platforms (#3280 via #3396)
5.71.3 Bug Fixes
• fix #3332 allow download urls with :: in them (#3335)
• fix always_yes and not-set argparse args overriding other sources (#3374)
• fix ftp fetch timeout (#3392)
• fix #3307 add try/except block for touch lock (#3326)
• fix CONDA_CHANNELS environment variable splitting (#3390)
• fix #3378 CONDA_FORCE_32BIT environment variable (#3391)
• make conda info channel urls actually give urls (#3397)
• fix cio_test compatibility (#3395 via #3400)
5.72 2016-08-18 4.2.4
5.72.1 Bug Fixes
• fix #3277 conda list package order (#3278)
• fix channel priority issue with duplicated channels (#3283)
• fix local channel channels; add full conda-build unit tests (#3281)
• fix conda install with no package specified (#3284)
• fix #3253 exporting and importing conda environments (#3286)
• fix priority messaging on conda config --get (#3304)
• fix conda list --export; additional integration tests (#3291)
• fix conda update --all idempotence; add integration tests for channel priority (#3306)
5.72.2 Non-User-Facing Changes
• additional conda-env integration tests (#3288)
5.73 2016-08-11 4.2.3
5.73.1 Improvements
• added zsh and zsh.exe to Windows shells (#3257)
5.72. 2016-08-18 4.2.4
5.73.2 Bug Fixes
• allow conda to downgrade itself (#3273)
• fix breaking changes to conda-build from 4.2.2 (#3265)
• fix empty environment issues with conda and conda-env (#3269)
5.73.3 Non-User-Facing Changes
• add integration tests for conda-env (#3270)
• add more conda-build smoke tests (#3274)
5.74 2016-08-09 4.2.2
5.74.1 Improvements
• enable binary prefix replacement on windows (#3262)
• add --verbose command line flag (#3237)
• improve logging and exception detail (#3237, #3252)
• do not remove empty environment without asking; raise an error when a named environment can't be found (#3222)
5.74.2 Bug Fixes
• fix #3226 user condarc not available on Windows (#3228)
• fix some bugs in conda config -show* (#3212)
• fix conda-build local channel bug (#3202)
• remove subprocess exiting message (#3245)
• fix comment parsing and channels in conda-env environment.yml (#3258, #3259)
• fix context error with conda-env (#3232)
• fix #3182 conda install silently skipping failed linking (#3184)
5.75 2016-08-01 4.2.1
5.75.1 Improvements
• improve an error message that can happen during conda install -revision (#3181)
• use clean sys.exit with user choice 'No' (#3196)
5.75.2 Bug Fixes
• critical fix for 4.2.0 error when no git is on PATH (#3193)
• revert #3171 lock cleaning on exit pending further refinement
• patches for conda-build compatibility with 4.2 (#3187)
• fix a bug in -show-sources output that ignored aliased parameter names (#3189)
5.75.3 Non-User-Facing Changes
• move scripts in bin to shell directory (#3186)
5.76 2016-07-28 4.2.0
5.76.1 New Features
• New Configuration Engine: Configuration and "operating context" are the foundation of conda's functionality. Conda now has the ability to pull configuration information from a multitude of on-disk locations, including .d directories and a .condarc file within a conda environment), along with full CONDA_ environment variable support. Helpful validation errors are given for improperly-specified configuration. Full documentation updates pending. (#2537, #3160, #3178)
• New Exception Handling Engine: Previous releases followed a pattern of premature exiting (with hard calls to sys.exit()) when exceptional circumstances were encountered. This release replaces over 100 sys. exit calls with python exceptions. For conda developers, this will result in tests that are easier to write. For developers using conda, this is a first step on a long path toward conda being directly importable. For conda users, this will eventually result in more helpful and descriptive errors messages. (#2899, #2993, #3016, #3152, #3045)
• Empty Environments: Conda can now create "empty" environments when no initial packages are specified, alleviating a common source of confusion. (#3072, #3174)
• Conda in Private Env: Conda can now be configured to live within its own private environment. While it's not yet default behavior, this represents a first step toward separating the root environment into a "conda private" environment and a "user default" environment. (#3068)
• Regex Version Specification: Regular expressions are now valid version specifiers. For example, ^1\. [5-8]\.1$|2.2. (#2933)
5.76.2 Deprecations/Breaking Changes
• remove conda init (#2759)
• remove conda package and conda bundle (#2760)
• deprecate conda-env repo; pull into conda proper (#2950, #2952, #2954, #3157, #3163, #3170)
• force use of ruamel_yaml (#2762)
• implement conda config -prepend; change behavior of -add to -append (#3041)
• exit on link error instead of logging it (#2639)
5.76. 2016-07-28 4.2.0
5.76.3 Improvements
• improve locking (#2962, #2989, #3048, #3075)
• clean up requests usage for fetching packages (#2755)
• remove excess output from conda -help (#2872)
• remove os.remove in update_prefix (#3006)
• better error behavior if conda is spec'd for a non-root environment (#2956)
• scale back try_write function on Linux and macOS (#3076)
5.76.4 Bug Fixes
• remove psutil requirement, fixes annoying error message (#3135, #3183)
• fix #3124 add threading lock to memoize (#3134)
• fix a failure with multi-threaded repodata downloads (#3078)
• fix windows file url (#3139)
• address #2800, error with environment.yml and non-default channels (#3164)
5.76.5 Non-User-Facing Changes
• project structure enhancement (#2929, #3132, #3133, #3136)
• clean up channel handling with new channel model (#3130, #3151)
• add Anaconda Cloud / Binstar auth handler (#3142)
• remove dead code (#2761, #2969)
• code refactoring and additional tests (#3052, #3020)
• remove auxlib from project root (#2931)
• vendor auxlib 0.0.40 (#2932, #2943, #3131)
• vendor toolz 0.8.0 (#2994)
• move progressbar to vendor directory (#2951)
• fix conda.recipe for new quirks with conda-build (#2959)
• move captured function to common module (#3083)
• rename CHANGELOG to md (#3087)
5.77 2016-09-08 4.1.12
• fix #2837 "File exists" in symlinked path with parallel activations, #3210
• fix prune option when installing packages, #3354
• change check for placeholder to be more friendly to long PATH, #3349
5.78 2016-07-26 4.1.11
• fix PS1 backup in activate script, #3135 via #3155
• correct resolution for 'handle failures in binstar_client more generally', #3156
5.79 2016-07-25 4.1.10
• ignore symlink failure because of read-only file system, #3055
• backport shortcut tests, #3064
• fix #2979 redefinition of $SHELL variable, #3081
• fix #3060 -clone root -copy exception, #3080
5.80 2016-07-20 4.1.9
• fix #3104, add global BINSTAR_TOKEN_PAT
• handle failures in binstar_client more generally
5.81 2016-07-12 4.1.8:
• fix #3004 UNAUTHORIZED for url (null binstar token), #3008
• fix overwrite existing redirect shortcuts when symlinking envs, #3025
• partially revert no default shortcuts, #3032, #3047
5.82 2016-07-07 4.1.7:
• add msys2 channel to defaults on Windows, #2999
• fix #2939 channel_alias issues; improve offline enforcement, #2964 • fix #2970, #2974 improve handling of file:// URLs inside channel, #2976
5.83 2016-07-01 4.1.6:
• slow down exp backoff from 1 ms to 100 ms factor, #2944
• set max time on exp_backoff to ~6.5 sec,#2955
• fix #2914 add/subtract from PATH; kill folder output text, #2917
• normalize use of get_index behavior across clone/explicit, #2937
• wrap root prefix check with normcase, #2938
5.78. 2016-07-26 4.1.11
5.84 2016-06-29 4.1.5:
• more conservative auto updates of conda #2900
• fix some permissions errors with more aggressive use of move_path_to_trash, #2882
• fix #2891 error if allow_other_channels setting is used, #2896
• fix #2886, #2907 installing a tarball directly from the package cache, #2908
• fix #2681, #2778 reverting #2320 lock behavior changes, #2915
5.85 2016-06-27 4.1.4:
• fix #2846 revert the use of UNC paths; shorten trash filenames, #2859
• fix exp backoff on Windows, #2860
• fix #2845 URL for local file repos, #2862
• fix #2764 restore full path var on win; create to CONDA_PREFIX env var, #2848
• fix #2754 improve listing pip installed packages, #2873
• change root prefix detection to avoid clobbering root activate scripts, #2880
• address #2841 add lowest and highest priority indication to channel config output, #2875
• add SYMLINK_CONDA to planned instructions, #2861
• use CONDA_PREFIX, not CONDA_DEFAULT_ENV for activate.d, #2856
• call scripts with redirect on win; more error checking to activate, #2852
5.86 2016-06-23 4.1.3:
• ensure conda-env auto update, along with conda, #2772
• make yaml booleans behave how everyone expects them to, #2784
• use accept-encoding for repodata; prefer repodata.json to repodata.json.bz2, #2821
• additional integration and regression tests, #2757, #2774, #2787
• add offline mode to printed info; use offline flag when grabbing channels, #2813
• show conda-env version in conda info, #2819
• adjust channel priority superseded list, #2820
• support epoch ! characters in command line specs, #2832
• accept old default names and new ones when canonicalizing channel URLs #2839
• push PATH, PS1 manipulation into shell scripts, #2796
• fix #2765 broken source activate without arguments, #2806
• fix standalone execution of install.py, #2756
• fix #2810 activating conda environment broken with git bash on Windows, #2795
• fix #2805, #2781 handle both file-based channels and explicit file-based URLs, #2812

  fix #2746 conda create -clone of root, #2838 • fix #2668, #2699 shell recursion with activate #2831
5.87 2016-06-17 4.1.2:
• improve messaging for "downgrades" due to channel priority, #2718
• support conda config channel append/prepend, handle duplicates, #2730
• remove -shortcuts option to internal CLI code, #2723
• fix an issue concerning space characters in paths in activate.bat, #2740
• fix #2732 restore yes/no/on/off for booleans on the command line, #2734
• fix #2642 tarball install on Windows, #2729
• fix #2687, #2697 WindowsError when creating environments on Windows, #2717
• fix #2710 link instruction in conda create causes TypeError, #2715
• revert #2514, #2695, disabling of .netrc files, #2736 • revert #2281 printing progress bar to terminal, #2707
5.88 2016-06-16 4.1.1:
• add auto_update_conda config parameter, #2686
• fix #2669 conda config -add channels can leave out defaults, #2670
• fix #2703 ignore activate symlink error if links already exist, #2705
• fix #2693 install duplicate packages with older version of Anaconda, #2701
• fix #2677 respect HTTP_PROXY, #2695
• fix #2680 broken fish integration, #2685, #2694
• fix an issue with conda never exiting, #2689
• fix #2688 explicit file installs, #2708
• fix #2700 conda list UnicodeDecodeError, #2706
5.89 2016-06-14 4.1.0:
This release contains many small bug fixes for all operating systems, and a few special fixes for Windows behavior.
5.89.1 Notable changes for all systems (Windows, macOS and Linux)
• Channel order now matters. The most significant conda change is that when you add channels, channel order matters. If you have a list of channels in a .condarc file, conda installs the package from the first channel where it's available, even if it's available in a later channel with a higher version number.
• No version downgrades. Conda remove no longer performs version downgrades on any remaining packages that might be suggested to resolve dependency losses; the package will just be removed instead.
5.87. 2016-06-17 4.1.2:
New YAML parser/emitter. PyYAML is replaced with ruamel.yaml, which gives more robust control over yaml document use. More on ruamel.yaml
• Shebang lines over 127 characters are now truncated (Linux, macOS only). Shebangs are the first line of the many executable scripts that tell the operating system how to execute the program. They start with #! . Most OSes don't support these lines over 127 characters, so conda now checks the length and replaces the full interpreter path in long lines with /usr/bin/env. When you're working in a conda environment that is deeply under many directories, or you otherwise have long paths to your conda environment, make sure you activate that environment now.
• Changes to conda list command. When looking for packages that aren't installed with conda, conda list now examines the Python site-packages directory rather than relying on pip.
• Changes to conda remove command. The command conda remove --all now removes a conda environment without fetching information from a remote server on the packages in the environment.
• Conda update can be turned off and on. When turned off, conda will not update itself unless the user manually issues a conda update command. Previously conda updated any time a user updated or installed a package in the root environment. Use the option conda config set auto_update_conda false.
• Improved support for BeeGFS. BeeGFS is a parallel cluster file system for performance and designed for easy installation and management. More on BeeGFS
5.89.2 Windows-only changes
• Shortcuts are no longer installed by default on Windows.	Shortcuts can now be installed with the
--shortcuts option. Example 1: Install a shortcut to Spyder with conda install spyder --shortcut. Note if you have Anaconda (not Miniconda), you already have this shortcut and Spyder. Example 2: Install the open source package named console_shortcut. When you click the shortcut icon, a terminal window will open with the environment containing the console_shortcut package already activated. conda install console_shortcut --shortcuts
• Skip binary replacement on Windows. Linux & macOS have binaries that are coded with library locations, and this information must sometimes be replaced for relocatability, but Windows does not generally embed prefixes in binaries, and was already relocatable. We skip binary replacement on Windows.
Complete list:
• clean up activate and deactivate scripts, moving back to conda repo, #1727, #2265, #2291, #2473, #2501, #2484
• replace pyyaml with ruamel_yaml, #2283, #2321
• better handling of channel collisions, #2323, #2369 #2402, #2428
• improve listing of pip packages with conda list, #2275
• re-license progressbar under BSD 3-clause, #2334
• reduce the amount of extraneous info in hints, #2261
• add -shortcuts option to install shortcuts on windows, #2623
• skip binary replacement on windows, #2630
• don't show channel urls by default in conda list, #2282
• package resolution and solver tweaks, #2443, #2475, #2480
• improved version & build matching, #2442, #2488
• print progress to the terminal rather than stdout, #2281
• verify version specs given on command line are valid, #2246
fix for try_write function in case of odd permissions, #2301
• fix a conda search -spec error, #2343
• update User-Agent for conda connections, #2347
• remove some dead code paths, #2338, #2374
• fixes a thread safety issue with http requests, #2377, #2383
• manage BeeGFS hard-links non-POSIX configuration, #2355
• prevent version downgrades during removes, #2394
• fix conda info -json, #2445
• truncate shebangs over 127 characters using /usr/bin/env, #2479
• extract packages to a temporary directory then rename, #2425, #2483
• fix help in install, #2460
• fix re-install bug when sha1 differs, #2507
• fix a bug with file deletion, #2499
• disable .netrc files, #2514
• dont fetch index on remove -all, #2553
• allow track_features to be a string or a list in .condarc, #2541
• fix #2415 infinite recursion in invalid_chains, #2566 • allow channel_alias to be different than binstar, #2564
5.90 2016-07-09 4.0.11:
• allow auto_update_conda from sysrc, #3015 via #3021
5.91 2016-06-29 4.0.10:
• fix #2846 revert the use of UNC paths; shorten trash filenames, #2859 via #2878
• fix some permissions errors with more aggressive use of move_path_to_trash, #2882 via #2894
5.92 2016-06-15 4.0.9:
• add auto_update_conda config parameter, #2686
5.93 2016-06-03 4.0.8:
• fix a potential problem with moving files to trash, #2587
5.90. 2016-07-09 4.0.11:

5.94 2016-05-26 4.0.7:
• workaround for boto bug, #2380
5.95 2016-05-11 4.0.6:
• log "custom" versions as updates rather than downgrades, #2290
• fixes a TypeError exception that can occur on install/update, #2331 • fixes an error on Windows removing files with long path names, #2452
5.96 2016-03-16 4.0.5:
• improved help documentation for install, update, and remove, #2262
• fixes #2229 and #2250 related to conda update errors on Windows, #2251
• fixes #2258 conda list for pip packages on Windows, #2264
5.97 2016-03-10 4.0.4:
• revert #2217 closing request sessions, #2233
5.98 2016-03-10 4.0.3:
• adds a conda clean -all feature, #2211
• solver performance improvements, #2209
• fixes conda list for pip packages on windows, #2216
• quiets some logging for package downloads under python 3, #2217
• more urls for conda list -explicit, #1855
• prefer more "latest builds" for more packages, #2227 • fixes a bug with dependency resolution and features, #2226
5.99 2016-03-08 4.0.2:
• fixes track_features in ~/.condarc being a list, see also #2203
• fixes incorrect path in lock file error #2195
• fixes issues with cloning environments, #2193, #2194
• fixes a strange interaction between features and versions, #2206
• fixes a bug in low-level SAT clause generation creating a preference for older versions, #2199
5.100 2016-03-07 4.0.1:
• fixes an install issue caused by md5 checksum mismatches, #2183
• remove auxlib build dependency, #2188
5.101 2016-03-04 4.0.0:
• The solver has been retooled significantly. Performance should be improved in most circumstances, and a number of issues involving feature conflicts should be resolved.
• conda update <package> now handles depedencies properly according to the setting of the "update_deps" configuration:
-update-deps: conda will also update any dependencies as needed to install the latest verison of the requrested packages. The minimal set of changes required to achieve this is sought.
-no-update-deps: conda will update the packages only to the extent that no updates to the
dependencies are required
The previous behavior, which would update the packages without regard to their dependencies, could result in a broken configuration, and has been removed.
• Conda finally has an official logo.
• Fix conda clean -packages on Windows, #1944 • Conda sub-commands now support dashes in names, #1840
5.102 2016-02-19 3.19.3:
• fix critical issue, see #2106
5.103 2016-02-19 3.19.2:
• add basic activate/deactivate, conda activate/deactivate/ls for fish, see #545
• remove error when CONDA_FORCE_32BIT is set on 32-bit systems, #1985
• suppress help text for -unknown option, #2051
• fix issue with conda create -clone post-link scripts, #2007
• fix a permissions issue on windows, #2083
5.104 2016-02-01 3.19.1:
• resolve.py: properly escape periods in version numbers, #1926
• support for pinning Lua by default, #1934
• remove hard-coded test URLs, a module cio_test is now expected when CIO_TEST is set
5.100. 2016-03-07 4.0.1:
5.105 2015-12-17 3.19.0:
• OpenBSD 5.x support, #1891
• improve install CLI to make Miniconda -f work, #1905
5.106 2015-12-10 3.18.9:
• allow chaning default_channels (only applies to "system" condarc), from from CLI, #1886
• improve default for -show-channel-urls in conda list, #1900
5.107 2015-12-03 3.18.8:
• always attempt to delete files in rm_rf, #1864
5.108 2015-12-02 3.18.7:
• simplify call to menuinst.install()
• add menuinst as dependency on Windows
• add ROOT_PREFIX to post-link (and pre_unlink) environment
5.109 2015-11-19 3.18.6:
• improve conda clean when user lacks permissions, #1807
• make show_channel_urls default to True, #1771
• cleaner write tests, #1735
• fix documentation, #1709
• improve conda clean when directories don't exist, #1808
5.110 2015-11-11 3.18.5:
• fix bad menuinst exception handling, #1798
• add workaround for unresolved dependencies on Windows
5.111 2015-11-09 3.18.4:
• allow explicit file to contain MD5 hashsums
• add -md5 option to "conda list -explicit"
• stop infinite recursion during certain resolve operations, #1749

add dependencies even if strictness == 3, #1766
5.112 2015-10-15 3.18.3:
• added a pruning step for more efficient solves, #1702
• disallow conda-env to be installed into non-root environment
• improve error output for bad command input, #1706
• pass env name and setup cmd to menuinst, #1699
5.113 2015-10-12 3.18.2:
• add "conda list -explicit" which contains the URLs of all conda packages to be installed, and can used with the install/create -file option, #1688
• fix a potential issue in conda clean
• avoid issues with LookupErrors when updating Python in the root environment on Windows
• don't fetch the index from the network with conda remove
• when installing conda packages directly, "conda install <pkg>.tar.bz2", unlink any installed package with that name, not just the installed one
• allow menu items to be installed in non-root env, #1692
5.114 2015-09-28 3.18.1:
• fix: removed reference to win_ignore_root in plan module
5.115 2015-09-28 3.18.0:
• allow Python to be updated in root environment on Windows, #1657
• add defaults to specs after getting pinned specs (allows to pin a different version of Python than what is installed)
• show what older versions are in the solutions in the resolve debug log
• fix some issues with Python 3.5
• respect -no-deps when installing from .tar or .tar.bz2
• avoid infinite recursion with NoPackagesFound and conda update -all -file
• fix conda update -file
• toposort: Added special case to remove 'pip' dependency from 'python'
• show dotlog messages during hint generation with -debug
• disable the max_only heuristic during hint generation
5.112. 2015-10-15 3.18.3:
new version comparison algorithm, which consistently compares any version string, and better handles version strings using things like alpha, beta, rc, post, and dev. This should remove any inconsistent version comparison that would lead to conda installing an incorrect version.
• use the trash in rm_rf, meaning more things will get the benefit of the trash system on Windows
• add the ability to pass the -file argument multiple times
• add conda upgrade alias for conda update
• add update_dependencies condarc option and -update-deps/-no-update-deps command line flags
• allow specs with conda update -all
• add -show-channel-urls and -no-show-channel-urls command line options
• add always_copy condarc option
• conda clean properly handles multiple envs directories. This breaks backwards compatibility with some of the -json output. Some of the old -json keys are kept for backwards compatibility.
5.116 2015-09-11 3.17.0:
• add windows_forward_slashes option to walk_prefix(), see #1513
• add ability to set CONDA_FORCE_32BIT environment variable, it should should only be used when running conda-build, #1555
• add config option to makes the python dependency on pip optional, #1577
• fix an UnboundLocalError
• print note about pinned specs in no packages found error
• allow wildcards in AND-connected version specs
• print pinned specs to the debug log
• fix conda create -clone with create_default_packages
• give a better error when a proxy isn't found for a given scheme
• enable running 'conda run' in offline mode
• fix issue where hardlinked cache contents were being overwritten
• correctly skip packages whose dependencies can't be found with conda update -all
• use clearer terminology in -m help text.
• use splitlines to break up multiple lines throughout the codebase
• fix AttributeError with SSLError
5.117 2015-08-10 3.16.0:
• rename binstar -> anaconda, see #1458
• fix -use-local when the conda-bld directory doesn't exist
• fixed -offline option when using "conda create -clone", see #1487
• don't mask recursion depth errors
add conda search -reverse-dependency
• check whether hardlinking is available before linking when using "python install.py -link" directly, see #1490
• don't exit nonzero when installing a package with no dependencies
• check which features are installed in an environment via track_features, not features
• set the verify flag directly on CondaSession (fixes conda skeleton not respecting the ssl_verify option)
5.118 2015-07-23 3.15.1:
• fix conda with older versions of argcomplete
• restore the -force-pscheck option as a no-op for backwards compatibility
5.119 2015-07-22 3.15.0:
• sort the output of conda info package correctly
• enable tab completion of conda command extensions using argcomplete. Command extensions that import conda should use conda.cli.conda_argparse.ArgumentParser instead of argparse.ArgumentParser. Otherwise, they should enable argcomplete completion manually.
• allow psutil and pycosat to be updated in the root environment on Windows
• remove all mentions of pscheck. The -force-pscheck flag has been removed.
• added support for S3 channels
• fix color issues from pip in conda list on Windows
• add support for other machine types on Linux, in particular ppc64le
• add non_x86_linux_machines set to config module
• allow ssl_verify to accept strings in addition to boolean values in condarc
• enable -set to work with both boolean and string values
5.120 2015-06-29 3.14.1:
• make use of Crypto.Signature.PKCS1_PSS module, see #1388
• note when features are being used in the unsatisfiable hint
5.121 2015-06-16 3.14.0:
• add ability to verify signed packages, see #1343 (and conda-build #430)
• fix issue when trying to add 'pip' dependency to old python packages
• provide option "conda info -unsafe-channels" for getting unobscured channel list, #1374
5.118. 2015-07-23 3.15.1:

5.122 2015-06-04 3.13.0:
• avoid the Windows file lock by moving files to a trash directory, #1133
• handle env dirs not existing in the Environments completer
• rename binstar.org -> anaconda.org, see #1348
• speed up 'source activate' by ~40%
5.123 2015-05-05 3.12.0:
• correctly allow conda to update itself
• print which file leads to the "unable to remove file" error on Windows
• add support for the no_proxy environment variable, #1171
• add a much faster hint generation for unsatisfiable packages, which is now always enabled (previously it would not run if there were more than ten specs). The new hint only gives one set of conflicting packages, rather than all sets, so multiple passes may be necessary to fix such issues
• conda extensions that import conda should use conda.cli.conda_argparser.ArgumentParser instead of argparse.ArgumentParser to conform to the conda help guidelines (e.g., all help messages should be capitalized with periods, and the options should be preceded by "Options:" for the sake of help2man).
• add confirmation dialog to conda remove. Fixes conda remove -dry-run.
5.124 2015-04-22 3.11.0:
• fix issue where forced update on Windows could cause a package to break
• remove detection of running processes that might conflict
• deprecate -force-pscheck (now a no-op argument)
• make conda search -outdated -names-only work, fixes #1252
• handle the history file not having read or write permissions better
• make multiple package resolutions warning easier to read
• add -full-name to conda list
• improvements to command help
5.125 2015-04-06 3.10.1:
• fix logic in @memoized for unhashable args
• restored json cache of repodata, see #1249
• hide binstar tokens in conda info -json
• handle CIO_TEST='2 '
• always find the solution with minimal number of packages, even if there are many solutions
• allow comments at the end of the line in requirement files
• don't update the progressbar until after the item is finished running
• add conda/<version> to HTTP header User-Agent string
5.126 2015-03-12 3.10.0:
• change default repo urls to be https
• add -offline to conda search
• add -names-only and -full-name to conda search
• add tab completion for packages to conda search
5.127 2015-02-24 3.9.1:
• pscheck: check for processes in the current environment, see #1157
• don't write to the history file if nothing has changed, see #1148
• conda update -all installs packages without version restrictions (except for Python), see #1138
• conda update -all ignores the anaconda metapackage, see #1138
• use forward slashes for file urls on Windows
• don't symlink conda in the root environment from activate • use the correct package name in the progress bar info
• use json progress bars for unsatisfiable dependencies hints
• don't let requests decode gz files when downloaded
5.128 2015-02-16 3.9.0:
• remove (de)activation scripts from conda, those are now in conda-env
• pip is now always added as a Python dependency
• allow conda to be installed into environments which start with _
• add argcomplete tab completion for environments with the -n flag, and for package names with install, update, create, and remove
5.129 2015-02-03 3.8.4:
• copy (de)activate scripts from conda-env
• Add noarch (sub) directory support
5.126. 2015-03-12 3.10.0:
5.130 2015-01-28 3.8.3:
• simplified how ROOT_PREFIX is obtained in (de)activate
5.131 2015-01-27 3.8.2:
• add conda clean -source-cache to clean the conda build source caches
• add missing quotes in (de)activate.bat, fixes problem in Windows when conda is installed into a directory with spaces
• fix conda install -copy
5.132 2015-01-23 3.8.1:
• add missing utf-8 decoding, fixes Python 3 bug when icondata to json file
5.133 2015-01-22 3.8.0:
• move active script into conda-env, which is now a new dependency
• load the channel urls in the correct order when using concurrent.futures
• add optional 'icondata' key to json files in conda-meta directory, which contain the base64 encoded png file or the icon
• remove a debug print statement
5.134 2014-12-18 3.7.4:
• add -offline option to install, create, update and remove commands, and also add ability to set "offline: True" in condarc file
• add conda uninstall as alias for conda remove
• add conda info -root
• add conda.pip module
• fix CONDARC pointing to non-existing file, closes issue #961
• make update -f work if the package is already up-to-date
• fix possible TypeError when printing an error message
• link packages in topologically sorted order (so that pre-link scripts can assume that the dependencies are installed)
• add -copy flag to install
• prevent the progressbar from crashing conda when fetching in some situations
5.135 2014-11-05 3.7.3:
• conda install from a local conda package (or a tar fill which contains conda packages), will now also install the dependencies listed by the installed packages.
• add SOURCE_DIR environment variable in pre-link subprocess
• record all created environments in ~/.conda/environments.txt
5.136 2014-10-31 3.7.2:
• only show the binstar install message once
• print the fetching repodata dot after the repodata is fetched
• write the install and remove specs to the history file
• add '-y' as an alias to '-yes'
• the -file option to conda config now defaults to os.environ.get('CONDARC')
• some improvements to documentation (-help output)
• add user_rc_path and sys_rc_path to conda info -json
• cache the proxy username and password
• avoid warning about conda in pscheck • make ~/.conda/envs the first user envs dir
5.137 2014-10-07 3.7.1:
• improve error message for forgetting to use source with activate and deactivate, see issue #601
• don't allow to remove the current environment, see issue #639
• don't fail if binstar_client can't be imported for other reasons, see issue #925
• allow spaces to be contained in conda run
• only show the conda install binstar hint if binstar is not installed
• conda info package_spec now gives detailed info on packages. conda info path has been removed, as it is duplicated by conda package -w path.
5.138 2014-09-19 3.7.0:
• faster algorithm for -alt-hint
• don't allow channel_alias with allow_other_channels: false if it is set in the system .condarc
• don't show long "no packages found" error with update -all
• automatically add the Binstar token to urls when the binstar client is installed and logged in
• carefully avoid showing the binstar token or writing it to a file • be more careful in conda config about keys that are the wrong type
5.135. 2014-11-05 3.7.3:
• don't expect directories starting with conda- to be commands
• no longer recommend to run conda init after pip installing conda. A pip installed conda will now work without being initialized to create and manage other environments
• the rm function on Windows now works around access denied errors • fix channel urls now showing with conda list with show_channel_urls set to true
5.139 2014-09-08 3.6.4:
• fix removing packages that aren't in the channels any more
• Pretties output for -alt-hint
5.140 2014-09-04 3.6.3:
• skip packages that can't be found with update -all
• add -use-local to search and remove
• allow -use-local to be used along with -c (-channels) and -override-channels. -override-channels now requires either -c or -use-local
• allow paths in has_prefix to be quoted, to allow for spaces in paths on Windows
• retain Linux/macOS style path separators for prefixes in has_prefix on Windows (if the placeholder path uses /, replace it with a path that uses /, not \)
• fix bug in -use-local due to API changes in conda-build
• include user site directories in conda info -s
• make binary has_prefix replacement work with spaces after the prefix
• make binary has_prefix replacement replace multiple occurrences of the placeholder in the same null-terminated string
• don't show packages from other platforms as installed or cached in conda search
• be more careful about not warning about conda itself in pscheck
• Use a progress bar for the unsatisfiable packages hint generation
• Don't use TemporaryFile in try_write, as it is too slow when it fails
• Ignore InsecureRequestWarning when ssl_verify is False
• conda remove removes features tracked by removed packages in track_features
5.141 2014-08-20 3.6.2:
• add -use-index-cache to conda remove
• fix a bug where features (like mkl) would be selected incorrectly
• use concurrent.future.ThreadPool to fetch package metadata asynchronously in Python 3.
• do the retries in rm_rf on every platform
• use a higher cutoff for package name misspellings • allow changing default channels in "system" .condarc
5.142 2014-08-13 3.6.1:
• add retries to download in fetch module
• improved error messages for missing packages
• more robust rm_rf on Windows
• print multiline help for subcommands correctly
5.143 2014-08-11 3.6.0:
• correctly check if a package can be hard-linked if it isn't extracted yet
• change how the package plan is printed to better show what is new, updated, and downgraded
• use suggest_normalized_version in the resolve module. Now versions like 1.0alpha that are not directly recognized by verlib's NormalizedVersion are supported better
• conda run command, to run apps and commands from packages
• more complete -json API. Every conda command should fully support -json output now.
• show the conda_build and requests versions in conda info
• include packages from setup.py develop in conda list (with use_pip)
• raise a warning instead of dying when the history file is invalid
• use urllib.quote on the proxy password
• make conda search -outdated -canonical work
• pin the Python version during conda init
• fix some metadata that is written for Python during conda init
• allow comments in a pinned file
• allow installing and updating menuinst on Windows
• allow conda create with both -file and listed packages
• better handling of some nonexistent packages
• fix command line flags in conda package
• fix a bug in the ftp adapter
5.144 2014-06-10 3.5.5:
• remove another instance pycosat version detection, which fails on Windows, see issue #761
5.142. 2014-08-13 3.6.1:
5.145 2014-06-10 3.5.4:
• remove pycosat version detection, which fails on Windows, see issue #761
5.146 2014-06-09 3.5.3:
• fix conda update to correctly not install packages that are already up-to-date
• always fail with connection error in download
• the package resolution is now much faster and uses less memory
• add ssl_verify option in condarc to allow ignoring SSL certificate verification, see issue #737
5.147 2014-05-27 3.5.2:
• fix bug in activate.bat and deactivate.bat on Windows
5.148 2014-05-26 3.5.1:
• fix proxy support - conda now prompts for proxy username and password again
• fix activate.bat on Windows with spaces in the path
• update optional psutil dependency was updated to psutil 2.0 or higher
5.149 2014-05-15 3.5.0:
• replace use of urllib2 with requests. requests is now a hard dependency of conda.
• add ability to only allow system-wise specified channels
• hide binstar from output of conda info
5.150 2014-05-05 3.4.3:
• allow prefix replacement in binary files, see issue #710
• check if creating hard link is possible and otherwise copy, during install
• allow circular dependencies
5.151 2014-04-21 3.4.2:
• conda clean -lock: skip directories that don't exist, fixes #648
• fixed empty history file causing crash, issue #644
• remove timezone information from history file, fixes issue #651
• fix PackagesNotFound error for missing recursive dependencies
• change the default for adding cache from the local package cache - known is now the default and the option to use index metadata from the local package cache is -unknown
• add -alt-hint as a method to get an alternate form of a hint for unsatisfiable packages
• add conda package -ls-files to list files in a package
• add ability to pin specs in an environment. To pin a spec, add a file called pinned to the environment's condameta directory with the specs to pin. Pinned specs are always kept installed, unless the -no-pin flag is used.
• fix keyboard interrupting of external commands. Now keyboard interrupting conda build correctly removes the lock file
• add no_link ability to conda, see issue #678
5.152 2014-04-07 3.4.1:
• always use a pkgs cache directory associated with an envs directory, even when using -p option with an arbitrary a prefix which is not inside an envs dir
• add setting of PYTHONHOME to conda info -system
• skip packages with bad metadata
5.153 2014-04-02 3.4.0:
• added revision history to each environment:
- conda list -revisions
- conda install -revision
- log is stored in conda-meta/history
• allow parsing pip-style requirement files with -file option and in command line arguments, e.g. conda install 'numpy>=1.7', issue #624
• fix error message for -file option when file does not exist
• allow DEFAULTS in CONDA_ENVS_PATH, which expands to the defaults settings, including the condarc file
• don't install a package with a feature (like mkl) unless it is specifically requested (i.e., that feature is already enabled in that environment)
• add	ability	to	show	channel	URLs	when	displaying	what	is	going	to	be	downloaded	by	setting
"show_channel_urls: True" in condarc
• fix the -quiet option
• skip packages that have dependencies that can't be found
5.154 2014-03-24 3.3.2:
• fix the -file option
• check install arguments before fetching metadata
5.152. 2014-04-07 3.4.1:
• fix a printing glitch with the progress bars
• give a better error message for conda clean with no arguments • don't include unknown packages when searching another platform
5.155 2014-03-19 3.3.1:
• Fix setting of PS1 in activate.
• Add conda update -all.
• Allow setting CONDARC=' ' to use no condarc.
• Add conda clean -packages.
• Don't include bin/conda, bin/activate, or bin/deactivate in conda package.
5.156 2014-03-18 3.3.0:
• allow new package specification, i.e. ==, >=, >, <=, <, != separated by ',' for example: >=2.3,<3.0
• add ability to disable self update of conda, by setting "self_update: False" in .condarc
• Try installing packages using the old way of just installing the maximum versions of things first. This provides a major speedup of solving the package specifications in the cases where this scheme works.
• Don't include python=3.3 in the specs automatically for the Python 3 version of conda. This allows you to do "conda create -n env package" for a package that only has a Python 2 version without specifying "python=2". This change has no effect in Python 2.
• Automatically put symlinks to conda, activate, and deactivate in each environment on Linux and macOS.
• On Linux and macOS, activate and deactivate now remove the root environment from the PATH. This should prevent "bleed through" issues with commands not installed in the activated environment but that are installed in the root environment. If you have "setup.py develop" installed conda on Linux or macOS, you should run this command again, as the activate and deactivate scripts have changed.
• Begin work to support Python 3.4.
• Fix a bug in version comparison
• Fix usage of sys.stdout and sys.stderr in environments like pythonw on Windows where they are nonstandard file descriptors.
5.157 2014-03-12 3.2.1:
• fix installing packages with irrational versions
• fix installation in the api
• use a logging handler to print the dots
5.158 2014-03-11 3.2.0:
• print dots to the screen for progress
• move logic functions from resolve to logic module
5.159 2014-03-07 3.2.0a1:
• conda now uses pseudo-boolean constraints in the SAT solver. This allows it to search for all versions at once, rather than only the latest (issue #491).
• Conda contains a brand new logic submodule for converting pseudo-boolean constraints into SAT clauses.
5.160 2014-03-07 3.1.1:
• check if directory exists, fixed issue #591
5.161 2014-03-07 3.1.0:
• local packages in cache are now added to the index, this may be disabled by using the -known option, which only makes conda use index metadata from the known remote channels
• add -use-index-cache option to enable using cache of channel index files
• fix ownership of files when installing as root on Linux • conda search: add '.' symbol for extracted (cached) packages
5.162 2014-02-20 3.0.6:
• fix 'conda update' taking build number into account
5.163 2014-02-17 3.0.5:
• allow packages from create_default_packages to be overridden from the command line
• fixed typo install.py, issue #566
• try to prevent accidentally installing into a non-root conda environment
5.164 2014-02-14 3.0.4:
• conda update: don't try to update packages that are already up-to-date
5.158. 2014-03-11 3.2.0:
5.165 2014-02-06 3.0.3:
• improve the speed of clean -lock
• some fixes to conda config
• more tests added
• choose the first solution rather than the last when there are more than one, since this is more likely to be the one you want.
5.166 2014-02-03 3.0.2:
• fix detection of prefix being writable
5.167 2014-01-31 3.0.1:
• bug: not having track_features in condarc now uses default again
• improved test suite
• remove numpy version being treated special in plan module
• if the post-link.(bat|sh) fails, don't treat it as though it installed, i.e. it is not added to conda-meta
• fix activate if CONDA_DEFAULT_ENV is invalid
• fix conda config -get to work with list keys again
• print the total download size
• fix a bug that was preventing conda from working in Python 3
• add ability to run pre-link script, issue #548
5.168 2014-01-24 3.0.0:
• removed build, convert, index, and skeleton commands, which are now part of the conda-build project: https: //github.com/conda/conda-build
• limited pip integration to conda list, that means conda install no longer calls pip install # !!!
• add ability to call sub-commands named 'conda-x'
• The -c flag to conda search is now shorthand for -channel, not -canonical (this is to be consistent with other conda commands)
• allow changing location of .condarc file using the CONDARC environment variable
• conda search now shows the channel that the package comes from
• conda search has a new -platform flag for searching for packages in other platforms.
• remove condarc warnings: issue #526#issuecomment-33195012
5.169 2014-01-17 2.3.1:
• add ability create info/no_softlink
• add conda convert command to convert non-platform-dependent packages from one platform to another (experimental)
• unify create, install, and update code. This adds many features to create and update that were previously only available to install. A backwards incompatible change is that conda create -f now means -force, not -file.
5.170 2014-01-16 2.3.0:
• automatically prepend http://conda.binstar.org/ (or the value of channel_alias in the .condarc file) to channels whenever the channel is not a URL or the word 'defaults or 'system'
• recipes made with the skeleton pypi command will use setuptools instead of distribute
• re-work the setuptools dependency and entry_point logic so that non console_script entry_points for packages with a dependency on setuptools will get correct build script with conda skeleton pypi
• add -m, -mkdir option to conda install
• add ability to disable soft-linking
5.171 2014-01-06 2.2.8:
• add check for chrpath (on Linux) before build is started, see issue #469
• conda build: fixed ELF headers not being recognized on Python 3
• fixed issues: #467, #476
5.172 2014-01-02 2.2.7:
• fixed bug in conda build related to lchmod not being available on all platforms
5.173 2013-12-31 2.2.6:
• fix test section for automatic recipe creation from pypi using -build-recipe
• minor Py3k fixes for conda build on Linux
• copy symlinks as symlinks, issue #437
• fix explicit install (e.g. from output of conda list -e) in root env
• add pyyaml to the list of packages which can not be removed from root environment
• fixed minor issues: #365, #453
5.169. 2014-01-17 2.3.1:
5.174 2013-12-17 2.2.5:
• conda build: move broken packages to conda-bld/broken
• conda config: automatically add the 'defaults' channel
• conda build: improve error handling for invalid recipe directory
• add ability to set build string, issue #425
• fix LD_RUN_PATH not being set on Linux under Python 3, see issue #427, thanks peter1000
5.175 2013-12-10 2.2.4:
• add support for execution with the -m switch (issue #398), i.e. you can execute conda also as: python -m conda
• add a deactivate script for windows
• conda build adds .pth-file when it encounters an egg (TODO)
• add ability to preserve egg directory when building using build/preserve_egg_dir: True
• allow track_features in ~/.condarc
• Allow arbitrary source, issue #405 • fixed minor issues: #393, #402, #409, #413
5.176 2013-12-03 2.2.3:
• add "foreign mode", i.e. disallow install of certain packages when using a "foreign" Python, such as the system Python
• remove activate/deactivate from source tarball created by sdist.sh, in order to not overwrite activate script from virtualenvwrapper
5.177 2013-11-27 2.2.2:
• remove ARCH environment variable for being able to change architecture
• add PKG_NAME, PKG_VERSION to environment when running build.sh, .<name>-post-link.sh and .<name>pre-unlink.sh
5.178 2013-11-15 2.2.1:
• minor fixes related to make conda pip installable
• generated conda meta-data missing 'files' key, fixed issue #357
5.179 2013-11-14 2.2.0:
• add conda init command, to allow installing conda via pip
• fix prefix being replaced by placeholder after conda build on Linux and macOS
• add 'use_pip' to condarc configuration file
• fixed activate on Windows to set CONDA_DEFAULT_ENV
• allow setting "always_yes: True" in condarc file, which implies always using the -yes option whenever asked to proceed
5.180 2013-11-07 2.1.0:
• fix rm_egg_dirs so that the .egg_info file can be a zip file
• improve integration with pip * conda list now shows pip installed packages * conda install will try to install via "pip install" if no conda package is available (unless -no-pip is provided) * conda build has a new -build-recipe option which will create a recipe (stored in <root>/conda-recipes) from pypi then build a conda package (and install it) * pip list and pip install only happen if pip is installed
• enhance the locking mechanism so that conda can call itself in the same process.
5.181 2013-11-04 2.0.4:
• ensure lowercase name when generating package info, fixed issue #329
• on Windows, handle the .nonadmin files
5.182 2013-10-28 2.0.3:
• update bundle format
• fix bug when displaying packages to be downloaded (thanks Crystal)
5.183 2013-10-27 2.0.2:
• add -index-cache option to clean command, see issue #321 • use RPATH (instead of RUNPATH) when building packages on Linux
5.184 2013-10-23 2.0.1:
• add -no-prompt option to conda skeleton pypi
• add create_default_packages to condarc (and -no-default-packages option to create command)
5.179. 2013-11-14 2.2.0:
5.185 2013-10-01 2.0.0:
• added user/root mode and ability to soft-link across filesystems
• added create -clone option for copying local environments
• fixed behavior when installing into an environment which does not exist yet, i.e. an error occurs
• fixed install -no-deps option
• added -export option to list command
• allow building of packages in "user mode"
• regular environment locations now used for build and test
• add ability to disallow specification names
• add ability to read help messages from a file when install location is RO
• restore backwards compatibility of share/clone for conda-api
• add new conda bundle command and format
• pass ARCH environment variable to build scripts
• added progress bar to source download for conda build, issue #230
• added ability to use url instead of local file to conda install -file and conda create -file options
5.186 2013-09-06 1.9.1:
• fix bug in new caching of repodata index
5.187 2013-09-05 1.9.0:
• add caching of repodata index
• add activate command on Windows
• add conda package -which option, closes issue 163
• add ability to install file which contains multiple packages, issue 256
• move conda share functionality to conda package -share
• update documentation
• improve error messages when external dependencies are unavailable
• add implementation for issue 194: post-link or pre-unlink may append to a special file ${PREFIX}/.messages.txt for messages, which is display to the user's console after conda completes all actions
• add conda search -outdated option, which lists only installed packages for which newer versions are available
• fixed numerous Py3k issues, in particular with the build command
5.188 2013-08-16 1.8.2:
• add conda build -check option
• add conda clean -lock option
• fixed error in recipe causing conda traceback, issue 158
• fixes conda build error in Python 3, issue 238
• improve error message when test command fails, as well as issue 229
• disable Python (and other packages which are used by conda itself) to be updated in root environment on Windows
• simplified locking, in particular locking should never crash conda when files cannot be created due to permission problems
5.189 2013-08-07 1.8.1:
• fixed conda update for no arguments, issue 237
• fix setting prefix before calling should_do_win_subprocess() part of issue 235
• add basic subversion support when building
• add -output option to conda build
5.190 2013-07-31 1.8.0:
• add Python 3 support (thanks almarklein)
• add Mercurial support when building from source (thanks delicb)
• allow Python (and other packages which are used by conda itself) to be updated in root environment on Windows
• add conda config command
• add conda clean command
• removed the conda pip command
• improve locking to be finer grained
• made activate/deactivate work with zsh (thanks to mika-fischer)
• allow conda build to take tarballs containing a recipe as arguments
• add PKG_CONFIG_PATH to build environment variables
• fix entry point scripts pointing to wrong python when building Python 3 packages
• allow source/sha1 in meta.yaml, issue 196
• more informative message when there are unsatisfiable package specifications
• ability to set the proxy urls in condarc
• conda build asks to upload to binstar. This can also be configured by changing binstar_upload in condarc.
• basic tab completion if the argcomplete package is installed and eval "$(register-python-argcomplete conda)" is added to the bash profile.
5.188. 2013-08-16 1.8.2:
5.191 2013-07-02 1.7.2:
• fixed conda update when packages include a post-link step which was caused by subprocess being lazily imported, fixed by 0d0b860
• improve error message when 'chrpath' or 'patch' is not installed and needed by build framework
• fixed sharing/cloning being broken (issue 179)
• add the string LOCKERROR to the conda lock error message
5.192 2013-06-21 1.7.1:
• fix "executable" not being found on Windows when ending with .bat when launching application
• give a better error message from when a repository does not exist
5.193 2013-06-20 1.7.0:
• allow ${PREFIX} in app_entry
• add binstar upload information after conda build finishes
5.194 2013-06-20 1.7.0a2:
• add global conda lock file for only allowing one instance of conda to run at the same time
• add conda skeleton command to create recipes from PyPI
• add ability to run post-link and pre-unlink script
5.195 2013-06-13 1.7.0a1:
• add ability to build conda packages from "recipes", using the conda build command, for some examples, see: https://github.com/ContinuumIO/conda-recipes
• fixed bug in conda install -force
• conda update command no longer uses anaconda as default package name
• add proxy support
• added application API to conda.api module
• add -c/-channel and -override-channels flags (issue 121).
• add default and system meta-channels, for use in .condarc and with -c (issue 122).
• fixed ability to install ipython=0.13.0 (issue 130)
5.196 2013-06-05 1.6.0:
• update package command to reflect changes in repodata
• fixed refactoring bugs in share/clone
• warn when anaconda processes are running on install in Windows (should fix most permissions errors on Windows)
5.197 2013-05-31 1.6.0rc2:
• conda with no arguments now prints help text (issue 111)
• don't allow removing conda from root environment
• conda update python does no longer update to Python 3, also ensure that conda itself is always installed into the root environment (issue 110)
5.198 2013-05-30 1.6.0rc1:
• major internal refactoring
• use new "depends" key in repodata
• uses pycosat to solve constraints more efficiently
• add hard-linking on Windows
• fixed linking across filesystems (issue 103)
• add conda remove -features option
• added more tests, in particular for new dependency resolver
• add internal DSL to perform install actions
• add package size to download preview
• add conda install -force and -no-deps options
• fixed conda help command
• add conda remove -all option for removing entire environment
• fixed source activate on systems where sourcing a gives "bash" as $0
• add information about installed versions to conda search command
• removed known "locations"
• add output about installed packages when update and install do nothing
• changed default when prompted for y/n in CLI to yes
5.199 2013-04-29 1.5.2:
• fixed issue 59: bad error message when pkgs dir is not writable
5.196. 2013-06-05 1.6.0:
5.200 2013-04-19 1.5.1:
• fixed issue 71 and (73 duplicate): not being able to install packages starting with conda (such as 'conda-api')
• fixed issue 69 (not being able to update Python / NumPy)
• fixed issue 76 (cannot install mkl on OSX)
5.201 2013-03-22 1.5.0:
• add conda share and clone commands
• add (hidden) -output-json option to clone, share and info commands to support the conda-api package
• add repo sub-directory type 'linux-armv6l'
5.202 2013-03-12 1.4.6:
• fixed channel selection (issue #56)
5.203 2013-03-11 1.4.5:
• fix issue #53 with install for meta packages
• add -q/-quiet option to update command
5.204 2013-03-09 1.4.4:
• use numpy 1.7 as default on all platfroms
5.205 2013-03-09 1.4.3:
• fixed bug in conda.builder.share.clone_bundle()
5.206 2013-03-08 1.4.2:
• feature selection fix for update
• Windows: don't allow linking or unlinking python from the root environment because the file lock, see issue
#42
5.207 2013-03-07 1.4.1:
• fix some feature selection bugs
• never exit in activate and deactivate
• improve help and error messages
5.208 2013-03-05 1.4.0:
• fixed conda pip NAME==VERSION
• added conda info -license option
• add source activate and deactivate commands
• rename the old activate and deactivate to link and unlink
• add ability for environments to track "features"
• add ability to distinguish conda build packages from Anaconda packages by adding a "file_hash" meta-data field in info/index.json
• add conda.builder.share module
5.209 2013-02-05 1.3.5:
• fixed detecting untracked files on Windows • removed backwards compatibility to conda 1.0 version
5.210 2013-01-28 1.3.4:
• fixed conda installing itself into environments (issue #10)
• fixed non-existing channels being silently ignored (issue #12)
• fixed trailing slash in ~/.condarc file cause crash (issue #13)
• fixed conda list not working when ~/.condarc is missing (issue #14)
• fixed conda install not working for Python 2.6 environment (issue #17)
• added simple first cut implementation of remove command (issue #11)
• pip, build commands: only package up new untracked files
• allow a system-wide <sys.prefix>/.condarc (~/.condarc takes precedence)
• only add pro channel is no condarc file exists (and license is valid)
5.211 2013-01-23 1.3.3:
• fix conda create not filtering channels correctly
• remove (hidden) -test and -testgui options
5.207. 2013-03-07 1.4.1:
5.212 2013-01-23 1.3.2:
• fix deactivation of packages with same build number note that conda upgrade did not suffer from this problem, as was using separate logic
5.213 2013-01-22 1.3.1:
• fix bug in conda update not installing new dependencies
5.214 2013-01-22 1.3.0:
• added conda package command
• added conda index command
• added -c, -canonical option to list and search commands
• fixed conda -version on Windows
• add this changelog
5.215 2012-11-21 1.2.1:
• remove ambiguity from conda update command
5.216 2012-11-20 1.2.0:
• "conda upgrade" now updates from AnacondaCE to Anaconda (removed upgrade2pro
• add versioneer
5.217 2012-11-13 1.1.0:
• Many new features implemented by Bryan
5.218 2012-09-06 1.0.0:
• initial release

CHAPTER 6

Command reference

• Conda general commands
• Conda vs. pip vs. virtualenv commands
Conda provides many commands for managing packages and environments. The links on this page provide help for each command. You can also access help from the command line with the --help flag:
conda install --help
6.1 Conda general commands
The following commands are part of conda:
6.2 Conda vs. pip vs. virtualenv commands
If you have used pip and virtualenv in the past, you can use conda to perform all of the same operations. Pip is a package manager, and virtualenv is an environment manager. Conda is both.
TaskConda package and environment manager commandPip	package	manager	commandVirtualenv	environment manager commandInstall	a
packageconda install $PACKAGE_NAMEpip install $PACKAGE_NAMEXUpdate	a
packageconda update --name
$ENVIRONMENT_NAME
$PACKAGE_NAMEpip install --upgrade
$PACKAGE_NAMEXUpdate package managerconda update condaLinux/macOS: pip install -U pip Win: python -m pip install -U pipXUninstall	a packageconda remove --name
$ENVIRONMENT_NAME
$PACKAGE_NAMEpip uninstall $PACKAGE_NAMEXCreate an environmentconda create --name $ENVIRONMENT_NAME pythonXcd $ENV_BASE_DIR; virtualenv
$ENVIRONMENT_NAMEActivate	an environmentsource activate $ENVIRONMENT_NAMEXsource $ENV_BASE_DIR/ $ENVIRONMENT_NAME/ bin/activateDeactivate an environmentsource deactivateXdeactivateSearch available packagesconda search $SEARCH_TERMpip search
$SEARCH_TERMXInstall package from specific sourceconda install --channel $URL
$PACKAGE_NAMEpip install --index-url $URL
$PACKAGE_NAMEXList installed packagesconda list --name $ENVIRONMENT_NAMEpip listXCreate	re-
quirements
fileconda list --exportpip freezeXList all environmentsconda info --envsXInstall virtualenv wrapper, then lsvirtualenvInstall	other package managerconda install pippip install condaXInstall
Pythonconda install python=x.xXXUpdate
Pythonconda update python*XX* conda update python updates to the most recent in the series, so any Python 2.x would update to the latest 2.x and any Python 3.x to the latest 3.x.
Chapter 6. Command reference
CHAPTER 7

Glossary

• .condarc
• activate/deactivate environment
• Anaconda
• Anaconda Cloud
• Anaconda Navigator
• Channels
• Conda
• Conda environment
• Conda package
• Conda repository
• Metapackage
• Miniconda
• Noarch package
• Package manager
• Packages
• Repository
• Silent mode installation
7.1 .condarc
The Conda Runtime Configuration file, an optional .yaml file that allows you to configure many aspects of conda, such as which channels it searches for packages, proxy settings and environment directories. A .condarc file is not included by default, but it is automatically created in your home directory when you use the conda config command. The .condarc file can also be located in a root environment, in which case it overrides any .condarc in the home directory. For more information, see Using the .condarc conda configuration file and Administering a multi-user conda installation. Pronounced "conda r-c".
7.2 activate/deactivate environment
Conda commands used to switch or move between installed environments. The activate command prepends the path of your current environment to the PATH environment variable so that you do not need to type it each time. deactivate removes it. Even when an environment is deactivated, you can still execute programs in that environment by specifying their paths directly, as in ~/anaconda/envs/envname/bin/program_name. When an environment is activated, you can execute the program in that environment with just program_name.
NOTE: Replace envname with the name of the environment and replace program_name with the name of the program.
7.3 Anaconda
A downloadable, free, open source, high-performance and optimized Python and R distribution. Anaconda includes conda, conda build, Python and 100+ automatically installed, open source scientific packages and their dependencies that have been tested to work well together, including SciPy, NumPy and many others. Use the conda install command to easily install 1,000+ popular open source packages for data science-including advanced and scientific analytics-from the Anaconda repository. Use the conda command to install thousands more open source packages.
Because Anaconda is a Python distribution, it can make installing Python quick and easy even for new users.
Available for Windows, macOS and Linux, all versions of Anaconda are supported by the community.
See also Miniconda and Conda.
7.4 Anaconda Cloud
A web-based repository hosting service in the cloud. Packages created locally can be published to the cloud to be shared with others. Free accounts on Cloud can publish packages to be shared publicly. Paid subscriptions to Cloud can designate packages as private to be shared with authorized users. Anaconda Cloud is a public version of Anaconda Repository.
7.5 Anaconda Navigator
A desktop graphical user interface (GUI) included in all versions of Anaconda that allows you to easily manage conda packages, environments, channels and notebooks without a command line interface (CLI).
Chapter 7. Glossary
conda Documentation, Release 4.6.0

7.6 Channels
The locations of the repositories where conda looks for packages. Channels may point to a Cloud repository or a private location on a remote or local repository that you or your organization created. The conda channel command has a default set of channels to search, beginning with https://repo.continuum.io/pkgs/, which you may override, for example, to maintain a private or internal channel. These default channels are referred to in conda commands and in the .condarc file by the channel name "defaults."
7.7 Conda
The package and environment manager program bundled with Anaconda that installs and updates conda packages and their dependencies. Conda also lets you easily switch between conda environments on your local computer.
7.8 Conda environment
A folder or directory that contains a specific collection of conda packages and their dependencies, so they can be maintained and run separately without interference from each other. For example, you may use a conda environment for only Python 2 and Python 2 packages, maintain another conda environment with only Python 3 and Python 3 packages, and maintain another for R language packages. Environments can be created from:
• The Navigator GUI.
• The command line.
• An environment specification file with the name your-environment-name.yml.
NOTE: Replace your-environment-name with the name of your environment.
7.9 Conda package
A compressed file that contains everything that a software program needs in order to be installed and run, so that you do not have to manually find and install each dependency separately. A conda package includes system-level libraries,
Python or R language modules, executable programs and other components. You manage conda packages with conda.
7.10 Conda repository
A cloud-based repository that contains 720+ open source certified packages that are easily installed locally with the conda install command. Anyone can access the repository from:
• The Navigator GUI.
• A Terminal or Anaconda Prompt using conda commands.
• https://repo.continuum.io/pkgs/.
7.6. Channels
7.11 Metapackage
A conda package that only lists dependencies and does not include any functional programs or libraries. The metapackage may contain links to software files that are automatically downloaded when executed. An example of a metapackage is "anaconda," which collects together all the packages in the Anaconda installer. The command conda create -n envname anaconda creates an environment that exactly matches what would be created from the Anaconda installer. You can create metapackages with the conda metapackage command.
7.12 Miniconda
A free minimal installer for conda. Miniconda is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on and a small number of other useful packages, including pip, zlib and a few others. Use the conda install command to install 720+ additional conda packages from the Anaconda repository.
Because Miniconda is a Python distribution, and it can make installing Python quick and easy even for new users.
See also Anaconda and Conda.
7.13 Noarch package
A conda package that contains nothing specific to any system architecture, so it may be installed from any system. When conda searches for packages on any system in a channel, conda checks both the system-specific subdirectory, such as linux-64, and the noarch directory. Noarch is a contraction of "no architecture".
7.14 Package manager
A collection of software tools that automates the process of installing, updating, configuring and removing computer programs for a computer's operating system. Also known as a package management system. Conda is a package manager.
7.15 Packages
Software files and information about the software, such as its name, the specific version and a description, bundled into a file that can be installed and managed by a package manager.
7.16 Repository
Any storage location from which software assets may be retrieved and installed on a local computer. See also Anaconda Cloud and Conda repository.
7.17 Silent mode installation
When installing Miniconda or Anaconda in silent mode, screen prompts are not shown on screen and default settings are automatically accepted.
Chapter 7. Glossary

Python Module Index

c
conda.api, 94 conda.cli.python_api, 93 conda.core.solve, 91

Python Module Index

C
CLEAN (conda.cli.python_api.Commands attribute), 93 Commands (class in conda.cli.python_api), 93 conda.api (module), 94 conda.cli.python_api (module), 93 conda.core.solve (module), 91
CONFIG (conda.cli.python_api.Commands attribute), 93 CREATE (conda.cli.python_api.Commands attribute), 93
D
DepsModifier (class in conda.core.solve), 91
F
first_writable() (conda.api.PackageCacheData static method), 96
G
get() (conda.api.PackageCacheData method), 97 get() (conda.api.PrefixData method), 98
H
HELP (conda.cli.python_api.Commands attribute), 93
I
INFO (conda.cli.python_api.Commands attribute), 93
INSTALL (conda.cli.python_api.Commands attribute),
        93 is_writable (conda.api.PackageCacheData	attribute), 97
is_writable (conda.api.PrefixData attribute), 98 iter_records()	(conda.api.PackageCacheData method), 97
iter_records() (conda.api.PrefixData method), 98 iter_records() (conda.api.SubdirData method), 96
L
LIST (conda.cli.python_api.Commands attribute), 93
Index
N
NO_DEPS (conda.core.solve.DepsModifier attribute), 91
NOT_SET (conda.core.solve.DepsModifier attribute), 91
O
ONLY_DEPS (conda.core.solve.DepsModifier attribute),
91
P
PackageCacheData (class in conda.api), 96
PrefixData (class in conda.api), 98
Q
query() (conda.api.PackageCacheData method), 97 query() (conda.api.PrefixData method), 98 query() (conda.api.SubdirData method), 96 query_all() (conda.api.PackageCacheData	static method), 97
query_all() (conda.api.SubdirData static method), 96
R
reload() (conda.api.PackageCacheData method), 97 reload() (conda.api.PrefixData method), 98 reload() (conda.api.SubdirData method), 96 REMOVE (conda.cli.python_api.Commands attribute), 93 run_command() (in module conda.cli.python_api), 93
S
SEARCH (conda.cli.python_api.Commands attribute), 93 solve_final_state() (conda.api.Solver method),
        94 solve_final_state() (conda.core.solve.Solver method), 91
solve_for_diff() (conda.api.Solver method), 95 solve_for_diff()	(conda.core.solve.Solver method), 92
solve_for_transaction()	(conda.api.Solver method), 95

solve_for_transaction()
(conda.core.solve.Solver method), 93
Solver (class in conda.api), 94
Solver (class in conda.core.solve), 91 SubdirData (class in conda.api), 96
U
UPDATE (conda.cli.python_api.Commands attribute), 93
Index




































conda Documentation, Release 4.6.0



2

1



1

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

4	Chapter 1. User guide

1

conda Documentation, Release 4.6.0

4	Chapter 1. User guide

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

4	Chapter 1. User guide

1.5. Configuration	17

conda Documentation, Release 4.6.0

1.5. Configuration	17

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

4	Chapter 1. User guide

1.6. Tasks	33

conda Documentation, Release 4.6.0

1.6. Tasks	33

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

4	Chapter 1. User guide

1.8. Troubleshooting	53

conda Documentation, Release 4.6.0

1

conda Documentation, Release 4.6.0



4	Chapter 1. User guide

1

conda Documentation, Release 4.6.0

1

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

66	Chapter 2. Conda Commands

1

conda Documentation, Release 4.6.0

66	Chapter 2. Conda Commands

conda Documentation, Release 4.6.0
(continued from previous page)

conda Documentation, Release 4.6.0
(continued from previous page)

(continues on next page)
82	Chapter 3. Conda Configuration

(continues on next page)
83



(continues on next page)
81

conda Documentation, Release 4.6.0
(continued from previous page)
# #

conda Documentation, Release 4.6.0
(continued from previous page)
# #

# #
(continues on next page)
86	Chapter 3. Conda Configuration

# #
(continues on next page)
85

conda Documentation, Release 4.6.0
(continued from previous page)

# #
(continues on next page)
85

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0
(continued from previous page)

	90	Chapter 3. Conda Configuration

1

conda Documentation, Release 4.6.0
(continued from previous page)
# #

(continues on next page)
82	Chapter 3. Conda Configuration

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

92	Chapter 4. Conda Python API

1



1

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

1



1

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

5.25. 4.4.0 (2017-12-20)	113

conda Documentation, Release 4.6.0

5.25. 4.4.0 (2017-12-20)	113

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0

1

conda Documentation, Release 4.6.0
•

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0
•

100	Chapter 5. Release notes

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

conda Documentation, Release 4.6.0
•

conda Documentation, Release 4.6.0
•

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0
•

1

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

conda Documentation, Release 4.6.0
•

conda Documentation, Release 4.6.0
•

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0
•

1

conda Documentation, Release 4.6.0

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

1

conda Documentation, Release 4.6.0

100	Chapter 5. Release notes

conda Documentation, Release 4.6.0



2

1



1

