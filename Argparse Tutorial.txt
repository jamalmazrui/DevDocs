
Argparse Tutorial
Release 3.13.2
Guido van Rossum and the Python development team
February 15, 2025
Python Software Foundation
Email: docs@python.org
Contents
1 Concepts	2
2 The basics	2
3 Introducing Positional arguments	3
4 Introducing Optional arguments	4
	4.1	Short options	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	6
5 Combining Positional and Optional arguments	6
6	Getting a little more advanced	10
	6.1	Specifying ambiguous arguments	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	11
	6.2	Conflicting options	. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .	12
7 How to translate the argparse output	13
8 Custom type converters	14
9	Conclusion	14

author
Tshepang Mbambo
This tutorial is intended to be a gentle introduction to argparse, the recommended command-line parsing module in the Python standard library.
(r) Note
The standard library includes two other libraries directly related to command-line parameter processing: the lower level optparse module (which may require more code to configure for a given application, but also allows an application to request behaviors that argparse doesn't support), and the very low level getopt (which specifically serves as an equivalent to the getopt() family of functions available to C programmers). While neither of those modules is covered directly in this guide, many of the core concepts in argparse first originated in optparse, so some aspects of this tutorial will also be relevant to optparse users.
1 Concepts
Let's show the sort of functionality that we are going to explore in this introductory tutorial by making use of the ls command:
$ ls
cpython devguide prog.py pypy rm-unused-function.patch
$ ls pypy ctypes_configure demo dotviewer include lib_pypy lib-python ...
$ ls -l
total 20
drwxr-xr-x 19 wena wena 4096 Feb 18 18:51 cpython drwxr-xr-x 4 wena wena 4096 Feb 8 12:04 devguide -rwxr-xr-x 1 wena wena 535 Feb 19 00:05 prog.py drwxr-xr-x 14 wena wena 4096 Feb 7 00:59 pypy
-rw-r--r-- 1 wena wena 741 Feb 18 01:01 rm-unused-function.patch
$ ls --help
Usage: ls [OPTION]... [FILE]...
List information about the FILEs (the current directory by default).
Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.
...
A few concepts we can learn from the four commands:
• The ls command is useful when run without any options at all. It defaults to displaying the contents of the current directory.
• If we want beyond what it provides by default, we tell it a bit more. In this case, we want it to display a different directory, pypy. What we did is specify what is known as a positional argument. It's named so because the program should know what to do with the value, solely based on where it appears on the command line. This concept is more relevant to a command like cp, whose most basic usage is cp SRC DEST. The first position is what you want copied, and the second position is where you want it copied to.
• Now, say we want to change behaviour of the program. In our example, we display more info for each file instead of just showing the file names. The -l in that case is known as an optional argument.
• That's a snippet of the help text. It's very useful in that you can come across a program you have never used before, and can figure out how it works simply by reading its help text.
2 The basics
Let us start with a very simple example which does (almost) nothing:

Following is a result of running the code:


Here is what is happening:
• Running the script without any options results in nothing displayed to stdout. Not so useful.
• The second one starts to display the usefulness of the argparse module. We have done almost nothing, but already we get a nice help message.
• The --help option, which can also be shortened to -h, is the only option we get for free (i.e. no need to specify it). Specifying anything else results in an error. But even then, we do get a useful usage message, also for free.
3 Introducing Positional arguments
An example:

And running the code:

Here is what's happening:
• We've added the add_argument() method, which is what we use to specify which command-line options the program is willing to accept. In this case, I've named it echo so that it's in line with its function.
• Calling our program now requires us to specify an option.
• The parse_args() method actually returns some data from the options specified, in this case, echo.
• The variable is some form of 'magic' that argparse performs for free (i.e. no need to specify which variable that value is stored in). You will also notice that its name matches the string argument given to the method, echo.
Note however that, although the help display looks nice and all, it currently is not as helpful as it can be. For example we see that we got echo as a positional argument, but we don't know what it does, other than by guessing or by reading the source code. So, let's make it a bit more useful:

(continued from previous page)

And we get:

Now, how about doing something even more useful:

Following is a result of running the code:

That didn't go so well. That's because argparse treats the options we give it as strings, unless we tell it otherwise. So, let's tell argparse to treat that input as an integer:

Following is a result of running the code:

That went well. The program now even helpfully quits on bad illegal input before proceeding.
4 Introducing Optional arguments
So far we have been playing with positional arguments. Let us have a look on how to add optional ones:



And the output:

Here is what is happening:
• The program is written so as to display something when --verbosity is specified and display nothing when not.
• To show that the option is actually optional, there is no error when running the program without it. Note that by default, if an optional argument isn't used, the relevant variable, in this case args.verbosity, is given None as a value, which is the reason it fails the truth test of the if statement.
• The help message is a bit different.
• When using the --verbosity option, one must also specify some value, any value.
The above example accepts arbitrary integer values for --verbosity, but for our simple program, only two values are actually useful, True or False. Let's modify the code accordingly:

And the output:

Here is what is happening:
• The option is now more of a flag than something that requires a value. We even changed the name of the option to match that idea. Note that we now specify a new keyword, action, and give it the value "store_true". This means that, if the option is specified, assign the value True to args.verbose. Not specifying it implies False.
• It complains when you specify a value, in true spirit of what flags actually are.
• Notice the different help text.
4.1 Short options
If you are familiar with command line usage, you will notice that I haven't yet touched on the topic of short versions of the options. It's quite simple:

And here goes:

Note that the new ability is also reflected in the help text.
5 Combining Positional and Optional arguments
Our program keeps growing in complexity:

And now the output:


• We've brought back a positional argument, hence the complaint.
• Note that the order does not matter.
How about we give this program of ours back the ability to have multiple verbosity values, and actually get to use them:

And the output:

These all look good except the last one, which exposes a bug in our program. Let's fix it by restricting the values the --verbosity option can accept:

(continued from previous page)

And the output:

Note that the change also reflects both in the error message as well as the help string.
Now, let's use a different approach of playing with verbosity, which is pretty common. It also matches the way the CPython executable handles its own verbosity argument (check the output of python --help):

We have introduced another action, "count", to count the number of occurrences of specific options.



• Yes, it's now more of a flag (similar to action="store_true") in the previous version of our script. That should explain the complaint.
• It also behaves similar to "store_true" action.
• Now here's a demonstration of what the "count" action gives. You've probably seen this sort of usage before.
• And if you don't specify the -v flag, that flag is considered to have None value.
• As should be expected, specifying the long form of the flag, we should get the same output.
• Sadly, our help output isn't very informative on the new ability our script has acquired, but that can always be fixed by improving the documentation for our script (e.g. via the help keyword argument).
• That last output exposes a bug in our program.
Let's fix:

And this is what it gives:

• First output went well, and fixes the bug we had before. That is, we want any value >= 2 to be as verbose as possible.
• Third output not so good.
Let's fix that bug:

We've just introduced yet another keyword, default. We've set it to 0 in order to make it comparable to the other int values. Remember that by default, if an optional argument isn't specified, it gets the None value, and that cannot be compared to an int value (hence the TypeError exception).
And:

You can go quite far just with what we've learned so far, and we have only scratched the surface. The argparse module is very powerful, and we'll explore a bit more of it before we end this tutorial.
6 Getting a little more advanced
What if we wanted to expand our tiny program to perform other powers, not just squares:

Output:


Notice that so far we've been using verbosity level to change the text that gets displayed. The following example instead uses verbosity level to display more text instead:

Output:

6.1 Specifying ambiguous arguments
When there is ambiguity in deciding whether an argument is positional or for an argument, -- can be used to tell parse_args() that everything after that is a positional argument:

6.2 Conflicting options
So far, we have been working with two methods of an argparse.ArgumentParser instance. Let's introduce a third one, add_mutually_exclusive_group(). It allows for us to specify options that conflict with each other. Let's also change the rest of the program so that the new functionality makes more sense: we'll introduce the --quiet option, which will be the opposite of the --verbose one:

Our program is now simpler, and we've lost some functionality for the sake of demonstration. Anyways, here's the output:

That should be easy to follow. I've added that last output so you can see the sort of flexibility you get, i.e. mixing long form options with short form ones.
Before we conclude, you probably want to tell your users the main purpose of your program, just in case they don't know:


Note that slight difference in the usage text. Note the [-v | -q], which tells us that we can either use -v or -q, but not both at the same time:

7 How to translate the argparse output
The output of the argparse module such as its help text and error messages are all made translatable using the gettext module. This allows applications to easily localize messages produced by argparse. See also i18n-howto. For instance, in this argparse output:

The strings usage:, positional arguments:, options: and show this help message and exit are all translatable.
In order to translate these strings, they must first be extracted into a .po file. For example, using Babel, run this command:
$ pybabel extract -o messages.po /usr/lib/python3.12/argparse.py
This command will extract all translatable strings from the argparse module and output them into a file named messages.po. This command assumes that your Python installation is in /usr/lib.
You can find out the location of the argparse module on your system using this script:

Once the messages in the .po file are translated and the translations are installed using gettext, argparse will be able to display the translated messages.
To translate your own strings in the argparse output, use gettext.
8 Custom type converters
The argparse module allows you to specify custom type converters for your command-line arguments. This allows you to modify user input before it's stored in the argparse.Namespace. This can be useful when you need to pre-process the input before it is used in your program.
When using a custom type converter, you can use any callable that takes a single string argument (the argument value) and returns the converted value. However, if you need to handle more complex scenarios, you can use a custom action class with the action parameter instead.
For example, let's say you want to handle arguments with different prefixes and process them accordingly:

Output:

In this example, we:
• Created a parser with custom prefix characters using the prefix_chars parameter.
• Defined two arguments, -a and +a, which used the type parameter to create custom type converters to store the value in a tuple with the prefix.
Without the custom type converters, the arguments would have treated the -a and +a as the same argument, which would have been undesirable. By using custom type converters, we were able to differentiate between the two arguments.
9 Conclusion
The argparse module offers a lot more than shown here. Its docs are quite detailed and thorough, and full of examples. Having gone through this tutorial, you should easily digest them without feeling overwhelmed.


(continued from previous page)

(continues on next page)
2

(continues on next page)
2



1



(continued from previous page)

(continues on next page)
6

(continues on next page)
6

(continued from previous page)

1



(continued from previous page)

1

1

(continued from previous page)

1

